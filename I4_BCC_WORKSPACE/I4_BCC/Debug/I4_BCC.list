
I4_BCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c66c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  0800c80c  0800c80c  0001c80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cac4  0800cac4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800cac4  0800cac4  0001cac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cacc  0800cacc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cacc  0800cacc  0001cacc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cad0  0800cad0  0001cad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800cad4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007aa0  20000078  0800cb4c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007b18  0800cb4c  00027b18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d4a2  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007044  00000000  00000000  0004d54a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002540  00000000  00000000  00054590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002218  00000000  00000000  00056ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002398a  00000000  00000000  00058ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00039e61  00000000  00000000  0007c672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b0927  00000000  00000000  000b64d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166dfa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099cc  00000000  00000000  00166e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c7f4 	.word	0x0800c7f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800c7f4 	.word	0x0800c7f4

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
#include "main.h"

int main()
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0

	SystemManager_Init();
 80004e8:	f00b fe87 	bl	800c1fa <SystemManager_Init>

	osKernelInitialize();
 80004ec:	f007 fd5c 	bl	8007fa8 <osKernelInitialize>

	MX_FREERTOS_Init();
 80004f0:	f001 faaa 	bl	8001a48 <MX_FREERTOS_Init>

	osKernelStart();
 80004f4:	f007 fd7c 	bl	8007ff0 <osKernelStart>
 80004f8:	2300      	movs	r3, #0

}
 80004fa:	4618      	mov	r0, r3
 80004fc:	bd80      	pop	{r7, pc}
	...

08000500 <Btc_EnableUart>:
void Btc_RxVal();
void Btc_EnableUart();
void Btc_IgnitionState();

void Btc_EnableUart()
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0

	Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT(&huart1, &Btc_RxData, 1);
 8000504:	2201      	movs	r2, #1
 8000506:	4903      	ldr	r1, [pc, #12]	; (8000514 <Btc_EnableUart+0x14>)
 8000508:	4803      	ldr	r0, [pc, #12]	; (8000518 <Btc_EnableUart+0x18>)
 800050a:	f00b f8c1 	bl	800b690 <Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT>

}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000098 	.word	0x20000098
 8000518:	2000072c 	.word	0x2000072c

0800051c <Btc_IgnitionState>:

void Btc_IgnitionState()
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0

	uint8 stateValue = STD_LOW;
 8000522:	2300      	movs	r3, #0
 8000524:	71fb      	strb	r3, [r7, #7]

	if(Btc_IgnitionStepOne == STD_LOW && Btc_IgnitionStepTwo == STD_LOW && Btc_IgnitionTurnOff == STD_LOW)
 8000526:	4b21      	ldr	r3, [pc, #132]	; (80005ac <Btc_IgnitionState+0x90>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d129      	bne.n	8000582 <Btc_IgnitionState+0x66>
 800052e:	4b20      	ldr	r3, [pc, #128]	; (80005b0 <Btc_IgnitionState+0x94>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d125      	bne.n	8000582 <Btc_IgnitionState+0x66>
 8000536:	4b1f      	ldr	r3, [pc, #124]	; (80005b4 <Btc_IgnitionState+0x98>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d121      	bne.n	8000582 <Btc_IgnitionState+0x66>
	{

		Btc_LightSwitch 		= STD_LOW;
 800053e:	4b1e      	ldr	r3, [pc, #120]	; (80005b8 <Btc_IgnitionState+0x9c>)
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
		Btc_HighBeam 			= STD_LOW;
 8000544:	4b1d      	ldr	r3, [pc, #116]	; (80005bc <Btc_IgnitionState+0xa0>)
 8000546:	2200      	movs	r2, #0
 8000548:	701a      	strb	r2, [r3, #0]
		Btc_FlashHighBeam 		= STD_LOW;
 800054a:	4b1d      	ldr	r3, [pc, #116]	; (80005c0 <Btc_IgnitionState+0xa4>)
 800054c:	2200      	movs	r2, #0
 800054e:	701a      	strb	r2, [r3, #0]
		Btc_FrontFogLight 		= STD_LOW;
 8000550:	4b1c      	ldr	r3, [pc, #112]	; (80005c4 <Btc_IgnitionState+0xa8>)
 8000552:	2200      	movs	r2, #0
 8000554:	701a      	strb	r2, [r3, #0]
		Btc_TurnSignalLeft 		= STD_LOW;
 8000556:	4b1c      	ldr	r3, [pc, #112]	; (80005c8 <Btc_IgnitionState+0xac>)
 8000558:	2200      	movs	r2, #0
 800055a:	701a      	strb	r2, [r3, #0]
		Btc_TurnSignalRight 	= STD_LOW;
 800055c:	4b1b      	ldr	r3, [pc, #108]	; (80005cc <Btc_IgnitionState+0xb0>)
 800055e:	2200      	movs	r2, #0
 8000560:	701a      	strb	r2, [r3, #0]
		Btc_HazardLight 		= STD_LOW;
 8000562:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <Btc_IgnitionState+0xb4>)
 8000564:	2200      	movs	r2, #0
 8000566:	701a      	strb	r2, [r3, #0]
		Btc_BrakeLight 			= STD_LOW;
 8000568:	4b1a      	ldr	r3, [pc, #104]	; (80005d4 <Btc_IgnitionState+0xb8>)
 800056a:	2200      	movs	r2, #0
 800056c:	701a      	strb	r2, [r3, #0]
		Btc_RearFogLight 		= STD_LOW;
 800056e:	4b1a      	ldr	r3, [pc, #104]	; (80005d8 <Btc_IgnitionState+0xbc>)
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]
		Btc_ReverseLight 		= STD_LOW;
 8000574:	4b19      	ldr	r3, [pc, #100]	; (80005dc <Btc_IgnitionState+0xc0>)
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]
		Btc_IntLights 			= STD_LOW;
 800057a:	4b19      	ldr	r3, [pc, #100]	; (80005e0 <Btc_IgnitionState+0xc4>)
 800057c:	2200      	movs	r2, #0
 800057e:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8000580:	e00f      	b.n	80005a2 <Btc_IgnitionState+0x86>
	else if(Btc_IgnitionStepOne == STD_HIGH)
 8000582:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <Btc_IgnitionState+0x90>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b01      	cmp	r3, #1
 8000588:	d10b      	bne.n	80005a2 <Btc_IgnitionState+0x86>
		Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONZERO;
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <Btc_IgnitionState+0x9c>)
 800058c:	2217      	movs	r2, #23
 800058e:	701a      	strb	r2, [r3, #0]
		stateValue = STD_LOW;
 8000590:	2300      	movs	r3, #0
 8000592:	71fb      	strb	r3, [r7, #7]
		Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState(&stateValue);
 8000594:	1dfb      	adds	r3, r7, #7
 8000596:	4618      	mov	r0, r3
 8000598:	f00a fe78 	bl	800b28c <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState>
		Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 800059c:	4806      	ldr	r0, [pc, #24]	; (80005b8 <Btc_IgnitionState+0x9c>)
 800059e:	f00a ff25 	bl	800b3ec <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	200000a7 	.word	0x200000a7
 80005b0:	200000a8 	.word	0x200000a8
 80005b4:	200000a9 	.word	0x200000a9
 80005b8:	2000009c 	.word	0x2000009c
 80005bc:	2000009d 	.word	0x2000009d
 80005c0:	2000009e 	.word	0x2000009e
 80005c4:	2000009f 	.word	0x2000009f
 80005c8:	200000a0 	.word	0x200000a0
 80005cc:	200000a1 	.word	0x200000a1
 80005d0:	200000a2 	.word	0x200000a2
 80005d4:	200000a3 	.word	0x200000a3
 80005d8:	200000a4 	.word	0x200000a4
 80005dc:	200000a5 	.word	0x200000a5
 80005e0:	200000a6 	.word	0x200000a6

080005e4 <Btc_RxVal>:
	return (E_OK);

}

void Btc_RxVal()
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0

	if(Rte_Call_Crc_R_CrcPort_Crc_VerifyUartData() == E_OK)
 80005e8:	f00b f960 	bl	800b8ac <Crc_VerifyUartData>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	f040 8125 	bne.w	800083e <Btc_RxVal+0x25a>
	{

		switch(Btc_ReceivedDataOnBluetooth)
 80005f4:	4b93      	ldr	r3, [pc, #588]	; (8000844 <Btc_RxVal+0x260>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	3b01      	subs	r3, #1
 80005fa:	2b1c      	cmp	r3, #28
 80005fc:	f200 811e 	bhi.w	800083c <Btc_RxVal+0x258>
 8000600:	a201      	add	r2, pc, #4	; (adr r2, 8000608 <Btc_RxVal+0x24>)
 8000602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000606:	bf00      	nop
 8000608:	0800070d 	.word	0x0800070d
 800060c:	0800071b 	.word	0x0800071b
 8000610:	08000729 	.word	0x08000729
 8000614:	08000737 	.word	0x08000737
 8000618:	08000745 	.word	0x08000745
 800061c:	08000753 	.word	0x08000753
 8000620:	08000761 	.word	0x08000761
 8000624:	0800077b 	.word	0x0800077b
 8000628:	08000789 	.word	0x08000789
 800062c:	080007a3 	.word	0x080007a3
 8000630:	080007b1 	.word	0x080007b1
 8000634:	080007bf 	.word	0x080007bf
 8000638:	080007cd 	.word	0x080007cd
 800063c:	080007db 	.word	0x080007db
 8000640:	080007e9 	.word	0x080007e9
 8000644:	080007f7 	.word	0x080007f7
 8000648:	08000805 	.word	0x08000805
 800064c:	08000813 	.word	0x08000813
 8000650:	08000821 	.word	0x08000821
 8000654:	0800082f 	.word	0x0800082f
 8000658:	080006b9 	.word	0x080006b9
 800065c:	080006c7 	.word	0x080006c7
 8000660:	080006d5 	.word	0x080006d5
 8000664:	080006e3 	.word	0x080006e3
 8000668:	080006f1 	.word	0x080006f1
 800066c:	080006ff 	.word	0x080006ff
 8000670:	0800067d 	.word	0x0800067d
 8000674:	08000691 	.word	0x08000691
 8000678:	080006a5 	.word	0x080006a5
		{

			case BTC_RX_IGNITION_STEP_ONE:

				Btc_IgnitionStepOne = STD_HIGH;
 800067c:	4b72      	ldr	r3, [pc, #456]	; (8000848 <Btc_RxVal+0x264>)
 800067e:	2201      	movs	r2, #1
 8000680:	701a      	strb	r2, [r3, #0]
				Btc_IgnitionStepTwo = STD_LOW;
 8000682:	4b72      	ldr	r3, [pc, #456]	; (800084c <Btc_RxVal+0x268>)
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
				Btc_IgnitionTurnOff = STD_LOW;
 8000688:	4b71      	ldr	r3, [pc, #452]	; (8000850 <Btc_RxVal+0x26c>)
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]

				break;
 800068e:	e0d6      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_IGNITION_STEP_TWO:

				Btc_IgnitionStepTwo = STD_HIGH;
 8000690:	4b6e      	ldr	r3, [pc, #440]	; (800084c <Btc_RxVal+0x268>)
 8000692:	2201      	movs	r2, #1
 8000694:	701a      	strb	r2, [r3, #0]
				Btc_IgnitionStepOne = STD_LOW;
 8000696:	4b6c      	ldr	r3, [pc, #432]	; (8000848 <Btc_RxVal+0x264>)
 8000698:	2200      	movs	r2, #0
 800069a:	701a      	strb	r2, [r3, #0]
				Btc_IgnitionTurnOff = STD_LOW;
 800069c:	4b6c      	ldr	r3, [pc, #432]	; (8000850 <Btc_RxVal+0x26c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	701a      	strb	r2, [r3, #0]

				break;
 80006a2:	e0cc      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_IGNITION_TURN_OFF:

				Btc_IgnitionStepTwo = STD_LOW;
 80006a4:	4b69      	ldr	r3, [pc, #420]	; (800084c <Btc_RxVal+0x268>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
				Btc_IgnitionStepOne = STD_LOW;
 80006aa:	4b67      	ldr	r3, [pc, #412]	; (8000848 <Btc_RxVal+0x264>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
				Btc_IgnitionTurnOff = STD_HIGH;
 80006b0:	4b67      	ldr	r3, [pc, #412]	; (8000850 <Btc_RxVal+0x26c>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]

				break;
 80006b6:	e0c2      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_REVERSELIGHT_ON:

				Btc_ReverseLight = STD_HIGH;
 80006b8:	4b66      	ldr	r3, [pc, #408]	; (8000854 <Btc_RxVal+0x270>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(&Btc_ReverseLight);
 80006be:	4865      	ldr	r0, [pc, #404]	; (8000854 <Btc_RxVal+0x270>)
 80006c0:	f00a fe52 	bl	800b368 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>

				break;
 80006c4:	e0bb      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF:

				Btc_ReverseLight = STD_LOW;
 80006c6:	4b63      	ldr	r3, [pc, #396]	; (8000854 <Btc_RxVal+0x270>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(&Btc_ReverseLight);
 80006cc:	4861      	ldr	r0, [pc, #388]	; (8000854 <Btc_RxVal+0x270>)
 80006ce:	f00a fe4b 	bl	800b368 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>

				break;
 80006d2:	e0b4      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_POSITIONZERO:

				Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONZERO;
 80006d4:	4b60      	ldr	r3, [pc, #384]	; (8000858 <Btc_RxVal+0x274>)
 80006d6:	2217      	movs	r2, #23
 80006d8:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 80006da:	485f      	ldr	r0, [pc, #380]	; (8000858 <Btc_RxVal+0x274>)
 80006dc:	f00a fe86 	bl	800b3ec <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>

				break;
 80006e0:	e0ad      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:

				Btc_LightSwitch = BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
 80006e2:	4b5d      	ldr	r3, [pc, #372]	; (8000858 <Btc_RxVal+0x274>)
 80006e4:	2218      	movs	r2, #24
 80006e6:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 80006e8:	485b      	ldr	r0, [pc, #364]	; (8000858 <Btc_RxVal+0x274>)
 80006ea:	f00a fe7f 	bl	800b3ec <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>

				break;
 80006ee:	e0a6      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_POSITIONLIGHTS:

				Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
 80006f0:	4b59      	ldr	r3, [pc, #356]	; (8000858 <Btc_RxVal+0x274>)
 80006f2:	2219      	movs	r2, #25
 80006f4:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 80006f6:	4858      	ldr	r0, [pc, #352]	; (8000858 <Btc_RxVal+0x274>)
 80006f8:	f00a fe78 	bl	800b3ec <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>

				break;
 80006fc:	e09f      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:

				Btc_LightSwitch = BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
 80006fe:	4b56      	ldr	r3, [pc, #344]	; (8000858 <Btc_RxVal+0x274>)
 8000700:	221a      	movs	r2, #26
 8000702:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 8000704:	4854      	ldr	r0, [pc, #336]	; (8000858 <Btc_RxVal+0x274>)
 8000706:	f00a fe71 	bl	800b3ec <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>

				break;
 800070a:	e098      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_CENLOC_ON:

				Btc_CenLoc = STD_HIGH;
 800070c:	4b53      	ldr	r3, [pc, #332]	; (800085c <Btc_RxVal+0x278>)
 800070e:	2201      	movs	r2, #1
 8000710:	701a      	strb	r2, [r3, #0]
				Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(&Btc_CenLoc);
 8000712:	4852      	ldr	r0, [pc, #328]	; (800085c <Btc_RxVal+0x278>)
 8000714:	f00a fda4 	bl	800b260 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>

				break;
 8000718:	e091      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_CENLOC_OFF:

				Btc_CenLoc = STD_LOW;
 800071a:	4b50      	ldr	r3, [pc, #320]	; (800085c <Btc_RxVal+0x278>)
 800071c:	2200      	movs	r2, #0
 800071e:	701a      	strb	r2, [r3, #0]
				Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(&Btc_CenLoc);
 8000720:	484e      	ldr	r0, [pc, #312]	; (800085c <Btc_RxVal+0x278>)
 8000722:	f00a fd9d 	bl	800b260 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>

				break;
 8000726:	e08a      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_HIGHBEAM_ON:

				Btc_HighBeam = STD_HIGH;
 8000728:	4b4d      	ldr	r3, [pc, #308]	; (8000860 <Btc_RxVal+0x27c>)
 800072a:	2201      	movs	r2, #1
 800072c:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(&Btc_HighBeam);
 800072e:	484c      	ldr	r0, [pc, #304]	; (8000860 <Btc_RxVal+0x27c>)
 8000730:	f00a fe72 	bl	800b418 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>

				break;
 8000734:	e083      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_HIGHBEAM_OFF:

				Btc_HighBeam = STD_LOW;
 8000736:	4b4a      	ldr	r3, [pc, #296]	; (8000860 <Btc_RxVal+0x27c>)
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(&Btc_HighBeam);
 800073c:	4848      	ldr	r0, [pc, #288]	; (8000860 <Btc_RxVal+0x27c>)
 800073e:	f00a fe6b 	bl	800b418 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>

				break;
 8000742:	e07c      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_ON:

				Btc_FlashHighBeam = STD_HIGH;
 8000744:	4b47      	ldr	r3, [pc, #284]	; (8000864 <Btc_RxVal+0x280>)
 8000746:	2201      	movs	r2, #1
 8000748:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState(&Btc_FlashHighBeam);
 800074a:	4846      	ldr	r0, [pc, #280]	; (8000864 <Btc_RxVal+0x280>)
 800074c:	f00a fe22 	bl	800b394 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState>

				break;
 8000750:	e075      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_OFF:

				Btc_FlashHighBeam = STD_LOW;
 8000752:	4b44      	ldr	r3, [pc, #272]	; (8000864 <Btc_RxVal+0x280>)
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState(&Btc_FlashHighBeam);
 8000758:	4842      	ldr	r0, [pc, #264]	; (8000864 <Btc_RxVal+0x280>)
 800075a:	f00a fe1b 	bl	800b394 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState>

				break;
 800075e:	e06e      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:

				Btc_TurnSignalLeft = STD_HIGH;
 8000760:	4b41      	ldr	r3, [pc, #260]	; (8000868 <Btc_RxVal+0x284>)
 8000762:	2201      	movs	r2, #1
 8000764:	701a      	strb	r2, [r3, #0]
				Btc_TurnSignalRight = STD_LOW;
 8000766:	4b41      	ldr	r3, [pc, #260]	; (800086c <Btc_RxVal+0x288>)
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 800076c:	483e      	ldr	r0, [pc, #248]	; (8000868 <Btc_RxVal+0x284>)
 800076e:	f00a fe7f 	bl	800b470 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 8000772:	483e      	ldr	r0, [pc, #248]	; (800086c <Btc_RxVal+0x288>)
 8000774:	f00a fe92 	bl	800b49c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>

				break;
 8000778:	e061      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:

				Btc_TurnSignalLeft = STD_LOW;
 800077a:	4b3b      	ldr	r3, [pc, #236]	; (8000868 <Btc_RxVal+0x284>)
 800077c:	2200      	movs	r2, #0
 800077e:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 8000780:	4839      	ldr	r0, [pc, #228]	; (8000868 <Btc_RxVal+0x284>)
 8000782:	f00a fe75 	bl	800b470 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>

				break;
 8000786:	e05a      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON:

				Btc_TurnSignalRight = STD_HIGH;
 8000788:	4b38      	ldr	r3, [pc, #224]	; (800086c <Btc_RxVal+0x288>)
 800078a:	2201      	movs	r2, #1
 800078c:	701a      	strb	r2, [r3, #0]
				Btc_TurnSignalLeft = STD_LOW;
 800078e:	4b36      	ldr	r3, [pc, #216]	; (8000868 <Btc_RxVal+0x284>)
 8000790:	2200      	movs	r2, #0
 8000792:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 8000794:	4834      	ldr	r0, [pc, #208]	; (8000868 <Btc_RxVal+0x284>)
 8000796:	f00a fe6b 	bl	800b470 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 800079a:	4834      	ldr	r0, [pc, #208]	; (800086c <Btc_RxVal+0x288>)
 800079c:	f00a fe7e 	bl	800b49c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>

				break;
 80007a0:	e04d      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF:

				Btc_TurnSignalRight = STD_LOW;
 80007a2:	4b32      	ldr	r3, [pc, #200]	; (800086c <Btc_RxVal+0x288>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 80007a8:	4830      	ldr	r0, [pc, #192]	; (800086c <Btc_RxVal+0x288>)
 80007aa:	f00a fe77 	bl	800b49c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>

				break;
 80007ae:	e046      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:

				Btc_HazardLight = STD_HIGH;
 80007b0:	4b2f      	ldr	r3, [pc, #188]	; (8000870 <Btc_RxVal+0x28c>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(&Btc_HazardLight);
 80007b6:	482e      	ldr	r0, [pc, #184]	; (8000870 <Btc_RxVal+0x28c>)
 80007b8:	f00a fe86 	bl	800b4c8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>

				break;
 80007bc:	e03f      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:

				Btc_HazardLight = STD_LOW;
 80007be:	4b2c      	ldr	r3, [pc, #176]	; (8000870 <Btc_RxVal+0x28c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(&Btc_HazardLight);
 80007c4:	482a      	ldr	r0, [pc, #168]	; (8000870 <Btc_RxVal+0x28c>)
 80007c6:	f00a fe7f 	bl	800b4c8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>

				break;
 80007ca:	e038      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:

				Btc_FrontFogLight = STD_HIGH;
 80007cc:	4b29      	ldr	r3, [pc, #164]	; (8000874 <Btc_RxVal+0x290>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(&Btc_FrontFogLight);
 80007d2:	4828      	ldr	r0, [pc, #160]	; (8000874 <Btc_RxVal+0x290>)
 80007d4:	f00a fe36 	bl	800b444 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>

				break;
 80007d8:	e031      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:

				Btc_FrontFogLight = STD_LOW;
 80007da:	4b26      	ldr	r3, [pc, #152]	; (8000874 <Btc_RxVal+0x290>)
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(&Btc_FrontFogLight);
 80007e0:	4824      	ldr	r0, [pc, #144]	; (8000874 <Btc_RxVal+0x290>)
 80007e2:	f00a fe2f 	bl	800b444 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>

				break;
 80007e6:	e02a      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:

				Btc_RearFogLight = STD_HIGH;
 80007e8:	4b23      	ldr	r3, [pc, #140]	; (8000878 <Btc_RxVal+0x294>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(&Btc_RearFogLight);
 80007ee:	4822      	ldr	r0, [pc, #136]	; (8000878 <Btc_RxVal+0x294>)
 80007f0:	f00a fe80 	bl	800b4f4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>

				break;
 80007f4:	e023      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:

				Btc_RearFogLight = STD_LOW;
 80007f6:	4b20      	ldr	r3, [pc, #128]	; (8000878 <Btc_RxVal+0x294>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(&Btc_RearFogLight);
 80007fc:	481e      	ldr	r0, [pc, #120]	; (8000878 <Btc_RxVal+0x294>)
 80007fe:	f00a fe79 	bl	800b4f4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>

				break;
 8000802:	e01c      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_BRAKELIGHTON:

				Btc_BrakeLight = STD_HIGH;
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <Btc_RxVal+0x298>)
 8000806:	2201      	movs	r2, #1
 8000808:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(&Btc_BrakeLight);
 800080a:	481c      	ldr	r0, [pc, #112]	; (800087c <Btc_RxVal+0x298>)
 800080c:	f00a fdd8 	bl	800b3c0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>

				break;
 8000810:	e015      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:

				Btc_BrakeLight = STD_LOW;
 8000812:	4b1a      	ldr	r3, [pc, #104]	; (800087c <Btc_RxVal+0x298>)
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(&Btc_BrakeLight);
 8000818:	4818      	ldr	r0, [pc, #96]	; (800087c <Btc_RxVal+0x298>)
 800081a:	f00a fdd1 	bl	800b3c0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>

				break;
 800081e:	e00e      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:

				Btc_IntLights = STD_HIGH;
 8000820:	4b17      	ldr	r3, [pc, #92]	; (8000880 <Btc_RxVal+0x29c>)
 8000822:	2201      	movs	r2, #1
 8000824:	701a      	strb	r2, [r3, #0]
				Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(&Btc_IntLights);
 8000826:	4816      	ldr	r0, [pc, #88]	; (8000880 <Btc_RxVal+0x29c>)
 8000828:	f00a febc 	bl	800b5a4 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>

				break;
 800082c:	e007      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:

				Btc_IntLights = STD_LOW;
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <Btc_RxVal+0x29c>)
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
				Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(&Btc_IntLights);
 8000834:	4812      	ldr	r0, [pc, #72]	; (8000880 <Btc_RxVal+0x29c>)
 8000836:	f00a feb5 	bl	800b5a4 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>

				break;
 800083a:	e000      	b.n	800083e <Btc_RxVal+0x25a>

			default:

				break;
 800083c:	bf00      	nop

		/* do nothing */

	}

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	2000009a 	.word	0x2000009a
 8000848:	200000a7 	.word	0x200000a7
 800084c:	200000a8 	.word	0x200000a8
 8000850:	200000a9 	.word	0x200000a9
 8000854:	200000a5 	.word	0x200000a5
 8000858:	2000009c 	.word	0x2000009c
 800085c:	2000009b 	.word	0x2000009b
 8000860:	2000009d 	.word	0x2000009d
 8000864:	2000009e 	.word	0x2000009e
 8000868:	200000a0 	.word	0x200000a0
 800086c:	200000a1 	.word	0x200000a1
 8000870:	200000a2 	.word	0x200000a2
 8000874:	2000009f 	.word	0x2000009f
 8000878:	200000a4 	.word	0x200000a4
 800087c:	200000a3 	.word	0x200000a3
 8000880:	200000a6 	.word	0x200000a6

08000884 <Btc_MainFunction>:

void Btc_MainFunction()
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0

	Btc_EnableUart();
 8000888:	f7ff fe3a 	bl	8000500 <Btc_EnableUart>
	Btc_IgnitionState();
 800088c:	f7ff fe46 	bl	800051c <Btc_IgnitionState>
	Btc_RxVal();
 8000890:	f7ff fea8 	bl	80005e4 <Btc_RxVal>

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}

08000898 <CenLoc_State>:
	return E_OK;

}

void CenLoc_State()
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0

	CenLoc_SecAlmStateToOff();
 800089c:	f000 f854 	bl	8000948 <CenLoc_SecAlmStateToOff>

	if(CenLoc_PreviousState != CenLoc_CurrentState)
 80008a0:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <CenLoc_State+0x80>)
 80008a2:	781a      	ldrb	r2, [r3, #0]
 80008a4:	4b1d      	ldr	r3, [pc, #116]	; (800091c <CenLoc_State+0x84>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d033      	beq.n	8000914 <CenLoc_State+0x7c>
	{

		CenLoc_PreviousStateFlag 			= CenLoc_PreviousState;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <CenLoc_State+0x80>)
 80008ae:	781a      	ldrb	r2, [r3, #0]
 80008b0:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <CenLoc_State+0x88>)
 80008b2:	701a      	strb	r2, [r3, #0]
		CenLoc_PreviousState 				= CenLoc_CurrentState;
 80008b4:	4b19      	ldr	r3, [pc, #100]	; (800091c <CenLoc_State+0x84>)
 80008b6:	781a      	ldrb	r2, [r3, #0]
 80008b8:	4b17      	ldr	r3, [pc, #92]	; (8000918 <CenLoc_State+0x80>)
 80008ba:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim2IRQFlag 					= STD_LOW;
 80008bc:	4b19      	ldr	r3, [pc, #100]	; (8000924 <CenLoc_State+0x8c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim5IRQFlag 					= STD_LOW;
 80008c2:	4b19      	ldr	r3, [pc, #100]	; (8000928 <CenLoc_State+0x90>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim3IRQFlag					= STD_LOW;
 80008c8:	4b18      	ldr	r3, [pc, #96]	; (800092c <CenLoc_State+0x94>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim11IRQFlag					= STD_LOW;
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <CenLoc_State+0x98>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]

		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_Init();
 80008d4:	f000 fe2e 	bl	8001534 <SecAlm_Init>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_CenLoc_LockUnlockSequence_TimerHandle, 250);
 80008d8:	4b16      	ldr	r3, [pc, #88]	; (8000934 <CenLoc_State+0x9c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	21fa      	movs	r1, #250	; 0xfa
 80008de:	4618      	mov	r0, r3
 80008e0:	f00a ff2f 	bl	800b742 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag(&CenLoc_Tim2IRQFlag);
 80008e4:	480f      	ldr	r0, [pc, #60]	; (8000924 <CenLoc_State+0x8c>)
 80008e6:	f00a ff7d 	bl	800b7e4 <Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag>
		Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag(&CenLoc_Tim5IRQFlag);
 80008ea:	480f      	ldr	r0, [pc, #60]	; (8000928 <CenLoc_State+0x90>)
 80008ec:	f00a ff90 	bl	800b810 <Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag>
		Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag(&CenLoc_Tim3IRQFlag);
 80008f0:	480e      	ldr	r0, [pc, #56]	; (800092c <CenLoc_State+0x94>)
 80008f2:	f00a ffa3 	bl	800b83c <Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag>
		Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag(&CenLoc_Tim11IRQFlag);
 80008f6:	480e      	ldr	r0, [pc, #56]	; (8000930 <CenLoc_State+0x98>)
 80008f8:	f00a ffb6 	bl	800b868 <Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag>
		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init(&htim2);
 80008fc:	480e      	ldr	r0, [pc, #56]	; (8000938 <CenLoc_State+0xa0>)
 80008fe:	f00a fed9 	bl	800b6b4 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init>
		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init(&htim3);
 8000902:	480e      	ldr	r0, [pc, #56]	; (800093c <CenLoc_State+0xa4>)
 8000904:	f00a fed6 	bl	800b6b4 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init>
		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init(&htim4);
 8000908:	480d      	ldr	r0, [pc, #52]	; (8000940 <CenLoc_State+0xa8>)
 800090a:	f00a fed3 	bl	800b6b4 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init>
		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init(&htim5);
 800090e:	480d      	ldr	r0, [pc, #52]	; (8000944 <CenLoc_State+0xac>)
 8000910:	f00a fed0 	bl	800b6b4 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init>

		/* do nothing */

	}

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	200000ab 	.word	0x200000ab
 800091c:	200000aa 	.word	0x200000aa
 8000920:	200000ad 	.word	0x200000ad
 8000924:	200000ae 	.word	0x200000ae
 8000928:	200000b0 	.word	0x200000b0
 800092c:	200000af 	.word	0x200000af
 8000930:	200000b1 	.word	0x200000b1
 8000934:	200001bc 	.word	0x200001bc
 8000938:	200002f4 	.word	0x200002f4
 800093c:	200003a8 	.word	0x200003a8
 8000940:	2000045c 	.word	0x2000045c
 8000944:	20000510 	.word	0x20000510

08000948 <CenLoc_SecAlmStateToOff>:

void CenLoc_SecAlmStateToOff()
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0

	if(CenLoc_CurrentState == STD_HIGH)
 800094c:	4b03      	ldr	r3, [pc, #12]	; (800095c <CenLoc_SecAlmStateToOff+0x14>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d101      	bne.n	8000958 <CenLoc_SecAlmStateToOff+0x10>
	{

		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_Init();
 8000954:	f000 fdee 	bl	8001534 <SecAlm_Init>

		/* do nothing */

	}

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	200000aa 	.word	0x200000aa

08000960 <CenLoc_ToggleDoorLED>:

void CenLoc_ToggleDoorLED(uint8 PinState)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(CENLOC_DOOR_LED_PORT, CENLOC_DOOR_LED_PIN, PinState);
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	461a      	mov	r2, r3
 800096e:	2180      	movs	r1, #128	; 0x80
 8000970:	4803      	ldr	r0, [pc, #12]	; (8000980 <CenLoc_ToggleDoorLED+0x20>)
 8000972:	f00a fec3 	bl	800b6fc <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40020400 	.word	0x40020400

08000984 <CenLoc_FollowMeHome>:

void CenLoc_FollowMeHome()
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0

	if(CenLoc_Tim5IRQFlag == 1)
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <CenLoc_FollowMeHome+0x40>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d103      	bne.n	8000998 <CenLoc_FollowMeHome+0x14>
	{

		CenLoc_FollowMeHomeState = STD_HIGH;
 8000990:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <CenLoc_FollowMeHome+0x44>)
 8000992:	2201      	movs	r2, #1
 8000994:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8000996:	e013      	b.n	80009c0 <CenLoc_FollowMeHome+0x3c>
	else if(CenLoc_Tim5IRQFlag == 2)
 8000998:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <CenLoc_FollowMeHome+0x40>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b02      	cmp	r3, #2
 800099e:	d10f      	bne.n	80009c0 <CenLoc_FollowMeHome+0x3c>
		CenLoc_FollowMeHomeState = STD_LOW;
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <CenLoc_FollowMeHome+0x44>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]
		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT(&htim5);
 80009a6:	4809      	ldr	r0, [pc, #36]	; (80009cc <CenLoc_FollowMeHome+0x48>)
 80009a8:	f00a fe9c 	bl	800b6e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_SET_COUNTER(&htim5, 0);
 80009ac:	4b07      	ldr	r3, [pc, #28]	; (80009cc <CenLoc_FollowMeHome+0x48>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2200      	movs	r2, #0
 80009b2:	625a      	str	r2, [r3, #36]	; 0x24
		CenLoc_Tim5IRQFlag = STD_LOW;
 80009b4:	4b03      	ldr	r3, [pc, #12]	; (80009c4 <CenLoc_FollowMeHome+0x40>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]
		Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag(&CenLoc_Tim5IRQFlag);
 80009ba:	4802      	ldr	r0, [pc, #8]	; (80009c4 <CenLoc_FollowMeHome+0x40>)
 80009bc:	f00a ff28 	bl	800b810 <Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag>
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	200000b0 	.word	0x200000b0
 80009c8:	200000ac 	.word	0x200000ac
 80009cc:	20000510 	.word	0x20000510

080009d0 <CenLoc_UnlockSequence>:
	Rte_Call_ExtLights_R_ExtLightsPort_ExtLights_TurnSignalRight(CenLoc_BlinkState);

}

void CenLoc_UnlockSequence()
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0

	Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT(&htim3);
 80009d4:	482e      	ldr	r0, [pc, #184]	; (8000a90 <CenLoc_UnlockSequence+0xc0>)
 80009d6:	f00a fe85 	bl	800b6e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT>

	CenLoc_ToggleDoorLED(CenLoc_CurrentState);
 80009da:	4b2e      	ldr	r3, [pc, #184]	; (8000a94 <CenLoc_UnlockSequence+0xc4>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff ffbe 	bl	8000960 <CenLoc_ToggleDoorLED>
	CenLoc_FollowMeHome();
 80009e4:	f7ff ffce 	bl	8000984 <CenLoc_FollowMeHome>

	localPreviousState = STD_HIGH;
 80009e8:	4b2b      	ldr	r3, [pc, #172]	; (8000a98 <CenLoc_UnlockSequence+0xc8>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	701a      	strb	r2, [r3, #0]

	if(CenLoc_Tim2IRQFlag <= 4)
 80009ee:	4b2b      	ldr	r3, [pc, #172]	; (8000a9c <CenLoc_UnlockSequence+0xcc>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b04      	cmp	r3, #4
 80009f4:	d83a      	bhi.n	8000a6c <CenLoc_UnlockSequence+0x9c>
	{

		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT(&htim2);
 80009f6:	482a      	ldr	r0, [pc, #168]	; (8000aa0 <CenLoc_UnlockSequence+0xd0>)
 80009f8:	f00a fe68 	bl	800b6cc <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT(&htim5);
 80009fc:	4829      	ldr	r0, [pc, #164]	; (8000aa4 <CenLoc_UnlockSequence+0xd4>)
 80009fe:	f00a fe65 	bl	800b6cc <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT>

		switch(CenLoc_Tim2IRQFlag)
 8000a02:	4b26      	ldr	r3, [pc, #152]	; (8000a9c <CenLoc_UnlockSequence+0xcc>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	2b03      	cmp	r3, #3
 8000a0a:	d83d      	bhi.n	8000a88 <CenLoc_UnlockSequence+0xb8>
 8000a0c:	a201      	add	r2, pc, #4	; (adr r2, 8000a14 <CenLoc_UnlockSequence+0x44>)
 8000a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a12:	bf00      	nop
 8000a14:	08000a25 	.word	0x08000a25
 8000a18:	08000a37 	.word	0x08000a37
 8000a1c:	08000a49 	.word	0x08000a49
 8000a20:	08000a5b 	.word	0x08000a5b
		{

			case 1:

				CenLoc_BlinkState = STD_HIGH;
 8000a24:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <CenLoc_UnlockSequence+0xd8>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	701a      	strb	r2, [r3, #0]
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8000a2a:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <CenLoc_UnlockSequence+0xd8>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 f8fc 	bl	8000c2c <CenLoc_ToggleBuzzer>

				break;
 8000a34:	e029      	b.n	8000a8a <CenLoc_UnlockSequence+0xba>

			case 2:

				CenLoc_BlinkState = STD_LOW;
 8000a36:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <CenLoc_UnlockSequence+0xd8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8000a3c:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <CenLoc_UnlockSequence+0xd8>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f000 f8f3 	bl	8000c2c <CenLoc_ToggleBuzzer>

				break;
 8000a46:	e020      	b.n	8000a8a <CenLoc_UnlockSequence+0xba>

			case 3:

				CenLoc_BlinkState = STD_HIGH;
 8000a48:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <CenLoc_UnlockSequence+0xd8>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	701a      	strb	r2, [r3, #0]
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8000a4e:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <CenLoc_UnlockSequence+0xd8>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 f8ea 	bl	8000c2c <CenLoc_ToggleBuzzer>

				break;
 8000a58:	e017      	b.n	8000a8a <CenLoc_UnlockSequence+0xba>

			case 4:

				CenLoc_BlinkState = STD_LOW;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <CenLoc_UnlockSequence+0xd8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	701a      	strb	r2, [r3, #0]
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <CenLoc_UnlockSequence+0xd8>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f000 f8e1 	bl	8000c2c <CenLoc_ToggleBuzzer>

				break;
 8000a6a:	e00e      	b.n	8000a8a <CenLoc_UnlockSequence+0xba>
				break;

		}

	}
	else if(CenLoc_Tim2IRQFlag >= 5)
 8000a6c:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <CenLoc_UnlockSequence+0xcc>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b04      	cmp	r3, #4
 8000a72:	d90a      	bls.n	8000a8a <CenLoc_UnlockSequence+0xba>
	{

		CenLoc_BlinkState = 2;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <CenLoc_UnlockSequence+0xd8>)
 8000a76:	2202      	movs	r2, #2
 8000a78:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim2IRQFlag = 6;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <CenLoc_UnlockSequence+0xcc>)
 8000a7c:	2206      	movs	r2, #6
 8000a7e:	701a      	strb	r2, [r3, #0]
		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT(&htim2);
 8000a80:	4807      	ldr	r0, [pc, #28]	; (8000aa0 <CenLoc_UnlockSequence+0xd0>)
 8000a82:	f00a fe2f 	bl	800b6e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT>

		/* do nothing */

	}

}
 8000a86:	e000      	b.n	8000a8a <CenLoc_UnlockSequence+0xba>
				break;
 8000a88:	bf00      	nop
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200003a8 	.word	0x200003a8
 8000a94:	200000aa 	.word	0x200000aa
 8000a98:	200000b2 	.word	0x200000b2
 8000a9c:	200000ae 	.word	0x200000ae
 8000aa0:	200002f4 	.word	0x200002f4
 8000aa4:	20000510 	.word	0x20000510
 8000aa8:	20000000 	.word	0x20000000

08000aac <CenLoc_LockSequence>:

void CenLoc_LockSequence()
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0

	CenLoc_ToggleDoorLED(CenLoc_CurrentState);
 8000ab0:	4b21      	ldr	r3, [pc, #132]	; (8000b38 <CenLoc_LockSequence+0x8c>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff ff53 	bl	8000960 <CenLoc_ToggleDoorLED>
	CenLoc_FollowMeHome();
 8000aba:	f7ff ff63 	bl	8000984 <CenLoc_FollowMeHome>

	if(CenLoc_Tim2IRQFlag <= 2 && localPreviousState == STD_HIGH)
 8000abe:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <CenLoc_LockSequence+0x90>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b02      	cmp	r3, #2
 8000ac4:	d824      	bhi.n	8000b10 <CenLoc_LockSequence+0x64>
 8000ac6:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <CenLoc_LockSequence+0x94>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d120      	bne.n	8000b10 <CenLoc_LockSequence+0x64>
	{

		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT(&htim5);
 8000ace:	481d      	ldr	r0, [pc, #116]	; (8000b44 <CenLoc_LockSequence+0x98>)
 8000ad0:	f00a fdfc 	bl	800b6cc <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT>
		//Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT(&htim2);

		switch(CenLoc_Tim2IRQFlag)
 8000ad4:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <CenLoc_LockSequence+0x90>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d002      	beq.n	8000ae2 <CenLoc_LockSequence+0x36>
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	d009      	beq.n	8000af4 <CenLoc_LockSequence+0x48>

				break;

			default:

				break;
 8000ae0:	e014      	b.n	8000b0c <CenLoc_LockSequence+0x60>
				CenLoc_BlinkState = STD_HIGH;
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <CenLoc_LockSequence+0x9c>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	701a      	strb	r2, [r3, #0]
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8000ae8:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <CenLoc_LockSequence+0x9c>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f000 f89d 	bl	8000c2c <CenLoc_ToggleBuzzer>
				break;
 8000af2:	e00b      	b.n	8000b0c <CenLoc_LockSequence+0x60>
				CenLoc_BlinkState = STD_LOW;
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <CenLoc_LockSequence+0x9c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <CenLoc_LockSequence+0x9c>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f894 	bl	8000c2c <CenLoc_ToggleBuzzer>
				localPreviousState = STD_LOW;
 8000b04:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <CenLoc_LockSequence+0x94>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
				break;
 8000b0a:	bf00      	nop
		switch(CenLoc_Tim2IRQFlag)
 8000b0c:	bf00      	nop
	else
	{
		/* do nothing */
	}

}
 8000b0e:	e011      	b.n	8000b34 <CenLoc_LockSequence+0x88>
	else if(CenLoc_Tim2IRQFlag == 3)
 8000b10:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <CenLoc_LockSequence+0x90>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b03      	cmp	r3, #3
 8000b16:	d10d      	bne.n	8000b34 <CenLoc_LockSequence+0x88>
		CenLoc_BlinkState = 2;
 8000b18:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <CenLoc_LockSequence+0x9c>)
 8000b1a:	2202      	movs	r2, #2
 8000b1c:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim2IRQFlag = 4;
 8000b1e:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <CenLoc_LockSequence+0x90>)
 8000b20:	2204      	movs	r2, #4
 8000b22:	701a      	strb	r2, [r3, #0]
		Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag(&CenLoc_Tim2IRQFlag);
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <CenLoc_LockSequence+0x90>)
 8000b26:	f00a fe5d 	bl	800b7e4 <Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_CenLoc_LockUnlockSequence_TimerHandle);
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <CenLoc_LockSequence+0xa0>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f00a feb0 	bl	800b894 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	200000aa 	.word	0x200000aa
 8000b3c:	200000ae 	.word	0x200000ae
 8000b40:	200000b2 	.word	0x200000b2
 8000b44:	20000510 	.word	0x20000510
 8000b48:	20000000 	.word	0x20000000
 8000b4c:	200001bc 	.word	0x200001bc

08000b50 <CenLoc_ControlAlarmLed>:

void CenLoc_ControlAlarmLed()
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0

	if(CenLoc_CurrentState == STD_HIGH)
 8000b54:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <CenLoc_ControlAlarmLed+0x84>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d10c      	bne.n	8000b76 <CenLoc_ControlAlarmLed+0x26>
	{

		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_LOW);
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f000 fd1f 	bl	80015a0 <SecAlm_ToggleAlarmLed>
		CenLoc_Tim11IRQFlag = STD_LOW;
 8000b62:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <CenLoc_ControlAlarmLed+0x88>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	701a      	strb	r2, [r3, #0]
		Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag(&CenLoc_Tim11IRQFlag);
 8000b68:	481b      	ldr	r0, [pc, #108]	; (8000bd8 <CenLoc_ControlAlarmLed+0x88>)
 8000b6a:	f00a fe7d 	bl	800b868 <Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag>
		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT(&htim11);
 8000b6e:	481b      	ldr	r0, [pc, #108]	; (8000bdc <CenLoc_ControlAlarmLed+0x8c>)
 8000b70:	f00a fdb8 	bl	800b6e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT>

		}

	}

}
 8000b74:	e02b      	b.n	8000bce <CenLoc_ControlAlarmLed+0x7e>
	else if(CenLoc_CurrentState == STD_LOW)
 8000b76:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <CenLoc_ControlAlarmLed+0x84>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d127      	bne.n	8000bce <CenLoc_ControlAlarmLed+0x7e>
		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT(&htim3);
 8000b7e:	4818      	ldr	r0, [pc, #96]	; (8000be0 <CenLoc_ControlAlarmLed+0x90>)
 8000b80:	f00a fda4 	bl	800b6cc <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT>
		if(CenLoc_Tim3IRQFlag == 2)
 8000b84:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <CenLoc_ControlAlarmLed+0x94>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d120      	bne.n	8000bce <CenLoc_ControlAlarmLed+0x7e>
			Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT(&htim11);
 8000b8c:	4813      	ldr	r0, [pc, #76]	; (8000bdc <CenLoc_ControlAlarmLed+0x8c>)
 8000b8e:	f00a fd9d 	bl	800b6cc <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT>
			if(CenLoc_Tim11IRQFlag == 1)
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <CenLoc_ControlAlarmLed+0x88>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d103      	bne.n	8000ba2 <CenLoc_ControlAlarmLed+0x52>
				Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_HIGH);
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f000 fd00 	bl	80015a0 <SecAlm_ToggleAlarmLed>
}
 8000ba0:	e015      	b.n	8000bce <CenLoc_ControlAlarmLed+0x7e>
			else if(CenLoc_Tim11IRQFlag > 1)
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <CenLoc_ControlAlarmLed+0x88>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d911      	bls.n	8000bce <CenLoc_ControlAlarmLed+0x7e>
				Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_LOW);
 8000baa:	2000      	movs	r0, #0
 8000bac:	f000 fcf8 	bl	80015a0 <SecAlm_ToggleAlarmLed>
				CenLoc_Tim11IRQFlag = 0;
 8000bb0:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <CenLoc_ControlAlarmLed+0x88>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
				CenLoc_Tim3IRQFlag = 1;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <CenLoc_ControlAlarmLed+0x94>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag(&CenLoc_Tim11IRQFlag);
 8000bbc:	4806      	ldr	r0, [pc, #24]	; (8000bd8 <CenLoc_ControlAlarmLed+0x88>)
 8000bbe:	f00a fe53 	bl	800b868 <Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag>
				Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag(&CenLoc_Tim3IRQFlag);
 8000bc2:	4808      	ldr	r0, [pc, #32]	; (8000be4 <CenLoc_ControlAlarmLed+0x94>)
 8000bc4:	f00a fe3a 	bl	800b83c <Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag>
				Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT(&htim11);
 8000bc8:	4804      	ldr	r0, [pc, #16]	; (8000bdc <CenLoc_ControlAlarmLed+0x8c>)
 8000bca:	f00a fd8b 	bl	800b6e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT>
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200000aa 	.word	0x200000aa
 8000bd8:	200000b1 	.word	0x200000b1
 8000bdc:	20000678 	.word	0x20000678
 8000be0:	200003a8 	.word	0x200003a8
 8000be4:	200000af 	.word	0x200000af

08000be8 <CenLoc_LockUnlockStates>:

void CenLoc_LockUnlockStates()
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0

	if(CenLoc_CurrentState == STD_HIGH && SecAlm_Trigger == STD_LOW)
 8000bec:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <CenLoc_LockUnlockStates+0x3c>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d108      	bne.n	8000c06 <CenLoc_LockUnlockStates+0x1e>
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <CenLoc_LockUnlockStates+0x40>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d104      	bne.n	8000c06 <CenLoc_LockUnlockStates+0x1e>
	{

		CenLoc_UnlockSequence();
 8000bfc:	f7ff fee8 	bl	80009d0 <CenLoc_UnlockSequence>
		CenLoc_ControlAlarmLed();
 8000c00:	f7ff ffa6 	bl	8000b50 <CenLoc_ControlAlarmLed>
		CenLoc_LockSequence();
		CenLoc_ControlAlarmLed();

	}

}
 8000c04:	e00b      	b.n	8000c1e <CenLoc_LockUnlockStates+0x36>
	else if(CenLoc_CurrentState == STD_LOW && SecAlm_Trigger == STD_LOW)
 8000c06:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <CenLoc_LockUnlockStates+0x3c>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d107      	bne.n	8000c1e <CenLoc_LockUnlockStates+0x36>
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <CenLoc_LockUnlockStates+0x40>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d103      	bne.n	8000c1e <CenLoc_LockUnlockStates+0x36>
		CenLoc_LockSequence();
 8000c16:	f7ff ff49 	bl	8000aac <CenLoc_LockSequence>
		CenLoc_ControlAlarmLed();
 8000c1a:	f7ff ff99 	bl	8000b50 <CenLoc_ControlAlarmLed>
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200000aa 	.word	0x200000aa
 8000c28:	200000ce 	.word	0x200000ce

08000c2c <CenLoc_ToggleBuzzer>:

void CenLoc_ToggleBuzzer(uint8 PinState)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(CENLOC_BUZZER_PORT, CENLOC_BUZZER_PIN, PinState);
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	2110      	movs	r1, #16
 8000c3c:	4803      	ldr	r0, [pc, #12]	; (8000c4c <CenLoc_ToggleBuzzer+0x20>)
 8000c3e:	f00a fd5d 	bl	800b6fc <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40020800 	.word	0x40020800

08000c50 <CenLoc_MainFunction>:

void CenLoc_MainFunction()
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0

	CenLoc_State();
 8000c54:	f7ff fe20 	bl	8000898 <CenLoc_State>
	CenLoc_LockUnlockStates();
 8000c58:	f7ff ffc6 	bl	8000be8 <CenLoc_LockUnlockStates>

}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <ExtLights_TurnSignalHazardLight>:
void ExtLights_PrevStateTSHL();
StdReturnType ExtLights_Init();
uint32 ExtLights_LightReadSensorValue();

void ExtLights_TurnSignalHazardLight()
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0

	if(ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 8000c64:	4b35      	ldr	r3, [pc, #212]	; (8000d3c <ExtLights_TurnSignalHazardLight+0xdc>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d115      	bne.n	8000c98 <ExtLights_TurnSignalHazardLight+0x38>
	{

		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT(&htim2);
 8000c6c:	4834      	ldr	r0, [pc, #208]	; (8000d40 <ExtLights_TurnSignalHazardLight+0xe0>)
 8000c6e:	f00a fd2d 	bl	800b6cc <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT>

		if(ExtLights_LTSFlag % 2 == 0)
 8000c72:	4b34      	ldr	r3, [pc, #208]	; (8000d44 <ExtLights_TurnSignalHazardLight+0xe4>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d103      	bne.n	8000c86 <ExtLights_TurnSignalHazardLight+0x26>
		{

			ExtLights_TurnSignalLeft(STD_HIGH);
 8000c7e:	2001      	movs	r0, #1
 8000c80:	f000 fa64 	bl	800114c <ExtLights_TurnSignalLeft>
 8000c84:	e008      	b.n	8000c98 <ExtLights_TurnSignalHazardLight+0x38>

		}
		else if(ExtLights_LTSFlag % 2 == STD_HIGH)
 8000c86:	4b2f      	ldr	r3, [pc, #188]	; (8000d44 <ExtLights_TurnSignalHazardLight+0xe4>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d002      	beq.n	8000c98 <ExtLights_TurnSignalHazardLight+0x38>
		{

			ExtLights_TurnSignalLeft(STD_LOW);
 8000c92:	2000      	movs	r0, #0
 8000c94:	f000 fa5a 	bl	800114c <ExtLights_TurnSignalLeft>

		/* do nothing */

	}

	if(ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 8000c98:	4b2b      	ldr	r3, [pc, #172]	; (8000d48 <ExtLights_TurnSignalHazardLight+0xe8>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d115      	bne.n	8000ccc <ExtLights_TurnSignalHazardLight+0x6c>
	{

		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT(&htim2);
 8000ca0:	4827      	ldr	r0, [pc, #156]	; (8000d40 <ExtLights_TurnSignalHazardLight+0xe0>)
 8000ca2:	f00a fd13 	bl	800b6cc <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT>

		if(ExtLights_RTSFlag % 2 == STD_LOW)
 8000ca6:	4b29      	ldr	r3, [pc, #164]	; (8000d4c <ExtLights_TurnSignalHazardLight+0xec>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d103      	bne.n	8000cba <ExtLights_TurnSignalHazardLight+0x5a>
		{

			ExtLights_TurnSignalRight(STD_HIGH);
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	f000 fa5c 	bl	8001170 <ExtLights_TurnSignalRight>
 8000cb8:	e008      	b.n	8000ccc <ExtLights_TurnSignalHazardLight+0x6c>

		}
		else if(ExtLights_RTSFlag % 2 == STD_HIGH)
 8000cba:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <ExtLights_TurnSignalHazardLight+0xec>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d002      	beq.n	8000ccc <ExtLights_TurnSignalHazardLight+0x6c>
		{

			ExtLights_TurnSignalRight(STD_LOW);
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f000 fa52 	bl	8001170 <ExtLights_TurnSignalRight>

		/* do nothing */

	}

	if(ExtLights_HazardLight_CurrentState == STD_HIGH)
 8000ccc:	4b20      	ldr	r3, [pc, #128]	; (8000d50 <ExtLights_TurnSignalHazardLight+0xf0>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d11b      	bne.n	8000d0c <ExtLights_TurnSignalHazardLight+0xac>
	{

		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT(&htim2);
 8000cd4:	481a      	ldr	r0, [pc, #104]	; (8000d40 <ExtLights_TurnSignalHazardLight+0xe0>)
 8000cd6:	f00a fcf9 	bl	800b6cc <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT>

		if(ExtLights_HLFlag % 2 == STD_LOW)
 8000cda:	4b1e      	ldr	r3, [pc, #120]	; (8000d54 <ExtLights_TurnSignalHazardLight+0xf4>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d106      	bne.n	8000cf4 <ExtLights_TurnSignalHazardLight+0x94>
		{

			ExtLights_TurnSignalLeft(STD_HIGH);
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f000 fa30 	bl	800114c <ExtLights_TurnSignalLeft>
			ExtLights_TurnSignalRight(STD_HIGH);
 8000cec:	2001      	movs	r0, #1
 8000cee:	f000 fa3f 	bl	8001170 <ExtLights_TurnSignalRight>
 8000cf2:	e00b      	b.n	8000d0c <ExtLights_TurnSignalHazardLight+0xac>

		}
		else if(ExtLights_HLFlag % 2 == STD_HIGH)
 8000cf4:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <ExtLights_TurnSignalHazardLight+0xf4>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d005      	beq.n	8000d0c <ExtLights_TurnSignalHazardLight+0xac>
		{

			ExtLights_TurnSignalLeft(STD_LOW);
 8000d00:	2000      	movs	r0, #0
 8000d02:	f000 fa23 	bl	800114c <ExtLights_TurnSignalLeft>
			ExtLights_TurnSignalRight(STD_LOW);
 8000d06:	2000      	movs	r0, #0
 8000d08:	f000 fa32 	bl	8001170 <ExtLights_TurnSignalRight>

		/* do nothing */

	}

	if(ExtLights_TurnSignalRight_CurrentState == STD_LOW && ExtLights_HazardLight_CurrentState == STD_LOW)
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <ExtLights_TurnSignalHazardLight+0xe8>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d106      	bne.n	8000d22 <ExtLights_TurnSignalHazardLight+0xc2>
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <ExtLights_TurnSignalHazardLight+0xf0>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d102      	bne.n	8000d22 <ExtLights_TurnSignalHazardLight+0xc2>
	{

		ExtLights_TurnSignalRight(STD_LOW);
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f000 fa27 	bl	8001170 <ExtLights_TurnSignalRight>

		/* do nothing */

	}

	if(ExtLights_TurnSignalLeft_CurrentState == STD_LOW && ExtLights_HazardLight_CurrentState == STD_LOW)
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <ExtLights_TurnSignalHazardLight+0xdc>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d106      	bne.n	8000d38 <ExtLights_TurnSignalHazardLight+0xd8>
 8000d2a:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <ExtLights_TurnSignalHazardLight+0xf0>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d102      	bne.n	8000d38 <ExtLights_TurnSignalHazardLight+0xd8>
	{

		ExtLights_TurnSignalLeft(STD_LOW);
 8000d32:	2000      	movs	r0, #0
 8000d34:	f000 fa0a 	bl	800114c <ExtLights_TurnSignalLeft>

		/* do nothing */

	}

}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	200000b9 	.word	0x200000b9
 8000d40:	200002f4 	.word	0x200002f4
 8000d44:	200000c4 	.word	0x200000c4
 8000d48:	200000ba 	.word	0x200000ba
 8000d4c:	200000c0 	.word	0x200000c0
 8000d50:	200000bb 	.word	0x200000bb
 8000d54:	200000c8 	.word	0x200000c8

08000d58 <ExtLights_PrevStateTSHL>:

void ExtLights_PrevStateTSHL()
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0

	if(ExtLights_TurnSignalLeft_CurrentState != ExtLights_LTS_PrevState)
 8000d5c:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <ExtLights_PrevStateTSHL+0x68>)
 8000d5e:	781a      	ldrb	r2, [r3, #0]
 8000d60:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <ExtLights_PrevStateTSHL+0x6c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d009      	beq.n	8000d7c <ExtLights_PrevStateTSHL+0x24>
	{

		ExtLights_LTS_PrevState = ExtLights_TurnSignalLeft_CurrentState;
 8000d68:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <ExtLights_PrevStateTSHL+0x68>)
 8000d6a:	781a      	ldrb	r2, [r3, #0]
 8000d6c:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <ExtLights_PrevStateTSHL+0x6c>)
 8000d6e:	701a      	strb	r2, [r3, #0]
		ExtLights_LTSFlag = 0;
 8000d70:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <ExtLights_PrevStateTSHL+0x70>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
		Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_LTSFlag(&ExtLights_LTSFlag);
 8000d76:	4814      	ldr	r0, [pc, #80]	; (8000dc8 <ExtLights_PrevStateTSHL+0x70>)
 8000d78:	f00a fcf2 	bl	800b760 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_LTSFlag>

		/* do nothing */

	}

	if(ExtLights_TurnSignalRight_CurrentState != ExtLights_RTS_PrevState)
 8000d7c:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <ExtLights_PrevStateTSHL+0x74>)
 8000d7e:	781a      	ldrb	r2, [r3, #0]
 8000d80:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <ExtLights_PrevStateTSHL+0x78>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d009      	beq.n	8000d9c <ExtLights_PrevStateTSHL+0x44>
	{

		ExtLights_RTS_PrevState = ExtLights_TurnSignalRight_CurrentState;
 8000d88:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <ExtLights_PrevStateTSHL+0x74>)
 8000d8a:	781a      	ldrb	r2, [r3, #0]
 8000d8c:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <ExtLights_PrevStateTSHL+0x78>)
 8000d8e:	701a      	strb	r2, [r3, #0]
		ExtLights_RTSFlag = 0;
 8000d90:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <ExtLights_PrevStateTSHL+0x7c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
		Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_RTSFlag(&ExtLights_RTSFlag);
 8000d96:	480f      	ldr	r0, [pc, #60]	; (8000dd4 <ExtLights_PrevStateTSHL+0x7c>)
 8000d98:	f00a fcf8 	bl	800b78c <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_RTSFlag>

		/* do nothing */

	}

	if(ExtLights_HazardLight_CurrentState != ExtLights_HL_PrevState)
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <ExtLights_PrevStateTSHL+0x80>)
 8000d9e:	781a      	ldrb	r2, [r3, #0]
 8000da0:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <ExtLights_PrevStateTSHL+0x84>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d009      	beq.n	8000dbc <ExtLights_PrevStateTSHL+0x64>
	{

		ExtLights_HL_PrevState = ExtLights_HazardLight_CurrentState;
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <ExtLights_PrevStateTSHL+0x80>)
 8000daa:	781a      	ldrb	r2, [r3, #0]
 8000dac:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <ExtLights_PrevStateTSHL+0x84>)
 8000dae:	701a      	strb	r2, [r3, #0]
		ExtLights_HLFlag = 0;
 8000db0:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <ExtLights_PrevStateTSHL+0x88>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
		Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_HLFlag(&ExtLights_HLFlag);
 8000db6:	480a      	ldr	r0, [pc, #40]	; (8000de0 <ExtLights_PrevStateTSHL+0x88>)
 8000db8:	f00a fcfe 	bl	800b7b8 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_HLFlag>

		/* do nothing */

	}

}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	200000b9 	.word	0x200000b9
 8000dc4:	200000be 	.word	0x200000be
 8000dc8:	200000c4 	.word	0x200000c4
 8000dcc:	200000ba 	.word	0x200000ba
 8000dd0:	200000bd 	.word	0x200000bd
 8000dd4:	200000c0 	.word	0x200000c0
 8000dd8:	200000bb 	.word	0x200000bb
 8000ddc:	200000bf 	.word	0x200000bf
 8000de0:	200000c8 	.word	0x200000c8

08000de4 <ExtLights_LightState>:

void ExtLights_LightState()
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0



	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_HIGH)
 8000de8:	4b59      	ldr	r3, [pc, #356]	; (8000f50 <ExtLights_LightState+0x16c>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d114      	bne.n	8000e1a <ExtLights_LightState+0x36>
	{

		ExtLights_LowBeam(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState);
 8000df0:	4b57      	ldr	r3, [pc, #348]	; (8000f50 <ExtLights_LightState+0x16c>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f000 f961 	bl	80010bc <ExtLights_LowBeam>
		ExtLights_DayTimeRunningLight(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState);
 8000dfa:	4b55      	ldr	r3, [pc, #340]	; (8000f50 <ExtLights_LightState+0x16c>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f980 	bl	8001104 <ExtLights_DayTimeRunningLight>
		ExtLights_RearPositionLight(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState);
 8000e04:	4b52      	ldr	r3, [pc, #328]	; (8000f50 <ExtLights_LightState+0x16c>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 f9c3 	bl	8001194 <ExtLights_RearPositionLight>
		ExtLights_LicensePlateLight(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState);
 8000e0e:	4b50      	ldr	r3, [pc, #320]	; (8000f50 <ExtLights_LightState+0x16c>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 fa06 	bl	8001224 <ExtLights_LicensePlateLight>
 8000e18:	e01a      	b.n	8000e50 <ExtLights_LightState+0x6c>

	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW)
 8000e1a:	4b4d      	ldr	r3, [pc, #308]	; (8000f50 <ExtLights_LightState+0x16c>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d116      	bne.n	8000e50 <ExtLights_LightState+0x6c>
	{

		ExtLights_LowBeam(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState);
 8000e22:	4b4b      	ldr	r3, [pc, #300]	; (8000f50 <ExtLights_LightState+0x16c>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f948 	bl	80010bc <ExtLights_LowBeam>
		ExtLights_DayTimeRunningLight(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState);
 8000e2c:	4b48      	ldr	r3, [pc, #288]	; (8000f50 <ExtLights_LightState+0x16c>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 f967 	bl	8001104 <ExtLights_DayTimeRunningLight>
		ExtLights_RearPositionLight(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState);
 8000e36:	4b46      	ldr	r3, [pc, #280]	; (8000f50 <ExtLights_LightState+0x16c>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 f9aa 	bl	8001194 <ExtLights_RearPositionLight>
		ExtLights_LicensePlateLight(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState);
 8000e40:	4b43      	ldr	r3, [pc, #268]	; (8000f50 <ExtLights_LightState+0x16c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 f9ed 	bl	8001224 <ExtLights_LicensePlateLight>
		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT(&htim5);
 8000e4a:	4842      	ldr	r0, [pc, #264]	; (8000f54 <ExtLights_LightState+0x170>)
 8000e4c:	f00a fc4a 	bl	800b6e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT>

		/* do nothing */

	}

	if( ExtLights_ReverseLight_CurrentState == STD_HIGH ||
 8000e50:	4b41      	ldr	r3, [pc, #260]	; (8000f58 <ExtLights_LightState+0x174>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d023      	beq.n	8000ea0 <ExtLights_LightState+0xbc>
		ExtLights_BrakeLight_CurrentState == STD_HIGH ||
 8000e58:	4b40      	ldr	r3, [pc, #256]	; (8000f5c <ExtLights_LightState+0x178>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
	if( ExtLights_ReverseLight_CurrentState == STD_HIGH ||
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d01f      	beq.n	8000ea0 <ExtLights_LightState+0xbc>
		ExtLights_FlashHighBeam_CurrentState == STD_HIGH ||
 8000e60:	4b3f      	ldr	r3, [pc, #252]	; (8000f60 <ExtLights_LightState+0x17c>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
		ExtLights_BrakeLight_CurrentState == STD_HIGH ||
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d01b      	beq.n	8000ea0 <ExtLights_LightState+0xbc>
		ExtLights_LightsSwitch_CurrentState != STD_LOW ||
 8000e68:	4b3e      	ldr	r3, [pc, #248]	; (8000f64 <ExtLights_LightState+0x180>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
		ExtLights_FlashHighBeam_CurrentState == STD_HIGH ||
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d117      	bne.n	8000ea0 <ExtLights_LightState+0xbc>
		ExtLights_HighBeam_CurrentState == STD_HIGH ||
 8000e70:	4b3d      	ldr	r3, [pc, #244]	; (8000f68 <ExtLights_LightState+0x184>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
		ExtLights_LightsSwitch_CurrentState != STD_LOW ||
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d013      	beq.n	8000ea0 <ExtLights_LightState+0xbc>
		ExtLights_FrontFogLight_CurrentState == STD_HIGH ||
 8000e78:	4b3c      	ldr	r3, [pc, #240]	; (8000f6c <ExtLights_LightState+0x188>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
		ExtLights_HighBeam_CurrentState == STD_HIGH ||
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d00f      	beq.n	8000ea0 <ExtLights_LightState+0xbc>
		ExtLights_TurnSignalLeft_CurrentState == STD_HIGH ||
 8000e80:	4b3b      	ldr	r3, [pc, #236]	; (8000f70 <ExtLights_LightState+0x18c>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
		ExtLights_FrontFogLight_CurrentState == STD_HIGH ||
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d00b      	beq.n	8000ea0 <ExtLights_LightState+0xbc>
		ExtLights_TurnSignalRight_CurrentState == STD_HIGH ||
 8000e88:	4b3a      	ldr	r3, [pc, #232]	; (8000f74 <ExtLights_LightState+0x190>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
		ExtLights_TurnSignalLeft_CurrentState == STD_HIGH ||
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d007      	beq.n	8000ea0 <ExtLights_LightState+0xbc>
		ExtLights_HazardLight_CurrentState == STD_HIGH ||
 8000e90:	4b39      	ldr	r3, [pc, #228]	; (8000f78 <ExtLights_LightState+0x194>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
		ExtLights_TurnSignalRight_CurrentState == STD_HIGH ||
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d003      	beq.n	8000ea0 <ExtLights_LightState+0xbc>
		ExtLights_RearFogLight_CurrentState == STD_HIGH)
 8000e98:	4b38      	ldr	r3, [pc, #224]	; (8000f7c <ExtLights_LightState+0x198>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
		ExtLights_HazardLight_CurrentState == STD_HIGH ||
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d105      	bne.n	8000eac <ExtLights_LightState+0xc8>
	{

		CenLoc_FollowMeHomeState = STD_LOW;
 8000ea0:	4b2b      	ldr	r3, [pc, #172]	; (8000f50 <ExtLights_LightState+0x16c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim5IRQFlag = 2;
 8000ea6:	4b36      	ldr	r3, [pc, #216]	; (8000f80 <ExtLights_LightState+0x19c>)
 8000ea8:	2202      	movs	r2, #2
 8000eaa:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == STD_HIGH)
 8000eac:	4b35      	ldr	r3, [pc, #212]	; (8000f84 <ExtLights_LightState+0x1a0>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d10a      	bne.n	8000eca <ExtLights_LightState+0xe6>
	{

		ExtLights_TurnSignalLeft(CenLoc_BlinkState);
 8000eb4:	4b33      	ldr	r3, [pc, #204]	; (8000f84 <ExtLights_LightState+0x1a0>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 f947 	bl	800114c <ExtLights_TurnSignalLeft>
		ExtLights_TurnSignalRight(CenLoc_BlinkState);
 8000ebe:	4b31      	ldr	r3, [pc, #196]	; (8000f84 <ExtLights_LightState+0x1a0>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 f954 	bl	8001170 <ExtLights_TurnSignalRight>
 8000ec8:	e018      	b.n	8000efc <ExtLights_LightState+0x118>

	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == STD_LOW)
 8000eca:	4b2e      	ldr	r3, [pc, #184]	; (8000f84 <ExtLights_LightState+0x1a0>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d10a      	bne.n	8000ee8 <ExtLights_LightState+0x104>
	{

		ExtLights_TurnSignalLeft(CenLoc_BlinkState);
 8000ed2:	4b2c      	ldr	r3, [pc, #176]	; (8000f84 <ExtLights_LightState+0x1a0>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 f938 	bl	800114c <ExtLights_TurnSignalLeft>
		ExtLights_TurnSignalRight(CenLoc_BlinkState);
 8000edc:	4b29      	ldr	r3, [pc, #164]	; (8000f84 <ExtLights_LightState+0x1a0>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 f945 	bl	8001170 <ExtLights_TurnSignalRight>
 8000ee6:	e009      	b.n	8000efc <ExtLights_LightState+0x118>

	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == 2 || Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == 4)
 8000ee8:	4b26      	ldr	r3, [pc, #152]	; (8000f84 <ExtLights_LightState+0x1a0>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d003      	beq.n	8000ef8 <ExtLights_LightState+0x114>
 8000ef0:	4b24      	ldr	r3, [pc, #144]	; (8000f84 <ExtLights_LightState+0x1a0>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b04      	cmp	r3, #4
 8000ef6:	d101      	bne.n	8000efc <ExtLights_LightState+0x118>
	{

		ExtLights_TurnSignalHazardLight();
 8000ef8:	f7ff feb2 	bl	8000c60 <ExtLights_TurnSignalHazardLight>

		/* do nothing */

	}

	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW)
 8000efc:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <ExtLights_LightState+0x16c>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d101      	bne.n	8000f08 <ExtLights_LightState+0x124>
	{

		ExtLights_LightSwitchMode();
 8000f04:	f000 f848 	bl	8000f98 <ExtLights_LightSwitchMode>

		/* do nothing */

	}

	if(ExtLights_HighBeam_CurrentState != STD_HIGH)
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <ExtLights_LightState+0x184>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d004      	beq.n	8000f1a <ExtLights_LightState+0x136>
	{

		ExtLights_HighBeam(ExtLights_FlashHighBeam_CurrentState);
 8000f10:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <ExtLights_LightState+0x17c>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 f8e3 	bl	80010e0 <ExtLights_HighBeam>

		/* do nothing */

	}

	ExtLights_ReverseLight(ExtLights_ReverseLight_CurrentState);
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <ExtLights_LightState+0x174>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f96e 	bl	8001200 <ExtLights_ReverseLight>
	ExtLights_BrakeLight(ExtLights_BrakeLight_CurrentState);
 8000f24:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <ExtLights_LightState+0x178>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f000 f957 	bl	80011dc <ExtLights_BrakeLight>
	ExtLights_HighBeam(ExtLights_HighBeam_CurrentState);
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <ExtLights_LightState+0x184>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f8d4 	bl	80010e0 <ExtLights_HighBeam>
	ExtLights_RearFogLight(ExtLights_RearFogLight_CurrentState);
 8000f38:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <ExtLights_LightState+0x198>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f000 f93b 	bl	80011b8 <ExtLights_RearFogLight>
	ExtLights_FrontFogLight(ExtLights_FrontFogLight_CurrentState);
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <ExtLights_LightState+0x188>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f8ee 	bl	8001128 <ExtLights_FrontFogLight>

}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	200000ac 	.word	0x200000ac
 8000f54:	20000510 	.word	0x20000510
 8000f58:	200000b3 	.word	0x200000b3
 8000f5c:	200000b4 	.word	0x200000b4
 8000f60:	200000b5 	.word	0x200000b5
 8000f64:	200000b6 	.word	0x200000b6
 8000f68:	200000b7 	.word	0x200000b7
 8000f6c:	200000b8 	.word	0x200000b8
 8000f70:	200000b9 	.word	0x200000b9
 8000f74:	200000ba 	.word	0x200000ba
 8000f78:	200000bb 	.word	0x200000bb
 8000f7c:	200000bc 	.word	0x200000bc
 8000f80:	200000b0 	.word	0x200000b0
 8000f84:	20000000 	.word	0x20000000

08000f88 <ExtLights_MainFunction>:

void ExtLights_MainFunction()
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0

	ExtLights_LightState();
 8000f8c:	f7ff ff2a 	bl	8000de4 <ExtLights_LightState>
	ExtLights_PrevStateTSHL();
 8000f90:	f7ff fee2 	bl	8000d58 <ExtLights_PrevStateTSHL>

}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <ExtLights_LightSwitchMode>:

void ExtLights_LightSwitchMode()
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0

	switch(ExtLights_LightsSwitch_CurrentState)
 8000f9c:	4b31      	ldr	r3, [pc, #196]	; (8001064 <ExtLights_LightSwitchMode+0xcc>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	3b17      	subs	r3, #23
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d859      	bhi.n	800105a <ExtLights_LightSwitchMode+0xc2>
 8000fa6:	a201      	add	r2, pc, #4	; (adr r2, 8000fac <ExtLights_LightSwitchMode+0x14>)
 8000fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fac:	08000fbd 	.word	0x08000fbd
 8000fb0:	08000fd7 	.word	0x08000fd7
 8000fb4:	08001027 	.word	0x08001027
 8000fb8:	08001041 	.word	0x08001041
	{
		case EXTLIGHTS_LIGHTSWITCH_STATEZERO:

			ExtLights_LowBeam(STD_LOW);
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f000 f87d 	bl	80010bc <ExtLights_LowBeam>
			ExtLights_DayTimeRunningLight(STD_LOW);
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	f000 f89e 	bl	8001104 <ExtLights_DayTimeRunningLight>
			ExtLights_RearPositionLight(STD_LOW);
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f000 f8e3 	bl	8001194 <ExtLights_RearPositionLight>
			ExtLights_LicensePlateLight(STD_LOW);
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f000 f928 	bl	8001224 <ExtLights_LicensePlateLight>

			break;
 8000fd4:	e044      	b.n	8001060 <ExtLights_LightSwitchMode+0xc8>

		case EXTLIGHTS_LIGHTSWITCH_STATEONE:

			lightSensorState = ExtLights_LightReadSensorValue();
 8000fd6:	f000 f849 	bl	800106c <ExtLights_LightReadSensorValue>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4b22      	ldr	r3, [pc, #136]	; (8001068 <ExtLights_LightSwitchMode+0xd0>)
 8000fe0:	701a      	strb	r2, [r3, #0]

			if(lightSensorState == STD_HIGH)
 8000fe2:	4b21      	ldr	r3, [pc, #132]	; (8001068 <ExtLights_LightSwitchMode+0xd0>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d10c      	bne.n	8001004 <ExtLights_LightSwitchMode+0x6c>
			{

				ExtLights_LowBeam(STD_HIGH);
 8000fea:	2001      	movs	r0, #1
 8000fec:	f000 f866 	bl	80010bc <ExtLights_LowBeam>
				ExtLights_DayTimeRunningLight(STD_HIGH);
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	f000 f887 	bl	8001104 <ExtLights_DayTimeRunningLight>
				ExtLights_RearPositionLight(STD_HIGH);
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f000 f8cc 	bl	8001194 <ExtLights_RearPositionLight>
				ExtLights_LicensePlateLight(STD_HIGH);
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f000 f911 	bl	8001224 <ExtLights_LicensePlateLight>
				ExtLights_RearPositionLight(STD_LOW);
				ExtLights_LicensePlateLight(STD_LOW);

			}

			break;
 8001002:	e02c      	b.n	800105e <ExtLights_LightSwitchMode+0xc6>
			else if(lightSensorState == STD_LOW)
 8001004:	4b18      	ldr	r3, [pc, #96]	; (8001068 <ExtLights_LightSwitchMode+0xd0>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d128      	bne.n	800105e <ExtLights_LightSwitchMode+0xc6>
				ExtLights_LowBeam(STD_LOW);
 800100c:	2000      	movs	r0, #0
 800100e:	f000 f855 	bl	80010bc <ExtLights_LowBeam>
				ExtLights_DayTimeRunningLight(STD_HIGH);
 8001012:	2001      	movs	r0, #1
 8001014:	f000 f876 	bl	8001104 <ExtLights_DayTimeRunningLight>
				ExtLights_RearPositionLight(STD_LOW);
 8001018:	2000      	movs	r0, #0
 800101a:	f000 f8bb 	bl	8001194 <ExtLights_RearPositionLight>
				ExtLights_LicensePlateLight(STD_LOW);
 800101e:	2000      	movs	r0, #0
 8001020:	f000 f900 	bl	8001224 <ExtLights_LicensePlateLight>
			break;
 8001024:	e01b      	b.n	800105e <ExtLights_LightSwitchMode+0xc6>

		case EXTLIGHTS_LIGHTSWITCH_STATETWO:

			ExtLights_LowBeam(STD_LOW);
 8001026:	2000      	movs	r0, #0
 8001028:	f000 f848 	bl	80010bc <ExtLights_LowBeam>
			ExtLights_DayTimeRunningLight(STD_HIGH);
 800102c:	2001      	movs	r0, #1
 800102e:	f000 f869 	bl	8001104 <ExtLights_DayTimeRunningLight>
			ExtLights_RearPositionLight(STD_HIGH);
 8001032:	2001      	movs	r0, #1
 8001034:	f000 f8ae 	bl	8001194 <ExtLights_RearPositionLight>
			ExtLights_LicensePlateLight(STD_HIGH);
 8001038:	2001      	movs	r0, #1
 800103a:	f000 f8f3 	bl	8001224 <ExtLights_LicensePlateLight>

			break;
 800103e:	e00f      	b.n	8001060 <ExtLights_LightSwitchMode+0xc8>

		case EXTLIGHTS_LIGHTSWITCH_STATETHREE:

			ExtLights_LowBeam(STD_HIGH);
 8001040:	2001      	movs	r0, #1
 8001042:	f000 f83b 	bl	80010bc <ExtLights_LowBeam>
			ExtLights_DayTimeRunningLight(STD_HIGH);
 8001046:	2001      	movs	r0, #1
 8001048:	f000 f85c 	bl	8001104 <ExtLights_DayTimeRunningLight>
			ExtLights_RearPositionLight(STD_HIGH);
 800104c:	2001      	movs	r0, #1
 800104e:	f000 f8a1 	bl	8001194 <ExtLights_RearPositionLight>
			ExtLights_LicensePlateLight(STD_HIGH);
 8001052:	2001      	movs	r0, #1
 8001054:	f000 f8e6 	bl	8001224 <ExtLights_LicensePlateLight>

			break;
 8001058:	e002      	b.n	8001060 <ExtLights_LightSwitchMode+0xc8>

		default:

			break;
 800105a:	bf00      	nop
 800105c:	e000      	b.n	8001060 <ExtLights_LightSwitchMode+0xc8>
			break;
 800105e:	bf00      	nop

	}

}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200000b6 	.word	0x200000b6
 8001068:	200000cc 	.word	0x200000cc

0800106c <ExtLights_LightReadSensorValue>:
	return E_OK;

}

uint32 ExtLights_LightReadSensorValue()
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
	uint8 sensorStatus = STD_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	71fb      	strb	r3, [r7, #7]
	uint32 sensorValue  = STD_LOW;
 8001076:	2300      	movs	r3, #0
 8001078:	603b      	str	r3, [r7, #0]


	Rte_Call_ADC_R_ADCPort_HAL_ADC_Start_DMA(&hadc1, Adc_ChannelOne_Buffer, 2);
 800107a:	2202      	movs	r2, #2
 800107c:	490d      	ldr	r1, [pc, #52]	; (80010b4 <ExtLights_LightReadSensorValue+0x48>)
 800107e:	480e      	ldr	r0, [pc, #56]	; (80010b8 <ExtLights_LightReadSensorValue+0x4c>)
 8001080:	f00a fb4f 	bl	800b722 <Rte_Call_ADC_R_ADCPort_HAL_ADC_Start_DMA>
	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&sensorValue, RTE_P_ADC_BUFFER_LIGHTSEN);
 8001084:	463b      	mov	r3, r7
 8001086:	2101      	movs	r1, #1
 8001088:	4618      	mov	r0, r3
 800108a:	f00a f8b9 	bl	800b200 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>

	if(sensorValue < 4000)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001094:	d202      	bcs.n	800109c <ExtLights_LightReadSensorValue+0x30>
	{

		sensorStatus = STD_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	71fb      	strb	r3, [r7, #7]
 800109a:	e005      	b.n	80010a8 <ExtLights_LightReadSensorValue+0x3c>

	}
	else if(sensorValue > 4000)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80010a2:	d901      	bls.n	80010a8 <ExtLights_LightReadSensorValue+0x3c>
	{

		sensorStatus = STD_HIGH;
 80010a4:	2301      	movs	r3, #1
 80010a6:	71fb      	strb	r3, [r7, #7]

		/* do nothing */

	}

	return sensorStatus;
 80010a8:	79fb      	ldrb	r3, [r7, #7]

}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200007ec 	.word	0x200007ec
 80010b8:	200000d8 	.word	0x200000d8

080010bc <ExtLights_LowBeam>:

void ExtLights_LowBeam(uint8 PinState)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_LOWBEAM_PORT, EXTLIGHTS_LOWBEAM_PIN, PinState);
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	461a      	mov	r2, r3
 80010ca:	2110      	movs	r1, #16
 80010cc:	4803      	ldr	r0, [pc, #12]	; (80010dc <ExtLights_LowBeam+0x20>)
 80010ce:	f00a fb15 	bl	800b6fc <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40020000 	.word	0x40020000

080010e0 <ExtLights_HighBeam>:

void ExtLights_HighBeam(uint8 PinState)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_HIGHBEAM_PORT, EXTLIGHTS_HIGHBEAM_PIN, PinState);
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	461a      	mov	r2, r3
 80010ee:	2101      	movs	r1, #1
 80010f0:	4803      	ldr	r0, [pc, #12]	; (8001100 <ExtLights_HighBeam+0x20>)
 80010f2:	f00a fb03 	bl	800b6fc <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40020400 	.word	0x40020400

08001104 <ExtLights_DayTimeRunningLight>:

void ExtLights_DayTimeRunningLight(uint8 PinState)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_DAYTIMERUNNINGLIGHT_PORT, EXTLIGHTS_DAYTIMERUNNINGLIGHT_PIN, PinState);
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	461a      	mov	r2, r3
 8001112:	2102      	movs	r1, #2
 8001114:	4803      	ldr	r0, [pc, #12]	; (8001124 <ExtLights_DayTimeRunningLight+0x20>)
 8001116:	f00a faf1 	bl	800b6fc <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40020000 	.word	0x40020000

08001128 <ExtLights_FrontFogLight>:

void ExtLights_FrontFogLight(uint8 PinState)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_FRONTFOGLIGHT_PORT, EXTLIGHTS_FRONTFOGLIGHT_PIN, PinState);
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	461a      	mov	r2, r3
 8001136:	2108      	movs	r1, #8
 8001138:	4803      	ldr	r0, [pc, #12]	; (8001148 <ExtLights_FrontFogLight+0x20>)
 800113a:	f00a fadf 	bl	800b6fc <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40020800 	.word	0x40020800

0800114c <ExtLights_TurnSignalLeft>:

void ExtLights_TurnSignalLeft(uint8 PinState)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_TURNSIGNALLEFT_PORT, EXTLIGHTS_TURNSIGNALLEFT_PIN, PinState);
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	461a      	mov	r2, r3
 800115a:	2101      	movs	r1, #1
 800115c:	4803      	ldr	r0, [pc, #12]	; (800116c <ExtLights_TurnSignalLeft+0x20>)
 800115e:	f00a facd 	bl	800b6fc <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40020800 	.word	0x40020800

08001170 <ExtLights_TurnSignalRight>:

void ExtLights_TurnSignalRight(uint8 PinState)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_TURNSIGNALRIGHT_PORT, EXTLIGHTS_TURNSIGNALRIGHT_PIN, PinState);
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	461a      	mov	r2, r3
 800117e:	2102      	movs	r1, #2
 8001180:	4803      	ldr	r0, [pc, #12]	; (8001190 <ExtLights_TurnSignalRight+0x20>)
 8001182:	f00a fabb 	bl	800b6fc <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40020800 	.word	0x40020800

08001194 <ExtLights_RearPositionLight>:

void ExtLights_RearPositionLight(uint8 PinState)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_REARPOSITIONLIGHT_PORT, EXTLIGHTS_REARPOSITIONLIGHT_PIN, PinState);
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	461a      	mov	r2, r3
 80011a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011a6:	4803      	ldr	r0, [pc, #12]	; (80011b4 <ExtLights_RearPositionLight+0x20>)
 80011a8:	f00a faa8 	bl	800b6fc <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40020800 	.word	0x40020800

080011b8 <ExtLights_RearFogLight>:

void ExtLights_RearFogLight(uint8 PinState)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_REARFOGLIGHT_PORT, EXTLIGHTS_REARFOGLIGHT_PIN, PinState);
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	461a      	mov	r2, r3
 80011c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ca:	4803      	ldr	r0, [pc, #12]	; (80011d8 <ExtLights_RearFogLight+0x20>)
 80011cc:	f00a fa96 	bl	800b6fc <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40020800 	.word	0x40020800

080011dc <ExtLights_BrakeLight>:

void ExtLights_BrakeLight(uint8 PinState)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_BRAKELIGHT_PORT, EXTLIGHTS_BRAKELIGHT_PIN, PinState);
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	461a      	mov	r2, r3
 80011ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011ee:	4803      	ldr	r0, [pc, #12]	; (80011fc <ExtLights_BrakeLight+0x20>)
 80011f0:	f00a fa84 	bl	800b6fc <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40020800 	.word	0x40020800

08001200 <ExtLights_ReverseLight>:

void ExtLights_ReverseLight(uint8 PinState)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_REVERSELIGHT_PORT, EXTLIGHTS_REVERSELIGHT_PIN, PinState);
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	461a      	mov	r2, r3
 800120e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001212:	4803      	ldr	r0, [pc, #12]	; (8001220 <ExtLights_ReverseLight+0x20>)
 8001214:	f00a fa72 	bl	800b6fc <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40020000 	.word	0x40020000

08001224 <ExtLights_LicensePlateLight>:

void ExtLights_LicensePlateLight(uint8 PinState)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_LICENSEPLATELIGHT_PORT, EXTLIGHTS_LICENSEPLATELIGHT_PIN, PinState);
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	461a      	mov	r2, r3
 8001232:	2104      	movs	r1, #4
 8001234:	4803      	ldr	r0, [pc, #12]	; (8001244 <ExtLights_LicensePlateLight+0x20>)
 8001236:	f00a fa61 	bl	800b6fc <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40020000 	.word	0x40020000

08001248 <IntLights_RxBtcState>:
void IntLights_MainFunction();
void IntLights_ToggleIntLights(uint8 PinState);
void IntLights_RxBtcState();

void IntLights_RxBtcState()
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0

	uint8 lightsStateFromBtcCommand;

	Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(&lightsStateFromBtcCommand);
 800124e:	1dfb      	adds	r3, r7, #7
 8001250:	4618      	mov	r0, r3
 8001252:	f00a fa07 	bl	800b664 <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>

	switch(lightsStateFromBtcCommand)
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	3b01      	subs	r3, #1
 800125a:	2b13      	cmp	r3, #19
 800125c:	d83a      	bhi.n	80012d4 <IntLights_RxBtcState+0x8c>
 800125e:	a201      	add	r2, pc, #4	; (adr r2, 8001264 <IntLights_RxBtcState+0x1c>)
 8001260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001264:	080012b5 	.word	0x080012b5
 8001268:	080012bd 	.word	0x080012bd
 800126c:	080012d5 	.word	0x080012d5
 8001270:	080012d5 	.word	0x080012d5
 8001274:	080012d5 	.word	0x080012d5
 8001278:	080012d5 	.word	0x080012d5
 800127c:	080012d5 	.word	0x080012d5
 8001280:	080012d5 	.word	0x080012d5
 8001284:	080012d5 	.word	0x080012d5
 8001288:	080012d5 	.word	0x080012d5
 800128c:	080012d5 	.word	0x080012d5
 8001290:	080012d5 	.word	0x080012d5
 8001294:	080012d5 	.word	0x080012d5
 8001298:	080012d5 	.word	0x080012d5
 800129c:	080012d5 	.word	0x080012d5
 80012a0:	080012d5 	.word	0x080012d5
 80012a4:	080012d5 	.word	0x080012d5
 80012a8:	080012d5 	.word	0x080012d5
 80012ac:	080012c5 	.word	0x080012c5
 80012b0:	080012cd 	.word	0x080012cd
	{
		case LIGHTSON_CENLOCON:

			IntLights_CurrentState = STD_HIGH;
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <IntLights_RxBtcState+0x94>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	701a      	strb	r2, [r3, #0]

			break;
 80012ba:	e00b      	b.n	80012d4 <IntLights_RxBtcState+0x8c>

		case LIGHTSOFF_CENLOCOFF:

			IntLights_CurrentState = STD_LOW;
 80012bc:	4b07      	ldr	r3, [pc, #28]	; (80012dc <IntLights_RxBtcState+0x94>)
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]

			break;
 80012c2:	e007      	b.n	80012d4 <IntLights_RxBtcState+0x8c>

		case LIGHTSON_INTLIGHTSON:

			IntLights_CurrentState = STD_HIGH;
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <IntLights_RxBtcState+0x94>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]

			break;
 80012ca:	e003      	b.n	80012d4 <IntLights_RxBtcState+0x8c>

		case LIGHTSOFF_INTLIGHTSOFF:

			IntLights_CurrentState = STD_LOW;
 80012cc:	4b03      	ldr	r3, [pc, #12]	; (80012dc <IntLights_RxBtcState+0x94>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]

			break;
 80012d2:	bf00      	nop

	}

}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	200000cd 	.word	0x200000cd

080012e0 <IntLights_MainFunction>:

void IntLights_MainFunction()
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0

	IntLights_RxBtcState();
 80012e4:	f7ff ffb0 	bl	8001248 <IntLights_RxBtcState>
	IntLights_ToggleIntLights(IntLights_CurrentState);
 80012e8:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <IntLights_MainFunction+0x18>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 f805 	bl	80012fc <IntLights_ToggleIntLights>

}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200000cd 	.word	0x200000cd

080012fc <IntLights_ToggleIntLights>:
	return E_OK;

}

void IntLights_ToggleIntLights(uint8 PinState)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(INTERIOR_LIGHT_PORT, INTERIOR_LIGHT_PIN, PinState);
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	461a      	mov	r2, r3
 800130a:	2104      	movs	r1, #4
 800130c:	4803      	ldr	r0, [pc, #12]	; (800131c <IntLights_ToggleIntLights+0x20>)
 800130e:	f00a f9f5 	bl	800b6fc <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40020800 	.word	0x40020800

08001320 <SecAlm_LightsBuzzerControl>:
void SecAlm_LightsBuzzerControl();

uint8 SecAlm_TriggerPreviousState;

void SecAlm_LightsBuzzerControl()
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0

	uint32 sensorStatus = STD_LOW;
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]

	sensorStatus = SecAlm_VibSenStatus();
 800132a:	f000 f89d 	bl	8001468 <SecAlm_VibSenStatus>
 800132e:	4603      	mov	r3, r0
 8001330:	607b      	str	r3, [r7, #4]

	if(SecAlm_TriggerPreviousState != SecAlm_Trigger && !SecAlm_Trigger)
 8001332:	4b38      	ldr	r3, [pc, #224]	; (8001414 <SecAlm_LightsBuzzerControl+0xf4>)
 8001334:	781a      	ldrb	r2, [r3, #0]
 8001336:	4b38      	ldr	r3, [pc, #224]	; (8001418 <SecAlm_LightsBuzzerControl+0xf8>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	429a      	cmp	r2, r3
 800133c:	d006      	beq.n	800134c <SecAlm_LightsBuzzerControl+0x2c>
 800133e:	4b36      	ldr	r3, [pc, #216]	; (8001418 <SecAlm_LightsBuzzerControl+0xf8>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d102      	bne.n	800134c <SecAlm_LightsBuzzerControl+0x2c>
	{

		SecAlm_TriggerIRQCounterForTimer4 = STD_LOW;
 8001346:	4b35      	ldr	r3, [pc, #212]	; (800141c <SecAlm_LightsBuzzerControl+0xfc>)
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(SecAlm_TriggerIRQCounterForTimer4 >= 20)
 800134c:	4b33      	ldr	r3, [pc, #204]	; (800141c <SecAlm_LightsBuzzerControl+0xfc>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b13      	cmp	r3, #19
 8001352:	d920      	bls.n	8001396 <SecAlm_LightsBuzzerControl+0x76>
	{

		SecAlm_TriggerPreviousState 		= SecAlm_Trigger;
 8001354:	4b30      	ldr	r3, [pc, #192]	; (8001418 <SecAlm_LightsBuzzerControl+0xf8>)
 8001356:	781a      	ldrb	r2, [r3, #0]
 8001358:	4b2e      	ldr	r3, [pc, #184]	; (8001414 <SecAlm_LightsBuzzerControl+0xf4>)
 800135a:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim3IRQFlag 					= STD_HIGH;
 800135c:	4b30      	ldr	r3, [pc, #192]	; (8001420 <SecAlm_LightsBuzzerControl+0x100>)
 800135e:	2201      	movs	r2, #1
 8001360:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim11IRQFlag 				= STD_LOW;
 8001362:	4b30      	ldr	r3, [pc, #192]	; (8001424 <SecAlm_LightsBuzzerControl+0x104>)
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]
		SecAlm_Trigger 						= STD_LOW;
 8001368:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <SecAlm_LightsBuzzerControl+0xf8>)
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]
		SecAlm_PinStateChange 				= STD_LOW;
 800136e:	4b2e      	ldr	r3, [pc, #184]	; (8001428 <SecAlm_LightsBuzzerControl+0x108>)
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
		SecAlm_TriggerIRQCounterForTimer4 	= STD_LOW;
 8001374:	4b29      	ldr	r3, [pc, #164]	; (800141c <SecAlm_LightsBuzzerControl+0xfc>)
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]
		SecAlm_SensorStatusCounter 			= STD_LOW;
 800137a:	4b2c      	ldr	r3, [pc, #176]	; (800142c <SecAlm_LightsBuzzerControl+0x10c>)
 800137c:	2200      	movs	r2, #0
 800137e:	801a      	strh	r2, [r3, #0]
		SecAlm_SensorStatus 				= STD_LOW;
 8001380:	4b2b      	ldr	r3, [pc, #172]	; (8001430 <SecAlm_LightsBuzzerControl+0x110>)
 8001382:	2200      	movs	r2, #0
 8001384:	801a      	strh	r2, [r3, #0]
		SecAlm_SensorStatusCounter 			= STD_LOW;
 8001386:	4b29      	ldr	r3, [pc, #164]	; (800142c <SecAlm_LightsBuzzerControl+0x10c>)
 8001388:	2200      	movs	r2, #0
 800138a:	801a      	strh	r2, [r3, #0]

		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT(&htim4);
 800138c:	4829      	ldr	r0, [pc, #164]	; (8001434 <SecAlm_LightsBuzzerControl+0x114>)
 800138e:	f00a f9a9 	bl	800b6e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT>
		SecAlm_TurnOnExtLights();
 8001392:	f000 f89f 	bl	80014d4 <SecAlm_TurnOnExtLights>

		/* do nothing */

	}

	if(SecAlm_SensorStatusCounter == STD_LOW)
 8001396:	4b25      	ldr	r3, [pc, #148]	; (800142c <SecAlm_LightsBuzzerControl+0x10c>)
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d107      	bne.n	80013ae <SecAlm_LightsBuzzerControl+0x8e>
	{

		sensorStatus 	= STD_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
		SecAlm_Trigger 	= STD_LOW;
 80013a2:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <SecAlm_LightsBuzzerControl+0xf8>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
		SecAlm_PinStateChange = STD_LOW;
 80013a8:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <SecAlm_LightsBuzzerControl+0x108>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(sensorStatus == STD_HIGH)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d102      	bne.n	80013ba <SecAlm_LightsBuzzerControl+0x9a>
	{

		SecAlm_Trigger = STD_HIGH;
 80013b4:	4b18      	ldr	r3, [pc, #96]	; (8001418 <SecAlm_LightsBuzzerControl+0xf8>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(SecAlm_Trigger == STD_HIGH)
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <SecAlm_LightsBuzzerControl+0xf8>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d11c      	bne.n	80013fc <SecAlm_LightsBuzzerControl+0xdc>
	{

		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT(&htim4);
 80013c2:	481c      	ldr	r0, [pc, #112]	; (8001434 <SecAlm_LightsBuzzerControl+0x114>)
 80013c4:	f00a f982 	bl	800b6cc <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT>

		if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 1)
 80013c8:	4b14      	ldr	r3, [pc, #80]	; (800141c <SecAlm_LightsBuzzerControl+0xfc>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d005      	beq.n	80013e2 <SecAlm_LightsBuzzerControl+0xc2>
		{

			SecAlm_PinStateChange = STD_HIGH;
 80013d6:	4b14      	ldr	r3, [pc, #80]	; (8001428 <SecAlm_LightsBuzzerControl+0x108>)
 80013d8:	2201      	movs	r2, #1
 80013da:	701a      	strb	r2, [r3, #0]
			SecAlm_TurnOnExtLights();
 80013dc:	f000 f87a 	bl	80014d4 <SecAlm_TurnOnExtLights>

		/* do nothing */

	}

}
 80013e0:	e013      	b.n	800140a <SecAlm_LightsBuzzerControl+0xea>
		else if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 0)
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <SecAlm_LightsBuzzerControl+0xfc>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d10c      	bne.n	800140a <SecAlm_LightsBuzzerControl+0xea>
			SecAlm_PinStateChange = STD_LOW;
 80013f0:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <SecAlm_LightsBuzzerControl+0x108>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	701a      	strb	r2, [r3, #0]
			SecAlm_TurnOnExtLights();
 80013f6:	f000 f86d 	bl	80014d4 <SecAlm_TurnOnExtLights>
}
 80013fa:	e006      	b.n	800140a <SecAlm_LightsBuzzerControl+0xea>
	else if(SecAlm_Trigger == STD_LOW)
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <SecAlm_LightsBuzzerControl+0xf8>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d102      	bne.n	800140a <SecAlm_LightsBuzzerControl+0xea>
		SecAlm_ToggleAlarmBuzzer(STD_LOW);
 8001404:	2000      	movs	r0, #0
 8001406:	f000 f8b9 	bl	800157c <SecAlm_ToggleAlarmBuzzer>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200000d6 	.word	0x200000d6
 8001418:	200000ce 	.word	0x200000ce
 800141c:	200000d0 	.word	0x200000d0
 8001420:	200000af 	.word	0x200000af
 8001424:	200000b1 	.word	0x200000b1
 8001428:	200000cf 	.word	0x200000cf
 800142c:	200000d2 	.word	0x200000d2
 8001430:	200000d4 	.word	0x200000d4
 8001434:	2000045c 	.word	0x2000045c

08001438 <SecAlm_VibSenReadSensorValue>:


uint32 SecAlm_VibSenReadSensorValue()
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0

	uint32 sensorValue = STD_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]

	Rte_Call_ADC_R_ADCPort_HAL_ADC_Start_DMA(&hadc1, Adc_ChannelOne_Buffer, 2);
 8001442:	2202      	movs	r2, #2
 8001444:	4906      	ldr	r1, [pc, #24]	; (8001460 <SecAlm_VibSenReadSensorValue+0x28>)
 8001446:	4807      	ldr	r0, [pc, #28]	; (8001464 <SecAlm_VibSenReadSensorValue+0x2c>)
 8001448:	f00a f96b 	bl	800b722 <Rte_Call_ADC_R_ADCPort_HAL_ADC_Start_DMA>
	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&sensorValue, RTE_P_ADC_BUFFER_VIBSEN);
 800144c:	1d3b      	adds	r3, r7, #4
 800144e:	2100      	movs	r1, #0
 8001450:	4618      	mov	r0, r3
 8001452:	f009 fed5 	bl	800b200 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>

	return sensorValue;
 8001456:	687b      	ldr	r3, [r7, #4]

}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	200007ec 	.word	0x200007ec
 8001464:	200000d8 	.word	0x200000d8

08001468 <SecAlm_VibSenStatus>:

StdReturnType SecAlm_VibSenStatus()
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0

	uint16 sensorValue 		= STD_LOW;
 800146e:	2300      	movs	r3, #0
 8001470:	80bb      	strh	r3, [r7, #4]
	uint16 sensorStatus 	= STD_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	80fb      	strh	r3, [r7, #6]

	sensorValue = SecAlm_VibSenReadSensorValue();
 8001476:	f7ff ffdf 	bl	8001438 <SecAlm_VibSenReadSensorValue>
 800147a:	4603      	mov	r3, r0
 800147c:	80bb      	strh	r3, [r7, #4]

	if(sensorValue == 4095)
 800147e:	88bb      	ldrh	r3, [r7, #4]
 8001480:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001484:	4293      	cmp	r3, r2
 8001486:	d10c      	bne.n	80014a2 <SecAlm_VibSenStatus+0x3a>
	{

		SecAlm_SensorStatusCounter = SecAlm_SensorStatusCounter + 1;
 8001488:	4b10      	ldr	r3, [pc, #64]	; (80014cc <SecAlm_VibSenStatus+0x64>)
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	3301      	adds	r3, #1
 800148e:	b29a      	uxth	r2, r3
 8001490:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <SecAlm_VibSenStatus+0x64>)
 8001492:	801a      	strh	r2, [r3, #0]
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlm_AlarmResetHandle, 10000);
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <SecAlm_VibSenStatus+0x68>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f242 7110 	movw	r1, #10000	; 0x2710
 800149c:	4618      	mov	r0, r3
 800149e:	f00a f950 	bl	800b742 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>

		/* do nothing */

	}

	if(SecAlm_SensorStatusCounter >= 500)
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <SecAlm_VibSenStatus+0x64>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014aa:	d302      	bcc.n	80014b2 <SecAlm_VibSenStatus+0x4a>
	{

		sensorStatus = STD_HIGH;
 80014ac:	2301      	movs	r3, #1
 80014ae:	80fb      	strh	r3, [r7, #6]
 80014b0:	e006      	b.n	80014c0 <SecAlm_VibSenStatus+0x58>

	}
	else if(SecAlm_SensorStatusCounter < 500)
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <SecAlm_VibSenStatus+0x64>)
 80014b4:	881b      	ldrh	r3, [r3, #0]
 80014b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014ba:	d201      	bcs.n	80014c0 <SecAlm_VibSenStatus+0x58>
	{

		sensorStatus = STD_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	80fb      	strh	r3, [r7, #6]

		/* do nothing */

	}

	return sensorStatus;
 80014c0:	88fb      	ldrh	r3, [r7, #6]
 80014c2:	b2db      	uxtb	r3, r3

}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200000d2 	.word	0x200000d2
 80014d0:	200001b8 	.word	0x200001b8

080014d4 <SecAlm_TurnOnExtLights>:


void SecAlm_TurnOnExtLights()
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0

	Rte_Call_ExtLights_R_ExtLightsPort_ExtLights_LowBeam(SecAlm_PinStateChange);
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <SecAlm_TurnOnExtLights+0x50>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fded 	bl	80010bc <ExtLights_LowBeam>
	Rte_Call_ExtLights_R_ExtLightsPort_ExtLights_RearPositionLight(SecAlm_PinStateChange);
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <SecAlm_TurnOnExtLights+0x50>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fe54 	bl	8001194 <ExtLights_RearPositionLight>
	Rte_Call_ExtLights_R_ExtLightsPort_ExtLights_FrontFogLight(SecAlm_PinStateChange);
 80014ec:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <SecAlm_TurnOnExtLights+0x50>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fe19 	bl	8001128 <ExtLights_FrontFogLight>
	Rte_Call_ExtLights_R_ExtLightsPort_ExtLights_RearFogLight(SecAlm_PinStateChange);
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <SecAlm_TurnOnExtLights+0x50>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fe5c 	bl	80011b8 <ExtLights_RearFogLight>
	Rte_Call_ExtLights_R_ExtLightsPort_ExtLights_TurnSignalRight(SecAlm_PinStateChange);
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <SecAlm_TurnOnExtLights+0x50>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fe33 	bl	8001170 <ExtLights_TurnSignalRight>
	Rte_Call_ExtLights_R_ExtLightsPort_ExtLights_TurnSignalLeft(SecAlm_PinStateChange);
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <SecAlm_TurnOnExtLights+0x50>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fe1c 	bl	800114c <ExtLights_TurnSignalLeft>
	SecAlm_ToggleAlarmBuzzer(SecAlm_PinStateChange);
 8001514:	4b03      	ldr	r3, [pc, #12]	; (8001524 <SecAlm_TurnOnExtLights+0x50>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f000 f82f 	bl	800157c <SecAlm_ToggleAlarmBuzzer>

}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200000cf 	.word	0x200000cf

08001528 <SecAlm_MainFunction>:

void SecAlm_MainFunction()
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0

	SecAlm_LightsBuzzerControl();
 800152c:	f7ff fef8 	bl	8001320 <SecAlm_LightsBuzzerControl>

}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}

08001534 <SecAlm_Init>:


StdReturnType SecAlm_Init()
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0

	SecAlm_Trigger 						= STD_LOW;
 8001538:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <SecAlm_Init+0x30>)
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
	SecAlm_PinStateChange 				= STD_LOW;
 800153e:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <SecAlm_Init+0x34>)
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
	SecAlm_TriggerIRQCounterForTimer4 	= STD_LOW;
 8001544:	4b09      	ldr	r3, [pc, #36]	; (800156c <SecAlm_Init+0x38>)
 8001546:	2200      	movs	r2, #0
 8001548:	701a      	strb	r2, [r3, #0]
	SecAlm_SensorStatusCounter 			= STD_LOW;
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <SecAlm_Init+0x3c>)
 800154c:	2200      	movs	r2, #0
 800154e:	801a      	strh	r2, [r3, #0]
	SecAlm_SensorStatus 				= STD_LOW;
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <SecAlm_Init+0x40>)
 8001552:	2200      	movs	r2, #0
 8001554:	801a      	strh	r2, [r3, #0]

	Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init(&htim4);
 8001556:	4808      	ldr	r0, [pc, #32]	; (8001578 <SecAlm_Init+0x44>)
 8001558:	f00a f8ac 	bl	800b6b4 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init>

	return E_OK;
 800155c:	2300      	movs	r3, #0

}
 800155e:	4618      	mov	r0, r3
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200000ce 	.word	0x200000ce
 8001568:	200000cf 	.word	0x200000cf
 800156c:	200000d0 	.word	0x200000d0
 8001570:	200000d2 	.word	0x200000d2
 8001574:	200000d4 	.word	0x200000d4
 8001578:	2000045c 	.word	0x2000045c

0800157c <SecAlm_ToggleAlarmBuzzer>:


void SecAlm_ToggleAlarmBuzzer(uint8 PinState)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(SECALM_BUZZER_PORT, SECALM_BUZZER_PIN, PinState);
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	461a      	mov	r2, r3
 800158a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800158e:	4803      	ldr	r0, [pc, #12]	; (800159c <SecAlm_ToggleAlarmBuzzer+0x20>)
 8001590:	f00a f8b4 	bl	800b6fc <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40020400 	.word	0x40020400

080015a0 <SecAlm_ToggleAlarmLed>:


void SecAlm_ToggleAlarmLed(uint8 PinState)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(SECALM_LED_PORT, SECALM_LED_PIN, PinState);
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	461a      	mov	r2, r3
 80015ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015b2:	4803      	ldr	r0, [pc, #12]	; (80015c0 <SecAlm_ToggleAlarmLed+0x20>)
 80015b4:	f00a f8a2 	bl	800b6fc <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 80015b8:	bf00      	nop
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40020000 	.word	0x40020000

080015c4 <Uart_Init>:
void Uart_MainFunction();
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);

StdReturnType Uart_Init()
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0

	huart1.Instance = USART1;
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <Uart_Init+0x50>)
 80015ca:	4a13      	ldr	r2, [pc, #76]	; (8001618 <Uart_Init+0x54>)
 80015cc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80015ce:	4b11      	ldr	r3, [pc, #68]	; (8001614 <Uart_Init+0x50>)
 80015d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015d4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015d6:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <Uart_Init+0x50>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80015dc:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <Uart_Init+0x50>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80015e2:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <Uart_Init+0x50>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80015e8:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <Uart_Init+0x50>)
 80015ea:	220c      	movs	r2, #12
 80015ec:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <Uart_Init+0x50>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f4:	4b07      	ldr	r3, [pc, #28]	; (8001614 <Uart_Init+0x50>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&huart1) != HAL_OK)
 80015fa:	4806      	ldr	r0, [pc, #24]	; (8001614 <Uart_Init+0x50>)
 80015fc:	f004 fe82 	bl	8006304 <HAL_UART_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d002      	beq.n	800160c <Uart_Init+0x48>
	{

		HAL_UART_ErrorCallback(&huart1);
 8001606:	4803      	ldr	r0, [pc, #12]	; (8001614 <Uart_Init+0x50>)
 8001608:	f000 f826 	bl	8001658 <HAL_UART_ErrorCallback>

		/* do nothing */

	}

	return E_OK;
 800160c:	2300      	movs	r3, #0

}
 800160e:	4618      	mov	r0, r3
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	2000072c 	.word	0x2000072c
 8001618:	40011000 	.word	0x40011000

0800161c <Uart_DeInit>:

StdReturnType Uart_DeInit()
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0

	HAL_UART_DeInit(&huart1);
 8001620:	4802      	ldr	r0, [pc, #8]	; (800162c <Uart_DeInit+0x10>)
 8001622:	f004 fec9 	bl	80063b8 <HAL_UART_DeInit>

	return E_OK;
 8001626:	2300      	movs	r3, #0

}
 8001628:	4618      	mov	r0, r3
 800162a:	bd80      	pop	{r7, pc}
 800162c:	2000072c 	.word	0x2000072c

08001630 <Uart_MainFunction>:

void Uart_MainFunction()
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0

	uint32 localState = HAL_UART_GetState(&huart1);
 8001636:	4807      	ldr	r0, [pc, #28]	; (8001654 <Uart_MainFunction+0x24>)
 8001638:	f005 fa02 	bl	8006a40 <HAL_UART_GetState>
 800163c:	4603      	mov	r3, r0
 800163e:	607b      	str	r3, [r7, #4]

	if(localState == HAL_UART_STATE_ERROR)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2be0      	cmp	r3, #224	; 0xe0
 8001644:	d102      	bne.n	800164c <Uart_MainFunction+0x1c>
	{

		HAL_UART_ErrorCallback(&huart1);
 8001646:	4803      	ldr	r0, [pc, #12]	; (8001654 <Uart_MainFunction+0x24>)
 8001648:	f000 f806 	bl	8001658 <HAL_UART_ErrorCallback>

		/* do nothing */

	}

}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	2000072c 	.word	0x2000072c

08001658 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]

	uint32 receivedValue = HAL_UART_GetError(huart);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f005 fa0b 	bl	8006a7c <HAL_UART_GetError>
 8001666:	60f8      	str	r0, [r7, #12]

	switch(receivedValue)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2b10      	cmp	r3, #16
 800166c:	d83c      	bhi.n	80016e8 <HAL_UART_ErrorCallback+0x90>
 800166e:	a201      	add	r2, pc, #4	; (adr r2, 8001674 <HAL_UART_ErrorCallback+0x1c>)
 8001670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001674:	080016e9 	.word	0x080016e9
 8001678:	080016b9 	.word	0x080016b9
 800167c:	080016c1 	.word	0x080016c1
 8001680:	080016e9 	.word	0x080016e9
 8001684:	080016c9 	.word	0x080016c9
 8001688:	080016e9 	.word	0x080016e9
 800168c:	080016e9 	.word	0x080016e9
 8001690:	080016e9 	.word	0x080016e9
 8001694:	080016d1 	.word	0x080016d1
 8001698:	080016e9 	.word	0x080016e9
 800169c:	080016e9 	.word	0x080016e9
 80016a0:	080016e9 	.word	0x080016e9
 80016a4:	080016e9 	.word	0x080016e9
 80016a8:	080016e9 	.word	0x080016e9
 80016ac:	080016e9 	.word	0x080016e9
 80016b0:	080016e9 	.word	0x080016e9
 80016b4:	080016d9 	.word	0x080016d9

			break;

		case HAL_UART_ERROR_PE:

			SystemManager_Fault.fault[UART_ERROR_PE] = UART_ERROR_PE;
 80016b8:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <HAL_UART_ErrorCallback+0x9c>)
 80016ba:	2218      	movs	r2, #24
 80016bc:	661a      	str	r2, [r3, #96]	; 0x60

			break;
 80016be:	e014      	b.n	80016ea <HAL_UART_ErrorCallback+0x92>

		case HAL_UART_ERROR_NE:

			SystemManager_Fault.fault[UART_ERROR_NE] = UART_ERROR_NE;
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <HAL_UART_ErrorCallback+0x9c>)
 80016c2:	2219      	movs	r2, #25
 80016c4:	665a      	str	r2, [r3, #100]	; 0x64

			break;
 80016c6:	e010      	b.n	80016ea <HAL_UART_ErrorCallback+0x92>

		case HAL_UART_ERROR_FE:

			SystemManager_Fault.fault[UART_ERROR_FE] = UART_ERROR_FE;
 80016c8:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <HAL_UART_ErrorCallback+0x9c>)
 80016ca:	221a      	movs	r2, #26
 80016cc:	669a      	str	r2, [r3, #104]	; 0x68

			break;
 80016ce:	e00c      	b.n	80016ea <HAL_UART_ErrorCallback+0x92>

		case HAL_UART_ERROR_ORE:

			SystemManager_Fault.fault[UART_ERROR_ORE] = UART_ERROR_ORE;
 80016d0:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <HAL_UART_ErrorCallback+0x9c>)
 80016d2:	221b      	movs	r2, #27
 80016d4:	66da      	str	r2, [r3, #108]	; 0x6c

			break;
 80016d6:	e008      	b.n	80016ea <HAL_UART_ErrorCallback+0x92>

		case HAL_UART_ERROR_DMA:

			SystemManager_Fault.fault[UART_ERROR_ORE] = UART_ERROR_ORE;
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_UART_ErrorCallback+0x9c>)
 80016da:	221b      	movs	r2, #27
 80016dc:	66da      	str	r2, [r3, #108]	; 0x6c

			Uart_Init();
 80016de:	f7ff ff71 	bl	80015c4 <Uart_Init>
			Uart_DeInit();
 80016e2:	f7ff ff9b 	bl	800161c <Uart_DeInit>

			break;
 80016e6:	e000      	b.n	80016ea <HAL_UART_ErrorCallback+0x92>

		default:

			break;
 80016e8:	bf00      	nop

	}

}
 80016ea:	bf00      	nop
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20007a8c 	.word	0x20007a8c

080016f8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a20      	ldr	r2, [pc, #128]	; (8001788 <HAL_UART_RxCpltCallback+0x90>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d13a      	bne.n	8001780 <HAL_UART_RxCpltCallback+0x88>
	{

		if(Rte_P_Btc_BtcPort_Btc_RxData == '\n')
 800170a:	4b20      	ldr	r3, [pc, #128]	; (800178c <HAL_UART_RxCpltCallback+0x94>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b0a      	cmp	r3, #10
 8001710:	d11a      	bne.n	8001748 <HAL_UART_RxCpltCallback+0x50>
		{

			if(Rte_P_Btc_BtcPort_Btc_RxCount <= 3)
 8001712:	4b1f      	ldr	r3, [pc, #124]	; (8001790 <HAL_UART_RxCpltCallback+0x98>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b03      	cmp	r3, #3
 8001718:	d80f      	bhi.n	800173a <HAL_UART_RxCpltCallback+0x42>
			{

				//char endChar = '\0';
				uint8 asciiToUint = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	73fb      	strb	r3, [r7, #15]

				//Rte_Write_Btc_BtcPort_Btc_DataBuffer((uint8*)&endChar, Rte_P_Btc_BtcPort_Btc_RxCount);

				asciiToUint = atoi((char*)Rte_P_Btc_BtcPort_Btc_DataBuffer);
 800171e:	481d      	ldr	r0, [pc, #116]	; (8001794 <HAL_UART_RxCpltCallback+0x9c>)
 8001720:	f00a fed6 	bl	800c4d0 <atoi>
 8001724:	4603      	mov	r3, r0
 8001726:	b2db      	uxtb	r3, r3
 8001728:	73fb      	strb	r3, [r7, #15]

				Rte_Write_Btc_BtcPort_Btc_RxData(&asciiToUint);
 800172a:	f107 030f 	add.w	r3, r7, #15
 800172e:	4618      	mov	r0, r3
 8001730:	f009 fd20 	bl	800b174 <Rte_Write_Btc_BtcPort_Btc_RxData>
				Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(&Btc_RxData);
 8001734:	4815      	ldr	r0, [pc, #84]	; (800178c <HAL_UART_RxCpltCallback+0x94>)
 8001736:	f009 fd7d 	bl	800b234 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>

				/* do nothing */

			}

			UartCounter_Btc_RxCount = 0;
 800173a:	4b17      	ldr	r3, [pc, #92]	; (8001798 <HAL_UART_RxCpltCallback+0xa0>)
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
			Rte_Write_Btc_BtcPort_Btc_RxCount(&UartCounter_Btc_RxCount);
 8001740:	4815      	ldr	r0, [pc, #84]	; (8001798 <HAL_UART_RxCpltCallback+0xa0>)
 8001742:	f009 fd2d 	bl	800b1a0 <Rte_Write_Btc_BtcPort_Btc_RxCount>
 8001746:	e016      	b.n	8001776 <HAL_UART_RxCpltCallback+0x7e>

		}
		else if(Rte_P_Btc_BtcPort_Btc_RxCount < 3)
 8001748:	4b11      	ldr	r3, [pc, #68]	; (8001790 <HAL_UART_RxCpltCallback+0x98>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b02      	cmp	r3, #2
 800174e:	d80c      	bhi.n	800176a <HAL_UART_RxCpltCallback+0x72>
		{

			Rte_Write_Btc_BtcPort_Btc_DataBuffer(&Rte_P_Btc_BtcPort_Btc_RxData, UartCounter_Btc_RxCount);
 8001750:	4b11      	ldr	r3, [pc, #68]	; (8001798 <HAL_UART_RxCpltCallback+0xa0>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	4619      	mov	r1, r3
 8001756:	480d      	ldr	r0, [pc, #52]	; (800178c <HAL_UART_RxCpltCallback+0x94>)
 8001758:	f009 fd38 	bl	800b1cc <Rte_Write_Btc_BtcPort_Btc_DataBuffer>
			UartCounter_Btc_RxCount++;
 800175c:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <HAL_UART_RxCpltCallback+0xa0>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	3301      	adds	r3, #1
 8001762:	b2da      	uxtb	r2, r3
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <HAL_UART_RxCpltCallback+0xa0>)
 8001766:	701a      	strb	r2, [r3, #0]
 8001768:	e005      	b.n	8001776 <HAL_UART_RxCpltCallback+0x7e>

		}
		else
		{

			UartCounter_Btc_RxCount = 0;
 800176a:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <HAL_UART_RxCpltCallback+0xa0>)
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
			Rte_Write_Btc_BtcPort_Btc_RxCount(&UartCounter_Btc_RxCount);
 8001770:	4809      	ldr	r0, [pc, #36]	; (8001798 <HAL_UART_RxCpltCallback+0xa0>)
 8001772:	f009 fd15 	bl	800b1a0 <Rte_Write_Btc_BtcPort_Btc_RxCount>

		}

		Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT(&huart1, &Btc_RxData, 1);
 8001776:	2201      	movs	r2, #1
 8001778:	4904      	ldr	r1, [pc, #16]	; (800178c <HAL_UART_RxCpltCallback+0x94>)
 800177a:	4808      	ldr	r0, [pc, #32]	; (800179c <HAL_UART_RxCpltCallback+0xa4>)
 800177c:	f009 ff88 	bl	800b690 <Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT>

		/* do nothing */

	}

}
 8001780:	bf00      	nop
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40011000 	.word	0x40011000
 800178c:	20000098 	.word	0x20000098
 8001790:	20000099 	.word	0x20000099
 8001794:	20000094 	.word	0x20000094
 8001798:	200000d7 	.word	0x200000d7
 800179c:	2000072c 	.word	0x2000072c

080017a0 <HAL_ADC_MspInit>:
  /* USER CODE END ADC1_Init 2 */

}

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08a      	sub	sp, #40	; 0x28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a3b      	ldr	r2, [pc, #236]	; (80018ac <HAL_ADC_MspInit+0x10c>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d170      	bne.n	80018a4 <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	4b3a      	ldr	r3, [pc, #232]	; (80018b0 <HAL_ADC_MspInit+0x110>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ca:	4a39      	ldr	r2, [pc, #228]	; (80018b0 <HAL_ADC_MspInit+0x110>)
 80017cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d0:	6453      	str	r3, [r2, #68]	; 0x44
 80017d2:	4b37      	ldr	r3, [pc, #220]	; (80018b0 <HAL_ADC_MspInit+0x110>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	4b33      	ldr	r3, [pc, #204]	; (80018b0 <HAL_ADC_MspInit+0x110>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a32      	ldr	r2, [pc, #200]	; (80018b0 <HAL_ADC_MspInit+0x110>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b30      	ldr	r3, [pc, #192]	; (80018b0 <HAL_ADC_MspInit+0x110>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	4b2c      	ldr	r3, [pc, #176]	; (80018b0 <HAL_ADC_MspInit+0x110>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a2b      	ldr	r2, [pc, #172]	; (80018b0 <HAL_ADC_MspInit+0x110>)
 8001804:	f043 0304 	orr.w	r3, r3, #4
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b29      	ldr	r3, [pc, #164]	; (80018b0 <HAL_ADC_MspInit+0x110>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0304 	and.w	r3, r3, #4
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001816:	2340      	movs	r3, #64	; 0x40
 8001818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800181a:	2303      	movs	r3, #3
 800181c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	4822      	ldr	r0, [pc, #136]	; (80018b4 <HAL_ADC_MspInit+0x114>)
 800182a:	f002 fc89 	bl	8004140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LIGHTSEN_Pin;
 800182e:	2320      	movs	r3, #32
 8001830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001832:	2303      	movs	r3, #3
 8001834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LIGHTSEN_GPIO_Port, &GPIO_InitStruct);
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	4619      	mov	r1, r3
 8001840:	481d      	ldr	r0, [pc, #116]	; (80018b8 <HAL_ADC_MspInit+0x118>)
 8001842:	f002 fc7d 	bl	8004140 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001846:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <HAL_ADC_MspInit+0x11c>)
 8001848:	4a1d      	ldr	r2, [pc, #116]	; (80018c0 <HAL_ADC_MspInit+0x120>)
 800184a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800184c:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <HAL_ADC_MspInit+0x11c>)
 800184e:	2200      	movs	r2, #0
 8001850:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001852:	4b1a      	ldr	r3, [pc, #104]	; (80018bc <HAL_ADC_MspInit+0x11c>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001858:	4b18      	ldr	r3, [pc, #96]	; (80018bc <HAL_ADC_MspInit+0x11c>)
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800185e:	4b17      	ldr	r3, [pc, #92]	; (80018bc <HAL_ADC_MspInit+0x11c>)
 8001860:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001864:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <HAL_ADC_MspInit+0x11c>)
 8001868:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800186c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800186e:	4b13      	ldr	r3, [pc, #76]	; (80018bc <HAL_ADC_MspInit+0x11c>)
 8001870:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001874:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <HAL_ADC_MspInit+0x11c>)
 8001878:	2200      	movs	r2, #0
 800187a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800187c:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <HAL_ADC_MspInit+0x11c>)
 800187e:	2200      	movs	r2, #0
 8001880:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <HAL_ADC_MspInit+0x11c>)
 8001884:	2200      	movs	r2, #0
 8001886:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001888:	480c      	ldr	r0, [pc, #48]	; (80018bc <HAL_ADC_MspInit+0x11c>)
 800188a:	f001 fe51 	bl	8003530 <HAL_DMA_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001894:	f00a fdda 	bl	800c44c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a08      	ldr	r2, [pc, #32]	; (80018bc <HAL_ADC_MspInit+0x11c>)
 800189c:	639a      	str	r2, [r3, #56]	; 0x38
 800189e:	4a07      	ldr	r2, [pc, #28]	; (80018bc <HAL_ADC_MspInit+0x11c>)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80018a4:	bf00      	nop
 80018a6:	3728      	adds	r7, #40	; 0x28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40012000 	.word	0x40012000
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40020000 	.word	0x40020000
 80018b8:	40020800 	.word	0x40020800
 80018bc:	2000013c 	.word	0x2000013c
 80018c0:	40026410 	.word	0x40026410

080018c4 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0e      	ldr	r2, [pc, #56]	; (800190c <HAL_ADC_MspDeInit+0x48>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d115      	bne.n	8001902 <HAL_ADC_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <HAL_ADC_MspDeInit+0x4c>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	4a0d      	ldr	r2, [pc, #52]	; (8001910 <HAL_ADC_MspDeInit+0x4c>)
 80018dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018e0:	6453      	str	r3, [r2, #68]	; 0x44

    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PC5     ------> ADC1_IN15
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 80018e2:	2140      	movs	r1, #64	; 0x40
 80018e4:	480b      	ldr	r0, [pc, #44]	; (8001914 <HAL_ADC_MspDeInit+0x50>)
 80018e6:	f002 fdaf 	bl	8004448 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(LIGHTSEN_GPIO_Port, LIGHTSEN_Pin);
 80018ea:	2120      	movs	r1, #32
 80018ec:	480a      	ldr	r0, [pc, #40]	; (8001918 <HAL_ADC_MspDeInit+0x54>)
 80018ee:	f002 fdab 	bl	8004448 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018f6:	4618      	mov	r0, r3
 80018f8:	f001 fec8 	bl	800368c <HAL_DMA_DeInit>

    /* ADC1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(ADC_IRQn);
 80018fc:	2012      	movs	r0, #18
 80018fe:	f001 fd78 	bl	80033f2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40012000 	.word	0x40012000
 8001910:	40023800 	.word	0x40023800
 8001914:	40020000 	.word	0x40020000
 8001918:	40020800 	.word	0x40020800

0800191c <HAL_CRC_MspInit>:
  /* USER CODE END CRC_Init 2 */

}

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a0b      	ldr	r2, [pc, #44]	; (8001958 <HAL_CRC_MspInit+0x3c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d10d      	bne.n	800194a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <HAL_CRC_MspInit+0x40>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	4a09      	ldr	r2, [pc, #36]	; (800195c <HAL_CRC_MspInit+0x40>)
 8001938:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800193c:	6313      	str	r3, [r2, #48]	; 0x30
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <HAL_CRC_MspInit+0x40>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800194a:	bf00      	nop
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40023000 	.word	0x40023000
 800195c:	40023800 	.word	0x40023800

08001960 <HAL_CRC_MspDeInit>:

void HAL_CRC_MspDeInit(CRC_HandleTypeDef* crcHandle)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a07      	ldr	r2, [pc, #28]	; (800198c <HAL_CRC_MspDeInit+0x2c>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d105      	bne.n	800197e <HAL_CRC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN CRC_MspDeInit 0 */

  /* USER CODE END CRC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
 8001972:	4b07      	ldr	r3, [pc, #28]	; (8001990 <HAL_CRC_MspDeInit+0x30>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a06      	ldr	r2, [pc, #24]	; (8001990 <HAL_CRC_MspDeInit+0x30>)
 8001978:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
  /* USER CODE BEGIN CRC_MspDeInit 1 */

  /* USER CODE END CRC_MspDeInit 1 */
  }
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	40023000 	.word	0x40023000
 8001990:	40023800 	.word	0x40023800

08001994 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <MX_DMA_Init+0x30>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a08      	ldr	r2, [pc, #32]	; (80019c4 <MX_DMA_Init+0x30>)
 80019a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <MX_DMA_Init+0x30>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]

}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800

080019c8 <vApplicationIdleHook>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */

void vApplicationIdleHook( void )
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0

}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */

void vApplicationTickHook( void )
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0

	Os_Counter++;
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <vApplicationTickHook+0x18>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	3301      	adds	r3, #1
 80019e2:	4a03      	ldr	r2, [pc, #12]	; (80019f0 <vApplicationTickHook+0x18>)
 80019e4:	6013      	str	r3, [r2, #0]

}
 80019e6:	bf00      	nop
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	200001a4 	.word	0x200001a4

080019f4 <vApplicationStackOverflowHook>:

/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
	SystemManager_PerformReset();
 80019fe:	f00a fc30 	bl	800c262 <SystemManager_PerformReset>
	SystemManager_SetFault(STACK_OVERFLOW_RESET);
 8001a02:	200c      	movs	r0, #12
 8001a04:	f00a fc04 	bl	800c210 <SystemManager_SetFault>

}
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0

	SystemManager_SetFault(MALLOC_FAILED_RESET);
 8001a14:	200d      	movs	r0, #13
 8001a16:	f00a fbfb 	bl	800c210 <SystemManager_SetFault>
	//SystemManager_PerformReset();

}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <PreSleepProcessing>:

/* USER CODE END 5 */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
	...

08001a48 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Os_SecAlm_AlarmReset */
  Os_SecAlm_AlarmResetHandle = osTimerNew(Os_SecAlm_AlarmReset_Callback, osTimerPeriodic, NULL, &Os_SecAlm_AlarmReset_attributes);
 8001a4c:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <MX_FREERTOS_Init+0x6c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2101      	movs	r1, #1
 8001a52:	4819      	ldr	r0, [pc, #100]	; (8001ab8 <MX_FREERTOS_Init+0x70>)
 8001a54:	f006 fbb6 	bl	80081c4 <osTimerNew>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	4a18      	ldr	r2, [pc, #96]	; (8001abc <MX_FREERTOS_Init+0x74>)
 8001a5c:	6013      	str	r3, [r2, #0]

  /* creation of Os_CenLoc_LockUnlockSequence_Timer */
  Os_CenLoc_LockUnlockSequence_TimerHandle = osTimerNew(Os_CenLoc_LockUnlockSequence_Timer_Callback, osTimerPeriodic, NULL, &Os_CenLoc_LockUnlockSequence_Timer_attributes);
 8001a5e:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <MX_FREERTOS_Init+0x78>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	2101      	movs	r1, #1
 8001a64:	4817      	ldr	r0, [pc, #92]	; (8001ac4 <MX_FREERTOS_Init+0x7c>)
 8001a66:	f006 fbad 	bl	80081c4 <osTimerNew>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	4a16      	ldr	r2, [pc, #88]	; (8001ac8 <MX_FREERTOS_Init+0x80>)
 8001a6e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of OS_Init */
  OS_InitHandle = osThreadNew(OS_TASK_OS_INIT, NULL, &OS_Init_attributes);
 8001a70:	4a16      	ldr	r2, [pc, #88]	; (8001acc <MX_FREERTOS_Init+0x84>)
 8001a72:	2100      	movs	r1, #0
 8001a74:	4816      	ldr	r0, [pc, #88]	; (8001ad0 <MX_FREERTOS_Init+0x88>)
 8001a76:	f006 fae1 	bl	800803c <osThreadNew>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4a15      	ldr	r2, [pc, #84]	; (8001ad4 <MX_FREERTOS_Init+0x8c>)
 8001a7e:	6013      	str	r3, [r2, #0]

  /* creation of OS_Run */
  OS_RunHandle = osThreadNew(OS_TASK_OS_RUN, NULL, &OS_Run_attributes);
 8001a80:	4a15      	ldr	r2, [pc, #84]	; (8001ad8 <MX_FREERTOS_Init+0x90>)
 8001a82:	2100      	movs	r1, #0
 8001a84:	4815      	ldr	r0, [pc, #84]	; (8001adc <MX_FREERTOS_Init+0x94>)
 8001a86:	f006 fad9 	bl	800803c <osThreadNew>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	4a14      	ldr	r2, [pc, #80]	; (8001ae0 <MX_FREERTOS_Init+0x98>)
 8001a8e:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_APPL_Task */
  ASIL_APPL_TaskHandle = osThreadNew(OS_TASK_ASIL_APPL_Task, NULL, &ASIL_APPL_Task_attributes);
 8001a90:	4a14      	ldr	r2, [pc, #80]	; (8001ae4 <MX_FREERTOS_Init+0x9c>)
 8001a92:	2100      	movs	r1, #0
 8001a94:	4814      	ldr	r0, [pc, #80]	; (8001ae8 <MX_FREERTOS_Init+0xa0>)
 8001a96:	f006 fad1 	bl	800803c <osThreadNew>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	4a13      	ldr	r2, [pc, #76]	; (8001aec <MX_FREERTOS_Init+0xa4>)
 8001a9e:	6013      	str	r3, [r2, #0]

  /* creation of QM_APPL_Task */
  QM_APPL_TaskHandle = osThreadNew(OS_TASK_QM_APPL_Task, NULL, &QM_APPL_Task_attributes);
 8001aa0:	4a13      	ldr	r2, [pc, #76]	; (8001af0 <MX_FREERTOS_Init+0xa8>)
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4813      	ldr	r0, [pc, #76]	; (8001af4 <MX_FREERTOS_Init+0xac>)
 8001aa6:	f006 fac9 	bl	800803c <osThreadNew>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	4a12      	ldr	r2, [pc, #72]	; (8001af8 <MX_FREERTOS_Init+0xb0>)
 8001aae:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	0800c920 	.word	0x0800c920
 8001ab8:	08001c2d 	.word	0x08001c2d
 8001abc:	200001b8 	.word	0x200001b8
 8001ac0:	0800c930 	.word	0x0800c930
 8001ac4:	08001c45 	.word	0x08001c45
 8001ac8:	200001bc 	.word	0x200001bc
 8001acc:	0800c890 	.word	0x0800c890
 8001ad0:	08001afd 	.word	0x08001afd
 8001ad4:	200001a8 	.word	0x200001a8
 8001ad8:	0800c8b4 	.word	0x0800c8b4
 8001adc:	08001b17 	.word	0x08001b17
 8001ae0:	200001ac 	.word	0x200001ac
 8001ae4:	0800c8d8 	.word	0x0800c8d8
 8001ae8:	08001b2d 	.word	0x08001b2d
 8001aec:	200001b0 	.word	0x200001b0
 8001af0:	0800c8fc 	.word	0x0800c8fc
 8001af4:	08001bb9 	.word	0x08001bb9
 8001af8:	200001b4 	.word	0x200001b4

08001afc <OS_TASK_OS_INIT>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_OS_TASK_OS_INIT */
void OS_TASK_OS_INIT(void *argument)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_OS_INIT */

	for(;;)
	{

		EcuM_DriverInit();
 8001b04:	f00a fb48 	bl	800c198 <EcuM_DriverInit>

		vTaskSuspend(NULL);
 8001b08:	2000      	movs	r0, #0
 8001b0a:	f008 f821 	bl	8009b50 <vTaskSuspend>
		osDelay(1);
 8001b0e:	2001      	movs	r0, #1
 8001b10:	f006 fb27 	bl	8008162 <osDelay>
		EcuM_DriverInit();
 8001b14:	e7f6      	b.n	8001b04 <OS_TASK_OS_INIT+0x8>

08001b16 <OS_TASK_OS_RUN>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OS_TASK_OS_RUN */
void OS_TASK_OS_RUN(void *argument)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_OS_RUN */

	for(;;)
	{

		Rte_Runnable_Wdg_MainFunction();
 8001b1e:	f009 fb0a 	bl	800b136 <Rte_Runnable_Wdg_MainFunction>

		osDelay(1);
 8001b22:	2001      	movs	r0, #1
 8001b24:	f006 fb1d 	bl	8008162 <osDelay>
		Rte_Runnable_Wdg_MainFunction();
 8001b28:	e7f9      	b.n	8001b1e <OS_TASK_OS_RUN+0x8>
	...

08001b2c <OS_TASK_ASIL_APPL_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OS_TASK_ASIL_APPL_Task */
void OS_TASK_ASIL_APPL_Task(void *argument)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_APPL_Task */

	TickType_t xLastWakeTime = xTaskGetTickCount();
 8001b34:	f008 f9d6 	bl	8009ee4 <xTaskGetTickCount>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	60bb      	str	r3, [r7, #8]
	const TickType_t xTaskPeriod = 5 / portTICK_PERIOD_MS;
 8001b3c:	2305      	movs	r3, #5
 8001b3e:	60fb      	str	r3, [r7, #12]

	for(;;)
	{

		vTaskDelayUntil(&xLastWakeTime, xTaskPeriod);
 8001b40:	f107 0308 	add.w	r3, r7, #8
 8001b44:	68f9      	ldr	r1, [r7, #12]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f007 ff50 	bl	80099ec <vTaskDelayUntil>

		if (xLastWakeTime % (5 / portTICK_PERIOD_MS) == 0)
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <OS_TASK_ASIL_APPL_Task+0x88>)
 8001b50:	fba3 2301 	umull	r2, r3, r3, r1
 8001b54:	089a      	lsrs	r2, r3, #2
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	1aca      	subs	r2, r1, r3
 8001b5e:	2a00      	cmp	r2, #0
 8001b60:	d10d      	bne.n	8001b7e <OS_TASK_ASIL_APPL_Task+0x52>
		{

			Rte_Runnable_EcuM_MainFunction();
 8001b62:	f009 fad6 	bl	800b112 <Rte_Runnable_EcuM_MainFunction>
			Rte_Runnable_SystemManager_MainFunction();
 8001b66:	f009 fada 	bl	800b11e <Rte_Runnable_SystemManager_MainFunction>
			Rte_Runnable_Crc_MainFunction();
 8001b6a:	f009 fade 	bl	800b12a <Rte_Runnable_Crc_MainFunction>
			Rte_Runnable_Uart_MainFunction();
 8001b6e:	f009 fafa 	bl	800b166 <Rte_Runnable_Uart_MainFunction>
			Rte_Runnable_Adc_MainFunction();
 8001b72:	f009 fae6 	bl	800b142 <Rte_Runnable_Adc_MainFunction>
			Rte_Runnable_Spi_MainFunction();
 8001b76:	f009 faea 	bl	800b14e <Rte_Runnable_Spi_MainFunction>
			Rte_Runnable_Tim_MainFunction();
 8001b7a:	f009 faee 	bl	800b15a <Rte_Runnable_Tim_MainFunction>

			/* do nothing */

		}

		vTaskDelayUntil(&xLastWakeTime, xTaskPeriod);
 8001b7e:	f107 0308 	add.w	r3, r7, #8
 8001b82:	68f9      	ldr	r1, [r7, #12]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f007 ff31 	bl	80099ec <vTaskDelayUntil>

		if (xLastWakeTime % (10 / portTICK_PERIOD_MS) == 0)
 8001b8a:	68b9      	ldr	r1, [r7, #8]
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <OS_TASK_ASIL_APPL_Task+0x88>)
 8001b8e:	fba3 2301 	umull	r2, r3, r3, r1
 8001b92:	08da      	lsrs	r2, r3, #3
 8001b94:	4613      	mov	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	1aca      	subs	r2, r1, r3
 8001b9e:	2a00      	cmp	r2, #0
 8001ba0:	d103      	bne.n	8001baa <OS_TASK_ASIL_APPL_Task+0x7e>
		{

			Rte_Runnable_ExtLights_MainFunction();
 8001ba2:	f009 fd4d 	bl	800b640 <Rte_Runnable_ExtLights_MainFunction>
			Rte_Runnable_SecAlm_MainFunction();
 8001ba6:	f009 fd57 	bl	800b658 <Rte_Runnable_SecAlm_MainFunction>

			/* do nothing */

		}

		osDelay(1);
 8001baa:	2001      	movs	r0, #1
 8001bac:	f006 fad9 	bl	8008162 <osDelay>
		vTaskDelayUntil(&xLastWakeTime, xTaskPeriod);
 8001bb0:	e7c6      	b.n	8001b40 <OS_TASK_ASIL_APPL_Task+0x14>
 8001bb2:	bf00      	nop
 8001bb4:	cccccccd 	.word	0xcccccccd

08001bb8 <OS_TASK_QM_APPL_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OS_TASK_QM_APPL_Task */
void OS_TASK_QM_APPL_Task(void *argument)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_APPL_Task */

	TickType_t xLastWakeTime = xTaskGetTickCount();
 8001bc0:	f008 f990 	bl	8009ee4 <xTaskGetTickCount>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	60bb      	str	r3, [r7, #8]
	const TickType_t xTaskPeriod = 5 / portTICK_PERIOD_MS;
 8001bc8:	2305      	movs	r3, #5
 8001bca:	60fb      	str	r3, [r7, #12]

	for(;;)
	{

		vTaskDelayUntil(&xLastWakeTime, xTaskPeriod);
 8001bcc:	f107 0308 	add.w	r3, r7, #8
 8001bd0:	68f9      	ldr	r1, [r7, #12]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f007 ff0a 	bl	80099ec <vTaskDelayUntil>

		if (xLastWakeTime % (5 / portTICK_PERIOD_MS) == 0)
 8001bd8:	68b9      	ldr	r1, [r7, #8]
 8001bda:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <OS_TASK_QM_APPL_Task+0x70>)
 8001bdc:	fba3 2301 	umull	r2, r3, r3, r1
 8001be0:	089a      	lsrs	r2, r3, #2
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	1aca      	subs	r2, r1, r3
 8001bea:	2a00      	cmp	r2, #0
 8001bec:	d101      	bne.n	8001bf2 <OS_TASK_QM_APPL_Task+0x3a>
		{

			Rte_Runnable_Btc_MainFunction();
 8001bee:	f009 fd1b 	bl	800b628 <Rte_Runnable_Btc_MainFunction>

			/* do nothing */

		}

		vTaskDelayUntil(&xLastWakeTime, xTaskPeriod);
 8001bf2:	f107 0308 	add.w	r3, r7, #8
 8001bf6:	68f9      	ldr	r1, [r7, #12]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f007 fef7 	bl	80099ec <vTaskDelayUntil>

		if (xLastWakeTime % (10 / portTICK_PERIOD_MS) == 0)
 8001bfe:	68b9      	ldr	r1, [r7, #8]
 8001c00:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <OS_TASK_QM_APPL_Task+0x70>)
 8001c02:	fba3 2301 	umull	r2, r3, r3, r1
 8001c06:	08da      	lsrs	r2, r3, #3
 8001c08:	4613      	mov	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	1aca      	subs	r2, r1, r3
 8001c12:	2a00      	cmp	r2, #0
 8001c14:	d103      	bne.n	8001c1e <OS_TASK_QM_APPL_Task+0x66>
		{

			Rte_Runnable_CenLoc_MainFunction();
 8001c16:	f009 fd0d 	bl	800b634 <Rte_Runnable_CenLoc_MainFunction>
			Rte_Runnable_IntLights_MainFunction();
 8001c1a:	f009 fd17 	bl	800b64c <Rte_Runnable_IntLights_MainFunction>

			/* do nothing */

		}

		osDelay(1);
 8001c1e:	2001      	movs	r0, #1
 8001c20:	f006 fa9f 	bl	8008162 <osDelay>
		vTaskDelayUntil(&xLastWakeTime, xTaskPeriod);
 8001c24:	e7d2      	b.n	8001bcc <OS_TASK_QM_APPL_Task+0x14>
 8001c26:	bf00      	nop
 8001c28:	cccccccd 	.word	0xcccccccd

08001c2c <Os_SecAlm_AlarmReset_Callback>:
  /* USER CODE END OS_TASK_QM_APPL_Task */
}

/* Os_SecAlm_AlarmReset_Callback function */
void Os_SecAlm_AlarmReset_Callback(void *argument)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlm_AlarmReset_Callback */

	Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter((uint16*)0);
 8001c34:	2000      	movs	r0, #0
 8001c36:	f009 fce1 	bl	800b5fc <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter>

  /* USER CODE END Os_SecAlm_AlarmReset_Callback */
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <Os_CenLoc_LockUnlockSequence_Timer_Callback>:

/* Os_CenLoc_LockUnlockSequence_Timer_Callback function */
void Os_CenLoc_LockUnlockSequence_Timer_Callback(void *argument)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_CenLoc_LockUnlockSequence_Timer_Callback */

	if(Timer2Counter_CenLoc_Tim2IRQFlag <= 6
 8001c4c:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b06      	cmp	r3, #6
 8001c52:	d819      	bhi.n	8001c88 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
		&& ((Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_LOW && Rte_P_CenLoc_CenLocPort_CenLoc_PreviousStateFlag == STD_HIGH)
 8001c54:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x60>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d103      	bne.n	8001c64 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x20>
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x64>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d007      	beq.n	8001c74 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x30>
		|| (Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH && Rte_P_CenLoc_CenLocPort_CenLoc_PreviousStateFlag == STD_LOW)))
 8001c64:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x60>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d10d      	bne.n	8001c88 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
 8001c6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x64>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d109      	bne.n	8001c88 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
	{

		Timer2Counter_CenLoc_Tim2IRQFlag++;
 8001c74:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8001c7e:	701a      	strb	r2, [r3, #0]
		Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag(&Timer2Counter_CenLoc_Tim2IRQFlag);
 8001c80:	4807      	ldr	r0, [pc, #28]	; (8001ca0 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8001c82:	f009 fb19 	bl	800b2b8 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag>
 8001c86:	e006      	b.n	8001c96 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x52>

	}
	else
	{

		Timer2Counter_CenLoc_Tim2IRQFlag = 7;
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8001c8a:	2207      	movs	r2, #7
 8001c8c:	701a      	strb	r2, [r3, #0]
		Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag(&Timer2Counter_CenLoc_Tim2IRQFlag);
 8001c8e:	4804      	ldr	r0, [pc, #16]	; (8001ca0 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8001c90:	f009 fb12 	bl	800b2b8 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag>

	}

  /* USER CODE END Os_CenLoc_LockUnlockSequence_Timer_Callback */
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000800 	.word	0x20000800
 8001ca4:	200000aa 	.word	0x200000aa
 8001ca8:	200000ad 	.word	0x200000ad

08001cac <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	; 0x28
 8001cb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb2:	f107 0314 	add.w	r3, r7, #20
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	609a      	str	r2, [r3, #8]
 8001cbe:	60da      	str	r2, [r3, #12]
 8001cc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	4b5d      	ldr	r3, [pc, #372]	; (8001e3c <MX_GPIO_Init+0x190>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	4a5c      	ldr	r2, [pc, #368]	; (8001e3c <MX_GPIO_Init+0x190>)
 8001ccc:	f043 0304 	orr.w	r3, r3, #4
 8001cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd2:	4b5a      	ldr	r3, [pc, #360]	; (8001e3c <MX_GPIO_Init+0x190>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	4b56      	ldr	r3, [pc, #344]	; (8001e3c <MX_GPIO_Init+0x190>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4a55      	ldr	r2, [pc, #340]	; (8001e3c <MX_GPIO_Init+0x190>)
 8001ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cec:	6313      	str	r3, [r2, #48]	; 0x30
 8001cee:	4b53      	ldr	r3, [pc, #332]	; (8001e3c <MX_GPIO_Init+0x190>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	4b4f      	ldr	r3, [pc, #316]	; (8001e3c <MX_GPIO_Init+0x190>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a4e      	ldr	r2, [pc, #312]	; (8001e3c <MX_GPIO_Init+0x190>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b4c      	ldr	r3, [pc, #304]	; (8001e3c <MX_GPIO_Init+0x190>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	607b      	str	r3, [r7, #4]
 8001d1a:	4b48      	ldr	r3, [pc, #288]	; (8001e3c <MX_GPIO_Init+0x190>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	4a47      	ldr	r2, [pc, #284]	; (8001e3c <MX_GPIO_Init+0x190>)
 8001d20:	f043 0302 	orr.w	r3, r3, #2
 8001d24:	6313      	str	r3, [r2, #48]	; 0x30
 8001d26:	4b45      	ldr	r3, [pc, #276]	; (8001e3c <MX_GPIO_Init+0x190>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	607b      	str	r3, [r7, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	603b      	str	r3, [r7, #0]
 8001d36:	4b41      	ldr	r3, [pc, #260]	; (8001e3c <MX_GPIO_Init+0x190>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	4a40      	ldr	r2, [pc, #256]	; (8001e3c <MX_GPIO_Init+0x190>)
 8001d3c:	f043 0308 	orr.w	r3, r3, #8
 8001d40:	6313      	str	r3, [r2, #48]	; 0x30
 8001d42:	4b3e      	ldr	r3, [pc, #248]	; (8001e3c <MX_GPIO_Init+0x190>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	603b      	str	r3, [r7, #0]
 8001d4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LTS_Pin|RTS_Pin|IL_Pin|FL_Pin
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f641 411f 	movw	r1, #7199	; 0x1c1f
 8001d54:	483a      	ldr	r0, [pc, #232]	; (8001e40 <MX_GPIO_Init+0x194>)
 8001d56:	f002 fc5b 	bl	8004610 <HAL_GPIO_WritePin>
                          |BUZZ1_Pin|RFL_Pin|BL_Pin|PRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DRL_Pin|LPN_Pin|LB_Pin|CAN_CS_Pin
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f249 2116 	movw	r1, #37398	; 0x9216
 8001d60:	4838      	ldr	r0, [pc, #224]	; (8001e44 <MX_GPIO_Init+0x198>)
 8001d62:	f002 fc55 	bl	8004610 <HAL_GPIO_WritePin>
                          |RL_Pin|SAL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HB_Pin|CAN1_CS_Pin|BUZZ2_Pin|CLL_Pin, GPIO_PIN_RESET);
 8001d66:	2200      	movs	r2, #0
 8001d68:	f242 0183 	movw	r1, #8323	; 0x2083
 8001d6c:	4836      	ldr	r0, [pc, #216]	; (8001e48 <MX_GPIO_Init+0x19c>)
 8001d6e:	f002 fc4f 	bl	8004610 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC6
                           PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
 8001d72:	f24e 33c0 	movw	r3, #58304	; 0xe3c0
 8001d76:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d80:	f107 0314 	add.w	r3, r7, #20
 8001d84:	4619      	mov	r1, r3
 8001d86:	482e      	ldr	r0, [pc, #184]	; (8001e40 <MX_GPIO_Init+0x194>)
 8001d88:	f002 f9da 	bl	8004140 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LTS_Pin|RTS_Pin|IL_Pin|FL_Pin
 8001d8c:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8001d90:	617b      	str	r3, [r7, #20]
                          |BUZZ1_Pin|RFL_Pin|BL_Pin|PRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d92:	2301      	movs	r3, #1
 8001d94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d9e:	f107 0314 	add.w	r3, r7, #20
 8001da2:	4619      	mov	r1, r3
 8001da4:	4826      	ldr	r0, [pc, #152]	; (8001e40 <MX_GPIO_Init+0x194>)
 8001da6:	f002 f9cb 	bl	8004140 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA8 PA10
                           PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_10
 8001daa:	f640 5309 	movw	r3, #3337	; 0xd09
 8001dae:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001db0:	2303      	movs	r3, #3
 8001db2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4821      	ldr	r0, [pc, #132]	; (8001e44 <MX_GPIO_Init+0x198>)
 8001dc0:	f002 f9be 	bl	8004140 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = DRL_Pin|LPN_Pin|LB_Pin|CAN_CS_Pin
 8001dc4:	f249 2316 	movw	r3, #37398	; 0x9216
 8001dc8:	617b      	str	r3, [r7, #20]
                          |RL_Pin|SAL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4819      	ldr	r0, [pc, #100]	; (8001e44 <MX_GPIO_Init+0x198>)
 8001dde:	f002 f9af 	bl	8004140 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = HB_Pin|CAN1_CS_Pin|BUZZ2_Pin|CLL_Pin;
 8001de2:	f242 0383 	movw	r3, #8323	; 0x2083
 8001de6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de8:	2301      	movs	r3, #1
 8001dea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df0:	2300      	movs	r3, #0
 8001df2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4813      	ldr	r0, [pc, #76]	; (8001e48 <MX_GPIO_Init+0x19c>)
 8001dfc:	f002 f9a0 	bl	8004140 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB12 PB14
                           PB15 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14
 8001e00:	f24d 7324 	movw	r3, #55076	; 0xd724
 8001e04:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e06:	2303      	movs	r3, #3
 8001e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0e:	f107 0314 	add.w	r3, r7, #20
 8001e12:	4619      	mov	r1, r3
 8001e14:	480c      	ldr	r0, [pc, #48]	; (8001e48 <MX_GPIO_Init+0x19c>)
 8001e16:	f002 f993 	bl	8004140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e26:	f107 0314 	add.w	r3, r7, #20
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4807      	ldr	r0, [pc, #28]	; (8001e4c <MX_GPIO_Init+0x1a0>)
 8001e2e:	f002 f987 	bl	8004140 <HAL_GPIO_Init>

}
 8001e32:	bf00      	nop
 8001e34:	3728      	adds	r7, #40	; 0x28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40020800 	.word	0x40020800
 8001e44:	40020000 	.word	0x40020000
 8001e48:	40020400 	.word	0x40020400
 8001e4c:	40020c00 	.word	0x40020c00

08001e50 <HAL_SPI_MspInit>:
  /* USER CODE END SPI1_Init 2 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	; 0x28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a28      	ldr	r2, [pc, #160]	; (8001f10 <HAL_SPI_MspInit+0xc0>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d149      	bne.n	8001f06 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	4b27      	ldr	r3, [pc, #156]	; (8001f14 <HAL_SPI_MspInit+0xc4>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	4a26      	ldr	r2, [pc, #152]	; (8001f14 <HAL_SPI_MspInit+0xc4>)
 8001e7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e80:	6453      	str	r3, [r2, #68]	; 0x44
 8001e82:	4b24      	ldr	r3, [pc, #144]	; (8001f14 <HAL_SPI_MspInit+0xc4>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <HAL_SPI_MspInit+0xc4>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a1f      	ldr	r2, [pc, #124]	; (8001f14 <HAL_SPI_MspInit+0xc4>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <HAL_SPI_MspInit+0xc4>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <HAL_SPI_MspInit+0xc4>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	4a18      	ldr	r2, [pc, #96]	; (8001f14 <HAL_SPI_MspInit+0xc4>)
 8001eb4:	f043 0302 	orr.w	r3, r3, #2
 8001eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eba:	4b16      	ldr	r3, [pc, #88]	; (8001f14 <HAL_SPI_MspInit+0xc4>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001ec6:	23a0      	movs	r3, #160	; 0xa0
 8001ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ed6:	2305      	movs	r3, #5
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eda:	f107 0314 	add.w	r3, r7, #20
 8001ede:	4619      	mov	r1, r3
 8001ee0:	480d      	ldr	r0, [pc, #52]	; (8001f18 <HAL_SPI_MspInit+0xc8>)
 8001ee2:	f002 f92d 	bl	8004140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ee6:	2310      	movs	r3, #16
 8001ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eea:	2302      	movs	r3, #2
 8001eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ef6:	2305      	movs	r3, #5
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	4619      	mov	r1, r3
 8001f00:	4806      	ldr	r0, [pc, #24]	; (8001f1c <HAL_SPI_MspInit+0xcc>)
 8001f02:	f002 f91d 	bl	8004140 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001f06:	bf00      	nop
 8001f08:	3728      	adds	r7, #40	; 0x28
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40013000 	.word	0x40013000
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40020000 	.word	0x40020000
 8001f1c:	40020400 	.word	0x40020400

08001f20 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0a      	ldr	r2, [pc, #40]	; (8001f58 <HAL_SPI_MspDeInit+0x38>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d10d      	bne.n	8001f4e <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001f32:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <HAL_SPI_MspDeInit+0x3c>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	4a09      	ldr	r2, [pc, #36]	; (8001f5c <HAL_SPI_MspDeInit+0x3c>)
 8001f38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f3c:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_7);
 8001f3e:	21a0      	movs	r1, #160	; 0xa0
 8001f40:	4807      	ldr	r0, [pc, #28]	; (8001f60 <HAL_SPI_MspDeInit+0x40>)
 8001f42:	f002 fa81 	bl	8004448 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4);
 8001f46:	2110      	movs	r1, #16
 8001f48:	4806      	ldr	r0, [pc, #24]	; (8001f64 <HAL_SPI_MspDeInit+0x44>)
 8001f4a:	f002 fa7d 	bl	8004448 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40013000 	.word	0x40013000
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	40020000 	.word	0x40020000
 8001f64:	40020400 	.word	0x40020400

08001f68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	607b      	str	r3, [r7, #4]
 8001f72:	4b16      	ldr	r3, [pc, #88]	; (8001fcc <HAL_MspInit+0x64>)
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	4a15      	ldr	r2, [pc, #84]	; (8001fcc <HAL_MspInit+0x64>)
 8001f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f7e:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <HAL_MspInit+0x64>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f86:	607b      	str	r3, [r7, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	603b      	str	r3, [r7, #0]
 8001f8e:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <HAL_MspInit+0x64>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	4a0e      	ldr	r2, [pc, #56]	; (8001fcc <HAL_MspInit+0x64>)
 8001f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f98:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <HAL_MspInit+0x64>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	603b      	str	r3, [r7, #0]
 8001fa4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	210f      	movs	r1, #15
 8001faa:	f06f 0001 	mvn.w	r0, #1
 8001fae:	f001 f9f6 	bl	800339e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2105      	movs	r1, #5
 8001fb6:	2051      	movs	r0, #81	; 0x51
 8001fb8:	f001 f9f1 	bl	800339e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8001fbc:	2051      	movs	r0, #81	; 0x51
 8001fbe:	f001 fa0a 	bl	80033d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800

08001fd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08c      	sub	sp, #48	; 0x30
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60bb      	str	r3, [r7, #8]
 8001fe4:	4b2e      	ldr	r3, [pc, #184]	; (80020a0 <HAL_InitTick+0xd0>)
 8001fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe8:	4a2d      	ldr	r2, [pc, #180]	; (80020a0 <HAL_InitTick+0xd0>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff0:	4b2b      	ldr	r3, [pc, #172]	; (80020a0 <HAL_InitTick+0xd0>)
 8001ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ffc:	f107 020c 	add.w	r2, r7, #12
 8002000:	f107 0310 	add.w	r3, r7, #16
 8002004:	4611      	mov	r1, r2
 8002006:	4618      	mov	r0, r3
 8002008:	f002 ffce 	bl	8004fa8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800200c:	f002 ffb8 	bl	8004f80 <HAL_RCC_GetPCLK2Freq>
 8002010:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002014:	4a23      	ldr	r2, [pc, #140]	; (80020a4 <HAL_InitTick+0xd4>)
 8002016:	fba2 2303 	umull	r2, r3, r2, r3
 800201a:	0c9b      	lsrs	r3, r3, #18
 800201c:	3b01      	subs	r3, #1
 800201e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002020:	4b21      	ldr	r3, [pc, #132]	; (80020a8 <HAL_InitTick+0xd8>)
 8002022:	4a22      	ldr	r2, [pc, #136]	; (80020ac <HAL_InitTick+0xdc>)
 8002024:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002026:	4b20      	ldr	r3, [pc, #128]	; (80020a8 <HAL_InitTick+0xd8>)
 8002028:	f240 32e7 	movw	r2, #999	; 0x3e7
 800202c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800202e:	4a1e      	ldr	r2, [pc, #120]	; (80020a8 <HAL_InitTick+0xd8>)
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002034:	4b1c      	ldr	r3, [pc, #112]	; (80020a8 <HAL_InitTick+0xd8>)
 8002036:	2200      	movs	r2, #0
 8002038:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800203a:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <HAL_InitTick+0xd8>)
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002040:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <HAL_InitTick+0xd8>)
 8002042:	2200      	movs	r2, #0
 8002044:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002046:	4818      	ldr	r0, [pc, #96]	; (80020a8 <HAL_InitTick+0xd8>)
 8002048:	f003 fc24 	bl	8005894 <HAL_TIM_Base_Init>
 800204c:	4603      	mov	r3, r0
 800204e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002052:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002056:	2b00      	cmp	r3, #0
 8002058:	d11b      	bne.n	8002092 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800205a:	4813      	ldr	r0, [pc, #76]	; (80020a8 <HAL_InitTick+0xd8>)
 800205c:	f003 fc76 	bl	800594c <HAL_TIM_Base_Start_IT>
 8002060:	4603      	mov	r3, r0
 8002062:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002066:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800206a:	2b00      	cmp	r3, #0
 800206c:	d111      	bne.n	8002092 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800206e:	2019      	movs	r0, #25
 8002070:	f001 f9b1 	bl	80033d6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b0f      	cmp	r3, #15
 8002078:	d808      	bhi.n	800208c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800207a:	2200      	movs	r2, #0
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	2019      	movs	r0, #25
 8002080:	f001 f98d 	bl	800339e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002084:	4a0a      	ldr	r2, [pc, #40]	; (80020b0 <HAL_InitTick+0xe0>)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	e002      	b.n	8002092 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002092:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002096:	4618      	mov	r0, r3
 8002098:	3730      	adds	r7, #48	; 0x30
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40023800 	.word	0x40023800
 80020a4:	431bde83 	.word	0x431bde83
 80020a8:	20000240 	.word	0x20000240
 80020ac:	40010000 	.word	0x40010000
 80020b0:	20000008 	.word	0x20000008

080020b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	SystemManager_SetFault(NMI_RESET);
 80020b8:	2008      	movs	r0, #8
 80020ba:	f00a f8a9 	bl	800c210 <SystemManager_SetFault>
	SystemManager_PerformReset();
 80020be:	f00a f8d0 	bl	800c262 <SystemManager_PerformReset>

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020c2:	e7fe      	b.n	80020c2 <NMI_Handler+0xe>

080020c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	SystemManager_SetFault(HARDWARE_RESET);
 80020c8:	2006      	movs	r0, #6
 80020ca:	f00a f8a1 	bl	800c210 <SystemManager_SetFault>
	SystemManager_PerformReset();
 80020ce:	f00a f8c8 	bl	800c262 <SystemManager_PerformReset>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d2:	e7fe      	b.n	80020d2 <HardFault_Handler+0xe>

080020d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

	SystemManager_SetFault(MEMORY_FAULT_RESET);
 80020d8:	2009      	movs	r0, #9
 80020da:	f00a f899 	bl	800c210 <SystemManager_SetFault>
	SystemManager_PerformReset();
 80020de:	f00a f8c0 	bl	800c262 <SystemManager_PerformReset>

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020e2:	e7fe      	b.n	80020e2 <MemManage_Handler+0xe>

080020e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

	SystemManager_SetFault(BUS_FAULT_RESET);
 80020e8:	200b      	movs	r0, #11
 80020ea:	f00a f891 	bl	800c210 <SystemManager_SetFault>
	SystemManager_PerformReset();
 80020ee:	f00a f8b8 	bl	800c262 <SystemManager_PerformReset>

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020f2:	e7fe      	b.n	80020f2 <BusFault_Handler+0xe>

080020f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

	SystemManager_SetFault(USAGE_FAULT_RESET);
 80020f8:	200a      	movs	r0, #10
 80020fa:	f00a f889 	bl	800c210 <SystemManager_SetFault>
	SystemManager_PerformReset();
 80020fe:	f00a f8b0 	bl	800c262 <SystemManager_PerformReset>

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002102:	e7fe      	b.n	8002102 <UsageFault_Handler+0xe>

08002104 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

	SystemManager_SetFault(WATCHDOG_RESET);
 8002118:	2003      	movs	r0, #3
 800211a:	f00a f879 	bl	800c210 <SystemManager_SetFault>

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg);
 800211e:	4802      	ldr	r0, [pc, #8]	; (8002128 <WWDG_IRQHandler+0x14>)
 8002120:	f005 f988 	bl	8007434 <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */

  /* USER CODE END WWDG_IRQn 1 */
}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}
 8002128:	200007a0 	.word	0x200007a0

0800212c <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

	SystemManager_PerformReset();
 8002130:	f00a f897 	bl	800c262 <SystemManager_PerformReset>

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8002134:	f002 fa86 	bl	8004644 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8002138:	bf00      	nop
 800213a:	bd80      	pop	{r7, pc}

0800213c <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

	SystemManager_SetFault(FLASH_FAULT_RESET);
 8002140:	2007      	movs	r0, #7
 8002142:	f00a f865 	bl	800c210 <SystemManager_SetFault>
	SystemManager_PerformReset();
 8002146:	f00a f88c 	bl	800c262 <SystemManager_PerformReset>

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800214a:	f001 fe51 	bl	8003df0 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}

08002152 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002164:	4802      	ldr	r0, [pc, #8]	; (8002170 <ADC_IRQHandler+0x10>)
 8002166:	f000 fb2f 	bl	80027c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	200000d8 	.word	0x200000d8

08002174 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002178:	4802      	ldr	r0, [pc, #8]	; (8002184 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800217a:	f003 fc78 	bl	8005a6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	200005c4 	.word	0x200005c4

08002188 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800218c:	4802      	ldr	r0, [pc, #8]	; (8002198 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800218e:	f003 fc6e 	bl	8005a6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20000240 	.word	0x20000240

0800219c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80021a0:	4802      	ldr	r0, [pc, #8]	; (80021ac <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80021a2:	f003 fc64 	bl	8005a6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000678 	.word	0x20000678

080021b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021b4:	4802      	ldr	r0, [pc, #8]	; (80021c0 <TIM2_IRQHandler+0x10>)
 80021b6:	f003 fc5a 	bl	8005a6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	200002f4 	.word	0x200002f4

080021c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80021c8:	4802      	ldr	r0, [pc, #8]	; (80021d4 <TIM3_IRQHandler+0x10>)
 80021ca:	f003 fc50 	bl	8005a6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	200003a8 	.word	0x200003a8

080021d8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80021dc:	4802      	ldr	r0, [pc, #8]	; (80021e8 <TIM4_IRQHandler+0x10>)
 80021de:	f003 fc46 	bl	8005a6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	2000045c 	.word	0x2000045c

080021ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021f0:	4802      	ldr	r0, [pc, #8]	; (80021fc <USART1_IRQHandler+0x10>)
 80021f2:	f004 f94b 	bl	800648c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	2000072c 	.word	0x2000072c

08002200 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002204:	4802      	ldr	r0, [pc, #8]	; (8002210 <TIM5_IRQHandler+0x10>)
 8002206:	f003 fc32 	bl	8005a6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000510 	.word	0x20000510

08002214 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002218:	4802      	ldr	r0, [pc, #8]	; (8002224 <DMA2_Stream0_IRQHandler+0x10>)
 800221a:	f001 fb7f 	bl	800391c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	2000013c 	.word	0x2000013c

08002228 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
	...

08002238 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <SystemInit+0x20>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002242:	4a05      	ldr	r2, [pc, #20]	; (8002258 <SystemInit+0x20>)
 8002244:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002248:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <HAL_TIM_Base_MspInit>:
  /* USER CODE END TIM11_Init 2 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800226c:	d10e      	bne.n	800228c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
 8002272:	4b42      	ldr	r3, [pc, #264]	; (800237c <HAL_TIM_Base_MspInit+0x120>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	4a41      	ldr	r2, [pc, #260]	; (800237c <HAL_TIM_Base_MspInit+0x120>)
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	6413      	str	r3, [r2, #64]	; 0x40
 800227e:	4b3f      	ldr	r3, [pc, #252]	; (800237c <HAL_TIM_Base_MspInit+0x120>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	61fb      	str	r3, [r7, #28]
 8002288:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800228a:	e072      	b.n	8002372 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM3)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a3b      	ldr	r2, [pc, #236]	; (8002380 <HAL_TIM_Base_MspInit+0x124>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d10e      	bne.n	80022b4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	61bb      	str	r3, [r7, #24]
 800229a:	4b38      	ldr	r3, [pc, #224]	; (800237c <HAL_TIM_Base_MspInit+0x120>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	4a37      	ldr	r2, [pc, #220]	; (800237c <HAL_TIM_Base_MspInit+0x120>)
 80022a0:	f043 0302 	orr.w	r3, r3, #2
 80022a4:	6413      	str	r3, [r2, #64]	; 0x40
 80022a6:	4b35      	ldr	r3, [pc, #212]	; (800237c <HAL_TIM_Base_MspInit+0x120>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	61bb      	str	r3, [r7, #24]
 80022b0:	69bb      	ldr	r3, [r7, #24]
}
 80022b2:	e05e      	b.n	8002372 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM4)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a32      	ldr	r2, [pc, #200]	; (8002384 <HAL_TIM_Base_MspInit+0x128>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d10e      	bne.n	80022dc <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	4b2e      	ldr	r3, [pc, #184]	; (800237c <HAL_TIM_Base_MspInit+0x120>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	4a2d      	ldr	r2, [pc, #180]	; (800237c <HAL_TIM_Base_MspInit+0x120>)
 80022c8:	f043 0304 	orr.w	r3, r3, #4
 80022cc:	6413      	str	r3, [r2, #64]	; 0x40
 80022ce:	4b2b      	ldr	r3, [pc, #172]	; (800237c <HAL_TIM_Base_MspInit+0x120>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	f003 0304 	and.w	r3, r3, #4
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	697b      	ldr	r3, [r7, #20]
}
 80022da:	e04a      	b.n	8002372 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM5)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a29      	ldr	r2, [pc, #164]	; (8002388 <HAL_TIM_Base_MspInit+0x12c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d10e      	bne.n	8002304 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	4b24      	ldr	r3, [pc, #144]	; (800237c <HAL_TIM_Base_MspInit+0x120>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	4a23      	ldr	r2, [pc, #140]	; (800237c <HAL_TIM_Base_MspInit+0x120>)
 80022f0:	f043 0308 	orr.w	r3, r3, #8
 80022f4:	6413      	str	r3, [r2, #64]	; 0x40
 80022f6:	4b21      	ldr	r3, [pc, #132]	; (800237c <HAL_TIM_Base_MspInit+0x120>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	693b      	ldr	r3, [r7, #16]
}
 8002302:	e036      	b.n	8002372 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM9)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a20      	ldr	r2, [pc, #128]	; (800238c <HAL_TIM_Base_MspInit+0x130>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d116      	bne.n	800233c <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	4b1a      	ldr	r3, [pc, #104]	; (800237c <HAL_TIM_Base_MspInit+0x120>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	4a19      	ldr	r2, [pc, #100]	; (800237c <HAL_TIM_Base_MspInit+0x120>)
 8002318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231c:	6453      	str	r3, [r2, #68]	; 0x44
 800231e:	4b17      	ldr	r3, [pc, #92]	; (800237c <HAL_TIM_Base_MspInit+0x120>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 800232a:	2200      	movs	r2, #0
 800232c:	2105      	movs	r1, #5
 800232e:	2018      	movs	r0, #24
 8002330:	f001 f835 	bl	800339e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002334:	2018      	movs	r0, #24
 8002336:	f001 f84e 	bl	80033d6 <HAL_NVIC_EnableIRQ>
}
 800233a:	e01a      	b.n	8002372 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM11)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a13      	ldr	r2, [pc, #76]	; (8002390 <HAL_TIM_Base_MspInit+0x134>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d115      	bne.n	8002372 <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	4b0c      	ldr	r3, [pc, #48]	; (800237c <HAL_TIM_Base_MspInit+0x120>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	4a0b      	ldr	r2, [pc, #44]	; (800237c <HAL_TIM_Base_MspInit+0x120>)
 8002350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002354:	6453      	str	r3, [r2, #68]	; 0x44
 8002356:	4b09      	ldr	r3, [pc, #36]	; (800237c <HAL_TIM_Base_MspInit+0x120>)
 8002358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800235e:	60bb      	str	r3, [r7, #8]
 8002360:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8002362:	2200      	movs	r2, #0
 8002364:	2105      	movs	r1, #5
 8002366:	201a      	movs	r0, #26
 8002368:	f001 f819 	bl	800339e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800236c:	201a      	movs	r0, #26
 800236e:	f001 f832 	bl	80033d6 <HAL_NVIC_EnableIRQ>
}
 8002372:	bf00      	nop
 8002374:	3720      	adds	r7, #32
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40023800 	.word	0x40023800
 8002380:	40000400 	.word	0x40000400
 8002384:	40000800 	.word	0x40000800
 8002388:	40000c00 	.word	0x40000c00
 800238c:	40014000 	.word	0x40014000
 8002390:	40014800 	.word	0x40014800

08002394 <HAL_UART_MspInit>:
  /* USER CODE END USART1_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08a      	sub	sp, #40	; 0x28
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239c:	f107 0314 	add.w	r3, r7, #20
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a19      	ldr	r2, [pc, #100]	; (8002418 <HAL_UART_MspInit+0x84>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d12b      	bne.n	800240e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	613b      	str	r3, [r7, #16]
 80023ba:	4b18      	ldr	r3, [pc, #96]	; (800241c <HAL_UART_MspInit+0x88>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	4a17      	ldr	r2, [pc, #92]	; (800241c <HAL_UART_MspInit+0x88>)
 80023c0:	f043 0310 	orr.w	r3, r3, #16
 80023c4:	6453      	str	r3, [r2, #68]	; 0x44
 80023c6:	4b15      	ldr	r3, [pc, #84]	; (800241c <HAL_UART_MspInit+0x88>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	4b11      	ldr	r3, [pc, #68]	; (800241c <HAL_UART_MspInit+0x88>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	4a10      	ldr	r2, [pc, #64]	; (800241c <HAL_UART_MspInit+0x88>)
 80023dc:	f043 0302 	orr.w	r3, r3, #2
 80023e0:	6313      	str	r3, [r2, #48]	; 0x30
 80023e2:	4b0e      	ldr	r3, [pc, #56]	; (800241c <HAL_UART_MspInit+0x88>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB3     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80023ee:	2348      	movs	r3, #72	; 0x48
 80023f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f2:	2302      	movs	r3, #2
 80023f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fa:	2303      	movs	r3, #3
 80023fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023fe:	2307      	movs	r3, #7
 8002400:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002402:	f107 0314 	add.w	r3, r7, #20
 8002406:	4619      	mov	r1, r3
 8002408:	4805      	ldr	r0, [pc, #20]	; (8002420 <HAL_UART_MspInit+0x8c>)
 800240a:	f001 fe99 	bl	8004140 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800240e:	bf00      	nop
 8002410:	3728      	adds	r7, #40	; 0x28
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40011000 	.word	0x40011000
 800241c:	40023800 	.word	0x40023800
 8002420:	40020400 	.word	0x40020400

08002424 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a09      	ldr	r2, [pc, #36]	; (8002458 <HAL_UART_MspDeInit+0x34>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d10c      	bne.n	8002450 <HAL_UART_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002436:	4b09      	ldr	r3, [pc, #36]	; (800245c <HAL_UART_MspDeInit+0x38>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	4a08      	ldr	r2, [pc, #32]	; (800245c <HAL_UART_MspDeInit+0x38>)
 800243c:	f023 0310 	bic.w	r3, r3, #16
 8002440:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PB3     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_6);
 8002442:	2148      	movs	r1, #72	; 0x48
 8002444:	4806      	ldr	r0, [pc, #24]	; (8002460 <HAL_UART_MspDeInit+0x3c>)
 8002446:	f001 ffff 	bl	8004448 <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800244a:	2025      	movs	r0, #37	; 0x25
 800244c:	f000 ffd1 	bl	80033f2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40011000 	.word	0x40011000
 800245c:	40023800 	.word	0x40023800
 8002460:	40020400 	.word	0x40020400

08002464 <HAL_WWDG_MspInit>:
  /* USER CODE END WWDG_Init 2 */

}

void HAL_WWDG_MspInit(WWDG_HandleTypeDef* wwdgHandle)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]

  if(wwdgHandle->Instance==WWDG)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a0b      	ldr	r2, [pc, #44]	; (80024a0 <HAL_WWDG_MspInit+0x3c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d10d      	bne.n	8002492 <HAL_WWDG_MspInit+0x2e>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* WWDG clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <HAL_WWDG_MspInit+0x40>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	4a09      	ldr	r2, [pc, #36]	; (80024a4 <HAL_WWDG_MspInit+0x40>)
 8002480:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002484:	6413      	str	r3, [r2, #64]	; 0x40
 8002486:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <HAL_WWDG_MspInit+0x40>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }
}
 8002492:	bf00      	nop
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40002c00 	.word	0x40002c00
 80024a4:	40023800 	.word	0x40023800

080024a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024ac:	480d      	ldr	r0, [pc, #52]	; (80024e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024ae:	490e      	ldr	r1, [pc, #56]	; (80024e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024b0:	4a0e      	ldr	r2, [pc, #56]	; (80024ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024b4:	e002      	b.n	80024bc <LoopCopyDataInit>

080024b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ba:	3304      	adds	r3, #4

080024bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024c0:	d3f9      	bcc.n	80024b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024c2:	4a0b      	ldr	r2, [pc, #44]	; (80024f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024c4:	4c0b      	ldr	r4, [pc, #44]	; (80024f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024c8:	e001      	b.n	80024ce <LoopFillZerobss>

080024ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024cc:	3204      	adds	r2, #4

080024ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024d0:	d3fb      	bcc.n	80024ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024d2:	f7ff feb1 	bl	8002238 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024d6:	f00a f805 	bl	800c4e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024da:	f7fe f803 	bl	80004e4 <main>
  bx  lr    
 80024de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024e8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80024ec:	0800cad4 	.word	0x0800cad4
  ldr r2, =_sbss
 80024f0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80024f4:	20007b18 	.word	0x20007b18

080024f8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024f8:	e7fe      	b.n	80024f8 <DMA1_Stream0_IRQHandler>

080024fa <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b084      	sub	sp, #16
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d104      	bne.n	8002512 <stm32_lock_acquire+0x18>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002508:	b672      	cpsid	i
}
 800250a:	bf00      	nop
 800250c:	f009 ff9e 	bl	800c44c <Error_Handler>
 8002510:	e7fe      	b.n	8002510 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	7a1b      	ldrb	r3, [r3, #8]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d904      	bls.n	8002524 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 800251a:	b672      	cpsid	i
}
 800251c:	bf00      	nop
 800251e:	f009 ff95 	bl	800c44c <Error_Handler>
 8002522:	e7fe      	b.n	8002522 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	7a1b      	ldrb	r3, [r3, #8]
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	b2d1      	uxtb	r1, r2
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	7211      	strb	r1, [r2, #8]
 8002530:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002532:	f3ef 8211 	mrs	r2, BASEPRI
 8002536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800253a:	f383 8811 	msr	BASEPRI, r3
 800253e:	f3bf 8f6f 	isb	sy
 8002542:	f3bf 8f4f 	dsb	sy
 8002546:	60fa      	str	r2, [r7, #12]
 8002548:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8002552:	bf00      	nop
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b084      	sub	sp, #16
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d104      	bne.n	8002572 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002568:	b672      	cpsid	i
}
 800256a:	bf00      	nop
 800256c:	f009 ff6e 	bl	800c44c <Error_Handler>
 8002570:	e7fe      	b.n	8002570 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	7a1b      	ldrb	r3, [r3, #8]
 8002576:	3b01      	subs	r3, #1
 8002578:	b2da      	uxtb	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	7a1b      	ldrb	r3, [r3, #8]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d904      	bls.n	8002590 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8002586:	b672      	cpsid	i
}
 8002588:	bf00      	nop
 800258a:	f009 ff5f 	bl	800c44c <Error_Handler>
 800258e:	e7fe      	b.n	800258e <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	7a1b      	ldrb	r3, [r3, #8]
 8002594:	461a      	mov	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800259c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80025a4:	bf00      	nop
}
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d104      	bne.n	80025c6 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80025bc:	b672      	cpsid	i
}
 80025be:	bf00      	nop
 80025c0:	f009 ff44 	bl	800c44c <Error_Handler>
 80025c4:	e7fe      	b.n	80025c4 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff ff96 	bl	80024fa <stm32_lock_acquire>
}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d104      	bne.n	80025ee <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80025e4:	b672      	cpsid	i
}
 80025e6:	bf00      	nop
 80025e8:	f009 ff30 	bl	800c44c <Error_Handler>
 80025ec:	e7fe      	b.n	80025ec <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ffb2 	bl	800255a <stm32_lock_release>
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002604:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <HAL_Init+0x40>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a0d      	ldr	r2, [pc, #52]	; (8002640 <HAL_Init+0x40>)
 800260a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800260e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_Init+0x40>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a0a      	ldr	r2, [pc, #40]	; (8002640 <HAL_Init+0x40>)
 8002616:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800261a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800261c:	4b08      	ldr	r3, [pc, #32]	; (8002640 <HAL_Init+0x40>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a07      	ldr	r2, [pc, #28]	; (8002640 <HAL_Init+0x40>)
 8002622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002626:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002628:	2003      	movs	r0, #3
 800262a:	f000 fead 	bl	8003388 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800262e:	200f      	movs	r0, #15
 8002630:	f7ff fcce 	bl	8001fd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002634:	f7ff fc98 	bl	8001f68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40023c00 	.word	0x40023c00

08002644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002648:	4b06      	ldr	r3, [pc, #24]	; (8002664 <HAL_IncTick+0x20>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	461a      	mov	r2, r3
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_IncTick+0x24>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4413      	add	r3, r2
 8002654:	4a04      	ldr	r2, [pc, #16]	; (8002668 <HAL_IncTick+0x24>)
 8002656:	6013      	str	r3, [r2, #0]
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	2000000c 	.word	0x2000000c
 8002668:	200007c8 	.word	0x200007c8

0800266c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  return uwTick;
 8002670:	4b03      	ldr	r3, [pc, #12]	; (8002680 <HAL_GetTick+0x14>)
 8002672:	681b      	ldr	r3, [r3, #0]
}
 8002674:	4618      	mov	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	200007c8 	.word	0x200007c8

08002684 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800268c:	2300      	movs	r3, #0
 800268e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e04a      	b.n	8002730 <HAL_ADC_Init+0xac>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d120      	bne.n	80026e4 <HAL_ADC_Init+0x60>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a24      	ldr	r2, [pc, #144]	; (8002738 <HAL_ADC_Init+0xb4>)
 80026a6:	649a      	str	r2, [r3, #72]	; 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a24      	ldr	r2, [pc, #144]	; (800273c <HAL_ADC_Init+0xb8>)
 80026ac:	64da      	str	r2, [r3, #76]	; 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a23      	ldr	r2, [pc, #140]	; (8002740 <HAL_ADC_Init+0xbc>)
 80026b2:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a23      	ldr	r2, [pc, #140]	; (8002744 <HAL_ADC_Init+0xc0>)
 80026b8:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a22      	ldr	r2, [pc, #136]	; (8002748 <HAL_ADC_Init+0xc4>)
 80026be:	659a      	str	r2, [r3, #88]	; 0x58
    if (hadc->MspInitCallback == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d102      	bne.n	80026ce <HAL_ADC_Init+0x4a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a20      	ldr	r2, [pc, #128]	; (800274c <HAL_ADC_Init+0xc8>)
 80026cc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e8:	f003 0310 	and.w	r3, r3, #16
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d118      	bne.n	8002722 <HAL_ADC_Init+0x9e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026f8:	f023 0302 	bic.w	r3, r3, #2
 80026fc:	f043 0202 	orr.w	r2, r3, #2
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 fbcb 	bl	8002ea0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	f023 0303 	bic.w	r3, r3, #3
 8002718:	f043 0201 	orr.w	r2, r3, #1
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	641a      	str	r2, [r3, #64]	; 0x40
 8002720:	e001      	b.n	8002726 <HAL_ADC_Init+0xa2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800272e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	08002bd1 	.word	0x08002bd1
 800273c:	08002be5 	.word	0x08002be5
 8002740:	08002bf9 	.word	0x08002bf9
 8002744:	08007475 	.word	0x08007475
 8002748:	080031a5 	.word	0x080031a5
 800274c:	080017a1 	.word	0x080017a1

08002750 <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002758:	2300      	movs	r3, #0
 800275a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e02a      	b.n	80027bc <HAL_ADC_DeInit+0x6c>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f043 0202 	orr.w	r2, r3, #2
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0201 	bic.w	r2, r2, #1
 8002780:	609a      	str	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b00      	cmp	r3, #0
 800278e:	d110      	bne.n	80027b2 <HAL_ADC_DeInit+0x62>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  if (hadc->MspDeInitCallback == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002794:	2b00      	cmp	r3, #0
 8002796:	d102      	bne.n	800279e <HAL_ADC_DeInit+0x4e>
  {
    hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit  */
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a0a      	ldr	r2, [pc, #40]	; (80027c4 <HAL_ADC_DeInit+0x74>)
 800279c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	4798      	blx	r3
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	080018c5 	.word	0x080018c5

080027c8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	2300      	movs	r3, #0
 80027d6:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f003 0320 	and.w	r3, r3, #32
 80027f6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d04a      	beq.n	8002894 <HAL_ADC_IRQHandler+0xcc>
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d047      	beq.n	8002894 <HAL_ADC_IRQHandler+0xcc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	f003 0310 	and.w	r3, r3, #16
 800280c:	2b00      	cmp	r3, #0
 800280e:	d105      	bne.n	800281c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d12b      	bne.n	8002882 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800282e:	2b00      	cmp	r3, #0
 8002830:	d127      	bne.n	8002882 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002838:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800283c:	2b00      	cmp	r3, #0
 800283e:	d006      	beq.n	800284e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800284a:	2b00      	cmp	r3, #0
 800284c:	d119      	bne.n	8002882 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0220 	bic.w	r2, r2, #32
 800285c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d105      	bne.n	8002882 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f043 0201 	orr.w	r2, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	4798      	blx	r3
#else
    HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f06f 0212 	mvn.w	r2, #18
 8002892:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f003 0304 	and.w	r3, r3, #4
 800289a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d058      	beq.n	800295c <HAL_ADC_IRQHandler+0x194>
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d055      	beq.n	800295c <HAL_ADC_IRQHandler+0x194>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	f003 0310 	and.w	r3, r3, #16
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d105      	bne.n	80028c8 <HAL_ADC_IRQHandler+0x100>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d139      	bne.n	800294a <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028dc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d006      	beq.n	80028f2 <HAL_ADC_IRQHandler+0x12a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d12b      	bne.n	800294a <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d124      	bne.n	800294a <HAL_ADC_IRQHandler+0x182>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800290a:	2b00      	cmp	r3, #0
 800290c:	d11d      	bne.n	800294a <HAL_ADC_IRQHandler+0x182>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002912:	2b00      	cmp	r3, #0
 8002914:	d119      	bne.n	800294a <HAL_ADC_IRQHandler+0x182>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002924:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293a:	2b00      	cmp	r3, #0
 800293c:	d105      	bne.n	800294a <HAL_ADC_IRQHandler+0x182>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f043 0201 	orr.w	r2, r3, #1
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f06f 020c 	mvn.w	r2, #12
 800295a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d018      	beq.n	80029a4 <HAL_ADC_IRQHandler+0x1dc>
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d015      	beq.n	80029a4 <HAL_ADC_IRQHandler+0x1dc>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b01      	cmp	r3, #1
 8002984:	d10e      	bne.n	80029a4 <HAL_ADC_IRQHandler+0x1dc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f06f 0201 	mvn.w	r2, #1
 80029a2:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 0320 	and.w	r3, r3, #32
 80029aa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029b2:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d016      	beq.n	80029e8 <HAL_ADC_IRQHandler+0x220>
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d013      	beq.n	80029e8 <HAL_ADC_IRQHandler+0x220>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c4:	f043 0202 	orr.w	r2, r3, #2
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f06f 0220 	mvn.w	r2, #32
 80029d4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	4798      	blx	r3
#else
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f06f 0220 	mvn.w	r2, #32
 80029e6:	601a      	str	r2, [r3, #0]
  }
}
 80029e8:	bf00      	nop
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d101      	bne.n	8002a0e <HAL_ADC_Start_DMA+0x1e>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e0ce      	b.n	8002bac <HAL_ADC_Start_DMA+0x1bc>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d018      	beq.n	8002a56 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f042 0201 	orr.w	r2, r2, #1
 8002a32:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a34:	4b5f      	ldr	r3, [pc, #380]	; (8002bb4 <HAL_ADC_Start_DMA+0x1c4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a5f      	ldr	r2, [pc, #380]	; (8002bb8 <HAL_ADC_Start_DMA+0x1c8>)
 8002a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3e:	0c9a      	lsrs	r2, r3, #18
 8002a40:	4613      	mov	r3, r2
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	4413      	add	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002a48:	e002      	b.n	8002a50 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f9      	bne.n	8002a4a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a64:	d107      	bne.n	8002a76 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a74:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	f040 8086 	bne.w	8002b92 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a8e:	f023 0301 	bic.w	r3, r3, #1
 8002a92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d007      	beq.n	8002ab8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ab0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ac4:	d106      	bne.n	8002ad4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	f023 0206 	bic.w	r2, r3, #6
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	645a      	str	r2, [r3, #68]	; 0x44
 8002ad2:	e002      	b.n	8002ada <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ae2:	4b36      	ldr	r3, [pc, #216]	; (8002bbc <HAL_ADC_Start_DMA+0x1cc>)
 8002ae4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aea:	4a35      	ldr	r2, [pc, #212]	; (8002bc0 <HAL_ADC_Start_DMA+0x1d0>)
 8002aec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af2:	4a34      	ldr	r2, [pc, #208]	; (8002bc4 <HAL_ADC_Start_DMA+0x1d4>)
 8002af4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afa:	4a33      	ldr	r2, [pc, #204]	; (8002bc8 <HAL_ADC_Start_DMA+0x1d8>)
 8002afc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002b06:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002b16:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b26:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	334c      	adds	r3, #76	; 0x4c
 8002b32:	4619      	mov	r1, r3
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f000 fe06 	bl	8003748 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 031f 	and.w	r3, r3, #31
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10f      	bne.n	8002b68 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d129      	bne.n	8002baa <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b64:	609a      	str	r2, [r3, #8]
 8002b66:	e020      	b.n	8002baa <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a17      	ldr	r2, [pc, #92]	; (8002bcc <HAL_ADC_Start_DMA+0x1dc>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d11b      	bne.n	8002baa <HAL_ADC_Start_DMA+0x1ba>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d114      	bne.n	8002baa <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	e00b      	b.n	8002baa <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f043 0210 	orr.w	r2, r3, #16
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba2:	f043 0201 	orr.w	r2, r3, #1
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	20000004 	.word	0x20000004
 8002bb8:	431bde83 	.word	0x431bde83
 8002bbc:	40012300 	.word	0x40012300
 8002bc0:	08003099 	.word	0x08003099
 8002bc4:	08003157 	.word	0x08003157
 8002bc8:	08003175 	.word	0x08003175
 8002bcc:	40012000 	.word	0x40012000

08002bd0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002c16:	2300      	movs	r3, #0
 8002c18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x1c>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e113      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x244>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b09      	cmp	r3, #9
 8002c36:	d925      	bls.n	8002c84 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68d9      	ldr	r1, [r3, #12]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	461a      	mov	r2, r3
 8002c46:	4613      	mov	r3, r2
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3b1e      	subs	r3, #30
 8002c4e:	2207      	movs	r2, #7
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	43da      	mvns	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	400a      	ands	r2, r1
 8002c5c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68d9      	ldr	r1, [r3, #12]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	4618      	mov	r0, r3
 8002c70:	4603      	mov	r3, r0
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	4403      	add	r3, r0
 8002c76:	3b1e      	subs	r3, #30
 8002c78:	409a      	lsls	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	60da      	str	r2, [r3, #12]
 8002c82:	e022      	b.n	8002cca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6919      	ldr	r1, [r3, #16]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	461a      	mov	r2, r3
 8002c92:	4613      	mov	r3, r2
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	4413      	add	r3, r2
 8002c98:	2207      	movs	r2, #7
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	43da      	mvns	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	400a      	ands	r2, r1
 8002ca6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6919      	ldr	r1, [r3, #16]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	4618      	mov	r0, r3
 8002cba:	4603      	mov	r3, r0
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	4403      	add	r3, r0
 8002cc0:	409a      	lsls	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b06      	cmp	r3, #6
 8002cd0:	d824      	bhi.n	8002d1c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3b05      	subs	r3, #5
 8002ce4:	221f      	movs	r2, #31
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	43da      	mvns	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	400a      	ands	r2, r1
 8002cf2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	4618      	mov	r0, r3
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3b05      	subs	r3, #5
 8002d0e:	fa00 f203 	lsl.w	r2, r0, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	635a      	str	r2, [r3, #52]	; 0x34
 8002d1a:	e04c      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b0c      	cmp	r3, #12
 8002d22:	d824      	bhi.n	8002d6e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	3b23      	subs	r3, #35	; 0x23
 8002d36:	221f      	movs	r2, #31
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	43da      	mvns	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	400a      	ands	r2, r1
 8002d44:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	4618      	mov	r0, r3
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3b23      	subs	r3, #35	; 0x23
 8002d60:	fa00 f203 	lsl.w	r2, r0, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	631a      	str	r2, [r3, #48]	; 0x30
 8002d6c:	e023      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	3b41      	subs	r3, #65	; 0x41
 8002d80:	221f      	movs	r2, #31
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43da      	mvns	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	400a      	ands	r2, r1
 8002d8e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	3b41      	subs	r3, #65	; 0x41
 8002daa:	fa00 f203 	lsl.w	r2, r0, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002db6:	4b29      	ldr	r3, [pc, #164]	; (8002e5c <HAL_ADC_ConfigChannel+0x250>)
 8002db8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a28      	ldr	r2, [pc, #160]	; (8002e60 <HAL_ADC_ConfigChannel+0x254>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d10f      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x1d8>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2b12      	cmp	r3, #18
 8002dca:	d10b      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a1d      	ldr	r2, [pc, #116]	; (8002e60 <HAL_ADC_ConfigChannel+0x254>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d12b      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x23a>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a1c      	ldr	r2, [pc, #112]	; (8002e64 <HAL_ADC_ConfigChannel+0x258>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d003      	beq.n	8002e00 <HAL_ADC_ConfigChannel+0x1f4>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b11      	cmp	r3, #17
 8002dfe:	d122      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a11      	ldr	r2, [pc, #68]	; (8002e64 <HAL_ADC_ConfigChannel+0x258>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d111      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e22:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <HAL_ADC_ConfigChannel+0x25c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a11      	ldr	r2, [pc, #68]	; (8002e6c <HAL_ADC_ConfigChannel+0x260>)
 8002e28:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2c:	0c9a      	lsrs	r2, r3, #18
 8002e2e:	4613      	mov	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4413      	add	r3, r2
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e38:	e002      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f9      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	40012300 	.word	0x40012300
 8002e60:	40012000 	.word	0x40012000
 8002e64:	10000012 	.word	0x10000012
 8002e68:	20000004 	.word	0x20000004
 8002e6c:	431bde83 	.word	0x431bde83

08002e70 <HAL_ADC_GetState>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_ADC_GetError>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval ADC Error Code
  */
uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  return hadc->ErrorCode;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ea8:	4b79      	ldr	r3, [pc, #484]	; (8003090 <ADC_Init+0x1f0>)
 8002eaa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ed4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6859      	ldr	r1, [r3, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	021a      	lsls	r2, r3, #8
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ef8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6859      	ldr	r1, [r3, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6899      	ldr	r1, [r3, #8]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f32:	4a58      	ldr	r2, [pc, #352]	; (8003094 <ADC_Init+0x1f4>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d022      	beq.n	8002f7e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6899      	ldr	r1, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6899      	ldr	r1, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	609a      	str	r2, [r3, #8]
 8002f7c:	e00f      	b.n	8002f9e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f9c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 0202 	bic.w	r2, r2, #2
 8002fac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6899      	ldr	r1, [r3, #8]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	7e1b      	ldrb	r3, [r3, #24]
 8002fb8:	005a      	lsls	r2, r3, #1
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d01b      	beq.n	8003004 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fda:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002fea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6859      	ldr	r1, [r3, #4]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	035a      	lsls	r2, r3, #13
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	605a      	str	r2, [r3, #4]
 8003002:	e007      	b.n	8003014 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003012:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003022:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	3b01      	subs	r3, #1
 8003030:	051a      	lsls	r2, r3, #20
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003048:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6899      	ldr	r1, [r3, #8]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003056:	025a      	lsls	r2, r3, #9
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	430a      	orrs	r2, r1
 800305e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800306e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6899      	ldr	r1, [r3, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	029a      	lsls	r2, r3, #10
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	609a      	str	r2, [r3, #8]
}
 8003084:	bf00      	nop
 8003086:	3714      	adds	r7, #20
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	40012300 	.word	0x40012300
 8003094:	0f000001 	.word	0x0f000001

08003098 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d13d      	bne.n	800312e <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d12b      	bne.n	8003124 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d127      	bne.n	8003124 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030da:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d006      	beq.n	80030f0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d119      	bne.n	8003124 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0220 	bic.w	r2, r2, #32
 80030fe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003110:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d105      	bne.n	8003124 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	f043 0201 	orr.w	r2, r3, #1
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	4798      	blx	r3
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800312c:	e00f      	b.n	800314e <ADC_DMAConvCplt+0xb6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	f003 0310 	and.w	r3, r3, #16
 8003136:	2b00      	cmp	r3, #0
 8003138:	d004      	beq.n	8003144 <ADC_DMAConvCplt+0xac>
      hadc->ErrorCallback(hadc);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	4798      	blx	r3
}
 8003142:	e004      	b.n	800314e <ADC_DMAConvCplt+0xb6>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	4798      	blx	r3
}
 800314e:	bf00      	nop
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b084      	sub	sp, #16
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003162:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800316c:	bf00      	nop
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003180:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2240      	movs	r2, #64	; 0x40
 8003186:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318c:	f043 0204 	orr.w	r2, r3, #4
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800319c:	bf00      	nop
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031c8:	4b0c      	ldr	r3, [pc, #48]	; (80031fc <__NVIC_SetPriorityGrouping+0x44>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031d4:	4013      	ands	r3, r2
 80031d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ea:	4a04      	ldr	r2, [pc, #16]	; (80031fc <__NVIC_SetPriorityGrouping+0x44>)
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	60d3      	str	r3, [r2, #12]
}
 80031f0:	bf00      	nop
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	e000ed00 	.word	0xe000ed00

08003200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003204:	4b04      	ldr	r3, [pc, #16]	; (8003218 <__NVIC_GetPriorityGrouping+0x18>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	0a1b      	lsrs	r3, r3, #8
 800320a:	f003 0307 	and.w	r3, r3, #7
}
 800320e:	4618      	mov	r0, r3
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	e000ed00 	.word	0xe000ed00

0800321c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	4603      	mov	r3, r0
 8003224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322a:	2b00      	cmp	r3, #0
 800322c:	db0b      	blt.n	8003246 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800322e:	79fb      	ldrb	r3, [r7, #7]
 8003230:	f003 021f 	and.w	r2, r3, #31
 8003234:	4907      	ldr	r1, [pc, #28]	; (8003254 <__NVIC_EnableIRQ+0x38>)
 8003236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323a:	095b      	lsrs	r3, r3, #5
 800323c:	2001      	movs	r0, #1
 800323e:	fa00 f202 	lsl.w	r2, r0, r2
 8003242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	e000e100 	.word	0xe000e100

08003258 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	4603      	mov	r3, r0
 8003260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003266:	2b00      	cmp	r3, #0
 8003268:	db12      	blt.n	8003290 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800326a:	79fb      	ldrb	r3, [r7, #7]
 800326c:	f003 021f 	and.w	r2, r3, #31
 8003270:	490a      	ldr	r1, [pc, #40]	; (800329c <__NVIC_DisableIRQ+0x44>)
 8003272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003276:	095b      	lsrs	r3, r3, #5
 8003278:	2001      	movs	r0, #1
 800327a:	fa00 f202 	lsl.w	r2, r0, r2
 800327e:	3320      	adds	r3, #32
 8003280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003284:	f3bf 8f4f 	dsb	sy
}
 8003288:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800328a:	f3bf 8f6f 	isb	sy
}
 800328e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	e000e100 	.word	0xe000e100

080032a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	6039      	str	r1, [r7, #0]
 80032aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	db0a      	blt.n	80032ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	490c      	ldr	r1, [pc, #48]	; (80032ec <__NVIC_SetPriority+0x4c>)
 80032ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032be:	0112      	lsls	r2, r2, #4
 80032c0:	b2d2      	uxtb	r2, r2
 80032c2:	440b      	add	r3, r1
 80032c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032c8:	e00a      	b.n	80032e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	4908      	ldr	r1, [pc, #32]	; (80032f0 <__NVIC_SetPriority+0x50>)
 80032d0:	79fb      	ldrb	r3, [r7, #7]
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	3b04      	subs	r3, #4
 80032d8:	0112      	lsls	r2, r2, #4
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	440b      	add	r3, r1
 80032de:	761a      	strb	r2, [r3, #24]
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	e000e100 	.word	0xe000e100
 80032f0:	e000ed00 	.word	0xe000ed00

080032f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b089      	sub	sp, #36	; 0x24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f1c3 0307 	rsb	r3, r3, #7
 800330e:	2b04      	cmp	r3, #4
 8003310:	bf28      	it	cs
 8003312:	2304      	movcs	r3, #4
 8003314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	3304      	adds	r3, #4
 800331a:	2b06      	cmp	r3, #6
 800331c:	d902      	bls.n	8003324 <NVIC_EncodePriority+0x30>
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	3b03      	subs	r3, #3
 8003322:	e000      	b.n	8003326 <NVIC_EncodePriority+0x32>
 8003324:	2300      	movs	r3, #0
 8003326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003328:	f04f 32ff 	mov.w	r2, #4294967295
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	43da      	mvns	r2, r3
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	401a      	ands	r2, r3
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800333c:	f04f 31ff 	mov.w	r1, #4294967295
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	fa01 f303 	lsl.w	r3, r1, r3
 8003346:	43d9      	mvns	r1, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800334c:	4313      	orrs	r3, r2
         );
}
 800334e:	4618      	mov	r0, r3
 8003350:	3724      	adds	r7, #36	; 0x24
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
	...

0800335c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003360:	f3bf 8f4f 	dsb	sy
}
 8003364:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003366:	4b06      	ldr	r3, [pc, #24]	; (8003380 <__NVIC_SystemReset+0x24>)
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800336e:	4904      	ldr	r1, [pc, #16]	; (8003380 <__NVIC_SystemReset+0x24>)
 8003370:	4b04      	ldr	r3, [pc, #16]	; (8003384 <__NVIC_SystemReset+0x28>)
 8003372:	4313      	orrs	r3, r2
 8003374:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003376:	f3bf 8f4f 	dsb	sy
}
 800337a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800337c:	bf00      	nop
 800337e:	e7fd      	b.n	800337c <__NVIC_SystemReset+0x20>
 8003380:	e000ed00 	.word	0xe000ed00
 8003384:	05fa0004 	.word	0x05fa0004

08003388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff ff11 	bl	80031b8 <__NVIC_SetPriorityGrouping>
}
 8003396:	bf00      	nop
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800339e:	b580      	push	{r7, lr}
 80033a0:	b086      	sub	sp, #24
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	4603      	mov	r3, r0
 80033a6:	60b9      	str	r1, [r7, #8]
 80033a8:	607a      	str	r2, [r7, #4]
 80033aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033b0:	f7ff ff26 	bl	8003200 <__NVIC_GetPriorityGrouping>
 80033b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	68b9      	ldr	r1, [r7, #8]
 80033ba:	6978      	ldr	r0, [r7, #20]
 80033bc:	f7ff ff9a 	bl	80032f4 <NVIC_EncodePriority>
 80033c0:	4602      	mov	r2, r0
 80033c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033c6:	4611      	mov	r1, r2
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff ff69 	bl	80032a0 <__NVIC_SetPriority>
}
 80033ce:	bf00      	nop
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b082      	sub	sp, #8
 80033da:	af00      	add	r7, sp, #0
 80033dc:	4603      	mov	r3, r0
 80033de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff ff19 	bl	800321c <__NVIC_EnableIRQ>
}
 80033ea:	bf00      	nop
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	4603      	mov	r3, r0
 80033fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80033fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff ff29 	bl	8003258 <__NVIC_DisableIRQ>
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003412:	f7ff ffa3 	bl	800335c <__NVIC_SystemReset>

08003416 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e00e      	b.n	8003446 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	795b      	ldrb	r3, [r3, #5]
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d105      	bne.n	800343e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7fe fa6f 	bl	800191c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_CRC_DeInit>:
  * @brief  DeInitialize the CRC peripheral.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b082      	sub	sp, #8
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <HAL_CRC_DeInit+0x12>
  {
    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e022      	b.n	80034a6 <HAL_CRC_DeInit+0x58>

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  /* Check the CRC peripheral state */
  if (hcrc->State == HAL_CRC_STATE_BUSY)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	795b      	ldrb	r3, [r3, #5]
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d101      	bne.n	800346e <HAL_CRC_DeInit+0x20>
  {
    return HAL_BUSY;
 800346a:	2302      	movs	r3, #2
 800346c:	e01b      	b.n	80034a6 <HAL_CRC_DeInit+0x58>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2202      	movs	r2, #2
 8003472:	715a      	strb	r2, [r3, #5]

  /* Reset CRC calculation unit */
  __HAL_CRC_DR_RESET(hcrc);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0201 	orr.w	r2, r2, #1
 8003482:	609a      	str	r2, [r3, #8]

  /* Reset IDR register content */
  CLEAR_BIT(hcrc->Instance->IDR, CRC_IDR_IDR);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	791b      	ldrb	r3, [r3, #4]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2200      	movs	r2, #0
 8003490:	711a      	strb	r2, [r3, #4]

  /* DeInit the low level hardware */
  HAL_CRC_MspDeInit(hcrc);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7fe fa64 	bl	8001960 <HAL_CRC_MspDeInit>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_RESET;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	715a      	strb	r2, [r3, #5]

  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b087      	sub	sp, #28
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	60f8      	str	r0, [r7, #12]
 80034b6:	60b9      	str	r1, [r7, #8]
 80034b8:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80034ba:	2300      	movs	r3, #0
 80034bc:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2202      	movs	r2, #2
 80034c2:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0201 	orr.w	r2, r2, #1
 80034d2:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	e00a      	b.n	80034f0 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	441a      	add	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6812      	ldr	r2, [r2, #0]
 80034e8:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	3301      	adds	r3, #1
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d3f0      	bcc.n	80034da <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2201      	movs	r2, #1
 8003504:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8003506:	693b      	ldr	r3, [r7, #16]
}
 8003508:	4618      	mov	r0, r3
 800350a:	371c      	adds	r7, #28
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_CRC_GetState>:
  * @brief  Return the CRC handle state.
  * @param  hcrc CRC handle
  * @retval HAL state
  */
HAL_CRC_StateTypeDef HAL_CRC_GetState(CRC_HandleTypeDef *hcrc)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Return CRC handle state */
  return hcrc->State;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	795b      	ldrb	r3, [r3, #5]
 8003520:	b2db      	uxtb	r3, r3
}
 8003522:	4618      	mov	r0, r3
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
	...

08003530 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800353c:	f7ff f896 	bl	800266c <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e099      	b.n	8003680 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0201 	bic.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800356c:	e00f      	b.n	800358e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800356e:	f7ff f87d 	bl	800266c <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b05      	cmp	r3, #5
 800357a:	d908      	bls.n	800358e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2220      	movs	r2, #32
 8003580:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2203      	movs	r2, #3
 8003586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e078      	b.n	8003680 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1e8      	bne.n	800356e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	4b38      	ldr	r3, [pc, #224]	; (8003688 <HAL_DMA_Init+0x158>)
 80035a8:	4013      	ands	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	4313      	orrs	r3, r2
 80035de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	2b04      	cmp	r3, #4
 80035e6:	d107      	bne.n	80035f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f0:	4313      	orrs	r3, r2
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f023 0307 	bic.w	r3, r3, #7
 800360e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	4313      	orrs	r3, r2
 8003618:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361e:	2b04      	cmp	r3, #4
 8003620:	d117      	bne.n	8003652 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	4313      	orrs	r3, r2
 800362a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00e      	beq.n	8003652 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 fb5f 	bl	8003cf8 <DMA_CheckFifoParam>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d008      	beq.n	8003652 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2240      	movs	r2, #64	; 0x40
 8003644:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800364e:	2301      	movs	r3, #1
 8003650:	e016      	b.n	8003680 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 fb16 	bl	8003c8c <DMA_CalcBaseAndBitshift>
 8003660:	4603      	mov	r3, r0
 8003662:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003668:	223f      	movs	r2, #63	; 0x3f
 800366a:	409a      	lsls	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	f010803f 	.word	0xf010803f

0800368c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e050      	b.n	8003740 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d101      	bne.n	80036ae <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80036aa:	2302      	movs	r3, #2
 80036ac:	e048      	b.n	8003740 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0201 	bic.w	r2, r2, #1
 80036bc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2200      	movs	r2, #0
 80036cc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2200      	movs	r2, #0
 80036d4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2200      	movs	r2, #0
 80036dc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2200      	movs	r2, #0
 80036e4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2221      	movs	r2, #33	; 0x21
 80036ec:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 facc 	bl	8003c8c <DMA_CalcBaseAndBitshift>
 80036f4:	4603      	mov	r3, r0
 80036f6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003720:	223f      	movs	r2, #63	; 0x3f
 8003722:	409a      	lsls	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
 8003754:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003756:	2300      	movs	r3, #0
 8003758:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <HAL_DMA_Start_IT+0x26>
 800376a:	2302      	movs	r3, #2
 800376c:	e040      	b.n	80037f0 <HAL_DMA_Start_IT+0xa8>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b01      	cmp	r3, #1
 8003780:	d12f      	bne.n	80037e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2202      	movs	r2, #2
 8003786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	68b9      	ldr	r1, [r7, #8]
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 fa4a 	bl	8003c30 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a0:	223f      	movs	r2, #63	; 0x3f
 80037a2:	409a      	lsls	r2, r3
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0216 	orr.w	r2, r2, #22
 80037b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d007      	beq.n	80037d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 0208 	orr.w	r2, r2, #8
 80037ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0201 	orr.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	e005      	b.n	80037ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80037ea:	2302      	movs	r3, #2
 80037ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80037ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3718      	adds	r7, #24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003804:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003806:	f7fe ff31 	bl	800266c <HAL_GetTick>
 800380a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d008      	beq.n	800382a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2280      	movs	r2, #128	; 0x80
 800381c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e052      	b.n	80038d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0216 	bic.w	r2, r2, #22
 8003838:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	695a      	ldr	r2, [r3, #20]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003848:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	2b00      	cmp	r3, #0
 8003850:	d103      	bne.n	800385a <HAL_DMA_Abort+0x62>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003856:	2b00      	cmp	r3, #0
 8003858:	d007      	beq.n	800386a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0208 	bic.w	r2, r2, #8
 8003868:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0201 	bic.w	r2, r2, #1
 8003878:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800387a:	e013      	b.n	80038a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800387c:	f7fe fef6 	bl	800266c <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b05      	cmp	r3, #5
 8003888:	d90c      	bls.n	80038a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2220      	movs	r2, #32
 800388e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2203      	movs	r2, #3
 8003894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e015      	b.n	80038d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1e4      	bne.n	800387c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b6:	223f      	movs	r2, #63	; 0x3f
 80038b8:	409a      	lsls	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d004      	beq.n	80038f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2280      	movs	r2, #128	; 0x80
 80038f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e00c      	b.n	8003910 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2205      	movs	r2, #5
 80038fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0201 	bic.w	r2, r2, #1
 800390c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003924:	2300      	movs	r3, #0
 8003926:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003928:	4b8e      	ldr	r3, [pc, #568]	; (8003b64 <HAL_DMA_IRQHandler+0x248>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a8e      	ldr	r2, [pc, #568]	; (8003b68 <HAL_DMA_IRQHandler+0x24c>)
 800392e:	fba2 2303 	umull	r2, r3, r2, r3
 8003932:	0a9b      	lsrs	r3, r3, #10
 8003934:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003946:	2208      	movs	r2, #8
 8003948:	409a      	lsls	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	4013      	ands	r3, r2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d01a      	beq.n	8003988 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b00      	cmp	r3, #0
 800395e:	d013      	beq.n	8003988 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0204 	bic.w	r2, r2, #4
 800396e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003974:	2208      	movs	r2, #8
 8003976:	409a      	lsls	r2, r3
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003980:	f043 0201 	orr.w	r2, r3, #1
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800398c:	2201      	movs	r2, #1
 800398e:	409a      	lsls	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4013      	ands	r3, r2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d012      	beq.n	80039be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00b      	beq.n	80039be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039aa:	2201      	movs	r2, #1
 80039ac:	409a      	lsls	r2, r3
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b6:	f043 0202 	orr.w	r2, r3, #2
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c2:	2204      	movs	r2, #4
 80039c4:	409a      	lsls	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	4013      	ands	r3, r2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d012      	beq.n	80039f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00b      	beq.n	80039f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e0:	2204      	movs	r2, #4
 80039e2:	409a      	lsls	r2, r3
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ec:	f043 0204 	orr.w	r2, r3, #4
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f8:	2210      	movs	r2, #16
 80039fa:	409a      	lsls	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4013      	ands	r3, r2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d043      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d03c      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a16:	2210      	movs	r2, #16
 8003a18:	409a      	lsls	r2, r3
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d018      	beq.n	8003a5e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d108      	bne.n	8003a4c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d024      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	4798      	blx	r3
 8003a4a:	e01f      	b.n	8003a8c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d01b      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	4798      	blx	r3
 8003a5c:	e016      	b.n	8003a8c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d107      	bne.n	8003a7c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0208 	bic.w	r2, r2, #8
 8003a7a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a90:	2220      	movs	r2, #32
 8003a92:	409a      	lsls	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4013      	ands	r3, r2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 808f 	beq.w	8003bbc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0310 	and.w	r3, r3, #16
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 8087 	beq.w	8003bbc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	409a      	lsls	r2, r3
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b05      	cmp	r3, #5
 8003ac4:	d136      	bne.n	8003b34 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 0216 	bic.w	r2, r2, #22
 8003ad4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	695a      	ldr	r2, [r3, #20]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ae4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d103      	bne.n	8003af6 <HAL_DMA_IRQHandler+0x1da>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d007      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0208 	bic.w	r2, r2, #8
 8003b04:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0a:	223f      	movs	r2, #63	; 0x3f
 8003b0c:	409a      	lsls	r2, r3
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d07e      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	4798      	blx	r3
        }
        return;
 8003b32:	e079      	b.n	8003c28 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d01d      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10d      	bne.n	8003b6c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d031      	beq.n	8003bbc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	4798      	blx	r3
 8003b60:	e02c      	b.n	8003bbc <HAL_DMA_IRQHandler+0x2a0>
 8003b62:	bf00      	nop
 8003b64:	20000004 	.word	0x20000004
 8003b68:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d023      	beq.n	8003bbc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	4798      	blx	r3
 8003b7c:	e01e      	b.n	8003bbc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10f      	bne.n	8003bac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0210 	bic.w	r2, r2, #16
 8003b9a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d003      	beq.n	8003bbc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d032      	beq.n	8003c2a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d022      	beq.n	8003c16 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2205      	movs	r2, #5
 8003bd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0201 	bic.w	r2, r2, #1
 8003be6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	3301      	adds	r3, #1
 8003bec:	60bb      	str	r3, [r7, #8]
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d307      	bcc.n	8003c04 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1f2      	bne.n	8003be8 <HAL_DMA_IRQHandler+0x2cc>
 8003c02:	e000      	b.n	8003c06 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c04:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d005      	beq.n	8003c2a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	4798      	blx	r3
 8003c26:	e000      	b.n	8003c2a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c28:	bf00      	nop
    }
  }
}
 8003c2a:	3718      	adds	r7, #24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
 8003c3c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c4c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2b40      	cmp	r3, #64	; 0x40
 8003c5c:	d108      	bne.n	8003c70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c6e:	e007      	b.n	8003c80 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	60da      	str	r2, [r3, #12]
}
 8003c80:	bf00      	nop
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	3b10      	subs	r3, #16
 8003c9c:	4a14      	ldr	r2, [pc, #80]	; (8003cf0 <DMA_CalcBaseAndBitshift+0x64>)
 8003c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca2:	091b      	lsrs	r3, r3, #4
 8003ca4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ca6:	4a13      	ldr	r2, [pc, #76]	; (8003cf4 <DMA_CalcBaseAndBitshift+0x68>)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4413      	add	r3, r2
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2b03      	cmp	r3, #3
 8003cb8:	d909      	bls.n	8003cce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cc2:	f023 0303 	bic.w	r3, r3, #3
 8003cc6:	1d1a      	adds	r2, r3, #4
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	659a      	str	r2, [r3, #88]	; 0x58
 8003ccc:	e007      	b.n	8003cde <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cd6:	f023 0303 	bic.w	r3, r3, #3
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	aaaaaaab 	.word	0xaaaaaaab
 8003cf4:	0800c958 	.word	0x0800c958

08003cf8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d00:	2300      	movs	r3, #0
 8003d02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d11f      	bne.n	8003d52 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2b03      	cmp	r3, #3
 8003d16:	d856      	bhi.n	8003dc6 <DMA_CheckFifoParam+0xce>
 8003d18:	a201      	add	r2, pc, #4	; (adr r2, 8003d20 <DMA_CheckFifoParam+0x28>)
 8003d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1e:	bf00      	nop
 8003d20:	08003d31 	.word	0x08003d31
 8003d24:	08003d43 	.word	0x08003d43
 8003d28:	08003d31 	.word	0x08003d31
 8003d2c:	08003dc7 	.word	0x08003dc7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d046      	beq.n	8003dca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d40:	e043      	b.n	8003dca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d4a:	d140      	bne.n	8003dce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d50:	e03d      	b.n	8003dce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d5a:	d121      	bne.n	8003da0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2b03      	cmp	r3, #3
 8003d60:	d837      	bhi.n	8003dd2 <DMA_CheckFifoParam+0xda>
 8003d62:	a201      	add	r2, pc, #4	; (adr r2, 8003d68 <DMA_CheckFifoParam+0x70>)
 8003d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d68:	08003d79 	.word	0x08003d79
 8003d6c:	08003d7f 	.word	0x08003d7f
 8003d70:	08003d79 	.word	0x08003d79
 8003d74:	08003d91 	.word	0x08003d91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d7c:	e030      	b.n	8003de0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d025      	beq.n	8003dd6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d8e:	e022      	b.n	8003dd6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d98:	d11f      	bne.n	8003dda <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d9e:	e01c      	b.n	8003dda <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d903      	bls.n	8003dae <DMA_CheckFifoParam+0xb6>
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	2b03      	cmp	r3, #3
 8003daa:	d003      	beq.n	8003db4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003dac:	e018      	b.n	8003de0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	73fb      	strb	r3, [r7, #15]
      break;
 8003db2:	e015      	b.n	8003de0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00e      	beq.n	8003dde <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8003dc4:	e00b      	b.n	8003dde <DMA_CheckFifoParam+0xe6>
      break;
 8003dc6:	bf00      	nop
 8003dc8:	e00a      	b.n	8003de0 <DMA_CheckFifoParam+0xe8>
      break;
 8003dca:	bf00      	nop
 8003dcc:	e008      	b.n	8003de0 <DMA_CheckFifoParam+0xe8>
      break;
 8003dce:	bf00      	nop
 8003dd0:	e006      	b.n	8003de0 <DMA_CheckFifoParam+0xe8>
      break;
 8003dd2:	bf00      	nop
 8003dd4:	e004      	b.n	8003de0 <DMA_CheckFifoParam+0xe8>
      break;
 8003dd6:	bf00      	nop
 8003dd8:	e002      	b.n	8003de0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003dda:	bf00      	nop
 8003ddc:	e000      	b.n	8003de0 <DMA_CheckFifoParam+0xe8>
      break;
 8003dde:	bf00      	nop
    }
  } 
  
  return status; 
 8003de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop

08003df0 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003dfa:	4b4b      	ldr	r3, [pc, #300]	; (8003f28 <HAL_FLASH_IRQHandler+0x138>)
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d020      	beq.n	8003e48 <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8003e06:	4b49      	ldr	r3, [pc, #292]	; (8003f2c <HAL_FLASH_IRQHandler+0x13c>)
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d107      	bne.n	8003e20 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8003e10:	4b46      	ldr	r3, [pc, #280]	; (8003f2c <HAL_FLASH_IRQHandler+0x13c>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8003e16:	4b45      	ldr	r3, [pc, #276]	; (8003f2c <HAL_FLASH_IRQHandler+0x13c>)
 8003e18:	f04f 32ff 	mov.w	r2, #4294967295
 8003e1c:	60da      	str	r2, [r3, #12]
 8003e1e:	e00b      	b.n	8003e38 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8003e20:	4b42      	ldr	r3, [pc, #264]	; (8003f2c <HAL_FLASH_IRQHandler+0x13c>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d103      	bne.n	8003e32 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8003e2a:	4b40      	ldr	r3, [pc, #256]	; (8003f2c <HAL_FLASH_IRQHandler+0x13c>)
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	607b      	str	r3, [r7, #4]
 8003e30:	e002      	b.n	8003e38 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8003e32:	4b3e      	ldr	r3, [pc, #248]	; (8003f2c <HAL_FLASH_IRQHandler+0x13c>)
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8003e38:	f000 f88e 	bl	8003f58 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f881 	bl	8003f44 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003e42:	4b3a      	ldr	r3, [pc, #232]	; (8003f2c <HAL_FLASH_IRQHandler+0x13c>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003e48:	4b37      	ldr	r3, [pc, #220]	; (8003f28 <HAL_FLASH_IRQHandler+0x138>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d04a      	beq.n	8003eea <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003e54:	4b34      	ldr	r3, [pc, #208]	; (8003f28 <HAL_FLASH_IRQHandler+0x138>)
 8003e56:	2201      	movs	r2, #1
 8003e58:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8003e5a:	4b34      	ldr	r3, [pc, #208]	; (8003f2c <HAL_FLASH_IRQHandler+0x13c>)
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d12d      	bne.n	8003ec0 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8003e64:	4b31      	ldr	r3, [pc, #196]	; (8003f2c <HAL_FLASH_IRQHandler+0x13c>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	4a30      	ldr	r2, [pc, #192]	; (8003f2c <HAL_FLASH_IRQHandler+0x13c>)
 8003e6c:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8003e6e:	4b2f      	ldr	r3, [pc, #188]	; (8003f2c <HAL_FLASH_IRQHandler+0x13c>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d015      	beq.n	8003ea2 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8003e76:	4b2d      	ldr	r3, [pc, #180]	; (8003f2c <HAL_FLASH_IRQHandler+0x13c>)
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f857 	bl	8003f30 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8003e82:	4b2a      	ldr	r3, [pc, #168]	; (8003f2c <HAL_FLASH_IRQHandler+0x13c>)
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	3301      	adds	r3, #1
 8003e88:	4a28      	ldr	r2, [pc, #160]	; (8003f2c <HAL_FLASH_IRQHandler+0x13c>)
 8003e8a:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8003e8c:	4b27      	ldr	r3, [pc, #156]	; (8003f2c <HAL_FLASH_IRQHandler+0x13c>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8003e92:	4b26      	ldr	r3, [pc, #152]	; (8003f2c <HAL_FLASH_IRQHandler+0x13c>)
 8003e94:	7a1b      	ldrb	r3, [r3, #8]
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	4619      	mov	r1, r3
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f8c2 	bl	8004024 <FLASH_Erase_Sector>
 8003ea0:	e023      	b.n	8003eea <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8003ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea6:	607b      	str	r3, [r7, #4]
 8003ea8:	4a20      	ldr	r2, [pc, #128]	; (8003f2c <HAL_FLASH_IRQHandler+0x13c>)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003eae:	4b1f      	ldr	r3, [pc, #124]	; (8003f2c <HAL_FLASH_IRQHandler+0x13c>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8003eb4:	f000 f8fe 	bl	80040b4 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f839 	bl	8003f30 <HAL_FLASH_EndOfOperationCallback>
 8003ebe:	e014      	b.n	8003eea <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8003ec0:	4b1a      	ldr	r3, [pc, #104]	; (8003f2c <HAL_FLASH_IRQHandler+0x13c>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d107      	bne.n	8003eda <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8003eca:	f000 f8f3 	bl	80040b4 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8003ece:	4b17      	ldr	r3, [pc, #92]	; (8003f2c <HAL_FLASH_IRQHandler+0x13c>)
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 f82c 	bl	8003f30 <HAL_FLASH_EndOfOperationCallback>
 8003ed8:	e004      	b.n	8003ee4 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8003eda:	4b14      	ldr	r3, [pc, #80]	; (8003f2c <HAL_FLASH_IRQHandler+0x13c>)
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 f826 	bl	8003f30 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003ee4:	4b11      	ldr	r3, [pc, #68]	; (8003f2c <HAL_FLASH_IRQHandler+0x13c>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8003eea:	4b10      	ldr	r3, [pc, #64]	; (8003f2c <HAL_FLASH_IRQHandler+0x13c>)
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d114      	bne.n	8003f1e <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8003ef4:	4b0c      	ldr	r3, [pc, #48]	; (8003f28 <HAL_FLASH_IRQHandler+0x138>)
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	4a0b      	ldr	r2, [pc, #44]	; (8003f28 <HAL_FLASH_IRQHandler+0x138>)
 8003efa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003efe:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8003f00:	4b09      	ldr	r3, [pc, #36]	; (8003f28 <HAL_FLASH_IRQHandler+0x138>)
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	4a08      	ldr	r2, [pc, #32]	; (8003f28 <HAL_FLASH_IRQHandler+0x138>)
 8003f06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f0a:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8003f0c:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <HAL_FLASH_IRQHandler+0x138>)
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	4a05      	ldr	r2, [pc, #20]	; (8003f28 <HAL_FLASH_IRQHandler+0x138>)
 8003f12:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003f16:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8003f18:	4b04      	ldr	r3, [pc, #16]	; (8003f2c <HAL_FLASH_IRQHandler+0x13c>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	761a      	strb	r2, [r3, #24]
  }
}
 8003f1e:	bf00      	nop
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	40023c00 	.word	0x40023c00
 8003f2c:	200007cc 	.word	0x200007cc

08003f30 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003f5c:	4b2f      	ldr	r3, [pc, #188]	; (800401c <FLASH_SetErrorCode+0xc4>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f003 0310 	and.w	r3, r3, #16
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d008      	beq.n	8003f7a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003f68:	4b2d      	ldr	r3, [pc, #180]	; (8004020 <FLASH_SetErrorCode+0xc8>)
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	f043 0310 	orr.w	r3, r3, #16
 8003f70:	4a2b      	ldr	r2, [pc, #172]	; (8004020 <FLASH_SetErrorCode+0xc8>)
 8003f72:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003f74:	4b29      	ldr	r3, [pc, #164]	; (800401c <FLASH_SetErrorCode+0xc4>)
 8003f76:	2210      	movs	r2, #16
 8003f78:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003f7a:	4b28      	ldr	r3, [pc, #160]	; (800401c <FLASH_SetErrorCode+0xc4>)
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	f003 0320 	and.w	r3, r3, #32
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d008      	beq.n	8003f98 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003f86:	4b26      	ldr	r3, [pc, #152]	; (8004020 <FLASH_SetErrorCode+0xc8>)
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	f043 0308 	orr.w	r3, r3, #8
 8003f8e:	4a24      	ldr	r2, [pc, #144]	; (8004020 <FLASH_SetErrorCode+0xc8>)
 8003f90:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003f92:	4b22      	ldr	r3, [pc, #136]	; (800401c <FLASH_SetErrorCode+0xc4>)
 8003f94:	2220      	movs	r2, #32
 8003f96:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003f98:	4b20      	ldr	r3, [pc, #128]	; (800401c <FLASH_SetErrorCode+0xc4>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003fa4:	4b1e      	ldr	r3, [pc, #120]	; (8004020 <FLASH_SetErrorCode+0xc8>)
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	f043 0304 	orr.w	r3, r3, #4
 8003fac:	4a1c      	ldr	r2, [pc, #112]	; (8004020 <FLASH_SetErrorCode+0xc8>)
 8003fae:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003fb0:	4b1a      	ldr	r3, [pc, #104]	; (800401c <FLASH_SetErrorCode+0xc4>)
 8003fb2:	2240      	movs	r2, #64	; 0x40
 8003fb4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003fb6:	4b19      	ldr	r3, [pc, #100]	; (800401c <FLASH_SetErrorCode+0xc4>)
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d008      	beq.n	8003fd4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003fc2:	4b17      	ldr	r3, [pc, #92]	; (8004020 <FLASH_SetErrorCode+0xc8>)
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	f043 0302 	orr.w	r3, r3, #2
 8003fca:	4a15      	ldr	r2, [pc, #84]	; (8004020 <FLASH_SetErrorCode+0xc8>)
 8003fcc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003fce:	4b13      	ldr	r3, [pc, #76]	; (800401c <FLASH_SetErrorCode+0xc4>)
 8003fd0:	2280      	movs	r2, #128	; 0x80
 8003fd2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003fd4:	4b11      	ldr	r3, [pc, #68]	; (800401c <FLASH_SetErrorCode+0xc4>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d009      	beq.n	8003ff4 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003fe0:	4b0f      	ldr	r3, [pc, #60]	; (8004020 <FLASH_SetErrorCode+0xc8>)
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	f043 0301 	orr.w	r3, r3, #1
 8003fe8:	4a0d      	ldr	r2, [pc, #52]	; (8004020 <FLASH_SetErrorCode+0xc8>)
 8003fea:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8003fec:	4b0b      	ldr	r3, [pc, #44]	; (800401c <FLASH_SetErrorCode+0xc4>)
 8003fee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ff2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003ff4:	4b09      	ldr	r3, [pc, #36]	; (800401c <FLASH_SetErrorCode+0xc4>)
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d008      	beq.n	8004012 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004000:	4b07      	ldr	r3, [pc, #28]	; (8004020 <FLASH_SetErrorCode+0xc8>)
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	f043 0320 	orr.w	r3, r3, #32
 8004008:	4a05      	ldr	r2, [pc, #20]	; (8004020 <FLASH_SetErrorCode+0xc8>)
 800400a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800400c:	4b03      	ldr	r3, [pc, #12]	; (800401c <FLASH_SetErrorCode+0xc4>)
 800400e:	2202      	movs	r2, #2
 8004010:	60da      	str	r2, [r3, #12]
  }
}
 8004012:	bf00      	nop
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	40023c00 	.word	0x40023c00
 8004020:	200007cc 	.word	0x200007cc

08004024 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	460b      	mov	r3, r1
 800402e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004034:	78fb      	ldrb	r3, [r7, #3]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d102      	bne.n	8004040 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800403a:	2300      	movs	r3, #0
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	e010      	b.n	8004062 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004040:	78fb      	ldrb	r3, [r7, #3]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d103      	bne.n	800404e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004046:	f44f 7380 	mov.w	r3, #256	; 0x100
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	e009      	b.n	8004062 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800404e:	78fb      	ldrb	r3, [r7, #3]
 8004050:	2b02      	cmp	r3, #2
 8004052:	d103      	bne.n	800405c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004054:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	e002      	b.n	8004062 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800405c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004060:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004062:	4b13      	ldr	r3, [pc, #76]	; (80040b0 <FLASH_Erase_Sector+0x8c>)
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	4a12      	ldr	r2, [pc, #72]	; (80040b0 <FLASH_Erase_Sector+0x8c>)
 8004068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800406c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800406e:	4b10      	ldr	r3, [pc, #64]	; (80040b0 <FLASH_Erase_Sector+0x8c>)
 8004070:	691a      	ldr	r2, [r3, #16]
 8004072:	490f      	ldr	r1, [pc, #60]	; (80040b0 <FLASH_Erase_Sector+0x8c>)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4313      	orrs	r3, r2
 8004078:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800407a:	4b0d      	ldr	r3, [pc, #52]	; (80040b0 <FLASH_Erase_Sector+0x8c>)
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	4a0c      	ldr	r2, [pc, #48]	; (80040b0 <FLASH_Erase_Sector+0x8c>)
 8004080:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004084:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004086:	4b0a      	ldr	r3, [pc, #40]	; (80040b0 <FLASH_Erase_Sector+0x8c>)
 8004088:	691a      	ldr	r2, [r3, #16]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	4313      	orrs	r3, r2
 8004090:	4a07      	ldr	r2, [pc, #28]	; (80040b0 <FLASH_Erase_Sector+0x8c>)
 8004092:	f043 0302 	orr.w	r3, r3, #2
 8004096:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004098:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <FLASH_Erase_Sector+0x8c>)
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	4a04      	ldr	r2, [pc, #16]	; (80040b0 <FLASH_Erase_Sector+0x8c>)
 800409e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a2:	6113      	str	r3, [r2, #16]
}
 80040a4:	bf00      	nop
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	40023c00 	.word	0x40023c00

080040b4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80040b8:	4b20      	ldr	r3, [pc, #128]	; (800413c <FLASH_FlushCaches+0x88>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d017      	beq.n	80040f4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80040c4:	4b1d      	ldr	r3, [pc, #116]	; (800413c <FLASH_FlushCaches+0x88>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a1c      	ldr	r2, [pc, #112]	; (800413c <FLASH_FlushCaches+0x88>)
 80040ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040ce:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80040d0:	4b1a      	ldr	r3, [pc, #104]	; (800413c <FLASH_FlushCaches+0x88>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a19      	ldr	r2, [pc, #100]	; (800413c <FLASH_FlushCaches+0x88>)
 80040d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040da:	6013      	str	r3, [r2, #0]
 80040dc:	4b17      	ldr	r3, [pc, #92]	; (800413c <FLASH_FlushCaches+0x88>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a16      	ldr	r2, [pc, #88]	; (800413c <FLASH_FlushCaches+0x88>)
 80040e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040e6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80040e8:	4b14      	ldr	r3, [pc, #80]	; (800413c <FLASH_FlushCaches+0x88>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a13      	ldr	r2, [pc, #76]	; (800413c <FLASH_FlushCaches+0x88>)
 80040ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040f2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80040f4:	4b11      	ldr	r3, [pc, #68]	; (800413c <FLASH_FlushCaches+0x88>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d017      	beq.n	8004130 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004100:	4b0e      	ldr	r3, [pc, #56]	; (800413c <FLASH_FlushCaches+0x88>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a0d      	ldr	r2, [pc, #52]	; (800413c <FLASH_FlushCaches+0x88>)
 8004106:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800410a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800410c:	4b0b      	ldr	r3, [pc, #44]	; (800413c <FLASH_FlushCaches+0x88>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a0a      	ldr	r2, [pc, #40]	; (800413c <FLASH_FlushCaches+0x88>)
 8004112:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004116:	6013      	str	r3, [r2, #0]
 8004118:	4b08      	ldr	r3, [pc, #32]	; (800413c <FLASH_FlushCaches+0x88>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a07      	ldr	r2, [pc, #28]	; (800413c <FLASH_FlushCaches+0x88>)
 800411e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004122:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004124:	4b05      	ldr	r3, [pc, #20]	; (800413c <FLASH_FlushCaches+0x88>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a04      	ldr	r2, [pc, #16]	; (800413c <FLASH_FlushCaches+0x88>)
 800412a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800412e:	6013      	str	r3, [r2, #0]
  }
}
 8004130:	bf00      	nop
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	40023c00 	.word	0x40023c00

08004140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004140:	b480      	push	{r7}
 8004142:	b089      	sub	sp, #36	; 0x24
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800414a:	2300      	movs	r3, #0
 800414c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800414e:	2300      	movs	r3, #0
 8004150:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004152:	2300      	movs	r3, #0
 8004154:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004156:	2300      	movs	r3, #0
 8004158:	61fb      	str	r3, [r7, #28]
 800415a:	e159      	b.n	8004410 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800415c:	2201      	movs	r2, #1
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	fa02 f303 	lsl.w	r3, r2, r3
 8004164:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	4013      	ands	r3, r2
 800416e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	429a      	cmp	r2, r3
 8004176:	f040 8148 	bne.w	800440a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	2b01      	cmp	r3, #1
 8004184:	d005      	beq.n	8004192 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800418e:	2b02      	cmp	r3, #2
 8004190:	d130      	bne.n	80041f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	2203      	movs	r2, #3
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	43db      	mvns	r3, r3
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	4013      	ands	r3, r2
 80041a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	fa02 f303 	lsl.w	r3, r2, r3
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041c8:	2201      	movs	r2, #1
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	fa02 f303 	lsl.w	r3, r2, r3
 80041d0:	43db      	mvns	r3, r3
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	4013      	ands	r3, r2
 80041d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	091b      	lsrs	r3, r3, #4
 80041de:	f003 0201 	and.w	r2, r3, #1
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f003 0303 	and.w	r3, r3, #3
 80041fc:	2b03      	cmp	r3, #3
 80041fe:	d017      	beq.n	8004230 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	2203      	movs	r2, #3
 800420c:	fa02 f303 	lsl.w	r3, r2, r3
 8004210:	43db      	mvns	r3, r3
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	4013      	ands	r3, r2
 8004216:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	4313      	orrs	r3, r2
 8004228:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f003 0303 	and.w	r3, r3, #3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d123      	bne.n	8004284 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	08da      	lsrs	r2, r3, #3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	3208      	adds	r2, #8
 8004244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004248:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	220f      	movs	r2, #15
 8004254:	fa02 f303 	lsl.w	r3, r2, r3
 8004258:	43db      	mvns	r3, r3
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	4013      	ands	r3, r2
 800425e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	4313      	orrs	r3, r2
 8004274:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	08da      	lsrs	r2, r3, #3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3208      	adds	r2, #8
 800427e:	69b9      	ldr	r1, [r7, #24]
 8004280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	2203      	movs	r2, #3
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	43db      	mvns	r3, r3
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	4013      	ands	r3, r2
 800429a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f003 0203 	and.w	r2, r3, #3
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 80a2 	beq.w	800440a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042c6:	2300      	movs	r3, #0
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	4b57      	ldr	r3, [pc, #348]	; (8004428 <HAL_GPIO_Init+0x2e8>)
 80042cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ce:	4a56      	ldr	r2, [pc, #344]	; (8004428 <HAL_GPIO_Init+0x2e8>)
 80042d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042d4:	6453      	str	r3, [r2, #68]	; 0x44
 80042d6:	4b54      	ldr	r3, [pc, #336]	; (8004428 <HAL_GPIO_Init+0x2e8>)
 80042d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042e2:	4a52      	ldr	r2, [pc, #328]	; (800442c <HAL_GPIO_Init+0x2ec>)
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	089b      	lsrs	r3, r3, #2
 80042e8:	3302      	adds	r3, #2
 80042ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	220f      	movs	r2, #15
 80042fa:	fa02 f303 	lsl.w	r3, r2, r3
 80042fe:	43db      	mvns	r3, r3
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	4013      	ands	r3, r2
 8004304:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a49      	ldr	r2, [pc, #292]	; (8004430 <HAL_GPIO_Init+0x2f0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d019      	beq.n	8004342 <HAL_GPIO_Init+0x202>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a48      	ldr	r2, [pc, #288]	; (8004434 <HAL_GPIO_Init+0x2f4>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d013      	beq.n	800433e <HAL_GPIO_Init+0x1fe>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a47      	ldr	r2, [pc, #284]	; (8004438 <HAL_GPIO_Init+0x2f8>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d00d      	beq.n	800433a <HAL_GPIO_Init+0x1fa>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a46      	ldr	r2, [pc, #280]	; (800443c <HAL_GPIO_Init+0x2fc>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d007      	beq.n	8004336 <HAL_GPIO_Init+0x1f6>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a45      	ldr	r2, [pc, #276]	; (8004440 <HAL_GPIO_Init+0x300>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d101      	bne.n	8004332 <HAL_GPIO_Init+0x1f2>
 800432e:	2304      	movs	r3, #4
 8004330:	e008      	b.n	8004344 <HAL_GPIO_Init+0x204>
 8004332:	2307      	movs	r3, #7
 8004334:	e006      	b.n	8004344 <HAL_GPIO_Init+0x204>
 8004336:	2303      	movs	r3, #3
 8004338:	e004      	b.n	8004344 <HAL_GPIO_Init+0x204>
 800433a:	2302      	movs	r3, #2
 800433c:	e002      	b.n	8004344 <HAL_GPIO_Init+0x204>
 800433e:	2301      	movs	r3, #1
 8004340:	e000      	b.n	8004344 <HAL_GPIO_Init+0x204>
 8004342:	2300      	movs	r3, #0
 8004344:	69fa      	ldr	r2, [r7, #28]
 8004346:	f002 0203 	and.w	r2, r2, #3
 800434a:	0092      	lsls	r2, r2, #2
 800434c:	4093      	lsls	r3, r2
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	4313      	orrs	r3, r2
 8004352:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004354:	4935      	ldr	r1, [pc, #212]	; (800442c <HAL_GPIO_Init+0x2ec>)
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	089b      	lsrs	r3, r3, #2
 800435a:	3302      	adds	r3, #2
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004362:	4b38      	ldr	r3, [pc, #224]	; (8004444 <HAL_GPIO_Init+0x304>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	43db      	mvns	r3, r3
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	4013      	ands	r3, r2
 8004370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	4313      	orrs	r3, r2
 8004384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004386:	4a2f      	ldr	r2, [pc, #188]	; (8004444 <HAL_GPIO_Init+0x304>)
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800438c:	4b2d      	ldr	r3, [pc, #180]	; (8004444 <HAL_GPIO_Init+0x304>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	43db      	mvns	r3, r3
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	4013      	ands	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d003      	beq.n	80043b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043b0:	4a24      	ldr	r2, [pc, #144]	; (8004444 <HAL_GPIO_Init+0x304>)
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043b6:	4b23      	ldr	r3, [pc, #140]	; (8004444 <HAL_GPIO_Init+0x304>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	43db      	mvns	r3, r3
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	4013      	ands	r3, r2
 80043c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80043d2:	69ba      	ldr	r2, [r7, #24]
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043da:	4a1a      	ldr	r2, [pc, #104]	; (8004444 <HAL_GPIO_Init+0x304>)
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043e0:	4b18      	ldr	r3, [pc, #96]	; (8004444 <HAL_GPIO_Init+0x304>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	43db      	mvns	r3, r3
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	4013      	ands	r3, r2
 80043ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	4313      	orrs	r3, r2
 8004402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004404:	4a0f      	ldr	r2, [pc, #60]	; (8004444 <HAL_GPIO_Init+0x304>)
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	3301      	adds	r3, #1
 800440e:	61fb      	str	r3, [r7, #28]
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	2b0f      	cmp	r3, #15
 8004414:	f67f aea2 	bls.w	800415c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004418:	bf00      	nop
 800441a:	bf00      	nop
 800441c:	3724      	adds	r7, #36	; 0x24
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40023800 	.word	0x40023800
 800442c:	40013800 	.word	0x40013800
 8004430:	40020000 	.word	0x40020000
 8004434:	40020400 	.word	0x40020400
 8004438:	40020800 	.word	0x40020800
 800443c:	40020c00 	.word	0x40020c00
 8004440:	40021000 	.word	0x40021000
 8004444:	40013c00 	.word	0x40013c00

08004448 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004452:	2300      	movs	r3, #0
 8004454:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004456:	2300      	movs	r3, #0
 8004458:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800445a:	2300      	movs	r3, #0
 800445c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800445e:	2300      	movs	r3, #0
 8004460:	617b      	str	r3, [r7, #20]
 8004462:	e0bb      	b.n	80045dc <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004464:	2201      	movs	r2, #1
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	fa02 f303 	lsl.w	r3, r2, r3
 800446c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	4013      	ands	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	429a      	cmp	r2, r3
 800447c:	f040 80ab 	bne.w	80045d6 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004480:	4a5c      	ldr	r2, [pc, #368]	; (80045f4 <HAL_GPIO_DeInit+0x1ac>)
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	089b      	lsrs	r3, r3, #2
 8004486:	3302      	adds	r3, #2
 8004488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800448c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f003 0303 	and.w	r3, r3, #3
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	220f      	movs	r2, #15
 8004498:	fa02 f303 	lsl.w	r3, r2, r3
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	4013      	ands	r3, r2
 80044a0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a54      	ldr	r2, [pc, #336]	; (80045f8 <HAL_GPIO_DeInit+0x1b0>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d019      	beq.n	80044de <HAL_GPIO_DeInit+0x96>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a53      	ldr	r2, [pc, #332]	; (80045fc <HAL_GPIO_DeInit+0x1b4>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d013      	beq.n	80044da <HAL_GPIO_DeInit+0x92>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a52      	ldr	r2, [pc, #328]	; (8004600 <HAL_GPIO_DeInit+0x1b8>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d00d      	beq.n	80044d6 <HAL_GPIO_DeInit+0x8e>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a51      	ldr	r2, [pc, #324]	; (8004604 <HAL_GPIO_DeInit+0x1bc>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d007      	beq.n	80044d2 <HAL_GPIO_DeInit+0x8a>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a50      	ldr	r2, [pc, #320]	; (8004608 <HAL_GPIO_DeInit+0x1c0>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d101      	bne.n	80044ce <HAL_GPIO_DeInit+0x86>
 80044ca:	2304      	movs	r3, #4
 80044cc:	e008      	b.n	80044e0 <HAL_GPIO_DeInit+0x98>
 80044ce:	2307      	movs	r3, #7
 80044d0:	e006      	b.n	80044e0 <HAL_GPIO_DeInit+0x98>
 80044d2:	2303      	movs	r3, #3
 80044d4:	e004      	b.n	80044e0 <HAL_GPIO_DeInit+0x98>
 80044d6:	2302      	movs	r3, #2
 80044d8:	e002      	b.n	80044e0 <HAL_GPIO_DeInit+0x98>
 80044da:	2301      	movs	r3, #1
 80044dc:	e000      	b.n	80044e0 <HAL_GPIO_DeInit+0x98>
 80044de:	2300      	movs	r3, #0
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	f002 0203 	and.w	r2, r2, #3
 80044e6:	0092      	lsls	r2, r2, #2
 80044e8:	4093      	lsls	r3, r2
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d132      	bne.n	8004556 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80044f0:	4b46      	ldr	r3, [pc, #280]	; (800460c <HAL_GPIO_DeInit+0x1c4>)
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	43db      	mvns	r3, r3
 80044f8:	4944      	ldr	r1, [pc, #272]	; (800460c <HAL_GPIO_DeInit+0x1c4>)
 80044fa:	4013      	ands	r3, r2
 80044fc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80044fe:	4b43      	ldr	r3, [pc, #268]	; (800460c <HAL_GPIO_DeInit+0x1c4>)
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	43db      	mvns	r3, r3
 8004506:	4941      	ldr	r1, [pc, #260]	; (800460c <HAL_GPIO_DeInit+0x1c4>)
 8004508:	4013      	ands	r3, r2
 800450a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800450c:	4b3f      	ldr	r3, [pc, #252]	; (800460c <HAL_GPIO_DeInit+0x1c4>)
 800450e:	68da      	ldr	r2, [r3, #12]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	43db      	mvns	r3, r3
 8004514:	493d      	ldr	r1, [pc, #244]	; (800460c <HAL_GPIO_DeInit+0x1c4>)
 8004516:	4013      	ands	r3, r2
 8004518:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800451a:	4b3c      	ldr	r3, [pc, #240]	; (800460c <HAL_GPIO_DeInit+0x1c4>)
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	43db      	mvns	r3, r3
 8004522:	493a      	ldr	r1, [pc, #232]	; (800460c <HAL_GPIO_DeInit+0x1c4>)
 8004524:	4013      	ands	r3, r2
 8004526:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f003 0303 	and.w	r3, r3, #3
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	220f      	movs	r2, #15
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004538:	4a2e      	ldr	r2, [pc, #184]	; (80045f4 <HAL_GPIO_DeInit+0x1ac>)
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	089b      	lsrs	r3, r3, #2
 800453e:	3302      	adds	r3, #2
 8004540:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	43da      	mvns	r2, r3
 8004548:	482a      	ldr	r0, [pc, #168]	; (80045f4 <HAL_GPIO_DeInit+0x1ac>)
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	089b      	lsrs	r3, r3, #2
 800454e:	400a      	ands	r2, r1
 8004550:	3302      	adds	r3, #2
 8004552:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	2103      	movs	r1, #3
 8004560:	fa01 f303 	lsl.w	r3, r1, r3
 8004564:	43db      	mvns	r3, r3
 8004566:	401a      	ands	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	08da      	lsrs	r2, r3, #3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	3208      	adds	r2, #8
 8004574:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f003 0307 	and.w	r3, r3, #7
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	220f      	movs	r2, #15
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	43db      	mvns	r3, r3
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	08d2      	lsrs	r2, r2, #3
 800458c:	4019      	ands	r1, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	3208      	adds	r2, #8
 8004592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68da      	ldr	r2, [r3, #12]
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	2103      	movs	r1, #3
 80045a0:	fa01 f303 	lsl.w	r3, r1, r3
 80045a4:	43db      	mvns	r3, r3
 80045a6:	401a      	ands	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	2101      	movs	r1, #1
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	fa01 f303 	lsl.w	r3, r1, r3
 80045b8:	43db      	mvns	r3, r3
 80045ba:	401a      	ands	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	2103      	movs	r1, #3
 80045ca:	fa01 f303 	lsl.w	r3, r1, r3
 80045ce:	43db      	mvns	r3, r3
 80045d0:	401a      	ands	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	3301      	adds	r3, #1
 80045da:	617b      	str	r3, [r7, #20]
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	2b0f      	cmp	r3, #15
 80045e0:	f67f af40 	bls.w	8004464 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80045e4:	bf00      	nop
 80045e6:	bf00      	nop
 80045e8:	371c      	adds	r7, #28
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	40013800 	.word	0x40013800
 80045f8:	40020000 	.word	0x40020000
 80045fc:	40020400 	.word	0x40020400
 8004600:	40020800 	.word	0x40020800
 8004604:	40020c00 	.word	0x40020c00
 8004608:	40021000 	.word	0x40021000
 800460c:	40013c00 	.word	0x40013c00

08004610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	460b      	mov	r3, r1
 800461a:	807b      	strh	r3, [r7, #2]
 800461c:	4613      	mov	r3, r2
 800461e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004620:	787b      	ldrb	r3, [r7, #1]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004626:	887a      	ldrh	r2, [r7, #2]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800462c:	e003      	b.n	8004636 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800462e:	887b      	ldrh	r3, [r7, #2]
 8004630:	041a      	lsls	r2, r3, #16
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	619a      	str	r2, [r3, #24]
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
	...

08004644 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8004648:	4b06      	ldr	r3, [pc, #24]	; (8004664 <HAL_PWR_PVD_IRQHandler+0x20>)
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d005      	beq.n	8004660 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8004654:	f000 f808 	bl	8004668 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8004658:	4b02      	ldr	r3, [pc, #8]	; (8004664 <HAL_PWR_PVD_IRQHandler+0x20>)
 800465a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800465e:	615a      	str	r2, [r3, #20]
  }
}
 8004660:	bf00      	nop
 8004662:	bd80      	pop	{r7, pc}
 8004664:	40013c00 	.word	0x40013c00

08004668 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 800466c:	bf00      	nop
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
	...

08004678 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e267      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d075      	beq.n	8004782 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004696:	4b88      	ldr	r3, [pc, #544]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 030c 	and.w	r3, r3, #12
 800469e:	2b04      	cmp	r3, #4
 80046a0:	d00c      	beq.n	80046bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046a2:	4b85      	ldr	r3, [pc, #532]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046aa:	2b08      	cmp	r3, #8
 80046ac:	d112      	bne.n	80046d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ae:	4b82      	ldr	r3, [pc, #520]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046ba:	d10b      	bne.n	80046d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046bc:	4b7e      	ldr	r3, [pc, #504]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d05b      	beq.n	8004780 <HAL_RCC_OscConfig+0x108>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d157      	bne.n	8004780 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e242      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046dc:	d106      	bne.n	80046ec <HAL_RCC_OscConfig+0x74>
 80046de:	4b76      	ldr	r3, [pc, #472]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a75      	ldr	r2, [pc, #468]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 80046e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e8:	6013      	str	r3, [r2, #0]
 80046ea:	e01d      	b.n	8004728 <HAL_RCC_OscConfig+0xb0>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046f4:	d10c      	bne.n	8004710 <HAL_RCC_OscConfig+0x98>
 80046f6:	4b70      	ldr	r3, [pc, #448]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a6f      	ldr	r2, [pc, #444]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 80046fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	4b6d      	ldr	r3, [pc, #436]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a6c      	ldr	r2, [pc, #432]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 8004708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800470c:	6013      	str	r3, [r2, #0]
 800470e:	e00b      	b.n	8004728 <HAL_RCC_OscConfig+0xb0>
 8004710:	4b69      	ldr	r3, [pc, #420]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a68      	ldr	r2, [pc, #416]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 8004716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800471a:	6013      	str	r3, [r2, #0]
 800471c:	4b66      	ldr	r3, [pc, #408]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a65      	ldr	r2, [pc, #404]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 8004722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004726:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d013      	beq.n	8004758 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004730:	f7fd ff9c 	bl	800266c <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004738:	f7fd ff98 	bl	800266c <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b64      	cmp	r3, #100	; 0x64
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e207      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800474a:	4b5b      	ldr	r3, [pc, #364]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0f0      	beq.n	8004738 <HAL_RCC_OscConfig+0xc0>
 8004756:	e014      	b.n	8004782 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004758:	f7fd ff88 	bl	800266c <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004760:	f7fd ff84 	bl	800266c <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b64      	cmp	r3, #100	; 0x64
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e1f3      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004772:	4b51      	ldr	r3, [pc, #324]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1f0      	bne.n	8004760 <HAL_RCC_OscConfig+0xe8>
 800477e:	e000      	b.n	8004782 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d063      	beq.n	8004856 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800478e:	4b4a      	ldr	r3, [pc, #296]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 030c 	and.w	r3, r3, #12
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00b      	beq.n	80047b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800479a:	4b47      	ldr	r3, [pc, #284]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047a2:	2b08      	cmp	r3, #8
 80047a4:	d11c      	bne.n	80047e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047a6:	4b44      	ldr	r3, [pc, #272]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d116      	bne.n	80047e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047b2:	4b41      	ldr	r3, [pc, #260]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d005      	beq.n	80047ca <HAL_RCC_OscConfig+0x152>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d001      	beq.n	80047ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e1c7      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ca:	4b3b      	ldr	r3, [pc, #236]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	4937      	ldr	r1, [pc, #220]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047de:	e03a      	b.n	8004856 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d020      	beq.n	800482a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047e8:	4b34      	ldr	r3, [pc, #208]	; (80048bc <HAL_RCC_OscConfig+0x244>)
 80047ea:	2201      	movs	r2, #1
 80047ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ee:	f7fd ff3d 	bl	800266c <HAL_GetTick>
 80047f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047f4:	e008      	b.n	8004808 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047f6:	f7fd ff39 	bl	800266c <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e1a8      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004808:	4b2b      	ldr	r3, [pc, #172]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0f0      	beq.n	80047f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004814:	4b28      	ldr	r3, [pc, #160]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	00db      	lsls	r3, r3, #3
 8004822:	4925      	ldr	r1, [pc, #148]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 8004824:	4313      	orrs	r3, r2
 8004826:	600b      	str	r3, [r1, #0]
 8004828:	e015      	b.n	8004856 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800482a:	4b24      	ldr	r3, [pc, #144]	; (80048bc <HAL_RCC_OscConfig+0x244>)
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004830:	f7fd ff1c 	bl	800266c <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004838:	f7fd ff18 	bl	800266c <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e187      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800484a:	4b1b      	ldr	r3, [pc, #108]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1f0      	bne.n	8004838 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	2b00      	cmp	r3, #0
 8004860:	d036      	beq.n	80048d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d016      	beq.n	8004898 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800486a:	4b15      	ldr	r3, [pc, #84]	; (80048c0 <HAL_RCC_OscConfig+0x248>)
 800486c:	2201      	movs	r2, #1
 800486e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004870:	f7fd fefc 	bl	800266c <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004878:	f7fd fef8 	bl	800266c <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e167      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800488a:	4b0b      	ldr	r3, [pc, #44]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 800488c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0f0      	beq.n	8004878 <HAL_RCC_OscConfig+0x200>
 8004896:	e01b      	b.n	80048d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004898:	4b09      	ldr	r3, [pc, #36]	; (80048c0 <HAL_RCC_OscConfig+0x248>)
 800489a:	2200      	movs	r2, #0
 800489c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800489e:	f7fd fee5 	bl	800266c <HAL_GetTick>
 80048a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048a4:	e00e      	b.n	80048c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048a6:	f7fd fee1 	bl	800266c <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d907      	bls.n	80048c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e150      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
 80048b8:	40023800 	.word	0x40023800
 80048bc:	42470000 	.word	0x42470000
 80048c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048c4:	4b88      	ldr	r3, [pc, #544]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 80048c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1ea      	bne.n	80048a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 8097 	beq.w	8004a0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048de:	2300      	movs	r3, #0
 80048e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048e2:	4b81      	ldr	r3, [pc, #516]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10f      	bne.n	800490e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ee:	2300      	movs	r3, #0
 80048f0:	60bb      	str	r3, [r7, #8]
 80048f2:	4b7d      	ldr	r3, [pc, #500]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	4a7c      	ldr	r2, [pc, #496]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 80048f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048fc:	6413      	str	r3, [r2, #64]	; 0x40
 80048fe:	4b7a      	ldr	r3, [pc, #488]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004906:	60bb      	str	r3, [r7, #8]
 8004908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800490a:	2301      	movs	r3, #1
 800490c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800490e:	4b77      	ldr	r3, [pc, #476]	; (8004aec <HAL_RCC_OscConfig+0x474>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004916:	2b00      	cmp	r3, #0
 8004918:	d118      	bne.n	800494c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800491a:	4b74      	ldr	r3, [pc, #464]	; (8004aec <HAL_RCC_OscConfig+0x474>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a73      	ldr	r2, [pc, #460]	; (8004aec <HAL_RCC_OscConfig+0x474>)
 8004920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004924:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004926:	f7fd fea1 	bl	800266c <HAL_GetTick>
 800492a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800492c:	e008      	b.n	8004940 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800492e:	f7fd fe9d 	bl	800266c <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e10c      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004940:	4b6a      	ldr	r3, [pc, #424]	; (8004aec <HAL_RCC_OscConfig+0x474>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0f0      	beq.n	800492e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d106      	bne.n	8004962 <HAL_RCC_OscConfig+0x2ea>
 8004954:	4b64      	ldr	r3, [pc, #400]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004958:	4a63      	ldr	r2, [pc, #396]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 800495a:	f043 0301 	orr.w	r3, r3, #1
 800495e:	6713      	str	r3, [r2, #112]	; 0x70
 8004960:	e01c      	b.n	800499c <HAL_RCC_OscConfig+0x324>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	2b05      	cmp	r3, #5
 8004968:	d10c      	bne.n	8004984 <HAL_RCC_OscConfig+0x30c>
 800496a:	4b5f      	ldr	r3, [pc, #380]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 800496c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496e:	4a5e      	ldr	r2, [pc, #376]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004970:	f043 0304 	orr.w	r3, r3, #4
 8004974:	6713      	str	r3, [r2, #112]	; 0x70
 8004976:	4b5c      	ldr	r3, [pc, #368]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497a:	4a5b      	ldr	r2, [pc, #364]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 800497c:	f043 0301 	orr.w	r3, r3, #1
 8004980:	6713      	str	r3, [r2, #112]	; 0x70
 8004982:	e00b      	b.n	800499c <HAL_RCC_OscConfig+0x324>
 8004984:	4b58      	ldr	r3, [pc, #352]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004988:	4a57      	ldr	r2, [pc, #348]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 800498a:	f023 0301 	bic.w	r3, r3, #1
 800498e:	6713      	str	r3, [r2, #112]	; 0x70
 8004990:	4b55      	ldr	r3, [pc, #340]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004994:	4a54      	ldr	r2, [pc, #336]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004996:	f023 0304 	bic.w	r3, r3, #4
 800499a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d015      	beq.n	80049d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a4:	f7fd fe62 	bl	800266c <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049aa:	e00a      	b.n	80049c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049ac:	f7fd fe5e 	bl	800266c <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e0cb      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049c2:	4b49      	ldr	r3, [pc, #292]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 80049c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0ee      	beq.n	80049ac <HAL_RCC_OscConfig+0x334>
 80049ce:	e014      	b.n	80049fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049d0:	f7fd fe4c 	bl	800266c <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049d6:	e00a      	b.n	80049ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049d8:	f7fd fe48 	bl	800266c <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e0b5      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ee:	4b3e      	ldr	r3, [pc, #248]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 80049f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1ee      	bne.n	80049d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049fa:	7dfb      	ldrb	r3, [r7, #23]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d105      	bne.n	8004a0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a00:	4b39      	ldr	r3, [pc, #228]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a04:	4a38      	ldr	r2, [pc, #224]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004a06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 80a1 	beq.w	8004b58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a16:	4b34      	ldr	r3, [pc, #208]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 030c 	and.w	r3, r3, #12
 8004a1e:	2b08      	cmp	r3, #8
 8004a20:	d05c      	beq.n	8004adc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d141      	bne.n	8004aae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a2a:	4b31      	ldr	r3, [pc, #196]	; (8004af0 <HAL_RCC_OscConfig+0x478>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a30:	f7fd fe1c 	bl	800266c <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a38:	f7fd fe18 	bl	800266c <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e087      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a4a:	4b27      	ldr	r3, [pc, #156]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1f0      	bne.n	8004a38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	69da      	ldr	r2, [r3, #28]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	019b      	lsls	r3, r3, #6
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6c:	085b      	lsrs	r3, r3, #1
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	041b      	lsls	r3, r3, #16
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a78:	061b      	lsls	r3, r3, #24
 8004a7a:	491b      	ldr	r1, [pc, #108]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a80:	4b1b      	ldr	r3, [pc, #108]	; (8004af0 <HAL_RCC_OscConfig+0x478>)
 8004a82:	2201      	movs	r2, #1
 8004a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a86:	f7fd fdf1 	bl	800266c <HAL_GetTick>
 8004a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a8c:	e008      	b.n	8004aa0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a8e:	f7fd fded 	bl	800266c <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e05c      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aa0:	4b11      	ldr	r3, [pc, #68]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0f0      	beq.n	8004a8e <HAL_RCC_OscConfig+0x416>
 8004aac:	e054      	b.n	8004b58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aae:	4b10      	ldr	r3, [pc, #64]	; (8004af0 <HAL_RCC_OscConfig+0x478>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab4:	f7fd fdda 	bl	800266c <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004abc:	f7fd fdd6 	bl	800266c <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e045      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ace:	4b06      	ldr	r3, [pc, #24]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f0      	bne.n	8004abc <HAL_RCC_OscConfig+0x444>
 8004ada:	e03d      	b.n	8004b58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d107      	bne.n	8004af4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e038      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	40007000 	.word	0x40007000
 8004af0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004af4:	4b1b      	ldr	r3, [pc, #108]	; (8004b64 <HAL_RCC_OscConfig+0x4ec>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d028      	beq.n	8004b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d121      	bne.n	8004b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d11a      	bne.n	8004b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b24:	4013      	ands	r3, r2
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d111      	bne.n	8004b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3a:	085b      	lsrs	r3, r3, #1
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d107      	bne.n	8004b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d001      	beq.n	8004b58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e000      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3718      	adds	r7, #24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	40023800 	.word	0x40023800

08004b68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d101      	bne.n	8004b7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e0cc      	b.n	8004d16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b7c:	4b68      	ldr	r3, [pc, #416]	; (8004d20 <HAL_RCC_ClockConfig+0x1b8>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0307 	and.w	r3, r3, #7
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d90c      	bls.n	8004ba4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b8a:	4b65      	ldr	r3, [pc, #404]	; (8004d20 <HAL_RCC_ClockConfig+0x1b8>)
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b92:	4b63      	ldr	r3, [pc, #396]	; (8004d20 <HAL_RCC_ClockConfig+0x1b8>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0307 	and.w	r3, r3, #7
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d001      	beq.n	8004ba4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e0b8      	b.n	8004d16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d020      	beq.n	8004bf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0304 	and.w	r3, r3, #4
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d005      	beq.n	8004bc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bbc:	4b59      	ldr	r3, [pc, #356]	; (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	4a58      	ldr	r2, [pc, #352]	; (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0308 	and.w	r3, r3, #8
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d005      	beq.n	8004be0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bd4:	4b53      	ldr	r3, [pc, #332]	; (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	4a52      	ldr	r2, [pc, #328]	; (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004bda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004be0:	4b50      	ldr	r3, [pc, #320]	; (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	494d      	ldr	r1, [pc, #308]	; (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d044      	beq.n	8004c88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d107      	bne.n	8004c16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c06:	4b47      	ldr	r3, [pc, #284]	; (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d119      	bne.n	8004c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e07f      	b.n	8004d16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d003      	beq.n	8004c26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c22:	2b03      	cmp	r3, #3
 8004c24:	d107      	bne.n	8004c36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c26:	4b3f      	ldr	r3, [pc, #252]	; (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d109      	bne.n	8004c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e06f      	b.n	8004d16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c36:	4b3b      	ldr	r3, [pc, #236]	; (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e067      	b.n	8004d16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c46:	4b37      	ldr	r3, [pc, #220]	; (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f023 0203 	bic.w	r2, r3, #3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	4934      	ldr	r1, [pc, #208]	; (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c58:	f7fd fd08 	bl	800266c <HAL_GetTick>
 8004c5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c5e:	e00a      	b.n	8004c76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c60:	f7fd fd04 	bl	800266c <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e04f      	b.n	8004d16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c76:	4b2b      	ldr	r3, [pc, #172]	; (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 020c 	and.w	r2, r3, #12
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d1eb      	bne.n	8004c60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c88:	4b25      	ldr	r3, [pc, #148]	; (8004d20 <HAL_RCC_ClockConfig+0x1b8>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d20c      	bcs.n	8004cb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c96:	4b22      	ldr	r3, [pc, #136]	; (8004d20 <HAL_RCC_ClockConfig+0x1b8>)
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c9e:	4b20      	ldr	r3, [pc, #128]	; (8004d20 <HAL_RCC_ClockConfig+0x1b8>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0307 	and.w	r3, r3, #7
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d001      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e032      	b.n	8004d16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d008      	beq.n	8004cce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cbc:	4b19      	ldr	r3, [pc, #100]	; (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	4916      	ldr	r1, [pc, #88]	; (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d009      	beq.n	8004cee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cda:	4b12      	ldr	r3, [pc, #72]	; (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	490e      	ldr	r1, [pc, #56]	; (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cee:	f000 f821 	bl	8004d34 <HAL_RCC_GetSysClockFreq>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	091b      	lsrs	r3, r3, #4
 8004cfa:	f003 030f 	and.w	r3, r3, #15
 8004cfe:	490a      	ldr	r1, [pc, #40]	; (8004d28 <HAL_RCC_ClockConfig+0x1c0>)
 8004d00:	5ccb      	ldrb	r3, [r1, r3]
 8004d02:	fa22 f303 	lsr.w	r3, r2, r3
 8004d06:	4a09      	ldr	r2, [pc, #36]	; (8004d2c <HAL_RCC_ClockConfig+0x1c4>)
 8004d08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d0a:	4b09      	ldr	r3, [pc, #36]	; (8004d30 <HAL_RCC_ClockConfig+0x1c8>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7fd f95e 	bl	8001fd0 <HAL_InitTick>

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	40023c00 	.word	0x40023c00
 8004d24:	40023800 	.word	0x40023800
 8004d28:	0800c940 	.word	0x0800c940
 8004d2c:	20000004 	.word	0x20000004
 8004d30:	20000008 	.word	0x20000008

08004d34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d38:	b094      	sub	sp, #80	; 0x50
 8004d3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	647b      	str	r3, [r7, #68]	; 0x44
 8004d40:	2300      	movs	r3, #0
 8004d42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d44:	2300      	movs	r3, #0
 8004d46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d4c:	4b79      	ldr	r3, [pc, #484]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f003 030c 	and.w	r3, r3, #12
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d00d      	beq.n	8004d74 <HAL_RCC_GetSysClockFreq+0x40>
 8004d58:	2b08      	cmp	r3, #8
 8004d5a:	f200 80e1 	bhi.w	8004f20 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d002      	beq.n	8004d68 <HAL_RCC_GetSysClockFreq+0x34>
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d003      	beq.n	8004d6e <HAL_RCC_GetSysClockFreq+0x3a>
 8004d66:	e0db      	b.n	8004f20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d68:	4b73      	ldr	r3, [pc, #460]	; (8004f38 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d6a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004d6c:	e0db      	b.n	8004f26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d6e:	4b73      	ldr	r3, [pc, #460]	; (8004f3c <HAL_RCC_GetSysClockFreq+0x208>)
 8004d70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d72:	e0d8      	b.n	8004f26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d74:	4b6f      	ldr	r3, [pc, #444]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d7c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d7e:	4b6d      	ldr	r3, [pc, #436]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d063      	beq.n	8004e52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d8a:	4b6a      	ldr	r3, [pc, #424]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	099b      	lsrs	r3, r3, #6
 8004d90:	2200      	movs	r2, #0
 8004d92:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d9c:	633b      	str	r3, [r7, #48]	; 0x30
 8004d9e:	2300      	movs	r3, #0
 8004da0:	637b      	str	r3, [r7, #52]	; 0x34
 8004da2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004da6:	4622      	mov	r2, r4
 8004da8:	462b      	mov	r3, r5
 8004daa:	f04f 0000 	mov.w	r0, #0
 8004dae:	f04f 0100 	mov.w	r1, #0
 8004db2:	0159      	lsls	r1, r3, #5
 8004db4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004db8:	0150      	lsls	r0, r2, #5
 8004dba:	4602      	mov	r2, r0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	4621      	mov	r1, r4
 8004dc0:	1a51      	subs	r1, r2, r1
 8004dc2:	6139      	str	r1, [r7, #16]
 8004dc4:	4629      	mov	r1, r5
 8004dc6:	eb63 0301 	sbc.w	r3, r3, r1
 8004dca:	617b      	str	r3, [r7, #20]
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004dd8:	4659      	mov	r1, fp
 8004dda:	018b      	lsls	r3, r1, #6
 8004ddc:	4651      	mov	r1, sl
 8004dde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004de2:	4651      	mov	r1, sl
 8004de4:	018a      	lsls	r2, r1, #6
 8004de6:	4651      	mov	r1, sl
 8004de8:	ebb2 0801 	subs.w	r8, r2, r1
 8004dec:	4659      	mov	r1, fp
 8004dee:	eb63 0901 	sbc.w	r9, r3, r1
 8004df2:	f04f 0200 	mov.w	r2, #0
 8004df6:	f04f 0300 	mov.w	r3, #0
 8004dfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e06:	4690      	mov	r8, r2
 8004e08:	4699      	mov	r9, r3
 8004e0a:	4623      	mov	r3, r4
 8004e0c:	eb18 0303 	adds.w	r3, r8, r3
 8004e10:	60bb      	str	r3, [r7, #8]
 8004e12:	462b      	mov	r3, r5
 8004e14:	eb49 0303 	adc.w	r3, r9, r3
 8004e18:	60fb      	str	r3, [r7, #12]
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	f04f 0300 	mov.w	r3, #0
 8004e22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e26:	4629      	mov	r1, r5
 8004e28:	024b      	lsls	r3, r1, #9
 8004e2a:	4621      	mov	r1, r4
 8004e2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e30:	4621      	mov	r1, r4
 8004e32:	024a      	lsls	r2, r1, #9
 8004e34:	4610      	mov	r0, r2
 8004e36:	4619      	mov	r1, r3
 8004e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e44:	f7fb f9cc 	bl	80001e0 <__aeabi_uldivmod>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e50:	e058      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e52:	4b38      	ldr	r3, [pc, #224]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	099b      	lsrs	r3, r3, #6
 8004e58:	2200      	movs	r2, #0
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	4611      	mov	r1, r2
 8004e5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e62:	623b      	str	r3, [r7, #32]
 8004e64:	2300      	movs	r3, #0
 8004e66:	627b      	str	r3, [r7, #36]	; 0x24
 8004e68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e6c:	4642      	mov	r2, r8
 8004e6e:	464b      	mov	r3, r9
 8004e70:	f04f 0000 	mov.w	r0, #0
 8004e74:	f04f 0100 	mov.w	r1, #0
 8004e78:	0159      	lsls	r1, r3, #5
 8004e7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e7e:	0150      	lsls	r0, r2, #5
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4641      	mov	r1, r8
 8004e86:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e8a:	4649      	mov	r1, r9
 8004e8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e90:	f04f 0200 	mov.w	r2, #0
 8004e94:	f04f 0300 	mov.w	r3, #0
 8004e98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ea0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ea4:	ebb2 040a 	subs.w	r4, r2, sl
 8004ea8:	eb63 050b 	sbc.w	r5, r3, fp
 8004eac:	f04f 0200 	mov.w	r2, #0
 8004eb0:	f04f 0300 	mov.w	r3, #0
 8004eb4:	00eb      	lsls	r3, r5, #3
 8004eb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004eba:	00e2      	lsls	r2, r4, #3
 8004ebc:	4614      	mov	r4, r2
 8004ebe:	461d      	mov	r5, r3
 8004ec0:	4643      	mov	r3, r8
 8004ec2:	18e3      	adds	r3, r4, r3
 8004ec4:	603b      	str	r3, [r7, #0]
 8004ec6:	464b      	mov	r3, r9
 8004ec8:	eb45 0303 	adc.w	r3, r5, r3
 8004ecc:	607b      	str	r3, [r7, #4]
 8004ece:	f04f 0200 	mov.w	r2, #0
 8004ed2:	f04f 0300 	mov.w	r3, #0
 8004ed6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004eda:	4629      	mov	r1, r5
 8004edc:	028b      	lsls	r3, r1, #10
 8004ede:	4621      	mov	r1, r4
 8004ee0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ee4:	4621      	mov	r1, r4
 8004ee6:	028a      	lsls	r2, r1, #10
 8004ee8:	4610      	mov	r0, r2
 8004eea:	4619      	mov	r1, r3
 8004eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eee:	2200      	movs	r2, #0
 8004ef0:	61bb      	str	r3, [r7, #24]
 8004ef2:	61fa      	str	r2, [r7, #28]
 8004ef4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ef8:	f7fb f972 	bl	80001e0 <__aeabi_uldivmod>
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	4613      	mov	r3, r2
 8004f02:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f04:	4b0b      	ldr	r3, [pc, #44]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	0c1b      	lsrs	r3, r3, #16
 8004f0a:	f003 0303 	and.w	r3, r3, #3
 8004f0e:	3301      	adds	r3, #1
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004f14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f1e:	e002      	b.n	8004f26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f20:	4b05      	ldr	r3, [pc, #20]	; (8004f38 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3750      	adds	r7, #80	; 0x50
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f32:	bf00      	nop
 8004f34:	40023800 	.word	0x40023800
 8004f38:	00f42400 	.word	0x00f42400
 8004f3c:	007a1200 	.word	0x007a1200

08004f40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f44:	4b03      	ldr	r3, [pc, #12]	; (8004f54 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f46:	681b      	ldr	r3, [r3, #0]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	20000004 	.word	0x20000004

08004f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f5c:	f7ff fff0 	bl	8004f40 <HAL_RCC_GetHCLKFreq>
 8004f60:	4602      	mov	r2, r0
 8004f62:	4b05      	ldr	r3, [pc, #20]	; (8004f78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	0a9b      	lsrs	r3, r3, #10
 8004f68:	f003 0307 	and.w	r3, r3, #7
 8004f6c:	4903      	ldr	r1, [pc, #12]	; (8004f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f6e:	5ccb      	ldrb	r3, [r1, r3]
 8004f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	40023800 	.word	0x40023800
 8004f7c:	0800c950 	.word	0x0800c950

08004f80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f84:	f7ff ffdc 	bl	8004f40 <HAL_RCC_GetHCLKFreq>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	4b05      	ldr	r3, [pc, #20]	; (8004fa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	0b5b      	lsrs	r3, r3, #13
 8004f90:	f003 0307 	and.w	r3, r3, #7
 8004f94:	4903      	ldr	r1, [pc, #12]	; (8004fa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f96:	5ccb      	ldrb	r3, [r1, r3]
 8004f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	0800c950 	.word	0x0800c950

08004fa8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	220f      	movs	r2, #15
 8004fb6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004fb8:	4b12      	ldr	r3, [pc, #72]	; (8005004 <HAL_RCC_GetClockConfig+0x5c>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f003 0203 	and.w	r2, r3, #3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004fc4:	4b0f      	ldr	r3, [pc, #60]	; (8005004 <HAL_RCC_GetClockConfig+0x5c>)
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004fd0:	4b0c      	ldr	r3, [pc, #48]	; (8005004 <HAL_RCC_GetClockConfig+0x5c>)
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004fdc:	4b09      	ldr	r3, [pc, #36]	; (8005004 <HAL_RCC_GetClockConfig+0x5c>)
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	08db      	lsrs	r3, r3, #3
 8004fe2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004fea:	4b07      	ldr	r3, [pc, #28]	; (8005008 <HAL_RCC_GetClockConfig+0x60>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0207 	and.w	r2, r3, #7
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	601a      	str	r2, [r3, #0]
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	40023800 	.word	0x40023800
 8005008:	40023c00 	.word	0x40023c00

0800500c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e09b      	b.n	8005156 <HAL_SPI_Init+0x14a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005022:	2b00      	cmp	r3, #0
 8005024:	d108      	bne.n	8005038 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800502e:	d009      	beq.n	8005044 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	61da      	str	r2, [r3, #28]
 8005036:	e005      	b.n	8005044 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d126      	bne.n	80050a4 <HAL_SPI_Init+0x98>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a3f      	ldr	r2, [pc, #252]	; (8005160 <HAL_SPI_Init+0x154>)
 8005062:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a3f      	ldr	r2, [pc, #252]	; (8005164 <HAL_SPI_Init+0x158>)
 8005068:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a3e      	ldr	r2, [pc, #248]	; (8005168 <HAL_SPI_Init+0x15c>)
 800506e:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a3e      	ldr	r2, [pc, #248]	; (800516c <HAL_SPI_Init+0x160>)
 8005074:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a3d      	ldr	r2, [pc, #244]	; (8005170 <HAL_SPI_Init+0x164>)
 800507a:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a3d      	ldr	r2, [pc, #244]	; (8005174 <HAL_SPI_Init+0x168>)
 8005080:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a3c      	ldr	r2, [pc, #240]	; (8005178 <HAL_SPI_Init+0x16c>)
 8005086:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a3c      	ldr	r2, [pc, #240]	; (800517c <HAL_SPI_Init+0x170>)
 800508c:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005092:	2b00      	cmp	r3, #0
 8005094:	d102      	bne.n	800509c <HAL_SPI_Init+0x90>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a39      	ldr	r2, [pc, #228]	; (8005180 <HAL_SPI_Init+0x174>)
 800509a:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2202      	movs	r2, #2
 80050a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80050cc:	431a      	orrs	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050d6:	431a      	orrs	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	431a      	orrs	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	431a      	orrs	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050f4:	431a      	orrs	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050fe:	431a      	orrs	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005108:	ea42 0103 	orr.w	r1, r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005110:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	0c1b      	lsrs	r3, r3, #16
 8005122:	f003 0104 	and.w	r1, r3, #4
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512a:	f003 0210 	and.w	r2, r3, #16
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	69da      	ldr	r2, [r3, #28]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005144:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	080053dd 	.word	0x080053dd
 8005164:	080053f1 	.word	0x080053f1
 8005168:	08005405 	.word	0x08005405
 800516c:	08005419 	.word	0x08005419
 8005170:	0800542d 	.word	0x0800542d
 8005174:	08005441 	.word	0x08005441
 8005178:	080076d1 	.word	0x080076d1
 800517c:	08005455 	.word	0x08005455
 8005180:	08001e51 	.word	0x08001e51

08005184 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e022      	b.n	80051dc <HAL_SPI_DeInit+0x58>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2202      	movs	r2, #2
 800519a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051ac:	601a      	str	r2, [r3, #0]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  if (hspi->MspDeInitCallback == NULL)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d102      	bne.n	80051bc <HAL_SPI_DeInit+0x38>
  {
    hspi->MspDeInitCallback = HAL_SPI_MspDeInit; /* Legacy weak MspDeInit  */
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a0a      	ldr	r2, [pc, #40]	; (80051e4 <HAL_SPI_DeInit+0x60>)
 80051ba:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	4798      	blx	r3
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	08001f21 	.word	0x08001f21

080051e8 <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b088      	sub	sp, #32
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 80051f0:	2300      	movs	r3, #0
 80051f2:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
 80051f4:	2301      	movs	r3, #1
 80051f6:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80051f8:	4b72      	ldr	r3, [pc, #456]	; (80053c4 <HAL_SPI_Abort_IT+0x1dc>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a72      	ldr	r2, [pc, #456]	; (80053c8 <HAL_SPI_Abort_IT+0x1e0>)
 80051fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005202:	0a5b      	lsrs	r3, r3, #9
 8005204:	2264      	movs	r2, #100	; 0x64
 8005206:	fb02 f303 	mul.w	r3, r2, r3
 800520a:	613b      	str	r3, [r7, #16]
  count = resetcount;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f022 0220 	bic.w	r2, r2, #32
 800521e:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800522a:	2b80      	cmp	r3, #128	; 0x80
 800522c:	d117      	bne.n	800525e <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a66      	ldr	r2, [pc, #408]	; (80053cc <HAL_SPI_Abort_IT+0x1e4>)
 8005232:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d106      	bne.n	8005248 <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800523e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8005246:	e008      	b.n	800525a <HAL_SPI_Abort_IT+0x72>
      }
      count--;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	3b01      	subs	r3, #1
 800524c:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b07      	cmp	r3, #7
 8005258:	d1ec      	bne.n	8005234 <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005268:	2b40      	cmp	r3, #64	; 0x40
 800526a:	d117      	bne.n	800529c <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a58      	ldr	r2, [pc, #352]	; (80053d0 <HAL_SPI_Abort_IT+0x1e8>)
 8005270:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d106      	bne.n	8005286 <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800527c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8005284:	e008      	b.n	8005298 <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	3b01      	subs	r3, #1
 800528a:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b07      	cmp	r3, #7
 8005296:	d1ec      	bne.n	8005272 <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00f      	beq.n	80052c4 <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d104      	bne.n	80052bc <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052b6:	4a47      	ldr	r2, [pc, #284]	; (80053d4 <HAL_SPI_Abort_IT+0x1ec>)
 80052b8:	651a      	str	r2, [r3, #80]	; 0x50
 80052ba:	e003      	b.n	80052c4 <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052c0:	2200      	movs	r2, #0
 80052c2:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00f      	beq.n	80052ec <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d104      	bne.n	80052e4 <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052de:	4a3e      	ldr	r2, [pc, #248]	; (80053d8 <HAL_SPI_Abort_IT+0x1f0>)
 80052e0:	651a      	str	r2, [r3, #80]	; 0x50
 80052e2:	e003      	b.n	80052ec <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052e8:	2200      	movs	r2, #0
 80052ea:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d115      	bne.n	8005326 <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d011      	beq.n	8005326 <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005306:	4618      	mov	r0, r3
 8005308:	f7fe fae6 	bl	80038d8 <HAL_DMA_Abort_IT>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d007      	beq.n	8005322 <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005316:	2200      	movs	r2, #0
 8005318:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2240      	movs	r2, #64	; 0x40
 800531e:	655a      	str	r2, [r3, #84]	; 0x54
 8005320:	e001      	b.n	8005326 <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
 8005322:	2300      	movs	r3, #0
 8005324:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b01      	cmp	r3, #1
 8005332:	d115      	bne.n	8005360 <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005338:	2b00      	cmp	r3, #0
 800533a:	d011      	beq.n	8005360 <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005340:	4618      	mov	r0, r3
 8005342:	f7fe fac9 	bl	80038d8 <HAL_DMA_Abort_IT>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d007      	beq.n	800535c <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005350:	2200      	movs	r2, #0
 8005352:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2240      	movs	r2, #64	; 0x40
 8005358:	655a      	str	r2, [r3, #84]	; 0x54
 800535a:	e001      	b.n	8005360 <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d129      	bne.n	80053ba <HAL_SPI_Abort_IT+0x1d2>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxXferCount = 0U;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	86da      	strh	r2, [r3, #54]	; 0x36

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005376:	2b40      	cmp	r3, #64	; 0x40
 8005378:	d102      	bne.n	8005380 <HAL_SPI_Abort_IT+0x198>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	77fb      	strb	r3, [r7, #31]
 800537e:	e002      	b.n	8005386 <HAL_SPI_Abort_IT+0x19e>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005386:	2300      	movs	r3, #0
 8005388:	60fb      	str	r3, [r7, #12]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	60fb      	str	r3, [r7, #12]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	60fb      	str	r3, [r7, #12]
 800539a:	68fb      	ldr	r3, [r7, #12]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800539c:	2300      	movs	r3, #0
 800539e:	60bb      	str	r3, [r7, #8]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	60bb      	str	r3, [r7, #8]
 80053a8:	68bb      	ldr	r3, [r7, #8]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	4798      	blx	r3
#else
    HAL_SPI_AbortCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
 80053ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3720      	adds	r7, #32
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	20000004 	.word	0x20000004
 80053c8:	057619f1 	.word	0x057619f1
 80053cc:	08005859 	.word	0x08005859
 80053d0:	080057c9 	.word	0x080057c9
 80053d4:	0800549d 	.word	0x0800549d
 80053d8:	08005571 	.word	0x08005571

080053dc <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005476:	b2db      	uxtb	r3, r3
}
 8005478:	4618      	mov	r0, r3
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005490:	4618      	mov	r0, r3
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a8:	617b      	str	r3, [r7, #20]
  __IO uint32_t count;

  hspi->hdmatx->XferAbortCallback = NULL;
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ae:	2200      	movs	r2, #0
 80054b0:	651a      	str	r2, [r3, #80]	; 0x50
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80054b2:	4b2d      	ldr	r3, [pc, #180]	; (8005568 <SPI_DMATxAbortCallback+0xcc>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a2d      	ldr	r2, [pc, #180]	; (800556c <SPI_DMATxAbortCallback+0xd0>)
 80054b8:	fba2 2303 	umull	r2, r3, r2, r3
 80054bc:	0a5b      	lsrs	r3, r3, #9
 80054be:	2264      	movs	r2, #100	; 0x64
 80054c0:	fb02 f303 	mul.w	r3, r2, r3
 80054c4:	613b      	str	r3, [r7, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f022 0202 	bic.w	r2, r2, #2
 80054d4:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d106      	bne.n	80054ea <SPI_DMATxAbortCallback+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80054e8:	e009      	b.n	80054fe <SPI_DMATxAbortCallback+0x62>
    }
    count--;
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	3b01      	subs	r3, #1
 80054ee:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d0eb      	beq.n	80054d6 <SPI_DMATxAbortCallback+0x3a>

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005502:	2b00      	cmp	r3, #0
 8005504:	d004      	beq.n	8005510 <SPI_DMATxAbortCallback+0x74>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800550a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800550c:	2b00      	cmp	r3, #0
 800550e:	d127      	bne.n	8005560 <SPI_DMATxAbortCallback+0xc4>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	2200      	movs	r2, #0
 8005514:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2200      	movs	r2, #0
 800551a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005520:	2b40      	cmp	r3, #64	; 0x40
 8005522:	d002      	beq.n	800552a <SPI_DMATxAbortCallback+0x8e>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	2200      	movs	r2, #0
 8005528:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800552a:	2300      	movs	r3, #0
 800552c:	60fb      	str	r3, [r7, #12]
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	60fb      	str	r3, [r7, #12]
 800553e:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005540:	2300      	movs	r3, #0
 8005542:	60bb      	str	r3, [r7, #8]
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	60bb      	str	r3, [r7, #8]
 800554c:	68bb      	ldr	r3, [r7, #8]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800555a:	6978      	ldr	r0, [r7, #20]
 800555c:	4798      	blx	r3
 800555e:	e000      	b.n	8005562 <SPI_DMATxAbortCallback+0xc6>
      return;
 8005560:	bf00      	nop
#else
  HAL_SPI_AbortCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005562:	3718      	adds	r7, #24
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	20000004 	.word	0x20000004
 800556c:	057619f1 	.word	0x057619f1

08005570 <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557c:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800558c:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005592:	2200      	movs	r2, #0
 8005594:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 0201 	bic.w	r2, r2, #1
 80055a4:	605a      	str	r2, [r3, #4]

  /* Check Busy flag */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80055a6:	f7fd f861 	bl	800266c <HAL_GetTick>
 80055aa:	4603      	mov	r3, r0
 80055ac:	461a      	mov	r2, r3
 80055ae:	2164      	movs	r1, #100	; 0x64
 80055b0:	6978      	ldr	r0, [r7, #20]
 80055b2:	f000 f8c7 	bl	8005744 <SPI_EndRxTxTransaction>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d005      	beq.n	80055c8 <SPI_DMARxAbortCallback+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d004      	beq.n	80055da <SPI_DMARxAbortCallback+0x6a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d127      	bne.n	800562a <SPI_DMARxAbortCallback+0xba>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2200      	movs	r2, #0
 80055de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	2200      	movs	r2, #0
 80055e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ea:	2b40      	cmp	r3, #64	; 0x40
 80055ec:	d002      	beq.n	80055f4 <SPI_DMARxAbortCallback+0x84>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	2200      	movs	r2, #0
 80055f2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055f4:	2300      	movs	r3, #0
 80055f6:	613b      	str	r3, [r7, #16]
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	613b      	str	r3, [r7, #16]
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	613b      	str	r3, [r7, #16]
 8005608:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800560a:	2300      	movs	r3, #0
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	60fb      	str	r3, [r7, #12]
 8005616:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005624:	6978      	ldr	r0, [r7, #20]
 8005626:	4798      	blx	r3
 8005628:	e000      	b.n	800562c <SPI_DMARxAbortCallback+0xbc>
      return;
 800562a:	bf00      	nop
#else
  HAL_SPI_AbortCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800562c:	3718      	adds	r7, #24
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
	...

08005634 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b088      	sub	sp, #32
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	603b      	str	r3, [r7, #0]
 8005640:	4613      	mov	r3, r2
 8005642:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005644:	f7fd f812 	bl	800266c <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564c:	1a9b      	subs	r3, r3, r2
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	4413      	add	r3, r2
 8005652:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005654:	f7fd f80a 	bl	800266c <HAL_GetTick>
 8005658:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800565a:	4b39      	ldr	r3, [pc, #228]	; (8005740 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	015b      	lsls	r3, r3, #5
 8005660:	0d1b      	lsrs	r3, r3, #20
 8005662:	69fa      	ldr	r2, [r7, #28]
 8005664:	fb02 f303 	mul.w	r3, r2, r3
 8005668:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800566a:	e054      	b.n	8005716 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005672:	d050      	beq.n	8005716 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005674:	f7fc fffa 	bl	800266c <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	69fa      	ldr	r2, [r7, #28]
 8005680:	429a      	cmp	r2, r3
 8005682:	d902      	bls.n	800568a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d13d      	bne.n	8005706 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005698:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056a2:	d111      	bne.n	80056c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056ac:	d004      	beq.n	80056b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056b6:	d107      	bne.n	80056c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056d0:	d10f      	bne.n	80056f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e017      	b.n	8005736 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d101      	bne.n	8005710 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800570c:	2300      	movs	r3, #0
 800570e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	3b01      	subs	r3, #1
 8005714:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	689a      	ldr	r2, [r3, #8]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	4013      	ands	r3, r2
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	429a      	cmp	r2, r3
 8005724:	bf0c      	ite	eq
 8005726:	2301      	moveq	r3, #1
 8005728:	2300      	movne	r3, #0
 800572a:	b2db      	uxtb	r3, r3
 800572c:	461a      	mov	r2, r3
 800572e:	79fb      	ldrb	r3, [r7, #7]
 8005730:	429a      	cmp	r2, r3
 8005732:	d19b      	bne.n	800566c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3720      	adds	r7, #32
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	20000004 	.word	0x20000004

08005744 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b088      	sub	sp, #32
 8005748:	af02      	add	r7, sp, #8
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005750:	4b1b      	ldr	r3, [pc, #108]	; (80057c0 <SPI_EndRxTxTransaction+0x7c>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a1b      	ldr	r2, [pc, #108]	; (80057c4 <SPI_EndRxTxTransaction+0x80>)
 8005756:	fba2 2303 	umull	r2, r3, r2, r3
 800575a:	0d5b      	lsrs	r3, r3, #21
 800575c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005760:	fb02 f303 	mul.w	r3, r2, r3
 8005764:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800576e:	d112      	bne.n	8005796 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	2200      	movs	r2, #0
 8005778:	2180      	movs	r1, #128	; 0x80
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f7ff ff5a 	bl	8005634 <SPI_WaitFlagStateUntilTimeout>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d016      	beq.n	80057b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800578a:	f043 0220 	orr.w	r2, r3, #32
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e00f      	b.n	80057b6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00a      	beq.n	80057b2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	3b01      	subs	r3, #1
 80057a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ac:	2b80      	cmp	r3, #128	; 0x80
 80057ae:	d0f2      	beq.n	8005796 <SPI_EndRxTxTransaction+0x52>
 80057b0:	e000      	b.n	80057b4 <SPI_EndRxTxTransaction+0x70>
        break;
 80057b2:	bf00      	nop
  }

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3718      	adds	r7, #24
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	20000004 	.word	0x20000004
 80057c4:	165e9f81 	.word	0x165e9f81

080057c8 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 80057d0:	2300      	movs	r3, #0
 80057d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80057d4:	4b1e      	ldr	r3, [pc, #120]	; (8005850 <SPI_AbortRx_ISR+0x88>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a1e      	ldr	r2, [pc, #120]	; (8005854 <SPI_AbortRx_ISR+0x8c>)
 80057da:	fba2 2303 	umull	r2, r3, r2, r3
 80057de:	0a5b      	lsrs	r3, r3, #9
 80057e0:	2264      	movs	r2, #100	; 0x64
 80057e2:	fb02 f303 	mul.w	r3, r2, r3
 80057e6:	60bb      	str	r3, [r7, #8]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d106      	bne.n	80057fc <SPI_AbortRx_ISR+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057fa:	e009      	b.n	8005810 <SPI_AbortRx_ISR+0x48>
    }
    count--;
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	3b01      	subs	r3, #1
 8005800:	60bb      	str	r3, [r7, #8]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f003 0302 	and.w	r3, r3, #2
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0eb      	beq.n	80057e8 <SPI_AbortRx_ISR+0x20>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800581e:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685a      	ldr	r2, [r3, #4]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800582e:	605a      	str	r2, [r3, #4]

  /* Flush Data Register by a blank read */
  tmpreg = READ_REG(hspi->Instance->DR);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8005838:	68fb      	ldr	r3, [r7, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2207      	movs	r2, #7
 800583e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8005842:	bf00      	nop
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	20000004 	.word	0x20000004
 8005854:	057619f1 	.word	0x057619f1

08005858 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800586e:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800587e:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2207      	movs	r2, #7
 8005884:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e04c      	b.n	8005940 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d111      	bne.n	80058d6 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 fc3e 	bl	800613c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d102      	bne.n	80058ce <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a1f      	ldr	r2, [pc, #124]	; (8005948 <HAL_TIM_Base_Init+0xb4>)
 80058cc:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2202      	movs	r2, #2
 80058da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	3304      	adds	r3, #4
 80058e6:	4619      	mov	r1, r3
 80058e8:	4610      	mov	r0, r2
 80058ea:	f000 fb0d 	bl	8005f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2201      	movs	r2, #1
 8005922:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	0800225d 	.word	0x0800225d

0800594c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b01      	cmp	r3, #1
 800595e:	d001      	beq.n	8005964 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e044      	b.n	80059ee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2202      	movs	r2, #2
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68da      	ldr	r2, [r3, #12]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f042 0201 	orr.w	r2, r2, #1
 800597a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a1e      	ldr	r2, [pc, #120]	; (80059fc <HAL_TIM_Base_Start_IT+0xb0>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d018      	beq.n	80059b8 <HAL_TIM_Base_Start_IT+0x6c>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800598e:	d013      	beq.n	80059b8 <HAL_TIM_Base_Start_IT+0x6c>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a1a      	ldr	r2, [pc, #104]	; (8005a00 <HAL_TIM_Base_Start_IT+0xb4>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d00e      	beq.n	80059b8 <HAL_TIM_Base_Start_IT+0x6c>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a19      	ldr	r2, [pc, #100]	; (8005a04 <HAL_TIM_Base_Start_IT+0xb8>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d009      	beq.n	80059b8 <HAL_TIM_Base_Start_IT+0x6c>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a17      	ldr	r2, [pc, #92]	; (8005a08 <HAL_TIM_Base_Start_IT+0xbc>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d004      	beq.n	80059b8 <HAL_TIM_Base_Start_IT+0x6c>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a16      	ldr	r2, [pc, #88]	; (8005a0c <HAL_TIM_Base_Start_IT+0xc0>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d111      	bne.n	80059dc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f003 0307 	and.w	r3, r3, #7
 80059c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2b06      	cmp	r3, #6
 80059c8:	d010      	beq.n	80059ec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f042 0201 	orr.w	r2, r2, #1
 80059d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059da:	e007      	b.n	80059ec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f042 0201 	orr.w	r2, r2, #1
 80059ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3714      	adds	r7, #20
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	40010000 	.word	0x40010000
 8005a00:	40000400 	.word	0x40000400
 8005a04:	40000800 	.word	0x40000800
 8005a08:	40000c00 	.word	0x40000c00
 8005a0c:	40014000 	.word	0x40014000

08005a10 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 0201 	bic.w	r2, r2, #1
 8005a26:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6a1a      	ldr	r2, [r3, #32]
 8005a2e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005a32:	4013      	ands	r3, r2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10f      	bne.n	8005a58 <HAL_TIM_Base_Stop_IT+0x48>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6a1a      	ldr	r2, [r3, #32]
 8005a3e:	f240 4344 	movw	r3, #1092	; 0x444
 8005a42:	4013      	ands	r3, r2
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d107      	bne.n	8005a58 <HAL_TIM_Base_Stop_IT+0x48>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f022 0201 	bic.w	r2, r2, #1
 8005a56:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b082      	sub	sp, #8
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d128      	bne.n	8005ad6 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d121      	bne.n	8005ad6 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f06f 0202 	mvn.w	r2, #2
 8005a9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	f003 0303 	and.w	r3, r3, #3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d005      	beq.n	8005abc <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	4798      	blx	r3
 8005aba:	e009      	b.n	8005ad0 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	f003 0304 	and.w	r3, r3, #4
 8005ae0:	2b04      	cmp	r3, #4
 8005ae2:	d128      	bne.n	8005b36 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	f003 0304 	and.w	r3, r3, #4
 8005aee:	2b04      	cmp	r3, #4
 8005af0:	d121      	bne.n	8005b36 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f06f 0204 	mvn.w	r2, #4
 8005afa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2202      	movs	r2, #2
 8005b00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d005      	beq.n	8005b1c <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	4798      	blx	r3
 8005b1a:	e009      	b.n	8005b30 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	f003 0308 	and.w	r3, r3, #8
 8005b40:	2b08      	cmp	r3, #8
 8005b42:	d128      	bne.n	8005b96 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	f003 0308 	and.w	r3, r3, #8
 8005b4e:	2b08      	cmp	r3, #8
 8005b50:	d121      	bne.n	8005b96 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f06f 0208 	mvn.w	r2, #8
 8005b5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2204      	movs	r2, #4
 8005b60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	69db      	ldr	r3, [r3, #28]
 8005b68:	f003 0303 	and.w	r3, r3, #3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d005      	beq.n	8005b7c <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	4798      	blx	r3
 8005b7a:	e009      	b.n	8005b90 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	f003 0310 	and.w	r3, r3, #16
 8005ba0:	2b10      	cmp	r3, #16
 8005ba2:	d128      	bne.n	8005bf6 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	f003 0310 	and.w	r3, r3, #16
 8005bae:	2b10      	cmp	r3, #16
 8005bb0:	d121      	bne.n	8005bf6 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f06f 0210 	mvn.w	r2, #16
 8005bba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2208      	movs	r2, #8
 8005bc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	69db      	ldr	r3, [r3, #28]
 8005bc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d005      	beq.n	8005bdc <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	4798      	blx	r3
 8005bda:	e009      	b.n	8005bf0 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d110      	bne.n	8005c26 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d109      	bne.n	8005c26 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f06f 0201 	mvn.w	r2, #1
 8005c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c30:	2b80      	cmp	r3, #128	; 0x80
 8005c32:	d110      	bne.n	8005c56 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c3e:	2b80      	cmp	r3, #128	; 0x80
 8005c40:	d109      	bne.n	8005c56 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c60:	2b40      	cmp	r3, #64	; 0x40
 8005c62:	d110      	bne.n	8005c86 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c6e:	2b40      	cmp	r3, #64	; 0x40
 8005c70:	d109      	bne.n	8005c86 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	f003 0320 	and.w	r3, r3, #32
 8005c90:	2b20      	cmp	r3, #32
 8005c92:	d110      	bne.n	8005cb6 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	f003 0320 	and.w	r3, r3, #32
 8005c9e:	2b20      	cmp	r3, #32
 8005ca0:	d109      	bne.n	8005cb6 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f06f 0220 	mvn.w	r2, #32
 8005caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cb6:	bf00      	nop
 8005cb8:	3708      	adds	r7, #8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d101      	bne.n	8005cda <HAL_TIM_ConfigClockSource+0x1c>
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	e0b4      	b.n	8005e44 <HAL_TIM_ConfigClockSource+0x186>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2202      	movs	r2, #2
 8005ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005cf8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d00:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d12:	d03e      	beq.n	8005d92 <HAL_TIM_ConfigClockSource+0xd4>
 8005d14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d18:	f200 8087 	bhi.w	8005e2a <HAL_TIM_ConfigClockSource+0x16c>
 8005d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d20:	f000 8086 	beq.w	8005e30 <HAL_TIM_ConfigClockSource+0x172>
 8005d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d28:	d87f      	bhi.n	8005e2a <HAL_TIM_ConfigClockSource+0x16c>
 8005d2a:	2b70      	cmp	r3, #112	; 0x70
 8005d2c:	d01a      	beq.n	8005d64 <HAL_TIM_ConfigClockSource+0xa6>
 8005d2e:	2b70      	cmp	r3, #112	; 0x70
 8005d30:	d87b      	bhi.n	8005e2a <HAL_TIM_ConfigClockSource+0x16c>
 8005d32:	2b60      	cmp	r3, #96	; 0x60
 8005d34:	d050      	beq.n	8005dd8 <HAL_TIM_ConfigClockSource+0x11a>
 8005d36:	2b60      	cmp	r3, #96	; 0x60
 8005d38:	d877      	bhi.n	8005e2a <HAL_TIM_ConfigClockSource+0x16c>
 8005d3a:	2b50      	cmp	r3, #80	; 0x50
 8005d3c:	d03c      	beq.n	8005db8 <HAL_TIM_ConfigClockSource+0xfa>
 8005d3e:	2b50      	cmp	r3, #80	; 0x50
 8005d40:	d873      	bhi.n	8005e2a <HAL_TIM_ConfigClockSource+0x16c>
 8005d42:	2b40      	cmp	r3, #64	; 0x40
 8005d44:	d058      	beq.n	8005df8 <HAL_TIM_ConfigClockSource+0x13a>
 8005d46:	2b40      	cmp	r3, #64	; 0x40
 8005d48:	d86f      	bhi.n	8005e2a <HAL_TIM_ConfigClockSource+0x16c>
 8005d4a:	2b30      	cmp	r3, #48	; 0x30
 8005d4c:	d064      	beq.n	8005e18 <HAL_TIM_ConfigClockSource+0x15a>
 8005d4e:	2b30      	cmp	r3, #48	; 0x30
 8005d50:	d86b      	bhi.n	8005e2a <HAL_TIM_ConfigClockSource+0x16c>
 8005d52:	2b20      	cmp	r3, #32
 8005d54:	d060      	beq.n	8005e18 <HAL_TIM_ConfigClockSource+0x15a>
 8005d56:	2b20      	cmp	r3, #32
 8005d58:	d867      	bhi.n	8005e2a <HAL_TIM_ConfigClockSource+0x16c>
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d05c      	beq.n	8005e18 <HAL_TIM_ConfigClockSource+0x15a>
 8005d5e:	2b10      	cmp	r3, #16
 8005d60:	d05a      	beq.n	8005e18 <HAL_TIM_ConfigClockSource+0x15a>
 8005d62:	e062      	b.n	8005e2a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6818      	ldr	r0, [r3, #0]
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	6899      	ldr	r1, [r3, #8]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	f000 f9c2 	bl	80060fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d86:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	609a      	str	r2, [r3, #8]
      break;
 8005d90:	e04f      	b.n	8005e32 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6818      	ldr	r0, [r3, #0]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	6899      	ldr	r1, [r3, #8]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f000 f9ab 	bl	80060fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689a      	ldr	r2, [r3, #8]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005db4:	609a      	str	r2, [r3, #8]
      break;
 8005db6:	e03c      	b.n	8005e32 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6818      	ldr	r0, [r3, #0]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	6859      	ldr	r1, [r3, #4]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	f000 f91f 	bl	8006008 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2150      	movs	r1, #80	; 0x50
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f000 f978 	bl	80060c6 <TIM_ITRx_SetConfig>
      break;
 8005dd6:	e02c      	b.n	8005e32 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6818      	ldr	r0, [r3, #0]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	6859      	ldr	r1, [r3, #4]
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	461a      	mov	r2, r3
 8005de6:	f000 f93e 	bl	8006066 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2160      	movs	r1, #96	; 0x60
 8005df0:	4618      	mov	r0, r3
 8005df2:	f000 f968 	bl	80060c6 <TIM_ITRx_SetConfig>
      break;
 8005df6:	e01c      	b.n	8005e32 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6818      	ldr	r0, [r3, #0]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	6859      	ldr	r1, [r3, #4]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	461a      	mov	r2, r3
 8005e06:	f000 f8ff 	bl	8006008 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2140      	movs	r1, #64	; 0x40
 8005e10:	4618      	mov	r0, r3
 8005e12:	f000 f958 	bl	80060c6 <TIM_ITRx_SetConfig>
      break;
 8005e16:	e00c      	b.n	8005e32 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4619      	mov	r1, r3
 8005e22:	4610      	mov	r0, r2
 8005e24:	f000 f94f 	bl	80060c6 <TIM_ITRx_SetConfig>
      break;
 8005e28:	e003      	b.n	8005e32 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e2e:	e000      	b.n	8005e32 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e30:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  return htim->State;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005efa:	b2db      	uxtb	r3, r3
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a34      	ldr	r2, [pc, #208]	; (8005fec <TIM_Base_SetConfig+0xe4>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d00f      	beq.n	8005f40 <TIM_Base_SetConfig+0x38>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f26:	d00b      	beq.n	8005f40 <TIM_Base_SetConfig+0x38>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a31      	ldr	r2, [pc, #196]	; (8005ff0 <TIM_Base_SetConfig+0xe8>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d007      	beq.n	8005f40 <TIM_Base_SetConfig+0x38>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a30      	ldr	r2, [pc, #192]	; (8005ff4 <TIM_Base_SetConfig+0xec>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d003      	beq.n	8005f40 <TIM_Base_SetConfig+0x38>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a2f      	ldr	r2, [pc, #188]	; (8005ff8 <TIM_Base_SetConfig+0xf0>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d108      	bne.n	8005f52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a25      	ldr	r2, [pc, #148]	; (8005fec <TIM_Base_SetConfig+0xe4>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d01b      	beq.n	8005f92 <TIM_Base_SetConfig+0x8a>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f60:	d017      	beq.n	8005f92 <TIM_Base_SetConfig+0x8a>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a22      	ldr	r2, [pc, #136]	; (8005ff0 <TIM_Base_SetConfig+0xe8>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d013      	beq.n	8005f92 <TIM_Base_SetConfig+0x8a>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a21      	ldr	r2, [pc, #132]	; (8005ff4 <TIM_Base_SetConfig+0xec>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d00f      	beq.n	8005f92 <TIM_Base_SetConfig+0x8a>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a20      	ldr	r2, [pc, #128]	; (8005ff8 <TIM_Base_SetConfig+0xf0>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d00b      	beq.n	8005f92 <TIM_Base_SetConfig+0x8a>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a1f      	ldr	r2, [pc, #124]	; (8005ffc <TIM_Base_SetConfig+0xf4>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d007      	beq.n	8005f92 <TIM_Base_SetConfig+0x8a>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a1e      	ldr	r2, [pc, #120]	; (8006000 <TIM_Base_SetConfig+0xf8>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d003      	beq.n	8005f92 <TIM_Base_SetConfig+0x8a>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a1d      	ldr	r2, [pc, #116]	; (8006004 <TIM_Base_SetConfig+0xfc>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d108      	bne.n	8005fa4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a08      	ldr	r2, [pc, #32]	; (8005fec <TIM_Base_SetConfig+0xe4>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d103      	bne.n	8005fd8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	691a      	ldr	r2, [r3, #16]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	615a      	str	r2, [r3, #20]
}
 8005fde:	bf00      	nop
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	40010000 	.word	0x40010000
 8005ff0:	40000400 	.word	0x40000400
 8005ff4:	40000800 	.word	0x40000800
 8005ff8:	40000c00 	.word	0x40000c00
 8005ffc:	40014000 	.word	0x40014000
 8006000:	40014400 	.word	0x40014400
 8006004:	40014800 	.word	0x40014800

08006008 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6a1b      	ldr	r3, [r3, #32]
 8006018:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	f023 0201 	bic.w	r2, r3, #1
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006032:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	011b      	lsls	r3, r3, #4
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	4313      	orrs	r3, r2
 800603c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f023 030a 	bic.w	r3, r3, #10
 8006044:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	4313      	orrs	r3, r2
 800604c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	621a      	str	r2, [r3, #32]
}
 800605a:	bf00      	nop
 800605c:	371c      	adds	r7, #28
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006066:	b480      	push	{r7}
 8006068:	b087      	sub	sp, #28
 800606a:	af00      	add	r7, sp, #0
 800606c:	60f8      	str	r0, [r7, #12]
 800606e:	60b9      	str	r1, [r7, #8]
 8006070:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	f023 0210 	bic.w	r2, r3, #16
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6a1b      	ldr	r3, [r3, #32]
 8006088:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006090:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	031b      	lsls	r3, r3, #12
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	4313      	orrs	r3, r2
 800609a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	011b      	lsls	r3, r3, #4
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	621a      	str	r2, [r3, #32]
}
 80060ba:	bf00      	nop
 80060bc:	371c      	adds	r7, #28
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b085      	sub	sp, #20
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
 80060ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	f043 0307 	orr.w	r3, r3, #7
 80060e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	609a      	str	r2, [r3, #8]
}
 80060f0:	bf00      	nop
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
 8006108:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006116:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	021a      	lsls	r2, r3, #8
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	431a      	orrs	r2, r3
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	4313      	orrs	r3, r2
 8006124:	697a      	ldr	r2, [r7, #20]
 8006126:	4313      	orrs	r3, r2
 8006128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	609a      	str	r2, [r3, #8]
}
 8006130:	bf00      	nop
 8006132:	371c      	adds	r7, #28
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a1c      	ldr	r2, [pc, #112]	; (80061b8 <TIM_ResetCallback+0x7c>)
 8006148:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a1b      	ldr	r2, [pc, #108]	; (80061bc <TIM_ResetCallback+0x80>)
 8006150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a1a      	ldr	r2, [pc, #104]	; (80061c0 <TIM_ResetCallback+0x84>)
 8006158:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a19      	ldr	r2, [pc, #100]	; (80061c4 <TIM_ResetCallback+0x88>)
 8006160:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a18      	ldr	r2, [pc, #96]	; (80061c8 <TIM_ResetCallback+0x8c>)
 8006168:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a17      	ldr	r2, [pc, #92]	; (80061cc <TIM_ResetCallback+0x90>)
 8006170:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a16      	ldr	r2, [pc, #88]	; (80061d0 <TIM_ResetCallback+0x94>)
 8006178:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a15      	ldr	r2, [pc, #84]	; (80061d4 <TIM_ResetCallback+0x98>)
 8006180:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a14      	ldr	r2, [pc, #80]	; (80061d8 <TIM_ResetCallback+0x9c>)
 8006188:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a13      	ldr	r2, [pc, #76]	; (80061dc <TIM_ResetCallback+0xa0>)
 8006190:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a12      	ldr	r2, [pc, #72]	; (80061e0 <TIM_ResetCallback+0xa4>)
 8006198:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a11      	ldr	r2, [pc, #68]	; (80061e4 <TIM_ResetCallback+0xa8>)
 80061a0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a10      	ldr	r2, [pc, #64]	; (80061e8 <TIM_ResetCallback+0xac>)
 80061a8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	08007df9 	.word	0x08007df9
 80061bc:	08005e4d 	.word	0x08005e4d
 80061c0:	08005ec5 	.word	0x08005ec5
 80061c4:	08005ed9 	.word	0x08005ed9
 80061c8:	08005e75 	.word	0x08005e75
 80061cc:	08005e89 	.word	0x08005e89
 80061d0:	08005e61 	.word	0x08005e61
 80061d4:	08005e9d 	.word	0x08005e9d
 80061d8:	08005eb1 	.word	0x08005eb1
 80061dc:	08007c65 	.word	0x08007c65
 80061e0:	080062c9 	.word	0x080062c9
 80061e4:	080062dd 	.word	0x080062dd
 80061e8:	080062f1 	.word	0x080062f1

080061ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d101      	bne.n	8006204 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006200:	2302      	movs	r3, #2
 8006202:	e050      	b.n	80062a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2202      	movs	r2, #2
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800622a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	4313      	orrs	r3, r2
 8006234:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a1c      	ldr	r2, [pc, #112]	; (80062b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d018      	beq.n	800627a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006250:	d013      	beq.n	800627a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a18      	ldr	r2, [pc, #96]	; (80062b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d00e      	beq.n	800627a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a16      	ldr	r2, [pc, #88]	; (80062bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d009      	beq.n	800627a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a15      	ldr	r2, [pc, #84]	; (80062c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d004      	beq.n	800627a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a13      	ldr	r2, [pc, #76]	; (80062c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d10c      	bne.n	8006294 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006280:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	4313      	orrs	r3, r2
 800628a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	40010000 	.word	0x40010000
 80062b8:	40000400 	.word	0x40000400
 80062bc:	40000800 	.word	0x40000800
 80062c0:	40000c00 	.word	0x40000c00
 80062c4:	40014000 	.word	0x40014000

080062c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e04a      	b.n	80063ac <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d111      	bne.n	8006346 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fbb2 	bl	8006a94 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006334:	2b00      	cmp	r3, #0
 8006336:	d102      	bne.n	800633e <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a1e      	ldr	r2, [pc, #120]	; (80063b4 <HAL_UART_Init+0xb0>)
 800633c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2224      	movs	r2, #36	; 0x24
 800634a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68da      	ldr	r2, [r3, #12]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800635c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 fdac 	bl	8006ebc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	691a      	ldr	r2, [r3, #16]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006372:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	695a      	ldr	r2, [r3, #20]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006382:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68da      	ldr	r2, [r3, #12]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006392:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2220      	movs	r2, #32
 800639e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2220      	movs	r2, #32
 80063a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3708      	adds	r7, #8
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	08002395 	.word	0x08002395

080063b8 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e029      	b.n	800641e <HAL_UART_DeInit+0x66>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2224      	movs	r2, #36	; 0x24
 80063ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68da      	ldr	r2, [r3, #12]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063e0:	60da      	str	r2, [r3, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  if (huart->MspDeInitCallback == NULL)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d102      	bne.n	80063f0 <HAL_UART_DeInit+0x38>
  {
    huart->MspDeInitCallback = HAL_UART_MspDeInit;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a0e      	ldr	r2, [pc, #56]	; (8006428 <HAL_UART_DeInit+0x70>)
 80063ee:	671a      	str	r2, [r3, #112]	; 0x70
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	4798      	blx	r3
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3708      	adds	r7, #8
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	08002425 	.word	0x08002425

0800642c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	4613      	mov	r3, r2
 8006438:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b20      	cmp	r3, #32
 8006444:	d11d      	bne.n	8006482 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d002      	beq.n	8006452 <HAL_UART_Receive_IT+0x26>
 800644c:	88fb      	ldrh	r3, [r7, #6]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e016      	b.n	8006484 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800645c:	2b01      	cmp	r3, #1
 800645e:	d101      	bne.n	8006464 <HAL_UART_Receive_IT+0x38>
 8006460:	2302      	movs	r3, #2
 8006462:	e00f      	b.n	8006484 <HAL_UART_Receive_IT+0x58>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006472:	88fb      	ldrh	r3, [r7, #6]
 8006474:	461a      	mov	r2, r3
 8006476:	68b9      	ldr	r1, [r7, #8]
 8006478:	68f8      	ldr	r0, [r7, #12]
 800647a:	f000 fb43 	bl	8006b04 <UART_Start_Receive_IT>
 800647e:	4603      	mov	r3, r0
 8006480:	e000      	b.n	8006484 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006482:	2302      	movs	r3, #2
  }
}
 8006484:	4618      	mov	r0, r3
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b0ba      	sub	sp, #232	; 0xe8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80064b2:	2300      	movs	r3, #0
 80064b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80064b8:	2300      	movs	r3, #0
 80064ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80064be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064c2:	f003 030f 	and.w	r3, r3, #15
 80064c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80064ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10f      	bne.n	80064f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064d6:	f003 0320 	and.w	r3, r3, #32
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d009      	beq.n	80064f2 <HAL_UART_IRQHandler+0x66>
 80064de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064e2:	f003 0320 	and.w	r3, r3, #32
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fc29 	bl	8006d42 <UART_Receive_IT>
      return;
 80064f0:	e25b      	b.n	80069aa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80064f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f000 80e1 	beq.w	80066be <HAL_UART_IRQHandler+0x232>
 80064fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006500:	f003 0301 	and.w	r3, r3, #1
 8006504:	2b00      	cmp	r3, #0
 8006506:	d106      	bne.n	8006516 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800650c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006510:	2b00      	cmp	r3, #0
 8006512:	f000 80d4 	beq.w	80066be <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00b      	beq.n	800653a <HAL_UART_IRQHandler+0xae>
 8006522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800652a:	2b00      	cmp	r3, #0
 800652c:	d005      	beq.n	800653a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	f043 0201 	orr.w	r2, r3, #1
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800653a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800653e:	f003 0304 	and.w	r3, r3, #4
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00b      	beq.n	800655e <HAL_UART_IRQHandler+0xd2>
 8006546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b00      	cmp	r3, #0
 8006550:	d005      	beq.n	800655e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006556:	f043 0202 	orr.w	r2, r3, #2
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800655e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00b      	beq.n	8006582 <HAL_UART_IRQHandler+0xf6>
 800656a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	2b00      	cmp	r3, #0
 8006574:	d005      	beq.n	8006582 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657a:	f043 0204 	orr.w	r2, r3, #4
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006586:	f003 0308 	and.w	r3, r3, #8
 800658a:	2b00      	cmp	r3, #0
 800658c:	d011      	beq.n	80065b2 <HAL_UART_IRQHandler+0x126>
 800658e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006592:	f003 0320 	and.w	r3, r3, #32
 8006596:	2b00      	cmp	r3, #0
 8006598:	d105      	bne.n	80065a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800659a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d005      	beq.n	80065b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065aa:	f043 0208 	orr.w	r2, r3, #8
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f000 81f2 	beq.w	80069a0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c0:	f003 0320 	and.w	r3, r3, #32
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d008      	beq.n	80065da <HAL_UART_IRQHandler+0x14e>
 80065c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065cc:	f003 0320 	and.w	r3, r3, #32
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d002      	beq.n	80065da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 fbb4 	bl	8006d42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e4:	2b40      	cmp	r3, #64	; 0x40
 80065e6:	bf0c      	ite	eq
 80065e8:	2301      	moveq	r3, #1
 80065ea:	2300      	movne	r3, #0
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f6:	f003 0308 	and.w	r3, r3, #8
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d103      	bne.n	8006606 <HAL_UART_IRQHandler+0x17a>
 80065fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006602:	2b00      	cmp	r3, #0
 8006604:	d051      	beq.n	80066aa <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 faba 	bl	8006b80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006616:	2b40      	cmp	r3, #64	; 0x40
 8006618:	d142      	bne.n	80066a0 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	3314      	adds	r3, #20
 8006620:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006624:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006628:	e853 3f00 	ldrex	r3, [r3]
 800662c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006630:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006638:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	3314      	adds	r3, #20
 8006642:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006646:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800664a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006652:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006656:	e841 2300 	strex	r3, r2, [r1]
 800665a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800665e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1d9      	bne.n	800661a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666a:	2b00      	cmp	r3, #0
 800666c:	d013      	beq.n	8006696 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006672:	4a7f      	ldr	r2, [pc, #508]	; (8006870 <HAL_UART_IRQHandler+0x3e4>)
 8006674:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667a:	4618      	mov	r0, r3
 800667c:	f7fd f92c 	bl	80038d8 <HAL_DMA_Abort_IT>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d019      	beq.n	80066ba <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006690:	4610      	mov	r0, r2
 8006692:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006694:	e011      	b.n	80066ba <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800669e:	e00c      	b.n	80066ba <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a8:	e007      	b.n	80066ba <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80066b8:	e172      	b.n	80069a0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ba:	bf00      	nop
    return;
 80066bc:	e170      	b.n	80069a0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	f040 814c 	bne.w	8006960 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80066c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066cc:	f003 0310 	and.w	r3, r3, #16
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 8145 	beq.w	8006960 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80066d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066da:	f003 0310 	and.w	r3, r3, #16
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f000 813e 	beq.w	8006960 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066e4:	2300      	movs	r3, #0
 80066e6:	60bb      	str	r3, [r7, #8]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	60bb      	str	r3, [r7, #8]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	60bb      	str	r3, [r7, #8]
 80066f8:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	695b      	ldr	r3, [r3, #20]
 8006700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006704:	2b40      	cmp	r3, #64	; 0x40
 8006706:	f040 80b5 	bne.w	8006874 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006716:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 8142 	beq.w	80069a4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006724:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006728:	429a      	cmp	r2, r3
 800672a:	f080 813b 	bcs.w	80069a4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006734:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673a:	69db      	ldr	r3, [r3, #28]
 800673c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006740:	f000 8088 	beq.w	8006854 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	330c      	adds	r3, #12
 800674a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006752:	e853 3f00 	ldrex	r3, [r3]
 8006756:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800675a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800675e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006762:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	330c      	adds	r3, #12
 800676c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006770:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006774:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006778:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800677c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006780:	e841 2300 	strex	r3, r2, [r1]
 8006784:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006788:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1d9      	bne.n	8006744 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	3314      	adds	r3, #20
 8006796:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006798:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800679a:	e853 3f00 	ldrex	r3, [r3]
 800679e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80067a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067a2:	f023 0301 	bic.w	r3, r3, #1
 80067a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	3314      	adds	r3, #20
 80067b0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80067b4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80067b8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ba:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80067bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80067c0:	e841 2300 	strex	r3, r2, [r1]
 80067c4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80067c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1e1      	bne.n	8006790 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	3314      	adds	r3, #20
 80067d2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067d6:	e853 3f00 	ldrex	r3, [r3]
 80067da:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80067dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	3314      	adds	r3, #20
 80067ec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80067f0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80067f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80067f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80067f8:	e841 2300 	strex	r3, r2, [r1]
 80067fc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80067fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1e3      	bne.n	80067cc <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2220      	movs	r2, #32
 8006808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	330c      	adds	r3, #12
 8006818:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800681c:	e853 3f00 	ldrex	r3, [r3]
 8006820:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006824:	f023 0310 	bic.w	r3, r3, #16
 8006828:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	330c      	adds	r3, #12
 8006832:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006836:	65ba      	str	r2, [r7, #88]	; 0x58
 8006838:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800683c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800683e:	e841 2300 	strex	r3, r2, [r1]
 8006842:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006844:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1e3      	bne.n	8006812 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684e:	4618      	mov	r0, r3
 8006850:	f7fc ffd2 	bl	80037f8 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8006860:	b292      	uxth	r2, r2
 8006862:	1a8a      	subs	r2, r1, r2
 8006864:	b292      	uxth	r2, r2
 8006866:	4611      	mov	r1, r2
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800686c:	e09a      	b.n	80069a4 <HAL_UART_IRQHandler+0x518>
 800686e:	bf00      	nop
 8006870:	08006c47 	.word	0x08006c47
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800687c:	b29b      	uxth	r3, r3
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006888:	b29b      	uxth	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	f000 808c 	beq.w	80069a8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006890:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006894:	2b00      	cmp	r3, #0
 8006896:	f000 8087 	beq.w	80069a8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	330c      	adds	r3, #12
 80068a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a4:	e853 3f00 	ldrex	r3, [r3]
 80068a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	330c      	adds	r3, #12
 80068ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80068be:	647a      	str	r2, [r7, #68]	; 0x44
 80068c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068c6:	e841 2300 	strex	r3, r2, [r1]
 80068ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1e3      	bne.n	800689a <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	3314      	adds	r3, #20
 80068d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068dc:	e853 3f00 	ldrex	r3, [r3]
 80068e0:	623b      	str	r3, [r7, #32]
   return(result);
 80068e2:	6a3b      	ldr	r3, [r7, #32]
 80068e4:	f023 0301 	bic.w	r3, r3, #1
 80068e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	3314      	adds	r3, #20
 80068f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80068f6:	633a      	str	r2, [r7, #48]	; 0x30
 80068f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068fe:	e841 2300 	strex	r3, r2, [r1]
 8006902:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1e3      	bne.n	80068d2 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2220      	movs	r2, #32
 800690e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	330c      	adds	r3, #12
 800691e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	e853 3f00 	ldrex	r3, [r3]
 8006926:	60fb      	str	r3, [r7, #12]
   return(result);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f023 0310 	bic.w	r3, r3, #16
 800692e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	330c      	adds	r3, #12
 8006938:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800693c:	61fa      	str	r2, [r7, #28]
 800693e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006940:	69b9      	ldr	r1, [r7, #24]
 8006942:	69fa      	ldr	r2, [r7, #28]
 8006944:	e841 2300 	strex	r3, r2, [r1]
 8006948:	617b      	str	r3, [r7, #20]
   return(result);
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1e3      	bne.n	8006918 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006954:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8006958:	4611      	mov	r1, r2
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800695e:	e023      	b.n	80069a8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006968:	2b00      	cmp	r3, #0
 800696a:	d009      	beq.n	8006980 <HAL_UART_IRQHandler+0x4f4>
 800696c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006974:	2b00      	cmp	r3, #0
 8006976:	d003      	beq.n	8006980 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 f979 	bl	8006c70 <UART_Transmit_IT>
    return;
 800697e:	e014      	b.n	80069aa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00e      	beq.n	80069aa <HAL_UART_IRQHandler+0x51e>
 800698c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006994:	2b00      	cmp	r3, #0
 8006996:	d008      	beq.n	80069aa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 f9b9 	bl	8006d10 <UART_EndTransmit_IT>
    return;
 800699e:	e004      	b.n	80069aa <HAL_UART_IRQHandler+0x51e>
    return;
 80069a0:	bf00      	nop
 80069a2:	e002      	b.n	80069aa <HAL_UART_IRQHandler+0x51e>
      return;
 80069a4:	bf00      	nop
 80069a6:	e000      	b.n	80069aa <HAL_UART_IRQHandler+0x51e>
      return;
 80069a8:	bf00      	nop
  }
}
 80069aa:	37e8      	adds	r7, #232	; 0xe8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	460b      	mov	r3, r1
 8006a32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	60fb      	str	r3, [r7, #12]
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	b2da      	uxtb	r2, r3
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	b2db      	uxtb	r3, r3
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3714      	adds	r7, #20
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a10      	ldr	r2, [pc, #64]	; (8006ae0 <UART_InitCallbacksToDefault+0x4c>)
 8006aa0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a0f      	ldr	r2, [pc, #60]	; (8006ae4 <UART_InitCallbacksToDefault+0x50>)
 8006aa6:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a0f      	ldr	r2, [pc, #60]	; (8006ae8 <UART_InitCallbacksToDefault+0x54>)
 8006aac:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a0e      	ldr	r2, [pc, #56]	; (8006aec <UART_InitCallbacksToDefault+0x58>)
 8006ab2:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a0e      	ldr	r2, [pc, #56]	; (8006af0 <UART_InitCallbacksToDefault+0x5c>)
 8006ab8:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a0d      	ldr	r2, [pc, #52]	; (8006af4 <UART_InitCallbacksToDefault+0x60>)
 8006abe:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a0d      	ldr	r2, [pc, #52]	; (8006af8 <UART_InitCallbacksToDefault+0x64>)
 8006ac4:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a0c      	ldr	r2, [pc, #48]	; (8006afc <UART_InitCallbacksToDefault+0x68>)
 8006aca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a0c      	ldr	r2, [pc, #48]	; (8006b00 <UART_InitCallbacksToDefault+0x6c>)
 8006ad0:	669a      	str	r2, [r3, #104]	; 0x68

}
 8006ad2:	bf00      	nop
 8006ad4:	370c      	adds	r7, #12
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	080069c5 	.word	0x080069c5
 8006ae4:	080069b1 	.word	0x080069b1
 8006ae8:	080069d9 	.word	0x080069d9
 8006aec:	080016f9 	.word	0x080016f9
 8006af0:	08001659 	.word	0x08001659
 8006af4:	080069ed 	.word	0x080069ed
 8006af8:	08006a01 	.word	0x08006a01
 8006afc:	08006a15 	.word	0x08006a15
 8006b00:	08006a29 	.word	0x08006a29

08006b04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	88fa      	ldrh	r2, [r7, #6]
 8006b1c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	88fa      	ldrh	r2, [r7, #6]
 8006b22:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2222      	movs	r2, #34	; 0x22
 8006b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d007      	beq.n	8006b52 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68da      	ldr	r2, [r3, #12]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b50:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	695a      	ldr	r2, [r3, #20]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f042 0201 	orr.w	r2, r2, #1
 8006b60:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68da      	ldr	r2, [r3, #12]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f042 0220 	orr.w	r2, r2, #32
 8006b70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3714      	adds	r7, #20
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b095      	sub	sp, #84	; 0x54
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	330c      	adds	r3, #12
 8006b8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b92:	e853 3f00 	ldrex	r3, [r3]
 8006b96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	330c      	adds	r3, #12
 8006ba6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ba8:	643a      	str	r2, [r7, #64]	; 0x40
 8006baa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006bae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bb0:	e841 2300 	strex	r3, r2, [r1]
 8006bb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1e5      	bne.n	8006b88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	3314      	adds	r3, #20
 8006bc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	e853 3f00 	ldrex	r3, [r3]
 8006bca:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	f023 0301 	bic.w	r3, r3, #1
 8006bd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	3314      	adds	r3, #20
 8006bda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bdc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006be2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006be4:	e841 2300 	strex	r3, r2, [r1]
 8006be8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d1e5      	bne.n	8006bbc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d119      	bne.n	8006c2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	330c      	adds	r3, #12
 8006bfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	e853 3f00 	ldrex	r3, [r3]
 8006c06:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	f023 0310 	bic.w	r3, r3, #16
 8006c0e:	647b      	str	r3, [r7, #68]	; 0x44
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	330c      	adds	r3, #12
 8006c16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c18:	61ba      	str	r2, [r7, #24]
 8006c1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1c:	6979      	ldr	r1, [r7, #20]
 8006c1e:	69ba      	ldr	r2, [r7, #24]
 8006c20:	e841 2300 	strex	r3, r2, [r1]
 8006c24:	613b      	str	r3, [r7, #16]
   return(result);
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1e5      	bne.n	8006bf8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2220      	movs	r2, #32
 8006c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006c3a:	bf00      	nop
 8006c3c:	3754      	adds	r7, #84	; 0x54
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr

08006c46 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b084      	sub	sp, #16
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c68:	bf00      	nop
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b21      	cmp	r3, #33	; 0x21
 8006c82:	d13e      	bne.n	8006d02 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c8c:	d114      	bne.n	8006cb8 <UART_Transmit_IT+0x48>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d110      	bne.n	8006cb8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	881b      	ldrh	r3, [r3, #0]
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006caa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6a1b      	ldr	r3, [r3, #32]
 8006cb0:	1c9a      	adds	r2, r3, #2
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	621a      	str	r2, [r3, #32]
 8006cb6:	e008      	b.n	8006cca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a1b      	ldr	r3, [r3, #32]
 8006cbc:	1c59      	adds	r1, r3, #1
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	6211      	str	r1, [r2, #32]
 8006cc2:	781a      	ldrb	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10f      	bne.n	8006cfe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68da      	ldr	r2, [r3, #12]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68da      	ldr	r2, [r3, #12]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cfc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	e000      	b.n	8006d04 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006d02:	2302      	movs	r3, #2
  }
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3714      	adds	r7, #20
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68da      	ldr	r2, [r3, #12]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d26:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2220      	movs	r2, #32
 8006d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3708      	adds	r7, #8
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b08c      	sub	sp, #48	; 0x30
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b22      	cmp	r3, #34	; 0x22
 8006d54:	f040 80ad 	bne.w	8006eb2 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d60:	d117      	bne.n	8006d92 <UART_Receive_IT+0x50>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d113      	bne.n	8006d92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d72:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d8a:	1c9a      	adds	r2, r3, #2
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	629a      	str	r2, [r3, #40]	; 0x28
 8006d90:	e026      	b.n	8006de0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d96:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006da4:	d007      	beq.n	8006db6 <UART_Receive_IT+0x74>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10a      	bne.n	8006dc4 <UART_Receive_IT+0x82>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d106      	bne.n	8006dc4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	b2da      	uxtb	r2, r3
 8006dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc0:	701a      	strb	r2, [r3, #0]
 8006dc2:	e008      	b.n	8006dd6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dd0:	b2da      	uxtb	r2, r3
 8006dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dda:	1c5a      	adds	r2, r3, #1
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	3b01      	subs	r3, #1
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	4619      	mov	r1, r3
 8006dee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d15c      	bne.n	8006eae <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68da      	ldr	r2, [r3, #12]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f022 0220 	bic.w	r2, r2, #32
 8006e02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68da      	ldr	r2, [r3, #12]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	695a      	ldr	r2, [r3, #20]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f022 0201 	bic.w	r2, r2, #1
 8006e22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2220      	movs	r2, #32
 8006e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d136      	bne.n	8006ea2 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	330c      	adds	r3, #12
 8006e40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	e853 3f00 	ldrex	r3, [r3]
 8006e48:	613b      	str	r3, [r7, #16]
   return(result);
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	f023 0310 	bic.w	r3, r3, #16
 8006e50:	627b      	str	r3, [r7, #36]	; 0x24
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	330c      	adds	r3, #12
 8006e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e5a:	623a      	str	r2, [r7, #32]
 8006e5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5e:	69f9      	ldr	r1, [r7, #28]
 8006e60:	6a3a      	ldr	r2, [r7, #32]
 8006e62:	e841 2300 	strex	r3, r2, [r1]
 8006e66:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1e5      	bne.n	8006e3a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0310 	and.w	r3, r3, #16
 8006e78:	2b10      	cmp	r3, #16
 8006e7a:	d10a      	bne.n	8006e92 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	60fb      	str	r3, [r7, #12]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	60fb      	str	r3, [r7, #12]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	60fb      	str	r3, [r7, #12]
 8006e90:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8006e9a:	4611      	mov	r1, r2
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	4798      	blx	r3
 8006ea0:	e003      	b.n	8006eaa <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	e002      	b.n	8006eb4 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	e000      	b.n	8006eb4 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8006eb2:	2302      	movs	r3, #2
  }
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3730      	adds	r7, #48	; 0x30
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ec0:	b0c0      	sub	sp, #256	; 0x100
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ed8:	68d9      	ldr	r1, [r3, #12]
 8006eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	ea40 0301 	orr.w	r3, r0, r1
 8006ee4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eea:	689a      	ldr	r2, [r3, #8]
 8006eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	431a      	orrs	r2, r3
 8006ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	431a      	orrs	r2, r3
 8006efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f00:	69db      	ldr	r3, [r3, #28]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006f14:	f021 010c 	bic.w	r1, r1, #12
 8006f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f22:	430b      	orrs	r3, r1
 8006f24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f36:	6999      	ldr	r1, [r3, #24]
 8006f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	ea40 0301 	orr.w	r3, r0, r1
 8006f42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	4b8f      	ldr	r3, [pc, #572]	; (8007188 <UART_SetConfig+0x2cc>)
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d005      	beq.n	8006f5c <UART_SetConfig+0xa0>
 8006f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	4b8d      	ldr	r3, [pc, #564]	; (800718c <UART_SetConfig+0x2d0>)
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d104      	bne.n	8006f66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f5c:	f7fe f810 	bl	8004f80 <HAL_RCC_GetPCLK2Freq>
 8006f60:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006f64:	e003      	b.n	8006f6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f66:	f7fd fff7 	bl	8004f58 <HAL_RCC_GetPCLK1Freq>
 8006f6a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f72:	69db      	ldr	r3, [r3, #28]
 8006f74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f78:	f040 810c 	bne.w	8007194 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f80:	2200      	movs	r2, #0
 8006f82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f86:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006f8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006f8e:	4622      	mov	r2, r4
 8006f90:	462b      	mov	r3, r5
 8006f92:	1891      	adds	r1, r2, r2
 8006f94:	65b9      	str	r1, [r7, #88]	; 0x58
 8006f96:	415b      	adcs	r3, r3
 8006f98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006f9e:	4621      	mov	r1, r4
 8006fa0:	eb12 0801 	adds.w	r8, r2, r1
 8006fa4:	4629      	mov	r1, r5
 8006fa6:	eb43 0901 	adc.w	r9, r3, r1
 8006faa:	f04f 0200 	mov.w	r2, #0
 8006fae:	f04f 0300 	mov.w	r3, #0
 8006fb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006fb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006fba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006fbe:	4690      	mov	r8, r2
 8006fc0:	4699      	mov	r9, r3
 8006fc2:	4623      	mov	r3, r4
 8006fc4:	eb18 0303 	adds.w	r3, r8, r3
 8006fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006fcc:	462b      	mov	r3, r5
 8006fce:	eb49 0303 	adc.w	r3, r9, r3
 8006fd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006fe2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006fe6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006fea:	460b      	mov	r3, r1
 8006fec:	18db      	adds	r3, r3, r3
 8006fee:	653b      	str	r3, [r7, #80]	; 0x50
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	eb42 0303 	adc.w	r3, r2, r3
 8006ff6:	657b      	str	r3, [r7, #84]	; 0x54
 8006ff8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006ffc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007000:	f7f9 f8ee 	bl	80001e0 <__aeabi_uldivmod>
 8007004:	4602      	mov	r2, r0
 8007006:	460b      	mov	r3, r1
 8007008:	4b61      	ldr	r3, [pc, #388]	; (8007190 <UART_SetConfig+0x2d4>)
 800700a:	fba3 2302 	umull	r2, r3, r3, r2
 800700e:	095b      	lsrs	r3, r3, #5
 8007010:	011c      	lsls	r4, r3, #4
 8007012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007016:	2200      	movs	r2, #0
 8007018:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800701c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007020:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007024:	4642      	mov	r2, r8
 8007026:	464b      	mov	r3, r9
 8007028:	1891      	adds	r1, r2, r2
 800702a:	64b9      	str	r1, [r7, #72]	; 0x48
 800702c:	415b      	adcs	r3, r3
 800702e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007030:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007034:	4641      	mov	r1, r8
 8007036:	eb12 0a01 	adds.w	sl, r2, r1
 800703a:	4649      	mov	r1, r9
 800703c:	eb43 0b01 	adc.w	fp, r3, r1
 8007040:	f04f 0200 	mov.w	r2, #0
 8007044:	f04f 0300 	mov.w	r3, #0
 8007048:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800704c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007050:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007054:	4692      	mov	sl, r2
 8007056:	469b      	mov	fp, r3
 8007058:	4643      	mov	r3, r8
 800705a:	eb1a 0303 	adds.w	r3, sl, r3
 800705e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007062:	464b      	mov	r3, r9
 8007064:	eb4b 0303 	adc.w	r3, fp, r3
 8007068:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800706c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007078:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800707c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007080:	460b      	mov	r3, r1
 8007082:	18db      	adds	r3, r3, r3
 8007084:	643b      	str	r3, [r7, #64]	; 0x40
 8007086:	4613      	mov	r3, r2
 8007088:	eb42 0303 	adc.w	r3, r2, r3
 800708c:	647b      	str	r3, [r7, #68]	; 0x44
 800708e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007092:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007096:	f7f9 f8a3 	bl	80001e0 <__aeabi_uldivmod>
 800709a:	4602      	mov	r2, r0
 800709c:	460b      	mov	r3, r1
 800709e:	4611      	mov	r1, r2
 80070a0:	4b3b      	ldr	r3, [pc, #236]	; (8007190 <UART_SetConfig+0x2d4>)
 80070a2:	fba3 2301 	umull	r2, r3, r3, r1
 80070a6:	095b      	lsrs	r3, r3, #5
 80070a8:	2264      	movs	r2, #100	; 0x64
 80070aa:	fb02 f303 	mul.w	r3, r2, r3
 80070ae:	1acb      	subs	r3, r1, r3
 80070b0:	00db      	lsls	r3, r3, #3
 80070b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80070b6:	4b36      	ldr	r3, [pc, #216]	; (8007190 <UART_SetConfig+0x2d4>)
 80070b8:	fba3 2302 	umull	r2, r3, r3, r2
 80070bc:	095b      	lsrs	r3, r3, #5
 80070be:	005b      	lsls	r3, r3, #1
 80070c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80070c4:	441c      	add	r4, r3
 80070c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070ca:	2200      	movs	r2, #0
 80070cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80070d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80070d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80070d8:	4642      	mov	r2, r8
 80070da:	464b      	mov	r3, r9
 80070dc:	1891      	adds	r1, r2, r2
 80070de:	63b9      	str	r1, [r7, #56]	; 0x38
 80070e0:	415b      	adcs	r3, r3
 80070e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80070e8:	4641      	mov	r1, r8
 80070ea:	1851      	adds	r1, r2, r1
 80070ec:	6339      	str	r1, [r7, #48]	; 0x30
 80070ee:	4649      	mov	r1, r9
 80070f0:	414b      	adcs	r3, r1
 80070f2:	637b      	str	r3, [r7, #52]	; 0x34
 80070f4:	f04f 0200 	mov.w	r2, #0
 80070f8:	f04f 0300 	mov.w	r3, #0
 80070fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007100:	4659      	mov	r1, fp
 8007102:	00cb      	lsls	r3, r1, #3
 8007104:	4651      	mov	r1, sl
 8007106:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800710a:	4651      	mov	r1, sl
 800710c:	00ca      	lsls	r2, r1, #3
 800710e:	4610      	mov	r0, r2
 8007110:	4619      	mov	r1, r3
 8007112:	4603      	mov	r3, r0
 8007114:	4642      	mov	r2, r8
 8007116:	189b      	adds	r3, r3, r2
 8007118:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800711c:	464b      	mov	r3, r9
 800711e:	460a      	mov	r2, r1
 8007120:	eb42 0303 	adc.w	r3, r2, r3
 8007124:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007134:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007138:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800713c:	460b      	mov	r3, r1
 800713e:	18db      	adds	r3, r3, r3
 8007140:	62bb      	str	r3, [r7, #40]	; 0x28
 8007142:	4613      	mov	r3, r2
 8007144:	eb42 0303 	adc.w	r3, r2, r3
 8007148:	62fb      	str	r3, [r7, #44]	; 0x2c
 800714a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800714e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007152:	f7f9 f845 	bl	80001e0 <__aeabi_uldivmod>
 8007156:	4602      	mov	r2, r0
 8007158:	460b      	mov	r3, r1
 800715a:	4b0d      	ldr	r3, [pc, #52]	; (8007190 <UART_SetConfig+0x2d4>)
 800715c:	fba3 1302 	umull	r1, r3, r3, r2
 8007160:	095b      	lsrs	r3, r3, #5
 8007162:	2164      	movs	r1, #100	; 0x64
 8007164:	fb01 f303 	mul.w	r3, r1, r3
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	00db      	lsls	r3, r3, #3
 800716c:	3332      	adds	r3, #50	; 0x32
 800716e:	4a08      	ldr	r2, [pc, #32]	; (8007190 <UART_SetConfig+0x2d4>)
 8007170:	fba2 2303 	umull	r2, r3, r2, r3
 8007174:	095b      	lsrs	r3, r3, #5
 8007176:	f003 0207 	and.w	r2, r3, #7
 800717a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4422      	add	r2, r4
 8007182:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007184:	e105      	b.n	8007392 <UART_SetConfig+0x4d6>
 8007186:	bf00      	nop
 8007188:	40011000 	.word	0x40011000
 800718c:	40011400 	.word	0x40011400
 8007190:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007194:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007198:	2200      	movs	r2, #0
 800719a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800719e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80071a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80071a6:	4642      	mov	r2, r8
 80071a8:	464b      	mov	r3, r9
 80071aa:	1891      	adds	r1, r2, r2
 80071ac:	6239      	str	r1, [r7, #32]
 80071ae:	415b      	adcs	r3, r3
 80071b0:	627b      	str	r3, [r7, #36]	; 0x24
 80071b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80071b6:	4641      	mov	r1, r8
 80071b8:	1854      	adds	r4, r2, r1
 80071ba:	4649      	mov	r1, r9
 80071bc:	eb43 0501 	adc.w	r5, r3, r1
 80071c0:	f04f 0200 	mov.w	r2, #0
 80071c4:	f04f 0300 	mov.w	r3, #0
 80071c8:	00eb      	lsls	r3, r5, #3
 80071ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071ce:	00e2      	lsls	r2, r4, #3
 80071d0:	4614      	mov	r4, r2
 80071d2:	461d      	mov	r5, r3
 80071d4:	4643      	mov	r3, r8
 80071d6:	18e3      	adds	r3, r4, r3
 80071d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80071dc:	464b      	mov	r3, r9
 80071de:	eb45 0303 	adc.w	r3, r5, r3
 80071e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80071e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80071f6:	f04f 0200 	mov.w	r2, #0
 80071fa:	f04f 0300 	mov.w	r3, #0
 80071fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007202:	4629      	mov	r1, r5
 8007204:	008b      	lsls	r3, r1, #2
 8007206:	4621      	mov	r1, r4
 8007208:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800720c:	4621      	mov	r1, r4
 800720e:	008a      	lsls	r2, r1, #2
 8007210:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007214:	f7f8 ffe4 	bl	80001e0 <__aeabi_uldivmod>
 8007218:	4602      	mov	r2, r0
 800721a:	460b      	mov	r3, r1
 800721c:	4b60      	ldr	r3, [pc, #384]	; (80073a0 <UART_SetConfig+0x4e4>)
 800721e:	fba3 2302 	umull	r2, r3, r3, r2
 8007222:	095b      	lsrs	r3, r3, #5
 8007224:	011c      	lsls	r4, r3, #4
 8007226:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800722a:	2200      	movs	r2, #0
 800722c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007230:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007234:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007238:	4642      	mov	r2, r8
 800723a:	464b      	mov	r3, r9
 800723c:	1891      	adds	r1, r2, r2
 800723e:	61b9      	str	r1, [r7, #24]
 8007240:	415b      	adcs	r3, r3
 8007242:	61fb      	str	r3, [r7, #28]
 8007244:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007248:	4641      	mov	r1, r8
 800724a:	1851      	adds	r1, r2, r1
 800724c:	6139      	str	r1, [r7, #16]
 800724e:	4649      	mov	r1, r9
 8007250:	414b      	adcs	r3, r1
 8007252:	617b      	str	r3, [r7, #20]
 8007254:	f04f 0200 	mov.w	r2, #0
 8007258:	f04f 0300 	mov.w	r3, #0
 800725c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007260:	4659      	mov	r1, fp
 8007262:	00cb      	lsls	r3, r1, #3
 8007264:	4651      	mov	r1, sl
 8007266:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800726a:	4651      	mov	r1, sl
 800726c:	00ca      	lsls	r2, r1, #3
 800726e:	4610      	mov	r0, r2
 8007270:	4619      	mov	r1, r3
 8007272:	4603      	mov	r3, r0
 8007274:	4642      	mov	r2, r8
 8007276:	189b      	adds	r3, r3, r2
 8007278:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800727c:	464b      	mov	r3, r9
 800727e:	460a      	mov	r2, r1
 8007280:	eb42 0303 	adc.w	r3, r2, r3
 8007284:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	67bb      	str	r3, [r7, #120]	; 0x78
 8007292:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007294:	f04f 0200 	mov.w	r2, #0
 8007298:	f04f 0300 	mov.w	r3, #0
 800729c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80072a0:	4649      	mov	r1, r9
 80072a2:	008b      	lsls	r3, r1, #2
 80072a4:	4641      	mov	r1, r8
 80072a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072aa:	4641      	mov	r1, r8
 80072ac:	008a      	lsls	r2, r1, #2
 80072ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80072b2:	f7f8 ff95 	bl	80001e0 <__aeabi_uldivmod>
 80072b6:	4602      	mov	r2, r0
 80072b8:	460b      	mov	r3, r1
 80072ba:	4b39      	ldr	r3, [pc, #228]	; (80073a0 <UART_SetConfig+0x4e4>)
 80072bc:	fba3 1302 	umull	r1, r3, r3, r2
 80072c0:	095b      	lsrs	r3, r3, #5
 80072c2:	2164      	movs	r1, #100	; 0x64
 80072c4:	fb01 f303 	mul.w	r3, r1, r3
 80072c8:	1ad3      	subs	r3, r2, r3
 80072ca:	011b      	lsls	r3, r3, #4
 80072cc:	3332      	adds	r3, #50	; 0x32
 80072ce:	4a34      	ldr	r2, [pc, #208]	; (80073a0 <UART_SetConfig+0x4e4>)
 80072d0:	fba2 2303 	umull	r2, r3, r2, r3
 80072d4:	095b      	lsrs	r3, r3, #5
 80072d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072da:	441c      	add	r4, r3
 80072dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072e0:	2200      	movs	r2, #0
 80072e2:	673b      	str	r3, [r7, #112]	; 0x70
 80072e4:	677a      	str	r2, [r7, #116]	; 0x74
 80072e6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80072ea:	4642      	mov	r2, r8
 80072ec:	464b      	mov	r3, r9
 80072ee:	1891      	adds	r1, r2, r2
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	415b      	adcs	r3, r3
 80072f4:	60fb      	str	r3, [r7, #12]
 80072f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072fa:	4641      	mov	r1, r8
 80072fc:	1851      	adds	r1, r2, r1
 80072fe:	6039      	str	r1, [r7, #0]
 8007300:	4649      	mov	r1, r9
 8007302:	414b      	adcs	r3, r1
 8007304:	607b      	str	r3, [r7, #4]
 8007306:	f04f 0200 	mov.w	r2, #0
 800730a:	f04f 0300 	mov.w	r3, #0
 800730e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007312:	4659      	mov	r1, fp
 8007314:	00cb      	lsls	r3, r1, #3
 8007316:	4651      	mov	r1, sl
 8007318:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800731c:	4651      	mov	r1, sl
 800731e:	00ca      	lsls	r2, r1, #3
 8007320:	4610      	mov	r0, r2
 8007322:	4619      	mov	r1, r3
 8007324:	4603      	mov	r3, r0
 8007326:	4642      	mov	r2, r8
 8007328:	189b      	adds	r3, r3, r2
 800732a:	66bb      	str	r3, [r7, #104]	; 0x68
 800732c:	464b      	mov	r3, r9
 800732e:	460a      	mov	r2, r1
 8007330:	eb42 0303 	adc.w	r3, r2, r3
 8007334:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	663b      	str	r3, [r7, #96]	; 0x60
 8007340:	667a      	str	r2, [r7, #100]	; 0x64
 8007342:	f04f 0200 	mov.w	r2, #0
 8007346:	f04f 0300 	mov.w	r3, #0
 800734a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800734e:	4649      	mov	r1, r9
 8007350:	008b      	lsls	r3, r1, #2
 8007352:	4641      	mov	r1, r8
 8007354:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007358:	4641      	mov	r1, r8
 800735a:	008a      	lsls	r2, r1, #2
 800735c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007360:	f7f8 ff3e 	bl	80001e0 <__aeabi_uldivmod>
 8007364:	4602      	mov	r2, r0
 8007366:	460b      	mov	r3, r1
 8007368:	4b0d      	ldr	r3, [pc, #52]	; (80073a0 <UART_SetConfig+0x4e4>)
 800736a:	fba3 1302 	umull	r1, r3, r3, r2
 800736e:	095b      	lsrs	r3, r3, #5
 8007370:	2164      	movs	r1, #100	; 0x64
 8007372:	fb01 f303 	mul.w	r3, r1, r3
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	011b      	lsls	r3, r3, #4
 800737a:	3332      	adds	r3, #50	; 0x32
 800737c:	4a08      	ldr	r2, [pc, #32]	; (80073a0 <UART_SetConfig+0x4e4>)
 800737e:	fba2 2303 	umull	r2, r3, r2, r3
 8007382:	095b      	lsrs	r3, r3, #5
 8007384:	f003 020f 	and.w	r2, r3, #15
 8007388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4422      	add	r2, r4
 8007390:	609a      	str	r2, [r3, #8]
}
 8007392:	bf00      	nop
 8007394:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007398:	46bd      	mov	sp, r7
 800739a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800739e:	bf00      	nop
 80073a0:	51eb851f 	.word	0x51eb851f

080073a4 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d101      	bne.n	80073b6 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	e025      	b.n	8007402 <HAL_WWDG_Init+0x5e>
  assert_param(IS_WWDG_COUNTER(hwwdg->Init.Counter));
  assert_param(IS_WWDG_EWI_MODE(hwwdg->Init.EWIMode));

#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
  /* Reset Callback pointers */
  if (hwwdg->EwiCallback == NULL)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d102      	bne.n	80073c4 <HAL_WWDG_Init+0x20>
  {
    hwwdg->EwiCallback = HAL_WWDG_EarlyWakeupCallback;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a12      	ldr	r2, [pc, #72]	; (800740c <HAL_WWDG_Init+0x68>)
 80073c2:	615a      	str	r2, [r3, #20]
  }

  if (hwwdg->MspInitCallback == NULL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d102      	bne.n	80073d2 <HAL_WWDG_Init+0x2e>
  {
    hwwdg->MspInitCallback = HAL_WWDG_MspInit;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a10      	ldr	r2, [pc, #64]	; (8007410 <HAL_WWDG_Init+0x6c>)
 80073d0:	619a      	str	r2, [r3, #24]
  }

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	4798      	blx	r3
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	68da      	ldr	r2, [r3, #12]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80073e6:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	691a      	ldr	r2, [r3, #16]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	ea42 0103 	orr.w	r1, r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	689a      	ldr	r2, [r3, #8]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	430a      	orrs	r2, r1
 80073fe:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3708      	adds	r7, #8
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	0800c45b 	.word	0x0800c45b
 8007410:	08002465 	.word	0x08002465

08007414 <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	68d2      	ldr	r2, [r2, #12]
 8007424:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007446:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800744a:	d10f      	bne.n	800746c <HAL_WWDG_IRQHandler+0x38>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	f003 0301 	and.w	r3, r3, #1
 8007456:	2b01      	cmp	r3, #1
 8007458:	d108      	bne.n	800746c <HAL_WWDG_IRQHandler+0x38>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f06f 0201 	mvn.w	r2, #1
 8007462:	609a      	str	r2, [r3, #8]

#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	4798      	blx	r3
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 800746c:	bf00      	nop
 800746e:	3708      	adds	r7, #8
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <HAL_ADC_ErrorCallback>:
void Adc_MainFunction();
StdReturnType Adc_Init();
StdReturnType Adc_DeInit();

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]

	uint32 receivedStatus = HAL_ADC_GetError(&hadc1);
 800747c:	4818      	ldr	r0, [pc, #96]	; (80074e0 <HAL_ADC_ErrorCallback+0x6c>)
 800747e:	f7fb fd03 	bl	8002e88 <HAL_ADC_GetError>
 8007482:	60f8      	str	r0, [r7, #12]

	switch(receivedStatus)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2b04      	cmp	r3, #4
 8007488:	d824      	bhi.n	80074d4 <HAL_ADC_ErrorCallback+0x60>
 800748a:	a201      	add	r2, pc, #4	; (adr r2, 8007490 <HAL_ADC_ErrorCallback+0x1c>)
 800748c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007490:	080074d5 	.word	0x080074d5
 8007494:	080074a5 	.word	0x080074a5
 8007498:	080074b5 	.word	0x080074b5
 800749c:	080074d5 	.word	0x080074d5
 80074a0:	080074c5 	.word	0x080074c5

			break;

		case HAL_ADC_ERROR_INTERNAL:

			SystemManager_Fault.fault[ADC_ERROR_INTERNAL] = ADC_ERROR_INTERNAL;
 80074a4:	4b0f      	ldr	r3, [pc, #60]	; (80074e4 <HAL_ADC_ErrorCallback+0x70>)
 80074a6:	220e      	movs	r2, #14
 80074a8:	639a      	str	r2, [r3, #56]	; 0x38

			Adc_DeInit();
 80074aa:	f000 f833 	bl	8007514 <Adc_DeInit>
			Adc_Init();
 80074ae:	f000 f83b 	bl	8007528 <Adc_Init>

			break;
 80074b2:	e010      	b.n	80074d6 <HAL_ADC_ErrorCallback+0x62>

		case HAL_ADC_ERROR_OVR:

			SystemManager_Fault.fault[ADC_ERROR_OVR] = ADC_ERROR_OVR;
 80074b4:	4b0b      	ldr	r3, [pc, #44]	; (80074e4 <HAL_ADC_ErrorCallback+0x70>)
 80074b6:	220f      	movs	r2, #15
 80074b8:	63da      	str	r2, [r3, #60]	; 0x3c

			Adc_DeInit();
 80074ba:	f000 f82b 	bl	8007514 <Adc_DeInit>
			Adc_Init();
 80074be:	f000 f833 	bl	8007528 <Adc_Init>

			break;
 80074c2:	e008      	b.n	80074d6 <HAL_ADC_ErrorCallback+0x62>

		case HAL_ADC_ERROR_DMA:

			SystemManager_Fault.fault[ADC_ERROR_DMA] = ADC_ERROR_DMA;
 80074c4:	4b07      	ldr	r3, [pc, #28]	; (80074e4 <HAL_ADC_ErrorCallback+0x70>)
 80074c6:	2210      	movs	r2, #16
 80074c8:	641a      	str	r2, [r3, #64]	; 0x40

			Adc_DeInit();
 80074ca:	f000 f823 	bl	8007514 <Adc_DeInit>
			Adc_Init();
 80074ce:	f000 f82b 	bl	8007528 <Adc_Init>

			break;
 80074d2:	e000      	b.n	80074d6 <HAL_ADC_ErrorCallback+0x62>

		default:

			break;
 80074d4:	bf00      	nop

	}

}
 80074d6:	bf00      	nop
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	200000d8 	.word	0x200000d8
 80074e4:	20007a8c 	.word	0x20007a8c

080074e8 <Adc_MainFunction>:

void Adc_MainFunction()
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0

	uint32 statusValue = STD_LOW;
 80074ee:	2300      	movs	r3, #0
 80074f0:	607b      	str	r3, [r7, #4]

	statusValue = HAL_ADC_GetState(&hadc1);
 80074f2:	4807      	ldr	r0, [pc, #28]	; (8007510 <Adc_MainFunction+0x28>)
 80074f4:	f7fb fcbc 	bl	8002e70 <HAL_ADC_GetState>
 80074f8:	6078      	str	r0, [r7, #4]

	if(statusValue == HAL_ADC_STATE_ERROR)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2b10      	cmp	r3, #16
 80074fe:	d102      	bne.n	8007506 <Adc_MainFunction+0x1e>
	{

		HAL_ADC_ErrorCallback(&hadc1);
 8007500:	4803      	ldr	r0, [pc, #12]	; (8007510 <Adc_MainFunction+0x28>)
 8007502:	f7ff ffb7 	bl	8007474 <HAL_ADC_ErrorCallback>

		/* do nothing */

	}

}
 8007506:	bf00      	nop
 8007508:	3708      	adds	r7, #8
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	200000d8 	.word	0x200000d8

08007514 <Adc_DeInit>:

StdReturnType Adc_DeInit()
{
 8007514:	b580      	push	{r7, lr}
 8007516:	af00      	add	r7, sp, #0

	HAL_ADC_DeInit(&hadc1);
 8007518:	4802      	ldr	r0, [pc, #8]	; (8007524 <Adc_DeInit+0x10>)
 800751a:	f7fb f919 	bl	8002750 <HAL_ADC_DeInit>

	return E_OK;
 800751e:	2300      	movs	r3, #0

}
 8007520:	4618      	mov	r0, r3
 8007522:	bd80      	pop	{r7, pc}
 8007524:	200000d8 	.word	0x200000d8

08007528 <Adc_Init>:

StdReturnType Adc_Init()
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = {0};
 800752e:	463b      	mov	r3, r7
 8007530:	2200      	movs	r2, #0
 8007532:	601a      	str	r2, [r3, #0]
 8007534:	605a      	str	r2, [r3, #4]
 8007536:	609a      	str	r2, [r3, #8]
 8007538:	60da      	str	r2, [r3, #12]

	hadc1.Instance = ADC1;
 800753a:	4b2a      	ldr	r3, [pc, #168]	; (80075e4 <Adc_Init+0xbc>)
 800753c:	4a2a      	ldr	r2, [pc, #168]	; (80075e8 <Adc_Init+0xc0>)
 800753e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007540:	4b28      	ldr	r3, [pc, #160]	; (80075e4 <Adc_Init+0xbc>)
 8007542:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007546:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007548:	4b26      	ldr	r3, [pc, #152]	; (80075e4 <Adc_Init+0xbc>)
 800754a:	2200      	movs	r2, #0
 800754c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 800754e:	4b25      	ldr	r3, [pc, #148]	; (80075e4 <Adc_Init+0xbc>)
 8007550:	2201      	movs	r2, #1
 8007552:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8007554:	4b23      	ldr	r3, [pc, #140]	; (80075e4 <Adc_Init+0xbc>)
 8007556:	2201      	movs	r2, #1
 8007558:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800755a:	4b22      	ldr	r3, [pc, #136]	; (80075e4 <Adc_Init+0xbc>)
 800755c:	2200      	movs	r2, #0
 800755e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007562:	4b20      	ldr	r3, [pc, #128]	; (80075e4 <Adc_Init+0xbc>)
 8007564:	2200      	movs	r2, #0
 8007566:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007568:	4b1e      	ldr	r3, [pc, #120]	; (80075e4 <Adc_Init+0xbc>)
 800756a:	4a20      	ldr	r2, [pc, #128]	; (80075ec <Adc_Init+0xc4>)
 800756c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800756e:	4b1d      	ldr	r3, [pc, #116]	; (80075e4 <Adc_Init+0xbc>)
 8007570:	2200      	movs	r2, #0
 8007572:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 8007574:	4b1b      	ldr	r3, [pc, #108]	; (80075e4 <Adc_Init+0xbc>)
 8007576:	2202      	movs	r2, #2
 8007578:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800757a:	4b1a      	ldr	r3, [pc, #104]	; (80075e4 <Adc_Init+0xbc>)
 800757c:	2200      	movs	r2, #0
 800757e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007582:	4b18      	ldr	r3, [pc, #96]	; (80075e4 <Adc_Init+0xbc>)
 8007584:	2201      	movs	r2, #1
 8007586:	615a      	str	r2, [r3, #20]

	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007588:	4816      	ldr	r0, [pc, #88]	; (80075e4 <Adc_Init+0xbc>)
 800758a:	f7fb f87b 	bl	8002684 <HAL_ADC_Init>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d002      	beq.n	800759a <Adc_Init+0x72>
	{

		HAL_ADC_ErrorCallback(&hadc1);
 8007594:	4813      	ldr	r0, [pc, #76]	; (80075e4 <Adc_Init+0xbc>)
 8007596:	f7ff ff6d 	bl	8007474 <HAL_ADC_ErrorCallback>
		/* do nothing */

	}


	sConfig.Channel = ADC_CHANNEL_6;
 800759a:	2306      	movs	r3, #6
 800759c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800759e:	2301      	movs	r3, #1
 80075a0:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80075a2:	2300      	movs	r3, #0
 80075a4:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80075a6:	463b      	mov	r3, r7
 80075a8:	4619      	mov	r1, r3
 80075aa:	480e      	ldr	r0, [pc, #56]	; (80075e4 <Adc_Init+0xbc>)
 80075ac:	f7fb fb2e 	bl	8002c0c <HAL_ADC_ConfigChannel>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d002      	beq.n	80075bc <Adc_Init+0x94>
	{

		HAL_ADC_ErrorCallback(&hadc1);
 80075b6:	480b      	ldr	r0, [pc, #44]	; (80075e4 <Adc_Init+0xbc>)
 80075b8:	f7ff ff5c 	bl	8007474 <HAL_ADC_ErrorCallback>
		/* do nothing */

	}


	sConfig.Channel = ADC_CHANNEL_15;
 80075bc:	230f      	movs	r3, #15
 80075be:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 80075c0:	2302      	movs	r3, #2
 80075c2:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80075c4:	463b      	mov	r3, r7
 80075c6:	4619      	mov	r1, r3
 80075c8:	4806      	ldr	r0, [pc, #24]	; (80075e4 <Adc_Init+0xbc>)
 80075ca:	f7fb fb1f 	bl	8002c0c <HAL_ADC_ConfigChannel>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d002      	beq.n	80075da <Adc_Init+0xb2>
	{

		HAL_ADC_ErrorCallback(&hadc1);
 80075d4:	4803      	ldr	r0, [pc, #12]	; (80075e4 <Adc_Init+0xbc>)
 80075d6:	f7ff ff4d 	bl	8007474 <HAL_ADC_ErrorCallback>

		/* do nothing */

	}

	return E_OK;
 80075da:	2300      	movs	r3, #0

}
 80075dc:	4618      	mov	r0, r3
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	200000d8 	.word	0x200000d8
 80075e8:	40012000 	.word	0x40012000
 80075ec:	0f000001 	.word	0x0f000001

080075f0 <Port_Init>:

StdReturnType Port_Init();
StdReturnType Port_DeInit();

StdReturnType Port_Init()
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	af00      	add	r7, sp, #0

	MX_GPIO_Init();
 80075f4:	f7fa fb5a 	bl	8001cac <MX_GPIO_Init>

	return E_OK;
 80075f8:	2300      	movs	r3, #0

}
 80075fa:	4618      	mov	r0, r3
 80075fc:	bd80      	pop	{r7, pc}
	...

08007600 <Spi_MainFunction>:
StdReturnType Spi_Init(uint8 SpiChannel);
StdReturnType Spi_DeInit(uint8 SpiChanne);
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi);

void Spi_MainFunction()
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0

	uint32 localStateChannelOne = HAL_SPI_GetState(&hspi1);
 8007606:	4807      	ldr	r0, [pc, #28]	; (8007624 <Spi_MainFunction+0x24>)
 8007608:	f7fd ff2e 	bl	8005468 <HAL_SPI_GetState>
 800760c:	4603      	mov	r3, r0
 800760e:	607b      	str	r3, [r7, #4]
	//uint32 localStateChannelTwo = HAL_SPI_GetState(&hspi2);

	if(localStateChannelOne == HAL_SPI_STATE_ERROR)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2b06      	cmp	r3, #6
 8007614:	d102      	bne.n	800761c <Spi_MainFunction+0x1c>
	{

		HAL_SPI_ErrorCallback(&hspi1);
 8007616:	4803      	ldr	r0, [pc, #12]	; (8007624 <Spi_MainFunction+0x24>)
 8007618:	f000 f85a 	bl	80076d0 <HAL_SPI_ErrorCallback>

		/* do nothing */

	}

}
 800761c:	bf00      	nop
 800761e:	3708      	adds	r7, #8
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	200001c0 	.word	0x200001c0

08007628 <Spi_Init>:

StdReturnType Spi_Init(uint8 SpiChannel)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	4603      	mov	r3, r0
 8007630:	71fb      	strb	r3, [r7, #7]

	if(SpiChannel == 1)
 8007632:	79fb      	ldrb	r3, [r7, #7]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d12f      	bne.n	8007698 <Spi_Init+0x70>
	{

		hspi1.Instance = SPI1;
 8007638:	4b1a      	ldr	r3, [pc, #104]	; (80076a4 <Spi_Init+0x7c>)
 800763a:	4a1b      	ldr	r2, [pc, #108]	; (80076a8 <Spi_Init+0x80>)
 800763c:	601a      	str	r2, [r3, #0]
		hspi1.Init.Mode = SPI_MODE_MASTER;
 800763e:	4b19      	ldr	r3, [pc, #100]	; (80076a4 <Spi_Init+0x7c>)
 8007640:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007644:	605a      	str	r2, [r3, #4]
		hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007646:	4b17      	ldr	r3, [pc, #92]	; (80076a4 <Spi_Init+0x7c>)
 8007648:	2200      	movs	r2, #0
 800764a:	609a      	str	r2, [r3, #8]
		hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800764c:	4b15      	ldr	r3, [pc, #84]	; (80076a4 <Spi_Init+0x7c>)
 800764e:	2200      	movs	r2, #0
 8007650:	60da      	str	r2, [r3, #12]
		hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007652:	4b14      	ldr	r3, [pc, #80]	; (80076a4 <Spi_Init+0x7c>)
 8007654:	2200      	movs	r2, #0
 8007656:	611a      	str	r2, [r3, #16]
		hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007658:	4b12      	ldr	r3, [pc, #72]	; (80076a4 <Spi_Init+0x7c>)
 800765a:	2200      	movs	r2, #0
 800765c:	615a      	str	r2, [r3, #20]
		hspi1.Init.NSS = SPI_NSS_SOFT;
 800765e:	4b11      	ldr	r3, [pc, #68]	; (80076a4 <Spi_Init+0x7c>)
 8007660:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007664:	619a      	str	r2, [r3, #24]
		hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007666:	4b0f      	ldr	r3, [pc, #60]	; (80076a4 <Spi_Init+0x7c>)
 8007668:	2200      	movs	r2, #0
 800766a:	61da      	str	r2, [r3, #28]
		hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800766c:	4b0d      	ldr	r3, [pc, #52]	; (80076a4 <Spi_Init+0x7c>)
 800766e:	2200      	movs	r2, #0
 8007670:	621a      	str	r2, [r3, #32]
		hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007672:	4b0c      	ldr	r3, [pc, #48]	; (80076a4 <Spi_Init+0x7c>)
 8007674:	2200      	movs	r2, #0
 8007676:	625a      	str	r2, [r3, #36]	; 0x24
		hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 8007678:	4b0a      	ldr	r3, [pc, #40]	; (80076a4 <Spi_Init+0x7c>)
 800767a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800767e:	629a      	str	r2, [r3, #40]	; 0x28
		hspi1.Init.CRCPolynomial = 10;
 8007680:	4b08      	ldr	r3, [pc, #32]	; (80076a4 <Spi_Init+0x7c>)
 8007682:	220a      	movs	r2, #10
 8007684:	62da      	str	r2, [r3, #44]	; 0x2c

		if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007686:	4807      	ldr	r0, [pc, #28]	; (80076a4 <Spi_Init+0x7c>)
 8007688:	f7fd fcc0 	bl	800500c <HAL_SPI_Init>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d002      	beq.n	8007698 <Spi_Init+0x70>
		{

			HAL_SPI_ErrorCallback(&hspi1);
 8007692:	4804      	ldr	r0, [pc, #16]	; (80076a4 <Spi_Init+0x7c>)
 8007694:	f000 f81c 	bl	80076d0 <HAL_SPI_ErrorCallback>
//
//		/* do nothing */
//
//	}

	return E_OK;
 8007698:	2300      	movs	r3, #0

}
 800769a:	4618      	mov	r0, r3
 800769c:	3708      	adds	r7, #8
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	200001c0 	.word	0x200001c0
 80076a8:	40013000 	.word	0x40013000

080076ac <Spi_DeInit>:

StdReturnType Spi_DeInit(uint8 SpiChannel)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	4603      	mov	r3, r0
 80076b4:	71fb      	strb	r3, [r7, #7]

	if(SpiChannel == 1)
 80076b6:	79fb      	ldrb	r3, [r7, #7]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d102      	bne.n	80076c2 <Spi_DeInit+0x16>
	{

		HAL_SPI_DeInit(&hspi1);
 80076bc:	4803      	ldr	r0, [pc, #12]	; (80076cc <Spi_DeInit+0x20>)
 80076be:	f7fd fd61 	bl	8005184 <HAL_SPI_DeInit>

		/* do nothing */

	}

	return E_OK;
 80076c2:	2300      	movs	r3, #0

}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3708      	adds	r7, #8
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	200001c0 	.word	0x200001c0

080076d0 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]

	uint32 receivedStatus = HAL_SPI_GetError(hspi);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f7fd fed3 	bl	8005484 <HAL_SPI_GetError>
 80076de:	60f8      	str	r0, [r7, #12]

	if(hspi->Instance == SPI1)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a87      	ldr	r2, [pc, #540]	; (8007904 <HAL_SPI_ErrorCallback+0x234>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	f040 8087 	bne.w	80077fa <HAL_SPI_ErrorCallback+0x12a>
	{

		switch(receivedStatus)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2b20      	cmp	r3, #32
 80076f0:	d848      	bhi.n	8007784 <HAL_SPI_ErrorCallback+0xb4>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2b20      	cmp	r3, #32
 80076f6:	f200 80fd 	bhi.w	80078f4 <HAL_SPI_ErrorCallback+0x224>
 80076fa:	a201      	add	r2, pc, #4	; (adr r2, 8007700 <HAL_SPI_ErrorCallback+0x30>)
 80076fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007700:	080078f5 	.word	0x080078f5
 8007704:	0800778d 	.word	0x0800778d
 8007708:	080077af 	.word	0x080077af
 800770c:	080078f5 	.word	0x080078f5
 8007710:	080077bd 	.word	0x080077bd
 8007714:	080078f5 	.word	0x080078f5
 8007718:	080078f5 	.word	0x080078f5
 800771c:	080078f5 	.word	0x080078f5
 8007720:	080077a1 	.word	0x080077a1
 8007724:	080078f5 	.word	0x080078f5
 8007728:	080078f5 	.word	0x080078f5
 800772c:	080078f5 	.word	0x080078f5
 8007730:	080078f5 	.word	0x080078f5
 8007734:	080078f5 	.word	0x080078f5
 8007738:	080078f5 	.word	0x080078f5
 800773c:	080078f5 	.word	0x080078f5
 8007740:	080077cb 	.word	0x080077cb
 8007744:	080078f5 	.word	0x080078f5
 8007748:	080078f5 	.word	0x080078f5
 800774c:	080078f5 	.word	0x080078f5
 8007750:	080078f5 	.word	0x080078f5
 8007754:	080078f5 	.word	0x080078f5
 8007758:	080078f5 	.word	0x080078f5
 800775c:	080078f5 	.word	0x080078f5
 8007760:	080078f5 	.word	0x080078f5
 8007764:	080078f5 	.word	0x080078f5
 8007768:	080078f5 	.word	0x080078f5
 800776c:	080078f5 	.word	0x080078f5
 8007770:	080078f5 	.word	0x080078f5
 8007774:	080078f5 	.word	0x080078f5
 8007778:	080078f5 	.word	0x080078f5
 800777c:	080078f5 	.word	0x080078f5
 8007780:	080077d9 	.word	0x080077d9
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2b40      	cmp	r3, #64	; 0x40
 8007788:	d02d      	beq.n	80077e6 <HAL_SPI_ErrorCallback+0x116>

				break;

			default:

				break;
 800778a:	e0b3      	b.n	80078f4 <HAL_SPI_ErrorCallback+0x224>
				SystemManager_Fault.fault[SPI_ERROR_MODF] = SPI_ERROR_MODF;
 800778c:	4b5e      	ldr	r3, [pc, #376]	; (8007908 <HAL_SPI_ErrorCallback+0x238>)
 800778e:	2211      	movs	r2, #17
 8007790:	645a      	str	r2, [r3, #68]	; 0x44
				Spi_DeInit(SPI_CHANNEL_ONE);
 8007792:	2001      	movs	r0, #1
 8007794:	f7ff ff8a 	bl	80076ac <Spi_DeInit>
				Spi_Init(SPI_CHANNEL_ONE);
 8007798:	2001      	movs	r0, #1
 800779a:	f7ff ff45 	bl	8007628 <Spi_Init>
				break;
 800779e:	e0ac      	b.n	80078fa <HAL_SPI_ErrorCallback+0x22a>
				SystemManager_Fault.fault[SPI_ERROR_FRE] = SPI_ERROR_FRE;
 80077a0:	4b59      	ldr	r3, [pc, #356]	; (8007908 <HAL_SPI_ErrorCallback+0x238>)
 80077a2:	2212      	movs	r2, #18
 80077a4:	649a      	str	r2, [r3, #72]	; 0x48
				HAL_SPI_Abort_IT(&hspi1);
 80077a6:	4859      	ldr	r0, [pc, #356]	; (800790c <HAL_SPI_ErrorCallback+0x23c>)
 80077a8:	f7fd fd1e 	bl	80051e8 <HAL_SPI_Abort_IT>
				break;
 80077ac:	e0a5      	b.n	80078fa <HAL_SPI_ErrorCallback+0x22a>
				SystemManager_Fault.fault[SPI_ERROR_CRC] = SPI_ERROR_CRC;
 80077ae:	4b56      	ldr	r3, [pc, #344]	; (8007908 <HAL_SPI_ErrorCallback+0x238>)
 80077b0:	2213      	movs	r2, #19
 80077b2:	64da      	str	r2, [r3, #76]	; 0x4c
				HAL_SPI_Abort_IT(&hspi1);
 80077b4:	4855      	ldr	r0, [pc, #340]	; (800790c <HAL_SPI_ErrorCallback+0x23c>)
 80077b6:	f7fd fd17 	bl	80051e8 <HAL_SPI_Abort_IT>
				break;
 80077ba:	e09e      	b.n	80078fa <HAL_SPI_ErrorCallback+0x22a>
				SystemManager_Fault.fault[SPI_ERROR_OVR] = SPI_ERROR_OVR;
 80077bc:	4b52      	ldr	r3, [pc, #328]	; (8007908 <HAL_SPI_ErrorCallback+0x238>)
 80077be:	2214      	movs	r2, #20
 80077c0:	651a      	str	r2, [r3, #80]	; 0x50
				HAL_SPI_Abort_IT(&hspi1);
 80077c2:	4852      	ldr	r0, [pc, #328]	; (800790c <HAL_SPI_ErrorCallback+0x23c>)
 80077c4:	f7fd fd10 	bl	80051e8 <HAL_SPI_Abort_IT>
				break;
 80077c8:	e097      	b.n	80078fa <HAL_SPI_ErrorCallback+0x22a>
				SystemManager_Fault.fault[SPI_ERROR_DMA] = SPI_ERROR_DMA;
 80077ca:	4b4f      	ldr	r3, [pc, #316]	; (8007908 <HAL_SPI_ErrorCallback+0x238>)
 80077cc:	2215      	movs	r2, #21
 80077ce:	655a      	str	r2, [r3, #84]	; 0x54
				HAL_SPI_Abort_IT(&hspi1);
 80077d0:	484e      	ldr	r0, [pc, #312]	; (800790c <HAL_SPI_ErrorCallback+0x23c>)
 80077d2:	f7fd fd09 	bl	80051e8 <HAL_SPI_Abort_IT>
				break;
 80077d6:	e090      	b.n	80078fa <HAL_SPI_ErrorCallback+0x22a>
				SystemManager_Fault.fault[SPI_ERROR_FLAG] = SPI_ERROR_FLAG;
 80077d8:	4b4b      	ldr	r3, [pc, #300]	; (8007908 <HAL_SPI_ErrorCallback+0x238>)
 80077da:	2216      	movs	r2, #22
 80077dc:	659a      	str	r2, [r3, #88]	; 0x58
				HAL_SPI_Abort_IT(&hspi1);
 80077de:	484b      	ldr	r0, [pc, #300]	; (800790c <HAL_SPI_ErrorCallback+0x23c>)
 80077e0:	f7fd fd02 	bl	80051e8 <HAL_SPI_Abort_IT>
				break;
 80077e4:	e089      	b.n	80078fa <HAL_SPI_ErrorCallback+0x22a>
				SystemManager_Fault.fault[SPI_ERROR_ABORT] = SPI_ERROR_ABORT;
 80077e6:	4b48      	ldr	r3, [pc, #288]	; (8007908 <HAL_SPI_ErrorCallback+0x238>)
 80077e8:	2217      	movs	r2, #23
 80077ea:	65da      	str	r2, [r3, #92]	; 0x5c
				Spi_DeInit(SPI_CHANNEL_ONE);
 80077ec:	2001      	movs	r0, #1
 80077ee:	f7ff ff5d 	bl	80076ac <Spi_DeInit>
				Spi_Init(SPI_CHANNEL_ONE);
 80077f2:	2001      	movs	r0, #1
 80077f4:	f7ff ff18 	bl	8007628 <Spi_Init>
				break;
 80077f8:	e07f      	b.n	80078fa <HAL_SPI_ErrorCallback+0x22a>

		}

	}
	else if(hspi->Instance == SPI2)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a44      	ldr	r2, [pc, #272]	; (8007910 <HAL_SPI_ErrorCallback+0x240>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d17a      	bne.n	80078fa <HAL_SPI_ErrorCallback+0x22a>
	{

		switch(receivedStatus)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2b20      	cmp	r3, #32
 8007808:	d848      	bhi.n	800789c <HAL_SPI_ErrorCallback+0x1cc>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2b20      	cmp	r3, #32
 800780e:	d873      	bhi.n	80078f8 <HAL_SPI_ErrorCallback+0x228>
 8007810:	a201      	add	r2, pc, #4	; (adr r2, 8007818 <HAL_SPI_ErrorCallback+0x148>)
 8007812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007816:	bf00      	nop
 8007818:	080078f9 	.word	0x080078f9
 800781c:	080078a5 	.word	0x080078a5
 8007820:	080078c1 	.word	0x080078c1
 8007824:	080078f9 	.word	0x080078f9
 8007828:	080078c9 	.word	0x080078c9
 800782c:	080078f9 	.word	0x080078f9
 8007830:	080078f9 	.word	0x080078f9
 8007834:	080078f9 	.word	0x080078f9
 8007838:	080078b9 	.word	0x080078b9
 800783c:	080078f9 	.word	0x080078f9
 8007840:	080078f9 	.word	0x080078f9
 8007844:	080078f9 	.word	0x080078f9
 8007848:	080078f9 	.word	0x080078f9
 800784c:	080078f9 	.word	0x080078f9
 8007850:	080078f9 	.word	0x080078f9
 8007854:	080078f9 	.word	0x080078f9
 8007858:	080078d1 	.word	0x080078d1
 800785c:	080078f9 	.word	0x080078f9
 8007860:	080078f9 	.word	0x080078f9
 8007864:	080078f9 	.word	0x080078f9
 8007868:	080078f9 	.word	0x080078f9
 800786c:	080078f9 	.word	0x080078f9
 8007870:	080078f9 	.word	0x080078f9
 8007874:	080078f9 	.word	0x080078f9
 8007878:	080078f9 	.word	0x080078f9
 800787c:	080078f9 	.word	0x080078f9
 8007880:	080078f9 	.word	0x080078f9
 8007884:	080078f9 	.word	0x080078f9
 8007888:	080078f9 	.word	0x080078f9
 800788c:	080078f9 	.word	0x080078f9
 8007890:	080078f9 	.word	0x080078f9
 8007894:	080078f9 	.word	0x080078f9
 8007898:	080078d9 	.word	0x080078d9
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2b40      	cmp	r3, #64	; 0x40
 80078a0:	d01e      	beq.n	80078e0 <HAL_SPI_ErrorCallback+0x210>

				break;

			default:

				break;
 80078a2:	e029      	b.n	80078f8 <HAL_SPI_ErrorCallback+0x228>
				SystemManager_Fault.fault[SPI_ERROR_MODF] = SPI_ERROR_MODF;
 80078a4:	4b18      	ldr	r3, [pc, #96]	; (8007908 <HAL_SPI_ErrorCallback+0x238>)
 80078a6:	2211      	movs	r2, #17
 80078a8:	645a      	str	r2, [r3, #68]	; 0x44
				Spi_DeInit(SPI_CHANNEL_TWO);
 80078aa:	2002      	movs	r0, #2
 80078ac:	f7ff fefe 	bl	80076ac <Spi_DeInit>
				Spi_Init(SPI_CHANNEL_TWO);
 80078b0:	2002      	movs	r0, #2
 80078b2:	f7ff feb9 	bl	8007628 <Spi_Init>
				break;
 80078b6:	e020      	b.n	80078fa <HAL_SPI_ErrorCallback+0x22a>
				SystemManager_Fault.fault[SPI_ERROR_FRE] = SPI_ERROR_FRE;
 80078b8:	4b13      	ldr	r3, [pc, #76]	; (8007908 <HAL_SPI_ErrorCallback+0x238>)
 80078ba:	2212      	movs	r2, #18
 80078bc:	649a      	str	r2, [r3, #72]	; 0x48
				break;
 80078be:	e01c      	b.n	80078fa <HAL_SPI_ErrorCallback+0x22a>
				SystemManager_Fault.fault[SPI_ERROR_CRC] = SPI_ERROR_CRC;
 80078c0:	4b11      	ldr	r3, [pc, #68]	; (8007908 <HAL_SPI_ErrorCallback+0x238>)
 80078c2:	2213      	movs	r2, #19
 80078c4:	64da      	str	r2, [r3, #76]	; 0x4c
				break;
 80078c6:	e018      	b.n	80078fa <HAL_SPI_ErrorCallback+0x22a>
				SystemManager_Fault.fault[SPI_ERROR_OVR] = SPI_ERROR_OVR;
 80078c8:	4b0f      	ldr	r3, [pc, #60]	; (8007908 <HAL_SPI_ErrorCallback+0x238>)
 80078ca:	2214      	movs	r2, #20
 80078cc:	651a      	str	r2, [r3, #80]	; 0x50
				break;
 80078ce:	e014      	b.n	80078fa <HAL_SPI_ErrorCallback+0x22a>
				SystemManager_Fault.fault[SPI_ERROR_DMA] = SPI_ERROR_DMA;
 80078d0:	4b0d      	ldr	r3, [pc, #52]	; (8007908 <HAL_SPI_ErrorCallback+0x238>)
 80078d2:	2215      	movs	r2, #21
 80078d4:	655a      	str	r2, [r3, #84]	; 0x54
				break;
 80078d6:	e010      	b.n	80078fa <HAL_SPI_ErrorCallback+0x22a>
				SystemManager_Fault.fault[SPI_ERROR_FLAG] = SPI_ERROR_FLAG;
 80078d8:	4b0b      	ldr	r3, [pc, #44]	; (8007908 <HAL_SPI_ErrorCallback+0x238>)
 80078da:	2216      	movs	r2, #22
 80078dc:	659a      	str	r2, [r3, #88]	; 0x58
				break;
 80078de:	e00c      	b.n	80078fa <HAL_SPI_ErrorCallback+0x22a>
				SystemManager_Fault.fault[SPI_ERROR_ABORT] = SPI_ERROR_ABORT;
 80078e0:	4b09      	ldr	r3, [pc, #36]	; (8007908 <HAL_SPI_ErrorCallback+0x238>)
 80078e2:	2217      	movs	r2, #23
 80078e4:	65da      	str	r2, [r3, #92]	; 0x5c
				Spi_DeInit(SPI_CHANNEL_TWO);
 80078e6:	2002      	movs	r0, #2
 80078e8:	f7ff fee0 	bl	80076ac <Spi_DeInit>
				Spi_Init(SPI_CHANNEL_TWO);
 80078ec:	2002      	movs	r0, #2
 80078ee:	f7ff fe9b 	bl	8007628 <Spi_Init>
				break;
 80078f2:	e002      	b.n	80078fa <HAL_SPI_ErrorCallback+0x22a>
				break;
 80078f4:	bf00      	nop
 80078f6:	e000      	b.n	80078fa <HAL_SPI_ErrorCallback+0x22a>
				break;
 80078f8:	bf00      	nop

		/* do nothing */

	}

}
 80078fa:	bf00      	nop
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	40013000 	.word	0x40013000
 8007908:	20007a8c 	.word	0x20007a8c
 800790c:	200001c0 	.word	0x200001c0
 8007910:	40003800 	.word	0x40003800

08007914 <Tim_Init>:
void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim);
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
void Tim_MainFunction();

StdReturnType Tim_Init(uint8 TimerChannel)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	4603      	mov	r3, r0
 800791c:	71fb      	strb	r3, [r7, #7]

	switch(TimerChannel)
 800791e:	79fb      	ldrb	r3, [r7, #7]
 8007920:	3b02      	subs	r3, #2
 8007922:	2b09      	cmp	r3, #9
 8007924:	f200 8155 	bhi.w	8007bd2 <Tim_Init+0x2be>
 8007928:	a201      	add	r2, pc, #4	; (adr r2, 8007930 <Tim_Init+0x1c>)
 800792a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800792e:	bf00      	nop
 8007930:	08007959 	.word	0x08007959
 8007934:	080079d5 	.word	0x080079d5
 8007938:	08007a4f 	.word	0x08007a4f
 800793c:	08007ac9 	.word	0x08007ac9
 8007940:	08007bd3 	.word	0x08007bd3
 8007944:	08007bd3 	.word	0x08007bd3
 8007948:	08007bd3 	.word	0x08007bd3
 800794c:	08007b3f 	.word	0x08007b3f
 8007950:	08007bd3 	.word	0x08007bd3
 8007954:	08007b97 	.word	0x08007b97
	{

		case TIMER_TWO:

			htim2.Instance = TIM2;
 8007958:	4ba3      	ldr	r3, [pc, #652]	; (8007be8 <Tim_Init+0x2d4>)
 800795a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800795e:	601a      	str	r2, [r3, #0]
			htim2.Init.Prescaler = 10000-1;
 8007960:	4ba1      	ldr	r3, [pc, #644]	; (8007be8 <Tim_Init+0x2d4>)
 8007962:	f242 720f 	movw	r2, #9999	; 0x270f
 8007966:	605a      	str	r2, [r3, #4]
			htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007968:	4b9f      	ldr	r3, [pc, #636]	; (8007be8 <Tim_Init+0x2d4>)
 800796a:	2200      	movs	r2, #0
 800796c:	609a      	str	r2, [r3, #8]
			htim2.Init.Period = 5000-1;
 800796e:	4b9e      	ldr	r3, [pc, #632]	; (8007be8 <Tim_Init+0x2d4>)
 8007970:	f241 3287 	movw	r2, #4999	; 0x1387
 8007974:	60da      	str	r2, [r3, #12]
			htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007976:	4b9c      	ldr	r3, [pc, #624]	; (8007be8 <Tim_Init+0x2d4>)
 8007978:	2200      	movs	r2, #0
 800797a:	611a      	str	r2, [r3, #16]
			htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800797c:	4b9a      	ldr	r3, [pc, #616]	; (8007be8 <Tim_Init+0x2d4>)
 800797e:	2200      	movs	r2, #0
 8007980:	619a      	str	r2, [r3, #24]

			if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007982:	4899      	ldr	r0, [pc, #612]	; (8007be8 <Tim_Init+0x2d4>)
 8007984:	f7fd ff86 	bl	8005894 <HAL_TIM_Base_Init>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d002      	beq.n	8007994 <Tim_Init+0x80>
			{

				HAL_TIM_ErrorCallback(&htim2);
 800798e:	4896      	ldr	r0, [pc, #600]	; (8007be8 <Tim_Init+0x2d4>)
 8007990:	f000 f968 	bl	8007c64 <HAL_TIM_ErrorCallback>

				/* do nothing */

			}

			sClockSourceConfig2.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007994:	4b95      	ldr	r3, [pc, #596]	; (8007bec <Tim_Init+0x2d8>)
 8007996:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800799a:	601a      	str	r2, [r3, #0]

			if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig2) != HAL_OK)
 800799c:	4993      	ldr	r1, [pc, #588]	; (8007bec <Tim_Init+0x2d8>)
 800799e:	4892      	ldr	r0, [pc, #584]	; (8007be8 <Tim_Init+0x2d4>)
 80079a0:	f7fe f98d 	bl	8005cbe <HAL_TIM_ConfigClockSource>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d002      	beq.n	80079b0 <Tim_Init+0x9c>
			{

				HAL_TIM_ErrorCallback(&htim2);
 80079aa:	488f      	ldr	r0, [pc, #572]	; (8007be8 <Tim_Init+0x2d4>)
 80079ac:	f000 f95a 	bl	8007c64 <HAL_TIM_ErrorCallback>

				/* do nothing */

			}

			sMasterConfig2.MasterOutputTrigger = TIM_TRGO_RESET;
 80079b0:	4b8f      	ldr	r3, [pc, #572]	; (8007bf0 <Tim_Init+0x2dc>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	601a      	str	r2, [r3, #0]
			sMasterConfig2.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80079b6:	4b8e      	ldr	r3, [pc, #568]	; (8007bf0 <Tim_Init+0x2dc>)
 80079b8:	2200      	movs	r2, #0
 80079ba:	605a      	str	r2, [r3, #4]

			if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig2) != HAL_OK)
 80079bc:	498c      	ldr	r1, [pc, #560]	; (8007bf0 <Tim_Init+0x2dc>)
 80079be:	488a      	ldr	r0, [pc, #552]	; (8007be8 <Tim_Init+0x2d4>)
 80079c0:	f7fe fc14 	bl	80061ec <HAL_TIMEx_MasterConfigSynchronization>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	f000 8105 	beq.w	8007bd6 <Tim_Init+0x2c2>
			{

				HAL_TIM_ErrorCallback(&htim2);
 80079cc:	4886      	ldr	r0, [pc, #536]	; (8007be8 <Tim_Init+0x2d4>)
 80079ce:	f000 f949 	bl	8007c64 <HAL_TIM_ErrorCallback>

				/* do nothing */

			}

			break;
 80079d2:	e100      	b.n	8007bd6 <Tim_Init+0x2c2>

		case TIMER_THREE:

			htim3.Instance = TIM3;
 80079d4:	4b87      	ldr	r3, [pc, #540]	; (8007bf4 <Tim_Init+0x2e0>)
 80079d6:	4a88      	ldr	r2, [pc, #544]	; (8007bf8 <Tim_Init+0x2e4>)
 80079d8:	601a      	str	r2, [r3, #0]
			htim3.Init.Prescaler = 10000-1;
 80079da:	4b86      	ldr	r3, [pc, #536]	; (8007bf4 <Tim_Init+0x2e0>)
 80079dc:	f242 720f 	movw	r2, #9999	; 0x270f
 80079e0:	605a      	str	r2, [r3, #4]
			htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80079e2:	4b84      	ldr	r3, [pc, #528]	; (8007bf4 <Tim_Init+0x2e0>)
 80079e4:	2200      	movs	r2, #0
 80079e6:	609a      	str	r2, [r3, #8]
			htim3.Init.Period = 40000-1;
 80079e8:	4b82      	ldr	r3, [pc, #520]	; (8007bf4 <Tim_Init+0x2e0>)
 80079ea:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80079ee:	60da      	str	r2, [r3, #12]
			htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80079f0:	4b80      	ldr	r3, [pc, #512]	; (8007bf4 <Tim_Init+0x2e0>)
 80079f2:	2200      	movs	r2, #0
 80079f4:	611a      	str	r2, [r3, #16]
			htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80079f6:	4b7f      	ldr	r3, [pc, #508]	; (8007bf4 <Tim_Init+0x2e0>)
 80079f8:	2200      	movs	r2, #0
 80079fa:	619a      	str	r2, [r3, #24]

			if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80079fc:	487d      	ldr	r0, [pc, #500]	; (8007bf4 <Tim_Init+0x2e0>)
 80079fe:	f7fd ff49 	bl	8005894 <HAL_TIM_Base_Init>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d002      	beq.n	8007a0e <Tim_Init+0xfa>
			{

				HAL_TIM_ErrorCallback(&htim3);
 8007a08:	487a      	ldr	r0, [pc, #488]	; (8007bf4 <Tim_Init+0x2e0>)
 8007a0a:	f000 f92b 	bl	8007c64 <HAL_TIM_ErrorCallback>

				/* do nothing */

			}

			sClockSourceConfig3.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007a0e:	4b7b      	ldr	r3, [pc, #492]	; (8007bfc <Tim_Init+0x2e8>)
 8007a10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007a14:	601a      	str	r2, [r3, #0]

			if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig3) != HAL_OK)
 8007a16:	4979      	ldr	r1, [pc, #484]	; (8007bfc <Tim_Init+0x2e8>)
 8007a18:	4876      	ldr	r0, [pc, #472]	; (8007bf4 <Tim_Init+0x2e0>)
 8007a1a:	f7fe f950 	bl	8005cbe <HAL_TIM_ConfigClockSource>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d002      	beq.n	8007a2a <Tim_Init+0x116>
			{

				HAL_TIM_ErrorCallback(&htim3);
 8007a24:	4873      	ldr	r0, [pc, #460]	; (8007bf4 <Tim_Init+0x2e0>)
 8007a26:	f000 f91d 	bl	8007c64 <HAL_TIM_ErrorCallback>

				/* do nothing */

			}

			sMasterConfig3.MasterOutputTrigger = TIM_TRGO_RESET;
 8007a2a:	4b75      	ldr	r3, [pc, #468]	; (8007c00 <Tim_Init+0x2ec>)
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	601a      	str	r2, [r3, #0]
			sMasterConfig3.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007a30:	4b73      	ldr	r3, [pc, #460]	; (8007c00 <Tim_Init+0x2ec>)
 8007a32:	2200      	movs	r2, #0
 8007a34:	605a      	str	r2, [r3, #4]

			if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig3) != HAL_OK)
 8007a36:	4972      	ldr	r1, [pc, #456]	; (8007c00 <Tim_Init+0x2ec>)
 8007a38:	486e      	ldr	r0, [pc, #440]	; (8007bf4 <Tim_Init+0x2e0>)
 8007a3a:	f7fe fbd7 	bl	80061ec <HAL_TIMEx_MasterConfigSynchronization>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	f000 80ca 	beq.w	8007bda <Tim_Init+0x2c6>
			{

				HAL_TIM_ErrorCallback(&htim3);
 8007a46:	486b      	ldr	r0, [pc, #428]	; (8007bf4 <Tim_Init+0x2e0>)
 8007a48:	f000 f90c 	bl	8007c64 <HAL_TIM_ErrorCallback>

				/* do nothing */

			}

			break;
 8007a4c:	e0c5      	b.n	8007bda <Tim_Init+0x2c6>

		case TIMER_FOUR:

			htim4.Instance = TIM4;
 8007a4e:	4b6d      	ldr	r3, [pc, #436]	; (8007c04 <Tim_Init+0x2f0>)
 8007a50:	4a6d      	ldr	r2, [pc, #436]	; (8007c08 <Tim_Init+0x2f4>)
 8007a52:	601a      	str	r2, [r3, #0]
			htim4.Init.Prescaler = 10000-1;
 8007a54:	4b6b      	ldr	r3, [pc, #428]	; (8007c04 <Tim_Init+0x2f0>)
 8007a56:	f242 720f 	movw	r2, #9999	; 0x270f
 8007a5a:	605a      	str	r2, [r3, #4]
			htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007a5c:	4b69      	ldr	r3, [pc, #420]	; (8007c04 <Tim_Init+0x2f0>)
 8007a5e:	2200      	movs	r2, #0
 8007a60:	609a      	str	r2, [r3, #8]
			htim4.Init.Period = 5000-1;
 8007a62:	4b68      	ldr	r3, [pc, #416]	; (8007c04 <Tim_Init+0x2f0>)
 8007a64:	f241 3287 	movw	r2, #4999	; 0x1387
 8007a68:	60da      	str	r2, [r3, #12]
			htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007a6a:	4b66      	ldr	r3, [pc, #408]	; (8007c04 <Tim_Init+0x2f0>)
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	611a      	str	r2, [r3, #16]
			htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007a70:	4b64      	ldr	r3, [pc, #400]	; (8007c04 <Tim_Init+0x2f0>)
 8007a72:	2200      	movs	r2, #0
 8007a74:	619a      	str	r2, [r3, #24]

			if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8007a76:	4863      	ldr	r0, [pc, #396]	; (8007c04 <Tim_Init+0x2f0>)
 8007a78:	f7fd ff0c 	bl	8005894 <HAL_TIM_Base_Init>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d002      	beq.n	8007a88 <Tim_Init+0x174>
			{

				HAL_TIM_ErrorCallback(&htim4);
 8007a82:	4860      	ldr	r0, [pc, #384]	; (8007c04 <Tim_Init+0x2f0>)
 8007a84:	f000 f8ee 	bl	8007c64 <HAL_TIM_ErrorCallback>

				/* do nothing */

			}

			sClockSourceConfig4.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007a88:	4b60      	ldr	r3, [pc, #384]	; (8007c0c <Tim_Init+0x2f8>)
 8007a8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007a8e:	601a      	str	r2, [r3, #0]

			if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig4) != HAL_OK)
 8007a90:	495e      	ldr	r1, [pc, #376]	; (8007c0c <Tim_Init+0x2f8>)
 8007a92:	485c      	ldr	r0, [pc, #368]	; (8007c04 <Tim_Init+0x2f0>)
 8007a94:	f7fe f913 	bl	8005cbe <HAL_TIM_ConfigClockSource>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d002      	beq.n	8007aa4 <Tim_Init+0x190>
			{

				HAL_TIM_ErrorCallback(&htim4);
 8007a9e:	4859      	ldr	r0, [pc, #356]	; (8007c04 <Tim_Init+0x2f0>)
 8007aa0:	f000 f8e0 	bl	8007c64 <HAL_TIM_ErrorCallback>

				/* do nothing */

			}

			sMasterConfig4.MasterOutputTrigger = TIM_TRGO_RESET;
 8007aa4:	4b5a      	ldr	r3, [pc, #360]	; (8007c10 <Tim_Init+0x2fc>)
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	601a      	str	r2, [r3, #0]
			sMasterConfig4.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007aaa:	4b59      	ldr	r3, [pc, #356]	; (8007c10 <Tim_Init+0x2fc>)
 8007aac:	2200      	movs	r2, #0
 8007aae:	605a      	str	r2, [r3, #4]

			if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig4) != HAL_OK)
 8007ab0:	4957      	ldr	r1, [pc, #348]	; (8007c10 <Tim_Init+0x2fc>)
 8007ab2:	4854      	ldr	r0, [pc, #336]	; (8007c04 <Tim_Init+0x2f0>)
 8007ab4:	f7fe fb9a 	bl	80061ec <HAL_TIMEx_MasterConfigSynchronization>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	f000 808f 	beq.w	8007bde <Tim_Init+0x2ca>
			{

				HAL_TIM_ErrorCallback(&htim4);
 8007ac0:	4850      	ldr	r0, [pc, #320]	; (8007c04 <Tim_Init+0x2f0>)
 8007ac2:	f000 f8cf 	bl	8007c64 <HAL_TIM_ErrorCallback>

				/* do nothing */

			}

			break;
 8007ac6:	e08a      	b.n	8007bde <Tim_Init+0x2ca>

		case TIMER_FIVE:

			htim5.Instance = TIM5;
 8007ac8:	4b52      	ldr	r3, [pc, #328]	; (8007c14 <Tim_Init+0x300>)
 8007aca:	4a53      	ldr	r2, [pc, #332]	; (8007c18 <Tim_Init+0x304>)
 8007acc:	601a      	str	r2, [r3, #0]
			htim5.Init.Prescaler = 10000-1;
 8007ace:	4b51      	ldr	r3, [pc, #324]	; (8007c14 <Tim_Init+0x300>)
 8007ad0:	f242 720f 	movw	r2, #9999	; 0x270f
 8007ad4:	605a      	str	r2, [r3, #4]
			htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007ad6:	4b4f      	ldr	r3, [pc, #316]	; (8007c14 <Tim_Init+0x300>)
 8007ad8:	2200      	movs	r2, #0
 8007ada:	609a      	str	r2, [r3, #8]
			htim5.Init.Period = 100000-1;
 8007adc:	4b4d      	ldr	r3, [pc, #308]	; (8007c14 <Tim_Init+0x300>)
 8007ade:	4a4f      	ldr	r2, [pc, #316]	; (8007c1c <Tim_Init+0x308>)
 8007ae0:	60da      	str	r2, [r3, #12]
			htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007ae2:	4b4c      	ldr	r3, [pc, #304]	; (8007c14 <Tim_Init+0x300>)
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	611a      	str	r2, [r3, #16]
			htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007ae8:	4b4a      	ldr	r3, [pc, #296]	; (8007c14 <Tim_Init+0x300>)
 8007aea:	2200      	movs	r2, #0
 8007aec:	619a      	str	r2, [r3, #24]

			if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8007aee:	4849      	ldr	r0, [pc, #292]	; (8007c14 <Tim_Init+0x300>)
 8007af0:	f7fd fed0 	bl	8005894 <HAL_TIM_Base_Init>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d002      	beq.n	8007b00 <Tim_Init+0x1ec>
			{

				HAL_TIM_ErrorCallback(&htim5);
 8007afa:	4846      	ldr	r0, [pc, #280]	; (8007c14 <Tim_Init+0x300>)
 8007afc:	f000 f8b2 	bl	8007c64 <HAL_TIM_ErrorCallback>

				/* do nothing */

			}

			sClockSourceConfig5.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007b00:	4b47      	ldr	r3, [pc, #284]	; (8007c20 <Tim_Init+0x30c>)
 8007b02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007b06:	601a      	str	r2, [r3, #0]

			if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig5) != HAL_OK)
 8007b08:	4945      	ldr	r1, [pc, #276]	; (8007c20 <Tim_Init+0x30c>)
 8007b0a:	4842      	ldr	r0, [pc, #264]	; (8007c14 <Tim_Init+0x300>)
 8007b0c:	f7fe f8d7 	bl	8005cbe <HAL_TIM_ConfigClockSource>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d002      	beq.n	8007b1c <Tim_Init+0x208>
			{

				HAL_TIM_ErrorCallback(&htim5);
 8007b16:	483f      	ldr	r0, [pc, #252]	; (8007c14 <Tim_Init+0x300>)
 8007b18:	f000 f8a4 	bl	8007c64 <HAL_TIM_ErrorCallback>

				/* do nothing */

			}

			sMasterConfig5.MasterOutputTrigger = TIM_TRGO_RESET;
 8007b1c:	4b41      	ldr	r3, [pc, #260]	; (8007c24 <Tim_Init+0x310>)
 8007b1e:	2200      	movs	r2, #0
 8007b20:	601a      	str	r2, [r3, #0]
			sMasterConfig5.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007b22:	4b40      	ldr	r3, [pc, #256]	; (8007c24 <Tim_Init+0x310>)
 8007b24:	2200      	movs	r2, #0
 8007b26:	605a      	str	r2, [r3, #4]

			if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig5) != HAL_OK)
 8007b28:	493e      	ldr	r1, [pc, #248]	; (8007c24 <Tim_Init+0x310>)
 8007b2a:	483a      	ldr	r0, [pc, #232]	; (8007c14 <Tim_Init+0x300>)
 8007b2c:	f7fe fb5e 	bl	80061ec <HAL_TIMEx_MasterConfigSynchronization>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d055      	beq.n	8007be2 <Tim_Init+0x2ce>
			{

				HAL_TIM_ErrorCallback(&htim5);
 8007b36:	4837      	ldr	r0, [pc, #220]	; (8007c14 <Tim_Init+0x300>)
 8007b38:	f000 f894 	bl	8007c64 <HAL_TIM_ErrorCallback>

				/* do nothing */

			}

			break;
 8007b3c:	e051      	b.n	8007be2 <Tim_Init+0x2ce>

		case TIMER_NINE:


			htim9.Instance = TIM9;
 8007b3e:	4b3a      	ldr	r3, [pc, #232]	; (8007c28 <Tim_Init+0x314>)
 8007b40:	4a3a      	ldr	r2, [pc, #232]	; (8007c2c <Tim_Init+0x318>)
 8007b42:	601a      	str	r2, [r3, #0]
			htim9.Init.Prescaler = 10000-1;
 8007b44:	4b38      	ldr	r3, [pc, #224]	; (8007c28 <Tim_Init+0x314>)
 8007b46:	f242 720f 	movw	r2, #9999	; 0x270f
 8007b4a:	605a      	str	r2, [r3, #4]
			htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007b4c:	4b36      	ldr	r3, [pc, #216]	; (8007c28 <Tim_Init+0x314>)
 8007b4e:	2200      	movs	r2, #0
 8007b50:	609a      	str	r2, [r3, #8]
			htim9.Init.Period = 10000-1;
 8007b52:	4b35      	ldr	r3, [pc, #212]	; (8007c28 <Tim_Init+0x314>)
 8007b54:	f242 720f 	movw	r2, #9999	; 0x270f
 8007b58:	60da      	str	r2, [r3, #12]
			htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007b5a:	4b33      	ldr	r3, [pc, #204]	; (8007c28 <Tim_Init+0x314>)
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	611a      	str	r2, [r3, #16]
			htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007b60:	4b31      	ldr	r3, [pc, #196]	; (8007c28 <Tim_Init+0x314>)
 8007b62:	2200      	movs	r2, #0
 8007b64:	619a      	str	r2, [r3, #24]

			if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8007b66:	4830      	ldr	r0, [pc, #192]	; (8007c28 <Tim_Init+0x314>)
 8007b68:	f7fd fe94 	bl	8005894 <HAL_TIM_Base_Init>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d002      	beq.n	8007b78 <Tim_Init+0x264>
			{

				HAL_TIM_ErrorCallback(&htim9);
 8007b72:	482d      	ldr	r0, [pc, #180]	; (8007c28 <Tim_Init+0x314>)
 8007b74:	f000 f876 	bl	8007c64 <HAL_TIM_ErrorCallback>

				/* do nothing */

			}

			sClockSourceConfig9.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007b78:	4b2d      	ldr	r3, [pc, #180]	; (8007c30 <Tim_Init+0x31c>)
 8007b7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007b7e:	601a      	str	r2, [r3, #0]

			if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig9) != HAL_OK)
 8007b80:	492b      	ldr	r1, [pc, #172]	; (8007c30 <Tim_Init+0x31c>)
 8007b82:	4829      	ldr	r0, [pc, #164]	; (8007c28 <Tim_Init+0x314>)
 8007b84:	f7fe f89b 	bl	8005cbe <HAL_TIM_ConfigClockSource>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d056      	beq.n	8007c3c <Tim_Init+0x328>
			{

				HAL_TIM_ErrorCallback(&htim9);
 8007b8e:	4826      	ldr	r0, [pc, #152]	; (8007c28 <Tim_Init+0x314>)
 8007b90:	f000 f868 	bl	8007c64 <HAL_TIM_ErrorCallback>

				/* do nothing */

			}

			break;
 8007b94:	e052      	b.n	8007c3c <Tim_Init+0x328>
//
//			}

		case TIMER_ELEVEN:

			htim11.Instance = TIM11;
 8007b96:	4b27      	ldr	r3, [pc, #156]	; (8007c34 <Tim_Init+0x320>)
 8007b98:	4a27      	ldr	r2, [pc, #156]	; (8007c38 <Tim_Init+0x324>)
 8007b9a:	601a      	str	r2, [r3, #0]
			htim11.Init.Prescaler = 10000-1;
 8007b9c:	4b25      	ldr	r3, [pc, #148]	; (8007c34 <Tim_Init+0x320>)
 8007b9e:	f242 720f 	movw	r2, #9999	; 0x270f
 8007ba2:	605a      	str	r2, [r3, #4]
			htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007ba4:	4b23      	ldr	r3, [pc, #140]	; (8007c34 <Tim_Init+0x320>)
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	609a      	str	r2, [r3, #8]
			htim11.Init.Period = 5000-1;
 8007baa:	4b22      	ldr	r3, [pc, #136]	; (8007c34 <Tim_Init+0x320>)
 8007bac:	f241 3287 	movw	r2, #4999	; 0x1387
 8007bb0:	60da      	str	r2, [r3, #12]
			htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007bb2:	4b20      	ldr	r3, [pc, #128]	; (8007c34 <Tim_Init+0x320>)
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	611a      	str	r2, [r3, #16]
			htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007bb8:	4b1e      	ldr	r3, [pc, #120]	; (8007c34 <Tim_Init+0x320>)
 8007bba:	2200      	movs	r2, #0
 8007bbc:	619a      	str	r2, [r3, #24]

			if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8007bbe:	481d      	ldr	r0, [pc, #116]	; (8007c34 <Tim_Init+0x320>)
 8007bc0:	f7fd fe68 	bl	8005894 <HAL_TIM_Base_Init>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d03a      	beq.n	8007c40 <Tim_Init+0x32c>
			{

				HAL_TIM_ErrorCallback(&htim11);
 8007bca:	481a      	ldr	r0, [pc, #104]	; (8007c34 <Tim_Init+0x320>)
 8007bcc:	f000 f84a 	bl	8007c64 <HAL_TIM_ErrorCallback>

				/* do nothing */

			}

			break;
 8007bd0:	e036      	b.n	8007c40 <Tim_Init+0x32c>

		default:

			break;
 8007bd2:	bf00      	nop
 8007bd4:	e035      	b.n	8007c42 <Tim_Init+0x32e>
			break;
 8007bd6:	bf00      	nop
 8007bd8:	e033      	b.n	8007c42 <Tim_Init+0x32e>
			break;
 8007bda:	bf00      	nop
 8007bdc:	e031      	b.n	8007c42 <Tim_Init+0x32e>
			break;
 8007bde:	bf00      	nop
 8007be0:	e02f      	b.n	8007c42 <Tim_Init+0x32e>
			break;
 8007be2:	bf00      	nop
 8007be4:	e02d      	b.n	8007c42 <Tim_Init+0x32e>
 8007be6:	bf00      	nop
 8007be8:	200002f4 	.word	0x200002f4
 8007bec:	20000804 	.word	0x20000804
 8007bf0:	20000814 	.word	0x20000814
 8007bf4:	200003a8 	.word	0x200003a8
 8007bf8:	40000400 	.word	0x40000400
 8007bfc:	2000081c 	.word	0x2000081c
 8007c00:	2000082c 	.word	0x2000082c
 8007c04:	2000045c 	.word	0x2000045c
 8007c08:	40000800 	.word	0x40000800
 8007c0c:	20000834 	.word	0x20000834
 8007c10:	20000844 	.word	0x20000844
 8007c14:	20000510 	.word	0x20000510
 8007c18:	40000c00 	.word	0x40000c00
 8007c1c:	0001869f 	.word	0x0001869f
 8007c20:	2000084c 	.word	0x2000084c
 8007c24:	2000085c 	.word	0x2000085c
 8007c28:	200005c4 	.word	0x200005c4
 8007c2c:	40014000 	.word	0x40014000
 8007c30:	20000864 	.word	0x20000864
 8007c34:	20000678 	.word	0x20000678
 8007c38:	40014800 	.word	0x40014800
			break;
 8007c3c:	bf00      	nop
 8007c3e:	e000      	b.n	8007c42 <Tim_Init+0x32e>
			break;
 8007c40:	bf00      	nop

	}

	return E_OK;
 8007c42:	2300      	movs	r3, #0

}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <Tim_DeInit>:

StdReturnType Tim_DeInit(uint8 TimerChannel)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	4603      	mov	r3, r0
 8007c54:	71fb      	strb	r3, [r7, #7]

	return E_OK;
 8007c56:	2300      	movs	r3, #0

}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	370c      	adds	r7, #12
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <HAL_TIM_ErrorCallback>:

void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM2)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c74:	d109      	bne.n	8007c8a <HAL_TIM_ErrorCallback+0x26>
	{

		SystemManager_Fault.fault[TIMER2_ERROR] = TIMER2_ERROR;
 8007c76:	4b2d      	ldr	r3, [pc, #180]	; (8007d2c <HAL_TIM_ErrorCallback+0xc8>)
 8007c78:	221d      	movs	r2, #29
 8007c7a:	675a      	str	r2, [r3, #116]	; 0x74

		Tim_DeInit(TIMER_TWO);
 8007c7c:	2002      	movs	r0, #2
 8007c7e:	f7ff ffe5 	bl	8007c4c <Tim_DeInit>
		Tim_Init(TIMER_TWO);
 8007c82:	2002      	movs	r0, #2
 8007c84:	f7ff fe46 	bl	8007914 <Tim_Init>

		/* do nothing */

	}

}
 8007c88:	e04c      	b.n	8007d24 <HAL_TIM_ErrorCallback+0xc0>
	else if(htim->Instance == TIM3)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a28      	ldr	r2, [pc, #160]	; (8007d30 <HAL_TIM_ErrorCallback+0xcc>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d109      	bne.n	8007ca8 <HAL_TIM_ErrorCallback+0x44>
		SystemManager_Fault.fault[TIMER3_ERROR] = TIMER3_ERROR;
 8007c94:	4b25      	ldr	r3, [pc, #148]	; (8007d2c <HAL_TIM_ErrorCallback+0xc8>)
 8007c96:	221e      	movs	r2, #30
 8007c98:	679a      	str	r2, [r3, #120]	; 0x78
		Tim_DeInit(TIMER_THREE);
 8007c9a:	2003      	movs	r0, #3
 8007c9c:	f7ff ffd6 	bl	8007c4c <Tim_DeInit>
		Tim_Init(TIMER_THREE);
 8007ca0:	2003      	movs	r0, #3
 8007ca2:	f7ff fe37 	bl	8007914 <Tim_Init>
}
 8007ca6:	e03d      	b.n	8007d24 <HAL_TIM_ErrorCallback+0xc0>
	else if(htim->Instance == TIM4)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a21      	ldr	r2, [pc, #132]	; (8007d34 <HAL_TIM_ErrorCallback+0xd0>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d109      	bne.n	8007cc6 <HAL_TIM_ErrorCallback+0x62>
		SystemManager_Fault.fault[TIMER4_ERROR] = TIMER4_ERROR;
 8007cb2:	4b1e      	ldr	r3, [pc, #120]	; (8007d2c <HAL_TIM_ErrorCallback+0xc8>)
 8007cb4:	221f      	movs	r2, #31
 8007cb6:	67da      	str	r2, [r3, #124]	; 0x7c
		Tim_DeInit(TIMER_FOUR);
 8007cb8:	2004      	movs	r0, #4
 8007cba:	f7ff ffc7 	bl	8007c4c <Tim_DeInit>
		Tim_Init(TIMER_FOUR);
 8007cbe:	2004      	movs	r0, #4
 8007cc0:	f7ff fe28 	bl	8007914 <Tim_Init>
}
 8007cc4:	e02e      	b.n	8007d24 <HAL_TIM_ErrorCallback+0xc0>
	else if(htim->Instance == TIM5)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a1b      	ldr	r2, [pc, #108]	; (8007d38 <HAL_TIM_ErrorCallback+0xd4>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d10a      	bne.n	8007ce6 <HAL_TIM_ErrorCallback+0x82>
		SystemManager_Fault.fault[TIMER5_ERROR] = TIMER5_ERROR;
 8007cd0:	4b16      	ldr	r3, [pc, #88]	; (8007d2c <HAL_TIM_ErrorCallback+0xc8>)
 8007cd2:	2220      	movs	r2, #32
 8007cd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		Tim_DeInit(TIMER_FIVE);
 8007cd8:	2005      	movs	r0, #5
 8007cda:	f7ff ffb7 	bl	8007c4c <Tim_DeInit>
		Tim_Init(TIMER_FIVE);
 8007cde:	2005      	movs	r0, #5
 8007ce0:	f7ff fe18 	bl	8007914 <Tim_Init>
}
 8007ce4:	e01e      	b.n	8007d24 <HAL_TIM_ErrorCallback+0xc0>
	else if(htim->Instance == TIM9)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a14      	ldr	r2, [pc, #80]	; (8007d3c <HAL_TIM_ErrorCallback+0xd8>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d10a      	bne.n	8007d06 <HAL_TIM_ErrorCallback+0xa2>
		SystemManager_Fault.fault[TIMER9_ERROR] = TIMER9_ERROR;
 8007cf0:	4b0e      	ldr	r3, [pc, #56]	; (8007d2c <HAL_TIM_ErrorCallback+0xc8>)
 8007cf2:	2221      	movs	r2, #33	; 0x21
 8007cf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		Tim_DeInit(TIMER_NINE);
 8007cf8:	2009      	movs	r0, #9
 8007cfa:	f7ff ffa7 	bl	8007c4c <Tim_DeInit>
		Tim_Init(TIMER_NINE);
 8007cfe:	2009      	movs	r0, #9
 8007d00:	f7ff fe08 	bl	8007914 <Tim_Init>
}
 8007d04:	e00e      	b.n	8007d24 <HAL_TIM_ErrorCallback+0xc0>
	else if(htim->Instance == TIM11)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a0d      	ldr	r2, [pc, #52]	; (8007d40 <HAL_TIM_ErrorCallback+0xdc>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d109      	bne.n	8007d24 <HAL_TIM_ErrorCallback+0xc0>
		SystemManager_Fault.fault[TIMER11_ERROR] = TIMER11_ERROR;
 8007d10:	4b06      	ldr	r3, [pc, #24]	; (8007d2c <HAL_TIM_ErrorCallback+0xc8>)
 8007d12:	2222      	movs	r2, #34	; 0x22
 8007d14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		Tim_DeInit(TIMER_ELEVEN);
 8007d18:	200b      	movs	r0, #11
 8007d1a:	f7ff ff97 	bl	8007c4c <Tim_DeInit>
		Tim_Init(TIMER_ELEVEN);
 8007d1e:	200b      	movs	r0, #11
 8007d20:	f7ff fdf8 	bl	8007914 <Tim_Init>
}
 8007d24:	bf00      	nop
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	20007a8c 	.word	0x20007a8c
 8007d30:	40000400 	.word	0x40000400
 8007d34:	40000800 	.word	0x40000800
 8007d38:	40000c00 	.word	0x40000c00
 8007d3c:	40014000 	.word	0x40014000
 8007d40:	40014800 	.word	0x40014800

08007d44 <Tim_MainFunction>:

void Tim_MainFunction()
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b086      	sub	sp, #24
 8007d48:	af00      	add	r7, sp, #0

	uint32 localStateTimerTwo = HAL_TIM_Base_GetState(&htim2);
 8007d4a:	4825      	ldr	r0, [pc, #148]	; (8007de0 <Tim_MainFunction+0x9c>)
 8007d4c:	f7fe f8ce 	bl	8005eec <HAL_TIM_Base_GetState>
 8007d50:	4603      	mov	r3, r0
 8007d52:	617b      	str	r3, [r7, #20]
	uint32 localStateTimerThree = HAL_TIM_Base_GetState(&htim3);
 8007d54:	4823      	ldr	r0, [pc, #140]	; (8007de4 <Tim_MainFunction+0xa0>)
 8007d56:	f7fe f8c9 	bl	8005eec <HAL_TIM_Base_GetState>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	613b      	str	r3, [r7, #16]
	uint32 localStateTimerFour = HAL_TIM_Base_GetState(&htim4);
 8007d5e:	4822      	ldr	r0, [pc, #136]	; (8007de8 <Tim_MainFunction+0xa4>)
 8007d60:	f7fe f8c4 	bl	8005eec <HAL_TIM_Base_GetState>
 8007d64:	4603      	mov	r3, r0
 8007d66:	60fb      	str	r3, [r7, #12]
	uint32 localStateTimerFive = HAL_TIM_Base_GetState(&htim5);
 8007d68:	4820      	ldr	r0, [pc, #128]	; (8007dec <Tim_MainFunction+0xa8>)
 8007d6a:	f7fe f8bf 	bl	8005eec <HAL_TIM_Base_GetState>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	60bb      	str	r3, [r7, #8]
	uint32 localStateTimerNine = HAL_TIM_Base_GetState(&htim9);
 8007d72:	481f      	ldr	r0, [pc, #124]	; (8007df0 <Tim_MainFunction+0xac>)
 8007d74:	f7fe f8ba 	bl	8005eec <HAL_TIM_Base_GetState>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	607b      	str	r3, [r7, #4]
	uint32 localStateTimerEleven = HAL_TIM_Base_GetState(&htim11);
 8007d7c:	481d      	ldr	r0, [pc, #116]	; (8007df4 <Tim_MainFunction+0xb0>)
 8007d7e:	f7fe f8b5 	bl	8005eec <HAL_TIM_Base_GetState>
 8007d82:	4603      	mov	r3, r0
 8007d84:	603b      	str	r3, [r7, #0]

	if(localStateTimerTwo == HAL_TIM_STATE_ERROR)
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	2b04      	cmp	r3, #4
 8007d8a:	d103      	bne.n	8007d94 <Tim_MainFunction+0x50>
	{

		HAL_TIM_ErrorCallback(&htim2);
 8007d8c:	4814      	ldr	r0, [pc, #80]	; (8007de0 <Tim_MainFunction+0x9c>)
 8007d8e:	f7ff ff69 	bl	8007c64 <HAL_TIM_ErrorCallback>

		/* do nothing */

	}

}
 8007d92:	e021      	b.n	8007dd8 <Tim_MainFunction+0x94>
	else if(localStateTimerThree == HAL_TIM_STATE_ERROR)
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	2b04      	cmp	r3, #4
 8007d98:	d103      	bne.n	8007da2 <Tim_MainFunction+0x5e>
		HAL_TIM_ErrorCallback(&htim3);
 8007d9a:	4812      	ldr	r0, [pc, #72]	; (8007de4 <Tim_MainFunction+0xa0>)
 8007d9c:	f7ff ff62 	bl	8007c64 <HAL_TIM_ErrorCallback>
}
 8007da0:	e01a      	b.n	8007dd8 <Tim_MainFunction+0x94>
	else if(localStateTimerFour == HAL_TIM_STATE_ERROR)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2b04      	cmp	r3, #4
 8007da6:	d103      	bne.n	8007db0 <Tim_MainFunction+0x6c>
		HAL_TIM_ErrorCallback(&htim4);
 8007da8:	480f      	ldr	r0, [pc, #60]	; (8007de8 <Tim_MainFunction+0xa4>)
 8007daa:	f7ff ff5b 	bl	8007c64 <HAL_TIM_ErrorCallback>
}
 8007dae:	e013      	b.n	8007dd8 <Tim_MainFunction+0x94>
	else if(localStateTimerFive == HAL_TIM_STATE_ERROR)
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	2b04      	cmp	r3, #4
 8007db4:	d103      	bne.n	8007dbe <Tim_MainFunction+0x7a>
		HAL_TIM_ErrorCallback(&htim5);
 8007db6:	480d      	ldr	r0, [pc, #52]	; (8007dec <Tim_MainFunction+0xa8>)
 8007db8:	f7ff ff54 	bl	8007c64 <HAL_TIM_ErrorCallback>
}
 8007dbc:	e00c      	b.n	8007dd8 <Tim_MainFunction+0x94>
	else if(localStateTimerNine == HAL_TIM_STATE_ERROR)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2b04      	cmp	r3, #4
 8007dc2:	d103      	bne.n	8007dcc <Tim_MainFunction+0x88>
		HAL_TIM_ErrorCallback(&htim9);
 8007dc4:	480a      	ldr	r0, [pc, #40]	; (8007df0 <Tim_MainFunction+0xac>)
 8007dc6:	f7ff ff4d 	bl	8007c64 <HAL_TIM_ErrorCallback>
}
 8007dca:	e005      	b.n	8007dd8 <Tim_MainFunction+0x94>
	else if(localStateTimerEleven == HAL_TIM_STATE_ERROR)
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	2b04      	cmp	r3, #4
 8007dd0:	d102      	bne.n	8007dd8 <Tim_MainFunction+0x94>
		HAL_TIM_ErrorCallback(&htim11);
 8007dd2:	4808      	ldr	r0, [pc, #32]	; (8007df4 <Tim_MainFunction+0xb0>)
 8007dd4:	f7ff ff46 	bl	8007c64 <HAL_TIM_ErrorCallback>
}
 8007dd8:	bf00      	nop
 8007dda:	3718      	adds	r7, #24
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	200002f4 	.word	0x200002f4
 8007de4:	200003a8 	.word	0x200003a8
 8007de8:	2000045c 	.word	0x2000045c
 8007dec:	20000510 	.word	0x20000510
 8007df0:	200005c4 	.word	0x200005c4
 8007df4:	20000678 	.word	0x20000678

08007df8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM3)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a37      	ldr	r2, [pc, #220]	; (8007ee4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d109      	bne.n	8007e1e <HAL_TIM_PeriodElapsedCallback+0x26>
	{

		Timer3Counter_CenLoc_Tim3IRQFlag++;
 8007e0a:	4b37      	ldr	r3, [pc, #220]	; (8007ee8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	b2da      	uxtb	r2, r3
 8007e12:	4b35      	ldr	r3, [pc, #212]	; (8007ee8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8007e14:	701a      	strb	r2, [r3, #0]
		Rte_Write_CenLoc_CenLocPort_CenLoc_Tim3IRQFlag(&Timer3Counter_CenLoc_Tim3IRQFlag);
 8007e16:	4834      	ldr	r0, [pc, #208]	; (8007ee8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8007e18:	f003 fa64 	bl	800b2e4 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim3IRQFlag>

		/* do nothing */

	}

}
 8007e1c:	e05d      	b.n	8007eda <HAL_TIM_PeriodElapsedCallback+0xe2>
	else if(htim->Instance == TIM4)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a32      	ldr	r2, [pc, #200]	; (8007eec <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d109      	bne.n	8007e3c <HAL_TIM_PeriodElapsedCallback+0x44>
		SecAlm_TriggerIRQCounterForTimer4++;
 8007e28:	4b31      	ldr	r3, [pc, #196]	; (8007ef0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	b2da      	uxtb	r2, r3
 8007e30:	4b2f      	ldr	r3, [pc, #188]	; (8007ef0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8007e32:	701a      	strb	r2, [r3, #0]
		Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4(&SecAlm_TriggerIRQCounterForTimer4);
 8007e34:	482e      	ldr	r0, [pc, #184]	; (8007ef0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8007e36:	f003 fbcb 	bl	800b5d0 <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4>
}
 8007e3a:	e04e      	b.n	8007eda <HAL_TIM_PeriodElapsedCallback+0xe2>
	else if(htim->Instance == TIM5)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a2c      	ldr	r2, [pc, #176]	; (8007ef4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d109      	bne.n	8007e5a <HAL_TIM_PeriodElapsedCallback+0x62>
		Timer5Counter_CenLoc_Tim5IRQFlag++;
 8007e46:	4b2c      	ldr	r3, [pc, #176]	; (8007ef8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	b2da      	uxtb	r2, r3
 8007e4e:	4b2a      	ldr	r3, [pc, #168]	; (8007ef8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8007e50:	701a      	strb	r2, [r3, #0]
		Rte_Write_CenLoc_CenLocPort_CenLoc_Tim5IRQFlag(&Timer5Counter_CenLoc_Tim5IRQFlag);
 8007e52:	4829      	ldr	r0, [pc, #164]	; (8007ef8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8007e54:	f003 fa5c 	bl	800b310 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim5IRQFlag>
}
 8007e58:	e03f      	b.n	8007eda <HAL_TIM_PeriodElapsedCallback+0xe2>
	else if(htim->Instance == TIM11)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a27      	ldr	r2, [pc, #156]	; (8007efc <HAL_TIM_PeriodElapsedCallback+0x104>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d109      	bne.n	8007e78 <HAL_TIM_PeriodElapsedCallback+0x80>
		Timer11Counter_CenLoc_Tim11IRQFlag++;
 8007e64:	4b26      	ldr	r3, [pc, #152]	; (8007f00 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	b2da      	uxtb	r2, r3
 8007e6c:	4b24      	ldr	r3, [pc, #144]	; (8007f00 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8007e6e:	701a      	strb	r2, [r3, #0]
		Rte_Write_CenLoc_CenLocPort_CenLoc_Tim11IRQFlag(&Timer11Counter_CenLoc_Tim11IRQFlag);
 8007e70:	4823      	ldr	r0, [pc, #140]	; (8007f00 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8007e72:	f003 fa63 	bl	800b33c <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim11IRQFlag>
}
 8007e76:	e030      	b.n	8007eda <HAL_TIM_PeriodElapsedCallback+0xe2>
	else if(htim->Instance == TIM2)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e80:	d124      	bne.n	8007ecc <HAL_TIM_PeriodElapsedCallback+0xd4>
		if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 8007e82:	4b20      	ldr	r3, [pc, #128]	; (8007f04 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d107      	bne.n	8007e9a <HAL_TIM_PeriodElapsedCallback+0xa2>
			Timer2Counter_ExtLights_LTSFlag++;
 8007e8a:	4b1f      	ldr	r3, [pc, #124]	; (8007f08 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	4a1d      	ldr	r2, [pc, #116]	; (8007f08 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8007e92:	6013      	str	r3, [r2, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag(&Timer2Counter_ExtLights_LTSFlag);
 8007e94:	481c      	ldr	r0, [pc, #112]	; (8007f08 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8007e96:	f003 fb59 	bl	800b54c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag>
		if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 8007e9a:	4b1c      	ldr	r3, [pc, #112]	; (8007f0c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d107      	bne.n	8007eb2 <HAL_TIM_PeriodElapsedCallback+0xba>
			Timer2Counter_ExtLights_RTSFlag++;
 8007ea2:	4b1b      	ldr	r3, [pc, #108]	; (8007f10 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	4a19      	ldr	r2, [pc, #100]	; (8007f10 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8007eaa:	6013      	str	r3, [r2, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag(&Timer2Counter_ExtLights_RTSFlag);
 8007eac:	4818      	ldr	r0, [pc, #96]	; (8007f10 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8007eae:	f003 fb37 	bl	800b520 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag>
		if(Rte_P_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState == STD_HIGH)
 8007eb2:	4b18      	ldr	r3, [pc, #96]	; (8007f14 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d10f      	bne.n	8007eda <HAL_TIM_PeriodElapsedCallback+0xe2>
			Timer2Counter_ExtLights_HLFlag++;
 8007eba:	4b17      	ldr	r3, [pc, #92]	; (8007f18 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	4a15      	ldr	r2, [pc, #84]	; (8007f18 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8007ec2:	6013      	str	r3, [r2, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag(&Timer2Counter_ExtLights_HLFlag);
 8007ec4:	4814      	ldr	r0, [pc, #80]	; (8007f18 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8007ec6:	f003 fb57 	bl	800b578 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag>
}
 8007eca:	e006      	b.n	8007eda <HAL_TIM_PeriodElapsedCallback+0xe2>
	else if (htim->Instance == TIM1)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a12      	ldr	r2, [pc, #72]	; (8007f1c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d101      	bne.n	8007eda <HAL_TIM_PeriodElapsedCallback+0xe2>
		HAL_IncTick();
 8007ed6:	f7fa fbb5 	bl	8002644 <HAL_IncTick>
}
 8007eda:	bf00      	nop
 8007edc:	3708      	adds	r7, #8
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	40000400 	.word	0x40000400
 8007ee8:	20000803 	.word	0x20000803
 8007eec:	40000800 	.word	0x40000800
 8007ef0:	200000d0 	.word	0x200000d0
 8007ef4:	40000c00 	.word	0x40000c00
 8007ef8:	20000801 	.word	0x20000801
 8007efc:	40014800 	.word	0x40014800
 8007f00:	20000802 	.word	0x20000802
 8007f04:	200000b9 	.word	0x200000b9
 8007f08:	200007f4 	.word	0x200007f4
 8007f0c:	200000ba 	.word	0x200000ba
 8007f10:	200007f8 	.word	0x200007f8
 8007f14:	200000bb 	.word	0x200000bb
 8007f18:	200007fc 	.word	0x200007fc
 8007f1c:	40010000 	.word	0x40010000

08007f20 <__NVIC_SetPriority>:
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	4603      	mov	r3, r0
 8007f28:	6039      	str	r1, [r7, #0]
 8007f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	db0a      	blt.n	8007f4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	b2da      	uxtb	r2, r3
 8007f38:	490c      	ldr	r1, [pc, #48]	; (8007f6c <__NVIC_SetPriority+0x4c>)
 8007f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f3e:	0112      	lsls	r2, r2, #4
 8007f40:	b2d2      	uxtb	r2, r2
 8007f42:	440b      	add	r3, r1
 8007f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007f48:	e00a      	b.n	8007f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	b2da      	uxtb	r2, r3
 8007f4e:	4908      	ldr	r1, [pc, #32]	; (8007f70 <__NVIC_SetPriority+0x50>)
 8007f50:	79fb      	ldrb	r3, [r7, #7]
 8007f52:	f003 030f 	and.w	r3, r3, #15
 8007f56:	3b04      	subs	r3, #4
 8007f58:	0112      	lsls	r2, r2, #4
 8007f5a:	b2d2      	uxtb	r2, r2
 8007f5c:	440b      	add	r3, r1
 8007f5e:	761a      	strb	r2, [r3, #24]
}
 8007f60:	bf00      	nop
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr
 8007f6c:	e000e100 	.word	0xe000e100
 8007f70:	e000ed00 	.word	0xe000ed00

08007f74 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007f74:	b580      	push	{r7, lr}
 8007f76:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007f78:	4b05      	ldr	r3, [pc, #20]	; (8007f90 <SysTick_Handler+0x1c>)
 8007f7a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007f7c:	f002 fbac 	bl	800a6d8 <xTaskGetSchedulerState>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d001      	beq.n	8007f8a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007f86:	f000 fd07 	bl	8008998 <xPortSysTickHandler>
  }
}
 8007f8a:	bf00      	nop
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	e000e010 	.word	0xe000e010

08007f94 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007f94:	b580      	push	{r7, lr}
 8007f96:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007f98:	2100      	movs	r1, #0
 8007f9a:	f06f 0004 	mvn.w	r0, #4
 8007f9e:	f7ff ffbf 	bl	8007f20 <__NVIC_SetPriority>
#endif
}
 8007fa2:	bf00      	nop
 8007fa4:	bd80      	pop	{r7, pc}
	...

08007fa8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fae:	f3ef 8305 	mrs	r3, IPSR
 8007fb2:	603b      	str	r3, [r7, #0]
  return(result);
 8007fb4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d003      	beq.n	8007fc2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007fba:	f06f 0305 	mvn.w	r3, #5
 8007fbe:	607b      	str	r3, [r7, #4]
 8007fc0:	e00c      	b.n	8007fdc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007fc2:	4b0a      	ldr	r3, [pc, #40]	; (8007fec <osKernelInitialize+0x44>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d105      	bne.n	8007fd6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007fca:	4b08      	ldr	r3, [pc, #32]	; (8007fec <osKernelInitialize+0x44>)
 8007fcc:	2201      	movs	r2, #1
 8007fce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	607b      	str	r3, [r7, #4]
 8007fd4:	e002      	b.n	8007fdc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8007fda:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007fdc:	687b      	ldr	r3, [r7, #4]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	370c      	adds	r7, #12
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr
 8007fea:	bf00      	nop
 8007fec:	20000874 	.word	0x20000874

08007ff0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ff6:	f3ef 8305 	mrs	r3, IPSR
 8007ffa:	603b      	str	r3, [r7, #0]
  return(result);
 8007ffc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d003      	beq.n	800800a <osKernelStart+0x1a>
    stat = osErrorISR;
 8008002:	f06f 0305 	mvn.w	r3, #5
 8008006:	607b      	str	r3, [r7, #4]
 8008008:	e010      	b.n	800802c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800800a:	4b0b      	ldr	r3, [pc, #44]	; (8008038 <osKernelStart+0x48>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2b01      	cmp	r3, #1
 8008010:	d109      	bne.n	8008026 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008012:	f7ff ffbf 	bl	8007f94 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008016:	4b08      	ldr	r3, [pc, #32]	; (8008038 <osKernelStart+0x48>)
 8008018:	2202      	movs	r2, #2
 800801a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800801c:	f001 fe0e 	bl	8009c3c <vTaskStartScheduler>
      stat = osOK;
 8008020:	2300      	movs	r3, #0
 8008022:	607b      	str	r3, [r7, #4]
 8008024:	e002      	b.n	800802c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008026:	f04f 33ff 	mov.w	r3, #4294967295
 800802a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800802c:	687b      	ldr	r3, [r7, #4]
}
 800802e:	4618      	mov	r0, r3
 8008030:	3708      	adds	r7, #8
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	20000874 	.word	0x20000874

0800803c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800803c:	b580      	push	{r7, lr}
 800803e:	b08e      	sub	sp, #56	; 0x38
 8008040:	af04      	add	r7, sp, #16
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008048:	2300      	movs	r3, #0
 800804a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800804c:	f3ef 8305 	mrs	r3, IPSR
 8008050:	617b      	str	r3, [r7, #20]
  return(result);
 8008052:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008054:	2b00      	cmp	r3, #0
 8008056:	d17f      	bne.n	8008158 <osThreadNew+0x11c>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d07c      	beq.n	8008158 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800805e:	2380      	movs	r3, #128	; 0x80
 8008060:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008062:	2318      	movs	r3, #24
 8008064:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008066:	2300      	movs	r3, #0
 8008068:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800806a:	f04f 33ff 	mov.w	r3, #4294967295
 800806e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d046      	beq.n	8008104 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d002      	beq.n	8008084 <osThreadNew+0x48>
        name = attr->name;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	699b      	ldr	r3, [r3, #24]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d002      	beq.n	8008092 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	699b      	ldr	r3, [r3, #24]
 8008090:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d008      	beq.n	80080aa <osThreadNew+0x6e>
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	2b38      	cmp	r3, #56	; 0x38
 800809c:	d805      	bhi.n	80080aa <osThreadNew+0x6e>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	f003 0301 	and.w	r3, r3, #1
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d001      	beq.n	80080ae <osThreadNew+0x72>
        return (NULL);
 80080aa:	2300      	movs	r3, #0
 80080ac:	e055      	b.n	800815a <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	695b      	ldr	r3, [r3, #20]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d003      	beq.n	80080be <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	695b      	ldr	r3, [r3, #20]
 80080ba:	089b      	lsrs	r3, r3, #2
 80080bc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d00f      	beq.n	80080e6 <osThreadNew+0xaa>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	f5b3 7fda 	cmp.w	r3, #436	; 0x1b4
 80080ce:	d30a      	bcc.n	80080e6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d006      	beq.n	80080e6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	695b      	ldr	r3, [r3, #20]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d002      	beq.n	80080e6 <osThreadNew+0xaa>
        mem = 1;
 80080e0:	2301      	movs	r3, #1
 80080e2:	61bb      	str	r3, [r7, #24]
 80080e4:	e010      	b.n	8008108 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d10c      	bne.n	8008108 <osThreadNew+0xcc>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d108      	bne.n	8008108 <osThreadNew+0xcc>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d104      	bne.n	8008108 <osThreadNew+0xcc>
          mem = 0;
 80080fe:	2300      	movs	r3, #0
 8008100:	61bb      	str	r3, [r7, #24]
 8008102:	e001      	b.n	8008108 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8008104:	2300      	movs	r3, #0
 8008106:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	2b01      	cmp	r3, #1
 800810c:	d110      	bne.n	8008130 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008116:	9202      	str	r2, [sp, #8]
 8008118:	9301      	str	r3, [sp, #4]
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	9300      	str	r3, [sp, #0]
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	6a3a      	ldr	r2, [r7, #32]
 8008122:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	f001 fa97 	bl	8009658 <xTaskCreateStatic>
 800812a:	4603      	mov	r3, r0
 800812c:	613b      	str	r3, [r7, #16]
 800812e:	e013      	b.n	8008158 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d110      	bne.n	8008158 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008136:	6a3b      	ldr	r3, [r7, #32]
 8008138:	b29a      	uxth	r2, r3
 800813a:	f107 0310 	add.w	r3, r7, #16
 800813e:	9301      	str	r3, [sp, #4]
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	9300      	str	r3, [sp, #0]
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f001 fae4 	bl	8009716 <xTaskCreate>
 800814e:	4603      	mov	r3, r0
 8008150:	2b01      	cmp	r3, #1
 8008152:	d001      	beq.n	8008158 <osThreadNew+0x11c>
            hTask = NULL;
 8008154:	2300      	movs	r3, #0
 8008156:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008158:	693b      	ldr	r3, [r7, #16]
}
 800815a:	4618      	mov	r0, r3
 800815c:	3728      	adds	r7, #40	; 0x28
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008162:	b580      	push	{r7, lr}
 8008164:	b084      	sub	sp, #16
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800816a:	f3ef 8305 	mrs	r3, IPSR
 800816e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008170:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <osDelay+0x1c>
    stat = osErrorISR;
 8008176:	f06f 0305 	mvn.w	r3, #5
 800817a:	60fb      	str	r3, [r7, #12]
 800817c:	e007      	b.n	800818e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800817e:	2300      	movs	r3, #0
 8008180:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d002      	beq.n	800818e <osDelay+0x2c>
      vTaskDelay(ticks);
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f001 fcad 	bl	8009ae8 <vTaskDelay>
    }
  }

  return (stat);
 800818e:	68fb      	ldr	r3, [r7, #12]
}
 8008190:	4618      	mov	r0, r3
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f002 ff96 	bl	800b0d2 <pvTimerGetTimerID>
 80081a6:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d005      	beq.n	80081ba <TimerCallback+0x22>
    callb->func (callb->arg);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	6852      	ldr	r2, [r2, #4]
 80081b6:	4610      	mov	r0, r2
 80081b8:	4798      	blx	r3
  }
}
 80081ba:	bf00      	nop
 80081bc:	3710      	adds	r7, #16
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
	...

080081c4 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b08c      	sub	sp, #48	; 0x30
 80081c8:	af02      	add	r7, sp, #8
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	607a      	str	r2, [r7, #4]
 80081ce:	603b      	str	r3, [r7, #0]
 80081d0:	460b      	mov	r3, r1
 80081d2:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80081d4:	2300      	movs	r3, #0
 80081d6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081d8:	f3ef 8305 	mrs	r3, IPSR
 80081dc:	613b      	str	r3, [r7, #16]
  return(result);
 80081de:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d163      	bne.n	80082ac <osTimerNew+0xe8>
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d060      	beq.n	80082ac <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80081ea:	2008      	movs	r0, #8
 80081ec:	f000 f900 	bl	80083f0 <pvPortMalloc>
 80081f0:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d059      	beq.n	80082ac <osTimerNew+0xe8>
      callb->func = func;
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	68fa      	ldr	r2, [r7, #12]
 80081fc:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8008204:	7afb      	ldrb	r3, [r7, #11]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d102      	bne.n	8008210 <osTimerNew+0x4c>
        reload = pdFALSE;
 800820a:	2300      	movs	r3, #0
 800820c:	61fb      	str	r3, [r7, #28]
 800820e:	e001      	b.n	8008214 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8008210:	2301      	movs	r3, #1
 8008212:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8008214:	f04f 33ff 	mov.w	r3, #4294967295
 8008218:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800821a:	2300      	movs	r3, #0
 800821c:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d01c      	beq.n	800825e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d002      	beq.n	8008232 <osTimerNew+0x6e>
          name = attr->name;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d006      	beq.n	8008248 <osTimerNew+0x84>
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	2b2b      	cmp	r3, #43	; 0x2b
 8008240:	d902      	bls.n	8008248 <osTimerNew+0x84>
          mem = 1;
 8008242:	2301      	movs	r3, #1
 8008244:	61bb      	str	r3, [r7, #24]
 8008246:	e00c      	b.n	8008262 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d108      	bne.n	8008262 <osTimerNew+0x9e>
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d104      	bne.n	8008262 <osTimerNew+0x9e>
            mem = 0;
 8008258:	2300      	movs	r3, #0
 800825a:	61bb      	str	r3, [r7, #24]
 800825c:	e001      	b.n	8008262 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800825e:	2300      	movs	r3, #0
 8008260:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d10c      	bne.n	8008282 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	9301      	str	r3, [sp, #4]
 800826e:	4b12      	ldr	r3, [pc, #72]	; (80082b8 <osTimerNew+0xf4>)
 8008270:	9300      	str	r3, [sp, #0]
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	69fa      	ldr	r2, [r7, #28]
 8008276:	2101      	movs	r1, #1
 8008278:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800827a:	f002 fb82 	bl	800a982 <xTimerCreateStatic>
 800827e:	6238      	str	r0, [r7, #32]
 8008280:	e00b      	b.n	800829a <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d108      	bne.n	800829a <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8008288:	4b0b      	ldr	r3, [pc, #44]	; (80082b8 <osTimerNew+0xf4>)
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	69fa      	ldr	r2, [r7, #28]
 8008290:	2101      	movs	r1, #1
 8008292:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008294:	f002 fb54 	bl	800a940 <xTimerCreate>
 8008298:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800829a:	6a3b      	ldr	r3, [r7, #32]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d105      	bne.n	80082ac <osTimerNew+0xe8>
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d002      	beq.n	80082ac <osTimerNew+0xe8>
        vPortFree (callb);
 80082a6:	6978      	ldr	r0, [r7, #20]
 80082a8:	f000 f8ec 	bl	8008484 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80082ac:	6a3b      	ldr	r3, [r7, #32]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3728      	adds	r7, #40	; 0x28
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	08008199 	.word	0x08008199

080082bc <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80082bc:	b580      	push	{r7, lr}
 80082be:	b088      	sub	sp, #32
 80082c0:	af02      	add	r7, sp, #8
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082ca:	f3ef 8305 	mrs	r3, IPSR
 80082ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80082d0:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d003      	beq.n	80082de <osTimerStart+0x22>
    stat = osErrorISR;
 80082d6:	f06f 0305 	mvn.w	r3, #5
 80082da:	617b      	str	r3, [r7, #20]
 80082dc:	e017      	b.n	800830e <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d103      	bne.n	80082ec <osTimerStart+0x30>
    stat = osErrorParameter;
 80082e4:	f06f 0303 	mvn.w	r3, #3
 80082e8:	617b      	str	r3, [r7, #20]
 80082ea:	e010      	b.n	800830e <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80082ec:	2300      	movs	r3, #0
 80082ee:	9300      	str	r3, [sp, #0]
 80082f0:	2300      	movs	r3, #0
 80082f2:	683a      	ldr	r2, [r7, #0]
 80082f4:	2104      	movs	r1, #4
 80082f6:	6938      	ldr	r0, [r7, #16]
 80082f8:	f002 fbbc 	bl	800aa74 <xTimerGenericCommand>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d102      	bne.n	8008308 <osTimerStart+0x4c>
      stat = osOK;
 8008302:	2300      	movs	r3, #0
 8008304:	617b      	str	r3, [r7, #20]
 8008306:	e002      	b.n	800830e <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8008308:	f06f 0302 	mvn.w	r3, #2
 800830c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800830e:	697b      	ldr	r3, [r7, #20]
}
 8008310:	4618      	mov	r0, r3
 8008312:	3718      	adds	r7, #24
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 8008318:	b580      	push	{r7, lr}
 800831a:	b088      	sub	sp, #32
 800831c:	af02      	add	r7, sp, #8
 800831e:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008324:	f3ef 8305 	mrs	r3, IPSR
 8008328:	60fb      	str	r3, [r7, #12]
  return(result);
 800832a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800832c:	2b00      	cmp	r3, #0
 800832e:	d003      	beq.n	8008338 <osTimerStop+0x20>
    stat = osErrorISR;
 8008330:	f06f 0305 	mvn.w	r3, #5
 8008334:	617b      	str	r3, [r7, #20]
 8008336:	e021      	b.n	800837c <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d103      	bne.n	8008346 <osTimerStop+0x2e>
    stat = osErrorParameter;
 800833e:	f06f 0303 	mvn.w	r3, #3
 8008342:	617b      	str	r3, [r7, #20]
 8008344:	e01a      	b.n	800837c <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 8008346:	6938      	ldr	r0, [r7, #16]
 8008348:	f002 fe9a 	bl	800b080 <xTimerIsTimerActive>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d103      	bne.n	800835a <osTimerStop+0x42>
      stat = osErrorResource;
 8008352:	f06f 0302 	mvn.w	r3, #2
 8008356:	617b      	str	r3, [r7, #20]
 8008358:	e010      	b.n	800837c <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800835a:	2300      	movs	r3, #0
 800835c:	9300      	str	r3, [sp, #0]
 800835e:	2300      	movs	r3, #0
 8008360:	2200      	movs	r2, #0
 8008362:	2103      	movs	r1, #3
 8008364:	6938      	ldr	r0, [r7, #16]
 8008366:	f002 fb85 	bl	800aa74 <xTimerGenericCommand>
 800836a:	4603      	mov	r3, r0
 800836c:	2b01      	cmp	r3, #1
 800836e:	d102      	bne.n	8008376 <osTimerStop+0x5e>
        stat = osOK;
 8008370:	2300      	movs	r3, #0
 8008372:	617b      	str	r3, [r7, #20]
 8008374:	e002      	b.n	800837c <osTimerStop+0x64>
      } else {
        stat = osError;
 8008376:	f04f 33ff 	mov.w	r3, #4294967295
 800837a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800837c:	697b      	ldr	r3, [r7, #20]
}
 800837e:	4618      	mov	r0, r3
 8008380:	3718      	adds	r7, #24
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
	...

08008388 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	4a07      	ldr	r2, [pc, #28]	; (80083b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8008398:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	4a06      	ldr	r2, [pc, #24]	; (80083b8 <vApplicationGetIdleTaskMemory+0x30>)
 800839e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2280      	movs	r2, #128	; 0x80
 80083a4:	601a      	str	r2, [r3, #0]
}
 80083a6:	bf00      	nop
 80083a8:	3714      	adds	r7, #20
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	20000878 	.word	0x20000878
 80083b8:	20000a2c 	.word	0x20000a2c

080083bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80083bc:	b480      	push	{r7}
 80083be:	b085      	sub	sp, #20
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	4a07      	ldr	r2, [pc, #28]	; (80083e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80083cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	4a06      	ldr	r2, [pc, #24]	; (80083ec <vApplicationGetTimerTaskMemory+0x30>)
 80083d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083da:	601a      	str	r2, [r3, #0]
}
 80083dc:	bf00      	nop
 80083de:	3714      	adds	r7, #20
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr
 80083e8:	20000c2c 	.word	0x20000c2c
 80083ec:	20000de0 	.word	0x20000de0

080083f0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 80083f8:	2300      	movs	r3, #0
 80083fa:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f003 0307 	and.w	r3, r3, #7
 8008402:	2b00      	cmp	r3, #0
 8008404:	d004      	beq.n	8008410 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f023 0307 	bic.w	r3, r3, #7
 800840c:	3308      	adds	r3, #8
 800840e:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8008410:	f001 fc84 	bl	8009d1c <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8008414:	4b18      	ldr	r3, [pc, #96]	; (8008478 <pvPortMalloc+0x88>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d105      	bne.n	8008428 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800841c:	4b17      	ldr	r3, [pc, #92]	; (800847c <pvPortMalloc+0x8c>)
 800841e:	f023 0307 	bic.w	r3, r3, #7
 8008422:	461a      	mov	r2, r3
 8008424:	4b14      	ldr	r3, [pc, #80]	; (8008478 <pvPortMalloc+0x88>)
 8008426:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8008428:	4b15      	ldr	r3, [pc, #84]	; (8008480 <pvPortMalloc+0x90>)
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4413      	add	r3, r2
 8008430:	f246 129f 	movw	r2, #24991	; 0x619f
 8008434:	4293      	cmp	r3, r2
 8008436:	d813      	bhi.n	8008460 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8008438:	4b11      	ldr	r3, [pc, #68]	; (8008480 <pvPortMalloc+0x90>)
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	441a      	add	r2, r3
 8008440:	4b0f      	ldr	r3, [pc, #60]	; (8008480 <pvPortMalloc+0x90>)
 8008442:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8008444:	429a      	cmp	r2, r3
 8008446:	d90b      	bls.n	8008460 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8008448:	4b0b      	ldr	r3, [pc, #44]	; (8008478 <pvPortMalloc+0x88>)
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	4b0c      	ldr	r3, [pc, #48]	; (8008480 <pvPortMalloc+0x90>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4413      	add	r3, r2
 8008452:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8008454:	4b0a      	ldr	r3, [pc, #40]	; (8008480 <pvPortMalloc+0x90>)
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4413      	add	r3, r2
 800845c:	4a08      	ldr	r2, [pc, #32]	; (8008480 <pvPortMalloc+0x90>)
 800845e:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008460:	f001 fca2 	bl	8009da8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d101      	bne.n	800846e <pvPortMalloc+0x7e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800846a:	f7f9 fad1 	bl	8001a10 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 800846e:	68fb      	ldr	r3, [r7, #12]
}
 8008470:	4618      	mov	r0, r3
 8008472:	3710      	adds	r7, #16
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	2000738c 	.word	0x2000738c
 800847c:	200011e8 	.word	0x200011e8
 8008480:	20007388 	.word	0x20007388

08008484 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00a      	beq.n	80084a8 <vPortFree+0x24>
	__asm volatile
 8008492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008496:	f383 8811 	msr	BASEPRI, r3
 800849a:	f3bf 8f6f 	isb	sy
 800849e:	f3bf 8f4f 	dsb	sy
 80084a2:	60fb      	str	r3, [r7, #12]
}
 80084a4:	bf00      	nop
 80084a6:	e7fe      	b.n	80084a6 <vPortFree+0x22>
}
 80084a8:	bf00      	nop
 80084aa:	3714      	adds	r7, #20
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f103 0208 	add.w	r2, r3, #8
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f04f 32ff 	mov.w	r2, #4294967295
 80084cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f103 0208 	add.w	r2, r3, #8
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f103 0208 	add.w	r2, r3, #8
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008502:	bf00      	nop
 8008504:	370c      	adds	r7, #12
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr

0800850e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800850e:	b480      	push	{r7}
 8008510:	b085      	sub	sp, #20
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
 8008516:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	689a      	ldr	r2, [r3, #8]
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	683a      	ldr	r2, [r7, #0]
 8008532:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	683a      	ldr	r2, [r7, #0]
 8008538:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	1c5a      	adds	r2, r3, #1
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	601a      	str	r2, [r3, #0]
}
 800854a:	bf00      	nop
 800854c:	3714      	adds	r7, #20
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr

08008556 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008556:	b480      	push	{r7}
 8008558:	b085      	sub	sp, #20
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
 800855e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800856c:	d103      	bne.n	8008576 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	60fb      	str	r3, [r7, #12]
 8008574:	e00c      	b.n	8008590 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	3308      	adds	r3, #8
 800857a:	60fb      	str	r3, [r7, #12]
 800857c:	e002      	b.n	8008584 <vListInsert+0x2e>
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	60fb      	str	r3, [r7, #12]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	68ba      	ldr	r2, [r7, #8]
 800858c:	429a      	cmp	r2, r3
 800858e:	d2f6      	bcs.n	800857e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	685a      	ldr	r2, [r3, #4]
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	683a      	ldr	r2, [r7, #0]
 800859e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	683a      	ldr	r2, [r7, #0]
 80085aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	1c5a      	adds	r2, r3, #1
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	601a      	str	r2, [r3, #0]
}
 80085bc:	bf00      	nop
 80085be:	3714      	adds	r7, #20
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80085c8:	b480      	push	{r7}
 80085ca:	b085      	sub	sp, #20
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	691b      	ldr	r3, [r3, #16]
 80085d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	6892      	ldr	r2, [r2, #8]
 80085de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	6852      	ldr	r2, [r2, #4]
 80085e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d103      	bne.n	80085fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	689a      	ldr	r2, [r3, #8]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	1e5a      	subs	r2, r3, #1
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
}
 8008610:	4618      	mov	r0, r3
 8008612:	3714      	adds	r7, #20
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800861c:	b480      	push	{r7}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	3b04      	subs	r3, #4
 800862c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008634:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	3b04      	subs	r3, #4
 800863a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	f023 0201 	bic.w	r2, r3, #1
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	3b04      	subs	r3, #4
 800864a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800864c:	4a0c      	ldr	r2, [pc, #48]	; (8008680 <pxPortInitialiseStack+0x64>)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	3b14      	subs	r3, #20
 8008656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	3b04      	subs	r3, #4
 8008662:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f06f 0202 	mvn.w	r2, #2
 800866a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	3b20      	subs	r3, #32
 8008670:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008672:	68fb      	ldr	r3, [r7, #12]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3714      	adds	r7, #20
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr
 8008680:	08008685 	.word	0x08008685

08008684 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800868a:	2300      	movs	r3, #0
 800868c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800868e:	4b12      	ldr	r3, [pc, #72]	; (80086d8 <prvTaskExitError+0x54>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008696:	d00a      	beq.n	80086ae <prvTaskExitError+0x2a>
	__asm volatile
 8008698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869c:	f383 8811 	msr	BASEPRI, r3
 80086a0:	f3bf 8f6f 	isb	sy
 80086a4:	f3bf 8f4f 	dsb	sy
 80086a8:	60fb      	str	r3, [r7, #12]
}
 80086aa:	bf00      	nop
 80086ac:	e7fe      	b.n	80086ac <prvTaskExitError+0x28>
	__asm volatile
 80086ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	60bb      	str	r3, [r7, #8]
}
 80086c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80086c2:	bf00      	nop
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d0fc      	beq.n	80086c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80086ca:	bf00      	nop
 80086cc:	bf00      	nop
 80086ce:	3714      	adds	r7, #20
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr
 80086d8:	20000010 	.word	0x20000010
 80086dc:	00000000 	.word	0x00000000

080086e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80086e0:	4b07      	ldr	r3, [pc, #28]	; (8008700 <pxCurrentTCBConst2>)
 80086e2:	6819      	ldr	r1, [r3, #0]
 80086e4:	6808      	ldr	r0, [r1, #0]
 80086e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ea:	f380 8809 	msr	PSP, r0
 80086ee:	f3bf 8f6f 	isb	sy
 80086f2:	f04f 0000 	mov.w	r0, #0
 80086f6:	f380 8811 	msr	BASEPRI, r0
 80086fa:	4770      	bx	lr
 80086fc:	f3af 8000 	nop.w

08008700 <pxCurrentTCBConst2>:
 8008700:	200073e4 	.word	0x200073e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008704:	bf00      	nop
 8008706:	bf00      	nop

08008708 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008708:	4808      	ldr	r0, [pc, #32]	; (800872c <prvPortStartFirstTask+0x24>)
 800870a:	6800      	ldr	r0, [r0, #0]
 800870c:	6800      	ldr	r0, [r0, #0]
 800870e:	f380 8808 	msr	MSP, r0
 8008712:	f04f 0000 	mov.w	r0, #0
 8008716:	f380 8814 	msr	CONTROL, r0
 800871a:	b662      	cpsie	i
 800871c:	b661      	cpsie	f
 800871e:	f3bf 8f4f 	dsb	sy
 8008722:	f3bf 8f6f 	isb	sy
 8008726:	df00      	svc	0
 8008728:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800872a:	bf00      	nop
 800872c:	e000ed08 	.word	0xe000ed08

08008730 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b086      	sub	sp, #24
 8008734:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008736:	4b46      	ldr	r3, [pc, #280]	; (8008850 <xPortStartScheduler+0x120>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a46      	ldr	r2, [pc, #280]	; (8008854 <xPortStartScheduler+0x124>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d10a      	bne.n	8008756 <xPortStartScheduler+0x26>
	__asm volatile
 8008740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008744:	f383 8811 	msr	BASEPRI, r3
 8008748:	f3bf 8f6f 	isb	sy
 800874c:	f3bf 8f4f 	dsb	sy
 8008750:	613b      	str	r3, [r7, #16]
}
 8008752:	bf00      	nop
 8008754:	e7fe      	b.n	8008754 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008756:	4b3e      	ldr	r3, [pc, #248]	; (8008850 <xPortStartScheduler+0x120>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a3f      	ldr	r2, [pc, #252]	; (8008858 <xPortStartScheduler+0x128>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d10a      	bne.n	8008776 <xPortStartScheduler+0x46>
	__asm volatile
 8008760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008764:	f383 8811 	msr	BASEPRI, r3
 8008768:	f3bf 8f6f 	isb	sy
 800876c:	f3bf 8f4f 	dsb	sy
 8008770:	60fb      	str	r3, [r7, #12]
}
 8008772:	bf00      	nop
 8008774:	e7fe      	b.n	8008774 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008776:	4b39      	ldr	r3, [pc, #228]	; (800885c <xPortStartScheduler+0x12c>)
 8008778:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	b2db      	uxtb	r3, r3
 8008780:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	22ff      	movs	r2, #255	; 0xff
 8008786:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	b2db      	uxtb	r3, r3
 800878e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008790:	78fb      	ldrb	r3, [r7, #3]
 8008792:	b2db      	uxtb	r3, r3
 8008794:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008798:	b2da      	uxtb	r2, r3
 800879a:	4b31      	ldr	r3, [pc, #196]	; (8008860 <xPortStartScheduler+0x130>)
 800879c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800879e:	4b31      	ldr	r3, [pc, #196]	; (8008864 <xPortStartScheduler+0x134>)
 80087a0:	2207      	movs	r2, #7
 80087a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087a4:	e009      	b.n	80087ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80087a6:	4b2f      	ldr	r3, [pc, #188]	; (8008864 <xPortStartScheduler+0x134>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	3b01      	subs	r3, #1
 80087ac:	4a2d      	ldr	r2, [pc, #180]	; (8008864 <xPortStartScheduler+0x134>)
 80087ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80087b0:	78fb      	ldrb	r3, [r7, #3]
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	005b      	lsls	r3, r3, #1
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087ba:	78fb      	ldrb	r3, [r7, #3]
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087c2:	2b80      	cmp	r3, #128	; 0x80
 80087c4:	d0ef      	beq.n	80087a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80087c6:	4b27      	ldr	r3, [pc, #156]	; (8008864 <xPortStartScheduler+0x134>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f1c3 0307 	rsb	r3, r3, #7
 80087ce:	2b04      	cmp	r3, #4
 80087d0:	d00a      	beq.n	80087e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80087d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d6:	f383 8811 	msr	BASEPRI, r3
 80087da:	f3bf 8f6f 	isb	sy
 80087de:	f3bf 8f4f 	dsb	sy
 80087e2:	60bb      	str	r3, [r7, #8]
}
 80087e4:	bf00      	nop
 80087e6:	e7fe      	b.n	80087e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80087e8:	4b1e      	ldr	r3, [pc, #120]	; (8008864 <xPortStartScheduler+0x134>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	021b      	lsls	r3, r3, #8
 80087ee:	4a1d      	ldr	r2, [pc, #116]	; (8008864 <xPortStartScheduler+0x134>)
 80087f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80087f2:	4b1c      	ldr	r3, [pc, #112]	; (8008864 <xPortStartScheduler+0x134>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80087fa:	4a1a      	ldr	r2, [pc, #104]	; (8008864 <xPortStartScheduler+0x134>)
 80087fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	b2da      	uxtb	r2, r3
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008806:	4b18      	ldr	r3, [pc, #96]	; (8008868 <xPortStartScheduler+0x138>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a17      	ldr	r2, [pc, #92]	; (8008868 <xPortStartScheduler+0x138>)
 800880c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008810:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008812:	4b15      	ldr	r3, [pc, #84]	; (8008868 <xPortStartScheduler+0x138>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a14      	ldr	r2, [pc, #80]	; (8008868 <xPortStartScheduler+0x138>)
 8008818:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800881c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800881e:	f000 f9a9 	bl	8008b74 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008822:	4b12      	ldr	r3, [pc, #72]	; (800886c <xPortStartScheduler+0x13c>)
 8008824:	2200      	movs	r2, #0
 8008826:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008828:	f000 f9e0 	bl	8008bec <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800882c:	4b10      	ldr	r3, [pc, #64]	; (8008870 <xPortStartScheduler+0x140>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a0f      	ldr	r2, [pc, #60]	; (8008870 <xPortStartScheduler+0x140>)
 8008832:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008836:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008838:	f7ff ff66 	bl	8008708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800883c:	f001 fc4c 	bl	800a0d8 <vTaskSwitchContext>
	prvTaskExitError();
 8008840:	f7ff ff20 	bl	8008684 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3718      	adds	r7, #24
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	e000ed00 	.word	0xe000ed00
 8008854:	410fc271 	.word	0x410fc271
 8008858:	410fc270 	.word	0x410fc270
 800885c:	e000e400 	.word	0xe000e400
 8008860:	2000739c 	.word	0x2000739c
 8008864:	200073a0 	.word	0x200073a0
 8008868:	e000ed20 	.word	0xe000ed20
 800886c:	20000010 	.word	0x20000010
 8008870:	e000ef34 	.word	0xe000ef34

08008874 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
	__asm volatile
 800887a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887e:	f383 8811 	msr	BASEPRI, r3
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	607b      	str	r3, [r7, #4]
}
 800888c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800888e:	4b0f      	ldr	r3, [pc, #60]	; (80088cc <vPortEnterCritical+0x58>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	3301      	adds	r3, #1
 8008894:	4a0d      	ldr	r2, [pc, #52]	; (80088cc <vPortEnterCritical+0x58>)
 8008896:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008898:	4b0c      	ldr	r3, [pc, #48]	; (80088cc <vPortEnterCritical+0x58>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2b01      	cmp	r3, #1
 800889e:	d10f      	bne.n	80088c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80088a0:	4b0b      	ldr	r3, [pc, #44]	; (80088d0 <vPortEnterCritical+0x5c>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00a      	beq.n	80088c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80088aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ae:	f383 8811 	msr	BASEPRI, r3
 80088b2:	f3bf 8f6f 	isb	sy
 80088b6:	f3bf 8f4f 	dsb	sy
 80088ba:	603b      	str	r3, [r7, #0]
}
 80088bc:	bf00      	nop
 80088be:	e7fe      	b.n	80088be <vPortEnterCritical+0x4a>
	}
}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr
 80088cc:	20000010 	.word	0x20000010
 80088d0:	e000ed04 	.word	0xe000ed04

080088d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80088da:	4b12      	ldr	r3, [pc, #72]	; (8008924 <vPortExitCritical+0x50>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d10a      	bne.n	80088f8 <vPortExitCritical+0x24>
	__asm volatile
 80088e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e6:	f383 8811 	msr	BASEPRI, r3
 80088ea:	f3bf 8f6f 	isb	sy
 80088ee:	f3bf 8f4f 	dsb	sy
 80088f2:	607b      	str	r3, [r7, #4]
}
 80088f4:	bf00      	nop
 80088f6:	e7fe      	b.n	80088f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80088f8:	4b0a      	ldr	r3, [pc, #40]	; (8008924 <vPortExitCritical+0x50>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	3b01      	subs	r3, #1
 80088fe:	4a09      	ldr	r2, [pc, #36]	; (8008924 <vPortExitCritical+0x50>)
 8008900:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008902:	4b08      	ldr	r3, [pc, #32]	; (8008924 <vPortExitCritical+0x50>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d105      	bne.n	8008916 <vPortExitCritical+0x42>
 800890a:	2300      	movs	r3, #0
 800890c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	f383 8811 	msr	BASEPRI, r3
}
 8008914:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008916:	bf00      	nop
 8008918:	370c      	adds	r7, #12
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	20000010 	.word	0x20000010
	...

08008930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008930:	f3ef 8009 	mrs	r0, PSP
 8008934:	f3bf 8f6f 	isb	sy
 8008938:	4b15      	ldr	r3, [pc, #84]	; (8008990 <pxCurrentTCBConst>)
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	f01e 0f10 	tst.w	lr, #16
 8008940:	bf08      	it	eq
 8008942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800894a:	6010      	str	r0, [r2, #0]
 800894c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008950:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008954:	f380 8811 	msr	BASEPRI, r0
 8008958:	f3bf 8f4f 	dsb	sy
 800895c:	f3bf 8f6f 	isb	sy
 8008960:	f001 fbba 	bl	800a0d8 <vTaskSwitchContext>
 8008964:	f04f 0000 	mov.w	r0, #0
 8008968:	f380 8811 	msr	BASEPRI, r0
 800896c:	bc09      	pop	{r0, r3}
 800896e:	6819      	ldr	r1, [r3, #0]
 8008970:	6808      	ldr	r0, [r1, #0]
 8008972:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008976:	f01e 0f10 	tst.w	lr, #16
 800897a:	bf08      	it	eq
 800897c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008980:	f380 8809 	msr	PSP, r0
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	f3af 8000 	nop.w

08008990 <pxCurrentTCBConst>:
 8008990:	200073e4 	.word	0x200073e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008994:	bf00      	nop
 8008996:	bf00      	nop

08008998 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
	__asm volatile
 800899e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	607b      	str	r3, [r7, #4]
}
 80089b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80089b2:	f001 facf 	bl	8009f54 <xTaskIncrementTick>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d003      	beq.n	80089c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80089bc:	4b06      	ldr	r3, [pc, #24]	; (80089d8 <xPortSysTickHandler+0x40>)
 80089be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089c2:	601a      	str	r2, [r3, #0]
 80089c4:	2300      	movs	r3, #0
 80089c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	f383 8811 	msr	BASEPRI, r3
}
 80089ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80089d0:	bf00      	nop
 80089d2:	3708      	adds	r7, #8
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	e000ed04 	.word	0xe000ed04

080089dc <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b088      	sub	sp, #32
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 80089e4:	4b5d      	ldr	r3, [pc, #372]	; (8008b5c <vPortSuppressTicksAndSleep+0x180>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d902      	bls.n	80089f4 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 80089ee:	4b5b      	ldr	r3, [pc, #364]	; (8008b5c <vPortSuppressTicksAndSleep+0x180>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 80089f4:	4b5a      	ldr	r3, [pc, #360]	; (8008b60 <vPortSuppressTicksAndSleep+0x184>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a59      	ldr	r2, [pc, #356]	; (8008b60 <vPortSuppressTicksAndSleep+0x184>)
 80089fa:	f023 0301 	bic.w	r3, r3, #1
 80089fe:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 8008a00:	4b58      	ldr	r3, [pc, #352]	; (8008b64 <vPortSuppressTicksAndSleep+0x188>)
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	3b01      	subs	r3, #1
 8008a08:	4957      	ldr	r1, [pc, #348]	; (8008b68 <vPortSuppressTicksAndSleep+0x18c>)
 8008a0a:	6809      	ldr	r1, [r1, #0]
 8008a0c:	fb01 f303 	mul.w	r3, r1, r3
 8008a10:	4413      	add	r3, r2
 8008a12:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 8008a14:	4b55      	ldr	r3, [pc, #340]	; (8008b6c <vPortSuppressTicksAndSleep+0x190>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	69fa      	ldr	r2, [r7, #28]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d904      	bls.n	8008a28 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 8008a1e:	4b53      	ldr	r3, [pc, #332]	; (8008b6c <vPortSuppressTicksAndSleep+0x190>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	69fa      	ldr	r2, [r7, #28]
 8008a24:	1ad3      	subs	r3, r2, r3
 8008a26:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 8008a28:	b672      	cpsid	i
		__asm volatile( "dsb" );
 8008a2a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 8008a2e:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 8008a32:	f001 fd5f 	bl	800a4f4 <eTaskConfirmSleepModeStatus>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d110      	bne.n	8008a5e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8008a3c:	4b49      	ldr	r3, [pc, #292]	; (8008b64 <vPortSuppressTicksAndSleep+0x188>)
 8008a3e:	4a4c      	ldr	r2, [pc, #304]	; (8008b70 <vPortSuppressTicksAndSleep+0x194>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8008a44:	4b46      	ldr	r3, [pc, #280]	; (8008b60 <vPortSuppressTicksAndSleep+0x184>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a45      	ldr	r2, [pc, #276]	; (8008b60 <vPortSuppressTicksAndSleep+0x184>)
 8008a4a:	f043 0301 	orr.w	r3, r3, #1
 8008a4e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8008a50:	4b45      	ldr	r3, [pc, #276]	; (8008b68 <vPortSuppressTicksAndSleep+0x18c>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a46      	ldr	r2, [pc, #280]	; (8008b70 <vPortSuppressTicksAndSleep+0x194>)
 8008a56:	3b01      	subs	r3, #1
 8008a58:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 8008a5a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 8008a5c:	e079      	b.n	8008b52 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 8008a5e:	4a44      	ldr	r2, [pc, #272]	; (8008b70 <vPortSuppressTicksAndSleep+0x194>)
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a64:	4b3f      	ldr	r3, [pc, #252]	; (8008b64 <vPortSuppressTicksAndSleep+0x188>)
 8008a66:	2200      	movs	r2, #0
 8008a68:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8008a6a:	4b3d      	ldr	r3, [pc, #244]	; (8008b60 <vPortSuppressTicksAndSleep+0x184>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a3c      	ldr	r2, [pc, #240]	; (8008b60 <vPortSuppressTicksAndSleep+0x184>)
 8008a70:	f043 0301 	orr.w	r3, r3, #1
 8008a74:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	613b      	str	r3, [r7, #16]
 8008a7e:	6938      	ldr	r0, [r7, #16]
 8008a80:	f7f8 ffcd 	bl	8001a1e <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d004      	beq.n	8008a94 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 8008a8a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 8008a8e:	bf30      	wfi
				__asm volatile( "isb" );
 8008a90:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f7f8 ffcc 	bl	8001a32 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 8008a9a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 8008a9c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8008aa0:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 8008aa4:	b672      	cpsid	i
			__asm volatile( "dsb" );
 8008aa6:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8008aaa:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 8008aae:	4b2c      	ldr	r3, [pc, #176]	; (8008b60 <vPortSuppressTicksAndSleep+0x184>)
 8008ab0:	2206      	movs	r2, #6
 8008ab2:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 8008ab4:	4b2a      	ldr	r3, [pc, #168]	; (8008b60 <vPortSuppressTicksAndSleep+0x184>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d01d      	beq.n	8008afc <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 8008ac0:	4b29      	ldr	r3, [pc, #164]	; (8008b68 <vPortSuppressTicksAndSleep+0x18c>)
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	4b27      	ldr	r3, [pc, #156]	; (8008b64 <vPortSuppressTicksAndSleep+0x188>)
 8008ac6:	6819      	ldr	r1, [r3, #0]
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	1acb      	subs	r3, r1, r3
 8008acc:	4413      	add	r3, r2
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8008ad2:	4b26      	ldr	r3, [pc, #152]	; (8008b6c <vPortSuppressTicksAndSleep+0x190>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	697a      	ldr	r2, [r7, #20]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d304      	bcc.n	8008ae6 <vPortSuppressTicksAndSleep+0x10a>
 8008adc:	4b22      	ldr	r3, [pc, #136]	; (8008b68 <vPortSuppressTicksAndSleep+0x18c>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	697a      	ldr	r2, [r7, #20]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d903      	bls.n	8008aee <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8008ae6:	4b20      	ldr	r3, [pc, #128]	; (8008b68 <vPortSuppressTicksAndSleep+0x18c>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	3b01      	subs	r3, #1
 8008aec:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 8008aee:	4a20      	ldr	r2, [pc, #128]	; (8008b70 <vPortSuppressTicksAndSleep+0x194>)
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	3b01      	subs	r3, #1
 8008af8:	61bb      	str	r3, [r7, #24]
 8008afa:	e018      	b.n	8008b2e <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8008afc:	4b1a      	ldr	r3, [pc, #104]	; (8008b68 <vPortSuppressTicksAndSleep+0x18c>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	fb03 f202 	mul.w	r2, r3, r2
 8008b06:	4b17      	ldr	r3, [pc, #92]	; (8008b64 <vPortSuppressTicksAndSleep+0x188>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 8008b0e:	4b16      	ldr	r3, [pc, #88]	; (8008b68 <vPortSuppressTicksAndSleep+0x18c>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b18:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	4a12      	ldr	r2, [pc, #72]	; (8008b68 <vPortSuppressTicksAndSleep+0x18c>)
 8008b20:	6812      	ldr	r2, [r2, #0]
 8008b22:	fb03 f202 	mul.w	r2, r3, r2
 8008b26:	4912      	ldr	r1, [pc, #72]	; (8008b70 <vPortSuppressTicksAndSleep+0x194>)
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	1ad3      	subs	r3, r2, r3
 8008b2c:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008b2e:	4b0d      	ldr	r3, [pc, #52]	; (8008b64 <vPortSuppressTicksAndSleep+0x188>)
 8008b30:	2200      	movs	r2, #0
 8008b32:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8008b34:	4b0a      	ldr	r3, [pc, #40]	; (8008b60 <vPortSuppressTicksAndSleep+0x184>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a09      	ldr	r2, [pc, #36]	; (8008b60 <vPortSuppressTicksAndSleep+0x184>)
 8008b3a:	f043 0301 	orr.w	r3, r3, #1
 8008b3e:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 8008b40:	69b8      	ldr	r0, [r7, #24]
 8008b42:	f001 f9df 	bl	8009f04 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8008b46:	4b08      	ldr	r3, [pc, #32]	; (8008b68 <vPortSuppressTicksAndSleep+0x18c>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a09      	ldr	r2, [pc, #36]	; (8008b70 <vPortSuppressTicksAndSleep+0x194>)
 8008b4c:	3b01      	subs	r3, #1
 8008b4e:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 8008b50:	b662      	cpsie	i
	}
 8008b52:	bf00      	nop
 8008b54:	3720      	adds	r7, #32
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop
 8008b5c:	20007394 	.word	0x20007394
 8008b60:	e000e010 	.word	0xe000e010
 8008b64:	e000e018 	.word	0xe000e018
 8008b68:	20007390 	.word	0x20007390
 8008b6c:	20007398 	.word	0x20007398
 8008b70:	e000e014 	.word	0xe000e014

08008b74 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008b74:	b480      	push	{r7}
 8008b76:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8008b78:	4b14      	ldr	r3, [pc, #80]	; (8008bcc <vPortSetupTimerInterrupt+0x58>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a14      	ldr	r2, [pc, #80]	; (8008bd0 <vPortSetupTimerInterrupt+0x5c>)
 8008b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b82:	099b      	lsrs	r3, r3, #6
 8008b84:	4a13      	ldr	r2, [pc, #76]	; (8008bd4 <vPortSetupTimerInterrupt+0x60>)
 8008b86:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 8008b88:	4b12      	ldr	r3, [pc, #72]	; (8008bd4 <vPortSetupTimerInterrupt+0x60>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8008b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b94:	4a10      	ldr	r2, [pc, #64]	; (8008bd8 <vPortSetupTimerInterrupt+0x64>)
 8008b96:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8008b98:	4b10      	ldr	r3, [pc, #64]	; (8008bdc <vPortSetupTimerInterrupt+0x68>)
 8008b9a:	222d      	movs	r2, #45	; 0x2d
 8008b9c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008b9e:	4b10      	ldr	r3, [pc, #64]	; (8008be0 <vPortSetupTimerInterrupt+0x6c>)
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ba4:	4b0f      	ldr	r3, [pc, #60]	; (8008be4 <vPortSetupTimerInterrupt+0x70>)
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008baa:	4b08      	ldr	r3, [pc, #32]	; (8008bcc <vPortSetupTimerInterrupt+0x58>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a08      	ldr	r2, [pc, #32]	; (8008bd0 <vPortSetupTimerInterrupt+0x5c>)
 8008bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8008bb4:	099b      	lsrs	r3, r3, #6
 8008bb6:	4a0c      	ldr	r2, [pc, #48]	; (8008be8 <vPortSetupTimerInterrupt+0x74>)
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008bbc:	4b08      	ldr	r3, [pc, #32]	; (8008be0 <vPortSetupTimerInterrupt+0x6c>)
 8008bbe:	2207      	movs	r2, #7
 8008bc0:	601a      	str	r2, [r3, #0]
}
 8008bc2:	bf00      	nop
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr
 8008bcc:	20000004 	.word	0x20000004
 8008bd0:	10624dd3 	.word	0x10624dd3
 8008bd4:	20007390 	.word	0x20007390
 8008bd8:	20007394 	.word	0x20007394
 8008bdc:	20007398 	.word	0x20007398
 8008be0:	e000e010 	.word	0xe000e010
 8008be4:	e000e018 	.word	0xe000e018
 8008be8:	e000e014 	.word	0xe000e014

08008bec <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008bec:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008bfc <vPortEnableVFP+0x10>
 8008bf0:	6801      	ldr	r1, [r0, #0]
 8008bf2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008bf6:	6001      	str	r1, [r0, #0]
 8008bf8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008bfa:	bf00      	nop
 8008bfc:	e000ed88 	.word	0xe000ed88

08008c00 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008c06:	f3ef 8305 	mrs	r3, IPSR
 8008c0a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2b0f      	cmp	r3, #15
 8008c10:	d914      	bls.n	8008c3c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008c12:	4a17      	ldr	r2, [pc, #92]	; (8008c70 <vPortValidateInterruptPriority+0x70>)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	4413      	add	r3, r2
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008c1c:	4b15      	ldr	r3, [pc, #84]	; (8008c74 <vPortValidateInterruptPriority+0x74>)
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	7afa      	ldrb	r2, [r7, #11]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d20a      	bcs.n	8008c3c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2a:	f383 8811 	msr	BASEPRI, r3
 8008c2e:	f3bf 8f6f 	isb	sy
 8008c32:	f3bf 8f4f 	dsb	sy
 8008c36:	607b      	str	r3, [r7, #4]
}
 8008c38:	bf00      	nop
 8008c3a:	e7fe      	b.n	8008c3a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008c3c:	4b0e      	ldr	r3, [pc, #56]	; (8008c78 <vPortValidateInterruptPriority+0x78>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008c44:	4b0d      	ldr	r3, [pc, #52]	; (8008c7c <vPortValidateInterruptPriority+0x7c>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d90a      	bls.n	8008c62 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c50:	f383 8811 	msr	BASEPRI, r3
 8008c54:	f3bf 8f6f 	isb	sy
 8008c58:	f3bf 8f4f 	dsb	sy
 8008c5c:	603b      	str	r3, [r7, #0]
}
 8008c5e:	bf00      	nop
 8008c60:	e7fe      	b.n	8008c60 <vPortValidateInterruptPriority+0x60>
	}
 8008c62:	bf00      	nop
 8008c64:	3714      	adds	r7, #20
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop
 8008c70:	e000e3f0 	.word	0xe000e3f0
 8008c74:	2000739c 	.word	0x2000739c
 8008c78:	e000ed0c 	.word	0xe000ed0c
 8008c7c:	200073a0 	.word	0x200073a0

08008c80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d10a      	bne.n	8008caa <xQueueGenericReset+0x2a>
	__asm volatile
 8008c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c98:	f383 8811 	msr	BASEPRI, r3
 8008c9c:	f3bf 8f6f 	isb	sy
 8008ca0:	f3bf 8f4f 	dsb	sy
 8008ca4:	60bb      	str	r3, [r7, #8]
}
 8008ca6:	bf00      	nop
 8008ca8:	e7fe      	b.n	8008ca8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008caa:	f7ff fde3 	bl	8008874 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cb6:	68f9      	ldr	r1, [r7, #12]
 8008cb8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008cba:	fb01 f303 	mul.w	r3, r1, r3
 8008cbe:	441a      	add	r2, r3
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cda:	3b01      	subs	r3, #1
 8008cdc:	68f9      	ldr	r1, [r7, #12]
 8008cde:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008ce0:	fb01 f303 	mul.w	r3, r1, r3
 8008ce4:	441a      	add	r2, r3
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	22ff      	movs	r2, #255	; 0xff
 8008cee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	22ff      	movs	r2, #255	; 0xff
 8008cf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d114      	bne.n	8008d2a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	691b      	ldr	r3, [r3, #16]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d01a      	beq.n	8008d3e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	3310      	adds	r3, #16
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f001 fab5 	bl	800a27c <xTaskRemoveFromEventList>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d012      	beq.n	8008d3e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008d18:	4b0c      	ldr	r3, [pc, #48]	; (8008d4c <xQueueGenericReset+0xcc>)
 8008d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d1e:	601a      	str	r2, [r3, #0]
 8008d20:	f3bf 8f4f 	dsb	sy
 8008d24:	f3bf 8f6f 	isb	sy
 8008d28:	e009      	b.n	8008d3e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	3310      	adds	r3, #16
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7ff fbc0 	bl	80084b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	3324      	adds	r3, #36	; 0x24
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7ff fbbb 	bl	80084b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008d3e:	f7ff fdc9 	bl	80088d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008d42:	2301      	movs	r3, #1
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	e000ed04 	.word	0xe000ed04

08008d50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b08e      	sub	sp, #56	; 0x38
 8008d54:	af02      	add	r7, sp, #8
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	607a      	str	r2, [r7, #4]
 8008d5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d10a      	bne.n	8008d7a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d68:	f383 8811 	msr	BASEPRI, r3
 8008d6c:	f3bf 8f6f 	isb	sy
 8008d70:	f3bf 8f4f 	dsb	sy
 8008d74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008d76:	bf00      	nop
 8008d78:	e7fe      	b.n	8008d78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d10a      	bne.n	8008d96 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d84:	f383 8811 	msr	BASEPRI, r3
 8008d88:	f3bf 8f6f 	isb	sy
 8008d8c:	f3bf 8f4f 	dsb	sy
 8008d90:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008d92:	bf00      	nop
 8008d94:	e7fe      	b.n	8008d94 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d002      	beq.n	8008da2 <xQueueGenericCreateStatic+0x52>
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d001      	beq.n	8008da6 <xQueueGenericCreateStatic+0x56>
 8008da2:	2301      	movs	r3, #1
 8008da4:	e000      	b.n	8008da8 <xQueueGenericCreateStatic+0x58>
 8008da6:	2300      	movs	r3, #0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d10a      	bne.n	8008dc2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db0:	f383 8811 	msr	BASEPRI, r3
 8008db4:	f3bf 8f6f 	isb	sy
 8008db8:	f3bf 8f4f 	dsb	sy
 8008dbc:	623b      	str	r3, [r7, #32]
}
 8008dbe:	bf00      	nop
 8008dc0:	e7fe      	b.n	8008dc0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d102      	bne.n	8008dce <xQueueGenericCreateStatic+0x7e>
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d101      	bne.n	8008dd2 <xQueueGenericCreateStatic+0x82>
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e000      	b.n	8008dd4 <xQueueGenericCreateStatic+0x84>
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d10a      	bne.n	8008dee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ddc:	f383 8811 	msr	BASEPRI, r3
 8008de0:	f3bf 8f6f 	isb	sy
 8008de4:	f3bf 8f4f 	dsb	sy
 8008de8:	61fb      	str	r3, [r7, #28]
}
 8008dea:	bf00      	nop
 8008dec:	e7fe      	b.n	8008dec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008dee:	2350      	movs	r3, #80	; 0x50
 8008df0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	2b50      	cmp	r3, #80	; 0x50
 8008df6:	d00a      	beq.n	8008e0e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfc:	f383 8811 	msr	BASEPRI, r3
 8008e00:	f3bf 8f6f 	isb	sy
 8008e04:	f3bf 8f4f 	dsb	sy
 8008e08:	61bb      	str	r3, [r7, #24]
}
 8008e0a:	bf00      	nop
 8008e0c:	e7fe      	b.n	8008e0c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008e0e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00d      	beq.n	8008e36 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e22:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e28:	9300      	str	r3, [sp, #0]
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	68b9      	ldr	r1, [r7, #8]
 8008e30:	68f8      	ldr	r0, [r7, #12]
 8008e32:	f000 f805 	bl	8008e40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3730      	adds	r7, #48	; 0x30
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	607a      	str	r2, [r7, #4]
 8008e4c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d103      	bne.n	8008e5c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	69ba      	ldr	r2, [r7, #24]
 8008e58:	601a      	str	r2, [r3, #0]
 8008e5a:	e002      	b.n	8008e62 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	68fa      	ldr	r2, [r7, #12]
 8008e66:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	68ba      	ldr	r2, [r7, #8]
 8008e6c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008e6e:	2101      	movs	r1, #1
 8008e70:	69b8      	ldr	r0, [r7, #24]
 8008e72:	f7ff ff05 	bl	8008c80 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	78fa      	ldrb	r2, [r7, #3]
 8008e7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008e7e:	bf00      	nop
 8008e80:	3710      	adds	r7, #16
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
	...

08008e88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b08e      	sub	sp, #56	; 0x38
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	607a      	str	r2, [r7, #4]
 8008e94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008e96:	2300      	movs	r3, #0
 8008e98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d10a      	bne.n	8008eba <xQueueGenericSend+0x32>
	__asm volatile
 8008ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea8:	f383 8811 	msr	BASEPRI, r3
 8008eac:	f3bf 8f6f 	isb	sy
 8008eb0:	f3bf 8f4f 	dsb	sy
 8008eb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008eb6:	bf00      	nop
 8008eb8:	e7fe      	b.n	8008eb8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d103      	bne.n	8008ec8 <xQueueGenericSend+0x40>
 8008ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d101      	bne.n	8008ecc <xQueueGenericSend+0x44>
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e000      	b.n	8008ece <xQueueGenericSend+0x46>
 8008ecc:	2300      	movs	r3, #0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d10a      	bne.n	8008ee8 <xQueueGenericSend+0x60>
	__asm volatile
 8008ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed6:	f383 8811 	msr	BASEPRI, r3
 8008eda:	f3bf 8f6f 	isb	sy
 8008ede:	f3bf 8f4f 	dsb	sy
 8008ee2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008ee4:	bf00      	nop
 8008ee6:	e7fe      	b.n	8008ee6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	d103      	bne.n	8008ef6 <xQueueGenericSend+0x6e>
 8008eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d101      	bne.n	8008efa <xQueueGenericSend+0x72>
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e000      	b.n	8008efc <xQueueGenericSend+0x74>
 8008efa:	2300      	movs	r3, #0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d10a      	bne.n	8008f16 <xQueueGenericSend+0x8e>
	__asm volatile
 8008f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f04:	f383 8811 	msr	BASEPRI, r3
 8008f08:	f3bf 8f6f 	isb	sy
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	623b      	str	r3, [r7, #32]
}
 8008f12:	bf00      	nop
 8008f14:	e7fe      	b.n	8008f14 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f16:	f001 fbdf 	bl	800a6d8 <xTaskGetSchedulerState>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d102      	bne.n	8008f26 <xQueueGenericSend+0x9e>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d101      	bne.n	8008f2a <xQueueGenericSend+0xa2>
 8008f26:	2301      	movs	r3, #1
 8008f28:	e000      	b.n	8008f2c <xQueueGenericSend+0xa4>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d10a      	bne.n	8008f46 <xQueueGenericSend+0xbe>
	__asm volatile
 8008f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f34:	f383 8811 	msr	BASEPRI, r3
 8008f38:	f3bf 8f6f 	isb	sy
 8008f3c:	f3bf 8f4f 	dsb	sy
 8008f40:	61fb      	str	r3, [r7, #28]
}
 8008f42:	bf00      	nop
 8008f44:	e7fe      	b.n	8008f44 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f46:	f7ff fc95 	bl	8008874 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d302      	bcc.n	8008f5c <xQueueGenericSend+0xd4>
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	2b02      	cmp	r3, #2
 8008f5a:	d129      	bne.n	8008fb0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f5c:	683a      	ldr	r2, [r7, #0]
 8008f5e:	68b9      	ldr	r1, [r7, #8]
 8008f60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f62:	f000 fa0b 	bl	800937c <prvCopyDataToQueue>
 8008f66:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d010      	beq.n	8008f92 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f72:	3324      	adds	r3, #36	; 0x24
 8008f74:	4618      	mov	r0, r3
 8008f76:	f001 f981 	bl	800a27c <xTaskRemoveFromEventList>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d013      	beq.n	8008fa8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008f80:	4b3f      	ldr	r3, [pc, #252]	; (8009080 <xQueueGenericSend+0x1f8>)
 8008f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f86:	601a      	str	r2, [r3, #0]
 8008f88:	f3bf 8f4f 	dsb	sy
 8008f8c:	f3bf 8f6f 	isb	sy
 8008f90:	e00a      	b.n	8008fa8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d007      	beq.n	8008fa8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008f98:	4b39      	ldr	r3, [pc, #228]	; (8009080 <xQueueGenericSend+0x1f8>)
 8008f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f9e:	601a      	str	r2, [r3, #0]
 8008fa0:	f3bf 8f4f 	dsb	sy
 8008fa4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008fa8:	f7ff fc94 	bl	80088d4 <vPortExitCritical>
				return pdPASS;
 8008fac:	2301      	movs	r3, #1
 8008fae:	e063      	b.n	8009078 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d103      	bne.n	8008fbe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008fb6:	f7ff fc8d 	bl	80088d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	e05c      	b.n	8009078 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d106      	bne.n	8008fd2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008fc4:	f107 0314 	add.w	r3, r7, #20
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f001 f9bd 	bl	800a348 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008fd2:	f7ff fc7f 	bl	80088d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008fd6:	f000 fea1 	bl	8009d1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008fda:	f7ff fc4b 	bl	8008874 <vPortEnterCritical>
 8008fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fe4:	b25b      	sxtb	r3, r3
 8008fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fea:	d103      	bne.n	8008ff4 <xQueueGenericSend+0x16c>
 8008fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ffa:	b25b      	sxtb	r3, r3
 8008ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009000:	d103      	bne.n	800900a <xQueueGenericSend+0x182>
 8009002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009004:	2200      	movs	r2, #0
 8009006:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800900a:	f7ff fc63 	bl	80088d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800900e:	1d3a      	adds	r2, r7, #4
 8009010:	f107 0314 	add.w	r3, r7, #20
 8009014:	4611      	mov	r1, r2
 8009016:	4618      	mov	r0, r3
 8009018:	f001 f9ac 	bl	800a374 <xTaskCheckForTimeOut>
 800901c:	4603      	mov	r3, r0
 800901e:	2b00      	cmp	r3, #0
 8009020:	d124      	bne.n	800906c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009022:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009024:	f000 faa2 	bl	800956c <prvIsQueueFull>
 8009028:	4603      	mov	r3, r0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d018      	beq.n	8009060 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800902e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009030:	3310      	adds	r3, #16
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	4611      	mov	r1, r2
 8009036:	4618      	mov	r0, r3
 8009038:	f001 f8d0 	bl	800a1dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800903c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800903e:	f000 fa2d 	bl	800949c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009042:	f000 feb1 	bl	8009da8 <xTaskResumeAll>
 8009046:	4603      	mov	r3, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	f47f af7c 	bne.w	8008f46 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800904e:	4b0c      	ldr	r3, [pc, #48]	; (8009080 <xQueueGenericSend+0x1f8>)
 8009050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009054:	601a      	str	r2, [r3, #0]
 8009056:	f3bf 8f4f 	dsb	sy
 800905a:	f3bf 8f6f 	isb	sy
 800905e:	e772      	b.n	8008f46 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009060:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009062:	f000 fa1b 	bl	800949c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009066:	f000 fe9f 	bl	8009da8 <xTaskResumeAll>
 800906a:	e76c      	b.n	8008f46 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800906c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800906e:	f000 fa15 	bl	800949c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009072:	f000 fe99 	bl	8009da8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009076:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009078:	4618      	mov	r0, r3
 800907a:	3738      	adds	r7, #56	; 0x38
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	e000ed04 	.word	0xe000ed04

08009084 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b090      	sub	sp, #64	; 0x40
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	607a      	str	r2, [r7, #4]
 8009090:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009098:	2b00      	cmp	r3, #0
 800909a:	d10a      	bne.n	80090b2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800909c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a0:	f383 8811 	msr	BASEPRI, r3
 80090a4:	f3bf 8f6f 	isb	sy
 80090a8:	f3bf 8f4f 	dsb	sy
 80090ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80090ae:	bf00      	nop
 80090b0:	e7fe      	b.n	80090b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d103      	bne.n	80090c0 <xQueueGenericSendFromISR+0x3c>
 80090b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d101      	bne.n	80090c4 <xQueueGenericSendFromISR+0x40>
 80090c0:	2301      	movs	r3, #1
 80090c2:	e000      	b.n	80090c6 <xQueueGenericSendFromISR+0x42>
 80090c4:	2300      	movs	r3, #0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d10a      	bne.n	80090e0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80090ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ce:	f383 8811 	msr	BASEPRI, r3
 80090d2:	f3bf 8f6f 	isb	sy
 80090d6:	f3bf 8f4f 	dsb	sy
 80090da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80090dc:	bf00      	nop
 80090de:	e7fe      	b.n	80090de <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d103      	bne.n	80090ee <xQueueGenericSendFromISR+0x6a>
 80090e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d101      	bne.n	80090f2 <xQueueGenericSendFromISR+0x6e>
 80090ee:	2301      	movs	r3, #1
 80090f0:	e000      	b.n	80090f4 <xQueueGenericSendFromISR+0x70>
 80090f2:	2300      	movs	r3, #0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10a      	bne.n	800910e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80090f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fc:	f383 8811 	msr	BASEPRI, r3
 8009100:	f3bf 8f6f 	isb	sy
 8009104:	f3bf 8f4f 	dsb	sy
 8009108:	623b      	str	r3, [r7, #32]
}
 800910a:	bf00      	nop
 800910c:	e7fe      	b.n	800910c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800910e:	f7ff fd77 	bl	8008c00 <vPortValidateInterruptPriority>
	__asm volatile
 8009112:	f3ef 8211 	mrs	r2, BASEPRI
 8009116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911a:	f383 8811 	msr	BASEPRI, r3
 800911e:	f3bf 8f6f 	isb	sy
 8009122:	f3bf 8f4f 	dsb	sy
 8009126:	61fa      	str	r2, [r7, #28]
 8009128:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800912a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800912c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800912e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009136:	429a      	cmp	r2, r3
 8009138:	d302      	bcc.n	8009140 <xQueueGenericSendFromISR+0xbc>
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	2b02      	cmp	r3, #2
 800913e:	d12f      	bne.n	80091a0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009142:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800914a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800914c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800914e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009150:	683a      	ldr	r2, [r7, #0]
 8009152:	68b9      	ldr	r1, [r7, #8]
 8009154:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009156:	f000 f911 	bl	800937c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800915a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800915e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009162:	d112      	bne.n	800918a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009168:	2b00      	cmp	r3, #0
 800916a:	d016      	beq.n	800919a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800916c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800916e:	3324      	adds	r3, #36	; 0x24
 8009170:	4618      	mov	r0, r3
 8009172:	f001 f883 	bl	800a27c <xTaskRemoveFromEventList>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00e      	beq.n	800919a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d00b      	beq.n	800919a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2201      	movs	r2, #1
 8009186:	601a      	str	r2, [r3, #0]
 8009188:	e007      	b.n	800919a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800918a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800918e:	3301      	adds	r3, #1
 8009190:	b2db      	uxtb	r3, r3
 8009192:	b25a      	sxtb	r2, r3
 8009194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009196:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800919a:	2301      	movs	r3, #1
 800919c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800919e:	e001      	b.n	80091a4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80091a0:	2300      	movs	r3, #0
 80091a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091a6:	617b      	str	r3, [r7, #20]
	__asm volatile
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	f383 8811 	msr	BASEPRI, r3
}
 80091ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80091b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3740      	adds	r7, #64	; 0x40
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
	...

080091bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b08c      	sub	sp, #48	; 0x30
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80091c8:	2300      	movs	r3, #0
 80091ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80091d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d10a      	bne.n	80091ec <xQueueReceive+0x30>
	__asm volatile
 80091d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091da:	f383 8811 	msr	BASEPRI, r3
 80091de:	f3bf 8f6f 	isb	sy
 80091e2:	f3bf 8f4f 	dsb	sy
 80091e6:	623b      	str	r3, [r7, #32]
}
 80091e8:	bf00      	nop
 80091ea:	e7fe      	b.n	80091ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d103      	bne.n	80091fa <xQueueReceive+0x3e>
 80091f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d101      	bne.n	80091fe <xQueueReceive+0x42>
 80091fa:	2301      	movs	r3, #1
 80091fc:	e000      	b.n	8009200 <xQueueReceive+0x44>
 80091fe:	2300      	movs	r3, #0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d10a      	bne.n	800921a <xQueueReceive+0x5e>
	__asm volatile
 8009204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009208:	f383 8811 	msr	BASEPRI, r3
 800920c:	f3bf 8f6f 	isb	sy
 8009210:	f3bf 8f4f 	dsb	sy
 8009214:	61fb      	str	r3, [r7, #28]
}
 8009216:	bf00      	nop
 8009218:	e7fe      	b.n	8009218 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800921a:	f001 fa5d 	bl	800a6d8 <xTaskGetSchedulerState>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d102      	bne.n	800922a <xQueueReceive+0x6e>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d101      	bne.n	800922e <xQueueReceive+0x72>
 800922a:	2301      	movs	r3, #1
 800922c:	e000      	b.n	8009230 <xQueueReceive+0x74>
 800922e:	2300      	movs	r3, #0
 8009230:	2b00      	cmp	r3, #0
 8009232:	d10a      	bne.n	800924a <xQueueReceive+0x8e>
	__asm volatile
 8009234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009238:	f383 8811 	msr	BASEPRI, r3
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	61bb      	str	r3, [r7, #24]
}
 8009246:	bf00      	nop
 8009248:	e7fe      	b.n	8009248 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800924a:	f7ff fb13 	bl	8008874 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800924e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009252:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009256:	2b00      	cmp	r3, #0
 8009258:	d01f      	beq.n	800929a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800925a:	68b9      	ldr	r1, [r7, #8]
 800925c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800925e:	f000 f8f7 	bl	8009450 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009264:	1e5a      	subs	r2, r3, #1
 8009266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009268:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800926a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926c:	691b      	ldr	r3, [r3, #16]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d00f      	beq.n	8009292 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009274:	3310      	adds	r3, #16
 8009276:	4618      	mov	r0, r3
 8009278:	f001 f800 	bl	800a27c <xTaskRemoveFromEventList>
 800927c:	4603      	mov	r3, r0
 800927e:	2b00      	cmp	r3, #0
 8009280:	d007      	beq.n	8009292 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009282:	4b3d      	ldr	r3, [pc, #244]	; (8009378 <xQueueReceive+0x1bc>)
 8009284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009288:	601a      	str	r2, [r3, #0]
 800928a:	f3bf 8f4f 	dsb	sy
 800928e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009292:	f7ff fb1f 	bl	80088d4 <vPortExitCritical>
				return pdPASS;
 8009296:	2301      	movs	r3, #1
 8009298:	e069      	b.n	800936e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d103      	bne.n	80092a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80092a0:	f7ff fb18 	bl	80088d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80092a4:	2300      	movs	r3, #0
 80092a6:	e062      	b.n	800936e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80092a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d106      	bne.n	80092bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80092ae:	f107 0310 	add.w	r3, r7, #16
 80092b2:	4618      	mov	r0, r3
 80092b4:	f001 f848 	bl	800a348 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80092b8:	2301      	movs	r3, #1
 80092ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80092bc:	f7ff fb0a 	bl	80088d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80092c0:	f000 fd2c 	bl	8009d1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80092c4:	f7ff fad6 	bl	8008874 <vPortEnterCritical>
 80092c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092ce:	b25b      	sxtb	r3, r3
 80092d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d4:	d103      	bne.n	80092de <xQueueReceive+0x122>
 80092d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d8:	2200      	movs	r2, #0
 80092da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092e4:	b25b      	sxtb	r3, r3
 80092e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ea:	d103      	bne.n	80092f4 <xQueueReceive+0x138>
 80092ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ee:	2200      	movs	r2, #0
 80092f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092f4:	f7ff faee 	bl	80088d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80092f8:	1d3a      	adds	r2, r7, #4
 80092fa:	f107 0310 	add.w	r3, r7, #16
 80092fe:	4611      	mov	r1, r2
 8009300:	4618      	mov	r0, r3
 8009302:	f001 f837 	bl	800a374 <xTaskCheckForTimeOut>
 8009306:	4603      	mov	r3, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d123      	bne.n	8009354 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800930c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800930e:	f000 f917 	bl	8009540 <prvIsQueueEmpty>
 8009312:	4603      	mov	r3, r0
 8009314:	2b00      	cmp	r3, #0
 8009316:	d017      	beq.n	8009348 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931a:	3324      	adds	r3, #36	; 0x24
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	4611      	mov	r1, r2
 8009320:	4618      	mov	r0, r3
 8009322:	f000 ff5b 	bl	800a1dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009326:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009328:	f000 f8b8 	bl	800949c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800932c:	f000 fd3c 	bl	8009da8 <xTaskResumeAll>
 8009330:	4603      	mov	r3, r0
 8009332:	2b00      	cmp	r3, #0
 8009334:	d189      	bne.n	800924a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009336:	4b10      	ldr	r3, [pc, #64]	; (8009378 <xQueueReceive+0x1bc>)
 8009338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800933c:	601a      	str	r2, [r3, #0]
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	f3bf 8f6f 	isb	sy
 8009346:	e780      	b.n	800924a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009348:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800934a:	f000 f8a7 	bl	800949c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800934e:	f000 fd2b 	bl	8009da8 <xTaskResumeAll>
 8009352:	e77a      	b.n	800924a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009354:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009356:	f000 f8a1 	bl	800949c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800935a:	f000 fd25 	bl	8009da8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800935e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009360:	f000 f8ee 	bl	8009540 <prvIsQueueEmpty>
 8009364:	4603      	mov	r3, r0
 8009366:	2b00      	cmp	r3, #0
 8009368:	f43f af6f 	beq.w	800924a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800936c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800936e:	4618      	mov	r0, r3
 8009370:	3730      	adds	r7, #48	; 0x30
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	e000ed04 	.word	0xe000ed04

0800937c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b086      	sub	sp, #24
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009388:	2300      	movs	r3, #0
 800938a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009390:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009396:	2b00      	cmp	r3, #0
 8009398:	d10d      	bne.n	80093b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d14d      	bne.n	800943e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	4618      	mov	r0, r3
 80093a8:	f001 f9b4 	bl	800a714 <xTaskPriorityDisinherit>
 80093ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2200      	movs	r2, #0
 80093b2:	609a      	str	r2, [r3, #8]
 80093b4:	e043      	b.n	800943e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d119      	bne.n	80093f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6858      	ldr	r0, [r3, #4]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093c4:	461a      	mov	r2, r3
 80093c6:	68b9      	ldr	r1, [r7, #8]
 80093c8:	f003 f8b0 	bl	800c52c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	685a      	ldr	r2, [r3, #4]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d4:	441a      	add	r2, r3
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	685a      	ldr	r2, [r3, #4]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d32b      	bcc.n	800943e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	605a      	str	r2, [r3, #4]
 80093ee:	e026      	b.n	800943e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	68d8      	ldr	r0, [r3, #12]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f8:	461a      	mov	r2, r3
 80093fa:	68b9      	ldr	r1, [r7, #8]
 80093fc:	f003 f896 	bl	800c52c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	68da      	ldr	r2, [r3, #12]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009408:	425b      	negs	r3, r3
 800940a:	441a      	add	r2, r3
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	68da      	ldr	r2, [r3, #12]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	429a      	cmp	r2, r3
 800941a:	d207      	bcs.n	800942c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	689a      	ldr	r2, [r3, #8]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009424:	425b      	negs	r3, r3
 8009426:	441a      	add	r2, r3
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2b02      	cmp	r3, #2
 8009430:	d105      	bne.n	800943e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d002      	beq.n	800943e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	3b01      	subs	r3, #1
 800943c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	1c5a      	adds	r2, r3, #1
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009446:	697b      	ldr	r3, [r7, #20]
}
 8009448:	4618      	mov	r0, r3
 800944a:	3718      	adds	r7, #24
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945e:	2b00      	cmp	r3, #0
 8009460:	d018      	beq.n	8009494 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	68da      	ldr	r2, [r3, #12]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946a:	441a      	add	r2, r3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	68da      	ldr	r2, [r3, #12]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	429a      	cmp	r2, r3
 800947a:	d303      	bcc.n	8009484 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	68d9      	ldr	r1, [r3, #12]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948c:	461a      	mov	r2, r3
 800948e:	6838      	ldr	r0, [r7, #0]
 8009490:	f003 f84c 	bl	800c52c <memcpy>
	}
}
 8009494:	bf00      	nop
 8009496:	3708      	adds	r7, #8
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80094a4:	f7ff f9e6 	bl	8008874 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80094b0:	e011      	b.n	80094d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d012      	beq.n	80094e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	3324      	adds	r3, #36	; 0x24
 80094be:	4618      	mov	r0, r3
 80094c0:	f000 fedc 	bl	800a27c <xTaskRemoveFromEventList>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d001      	beq.n	80094ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80094ca:	f000 ffc5 	bl	800a458 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80094ce:	7bfb      	ldrb	r3, [r7, #15]
 80094d0:	3b01      	subs	r3, #1
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80094d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	dce9      	bgt.n	80094b2 <prvUnlockQueue+0x16>
 80094de:	e000      	b.n	80094e2 <prvUnlockQueue+0x46>
					break;
 80094e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	22ff      	movs	r2, #255	; 0xff
 80094e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80094ea:	f7ff f9f3 	bl	80088d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80094ee:	f7ff f9c1 	bl	8008874 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80094fa:	e011      	b.n	8009520 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	691b      	ldr	r3, [r3, #16]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d012      	beq.n	800952a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	3310      	adds	r3, #16
 8009508:	4618      	mov	r0, r3
 800950a:	f000 feb7 	bl	800a27c <xTaskRemoveFromEventList>
 800950e:	4603      	mov	r3, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d001      	beq.n	8009518 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009514:	f000 ffa0 	bl	800a458 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009518:	7bbb      	ldrb	r3, [r7, #14]
 800951a:	3b01      	subs	r3, #1
 800951c:	b2db      	uxtb	r3, r3
 800951e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009520:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009524:	2b00      	cmp	r3, #0
 8009526:	dce9      	bgt.n	80094fc <prvUnlockQueue+0x60>
 8009528:	e000      	b.n	800952c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800952a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	22ff      	movs	r2, #255	; 0xff
 8009530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009534:	f7ff f9ce 	bl	80088d4 <vPortExitCritical>
}
 8009538:	bf00      	nop
 800953a:	3710      	adds	r7, #16
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009548:	f7ff f994 	bl	8008874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009550:	2b00      	cmp	r3, #0
 8009552:	d102      	bne.n	800955a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009554:	2301      	movs	r3, #1
 8009556:	60fb      	str	r3, [r7, #12]
 8009558:	e001      	b.n	800955e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800955a:	2300      	movs	r3, #0
 800955c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800955e:	f7ff f9b9 	bl	80088d4 <vPortExitCritical>

	return xReturn;
 8009562:	68fb      	ldr	r3, [r7, #12]
}
 8009564:	4618      	mov	r0, r3
 8009566:	3710      	adds	r7, #16
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009574:	f7ff f97e 	bl	8008874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009580:	429a      	cmp	r2, r3
 8009582:	d102      	bne.n	800958a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009584:	2301      	movs	r3, #1
 8009586:	60fb      	str	r3, [r7, #12]
 8009588:	e001      	b.n	800958e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800958a:	2300      	movs	r3, #0
 800958c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800958e:	f7ff f9a1 	bl	80088d4 <vPortExitCritical>

	return xReturn;
 8009592:	68fb      	ldr	r3, [r7, #12]
}
 8009594:	4618      	mov	r0, r3
 8009596:	3710      	adds	r7, #16
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800959c:	b480      	push	{r7}
 800959e:	b085      	sub	sp, #20
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80095a6:	2300      	movs	r3, #0
 80095a8:	60fb      	str	r3, [r7, #12]
 80095aa:	e014      	b.n	80095d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80095ac:	4a0f      	ldr	r2, [pc, #60]	; (80095ec <vQueueAddToRegistry+0x50>)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d10b      	bne.n	80095d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80095b8:	490c      	ldr	r1, [pc, #48]	; (80095ec <vQueueAddToRegistry+0x50>)
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	683a      	ldr	r2, [r7, #0]
 80095be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80095c2:	4a0a      	ldr	r2, [pc, #40]	; (80095ec <vQueueAddToRegistry+0x50>)
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	00db      	lsls	r3, r3, #3
 80095c8:	4413      	add	r3, r2
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80095ce:	e006      	b.n	80095de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	3301      	adds	r3, #1
 80095d4:	60fb      	str	r3, [r7, #12]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2b07      	cmp	r3, #7
 80095da:	d9e7      	bls.n	80095ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80095dc:	bf00      	nop
 80095de:	bf00      	nop
 80095e0:	3714      	adds	r7, #20
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr
 80095ea:	bf00      	nop
 80095ec:	200073a4 	.word	0x200073a4

080095f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b086      	sub	sp, #24
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009600:	f7ff f938 	bl	8008874 <vPortEnterCritical>
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800960a:	b25b      	sxtb	r3, r3
 800960c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009610:	d103      	bne.n	800961a <vQueueWaitForMessageRestricted+0x2a>
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	2200      	movs	r2, #0
 8009616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009620:	b25b      	sxtb	r3, r3
 8009622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009626:	d103      	bne.n	8009630 <vQueueWaitForMessageRestricted+0x40>
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	2200      	movs	r2, #0
 800962c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009630:	f7ff f950 	bl	80088d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009638:	2b00      	cmp	r3, #0
 800963a:	d106      	bne.n	800964a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	3324      	adds	r3, #36	; 0x24
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	68b9      	ldr	r1, [r7, #8]
 8009644:	4618      	mov	r0, r3
 8009646:	f000 fded 	bl	800a224 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800964a:	6978      	ldr	r0, [r7, #20]
 800964c:	f7ff ff26 	bl	800949c <prvUnlockQueue>
	}
 8009650:	bf00      	nop
 8009652:	3718      	adds	r7, #24
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009658:	b580      	push	{r7, lr}
 800965a:	b08e      	sub	sp, #56	; 0x38
 800965c:	af04      	add	r7, sp, #16
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	607a      	str	r2, [r7, #4]
 8009664:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009668:	2b00      	cmp	r3, #0
 800966a:	d10a      	bne.n	8009682 <xTaskCreateStatic+0x2a>
	__asm volatile
 800966c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009670:	f383 8811 	msr	BASEPRI, r3
 8009674:	f3bf 8f6f 	isb	sy
 8009678:	f3bf 8f4f 	dsb	sy
 800967c:	623b      	str	r3, [r7, #32]
}
 800967e:	bf00      	nop
 8009680:	e7fe      	b.n	8009680 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009684:	2b00      	cmp	r3, #0
 8009686:	d10a      	bne.n	800969e <xTaskCreateStatic+0x46>
	__asm volatile
 8009688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968c:	f383 8811 	msr	BASEPRI, r3
 8009690:	f3bf 8f6f 	isb	sy
 8009694:	f3bf 8f4f 	dsb	sy
 8009698:	61fb      	str	r3, [r7, #28]
}
 800969a:	bf00      	nop
 800969c:	e7fe      	b.n	800969c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800969e:	f44f 73da 	mov.w	r3, #436	; 0x1b4
 80096a2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	f5b3 7fda 	cmp.w	r3, #436	; 0x1b4
 80096aa:	d00a      	beq.n	80096c2 <xTaskCreateStatic+0x6a>
	__asm volatile
 80096ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b0:	f383 8811 	msr	BASEPRI, r3
 80096b4:	f3bf 8f6f 	isb	sy
 80096b8:	f3bf 8f4f 	dsb	sy
 80096bc:	61bb      	str	r3, [r7, #24]
}
 80096be:	bf00      	nop
 80096c0:	e7fe      	b.n	80096c0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80096c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80096c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d01e      	beq.n	8009708 <xTaskCreateStatic+0xb0>
 80096ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d01b      	beq.n	8009708 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80096d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80096d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80096da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096dc:	2202      	movs	r2, #2
 80096de:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80096e2:	2300      	movs	r3, #0
 80096e4:	9303      	str	r3, [sp, #12]
 80096e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e8:	9302      	str	r3, [sp, #8]
 80096ea:	f107 0314 	add.w	r3, r7, #20
 80096ee:	9301      	str	r3, [sp, #4]
 80096f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f2:	9300      	str	r3, [sp, #0]
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	68b9      	ldr	r1, [r7, #8]
 80096fa:	68f8      	ldr	r0, [r7, #12]
 80096fc:	f000 f852 	bl	80097a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009700:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009702:	f000 f903 	bl	800990c <prvAddNewTaskToReadyList>
 8009706:	e001      	b.n	800970c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8009708:	2300      	movs	r3, #0
 800970a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800970c:	697b      	ldr	r3, [r7, #20]
	}
 800970e:	4618      	mov	r0, r3
 8009710:	3728      	adds	r7, #40	; 0x28
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009716:	b580      	push	{r7, lr}
 8009718:	b08c      	sub	sp, #48	; 0x30
 800971a:	af04      	add	r7, sp, #16
 800971c:	60f8      	str	r0, [r7, #12]
 800971e:	60b9      	str	r1, [r7, #8]
 8009720:	603b      	str	r3, [r7, #0]
 8009722:	4613      	mov	r3, r2
 8009724:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009726:	88fb      	ldrh	r3, [r7, #6]
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	4618      	mov	r0, r3
 800972c:	f7fe fe60 	bl	80083f0 <pvPortMalloc>
 8009730:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d00f      	beq.n	8009758 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009738:	f44f 70da 	mov.w	r0, #436	; 0x1b4
 800973c:	f7fe fe58 	bl	80083f0 <pvPortMalloc>
 8009740:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009742:	69fb      	ldr	r3, [r7, #28]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d003      	beq.n	8009750 <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009748:	69fb      	ldr	r3, [r7, #28]
 800974a:	697a      	ldr	r2, [r7, #20]
 800974c:	631a      	str	r2, [r3, #48]	; 0x30
 800974e:	e005      	b.n	800975c <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009750:	6978      	ldr	r0, [r7, #20]
 8009752:	f7fe fe97 	bl	8008484 <vPortFree>
 8009756:	e001      	b.n	800975c <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009758:	2300      	movs	r3, #0
 800975a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d017      	beq.n	8009792 <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009762:	69fb      	ldr	r3, [r7, #28]
 8009764:	2200      	movs	r2, #0
 8009766:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800976a:	88fa      	ldrh	r2, [r7, #6]
 800976c:	2300      	movs	r3, #0
 800976e:	9303      	str	r3, [sp, #12]
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	9302      	str	r3, [sp, #8]
 8009774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009776:	9301      	str	r3, [sp, #4]
 8009778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977a:	9300      	str	r3, [sp, #0]
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	68b9      	ldr	r1, [r7, #8]
 8009780:	68f8      	ldr	r0, [r7, #12]
 8009782:	f000 f80f 	bl	80097a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009786:	69f8      	ldr	r0, [r7, #28]
 8009788:	f000 f8c0 	bl	800990c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800978c:	2301      	movs	r3, #1
 800978e:	61bb      	str	r3, [r7, #24]
 8009790:	e002      	b.n	8009798 <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009792:	f04f 33ff 	mov.w	r3, #4294967295
 8009796:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009798:	69bb      	ldr	r3, [r7, #24]
	}
 800979a:	4618      	mov	r0, r3
 800979c:	3720      	adds	r7, #32
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
	...

080097a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b088      	sub	sp, #32
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	60b9      	str	r1, [r7, #8]
 80097ae:	607a      	str	r2, [r7, #4]
 80097b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80097b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	461a      	mov	r2, r3
 80097bc:	21a5      	movs	r1, #165	; 0xa5
 80097be:	f002 fec3 	bl	800c548 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80097c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80097cc:	3b01      	subs	r3, #1
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	4413      	add	r3, r2
 80097d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80097d4:	69bb      	ldr	r3, [r7, #24]
 80097d6:	f023 0307 	bic.w	r3, r3, #7
 80097da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80097dc:	69bb      	ldr	r3, [r7, #24]
 80097de:	f003 0307 	and.w	r3, r3, #7
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d00a      	beq.n	80097fc <prvInitialiseNewTask+0x58>
	__asm volatile
 80097e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ea:	f383 8811 	msr	BASEPRI, r3
 80097ee:	f3bf 8f6f 	isb	sy
 80097f2:	f3bf 8f4f 	dsb	sy
 80097f6:	617b      	str	r3, [r7, #20]
}
 80097f8:	bf00      	nop
 80097fa:	e7fe      	b.n	80097fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d01f      	beq.n	8009842 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009802:	2300      	movs	r3, #0
 8009804:	61fb      	str	r3, [r7, #28]
 8009806:	e012      	b.n	800982e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009808:	68ba      	ldr	r2, [r7, #8]
 800980a:	69fb      	ldr	r3, [r7, #28]
 800980c:	4413      	add	r3, r2
 800980e:	7819      	ldrb	r1, [r3, #0]
 8009810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009812:	69fb      	ldr	r3, [r7, #28]
 8009814:	4413      	add	r3, r2
 8009816:	3334      	adds	r3, #52	; 0x34
 8009818:	460a      	mov	r2, r1
 800981a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800981c:	68ba      	ldr	r2, [r7, #8]
 800981e:	69fb      	ldr	r3, [r7, #28]
 8009820:	4413      	add	r3, r2
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d006      	beq.n	8009836 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009828:	69fb      	ldr	r3, [r7, #28]
 800982a:	3301      	adds	r3, #1
 800982c:	61fb      	str	r3, [r7, #28]
 800982e:	69fb      	ldr	r3, [r7, #28]
 8009830:	2bfe      	cmp	r3, #254	; 0xfe
 8009832:	d9e9      	bls.n	8009808 <prvInitialiseNewTask+0x64>
 8009834:	e000      	b.n	8009838 <prvInitialiseNewTask+0x94>
			{
				break;
 8009836:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983a:	2200      	movs	r2, #0
 800983c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 8009840:	e003      	b.n	800984a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009844:	2200      	movs	r2, #0
 8009846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800984a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984c:	2b37      	cmp	r3, #55	; 0x37
 800984e:	d901      	bls.n	8009854 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009850:	2337      	movs	r3, #55	; 0x37
 8009852:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009856:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009858:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800985a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800985c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800985e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		pxNewTCB->uxMutexesHeld = 0;
 8009862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009864:	2200      	movs	r2, #0
 8009866:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800986a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800986c:	3304      	adds	r3, #4
 800986e:	4618      	mov	r0, r3
 8009870:	f7fe fe40 	bl	80084f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009876:	3318      	adds	r3, #24
 8009878:	4618      	mov	r0, r3
 800987a:	f7fe fe3b 	bl	80084f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800987e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009882:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009886:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800988a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800988c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800988e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009892:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8009894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009896:	2200      	movs	r2, #0
 8009898:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800989c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989e:	2200      	movs	r2, #0
 80098a0:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80098a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a6:	2200      	movs	r2, #0
 80098a8:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80098ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ae:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80098b2:	2260      	movs	r2, #96	; 0x60
 80098b4:	2100      	movs	r1, #0
 80098b6:	4618      	mov	r0, r3
 80098b8:	f002 fe46 	bl	800c548 <memset>
 80098bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098be:	4a10      	ldr	r2, [pc, #64]	; (8009900 <prvInitialiseNewTask+0x15c>)
 80098c0:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 80098c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c6:	4a0f      	ldr	r2, [pc, #60]	; (8009904 <prvInitialiseNewTask+0x160>)
 80098c8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 80098cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ce:	4a0e      	ldr	r2, [pc, #56]	; (8009908 <prvInitialiseNewTask+0x164>)
 80098d0:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 80098d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d6:	2200      	movs	r2, #0
 80098d8:	f883 21ae 	strb.w	r2, [r3, #430]	; 0x1ae
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80098dc:	683a      	ldr	r2, [r7, #0]
 80098de:	68f9      	ldr	r1, [r7, #12]
 80098e0:	69b8      	ldr	r0, [r7, #24]
 80098e2:	f7fe fe9b 	bl	800861c <pxPortInitialiseStack>
 80098e6:	4602      	mov	r2, r0
 80098e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80098ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d002      	beq.n	80098f8 <prvInitialiseNewTask+0x154>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80098f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098f8:	bf00      	nop
 80098fa:	3720      	adds	r7, #32
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	0800c980 	.word	0x0800c980
 8009904:	0800c9a0 	.word	0x0800c9a0
 8009908:	0800c960 	.word	0x0800c960

0800990c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009914:	f7fe ffae 	bl	8008874 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009918:	4b2d      	ldr	r3, [pc, #180]	; (80099d0 <prvAddNewTaskToReadyList+0xc4>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	3301      	adds	r3, #1
 800991e:	4a2c      	ldr	r2, [pc, #176]	; (80099d0 <prvAddNewTaskToReadyList+0xc4>)
 8009920:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009922:	4b2c      	ldr	r3, [pc, #176]	; (80099d4 <prvAddNewTaskToReadyList+0xc8>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d109      	bne.n	800993e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800992a:	4a2a      	ldr	r2, [pc, #168]	; (80099d4 <prvAddNewTaskToReadyList+0xc8>)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009930:	4b27      	ldr	r3, [pc, #156]	; (80099d0 <prvAddNewTaskToReadyList+0xc4>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	2b01      	cmp	r3, #1
 8009936:	d110      	bne.n	800995a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009938:	f000 fe0a 	bl	800a550 <prvInitialiseTaskLists>
 800993c:	e00d      	b.n	800995a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800993e:	4b26      	ldr	r3, [pc, #152]	; (80099d8 <prvAddNewTaskToReadyList+0xcc>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d109      	bne.n	800995a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009946:	4b23      	ldr	r3, [pc, #140]	; (80099d4 <prvAddNewTaskToReadyList+0xc8>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009950:	429a      	cmp	r2, r3
 8009952:	d802      	bhi.n	800995a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009954:	4a1f      	ldr	r2, [pc, #124]	; (80099d4 <prvAddNewTaskToReadyList+0xc8>)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800995a:	4b20      	ldr	r3, [pc, #128]	; (80099dc <prvAddNewTaskToReadyList+0xd0>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	3301      	adds	r3, #1
 8009960:	4a1e      	ldr	r2, [pc, #120]	; (80099dc <prvAddNewTaskToReadyList+0xd0>)
 8009962:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009964:	4b1d      	ldr	r3, [pc, #116]	; (80099dc <prvAddNewTaskToReadyList+0xd0>)
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009972:	4b1b      	ldr	r3, [pc, #108]	; (80099e0 <prvAddNewTaskToReadyList+0xd4>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	429a      	cmp	r2, r3
 8009978:	d903      	bls.n	8009982 <prvAddNewTaskToReadyList+0x76>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800997e:	4a18      	ldr	r2, [pc, #96]	; (80099e0 <prvAddNewTaskToReadyList+0xd4>)
 8009980:	6013      	str	r3, [r2, #0]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009986:	4613      	mov	r3, r2
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	4413      	add	r3, r2
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	4a15      	ldr	r2, [pc, #84]	; (80099e4 <prvAddNewTaskToReadyList+0xd8>)
 8009990:	441a      	add	r2, r3
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	3304      	adds	r3, #4
 8009996:	4619      	mov	r1, r3
 8009998:	4610      	mov	r0, r2
 800999a:	f7fe fdb8 	bl	800850e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800999e:	f7fe ff99 	bl	80088d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80099a2:	4b0d      	ldr	r3, [pc, #52]	; (80099d8 <prvAddNewTaskToReadyList+0xcc>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d00e      	beq.n	80099c8 <prvAddNewTaskToReadyList+0xbc>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80099aa:	4b0a      	ldr	r3, [pc, #40]	; (80099d4 <prvAddNewTaskToReadyList+0xc8>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d207      	bcs.n	80099c8 <prvAddNewTaskToReadyList+0xbc>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80099b8:	4b0b      	ldr	r3, [pc, #44]	; (80099e8 <prvAddNewTaskToReadyList+0xdc>)
 80099ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099be:	601a      	str	r2, [r3, #0]
 80099c0:	f3bf 8f4f 	dsb	sy
 80099c4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099c8:	bf00      	nop
 80099ca:	3708      	adds	r7, #8
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	200078bc 	.word	0x200078bc
 80099d4:	200073e4 	.word	0x200073e4
 80099d8:	200078c8 	.word	0x200078c8
 80099dc:	200078d8 	.word	0x200078d8
 80099e0:	200078c4 	.word	0x200078c4
 80099e4:	200073e8 	.word	0x200073e8
 80099e8:	e000ed04 	.word	0xe000ed04

080099ec <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b08a      	sub	sp, #40	; 0x28
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80099f6:	2300      	movs	r3, #0
 80099f8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d10a      	bne.n	8009a16 <vTaskDelayUntil+0x2a>
	__asm volatile
 8009a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a04:	f383 8811 	msr	BASEPRI, r3
 8009a08:	f3bf 8f6f 	isb	sy
 8009a0c:	f3bf 8f4f 	dsb	sy
 8009a10:	617b      	str	r3, [r7, #20]
}
 8009a12:	bf00      	nop
 8009a14:	e7fe      	b.n	8009a14 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d10a      	bne.n	8009a32 <vTaskDelayUntil+0x46>
	__asm volatile
 8009a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a20:	f383 8811 	msr	BASEPRI, r3
 8009a24:	f3bf 8f6f 	isb	sy
 8009a28:	f3bf 8f4f 	dsb	sy
 8009a2c:	613b      	str	r3, [r7, #16]
}
 8009a2e:	bf00      	nop
 8009a30:	e7fe      	b.n	8009a30 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8009a32:	4b2a      	ldr	r3, [pc, #168]	; (8009adc <vTaskDelayUntil+0xf0>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d00a      	beq.n	8009a50 <vTaskDelayUntil+0x64>
	__asm volatile
 8009a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3e:	f383 8811 	msr	BASEPRI, r3
 8009a42:	f3bf 8f6f 	isb	sy
 8009a46:	f3bf 8f4f 	dsb	sy
 8009a4a:	60fb      	str	r3, [r7, #12]
}
 8009a4c:	bf00      	nop
 8009a4e:	e7fe      	b.n	8009a4e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8009a50:	f000 f964 	bl	8009d1c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8009a54:	4b22      	ldr	r3, [pc, #136]	; (8009ae0 <vTaskDelayUntil+0xf4>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	683a      	ldr	r2, [r7, #0]
 8009a60:	4413      	add	r3, r2
 8009a62:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	6a3a      	ldr	r2, [r7, #32]
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d20b      	bcs.n	8009a86 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	69fa      	ldr	r2, [r7, #28]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d211      	bcs.n	8009a9c <vTaskDelayUntil+0xb0>
 8009a78:	69fa      	ldr	r2, [r7, #28]
 8009a7a:	6a3b      	ldr	r3, [r7, #32]
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d90d      	bls.n	8009a9c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009a80:	2301      	movs	r3, #1
 8009a82:	627b      	str	r3, [r7, #36]	; 0x24
 8009a84:	e00a      	b.n	8009a9c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	69fa      	ldr	r2, [r7, #28]
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d303      	bcc.n	8009a98 <vTaskDelayUntil+0xac>
 8009a90:	69fa      	ldr	r2, [r7, #28]
 8009a92:	6a3b      	ldr	r3, [r7, #32]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d901      	bls.n	8009a9c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	69fa      	ldr	r2, [r7, #28]
 8009aa0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8009aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d006      	beq.n	8009ab6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009aa8:	69fa      	ldr	r2, [r7, #28]
 8009aaa:	6a3b      	ldr	r3, [r7, #32]
 8009aac:	1ad3      	subs	r3, r2, r3
 8009aae:	2100      	movs	r1, #0
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f000 fea3 	bl	800a7fc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8009ab6:	f000 f977 	bl	8009da8 <xTaskResumeAll>
 8009aba:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d107      	bne.n	8009ad2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8009ac2:	4b08      	ldr	r3, [pc, #32]	; (8009ae4 <vTaskDelayUntil+0xf8>)
 8009ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ac8:	601a      	str	r2, [r3, #0]
 8009aca:	f3bf 8f4f 	dsb	sy
 8009ace:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ad2:	bf00      	nop
 8009ad4:	3728      	adds	r7, #40	; 0x28
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	200078e4 	.word	0x200078e4
 8009ae0:	200078c0 	.word	0x200078c0
 8009ae4:	e000ed04 	.word	0xe000ed04

08009ae8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b084      	sub	sp, #16
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009af0:	2300      	movs	r3, #0
 8009af2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d017      	beq.n	8009b2a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009afa:	4b13      	ldr	r3, [pc, #76]	; (8009b48 <vTaskDelay+0x60>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d00a      	beq.n	8009b18 <vTaskDelay+0x30>
	__asm volatile
 8009b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b06:	f383 8811 	msr	BASEPRI, r3
 8009b0a:	f3bf 8f6f 	isb	sy
 8009b0e:	f3bf 8f4f 	dsb	sy
 8009b12:	60bb      	str	r3, [r7, #8]
}
 8009b14:	bf00      	nop
 8009b16:	e7fe      	b.n	8009b16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009b18:	f000 f900 	bl	8009d1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 fe6c 	bl	800a7fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b24:	f000 f940 	bl	8009da8 <xTaskResumeAll>
 8009b28:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d107      	bne.n	8009b40 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009b30:	4b06      	ldr	r3, [pc, #24]	; (8009b4c <vTaskDelay+0x64>)
 8009b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b36:	601a      	str	r2, [r3, #0]
 8009b38:	f3bf 8f4f 	dsb	sy
 8009b3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b40:	bf00      	nop
 8009b42:	3710      	adds	r7, #16
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	200078e4 	.word	0x200078e4
 8009b4c:	e000ed04 	.word	0xe000ed04

08009b50 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009b58:	f7fe fe8c 	bl	8008874 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d102      	bne.n	8009b68 <vTaskSuspend+0x18>
 8009b62:	4b30      	ldr	r3, [pc, #192]	; (8009c24 <vTaskSuspend+0xd4>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	e000      	b.n	8009b6a <vTaskSuspend+0x1a>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	3304      	adds	r3, #4
 8009b70:	4618      	mov	r0, r3
 8009b72:	f7fe fd29 	bl	80085c8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d004      	beq.n	8009b88 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	3318      	adds	r3, #24
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7fe fd20 	bl	80085c8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	3304      	adds	r3, #4
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	4826      	ldr	r0, [pc, #152]	; (8009c28 <vTaskSuspend+0xd8>)
 8009b90:	f7fe fcbd 	bl	800850e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d103      	bne.n	8009ba8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8009ba8:	f7fe fe94 	bl	80088d4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8009bac:	4b1f      	ldr	r3, [pc, #124]	; (8009c2c <vTaskSuspend+0xdc>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d005      	beq.n	8009bc0 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8009bb4:	f7fe fe5e 	bl	8008874 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8009bb8:	f000 fd6e 	bl	800a698 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8009bbc:	f7fe fe8a 	bl	80088d4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8009bc0:	4b18      	ldr	r3, [pc, #96]	; (8009c24 <vTaskSuspend+0xd4>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	68fa      	ldr	r2, [r7, #12]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d127      	bne.n	8009c1a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8009bca:	4b18      	ldr	r3, [pc, #96]	; (8009c2c <vTaskSuspend+0xdc>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d017      	beq.n	8009c02 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8009bd2:	4b17      	ldr	r3, [pc, #92]	; (8009c30 <vTaskSuspend+0xe0>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00a      	beq.n	8009bf0 <vTaskSuspend+0xa0>
	__asm volatile
 8009bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bde:	f383 8811 	msr	BASEPRI, r3
 8009be2:	f3bf 8f6f 	isb	sy
 8009be6:	f3bf 8f4f 	dsb	sy
 8009bea:	60bb      	str	r3, [r7, #8]
}
 8009bec:	bf00      	nop
 8009bee:	e7fe      	b.n	8009bee <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8009bf0:	4b10      	ldr	r3, [pc, #64]	; (8009c34 <vTaskSuspend+0xe4>)
 8009bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bf6:	601a      	str	r2, [r3, #0]
 8009bf8:	f3bf 8f4f 	dsb	sy
 8009bfc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009c00:	e00b      	b.n	8009c1a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8009c02:	4b09      	ldr	r3, [pc, #36]	; (8009c28 <vTaskSuspend+0xd8>)
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	4b0c      	ldr	r3, [pc, #48]	; (8009c38 <vTaskSuspend+0xe8>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d103      	bne.n	8009c16 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8009c0e:	4b05      	ldr	r3, [pc, #20]	; (8009c24 <vTaskSuspend+0xd4>)
 8009c10:	2200      	movs	r2, #0
 8009c12:	601a      	str	r2, [r3, #0]
	}
 8009c14:	e001      	b.n	8009c1a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8009c16:	f000 fa5f 	bl	800a0d8 <vTaskSwitchContext>
	}
 8009c1a:	bf00      	nop
 8009c1c:	3710      	adds	r7, #16
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	200073e4 	.word	0x200073e4
 8009c28:	200078a4 	.word	0x200078a4
 8009c2c:	200078c8 	.word	0x200078c8
 8009c30:	200078e4 	.word	0x200078e4
 8009c34:	e000ed04 	.word	0xe000ed04
 8009c38:	200078bc 	.word	0x200078bc

08009c3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b08a      	sub	sp, #40	; 0x28
 8009c40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009c42:	2300      	movs	r3, #0
 8009c44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009c46:	2300      	movs	r3, #0
 8009c48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009c4a:	463a      	mov	r2, r7
 8009c4c:	1d39      	adds	r1, r7, #4
 8009c4e:	f107 0308 	add.w	r3, r7, #8
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7fe fb98 	bl	8008388 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009c58:	6839      	ldr	r1, [r7, #0]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	68ba      	ldr	r2, [r7, #8]
 8009c5e:	9202      	str	r2, [sp, #8]
 8009c60:	9301      	str	r3, [sp, #4]
 8009c62:	2300      	movs	r3, #0
 8009c64:	9300      	str	r3, [sp, #0]
 8009c66:	2300      	movs	r3, #0
 8009c68:	460a      	mov	r2, r1
 8009c6a:	4924      	ldr	r1, [pc, #144]	; (8009cfc <vTaskStartScheduler+0xc0>)
 8009c6c:	4824      	ldr	r0, [pc, #144]	; (8009d00 <vTaskStartScheduler+0xc4>)
 8009c6e:	f7ff fcf3 	bl	8009658 <xTaskCreateStatic>
 8009c72:	4603      	mov	r3, r0
 8009c74:	4a23      	ldr	r2, [pc, #140]	; (8009d04 <vTaskStartScheduler+0xc8>)
 8009c76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009c78:	4b22      	ldr	r3, [pc, #136]	; (8009d04 <vTaskStartScheduler+0xc8>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d002      	beq.n	8009c86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009c80:	2301      	movs	r3, #1
 8009c82:	617b      	str	r3, [r7, #20]
 8009c84:	e001      	b.n	8009c8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009c86:	2300      	movs	r3, #0
 8009c88:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d102      	bne.n	8009c96 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009c90:	f000 fe0e 	bl	800a8b0 <xTimerCreateTimerTask>
 8009c94:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d11c      	bne.n	8009cd6 <vTaskStartScheduler+0x9a>
	__asm volatile
 8009c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca0:	f383 8811 	msr	BASEPRI, r3
 8009ca4:	f3bf 8f6f 	isb	sy
 8009ca8:	f3bf 8f4f 	dsb	sy
 8009cac:	613b      	str	r3, [r7, #16]
}
 8009cae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009cb0:	4b15      	ldr	r3, [pc, #84]	; (8009d08 <vTaskStartScheduler+0xcc>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8009cb8:	4a14      	ldr	r2, [pc, #80]	; (8009d0c <vTaskStartScheduler+0xd0>)
 8009cba:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009cbc:	4b14      	ldr	r3, [pc, #80]	; (8009d10 <vTaskStartScheduler+0xd4>)
 8009cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8009cc2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009cc4:	4b13      	ldr	r3, [pc, #76]	; (8009d14 <vTaskStartScheduler+0xd8>)
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009cca:	4b13      	ldr	r3, [pc, #76]	; (8009d18 <vTaskStartScheduler+0xdc>)
 8009ccc:	2200      	movs	r2, #0
 8009cce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009cd0:	f7fe fd2e 	bl	8008730 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009cd4:	e00e      	b.n	8009cf4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cdc:	d10a      	bne.n	8009cf4 <vTaskStartScheduler+0xb8>
	__asm volatile
 8009cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce2:	f383 8811 	msr	BASEPRI, r3
 8009ce6:	f3bf 8f6f 	isb	sy
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	60fb      	str	r3, [r7, #12]
}
 8009cf0:	bf00      	nop
 8009cf2:	e7fe      	b.n	8009cf2 <vTaskStartScheduler+0xb6>
}
 8009cf4:	bf00      	nop
 8009cf6:	3718      	adds	r7, #24
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}
 8009cfc:	0800c878 	.word	0x0800c878
 8009d00:	0800a471 	.word	0x0800a471
 8009d04:	200078e0 	.word	0x200078e0
 8009d08:	200073e4 	.word	0x200073e4
 8009d0c:	20000014 	.word	0x20000014
 8009d10:	200078dc 	.word	0x200078dc
 8009d14:	200078c8 	.word	0x200078c8
 8009d18:	200078c0 	.word	0x200078c0

08009d1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009d20:	4b04      	ldr	r3, [pc, #16]	; (8009d34 <vTaskSuspendAll+0x18>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	3301      	adds	r3, #1
 8009d26:	4a03      	ldr	r2, [pc, #12]	; (8009d34 <vTaskSuspendAll+0x18>)
 8009d28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009d2a:	bf00      	nop
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr
 8009d34:	200078e4 	.word	0x200078e4

08009d38 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8009d42:	4b14      	ldr	r3, [pc, #80]	; (8009d94 <prvGetExpectedIdleTime+0x5c>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d001      	beq.n	8009d4e <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8009d4e:	4b12      	ldr	r3, [pc, #72]	; (8009d98 <prvGetExpectedIdleTime+0x60>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d002      	beq.n	8009d5e <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	607b      	str	r3, [r7, #4]
 8009d5c:	e012      	b.n	8009d84 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8009d5e:	4b0f      	ldr	r3, [pc, #60]	; (8009d9c <prvGetExpectedIdleTime+0x64>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d902      	bls.n	8009d6c <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8009d66:	2300      	movs	r3, #0
 8009d68:	607b      	str	r3, [r7, #4]
 8009d6a:	e00b      	b.n	8009d84 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d002      	beq.n	8009d78 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8009d72:	2300      	movs	r3, #0
 8009d74:	607b      	str	r3, [r7, #4]
 8009d76:	e005      	b.n	8009d84 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8009d78:	4b09      	ldr	r3, [pc, #36]	; (8009da0 <prvGetExpectedIdleTime+0x68>)
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	4b09      	ldr	r3, [pc, #36]	; (8009da4 <prvGetExpectedIdleTime+0x6c>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	1ad3      	subs	r3, r2, r3
 8009d82:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8009d84:	687b      	ldr	r3, [r7, #4]
	}
 8009d86:	4618      	mov	r0, r3
 8009d88:	370c      	adds	r7, #12
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr
 8009d92:	bf00      	nop
 8009d94:	200078c4 	.word	0x200078c4
 8009d98:	200073e4 	.word	0x200073e4
 8009d9c:	200073e8 	.word	0x200073e8
 8009da0:	200078dc 	.word	0x200078dc
 8009da4:	200078c0 	.word	0x200078c0

08009da8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009dae:	2300      	movs	r3, #0
 8009db0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009db2:	2300      	movs	r3, #0
 8009db4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009db6:	4b42      	ldr	r3, [pc, #264]	; (8009ec0 <xTaskResumeAll+0x118>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d10a      	bne.n	8009dd4 <xTaskResumeAll+0x2c>
	__asm volatile
 8009dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc2:	f383 8811 	msr	BASEPRI, r3
 8009dc6:	f3bf 8f6f 	isb	sy
 8009dca:	f3bf 8f4f 	dsb	sy
 8009dce:	603b      	str	r3, [r7, #0]
}
 8009dd0:	bf00      	nop
 8009dd2:	e7fe      	b.n	8009dd2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009dd4:	f7fe fd4e 	bl	8008874 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009dd8:	4b39      	ldr	r3, [pc, #228]	; (8009ec0 <xTaskResumeAll+0x118>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	3b01      	subs	r3, #1
 8009dde:	4a38      	ldr	r2, [pc, #224]	; (8009ec0 <xTaskResumeAll+0x118>)
 8009de0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009de2:	4b37      	ldr	r3, [pc, #220]	; (8009ec0 <xTaskResumeAll+0x118>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d162      	bne.n	8009eb0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009dea:	4b36      	ldr	r3, [pc, #216]	; (8009ec4 <xTaskResumeAll+0x11c>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d05e      	beq.n	8009eb0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009df2:	e02f      	b.n	8009e54 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009df4:	4b34      	ldr	r3, [pc, #208]	; (8009ec8 <xTaskResumeAll+0x120>)
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	3318      	adds	r3, #24
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7fe fbe1 	bl	80085c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	3304      	adds	r3, #4
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7fe fbdc 	bl	80085c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e14:	4b2d      	ldr	r3, [pc, #180]	; (8009ecc <xTaskResumeAll+0x124>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d903      	bls.n	8009e24 <xTaskResumeAll+0x7c>
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e20:	4a2a      	ldr	r2, [pc, #168]	; (8009ecc <xTaskResumeAll+0x124>)
 8009e22:	6013      	str	r3, [r2, #0]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e28:	4613      	mov	r3, r2
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	4413      	add	r3, r2
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	4a27      	ldr	r2, [pc, #156]	; (8009ed0 <xTaskResumeAll+0x128>)
 8009e32:	441a      	add	r2, r3
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	3304      	adds	r3, #4
 8009e38:	4619      	mov	r1, r3
 8009e3a:	4610      	mov	r0, r2
 8009e3c:	f7fe fb67 	bl	800850e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e44:	4b23      	ldr	r3, [pc, #140]	; (8009ed4 <xTaskResumeAll+0x12c>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d302      	bcc.n	8009e54 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009e4e:	4b22      	ldr	r3, [pc, #136]	; (8009ed8 <xTaskResumeAll+0x130>)
 8009e50:	2201      	movs	r2, #1
 8009e52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e54:	4b1c      	ldr	r3, [pc, #112]	; (8009ec8 <xTaskResumeAll+0x120>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d1cb      	bne.n	8009df4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d001      	beq.n	8009e66 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009e62:	f000 fc19 	bl	800a698 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009e66:	4b1d      	ldr	r3, [pc, #116]	; (8009edc <xTaskResumeAll+0x134>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d010      	beq.n	8009e94 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009e72:	f000 f86f 	bl	8009f54 <xTaskIncrementTick>
 8009e76:	4603      	mov	r3, r0
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d002      	beq.n	8009e82 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009e7c:	4b16      	ldr	r3, [pc, #88]	; (8009ed8 <xTaskResumeAll+0x130>)
 8009e7e:	2201      	movs	r2, #1
 8009e80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	3b01      	subs	r3, #1
 8009e86:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d1f1      	bne.n	8009e72 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009e8e:	4b13      	ldr	r3, [pc, #76]	; (8009edc <xTaskResumeAll+0x134>)
 8009e90:	2200      	movs	r2, #0
 8009e92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009e94:	4b10      	ldr	r3, [pc, #64]	; (8009ed8 <xTaskResumeAll+0x130>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d009      	beq.n	8009eb0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009ea0:	4b0f      	ldr	r3, [pc, #60]	; (8009ee0 <xTaskResumeAll+0x138>)
 8009ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ea6:	601a      	str	r2, [r3, #0]
 8009ea8:	f3bf 8f4f 	dsb	sy
 8009eac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009eb0:	f7fe fd10 	bl	80088d4 <vPortExitCritical>

	return xAlreadyYielded;
 8009eb4:	68bb      	ldr	r3, [r7, #8]
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	200078e4 	.word	0x200078e4
 8009ec4:	200078bc 	.word	0x200078bc
 8009ec8:	20007878 	.word	0x20007878
 8009ecc:	200078c4 	.word	0x200078c4
 8009ed0:	200073e8 	.word	0x200073e8
 8009ed4:	200073e4 	.word	0x200073e4
 8009ed8:	200078d0 	.word	0x200078d0
 8009edc:	200078cc 	.word	0x200078cc
 8009ee0:	e000ed04 	.word	0xe000ed04

08009ee4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009eea:	4b05      	ldr	r3, [pc, #20]	; (8009f00 <xTaskGetTickCount+0x1c>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009ef0:	687b      	ldr	r3, [r7, #4]
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	370c      	adds	r7, #12
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr
 8009efe:	bf00      	nop
 8009f00:	200078c0 	.word	0x200078c0

08009f04 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 8009f04:	b480      	push	{r7}
 8009f06:	b085      	sub	sp, #20
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8009f0c:	4b0f      	ldr	r3, [pc, #60]	; (8009f4c <vTaskStepTick+0x48>)
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	441a      	add	r2, r3
 8009f14:	4b0e      	ldr	r3, [pc, #56]	; (8009f50 <vTaskStepTick+0x4c>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d90a      	bls.n	8009f32 <vTaskStepTick+0x2e>
	__asm volatile
 8009f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f20:	f383 8811 	msr	BASEPRI, r3
 8009f24:	f3bf 8f6f 	isb	sy
 8009f28:	f3bf 8f4f 	dsb	sy
 8009f2c:	60fb      	str	r3, [r7, #12]
}
 8009f2e:	bf00      	nop
 8009f30:	e7fe      	b.n	8009f30 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 8009f32:	4b06      	ldr	r3, [pc, #24]	; (8009f4c <vTaskStepTick+0x48>)
 8009f34:	681a      	ldr	r2, [r3, #0]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	4413      	add	r3, r2
 8009f3a:	4a04      	ldr	r2, [pc, #16]	; (8009f4c <vTaskStepTick+0x48>)
 8009f3c:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 8009f3e:	bf00      	nop
 8009f40:	3714      	adds	r7, #20
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr
 8009f4a:	bf00      	nop
 8009f4c:	200078c0 	.word	0x200078c0
 8009f50:	200078dc 	.word	0x200078dc

08009f54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b086      	sub	sp, #24
 8009f58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f5e:	4b53      	ldr	r3, [pc, #332]	; (800a0ac <xTaskIncrementTick+0x158>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	f040 8095 	bne.w	800a092 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009f68:	4b51      	ldr	r3, [pc, #324]	; (800a0b0 <xTaskIncrementTick+0x15c>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009f70:	4a4f      	ldr	r2, [pc, #316]	; (800a0b0 <xTaskIncrementTick+0x15c>)
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d120      	bne.n	8009fbe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009f7c:	4b4d      	ldr	r3, [pc, #308]	; (800a0b4 <xTaskIncrementTick+0x160>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d00a      	beq.n	8009f9c <xTaskIncrementTick+0x48>
	__asm volatile
 8009f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f8a:	f383 8811 	msr	BASEPRI, r3
 8009f8e:	f3bf 8f6f 	isb	sy
 8009f92:	f3bf 8f4f 	dsb	sy
 8009f96:	603b      	str	r3, [r7, #0]
}
 8009f98:	bf00      	nop
 8009f9a:	e7fe      	b.n	8009f9a <xTaskIncrementTick+0x46>
 8009f9c:	4b45      	ldr	r3, [pc, #276]	; (800a0b4 <xTaskIncrementTick+0x160>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	60fb      	str	r3, [r7, #12]
 8009fa2:	4b45      	ldr	r3, [pc, #276]	; (800a0b8 <xTaskIncrementTick+0x164>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4a43      	ldr	r2, [pc, #268]	; (800a0b4 <xTaskIncrementTick+0x160>)
 8009fa8:	6013      	str	r3, [r2, #0]
 8009faa:	4a43      	ldr	r2, [pc, #268]	; (800a0b8 <xTaskIncrementTick+0x164>)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	6013      	str	r3, [r2, #0]
 8009fb0:	4b42      	ldr	r3, [pc, #264]	; (800a0bc <xTaskIncrementTick+0x168>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	4a41      	ldr	r2, [pc, #260]	; (800a0bc <xTaskIncrementTick+0x168>)
 8009fb8:	6013      	str	r3, [r2, #0]
 8009fba:	f000 fb6d 	bl	800a698 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009fbe:	4b40      	ldr	r3, [pc, #256]	; (800a0c0 <xTaskIncrementTick+0x16c>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	693a      	ldr	r2, [r7, #16]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d349      	bcc.n	800a05c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009fc8:	4b3a      	ldr	r3, [pc, #232]	; (800a0b4 <xTaskIncrementTick+0x160>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d104      	bne.n	8009fdc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fd2:	4b3b      	ldr	r3, [pc, #236]	; (800a0c0 <xTaskIncrementTick+0x16c>)
 8009fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8009fd8:	601a      	str	r2, [r3, #0]
					break;
 8009fda:	e03f      	b.n	800a05c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fdc:	4b35      	ldr	r3, [pc, #212]	; (800a0b4 <xTaskIncrementTick+0x160>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009fec:	693a      	ldr	r2, [r7, #16]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d203      	bcs.n	8009ffc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009ff4:	4a32      	ldr	r2, [pc, #200]	; (800a0c0 <xTaskIncrementTick+0x16c>)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009ffa:	e02f      	b.n	800a05c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	3304      	adds	r3, #4
 800a000:	4618      	mov	r0, r3
 800a002:	f7fe fae1 	bl	80085c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d004      	beq.n	800a018 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	3318      	adds	r3, #24
 800a012:	4618      	mov	r0, r3
 800a014:	f7fe fad8 	bl	80085c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a01c:	4b29      	ldr	r3, [pc, #164]	; (800a0c4 <xTaskIncrementTick+0x170>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	429a      	cmp	r2, r3
 800a022:	d903      	bls.n	800a02c <xTaskIncrementTick+0xd8>
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a028:	4a26      	ldr	r2, [pc, #152]	; (800a0c4 <xTaskIncrementTick+0x170>)
 800a02a:	6013      	str	r3, [r2, #0]
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a030:	4613      	mov	r3, r2
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	4413      	add	r3, r2
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	4a23      	ldr	r2, [pc, #140]	; (800a0c8 <xTaskIncrementTick+0x174>)
 800a03a:	441a      	add	r2, r3
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	3304      	adds	r3, #4
 800a040:	4619      	mov	r1, r3
 800a042:	4610      	mov	r0, r2
 800a044:	f7fe fa63 	bl	800850e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a04c:	4b1f      	ldr	r3, [pc, #124]	; (800a0cc <xTaskIncrementTick+0x178>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a052:	429a      	cmp	r2, r3
 800a054:	d3b8      	bcc.n	8009fc8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a056:	2301      	movs	r3, #1
 800a058:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a05a:	e7b5      	b.n	8009fc8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a05c:	4b1b      	ldr	r3, [pc, #108]	; (800a0cc <xTaskIncrementTick+0x178>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a062:	4919      	ldr	r1, [pc, #100]	; (800a0c8 <xTaskIncrementTick+0x174>)
 800a064:	4613      	mov	r3, r2
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	4413      	add	r3, r2
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	440b      	add	r3, r1
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	2b01      	cmp	r3, #1
 800a072:	d901      	bls.n	800a078 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a074:	2301      	movs	r3, #1
 800a076:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 800a078:	4b15      	ldr	r3, [pc, #84]	; (800a0d0 <xTaskIncrementTick+0x17c>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d101      	bne.n	800a084 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 800a080:	f7f7 fcaa 	bl	80019d8 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a084:	4b13      	ldr	r3, [pc, #76]	; (800a0d4 <xTaskIncrementTick+0x180>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d009      	beq.n	800a0a0 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 800a08c:	2301      	movs	r3, #1
 800a08e:	617b      	str	r3, [r7, #20]
 800a090:	e006      	b.n	800a0a0 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a092:	4b0f      	ldr	r3, [pc, #60]	; (800a0d0 <xTaskIncrementTick+0x17c>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	3301      	adds	r3, #1
 800a098:	4a0d      	ldr	r2, [pc, #52]	; (800a0d0 <xTaskIncrementTick+0x17c>)
 800a09a:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800a09c:	f7f7 fc9c 	bl	80019d8 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 800a0a0:	697b      	ldr	r3, [r7, #20]
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3718      	adds	r7, #24
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	200078e4 	.word	0x200078e4
 800a0b0:	200078c0 	.word	0x200078c0
 800a0b4:	20007870 	.word	0x20007870
 800a0b8:	20007874 	.word	0x20007874
 800a0bc:	200078d4 	.word	0x200078d4
 800a0c0:	200078dc 	.word	0x200078dc
 800a0c4:	200078c4 	.word	0x200078c4
 800a0c8:	200073e8 	.word	0x200073e8
 800a0cc:	200073e4 	.word	0x200073e4
 800a0d0:	200078cc 	.word	0x200078cc
 800a0d4:	200078d0 	.word	0x200078d0

0800a0d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a0de:	4b38      	ldr	r3, [pc, #224]	; (800a1c0 <vTaskSwitchContext+0xe8>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d003      	beq.n	800a0ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a0e6:	4b37      	ldr	r3, [pc, #220]	; (800a1c4 <vTaskSwitchContext+0xec>)
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a0ec:	e064      	b.n	800a1b8 <vTaskSwitchContext+0xe0>
		xYieldPending = pdFALSE;
 800a0ee:	4b35      	ldr	r3, [pc, #212]	; (800a1c4 <vTaskSwitchContext+0xec>)
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800a0f4:	4b34      	ldr	r3, [pc, #208]	; (800a1c8 <vTaskSwitchContext+0xf0>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	4b33      	ldr	r3, [pc, #204]	; (800a1c8 <vTaskSwitchContext+0xf0>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a100:	429a      	cmp	r2, r3
 800a102:	d808      	bhi.n	800a116 <vTaskSwitchContext+0x3e>
 800a104:	4b30      	ldr	r3, [pc, #192]	; (800a1c8 <vTaskSwitchContext+0xf0>)
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	4b2f      	ldr	r3, [pc, #188]	; (800a1c8 <vTaskSwitchContext+0xf0>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	3334      	adds	r3, #52	; 0x34
 800a10e:	4619      	mov	r1, r3
 800a110:	4610      	mov	r0, r2
 800a112:	f7f7 fc6f 	bl	80019f4 <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 800a116:	4b2c      	ldr	r3, [pc, #176]	; (800a1c8 <vTaskSwitchContext+0xf0>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4a2c      	ldr	r2, [pc, #176]	; (800a1cc <vTaskSwitchContext+0xf4>)
 800a11c:	6812      	ldr	r2, [r2, #0]
 800a11e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a122:	4b2b      	ldr	r3, [pc, #172]	; (800a1d0 <vTaskSwitchContext+0xf8>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	60fb      	str	r3, [r7, #12]
 800a128:	e010      	b.n	800a14c <vTaskSwitchContext+0x74>
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d10a      	bne.n	800a146 <vTaskSwitchContext+0x6e>
	__asm volatile
 800a130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	607b      	str	r3, [r7, #4]
}
 800a142:	bf00      	nop
 800a144:	e7fe      	b.n	800a144 <vTaskSwitchContext+0x6c>
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	3b01      	subs	r3, #1
 800a14a:	60fb      	str	r3, [r7, #12]
 800a14c:	4921      	ldr	r1, [pc, #132]	; (800a1d4 <vTaskSwitchContext+0xfc>)
 800a14e:	68fa      	ldr	r2, [r7, #12]
 800a150:	4613      	mov	r3, r2
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	4413      	add	r3, r2
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	440b      	add	r3, r1
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d0e4      	beq.n	800a12a <vTaskSwitchContext+0x52>
 800a160:	68fa      	ldr	r2, [r7, #12]
 800a162:	4613      	mov	r3, r2
 800a164:	009b      	lsls	r3, r3, #2
 800a166:	4413      	add	r3, r2
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	4a1a      	ldr	r2, [pc, #104]	; (800a1d4 <vTaskSwitchContext+0xfc>)
 800a16c:	4413      	add	r3, r2
 800a16e:	60bb      	str	r3, [r7, #8]
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	685a      	ldr	r2, [r3, #4]
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	605a      	str	r2, [r3, #4]
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	685a      	ldr	r2, [r3, #4]
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	3308      	adds	r3, #8
 800a182:	429a      	cmp	r2, r3
 800a184:	d104      	bne.n	800a190 <vTaskSwitchContext+0xb8>
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	685a      	ldr	r2, [r3, #4]
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	605a      	str	r2, [r3, #4]
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	4a0c      	ldr	r2, [pc, #48]	; (800a1c8 <vTaskSwitchContext+0xf0>)
 800a198:	6013      	str	r3, [r2, #0]
 800a19a:	4a0d      	ldr	r2, [pc, #52]	; (800a1d0 <vTaskSwitchContext+0xf8>)
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 800a1a0:	4b09      	ldr	r3, [pc, #36]	; (800a1c8 <vTaskSwitchContext+0xf0>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800a1a8:	4a08      	ldr	r2, [pc, #32]	; (800a1cc <vTaskSwitchContext+0xf4>)
 800a1aa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a1ac:	4b06      	ldr	r3, [pc, #24]	; (800a1c8 <vTaskSwitchContext+0xf0>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800a1b4:	4a08      	ldr	r2, [pc, #32]	; (800a1d8 <vTaskSwitchContext+0x100>)
 800a1b6:	6013      	str	r3, [r2, #0]
}
 800a1b8:	bf00      	nop
 800a1ba:	3710      	adds	r7, #16
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	200078e4 	.word	0x200078e4
 800a1c4:	200078d0 	.word	0x200078d0
 800a1c8:	200073e4 	.word	0x200073e4
 800a1cc:	200078b8 	.word	0x200078b8
 800a1d0:	200078c4 	.word	0x200078c4
 800a1d4:	200073e8 	.word	0x200073e8
 800a1d8:	20000014 	.word	0x20000014

0800a1dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b084      	sub	sp, #16
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d10a      	bne.n	800a202 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f0:	f383 8811 	msr	BASEPRI, r3
 800a1f4:	f3bf 8f6f 	isb	sy
 800a1f8:	f3bf 8f4f 	dsb	sy
 800a1fc:	60fb      	str	r3, [r7, #12]
}
 800a1fe:	bf00      	nop
 800a200:	e7fe      	b.n	800a200 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a202:	4b07      	ldr	r3, [pc, #28]	; (800a220 <vTaskPlaceOnEventList+0x44>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	3318      	adds	r3, #24
 800a208:	4619      	mov	r1, r3
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f7fe f9a3 	bl	8008556 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a210:	2101      	movs	r1, #1
 800a212:	6838      	ldr	r0, [r7, #0]
 800a214:	f000 faf2 	bl	800a7fc <prvAddCurrentTaskToDelayedList>
}
 800a218:	bf00      	nop
 800a21a:	3710      	adds	r7, #16
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	200073e4 	.word	0x200073e4

0800a224 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a224:	b580      	push	{r7, lr}
 800a226:	b086      	sub	sp, #24
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d10a      	bne.n	800a24c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a23a:	f383 8811 	msr	BASEPRI, r3
 800a23e:	f3bf 8f6f 	isb	sy
 800a242:	f3bf 8f4f 	dsb	sy
 800a246:	617b      	str	r3, [r7, #20]
}
 800a248:	bf00      	nop
 800a24a:	e7fe      	b.n	800a24a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a24c:	4b0a      	ldr	r3, [pc, #40]	; (800a278 <vTaskPlaceOnEventListRestricted+0x54>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	3318      	adds	r3, #24
 800a252:	4619      	mov	r1, r3
 800a254:	68f8      	ldr	r0, [r7, #12]
 800a256:	f7fe f95a 	bl	800850e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d002      	beq.n	800a266 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a260:	f04f 33ff 	mov.w	r3, #4294967295
 800a264:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a266:	6879      	ldr	r1, [r7, #4]
 800a268:	68b8      	ldr	r0, [r7, #8]
 800a26a:	f000 fac7 	bl	800a7fc <prvAddCurrentTaskToDelayedList>
	}
 800a26e:	bf00      	nop
 800a270:	3718      	adds	r7, #24
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
 800a276:	bf00      	nop
 800a278:	200073e4 	.word	0x200073e4

0800a27c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b086      	sub	sp, #24
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d10a      	bne.n	800a2a8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a296:	f383 8811 	msr	BASEPRI, r3
 800a29a:	f3bf 8f6f 	isb	sy
 800a29e:	f3bf 8f4f 	dsb	sy
 800a2a2:	60fb      	str	r3, [r7, #12]
}
 800a2a4:	bf00      	nop
 800a2a6:	e7fe      	b.n	800a2a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	3318      	adds	r3, #24
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7fe f98b 	bl	80085c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2b2:	4b1f      	ldr	r3, [pc, #124]	; (800a330 <xTaskRemoveFromEventList+0xb4>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d11f      	bne.n	800a2fa <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	3304      	adds	r3, #4
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7fe f982 	bl	80085c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2c8:	4b1a      	ldr	r3, [pc, #104]	; (800a334 <xTaskRemoveFromEventList+0xb8>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d903      	bls.n	800a2d8 <xTaskRemoveFromEventList+0x5c>
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d4:	4a17      	ldr	r2, [pc, #92]	; (800a334 <xTaskRemoveFromEventList+0xb8>)
 800a2d6:	6013      	str	r3, [r2, #0]
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2dc:	4613      	mov	r3, r2
 800a2de:	009b      	lsls	r3, r3, #2
 800a2e0:	4413      	add	r3, r2
 800a2e2:	009b      	lsls	r3, r3, #2
 800a2e4:	4a14      	ldr	r2, [pc, #80]	; (800a338 <xTaskRemoveFromEventList+0xbc>)
 800a2e6:	441a      	add	r2, r3
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	3304      	adds	r3, #4
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	4610      	mov	r0, r2
 800a2f0:	f7fe f90d 	bl	800850e <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800a2f4:	f000 f9d0 	bl	800a698 <prvResetNextTaskUnblockTime>
 800a2f8:	e005      	b.n	800a306 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	3318      	adds	r3, #24
 800a2fe:	4619      	mov	r1, r3
 800a300:	480e      	ldr	r0, [pc, #56]	; (800a33c <xTaskRemoveFromEventList+0xc0>)
 800a302:	f7fe f904 	bl	800850e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a30a:	4b0d      	ldr	r3, [pc, #52]	; (800a340 <xTaskRemoveFromEventList+0xc4>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a310:	429a      	cmp	r2, r3
 800a312:	d905      	bls.n	800a320 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a314:	2301      	movs	r3, #1
 800a316:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a318:	4b0a      	ldr	r3, [pc, #40]	; (800a344 <xTaskRemoveFromEventList+0xc8>)
 800a31a:	2201      	movs	r2, #1
 800a31c:	601a      	str	r2, [r3, #0]
 800a31e:	e001      	b.n	800a324 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800a320:	2300      	movs	r3, #0
 800a322:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a324:	697b      	ldr	r3, [r7, #20]
}
 800a326:	4618      	mov	r0, r3
 800a328:	3718      	adds	r7, #24
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
 800a32e:	bf00      	nop
 800a330:	200078e4 	.word	0x200078e4
 800a334:	200078c4 	.word	0x200078c4
 800a338:	200073e8 	.word	0x200073e8
 800a33c:	20007878 	.word	0x20007878
 800a340:	200073e4 	.word	0x200073e4
 800a344:	200078d0 	.word	0x200078d0

0800a348 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a350:	4b06      	ldr	r3, [pc, #24]	; (800a36c <vTaskInternalSetTimeOutState+0x24>)
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a358:	4b05      	ldr	r3, [pc, #20]	; (800a370 <vTaskInternalSetTimeOutState+0x28>)
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	605a      	str	r2, [r3, #4]
}
 800a360:	bf00      	nop
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr
 800a36c:	200078d4 	.word	0x200078d4
 800a370:	200078c0 	.word	0x200078c0

0800a374 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b088      	sub	sp, #32
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d10a      	bne.n	800a39a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a388:	f383 8811 	msr	BASEPRI, r3
 800a38c:	f3bf 8f6f 	isb	sy
 800a390:	f3bf 8f4f 	dsb	sy
 800a394:	613b      	str	r3, [r7, #16]
}
 800a396:	bf00      	nop
 800a398:	e7fe      	b.n	800a398 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d10a      	bne.n	800a3b6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a4:	f383 8811 	msr	BASEPRI, r3
 800a3a8:	f3bf 8f6f 	isb	sy
 800a3ac:	f3bf 8f4f 	dsb	sy
 800a3b0:	60fb      	str	r3, [r7, #12]
}
 800a3b2:	bf00      	nop
 800a3b4:	e7fe      	b.n	800a3b4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a3b6:	f7fe fa5d 	bl	8008874 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a3ba:	4b24      	ldr	r3, [pc, #144]	; (800a44c <xTaskCheckForTimeOut+0xd8>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	69ba      	ldr	r2, [r7, #24]
 800a3c6:	1ad3      	subs	r3, r2, r3
 800a3c8:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800a3ca:	4b21      	ldr	r3, [pc, #132]	; (800a450 <xTaskCheckForTimeOut+0xdc>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d007      	beq.n	800a3e6 <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a3d6:	4b1e      	ldr	r3, [pc, #120]	; (800a450 <xTaskCheckForTimeOut+0xdc>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f883 21ae 	strb.w	r2, [r3, #430]	; 0x1ae
				xReturn = pdTRUE;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	61fb      	str	r3, [r7, #28]
 800a3e4:	e02b      	b.n	800a43e <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ee:	d102      	bne.n	800a3f6 <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	61fb      	str	r3, [r7, #28]
 800a3f4:	e023      	b.n	800a43e <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681a      	ldr	r2, [r3, #0]
 800a3fa:	4b16      	ldr	r3, [pc, #88]	; (800a454 <xTaskCheckForTimeOut+0xe0>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d007      	beq.n	800a412 <xTaskCheckForTimeOut+0x9e>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	69ba      	ldr	r2, [r7, #24]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d302      	bcc.n	800a412 <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a40c:	2301      	movs	r3, #1
 800a40e:	61fb      	str	r3, [r7, #28]
 800a410:	e015      	b.n	800a43e <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	697a      	ldr	r2, [r7, #20]
 800a418:	429a      	cmp	r2, r3
 800a41a:	d20b      	bcs.n	800a434 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	1ad2      	subs	r2, r2, r3
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f7ff ff8d 	bl	800a348 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a42e:	2300      	movs	r3, #0
 800a430:	61fb      	str	r3, [r7, #28]
 800a432:	e004      	b.n	800a43e <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	2200      	movs	r2, #0
 800a438:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a43a:	2301      	movs	r3, #1
 800a43c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a43e:	f7fe fa49 	bl	80088d4 <vPortExitCritical>

	return xReturn;
 800a442:	69fb      	ldr	r3, [r7, #28]
}
 800a444:	4618      	mov	r0, r3
 800a446:	3720      	adds	r7, #32
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}
 800a44c:	200078c0 	.word	0x200078c0
 800a450:	200073e4 	.word	0x200073e4
 800a454:	200078d4 	.word	0x200078d4

0800a458 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a458:	b480      	push	{r7}
 800a45a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a45c:	4b03      	ldr	r3, [pc, #12]	; (800a46c <vTaskMissedYield+0x14>)
 800a45e:	2201      	movs	r2, #1
 800a460:	601a      	str	r2, [r3, #0]
}
 800a462:	bf00      	nop
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr
 800a46c:	200078d0 	.word	0x200078d0

0800a470 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a478:	f000 f8aa 	bl	800a5d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a47c:	4b19      	ldr	r3, [pc, #100]	; (800a4e4 <prvIdleTask+0x74>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2b01      	cmp	r3, #1
 800a482:	d907      	bls.n	800a494 <prvIdleTask+0x24>
			{
				taskYIELD();
 800a484:	4b18      	ldr	r3, [pc, #96]	; (800a4e8 <prvIdleTask+0x78>)
 800a486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a48a:	601a      	str	r2, [r3, #0]
 800a48c:	f3bf 8f4f 	dsb	sy
 800a490:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800a494:	f7f7 fa98 	bl	80019c8 <vApplicationIdleHook>
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800a498:	f7ff fc4e 	bl	8009d38 <prvGetExpectedIdleTime>
 800a49c:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d9e9      	bls.n	800a478 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800a4a4:	f7ff fc3a 	bl	8009d1c <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800a4a8:	4b10      	ldr	r3, [pc, #64]	; (800a4ec <prvIdleTask+0x7c>)
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	4b10      	ldr	r3, [pc, #64]	; (800a4f0 <prvIdleTask+0x80>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d20a      	bcs.n	800a4ca <prvIdleTask+0x5a>
	__asm volatile
 800a4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b8:	f383 8811 	msr	BASEPRI, r3
 800a4bc:	f3bf 8f6f 	isb	sy
 800a4c0:	f3bf 8f4f 	dsb	sy
 800a4c4:	60bb      	str	r3, [r7, #8]
}
 800a4c6:	bf00      	nop
 800a4c8:	e7fe      	b.n	800a4c8 <prvIdleTask+0x58>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800a4ca:	f7ff fc35 	bl	8009d38 <prvGetExpectedIdleTime>
 800a4ce:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d902      	bls.n	800a4dc <prvIdleTask+0x6c>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800a4d6:	68f8      	ldr	r0, [r7, #12]
 800a4d8:	f7fe fa80 	bl	80089dc <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800a4dc:	f7ff fc64 	bl	8009da8 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800a4e0:	e7ca      	b.n	800a478 <prvIdleTask+0x8>
 800a4e2:	bf00      	nop
 800a4e4:	200073e8 	.word	0x200073e8
 800a4e8:	e000ed04 	.word	0xe000ed04
 800a4ec:	200078dc 	.word	0x200078dc
 800a4f0:	200078c0 	.word	0x200078c0

0800a4f4 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800a4fe:	2301      	movs	r3, #1
 800a500:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800a502:	4b0f      	ldr	r3, [pc, #60]	; (800a540 <eTaskConfirmSleepModeStatus+0x4c>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d002      	beq.n	800a510 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800a50a:	2300      	movs	r3, #0
 800a50c:	71fb      	strb	r3, [r7, #7]
 800a50e:	e010      	b.n	800a532 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800a510:	4b0c      	ldr	r3, [pc, #48]	; (800a544 <eTaskConfirmSleepModeStatus+0x50>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d002      	beq.n	800a51e <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800a518:	2300      	movs	r3, #0
 800a51a:	71fb      	strb	r3, [r7, #7]
 800a51c:	e009      	b.n	800a532 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800a51e:	4b0a      	ldr	r3, [pc, #40]	; (800a548 <eTaskConfirmSleepModeStatus+0x54>)
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	4b0a      	ldr	r3, [pc, #40]	; (800a54c <eTaskConfirmSleepModeStatus+0x58>)
 800a524:	6819      	ldr	r1, [r3, #0]
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	1acb      	subs	r3, r1, r3
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d101      	bne.n	800a532 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800a52e:	2302      	movs	r3, #2
 800a530:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800a532:	79fb      	ldrb	r3, [r7, #7]
	}
 800a534:	4618      	mov	r0, r3
 800a536:	370c      	adds	r7, #12
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr
 800a540:	20007878 	.word	0x20007878
 800a544:	200078d0 	.word	0x200078d0
 800a548:	200078a4 	.word	0x200078a4
 800a54c:	200078bc 	.word	0x200078bc

0800a550 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b082      	sub	sp, #8
 800a554:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a556:	2300      	movs	r3, #0
 800a558:	607b      	str	r3, [r7, #4]
 800a55a:	e00c      	b.n	800a576 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	4613      	mov	r3, r2
 800a560:	009b      	lsls	r3, r3, #2
 800a562:	4413      	add	r3, r2
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	4a12      	ldr	r2, [pc, #72]	; (800a5b0 <prvInitialiseTaskLists+0x60>)
 800a568:	4413      	add	r3, r2
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7fd ffa2 	bl	80084b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	3301      	adds	r3, #1
 800a574:	607b      	str	r3, [r7, #4]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2b37      	cmp	r3, #55	; 0x37
 800a57a:	d9ef      	bls.n	800a55c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a57c:	480d      	ldr	r0, [pc, #52]	; (800a5b4 <prvInitialiseTaskLists+0x64>)
 800a57e:	f7fd ff99 	bl	80084b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a582:	480d      	ldr	r0, [pc, #52]	; (800a5b8 <prvInitialiseTaskLists+0x68>)
 800a584:	f7fd ff96 	bl	80084b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a588:	480c      	ldr	r0, [pc, #48]	; (800a5bc <prvInitialiseTaskLists+0x6c>)
 800a58a:	f7fd ff93 	bl	80084b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a58e:	480c      	ldr	r0, [pc, #48]	; (800a5c0 <prvInitialiseTaskLists+0x70>)
 800a590:	f7fd ff90 	bl	80084b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a594:	480b      	ldr	r0, [pc, #44]	; (800a5c4 <prvInitialiseTaskLists+0x74>)
 800a596:	f7fd ff8d 	bl	80084b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a59a:	4b0b      	ldr	r3, [pc, #44]	; (800a5c8 <prvInitialiseTaskLists+0x78>)
 800a59c:	4a05      	ldr	r2, [pc, #20]	; (800a5b4 <prvInitialiseTaskLists+0x64>)
 800a59e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a5a0:	4b0a      	ldr	r3, [pc, #40]	; (800a5cc <prvInitialiseTaskLists+0x7c>)
 800a5a2:	4a05      	ldr	r2, [pc, #20]	; (800a5b8 <prvInitialiseTaskLists+0x68>)
 800a5a4:	601a      	str	r2, [r3, #0]
}
 800a5a6:	bf00      	nop
 800a5a8:	3708      	adds	r7, #8
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	200073e8 	.word	0x200073e8
 800a5b4:	20007848 	.word	0x20007848
 800a5b8:	2000785c 	.word	0x2000785c
 800a5bc:	20007878 	.word	0x20007878
 800a5c0:	2000788c 	.word	0x2000788c
 800a5c4:	200078a4 	.word	0x200078a4
 800a5c8:	20007870 	.word	0x20007870
 800a5cc:	20007874 	.word	0x20007874

0800a5d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a5d6:	e019      	b.n	800a60c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a5d8:	f7fe f94c 	bl	8008874 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5dc:	4b10      	ldr	r3, [pc, #64]	; (800a620 <prvCheckTasksWaitingTermination+0x50>)
 800a5de:	68db      	ldr	r3, [r3, #12]
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	3304      	adds	r3, #4
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f7fd ffed 	bl	80085c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a5ee:	4b0d      	ldr	r3, [pc, #52]	; (800a624 <prvCheckTasksWaitingTermination+0x54>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	3b01      	subs	r3, #1
 800a5f4:	4a0b      	ldr	r2, [pc, #44]	; (800a624 <prvCheckTasksWaitingTermination+0x54>)
 800a5f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a5f8:	4b0b      	ldr	r3, [pc, #44]	; (800a628 <prvCheckTasksWaitingTermination+0x58>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	3b01      	subs	r3, #1
 800a5fe:	4a0a      	ldr	r2, [pc, #40]	; (800a628 <prvCheckTasksWaitingTermination+0x58>)
 800a600:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a602:	f7fe f967 	bl	80088d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 f810 	bl	800a62c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a60c:	4b06      	ldr	r3, [pc, #24]	; (800a628 <prvCheckTasksWaitingTermination+0x58>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d1e1      	bne.n	800a5d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a614:	bf00      	nop
 800a616:	bf00      	nop
 800a618:	3708      	adds	r7, #8
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop
 800a620:	2000788c 	.word	0x2000788c
 800a624:	200078bc 	.word	0x200078bc
 800a628:	200078a0 	.word	0x200078a0

0800a62c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800a63a:	4618      	mov	r0, r3
 800a63c:	f001 ffe6 	bl	800c60c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f893 31ad 	ldrb.w	r3, [r3, #429]	; 0x1ad
 800a646:	2b00      	cmp	r3, #0
 800a648:	d108      	bne.n	800a65c <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a64e:	4618      	mov	r0, r3
 800a650:	f7fd ff18 	bl	8008484 <vPortFree>
				vPortFree( pxTCB );
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f7fd ff15 	bl	8008484 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a65a:	e018      	b.n	800a68e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f893 31ad 	ldrb.w	r3, [r3, #429]	; 0x1ad
 800a662:	2b01      	cmp	r3, #1
 800a664:	d103      	bne.n	800a66e <prvDeleteTCB+0x42>
				vPortFree( pxTCB );
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f7fd ff0c 	bl	8008484 <vPortFree>
	}
 800a66c:	e00f      	b.n	800a68e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f893 31ad 	ldrb.w	r3, [r3, #429]	; 0x1ad
 800a674:	2b02      	cmp	r3, #2
 800a676:	d00a      	beq.n	800a68e <prvDeleteTCB+0x62>
	__asm volatile
 800a678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67c:	f383 8811 	msr	BASEPRI, r3
 800a680:	f3bf 8f6f 	isb	sy
 800a684:	f3bf 8f4f 	dsb	sy
 800a688:	60fb      	str	r3, [r7, #12]
}
 800a68a:	bf00      	nop
 800a68c:	e7fe      	b.n	800a68c <prvDeleteTCB+0x60>
	}
 800a68e:	bf00      	nop
 800a690:	3710      	adds	r7, #16
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
	...

0800a698 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a69e:	4b0c      	ldr	r3, [pc, #48]	; (800a6d0 <prvResetNextTaskUnblockTime+0x38>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d104      	bne.n	800a6b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a6a8:	4b0a      	ldr	r3, [pc, #40]	; (800a6d4 <prvResetNextTaskUnblockTime+0x3c>)
 800a6aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a6b0:	e008      	b.n	800a6c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6b2:	4b07      	ldr	r3, [pc, #28]	; (800a6d0 <prvResetNextTaskUnblockTime+0x38>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	68db      	ldr	r3, [r3, #12]
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	4a04      	ldr	r2, [pc, #16]	; (800a6d4 <prvResetNextTaskUnblockTime+0x3c>)
 800a6c2:	6013      	str	r3, [r2, #0]
}
 800a6c4:	bf00      	nop
 800a6c6:	370c      	adds	r7, #12
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr
 800a6d0:	20007870 	.word	0x20007870
 800a6d4:	200078dc 	.word	0x200078dc

0800a6d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a6d8:	b480      	push	{r7}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a6de:	4b0b      	ldr	r3, [pc, #44]	; (800a70c <xTaskGetSchedulerState+0x34>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d102      	bne.n	800a6ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	607b      	str	r3, [r7, #4]
 800a6ea:	e008      	b.n	800a6fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6ec:	4b08      	ldr	r3, [pc, #32]	; (800a710 <xTaskGetSchedulerState+0x38>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d102      	bne.n	800a6fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a6f4:	2302      	movs	r3, #2
 800a6f6:	607b      	str	r3, [r7, #4]
 800a6f8:	e001      	b.n	800a6fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a6fe:	687b      	ldr	r3, [r7, #4]
	}
 800a700:	4618      	mov	r0, r3
 800a702:	370c      	adds	r7, #12
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr
 800a70c:	200078c8 	.word	0x200078c8
 800a710:	200078e4 	.word	0x200078e4

0800a714 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a714:	b580      	push	{r7, lr}
 800a716:	b086      	sub	sp, #24
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a720:	2300      	movs	r3, #0
 800a722:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d05c      	beq.n	800a7e4 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a72a:	4b31      	ldr	r3, [pc, #196]	; (800a7f0 <xTaskPriorityDisinherit+0xdc>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	693a      	ldr	r2, [r7, #16]
 800a730:	429a      	cmp	r2, r3
 800a732:	d00a      	beq.n	800a74a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a738:	f383 8811 	msr	BASEPRI, r3
 800a73c:	f3bf 8f6f 	isb	sy
 800a740:	f3bf 8f4f 	dsb	sy
 800a744:	60fb      	str	r3, [r7, #12]
}
 800a746:	bf00      	nop
 800a748:	e7fe      	b.n	800a748 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a750:	2b00      	cmp	r3, #0
 800a752:	d10a      	bne.n	800a76a <xTaskPriorityDisinherit+0x56>
	__asm volatile
 800a754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a758:	f383 8811 	msr	BASEPRI, r3
 800a75c:	f3bf 8f6f 	isb	sy
 800a760:	f3bf 8f4f 	dsb	sy
 800a764:	60bb      	str	r3, [r7, #8]
}
 800a766:	bf00      	nop
 800a768:	e7fe      	b.n	800a768 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a770:	1e5a      	subs	r2, r3, #1
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800a782:	429a      	cmp	r2, r3
 800a784:	d02e      	beq.n	800a7e4 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d129      	bne.n	800a7e4 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	3304      	adds	r3, #4
 800a794:	4618      	mov	r0, r3
 800a796:	f7fd ff17 	bl	80085c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7b4:	4b0f      	ldr	r3, [pc, #60]	; (800a7f4 <xTaskPriorityDisinherit+0xe0>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d903      	bls.n	800a7c4 <xTaskPriorityDisinherit+0xb0>
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c0:	4a0c      	ldr	r2, [pc, #48]	; (800a7f4 <xTaskPriorityDisinherit+0xe0>)
 800a7c2:	6013      	str	r3, [r2, #0]
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7c8:	4613      	mov	r3, r2
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	4413      	add	r3, r2
 800a7ce:	009b      	lsls	r3, r3, #2
 800a7d0:	4a09      	ldr	r2, [pc, #36]	; (800a7f8 <xTaskPriorityDisinherit+0xe4>)
 800a7d2:	441a      	add	r2, r3
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	3304      	adds	r3, #4
 800a7d8:	4619      	mov	r1, r3
 800a7da:	4610      	mov	r0, r2
 800a7dc:	f7fd fe97 	bl	800850e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a7e4:	697b      	ldr	r3, [r7, #20]
	}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3718      	adds	r7, #24
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
 800a7ee:	bf00      	nop
 800a7f0:	200073e4 	.word	0x200073e4
 800a7f4:	200078c4 	.word	0x200078c4
 800a7f8:	200073e8 	.word	0x200073e8

0800a7fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a806:	4b24      	ldr	r3, [pc, #144]	; (800a898 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a80c:	4b23      	ldr	r3, [pc, #140]	; (800a89c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	2200      	movs	r2, #0
 800a812:	f883 21ae 	strb.w	r2, [r3, #430]	; 0x1ae
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a816:	4b21      	ldr	r3, [pc, #132]	; (800a89c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	3304      	adds	r3, #4
 800a81c:	4618      	mov	r0, r3
 800a81e:	f7fd fed3 	bl	80085c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a828:	d10a      	bne.n	800a840 <prvAddCurrentTaskToDelayedList+0x44>
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d007      	beq.n	800a840 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a830:	4b1a      	ldr	r3, [pc, #104]	; (800a89c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	3304      	adds	r3, #4
 800a836:	4619      	mov	r1, r3
 800a838:	4819      	ldr	r0, [pc, #100]	; (800a8a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a83a:	f7fd fe68 	bl	800850e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a83e:	e026      	b.n	800a88e <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a840:	68fa      	ldr	r2, [r7, #12]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4413      	add	r3, r2
 800a846:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a848:	4b14      	ldr	r3, [pc, #80]	; (800a89c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	68ba      	ldr	r2, [r7, #8]
 800a84e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a850:	68ba      	ldr	r2, [r7, #8]
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	429a      	cmp	r2, r3
 800a856:	d209      	bcs.n	800a86c <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a858:	4b12      	ldr	r3, [pc, #72]	; (800a8a4 <prvAddCurrentTaskToDelayedList+0xa8>)
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	4b0f      	ldr	r3, [pc, #60]	; (800a89c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	3304      	adds	r3, #4
 800a862:	4619      	mov	r1, r3
 800a864:	4610      	mov	r0, r2
 800a866:	f7fd fe76 	bl	8008556 <vListInsert>
}
 800a86a:	e010      	b.n	800a88e <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a86c:	4b0e      	ldr	r3, [pc, #56]	; (800a8a8 <prvAddCurrentTaskToDelayedList+0xac>)
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	4b0a      	ldr	r3, [pc, #40]	; (800a89c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	3304      	adds	r3, #4
 800a876:	4619      	mov	r1, r3
 800a878:	4610      	mov	r0, r2
 800a87a:	f7fd fe6c 	bl	8008556 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a87e:	4b0b      	ldr	r3, [pc, #44]	; (800a8ac <prvAddCurrentTaskToDelayedList+0xb0>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	68ba      	ldr	r2, [r7, #8]
 800a884:	429a      	cmp	r2, r3
 800a886:	d202      	bcs.n	800a88e <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 800a888:	4a08      	ldr	r2, [pc, #32]	; (800a8ac <prvAddCurrentTaskToDelayedList+0xb0>)
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	6013      	str	r3, [r2, #0]
}
 800a88e:	bf00      	nop
 800a890:	3710      	adds	r7, #16
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop
 800a898:	200078c0 	.word	0x200078c0
 800a89c:	200073e4 	.word	0x200073e4
 800a8a0:	200078a4 	.word	0x200078a4
 800a8a4:	20007874 	.word	0x20007874
 800a8a8:	20007870 	.word	0x20007870
 800a8ac:	200078dc 	.word	0x200078dc

0800a8b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b08a      	sub	sp, #40	; 0x28
 800a8b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a8ba:	f000 fba1 	bl	800b000 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a8be:	4b1c      	ldr	r3, [pc, #112]	; (800a930 <xTimerCreateTimerTask+0x80>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d021      	beq.n	800a90a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a8ce:	1d3a      	adds	r2, r7, #4
 800a8d0:	f107 0108 	add.w	r1, r7, #8
 800a8d4:	f107 030c 	add.w	r3, r7, #12
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f7fd fd6f 	bl	80083bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a8de:	6879      	ldr	r1, [r7, #4]
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	68fa      	ldr	r2, [r7, #12]
 800a8e4:	9202      	str	r2, [sp, #8]
 800a8e6:	9301      	str	r3, [sp, #4]
 800a8e8:	2302      	movs	r3, #2
 800a8ea:	9300      	str	r3, [sp, #0]
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	460a      	mov	r2, r1
 800a8f0:	4910      	ldr	r1, [pc, #64]	; (800a934 <xTimerCreateTimerTask+0x84>)
 800a8f2:	4811      	ldr	r0, [pc, #68]	; (800a938 <xTimerCreateTimerTask+0x88>)
 800a8f4:	f7fe feb0 	bl	8009658 <xTaskCreateStatic>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	4a10      	ldr	r2, [pc, #64]	; (800a93c <xTimerCreateTimerTask+0x8c>)
 800a8fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a8fe:	4b0f      	ldr	r3, [pc, #60]	; (800a93c <xTimerCreateTimerTask+0x8c>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d001      	beq.n	800a90a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a906:	2301      	movs	r3, #1
 800a908:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d10a      	bne.n	800a926 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a914:	f383 8811 	msr	BASEPRI, r3
 800a918:	f3bf 8f6f 	isb	sy
 800a91c:	f3bf 8f4f 	dsb	sy
 800a920:	613b      	str	r3, [r7, #16]
}
 800a922:	bf00      	nop
 800a924:	e7fe      	b.n	800a924 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a926:	697b      	ldr	r3, [r7, #20]
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3718      	adds	r7, #24
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}
 800a930:	20007918 	.word	0x20007918
 800a934:	0800c880 	.word	0x0800c880
 800a938:	0800aba9 	.word	0x0800aba9
 800a93c:	2000791c 	.word	0x2000791c

0800a940 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800a940:	b580      	push	{r7, lr}
 800a942:	b088      	sub	sp, #32
 800a944:	af02      	add	r7, sp, #8
 800a946:	60f8      	str	r0, [r7, #12]
 800a948:	60b9      	str	r1, [r7, #8]
 800a94a:	607a      	str	r2, [r7, #4]
 800a94c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a94e:	202c      	movs	r0, #44	; 0x2c
 800a950:	f7fd fd4e 	bl	80083f0 <pvPortMalloc>
 800a954:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d00d      	beq.n	800a978 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	2200      	movs	r2, #0
 800a960:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	9301      	str	r3, [sp, #4]
 800a968:	6a3b      	ldr	r3, [r7, #32]
 800a96a:	9300      	str	r3, [sp, #0]
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	687a      	ldr	r2, [r7, #4]
 800a970:	68b9      	ldr	r1, [r7, #8]
 800a972:	68f8      	ldr	r0, [r7, #12]
 800a974:	f000 f843 	bl	800a9fe <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a978:	697b      	ldr	r3, [r7, #20]
	}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3718      	adds	r7, #24
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}

0800a982 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800a982:	b580      	push	{r7, lr}
 800a984:	b08a      	sub	sp, #40	; 0x28
 800a986:	af02      	add	r7, sp, #8
 800a988:	60f8      	str	r0, [r7, #12]
 800a98a:	60b9      	str	r1, [r7, #8]
 800a98c:	607a      	str	r2, [r7, #4]
 800a98e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800a990:	232c      	movs	r3, #44	; 0x2c
 800a992:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	2b2c      	cmp	r3, #44	; 0x2c
 800a998:	d00a      	beq.n	800a9b0 <xTimerCreateStatic+0x2e>
	__asm volatile
 800a99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99e:	f383 8811 	msr	BASEPRI, r3
 800a9a2:	f3bf 8f6f 	isb	sy
 800a9a6:	f3bf 8f4f 	dsb	sy
 800a9aa:	61bb      	str	r3, [r7, #24]
}
 800a9ac:	bf00      	nop
 800a9ae:	e7fe      	b.n	800a9ae <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a9b0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800a9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d10a      	bne.n	800a9ce <xTimerCreateStatic+0x4c>
	__asm volatile
 800a9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9bc:	f383 8811 	msr	BASEPRI, r3
 800a9c0:	f3bf 8f6f 	isb	sy
 800a9c4:	f3bf 8f4f 	dsb	sy
 800a9c8:	617b      	str	r3, [r7, #20]
}
 800a9ca:	bf00      	nop
 800a9cc:	e7fe      	b.n	800a9cc <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800a9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d0:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800a9d2:	69fb      	ldr	r3, [r7, #28]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d00d      	beq.n	800a9f4 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800a9d8:	69fb      	ldr	r3, [r7, #28]
 800a9da:	2202      	movs	r2, #2
 800a9dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a9e0:	69fb      	ldr	r3, [r7, #28]
 800a9e2:	9301      	str	r3, [sp, #4]
 800a9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e6:	9300      	str	r3, [sp, #0]
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	687a      	ldr	r2, [r7, #4]
 800a9ec:	68b9      	ldr	r1, [r7, #8]
 800a9ee:	68f8      	ldr	r0, [r7, #12]
 800a9f0:	f000 f805 	bl	800a9fe <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a9f4:	69fb      	ldr	r3, [r7, #28]
	}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3720      	adds	r7, #32
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}

0800a9fe <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b086      	sub	sp, #24
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	60f8      	str	r0, [r7, #12]
 800aa06:	60b9      	str	r1, [r7, #8]
 800aa08:	607a      	str	r2, [r7, #4]
 800aa0a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d10a      	bne.n	800aa28 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800aa12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa16:	f383 8811 	msr	BASEPRI, r3
 800aa1a:	f3bf 8f6f 	isb	sy
 800aa1e:	f3bf 8f4f 	dsb	sy
 800aa22:	617b      	str	r3, [r7, #20]
}
 800aa24:	bf00      	nop
 800aa26:	e7fe      	b.n	800aa26 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800aa28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d01e      	beq.n	800aa6c <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800aa2e:	f000 fae7 	bl	800b000 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800aa32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa34:	68fa      	ldr	r2, [r7, #12]
 800aa36:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800aa38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3a:	68ba      	ldr	r2, [r7, #8]
 800aa3c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800aa3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa40:	683a      	ldr	r2, [r7, #0]
 800aa42:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800aa44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa46:	6a3a      	ldr	r2, [r7, #32]
 800aa48:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800aa4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4c:	3304      	adds	r3, #4
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f7fd fd50 	bl	80084f4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d008      	beq.n	800aa6c <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800aa5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa60:	f043 0304 	orr.w	r3, r3, #4
 800aa64:	b2da      	uxtb	r2, r3
 800aa66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800aa6c:	bf00      	nop
 800aa6e:	3718      	adds	r7, #24
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b08a      	sub	sp, #40	; 0x28
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	60f8      	str	r0, [r7, #12]
 800aa7c:	60b9      	str	r1, [r7, #8]
 800aa7e:	607a      	str	r2, [r7, #4]
 800aa80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aa82:	2300      	movs	r3, #0
 800aa84:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d10a      	bne.n	800aaa2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800aa8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa90:	f383 8811 	msr	BASEPRI, r3
 800aa94:	f3bf 8f6f 	isb	sy
 800aa98:	f3bf 8f4f 	dsb	sy
 800aa9c:	623b      	str	r3, [r7, #32]
}
 800aa9e:	bf00      	nop
 800aaa0:	e7fe      	b.n	800aaa0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aaa2:	4b1a      	ldr	r3, [pc, #104]	; (800ab0c <xTimerGenericCommand+0x98>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d02a      	beq.n	800ab00 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	2b05      	cmp	r3, #5
 800aaba:	dc18      	bgt.n	800aaee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aabc:	f7ff fe0c 	bl	800a6d8 <xTaskGetSchedulerState>
 800aac0:	4603      	mov	r3, r0
 800aac2:	2b02      	cmp	r3, #2
 800aac4:	d109      	bne.n	800aada <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aac6:	4b11      	ldr	r3, [pc, #68]	; (800ab0c <xTimerGenericCommand+0x98>)
 800aac8:	6818      	ldr	r0, [r3, #0]
 800aaca:	f107 0110 	add.w	r1, r7, #16
 800aace:	2300      	movs	r3, #0
 800aad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aad2:	f7fe f9d9 	bl	8008e88 <xQueueGenericSend>
 800aad6:	6278      	str	r0, [r7, #36]	; 0x24
 800aad8:	e012      	b.n	800ab00 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aada:	4b0c      	ldr	r3, [pc, #48]	; (800ab0c <xTimerGenericCommand+0x98>)
 800aadc:	6818      	ldr	r0, [r3, #0]
 800aade:	f107 0110 	add.w	r1, r7, #16
 800aae2:	2300      	movs	r3, #0
 800aae4:	2200      	movs	r2, #0
 800aae6:	f7fe f9cf 	bl	8008e88 <xQueueGenericSend>
 800aaea:	6278      	str	r0, [r7, #36]	; 0x24
 800aaec:	e008      	b.n	800ab00 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aaee:	4b07      	ldr	r3, [pc, #28]	; (800ab0c <xTimerGenericCommand+0x98>)
 800aaf0:	6818      	ldr	r0, [r3, #0]
 800aaf2:	f107 0110 	add.w	r1, r7, #16
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	683a      	ldr	r2, [r7, #0]
 800aafa:	f7fe fac3 	bl	8009084 <xQueueGenericSendFromISR>
 800aafe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ab00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3728      	adds	r7, #40	; 0x28
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	20007918 	.word	0x20007918

0800ab10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b088      	sub	sp, #32
 800ab14:	af02      	add	r7, sp, #8
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab1a:	4b22      	ldr	r3, [pc, #136]	; (800aba4 <prvProcessExpiredTimer+0x94>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	68db      	ldr	r3, [r3, #12]
 800ab20:	68db      	ldr	r3, [r3, #12]
 800ab22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	3304      	adds	r3, #4
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f7fd fd4d 	bl	80085c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab34:	f003 0304 	and.w	r3, r3, #4
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d022      	beq.n	800ab82 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	699a      	ldr	r2, [r3, #24]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	18d1      	adds	r1, r2, r3
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	683a      	ldr	r2, [r7, #0]
 800ab48:	6978      	ldr	r0, [r7, #20]
 800ab4a:	f000 f8d1 	bl	800acf0 <prvInsertTimerInActiveList>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d01f      	beq.n	800ab94 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ab54:	2300      	movs	r3, #0
 800ab56:	9300      	str	r3, [sp, #0]
 800ab58:	2300      	movs	r3, #0
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	2100      	movs	r1, #0
 800ab5e:	6978      	ldr	r0, [r7, #20]
 800ab60:	f7ff ff88 	bl	800aa74 <xTimerGenericCommand>
 800ab64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d113      	bne.n	800ab94 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ab6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab70:	f383 8811 	msr	BASEPRI, r3
 800ab74:	f3bf 8f6f 	isb	sy
 800ab78:	f3bf 8f4f 	dsb	sy
 800ab7c:	60fb      	str	r3, [r7, #12]
}
 800ab7e:	bf00      	nop
 800ab80:	e7fe      	b.n	800ab80 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab88:	f023 0301 	bic.w	r3, r3, #1
 800ab8c:	b2da      	uxtb	r2, r3
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	6a1b      	ldr	r3, [r3, #32]
 800ab98:	6978      	ldr	r0, [r7, #20]
 800ab9a:	4798      	blx	r3
}
 800ab9c:	bf00      	nop
 800ab9e:	3718      	adds	r7, #24
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}
 800aba4:	20007910 	.word	0x20007910

0800aba8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800abb0:	f107 0308 	add.w	r3, r7, #8
 800abb4:	4618      	mov	r0, r3
 800abb6:	f000 f857 	bl	800ac68 <prvGetNextExpireTime>
 800abba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	4619      	mov	r1, r3
 800abc0:	68f8      	ldr	r0, [r7, #12]
 800abc2:	f000 f803 	bl	800abcc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800abc6:	f000 f8d5 	bl	800ad74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800abca:	e7f1      	b.n	800abb0 <prvTimerTask+0x8>

0800abcc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800abd6:	f7ff f8a1 	bl	8009d1c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800abda:	f107 0308 	add.w	r3, r7, #8
 800abde:	4618      	mov	r0, r3
 800abe0:	f000 f866 	bl	800acb0 <prvSampleTimeNow>
 800abe4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d130      	bne.n	800ac4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d10a      	bne.n	800ac08 <prvProcessTimerOrBlockTask+0x3c>
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d806      	bhi.n	800ac08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800abfa:	f7ff f8d5 	bl	8009da8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800abfe:	68f9      	ldr	r1, [r7, #12]
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f7ff ff85 	bl	800ab10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ac06:	e024      	b.n	800ac52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d008      	beq.n	800ac20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ac0e:	4b13      	ldr	r3, [pc, #76]	; (800ac5c <prvProcessTimerOrBlockTask+0x90>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d101      	bne.n	800ac1c <prvProcessTimerOrBlockTask+0x50>
 800ac18:	2301      	movs	r3, #1
 800ac1a:	e000      	b.n	800ac1e <prvProcessTimerOrBlockTask+0x52>
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ac20:	4b0f      	ldr	r3, [pc, #60]	; (800ac60 <prvProcessTimerOrBlockTask+0x94>)
 800ac22:	6818      	ldr	r0, [r3, #0]
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	1ad3      	subs	r3, r2, r3
 800ac2a:	683a      	ldr	r2, [r7, #0]
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	f7fe fcdf 	bl	80095f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ac32:	f7ff f8b9 	bl	8009da8 <xTaskResumeAll>
 800ac36:	4603      	mov	r3, r0
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d10a      	bne.n	800ac52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ac3c:	4b09      	ldr	r3, [pc, #36]	; (800ac64 <prvProcessTimerOrBlockTask+0x98>)
 800ac3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac42:	601a      	str	r2, [r3, #0]
 800ac44:	f3bf 8f4f 	dsb	sy
 800ac48:	f3bf 8f6f 	isb	sy
}
 800ac4c:	e001      	b.n	800ac52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ac4e:	f7ff f8ab 	bl	8009da8 <xTaskResumeAll>
}
 800ac52:	bf00      	nop
 800ac54:	3710      	adds	r7, #16
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}
 800ac5a:	bf00      	nop
 800ac5c:	20007914 	.word	0x20007914
 800ac60:	20007918 	.word	0x20007918
 800ac64:	e000ed04 	.word	0xe000ed04

0800ac68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ac70:	4b0e      	ldr	r3, [pc, #56]	; (800acac <prvGetNextExpireTime+0x44>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d101      	bne.n	800ac7e <prvGetNextExpireTime+0x16>
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	e000      	b.n	800ac80 <prvGetNextExpireTime+0x18>
 800ac7e:	2200      	movs	r2, #0
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d105      	bne.n	800ac98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ac8c:	4b07      	ldr	r3, [pc, #28]	; (800acac <prvGetNextExpireTime+0x44>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	68db      	ldr	r3, [r3, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	60fb      	str	r3, [r7, #12]
 800ac96:	e001      	b.n	800ac9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3714      	adds	r7, #20
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr
 800acaa:	bf00      	nop
 800acac:	20007910 	.word	0x20007910

0800acb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b084      	sub	sp, #16
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800acb8:	f7ff f914 	bl	8009ee4 <xTaskGetTickCount>
 800acbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800acbe:	4b0b      	ldr	r3, [pc, #44]	; (800acec <prvSampleTimeNow+0x3c>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	68fa      	ldr	r2, [r7, #12]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d205      	bcs.n	800acd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800acc8:	f000 f936 	bl	800af38 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2201      	movs	r2, #1
 800acd0:	601a      	str	r2, [r3, #0]
 800acd2:	e002      	b.n	800acda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2200      	movs	r2, #0
 800acd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800acda:	4a04      	ldr	r2, [pc, #16]	; (800acec <prvSampleTimeNow+0x3c>)
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ace0:	68fb      	ldr	r3, [r7, #12]
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3710      	adds	r7, #16
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	20007920 	.word	0x20007920

0800acf0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b086      	sub	sp, #24
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	60f8      	str	r0, [r7, #12]
 800acf8:	60b9      	str	r1, [r7, #8]
 800acfa:	607a      	str	r2, [r7, #4]
 800acfc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800acfe:	2300      	movs	r3, #0
 800ad00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	68ba      	ldr	r2, [r7, #8]
 800ad06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	68fa      	ldr	r2, [r7, #12]
 800ad0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ad0e:	68ba      	ldr	r2, [r7, #8]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d812      	bhi.n	800ad3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	1ad2      	subs	r2, r2, r3
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	699b      	ldr	r3, [r3, #24]
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d302      	bcc.n	800ad2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ad24:	2301      	movs	r3, #1
 800ad26:	617b      	str	r3, [r7, #20]
 800ad28:	e01b      	b.n	800ad62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ad2a:	4b10      	ldr	r3, [pc, #64]	; (800ad6c <prvInsertTimerInActiveList+0x7c>)
 800ad2c:	681a      	ldr	r2, [r3, #0]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	3304      	adds	r3, #4
 800ad32:	4619      	mov	r1, r3
 800ad34:	4610      	mov	r0, r2
 800ad36:	f7fd fc0e 	bl	8008556 <vListInsert>
 800ad3a:	e012      	b.n	800ad62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ad3c:	687a      	ldr	r2, [r7, #4]
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d206      	bcs.n	800ad52 <prvInsertTimerInActiveList+0x62>
 800ad44:	68ba      	ldr	r2, [r7, #8]
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d302      	bcc.n	800ad52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	617b      	str	r3, [r7, #20]
 800ad50:	e007      	b.n	800ad62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ad52:	4b07      	ldr	r3, [pc, #28]	; (800ad70 <prvInsertTimerInActiveList+0x80>)
 800ad54:	681a      	ldr	r2, [r3, #0]
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	3304      	adds	r3, #4
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	4610      	mov	r0, r2
 800ad5e:	f7fd fbfa 	bl	8008556 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ad62:	697b      	ldr	r3, [r7, #20]
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3718      	adds	r7, #24
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}
 800ad6c:	20007914 	.word	0x20007914
 800ad70:	20007910 	.word	0x20007910

0800ad74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b08e      	sub	sp, #56	; 0x38
 800ad78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ad7a:	e0ca      	b.n	800af12 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	da18      	bge.n	800adb4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ad82:	1d3b      	adds	r3, r7, #4
 800ad84:	3304      	adds	r3, #4
 800ad86:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ad88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d10a      	bne.n	800ada4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ad8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad92:	f383 8811 	msr	BASEPRI, r3
 800ad96:	f3bf 8f6f 	isb	sy
 800ad9a:	f3bf 8f4f 	dsb	sy
 800ad9e:	61fb      	str	r3, [r7, #28]
}
 800ada0:	bf00      	nop
 800ada2:	e7fe      	b.n	800ada2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ada4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adaa:	6850      	ldr	r0, [r2, #4]
 800adac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adae:	6892      	ldr	r2, [r2, #8]
 800adb0:	4611      	mov	r1, r2
 800adb2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	f2c0 80aa 	blt.w	800af10 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800adc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc2:	695b      	ldr	r3, [r3, #20]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d004      	beq.n	800add2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800adc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adca:	3304      	adds	r3, #4
 800adcc:	4618      	mov	r0, r3
 800adce:	f7fd fbfb 	bl	80085c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800add2:	463b      	mov	r3, r7
 800add4:	4618      	mov	r0, r3
 800add6:	f7ff ff6b 	bl	800acb0 <prvSampleTimeNow>
 800adda:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2b09      	cmp	r3, #9
 800ade0:	f200 8097 	bhi.w	800af12 <prvProcessReceivedCommands+0x19e>
 800ade4:	a201      	add	r2, pc, #4	; (adr r2, 800adec <prvProcessReceivedCommands+0x78>)
 800ade6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adea:	bf00      	nop
 800adec:	0800ae15 	.word	0x0800ae15
 800adf0:	0800ae15 	.word	0x0800ae15
 800adf4:	0800ae15 	.word	0x0800ae15
 800adf8:	0800ae89 	.word	0x0800ae89
 800adfc:	0800ae9d 	.word	0x0800ae9d
 800ae00:	0800aee7 	.word	0x0800aee7
 800ae04:	0800ae15 	.word	0x0800ae15
 800ae08:	0800ae15 	.word	0x0800ae15
 800ae0c:	0800ae89 	.word	0x0800ae89
 800ae10:	0800ae9d 	.word	0x0800ae9d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ae14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae1a:	f043 0301 	orr.w	r3, r3, #1
 800ae1e:	b2da      	uxtb	r2, r3
 800ae20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ae26:	68ba      	ldr	r2, [r7, #8]
 800ae28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae2a:	699b      	ldr	r3, [r3, #24]
 800ae2c:	18d1      	adds	r1, r2, r3
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae34:	f7ff ff5c 	bl	800acf0 <prvInsertTimerInActiveList>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d069      	beq.n	800af12 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae40:	6a1b      	ldr	r3, [r3, #32]
 800ae42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae4c:	f003 0304 	and.w	r3, r3, #4
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d05e      	beq.n	800af12 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ae54:	68ba      	ldr	r2, [r7, #8]
 800ae56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae58:	699b      	ldr	r3, [r3, #24]
 800ae5a:	441a      	add	r2, r3
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	9300      	str	r3, [sp, #0]
 800ae60:	2300      	movs	r3, #0
 800ae62:	2100      	movs	r1, #0
 800ae64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae66:	f7ff fe05 	bl	800aa74 <xTimerGenericCommand>
 800ae6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ae6c:	6a3b      	ldr	r3, [r7, #32]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d14f      	bne.n	800af12 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ae72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae76:	f383 8811 	msr	BASEPRI, r3
 800ae7a:	f3bf 8f6f 	isb	sy
 800ae7e:	f3bf 8f4f 	dsb	sy
 800ae82:	61bb      	str	r3, [r7, #24]
}
 800ae84:	bf00      	nop
 800ae86:	e7fe      	b.n	800ae86 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae8e:	f023 0301 	bic.w	r3, r3, #1
 800ae92:	b2da      	uxtb	r2, r3
 800ae94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ae9a:	e03a      	b.n	800af12 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ae9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aea2:	f043 0301 	orr.w	r3, r3, #1
 800aea6:	b2da      	uxtb	r2, r3
 800aea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aeae:	68ba      	ldr	r2, [r7, #8]
 800aeb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aeb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb6:	699b      	ldr	r3, [r3, #24]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d10a      	bne.n	800aed2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800aebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec0:	f383 8811 	msr	BASEPRI, r3
 800aec4:	f3bf 8f6f 	isb	sy
 800aec8:	f3bf 8f4f 	dsb	sy
 800aecc:	617b      	str	r3, [r7, #20]
}
 800aece:	bf00      	nop
 800aed0:	e7fe      	b.n	800aed0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed4:	699a      	ldr	r2, [r3, #24]
 800aed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed8:	18d1      	adds	r1, r2, r3
 800aeda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aedc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aede:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aee0:	f7ff ff06 	bl	800acf0 <prvInsertTimerInActiveList>
					break;
 800aee4:	e015      	b.n	800af12 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aeec:	f003 0302 	and.w	r3, r3, #2
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d103      	bne.n	800aefc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800aef4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aef6:	f7fd fac5 	bl	8008484 <vPortFree>
 800aefa:	e00a      	b.n	800af12 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aefc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aefe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af02:	f023 0301 	bic.w	r3, r3, #1
 800af06:	b2da      	uxtb	r2, r3
 800af08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800af0e:	e000      	b.n	800af12 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800af10:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800af12:	4b08      	ldr	r3, [pc, #32]	; (800af34 <prvProcessReceivedCommands+0x1c0>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	1d39      	adds	r1, r7, #4
 800af18:	2200      	movs	r2, #0
 800af1a:	4618      	mov	r0, r3
 800af1c:	f7fe f94e 	bl	80091bc <xQueueReceive>
 800af20:	4603      	mov	r3, r0
 800af22:	2b00      	cmp	r3, #0
 800af24:	f47f af2a 	bne.w	800ad7c <prvProcessReceivedCommands+0x8>
	}
}
 800af28:	bf00      	nop
 800af2a:	bf00      	nop
 800af2c:	3730      	adds	r7, #48	; 0x30
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	20007918 	.word	0x20007918

0800af38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b088      	sub	sp, #32
 800af3c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af3e:	e048      	b.n	800afd2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af40:	4b2d      	ldr	r3, [pc, #180]	; (800aff8 <prvSwitchTimerLists+0xc0>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	68db      	ldr	r3, [r3, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af4a:	4b2b      	ldr	r3, [pc, #172]	; (800aff8 <prvSwitchTimerLists+0xc0>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	68db      	ldr	r3, [r3, #12]
 800af50:	68db      	ldr	r3, [r3, #12]
 800af52:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	3304      	adds	r3, #4
 800af58:	4618      	mov	r0, r3
 800af5a:	f7fd fb35 	bl	80085c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	6a1b      	ldr	r3, [r3, #32]
 800af62:	68f8      	ldr	r0, [r7, #12]
 800af64:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af6c:	f003 0304 	and.w	r3, r3, #4
 800af70:	2b00      	cmp	r3, #0
 800af72:	d02e      	beq.n	800afd2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	699b      	ldr	r3, [r3, #24]
 800af78:	693a      	ldr	r2, [r7, #16]
 800af7a:	4413      	add	r3, r2
 800af7c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800af7e:	68ba      	ldr	r2, [r7, #8]
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	429a      	cmp	r2, r3
 800af84:	d90e      	bls.n	800afa4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	68ba      	ldr	r2, [r7, #8]
 800af8a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	68fa      	ldr	r2, [r7, #12]
 800af90:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800af92:	4b19      	ldr	r3, [pc, #100]	; (800aff8 <prvSwitchTimerLists+0xc0>)
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	3304      	adds	r3, #4
 800af9a:	4619      	mov	r1, r3
 800af9c:	4610      	mov	r0, r2
 800af9e:	f7fd fada 	bl	8008556 <vListInsert>
 800afa2:	e016      	b.n	800afd2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800afa4:	2300      	movs	r3, #0
 800afa6:	9300      	str	r3, [sp, #0]
 800afa8:	2300      	movs	r3, #0
 800afaa:	693a      	ldr	r2, [r7, #16]
 800afac:	2100      	movs	r1, #0
 800afae:	68f8      	ldr	r0, [r7, #12]
 800afb0:	f7ff fd60 	bl	800aa74 <xTimerGenericCommand>
 800afb4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d10a      	bne.n	800afd2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800afbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc0:	f383 8811 	msr	BASEPRI, r3
 800afc4:	f3bf 8f6f 	isb	sy
 800afc8:	f3bf 8f4f 	dsb	sy
 800afcc:	603b      	str	r3, [r7, #0]
}
 800afce:	bf00      	nop
 800afd0:	e7fe      	b.n	800afd0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800afd2:	4b09      	ldr	r3, [pc, #36]	; (800aff8 <prvSwitchTimerLists+0xc0>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d1b1      	bne.n	800af40 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800afdc:	4b06      	ldr	r3, [pc, #24]	; (800aff8 <prvSwitchTimerLists+0xc0>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800afe2:	4b06      	ldr	r3, [pc, #24]	; (800affc <prvSwitchTimerLists+0xc4>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4a04      	ldr	r2, [pc, #16]	; (800aff8 <prvSwitchTimerLists+0xc0>)
 800afe8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800afea:	4a04      	ldr	r2, [pc, #16]	; (800affc <prvSwitchTimerLists+0xc4>)
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	6013      	str	r3, [r2, #0]
}
 800aff0:	bf00      	nop
 800aff2:	3718      	adds	r7, #24
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}
 800aff8:	20007910 	.word	0x20007910
 800affc:	20007914 	.word	0x20007914

0800b000 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b006:	f7fd fc35 	bl	8008874 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b00a:	4b15      	ldr	r3, [pc, #84]	; (800b060 <prvCheckForValidListAndQueue+0x60>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d120      	bne.n	800b054 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b012:	4814      	ldr	r0, [pc, #80]	; (800b064 <prvCheckForValidListAndQueue+0x64>)
 800b014:	f7fd fa4e 	bl	80084b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b018:	4813      	ldr	r0, [pc, #76]	; (800b068 <prvCheckForValidListAndQueue+0x68>)
 800b01a:	f7fd fa4b 	bl	80084b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b01e:	4b13      	ldr	r3, [pc, #76]	; (800b06c <prvCheckForValidListAndQueue+0x6c>)
 800b020:	4a10      	ldr	r2, [pc, #64]	; (800b064 <prvCheckForValidListAndQueue+0x64>)
 800b022:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b024:	4b12      	ldr	r3, [pc, #72]	; (800b070 <prvCheckForValidListAndQueue+0x70>)
 800b026:	4a10      	ldr	r2, [pc, #64]	; (800b068 <prvCheckForValidListAndQueue+0x68>)
 800b028:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b02a:	2300      	movs	r3, #0
 800b02c:	9300      	str	r3, [sp, #0]
 800b02e:	4b11      	ldr	r3, [pc, #68]	; (800b074 <prvCheckForValidListAndQueue+0x74>)
 800b030:	4a11      	ldr	r2, [pc, #68]	; (800b078 <prvCheckForValidListAndQueue+0x78>)
 800b032:	2110      	movs	r1, #16
 800b034:	200a      	movs	r0, #10
 800b036:	f7fd fe8b 	bl	8008d50 <xQueueGenericCreateStatic>
 800b03a:	4603      	mov	r3, r0
 800b03c:	4a08      	ldr	r2, [pc, #32]	; (800b060 <prvCheckForValidListAndQueue+0x60>)
 800b03e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b040:	4b07      	ldr	r3, [pc, #28]	; (800b060 <prvCheckForValidListAndQueue+0x60>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d005      	beq.n	800b054 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b048:	4b05      	ldr	r3, [pc, #20]	; (800b060 <prvCheckForValidListAndQueue+0x60>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	490b      	ldr	r1, [pc, #44]	; (800b07c <prvCheckForValidListAndQueue+0x7c>)
 800b04e:	4618      	mov	r0, r3
 800b050:	f7fe faa4 	bl	800959c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b054:	f7fd fc3e 	bl	80088d4 <vPortExitCritical>
}
 800b058:	bf00      	nop
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}
 800b05e:	bf00      	nop
 800b060:	20007918 	.word	0x20007918
 800b064:	200078e8 	.word	0x200078e8
 800b068:	200078fc 	.word	0x200078fc
 800b06c:	20007910 	.word	0x20007910
 800b070:	20007914 	.word	0x20007914
 800b074:	200079c4 	.word	0x200079c4
 800b078:	20007924 	.word	0x20007924
 800b07c:	0800c888 	.word	0x0800c888

0800b080 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b086      	sub	sp, #24
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d10a      	bne.n	800b0a8 <xTimerIsTimerActive+0x28>
	__asm volatile
 800b092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b096:	f383 8811 	msr	BASEPRI, r3
 800b09a:	f3bf 8f6f 	isb	sy
 800b09e:	f3bf 8f4f 	dsb	sy
 800b0a2:	60fb      	str	r3, [r7, #12]
}
 800b0a4:	bf00      	nop
 800b0a6:	e7fe      	b.n	800b0a6 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800b0a8:	f7fd fbe4 	bl	8008874 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0b2:	f003 0301 	and.w	r3, r3, #1
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d102      	bne.n	800b0c0 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	617b      	str	r3, [r7, #20]
 800b0be:	e001      	b.n	800b0c4 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800b0c4:	f7fd fc06 	bl	80088d4 <vPortExitCritical>

	return xReturn;
 800b0c8:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3718      	adds	r7, #24
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800b0d2:	b580      	push	{r7, lr}
 800b0d4:	b086      	sub	sp, #24
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d10a      	bne.n	800b0fa <pvTimerGetTimerID+0x28>
	__asm volatile
 800b0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e8:	f383 8811 	msr	BASEPRI, r3
 800b0ec:	f3bf 8f6f 	isb	sy
 800b0f0:	f3bf 8f4f 	dsb	sy
 800b0f4:	60fb      	str	r3, [r7, #12]
}
 800b0f6:	bf00      	nop
 800b0f8:	e7fe      	b.n	800b0f8 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800b0fa:	f7fd fbbb 	bl	8008874 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	69db      	ldr	r3, [r3, #28]
 800b102:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800b104:	f7fd fbe6 	bl	80088d4 <vPortExitCritical>

	return pvReturn;
 800b108:	693b      	ldr	r3, [r7, #16]
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3718      	adds	r7, #24
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}

0800b112 <Rte_Runnable_EcuM_MainFunction>:
void Rte_Runnable_Wdg_MainFunction();
void Rte_Runnable_EcuM_MainFunction();
void Rte_Runnable_SystemManager_MainFunction();

void Rte_Runnable_EcuM_MainFunction()
{
 800b112:	b580      	push	{r7, lr}
 800b114:	af00      	add	r7, sp, #0

	EcuM_MainFunction();
 800b116:	f001 f868 	bl	800c1ea <EcuM_MainFunction>

}
 800b11a:	bf00      	nop
 800b11c:	bd80      	pop	{r7, pc}

0800b11e <Rte_Runnable_SystemManager_MainFunction>:

void Rte_Runnable_SystemManager_MainFunction()
{
 800b11e:	b580      	push	{r7, lr}
 800b120:	af00      	add	r7, sp, #0

	SystemManager_MainFunction();
 800b122:	f001 f897 	bl	800c254 <SystemManager_MainFunction>

}
 800b126:	bf00      	nop
 800b128:	bd80      	pop	{r7, pc}

0800b12a <Rte_Runnable_Crc_MainFunction>:

void Rte_Runnable_Crc_MainFunction()
{
 800b12a:	b580      	push	{r7, lr}
 800b12c:	af00      	add	r7, sp, #0

	Crc_MainFunction();
 800b12e:	f000 ff47 	bl	800bfc0 <Crc_MainFunction>

}
 800b132:	bf00      	nop
 800b134:	bd80      	pop	{r7, pc}

0800b136 <Rte_Runnable_Wdg_MainFunction>:

void Rte_Runnable_Wdg_MainFunction()
{
 800b136:	b580      	push	{r7, lr}
 800b138:	af00      	add	r7, sp, #0

	Wdg_MainFunction();
 800b13a:	f001 f9bf 	bl	800c4bc <Wdg_MainFunction>

}
 800b13e:	bf00      	nop
 800b140:	bd80      	pop	{r7, pc}

0800b142 <Rte_Runnable_Adc_MainFunction>:

void Rte_Runnable_Adc_MainFunction()
{
 800b142:	b580      	push	{r7, lr}
 800b144:	af00      	add	r7, sp, #0

	Adc_MainFunction();
 800b146:	f7fc f9cf 	bl	80074e8 <Adc_MainFunction>

}
 800b14a:	bf00      	nop
 800b14c:	bd80      	pop	{r7, pc}

0800b14e <Rte_Runnable_Spi_MainFunction>:

void Rte_Runnable_Spi_MainFunction()
{
 800b14e:	b580      	push	{r7, lr}
 800b150:	af00      	add	r7, sp, #0

	Spi_MainFunction();
 800b152:	f7fc fa55 	bl	8007600 <Spi_MainFunction>

}
 800b156:	bf00      	nop
 800b158:	bd80      	pop	{r7, pc}

0800b15a <Rte_Runnable_Tim_MainFunction>:

void Rte_Runnable_Tim_MainFunction()
{
 800b15a:	b580      	push	{r7, lr}
 800b15c:	af00      	add	r7, sp, #0

	Tim_MainFunction();
 800b15e:	f7fc fdf1 	bl	8007d44 <Tim_MainFunction>

}
 800b162:	bf00      	nop
 800b164:	bd80      	pop	{r7, pc}

0800b166 <Rte_Runnable_Uart_MainFunction>:

void Rte_Runnable_Uart_MainFunction()
{
 800b166:	b580      	push	{r7, lr}
 800b168:	af00      	add	r7, sp, #0

	Uart_MainFunction();
 800b16a:	f7f6 fa61 	bl	8001630 <Uart_MainFunction>

}
 800b16e:	bf00      	nop
 800b170:	bd80      	pop	{r7, pc}
	...

0800b174 <Rte_Write_Btc_BtcPort_Btc_RxData>:

StdReturnType Rte_Write_Btc_BtcPort_Btc_RxData(uint8* data)
{
 800b174:	b480      	push	{r7}
 800b176:	b083      	sub	sp, #12
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d101      	bne.n	800b186 <Rte_Write_Btc_BtcPort_Btc_RxData+0x12>
	{

		return RTE_E_NOT_OK;
 800b182:	2301      	movs	r3, #1
 800b184:	e004      	b.n	800b190 <Rte_Write_Btc_BtcPort_Btc_RxData+0x1c>
		/* do nothing */

	}


	Btc_RxData = *data;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	781a      	ldrb	r2, [r3, #0]
 800b18a:	4b04      	ldr	r3, [pc, #16]	; (800b19c <Rte_Write_Btc_BtcPort_Btc_RxData+0x28>)
 800b18c:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800b18e:	2300      	movs	r3, #0

}
 800b190:	4618      	mov	r0, r3
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr
 800b19c:	20000098 	.word	0x20000098

0800b1a0 <Rte_Write_Btc_BtcPort_Btc_RxCount>:

StdReturnType Rte_Write_Btc_BtcPort_Btc_RxCount(uint8* data)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b083      	sub	sp, #12
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d101      	bne.n	800b1b2 <Rte_Write_Btc_BtcPort_Btc_RxCount+0x12>
	{

		return RTE_E_NOT_OK;
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	e004      	b.n	800b1bc <Rte_Write_Btc_BtcPort_Btc_RxCount+0x1c>
		/* do nothing */

	}


	Btc_RxCount = *data;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	781a      	ldrb	r2, [r3, #0]
 800b1b6:	4b04      	ldr	r3, [pc, #16]	; (800b1c8 <Rte_Write_Btc_BtcPort_Btc_RxCount+0x28>)
 800b1b8:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800b1ba:	2300      	movs	r3, #0

}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	370c      	adds	r7, #12
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr
 800b1c8:	20000099 	.word	0x20000099

0800b1cc <Rte_Write_Btc_BtcPort_Btc_DataBuffer>:

StdReturnType Rte_Write_Btc_BtcPort_Btc_DataBuffer(uint8* data, uint8 position)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b083      	sub	sp, #12
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	70fb      	strb	r3, [r7, #3]

	if(data == NULL_PTR)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d101      	bne.n	800b1e2 <Rte_Write_Btc_BtcPort_Btc_DataBuffer+0x16>
	{

		return RTE_E_NOT_OK;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	e005      	b.n	800b1ee <Rte_Write_Btc_BtcPort_Btc_DataBuffer+0x22>
		/* do nothing */

	}


	Btc_DataBuffer[position] = *data;
 800b1e2:	78fb      	ldrb	r3, [r7, #3]
 800b1e4:	687a      	ldr	r2, [r7, #4]
 800b1e6:	7811      	ldrb	r1, [r2, #0]
 800b1e8:	4a04      	ldr	r2, [pc, #16]	; (800b1fc <Rte_Write_Btc_BtcPort_Btc_DataBuffer+0x30>)
 800b1ea:	54d1      	strb	r1, [r2, r3]

	return RTE_E_OK;
 800b1ec:	2300      	movs	r3, #0

}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	370c      	adds	r7, #12
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr
 800b1fa:	bf00      	nop
 800b1fc:	20000094 	.word	0x20000094

0800b200 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>:

StdReturnType Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(uint32* data, uint8 position)
{
 800b200:	b480      	push	{r7}
 800b202:	b083      	sub	sp, #12
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	460b      	mov	r3, r1
 800b20a:	70fb      	strb	r3, [r7, #3]

	if(data == NULL_PTR)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d101      	bne.n	800b216 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer+0x16>
	{

		return RTE_E_NOT_OK;
 800b212:	2301      	movs	r3, #1
 800b214:	e006      	b.n	800b224 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer+0x24>
		/* do nothing */

	}


	 *data = Adc_ChannelOne_Buffer[position];
 800b216:	78fb      	ldrb	r3, [r7, #3]
 800b218:	4a05      	ldr	r2, [pc, #20]	; (800b230 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer+0x30>)
 800b21a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	601a      	str	r2, [r3, #0]

	return RTE_E_OK;
 800b222:	2300      	movs	r3, #0

}
 800b224:	4618      	mov	r0, r3
 800b226:	370c      	adds	r7, #12
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr
 800b230:	200007ec 	.word	0x200007ec

0800b234 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>:

StdReturnType Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(uint8* data)
{
 800b234:	b480      	push	{r7}
 800b236:	b083      	sub	sp, #12
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d101      	bne.n	800b246 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x12>
	{

		return RTE_E_NOT_OK;
 800b242:	2301      	movs	r3, #1
 800b244:	e004      	b.n	800b250 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x1c>
		/* do nothing */

	}


	Btc_ReceivedDataOnBluetooth = *data;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	781a      	ldrb	r2, [r3, #0]
 800b24a:	4b04      	ldr	r3, [pc, #16]	; (800b25c <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x28>)
 800b24c:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800b24e:	2300      	movs	r3, #0

}
 800b250:	4618      	mov	r0, r3
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr
 800b25c:	2000009a 	.word	0x2000009a

0800b260 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>:

StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(uint8* data)
{
 800b260:	b480      	push	{r7}
 800b262:	b083      	sub	sp, #12
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d101      	bne.n	800b272 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800b26e:	2301      	movs	r3, #1
 800b270:	e004      	b.n	800b27c <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState+0x1c>
		/* do nothing */

	}


	CenLoc_CurrentState = *data;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	781a      	ldrb	r2, [r3, #0]
 800b276:	4b04      	ldr	r3, [pc, #16]	; (800b288 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState+0x28>)
 800b278:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800b27a:	2300      	movs	r3, #0

}
 800b27c:	4618      	mov	r0, r3
 800b27e:	370c      	adds	r7, #12
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr
 800b288:	200000aa 	.word	0x200000aa

0800b28c <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState>:
	return RTE_E_OK;

}

StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState(uint8* data)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b083      	sub	sp, #12
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d101      	bne.n	800b29e <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState+0x12>
	{

		return RTE_E_NOT_OK;
 800b29a:	2301      	movs	r3, #1
 800b29c:	e004      	b.n	800b2a8 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState+0x1c>
		/* do nothing */

	}


	CenLoc_FollowMeHomeState = *data;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	781a      	ldrb	r2, [r3, #0]
 800b2a2:	4b04      	ldr	r3, [pc, #16]	; (800b2b4 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState+0x28>)
 800b2a4:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800b2a6:	2300      	movs	r3, #0

}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	370c      	adds	r7, #12
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr
 800b2b4:	200000ac 	.word	0x200000ac

0800b2b8 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag>:
	return RTE_E_OK;

}

StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag(uint8* data)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b083      	sub	sp, #12
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d101      	bne.n	800b2ca <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	e004      	b.n	800b2d4 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag+0x1c>
		/* do nothing */

	}


	CenLoc_Tim2IRQFlag = *data;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	781a      	ldrb	r2, [r3, #0]
 800b2ce:	4b04      	ldr	r3, [pc, #16]	; (800b2e0 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag+0x28>)
 800b2d0:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800b2d2:	2300      	movs	r3, #0

}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	370c      	adds	r7, #12
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr
 800b2e0:	200000ae 	.word	0x200000ae

0800b2e4 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim3IRQFlag>:

StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_Tim3IRQFlag(uint8* data)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b083      	sub	sp, #12
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d101      	bne.n	800b2f6 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim3IRQFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	e004      	b.n	800b300 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim3IRQFlag+0x1c>
		/* do nothing */

	}


	CenLoc_Tim3IRQFlag = *data;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	781a      	ldrb	r2, [r3, #0]
 800b2fa:	4b04      	ldr	r3, [pc, #16]	; (800b30c <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim3IRQFlag+0x28>)
 800b2fc:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800b2fe:	2300      	movs	r3, #0

}
 800b300:	4618      	mov	r0, r3
 800b302:	370c      	adds	r7, #12
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr
 800b30c:	200000af 	.word	0x200000af

0800b310 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim5IRQFlag>:

StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_Tim5IRQFlag(uint8* data)
{
 800b310:	b480      	push	{r7}
 800b312:	b083      	sub	sp, #12
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d101      	bne.n	800b322 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim5IRQFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800b31e:	2301      	movs	r3, #1
 800b320:	e004      	b.n	800b32c <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim5IRQFlag+0x1c>
		/* do nothing */

	}


	CenLoc_Tim5IRQFlag = *data;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	781a      	ldrb	r2, [r3, #0]
 800b326:	4b04      	ldr	r3, [pc, #16]	; (800b338 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim5IRQFlag+0x28>)
 800b328:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800b32a:	2300      	movs	r3, #0

}
 800b32c:	4618      	mov	r0, r3
 800b32e:	370c      	adds	r7, #12
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	4770      	bx	lr
 800b338:	200000b0 	.word	0x200000b0

0800b33c <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim11IRQFlag>:

StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_Tim11IRQFlag(uint8* data)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b083      	sub	sp, #12
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d101      	bne.n	800b34e <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim11IRQFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800b34a:	2301      	movs	r3, #1
 800b34c:	e004      	b.n	800b358 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim11IRQFlag+0x1c>
		/* do nothing */

	}


	CenLoc_Tim11IRQFlag = *data;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	781a      	ldrb	r2, [r3, #0]
 800b352:	4b04      	ldr	r3, [pc, #16]	; (800b364 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim11IRQFlag+0x28>)
 800b354:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800b356:	2300      	movs	r3, #0

}
 800b358:	4618      	mov	r0, r3
 800b35a:	370c      	adds	r7, #12
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr
 800b364:	200000b1 	.word	0x200000b1

0800b368 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>:
	return RTE_E_OK;

}

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(uint8* data)
{
 800b368:	b480      	push	{r7}
 800b36a:	b083      	sub	sp, #12
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d101      	bne.n	800b37a <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800b376:	2301      	movs	r3, #1
 800b378:	e004      	b.n	800b384 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_ReverseLight_CurrentState = *data;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	781a      	ldrb	r2, [r3, #0]
 800b37e:	4b04      	ldr	r3, [pc, #16]	; (800b390 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState+0x28>)
 800b380:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800b382:	2300      	movs	r3, #0

}
 800b384:	4618      	mov	r0, r3
 800b386:	370c      	adds	r7, #12
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr
 800b390:	200000b3 	.word	0x200000b3

0800b394 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState(uint8* data)
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d101      	bne.n	800b3a6 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	e004      	b.n	800b3b0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_FlashHighBeam_CurrentState = *data;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	781a      	ldrb	r2, [r3, #0]
 800b3aa:	4b04      	ldr	r3, [pc, #16]	; (800b3bc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState+0x28>)
 800b3ac:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800b3ae:	2300      	movs	r3, #0

}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	370c      	adds	r7, #12
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr
 800b3bc:	200000b5 	.word	0x200000b5

0800b3c0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(uint8* data)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d101      	bne.n	800b3d2 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	e004      	b.n	800b3dc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_BrakeLight_CurrentState = *data;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	781a      	ldrb	r2, [r3, #0]
 800b3d6:	4b04      	ldr	r3, [pc, #16]	; (800b3e8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState+0x28>)
 800b3d8:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800b3da:	2300      	movs	r3, #0

}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	370c      	adds	r7, #12
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr
 800b3e8:	200000b4 	.word	0x200000b4

0800b3ec <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(uint8* data)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d101      	bne.n	800b3fe <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	e004      	b.n	800b408 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_LightsSwitch_CurrentState = *data;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	781a      	ldrb	r2, [r3, #0]
 800b402:	4b04      	ldr	r3, [pc, #16]	; (800b414 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState+0x28>)
 800b404:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800b406:	2300      	movs	r3, #0

}
 800b408:	4618      	mov	r0, r3
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr
 800b414:	200000b6 	.word	0x200000b6

0800b418 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(uint8* data)
{
 800b418:	b480      	push	{r7}
 800b41a:	b083      	sub	sp, #12
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d101      	bne.n	800b42a <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800b426:	2301      	movs	r3, #1
 800b428:	e004      	b.n	800b434 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_HighBeam_CurrentState = *data;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	781a      	ldrb	r2, [r3, #0]
 800b42e:	4b04      	ldr	r3, [pc, #16]	; (800b440 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState+0x28>)
 800b430:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800b432:	2300      	movs	r3, #0

}
 800b434:	4618      	mov	r0, r3
 800b436:	370c      	adds	r7, #12
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr
 800b440:	200000b7 	.word	0x200000b7

0800b444 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(uint8* data)
{
 800b444:	b480      	push	{r7}
 800b446:	b083      	sub	sp, #12
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d101      	bne.n	800b456 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800b452:	2301      	movs	r3, #1
 800b454:	e004      	b.n	800b460 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_FrontFogLight_CurrentState = *data;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	781a      	ldrb	r2, [r3, #0]
 800b45a:	4b04      	ldr	r3, [pc, #16]	; (800b46c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState+0x28>)
 800b45c:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800b45e:	2300      	movs	r3, #0

}
 800b460:	4618      	mov	r0, r3
 800b462:	370c      	adds	r7, #12
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr
 800b46c:	200000b8 	.word	0x200000b8

0800b470 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(uint8* data)
{
 800b470:	b480      	push	{r7}
 800b472:	b083      	sub	sp, #12
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d101      	bne.n	800b482 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800b47e:	2301      	movs	r3, #1
 800b480:	e004      	b.n	800b48c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_TurnSignalLeft_CurrentState = *data;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	781a      	ldrb	r2, [r3, #0]
 800b486:	4b04      	ldr	r3, [pc, #16]	; (800b498 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState+0x28>)
 800b488:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800b48a:	2300      	movs	r3, #0

}
 800b48c:	4618      	mov	r0, r3
 800b48e:	370c      	adds	r7, #12
 800b490:	46bd      	mov	sp, r7
 800b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b496:	4770      	bx	lr
 800b498:	200000b9 	.word	0x200000b9

0800b49c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(uint8* data)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b083      	sub	sp, #12
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d101      	bne.n	800b4ae <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	e004      	b.n	800b4b8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_TurnSignalRight_CurrentState = *data;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	781a      	ldrb	r2, [r3, #0]
 800b4b2:	4b04      	ldr	r3, [pc, #16]	; (800b4c4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState+0x28>)
 800b4b4:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800b4b6:	2300      	movs	r3, #0

}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	370c      	adds	r7, #12
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr
 800b4c4:	200000ba 	.word	0x200000ba

0800b4c8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(uint8* data)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b083      	sub	sp, #12
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d101      	bne.n	800b4da <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	e004      	b.n	800b4e4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_HazardLight_CurrentState = *data;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	781a      	ldrb	r2, [r3, #0]
 800b4de:	4b04      	ldr	r3, [pc, #16]	; (800b4f0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState+0x28>)
 800b4e0:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800b4e2:	2300      	movs	r3, #0

}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	370c      	adds	r7, #12
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr
 800b4f0:	200000bb 	.word	0x200000bb

0800b4f4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(uint8* data)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d101      	bne.n	800b506 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800b502:	2301      	movs	r3, #1
 800b504:	e004      	b.n	800b510 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_RearFogLight_CurrentState = *data;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	781a      	ldrb	r2, [r3, #0]
 800b50a:	4b04      	ldr	r3, [pc, #16]	; (800b51c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState+0x28>)
 800b50c:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800b50e:	2300      	movs	r3, #0

}
 800b510:	4618      	mov	r0, r3
 800b512:	370c      	adds	r7, #12
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr
 800b51c:	200000bc 	.word	0x200000bc

0800b520 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag>:
	return RTE_E_OK;

}

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag(uint32* data)
{
 800b520:	b480      	push	{r7}
 800b522:	b083      	sub	sp, #12
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d101      	bne.n	800b532 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800b52e:	2301      	movs	r3, #1
 800b530:	e004      	b.n	800b53c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag+0x1c>
		/* do nothing */

	}


	ExtLights_RTSFlag = *data;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	4a04      	ldr	r2, [pc, #16]	; (800b548 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag+0x28>)
 800b538:	6013      	str	r3, [r2, #0]

	return RTE_E_OK;
 800b53a:	2300      	movs	r3, #0

}
 800b53c:	4618      	mov	r0, r3
 800b53e:	370c      	adds	r7, #12
 800b540:	46bd      	mov	sp, r7
 800b542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b546:	4770      	bx	lr
 800b548:	200000c0 	.word	0x200000c0

0800b54c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag(uint32* data)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b083      	sub	sp, #12
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d101      	bne.n	800b55e <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800b55a:	2301      	movs	r3, #1
 800b55c:	e004      	b.n	800b568 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag+0x1c>
		/* do nothing */

	}


	ExtLights_LTSFlag = *data;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	4a04      	ldr	r2, [pc, #16]	; (800b574 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag+0x28>)
 800b564:	6013      	str	r3, [r2, #0]

	return RTE_E_OK;
 800b566:	2300      	movs	r3, #0

}
 800b568:	4618      	mov	r0, r3
 800b56a:	370c      	adds	r7, #12
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr
 800b574:	200000c4 	.word	0x200000c4

0800b578 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag(uint32* data)
{
 800b578:	b480      	push	{r7}
 800b57a:	b083      	sub	sp, #12
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d101      	bne.n	800b58a <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800b586:	2301      	movs	r3, #1
 800b588:	e004      	b.n	800b594 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag+0x1c>
		/* do nothing */

	}


	ExtLights_HLFlag = *data;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	4a04      	ldr	r2, [pc, #16]	; (800b5a0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag+0x28>)
 800b590:	6013      	str	r3, [r2, #0]

	return RTE_E_OK;
 800b592:	2300      	movs	r3, #0

}
 800b594:	4618      	mov	r0, r3
 800b596:	370c      	adds	r7, #12
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr
 800b5a0:	200000c8 	.word	0x200000c8

0800b5a4 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>:

StdReturnType Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(uint8* data)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d101      	bne.n	800b5b6 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	e004      	b.n	800b5c0 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState+0x1c>
		/* do nothing */

	}


	IntLights_CurrentState = *data;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	781a      	ldrb	r2, [r3, #0]
 800b5ba:	4b04      	ldr	r3, [pc, #16]	; (800b5cc <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState+0x28>)
 800b5bc:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800b5be:	2300      	movs	r3, #0

}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	370c      	adds	r7, #12
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr
 800b5cc:	200000cd 	.word	0x200000cd

0800b5d0 <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4>:
	return RTE_E_OK;

}

StdReturnType Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4(uint8* data)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d101      	bne.n	800b5e2 <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4+0x12>
	{

		return RTE_E_NOT_OK;
 800b5de:	2301      	movs	r3, #1
 800b5e0:	e004      	b.n	800b5ec <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4+0x1c>
		/* do nothing */

	}


	SecAlm_TriggerIRQCounterForTimer4 = *data;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	781a      	ldrb	r2, [r3, #0]
 800b5e6:	4b04      	ldr	r3, [pc, #16]	; (800b5f8 <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4+0x28>)
 800b5e8:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800b5ea:	2300      	movs	r3, #0

}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	370c      	adds	r7, #12
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f6:	4770      	bx	lr
 800b5f8:	200000d0 	.word	0x200000d0

0800b5fc <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter>:

StdReturnType Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter(uint16* data)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d101      	bne.n	800b60e <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter+0x12>
	{

		return RTE_E_NOT_OK;
 800b60a:	2301      	movs	r3, #1
 800b60c:	e004      	b.n	800b618 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter+0x1c>
		/* do nothing */

	}


	SecAlm_SensorStatusCounter = *data;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	881a      	ldrh	r2, [r3, #0]
 800b612:	4b04      	ldr	r3, [pc, #16]	; (800b624 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter+0x28>)
 800b614:	801a      	strh	r2, [r3, #0]

	return RTE_E_OK;
 800b616:	2300      	movs	r3, #0

}
 800b618:	4618      	mov	r0, r3
 800b61a:	370c      	adds	r7, #12
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr
 800b624:	200000d2 	.word	0x200000d2

0800b628 <Rte_Runnable_Btc_MainFunction>:
	return RTE_E_OK;

}

void Rte_Runnable_Btc_MainFunction()
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	af00      	add	r7, sp, #0

	Btc_MainFunction();
 800b62c:	f7f5 f92a 	bl	8000884 <Btc_MainFunction>

}
 800b630:	bf00      	nop
 800b632:	bd80      	pop	{r7, pc}

0800b634 <Rte_Runnable_CenLoc_MainFunction>:

void Rte_Runnable_CenLoc_MainFunction()
{
 800b634:	b580      	push	{r7, lr}
 800b636:	af00      	add	r7, sp, #0

	CenLoc_MainFunction();
 800b638:	f7f5 fb0a 	bl	8000c50 <CenLoc_MainFunction>

}
 800b63c:	bf00      	nop
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <Rte_Runnable_ExtLights_MainFunction>:

void Rte_Runnable_ExtLights_MainFunction()
{
 800b640:	b580      	push	{r7, lr}
 800b642:	af00      	add	r7, sp, #0

	ExtLights_MainFunction();
 800b644:	f7f5 fca0 	bl	8000f88 <ExtLights_MainFunction>

}
 800b648:	bf00      	nop
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <Rte_Runnable_IntLights_MainFunction>:

void Rte_Runnable_IntLights_MainFunction()
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	af00      	add	r7, sp, #0

	IntLights_MainFunction();
 800b650:	f7f5 fe46 	bl	80012e0 <IntLights_MainFunction>

}
 800b654:	bf00      	nop
 800b656:	bd80      	pop	{r7, pc}

0800b658 <Rte_Runnable_SecAlm_MainFunction>:

void Rte_Runnable_SecAlm_MainFunction()
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	af00      	add	r7, sp, #0

	SecAlm_MainFunction();
 800b65c:	f7f5 ff64 	bl	8001528 <SecAlm_MainFunction>

}
 800b660:	bf00      	nop
 800b662:	bd80      	pop	{r7, pc}

0800b664 <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>:

StdReturnType Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(uint8* data)
{
 800b664:	b480      	push	{r7}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d101      	bne.n	800b676 <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x12>
	{

		return RTE_E_NOT_OK;
 800b672:	2301      	movs	r3, #1
 800b674:	e004      	b.n	800b680 <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x1c>
		/* do nothing */

	}


	*data = Btc_ReceivedDataOnBluetooth;
 800b676:	4b05      	ldr	r3, [pc, #20]	; (800b68c <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x28>)
 800b678:	781a      	ldrb	r2, [r3, #0]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800b67e:	2300      	movs	r3, #0

}
 800b680:	4618      	mov	r0, r3
 800b682:	370c      	adds	r7, #12
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr
 800b68c:	2000009a 	.word	0x2000009a

0800b690 <Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT>:
	return RTE_E_OK;

}

StdReturnType Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b084      	sub	sp, #16
 800b694:	af00      	add	r7, sp, #0
 800b696:	60f8      	str	r0, [r7, #12]
 800b698:	60b9      	str	r1, [r7, #8]
 800b69a:	4613      	mov	r3, r2
 800b69c:	80fb      	strh	r3, [r7, #6]

	HAL_UART_Receive_IT(huart, pData, Size);
 800b69e:	88fb      	ldrh	r3, [r7, #6]
 800b6a0:	461a      	mov	r2, r3
 800b6a2:	68b9      	ldr	r1, [r7, #8]
 800b6a4:	68f8      	ldr	r0, [r7, #12]
 800b6a6:	f7fa fec1 	bl	800642c <HAL_UART_Receive_IT>

	return RTE_E_OK;
 800b6aa:	2300      	movs	r3, #0

}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3710      	adds	r7, #16
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init>:

StdReturnType Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b082      	sub	sp, #8
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]

	HAL_TIM_Base_Init(htim);
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f7fa f8e9 	bl	8005894 <HAL_TIM_Base_Init>

	return RTE_E_OK;
 800b6c2:	2300      	movs	r3, #0

}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3708      	adds	r7, #8
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT>:

StdReturnType Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b082      	sub	sp, #8
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]

	HAL_TIM_Base_Start_IT(htim);
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f7fa f939 	bl	800594c <HAL_TIM_Base_Start_IT>

	return RTE_E_OK;
 800b6da:	2300      	movs	r3, #0

}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3708      	adds	r7, #8
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT>:

StdReturnType Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b082      	sub	sp, #8
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]

	HAL_TIM_Base_Stop_IT(htim);
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f7fa f98f 	bl	8005a10 <HAL_TIM_Base_Stop_IT>

	return RTE_E_OK;
 800b6f2:	2300      	movs	r3, #0

}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3708      	adds	r7, #8
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>:

StdReturnType Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b082      	sub	sp, #8
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	460b      	mov	r3, r1
 800b706:	807b      	strh	r3, [r7, #2]
 800b708:	4613      	mov	r3, r2
 800b70a:	707b      	strb	r3, [r7, #1]

	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);
 800b70c:	787a      	ldrb	r2, [r7, #1]
 800b70e:	887b      	ldrh	r3, [r7, #2]
 800b710:	4619      	mov	r1, r3
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f7f8 ff7c 	bl	8004610 <HAL_GPIO_WritePin>

	return RTE_E_OK;
 800b718:	2300      	movs	r3, #0

}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3708      	adds	r7, #8
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}

0800b722 <Rte_Call_ADC_R_ADCPort_HAL_ADC_Start_DMA>:

StdReturnType Rte_Call_ADC_R_ADCPort_HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800b722:	b580      	push	{r7, lr}
 800b724:	b084      	sub	sp, #16
 800b726:	af00      	add	r7, sp, #0
 800b728:	60f8      	str	r0, [r7, #12]
 800b72a:	60b9      	str	r1, [r7, #8]
 800b72c:	607a      	str	r2, [r7, #4]

	HAL_ADC_Start_DMA(hadc, pData, Length);
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	68b9      	ldr	r1, [r7, #8]
 800b732:	68f8      	ldr	r0, [r7, #12]
 800b734:	f7f7 f95c 	bl	80029f0 <HAL_ADC_Start_DMA>

	return RTE_E_OK;
 800b738:	2300      	movs	r3, #0

}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3710      	adds	r7, #16
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}

0800b742 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>:
	return RTE_E_OK;

}

StdReturnType Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(osTimerId_t timer_id, uint32_t ticks)
{
 800b742:	b580      	push	{r7, lr}
 800b744:	b082      	sub	sp, #8
 800b746:	af00      	add	r7, sp, #0
 800b748:	6078      	str	r0, [r7, #4]
 800b74a:	6039      	str	r1, [r7, #0]

	osTimerStart(timer_id, ticks);
 800b74c:	6839      	ldr	r1, [r7, #0]
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f7fc fdb4 	bl	80082bc <osTimerStart>

	return RTE_E_OK;
 800b754:	2300      	movs	r3, #0

}
 800b756:	4618      	mov	r0, r3
 800b758:	3708      	adds	r7, #8
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
	...

0800b760 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_LTSFlag>:

StdReturnType Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_LTSFlag(uint32* data)
{
 800b760:	b480      	push	{r7}
 800b762:	b083      	sub	sp, #12
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d101      	bne.n	800b772 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_LTSFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800b76e:	2301      	movs	r3, #1
 800b770:	e004      	b.n	800b77c <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_LTSFlag+0x1c>
		/* do nothing */

	}


	Timer2Counter_ExtLights_LTSFlag = *data;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	4a04      	ldr	r2, [pc, #16]	; (800b788 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_LTSFlag+0x28>)
 800b778:	6013      	str	r3, [r2, #0]

	return RTE_E_OK;
 800b77a:	2300      	movs	r3, #0


}
 800b77c:	4618      	mov	r0, r3
 800b77e:	370c      	adds	r7, #12
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr
 800b788:	200007f4 	.word	0x200007f4

0800b78c <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_RTSFlag>:
StdReturnType Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_RTSFlag(uint32* data)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b083      	sub	sp, #12
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d101      	bne.n	800b79e <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_RTSFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800b79a:	2301      	movs	r3, #1
 800b79c:	e004      	b.n	800b7a8 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_RTSFlag+0x1c>
		/* do nothing */

	}


	Timer2Counter_ExtLights_RTSFlag  = *data;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	4a04      	ldr	r2, [pc, #16]	; (800b7b4 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_RTSFlag+0x28>)
 800b7a4:	6013      	str	r3, [r2, #0]

	return RTE_E_OK;
 800b7a6:	2300      	movs	r3, #0

}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	370c      	adds	r7, #12
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b2:	4770      	bx	lr
 800b7b4:	200007f8 	.word	0x200007f8

0800b7b8 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_HLFlag>:
StdReturnType Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_HLFlag(uint32* data)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b083      	sub	sp, #12
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d101      	bne.n	800b7ca <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_HLFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	e004      	b.n	800b7d4 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_HLFlag+0x1c>
		/* do nothing */

	}


	Timer2Counter_ExtLights_HLFlag = *data;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	4a04      	ldr	r2, [pc, #16]	; (800b7e0 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_HLFlag+0x28>)
 800b7d0:	6013      	str	r3, [r2, #0]

	return RTE_E_OK;
 800b7d2:	2300      	movs	r3, #0

}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	370c      	adds	r7, #12
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr
 800b7e0:	200007fc 	.word	0x200007fc

0800b7e4 <Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag>:
StdReturnType Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag(uint8* data)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b083      	sub	sp, #12
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d101      	bne.n	800b7f6 <Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	e004      	b.n	800b800 <Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag+0x1c>
		/* do nothing */

	}


	Timer2Counter_CenLoc_Tim2IRQFlag = *data;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	781a      	ldrb	r2, [r3, #0]
 800b7fa:	4b04      	ldr	r3, [pc, #16]	; (800b80c <Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag+0x28>)
 800b7fc:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800b7fe:	2300      	movs	r3, #0

}
 800b800:	4618      	mov	r0, r3
 800b802:	370c      	adds	r7, #12
 800b804:	46bd      	mov	sp, r7
 800b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80a:	4770      	bx	lr
 800b80c:	20000800 	.word	0x20000800

0800b810 <Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag>:
StdReturnType Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag(uint8* data)
{
 800b810:	b480      	push	{r7}
 800b812:	b083      	sub	sp, #12
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d101      	bne.n	800b822 <Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800b81e:	2301      	movs	r3, #1
 800b820:	e004      	b.n	800b82c <Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag+0x1c>
		/* do nothing */

	}


	Timer5Counter_CenLoc_Tim5IRQFlag = *data;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	781a      	ldrb	r2, [r3, #0]
 800b826:	4b04      	ldr	r3, [pc, #16]	; (800b838 <Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag+0x28>)
 800b828:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800b82a:	2300      	movs	r3, #0

}
 800b82c:	4618      	mov	r0, r3
 800b82e:	370c      	adds	r7, #12
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr
 800b838:	20000801 	.word	0x20000801

0800b83c <Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag>:
StdReturnType Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag(uint8* data)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b083      	sub	sp, #12
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d101      	bne.n	800b84e <Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800b84a:	2301      	movs	r3, #1
 800b84c:	e004      	b.n	800b858 <Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag+0x1c>
		/* do nothing */

	}


	Timer3Counter_CenLoc_Tim3IRQFlag = *data;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	781a      	ldrb	r2, [r3, #0]
 800b852:	4b04      	ldr	r3, [pc, #16]	; (800b864 <Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag+0x28>)
 800b854:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800b856:	2300      	movs	r3, #0

}
 800b858:	4618      	mov	r0, r3
 800b85a:	370c      	adds	r7, #12
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr
 800b864:	20000803 	.word	0x20000803

0800b868 <Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag>:
StdReturnType Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag(uint8* data)
{
 800b868:	b480      	push	{r7}
 800b86a:	b083      	sub	sp, #12
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d101      	bne.n	800b87a <Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800b876:	2301      	movs	r3, #1
 800b878:	e004      	b.n	800b884 <Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag+0x1c>
		/* do nothing */

	}


	Timer11Counter_CenLoc_Tim11IRQFlag = *data;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	781a      	ldrb	r2, [r3, #0]
 800b87e:	4b04      	ldr	r3, [pc, #16]	; (800b890 <Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag+0x28>)
 800b880:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800b882:	2300      	movs	r3, #0

}
 800b884:	4618      	mov	r0, r3
 800b886:	370c      	adds	r7, #12
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr
 800b890:	20000802 	.word	0x20000802

0800b894 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>:

StdReturnType Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(osTimerId_t timer_id)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]

	osTimerStop(timer_id);
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f7fc fd3b 	bl	8008318 <osTimerStop>

	return RTE_E_OK;
 800b8a2:	2300      	movs	r3, #0

}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3708      	adds	r7, #8
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <Crc_VerifyUartData>:
void Crc_MainFunction();
void Crc_InitCrcValuesForUart();
void HAL_CRC_ErrorCallback(CRC_HandleTypeDef *hcrc);

StdReturnType Crc_VerifyUartData()
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b084      	sub	sp, #16
 800b8b0:	af00      	add	r7, sp, #0

	uint8 returnValue = E_OK;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	73fb      	strb	r3, [r7, #15]
	uint8 receivedValue = STD_LOW;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	71fb      	strb	r3, [r7, #7]
	uint32 calculatedCrc = STD_LOW;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	60bb      	str	r3, [r7, #8]

	Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(&receivedValue);
 800b8be:	1dfb      	adds	r3, r7, #7
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f7ff fecf 	bl	800b664 <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>

	calculatedCrc = HAL_CRC_Calculate(&hcrc, (uint32*)&receivedValue, 1);
 800b8c6:	1dfb      	adds	r3, r7, #7
 800b8c8:	2201      	movs	r2, #1
 800b8ca:	4619      	mov	r1, r3
 800b8cc:	48a6      	ldr	r0, [pc, #664]	; (800bb68 <Crc_VerifyUartData+0x2bc>)
 800b8ce:	f7f7 fdee 	bl	80034ae <HAL_CRC_Calculate>
 800b8d2:	60b8      	str	r0, [r7, #8]

	switch(receivedValue)
 800b8d4:	79fb      	ldrb	r3, [r7, #7]
 800b8d6:	3b01      	subs	r3, #1
 800b8d8:	2b1c      	cmp	r3, #28
 800b8da:	f200 81ae 	bhi.w	800bc3a <Crc_VerifyUartData+0x38e>
 800b8de:	a201      	add	r2, pc, #4	; (adr r2, 800b8e4 <Crc_VerifyUartData+0x38>)
 800b8e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8e4:	0800ba1f 	.word	0x0800ba1f
 800b8e8:	0800ba35 	.word	0x0800ba35
 800b8ec:	0800ba4b 	.word	0x0800ba4b
 800b8f0:	0800ba61 	.word	0x0800ba61
 800b8f4:	0800ba77 	.word	0x0800ba77
 800b8f8:	0800ba8d 	.word	0x0800ba8d
 800b8fc:	0800baa3 	.word	0x0800baa3
 800b900:	0800bab9 	.word	0x0800bab9
 800b904:	0800bacf 	.word	0x0800bacf
 800b908:	0800bae5 	.word	0x0800bae5
 800b90c:	0800bafb 	.word	0x0800bafb
 800b910:	0800bb11 	.word	0x0800bb11
 800b914:	0800bb27 	.word	0x0800bb27
 800b918:	0800bb3d 	.word	0x0800bb3d
 800b91c:	0800bb53 	.word	0x0800bb53
 800b920:	0800bbcd 	.word	0x0800bbcd
 800b924:	0800bbe3 	.word	0x0800bbe3
 800b928:	0800bbf9 	.word	0x0800bbf9
 800b92c:	0800bc0f 	.word	0x0800bc0f
 800b930:	0800bc25 	.word	0x0800bc25
 800b934:	0800b99b 	.word	0x0800b99b
 800b938:	0800b9b1 	.word	0x0800b9b1
 800b93c:	0800b9c7 	.word	0x0800b9c7
 800b940:	0800b9dd 	.word	0x0800b9dd
 800b944:	0800b9f3 	.word	0x0800b9f3
 800b948:	0800ba09 	.word	0x0800ba09
 800b94c:	0800b959 	.word	0x0800b959
 800b950:	0800b96f 	.word	0x0800b96f
 800b954:	0800b985 	.word	0x0800b985
	{

		case RTE_P_BTC_RX_IGNITION_STEP_ONE:

			if(calculatedCrc == Crc_Ignition_Step_One)
 800b958:	4b84      	ldr	r3, [pc, #528]	; (800bb6c <Crc_VerifyUartData+0x2c0>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	68ba      	ldr	r2, [r7, #8]
 800b95e:	429a      	cmp	r2, r3
 800b960:	d102      	bne.n	800b968 <Crc_VerifyUartData+0xbc>
			{

				returnValue = E_OK;
 800b962:	2300      	movs	r3, #0
 800b964:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800b966:	e169      	b.n	800bc3c <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800b968:	2301      	movs	r3, #1
 800b96a:	73fb      	strb	r3, [r7, #15]
			break;
 800b96c:	e166      	b.n	800bc3c <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_IGNITION_STEP_TWO:

			if(calculatedCrc == Crc_Ignition_Step_Two)
 800b96e:	4b80      	ldr	r3, [pc, #512]	; (800bb70 <Crc_VerifyUartData+0x2c4>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	68ba      	ldr	r2, [r7, #8]
 800b974:	429a      	cmp	r2, r3
 800b976:	d102      	bne.n	800b97e <Crc_VerifyUartData+0xd2>
			{

				returnValue = E_OK;
 800b978:	2300      	movs	r3, #0
 800b97a:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800b97c:	e15e      	b.n	800bc3c <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800b97e:	2301      	movs	r3, #1
 800b980:	73fb      	strb	r3, [r7, #15]
			break;
 800b982:	e15b      	b.n	800bc3c <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_IGNITION_TURN_OFF:

			if(calculatedCrc == Crc_Ignition_Turn_Off)
 800b984:	4b7b      	ldr	r3, [pc, #492]	; (800bb74 <Crc_VerifyUartData+0x2c8>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	68ba      	ldr	r2, [r7, #8]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d102      	bne.n	800b994 <Crc_VerifyUartData+0xe8>
			{

				returnValue = E_OK;
 800b98e:	2300      	movs	r3, #0
 800b990:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800b992:	e153      	b.n	800bc3c <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800b994:	2301      	movs	r3, #1
 800b996:	73fb      	strb	r3, [r7, #15]
			break;
 800b998:	e150      	b.n	800bc3c <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_ON:

			if(calculatedCrc == Crc_ExtLights_ReverseLight_On)
 800b99a:	4b77      	ldr	r3, [pc, #476]	; (800bb78 <Crc_VerifyUartData+0x2cc>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	68ba      	ldr	r2, [r7, #8]
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d102      	bne.n	800b9aa <Crc_VerifyUartData+0xfe>
			{

				returnValue = E_OK;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800b9a8:	e148      	b.n	800bc3c <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	73fb      	strb	r3, [r7, #15]
			break;
 800b9ae:	e145      	b.n	800bc3c <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF:

			if(calculatedCrc == Crc_ExtLights_ReverseLight_Off)
 800b9b0:	4b72      	ldr	r3, [pc, #456]	; (800bb7c <Crc_VerifyUartData+0x2d0>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	68ba      	ldr	r2, [r7, #8]
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d102      	bne.n	800b9c0 <Crc_VerifyUartData+0x114>
			{

				returnValue = E_OK;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800b9be:	e13d      	b.n	800bc3c <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	73fb      	strb	r3, [r7, #15]
			break;
 800b9c4:	e13a      	b.n	800bc3c <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_POSITIONZERO:

			if(calculatedCrc == Crc_ExtLights_PositionZero)
 800b9c6:	4b6e      	ldr	r3, [pc, #440]	; (800bb80 <Crc_VerifyUartData+0x2d4>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	68ba      	ldr	r2, [r7, #8]
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	d102      	bne.n	800b9d6 <Crc_VerifyUartData+0x12a>
			{

				returnValue = E_OK;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800b9d4:	e132      	b.n	800bc3c <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	73fb      	strb	r3, [r7, #15]
			break;
 800b9da:	e12f      	b.n	800bc3c <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:

			if(calculatedCrc == Crc_ExtLights_AutomaticLights)
 800b9dc:	4b69      	ldr	r3, [pc, #420]	; (800bb84 <Crc_VerifyUartData+0x2d8>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	68ba      	ldr	r2, [r7, #8]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d102      	bne.n	800b9ec <Crc_VerifyUartData+0x140>
			{

				returnValue = E_OK;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800b9ea:	e127      	b.n	800bc3c <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	73fb      	strb	r3, [r7, #15]
			break;
 800b9f0:	e124      	b.n	800bc3c <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_POSITIONLIGHTS:

			if(calculatedCrc == Crc_ExtLights_PositionLights)
 800b9f2:	4b65      	ldr	r3, [pc, #404]	; (800bb88 <Crc_VerifyUartData+0x2dc>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	68ba      	ldr	r2, [r7, #8]
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d102      	bne.n	800ba02 <Crc_VerifyUartData+0x156>
			{

				returnValue = E_OK;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800ba00:	e11c      	b.n	800bc3c <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800ba02:	2301      	movs	r3, #1
 800ba04:	73fb      	strb	r3, [r7, #15]
			break;
 800ba06:	e119      	b.n	800bc3c <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:

			if(calculatedCrc == Crc_ExtLights_NightTimeLights)
 800ba08:	4b60      	ldr	r3, [pc, #384]	; (800bb8c <Crc_VerifyUartData+0x2e0>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	68ba      	ldr	r2, [r7, #8]
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d102      	bne.n	800ba18 <Crc_VerifyUartData+0x16c>
			{

				returnValue = E_OK;
 800ba12:	2300      	movs	r3, #0
 800ba14:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800ba16:	e111      	b.n	800bc3c <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800ba18:	2301      	movs	r3, #1
 800ba1a:	73fb      	strb	r3, [r7, #15]
			break;
 800ba1c:	e10e      	b.n	800bc3c <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_CENLOC_ON:

			if(calculatedCrc == Crc_CenLoc_On)
 800ba1e:	4b5c      	ldr	r3, [pc, #368]	; (800bb90 <Crc_VerifyUartData+0x2e4>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	68ba      	ldr	r2, [r7, #8]
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d102      	bne.n	800ba2e <Crc_VerifyUartData+0x182>
			{

				returnValue = E_OK;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800ba2c:	e106      	b.n	800bc3c <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800ba2e:	2301      	movs	r3, #1
 800ba30:	73fb      	strb	r3, [r7, #15]
			break;
 800ba32:	e103      	b.n	800bc3c <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_CENLOC_OFF:

			if(calculatedCrc == Crc_CenLoc_Off)
 800ba34:	4b57      	ldr	r3, [pc, #348]	; (800bb94 <Crc_VerifyUartData+0x2e8>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	68ba      	ldr	r2, [r7, #8]
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d102      	bne.n	800ba44 <Crc_VerifyUartData+0x198>
			{

				returnValue = E_OK;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800ba42:	e0fb      	b.n	800bc3c <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800ba44:	2301      	movs	r3, #1
 800ba46:	73fb      	strb	r3, [r7, #15]
			break;
 800ba48:	e0f8      	b.n	800bc3c <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_ON:

			if(calculatedCrc == Crc_ExtLights_HighBeam_On)
 800ba4a:	4b53      	ldr	r3, [pc, #332]	; (800bb98 <Crc_VerifyUartData+0x2ec>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	68ba      	ldr	r2, [r7, #8]
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d102      	bne.n	800ba5a <Crc_VerifyUartData+0x1ae>
			{

				returnValue = E_OK;
 800ba54:	2300      	movs	r3, #0
 800ba56:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800ba58:	e0f0      	b.n	800bc3c <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	73fb      	strb	r3, [r7, #15]
			break;
 800ba5e:	e0ed      	b.n	800bc3c <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_OFF:

			if(calculatedCrc == Crc_ExtLights_HighBeam_Off)
 800ba60:	4b4e      	ldr	r3, [pc, #312]	; (800bb9c <Crc_VerifyUartData+0x2f0>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	68ba      	ldr	r2, [r7, #8]
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d102      	bne.n	800ba70 <Crc_VerifyUartData+0x1c4>
			{

				returnValue = E_OK;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800ba6e:	e0e5      	b.n	800bc3c <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800ba70:	2301      	movs	r3, #1
 800ba72:	73fb      	strb	r3, [r7, #15]
			break;
 800ba74:	e0e2      	b.n	800bc3c <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_ON:

			if(calculatedCrc == Crc_ExtLights_FlashHighBeam_On)
 800ba76:	4b4a      	ldr	r3, [pc, #296]	; (800bba0 <Crc_VerifyUartData+0x2f4>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	68ba      	ldr	r2, [r7, #8]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d102      	bne.n	800ba86 <Crc_VerifyUartData+0x1da>
			{

				returnValue = E_OK;
 800ba80:	2300      	movs	r3, #0
 800ba82:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800ba84:	e0da      	b.n	800bc3c <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800ba86:	2301      	movs	r3, #1
 800ba88:	73fb      	strb	r3, [r7, #15]
			break;
 800ba8a:	e0d7      	b.n	800bc3c <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_OFF:

			if(calculatedCrc == Crc_ExtLights_FlashHighBeam_Off)
 800ba8c:	4b45      	ldr	r3, [pc, #276]	; (800bba4 <Crc_VerifyUartData+0x2f8>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	68ba      	ldr	r2, [r7, #8]
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d102      	bne.n	800ba9c <Crc_VerifyUartData+0x1f0>
			{

				returnValue = E_OK;
 800ba96:	2300      	movs	r3, #0
 800ba98:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800ba9a:	e0cf      	b.n	800bc3c <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	73fb      	strb	r3, [r7, #15]
			break;
 800baa0:	e0cc      	b.n	800bc3c <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:

			if(calculatedCrc == Crc_ExtLights_TurnSignalLeft_On)
 800baa2:	4b41      	ldr	r3, [pc, #260]	; (800bba8 <Crc_VerifyUartData+0x2fc>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	68ba      	ldr	r2, [r7, #8]
 800baa8:	429a      	cmp	r2, r3
 800baaa:	d102      	bne.n	800bab2 <Crc_VerifyUartData+0x206>
			{

				returnValue = E_OK;
 800baac:	2300      	movs	r3, #0
 800baae:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800bab0:	e0c4      	b.n	800bc3c <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800bab2:	2301      	movs	r3, #1
 800bab4:	73fb      	strb	r3, [r7, #15]
			break;
 800bab6:	e0c1      	b.n	800bc3c <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:

			if(calculatedCrc == Crc_ExtLights_TurnSignalLeft_Off)
 800bab8:	4b3c      	ldr	r3, [pc, #240]	; (800bbac <Crc_VerifyUartData+0x300>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	68ba      	ldr	r2, [r7, #8]
 800babe:	429a      	cmp	r2, r3
 800bac0:	d102      	bne.n	800bac8 <Crc_VerifyUartData+0x21c>
			{

				returnValue = E_OK;
 800bac2:	2300      	movs	r3, #0
 800bac4:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800bac6:	e0b9      	b.n	800bc3c <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800bac8:	2301      	movs	r3, #1
 800baca:	73fb      	strb	r3, [r7, #15]
			break;
 800bacc:	e0b6      	b.n	800bc3c <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON:

			if(calculatedCrc == Crc_ExtLights_TurnSignalRight_On)
 800bace:	4b38      	ldr	r3, [pc, #224]	; (800bbb0 <Crc_VerifyUartData+0x304>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	68ba      	ldr	r2, [r7, #8]
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d102      	bne.n	800bade <Crc_VerifyUartData+0x232>
			{

				returnValue = E_OK;
 800bad8:	2300      	movs	r3, #0
 800bada:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800badc:	e0ae      	b.n	800bc3c <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800bade:	2301      	movs	r3, #1
 800bae0:	73fb      	strb	r3, [r7, #15]
			break;
 800bae2:	e0ab      	b.n	800bc3c <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF:

			if(calculatedCrc == Crc_ExtLights_TurnSignalRight_Off)
 800bae4:	4b33      	ldr	r3, [pc, #204]	; (800bbb4 <Crc_VerifyUartData+0x308>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	68ba      	ldr	r2, [r7, #8]
 800baea:	429a      	cmp	r2, r3
 800baec:	d102      	bne.n	800baf4 <Crc_VerifyUartData+0x248>
			{

				returnValue = E_OK;
 800baee:	2300      	movs	r3, #0
 800baf0:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800baf2:	e0a3      	b.n	800bc3c <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800baf4:	2301      	movs	r3, #1
 800baf6:	73fb      	strb	r3, [r7, #15]
			break;
 800baf8:	e0a0      	b.n	800bc3c <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:

			if(calculatedCrc == Crc_ExtLights_HazardLight_On)
 800bafa:	4b2f      	ldr	r3, [pc, #188]	; (800bbb8 <Crc_VerifyUartData+0x30c>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	68ba      	ldr	r2, [r7, #8]
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d102      	bne.n	800bb0a <Crc_VerifyUartData+0x25e>
			{

				returnValue = E_OK;
 800bb04:	2300      	movs	r3, #0
 800bb06:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800bb08:	e098      	b.n	800bc3c <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	73fb      	strb	r3, [r7, #15]
			break;
 800bb0e:	e095      	b.n	800bc3c <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:

			if(calculatedCrc == Crc_ExtLights_HazardLight_Off)
 800bb10:	4b2a      	ldr	r3, [pc, #168]	; (800bbbc <Crc_VerifyUartData+0x310>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	68ba      	ldr	r2, [r7, #8]
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d102      	bne.n	800bb20 <Crc_VerifyUartData+0x274>
			{

				returnValue = E_OK;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800bb1e:	e08d      	b.n	800bc3c <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800bb20:	2301      	movs	r3, #1
 800bb22:	73fb      	strb	r3, [r7, #15]
			break;
 800bb24:	e08a      	b.n	800bc3c <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:

			if(calculatedCrc == Crc_ExtLights_FogLightFront_On)
 800bb26:	4b26      	ldr	r3, [pc, #152]	; (800bbc0 <Crc_VerifyUartData+0x314>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	68ba      	ldr	r2, [r7, #8]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d102      	bne.n	800bb36 <Crc_VerifyUartData+0x28a>
			{

				returnValue = E_OK;
 800bb30:	2300      	movs	r3, #0
 800bb32:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800bb34:	e082      	b.n	800bc3c <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800bb36:	2301      	movs	r3, #1
 800bb38:	73fb      	strb	r3, [r7, #15]
			break;
 800bb3a:	e07f      	b.n	800bc3c <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:

			if(calculatedCrc == Crc_ExtLights_FogLightFront_Off)
 800bb3c:	4b21      	ldr	r3, [pc, #132]	; (800bbc4 <Crc_VerifyUartData+0x318>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	68ba      	ldr	r2, [r7, #8]
 800bb42:	429a      	cmp	r2, r3
 800bb44:	d102      	bne.n	800bb4c <Crc_VerifyUartData+0x2a0>
			{

				returnValue = E_OK;
 800bb46:	2300      	movs	r3, #0
 800bb48:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800bb4a:	e077      	b.n	800bc3c <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	73fb      	strb	r3, [r7, #15]
			break;
 800bb50:	e074      	b.n	800bc3c <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:

			if(calculatedCrc == Crc_ExtLights_FogLightRear_On)
 800bb52:	4b1d      	ldr	r3, [pc, #116]	; (800bbc8 <Crc_VerifyUartData+0x31c>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	68ba      	ldr	r2, [r7, #8]
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	d102      	bne.n	800bb62 <Crc_VerifyUartData+0x2b6>
			{

				returnValue = E_OK;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800bb60:	e06c      	b.n	800bc3c <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800bb62:	2301      	movs	r3, #1
 800bb64:	73fb      	strb	r3, [r7, #15]
			break;
 800bb66:	e069      	b.n	800bc3c <Crc_VerifyUartData+0x390>
 800bb68:	2000019c 	.word	0x2000019c
 800bb6c:	20007a74 	.word	0x20007a74
 800bb70:	20007a78 	.word	0x20007a78
 800bb74:	20007a7c 	.word	0x20007a7c
 800bb78:	20007a5c 	.word	0x20007a5c
 800bb7c:	20007a60 	.word	0x20007a60
 800bb80:	20007a64 	.word	0x20007a64
 800bb84:	20007a68 	.word	0x20007a68
 800bb88:	20007a6c 	.word	0x20007a6c
 800bb8c:	20007a70 	.word	0x20007a70
 800bb90:	20007a14 	.word	0x20007a14
 800bb94:	20007a18 	.word	0x20007a18
 800bb98:	20007a1c 	.word	0x20007a1c
 800bb9c:	20007a20 	.word	0x20007a20
 800bba0:	20007a24 	.word	0x20007a24
 800bba4:	20007a28 	.word	0x20007a28
 800bba8:	20007a2c 	.word	0x20007a2c
 800bbac:	20007a30 	.word	0x20007a30
 800bbb0:	20007a34 	.word	0x20007a34
 800bbb4:	20007a38 	.word	0x20007a38
 800bbb8:	20007a3c 	.word	0x20007a3c
 800bbbc:	20007a40 	.word	0x20007a40
 800bbc0:	20007a44 	.word	0x20007a44
 800bbc4:	20007a48 	.word	0x20007a48
 800bbc8:	20007a4c 	.word	0x20007a4c

		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:

			if(calculatedCrc == Crc_ExtLights_FogLightRear_Off)
 800bbcc:	4b1e      	ldr	r3, [pc, #120]	; (800bc48 <Crc_VerifyUartData+0x39c>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	68ba      	ldr	r2, [r7, #8]
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d102      	bne.n	800bbdc <Crc_VerifyUartData+0x330>
			{

				returnValue = E_OK;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800bbda:	e02f      	b.n	800bc3c <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800bbdc:	2301      	movs	r3, #1
 800bbde:	73fb      	strb	r3, [r7, #15]
			break;
 800bbe0:	e02c      	b.n	800bc3c <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTON:

			if(calculatedCrc == Crc_ExtLights_BrakeLight_On)
 800bbe2:	4b1a      	ldr	r3, [pc, #104]	; (800bc4c <Crc_VerifyUartData+0x3a0>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	68ba      	ldr	r2, [r7, #8]
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d102      	bne.n	800bbf2 <Crc_VerifyUartData+0x346>
						{

							returnValue = E_OK;
 800bbec:	2300      	movs	r3, #0
 800bbee:	73fb      	strb	r3, [r7, #15]

							returnValue = E_NOT_OK;

						}

			break;
 800bbf0:	e024      	b.n	800bc3c <Crc_VerifyUartData+0x390>
							returnValue = E_NOT_OK;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	73fb      	strb	r3, [r7, #15]
			break;
 800bbf6:	e021      	b.n	800bc3c <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:

			if(calculatedCrc == Crc_ExtLights_BrakeLight_Off)
 800bbf8:	4b15      	ldr	r3, [pc, #84]	; (800bc50 <Crc_VerifyUartData+0x3a4>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	68ba      	ldr	r2, [r7, #8]
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d102      	bne.n	800bc08 <Crc_VerifyUartData+0x35c>
			{

				returnValue = E_OK;
 800bc02:	2300      	movs	r3, #0
 800bc04:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800bc06:	e019      	b.n	800bc3c <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800bc08:	2301      	movs	r3, #1
 800bc0a:	73fb      	strb	r3, [r7, #15]
			break;
 800bc0c:	e016      	b.n	800bc3c <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:

			if(calculatedCrc == Crc_IntLights_InteriorLight_On)
 800bc0e:	4b11      	ldr	r3, [pc, #68]	; (800bc54 <Crc_VerifyUartData+0x3a8>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	68ba      	ldr	r2, [r7, #8]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d102      	bne.n	800bc1e <Crc_VerifyUartData+0x372>
			{

				returnValue = E_OK;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800bc1c:	e00e      	b.n	800bc3c <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800bc1e:	2301      	movs	r3, #1
 800bc20:	73fb      	strb	r3, [r7, #15]
			break;
 800bc22:	e00b      	b.n	800bc3c <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:

			if(calculatedCrc == Crc_IntLights_InteriorLights_Off)
 800bc24:	4b0c      	ldr	r3, [pc, #48]	; (800bc58 <Crc_VerifyUartData+0x3ac>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	68ba      	ldr	r2, [r7, #8]
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d102      	bne.n	800bc34 <Crc_VerifyUartData+0x388>
			{

				returnValue = E_OK;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800bc32:	e003      	b.n	800bc3c <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800bc34:	2301      	movs	r3, #1
 800bc36:	73fb      	strb	r3, [r7, #15]
			break;
 800bc38:	e000      	b.n	800bc3c <Crc_VerifyUartData+0x390>

		default:

			break;
 800bc3a:	bf00      	nop

	}

	return returnValue;
 800bc3c:	7bfb      	ldrb	r3, [r7, #15]

}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3710      	adds	r7, #16
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
 800bc46:	bf00      	nop
 800bc48:	20007a50 	.word	0x20007a50
 800bc4c:	20007a54 	.word	0x20007a54
 800bc50:	20007a58 	.word	0x20007a58
 800bc54:	20007a80 	.word	0x20007a80
 800bc58:	20007a84 	.word	0x20007a84

0800bc5c <Crc_InitCrcValuesForUart>:

void Crc_InitCrcValuesForUart()
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b082      	sub	sp, #8
 800bc60:	af00      	add	r7, sp, #0

	uint32 value = 0;
 800bc62:	2300      	movs	r3, #0
 800bc64:	607b      	str	r3, [r7, #4]

	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON;
 800bc66:	230f      	movs	r3, #15
 800bc68:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightRear_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800bc6a:	1d3b      	adds	r3, r7, #4
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	4619      	mov	r1, r3
 800bc70:	489e      	ldr	r0, [pc, #632]	; (800beec <Crc_InitCrcValuesForUart+0x290>)
 800bc72:	f7f7 fc1c 	bl	80034ae <HAL_CRC_Calculate>
 800bc76:	4603      	mov	r3, r0
 800bc78:	4a9d      	ldr	r2, [pc, #628]	; (800bef0 <Crc_InitCrcValuesForUart+0x294>)
 800bc7a:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF;
 800bc7c:	2310      	movs	r3, #16
 800bc7e:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightRear_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800bc80:	1d3b      	adds	r3, r7, #4
 800bc82:	2201      	movs	r2, #1
 800bc84:	4619      	mov	r1, r3
 800bc86:	4899      	ldr	r0, [pc, #612]	; (800beec <Crc_InitCrcValuesForUart+0x290>)
 800bc88:	f7f7 fc11 	bl	80034ae <HAL_CRC_Calculate>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	4a99      	ldr	r2, [pc, #612]	; (800bef4 <Crc_InitCrcValuesForUart+0x298>)
 800bc90:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_CENLOC_ON;
 800bc92:	2301      	movs	r3, #1
 800bc94:	607b      	str	r3, [r7, #4]
	Crc_CenLoc_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800bc96:	1d3b      	adds	r3, r7, #4
 800bc98:	2201      	movs	r2, #1
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	4893      	ldr	r0, [pc, #588]	; (800beec <Crc_InitCrcValuesForUart+0x290>)
 800bc9e:	f7f7 fc06 	bl	80034ae <HAL_CRC_Calculate>
 800bca2:	4603      	mov	r3, r0
 800bca4:	4a94      	ldr	r2, [pc, #592]	; (800bef8 <Crc_InitCrcValuesForUart+0x29c>)
 800bca6:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_CENLOC_OFF;
 800bca8:	2302      	movs	r3, #2
 800bcaa:	607b      	str	r3, [r7, #4]
	Crc_CenLoc_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800bcac:	1d3b      	adds	r3, r7, #4
 800bcae:	2201      	movs	r2, #1
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	488e      	ldr	r0, [pc, #568]	; (800beec <Crc_InitCrcValuesForUart+0x290>)
 800bcb4:	f7f7 fbfb 	bl	80034ae <HAL_CRC_Calculate>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	4a90      	ldr	r2, [pc, #576]	; (800befc <Crc_InitCrcValuesForUart+0x2a0>)
 800bcbc:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_ON;
 800bcbe:	2303      	movs	r3, #3
 800bcc0:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HighBeam_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800bcc2:	1d3b      	adds	r3, r7, #4
 800bcc4:	2201      	movs	r2, #1
 800bcc6:	4619      	mov	r1, r3
 800bcc8:	4888      	ldr	r0, [pc, #544]	; (800beec <Crc_InitCrcValuesForUart+0x290>)
 800bcca:	f7f7 fbf0 	bl	80034ae <HAL_CRC_Calculate>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	4a8b      	ldr	r2, [pc, #556]	; (800bf00 <Crc_InitCrcValuesForUart+0x2a4>)
 800bcd2:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_OFF;
 800bcd4:	2304      	movs	r3, #4
 800bcd6:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HighBeam_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800bcd8:	1d3b      	adds	r3, r7, #4
 800bcda:	2201      	movs	r2, #1
 800bcdc:	4619      	mov	r1, r3
 800bcde:	4883      	ldr	r0, [pc, #524]	; (800beec <Crc_InitCrcValuesForUart+0x290>)
 800bce0:	f7f7 fbe5 	bl	80034ae <HAL_CRC_Calculate>
 800bce4:	4603      	mov	r3, r0
 800bce6:	4a87      	ldr	r2, [pc, #540]	; (800bf04 <Crc_InitCrcValuesForUart+0x2a8>)
 800bce8:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_ON;
 800bcea:	2305      	movs	r3, #5
 800bcec:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FlashHighBeam_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800bcee:	1d3b      	adds	r3, r7, #4
 800bcf0:	2201      	movs	r2, #1
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	487d      	ldr	r0, [pc, #500]	; (800beec <Crc_InitCrcValuesForUart+0x290>)
 800bcf6:	f7f7 fbda 	bl	80034ae <HAL_CRC_Calculate>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	4a82      	ldr	r2, [pc, #520]	; (800bf08 <Crc_InitCrcValuesForUart+0x2ac>)
 800bcfe:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_OFF;
 800bd00:	2306      	movs	r3, #6
 800bd02:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FlashHighBeam_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800bd04:	1d3b      	adds	r3, r7, #4
 800bd06:	2201      	movs	r2, #1
 800bd08:	4619      	mov	r1, r3
 800bd0a:	4878      	ldr	r0, [pc, #480]	; (800beec <Crc_InitCrcValuesForUart+0x290>)
 800bd0c:	f7f7 fbcf 	bl	80034ae <HAL_CRC_Calculate>
 800bd10:	4603      	mov	r3, r0
 800bd12:	4a7e      	ldr	r2, [pc, #504]	; (800bf0c <Crc_InitCrcValuesForUart+0x2b0>)
 800bd14:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON;
 800bd16:	2307      	movs	r3, #7
 800bd18:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalLeft_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800bd1a:	1d3b      	adds	r3, r7, #4
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	4619      	mov	r1, r3
 800bd20:	4872      	ldr	r0, [pc, #456]	; (800beec <Crc_InitCrcValuesForUart+0x290>)
 800bd22:	f7f7 fbc4 	bl	80034ae <HAL_CRC_Calculate>
 800bd26:	4603      	mov	r3, r0
 800bd28:	4a79      	ldr	r2, [pc, #484]	; (800bf10 <Crc_InitCrcValuesForUart+0x2b4>)
 800bd2a:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF;
 800bd2c:	2308      	movs	r3, #8
 800bd2e:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalLeft_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800bd30:	1d3b      	adds	r3, r7, #4
 800bd32:	2201      	movs	r2, #1
 800bd34:	4619      	mov	r1, r3
 800bd36:	486d      	ldr	r0, [pc, #436]	; (800beec <Crc_InitCrcValuesForUart+0x290>)
 800bd38:	f7f7 fbb9 	bl	80034ae <HAL_CRC_Calculate>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	4a75      	ldr	r2, [pc, #468]	; (800bf14 <Crc_InitCrcValuesForUart+0x2b8>)
 800bd40:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON;
 800bd42:	2309      	movs	r3, #9
 800bd44:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalRight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800bd46:	1d3b      	adds	r3, r7, #4
 800bd48:	2201      	movs	r2, #1
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	4867      	ldr	r0, [pc, #412]	; (800beec <Crc_InitCrcValuesForUart+0x290>)
 800bd4e:	f7f7 fbae 	bl	80034ae <HAL_CRC_Calculate>
 800bd52:	4603      	mov	r3, r0
 800bd54:	4a70      	ldr	r2, [pc, #448]	; (800bf18 <Crc_InitCrcValuesForUart+0x2bc>)
 800bd56:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF;
 800bd58:	230a      	movs	r3, #10
 800bd5a:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalRight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800bd5c:	1d3b      	adds	r3, r7, #4
 800bd5e:	2201      	movs	r2, #1
 800bd60:	4619      	mov	r1, r3
 800bd62:	4862      	ldr	r0, [pc, #392]	; (800beec <Crc_InitCrcValuesForUart+0x290>)
 800bd64:	f7f7 fba3 	bl	80034ae <HAL_CRC_Calculate>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	4a6c      	ldr	r2, [pc, #432]	; (800bf1c <Crc_InitCrcValuesForUart+0x2c0>)
 800bd6c:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON;
 800bd6e:	230b      	movs	r3, #11
 800bd70:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HazardLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800bd72:	1d3b      	adds	r3, r7, #4
 800bd74:	2201      	movs	r2, #1
 800bd76:	4619      	mov	r1, r3
 800bd78:	485c      	ldr	r0, [pc, #368]	; (800beec <Crc_InitCrcValuesForUart+0x290>)
 800bd7a:	f7f7 fb98 	bl	80034ae <HAL_CRC_Calculate>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	4a67      	ldr	r2, [pc, #412]	; (800bf20 <Crc_InitCrcValuesForUart+0x2c4>)
 800bd82:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF;
 800bd84:	230c      	movs	r3, #12
 800bd86:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HazardLight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800bd88:	1d3b      	adds	r3, r7, #4
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	4619      	mov	r1, r3
 800bd8e:	4857      	ldr	r0, [pc, #348]	; (800beec <Crc_InitCrcValuesForUart+0x290>)
 800bd90:	f7f7 fb8d 	bl	80034ae <HAL_CRC_Calculate>
 800bd94:	4603      	mov	r3, r0
 800bd96:	4a63      	ldr	r2, [pc, #396]	; (800bf24 <Crc_InitCrcValuesForUart+0x2c8>)
 800bd98:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON;
 800bd9a:	230d      	movs	r3, #13
 800bd9c:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightFront_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800bd9e:	1d3b      	adds	r3, r7, #4
 800bda0:	2201      	movs	r2, #1
 800bda2:	4619      	mov	r1, r3
 800bda4:	4851      	ldr	r0, [pc, #324]	; (800beec <Crc_InitCrcValuesForUart+0x290>)
 800bda6:	f7f7 fb82 	bl	80034ae <HAL_CRC_Calculate>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	4a5e      	ldr	r2, [pc, #376]	; (800bf28 <Crc_InitCrcValuesForUart+0x2cc>)
 800bdae:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF;
 800bdb0:	230e      	movs	r3, #14
 800bdb2:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightFront_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800bdb4:	1d3b      	adds	r3, r7, #4
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	4619      	mov	r1, r3
 800bdba:	484c      	ldr	r0, [pc, #304]	; (800beec <Crc_InitCrcValuesForUart+0x290>)
 800bdbc:	f7f7 fb77 	bl	80034ae <HAL_CRC_Calculate>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	4a5a      	ldr	r2, [pc, #360]	; (800bf2c <Crc_InitCrcValuesForUart+0x2d0>)
 800bdc4:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTON;
 800bdc6:	2311      	movs	r3, #17
 800bdc8:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_BrakeLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800bdca:	1d3b      	adds	r3, r7, #4
 800bdcc:	2201      	movs	r2, #1
 800bdce:	4619      	mov	r1, r3
 800bdd0:	4846      	ldr	r0, [pc, #280]	; (800beec <Crc_InitCrcValuesForUart+0x290>)
 800bdd2:	f7f7 fb6c 	bl	80034ae <HAL_CRC_Calculate>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	4a55      	ldr	r2, [pc, #340]	; (800bf30 <Crc_InitCrcValuesForUart+0x2d4>)
 800bdda:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTOFF;
 800bddc:	2312      	movs	r3, #18
 800bdde:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_BrakeLight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800bde0:	1d3b      	adds	r3, r7, #4
 800bde2:	2201      	movs	r2, #1
 800bde4:	4619      	mov	r1, r3
 800bde6:	4841      	ldr	r0, [pc, #260]	; (800beec <Crc_InitCrcValuesForUart+0x290>)
 800bde8:	f7f7 fb61 	bl	80034ae <HAL_CRC_Calculate>
 800bdec:	4603      	mov	r3, r0
 800bdee:	4a51      	ldr	r2, [pc, #324]	; (800bf34 <Crc_InitCrcValuesForUart+0x2d8>)
 800bdf0:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_ON;
 800bdf2:	2315      	movs	r3, #21
 800bdf4:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_ReverseLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800bdf6:	1d3b      	adds	r3, r7, #4
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	483b      	ldr	r0, [pc, #236]	; (800beec <Crc_InitCrcValuesForUart+0x290>)
 800bdfe:	f7f7 fb56 	bl	80034ae <HAL_CRC_Calculate>
 800be02:	4603      	mov	r3, r0
 800be04:	4a4c      	ldr	r2, [pc, #304]	; (800bf38 <Crc_InitCrcValuesForUart+0x2dc>)
 800be06:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF;
 800be08:	2316      	movs	r3, #22
 800be0a:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_ReverseLight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800be0c:	1d3b      	adds	r3, r7, #4
 800be0e:	2201      	movs	r2, #1
 800be10:	4619      	mov	r1, r3
 800be12:	4836      	ldr	r0, [pc, #216]	; (800beec <Crc_InitCrcValuesForUart+0x290>)
 800be14:	f7f7 fb4b 	bl	80034ae <HAL_CRC_Calculate>
 800be18:	4603      	mov	r3, r0
 800be1a:	4a48      	ldr	r2, [pc, #288]	; (800bf3c <Crc_InitCrcValuesForUart+0x2e0>)
 800be1c:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_POSITIONZERO;
 800be1e:	2317      	movs	r3, #23
 800be20:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_PositionZero = HAL_CRC_Calculate(&hcrc, &value, 1);
 800be22:	1d3b      	adds	r3, r7, #4
 800be24:	2201      	movs	r2, #1
 800be26:	4619      	mov	r1, r3
 800be28:	4830      	ldr	r0, [pc, #192]	; (800beec <Crc_InitCrcValuesForUart+0x290>)
 800be2a:	f7f7 fb40 	bl	80034ae <HAL_CRC_Calculate>
 800be2e:	4603      	mov	r3, r0
 800be30:	4a43      	ldr	r2, [pc, #268]	; (800bf40 <Crc_InitCrcValuesForUart+0x2e4>)
 800be32:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
 800be34:	2318      	movs	r3, #24
 800be36:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_AutomaticLights = HAL_CRC_Calculate(&hcrc, &value, 1);
 800be38:	1d3b      	adds	r3, r7, #4
 800be3a:	2201      	movs	r2, #1
 800be3c:	4619      	mov	r1, r3
 800be3e:	482b      	ldr	r0, [pc, #172]	; (800beec <Crc_InitCrcValuesForUart+0x290>)
 800be40:	f7f7 fb35 	bl	80034ae <HAL_CRC_Calculate>
 800be44:	4603      	mov	r3, r0
 800be46:	4a3f      	ldr	r2, [pc, #252]	; (800bf44 <Crc_InitCrcValuesForUart+0x2e8>)
 800be48:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
 800be4a:	2319      	movs	r3, #25
 800be4c:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_PositionLights = HAL_CRC_Calculate(&hcrc, &value, 1);
 800be4e:	1d3b      	adds	r3, r7, #4
 800be50:	2201      	movs	r2, #1
 800be52:	4619      	mov	r1, r3
 800be54:	4825      	ldr	r0, [pc, #148]	; (800beec <Crc_InitCrcValuesForUart+0x290>)
 800be56:	f7f7 fb2a 	bl	80034ae <HAL_CRC_Calculate>
 800be5a:	4603      	mov	r3, r0
 800be5c:	4a3a      	ldr	r2, [pc, #232]	; (800bf48 <Crc_InitCrcValuesForUart+0x2ec>)
 800be5e:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
 800be60:	231a      	movs	r3, #26
 800be62:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_NightTimeLights = HAL_CRC_Calculate(&hcrc, &value, 1);
 800be64:	1d3b      	adds	r3, r7, #4
 800be66:	2201      	movs	r2, #1
 800be68:	4619      	mov	r1, r3
 800be6a:	4820      	ldr	r0, [pc, #128]	; (800beec <Crc_InitCrcValuesForUart+0x290>)
 800be6c:	f7f7 fb1f 	bl	80034ae <HAL_CRC_Calculate>
 800be70:	4603      	mov	r3, r0
 800be72:	4a36      	ldr	r2, [pc, #216]	; (800bf4c <Crc_InitCrcValuesForUart+0x2f0>)
 800be74:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_IGNITION_STEP_ONE;
 800be76:	231b      	movs	r3, #27
 800be78:	607b      	str	r3, [r7, #4]
	Crc_Ignition_Step_One = HAL_CRC_Calculate(&hcrc, &value, 1);
 800be7a:	1d3b      	adds	r3, r7, #4
 800be7c:	2201      	movs	r2, #1
 800be7e:	4619      	mov	r1, r3
 800be80:	481a      	ldr	r0, [pc, #104]	; (800beec <Crc_InitCrcValuesForUart+0x290>)
 800be82:	f7f7 fb14 	bl	80034ae <HAL_CRC_Calculate>
 800be86:	4603      	mov	r3, r0
 800be88:	4a31      	ldr	r2, [pc, #196]	; (800bf50 <Crc_InitCrcValuesForUart+0x2f4>)
 800be8a:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_IGNITION_STEP_TWO;
 800be8c:	231c      	movs	r3, #28
 800be8e:	607b      	str	r3, [r7, #4]
	Crc_Ignition_Step_Two = HAL_CRC_Calculate(&hcrc, &value, 1);
 800be90:	1d3b      	adds	r3, r7, #4
 800be92:	2201      	movs	r2, #1
 800be94:	4619      	mov	r1, r3
 800be96:	4815      	ldr	r0, [pc, #84]	; (800beec <Crc_InitCrcValuesForUart+0x290>)
 800be98:	f7f7 fb09 	bl	80034ae <HAL_CRC_Calculate>
 800be9c:	4603      	mov	r3, r0
 800be9e:	4a2d      	ldr	r2, [pc, #180]	; (800bf54 <Crc_InitCrcValuesForUart+0x2f8>)
 800bea0:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_IGNITION_TURN_OFF;
 800bea2:	231d      	movs	r3, #29
 800bea4:	607b      	str	r3, [r7, #4]
	Crc_Ignition_Turn_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800bea6:	1d3b      	adds	r3, r7, #4
 800bea8:	2201      	movs	r2, #1
 800beaa:	4619      	mov	r1, r3
 800beac:	480f      	ldr	r0, [pc, #60]	; (800beec <Crc_InitCrcValuesForUart+0x290>)
 800beae:	f7f7 fafe 	bl	80034ae <HAL_CRC_Calculate>
 800beb2:	4603      	mov	r3, r0
 800beb4:	4a28      	ldr	r2, [pc, #160]	; (800bf58 <Crc_InitCrcValuesForUart+0x2fc>)
 800beb6:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_ON;
 800beb8:	2313      	movs	r3, #19
 800beba:	607b      	str	r3, [r7, #4]
	Crc_IntLights_InteriorLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800bebc:	1d3b      	adds	r3, r7, #4
 800bebe:	2201      	movs	r2, #1
 800bec0:	4619      	mov	r1, r3
 800bec2:	480a      	ldr	r0, [pc, #40]	; (800beec <Crc_InitCrcValuesForUart+0x290>)
 800bec4:	f7f7 faf3 	bl	80034ae <HAL_CRC_Calculate>
 800bec8:	4603      	mov	r3, r0
 800beca:	4a24      	ldr	r2, [pc, #144]	; (800bf5c <Crc_InitCrcValuesForUart+0x300>)
 800becc:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF;
 800bece:	2314      	movs	r3, #20
 800bed0:	607b      	str	r3, [r7, #4]
	Crc_IntLights_InteriorLights_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800bed2:	1d3b      	adds	r3, r7, #4
 800bed4:	2201      	movs	r2, #1
 800bed6:	4619      	mov	r1, r3
 800bed8:	4804      	ldr	r0, [pc, #16]	; (800beec <Crc_InitCrcValuesForUart+0x290>)
 800beda:	f7f7 fae8 	bl	80034ae <HAL_CRC_Calculate>
 800bede:	4603      	mov	r3, r0
 800bee0:	4a1f      	ldr	r2, [pc, #124]	; (800bf60 <Crc_InitCrcValuesForUart+0x304>)
 800bee2:	6013      	str	r3, [r2, #0]

}
 800bee4:	bf00      	nop
 800bee6:	3708      	adds	r7, #8
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}
 800beec:	2000019c 	.word	0x2000019c
 800bef0:	20007a4c 	.word	0x20007a4c
 800bef4:	20007a50 	.word	0x20007a50
 800bef8:	20007a14 	.word	0x20007a14
 800befc:	20007a18 	.word	0x20007a18
 800bf00:	20007a1c 	.word	0x20007a1c
 800bf04:	20007a20 	.word	0x20007a20
 800bf08:	20007a24 	.word	0x20007a24
 800bf0c:	20007a28 	.word	0x20007a28
 800bf10:	20007a2c 	.word	0x20007a2c
 800bf14:	20007a30 	.word	0x20007a30
 800bf18:	20007a34 	.word	0x20007a34
 800bf1c:	20007a38 	.word	0x20007a38
 800bf20:	20007a3c 	.word	0x20007a3c
 800bf24:	20007a40 	.word	0x20007a40
 800bf28:	20007a44 	.word	0x20007a44
 800bf2c:	20007a48 	.word	0x20007a48
 800bf30:	20007a54 	.word	0x20007a54
 800bf34:	20007a58 	.word	0x20007a58
 800bf38:	20007a5c 	.word	0x20007a5c
 800bf3c:	20007a60 	.word	0x20007a60
 800bf40:	20007a64 	.word	0x20007a64
 800bf44:	20007a68 	.word	0x20007a68
 800bf48:	20007a6c 	.word	0x20007a6c
 800bf4c:	20007a70 	.word	0x20007a70
 800bf50:	20007a74 	.word	0x20007a74
 800bf54:	20007a78 	.word	0x20007a78
 800bf58:	20007a7c 	.word	0x20007a7c
 800bf5c:	20007a80 	.word	0x20007a80
 800bf60:	20007a84 	.word	0x20007a84

0800bf64 <HAL_CRC_ErrorCallback>:

void HAL_CRC_ErrorCallback(CRC_HandleTypeDef *hcrc)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b082      	sub	sp, #8
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]

	Crc_DeInit();
 800bf6c:	f000 f81e 	bl	800bfac <Crc_DeInit>
	Crc_Init();
 800bf70:	f000 f804 	bl	800bf7c <Crc_Init>

}
 800bf74:	bf00      	nop
 800bf76:	3708      	adds	r7, #8
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}

0800bf7c <Crc_Init>:

StdReturnType Crc_Init()
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	af00      	add	r7, sp, #0

	hcrc.Instance = CRC;
 800bf80:	4b08      	ldr	r3, [pc, #32]	; (800bfa4 <Crc_Init+0x28>)
 800bf82:	4a09      	ldr	r2, [pc, #36]	; (800bfa8 <Crc_Init+0x2c>)
 800bf84:	601a      	str	r2, [r3, #0]

	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800bf86:	4807      	ldr	r0, [pc, #28]	; (800bfa4 <Crc_Init+0x28>)
 800bf88:	f7f7 fa45 	bl	8003416 <HAL_CRC_Init>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d002      	beq.n	800bf98 <Crc_Init+0x1c>
	{

		HAL_CRC_ErrorCallback(&hcrc);
 800bf92:	4804      	ldr	r0, [pc, #16]	; (800bfa4 <Crc_Init+0x28>)
 800bf94:	f7ff ffe6 	bl	800bf64 <HAL_CRC_ErrorCallback>

		/* do nothing */

	}

	Crc_InitCrcValuesForUart();
 800bf98:	f7ff fe60 	bl	800bc5c <Crc_InitCrcValuesForUart>

	return E_OK;
 800bf9c:	2300      	movs	r3, #0

}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	bd80      	pop	{r7, pc}
 800bfa2:	bf00      	nop
 800bfa4:	2000019c 	.word	0x2000019c
 800bfa8:	40023000 	.word	0x40023000

0800bfac <Crc_DeInit>:

StdReturnType Crc_DeInit()
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	af00      	add	r7, sp, #0

	HAL_CRC_DeInit(&hcrc);
 800bfb0:	4802      	ldr	r0, [pc, #8]	; (800bfbc <Crc_DeInit+0x10>)
 800bfb2:	f7f7 fa4c 	bl	800344e <HAL_CRC_DeInit>

	return E_OK;
 800bfb6:	2300      	movs	r3, #0

}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	bd80      	pop	{r7, pc}
 800bfbc:	2000019c 	.word	0x2000019c

0800bfc0 <Crc_MainFunction>:

void Crc_MainFunction()
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0

	uint32 returnValue = HAL_CRC_GetState(&hcrc);
 800bfc6:	4808      	ldr	r0, [pc, #32]	; (800bfe8 <Crc_MainFunction+0x28>)
 800bfc8:	f7f7 faa4 	bl	8003514 <HAL_CRC_GetState>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	607b      	str	r3, [r7, #4]

	Crc_VerifyUartData();
 800bfd0:	f7ff fc6c 	bl	800b8ac <Crc_VerifyUartData>

	if(returnValue == HAL_CRC_STATE_ERROR)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2b04      	cmp	r3, #4
 800bfd8:	d102      	bne.n	800bfe0 <Crc_MainFunction+0x20>
	{

		HAL_CRC_ErrorCallback(&hcrc);
 800bfda:	4803      	ldr	r0, [pc, #12]	; (800bfe8 <Crc_MainFunction+0x28>)
 800bfdc:	f7ff ffc2 	bl	800bf64 <HAL_CRC_ErrorCallback>

	}

}
 800bfe0:	bf00      	nop
 800bfe2:	3708      	adds	r7, #8
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}
 800bfe8:	2000019c 	.word	0x2000019c

0800bfec <EcuM_CheckForWakeupEvent>:
void EcuM_SetWakeupSource(uint32 wakeupSource);
void EcuM_ProcessWakeupEvent();
void EcuM_CheckForWakeupEvent();

void EcuM_CheckForWakeupEvent()
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	af00      	add	r7, sp, #0

	if((PWR->CSR & RCC_CSR_PORRSTF) != 0)
 800bff0:	4b41      	ldr	r3, [pc, #260]	; (800c0f8 <EcuM_CheckForWakeupEvent+0x10c>)
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d00f      	beq.n	800c01c <EcuM_CheckForWakeupEvent+0x30>
	{

		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_POR);
 800bffc:	2000      	movs	r0, #0
 800bffe:	f000 f87f 	bl	800c100 <EcuM_SetWakeupSource>
		RCC->CSR |= RCC_CSR_RMVF;
 800c002:	4b3e      	ldr	r3, [pc, #248]	; (800c0fc <EcuM_CheckForWakeupEvent+0x110>)
 800c004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c006:	4a3d      	ldr	r2, [pc, #244]	; (800c0fc <EcuM_CheckForWakeupEvent+0x110>)
 800c008:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c00c:	6753      	str	r3, [r2, #116]	; 0x74
		RCC->CSR |= RCC_CSR_PORRSTF;
 800c00e:	4b3b      	ldr	r3, [pc, #236]	; (800c0fc <EcuM_CheckForWakeupEvent+0x110>)
 800c010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c012:	4a3a      	ldr	r2, [pc, #232]	; (800c0fc <EcuM_CheckForWakeupEvent+0x110>)
 800c014:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c018:	6753      	str	r3, [r2, #116]	; 0x74

		/* do nothing */

	}

}
 800c01a:	e06a      	b.n	800c0f2 <EcuM_CheckForWakeupEvent+0x106>
	else if((PWR->CSR & RCC_CSR_BORRSTF) != 0)
 800c01c:	4b36      	ldr	r3, [pc, #216]	; (800c0f8 <EcuM_CheckForWakeupEvent+0x10c>)
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c024:	2b00      	cmp	r3, #0
 800c026:	d00f      	beq.n	800c048 <EcuM_CheckForWakeupEvent+0x5c>
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_BOR);
 800c028:	2001      	movs	r0, #1
 800c02a:	f000 f869 	bl	800c100 <EcuM_SetWakeupSource>
		RCC->CSR |= RCC_CSR_RMVF;
 800c02e:	4b33      	ldr	r3, [pc, #204]	; (800c0fc <EcuM_CheckForWakeupEvent+0x110>)
 800c030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c032:	4a32      	ldr	r2, [pc, #200]	; (800c0fc <EcuM_CheckForWakeupEvent+0x110>)
 800c034:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c038:	6753      	str	r3, [r2, #116]	; 0x74
		RCC->CSR |= RCC_CSR_BORRSTF;
 800c03a:	4b30      	ldr	r3, [pc, #192]	; (800c0fc <EcuM_CheckForWakeupEvent+0x110>)
 800c03c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c03e:	4a2f      	ldr	r2, [pc, #188]	; (800c0fc <EcuM_CheckForWakeupEvent+0x110>)
 800c040:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c044:	6753      	str	r3, [r2, #116]	; 0x74
}
 800c046:	e054      	b.n	800c0f2 <EcuM_CheckForWakeupEvent+0x106>
	else if((RCC->CSR & RCC_CSR_SFTRSTF) != 0)
 800c048:	4b2c      	ldr	r3, [pc, #176]	; (800c0fc <EcuM_CheckForWakeupEvent+0x110>)
 800c04a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c04c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c050:	2b00      	cmp	r3, #0
 800c052:	d00f      	beq.n	800c074 <EcuM_CheckForWakeupEvent+0x88>
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_SOFTWARE_RESET);
 800c054:	2002      	movs	r0, #2
 800c056:	f000 f853 	bl	800c100 <EcuM_SetWakeupSource>
		RCC->CSR |= RCC_CSR_RMVF;
 800c05a:	4b28      	ldr	r3, [pc, #160]	; (800c0fc <EcuM_CheckForWakeupEvent+0x110>)
 800c05c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c05e:	4a27      	ldr	r2, [pc, #156]	; (800c0fc <EcuM_CheckForWakeupEvent+0x110>)
 800c060:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c064:	6753      	str	r3, [r2, #116]	; 0x74
		RCC->CSR |= RCC_CSR_SFTRSTF;
 800c066:	4b25      	ldr	r3, [pc, #148]	; (800c0fc <EcuM_CheckForWakeupEvent+0x110>)
 800c068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c06a:	4a24      	ldr	r2, [pc, #144]	; (800c0fc <EcuM_CheckForWakeupEvent+0x110>)
 800c06c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c070:	6753      	str	r3, [r2, #116]	; 0x74
}
 800c072:	e03e      	b.n	800c0f2 <EcuM_CheckForWakeupEvent+0x106>
	else if((RCC->CSR & RCC_CSR_WWDGRSTF) != 0)
 800c074:	4b21      	ldr	r3, [pc, #132]	; (800c0fc <EcuM_CheckForWakeupEvent+0x110>)
 800c076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c078:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d00f      	beq.n	800c0a0 <EcuM_CheckForWakeupEvent+0xb4>
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET);
 800c080:	2003      	movs	r0, #3
 800c082:	f000 f83d 	bl	800c100 <EcuM_SetWakeupSource>
		RCC->CSR |= RCC_CSR_RMVF;
 800c086:	4b1d      	ldr	r3, [pc, #116]	; (800c0fc <EcuM_CheckForWakeupEvent+0x110>)
 800c088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c08a:	4a1c      	ldr	r2, [pc, #112]	; (800c0fc <EcuM_CheckForWakeupEvent+0x110>)
 800c08c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c090:	6753      	str	r3, [r2, #116]	; 0x74
		RCC->CSR |= RCC_CSR_WWDGRSTF;
 800c092:	4b1a      	ldr	r3, [pc, #104]	; (800c0fc <EcuM_CheckForWakeupEvent+0x110>)
 800c094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c096:	4a19      	ldr	r2, [pc, #100]	; (800c0fc <EcuM_CheckForWakeupEvent+0x110>)
 800c098:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c09c:	6753      	str	r3, [r2, #116]	; 0x74
}
 800c09e:	e028      	b.n	800c0f2 <EcuM_CheckForWakeupEvent+0x106>
	else if((RCC->CSR & RCC_CSR_LPWRRSTF) != 0)
 800c0a0:	4b16      	ldr	r3, [pc, #88]	; (800c0fc <EcuM_CheckForWakeupEvent+0x110>)
 800c0a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	da0f      	bge.n	800c0c8 <EcuM_CheckForWakeupEvent+0xdc>
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_LOWPOWER_RESET);
 800c0a8:	2004      	movs	r0, #4
 800c0aa:	f000 f829 	bl	800c100 <EcuM_SetWakeupSource>
		RCC->CSR |= RCC_CSR_RMVF;
 800c0ae:	4b13      	ldr	r3, [pc, #76]	; (800c0fc <EcuM_CheckForWakeupEvent+0x110>)
 800c0b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0b2:	4a12      	ldr	r2, [pc, #72]	; (800c0fc <EcuM_CheckForWakeupEvent+0x110>)
 800c0b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c0b8:	6753      	str	r3, [r2, #116]	; 0x74
		RCC->CSR |= RCC_CSR_LPWRRSTF;
 800c0ba:	4b10      	ldr	r3, [pc, #64]	; (800c0fc <EcuM_CheckForWakeupEvent+0x110>)
 800c0bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0be:	4a0f      	ldr	r2, [pc, #60]	; (800c0fc <EcuM_CheckForWakeupEvent+0x110>)
 800c0c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c0c4:	6753      	str	r3, [r2, #116]	; 0x74
}
 800c0c6:	e014      	b.n	800c0f2 <EcuM_CheckForWakeupEvent+0x106>
	else if((RCC->CSR & RCC_CSR_PADRSTF) != 0)
 800c0c8:	4b0c      	ldr	r3, [pc, #48]	; (800c0fc <EcuM_CheckForWakeupEvent+0x110>)
 800c0ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d00e      	beq.n	800c0f2 <EcuM_CheckForWakeupEvent+0x106>
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_BUTTON_RESET);
 800c0d4:	2005      	movs	r0, #5
 800c0d6:	f000 f813 	bl	800c100 <EcuM_SetWakeupSource>
		RCC->CSR |= RCC_CSR_RMVF;
 800c0da:	4b08      	ldr	r3, [pc, #32]	; (800c0fc <EcuM_CheckForWakeupEvent+0x110>)
 800c0dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0de:	4a07      	ldr	r2, [pc, #28]	; (800c0fc <EcuM_CheckForWakeupEvent+0x110>)
 800c0e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c0e4:	6753      	str	r3, [r2, #116]	; 0x74
		RCC->CSR |= RCC_CSR_PADRSTF;
 800c0e6:	4b05      	ldr	r3, [pc, #20]	; (800c0fc <EcuM_CheckForWakeupEvent+0x110>)
 800c0e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0ea:	4a04      	ldr	r2, [pc, #16]	; (800c0fc <EcuM_CheckForWakeupEvent+0x110>)
 800c0ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c0f0:	6753      	str	r3, [r2, #116]	; 0x74
}
 800c0f2:	bf00      	nop
 800c0f4:	bd80      	pop	{r7, pc}
 800c0f6:	bf00      	nop
 800c0f8:	40007000 	.word	0x40007000
 800c0fc:	40023800 	.word	0x40023800

0800c100 <EcuM_SetWakeupSource>:

void EcuM_SetWakeupSource(uint32 wakeupSource)
{
 800c100:	b480      	push	{r7}
 800c102:	b083      	sub	sp, #12
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]

	if(wakeupSource != NULL_PTR)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d003      	beq.n	800c116 <EcuM_SetWakeupSource+0x16>
	{

		EcuM_GlobalState.currentState = wakeupSource;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	b2da      	uxtb	r2, r3
 800c112:	4b04      	ldr	r3, [pc, #16]	; (800c124 <EcuM_SetWakeupSource+0x24>)
 800c114:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 800c116:	bf00      	nop
 800c118:	370c      	adds	r7, #12
 800c11a:	46bd      	mov	sp, r7
 800c11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c120:	4770      	bx	lr
 800c122:	bf00      	nop
 800c124:	20007a88 	.word	0x20007a88

0800c128 <EcuM_ProcessWakeupEvent>:

void EcuM_ProcessWakeupEvent()
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b082      	sub	sp, #8
 800c12c:	af00      	add	r7, sp, #0

	uint8 localWakeupEvent = EcuM_GlobalState.currentState;
 800c12e:	4b19      	ldr	r3, [pc, #100]	; (800c194 <EcuM_ProcessWakeupEvent+0x6c>)
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	71fb      	strb	r3, [r7, #7]

	switch(localWakeupEvent)
 800c134:	79fb      	ldrb	r3, [r7, #7]
 800c136:	2b05      	cmp	r3, #5
 800c138:	d826      	bhi.n	800c188 <EcuM_ProcessWakeupEvent+0x60>
 800c13a:	a201      	add	r2, pc, #4	; (adr r2, 800c140 <EcuM_ProcessWakeupEvent+0x18>)
 800c13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c140:	0800c159 	.word	0x0800c159
 800c144:	0800c161 	.word	0x0800c161
 800c148:	0800c169 	.word	0x0800c169
 800c14c:	0800c171 	.word	0x0800c171
 800c150:	0800c179 	.word	0x0800c179
 800c154:	0800c181 	.word	0x0800c181
	{

		case ECUM_WAKEUPSOURCE_POR:

			SystemManager_SetFault(ECUM_WAKEUPSOURCE_POR);
 800c158:	2000      	movs	r0, #0
 800c15a:	f000 f859 	bl	800c210 <SystemManager_SetFault>

			break;
 800c15e:	e014      	b.n	800c18a <EcuM_ProcessWakeupEvent+0x62>

		case ECUM_WAKEUPSOURCE_BOR:

			SystemManager_SetFault(ECUM_WAKEUPSOURCE_BOR);
 800c160:	2001      	movs	r0, #1
 800c162:	f000 f855 	bl	800c210 <SystemManager_SetFault>

			break;
 800c166:	e010      	b.n	800c18a <EcuM_ProcessWakeupEvent+0x62>

		case ECUM_WAKEUPSOURCE_SOFTWARE_RESET:

			SystemManager_SetFault(ECUM_WAKEUPSOURCE_SOFTWARE_RESET);
 800c168:	2002      	movs	r0, #2
 800c16a:	f000 f851 	bl	800c210 <SystemManager_SetFault>

			break;
 800c16e:	e00c      	b.n	800c18a <EcuM_ProcessWakeupEvent+0x62>

		case ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET:

			SystemManager_SetFault(ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET);
 800c170:	2003      	movs	r0, #3
 800c172:	f000 f84d 	bl	800c210 <SystemManager_SetFault>

			break;
 800c176:	e008      	b.n	800c18a <EcuM_ProcessWakeupEvent+0x62>

		case ECUM_WAKEUPSOURCE_LOWPOWER_RESET:

			SystemManager_SetFault(ECUM_WAKEUPSOURCE_LOWPOWER_RESET);
 800c178:	2004      	movs	r0, #4
 800c17a:	f000 f849 	bl	800c210 <SystemManager_SetFault>

			break;
 800c17e:	e004      	b.n	800c18a <EcuM_ProcessWakeupEvent+0x62>

		case ECUM_WAKEUPSOURCE_BUTTON_RESET:

			SystemManager_SetFault(ECUM_WAKEUPSOURCE_BUTTON_RESET);
 800c180:	2005      	movs	r0, #5
 800c182:	f000 f845 	bl	800c210 <SystemManager_SetFault>

			break;
 800c186:	e000      	b.n	800c18a <EcuM_ProcessWakeupEvent+0x62>

		default:

			break;
 800c188:	bf00      	nop

	}

}
 800c18a:	bf00      	nop
 800c18c:	3708      	adds	r7, #8
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
 800c192:	bf00      	nop
 800c194:	20007a88 	.word	0x20007a88

0800c198 <EcuM_DriverInit>:

StdReturnType EcuM_DriverInit()
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	af00      	add	r7, sp, #0

	Port_Init();
 800c19c:	f7fb fa28 	bl	80075f0 <Port_Init>
	Wdg_Init();
 800c1a0:	f000 f966 	bl	800c470 <Wdg_Init>
	MX_DMA_Init();
 800c1a4:	f7f5 fbf6 	bl	8001994 <MX_DMA_Init>
	Crc_Init();
 800c1a8:	f7ff fee8 	bl	800bf7c <Crc_Init>
	Uart_Init();
 800c1ac:	f7f5 fa0a 	bl	80015c4 <Uart_Init>
	Tim_Init(2);
 800c1b0:	2002      	movs	r0, #2
 800c1b2:	f7fb fbaf 	bl	8007914 <Tim_Init>
	Tim_Init(3);
 800c1b6:	2003      	movs	r0, #3
 800c1b8:	f7fb fbac 	bl	8007914 <Tim_Init>
	Tim_Init(4);
 800c1bc:	2004      	movs	r0, #4
 800c1be:	f7fb fba9 	bl	8007914 <Tim_Init>
	Tim_Init(5);
 800c1c2:	2005      	movs	r0, #5
 800c1c4:	f7fb fba6 	bl	8007914 <Tim_Init>
	Tim_Init(9);
 800c1c8:	2009      	movs	r0, #9
 800c1ca:	f7fb fba3 	bl	8007914 <Tim_Init>
	Tim_Init(11);
 800c1ce:	200b      	movs	r0, #11
 800c1d0:	f7fb fba0 	bl	8007914 <Tim_Init>
	Adc_Init();
 800c1d4:	f7fb f9a8 	bl	8007528 <Adc_Init>
	Spi_Init(1);
 800c1d8:	2001      	movs	r0, #1
 800c1da:	f7fb fa25 	bl	8007628 <Spi_Init>
	Spi_Init(2);
 800c1de:	2002      	movs	r0, #2
 800c1e0:	f7fb fa22 	bl	8007628 <Spi_Init>

	return E_OK;
 800c1e4:	2300      	movs	r3, #0

}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	bd80      	pop	{r7, pc}

0800c1ea <EcuM_MainFunction>:
	return E_OK;

}

void EcuM_MainFunction()
{
 800c1ea:	b580      	push	{r7, lr}
 800c1ec:	af00      	add	r7, sp, #0

	EcuM_CheckForWakeupEvent();
 800c1ee:	f7ff fefd 	bl	800bfec <EcuM_CheckForWakeupEvent>
	EcuM_ProcessWakeupEvent();
 800c1f2:	f7ff ff99 	bl	800c128 <EcuM_ProcessWakeupEvent>

}
 800c1f6:	bf00      	nop
 800c1f8:	bd80      	pop	{r7, pc}

0800c1fa <SystemManager_Init>:
void SystemClock_Config(void);
void Error_Handler(void);
void MX_NVIC_Init(void);

void SystemManager_Init()
{
 800c1fa:	b580      	push	{r7, lr}
 800c1fc:	af00      	add	r7, sp, #0

	HAL_Init();
 800c1fe:	f7f6 f9ff 	bl	8002600 <HAL_Init>
	SystemClock_Config();
 800c202:	f000 f8b9 	bl	800c378 <SystemClock_Config>
	MX_NVIC_Init();
 800c206:	f000 f832 	bl	800c26e <MX_NVIC_Init>

}
 800c20a:	bf00      	nop
 800c20c:	bd80      	pop	{r7, pc}
	...

0800c210 <SystemManager_SetFault>:

StdReturnType SystemManager_SetFault(uint8 faultType)
{
 800c210:	b480      	push	{r7}
 800c212:	b085      	sub	sp, #20
 800c214:	af00      	add	r7, sp, #0
 800c216:	4603      	mov	r3, r0
 800c218:	71fb      	strb	r3, [r7, #7]

	for(uint8 index = 0; index <= 13; index++)
 800c21a:	2300      	movs	r3, #0
 800c21c:	73fb      	strb	r3, [r7, #15]
 800c21e:	e00d      	b.n	800c23c <SystemManager_SetFault+0x2c>
	{

		if(faultType == index)
 800c220:	79fa      	ldrb	r2, [r7, #7]
 800c222:	7bfb      	ldrb	r3, [r7, #15]
 800c224:	429a      	cmp	r2, r3
 800c226:	d106      	bne.n	800c236 <SystemManager_SetFault+0x26>
		{

			SystemManager_Fault.fault[index] = index + 1;
 800c228:	7bfb      	ldrb	r3, [r7, #15]
 800c22a:	1c5a      	adds	r2, r3, #1
 800c22c:	7bfb      	ldrb	r3, [r7, #15]
 800c22e:	4611      	mov	r1, r2
 800c230:	4a07      	ldr	r2, [pc, #28]	; (800c250 <SystemManager_SetFault+0x40>)
 800c232:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(uint8 index = 0; index <= 13; index++)
 800c236:	7bfb      	ldrb	r3, [r7, #15]
 800c238:	3301      	adds	r3, #1
 800c23a:	73fb      	strb	r3, [r7, #15]
 800c23c:	7bfb      	ldrb	r3, [r7, #15]
 800c23e:	2b0d      	cmp	r3, #13
 800c240:	d9ee      	bls.n	800c220 <SystemManager_SetFault+0x10>

		}

	}

	return E_OK;
 800c242:	2300      	movs	r3, #0

}
 800c244:	4618      	mov	r0, r3
 800c246:	3714      	adds	r7, #20
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr
 800c250:	20007a8c 	.word	0x20007a8c

0800c254 <SystemManager_MainFunction>:

void SystemManager_MainFunction()
{
 800c254:	b480      	push	{r7}
 800c256:	af00      	add	r7, sp, #0

}
 800c258:	bf00      	nop
 800c25a:	46bd      	mov	sp, r7
 800c25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c260:	4770      	bx	lr

0800c262 <SystemManager_PerformReset>:

void SystemManager_PerformReset()
{
 800c262:	b580      	push	{r7, lr}
 800c264:	af00      	add	r7, sp, #0

	HAL_NVIC_SystemReset();
 800c266:	f7f7 f8d2 	bl	800340e <HAL_NVIC_SystemReset>

}
 800c26a:	bf00      	nop
 800c26c:	bd80      	pop	{r7, pc}

0800c26e <MX_NVIC_Init>:

void MX_NVIC_Init(void)
{
 800c26e:	b580      	push	{r7, lr}
 800c270:	af00      	add	r7, sp, #0

	HAL_NVIC_SetPriority(WWDG_IRQn, 5, 0);
 800c272:	2200      	movs	r2, #0
 800c274:	2105      	movs	r1, #5
 800c276:	2000      	movs	r0, #0
 800c278:	f7f7 f891 	bl	800339e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(WWDG_IRQn);
 800c27c:	2000      	movs	r0, #0
 800c27e:	f7f7 f8aa 	bl	80033d6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 800c282:	2200      	movs	r2, #0
 800c284:	2105      	movs	r1, #5
 800c286:	2001      	movs	r0, #1
 800c288:	f7f7 f889 	bl	800339e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(PVD_IRQn);
 800c28c:	2001      	movs	r0, #1
 800c28e:	f7f7 f8a2 	bl	80033d6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 5, 0);
 800c292:	2200      	movs	r2, #0
 800c294:	2105      	movs	r1, #5
 800c296:	2003      	movs	r0, #3
 800c298:	f7f7 f881 	bl	800339e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800c29c:	2003      	movs	r0, #3
 800c29e:	f7f7 f89a 	bl	80033d6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	2105      	movs	r1, #5
 800c2a6:	2004      	movs	r0, #4
 800c2a8:	f7f7 f879 	bl	800339e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800c2ac:	2004      	movs	r0, #4
 800c2ae:	f7f7 f892 	bl	80033d6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	2105      	movs	r1, #5
 800c2b6:	2005      	movs	r0, #5
 800c2b8:	f7f7 f871 	bl	800339e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RCC_IRQn);
 800c2bc:	2005      	movs	r0, #5
 800c2be:	f7f7 f88a 	bl	80033d6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	2105      	movs	r1, #5
 800c2c6:	2012      	movs	r0, #18
 800c2c8:	f7f7 f869 	bl	800339e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 800c2cc:	2012      	movs	r0, #18
 800c2ce:	f7f7 f882 	bl	80033d6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	2105      	movs	r1, #5
 800c2d6:	201c      	movs	r0, #28
 800c2d8:	f7f7 f861 	bl	800339e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800c2dc:	201c      	movs	r0, #28
 800c2de:	f7f7 f87a 	bl	80033d6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	2105      	movs	r1, #5
 800c2e6:	201d      	movs	r0, #29
 800c2e8:	f7f7 f859 	bl	800339e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800c2ec:	201d      	movs	r0, #29
 800c2ee:	f7f7 f872 	bl	80033d6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	2105      	movs	r1, #5
 800c2f6:	201e      	movs	r0, #30
 800c2f8:	f7f7 f851 	bl	800339e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800c2fc:	201e      	movs	r0, #30
 800c2fe:	f7f7 f86a 	bl	80033d6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800c302:	2200      	movs	r2, #0
 800c304:	2105      	movs	r1, #5
 800c306:	201f      	movs	r0, #31
 800c308:	f7f7 f849 	bl	800339e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800c30c:	201f      	movs	r0, #31
 800c30e:	f7f7 f862 	bl	80033d6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800c312:	2200      	movs	r2, #0
 800c314:	2105      	movs	r1, #5
 800c316:	2020      	movs	r0, #32
 800c318:	f7f7 f841 	bl	800339e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800c31c:	2020      	movs	r0, #32
 800c31e:	f7f7 f85a 	bl	80033d6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800c322:	2200      	movs	r2, #0
 800c324:	2105      	movs	r1, #5
 800c326:	2023      	movs	r0, #35	; 0x23
 800c328:	f7f7 f839 	bl	800339e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800c32c:	2023      	movs	r0, #35	; 0x23
 800c32e:	f7f7 f852 	bl	80033d6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800c332:	2200      	movs	r2, #0
 800c334:	2105      	movs	r1, #5
 800c336:	2024      	movs	r0, #36	; 0x24
 800c338:	f7f7 f831 	bl	800339e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800c33c:	2024      	movs	r0, #36	; 0x24
 800c33e:	f7f7 f84a 	bl	80033d6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800c342:	2200      	movs	r2, #0
 800c344:	2105      	movs	r1, #5
 800c346:	2025      	movs	r0, #37	; 0x25
 800c348:	f7f7 f829 	bl	800339e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 800c34c:	2025      	movs	r0, #37	; 0x25
 800c34e:	f7f7 f842 	bl	80033d6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 800c352:	2200      	movs	r2, #0
 800c354:	2105      	movs	r1, #5
 800c356:	2032      	movs	r0, #50	; 0x32
 800c358:	f7f7 f821 	bl	800339e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800c35c:	2032      	movs	r0, #50	; 0x32
 800c35e:	f7f7 f83a 	bl	80033d6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800c362:	2200      	movs	r2, #0
 800c364:	2105      	movs	r1, #5
 800c366:	2038      	movs	r0, #56	; 0x38
 800c368:	f7f7 f819 	bl	800339e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800c36c:	2038      	movs	r0, #56	; 0x38
 800c36e:	f7f7 f832 	bl	80033d6 <HAL_NVIC_EnableIRQ>

}
 800c372:	bf00      	nop
 800c374:	bd80      	pop	{r7, pc}
	...

0800c378 <SystemClock_Config>:

void SystemClock_Config(void)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b094      	sub	sp, #80	; 0x50
 800c37c:	af00      	add	r7, sp, #0

	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c37e:	f107 0320 	add.w	r3, r7, #32
 800c382:	2230      	movs	r2, #48	; 0x30
 800c384:	2100      	movs	r1, #0
 800c386:	4618      	mov	r0, r3
 800c388:	f000 f8de 	bl	800c548 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c38c:	f107 030c 	add.w	r3, r7, #12
 800c390:	2200      	movs	r2, #0
 800c392:	601a      	str	r2, [r3, #0]
 800c394:	605a      	str	r2, [r3, #4]
 800c396:	609a      	str	r2, [r3, #8]
 800c398:	60da      	str	r2, [r3, #12]
 800c39a:	611a      	str	r2, [r3, #16]
	__HAL_RCC_PWR_CLK_ENABLE();
 800c39c:	2300      	movs	r3, #0
 800c39e:	60bb      	str	r3, [r7, #8]
 800c3a0:	4b28      	ldr	r3, [pc, #160]	; (800c444 <SystemClock_Config+0xcc>)
 800c3a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3a4:	4a27      	ldr	r2, [pc, #156]	; (800c444 <SystemClock_Config+0xcc>)
 800c3a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3aa:	6413      	str	r3, [r2, #64]	; 0x40
 800c3ac:	4b25      	ldr	r3, [pc, #148]	; (800c444 <SystemClock_Config+0xcc>)
 800c3ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3b4:	60bb      	str	r3, [r7, #8]
 800c3b6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	607b      	str	r3, [r7, #4]
 800c3bc:	4b22      	ldr	r3, [pc, #136]	; (800c448 <SystemClock_Config+0xd0>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	4a21      	ldr	r2, [pc, #132]	; (800c448 <SystemClock_Config+0xd0>)
 800c3c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c3c6:	6013      	str	r3, [r2, #0]
 800c3c8:	4b1f      	ldr	r3, [pc, #124]	; (800c448 <SystemClock_Config+0xd0>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c3d0:	607b      	str	r3, [r7, #4]
 800c3d2:	687b      	ldr	r3, [r7, #4]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800c3d4:	2309      	movs	r3, #9
 800c3d6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c3d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c3dc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800c3de:	2301      	movs	r3, #1
 800c3e0:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c3e2:	2302      	movs	r3, #2
 800c3e4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c3e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800c3ec:	2304      	movs	r3, #4
 800c3ee:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 800c3f0:	2364      	movs	r3, #100	; 0x64
 800c3f2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c3f4:	2302      	movs	r3, #2
 800c3f6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800c3f8:	2304      	movs	r3, #4
 800c3fa:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c3fc:	f107 0320 	add.w	r3, r7, #32
 800c400:	4618      	mov	r0, r3
 800c402:	f7f8 f939 	bl	8004678 <HAL_RCC_OscConfig>
 800c406:	4603      	mov	r3, r0
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d001      	beq.n	800c410 <SystemClock_Config+0x98>
	{

		Error_Handler();
 800c40c:	f000 f81e 	bl	800c44c <Error_Handler>
		/* do nothing */

	}


	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 800c410:	230f      	movs	r3, #15
 800c412:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c414:	2302      	movs	r3, #2
 800c416:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c418:	2300      	movs	r3, #0
 800c41a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800c41c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c420:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800c422:	2300      	movs	r3, #0
 800c424:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800c426:	f107 030c 	add.w	r3, r7, #12
 800c42a:	2103      	movs	r1, #3
 800c42c:	4618      	mov	r0, r3
 800c42e:	f7f8 fb9b 	bl	8004b68 <HAL_RCC_ClockConfig>
 800c432:	4603      	mov	r3, r0
 800c434:	2b00      	cmp	r3, #0
 800c436:	d001      	beq.n	800c43c <SystemClock_Config+0xc4>
	{

		Error_Handler();
 800c438:	f000 f808 	bl	800c44c <Error_Handler>

		/* do nothing */

	}

}
 800c43c:	bf00      	nop
 800c43e:	3750      	adds	r7, #80	; 0x50
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}
 800c444:	40023800 	.word	0x40023800
 800c448:	40007000 	.word	0x40007000

0800c44c <Error_Handler>:

void Error_Handler(void)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800c450:	b672      	cpsid	i
}
 800c452:	bf00      	nop

	__disable_irq();

	SystemManager_PerformReset();
 800c454:	f7ff ff05 	bl	800c262 <SystemManager_PerformReset>

	while (1)
 800c458:	e7fe      	b.n	800c458 <Error_Handler+0xc>

0800c45a <HAL_WWDG_EarlyWakeupCallback>:
StdReturnType Wdg_Init();
void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg);
void Wdg_MainFunction();

void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 800c45a:	b580      	push	{r7, lr}
 800c45c:	b082      	sub	sp, #8
 800c45e:	af00      	add	r7, sp, #0
 800c460:	6078      	str	r0, [r7, #4]

	SystemManager_SetFault(WATCHDOG_RESET);
 800c462:	2003      	movs	r0, #3
 800c464:	f7ff fed4 	bl	800c210 <SystemManager_SetFault>

}
 800c468:	bf00      	nop
 800c46a:	3708      	adds	r7, #8
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <Wdg_Init>:

StdReturnType Wdg_Init()
{
 800c470:	b580      	push	{r7, lr}
 800c472:	af00      	add	r7, sp, #0

	hwwdg.Instance = WWDG;
 800c474:	4b0f      	ldr	r3, [pc, #60]	; (800c4b4 <Wdg_Init+0x44>)
 800c476:	4a10      	ldr	r2, [pc, #64]	; (800c4b8 <Wdg_Init+0x48>)
 800c478:	601a      	str	r2, [r3, #0]
	hwwdg.Init.Window = 127;
 800c47a:	4b0e      	ldr	r3, [pc, #56]	; (800c4b4 <Wdg_Init+0x44>)
 800c47c:	227f      	movs	r2, #127	; 0x7f
 800c47e:	609a      	str	r2, [r3, #8]
	hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
 800c480:	4b0c      	ldr	r3, [pc, #48]	; (800c4b4 <Wdg_Init+0x44>)
 800c482:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800c486:	605a      	str	r2, [r3, #4]
	hwwdg.Init.Counter = 127;
 800c488:	4b0a      	ldr	r3, [pc, #40]	; (800c4b4 <Wdg_Init+0x44>)
 800c48a:	227f      	movs	r2, #127	; 0x7f
 800c48c:	60da      	str	r2, [r3, #12]
	hwwdg.Init.EWIMode = WWDG_EWI_ENABLE;
 800c48e:	4b09      	ldr	r3, [pc, #36]	; (800c4b4 <Wdg_Init+0x44>)
 800c490:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c494:	611a      	str	r2, [r3, #16]

	if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 800c496:	4807      	ldr	r0, [pc, #28]	; (800c4b4 <Wdg_Init+0x44>)
 800c498:	f7fa ff84 	bl	80073a4 <HAL_WWDG_Init>
 800c49c:	4603      	mov	r3, r0
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d004      	beq.n	800c4ac <Wdg_Init+0x3c>
	{

		SystemManager_SetFault(WATCHDOG_RESET);
 800c4a2:	2003      	movs	r0, #3
 800c4a4:	f7ff feb4 	bl	800c210 <SystemManager_SetFault>

		Error_Handler();
 800c4a8:	f7ff ffd0 	bl	800c44c <Error_Handler>

		/* do nothing */

	}

	return E_OK;
 800c4ac:	2300      	movs	r3, #0

}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	bd80      	pop	{r7, pc}
 800c4b2:	bf00      	nop
 800c4b4:	200007a0 	.word	0x200007a0
 800c4b8:	40002c00 	.word	0x40002c00

0800c4bc <Wdg_MainFunction>:

void Wdg_MainFunction()
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	af00      	add	r7, sp, #0

	HAL_WWDG_Refresh(&hwwdg);
 800c4c0:	4802      	ldr	r0, [pc, #8]	; (800c4cc <Wdg_MainFunction+0x10>)
 800c4c2:	f7fa ffa7 	bl	8007414 <HAL_WWDG_Refresh>

}
 800c4c6:	bf00      	nop
 800c4c8:	bd80      	pop	{r7, pc}
 800c4ca:	bf00      	nop
 800c4cc:	200007a0 	.word	0x200007a0

0800c4d0 <atoi>:
 800c4d0:	220a      	movs	r2, #10
 800c4d2:	2100      	movs	r1, #0
 800c4d4:	f000 b978 	b.w	800c7c8 <strtol>

0800c4d8 <__errno>:
 800c4d8:	4b01      	ldr	r3, [pc, #4]	; (800c4e0 <__errno+0x8>)
 800c4da:	6818      	ldr	r0, [r3, #0]
 800c4dc:	4770      	bx	lr
 800c4de:	bf00      	nop
 800c4e0:	20000014 	.word	0x20000014

0800c4e4 <__libc_init_array>:
 800c4e4:	b570      	push	{r4, r5, r6, lr}
 800c4e6:	4d0d      	ldr	r5, [pc, #52]	; (800c51c <__libc_init_array+0x38>)
 800c4e8:	4c0d      	ldr	r4, [pc, #52]	; (800c520 <__libc_init_array+0x3c>)
 800c4ea:	1b64      	subs	r4, r4, r5
 800c4ec:	10a4      	asrs	r4, r4, #2
 800c4ee:	2600      	movs	r6, #0
 800c4f0:	42a6      	cmp	r6, r4
 800c4f2:	d109      	bne.n	800c508 <__libc_init_array+0x24>
 800c4f4:	4d0b      	ldr	r5, [pc, #44]	; (800c524 <__libc_init_array+0x40>)
 800c4f6:	4c0c      	ldr	r4, [pc, #48]	; (800c528 <__libc_init_array+0x44>)
 800c4f8:	f000 f97c 	bl	800c7f4 <_init>
 800c4fc:	1b64      	subs	r4, r4, r5
 800c4fe:	10a4      	asrs	r4, r4, #2
 800c500:	2600      	movs	r6, #0
 800c502:	42a6      	cmp	r6, r4
 800c504:	d105      	bne.n	800c512 <__libc_init_array+0x2e>
 800c506:	bd70      	pop	{r4, r5, r6, pc}
 800c508:	f855 3b04 	ldr.w	r3, [r5], #4
 800c50c:	4798      	blx	r3
 800c50e:	3601      	adds	r6, #1
 800c510:	e7ee      	b.n	800c4f0 <__libc_init_array+0xc>
 800c512:	f855 3b04 	ldr.w	r3, [r5], #4
 800c516:	4798      	blx	r3
 800c518:	3601      	adds	r6, #1
 800c51a:	e7f2      	b.n	800c502 <__libc_init_array+0x1e>
 800c51c:	0800cacc 	.word	0x0800cacc
 800c520:	0800cacc 	.word	0x0800cacc
 800c524:	0800cacc 	.word	0x0800cacc
 800c528:	0800cad0 	.word	0x0800cad0

0800c52c <memcpy>:
 800c52c:	440a      	add	r2, r1
 800c52e:	4291      	cmp	r1, r2
 800c530:	f100 33ff 	add.w	r3, r0, #4294967295
 800c534:	d100      	bne.n	800c538 <memcpy+0xc>
 800c536:	4770      	bx	lr
 800c538:	b510      	push	{r4, lr}
 800c53a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c53e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c542:	4291      	cmp	r1, r2
 800c544:	d1f9      	bne.n	800c53a <memcpy+0xe>
 800c546:	bd10      	pop	{r4, pc}

0800c548 <memset>:
 800c548:	4402      	add	r2, r0
 800c54a:	4603      	mov	r3, r0
 800c54c:	4293      	cmp	r3, r2
 800c54e:	d100      	bne.n	800c552 <memset+0xa>
 800c550:	4770      	bx	lr
 800c552:	f803 1b01 	strb.w	r1, [r3], #1
 800c556:	e7f9      	b.n	800c54c <memset+0x4>

0800c558 <_free_r>:
 800c558:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c55a:	2900      	cmp	r1, #0
 800c55c:	d044      	beq.n	800c5e8 <_free_r+0x90>
 800c55e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c562:	9001      	str	r0, [sp, #4]
 800c564:	2b00      	cmp	r3, #0
 800c566:	f1a1 0404 	sub.w	r4, r1, #4
 800c56a:	bfb8      	it	lt
 800c56c:	18e4      	addlt	r4, r4, r3
 800c56e:	f000 f935 	bl	800c7dc <__malloc_lock>
 800c572:	4a1e      	ldr	r2, [pc, #120]	; (800c5ec <_free_r+0x94>)
 800c574:	9801      	ldr	r0, [sp, #4]
 800c576:	6813      	ldr	r3, [r2, #0]
 800c578:	b933      	cbnz	r3, 800c588 <_free_r+0x30>
 800c57a:	6063      	str	r3, [r4, #4]
 800c57c:	6014      	str	r4, [r2, #0]
 800c57e:	b003      	add	sp, #12
 800c580:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c584:	f000 b930 	b.w	800c7e8 <__malloc_unlock>
 800c588:	42a3      	cmp	r3, r4
 800c58a:	d908      	bls.n	800c59e <_free_r+0x46>
 800c58c:	6825      	ldr	r5, [r4, #0]
 800c58e:	1961      	adds	r1, r4, r5
 800c590:	428b      	cmp	r3, r1
 800c592:	bf01      	itttt	eq
 800c594:	6819      	ldreq	r1, [r3, #0]
 800c596:	685b      	ldreq	r3, [r3, #4]
 800c598:	1949      	addeq	r1, r1, r5
 800c59a:	6021      	streq	r1, [r4, #0]
 800c59c:	e7ed      	b.n	800c57a <_free_r+0x22>
 800c59e:	461a      	mov	r2, r3
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	b10b      	cbz	r3, 800c5a8 <_free_r+0x50>
 800c5a4:	42a3      	cmp	r3, r4
 800c5a6:	d9fa      	bls.n	800c59e <_free_r+0x46>
 800c5a8:	6811      	ldr	r1, [r2, #0]
 800c5aa:	1855      	adds	r5, r2, r1
 800c5ac:	42a5      	cmp	r5, r4
 800c5ae:	d10b      	bne.n	800c5c8 <_free_r+0x70>
 800c5b0:	6824      	ldr	r4, [r4, #0]
 800c5b2:	4421      	add	r1, r4
 800c5b4:	1854      	adds	r4, r2, r1
 800c5b6:	42a3      	cmp	r3, r4
 800c5b8:	6011      	str	r1, [r2, #0]
 800c5ba:	d1e0      	bne.n	800c57e <_free_r+0x26>
 800c5bc:	681c      	ldr	r4, [r3, #0]
 800c5be:	685b      	ldr	r3, [r3, #4]
 800c5c0:	6053      	str	r3, [r2, #4]
 800c5c2:	4421      	add	r1, r4
 800c5c4:	6011      	str	r1, [r2, #0]
 800c5c6:	e7da      	b.n	800c57e <_free_r+0x26>
 800c5c8:	d902      	bls.n	800c5d0 <_free_r+0x78>
 800c5ca:	230c      	movs	r3, #12
 800c5cc:	6003      	str	r3, [r0, #0]
 800c5ce:	e7d6      	b.n	800c57e <_free_r+0x26>
 800c5d0:	6825      	ldr	r5, [r4, #0]
 800c5d2:	1961      	adds	r1, r4, r5
 800c5d4:	428b      	cmp	r3, r1
 800c5d6:	bf04      	itt	eq
 800c5d8:	6819      	ldreq	r1, [r3, #0]
 800c5da:	685b      	ldreq	r3, [r3, #4]
 800c5dc:	6063      	str	r3, [r4, #4]
 800c5de:	bf04      	itt	eq
 800c5e0:	1949      	addeq	r1, r1, r5
 800c5e2:	6021      	streq	r1, [r4, #0]
 800c5e4:	6054      	str	r4, [r2, #4]
 800c5e6:	e7ca      	b.n	800c57e <_free_r+0x26>
 800c5e8:	b003      	add	sp, #12
 800c5ea:	bd30      	pop	{r4, r5, pc}
 800c5ec:	20007b14 	.word	0x20007b14

0800c5f0 <cleanup_glue>:
 800c5f0:	b538      	push	{r3, r4, r5, lr}
 800c5f2:	460c      	mov	r4, r1
 800c5f4:	6809      	ldr	r1, [r1, #0]
 800c5f6:	4605      	mov	r5, r0
 800c5f8:	b109      	cbz	r1, 800c5fe <cleanup_glue+0xe>
 800c5fa:	f7ff fff9 	bl	800c5f0 <cleanup_glue>
 800c5fe:	4621      	mov	r1, r4
 800c600:	4628      	mov	r0, r5
 800c602:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c606:	f7ff bfa7 	b.w	800c558 <_free_r>
	...

0800c60c <_reclaim_reent>:
 800c60c:	4b2c      	ldr	r3, [pc, #176]	; (800c6c0 <_reclaim_reent+0xb4>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4283      	cmp	r3, r0
 800c612:	b570      	push	{r4, r5, r6, lr}
 800c614:	4604      	mov	r4, r0
 800c616:	d051      	beq.n	800c6bc <_reclaim_reent+0xb0>
 800c618:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c61a:	b143      	cbz	r3, 800c62e <_reclaim_reent+0x22>
 800c61c:	68db      	ldr	r3, [r3, #12]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d14a      	bne.n	800c6b8 <_reclaim_reent+0xac>
 800c622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c624:	6819      	ldr	r1, [r3, #0]
 800c626:	b111      	cbz	r1, 800c62e <_reclaim_reent+0x22>
 800c628:	4620      	mov	r0, r4
 800c62a:	f7ff ff95 	bl	800c558 <_free_r>
 800c62e:	6961      	ldr	r1, [r4, #20]
 800c630:	b111      	cbz	r1, 800c638 <_reclaim_reent+0x2c>
 800c632:	4620      	mov	r0, r4
 800c634:	f7ff ff90 	bl	800c558 <_free_r>
 800c638:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c63a:	b111      	cbz	r1, 800c642 <_reclaim_reent+0x36>
 800c63c:	4620      	mov	r0, r4
 800c63e:	f7ff ff8b 	bl	800c558 <_free_r>
 800c642:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c644:	b111      	cbz	r1, 800c64c <_reclaim_reent+0x40>
 800c646:	4620      	mov	r0, r4
 800c648:	f7ff ff86 	bl	800c558 <_free_r>
 800c64c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c64e:	b111      	cbz	r1, 800c656 <_reclaim_reent+0x4a>
 800c650:	4620      	mov	r0, r4
 800c652:	f7ff ff81 	bl	800c558 <_free_r>
 800c656:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c658:	b111      	cbz	r1, 800c660 <_reclaim_reent+0x54>
 800c65a:	4620      	mov	r0, r4
 800c65c:	f7ff ff7c 	bl	800c558 <_free_r>
 800c660:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c662:	b111      	cbz	r1, 800c66a <_reclaim_reent+0x5e>
 800c664:	4620      	mov	r0, r4
 800c666:	f7ff ff77 	bl	800c558 <_free_r>
 800c66a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c66c:	b111      	cbz	r1, 800c674 <_reclaim_reent+0x68>
 800c66e:	4620      	mov	r0, r4
 800c670:	f7ff ff72 	bl	800c558 <_free_r>
 800c674:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c676:	b111      	cbz	r1, 800c67e <_reclaim_reent+0x72>
 800c678:	4620      	mov	r0, r4
 800c67a:	f7ff ff6d 	bl	800c558 <_free_r>
 800c67e:	69a3      	ldr	r3, [r4, #24]
 800c680:	b1e3      	cbz	r3, 800c6bc <_reclaim_reent+0xb0>
 800c682:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c684:	4620      	mov	r0, r4
 800c686:	4798      	blx	r3
 800c688:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c68a:	b1b9      	cbz	r1, 800c6bc <_reclaim_reent+0xb0>
 800c68c:	4620      	mov	r0, r4
 800c68e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c692:	f7ff bfad 	b.w	800c5f0 <cleanup_glue>
 800c696:	5949      	ldr	r1, [r1, r5]
 800c698:	b941      	cbnz	r1, 800c6ac <_reclaim_reent+0xa0>
 800c69a:	3504      	adds	r5, #4
 800c69c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c69e:	2d80      	cmp	r5, #128	; 0x80
 800c6a0:	68d9      	ldr	r1, [r3, #12]
 800c6a2:	d1f8      	bne.n	800c696 <_reclaim_reent+0x8a>
 800c6a4:	4620      	mov	r0, r4
 800c6a6:	f7ff ff57 	bl	800c558 <_free_r>
 800c6aa:	e7ba      	b.n	800c622 <_reclaim_reent+0x16>
 800c6ac:	680e      	ldr	r6, [r1, #0]
 800c6ae:	4620      	mov	r0, r4
 800c6b0:	f7ff ff52 	bl	800c558 <_free_r>
 800c6b4:	4631      	mov	r1, r6
 800c6b6:	e7ef      	b.n	800c698 <_reclaim_reent+0x8c>
 800c6b8:	2500      	movs	r5, #0
 800c6ba:	e7ef      	b.n	800c69c <_reclaim_reent+0x90>
 800c6bc:	bd70      	pop	{r4, r5, r6, pc}
 800c6be:	bf00      	nop
 800c6c0:	20000014 	.word	0x20000014

0800c6c4 <_strtol_l.constprop.0>:
 800c6c4:	2b01      	cmp	r3, #1
 800c6c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6ca:	d001      	beq.n	800c6d0 <_strtol_l.constprop.0+0xc>
 800c6cc:	2b24      	cmp	r3, #36	; 0x24
 800c6ce:	d906      	bls.n	800c6de <_strtol_l.constprop.0+0x1a>
 800c6d0:	f7ff ff02 	bl	800c4d8 <__errno>
 800c6d4:	2316      	movs	r3, #22
 800c6d6:	6003      	str	r3, [r0, #0]
 800c6d8:	2000      	movs	r0, #0
 800c6da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6de:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c7c4 <_strtol_l.constprop.0+0x100>
 800c6e2:	460d      	mov	r5, r1
 800c6e4:	462e      	mov	r6, r5
 800c6e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c6ea:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c6ee:	f017 0708 	ands.w	r7, r7, #8
 800c6f2:	d1f7      	bne.n	800c6e4 <_strtol_l.constprop.0+0x20>
 800c6f4:	2c2d      	cmp	r4, #45	; 0x2d
 800c6f6:	d132      	bne.n	800c75e <_strtol_l.constprop.0+0x9a>
 800c6f8:	782c      	ldrb	r4, [r5, #0]
 800c6fa:	2701      	movs	r7, #1
 800c6fc:	1cb5      	adds	r5, r6, #2
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d05b      	beq.n	800c7ba <_strtol_l.constprop.0+0xf6>
 800c702:	2b10      	cmp	r3, #16
 800c704:	d109      	bne.n	800c71a <_strtol_l.constprop.0+0x56>
 800c706:	2c30      	cmp	r4, #48	; 0x30
 800c708:	d107      	bne.n	800c71a <_strtol_l.constprop.0+0x56>
 800c70a:	782c      	ldrb	r4, [r5, #0]
 800c70c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c710:	2c58      	cmp	r4, #88	; 0x58
 800c712:	d14d      	bne.n	800c7b0 <_strtol_l.constprop.0+0xec>
 800c714:	786c      	ldrb	r4, [r5, #1]
 800c716:	2310      	movs	r3, #16
 800c718:	3502      	adds	r5, #2
 800c71a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c71e:	f108 38ff 	add.w	r8, r8, #4294967295
 800c722:	f04f 0c00 	mov.w	ip, #0
 800c726:	fbb8 f9f3 	udiv	r9, r8, r3
 800c72a:	4666      	mov	r6, ip
 800c72c:	fb03 8a19 	mls	sl, r3, r9, r8
 800c730:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c734:	f1be 0f09 	cmp.w	lr, #9
 800c738:	d816      	bhi.n	800c768 <_strtol_l.constprop.0+0xa4>
 800c73a:	4674      	mov	r4, lr
 800c73c:	42a3      	cmp	r3, r4
 800c73e:	dd24      	ble.n	800c78a <_strtol_l.constprop.0+0xc6>
 800c740:	f1bc 0f00 	cmp.w	ip, #0
 800c744:	db1e      	blt.n	800c784 <_strtol_l.constprop.0+0xc0>
 800c746:	45b1      	cmp	r9, r6
 800c748:	d31c      	bcc.n	800c784 <_strtol_l.constprop.0+0xc0>
 800c74a:	d101      	bne.n	800c750 <_strtol_l.constprop.0+0x8c>
 800c74c:	45a2      	cmp	sl, r4
 800c74e:	db19      	blt.n	800c784 <_strtol_l.constprop.0+0xc0>
 800c750:	fb06 4603 	mla	r6, r6, r3, r4
 800c754:	f04f 0c01 	mov.w	ip, #1
 800c758:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c75c:	e7e8      	b.n	800c730 <_strtol_l.constprop.0+0x6c>
 800c75e:	2c2b      	cmp	r4, #43	; 0x2b
 800c760:	bf04      	itt	eq
 800c762:	782c      	ldrbeq	r4, [r5, #0]
 800c764:	1cb5      	addeq	r5, r6, #2
 800c766:	e7ca      	b.n	800c6fe <_strtol_l.constprop.0+0x3a>
 800c768:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c76c:	f1be 0f19 	cmp.w	lr, #25
 800c770:	d801      	bhi.n	800c776 <_strtol_l.constprop.0+0xb2>
 800c772:	3c37      	subs	r4, #55	; 0x37
 800c774:	e7e2      	b.n	800c73c <_strtol_l.constprop.0+0x78>
 800c776:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c77a:	f1be 0f19 	cmp.w	lr, #25
 800c77e:	d804      	bhi.n	800c78a <_strtol_l.constprop.0+0xc6>
 800c780:	3c57      	subs	r4, #87	; 0x57
 800c782:	e7db      	b.n	800c73c <_strtol_l.constprop.0+0x78>
 800c784:	f04f 3cff 	mov.w	ip, #4294967295
 800c788:	e7e6      	b.n	800c758 <_strtol_l.constprop.0+0x94>
 800c78a:	f1bc 0f00 	cmp.w	ip, #0
 800c78e:	da05      	bge.n	800c79c <_strtol_l.constprop.0+0xd8>
 800c790:	2322      	movs	r3, #34	; 0x22
 800c792:	6003      	str	r3, [r0, #0]
 800c794:	4646      	mov	r6, r8
 800c796:	b942      	cbnz	r2, 800c7aa <_strtol_l.constprop.0+0xe6>
 800c798:	4630      	mov	r0, r6
 800c79a:	e79e      	b.n	800c6da <_strtol_l.constprop.0+0x16>
 800c79c:	b107      	cbz	r7, 800c7a0 <_strtol_l.constprop.0+0xdc>
 800c79e:	4276      	negs	r6, r6
 800c7a0:	2a00      	cmp	r2, #0
 800c7a2:	d0f9      	beq.n	800c798 <_strtol_l.constprop.0+0xd4>
 800c7a4:	f1bc 0f00 	cmp.w	ip, #0
 800c7a8:	d000      	beq.n	800c7ac <_strtol_l.constprop.0+0xe8>
 800c7aa:	1e69      	subs	r1, r5, #1
 800c7ac:	6011      	str	r1, [r2, #0]
 800c7ae:	e7f3      	b.n	800c798 <_strtol_l.constprop.0+0xd4>
 800c7b0:	2430      	movs	r4, #48	; 0x30
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d1b1      	bne.n	800c71a <_strtol_l.constprop.0+0x56>
 800c7b6:	2308      	movs	r3, #8
 800c7b8:	e7af      	b.n	800c71a <_strtol_l.constprop.0+0x56>
 800c7ba:	2c30      	cmp	r4, #48	; 0x30
 800c7bc:	d0a5      	beq.n	800c70a <_strtol_l.constprop.0+0x46>
 800c7be:	230a      	movs	r3, #10
 800c7c0:	e7ab      	b.n	800c71a <_strtol_l.constprop.0+0x56>
 800c7c2:	bf00      	nop
 800c7c4:	0800c9c1 	.word	0x0800c9c1

0800c7c8 <strtol>:
 800c7c8:	4613      	mov	r3, r2
 800c7ca:	460a      	mov	r2, r1
 800c7cc:	4601      	mov	r1, r0
 800c7ce:	4802      	ldr	r0, [pc, #8]	; (800c7d8 <strtol+0x10>)
 800c7d0:	6800      	ldr	r0, [r0, #0]
 800c7d2:	f7ff bf77 	b.w	800c6c4 <_strtol_l.constprop.0>
 800c7d6:	bf00      	nop
 800c7d8:	20000014 	.word	0x20000014

0800c7dc <__malloc_lock>:
 800c7dc:	4801      	ldr	r0, [pc, #4]	; (800c7e4 <__malloc_lock+0x8>)
 800c7de:	f7f5 bee6 	b.w	80025ae <__retarget_lock_acquire_recursive>
 800c7e2:	bf00      	nop
 800c7e4:	200007bc 	.word	0x200007bc

0800c7e8 <__malloc_unlock>:
 800c7e8:	4801      	ldr	r0, [pc, #4]	; (800c7f0 <__malloc_unlock+0x8>)
 800c7ea:	f7f5 bef4 	b.w	80025d6 <__retarget_lock_release_recursive>
 800c7ee:	bf00      	nop
 800c7f0:	200007bc 	.word	0x200007bc

0800c7f4 <_init>:
 800c7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7f6:	bf00      	nop
 800c7f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7fa:	bc08      	pop	{r3}
 800c7fc:	469e      	mov	lr, r3
 800c7fe:	4770      	bx	lr

0800c800 <_fini>:
 800c800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c802:	bf00      	nop
 800c804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c806:	bc08      	pop	{r3}
 800c808:	469e      	mov	lr, r3
 800c80a:	4770      	bx	lr
