
I4_BCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f32c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000684  0800f4cc  0800f4cc  0001f4cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb50  0800fb50  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb50  0800fb50  0001fb50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb58  0800fb58  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb58  0800fb58  0001fb58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fb5c  0800fb5c  0001fb5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800fb60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b5b0  20000074  0800fbd4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000b624  0800fbd4  0002b624  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030bf6  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006f6e  00000000  00000000  00050c9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002670  00000000  00000000  00057c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002390  00000000  00000000  0005a278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021979  00000000  00000000  0005c608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00038d23  00000000  00000000  0007df81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b52a4  00000000  00000000  000b6ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016bf48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a250  00000000  00000000  0016bf98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f4b4 	.word	0x0800f4b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800f4b4 	.word	0x0800f4b4

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2uiz>:
 800097c:	004a      	lsls	r2, r1, #1
 800097e:	d211      	bcs.n	80009a4 <__aeabi_d2uiz+0x28>
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d211      	bcs.n	80009aa <__aeabi_d2uiz+0x2e>
 8000986:	d50d      	bpl.n	80009a4 <__aeabi_d2uiz+0x28>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d40e      	bmi.n	80009b0 <__aeabi_d2uiz+0x34>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	fa23 f002 	lsr.w	r0, r3, r2
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d102      	bne.n	80009b6 <__aeabi_d2uiz+0x3a>
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	4770      	bx	lr
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	4770      	bx	lr

080009bc <__aeabi_uldivmod>:
 80009bc:	b953      	cbnz	r3, 80009d4 <__aeabi_uldivmod+0x18>
 80009be:	b94a      	cbnz	r2, 80009d4 <__aeabi_uldivmod+0x18>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bf08      	it	eq
 80009c4:	2800      	cmpeq	r0, #0
 80009c6:	bf1c      	itt	ne
 80009c8:	f04f 31ff 	movne.w	r1, #4294967295
 80009cc:	f04f 30ff 	movne.w	r0, #4294967295
 80009d0:	f000 b974 	b.w	8000cbc <__aeabi_idiv0>
 80009d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009dc:	f000 f806 	bl	80009ec <__udivmoddi4>
 80009e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e8:	b004      	add	sp, #16
 80009ea:	4770      	bx	lr

080009ec <__udivmoddi4>:
 80009ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f0:	9d08      	ldr	r5, [sp, #32]
 80009f2:	4604      	mov	r4, r0
 80009f4:	468e      	mov	lr, r1
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d14d      	bne.n	8000a96 <__udivmoddi4+0xaa>
 80009fa:	428a      	cmp	r2, r1
 80009fc:	4694      	mov	ip, r2
 80009fe:	d969      	bls.n	8000ad4 <__udivmoddi4+0xe8>
 8000a00:	fab2 f282 	clz	r2, r2
 8000a04:	b152      	cbz	r2, 8000a1c <__udivmoddi4+0x30>
 8000a06:	fa01 f302 	lsl.w	r3, r1, r2
 8000a0a:	f1c2 0120 	rsb	r1, r2, #32
 8000a0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a16:	ea41 0e03 	orr.w	lr, r1, r3
 8000a1a:	4094      	lsls	r4, r2
 8000a1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a20:	0c21      	lsrs	r1, r4, #16
 8000a22:	fbbe f6f8 	udiv	r6, lr, r8
 8000a26:	fa1f f78c 	uxth.w	r7, ip
 8000a2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a32:	fb06 f107 	mul.w	r1, r6, r7
 8000a36:	4299      	cmp	r1, r3
 8000a38:	d90a      	bls.n	8000a50 <__udivmoddi4+0x64>
 8000a3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a42:	f080 811f 	bcs.w	8000c84 <__udivmoddi4+0x298>
 8000a46:	4299      	cmp	r1, r3
 8000a48:	f240 811c 	bls.w	8000c84 <__udivmoddi4+0x298>
 8000a4c:	3e02      	subs	r6, #2
 8000a4e:	4463      	add	r3, ip
 8000a50:	1a5b      	subs	r3, r3, r1
 8000a52:	b2a4      	uxth	r4, r4
 8000a54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a58:	fb08 3310 	mls	r3, r8, r0, r3
 8000a5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a60:	fb00 f707 	mul.w	r7, r0, r7
 8000a64:	42a7      	cmp	r7, r4
 8000a66:	d90a      	bls.n	8000a7e <__udivmoddi4+0x92>
 8000a68:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a70:	f080 810a 	bcs.w	8000c88 <__udivmoddi4+0x29c>
 8000a74:	42a7      	cmp	r7, r4
 8000a76:	f240 8107 	bls.w	8000c88 <__udivmoddi4+0x29c>
 8000a7a:	4464      	add	r4, ip
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a82:	1be4      	subs	r4, r4, r7
 8000a84:	2600      	movs	r6, #0
 8000a86:	b11d      	cbz	r5, 8000a90 <__udivmoddi4+0xa4>
 8000a88:	40d4      	lsrs	r4, r2
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	428b      	cmp	r3, r1
 8000a98:	d909      	bls.n	8000aae <__udivmoddi4+0xc2>
 8000a9a:	2d00      	cmp	r5, #0
 8000a9c:	f000 80ef 	beq.w	8000c7e <__udivmoddi4+0x292>
 8000aa0:	2600      	movs	r6, #0
 8000aa2:	e9c5 0100 	strd	r0, r1, [r5]
 8000aa6:	4630      	mov	r0, r6
 8000aa8:	4631      	mov	r1, r6
 8000aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aae:	fab3 f683 	clz	r6, r3
 8000ab2:	2e00      	cmp	r6, #0
 8000ab4:	d14a      	bne.n	8000b4c <__udivmoddi4+0x160>
 8000ab6:	428b      	cmp	r3, r1
 8000ab8:	d302      	bcc.n	8000ac0 <__udivmoddi4+0xd4>
 8000aba:	4282      	cmp	r2, r0
 8000abc:	f200 80f9 	bhi.w	8000cb2 <__udivmoddi4+0x2c6>
 8000ac0:	1a84      	subs	r4, r0, r2
 8000ac2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	469e      	mov	lr, r3
 8000aca:	2d00      	cmp	r5, #0
 8000acc:	d0e0      	beq.n	8000a90 <__udivmoddi4+0xa4>
 8000ace:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ad2:	e7dd      	b.n	8000a90 <__udivmoddi4+0xa4>
 8000ad4:	b902      	cbnz	r2, 8000ad8 <__udivmoddi4+0xec>
 8000ad6:	deff      	udf	#255	; 0xff
 8000ad8:	fab2 f282 	clz	r2, r2
 8000adc:	2a00      	cmp	r2, #0
 8000ade:	f040 8092 	bne.w	8000c06 <__udivmoddi4+0x21a>
 8000ae2:	eba1 010c 	sub.w	r1, r1, ip
 8000ae6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aea:	fa1f fe8c 	uxth.w	lr, ip
 8000aee:	2601      	movs	r6, #1
 8000af0:	0c20      	lsrs	r0, r4, #16
 8000af2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000af6:	fb07 1113 	mls	r1, r7, r3, r1
 8000afa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000afe:	fb0e f003 	mul.w	r0, lr, r3
 8000b02:	4288      	cmp	r0, r1
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0x12c>
 8000b06:	eb1c 0101 	adds.w	r1, ip, r1
 8000b0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0x12a>
 8000b10:	4288      	cmp	r0, r1
 8000b12:	f200 80cb 	bhi.w	8000cac <__udivmoddi4+0x2c0>
 8000b16:	4643      	mov	r3, r8
 8000b18:	1a09      	subs	r1, r1, r0
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b20:	fb07 1110 	mls	r1, r7, r0, r1
 8000b24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b28:	fb0e fe00 	mul.w	lr, lr, r0
 8000b2c:	45a6      	cmp	lr, r4
 8000b2e:	d908      	bls.n	8000b42 <__udivmoddi4+0x156>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b38:	d202      	bcs.n	8000b40 <__udivmoddi4+0x154>
 8000b3a:	45a6      	cmp	lr, r4
 8000b3c:	f200 80bb 	bhi.w	8000cb6 <__udivmoddi4+0x2ca>
 8000b40:	4608      	mov	r0, r1
 8000b42:	eba4 040e 	sub.w	r4, r4, lr
 8000b46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b4a:	e79c      	b.n	8000a86 <__udivmoddi4+0x9a>
 8000b4c:	f1c6 0720 	rsb	r7, r6, #32
 8000b50:	40b3      	lsls	r3, r6
 8000b52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b62:	431c      	orrs	r4, r3
 8000b64:	40f9      	lsrs	r1, r7
 8000b66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b72:	0c20      	lsrs	r0, r4, #16
 8000b74:	fa1f fe8c 	uxth.w	lr, ip
 8000b78:	fb09 1118 	mls	r1, r9, r8, r1
 8000b7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b80:	fb08 f00e 	mul.w	r0, r8, lr
 8000b84:	4288      	cmp	r0, r1
 8000b86:	fa02 f206 	lsl.w	r2, r2, r6
 8000b8a:	d90b      	bls.n	8000ba4 <__udivmoddi4+0x1b8>
 8000b8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b94:	f080 8088 	bcs.w	8000ca8 <__udivmoddi4+0x2bc>
 8000b98:	4288      	cmp	r0, r1
 8000b9a:	f240 8085 	bls.w	8000ca8 <__udivmoddi4+0x2bc>
 8000b9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ba2:	4461      	add	r1, ip
 8000ba4:	1a09      	subs	r1, r1, r0
 8000ba6:	b2a4      	uxth	r4, r4
 8000ba8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bac:	fb09 1110 	mls	r1, r9, r0, r1
 8000bb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb8:	458e      	cmp	lr, r1
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x1e2>
 8000bbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bc4:	d26c      	bcs.n	8000ca0 <__udivmoddi4+0x2b4>
 8000bc6:	458e      	cmp	lr, r1
 8000bc8:	d96a      	bls.n	8000ca0 <__udivmoddi4+0x2b4>
 8000bca:	3802      	subs	r0, #2
 8000bcc:	4461      	add	r1, ip
 8000bce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000bd6:	eba1 010e 	sub.w	r1, r1, lr
 8000bda:	42a1      	cmp	r1, r4
 8000bdc:	46c8      	mov	r8, r9
 8000bde:	46a6      	mov	lr, r4
 8000be0:	d356      	bcc.n	8000c90 <__udivmoddi4+0x2a4>
 8000be2:	d053      	beq.n	8000c8c <__udivmoddi4+0x2a0>
 8000be4:	b15d      	cbz	r5, 8000bfe <__udivmoddi4+0x212>
 8000be6:	ebb3 0208 	subs.w	r2, r3, r8
 8000bea:	eb61 010e 	sbc.w	r1, r1, lr
 8000bee:	fa01 f707 	lsl.w	r7, r1, r7
 8000bf2:	fa22 f306 	lsr.w	r3, r2, r6
 8000bf6:	40f1      	lsrs	r1, r6
 8000bf8:	431f      	orrs	r7, r3
 8000bfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000bfe:	2600      	movs	r6, #0
 8000c00:	4631      	mov	r1, r6
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	f1c2 0320 	rsb	r3, r2, #32
 8000c0a:	40d8      	lsrs	r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	fa21 f303 	lsr.w	r3, r1, r3
 8000c14:	4091      	lsls	r1, r2
 8000c16:	4301      	orrs	r1, r0
 8000c18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1c:	fa1f fe8c 	uxth.w	lr, ip
 8000c20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c24:	fb07 3610 	mls	r6, r7, r0, r3
 8000c28:	0c0b      	lsrs	r3, r1, #16
 8000c2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c32:	429e      	cmp	r6, r3
 8000c34:	fa04 f402 	lsl.w	r4, r4, r2
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x260>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c42:	d22f      	bcs.n	8000ca4 <__udivmoddi4+0x2b8>
 8000c44:	429e      	cmp	r6, r3
 8000c46:	d92d      	bls.n	8000ca4 <__udivmoddi4+0x2b8>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1b9b      	subs	r3, r3, r6
 8000c4e:	b289      	uxth	r1, r1
 8000c50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c54:	fb07 3316 	mls	r3, r7, r6, r3
 8000c58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c60:	428b      	cmp	r3, r1
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x28a>
 8000c64:	eb1c 0101 	adds.w	r1, ip, r1
 8000c68:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c6c:	d216      	bcs.n	8000c9c <__udivmoddi4+0x2b0>
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d914      	bls.n	8000c9c <__udivmoddi4+0x2b0>
 8000c72:	3e02      	subs	r6, #2
 8000c74:	4461      	add	r1, ip
 8000c76:	1ac9      	subs	r1, r1, r3
 8000c78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c7c:	e738      	b.n	8000af0 <__udivmoddi4+0x104>
 8000c7e:	462e      	mov	r6, r5
 8000c80:	4628      	mov	r0, r5
 8000c82:	e705      	b.n	8000a90 <__udivmoddi4+0xa4>
 8000c84:	4606      	mov	r6, r0
 8000c86:	e6e3      	b.n	8000a50 <__udivmoddi4+0x64>
 8000c88:	4618      	mov	r0, r3
 8000c8a:	e6f8      	b.n	8000a7e <__udivmoddi4+0x92>
 8000c8c:	454b      	cmp	r3, r9
 8000c8e:	d2a9      	bcs.n	8000be4 <__udivmoddi4+0x1f8>
 8000c90:	ebb9 0802 	subs.w	r8, r9, r2
 8000c94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c98:	3801      	subs	r0, #1
 8000c9a:	e7a3      	b.n	8000be4 <__udivmoddi4+0x1f8>
 8000c9c:	4646      	mov	r6, r8
 8000c9e:	e7ea      	b.n	8000c76 <__udivmoddi4+0x28a>
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	e794      	b.n	8000bce <__udivmoddi4+0x1e2>
 8000ca4:	4640      	mov	r0, r8
 8000ca6:	e7d1      	b.n	8000c4c <__udivmoddi4+0x260>
 8000ca8:	46d0      	mov	r8, sl
 8000caa:	e77b      	b.n	8000ba4 <__udivmoddi4+0x1b8>
 8000cac:	3b02      	subs	r3, #2
 8000cae:	4461      	add	r1, ip
 8000cb0:	e732      	b.n	8000b18 <__udivmoddi4+0x12c>
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	e709      	b.n	8000aca <__udivmoddi4+0xde>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	e742      	b.n	8000b42 <__udivmoddi4+0x156>

08000cbc <__aeabi_idiv0>:
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <BtcInit>:
StdReturnType BtcInit();
StdReturnType BtcRxVal();
StdReturnType BtcEnableUart();

StdReturnType BtcInit()
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

	BtcReceivedDataOnBluetooth 	= STD_LOW;
 8000cc4:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <BtcInit+0x18>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	701a      	strb	r2, [r3, #0]

	return E_OK;
 8000cca:	2300      	movs	r3, #0

}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000090 	.word	0x20000090

08000cdc <BtcRxVal>:

StdReturnType BtcRxVal()
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

	if(BtcReceivedDataOnBluetooth >= BTC_RX_HVAC_TEMPERATUREVALUE_MIN && BtcReceivedDataOnBluetooth <= BTC_RX_HVAC_TEMPERATUREVALUE_MAX)
 8000ce0:	4bec      	ldr	r3, [pc, #944]	; (8001094 <BtcRxVal+0x3b8>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b95      	cmp	r3, #149	; 0x95
 8000ce6:	d908      	bls.n	8000cfa <BtcRxVal+0x1e>
 8000ce8:	4bea      	ldr	r3, [pc, #936]	; (8001094 <BtcRxVal+0x3b8>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2ba6      	cmp	r3, #166	; 0xa6
 8000cee:	d804      	bhi.n	8000cfa <BtcRxVal+0x1e>
	{

		Btc_TemperatureValue = BtcReceivedDataOnBluetooth;
 8000cf0:	4be8      	ldr	r3, [pc, #928]	; (8001094 <BtcRxVal+0x3b8>)
 8000cf2:	781a      	ldrb	r2, [r3, #0]
 8000cf4:	4be8      	ldr	r3, [pc, #928]	; (8001098 <BtcRxVal+0x3bc>)
 8000cf6:	701a      	strb	r2, [r3, #0]
 8000cf8:	e00b      	b.n	8000d12 <BtcRxVal+0x36>

	}
	else if(BtcReceivedDataOnBluetooth >= BTC_RX_HVAC_FANVALUE_MIN && BtcReceivedDataOnBluetooth <= BTC_RX_HVAC_FANVALUE_MAX)
 8000cfa:	4be6      	ldr	r3, [pc, #920]	; (8001094 <BtcRxVal+0x3b8>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2ba9      	cmp	r3, #169	; 0xa9
 8000d00:	d907      	bls.n	8000d12 <BtcRxVal+0x36>
 8000d02:	4be4      	ldr	r3, [pc, #912]	; (8001094 <BtcRxVal+0x3b8>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2bb1      	cmp	r3, #177	; 0xb1
 8000d08:	d803      	bhi.n	8000d12 <BtcRxVal+0x36>
	{

		Btc_FanValue = BtcReceivedDataOnBluetooth;
 8000d0a:	4be2      	ldr	r3, [pc, #904]	; (8001094 <BtcRxVal+0x3b8>)
 8000d0c:	781a      	ldrb	r2, [r3, #0]
 8000d0e:	4be3      	ldr	r3, [pc, #908]	; (800109c <BtcRxVal+0x3c0>)
 8000d10:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	switch(BtcReceivedDataOnBluetooth)
 8000d12:	4be0      	ldr	r3, [pc, #896]	; (8001094 <BtcRxVal+0x3b8>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	2bd5      	cmp	r3, #213	; 0xd5
 8000d1a:	f200 8268 	bhi.w	80011ee <BtcRxVal+0x512>
 8000d1e:	a201      	add	r2, pc, #4	; (adr r2, 8000d24 <BtcRxVal+0x48>)
 8000d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d24:	080010ad 	.word	0x080010ad
 8000d28:	080010b5 	.word	0x080010b5
 8000d2c:	080010bd 	.word	0x080010bd
 8000d30:	080010c5 	.word	0x080010c5
 8000d34:	080010cd 	.word	0x080010cd
 8000d38:	080010d5 	.word	0x080010d5
 8000d3c:	080010dd 	.word	0x080010dd
 8000d40:	080010e5 	.word	0x080010e5
 8000d44:	080010ed 	.word	0x080010ed
 8000d48:	080010f5 	.word	0x080010f5
 8000d4c:	080010fd 	.word	0x080010fd
 8000d50:	08001105 	.word	0x08001105
 8000d54:	0800110d 	.word	0x0800110d
 8000d58:	08001115 	.word	0x08001115
 8000d5c:	0800111d 	.word	0x0800111d
 8000d60:	08001125 	.word	0x08001125
 8000d64:	0800112d 	.word	0x0800112d
 8000d68:	08001135 	.word	0x08001135
 8000d6c:	0800113d 	.word	0x0800113d
 8000d70:	08001145 	.word	0x08001145
 8000d74:	080011ef 	.word	0x080011ef
 8000d78:	080011ef 	.word	0x080011ef
 8000d7c:	080011ef 	.word	0x080011ef
 8000d80:	080011ef 	.word	0x080011ef
 8000d84:	080011ef 	.word	0x080011ef
 8000d88:	080011ef 	.word	0x080011ef
 8000d8c:	080011ef 	.word	0x080011ef
 8000d90:	080011ef 	.word	0x080011ef
 8000d94:	080011ef 	.word	0x080011ef
 8000d98:	080011ef 	.word	0x080011ef
 8000d9c:	080011ef 	.word	0x080011ef
 8000da0:	080011ef 	.word	0x080011ef
 8000da4:	080011ef 	.word	0x080011ef
 8000da8:	080011ef 	.word	0x080011ef
 8000dac:	080011ef 	.word	0x080011ef
 8000db0:	080011ef 	.word	0x080011ef
 8000db4:	080011ef 	.word	0x080011ef
 8000db8:	080011ef 	.word	0x080011ef
 8000dbc:	080011ef 	.word	0x080011ef
 8000dc0:	080011ef 	.word	0x080011ef
 8000dc4:	080011ef 	.word	0x080011ef
 8000dc8:	080011ef 	.word	0x080011ef
 8000dcc:	080011ef 	.word	0x080011ef
 8000dd0:	080011ef 	.word	0x080011ef
 8000dd4:	080011ef 	.word	0x080011ef
 8000dd8:	080011ef 	.word	0x080011ef
 8000ddc:	080011ef 	.word	0x080011ef
 8000de0:	080011ef 	.word	0x080011ef
 8000de4:	080011ef 	.word	0x080011ef
 8000de8:	080011ef 	.word	0x080011ef
 8000dec:	080011ef 	.word	0x080011ef
 8000df0:	080011ef 	.word	0x080011ef
 8000df4:	080011ef 	.word	0x080011ef
 8000df8:	080011ef 	.word	0x080011ef
 8000dfc:	080011ef 	.word	0x080011ef
 8000e00:	080011ef 	.word	0x080011ef
 8000e04:	080011ef 	.word	0x080011ef
 8000e08:	080011ef 	.word	0x080011ef
 8000e0c:	080011ef 	.word	0x080011ef
 8000e10:	080011ef 	.word	0x080011ef
 8000e14:	080011ef 	.word	0x080011ef
 8000e18:	080011ef 	.word	0x080011ef
 8000e1c:	080011ef 	.word	0x080011ef
 8000e20:	080011ef 	.word	0x080011ef
 8000e24:	080011ef 	.word	0x080011ef
 8000e28:	080011ef 	.word	0x080011ef
 8000e2c:	080011ef 	.word	0x080011ef
 8000e30:	080011ef 	.word	0x080011ef
 8000e34:	080011ef 	.word	0x080011ef
 8000e38:	080011ef 	.word	0x080011ef
 8000e3c:	080011ef 	.word	0x080011ef
 8000e40:	080011ef 	.word	0x080011ef
 8000e44:	080011ef 	.word	0x080011ef
 8000e48:	080011ef 	.word	0x080011ef
 8000e4c:	080011ef 	.word	0x080011ef
 8000e50:	080011ef 	.word	0x080011ef
 8000e54:	080011ef 	.word	0x080011ef
 8000e58:	080011ef 	.word	0x080011ef
 8000e5c:	080011ef 	.word	0x080011ef
 8000e60:	080011ef 	.word	0x080011ef
 8000e64:	080011ef 	.word	0x080011ef
 8000e68:	080011ef 	.word	0x080011ef
 8000e6c:	080011ef 	.word	0x080011ef
 8000e70:	080011ef 	.word	0x080011ef
 8000e74:	080011ef 	.word	0x080011ef
 8000e78:	080011ef 	.word	0x080011ef
 8000e7c:	080011ef 	.word	0x080011ef
 8000e80:	080011ef 	.word	0x080011ef
 8000e84:	080011ef 	.word	0x080011ef
 8000e88:	080011ef 	.word	0x080011ef
 8000e8c:	080011ef 	.word	0x080011ef
 8000e90:	080011ef 	.word	0x080011ef
 8000e94:	080011ef 	.word	0x080011ef
 8000e98:	080011ef 	.word	0x080011ef
 8000e9c:	080011ef 	.word	0x080011ef
 8000ea0:	080011ef 	.word	0x080011ef
 8000ea4:	080011ef 	.word	0x080011ef
 8000ea8:	080011ef 	.word	0x080011ef
 8000eac:	080011ef 	.word	0x080011ef
 8000eb0:	0800107d 	.word	0x0800107d
 8000eb4:	08001085 	.word	0x08001085
 8000eb8:	0800108d 	.word	0x0800108d
 8000ebc:	080010a5 	.word	0x080010a5
 8000ec0:	080011ef 	.word	0x080011ef
 8000ec4:	080011ef 	.word	0x080011ef
 8000ec8:	080011ef 	.word	0x080011ef
 8000ecc:	080011ef 	.word	0x080011ef
 8000ed0:	080011ef 	.word	0x080011ef
 8000ed4:	080011ef 	.word	0x080011ef
 8000ed8:	080011ef 	.word	0x080011ef
 8000edc:	080011ef 	.word	0x080011ef
 8000ee0:	080011ef 	.word	0x080011ef
 8000ee4:	080011ef 	.word	0x080011ef
 8000ee8:	080011ef 	.word	0x080011ef
 8000eec:	080011ef 	.word	0x080011ef
 8000ef0:	080011ef 	.word	0x080011ef
 8000ef4:	080011ef 	.word	0x080011ef
 8000ef8:	080011ef 	.word	0x080011ef
 8000efc:	080011ef 	.word	0x080011ef
 8000f00:	080011ef 	.word	0x080011ef
 8000f04:	080011ef 	.word	0x080011ef
 8000f08:	080011ef 	.word	0x080011ef
 8000f0c:	080011ef 	.word	0x080011ef
 8000f10:	080011ef 	.word	0x080011ef
 8000f14:	080011ef 	.word	0x080011ef
 8000f18:	080011ef 	.word	0x080011ef
 8000f1c:	080011ef 	.word	0x080011ef
 8000f20:	080011ef 	.word	0x080011ef
 8000f24:	080011ef 	.word	0x080011ef
 8000f28:	080011ef 	.word	0x080011ef
 8000f2c:	080011ef 	.word	0x080011ef
 8000f30:	080011ef 	.word	0x080011ef
 8000f34:	080011ef 	.word	0x080011ef
 8000f38:	080011ef 	.word	0x080011ef
 8000f3c:	080011ef 	.word	0x080011ef
 8000f40:	080011ef 	.word	0x080011ef
 8000f44:	080011ef 	.word	0x080011ef
 8000f48:	080011ef 	.word	0x080011ef
 8000f4c:	080011ef 	.word	0x080011ef
 8000f50:	080011ef 	.word	0x080011ef
 8000f54:	080011ef 	.word	0x080011ef
 8000f58:	080011ef 	.word	0x080011ef
 8000f5c:	080011ef 	.word	0x080011ef
 8000f60:	080011ef 	.word	0x080011ef
 8000f64:	080011ef 	.word	0x080011ef
 8000f68:	080011ef 	.word	0x080011ef
 8000f6c:	080011ef 	.word	0x080011ef
 8000f70:	080011ef 	.word	0x080011ef
 8000f74:	080011ef 	.word	0x080011ef
 8000f78:	080011ef 	.word	0x080011ef
 8000f7c:	080011ef 	.word	0x080011ef
 8000f80:	080011ef 	.word	0x080011ef
 8000f84:	080011ef 	.word	0x080011ef
 8000f88:	080011ef 	.word	0x080011ef
 8000f8c:	080011ef 	.word	0x080011ef
 8000f90:	080011ef 	.word	0x080011ef
 8000f94:	080011ef 	.word	0x080011ef
 8000f98:	080011ef 	.word	0x080011ef
 8000f9c:	080011ef 	.word	0x080011ef
 8000fa0:	080011ef 	.word	0x080011ef
 8000fa4:	080011ef 	.word	0x080011ef
 8000fa8:	080011ef 	.word	0x080011ef
 8000fac:	080011ef 	.word	0x080011ef
 8000fb0:	080011ef 	.word	0x080011ef
 8000fb4:	080011ef 	.word	0x080011ef
 8000fb8:	080011ef 	.word	0x080011ef
 8000fbc:	080011ef 	.word	0x080011ef
 8000fc0:	080011ef 	.word	0x080011ef
 8000fc4:	080011ef 	.word	0x080011ef
 8000fc8:	080011ef 	.word	0x080011ef
 8000fcc:	080011ef 	.word	0x080011ef
 8000fd0:	080011ef 	.word	0x080011ef
 8000fd4:	080011ef 	.word	0x080011ef
 8000fd8:	080011ef 	.word	0x080011ef
 8000fdc:	080011ef 	.word	0x080011ef
 8000fe0:	080011ef 	.word	0x080011ef
 8000fe4:	080011ef 	.word	0x080011ef
 8000fe8:	080011ef 	.word	0x080011ef
 8000fec:	080011ef 	.word	0x080011ef
 8000ff0:	080011ef 	.word	0x080011ef
 8000ff4:	080011ef 	.word	0x080011ef
 8000ff8:	080011ef 	.word	0x080011ef
 8000ffc:	080011ef 	.word	0x080011ef
 8001000:	080011ef 	.word	0x080011ef
 8001004:	080011ef 	.word	0x080011ef
 8001008:	080011ef 	.word	0x080011ef
 800100c:	080011ef 	.word	0x080011ef
 8001010:	080011ef 	.word	0x080011ef
 8001014:	080011ef 	.word	0x080011ef
 8001018:	080011ef 	.word	0x080011ef
 800101c:	080011ef 	.word	0x080011ef
 8001020:	080011ef 	.word	0x080011ef
 8001024:	080011ef 	.word	0x080011ef
 8001028:	080011ef 	.word	0x080011ef
 800102c:	080011ef 	.word	0x080011ef
 8001030:	080011ef 	.word	0x080011ef
 8001034:	080011ef 	.word	0x080011ef
 8001038:	080011ef 	.word	0x080011ef
 800103c:	080011ef 	.word	0x080011ef
 8001040:	0800114d 	.word	0x0800114d
 8001044:	08001155 	.word	0x08001155
 8001048:	08001163 	.word	0x08001163
 800104c:	08001177 	.word	0x08001177
 8001050:	0800117f 	.word	0x0800117f
 8001054:	080011d9 	.word	0x080011d9
 8001058:	080011e7 	.word	0x080011e7
 800105c:	08001187 	.word	0x08001187
 8001060:	0800118f 	.word	0x0800118f
 8001064:	08001197 	.word	0x08001197
 8001068:	080011a5 	.word	0x080011a5
 800106c:	080011ad 	.word	0x080011ad
 8001070:	080011bb 	.word	0x080011bb
 8001074:	080011c3 	.word	0x080011c3
 8001078:	080011d1 	.word	0x080011d1
	{
		case BTC_RX_EXTLIGHTS_POSITIONZERO:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONZERO;
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <BtcRxVal+0x3c4>)
 800107e:	2264      	movs	r2, #100	; 0x64
 8001080:	701a      	strb	r2, [r3, #0]

			break;
 8001082:	e0b5      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <BtcRxVal+0x3c4>)
 8001086:	2265      	movs	r2, #101	; 0x65
 8001088:	701a      	strb	r2, [r3, #0]

			break;
 800108a:	e0b1      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_POSITIONLIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <BtcRxVal+0x3c4>)
 800108e:	2266      	movs	r2, #102	; 0x66
 8001090:	701a      	strb	r2, [r3, #0]

			break;
 8001092:	e0ad      	b.n	80011f0 <BtcRxVal+0x514>
 8001094:	20000090 	.word	0x20000090
 8001098:	200000ba 	.word	0x200000ba
 800109c:	200000bb 	.word	0x200000bb
 80010a0:	200000a6 	.word	0x200000a6

		case BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
 80010a4:	4b55      	ldr	r3, [pc, #340]	; (80011fc <BtcRxVal+0x520>)
 80010a6:	2267      	movs	r2, #103	; 0x67
 80010a8:	701a      	strb	r2, [r3, #0]

			break;
 80010aa:	e0a1      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_CENLOC_ON:

			Btc_CenLoc = STD_HIGH;
 80010ac:	4b54      	ldr	r3, [pc, #336]	; (8001200 <BtcRxVal+0x524>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	701a      	strb	r2, [r3, #0]

			break;
 80010b2:	e09d      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_CENLOC_OFF:

			Btc_CenLoc = STD_LOW;
 80010b4:	4b52      	ldr	r3, [pc, #328]	; (8001200 <BtcRxVal+0x524>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]

			break;
 80010ba:	e099      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_HIGBEAM_ON:

			Btc_HighBeam = STD_HIGH;
 80010bc:	4b51      	ldr	r3, [pc, #324]	; (8001204 <BtcRxVal+0x528>)
 80010be:	2201      	movs	r2, #1
 80010c0:	701a      	strb	r2, [r3, #0]

			break;
 80010c2:	e095      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_HIGBEAM_OFF:

			Btc_HighBeam = STD_LOW;
 80010c4:	4b4f      	ldr	r3, [pc, #316]	; (8001204 <BtcRxVal+0x528>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]

			break;
 80010ca:	e091      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_ON:

			Btc_FlashHighBeam = STD_HIGH;
 80010cc:	4b4e      	ldr	r3, [pc, #312]	; (8001208 <BtcRxVal+0x52c>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	701a      	strb	r2, [r3, #0]

			break;
 80010d2:	e08d      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_OFF:

			Btc_FlashHighBeam = STD_LOW;
 80010d4:	4b4c      	ldr	r3, [pc, #304]	; (8001208 <BtcRxVal+0x52c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]

			break;
 80010da:	e089      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:

			Btc_TurnSignalLeft = STD_HIGH;
 80010dc:	4b4b      	ldr	r3, [pc, #300]	; (800120c <BtcRxVal+0x530>)
 80010de:	2201      	movs	r2, #1
 80010e0:	701a      	strb	r2, [r3, #0]

			break;
 80010e2:	e085      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:

			Btc_TurnSignalLeft = STD_LOW;
 80010e4:	4b49      	ldr	r3, [pc, #292]	; (800120c <BtcRxVal+0x530>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]

			break;
 80010ea:	e081      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_ESTLIGHTS_TURNSIGNALRIGHT_ON:

			Btc_TurnSignalRight = STD_HIGH;
 80010ec:	4b48      	ldr	r3, [pc, #288]	; (8001210 <BtcRxVal+0x534>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	701a      	strb	r2, [r3, #0]

			break;
 80010f2:	e07d      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_ESTLIGHTS_TURNSIGNALRIGHT_OFF:

			Btc_TurnSignalRight = STD_LOW;
 80010f4:	4b46      	ldr	r3, [pc, #280]	; (8001210 <BtcRxVal+0x534>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]

			break;
 80010fa:	e079      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:

			Btc_HazardLight = STD_HIGH;
 80010fc:	4b45      	ldr	r3, [pc, #276]	; (8001214 <BtcRxVal+0x538>)
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]

			break;
 8001102:	e075      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:

			Btc_HazardLight = STD_LOW;
 8001104:	4b43      	ldr	r3, [pc, #268]	; (8001214 <BtcRxVal+0x538>)
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]

			break;
 800110a:	e071      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:

			Btc_FrontFogLight = STD_HIGH;
 800110c:	4b42      	ldr	r3, [pc, #264]	; (8001218 <BtcRxVal+0x53c>)
 800110e:	2201      	movs	r2, #1
 8001110:	701a      	strb	r2, [r3, #0]

			break;
 8001112:	e06d      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:

			Btc_FrontFogLight = STD_LOW;
 8001114:	4b40      	ldr	r3, [pc, #256]	; (8001218 <BtcRxVal+0x53c>)
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]

			break;
 800111a:	e069      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:

			Btc_RearFogLight = STD_HIGH;
 800111c:	4b3f      	ldr	r3, [pc, #252]	; (800121c <BtcRxVal+0x540>)
 800111e:	2201      	movs	r2, #1
 8001120:	701a      	strb	r2, [r3, #0]

			break;
 8001122:	e065      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:

			Btc_RearFogLight = STD_LOW;
 8001124:	4b3d      	ldr	r3, [pc, #244]	; (800121c <BtcRxVal+0x540>)
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]

			break;
 800112a:	e061      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_BRAKELIGHTON:

			ExtLights_BrakeLight_CurrentState = STD_HIGH;
 800112c:	4b3c      	ldr	r3, [pc, #240]	; (8001220 <BtcRxVal+0x544>)
 800112e:	2201      	movs	r2, #1
 8001130:	701a      	strb	r2, [r3, #0]

			break;
 8001132:	e05d      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:

			ExtLights_BrakeLight_CurrentState = STD_LOW;
 8001134:	4b3a      	ldr	r3, [pc, #232]	; (8001220 <BtcRxVal+0x544>)
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]

			break;
 800113a:	e059      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:

			Btc_IntLights = STD_HIGH;
 800113c:	4b39      	ldr	r3, [pc, #228]	; (8001224 <BtcRxVal+0x548>)
 800113e:	2201      	movs	r2, #1
 8001140:	701a      	strb	r2, [r3, #0]

			break;
 8001142:	e055      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:

			Btc_IntLights = STD_LOW;
 8001144:	4b37      	ldr	r3, [pc, #220]	; (8001224 <BtcRxVal+0x548>)
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]

			break;
 800114a:	e051      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_HVAC_NORMALMODE_ON:

			Btc_NormalMode = STD_HIGH;
 800114c:	4b36      	ldr	r3, [pc, #216]	; (8001228 <BtcRxVal+0x54c>)
 800114e:	2201      	movs	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]

			break;
 8001152:	e04d      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_HVAC_RECIRCULATIONMODE_ON:

			Btc_NormalMode = STD_LOW;
 8001154:	4b34      	ldr	r3, [pc, #208]	; (8001228 <BtcRxVal+0x54c>)
 8001156:	2200      	movs	r2, #0
 8001158:	701a      	strb	r2, [r3, #0]
			Btc_RecirculationMode = STD_HIGH;
 800115a:	4b34      	ldr	r3, [pc, #208]	; (800122c <BtcRxVal+0x550>)
 800115c:	2201      	movs	r2, #1
 800115e:	701a      	strb	r2, [r3, #0]

			break;
 8001160:	e046      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_HVAC_AUTOMATICMODE_ON:

			Btc_NormalMode = STD_LOW;
 8001162:	4b31      	ldr	r3, [pc, #196]	; (8001228 <BtcRxVal+0x54c>)
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
			Btc_RecirculationMode = STD_LOW;
 8001168:	4b30      	ldr	r3, [pc, #192]	; (800122c <BtcRxVal+0x550>)
 800116a:	2200      	movs	r2, #0
 800116c:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode = STD_HIGH;
 800116e:	4b30      	ldr	r3, [pc, #192]	; (8001230 <BtcRxVal+0x554>)
 8001170:	2201      	movs	r2, #1
 8001172:	701a      	strb	r2, [r3, #0]

			break;
 8001174:	e03c      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_HVAC_BACKWINDOWDEFROSTON:

			Btc_BackwindowDefrost = STD_HIGH;
 8001176:	4b2f      	ldr	r3, [pc, #188]	; (8001234 <BtcRxVal+0x558>)
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]

			break;
 800117c:	e038      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_HVAC_BACKWINDOWDEFROSTOFF:

			Btc_BackwindowDefrost = STD_LOW;
 800117e:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <BtcRxVal+0x558>)
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]

			break;
 8001184:	e034      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_HVAC_AC_ON:

			Btc_AC = STD_HIGH;
 8001186:	4b2c      	ldr	r3, [pc, #176]	; (8001238 <BtcRxVal+0x55c>)
 8001188:	2201      	movs	r2, #1
 800118a:	701a      	strb	r2, [r3, #0]

			break;
 800118c:	e030      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_HVAC_AC_OFF:

			Btc_AC = STD_LOW;
 800118e:	4b2a      	ldr	r3, [pc, #168]	; (8001238 <BtcRxVal+0x55c>)
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]

			break;
 8001194:	e02c      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_HVAC_LEGVENT_ON:

			Btc_LegVents = STD_HIGH;
 8001196:	4b29      	ldr	r3, [pc, #164]	; (800123c <BtcRxVal+0x560>)
 8001198:	2201      	movs	r2, #1
 800119a:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode = STD_LOW;
 800119c:	4b24      	ldr	r3, [pc, #144]	; (8001230 <BtcRxVal+0x554>)
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]

			break;
 80011a2:	e025      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_HVAC_LEGVENT_OFF:

			Btc_LegVents = STD_LOW;
 80011a4:	4b25      	ldr	r3, [pc, #148]	; (800123c <BtcRxVal+0x560>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]

			break;
 80011aa:	e021      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_HVAC_MIDVENT_ON:

			Btc_MidVents = STD_HIGH;
 80011ac:	4b24      	ldr	r3, [pc, #144]	; (8001240 <BtcRxVal+0x564>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode = STD_LOW;
 80011b2:	4b1f      	ldr	r3, [pc, #124]	; (8001230 <BtcRxVal+0x554>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]

			break;
 80011b8:	e01a      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_HVAC_MIDVENT_OFF:

			Btc_MidVents = STD_LOW;
 80011ba:	4b21      	ldr	r3, [pc, #132]	; (8001240 <BtcRxVal+0x564>)
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]

			break;
 80011c0:	e016      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_HVAC_WINDSHIELDVENT_ON:

			Btc_WindshieldVents = STD_HIGH;
 80011c2:	4b20      	ldr	r3, [pc, #128]	; (8001244 <BtcRxVal+0x568>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode = STD_LOW;
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <BtcRxVal+0x554>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]

			break;
 80011ce:	e00f      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_HVAC_WINDSHIELDVENT_OFF:

			Btc_WindshieldVents = STD_LOW;
 80011d0:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <BtcRxVal+0x568>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]

			break;
 80011d6:	e00b      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_HVAC_WINDSHIELDDEFROST_ON:

			Btc_WindshieldDefrost = STD_HIGH;
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <BtcRxVal+0x56c>)
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode = STD_LOW;
 80011de:	4b14      	ldr	r3, [pc, #80]	; (8001230 <BtcRxVal+0x554>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]

			break;
 80011e4:	e004      	b.n	80011f0 <BtcRxVal+0x514>

		case BTC_RX_HVAC_WINDSHIELDDEFROST_OFF:

			Btc_WindshieldDefrost = STD_LOW;
 80011e6:	4b18      	ldr	r3, [pc, #96]	; (8001248 <BtcRxVal+0x56c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]

			break;
 80011ec:	e000      	b.n	80011f0 <BtcRxVal+0x514>

		default:

			break;
 80011ee:	bf00      	nop

	}

	return 1;
 80011f0:	2301      	movs	r3, #1

}
 80011f2:	4618      	mov	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	200000a6 	.word	0x200000a6
 8001200:	2000009b 	.word	0x2000009b
 8001204:	200000a7 	.word	0x200000a7
 8001208:	200000a8 	.word	0x200000a8
 800120c:	200000aa 	.word	0x200000aa
 8001210:	200000ab 	.word	0x200000ab
 8001214:	200000ac 	.word	0x200000ac
 8001218:	200000a9 	.word	0x200000a9
 800121c:	200000ae 	.word	0x200000ae
 8001220:	2000009d 	.word	0x2000009d
 8001224:	200000e9 	.word	0x200000e9
 8001228:	200000c4 	.word	0x200000c4
 800122c:	200000c3 	.word	0x200000c3
 8001230:	200000c2 	.word	0x200000c2
 8001234:	200000c0 	.word	0x200000c0
 8001238:	200000c1 	.word	0x200000c1
 800123c:	200000bc 	.word	0x200000bc
 8001240:	200000bd 	.word	0x200000bd
 8001244:	200000be 	.word	0x200000be
 8001248:	200000bf 	.word	0x200000bf

0800124c <BtcEnableUart>:

StdReturnType BtcEnableUart()
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0

	uint8 status = STD_LOW;
 8001252:	2300      	movs	r3, #0
 8001254:	71fb      	strb	r3, [r7, #7]

	if(HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1) != E_NOT_OK)
 8001256:	2201      	movs	r2, #1
 8001258:	490e      	ldr	r1, [pc, #56]	; (8001294 <BtcEnableUart+0x48>)
 800125a:	480f      	ldr	r0, [pc, #60]	; (8001298 <BtcEnableUart+0x4c>)
 800125c:	f009 fd9a 	bl	800ad94 <HAL_UART_Receive_IT>
 8001260:	4603      	mov	r3, r0
 8001262:	2b01      	cmp	r3, #1
 8001264:	d007      	beq.n	8001276 <BtcEnableUart+0x2a>
	{
		HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1);
 8001266:	2201      	movs	r2, #1
 8001268:	490a      	ldr	r1, [pc, #40]	; (8001294 <BtcEnableUart+0x48>)
 800126a:	480b      	ldr	r0, [pc, #44]	; (8001298 <BtcEnableUart+0x4c>)
 800126c:	f009 fd92 	bl	800ad94 <HAL_UART_Receive_IT>
		status = E_OK;
 8001270:	2300      	movs	r3, #0
 8001272:	71fb      	strb	r3, [r7, #7]
 8001274:	e009      	b.n	800128a <BtcEnableUart+0x3e>
	}
	else if(HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1) == E_NOT_OK)
 8001276:	2201      	movs	r2, #1
 8001278:	4906      	ldr	r1, [pc, #24]	; (8001294 <BtcEnableUart+0x48>)
 800127a:	4807      	ldr	r0, [pc, #28]	; (8001298 <BtcEnableUart+0x4c>)
 800127c:	f009 fd8a 	bl	800ad94 <HAL_UART_Receive_IT>
 8001280:	4603      	mov	r3, r0
 8001282:	2b01      	cmp	r3, #1
 8001284:	d101      	bne.n	800128a <BtcEnableUart+0x3e>
	{
		status = E_NOT_OK;
 8001286:	2301      	movs	r3, #1
 8001288:	71fb      	strb	r3, [r7, #7]
	else
	{
		/* do nothing */
	}

	return status;
 800128a:	79fb      	ldrb	r3, [r7, #7]

}
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000090 	.word	0x20000090
 8001298:	2000091c 	.word	0x2000091c

0800129c <BtcMainFunction>:

void BtcMainFunction()
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0

	BtcEnableUart();
 80012a0:	f7ff ffd4 	bl	800124c <BtcEnableUart>
	BtcRxVal();
 80012a4:	f7ff fd1a 	bl	8000cdc <BtcRxVal>

}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}

080012ac <CenLocInit>:
StdReturnType CenLocInit();
StdReturnType CenLocState();
StdReturnType CenLocLockUnlockStates();

StdReturnType CenLocInit()
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0

	CenLoc_CurrentState_Door 		= STD_LOW;
 80012b0:	4b13      	ldr	r3, [pc, #76]	; (8001300 <CenLocInit+0x54>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]
	CenLoc_CurrentState 			= STD_LOW;
 80012b6:	4b13      	ldr	r3, [pc, #76]	; (8001304 <CenLocInit+0x58>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
	CenLoc_PreviousState 			= STD_LOW;
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <CenLocInit+0x5c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
	CenLoc_LockUnlockFlag 			= STD_LOW;
 80012c2:	4b12      	ldr	r3, [pc, #72]	; (800130c <CenLocInit+0x60>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]
	CenLoc_ExtLights_UnlockedState 	= STD_LOW;
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <CenLocInit+0x64>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	701a      	strb	r2, [r3, #0]
	CenLoc_ExtLights_LockedState 	= STD_LOW;
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <CenLocInit+0x68>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
	CenLoc_FollowMeHomeState 		= STD_LOW;
 80012d4:	4b10      	ldr	r3, [pc, #64]	; (8001318 <CenLocInit+0x6c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
	CenLoc_BlinkState 				= STD_LOW;
 80012da:	4b10      	ldr	r3, [pc, #64]	; (800131c <CenLocInit+0x70>)
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
	CenLoc_LockCounter 				= STD_LOW;
 80012e0:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <CenLocInit+0x74>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
	CenLoc_UnlockCounter			= STD_LOW;
 80012e6:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <CenLocInit+0x78>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
	Btc_CenLoc 						= STD_LOW;
 80012ec:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <CenLocInit+0x7c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]

	return E_OK;
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000091 	.word	0x20000091
 8001304:	20000092 	.word	0x20000092
 8001308:	20000093 	.word	0x20000093
 800130c:	20000094 	.word	0x20000094
 8001310:	20000095 	.word	0x20000095
 8001314:	20000096 	.word	0x20000096
 8001318:	20000097 	.word	0x20000097
 800131c:	20000098 	.word	0x20000098
 8001320:	20000099 	.word	0x20000099
 8001324:	2000009a 	.word	0x2000009a
 8001328:	2000009b 	.word	0x2000009b

0800132c <CenLocState>:

StdReturnType CenLocState()
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0

	uint8 status = E_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	71fb      	strb	r3, [r7, #7]

	if(CenLoc_PreviousState != CenLoc_CurrentState)
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <CenLocState+0x70>)
 8001338:	781a      	ldrb	r2, [r3, #0]
 800133a:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <CenLocState+0x74>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	429a      	cmp	r2, r3
 8001340:	d027      	beq.n	8001392 <CenLocState+0x66>
	{

		CenLoc_ExtLights_LockedState 	= CenLoc_PreviousState;
 8001342:	4b16      	ldr	r3, [pc, #88]	; (800139c <CenLocState+0x70>)
 8001344:	781a      	ldrb	r2, [r3, #0]
 8001346:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <CenLocState+0x78>)
 8001348:	701a      	strb	r2, [r3, #0]
		CenLoc_ExtLights_UnlockedState 	= CenLoc_CurrentState;
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <CenLocState+0x74>)
 800134c:	781a      	ldrb	r2, [r3, #0]
 800134e:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <CenLocState+0x7c>)
 8001350:	701a      	strb	r2, [r3, #0]
		CenLoc_PreviousState 			= CenLoc_CurrentState;
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <CenLocState+0x74>)
 8001354:	781a      	ldrb	r2, [r3, #0]
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <CenLocState+0x70>)
 8001358:	701a      	strb	r2, [r3, #0]
		CenLoc_LockUnlockFlag 			= !CenLoc_CurrentState;
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <CenLocState+0x74>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	bf0c      	ite	eq
 8001362:	2301      	moveq	r3, #1
 8001364:	2300      	movne	r3, #0
 8001366:	b2db      	uxtb	r3, r3
 8001368:	461a      	mov	r2, r3
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <CenLocState+0x80>)
 800136c:	701a      	strb	r2, [r3, #0]
		CenLoc_LockCounter 				= STD_LOW;
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <CenLocState+0x84>)
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
		CenLoc_UnlockCounter 			= STD_LOW;
 8001374:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <CenLocState+0x88>)
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]
		SecAlm_Counter 					= STD_LOW;
 800137a:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <CenLocState+0x8c>)
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Init(&htim2);
 8001380:	480e      	ldr	r0, [pc, #56]	; (80013bc <CenLocState+0x90>)
 8001382:	f008 ff25 	bl	800a1d0 <HAL_TIM_Base_Init>
		HAL_TIM_Base_Init(&htim3);
 8001386:	480e      	ldr	r0, [pc, #56]	; (80013c0 <CenLocState+0x94>)
 8001388:	f008 ff22 	bl	800a1d0 <HAL_TIM_Base_Init>
		HAL_TIM_Base_Init(&htim5);
 800138c:	480d      	ldr	r0, [pc, #52]	; (80013c4 <CenLocState+0x98>)
 800138e:	f008 ff1f 	bl	800a1d0 <HAL_TIM_Base_Init>

		/* do nothing */

	}

	return status;
 8001392:	79fb      	ldrb	r3, [r7, #7]

}
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000093 	.word	0x20000093
 80013a0:	20000092 	.word	0x20000092
 80013a4:	20000096 	.word	0x20000096
 80013a8:	20000095 	.word	0x20000095
 80013ac:	20000094 	.word	0x20000094
 80013b0:	20000099 	.word	0x20000099
 80013b4:	2000009a 	.word	0x2000009a
 80013b8:	200000fd 	.word	0x200000fd
 80013bc:	200004e4 	.word	0x200004e4
 80013c0:	20000598 	.word	0x20000598
 80013c4:	20000700 	.word	0x20000700

080013c8 <CenLocSecAlmStateToOff>:

void CenLocSecAlmStateToOff()
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0

	if(CenLoc_CurrentState == STD_HIGH)
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <CenLocSecAlmStateToOff+0x1c>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d102      	bne.n	80013da <CenLocSecAlmStateToOff+0x12>
	{

		SecAlm_Trigger = STD_LOW;
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <CenLocSecAlmStateToOff+0x20>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	20000092 	.word	0x20000092
 80013e8:	200000fc 	.word	0x200000fc

080013ec <CenLocRxBtcState>:

void CenLocRxBtcState()
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0

	if(Btc_CenLoc == STD_HIGH)
 80013f0:	4b0a      	ldr	r3, [pc, #40]	; (800141c <CenLocRxBtcState+0x30>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d104      	bne.n	8001402 <CenLocRxBtcState+0x16>
	{

		CenLoc_CurrentState = Btc_CenLoc;
 80013f8:	4b08      	ldr	r3, [pc, #32]	; (800141c <CenLocRxBtcState+0x30>)
 80013fa:	781a      	ldrb	r2, [r3, #0]
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <CenLocRxBtcState+0x34>)
 80013fe:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8001400:	e007      	b.n	8001412 <CenLocRxBtcState+0x26>
	else if(Btc_CenLoc == STD_LOW)
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <CenLocRxBtcState+0x30>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d103      	bne.n	8001412 <CenLocRxBtcState+0x26>
		CenLoc_CurrentState = Btc_CenLoc;
 800140a:	4b04      	ldr	r3, [pc, #16]	; (800141c <CenLocRxBtcState+0x30>)
 800140c:	781a      	ldrb	r2, [r3, #0]
 800140e:	4b04      	ldr	r3, [pc, #16]	; (8001420 <CenLocRxBtcState+0x34>)
 8001410:	701a      	strb	r2, [r3, #0]
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	2000009b 	.word	0x2000009b
 8001420:	20000092 	.word	0x20000092

08001424 <CenLocToggleDoorLED>:

void CenLocToggleDoorLED(uint8 PinState)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CENLOC_DOOR_LED_PORT, CENLOC_DOOR_LED_PIN, PinState);
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	461a      	mov	r2, r3
 8001432:	2140      	movs	r1, #64	; 0x40
 8001434:	4803      	ldr	r0, [pc, #12]	; (8001444 <CenLocToggleDoorLED+0x20>)
 8001436:	f005 f8e5 	bl	8006604 <HAL_GPIO_WritePin>

}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40020400 	.word	0x40020400

08001448 <CenLocFollowMeHome>:

void CenLocFollowMeHome()
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0

	ExtLightsFrontFogLight(CenLoc_FollowMeHomeState);
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <CenLocFollowMeHome+0x28>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f000 fd3b 	bl	8001ecc <ExtLightsFrontFogLight>
	ExtLightsLowBeam(CenLoc_FollowMeHomeState);
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <CenLocFollowMeHome+0x28>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f000 fd00 	bl	8001e60 <ExtLightsLowBeam>
	ExtLightsRearPositionLight(CenLoc_FollowMeHomeState);
 8001460:	4b03      	ldr	r3, [pc, #12]	; (8001470 <CenLocFollowMeHome+0x28>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f000 fd67 	bl	8001f38 <ExtLightsRearPositionLight>

}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000097 	.word	0x20000097

08001474 <CenLocBlinkSignals>:

void CenLocBlinkSignals()
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0

	ExtLightsTurnSignalLeft(CenLoc_BlinkState);
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <CenLocBlinkSignals+0x1c>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f000 fd37 	bl	8001ef0 <ExtLightsTurnSignalLeft>
	ExtLightsTurnSignalRight(CenLoc_BlinkState);
 8001482:	4b03      	ldr	r3, [pc, #12]	; (8001490 <CenLocBlinkSignals+0x1c>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f000 fd44 	bl	8001f14 <ExtLightsTurnSignalRight>

}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000098 	.word	0x20000098

08001494 <CenLocLockUnlockStates>:

StdReturnType CenLocLockUnlockStates()
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0

	uint8 status = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	71fb      	strb	r3, [r7, #7]

	if(CenLoc_CurrentState == STD_HIGH && SecAlm_Trigger == STD_LOW)
 800149e:	4b9b      	ldr	r3, [pc, #620]	; (800170c <CenLocLockUnlockStates+0x278>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	f040 80a6 	bne.w	80015f4 <CenLocLockUnlockStates+0x160>
 80014a8:	4b99      	ldr	r3, [pc, #612]	; (8001710 <CenLocLockUnlockStates+0x27c>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f040 80a1 	bne.w	80015f4 <CenLocLockUnlockStates+0x160>
	{

		HAL_TIM_Base_Stop(&htim3);
 80014b2:	4898      	ldr	r0, [pc, #608]	; (8001714 <CenLocLockUnlockStates+0x280>)
 80014b4:	f008 ff42 	bl	800a33c <HAL_TIM_Base_Stop>
		Btc_CenLoc = STD_HIGH;
 80014b8:	4b97      	ldr	r3, [pc, #604]	; (8001718 <CenLocLockUnlockStates+0x284>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	701a      	strb	r2, [r3, #0]
		IntLightsToggleIntLights(CenLoc_CurrentState);
 80014be:	4b93      	ldr	r3, [pc, #588]	; (800170c <CenLocLockUnlockStates+0x278>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f001 f95e 	bl	8002784 <IntLightsToggleIntLights>
		CenLocToggleDoorLED(CenLoc_CurrentState);
 80014c8:	4b90      	ldr	r3, [pc, #576]	; (800170c <CenLocLockUnlockStates+0x278>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ffa9 	bl	8001424 <CenLocToggleDoorLED>
		SecAlmToggleAlarmLed(!CenLoc_CurrentState);
 80014d2:	4b8e      	ldr	r3, [pc, #568]	; (800170c <CenLocLockUnlockStates+0x278>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	bf0c      	ite	eq
 80014da:	2301      	moveq	r3, #1
 80014dc:	2300      	movne	r3, #0
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	4618      	mov	r0, r3
 80014e2:	f001 fd13 	bl	8002f0c <SecAlmToggleAlarmLed>

		if(CenLoc_ExtLights_UnlockedState == STD_HIGH && CenLoc_ExtLights_LockedState == STD_LOW)
 80014e6:	4b8d      	ldr	r3, [pc, #564]	; (800171c <CenLocLockUnlockStates+0x288>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d120      	bne.n	8001530 <CenLocLockUnlockStates+0x9c>
 80014ee:	4b8c      	ldr	r3, [pc, #560]	; (8001720 <CenLocLockUnlockStates+0x28c>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d11c      	bne.n	8001530 <CenLocLockUnlockStates+0x9c>
		{

			HAL_TIM_Base_Start(&htim5);
 80014f6:	488b      	ldr	r0, [pc, #556]	; (8001724 <CenLocLockUnlockStates+0x290>)
 80014f8:	f008 fec6 	bl	800a288 <HAL_TIM_Base_Start>

			if(__HAL_TIM_GET_COUNTER(&htim5) < 100000)
 80014fc:	4b89      	ldr	r3, [pc, #548]	; (8001724 <CenLocLockUnlockStates+0x290>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001502:	4a89      	ldr	r2, [pc, #548]	; (8001728 <CenLocLockUnlockStates+0x294>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d805      	bhi.n	8001514 <CenLocLockUnlockStates+0x80>
			{

				CenLoc_FollowMeHomeState = STD_HIGH;
 8001508:	4b88      	ldr	r3, [pc, #544]	; (800172c <CenLocLockUnlockStates+0x298>)
 800150a:	2201      	movs	r2, #1
 800150c:	701a      	strb	r2, [r3, #0]
				CenLocFollowMeHome();
 800150e:	f7ff ff9b 	bl	8001448 <CenLocFollowMeHome>
 8001512:	e00d      	b.n	8001530 <CenLocLockUnlockStates+0x9c>

			}
			else
			{

				CenLoc_FollowMeHomeState 		= STD_LOW;
 8001514:	4b85      	ldr	r3, [pc, #532]	; (800172c <CenLocLockUnlockStates+0x298>)
 8001516:	2200      	movs	r2, #0
 8001518:	701a      	strb	r2, [r3, #0]
				CenLoc_ExtLights_UnlockedState 	= STD_LOW;
 800151a:	4b80      	ldr	r3, [pc, #512]	; (800171c <CenLocLockUnlockStates+0x288>)
 800151c:	2200      	movs	r2, #0
 800151e:	701a      	strb	r2, [r3, #0]
				CenLoc_ExtLights_LockedState 	= STD_HIGH;
 8001520:	4b7f      	ldr	r3, [pc, #508]	; (8001720 <CenLocLockUnlockStates+0x28c>)
 8001522:	2201      	movs	r2, #1
 8001524:	701a      	strb	r2, [r3, #0]
				CenLocFollowMeHome();
 8001526:	f7ff ff8f 	bl	8001448 <CenLocFollowMeHome>
				HAL_TIM_Base_Stop(&htim5);
 800152a:	487e      	ldr	r0, [pc, #504]	; (8001724 <CenLocLockUnlockStates+0x290>)
 800152c:	f008 ff06 	bl	800a33c <HAL_TIM_Base_Stop>

			/* do nothing */

		}

		if(CenLoc_LockCounter < 4)
 8001530:	4b7f      	ldr	r3, [pc, #508]	; (8001730 <CenLocLockUnlockStates+0x29c>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b03      	cmp	r3, #3
 8001536:	d853      	bhi.n	80015e0 <CenLocLockUnlockStates+0x14c>
		{

			HAL_TIM_Base_Start(&htim2);
 8001538:	487e      	ldr	r0, [pc, #504]	; (8001734 <CenLocLockUnlockStates+0x2a0>)
 800153a:	f008 fea5 	bl	800a288 <HAL_TIM_Base_Start>

			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 800153e:	4b7d      	ldr	r3, [pc, #500]	; (8001734 <CenLocLockUnlockStates+0x2a0>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001544:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001548:	4293      	cmp	r3, r2
 800154a:	d805      	bhi.n	8001558 <CenLocLockUnlockStates+0xc4>
			{

				CenLoc_BlinkState = STD_HIGH;
 800154c:	4b7a      	ldr	r3, [pc, #488]	; (8001738 <CenLocLockUnlockStates+0x2a4>)
 800154e:	2201      	movs	r2, #1
 8001550:	701a      	strb	r2, [r3, #0]
				CenLocBlinkSignals();
 8001552:	f7ff ff8f 	bl	8001474 <CenLocBlinkSignals>
		if(CenLoc_LockCounter < 4)
 8001556:	e140      	b.n	80017da <CenLocLockUnlockStates+0x346>

			}
			else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8001558:	4b76      	ldr	r3, [pc, #472]	; (8001734 <CenLocLockUnlockStates+0x2a0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001562:	4293      	cmp	r3, r2
 8001564:	d90c      	bls.n	8001580 <CenLocLockUnlockStates+0xec>
 8001566:	4b73      	ldr	r3, [pc, #460]	; (8001734 <CenLocLockUnlockStates+0x2a0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156c:	f241 3287 	movw	r2, #4999	; 0x1387
 8001570:	4293      	cmp	r3, r2
 8001572:	d805      	bhi.n	8001580 <CenLocLockUnlockStates+0xec>
			{

				CenLoc_BlinkState = STD_LOW;
 8001574:	4b70      	ldr	r3, [pc, #448]	; (8001738 <CenLocLockUnlockStates+0x2a4>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
				CenLocBlinkSignals();
 800157a:	f7ff ff7b 	bl	8001474 <CenLocBlinkSignals>
 800157e:	e038      	b.n	80015f2 <CenLocLockUnlockStates+0x15e>

			}
			else if(5000 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 8001580:	4b6c      	ldr	r3, [pc, #432]	; (8001734 <CenLocLockUnlockStates+0x2a0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001586:	f241 3288 	movw	r2, #5000	; 0x1388
 800158a:	4293      	cmp	r3, r2
 800158c:	d90c      	bls.n	80015a8 <CenLocLockUnlockStates+0x114>
 800158e:	4b69      	ldr	r3, [pc, #420]	; (8001734 <CenLocLockUnlockStates+0x2a0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001594:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8001598:	4293      	cmp	r3, r2
 800159a:	d805      	bhi.n	80015a8 <CenLocLockUnlockStates+0x114>
			{

				CenLoc_BlinkState = STD_HIGH;
 800159c:	4b66      	ldr	r3, [pc, #408]	; (8001738 <CenLocLockUnlockStates+0x2a4>)
 800159e:	2201      	movs	r2, #1
 80015a0:	701a      	strb	r2, [r3, #0]
				CenLocBlinkSignals();
 80015a2:	f7ff ff67 	bl	8001474 <CenLocBlinkSignals>
 80015a6:	e024      	b.n	80015f2 <CenLocLockUnlockStates+0x15e>

			}
			else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 80015a8:	4b62      	ldr	r3, [pc, #392]	; (8001734 <CenLocLockUnlockStates+0x2a0>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ae:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80015b2:	4293      	cmp	r3, r2
 80015b4:	f240 8111 	bls.w	80017da <CenLocLockUnlockStates+0x346>
 80015b8:	4b5e      	ldr	r3, [pc, #376]	; (8001734 <CenLocLockUnlockStates+0x2a0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015be:	f242 720f 	movw	r2, #9999	; 0x270f
 80015c2:	4293      	cmp	r3, r2
 80015c4:	f200 8109 	bhi.w	80017da <CenLocLockUnlockStates+0x346>
			{

				CenLoc_BlinkState = STD_LOW;
 80015c8:	4b5b      	ldr	r3, [pc, #364]	; (8001738 <CenLocLockUnlockStates+0x2a4>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
				CenLocBlinkSignals();
 80015ce:	f7ff ff51 	bl	8001474 <CenLocBlinkSignals>
				CenLoc_LockCounter = CenLoc_LockCounter + 1;
 80015d2:	4b57      	ldr	r3, [pc, #348]	; (8001730 <CenLocLockUnlockStates+0x29c>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	3301      	adds	r3, #1
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	4b55      	ldr	r3, [pc, #340]	; (8001730 <CenLocLockUnlockStates+0x29c>)
 80015dc:	701a      	strb	r2, [r3, #0]
		if(CenLoc_LockCounter < 4)
 80015de:	e0fc      	b.n	80017da <CenLocLockUnlockStates+0x346>

				/* do nothing */

			}
		}
		else if(CenLoc_LockCounter >= 4)
 80015e0:	4b53      	ldr	r3, [pc, #332]	; (8001730 <CenLocLockUnlockStates+0x29c>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	f240 80f8 	bls.w	80017da <CenLocLockUnlockStates+0x346>
		{

			HAL_TIM_Base_Stop(&htim5);
 80015ea:	484e      	ldr	r0, [pc, #312]	; (8001724 <CenLocLockUnlockStates+0x290>)
 80015ec:	f008 fea6 	bl	800a33c <HAL_TIM_Base_Stop>
		if(CenLoc_LockCounter < 4)
 80015f0:	e0f3      	b.n	80017da <CenLocLockUnlockStates+0x346>
 80015f2:	e0f2      	b.n	80017da <CenLocLockUnlockStates+0x346>
			/* do nothing */

		}

	}
	else if(CenLoc_CurrentState == STD_LOW && SecAlm_Trigger == STD_LOW)
 80015f4:	4b45      	ldr	r3, [pc, #276]	; (800170c <CenLocLockUnlockStates+0x278>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f040 80f1 	bne.w	80017e0 <CenLocLockUnlockStates+0x34c>
 80015fe:	4b44      	ldr	r3, [pc, #272]	; (8001710 <CenLocLockUnlockStates+0x27c>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	f040 80ec 	bne.w	80017e0 <CenLocLockUnlockStates+0x34c>
	{

		Btc_CenLoc = STD_LOW;
 8001608:	4b43      	ldr	r3, [pc, #268]	; (8001718 <CenLocLockUnlockStates+0x284>)
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
		IntLightsToggleIntLights(CenLoc_CurrentState);
 800160e:	4b3f      	ldr	r3, [pc, #252]	; (800170c <CenLocLockUnlockStates+0x278>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f001 f8b6 	bl	8002784 <IntLightsToggleIntLights>
		CenLocToggleDoorLED(CenLoc_CurrentState);
 8001618:	4b3c      	ldr	r3, [pc, #240]	; (800170c <CenLocLockUnlockStates+0x278>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ff01 	bl	8001424 <CenLocToggleDoorLED>

		HAL_TIM_Base_Start(&htim3);
 8001622:	483c      	ldr	r0, [pc, #240]	; (8001714 <CenLocLockUnlockStates+0x280>)
 8001624:	f008 fe30 	bl	800a288 <HAL_TIM_Base_Start>

		if(CenLoc_ExtLights_UnlockedState == STD_LOW && CenLoc_ExtLights_LockedState == STD_HIGH)
 8001628:	4b3c      	ldr	r3, [pc, #240]	; (800171c <CenLocLockUnlockStates+0x288>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d126      	bne.n	800167e <CenLocLockUnlockStates+0x1ea>
 8001630:	4b3b      	ldr	r3, [pc, #236]	; (8001720 <CenLocLockUnlockStates+0x28c>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d122      	bne.n	800167e <CenLocLockUnlockStates+0x1ea>
		{

			HAL_TIM_Base_Start(&htim5);
 8001638:	483a      	ldr	r0, [pc, #232]	; (8001724 <CenLocLockUnlockStates+0x290>)
 800163a:	f008 fe25 	bl	800a288 <HAL_TIM_Base_Start>

			if(__HAL_TIM_GET_COUNTER(&htim5) < 100000)
 800163e:	4b39      	ldr	r3, [pc, #228]	; (8001724 <CenLocLockUnlockStates+0x290>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001644:	4a38      	ldr	r2, [pc, #224]	; (8001728 <CenLocLockUnlockStates+0x294>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d805      	bhi.n	8001656 <CenLocLockUnlockStates+0x1c2>
			{

				CenLoc_FollowMeHomeState = STD_HIGH;
 800164a:	4b38      	ldr	r3, [pc, #224]	; (800172c <CenLocLockUnlockStates+0x298>)
 800164c:	2201      	movs	r2, #1
 800164e:	701a      	strb	r2, [r3, #0]
				CenLocFollowMeHome();
 8001650:	f7ff fefa 	bl	8001448 <CenLocFollowMeHome>
 8001654:	e013      	b.n	800167e <CenLocLockUnlockStates+0x1ea>

			}
			else if(__HAL_TIM_GET_COUNTER(&htim5) > 100000)
 8001656:	4b33      	ldr	r3, [pc, #204]	; (8001724 <CenLocLockUnlockStates+0x290>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165c:	4a37      	ldr	r2, [pc, #220]	; (800173c <CenLocLockUnlockStates+0x2a8>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d90d      	bls.n	800167e <CenLocLockUnlockStates+0x1ea>
			{

				CenLoc_FollowMeHomeState 		= STD_LOW;
 8001662:	4b32      	ldr	r3, [pc, #200]	; (800172c <CenLocLockUnlockStates+0x298>)
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
				CenLoc_ExtLights_UnlockedState 	= STD_HIGH;
 8001668:	4b2c      	ldr	r3, [pc, #176]	; (800171c <CenLocLockUnlockStates+0x288>)
 800166a:	2201      	movs	r2, #1
 800166c:	701a      	strb	r2, [r3, #0]
				CenLoc_ExtLights_LockedState 	= STD_LOW;
 800166e:	4b2c      	ldr	r3, [pc, #176]	; (8001720 <CenLocLockUnlockStates+0x28c>)
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]
				CenLocFollowMeHome();
 8001674:	f7ff fee8 	bl	8001448 <CenLocFollowMeHome>
				HAL_TIM_Base_Stop(&htim5);
 8001678:	482a      	ldr	r0, [pc, #168]	; (8001724 <CenLocLockUnlockStates+0x290>)
 800167a:	f008 fe5f 	bl	800a33c <HAL_TIM_Base_Stop>

			/* do nothing */

		}

		if(40000 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 41250)
 800167e:	4b25      	ldr	r3, [pc, #148]	; (8001714 <CenLocLockUnlockStates+0x280>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001684:	f649 4240 	movw	r2, #40000	; 0x9c40
 8001688:	4293      	cmp	r3, r2
 800168a:	d911      	bls.n	80016b0 <CenLocLockUnlockStates+0x21c>
 800168c:	4b21      	ldr	r3, [pc, #132]	; (8001714 <CenLocLockUnlockStates+0x280>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	f24a 1221 	movw	r2, #41249	; 0xa121
 8001696:	4293      	cmp	r3, r2
 8001698:	d80a      	bhi.n	80016b0 <CenLocLockUnlockStates+0x21c>
		{

			SecAlmToggleAlarmLed(!CenLoc_CurrentState);
 800169a:	4b1c      	ldr	r3, [pc, #112]	; (800170c <CenLocLockUnlockStates+0x278>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	bf0c      	ite	eq
 80016a2:	2301      	moveq	r3, #1
 80016a4:	2300      	movne	r3, #0
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	4618      	mov	r0, r3
 80016aa:	f001 fc2f 	bl	8002f0c <SecAlmToggleAlarmLed>
 80016ae:	e05a      	b.n	8001766 <CenLocLockUnlockStates+0x2d2>

		}
		else if(41250 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 42500)
 80016b0:	4b18      	ldr	r3, [pc, #96]	; (8001714 <CenLocLockUnlockStates+0x280>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	f24a 1222 	movw	r2, #41250	; 0xa122
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d90c      	bls.n	80016d8 <CenLocLockUnlockStates+0x244>
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <CenLocLockUnlockStates+0x280>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c4:	f24a 6203 	movw	r2, #42499	; 0xa603
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d805      	bhi.n	80016d8 <CenLocLockUnlockStates+0x244>
		{

			SecAlmToggleAlarmLed(CenLoc_CurrentState);
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <CenLocLockUnlockStates+0x278>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f001 fc1b 	bl	8002f0c <SecAlmToggleAlarmLed>
 80016d6:	e046      	b.n	8001766 <CenLocLockUnlockStates+0x2d2>

		}
		else if(42500 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 43750)
 80016d8:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <CenLocLockUnlockStates+0x280>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016de:	f24a 6204 	movw	r2, #42500	; 0xa604
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d92c      	bls.n	8001740 <CenLocLockUnlockStates+0x2ac>
 80016e6:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <CenLocLockUnlockStates+0x280>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ec:	f64a 22e5 	movw	r2, #43749	; 0xaae5
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d825      	bhi.n	8001740 <CenLocLockUnlockStates+0x2ac>
		{

			SecAlmToggleAlarmLed(!CenLoc_CurrentState);
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <CenLocLockUnlockStates+0x278>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	bf0c      	ite	eq
 80016fc:	2301      	moveq	r3, #1
 80016fe:	2300      	movne	r3, #0
 8001700:	b2db      	uxtb	r3, r3
 8001702:	4618      	mov	r0, r3
 8001704:	f001 fc02 	bl	8002f0c <SecAlmToggleAlarmLed>
 8001708:	e02d      	b.n	8001766 <CenLocLockUnlockStates+0x2d2>
 800170a:	bf00      	nop
 800170c:	20000092 	.word	0x20000092
 8001710:	200000fc 	.word	0x200000fc
 8001714:	20000598 	.word	0x20000598
 8001718:	2000009b 	.word	0x2000009b
 800171c:	20000095 	.word	0x20000095
 8001720:	20000096 	.word	0x20000096
 8001724:	20000700 	.word	0x20000700
 8001728:	0001869f 	.word	0x0001869f
 800172c:	20000097 	.word	0x20000097
 8001730:	20000099 	.word	0x20000099
 8001734:	200004e4 	.word	0x200004e4
 8001738:	20000098 	.word	0x20000098
 800173c:	000186a0 	.word	0x000186a0

		}
		else if(43750 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 45000)
 8001740:	4b2a      	ldr	r3, [pc, #168]	; (80017ec <CenLocLockUnlockStates+0x358>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001746:	f64a 22e6 	movw	r2, #43750	; 0xaae6
 800174a:	4293      	cmp	r3, r2
 800174c:	d90b      	bls.n	8001766 <CenLocLockUnlockStates+0x2d2>
 800174e:	4b27      	ldr	r3, [pc, #156]	; (80017ec <CenLocLockUnlockStates+0x358>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001754:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8001758:	4293      	cmp	r3, r2
 800175a:	d804      	bhi.n	8001766 <CenLocLockUnlockStates+0x2d2>
		{

			SecAlmToggleAlarmLed(CenLoc_CurrentState);
 800175c:	4b24      	ldr	r3, [pc, #144]	; (80017f0 <CenLocLockUnlockStates+0x35c>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f001 fbd3 	bl	8002f0c <SecAlmToggleAlarmLed>

			/* do nothing */

		}

		if(CenLoc_UnlockCounter < 2 && CenLoc_LockUnlockFlag == STD_HIGH)
 8001766:	4b23      	ldr	r3, [pc, #140]	; (80017f4 <CenLocLockUnlockStates+0x360>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d82d      	bhi.n	80017ca <CenLocLockUnlockStates+0x336>
 800176e:	4b22      	ldr	r3, [pc, #136]	; (80017f8 <CenLocLockUnlockStates+0x364>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d129      	bne.n	80017ca <CenLocLockUnlockStates+0x336>
		{

			HAL_TIM_Base_Start(&htim2);
 8001776:	4821      	ldr	r0, [pc, #132]	; (80017fc <CenLocLockUnlockStates+0x368>)
 8001778:	f008 fd86 	bl	800a288 <HAL_TIM_Base_Start>

			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 800177c:	4b1f      	ldr	r3, [pc, #124]	; (80017fc <CenLocLockUnlockStates+0x368>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001782:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001786:	4293      	cmp	r3, r2
 8001788:	d805      	bhi.n	8001796 <CenLocLockUnlockStates+0x302>
			{

				CenLoc_BlinkState = STD_HIGH;
 800178a:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <CenLocLockUnlockStates+0x36c>)
 800178c:	2201      	movs	r2, #1
 800178e:	701a      	strb	r2, [r3, #0]
				CenLocBlinkSignals();
 8001790:	f7ff fe70 	bl	8001474 <CenLocBlinkSignals>
			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8001794:	e023      	b.n	80017de <CenLocLockUnlockStates+0x34a>

			}
			else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8001796:	4b19      	ldr	r3, [pc, #100]	; (80017fc <CenLocLockUnlockStates+0x368>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d91c      	bls.n	80017de <CenLocLockUnlockStates+0x34a>
 80017a4:	4b15      	ldr	r3, [pc, #84]	; (80017fc <CenLocLockUnlockStates+0x368>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	f241 3287 	movw	r2, #4999	; 0x1387
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d815      	bhi.n	80017de <CenLocLockUnlockStates+0x34a>
			{

				CenLoc_BlinkState = STD_LOW;
 80017b2:	4b13      	ldr	r3, [pc, #76]	; (8001800 <CenLocLockUnlockStates+0x36c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
				CenLocBlinkSignals();
 80017b8:	f7ff fe5c 	bl	8001474 <CenLocBlinkSignals>
				CenLoc_UnlockCounter = CenLoc_UnlockCounter + 1;
 80017bc:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <CenLocLockUnlockStates+0x360>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	3301      	adds	r3, #1
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <CenLocLockUnlockStates+0x360>)
 80017c6:	701a      	strb	r2, [r3, #0]
			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 80017c8:	e009      	b.n	80017de <CenLocLockUnlockStates+0x34a>
				/* do nothing */

			}

		}
		else if(CenLoc_UnlockCounter >= 2)
 80017ca:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <CenLocLockUnlockStates+0x360>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d906      	bls.n	80017e0 <CenLocLockUnlockStates+0x34c>
		{

			HAL_TIM_Base_Stop(&htim2);
 80017d2:	480a      	ldr	r0, [pc, #40]	; (80017fc <CenLocLockUnlockStates+0x368>)
 80017d4:	f008 fdb2 	bl	800a33c <HAL_TIM_Base_Stop>
 80017d8:	e002      	b.n	80017e0 <CenLocLockUnlockStates+0x34c>
		if(CenLoc_LockCounter < 4)
 80017da:	bf00      	nop
 80017dc:	e000      	b.n	80017e0 <CenLocLockUnlockStates+0x34c>
			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 80017de:	bf00      	nop

		/* do nothing */

	}

	return status;
 80017e0:	79fb      	ldrb	r3, [r7, #7]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000598 	.word	0x20000598
 80017f0:	20000092 	.word	0x20000092
 80017f4:	2000009a 	.word	0x2000009a
 80017f8:	20000094 	.word	0x20000094
 80017fc:	200004e4 	.word	0x200004e4
 8001800:	20000098 	.word	0x20000098

08001804 <CenLocMainFunction>:

void CenLocMainFunction()
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0

	CenLocRxBtcState();
 8001808:	f7ff fdf0 	bl	80013ec <CenLocRxBtcState>
	CenLocSecAlmStateToOff();
 800180c:	f7ff fddc 	bl	80013c8 <CenLocSecAlmStateToOff>
	CenLocState();
 8001810:	f7ff fd8c 	bl	800132c <CenLocState>
	CenLocLockUnlockStates();
 8001814:	f7ff fe3e 	bl	8001494 <CenLocLockUnlockStates>

}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}

0800181c <ExtLightsMainFunction>:
void ExtLightsLightState();
StdReturnType ExtLightsInit();
uint32 ExtLightsLightReadSensorValue();

void ExtLightsMainFunction()
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0

	ExtLightsRxBtcState();
 8001820:	f000 fa4e 	bl	8001cc0 <ExtLightsRxBtcState>
	ExtLightsLightState();
 8001824:	f000 f86a 	bl	80018fc <ExtLightsLightState>

}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}

0800182c <ExtLightsInit>:

StdReturnType ExtLightsInit()
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0

	ExtLights_ReverseLight_CurrentState 		= STD_LOW;
 8001830:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <ExtLightsInit+0x84>)
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]
	ExtLights_BrakeLight_CurrentState 			= STD_LOW;
 8001836:	4b1f      	ldr	r3, [pc, #124]	; (80018b4 <ExtLightsInit+0x88>)
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
	ExtLights_FlashHighBeam_CurrentState 		= STD_LOW;
 800183c:	4b1e      	ldr	r3, [pc, #120]	; (80018b8 <ExtLightsInit+0x8c>)
 800183e:	2200      	movs	r2, #0
 8001840:	701a      	strb	r2, [r3, #0]
	ExtLights_LightsSwitch_CurrentState 		= STD_LOW;
 8001842:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <ExtLightsInit+0x90>)
 8001844:	2200      	movs	r2, #0
 8001846:	701a      	strb	r2, [r3, #0]
	ExtLights_HighBeam_CurrentState 			= STD_LOW;
 8001848:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <ExtLightsInit+0x94>)
 800184a:	2200      	movs	r2, #0
 800184c:	701a      	strb	r2, [r3, #0]
	ExtLights_FrontFogLight_CurrentState 		= STD_LOW;
 800184e:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <ExtLightsInit+0x98>)
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
	ExtLights_TurnSignalLeft_CurrentState 		= STD_LOW;
 8001854:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <ExtLightsInit+0x9c>)
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
	ExtLights_TurnSignalRight_CurrentState 		= STD_LOW;
 800185a:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <ExtLightsInit+0xa0>)
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
	ExtLights_HazardLight_CurrentState 			= STD_LOW;
 8001860:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <ExtLightsInit+0xa4>)
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
	ExtLights_RearFogLight_CurrentState 		= STD_LOW;
 8001866:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <ExtLightsInit+0xa8>)
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
	Btc_LightSwitch 							= STD_LOW;
 800186c:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <ExtLightsInit+0xac>)
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
	Btc_HighBeam 								= STD_LOW;
 8001872:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <ExtLightsInit+0xb0>)
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
	Btc_FlashHighBeam 							= STD_LOW;
 8001878:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <ExtLightsInit+0xb4>)
 800187a:	2200      	movs	r2, #0
 800187c:	701a      	strb	r2, [r3, #0]
	Btc_FrontFogLight 							= STD_LOW;
 800187e:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <ExtLightsInit+0xb8>)
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]
	Btc_TurnSignalLeft 							= STD_LOW;
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <ExtLightsInit+0xbc>)
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
	Btc_TurnSignalRight 						= STD_LOW;
 800188a:	4b18      	ldr	r3, [pc, #96]	; (80018ec <ExtLightsInit+0xc0>)
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]
	Btc_HazardLight 							= STD_LOW;
 8001890:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <ExtLightsInit+0xc4>)
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]
	Btc_BrakeLight								= STD_LOW;
 8001896:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <ExtLightsInit+0xc8>)
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]
	Btc_RearFogLight 							= STD_LOW;
 800189c:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <ExtLightsInit+0xcc>)
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]

	return E_OK;
 80018a2:	2300      	movs	r3, #0

}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	2000009c 	.word	0x2000009c
 80018b4:	2000009d 	.word	0x2000009d
 80018b8:	2000009e 	.word	0x2000009e
 80018bc:	2000009f 	.word	0x2000009f
 80018c0:	200000a0 	.word	0x200000a0
 80018c4:	200000a1 	.word	0x200000a1
 80018c8:	200000a2 	.word	0x200000a2
 80018cc:	200000a3 	.word	0x200000a3
 80018d0:	200000a4 	.word	0x200000a4
 80018d4:	200000a5 	.word	0x200000a5
 80018d8:	200000a6 	.word	0x200000a6
 80018dc:	200000a7 	.word	0x200000a7
 80018e0:	200000a8 	.word	0x200000a8
 80018e4:	200000a9 	.word	0x200000a9
 80018e8:	200000aa 	.word	0x200000aa
 80018ec:	200000ab 	.word	0x200000ab
 80018f0:	200000ac 	.word	0x200000ac
 80018f4:	200000ad 	.word	0x200000ad
 80018f8:	200000ae 	.word	0x200000ae

080018fc <ExtLightsLightState>:

void ExtLightsLightState()
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0

	uint8 lightSensorState = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	71fb      	strb	r3, [r7, #7]

	ExtLightsHighBeam(ExtLights_HighBeam_CurrentState);
 8001906:	4b98      	ldr	r3, [pc, #608]	; (8001b68 <ExtLightsLightState+0x26c>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f000 faba 	bl	8001e84 <ExtLightsHighBeam>
	ExtLightsHighBeam(ExtLights_FlashHighBeam_CurrentState);
 8001910:	4b96      	ldr	r3, [pc, #600]	; (8001b6c <ExtLightsLightState+0x270>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f000 fab5 	bl	8001e84 <ExtLightsHighBeam>
	ExtLightsFrontFogLight(ExtLights_FrontFogLight_CurrentState);
 800191a:	4b95      	ldr	r3, [pc, #596]	; (8001b70 <ExtLightsLightState+0x274>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f000 fad4 	bl	8001ecc <ExtLightsFrontFogLight>
	ExtLightsRearFogLight(ExtLights_RearFogLight_CurrentState);
 8001924:	4b93      	ldr	r3, [pc, #588]	; (8001b74 <ExtLightsLightState+0x278>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f000 fb17 	bl	8001f5c <ExtLightsRearFogLight>
	ExtLightsReverseLight(ExtLights_ReverseLight_CurrentState);
 800192e:	4b92      	ldr	r3, [pc, #584]	; (8001b78 <ExtLightsLightState+0x27c>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f000 fb24 	bl	8001f80 <ExtLightsReverseLight>


	if(ExtLights_LightsSwitch_CurrentState == EXTLIGHTS_LIGHTSWITCH_STATEZERO)
 8001938:	4b90      	ldr	r3, [pc, #576]	; (8001b7c <ExtLightsLightState+0x280>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b64      	cmp	r3, #100	; 0x64
 800193e:	d10c      	bne.n	800195a <ExtLightsLightState+0x5e>
	{

		ExtLightsLowBeam(STD_LOW);
 8001940:	2000      	movs	r0, #0
 8001942:	f000 fa8d 	bl	8001e60 <ExtLightsLowBeam>
		ExtLightsDayTimeRunningLight(STD_LOW);
 8001946:	2000      	movs	r0, #0
 8001948:	f000 faae 	bl	8001ea8 <ExtLightsDayTimeRunningLight>
		ExtLightsRearPositionLight(STD_LOW);
 800194c:	2000      	movs	r0, #0
 800194e:	f000 faf3 	bl	8001f38 <ExtLightsRearPositionLight>
		ExtLightsLicensePlateLight(STD_LOW);
 8001952:	2000      	movs	r0, #0
 8001954:	f000 fb26 	bl	8001fa4 <ExtLightsLicensePlateLight>
 8001958:	e048      	b.n	80019ec <ExtLightsLightState+0xf0>

	}
	else if(ExtLights_LightsSwitch_CurrentState == EXTLIGHTS_LIGHTSWITCH_STATEONE)
 800195a:	4b88      	ldr	r3, [pc, #544]	; (8001b7c <ExtLightsLightState+0x280>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b65      	cmp	r3, #101	; 0x65
 8001960:	d123      	bne.n	80019aa <ExtLightsLightState+0xae>
	{

		lightSensorState = ExtLightsLightReadSensorValue();
 8001962:	f000 fa6b 	bl	8001e3c <ExtLightsLightReadSensorValue>
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]

		if(lightSensorState < EXTLIGHTS_LIGHTSENSOR_DAYNIGHTVALUE)
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	2b95      	cmp	r3, #149	; 0x95
 800196e:	d80c      	bhi.n	800198a <ExtLightsLightState+0x8e>
		{

			ExtLightsLowBeam(STD_HIGH);
 8001970:	2001      	movs	r0, #1
 8001972:	f000 fa75 	bl	8001e60 <ExtLightsLowBeam>
			ExtLightsDayTimeRunningLight(STD_HIGH);
 8001976:	2001      	movs	r0, #1
 8001978:	f000 fa96 	bl	8001ea8 <ExtLightsDayTimeRunningLight>
			ExtLightsRearPositionLight(STD_HIGH);
 800197c:	2001      	movs	r0, #1
 800197e:	f000 fadb 	bl	8001f38 <ExtLightsRearPositionLight>
			ExtLightsLicensePlateLight(STD_HIGH);
 8001982:	2001      	movs	r0, #1
 8001984:	f000 fb0e 	bl	8001fa4 <ExtLightsLicensePlateLight>
 8001988:	e030      	b.n	80019ec <ExtLightsLightState+0xf0>

		}
		else if(lightSensorState > EXTLIGHTS_LIGHTSENSOR_DAYNIGHTVALUE)
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	2b96      	cmp	r3, #150	; 0x96
 800198e:	d92d      	bls.n	80019ec <ExtLightsLightState+0xf0>
		{

			ExtLightsLowBeam(STD_LOW);
 8001990:	2000      	movs	r0, #0
 8001992:	f000 fa65 	bl	8001e60 <ExtLightsLowBeam>
			ExtLightsDayTimeRunningLight(STD_HIGH);
 8001996:	2001      	movs	r0, #1
 8001998:	f000 fa86 	bl	8001ea8 <ExtLightsDayTimeRunningLight>
			ExtLightsRearPositionLight(STD_LOW);
 800199c:	2000      	movs	r0, #0
 800199e:	f000 facb 	bl	8001f38 <ExtLightsRearPositionLight>
			ExtLightsLicensePlateLight(STD_LOW);
 80019a2:	2000      	movs	r0, #0
 80019a4:	f000 fafe 	bl	8001fa4 <ExtLightsLicensePlateLight>
 80019a8:	e020      	b.n	80019ec <ExtLightsLightState+0xf0>

		}

	}
	else if(ExtLights_LightsSwitch_CurrentState == EXTLIGHTS_LIGHTSWITCH_STATETWO)
 80019aa:	4b74      	ldr	r3, [pc, #464]	; (8001b7c <ExtLightsLightState+0x280>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b66      	cmp	r3, #102	; 0x66
 80019b0:	d10c      	bne.n	80019cc <ExtLightsLightState+0xd0>
	{

		ExtLightsLowBeam(STD_LOW);
 80019b2:	2000      	movs	r0, #0
 80019b4:	f000 fa54 	bl	8001e60 <ExtLightsLowBeam>
		ExtLightsDayTimeRunningLight(STD_HIGH);
 80019b8:	2001      	movs	r0, #1
 80019ba:	f000 fa75 	bl	8001ea8 <ExtLightsDayTimeRunningLight>
		ExtLightsRearPositionLight(STD_HIGH);
 80019be:	2001      	movs	r0, #1
 80019c0:	f000 faba 	bl	8001f38 <ExtLightsRearPositionLight>
		ExtLightsLicensePlateLight(STD_HIGH);
 80019c4:	2001      	movs	r0, #1
 80019c6:	f000 faed 	bl	8001fa4 <ExtLightsLicensePlateLight>
 80019ca:	e00f      	b.n	80019ec <ExtLightsLightState+0xf0>

	}
	else if(ExtLights_LightsSwitch_CurrentState == EXTLIGHTS_LIGHTSWITCH_STATETHREE)
 80019cc:	4b6b      	ldr	r3, [pc, #428]	; (8001b7c <ExtLightsLightState+0x280>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b67      	cmp	r3, #103	; 0x67
 80019d2:	d10b      	bne.n	80019ec <ExtLightsLightState+0xf0>
	{

		ExtLightsLowBeam(STD_HIGH);
 80019d4:	2001      	movs	r0, #1
 80019d6:	f000 fa43 	bl	8001e60 <ExtLightsLowBeam>
		ExtLightsDayTimeRunningLight(STD_HIGH);
 80019da:	2001      	movs	r0, #1
 80019dc:	f000 fa64 	bl	8001ea8 <ExtLightsDayTimeRunningLight>
		ExtLightsRearPositionLight(STD_HIGH);
 80019e0:	2001      	movs	r0, #1
 80019e2:	f000 faa9 	bl	8001f38 <ExtLightsRearPositionLight>
		ExtLightsLicensePlateLight(STD_HIGH);
 80019e6:	2001      	movs	r0, #1
 80019e8:	f000 fadc 	bl	8001fa4 <ExtLightsLicensePlateLight>

		/* do nothing */

	}

	if(ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 80019ec:	4b64      	ldr	r3, [pc, #400]	; (8001b80 <ExtLightsLightState+0x284>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d155      	bne.n	8001aa0 <ExtLightsLightState+0x1a4>
	{

		HAL_TIM_Base_Start(&htim2);
 80019f4:	4863      	ldr	r0, [pc, #396]	; (8001b84 <ExtLightsLightState+0x288>)
 80019f6:	f008 fc47 	bl	800a288 <HAL_TIM_Base_Start>

		if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 80019fa:	4b62      	ldr	r3, [pc, #392]	; (8001b84 <ExtLightsLightState+0x288>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d805      	bhi.n	8001a14 <ExtLightsLightState+0x118>
		{

			ExtLightsTurnSignalLeft(ExtLights_TurnSignalLeft_CurrentState);
 8001a08:	4b5d      	ldr	r3, [pc, #372]	; (8001b80 <ExtLightsLightState+0x284>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f000 fa6f 	bl	8001ef0 <ExtLightsTurnSignalLeft>
 8001a12:	e04e      	b.n	8001ab2 <ExtLightsLightState+0x1b6>

		}
		else if(2500 < __HAL_TIM_GET_COUNTER(&htim2)  && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8001a14:	4b5b      	ldr	r3, [pc, #364]	; (8001b84 <ExtLightsLightState+0x288>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d911      	bls.n	8001a46 <ExtLightsLightState+0x14a>
 8001a22:	4b58      	ldr	r3, [pc, #352]	; (8001b84 <ExtLightsLightState+0x288>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	f241 3287 	movw	r2, #4999	; 0x1387
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d80a      	bhi.n	8001a46 <ExtLightsLightState+0x14a>
		{

			ExtLightsTurnSignalLeft(!ExtLights_TurnSignalLeft_CurrentState);
 8001a30:	4b53      	ldr	r3, [pc, #332]	; (8001b80 <ExtLightsLightState+0x284>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	bf0c      	ite	eq
 8001a38:	2301      	moveq	r3, #1
 8001a3a:	2300      	movne	r3, #0
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f000 fa56 	bl	8001ef0 <ExtLightsTurnSignalLeft>
 8001a44:	e035      	b.n	8001ab2 <ExtLightsLightState+0x1b6>

		}
		else if(5000 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 8001a46:	4b4f      	ldr	r3, [pc, #316]	; (8001b84 <ExtLightsLightState+0x288>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d90c      	bls.n	8001a6e <ExtLightsLightState+0x172>
 8001a54:	4b4b      	ldr	r3, [pc, #300]	; (8001b84 <ExtLightsLightState+0x288>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d805      	bhi.n	8001a6e <ExtLightsLightState+0x172>
		{

			ExtLightsTurnSignalLeft(ExtLights_TurnSignalLeft_CurrentState);
 8001a62:	4b47      	ldr	r3, [pc, #284]	; (8001b80 <ExtLightsLightState+0x284>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 fa42 	bl	8001ef0 <ExtLightsTurnSignalLeft>
 8001a6c:	e021      	b.n	8001ab2 <ExtLightsLightState+0x1b6>

		}
		else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 8001a6e:	4b45      	ldr	r3, [pc, #276]	; (8001b84 <ExtLightsLightState+0x288>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d91a      	bls.n	8001ab2 <ExtLightsLightState+0x1b6>
 8001a7c:	4b41      	ldr	r3, [pc, #260]	; (8001b84 <ExtLightsLightState+0x288>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a82:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d813      	bhi.n	8001ab2 <ExtLightsLightState+0x1b6>
		{

			ExtLightsTurnSignalLeft(!ExtLights_TurnSignalLeft_CurrentState);
 8001a8a:	4b3d      	ldr	r3, [pc, #244]	; (8001b80 <ExtLightsLightState+0x284>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	bf0c      	ite	eq
 8001a92:	2301      	moveq	r3, #1
 8001a94:	2300      	movne	r3, #0
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f000 fa29 	bl	8001ef0 <ExtLightsTurnSignalLeft>
 8001a9e:	e008      	b.n	8001ab2 <ExtLightsLightState+0x1b6>
			/* do nothing */

		}

	}
	else if(ExtLights_TurnSignalLeft_CurrentState == STD_LOW)
 8001aa0:	4b37      	ldr	r3, [pc, #220]	; (8001b80 <ExtLightsLightState+0x284>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d104      	bne.n	8001ab2 <ExtLightsLightState+0x1b6>
	{

		ExtLightsTurnSignalLeft(ExtLights_TurnSignalLeft_CurrentState);
 8001aa8:	4b35      	ldr	r3, [pc, #212]	; (8001b80 <ExtLightsLightState+0x284>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f000 fa1f 	bl	8001ef0 <ExtLightsTurnSignalLeft>

		/* do nothing */

	}

	if(ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 8001ab2:	4b35      	ldr	r3, [pc, #212]	; (8001b88 <ExtLightsLightState+0x28c>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d168      	bne.n	8001b8c <ExtLightsLightState+0x290>
	{

		HAL_TIM_Base_Start(&htim2);
 8001aba:	4832      	ldr	r0, [pc, #200]	; (8001b84 <ExtLightsLightState+0x288>)
 8001abc:	f008 fbe4 	bl	800a288 <HAL_TIM_Base_Start>

		if(__HAL_TIM_GET_COUNTER(&htim2)< 2500)
 8001ac0:	4b30      	ldr	r3, [pc, #192]	; (8001b84 <ExtLightsLightState+0x288>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d805      	bhi.n	8001ada <ExtLightsLightState+0x1de>
		{

			ExtLightsTurnSignalRight(ExtLights_TurnSignalRight_CurrentState);
 8001ace:	4b2e      	ldr	r3, [pc, #184]	; (8001b88 <ExtLightsLightState+0x28c>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 fa1e 	bl	8001f14 <ExtLightsTurnSignalRight>
 8001ad8:	e061      	b.n	8001b9e <ExtLightsLightState+0x2a2>

		}
		else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8001ada:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <ExtLightsLightState+0x288>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d911      	bls.n	8001b0c <ExtLightsLightState+0x210>
 8001ae8:	4b26      	ldr	r3, [pc, #152]	; (8001b84 <ExtLightsLightState+0x288>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	f241 3287 	movw	r2, #4999	; 0x1387
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d80a      	bhi.n	8001b0c <ExtLightsLightState+0x210>
		{

			ExtLightsTurnSignalRight(!ExtLights_TurnSignalRight_CurrentState);
 8001af6:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <ExtLightsLightState+0x28c>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	bf0c      	ite	eq
 8001afe:	2301      	moveq	r3, #1
 8001b00:	2300      	movne	r3, #0
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	4618      	mov	r0, r3
 8001b06:	f000 fa05 	bl	8001f14 <ExtLightsTurnSignalRight>
 8001b0a:	e048      	b.n	8001b9e <ExtLightsLightState+0x2a2>

		}
		else if(5000 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 8001b0c:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <ExtLightsLightState+0x288>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d90c      	bls.n	8001b34 <ExtLightsLightState+0x238>
 8001b1a:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <ExtLightsLightState+0x288>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b20:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d805      	bhi.n	8001b34 <ExtLightsLightState+0x238>
		{

			ExtLightsTurnSignalRight(ExtLights_TurnSignalRight_CurrentState);
 8001b28:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <ExtLightsLightState+0x28c>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f000 f9f1 	bl	8001f14 <ExtLightsTurnSignalRight>
 8001b32:	e034      	b.n	8001b9e <ExtLightsLightState+0x2a2>

		}
		else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 8001b34:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <ExtLightsLightState+0x288>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3a:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d92d      	bls.n	8001b9e <ExtLightsLightState+0x2a2>
 8001b42:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <ExtLightsLightState+0x288>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d826      	bhi.n	8001b9e <ExtLightsLightState+0x2a2>
		{

			ExtLightsTurnSignalRight(!ExtLights_TurnSignalRight_CurrentState);
 8001b50:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <ExtLightsLightState+0x28c>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	bf0c      	ite	eq
 8001b58:	2301      	moveq	r3, #1
 8001b5a:	2300      	movne	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 f9d8 	bl	8001f14 <ExtLightsTurnSignalRight>
 8001b64:	e01b      	b.n	8001b9e <ExtLightsLightState+0x2a2>
 8001b66:	bf00      	nop
 8001b68:	200000a0 	.word	0x200000a0
 8001b6c:	2000009e 	.word	0x2000009e
 8001b70:	200000a1 	.word	0x200000a1
 8001b74:	200000a5 	.word	0x200000a5
 8001b78:	2000009c 	.word	0x2000009c
 8001b7c:	2000009f 	.word	0x2000009f
 8001b80:	200000a2 	.word	0x200000a2
 8001b84:	200004e4 	.word	0x200004e4
 8001b88:	200000a3 	.word	0x200000a3

			/* do nothing */

		}
	}
	else if(ExtLights_TurnSignalRight_CurrentState == STD_LOW)
 8001b8c:	4b49      	ldr	r3, [pc, #292]	; (8001cb4 <ExtLightsLightState+0x3b8>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d104      	bne.n	8001b9e <ExtLightsLightState+0x2a2>
	{

		ExtLightsTurnSignalRight(ExtLights_TurnSignalRight_CurrentState);
 8001b94:	4b47      	ldr	r3, [pc, #284]	; (8001cb4 <ExtLightsLightState+0x3b8>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f000 f9bb 	bl	8001f14 <ExtLightsTurnSignalRight>

		/* do nothing */

	}

	if(ExtLights_HazardLight_CurrentState == STD_HIGH)
 8001b9e:	4b46      	ldr	r3, [pc, #280]	; (8001cb8 <ExtLightsLightState+0x3bc>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d173      	bne.n	8001c8e <ExtLightsLightState+0x392>
	{

		HAL_TIM_Base_Start(&htim2);
 8001ba6:	4845      	ldr	r0, [pc, #276]	; (8001cbc <ExtLightsLightState+0x3c0>)
 8001ba8:	f008 fb6e 	bl	800a288 <HAL_TIM_Base_Start>

		if(__HAL_TIM_GET_COUNTER(&htim2)< 2500)
 8001bac:	4b43      	ldr	r3, [pc, #268]	; (8001cbc <ExtLightsLightState+0x3c0>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb2:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d80a      	bhi.n	8001bd0 <ExtLightsLightState+0x2d4>
		{

			ExtLightsTurnSignalRight(ExtLights_HazardLight_CurrentState);
 8001bba:	4b3f      	ldr	r3, [pc, #252]	; (8001cb8 <ExtLightsLightState+0x3bc>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 f9a8 	bl	8001f14 <ExtLightsTurnSignalRight>
			ExtLightsTurnSignalLeft(ExtLights_HazardLight_CurrentState);
 8001bc4:	4b3c      	ldr	r3, [pc, #240]	; (8001cb8 <ExtLightsLightState+0x3bc>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f000 f991 	bl	8001ef0 <ExtLightsTurnSignalLeft>

		/* do nothing */

	}

}
 8001bce:	e06d      	b.n	8001cac <ExtLightsLightState+0x3b0>
		else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8001bd0:	4b3a      	ldr	r3, [pc, #232]	; (8001cbc <ExtLightsLightState+0x3c0>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d91b      	bls.n	8001c16 <ExtLightsLightState+0x31a>
 8001bde:	4b37      	ldr	r3, [pc, #220]	; (8001cbc <ExtLightsLightState+0x3c0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	f241 3287 	movw	r2, #4999	; 0x1387
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d814      	bhi.n	8001c16 <ExtLightsLightState+0x31a>
			ExtLightsTurnSignalRight(!ExtLights_HazardLight_CurrentState);
 8001bec:	4b32      	ldr	r3, [pc, #200]	; (8001cb8 <ExtLightsLightState+0x3bc>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	bf0c      	ite	eq
 8001bf4:	2301      	moveq	r3, #1
 8001bf6:	2300      	movne	r3, #0
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 f98a 	bl	8001f14 <ExtLightsTurnSignalRight>
			ExtLightsTurnSignalLeft(!ExtLights_HazardLight_CurrentState);
 8001c00:	4b2d      	ldr	r3, [pc, #180]	; (8001cb8 <ExtLightsLightState+0x3bc>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	bf0c      	ite	eq
 8001c08:	2301      	moveq	r3, #1
 8001c0a:	2300      	movne	r3, #0
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 f96e 	bl	8001ef0 <ExtLightsTurnSignalLeft>
 8001c14:	e04a      	b.n	8001cac <ExtLightsLightState+0x3b0>
		else if(5000 < __HAL_TIM_GET_COUNTER(&htim2)&& __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 8001c16:	4b29      	ldr	r3, [pc, #164]	; (8001cbc <ExtLightsLightState+0x3c0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d911      	bls.n	8001c48 <ExtLightsLightState+0x34c>
 8001c24:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <ExtLightsLightState+0x3c0>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d80a      	bhi.n	8001c48 <ExtLightsLightState+0x34c>
			ExtLightsTurnSignalRight(ExtLights_HazardLight_CurrentState);
 8001c32:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <ExtLightsLightState+0x3bc>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f000 f96c 	bl	8001f14 <ExtLightsTurnSignalRight>
			ExtLightsTurnSignalLeft(ExtLights_HazardLight_CurrentState);
 8001c3c:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <ExtLightsLightState+0x3bc>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f000 f955 	bl	8001ef0 <ExtLightsTurnSignalLeft>
 8001c46:	e031      	b.n	8001cac <ExtLightsLightState+0x3b0>
		else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 8001c48:	4b1c      	ldr	r3, [pc, #112]	; (8001cbc <ExtLightsLightState+0x3c0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d92a      	bls.n	8001cac <ExtLightsLightState+0x3b0>
 8001c56:	4b19      	ldr	r3, [pc, #100]	; (8001cbc <ExtLightsLightState+0x3c0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d823      	bhi.n	8001cac <ExtLightsLightState+0x3b0>
			ExtLightsTurnSignalRight(!ExtLights_HazardLight_CurrentState);
 8001c64:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <ExtLightsLightState+0x3bc>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	bf0c      	ite	eq
 8001c6c:	2301      	moveq	r3, #1
 8001c6e:	2300      	movne	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 f94e 	bl	8001f14 <ExtLightsTurnSignalRight>
			ExtLightsTurnSignalLeft(!ExtLights_HazardLight_CurrentState);
 8001c78:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <ExtLightsLightState+0x3bc>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	bf0c      	ite	eq
 8001c80:	2301      	moveq	r3, #1
 8001c82:	2300      	movne	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 f932 	bl	8001ef0 <ExtLightsTurnSignalLeft>
}
 8001c8c:	e00e      	b.n	8001cac <ExtLightsLightState+0x3b0>
	else if(ExtLights_HazardLight_CurrentState == STD_LOW)
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <ExtLightsLightState+0x3bc>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10a      	bne.n	8001cac <ExtLightsLightState+0x3b0>
		ExtLightsTurnSignalRight(ExtLights_HazardLight_CurrentState);
 8001c96:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <ExtLightsLightState+0x3bc>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 f93a 	bl	8001f14 <ExtLightsTurnSignalRight>
		ExtLightsTurnSignalLeft(ExtLights_HazardLight_CurrentState);
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <ExtLightsLightState+0x3bc>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f000 f923 	bl	8001ef0 <ExtLightsTurnSignalLeft>
}
 8001caa:	e7ff      	b.n	8001cac <ExtLightsLightState+0x3b0>
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	200000a3 	.word	0x200000a3
 8001cb8:	200000a4 	.word	0x200000a4
 8001cbc:	200004e4 	.word	0x200004e4

08001cc0 <ExtLightsRxBtcState>:

void ExtLightsRxBtcState()
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0

	if(Btc_LightSwitch == EXTLIGHTS_LIGHTSWITCH_STATEZERO)
 8001cc4:	4b4d      	ldr	r3, [pc, #308]	; (8001dfc <ExtLightsRxBtcState+0x13c>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b64      	cmp	r3, #100	; 0x64
 8001cca:	d103      	bne.n	8001cd4 <ExtLightsRxBtcState+0x14>
	{

		ExtLights_LightsSwitch_CurrentState = EXTLIGHTS_LIGHTSWITCH_STATEZERO;
 8001ccc:	4b4c      	ldr	r3, [pc, #304]	; (8001e00 <ExtLightsRxBtcState+0x140>)
 8001cce:	2264      	movs	r2, #100	; 0x64
 8001cd0:	701a      	strb	r2, [r3, #0]
 8001cd2:	e016      	b.n	8001d02 <ExtLightsRxBtcState+0x42>

	}
	else if(Btc_LightSwitch == EXTLIGHTS_LIGHTSWITCH_STATEONE)
 8001cd4:	4b49      	ldr	r3, [pc, #292]	; (8001dfc <ExtLightsRxBtcState+0x13c>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b65      	cmp	r3, #101	; 0x65
 8001cda:	d103      	bne.n	8001ce4 <ExtLightsRxBtcState+0x24>
	{

		ExtLights_LightsSwitch_CurrentState = EXTLIGHTS_LIGHTSWITCH_STATEONE;
 8001cdc:	4b48      	ldr	r3, [pc, #288]	; (8001e00 <ExtLightsRxBtcState+0x140>)
 8001cde:	2265      	movs	r2, #101	; 0x65
 8001ce0:	701a      	strb	r2, [r3, #0]
 8001ce2:	e00e      	b.n	8001d02 <ExtLightsRxBtcState+0x42>

	}
	else if(Btc_LightSwitch == EXTLIGHTS_LIGHTSWITCH_STATETWO)
 8001ce4:	4b45      	ldr	r3, [pc, #276]	; (8001dfc <ExtLightsRxBtcState+0x13c>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b66      	cmp	r3, #102	; 0x66
 8001cea:	d103      	bne.n	8001cf4 <ExtLightsRxBtcState+0x34>
	{

		ExtLights_LightsSwitch_CurrentState = EXTLIGHTS_LIGHTSWITCH_STATETWO;
 8001cec:	4b44      	ldr	r3, [pc, #272]	; (8001e00 <ExtLightsRxBtcState+0x140>)
 8001cee:	2266      	movs	r2, #102	; 0x66
 8001cf0:	701a      	strb	r2, [r3, #0]
 8001cf2:	e006      	b.n	8001d02 <ExtLightsRxBtcState+0x42>

	}
	else if(Btc_LightSwitch == EXTLIGHTS_LIGHTSWITCH_STATETHREE)
 8001cf4:	4b41      	ldr	r3, [pc, #260]	; (8001dfc <ExtLightsRxBtcState+0x13c>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b67      	cmp	r3, #103	; 0x67
 8001cfa:	d102      	bne.n	8001d02 <ExtLightsRxBtcState+0x42>
	{

		ExtLights_LightsSwitch_CurrentState = EXTLIGHTS_LIGHTSWITCH_STATETHREE;
 8001cfc:	4b40      	ldr	r3, [pc, #256]	; (8001e00 <ExtLightsRxBtcState+0x140>)
 8001cfe:	2267      	movs	r2, #103	; 0x67
 8001d00:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_HighBeam == STD_HIGH)
 8001d02:	4b40      	ldr	r3, [pc, #256]	; (8001e04 <ExtLightsRxBtcState+0x144>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d104      	bne.n	8001d14 <ExtLightsRxBtcState+0x54>
	{

		ExtLights_HighBeam_CurrentState = Btc_HighBeam;
 8001d0a:	4b3e      	ldr	r3, [pc, #248]	; (8001e04 <ExtLightsRxBtcState+0x144>)
 8001d0c:	781a      	ldrb	r2, [r3, #0]
 8001d0e:	4b3e      	ldr	r3, [pc, #248]	; (8001e08 <ExtLightsRxBtcState+0x148>)
 8001d10:	701a      	strb	r2, [r3, #0]
 8001d12:	e007      	b.n	8001d24 <ExtLightsRxBtcState+0x64>

	}
	else if(Btc_HighBeam == STD_LOW)
 8001d14:	4b3b      	ldr	r3, [pc, #236]	; (8001e04 <ExtLightsRxBtcState+0x144>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d103      	bne.n	8001d24 <ExtLightsRxBtcState+0x64>
	{

		ExtLights_HighBeam_CurrentState = Btc_HighBeam;
 8001d1c:	4b39      	ldr	r3, [pc, #228]	; (8001e04 <ExtLightsRxBtcState+0x144>)
 8001d1e:	781a      	ldrb	r2, [r3, #0]
 8001d20:	4b39      	ldr	r3, [pc, #228]	; (8001e08 <ExtLightsRxBtcState+0x148>)
 8001d22:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_FrontFogLight == STD_HIGH)
 8001d24:	4b39      	ldr	r3, [pc, #228]	; (8001e0c <ExtLightsRxBtcState+0x14c>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d104      	bne.n	8001d36 <ExtLightsRxBtcState+0x76>
	{

		ExtLights_FrontFogLight_CurrentState = Btc_FrontFogLight;
 8001d2c:	4b37      	ldr	r3, [pc, #220]	; (8001e0c <ExtLightsRxBtcState+0x14c>)
 8001d2e:	781a      	ldrb	r2, [r3, #0]
 8001d30:	4b37      	ldr	r3, [pc, #220]	; (8001e10 <ExtLightsRxBtcState+0x150>)
 8001d32:	701a      	strb	r2, [r3, #0]
 8001d34:	e007      	b.n	8001d46 <ExtLightsRxBtcState+0x86>

	}
	else if(Btc_FrontFogLight == STD_LOW)
 8001d36:	4b35      	ldr	r3, [pc, #212]	; (8001e0c <ExtLightsRxBtcState+0x14c>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d103      	bne.n	8001d46 <ExtLightsRxBtcState+0x86>
	{

		ExtLights_FrontFogLight_CurrentState = Btc_FrontFogLight;
 8001d3e:	4b33      	ldr	r3, [pc, #204]	; (8001e0c <ExtLightsRxBtcState+0x14c>)
 8001d40:	781a      	ldrb	r2, [r3, #0]
 8001d42:	4b33      	ldr	r3, [pc, #204]	; (8001e10 <ExtLightsRxBtcState+0x150>)
 8001d44:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_RearFogLight == STD_HIGH)
 8001d46:	4b33      	ldr	r3, [pc, #204]	; (8001e14 <ExtLightsRxBtcState+0x154>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d104      	bne.n	8001d58 <ExtLightsRxBtcState+0x98>
	{

		ExtLights_RearFogLight_CurrentState = Btc_RearFogLight;
 8001d4e:	4b31      	ldr	r3, [pc, #196]	; (8001e14 <ExtLightsRxBtcState+0x154>)
 8001d50:	781a      	ldrb	r2, [r3, #0]
 8001d52:	4b31      	ldr	r3, [pc, #196]	; (8001e18 <ExtLightsRxBtcState+0x158>)
 8001d54:	701a      	strb	r2, [r3, #0]
 8001d56:	e007      	b.n	8001d68 <ExtLightsRxBtcState+0xa8>

	}
	else if(Btc_RearFogLight == STD_LOW)
 8001d58:	4b2e      	ldr	r3, [pc, #184]	; (8001e14 <ExtLightsRxBtcState+0x154>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d103      	bne.n	8001d68 <ExtLightsRxBtcState+0xa8>
	{

		ExtLights_RearFogLight_CurrentState = Btc_RearFogLight;
 8001d60:	4b2c      	ldr	r3, [pc, #176]	; (8001e14 <ExtLightsRxBtcState+0x154>)
 8001d62:	781a      	ldrb	r2, [r3, #0]
 8001d64:	4b2c      	ldr	r3, [pc, #176]	; (8001e18 <ExtLightsRxBtcState+0x158>)
 8001d66:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_BrakeLight == STD_HIGH)
 8001d68:	4b2c      	ldr	r3, [pc, #176]	; (8001e1c <ExtLightsRxBtcState+0x15c>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d104      	bne.n	8001d7a <ExtLightsRxBtcState+0xba>
	{

		ExtLights_BrakeLight_CurrentState = Btc_BrakeLight;
 8001d70:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <ExtLightsRxBtcState+0x15c>)
 8001d72:	781a      	ldrb	r2, [r3, #0]
 8001d74:	4b2a      	ldr	r3, [pc, #168]	; (8001e20 <ExtLightsRxBtcState+0x160>)
 8001d76:	701a      	strb	r2, [r3, #0]
 8001d78:	e007      	b.n	8001d8a <ExtLightsRxBtcState+0xca>

	}
	else if(Btc_BrakeLight == STD_LOW)
 8001d7a:	4b28      	ldr	r3, [pc, #160]	; (8001e1c <ExtLightsRxBtcState+0x15c>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d103      	bne.n	8001d8a <ExtLightsRxBtcState+0xca>
	{

		ExtLights_BrakeLight_CurrentState = Btc_BrakeLight;
 8001d82:	4b26      	ldr	r3, [pc, #152]	; (8001e1c <ExtLightsRxBtcState+0x15c>)
 8001d84:	781a      	ldrb	r2, [r3, #0]
 8001d86:	4b26      	ldr	r3, [pc, #152]	; (8001e20 <ExtLightsRxBtcState+0x160>)
 8001d88:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_TurnSignalLeft == STD_HIGH)
 8001d8a:	4b26      	ldr	r3, [pc, #152]	; (8001e24 <ExtLightsRxBtcState+0x164>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d104      	bne.n	8001d9c <ExtLightsRxBtcState+0xdc>
	{

		ExtLights_TurnSignalLeft_CurrentState = Btc_TurnSignalLeft;
 8001d92:	4b24      	ldr	r3, [pc, #144]	; (8001e24 <ExtLightsRxBtcState+0x164>)
 8001d94:	781a      	ldrb	r2, [r3, #0]
 8001d96:	4b24      	ldr	r3, [pc, #144]	; (8001e28 <ExtLightsRxBtcState+0x168>)
 8001d98:	701a      	strb	r2, [r3, #0]
 8001d9a:	e007      	b.n	8001dac <ExtLightsRxBtcState+0xec>

	}
	else if(Btc_TurnSignalLeft == STD_LOW)
 8001d9c:	4b21      	ldr	r3, [pc, #132]	; (8001e24 <ExtLightsRxBtcState+0x164>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d103      	bne.n	8001dac <ExtLightsRxBtcState+0xec>
	{

		ExtLights_TurnSignalLeft_CurrentState = Btc_TurnSignalLeft;
 8001da4:	4b1f      	ldr	r3, [pc, #124]	; (8001e24 <ExtLightsRxBtcState+0x164>)
 8001da6:	781a      	ldrb	r2, [r3, #0]
 8001da8:	4b1f      	ldr	r3, [pc, #124]	; (8001e28 <ExtLightsRxBtcState+0x168>)
 8001daa:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_TurnSignalRight == STD_HIGH)
 8001dac:	4b1f      	ldr	r3, [pc, #124]	; (8001e2c <ExtLightsRxBtcState+0x16c>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d104      	bne.n	8001dbe <ExtLightsRxBtcState+0xfe>
	{

		ExtLights_TurnSignalRight_CurrentState = Btc_TurnSignalRight;
 8001db4:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <ExtLightsRxBtcState+0x16c>)
 8001db6:	781a      	ldrb	r2, [r3, #0]
 8001db8:	4b1d      	ldr	r3, [pc, #116]	; (8001e30 <ExtLightsRxBtcState+0x170>)
 8001dba:	701a      	strb	r2, [r3, #0]
 8001dbc:	e007      	b.n	8001dce <ExtLightsRxBtcState+0x10e>

	}
	else if(Btc_TurnSignalRight == STD_LOW)
 8001dbe:	4b1b      	ldr	r3, [pc, #108]	; (8001e2c <ExtLightsRxBtcState+0x16c>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d103      	bne.n	8001dce <ExtLightsRxBtcState+0x10e>
	{

		ExtLights_TurnSignalRight_CurrentState = Btc_TurnSignalRight;
 8001dc6:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <ExtLightsRxBtcState+0x16c>)
 8001dc8:	781a      	ldrb	r2, [r3, #0]
 8001dca:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <ExtLightsRxBtcState+0x170>)
 8001dcc:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_HazardLight == STD_HIGH)
 8001dce:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <ExtLightsRxBtcState+0x174>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d104      	bne.n	8001de0 <ExtLightsRxBtcState+0x120>
	{

		ExtLights_HazardLight_CurrentState = Btc_HazardLight;
 8001dd6:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <ExtLightsRxBtcState+0x174>)
 8001dd8:	781a      	ldrb	r2, [r3, #0]
 8001dda:	4b17      	ldr	r3, [pc, #92]	; (8001e38 <ExtLightsRxBtcState+0x178>)
 8001ddc:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8001dde:	e007      	b.n	8001df0 <ExtLightsRxBtcState+0x130>
	else if(Btc_HazardLight == STD_LOW)
 8001de0:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <ExtLightsRxBtcState+0x174>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d103      	bne.n	8001df0 <ExtLightsRxBtcState+0x130>
		ExtLights_HazardLight_CurrentState = Btc_HazardLight;
 8001de8:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <ExtLightsRxBtcState+0x174>)
 8001dea:	781a      	ldrb	r2, [r3, #0]
 8001dec:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <ExtLightsRxBtcState+0x178>)
 8001dee:	701a      	strb	r2, [r3, #0]
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	200000a6 	.word	0x200000a6
 8001e00:	2000009f 	.word	0x2000009f
 8001e04:	200000a7 	.word	0x200000a7
 8001e08:	200000a0 	.word	0x200000a0
 8001e0c:	200000a9 	.word	0x200000a9
 8001e10:	200000a1 	.word	0x200000a1
 8001e14:	200000ae 	.word	0x200000ae
 8001e18:	200000a5 	.word	0x200000a5
 8001e1c:	200000ad 	.word	0x200000ad
 8001e20:	2000009d 	.word	0x2000009d
 8001e24:	200000aa 	.word	0x200000aa
 8001e28:	200000a2 	.word	0x200000a2
 8001e2c:	200000ab 	.word	0x200000ab
 8001e30:	200000a3 	.word	0x200000a3
 8001e34:	200000ac 	.word	0x200000ac
 8001e38:	200000a4 	.word	0x200000a4

08001e3c <ExtLightsLightReadSensorValue>:

uint32 ExtLightsLightReadSensorValue()
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0

	uint8 sensorValue = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	71fb      	strb	r3, [r7, #7]

	sensorValue = ADC_BUFFER[2];
 8001e46:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <ExtLightsLightReadSensorValue+0x20>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	71fb      	strb	r3, [r7, #7]

	return sensorValue;
 8001e4c:	79fb      	ldrb	r3, [r7, #7]

}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	200000d0 	.word	0x200000d0

08001e60 <ExtLightsLowBeam>:

void ExtLightsLowBeam(uint8 PinState)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_LOWBEAM_PORT, EXTLIGHTS_LOWBEAM_PIN, PinState);
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	2120      	movs	r1, #32
 8001e70:	4803      	ldr	r0, [pc, #12]	; (8001e80 <ExtLightsLowBeam+0x20>)
 8001e72:	f004 fbc7 	bl	8006604 <HAL_GPIO_WritePin>

}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40020000 	.word	0x40020000

08001e84 <ExtLightsHighBeam>:

void ExtLightsHighBeam(uint8 PinState)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_HIGHBEAM_PORT, EXTLIGHTS_HIGHBEAM_PIN, PinState);
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	461a      	mov	r2, r3
 8001e92:	2120      	movs	r1, #32
 8001e94:	4803      	ldr	r0, [pc, #12]	; (8001ea4 <ExtLightsHighBeam+0x20>)
 8001e96:	f004 fbb5 	bl	8006604 <HAL_GPIO_WritePin>

}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40020000 	.word	0x40020000

08001ea8 <ExtLightsDayTimeRunningLight>:

void ExtLightsDayTimeRunningLight(uint8 PinState)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_DAYTIMERUNNINGLIGHT_PORT, EXTLIGHTS_DAYTIMERUNNINGLIGHT_PIN, PinState);
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	2120      	movs	r1, #32
 8001eb8:	4803      	ldr	r0, [pc, #12]	; (8001ec8 <ExtLightsDayTimeRunningLight+0x20>)
 8001eba:	f004 fba3 	bl	8006604 <HAL_GPIO_WritePin>

}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40020000 	.word	0x40020000

08001ecc <ExtLightsFrontFogLight>:

void ExtLightsFrontFogLight(uint8 PinState)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_FRONTFOGLIGHT_PORT, EXTLIGHTS_FRONTFOGLIGHT_PIN, PinState);
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	2120      	movs	r1, #32
 8001edc:	4803      	ldr	r0, [pc, #12]	; (8001eec <ExtLightsFrontFogLight+0x20>)
 8001ede:	f004 fb91 	bl	8006604 <HAL_GPIO_WritePin>

}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40020000 	.word	0x40020000

08001ef0 <ExtLightsTurnSignalLeft>:

void ExtLightsTurnSignalLeft(uint8 PinState)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_TURNSIGNALLEFT_PORT, EXTLIGHTS_TURNSIGNALLEFT_PIN, PinState);
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	461a      	mov	r2, r3
 8001efe:	2120      	movs	r1, #32
 8001f00:	4803      	ldr	r0, [pc, #12]	; (8001f10 <ExtLightsTurnSignalLeft+0x20>)
 8001f02:	f004 fb7f 	bl	8006604 <HAL_GPIO_WritePin>

}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40020000 	.word	0x40020000

08001f14 <ExtLightsTurnSignalRight>:

void ExtLightsTurnSignalRight(uint8 PinState)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_TURNSIGNALRIGHT_PORT, EXTLIGHTS_TURNSIGNALRIGHT_PIN, PinState);
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	461a      	mov	r2, r3
 8001f22:	2120      	movs	r1, #32
 8001f24:	4803      	ldr	r0, [pc, #12]	; (8001f34 <ExtLightsTurnSignalRight+0x20>)
 8001f26:	f004 fb6d 	bl	8006604 <HAL_GPIO_WritePin>

}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40020000 	.word	0x40020000

08001f38 <ExtLightsRearPositionLight>:

void ExtLightsRearPositionLight(uint8 PinState)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_REARPOSITIONLIGHT_PORT, EXTLIGHTS_REARPOSITIONLIGHT_PIN, PinState);
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	461a      	mov	r2, r3
 8001f46:	2120      	movs	r1, #32
 8001f48:	4803      	ldr	r0, [pc, #12]	; (8001f58 <ExtLightsRearPositionLight+0x20>)
 8001f4a:	f004 fb5b 	bl	8006604 <HAL_GPIO_WritePin>

}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40020000 	.word	0x40020000

08001f5c <ExtLightsRearFogLight>:

void ExtLightsRearFogLight(uint8 PinState)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_REARFOGLIGHT_PORT, EXTLIGHTS_REARFOGLIGHT_PIN, PinState);
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	2120      	movs	r1, #32
 8001f6c:	4803      	ldr	r0, [pc, #12]	; (8001f7c <ExtLightsRearFogLight+0x20>)
 8001f6e:	f004 fb49 	bl	8006604 <HAL_GPIO_WritePin>

}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40020000 	.word	0x40020000

08001f80 <ExtLightsReverseLight>:
	HAL_GPIO_WritePin(EXTLIGHTS_BRAKELIGHT_PORT, EXTLIGHTS_BRAKELIGHT_PIN, PinState);

}

void ExtLightsReverseLight(uint8 PinState)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_REVERSELIGHT_PORT, EXTLIGHTS_REVERSELIGHT_PIN, PinState);
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	2120      	movs	r1, #32
 8001f90:	4803      	ldr	r0, [pc, #12]	; (8001fa0 <ExtLightsReverseLight+0x20>)
 8001f92:	f004 fb37 	bl	8006604 <HAL_GPIO_WritePin>

}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40020000 	.word	0x40020000

08001fa4 <ExtLightsLicensePlateLight>:

void ExtLightsLicensePlateLight(uint8 PinState)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_LICENSEPLATELIGHT_PORT, EXTLIGHTS_LICENSEPLATELIGHT_PIN, PinState);
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	2120      	movs	r1, #32
 8001fb4:	4803      	ldr	r0, [pc, #12]	; (8001fc4 <ExtLightsLicensePlateLight+0x20>)
 8001fb6:	f004 fb25 	bl	8006604 <HAL_GPIO_WritePin>

}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40020000 	.word	0x40020000

08001fc8 <HVACTemSenReturnTemperatureValue>:
	}

}

float HVACTemSenReturnTemperatureValue(float TemSenVal)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	ed87 0a01 	vstr	s0, [r7, #4]

	/* redo */

	return 1;
 8001fd2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001fd6:	ee07 3a90 	vmov	s15, r3

}
 8001fda:	eeb0 0a67 	vmov.f32	s0, s15
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <HVACTemSenAdcReceivedValues>:

float HVACTemSenAdcReceivedValues()
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0

	uint32 RxTem = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	607b      	str	r3, [r7, #4]

	HAL_ADC_Start_DMA(&hadc1, ADC_BUFFER, 6);
 8001ff2:	2206      	movs	r2, #6
 8001ff4:	490f      	ldr	r1, [pc, #60]	; (8002034 <HVACTemSenAdcReceivedValues+0x4c>)
 8001ff6:	4810      	ldr	r0, [pc, #64]	; (8002038 <HVACTemSenAdcReceivedValues+0x50>)
 8001ff8:	f002 fedc 	bl	8004db4 <HAL_ADC_Start_DMA>
	RxTem = HVACTemSenReturnTemperatureValue(ADC_BUFFER[0]);
 8001ffc:	4b0d      	ldr	r3, [pc, #52]	; (8002034 <HVACTemSenAdcReceivedValues+0x4c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	ee07 3a90 	vmov	s15, r3
 8002004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002008:	eeb0 0a67 	vmov.f32	s0, s15
 800200c:	f7ff ffdc 	bl	8001fc8 <HVACTemSenReturnTemperatureValue>
 8002010:	eef0 7a40 	vmov.f32	s15, s0
 8002014:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002018:	ee17 3a90 	vmov	r3, s15
 800201c:	607b      	str	r3, [r7, #4]

	return RxTem;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	ee07 3a90 	vmov	s15, r3
 8002024:	eef8 7a67 	vcvt.f32.u32	s15, s15

}
 8002028:	eeb0 0a67 	vmov.f32	s0, s15
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200000d0 	.word	0x200000d0
 8002038:	20000104 	.word	0x20000104

0800203c <HVACI2cTxToLcd>:


void HVACI2cTxToLcd()
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0

	if(HVAC_CurrentState == STD_LOW)
 8002042:	4b79      	ldr	r3, [pc, #484]	; (8002228 <HVACI2cTxToLcd+0x1ec>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d102      	bne.n	8002050 <HVACI2cTxToLcd+0x14>
	{

		lcd_clear();
 800204a:	f000 ffd1 	bl	8002ff0 <lcd_clear>

	}



}
 800204e:	e0e7      	b.n	8002220 <HVACI2cTxToLcd+0x1e4>
	else if(HVAC_CurrentState == STD_HIGH)
 8002050:	4b75      	ldr	r3, [pc, #468]	; (8002228 <HVACI2cTxToLcd+0x1ec>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b01      	cmp	r3, #1
 8002056:	f040 80e3 	bne.w	8002220 <HVACI2cTxToLcd+0x1e4>
		lcd_put_cur(0, 0);
 800205a:	2100      	movs	r1, #0
 800205c:	2000      	movs	r0, #0
 800205e:	f000 ffde 	bl	800301e <lcd_put_cur>
		lcd_send_string("F=");
 8002062:	4872      	ldr	r0, [pc, #456]	; (800222c <HVACI2cTxToLcd+0x1f0>)
 8002064:	f001 f837 	bl	80030d6 <lcd_send_string>
		lcd_put_cur(0, 2);
 8002068:	2102      	movs	r1, #2
 800206a:	2000      	movs	r0, #0
 800206c:	f000 ffd7 	bl	800301e <lcd_put_cur>
		lcd_send_data(HVAC_FanValue);
 8002070:	4b6f      	ldr	r3, [pc, #444]	; (8002230 <HVACI2cTxToLcd+0x1f4>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f000 ff8b 	bl	8002f90 <lcd_send_data>
		lcd_put_cur(0, 4);
 800207a:	2104      	movs	r1, #4
 800207c:	2000      	movs	r0, #0
 800207e:	f000 ffce 	bl	800301e <lcd_put_cur>
		lcd_send_string("T=");
 8002082:	486c      	ldr	r0, [pc, #432]	; (8002234 <HVACI2cTxToLcd+0x1f8>)
 8002084:	f001 f827 	bl	80030d6 <lcd_send_string>
		lcd_put_cur(0, 6);
 8002088:	2106      	movs	r1, #6
 800208a:	2000      	movs	r0, #0
 800208c:	f000 ffc7 	bl	800301e <lcd_put_cur>
		lcd_send_data(HVAC_TemperatureValue);
 8002090:	4b69      	ldr	r3, [pc, #420]	; (8002238 <HVACI2cTxToLcd+0x1fc>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f000 ff7b 	bl	8002f90 <lcd_send_data>
		lcd_put_cur(0, 8);
 800209a:	2108      	movs	r1, #8
 800209c:	2000      	movs	r0, #0
 800209e:	f000 ffbe 	bl	800301e <lcd_put_cur>
		if(HVAC_LegVents_CurrentState == STD_HIGH)
 80020a2:	4b66      	ldr	r3, [pc, #408]	; (800223c <HVACI2cTxToLcd+0x200>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d103      	bne.n	80020b2 <HVACI2cTxToLcd+0x76>
			lcd_send_string("L");
 80020aa:	4865      	ldr	r0, [pc, #404]	; (8002240 <HVACI2cTxToLcd+0x204>)
 80020ac:	f001 f813 	bl	80030d6 <lcd_send_string>
 80020b0:	e006      	b.n	80020c0 <HVACI2cTxToLcd+0x84>
		else if(HVAC_LegVents_CurrentState == STD_LOW)
 80020b2:	4b62      	ldr	r3, [pc, #392]	; (800223c <HVACI2cTxToLcd+0x200>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d102      	bne.n	80020c0 <HVACI2cTxToLcd+0x84>
			lcd_send_string(" ");
 80020ba:	4862      	ldr	r0, [pc, #392]	; (8002244 <HVACI2cTxToLcd+0x208>)
 80020bc:	f001 f80b 	bl	80030d6 <lcd_send_string>
		lcd_put_cur(0, 9);
 80020c0:	2109      	movs	r1, #9
 80020c2:	2000      	movs	r0, #0
 80020c4:	f000 ffab 	bl	800301e <lcd_put_cur>
		if(HVAC_MidVents_CurrentState == STD_HIGH)
 80020c8:	4b5f      	ldr	r3, [pc, #380]	; (8002248 <HVACI2cTxToLcd+0x20c>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d103      	bne.n	80020d8 <HVACI2cTxToLcd+0x9c>
			lcd_send_string("M");
 80020d0:	485e      	ldr	r0, [pc, #376]	; (800224c <HVACI2cTxToLcd+0x210>)
 80020d2:	f001 f800 	bl	80030d6 <lcd_send_string>
 80020d6:	e006      	b.n	80020e6 <HVACI2cTxToLcd+0xaa>
		else if(HVAC_MidVents_CurrentState == STD_LOW)
 80020d8:	4b5b      	ldr	r3, [pc, #364]	; (8002248 <HVACI2cTxToLcd+0x20c>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d102      	bne.n	80020e6 <HVACI2cTxToLcd+0xaa>
			lcd_send_string(" ");
 80020e0:	4858      	ldr	r0, [pc, #352]	; (8002244 <HVACI2cTxToLcd+0x208>)
 80020e2:	f000 fff8 	bl	80030d6 <lcd_send_string>
		lcd_put_cur(0, 10);
 80020e6:	210a      	movs	r1, #10
 80020e8:	2000      	movs	r0, #0
 80020ea:	f000 ff98 	bl	800301e <lcd_put_cur>
		if(HVAC_WindshieldVents_CurrentState == STD_HIGH)
 80020ee:	4b58      	ldr	r3, [pc, #352]	; (8002250 <HVACI2cTxToLcd+0x214>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d103      	bne.n	80020fe <HVACI2cTxToLcd+0xc2>
			lcd_send_string("W");
 80020f6:	4857      	ldr	r0, [pc, #348]	; (8002254 <HVACI2cTxToLcd+0x218>)
 80020f8:	f000 ffed 	bl	80030d6 <lcd_send_string>
 80020fc:	e006      	b.n	800210c <HVACI2cTxToLcd+0xd0>
		else if(HVAC_WindshieldVents_CurrentState == STD_LOW)
 80020fe:	4b54      	ldr	r3, [pc, #336]	; (8002250 <HVACI2cTxToLcd+0x214>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d102      	bne.n	800210c <HVACI2cTxToLcd+0xd0>
			lcd_send_string(" ");
 8002106:	484f      	ldr	r0, [pc, #316]	; (8002244 <HVACI2cTxToLcd+0x208>)
 8002108:	f000 ffe5 	bl	80030d6 <lcd_send_string>
		lcd_put_cur(0, 10);
 800210c:	210a      	movs	r1, #10
 800210e:	2000      	movs	r0, #0
 8002110:	f000 ff85 	bl	800301e <lcd_put_cur>
		if(HVAC_WindshieldVents_CurrentState == STD_HIGH)
 8002114:	4b4e      	ldr	r3, [pc, #312]	; (8002250 <HVACI2cTxToLcd+0x214>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d103      	bne.n	8002124 <HVACI2cTxToLcd+0xe8>
			lcd_send_string("W");
 800211c:	484d      	ldr	r0, [pc, #308]	; (8002254 <HVACI2cTxToLcd+0x218>)
 800211e:	f000 ffda 	bl	80030d6 <lcd_send_string>
 8002122:	e006      	b.n	8002132 <HVACI2cTxToLcd+0xf6>
		else if(HVAC_WindshieldVents_CurrentState == STD_LOW)
 8002124:	4b4a      	ldr	r3, [pc, #296]	; (8002250 <HVACI2cTxToLcd+0x214>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d102      	bne.n	8002132 <HVACI2cTxToLcd+0xf6>
			lcd_send_string(" ");
 800212c:	4845      	ldr	r0, [pc, #276]	; (8002244 <HVACI2cTxToLcd+0x208>)
 800212e:	f000 ffd2 	bl	80030d6 <lcd_send_string>
		lcd_put_cur(0, 11);
 8002132:	210b      	movs	r1, #11
 8002134:	2000      	movs	r0, #0
 8002136:	f000 ff72 	bl	800301e <lcd_put_cur>
		if(HVAC_WindshieldDefrost_CurrentState == STD_HIGH)
 800213a:	4b47      	ldr	r3, [pc, #284]	; (8002258 <HVACI2cTxToLcd+0x21c>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d103      	bne.n	800214a <HVACI2cTxToLcd+0x10e>
			lcd_send_string("WD");
 8002142:	4846      	ldr	r0, [pc, #280]	; (800225c <HVACI2cTxToLcd+0x220>)
 8002144:	f000 ffc7 	bl	80030d6 <lcd_send_string>
 8002148:	e006      	b.n	8002158 <HVACI2cTxToLcd+0x11c>
		else if(HVAC_WindshieldDefrost_CurrentState == STD_LOW)
 800214a:	4b43      	ldr	r3, [pc, #268]	; (8002258 <HVACI2cTxToLcd+0x21c>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d102      	bne.n	8002158 <HVACI2cTxToLcd+0x11c>
			lcd_send_string("  ");
 8002152:	4843      	ldr	r0, [pc, #268]	; (8002260 <HVACI2cTxToLcd+0x224>)
 8002154:	f000 ffbf 	bl	80030d6 <lcd_send_string>
		lcd_put_cur(0, 13);
 8002158:	210d      	movs	r1, #13
 800215a:	2000      	movs	r0, #0
 800215c:	f000 ff5f 	bl	800301e <lcd_put_cur>
		if(HVAC_BackwindowDefrost_CurrentState == STD_HIGH)
 8002160:	4b40      	ldr	r3, [pc, #256]	; (8002264 <HVACI2cTxToLcd+0x228>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d103      	bne.n	8002170 <HVACI2cTxToLcd+0x134>
			lcd_send_string("BD");
 8002168:	483f      	ldr	r0, [pc, #252]	; (8002268 <HVACI2cTxToLcd+0x22c>)
 800216a:	f000 ffb4 	bl	80030d6 <lcd_send_string>
 800216e:	e006      	b.n	800217e <HVACI2cTxToLcd+0x142>
		else if(HVAC_BackwindowDefrost_CurrentState == STD_LOW)
 8002170:	4b3c      	ldr	r3, [pc, #240]	; (8002264 <HVACI2cTxToLcd+0x228>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d102      	bne.n	800217e <HVACI2cTxToLcd+0x142>
			lcd_send_string("  ");
 8002178:	4839      	ldr	r0, [pc, #228]	; (8002260 <HVACI2cTxToLcd+0x224>)
 800217a:	f000 ffac 	bl	80030d6 <lcd_send_string>
		lcd_put_cur(1, 0);
 800217e:	2100      	movs	r1, #0
 8002180:	2001      	movs	r0, #1
 8002182:	f000 ff4c 	bl	800301e <lcd_put_cur>
		if(HVAC_RecirculationMode_CurrentState == STD_HIGH && HVAC_AutomaticMode_CurrentState == STD_LOW)
 8002186:	4b39      	ldr	r3, [pc, #228]	; (800226c <HVACI2cTxToLcd+0x230>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d107      	bne.n	800219e <HVACI2cTxToLcd+0x162>
 800218e:	4b38      	ldr	r3, [pc, #224]	; (8002270 <HVACI2cTxToLcd+0x234>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d103      	bne.n	800219e <HVACI2cTxToLcd+0x162>
			lcd_send_string("(C)");
 8002196:	4837      	ldr	r0, [pc, #220]	; (8002274 <HVACI2cTxToLcd+0x238>)
 8002198:	f000 ff9d 	bl	80030d6 <lcd_send_string>
 800219c:	e016      	b.n	80021cc <HVACI2cTxToLcd+0x190>
		else if(HVAC_RecirculationMode_CurrentState == STD_LOW && HVAC_AutomaticMode_CurrentState == STD_HIGH)
 800219e:	4b33      	ldr	r3, [pc, #204]	; (800226c <HVACI2cTxToLcd+0x230>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d107      	bne.n	80021b6 <HVACI2cTxToLcd+0x17a>
 80021a6:	4b32      	ldr	r3, [pc, #200]	; (8002270 <HVACI2cTxToLcd+0x234>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d103      	bne.n	80021b6 <HVACI2cTxToLcd+0x17a>
			lcd_send_string("(A)");
 80021ae:	4832      	ldr	r0, [pc, #200]	; (8002278 <HVACI2cTxToLcd+0x23c>)
 80021b0:	f000 ff91 	bl	80030d6 <lcd_send_string>
 80021b4:	e00a      	b.n	80021cc <HVACI2cTxToLcd+0x190>
		else if(HVAC_RecirculationMode_CurrentState == STD_LOW && HVAC_AutomaticMode_CurrentState == STD_LOW)
 80021b6:	4b2d      	ldr	r3, [pc, #180]	; (800226c <HVACI2cTxToLcd+0x230>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d106      	bne.n	80021cc <HVACI2cTxToLcd+0x190>
 80021be:	4b2c      	ldr	r3, [pc, #176]	; (8002270 <HVACI2cTxToLcd+0x234>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d102      	bne.n	80021cc <HVACI2cTxToLcd+0x190>
			lcd_send_string("(N)");
 80021c6:	482d      	ldr	r0, [pc, #180]	; (800227c <HVACI2cTxToLcd+0x240>)
 80021c8:	f000 ff85 	bl	80030d6 <lcd_send_string>
		lcd_put_cur(1, 3);
 80021cc:	2103      	movs	r1, #3
 80021ce:	2001      	movs	r0, #1
 80021d0:	f000 ff25 	bl	800301e <lcd_put_cur>
		if(HVAC_AutomaticMode_CurrentState == STD_HIGH)
 80021d4:	4b26      	ldr	r3, [pc, #152]	; (8002270 <HVACI2cTxToLcd+0x234>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d103      	bne.n	80021e4 <HVACI2cTxToLcd+0x1a8>
			lcd_send_string("AUTO");
 80021dc:	4828      	ldr	r0, [pc, #160]	; (8002280 <HVACI2cTxToLcd+0x244>)
 80021de:	f000 ff7a 	bl	80030d6 <lcd_send_string>
 80021e2:	e006      	b.n	80021f2 <HVACI2cTxToLcd+0x1b6>
		else if(HVAC_AutomaticMode_CurrentState == STD_LOW)
 80021e4:	4b22      	ldr	r3, [pc, #136]	; (8002270 <HVACI2cTxToLcd+0x234>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d102      	bne.n	80021f2 <HVACI2cTxToLcd+0x1b6>
			lcd_send_string("    ");
 80021ec:	4825      	ldr	r0, [pc, #148]	; (8002284 <HVACI2cTxToLcd+0x248>)
 80021ee:	f000 ff72 	bl	80030d6 <lcd_send_string>
		lcd_put_cur(1, 7);
 80021f2:	2107      	movs	r1, #7
 80021f4:	2001      	movs	r0, #1
 80021f6:	f000 ff12 	bl	800301e <lcd_put_cur>
		lcd_send_string("Tc: ");
 80021fa:	4823      	ldr	r0, [pc, #140]	; (8002288 <HVACI2cTxToLcd+0x24c>)
 80021fc:	f000 ff6b 	bl	80030d6 <lcd_send_string>
		lcd_put_cur(1, 11);
 8002200:	210b      	movs	r1, #11
 8002202:	2001      	movs	r0, #1
 8002204:	f000 ff0b 	bl	800301e <lcd_put_cur>
		lcd_send_data(HVAC_TemSenRxTemperature);
 8002208:	4b20      	ldr	r3, [pc, #128]	; (800228c <HVACI2cTxToLcd+0x250>)
 800220a:	edd3 7a00 	vldr	s15, [r3]
 800220e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002212:	edc7 7a01 	vstr	s15, [r7, #4]
 8002216:	793b      	ldrb	r3, [r7, #4]
 8002218:	b2db      	uxtb	r3, r3
 800221a:	4618      	mov	r0, r3
 800221c:	f000 feb8 	bl	8002f90 <lcd_send_data>
}
 8002220:	bf00      	nop
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	200000af 	.word	0x200000af
 800222c:	0800f4cc 	.word	0x0800f4cc
 8002230:	200000b1 	.word	0x200000b1
 8002234:	0800f4d0 	.word	0x0800f4d0
 8002238:	200000b0 	.word	0x200000b0
 800223c:	200000b2 	.word	0x200000b2
 8002240:	0800f4d4 	.word	0x0800f4d4
 8002244:	0800f4d8 	.word	0x0800f4d8
 8002248:	200000b3 	.word	0x200000b3
 800224c:	0800f4dc 	.word	0x0800f4dc
 8002250:	200000b4 	.word	0x200000b4
 8002254:	0800f4e0 	.word	0x0800f4e0
 8002258:	200000b5 	.word	0x200000b5
 800225c:	0800f4e4 	.word	0x0800f4e4
 8002260:	0800f4e8 	.word	0x0800f4e8
 8002264:	200000b9 	.word	0x200000b9
 8002268:	0800f4ec 	.word	0x0800f4ec
 800226c:	200000b8 	.word	0x200000b8
 8002270:	200000b7 	.word	0x200000b7
 8002274:	0800f4f0 	.word	0x0800f4f0
 8002278:	0800f4f4 	.word	0x0800f4f4
 800227c:	0800f4f8 	.word	0x0800f4f8
 8002280:	0800f4fc 	.word	0x0800f4fc
 8002284:	0800f504 	.word	0x0800f504
 8002288:	0800f50c 	.word	0x0800f50c
 800228c:	200000cc 	.word	0x200000cc

08002290 <HVACMainFunction>:

void HVACMainFunction()
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0

	HVACI2cTxToLcd();
 8002294:	f7ff fed2 	bl	800203c <HVACI2cTxToLcd>
	HVAC_TemSenRxTemperature = HVACTemSenAdcReceivedValues();
 8002298:	f7ff fea6 	bl	8001fe8 <HVACTemSenAdcReceivedValues>
 800229c:	eef0 7a40 	vmov.f32	s15, s0
 80022a0:	4b03      	ldr	r3, [pc, #12]	; (80022b0 <HVACMainFunction+0x20>)
 80022a2:	edc3 7a00 	vstr	s15, [r3]
	HVACState();
 80022a6:	f000 f805 	bl	80022b4 <HVACState>

}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	200000cc 	.word	0x200000cc

080022b4 <HVACState>:

void HVACState()
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0

	HVAC_BackwindowDefrost_CurrentState 	= Btc_BackwindowDefrost;
 80022ba:	4ba4      	ldr	r3, [pc, #656]	; (800254c <HVACState+0x298>)
 80022bc:	781a      	ldrb	r2, [r3, #0]
 80022be:	4ba4      	ldr	r3, [pc, #656]	; (8002550 <HVACState+0x29c>)
 80022c0:	701a      	strb	r2, [r3, #0]
	HVAC_AC_CurrentState 					= Btc_AC;
 80022c2:	4ba4      	ldr	r3, [pc, #656]	; (8002554 <HVACState+0x2a0>)
 80022c4:	781a      	ldrb	r2, [r3, #0]
 80022c6:	4ba4      	ldr	r3, [pc, #656]	; (8002558 <HVACState+0x2a4>)
 80022c8:	701a      	strb	r2, [r3, #0]
	HVAC_RecirculationMode_CurrentState 	= Btc_RecirculationMode;
 80022ca:	4ba4      	ldr	r3, [pc, #656]	; (800255c <HVACState+0x2a8>)
 80022cc:	781a      	ldrb	r2, [r3, #0]
 80022ce:	4ba4      	ldr	r3, [pc, #656]	; (8002560 <HVACState+0x2ac>)
 80022d0:	701a      	strb	r2, [r3, #0]

	if(Btc_TemperatureValue != STD_LOW)
 80022d2:	4ba4      	ldr	r3, [pc, #656]	; (8002564 <HVACState+0x2b0>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d004      	beq.n	80022e4 <HVACState+0x30>
	{

		HVAC_TemperatureValue = Btc_TemperatureValue;
 80022da:	4ba2      	ldr	r3, [pc, #648]	; (8002564 <HVACState+0x2b0>)
 80022dc:	781a      	ldrb	r2, [r3, #0]
 80022de:	4ba2      	ldr	r3, [pc, #648]	; (8002568 <HVACState+0x2b4>)
 80022e0:	701a      	strb	r2, [r3, #0]
 80022e2:	e009      	b.n	80022f8 <HVACState+0x44>

	}
	else if(Btc_TemperatureValue == STD_LOW)
 80022e4:	4b9f      	ldr	r3, [pc, #636]	; (8002564 <HVACState+0x2b0>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d105      	bne.n	80022f8 <HVACState+0x44>
	{

		Btc_TemperatureValue 	= 22;
 80022ec:	4b9d      	ldr	r3, [pc, #628]	; (8002564 <HVACState+0x2b0>)
 80022ee:	2216      	movs	r2, #22
 80022f0:	701a      	strb	r2, [r3, #0]
		Btc_FanValue 		= 1;
 80022f2:	4b9e      	ldr	r3, [pc, #632]	; (800256c <HVACState+0x2b8>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_FanValue == STD_LOW)
 80022f8:	4b9c      	ldr	r3, [pc, #624]	; (800256c <HVACState+0x2b8>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d103      	bne.n	8002308 <HVACState+0x54>
	{

		HVAC_CurrentState = STD_LOW;
 8002300:	4b9b      	ldr	r3, [pc, #620]	; (8002570 <HVACState+0x2bc>)
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]
 8002306:	e00a      	b.n	800231e <HVACState+0x6a>

	}
	else if(Btc_FanValue != STD_LOW)
 8002308:	4b98      	ldr	r3, [pc, #608]	; (800256c <HVACState+0x2b8>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d006      	beq.n	800231e <HVACState+0x6a>
	{

		HVAC_CurrentState 	= STD_HIGH;
 8002310:	4b97      	ldr	r3, [pc, #604]	; (8002570 <HVACState+0x2bc>)
 8002312:	2201      	movs	r2, #1
 8002314:	701a      	strb	r2, [r3, #0]
		HVAC_FanValue 		= Btc_FanValue;
 8002316:	4b95      	ldr	r3, [pc, #596]	; (800256c <HVACState+0x2b8>)
 8002318:	781a      	ldrb	r2, [r3, #0]
 800231a:	4b96      	ldr	r3, [pc, #600]	; (8002574 <HVACState+0x2c0>)
 800231c:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_LegVents == STD_HIGH)
 800231e:	4b96      	ldr	r3, [pc, #600]	; (8002578 <HVACState+0x2c4>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d107      	bne.n	8002336 <HVACState+0x82>
	{

		Btc_AutomaticMode 			= STD_LOW;
 8002326:	4b95      	ldr	r3, [pc, #596]	; (800257c <HVACState+0x2c8>)
 8002328:	2200      	movs	r2, #0
 800232a:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 	= Btc_LegVents;
 800232c:	4b92      	ldr	r3, [pc, #584]	; (8002578 <HVACState+0x2c4>)
 800232e:	781a      	ldrb	r2, [r3, #0]
 8002330:	4b93      	ldr	r3, [pc, #588]	; (8002580 <HVACState+0x2cc>)
 8002332:	701a      	strb	r2, [r3, #0]
 8002334:	e00a      	b.n	800234c <HVACState+0x98>

	}
	else if(Btc_LegVents == STD_LOW)
 8002336:	4b90      	ldr	r3, [pc, #576]	; (8002578 <HVACState+0x2c4>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d106      	bne.n	800234c <HVACState+0x98>
	{

		Btc_AutomaticMode 			= STD_LOW;
 800233e:	4b8f      	ldr	r3, [pc, #572]	; (800257c <HVACState+0x2c8>)
 8002340:	2200      	movs	r2, #0
 8002342:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 	= Btc_LegVents;
 8002344:	4b8c      	ldr	r3, [pc, #560]	; (8002578 <HVACState+0x2c4>)
 8002346:	781a      	ldrb	r2, [r3, #0]
 8002348:	4b8d      	ldr	r3, [pc, #564]	; (8002580 <HVACState+0x2cc>)
 800234a:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_MidVents == STD_HIGH)
 800234c:	4b8d      	ldr	r3, [pc, #564]	; (8002584 <HVACState+0x2d0>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d107      	bne.n	8002364 <HVACState+0xb0>
	{

		Btc_AutomaticMode 			= STD_LOW;
 8002354:	4b89      	ldr	r3, [pc, #548]	; (800257c <HVACState+0x2c8>)
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 	= Btc_MidVents;
 800235a:	4b8a      	ldr	r3, [pc, #552]	; (8002584 <HVACState+0x2d0>)
 800235c:	781a      	ldrb	r2, [r3, #0]
 800235e:	4b8a      	ldr	r3, [pc, #552]	; (8002588 <HVACState+0x2d4>)
 8002360:	701a      	strb	r2, [r3, #0]
 8002362:	e00a      	b.n	800237a <HVACState+0xc6>

	}
	else if(Btc_MidVents == STD_LOW)
 8002364:	4b87      	ldr	r3, [pc, #540]	; (8002584 <HVACState+0x2d0>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d106      	bne.n	800237a <HVACState+0xc6>
	{

		Btc_AutomaticMode 			= STD_LOW;
 800236c:	4b83      	ldr	r3, [pc, #524]	; (800257c <HVACState+0x2c8>)
 800236e:	2200      	movs	r2, #0
 8002370:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 	= Btc_MidVents;
 8002372:	4b84      	ldr	r3, [pc, #528]	; (8002584 <HVACState+0x2d0>)
 8002374:	781a      	ldrb	r2, [r3, #0]
 8002376:	4b84      	ldr	r3, [pc, #528]	; (8002588 <HVACState+0x2d4>)
 8002378:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_WindshieldVents == STD_HIGH)
 800237a:	4b84      	ldr	r3, [pc, #528]	; (800258c <HVACState+0x2d8>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d107      	bne.n	8002392 <HVACState+0xde>
	{

		Btc_AutomaticMode 					= STD_LOW;
 8002382:	4b7e      	ldr	r3, [pc, #504]	; (800257c <HVACState+0x2c8>)
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 	= Btc_WindshieldVents;
 8002388:	4b80      	ldr	r3, [pc, #512]	; (800258c <HVACState+0x2d8>)
 800238a:	781a      	ldrb	r2, [r3, #0]
 800238c:	4b80      	ldr	r3, [pc, #512]	; (8002590 <HVACState+0x2dc>)
 800238e:	701a      	strb	r2, [r3, #0]
 8002390:	e00a      	b.n	80023a8 <HVACState+0xf4>

	}
	else if(Btc_WindshieldVents == STD_LOW)
 8002392:	4b7e      	ldr	r3, [pc, #504]	; (800258c <HVACState+0x2d8>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d106      	bne.n	80023a8 <HVACState+0xf4>
	{

		Btc_AutomaticMode 					= STD_LOW;
 800239a:	4b78      	ldr	r3, [pc, #480]	; (800257c <HVACState+0x2c8>)
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 	= Btc_WindshieldVents;
 80023a0:	4b7a      	ldr	r3, [pc, #488]	; (800258c <HVACState+0x2d8>)
 80023a2:	781a      	ldrb	r2, [r3, #0]
 80023a4:	4b7a      	ldr	r3, [pc, #488]	; (8002590 <HVACState+0x2dc>)
 80023a6:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_WindshieldDefrost == STD_HIGH)
 80023a8:	4b7a      	ldr	r3, [pc, #488]	; (8002594 <HVACState+0x2e0>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d110      	bne.n	80023d2 <HVACState+0x11e>
	{

		Btc_AutomaticMode				 		= STD_LOW;
 80023b0:	4b72      	ldr	r3, [pc, #456]	; (800257c <HVACState+0x2c8>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldDefrost_CurrentState 	= Btc_WindshieldDefrost;
 80023b6:	4b77      	ldr	r3, [pc, #476]	; (8002594 <HVACState+0x2e0>)
 80023b8:	781a      	ldrb	r2, [r3, #0]
 80023ba:	4b77      	ldr	r3, [pc, #476]	; (8002598 <HVACState+0x2e4>)
 80023bc:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 				= STD_LOW;
 80023be:	4b70      	ldr	r3, [pc, #448]	; (8002580 <HVACState+0x2cc>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 				= STD_LOW;
 80023c4:	4b70      	ldr	r3, [pc, #448]	; (8002588 <HVACState+0x2d4>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 		= STD_LOW;
 80023ca:	4b71      	ldr	r3, [pc, #452]	; (8002590 <HVACState+0x2dc>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
 80023d0:	e016      	b.n	8002400 <HVACState+0x14c>

	}
	else if(Btc_WindshieldDefrost == STD_LOW)
 80023d2:	4b70      	ldr	r3, [pc, #448]	; (8002594 <HVACState+0x2e0>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d112      	bne.n	8002400 <HVACState+0x14c>
	{

		Btc_AutomaticMode				 		= STD_LOW;
 80023da:	4b68      	ldr	r3, [pc, #416]	; (800257c <HVACState+0x2c8>)
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldDefrost_CurrentState 	= Btc_WindshieldDefrost;
 80023e0:	4b6c      	ldr	r3, [pc, #432]	; (8002594 <HVACState+0x2e0>)
 80023e2:	781a      	ldrb	r2, [r3, #0]
 80023e4:	4b6c      	ldr	r3, [pc, #432]	; (8002598 <HVACState+0x2e4>)
 80023e6:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 				= Btc_LegVents;
 80023e8:	4b63      	ldr	r3, [pc, #396]	; (8002578 <HVACState+0x2c4>)
 80023ea:	781a      	ldrb	r2, [r3, #0]
 80023ec:	4b64      	ldr	r3, [pc, #400]	; (8002580 <HVACState+0x2cc>)
 80023ee:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 				= Btc_MidVents;
 80023f0:	4b64      	ldr	r3, [pc, #400]	; (8002584 <HVACState+0x2d0>)
 80023f2:	781a      	ldrb	r2, [r3, #0]
 80023f4:	4b64      	ldr	r3, [pc, #400]	; (8002588 <HVACState+0x2d4>)
 80023f6:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 		= Btc_WindshieldVents;
 80023f8:	4b64      	ldr	r3, [pc, #400]	; (800258c <HVACState+0x2d8>)
 80023fa:	781a      	ldrb	r2, [r3, #0]
 80023fc:	4b64      	ldr	r3, [pc, #400]	; (8002590 <HVACState+0x2dc>)
 80023fe:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_AutomaticMode == STD_HIGH)
 8002400:	4b5e      	ldr	r3, [pc, #376]	; (800257c <HVACState+0x2c8>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b01      	cmp	r3, #1
 8002406:	f040 80e5 	bne.w	80025d4 <HVACState+0x320>
	{

		HVAC_AutomaticMode_CurrentState 		= STD_HIGH;
 800240a:	4b64      	ldr	r3, [pc, #400]	; (800259c <HVACState+0x2e8>)
 800240c:	2201      	movs	r2, #1
 800240e:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldDefrost_CurrentState 	= STD_LOW;
 8002410:	4b61      	ldr	r3, [pc, #388]	; (8002598 <HVACState+0x2e4>)
 8002412:	2200      	movs	r2, #0
 8002414:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 		= STD_LOW;
 8002416:	4b5e      	ldr	r3, [pc, #376]	; (8002590 <HVACState+0x2dc>)
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 				= STD_LOW;
 800241c:	4b5a      	ldr	r3, [pc, #360]	; (8002588 <HVACState+0x2d4>)
 800241e:	2200      	movs	r2, #0
 8002420:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 				= STD_LOW;
 8002422:	4b57      	ldr	r3, [pc, #348]	; (8002580 <HVACState+0x2cc>)
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]

		if(HVAC_TemperatureValue < HVAC_TemSenRxTemperature)
 8002428:	4b4f      	ldr	r3, [pc, #316]	; (8002568 <HVACState+0x2b4>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	ee07 3a90 	vmov	s15, r3
 8002430:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002434:	4b5a      	ldr	r3, [pc, #360]	; (80025a0 <HVACState+0x2ec>)
 8002436:	edd3 7a00 	vldr	s15, [r3]
 800243a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800243e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002442:	d542      	bpl.n	80024ca <HVACState+0x216>
		{

			if((HVAC_TemSenRxTemperature - HVAC_TemperatureValue) * 2 > 7)
 8002444:	4b56      	ldr	r3, [pc, #344]	; (80025a0 <HVACState+0x2ec>)
 8002446:	ed93 7a00 	vldr	s14, [r3]
 800244a:	4b47      	ldr	r3, [pc, #284]	; (8002568 <HVACState+0x2b4>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	ee07 3a90 	vmov	s15, r3
 8002452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002456:	ee77 7a67 	vsub.f32	s15, s14, s15
 800245a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800245e:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8002462:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800246a:	dd03      	ble.n	8002474 <HVACState+0x1c0>
			{

				HVAC_FanValue = 7;
 800246c:	4b41      	ldr	r3, [pc, #260]	; (8002574 <HVACState+0x2c0>)
 800246e:	2207      	movs	r2, #7
 8002470:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8002472:	e0c6      	b.n	8002602 <HVACState+0x34e>
			else if((HVAC_TemSenRxTemperature - HVAC_TemperatureValue) * 2 <= 7)
 8002474:	4b4a      	ldr	r3, [pc, #296]	; (80025a0 <HVACState+0x2ec>)
 8002476:	ed93 7a00 	vldr	s14, [r3]
 800247a:	4b3b      	ldr	r3, [pc, #236]	; (8002568 <HVACState+0x2b4>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	ee07 3a90 	vmov	s15, r3
 8002482:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002486:	ee77 7a67 	vsub.f32	s15, s14, s15
 800248a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800248e:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8002492:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800249a:	d900      	bls.n	800249e <HVACState+0x1ea>
}
 800249c:	e0b1      	b.n	8002602 <HVACState+0x34e>
				HVAC_FanValue = (HVAC_TemSenRxTemperature - HVAC_TemperatureValue) * 2;
 800249e:	4b40      	ldr	r3, [pc, #256]	; (80025a0 <HVACState+0x2ec>)
 80024a0:	ed93 7a00 	vldr	s14, [r3]
 80024a4:	4b30      	ldr	r3, [pc, #192]	; (8002568 <HVACState+0x2b4>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	ee07 3a90 	vmov	s15, r3
 80024ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024bc:	edc7 7a01 	vstr	s15, [r7, #4]
 80024c0:	793b      	ldrb	r3, [r7, #4]
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	4b2b      	ldr	r3, [pc, #172]	; (8002574 <HVACState+0x2c0>)
 80024c6:	701a      	strb	r2, [r3, #0]
}
 80024c8:	e09b      	b.n	8002602 <HVACState+0x34e>
		else if(HVAC_TemperatureValue >= HVAC_TemSenRxTemperature)
 80024ca:	4b27      	ldr	r3, [pc, #156]	; (8002568 <HVACState+0x2b4>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	ee07 3a90 	vmov	s15, r3
 80024d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024d6:	4b32      	ldr	r3, [pc, #200]	; (80025a0 <HVACState+0x2ec>)
 80024d8:	edd3 7a00 	vldr	s15, [r3]
 80024dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e4:	da00      	bge.n	80024e8 <HVACState+0x234>
}
 80024e6:	e08c      	b.n	8002602 <HVACState+0x34e>
			if((HVAC_TemSenRxTemperature - HVAC_TemperatureValue) / 2 < 1)
 80024e8:	4b2d      	ldr	r3, [pc, #180]	; (80025a0 <HVACState+0x2ec>)
 80024ea:	ed93 7a00 	vldr	s14, [r3]
 80024ee:	4b1e      	ldr	r3, [pc, #120]	; (8002568 <HVACState+0x2b4>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	ee07 3a90 	vmov	s15, r3
 80024f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024fe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002502:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002506:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800250a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800250e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002512:	d503      	bpl.n	800251c <HVACState+0x268>
				HVAC_FanValue = 1;
 8002514:	4b17      	ldr	r3, [pc, #92]	; (8002574 <HVACState+0x2c0>)
 8002516:	2201      	movs	r2, #1
 8002518:	701a      	strb	r2, [r3, #0]
}
 800251a:	e072      	b.n	8002602 <HVACState+0x34e>
			else if((HVAC_TemSenRxTemperature - HVAC_TemperatureValue) / 2 > 1)
 800251c:	4b20      	ldr	r3, [pc, #128]	; (80025a0 <HVACState+0x2ec>)
 800251e:	ed93 7a00 	vldr	s14, [r3]
 8002522:	4b11      	ldr	r3, [pc, #68]	; (8002568 <HVACState+0x2b4>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	ee07 3a90 	vmov	s15, r3
 800252a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800252e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002532:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002536:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800253a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800253e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002546:	dc2d      	bgt.n	80025a4 <HVACState+0x2f0>
}
 8002548:	e05b      	b.n	8002602 <HVACState+0x34e>
 800254a:	bf00      	nop
 800254c:	200000c0 	.word	0x200000c0
 8002550:	200000b9 	.word	0x200000b9
 8002554:	200000c1 	.word	0x200000c1
 8002558:	200000b6 	.word	0x200000b6
 800255c:	200000c3 	.word	0x200000c3
 8002560:	200000b8 	.word	0x200000b8
 8002564:	200000ba 	.word	0x200000ba
 8002568:	200000b0 	.word	0x200000b0
 800256c:	200000bb 	.word	0x200000bb
 8002570:	200000af 	.word	0x200000af
 8002574:	200000b1 	.word	0x200000b1
 8002578:	200000bc 	.word	0x200000bc
 800257c:	200000c2 	.word	0x200000c2
 8002580:	200000b2 	.word	0x200000b2
 8002584:	200000bd 	.word	0x200000bd
 8002588:	200000b3 	.word	0x200000b3
 800258c:	200000be 	.word	0x200000be
 8002590:	200000b4 	.word	0x200000b4
 8002594:	200000bf 	.word	0x200000bf
 8002598:	200000b5 	.word	0x200000b5
 800259c:	200000b7 	.word	0x200000b7
 80025a0:	200000cc 	.word	0x200000cc
				HVAC_FanValue = (HVAC_TemSenRxTemperature - HVAC_TemperatureValue) / 2;
 80025a4:	4b1a      	ldr	r3, [pc, #104]	; (8002610 <HVACState+0x35c>)
 80025a6:	ed93 7a00 	vldr	s14, [r3]
 80025aa:	4b1a      	ldr	r3, [pc, #104]	; (8002614 <HVACState+0x360>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	ee07 3a90 	vmov	s15, r3
 80025b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025ba:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80025be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025c6:	edc7 7a01 	vstr	s15, [r7, #4]
 80025ca:	793b      	ldrb	r3, [r7, #4]
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	4b12      	ldr	r3, [pc, #72]	; (8002618 <HVACState+0x364>)
 80025d0:	701a      	strb	r2, [r3, #0]
}
 80025d2:	e016      	b.n	8002602 <HVACState+0x34e>
	else if(Btc_NormalMode == STD_HIGH)
 80025d4:	4b11      	ldr	r3, [pc, #68]	; (800261c <HVACState+0x368>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d112      	bne.n	8002602 <HVACState+0x34e>
		HVAC_AutomaticMode_CurrentState 		= STD_LOW;
 80025dc:	4b10      	ldr	r3, [pc, #64]	; (8002620 <HVACState+0x36c>)
 80025de:	2200      	movs	r2, #0
 80025e0:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldDefrost_CurrentState 	= Btc_WindshieldDefrost;
 80025e2:	4b10      	ldr	r3, [pc, #64]	; (8002624 <HVACState+0x370>)
 80025e4:	781a      	ldrb	r2, [r3, #0]
 80025e6:	4b10      	ldr	r3, [pc, #64]	; (8002628 <HVACState+0x374>)
 80025e8:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 		= Btc_WindshieldVents;
 80025ea:	4b10      	ldr	r3, [pc, #64]	; (800262c <HVACState+0x378>)
 80025ec:	781a      	ldrb	r2, [r3, #0]
 80025ee:	4b10      	ldr	r3, [pc, #64]	; (8002630 <HVACState+0x37c>)
 80025f0:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 				= Btc_MidVents;
 80025f2:	4b10      	ldr	r3, [pc, #64]	; (8002634 <HVACState+0x380>)
 80025f4:	781a      	ldrb	r2, [r3, #0]
 80025f6:	4b10      	ldr	r3, [pc, #64]	; (8002638 <HVACState+0x384>)
 80025f8:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 				= Btc_LegVents;
 80025fa:	4b10      	ldr	r3, [pc, #64]	; (800263c <HVACState+0x388>)
 80025fc:	781a      	ldrb	r2, [r3, #0]
 80025fe:	4b10      	ldr	r3, [pc, #64]	; (8002640 <HVACState+0x38c>)
 8002600:	701a      	strb	r2, [r3, #0]
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	200000cc 	.word	0x200000cc
 8002614:	200000b0 	.word	0x200000b0
 8002618:	200000b1 	.word	0x200000b1
 800261c:	200000c4 	.word	0x200000c4
 8002620:	200000b7 	.word	0x200000b7
 8002624:	200000bf 	.word	0x200000bf
 8002628:	200000b5 	.word	0x200000b5
 800262c:	200000be 	.word	0x200000be
 8002630:	200000b4 	.word	0x200000b4
 8002634:	200000bd 	.word	0x200000bd
 8002638:	200000b3 	.word	0x200000b3
 800263c:	200000bc 	.word	0x200000bc
 8002640:	200000b2 	.word	0x200000b2

08002644 <HVACInit>:

StdReturnType HVACInit()
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0

	lcd_init();
 8002648:	f000 fd08 	bl	800305c <lcd_init>

	HVAC_CurrentState					    = STD_HIGH;
 800264c:	4b26      	ldr	r3, [pc, #152]	; (80026e8 <HVACInit+0xa4>)
 800264e:	2201      	movs	r2, #1
 8002650:	701a      	strb	r2, [r3, #0]
	HVAC_TemperatureValue 					= STD_LOW;
 8002652:	4b26      	ldr	r3, [pc, #152]	; (80026ec <HVACInit+0xa8>)
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
	HVAC_FanValue 							= STD_LOW;
 8002658:	4b25      	ldr	r3, [pc, #148]	; (80026f0 <HVACInit+0xac>)
 800265a:	2200      	movs	r2, #0
 800265c:	701a      	strb	r2, [r3, #0]
	HVAC_LegVents_CurrentState 				= STD_LOW;
 800265e:	4b25      	ldr	r3, [pc, #148]	; (80026f4 <HVACInit+0xb0>)
 8002660:	2200      	movs	r2, #0
 8002662:	701a      	strb	r2, [r3, #0]
	HVAC_MidVents_CurrentState 				= STD_LOW;
 8002664:	4b24      	ldr	r3, [pc, #144]	; (80026f8 <HVACInit+0xb4>)
 8002666:	2200      	movs	r2, #0
 8002668:	701a      	strb	r2, [r3, #0]
	HVAC_WindshieldVents_CurrentState 		= STD_LOW;
 800266a:	4b24      	ldr	r3, [pc, #144]	; (80026fc <HVACInit+0xb8>)
 800266c:	2200      	movs	r2, #0
 800266e:	701a      	strb	r2, [r3, #0]
	HVAC_WindshieldDefrost_CurrentState 	= STD_LOW;
 8002670:	4b23      	ldr	r3, [pc, #140]	; (8002700 <HVACInit+0xbc>)
 8002672:	2200      	movs	r2, #0
 8002674:	701a      	strb	r2, [r3, #0]
	HVAC_AC_CurrentState 					= STD_LOW;
 8002676:	4b23      	ldr	r3, [pc, #140]	; (8002704 <HVACInit+0xc0>)
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
	HVAC_AutomaticMode_CurrentState 		= STD_LOW;
 800267c:	4b22      	ldr	r3, [pc, #136]	; (8002708 <HVACInit+0xc4>)
 800267e:	2200      	movs	r2, #0
 8002680:	701a      	strb	r2, [r3, #0]
	HVAC_RecirculationMode_CurrentState 	= STD_LOW;
 8002682:	4b22      	ldr	r3, [pc, #136]	; (800270c <HVACInit+0xc8>)
 8002684:	2200      	movs	r2, #0
 8002686:	701a      	strb	r2, [r3, #0]
	HVAC_BackwindowDefrost_CurrentState     = STD_LOW;
 8002688:	4b21      	ldr	r3, [pc, #132]	; (8002710 <HVACInit+0xcc>)
 800268a:	2200      	movs	r2, #0
 800268c:	701a      	strb	r2, [r3, #0]
	HVAC_TemSenAdcRxValue 					= STD_LOW;
 800268e:	4b21      	ldr	r3, [pc, #132]	; (8002714 <HVACInit+0xd0>)
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
	HVAC_TemSenRxTemperature 				= STD_LOW;
 8002696:	4b20      	ldr	r3, [pc, #128]	; (8002718 <HVACInit+0xd4>)
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
	Btc_TemperatureValue 					= STD_LOW;
 800269e:	4b1f      	ldr	r3, [pc, #124]	; (800271c <HVACInit+0xd8>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	701a      	strb	r2, [r3, #0]
	Btc_FanValue 							= STD_LOW;
 80026a4:	4b1e      	ldr	r3, [pc, #120]	; (8002720 <HVACInit+0xdc>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	701a      	strb	r2, [r3, #0]
	Btc_LegVents 							= STD_LOW;
 80026aa:	4b1e      	ldr	r3, [pc, #120]	; (8002724 <HVACInit+0xe0>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]
	Btc_MidVents 							= STD_LOW;
 80026b0:	4b1d      	ldr	r3, [pc, #116]	; (8002728 <HVACInit+0xe4>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	701a      	strb	r2, [r3, #0]
	Btc_WindshieldVents 					= STD_LOW;
 80026b6:	4b1d      	ldr	r3, [pc, #116]	; (800272c <HVACInit+0xe8>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	701a      	strb	r2, [r3, #0]
	Btc_WindshieldDefrost 					= STD_LOW;
 80026bc:	4b1c      	ldr	r3, [pc, #112]	; (8002730 <HVACInit+0xec>)
 80026be:	2200      	movs	r2, #0
 80026c0:	701a      	strb	r2, [r3, #0]
	Btc_BackwindowDefrost 					= STD_LOW;
 80026c2:	4b1c      	ldr	r3, [pc, #112]	; (8002734 <HVACInit+0xf0>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]
	Btc_AC 									= STD_LOW;
 80026c8:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <HVACInit+0xf4>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
	Btc_AutomaticMode 						= STD_LOW;
 80026ce:	4b1b      	ldr	r3, [pc, #108]	; (800273c <HVACInit+0xf8>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
	Btc_RecirculationMode 					= STD_LOW;
 80026d4:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <HVACInit+0xfc>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	701a      	strb	r2, [r3, #0]
	Btc_NormalMode							= STD_LOW;
 80026da:	4b1a      	ldr	r3, [pc, #104]	; (8002744 <HVACInit+0x100>)
 80026dc:	2200      	movs	r2, #0
 80026de:	701a      	strb	r2, [r3, #0]

	return E_OK;
 80026e0:	2300      	movs	r3, #0

}
 80026e2:	4618      	mov	r0, r3
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	200000af 	.word	0x200000af
 80026ec:	200000b0 	.word	0x200000b0
 80026f0:	200000b1 	.word	0x200000b1
 80026f4:	200000b2 	.word	0x200000b2
 80026f8:	200000b3 	.word	0x200000b3
 80026fc:	200000b4 	.word	0x200000b4
 8002700:	200000b5 	.word	0x200000b5
 8002704:	200000b6 	.word	0x200000b6
 8002708:	200000b7 	.word	0x200000b7
 800270c:	200000b8 	.word	0x200000b8
 8002710:	200000b9 	.word	0x200000b9
 8002714:	200000c8 	.word	0x200000c8
 8002718:	200000cc 	.word	0x200000cc
 800271c:	200000ba 	.word	0x200000ba
 8002720:	200000bb 	.word	0x200000bb
 8002724:	200000bc 	.word	0x200000bc
 8002728:	200000bd 	.word	0x200000bd
 800272c:	200000be 	.word	0x200000be
 8002730:	200000bf 	.word	0x200000bf
 8002734:	200000c0 	.word	0x200000c0
 8002738:	200000c1 	.word	0x200000c1
 800273c:	200000c2 	.word	0x200000c2
 8002740:	200000c3 	.word	0x200000c3
 8002744:	200000c4 	.word	0x200000c4

08002748 <IntLightsMainFunction>:
	}

}

void IntLightsMainFunction()
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0

	IntLightsToggleIntLights(IntLights_CurrentState);
 800274c:	4b03      	ldr	r3, [pc, #12]	; (800275c <IntLightsMainFunction+0x14>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f000 f817 	bl	8002784 <IntLightsToggleIntLights>

}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	200000e8 	.word	0x200000e8

08002760 <IntLightsInit>:

StdReturnType IntLightsInit()
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0

	IntLights_CurrentState 	= STD_LOW;
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <IntLightsInit+0x1c>)
 8002766:	2200      	movs	r2, #0
 8002768:	701a      	strb	r2, [r3, #0]
	Btc_IntLights 			= STD_LOW;
 800276a:	4b05      	ldr	r3, [pc, #20]	; (8002780 <IntLightsInit+0x20>)
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]

	return E_OK;
 8002770:	2300      	movs	r3, #0

}
 8002772:	4618      	mov	r0, r3
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	200000e8 	.word	0x200000e8
 8002780:	200000e9 	.word	0x200000e9

08002784 <IntLightsToggleIntLights>:

void IntLightsToggleIntLights(uint8 PinState)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(INTERIOR_LIGHT_PORT, INTERIOR_LIGHT_PIN, PinState);
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	461a      	mov	r2, r3
 8002792:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002796:	4803      	ldr	r0, [pc, #12]	; (80027a4 <IntLightsToggleIntLights+0x20>)
 8002798:	f003 ff34 	bl	8006604 <HAL_GPIO_WritePin>

}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40020400 	.word	0x40020400

080027a8 <PdcRearGenerateDelay>:
void PdcRearBuzzerControl();
void PdcFrontStatus();
void PdcRearStatus();

void PdcRearGenerateDelay()
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0

	Pdc_RearGenerateDelayFlag = STD_LOW;
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <PdcRearGenerateDelay+0x34>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	701a      	strb	r2, [r3, #0]

	if(Pdc_RearGenerateDelayFlag == STD_HIGH)
 80027b2:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <PdcRearGenerateDelay+0x34>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d103      	bne.n	80027c2 <PdcRearGenerateDelay+0x1a>
	{

		Pdc_RearDelayStatus = STD_HIGH;
 80027ba:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <PdcRearGenerateDelay+0x38>)
 80027bc:	2201      	movs	r2, #1
 80027be:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 80027c0:	e006      	b.n	80027d0 <PdcRearGenerateDelay+0x28>
	else if(Pdc_RearGenerateDelayFlag == STD_LOW)
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <PdcRearGenerateDelay+0x34>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d102      	bne.n	80027d0 <PdcRearGenerateDelay+0x28>
		Pdc_RearDelayStatus = STD_LOW;
 80027ca:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <PdcRearGenerateDelay+0x38>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	701a      	strb	r2, [r3, #0]
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	200000f4 	.word	0x200000f4
 80027e0:	200000f7 	.word	0x200000f7

080027e4 <PdcFrontGenerateDelay>:

void PdcFrontGenerateDelay()
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0

	Pdc_FrontGenerateDelayFlag 			= STD_LOW;
 80027e8:	4b14      	ldr	r3, [pc, #80]	; (800283c <PdcFrontGenerateDelay+0x58>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	701a      	strb	r2, [r3, #0]
	Pdc_SecondFrontGenerateDelayFlag 	= STD_LOW;
 80027ee:	4b14      	ldr	r3, [pc, #80]	; (8002840 <PdcFrontGenerateDelay+0x5c>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]

	if(Pdc_FrontGenerateDelayFlag == STD_HIGH)
 80027f4:	4b11      	ldr	r3, [pc, #68]	; (800283c <PdcFrontGenerateDelay+0x58>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d103      	bne.n	8002804 <PdcFrontGenerateDelay+0x20>
	{

		Pdc_FrontDelayStatus = STD_HIGH;
 80027fc:	4b11      	ldr	r3, [pc, #68]	; (8002844 <PdcFrontGenerateDelay+0x60>)
 80027fe:	2201      	movs	r2, #1
 8002800:	701a      	strb	r2, [r3, #0]
 8002802:	e006      	b.n	8002812 <PdcFrontGenerateDelay+0x2e>

	}
	else if(Pdc_FrontGenerateDelayFlag == STD_LOW)
 8002804:	4b0d      	ldr	r3, [pc, #52]	; (800283c <PdcFrontGenerateDelay+0x58>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d102      	bne.n	8002812 <PdcFrontGenerateDelay+0x2e>
	{

		Pdc_FrontDelayStatus = STD_LOW;
 800280c:	4b0d      	ldr	r3, [pc, #52]	; (8002844 <PdcFrontGenerateDelay+0x60>)
 800280e:	2200      	movs	r2, #0
 8002810:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Pdc_SecondFrontGenerateDelayFlag == STD_HIGH)
 8002812:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <PdcFrontGenerateDelay+0x5c>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d103      	bne.n	8002822 <PdcFrontGenerateDelay+0x3e>
	{

		Pdc_SecondFrontDelayStatus = STD_HIGH;
 800281a:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <PdcFrontGenerateDelay+0x64>)
 800281c:	2201      	movs	r2, #1
 800281e:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8002820:	e006      	b.n	8002830 <PdcFrontGenerateDelay+0x4c>
	else if(Pdc_SecondFrontGenerateDelayFlag == STD_LOW)
 8002822:	4b07      	ldr	r3, [pc, #28]	; (8002840 <PdcFrontGenerateDelay+0x5c>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d102      	bne.n	8002830 <PdcFrontGenerateDelay+0x4c>
		Pdc_SecondFrontDelayStatus = STD_LOW;
 800282a:	4b07      	ldr	r3, [pc, #28]	; (8002848 <PdcFrontGenerateDelay+0x64>)
 800282c:	2200      	movs	r2, #0
 800282e:	701a      	strb	r2, [r3, #0]
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	200000f5 	.word	0x200000f5
 8002840:	200000f9 	.word	0x200000f9
 8002844:	200000f6 	.word	0x200000f6
 8002848:	200000fa 	.word	0x200000fa

0800284c <PdcFrontStatus>:

void PdcFrontStatus()
{
 800284c:	b590      	push	{r4, r7, lr}
 800284e:	b085      	sub	sp, #20
 8002850:	af02      	add	r7, sp, #8

	TickType_t expiry_time 	= 0;
 8002852:	2300      	movs	r3, #0
 8002854:	607b      	str	r3, [r7, #4]
	uint8 echoValue 		= 0;
 8002856:	2300      	movs	r3, #0
 8002858:	70fb      	strb	r3, [r7, #3]

	osTimerStart(PdcFrontGlobalTimerHandle, 10000);
 800285a:	4b3f      	ldr	r3, [pc, #252]	; (8002958 <PdcFrontStatus+0x10c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f242 7110 	movw	r1, #10000	; 0x2710
 8002862:	4618      	mov	r0, r3
 8002864:	f009 fc00 	bl	800c068 <osTimerStart>
	xTimerStart(PdcFrontGlobalTimerHandle, 0);
 8002868:	4b3b      	ldr	r3, [pc, #236]	; (8002958 <PdcFrontStatus+0x10c>)
 800286a:	681c      	ldr	r4, [r3, #0]
 800286c:	f00b fbb6 	bl	800dfdc <xTaskGetTickCount>
 8002870:	4602      	mov	r2, r0
 8002872:	2300      	movs	r3, #0
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	2300      	movs	r3, #0
 8002878:	2101      	movs	r1, #1
 800287a:	4620      	mov	r0, r4
 800287c:	f00c f9ac 	bl	800ebd8 <xTimerGenericCommand>
	PdcToggleFrontTriggerPin(STD_LOW);
 8002880:	2000      	movs	r0, #0
 8002882:	f000 f911 	bl	8002aa8 <PdcToggleFrontTriggerPin>
	PdcToggleFrontTriggerPin(STD_HIGH);
 8002886:	2001      	movs	r0, #1
 8002888:	f000 f90e 	bl	8002aa8 <PdcToggleFrontTriggerPin>
	osTimerStart(PdcFrontDelayTimerHandle, PDC_DELAY_VALUE_TEN);
 800288c:	4b33      	ldr	r3, [pc, #204]	; (800295c <PdcFrontStatus+0x110>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	210a      	movs	r1, #10
 8002892:	4618      	mov	r0, r3
 8002894:	f009 fbe8 	bl	800c068 <osTimerStart>
	PdcFrontGenerateDelay();
 8002898:	f7ff ffa4 	bl	80027e4 <PdcFrontGenerateDelay>

	if(Pdc_FrontDelayStatus == STD_HIGH)
 800289c:	4b30      	ldr	r3, [pc, #192]	; (8002960 <PdcFrontStatus+0x114>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d107      	bne.n	80028b4 <PdcFrontStatus+0x68>
	{

		PdcToggleFrontTriggerPin(STD_LOW);
 80028a4:	2000      	movs	r0, #0
 80028a6:	f000 f8ff 	bl	8002aa8 <PdcToggleFrontTriggerPin>
		osTimerStop(PdcFrontDelayTimerHandle);
 80028aa:	4b2c      	ldr	r3, [pc, #176]	; (800295c <PdcFrontStatus+0x110>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f009 fc08 	bl	800c0c4 <osTimerStop>

		/* do nothing */

	}

	echoValue = PdcReadFrontEchoPin();
 80028b4:	f000 f91c 	bl	8002af0 <PdcReadFrontEchoPin>
 80028b8:	4603      	mov	r3, r0
 80028ba:	70fb      	strb	r3, [r7, #3]

	if(echoValue == STD_HIGH)
 80028bc:	78fb      	ldrb	r3, [r7, #3]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d11e      	bne.n	8002900 <PdcFrontStatus+0xb4>
	{

		Pdc_FrontRxDelay = HAL_GetTick();
 80028c2:	f002 f8cd 	bl	8004a60 <HAL_GetTick>
 80028c6:	4603      	mov	r3, r0
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	4b26      	ldr	r3, [pc, #152]	; (8002964 <PdcFrontStatus+0x118>)
 80028cc:	701a      	strb	r2, [r3, #0]
		osTimerStart(PdcSecondFrontDelayTimerHandle, Pdc_FrontRxDelay + 10);
 80028ce:	4b26      	ldr	r3, [pc, #152]	; (8002968 <PdcFrontStatus+0x11c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a24      	ldr	r2, [pc, #144]	; (8002964 <PdcFrontStatus+0x118>)
 80028d4:	7812      	ldrb	r2, [r2, #0]
 80028d6:	320a      	adds	r2, #10
 80028d8:	4611      	mov	r1, r2
 80028da:	4618      	mov	r0, r3
 80028dc:	f009 fbc4 	bl	800c068 <osTimerStart>
		PdcFrontGenerateDelay();
 80028e0:	f7ff ff80 	bl	80027e4 <PdcFrontGenerateDelay>

		if(Pdc_SecondFrontDelayStatus == STD_HIGH)
 80028e4:	4b21      	ldr	r3, [pc, #132]	; (800296c <PdcFrontStatus+0x120>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d109      	bne.n	8002900 <PdcFrontStatus+0xb4>
		{

			expiry_time = xTimerGetExpiryTime(PdcFrontGlobalTimerHandle);
 80028ec:	4b1a      	ldr	r3, [pc, #104]	; (8002958 <PdcFrontStatus+0x10c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f00c f9bf 	bl	800ec74 <xTimerGetExpiryTime>
 80028f6:	6078      	str	r0, [r7, #4]
			Pdc_FrontEchoFirstTimeStampValue = expiry_time;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	4b1c      	ldr	r3, [pc, #112]	; (8002970 <PdcFrontStatus+0x124>)
 80028fe:	701a      	strb	r2, [r3, #0]

		}

	}

	echoValue = PdcReadFrontEchoPin();
 8002900:	f000 f8f6 	bl	8002af0 <PdcReadFrontEchoPin>
 8002904:	4603      	mov	r3, r0
 8002906:	70fb      	strb	r3, [r7, #3]

	if(echoValue == STD_HIGH)
 8002908:	78fb      	ldrb	r3, [r7, #3]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d11e      	bne.n	800294c <PdcFrontStatus+0x100>
	{

		Pdc_FrontRxDelay = HAL_GetTick();
 800290e:	f002 f8a7 	bl	8004a60 <HAL_GetTick>
 8002912:	4603      	mov	r3, r0
 8002914:	b2da      	uxtb	r2, r3
 8002916:	4b13      	ldr	r3, [pc, #76]	; (8002964 <PdcFrontStatus+0x118>)
 8002918:	701a      	strb	r2, [r3, #0]
		osTimerStart(PdcSecondFrontDelayTimerHandle, Pdc_FrontRxDelay + 50);
 800291a:	4b13      	ldr	r3, [pc, #76]	; (8002968 <PdcFrontStatus+0x11c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a11      	ldr	r2, [pc, #68]	; (8002964 <PdcFrontStatus+0x118>)
 8002920:	7812      	ldrb	r2, [r2, #0]
 8002922:	3232      	adds	r2, #50	; 0x32
 8002924:	4611      	mov	r1, r2
 8002926:	4618      	mov	r0, r3
 8002928:	f009 fb9e 	bl	800c068 <osTimerStart>
		PdcFrontGenerateDelay();
 800292c:	f7ff ff5a 	bl	80027e4 <PdcFrontGenerateDelay>

		if(Pdc_SecondFrontDelayStatus == STD_HIGH)
 8002930:	4b0e      	ldr	r3, [pc, #56]	; (800296c <PdcFrontStatus+0x120>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d109      	bne.n	800294c <PdcFrontStatus+0x100>
		{

			expiry_time = xTimerGetExpiryTime(PdcFrontGlobalTimerHandle);
 8002938:	4b07      	ldr	r3, [pc, #28]	; (8002958 <PdcFrontStatus+0x10c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f00c f999 	bl	800ec74 <xTimerGetExpiryTime>
 8002942:	6078      	str	r0, [r7, #4]
			Pdc_FrontEchoSecondTimeStampValue = expiry_time;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	b2da      	uxtb	r2, r3
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <PdcFrontStatus+0x128>)
 800294a:	701a      	strb	r2, [r3, #0]

		}

	}

	PdcFrontDistance();
 800294c:	f000 f8f4 	bl	8002b38 <PdcFrontDistance>

}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	bd90      	pop	{r4, r7, pc}
 8002958:	2000020c 	.word	0x2000020c
 800295c:	200001fc 	.word	0x200001fc
 8002960:	200000f6 	.word	0x200000f6
 8002964:	200000ea 	.word	0x200000ea
 8002968:	20000204 	.word	0x20000204
 800296c:	200000fa 	.word	0x200000fa
 8002970:	200000eb 	.word	0x200000eb
 8002974:	200000ec 	.word	0x200000ec

08002978 <PdcRearStatus>:

void PdcRearStatus()
{
 8002978:	b590      	push	{r4, r7, lr}
 800297a:	b085      	sub	sp, #20
 800297c:	af02      	add	r7, sp, #8

	TickType_t expiry_time 	= 0;
 800297e:	2300      	movs	r3, #0
 8002980:	607b      	str	r3, [r7, #4]
	uint8 echoValue 		= 0;
 8002982:	2300      	movs	r3, #0
 8002984:	70fb      	strb	r3, [r7, #3]

	osTimerStart(PdcRearGlobalTimerHandle, 10000);
 8002986:	4b3f      	ldr	r3, [pc, #252]	; (8002a84 <PdcRearStatus+0x10c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f242 7110 	movw	r1, #10000	; 0x2710
 800298e:	4618      	mov	r0, r3
 8002990:	f009 fb6a 	bl	800c068 <osTimerStart>
	xTimerStart(PdcRearGlobalTimerHandle, 0);
 8002994:	4b3b      	ldr	r3, [pc, #236]	; (8002a84 <PdcRearStatus+0x10c>)
 8002996:	681c      	ldr	r4, [r3, #0]
 8002998:	f00b fb20 	bl	800dfdc <xTaskGetTickCount>
 800299c:	4602      	mov	r2, r0
 800299e:	2300      	movs	r3, #0
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	2300      	movs	r3, #0
 80029a4:	2101      	movs	r1, #1
 80029a6:	4620      	mov	r0, r4
 80029a8:	f00c f916 	bl	800ebd8 <xTimerGenericCommand>
	PdcToggleRearTriggerPin(STD_LOW);
 80029ac:	2000      	movs	r0, #0
 80029ae:	f000 f88d 	bl	8002acc <PdcToggleRearTriggerPin>
	PdcToggleRearTriggerPin(STD_HIGH);
 80029b2:	2001      	movs	r0, #1
 80029b4:	f000 f88a 	bl	8002acc <PdcToggleRearTriggerPin>
	osTimerStart(PdcRearDelayTimerHandle, 10);
 80029b8:	4b33      	ldr	r3, [pc, #204]	; (8002a88 <PdcRearStatus+0x110>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	210a      	movs	r1, #10
 80029be:	4618      	mov	r0, r3
 80029c0:	f009 fb52 	bl	800c068 <osTimerStart>
	PdcRearGenerateDelay();
 80029c4:	f7ff fef0 	bl	80027a8 <PdcRearGenerateDelay>

	if(Pdc_RearDelayStatus == STD_HIGH)
 80029c8:	4b30      	ldr	r3, [pc, #192]	; (8002a8c <PdcRearStatus+0x114>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d107      	bne.n	80029e0 <PdcRearStatus+0x68>
	{

		PdcToggleRearTriggerPin(STD_LOW);
 80029d0:	2000      	movs	r0, #0
 80029d2:	f000 f87b 	bl	8002acc <PdcToggleRearTriggerPin>
		osTimerStop(PdcRearDelayTimerHandle);
 80029d6:	4b2c      	ldr	r3, [pc, #176]	; (8002a88 <PdcRearStatus+0x110>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f009 fb72 	bl	800c0c4 <osTimerStop>

		/* do nothing */

	}

	echoValue = PdcReadRearEchoPin();
 80029e0:	f000 f898 	bl	8002b14 <PdcReadRearEchoPin>
 80029e4:	4603      	mov	r3, r0
 80029e6:	70fb      	strb	r3, [r7, #3]

	if(echoValue == STD_HIGH)
 80029e8:	78fb      	ldrb	r3, [r7, #3]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d11e      	bne.n	8002a2c <PdcRearStatus+0xb4>
	{

		Pdc_RearRxDelay = HAL_GetTick();
 80029ee:	f002 f837 	bl	8004a60 <HAL_GetTick>
 80029f2:	4603      	mov	r3, r0
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	4b26      	ldr	r3, [pc, #152]	; (8002a90 <PdcRearStatus+0x118>)
 80029f8:	701a      	strb	r2, [r3, #0]
		osTimerStart(PdcSecondRearDelayTimerHandle, Pdc_RearRxDelay + 10);
 80029fa:	4b26      	ldr	r3, [pc, #152]	; (8002a94 <PdcRearStatus+0x11c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a24      	ldr	r2, [pc, #144]	; (8002a90 <PdcRearStatus+0x118>)
 8002a00:	7812      	ldrb	r2, [r2, #0]
 8002a02:	320a      	adds	r2, #10
 8002a04:	4611      	mov	r1, r2
 8002a06:	4618      	mov	r0, r3
 8002a08:	f009 fb2e 	bl	800c068 <osTimerStart>
		PdcRearGenerateDelay();
 8002a0c:	f7ff fecc 	bl	80027a8 <PdcRearGenerateDelay>

		if(Pdc_SecondRearDelayStatus == STD_HIGH)
 8002a10:	4b21      	ldr	r3, [pc, #132]	; (8002a98 <PdcRearStatus+0x120>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d109      	bne.n	8002a2c <PdcRearStatus+0xb4>
		{

			expiry_time = xTimerGetExpiryTime(PdcRearGlobalTimerHandle);
 8002a18:	4b1a      	ldr	r3, [pc, #104]	; (8002a84 <PdcRearStatus+0x10c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f00c f929 	bl	800ec74 <xTimerGetExpiryTime>
 8002a22:	6078      	str	r0, [r7, #4]
			Pdc_RearEchoFirstTimeStampValue = expiry_time;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	4b1c      	ldr	r3, [pc, #112]	; (8002a9c <PdcRearStatus+0x124>)
 8002a2a:	701a      	strb	r2, [r3, #0]

		}

	}

	echoValue = PdcReadRearEchoPin();
 8002a2c:	f000 f872 	bl	8002b14 <PdcReadRearEchoPin>
 8002a30:	4603      	mov	r3, r0
 8002a32:	70fb      	strb	r3, [r7, #3]

	if(echoValue == STD_HIGH)
 8002a34:	78fb      	ldrb	r3, [r7, #3]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d11e      	bne.n	8002a78 <PdcRearStatus+0x100>
	{

		Pdc_RearRxDelay = HAL_GetTick();
 8002a3a:	f002 f811 	bl	8004a60 <HAL_GetTick>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	4b13      	ldr	r3, [pc, #76]	; (8002a90 <PdcRearStatus+0x118>)
 8002a44:	701a      	strb	r2, [r3, #0]
		osTimerStart(PdcSecondRearDelayTimerHandle, Pdc_RearRxDelay + 50);
 8002a46:	4b13      	ldr	r3, [pc, #76]	; (8002a94 <PdcRearStatus+0x11c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a11      	ldr	r2, [pc, #68]	; (8002a90 <PdcRearStatus+0x118>)
 8002a4c:	7812      	ldrb	r2, [r2, #0]
 8002a4e:	3232      	adds	r2, #50	; 0x32
 8002a50:	4611      	mov	r1, r2
 8002a52:	4618      	mov	r0, r3
 8002a54:	f009 fb08 	bl	800c068 <osTimerStart>
		PdcFrontGenerateDelay();
 8002a58:	f7ff fec4 	bl	80027e4 <PdcFrontGenerateDelay>

		if(Pdc_SecondFrontDelayStatus == STD_HIGH)
 8002a5c:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <PdcRearStatus+0x128>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d109      	bne.n	8002a78 <PdcRearStatus+0x100>
		{

			expiry_time = xTimerGetExpiryTime(PdcRearGlobalTimerHandle);
 8002a64:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <PdcRearStatus+0x10c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f00c f903 	bl	800ec74 <xTimerGetExpiryTime>
 8002a6e:	6078      	str	r0, [r7, #4]
			Pdc_RearEchoSecondTimeStampValue = expiry_time;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <PdcRearStatus+0x12c>)
 8002a76:	701a      	strb	r2, [r3, #0]

		}

	}

	PdcRearDistance();
 8002a78:	f000 f892 	bl	8002ba0 <PdcRearDistance>

}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd90      	pop	{r4, r7, pc}
 8002a84:	20000210 	.word	0x20000210
 8002a88:	20000200 	.word	0x20000200
 8002a8c:	200000f7 	.word	0x200000f7
 8002a90:	200000ef 	.word	0x200000ef
 8002a94:	20000208 	.word	0x20000208
 8002a98:	200000fb 	.word	0x200000fb
 8002a9c:	200000f0 	.word	0x200000f0
 8002aa0:	200000fa 	.word	0x200000fa
 8002aa4:	200000f1 	.word	0x200000f1

08002aa8 <PdcToggleFrontTriggerPin>:

void PdcToggleFrontTriggerPin(uint8 PinState)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(PDC_FRONT_TRIGGER_PORT, PDC_FRONT_TRIGGER_PIN, PinState);
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	2120      	movs	r1, #32
 8002ab8:	4803      	ldr	r0, [pc, #12]	; (8002ac8 <PdcToggleFrontTriggerPin+0x20>)
 8002aba:	f003 fda3 	bl	8006604 <HAL_GPIO_WritePin>

}
 8002abe:	bf00      	nop
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40020000 	.word	0x40020000

08002acc <PdcToggleRearTriggerPin>:

void PdcToggleRearTriggerPin(uint8 PinState)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(PDC_FRONT_TRIGGER_PORT, PDC_FRONT_TRIGGER_PIN, PinState);
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	2120      	movs	r1, #32
 8002adc:	4803      	ldr	r0, [pc, #12]	; (8002aec <PdcToggleRearTriggerPin+0x20>)
 8002ade:	f003 fd91 	bl	8006604 <HAL_GPIO_WritePin>

}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40020000 	.word	0x40020000

08002af0 <PdcReadFrontEchoPin>:

StdReturnType PdcReadFrontEchoPin()
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0

	uint8 pinValue = 0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	71fb      	strb	r3, [r7, #7]

	pinValue = HAL_GPIO_ReadPin(PDC_FRONT_ECHO_PORT, PDC_FRONT_ECHO_PIN);
 8002afa:	2120      	movs	r1, #32
 8002afc:	4804      	ldr	r0, [pc, #16]	; (8002b10 <PdcReadFrontEchoPin+0x20>)
 8002afe:	f003 fd69 	bl	80065d4 <HAL_GPIO_ReadPin>
 8002b02:	4603      	mov	r3, r0
 8002b04:	71fb      	strb	r3, [r7, #7]

	return pinValue;
 8002b06:	79fb      	ldrb	r3, [r7, #7]

}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40020000 	.word	0x40020000

08002b14 <PdcReadRearEchoPin>:

StdReturnType PdcReadRearEchoPin()
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0

	uint8 pinValue = 0;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	71fb      	strb	r3, [r7, #7]

	pinValue = HAL_GPIO_ReadPin(PDC_REAR_ECHO_PORT, PDC_REAR_ECHO_PIN);
 8002b1e:	2120      	movs	r1, #32
 8002b20:	4804      	ldr	r0, [pc, #16]	; (8002b34 <PdcReadRearEchoPin+0x20>)
 8002b22:	f003 fd57 	bl	80065d4 <HAL_GPIO_ReadPin>
 8002b26:	4603      	mov	r3, r0
 8002b28:	71fb      	strb	r3, [r7, #7]

	return pinValue;
 8002b2a:	79fb      	ldrb	r3, [r7, #7]

}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40020000 	.word	0x40020000

08002b38 <PdcFrontDistance>:

void PdcFrontDistance()
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0

	Pdc_FrontDistanceValue = (Pdc_FrontEchoFirstTimeStampValue + Pdc_FrontEchoSecondTimeStampValue) * 0.034 / 2;
 8002b3c:	4b14      	ldr	r3, [pc, #80]	; (8002b90 <PdcFrontDistance+0x58>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	461a      	mov	r2, r3
 8002b42:	4b14      	ldr	r3, [pc, #80]	; (8002b94 <PdcFrontDistance+0x5c>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	4413      	add	r3, r2
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7fd fc9b 	bl	8000484 <__aeabi_i2d>
 8002b4e:	a30e      	add	r3, pc, #56	; (adr r3, 8002b88 <PdcFrontDistance+0x50>)
 8002b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b54:	f7fd fd00 	bl	8000558 <__aeabi_dmul>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	4619      	mov	r1, r3
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b68:	f7fd fe20 	bl	80007ac <__aeabi_ddiv>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4610      	mov	r0, r2
 8002b72:	4619      	mov	r1, r3
 8002b74:	f7fd ff02 	bl	800097c <__aeabi_d2uiz>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <PdcFrontDistance+0x60>)
 8002b7e:	701a      	strb	r2, [r3, #0]

}
 8002b80:	bf00      	nop
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	f3af 8000 	nop.w
 8002b88:	b020c49c 	.word	0xb020c49c
 8002b8c:	3fa16872 	.word	0x3fa16872
 8002b90:	200000eb 	.word	0x200000eb
 8002b94:	200000ec 	.word	0x200000ec
 8002b98:	200000ed 	.word	0x200000ed
 8002b9c:	00000000 	.word	0x00000000

08002ba0 <PdcRearDistance>:


void PdcRearDistance()
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0

	Pdc_RearDistanceValue = (Pdc_RearEchoFirstTimeStampValue + Pdc_RearEchoSecondTimeStampValue) * 0.034 / 2;
 8002ba4:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <PdcRearDistance+0x58>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4b14      	ldr	r3, [pc, #80]	; (8002bfc <PdcRearDistance+0x5c>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	4413      	add	r3, r2
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fd fc67 	bl	8000484 <__aeabi_i2d>
 8002bb6:	a30e      	add	r3, pc, #56	; (adr r3, 8002bf0 <PdcRearDistance+0x50>)
 8002bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bbc:	f7fd fccc 	bl	8000558 <__aeabi_dmul>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4610      	mov	r0, r2
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002bd0:	f7fd fdec 	bl	80007ac <__aeabi_ddiv>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4619      	mov	r1, r3
 8002bdc:	f7fd fece 	bl	800097c <__aeabi_d2uiz>
 8002be0:	4603      	mov	r3, r0
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <PdcRearDistance+0x60>)
 8002be6:	701a      	strb	r2, [r3, #0]

}
 8002be8:	bf00      	nop
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	f3af 8000 	nop.w
 8002bf0:	b020c49c 	.word	0xb020c49c
 8002bf4:	3fa16872 	.word	0x3fa16872
 8002bf8:	200000f0 	.word	0x200000f0
 8002bfc:	200000f1 	.word	0x200000f1
 8002c00:	200000f2 	.word	0x200000f2

08002c04 <PdcMainFunction>:
	}

}

void PdcMainFunction()
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0

	PdcFrontStatus();
 8002c08:	f7ff fe20 	bl	800284c <PdcFrontStatus>
	PdcRearStatus();
 8002c0c:	f7ff feb4 	bl	8002978 <PdcRearStatus>

}
 8002c10:	bf00      	nop
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <PdcInit>:

StdReturnType PdcInit()
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0

	Pdc_FrontRxDelay 					= STD_LOW;
 8002c18:	4b1d      	ldr	r3, [pc, #116]	; (8002c90 <PdcInit+0x7c>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	701a      	strb	r2, [r3, #0]
	Pdc_FrontEchoFirstTimeStampValue 	= STD_LOW;
 8002c1e:	4b1d      	ldr	r3, [pc, #116]	; (8002c94 <PdcInit+0x80>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	701a      	strb	r2, [r3, #0]
	Pdc_FrontEchoSecondTimeStampValue 	= STD_LOW;
 8002c24:	4b1c      	ldr	r3, [pc, #112]	; (8002c98 <PdcInit+0x84>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	701a      	strb	r2, [r3, #0]
	Pdc_FrontDistanceValue 				= STD_LOW;
 8002c2a:	4b1c      	ldr	r3, [pc, #112]	; (8002c9c <PdcInit+0x88>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	701a      	strb	r2, [r3, #0]
	Pdc_TimerValueForFrontBuzzer 		= STD_LOW;
 8002c30:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <PdcInit+0x8c>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	701a      	strb	r2, [r3, #0]
	Pdc_RearRxDelay 					= STD_LOW;
 8002c36:	4b1b      	ldr	r3, [pc, #108]	; (8002ca4 <PdcInit+0x90>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	701a      	strb	r2, [r3, #0]
	Pdc_RearEchoFirstTimeStampValue 	= STD_LOW;
 8002c3c:	4b1a      	ldr	r3, [pc, #104]	; (8002ca8 <PdcInit+0x94>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	701a      	strb	r2, [r3, #0]
	Pdc_RearEchoSecondTimeStampValue 	= STD_LOW;
 8002c42:	4b1a      	ldr	r3, [pc, #104]	; (8002cac <PdcInit+0x98>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	701a      	strb	r2, [r3, #0]
	Pdc_RearDistanceValue 				= STD_LOW;
 8002c48:	4b19      	ldr	r3, [pc, #100]	; (8002cb0 <PdcInit+0x9c>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	701a      	strb	r2, [r3, #0]
	Pdc_TimerValueForRearBuzzer 		= STD_LOW;
 8002c4e:	4b19      	ldr	r3, [pc, #100]	; (8002cb4 <PdcInit+0xa0>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	701a      	strb	r2, [r3, #0]
	Pdc_RearGenerateDelayFlag			= STD_LOW;
 8002c54:	4b18      	ldr	r3, [pc, #96]	; (8002cb8 <PdcInit+0xa4>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	701a      	strb	r2, [r3, #0]
	Pdc_FrontGenerateDelayFlag 			= STD_LOW;
 8002c5a:	4b18      	ldr	r3, [pc, #96]	; (8002cbc <PdcInit+0xa8>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	701a      	strb	r2, [r3, #0]
	Pdc_FrontDelayStatus 				= STD_LOW;
 8002c60:	4b17      	ldr	r3, [pc, #92]	; (8002cc0 <PdcInit+0xac>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	701a      	strb	r2, [r3, #0]
	Pdc_SecondRearGenerateDelayFlag 	= STD_LOW;
 8002c66:	4b17      	ldr	r3, [pc, #92]	; (8002cc4 <PdcInit+0xb0>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	701a      	strb	r2, [r3, #0]
	Pdc_SecondFrontGenerateDelayFlag 	= STD_LOW;
 8002c6c:	4b16      	ldr	r3, [pc, #88]	; (8002cc8 <PdcInit+0xb4>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	701a      	strb	r2, [r3, #0]
	Pdc_SecondFrontDelayStatus 			= STD_LOW;
 8002c72:	4b16      	ldr	r3, [pc, #88]	; (8002ccc <PdcInit+0xb8>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]
	Pdc_SecondRearDelayStatus 			= STD_LOW;
 8002c78:	4b15      	ldr	r3, [pc, #84]	; (8002cd0 <PdcInit+0xbc>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Init(&htim9);
 8002c7e:	4815      	ldr	r0, [pc, #84]	; (8002cd4 <PdcInit+0xc0>)
 8002c80:	f007 faa6 	bl	800a1d0 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Init(&htim10);
 8002c84:	4814      	ldr	r0, [pc, #80]	; (8002cd8 <PdcInit+0xc4>)
 8002c86:	f007 faa3 	bl	800a1d0 <HAL_TIM_Base_Init>

	return E_OK;
 8002c8a:	2300      	movs	r3, #0

}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	200000ea 	.word	0x200000ea
 8002c94:	200000eb 	.word	0x200000eb
 8002c98:	200000ec 	.word	0x200000ec
 8002c9c:	200000ed 	.word	0x200000ed
 8002ca0:	200000ee 	.word	0x200000ee
 8002ca4:	200000ef 	.word	0x200000ef
 8002ca8:	200000f0 	.word	0x200000f0
 8002cac:	200000f1 	.word	0x200000f1
 8002cb0:	200000f2 	.word	0x200000f2
 8002cb4:	200000f3 	.word	0x200000f3
 8002cb8:	200000f4 	.word	0x200000f4
 8002cbc:	200000f5 	.word	0x200000f5
 8002cc0:	200000f6 	.word	0x200000f6
 8002cc4:	200000f8 	.word	0x200000f8
 8002cc8:	200000f9 	.word	0x200000f9
 8002ccc:	200000fa 	.word	0x200000fa
 8002cd0:	200000fb 	.word	0x200000fb
 8002cd4:	200007b4 	.word	0x200007b4
 8002cd8:	20000868 	.word	0x20000868

08002cdc <SecAlmVibeSenReadPin>:
void SecAlmState();
void SecAlmLightsBuzzerControl();
void SecAlmTurnOnExtLights();

StdReturnType SecAlmVibeSenReadPin()
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0

	uint8 PinState = 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	71fb      	strb	r3, [r7, #7]

	PinState = HAL_GPIO_ReadPin(SECALM_VIBSEN_PORT, SECALM_VIBSEN_PIN);
 8002ce6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cea:	4805      	ldr	r0, [pc, #20]	; (8002d00 <SecAlmVibeSenReadPin+0x24>)
 8002cec:	f003 fc72 	bl	80065d4 <HAL_GPIO_ReadPin>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	71fb      	strb	r3, [r7, #7]

	return PinState;
 8002cf4:	79fb      	ldrb	r3, [r7, #7]

}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40020400 	.word	0x40020400

08002d04 <SecAlmVibSenStatus>:

StdReturnType SecAlmVibSenStatus()
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0

	SecAlm_VibSenStatusFlag = SecAlmVibeSenReadPin();
 8002d08:	f7ff ffe8 	bl	8002cdc <SecAlmVibeSenReadPin>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	461a      	mov	r2, r3
 8002d10:	4b0e      	ldr	r3, [pc, #56]	; (8002d4c <SecAlmVibSenStatus+0x48>)
 8002d12:	701a      	strb	r2, [r3, #0]

	if(CenLoc_CurrentState == STD_HIGH)
 8002d14:	4b0e      	ldr	r3, [pc, #56]	; (8002d50 <SecAlmVibSenStatus+0x4c>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d103      	bne.n	8002d24 <SecAlmVibSenStatus+0x20>
	{

		SecAlm_VibSenStateSetToOff = STD_HIGH;
 8002d1c:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <SecAlmVibSenStatus+0x50>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	701a      	strb	r2, [r3, #0]
 8002d22:	e006      	b.n	8002d32 <SecAlmVibSenStatus+0x2e>

	}
	else if(CenLoc_CurrentState == STD_LOW)
 8002d24:	4b0a      	ldr	r3, [pc, #40]	; (8002d50 <SecAlmVibSenStatus+0x4c>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d102      	bne.n	8002d32 <SecAlmVibSenStatus+0x2e>
	{

		SecAlm_VibSenStateSetToOff = STD_LOW;
 8002d2c:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <SecAlmVibSenStatus+0x50>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(SecAlm_VibSenStateSetToOff == STD_LOW && SecAlm_VibSenStatusFlag == STD_LOW)
 8002d32:	4b08      	ldr	r3, [pc, #32]	; (8002d54 <SecAlmVibSenStatus+0x50>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d105      	bne.n	8002d46 <SecAlmVibSenStatus+0x42>
 8002d3a:	4b04      	ldr	r3, [pc, #16]	; (8002d4c <SecAlmVibSenStatus+0x48>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <SecAlmVibSenStatus+0x42>
	{

		return STD_HIGH;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <SecAlmVibSenStatus+0x44>

		/* do nothing */

	}

	return STD_LOW;
 8002d46:	2300      	movs	r3, #0

}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	200000ff 	.word	0x200000ff
 8002d50:	20000092 	.word	0x20000092
 8002d54:	20000100 	.word	0x20000100

08002d58 <SecAlmState>:

void SecAlmState()
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0

	if(SecAlm_PreviousState != SecAlm_Trigger)
 8002d5c:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <SecAlmState+0x50>)
 8002d5e:	781a      	ldrb	r2, [r3, #0]
 8002d60:	4b12      	ldr	r3, [pc, #72]	; (8002dac <SecAlmState+0x54>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d006      	beq.n	8002d76 <SecAlmState+0x1e>
	{

		HAL_TIM_Base_Init(&htim5);
 8002d68:	4811      	ldr	r0, [pc, #68]	; (8002db0 <SecAlmState+0x58>)
 8002d6a:	f007 fa31 	bl	800a1d0 <HAL_TIM_Base_Init>
		SecAlm_PreviousState = SecAlm_Trigger;
 8002d6e:	4b0f      	ldr	r3, [pc, #60]	; (8002dac <SecAlmState+0x54>)
 8002d70:	781a      	ldrb	r2, [r3, #0]
 8002d72:	4b0d      	ldr	r3, [pc, #52]	; (8002da8 <SecAlmState+0x50>)
 8002d74:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(SecAlmVibSenStatus() == STD_HIGH)
 8002d76:	f7ff ffc5 	bl	8002d04 <SecAlmVibSenStatus>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d106      	bne.n	8002d8e <SecAlmState+0x36>
	{

		SecAlm_Trigger = SecAlmVibSenStatus();
 8002d80:	f7ff ffc0 	bl	8002d04 <SecAlmVibSenStatus>
 8002d84:	4603      	mov	r3, r0
 8002d86:	461a      	mov	r2, r3
 8002d88:	4b08      	ldr	r3, [pc, #32]	; (8002dac <SecAlmState+0x54>)
 8002d8a:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8002d8c:	e00a      	b.n	8002da4 <SecAlmState+0x4c>
	else if(SecAlmVibSenStatus() == STD_LOW)
 8002d8e:	f7ff ffb9 	bl	8002d04 <SecAlmVibSenStatus>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d105      	bne.n	8002da4 <SecAlmState+0x4c>
		SecAlm_Trigger = SecAlmVibSenStatus();
 8002d98:	f7ff ffb4 	bl	8002d04 <SecAlmVibSenStatus>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	461a      	mov	r2, r3
 8002da0:	4b02      	ldr	r3, [pc, #8]	; (8002dac <SecAlmState+0x54>)
 8002da2:	701a      	strb	r2, [r3, #0]
}
 8002da4:	bf00      	nop
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	200000fe 	.word	0x200000fe
 8002dac:	200000fc 	.word	0x200000fc
 8002db0:	20000700 	.word	0x20000700

08002db4 <SecAlmTurnOnExtLights>:

void SecAlmTurnOnExtLights()
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0

	ExtLightsLowBeam(SecAlm_PinStateChange);
 8002db8:	4b0f      	ldr	r3, [pc, #60]	; (8002df8 <SecAlmTurnOnExtLights+0x44>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff f84f 	bl	8001e60 <ExtLightsLowBeam>
	ExtLightsRearPositionLight(SecAlm_PinStateChange);
 8002dc2:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <SecAlmTurnOnExtLights+0x44>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff f8b6 	bl	8001f38 <ExtLightsRearPositionLight>
	ExtLightsFrontFogLight(SecAlm_PinStateChange);
 8002dcc:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <SecAlmTurnOnExtLights+0x44>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff f87b 	bl	8001ecc <ExtLightsFrontFogLight>
	ExtLightsRearFogLight(SecAlm_PinStateChange);
 8002dd6:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <SecAlmTurnOnExtLights+0x44>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff f8be 	bl	8001f5c <ExtLightsRearFogLight>
	ExtLightsTurnSignalRight(SecAlm_PinStateChange);
 8002de0:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <SecAlmTurnOnExtLights+0x44>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff f895 	bl	8001f14 <ExtLightsTurnSignalRight>
	ExtLightsTurnSignalLeft(SecAlm_PinStateChange);
 8002dea:	4b03      	ldr	r3, [pc, #12]	; (8002df8 <SecAlmTurnOnExtLights+0x44>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff f87e 	bl	8001ef0 <ExtLightsTurnSignalLeft>

}
 8002df4:	bf00      	nop
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	20000101 	.word	0x20000101

08002dfc <SecAlmLightsBuzzerControl>:

void SecAlmLightsBuzzerControl()
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0

	SecAlmState();
 8002e00:	f7ff ffaa 	bl	8002d58 <SecAlmState>

	if(SecAlm_Trigger == STD_HIGH)
 8002e04:	4b25      	ldr	r3, [pc, #148]	; (8002e9c <SecAlmLightsBuzzerControl+0xa0>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d139      	bne.n	8002e80 <SecAlmLightsBuzzerControl+0x84>
	{

		HAL_TIM_Base_Start(&htim5);
 8002e0c:	4824      	ldr	r0, [pc, #144]	; (8002ea0 <SecAlmLightsBuzzerControl+0xa4>)
 8002e0e:	f007 fa3b 	bl	800a288 <HAL_TIM_Base_Start>

		if(__HAL_TIM_GET_COUNTER(&htim5) < 100000)
 8002e12:	4b23      	ldr	r3, [pc, #140]	; (8002ea0 <SecAlmLightsBuzzerControl+0xa4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	4a22      	ldr	r2, [pc, #136]	; (8002ea4 <SecAlmLightsBuzzerControl+0xa8>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d823      	bhi.n	8002e66 <SecAlmLightsBuzzerControl+0x6a>
		{

			HAL_TIM_Base_Start(&htim4);
 8002e1e:	4822      	ldr	r0, [pc, #136]	; (8002ea8 <SecAlmLightsBuzzerControl+0xac>)
 8002e20:	f007 fa32 	bl	800a288 <HAL_TIM_Base_Start>

			if(__HAL_TIM_GET_COUNTER(&htim4) < 5000)
 8002e24:	4b20      	ldr	r3, [pc, #128]	; (8002ea8 <SecAlmLightsBuzzerControl+0xac>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	f241 3287 	movw	r2, #4999	; 0x1387
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d805      	bhi.n	8002e3e <SecAlmLightsBuzzerControl+0x42>
			{

				SecAlm_PinStateChange = STD_HIGH;
 8002e32:	4b1e      	ldr	r3, [pc, #120]	; (8002eac <SecAlmLightsBuzzerControl+0xb0>)
 8002e34:	2201      	movs	r2, #1
 8002e36:	701a      	strb	r2, [r3, #0]
				SecAlmTurnOnExtLights();
 8002e38:	f7ff ffbc 	bl	8002db4 <SecAlmTurnOnExtLights>

		/* do nothing */

	}

}
 8002e3c:	e02c      	b.n	8002e98 <SecAlmLightsBuzzerControl+0x9c>
			else if(5000 < __HAL_TIM_GET_COUNTER(&htim4) && __HAL_TIM_GET_COUNTER(&htim4) < 10000)
 8002e3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ea8 <SecAlmLightsBuzzerControl+0xac>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d925      	bls.n	8002e98 <SecAlmLightsBuzzerControl+0x9c>
 8002e4c:	4b16      	ldr	r3, [pc, #88]	; (8002ea8 <SecAlmLightsBuzzerControl+0xac>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	f242 720f 	movw	r2, #9999	; 0x270f
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d81e      	bhi.n	8002e98 <SecAlmLightsBuzzerControl+0x9c>
				SecAlm_PinStateChange = STD_LOW;
 8002e5a:	4b14      	ldr	r3, [pc, #80]	; (8002eac <SecAlmLightsBuzzerControl+0xb0>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
				SecAlmTurnOnExtLights();
 8002e60:	f7ff ffa8 	bl	8002db4 <SecAlmTurnOnExtLights>
}
 8002e64:	e018      	b.n	8002e98 <SecAlmLightsBuzzerControl+0x9c>
		else if(__HAL_TIM_GET_COUNTER(&htim5) > 100000)
 8002e66:	4b0e      	ldr	r3, [pc, #56]	; (8002ea0 <SecAlmLightsBuzzerControl+0xa4>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	4a10      	ldr	r2, [pc, #64]	; (8002eb0 <SecAlmLightsBuzzerControl+0xb4>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d912      	bls.n	8002e98 <SecAlmLightsBuzzerControl+0x9c>
			SecAlm_Trigger = STD_LOW;
 8002e72:	4b0a      	ldr	r3, [pc, #40]	; (8002e9c <SecAlmLightsBuzzerControl+0xa0>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim5);
 8002e78:	4809      	ldr	r0, [pc, #36]	; (8002ea0 <SecAlmLightsBuzzerControl+0xa4>)
 8002e7a:	f007 fa5f 	bl	800a33c <HAL_TIM_Base_Stop>
}
 8002e7e:	e00b      	b.n	8002e98 <SecAlmLightsBuzzerControl+0x9c>
	else if(SecAlm_Trigger == STD_LOW)
 8002e80:	4b06      	ldr	r3, [pc, #24]	; (8002e9c <SecAlmLightsBuzzerControl+0xa0>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d107      	bne.n	8002e98 <SecAlmLightsBuzzerControl+0x9c>
		HAL_TIM_Base_Stop(&htim4);
 8002e88:	4807      	ldr	r0, [pc, #28]	; (8002ea8 <SecAlmLightsBuzzerControl+0xac>)
 8002e8a:	f007 fa57 	bl	800a33c <HAL_TIM_Base_Stop>
		SecAlm_PinStateChange = STD_LOW;
 8002e8e:	4b07      	ldr	r3, [pc, #28]	; (8002eac <SecAlmLightsBuzzerControl+0xb0>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	701a      	strb	r2, [r3, #0]
		SecAlmTurnOnExtLights();
 8002e94:	f7ff ff8e 	bl	8002db4 <SecAlmTurnOnExtLights>
}
 8002e98:	bf00      	nop
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	200000fc 	.word	0x200000fc
 8002ea0:	20000700 	.word	0x20000700
 8002ea4:	0001869f 	.word	0x0001869f
 8002ea8:	2000064c 	.word	0x2000064c
 8002eac:	20000101 	.word	0x20000101
 8002eb0:	000186a0 	.word	0x000186a0

08002eb4 <SecAlmMainFunction>:

void SecAlmMainFunction()
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0

	SecAlmLightsBuzzerControl();
 8002eb8:	f7ff ffa0 	bl	8002dfc <SecAlmLightsBuzzerControl>

}
 8002ebc:	bf00      	nop
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <SecAlmInit>:

StdReturnType SecAlmInit()
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0

	SecAlm_Trigger 				= STD_LOW;
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <SecAlmInit+0x34>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	701a      	strb	r2, [r3, #0]
	SecAlm_Counter 				= STD_LOW;
 8002eca:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <SecAlmInit+0x38>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	701a      	strb	r2, [r3, #0]
	SecAlm_PreviousState 		= STD_LOW;
 8002ed0:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <SecAlmInit+0x3c>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	701a      	strb	r2, [r3, #0]
	SecAlm_VibSenStatusFlag 		= STD_LOW;
 8002ed6:	4b0a      	ldr	r3, [pc, #40]	; (8002f00 <SecAlmInit+0x40>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	701a      	strb	r2, [r3, #0]
	SecAlm_VibSenStateSetToOff 	= STD_LOW;
 8002edc:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <SecAlmInit+0x44>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	701a      	strb	r2, [r3, #0]
	SecAlm_PinStateChange 		= STD_LOW;
 8002ee2:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <SecAlmInit+0x48>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	701a      	strb	r2, [r3, #0]

	return E_OK;
 8002ee8:	2300      	movs	r3, #0

}
 8002eea:	4618      	mov	r0, r3
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	200000fc 	.word	0x200000fc
 8002ef8:	200000fd 	.word	0x200000fd
 8002efc:	200000fe 	.word	0x200000fe
 8002f00:	200000ff 	.word	0x200000ff
 8002f04:	20000100 	.word	0x20000100
 8002f08:	20000101 	.word	0x20000101

08002f0c <SecAlmToggleAlarmLed>:
	HAL_GPIO_WritePin(SECALM_BUZZER_PORT, SECALM_BUZZER_PIN, PinState);

}

void SecAlmToggleAlarmLed(uint8 PinState)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(SECALM_LED_PORT, SECALM_LED_PIN, PinState);
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	2180      	movs	r1, #128	; 0x80
 8002f1c:	4803      	ldr	r0, [pc, #12]	; (8002f2c <SecAlmToggleAlarmLed+0x20>)
 8002f1e:	f003 fb71 	bl	8006604 <HAL_GPIO_WritePin>

}
 8002f22:	bf00      	nop
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40020000 	.word	0x40020000

08002f30 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af02      	add	r7, sp, #8
 8002f36:	4603      	mov	r3, r0
 8002f38:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	f023 030f 	bic.w	r3, r3, #15
 8002f40:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8002f42:	79fb      	ldrb	r3, [r7, #7]
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
 8002f4a:	f043 030c 	orr.w	r3, r3, #12
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8002f52:	7bfb      	ldrb	r3, [r7, #15]
 8002f54:	f043 0308 	orr.w	r3, r3, #8
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8002f5c:	7bbb      	ldrb	r3, [r7, #14]
 8002f5e:	f043 030c 	orr.w	r3, r3, #12
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8002f66:	7bbb      	ldrb	r3, [r7, #14]
 8002f68:	f043 0308 	orr.w	r3, r3, #8
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f70:	f107 0208 	add.w	r2, r7, #8
 8002f74:	2364      	movs	r3, #100	; 0x64
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	2304      	movs	r3, #4
 8002f7a:	214e      	movs	r1, #78	; 0x4e
 8002f7c:	4803      	ldr	r0, [pc, #12]	; (8002f8c <lcd_send_cmd+0x5c>)
 8002f7e:	f003 fcdb 	bl	8006938 <HAL_I2C_Master_Transmit>
}
 8002f82:	bf00      	nop
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	2000026c 	.word	0x2000026c

08002f90 <lcd_send_data>:

void lcd_send_data (char data)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af02      	add	r7, sp, #8
 8002f96:	4603      	mov	r3, r0
 8002f98:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
 8002f9c:	f023 030f 	bic.w	r3, r3, #15
 8002fa0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	011b      	lsls	r3, r3, #4
 8002fa6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
 8002faa:	f043 030d 	orr.w	r3, r3, #13
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	f043 0309 	orr.w	r3, r3, #9
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002fbc:	7bbb      	ldrb	r3, [r7, #14]
 8002fbe:	f043 030d 	orr.w	r3, r3, #13
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002fc6:	7bbb      	ldrb	r3, [r7, #14]
 8002fc8:	f043 0309 	orr.w	r3, r3, #9
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fd0:	f107 0208 	add.w	r2, r7, #8
 8002fd4:	2364      	movs	r3, #100	; 0x64
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	2304      	movs	r3, #4
 8002fda:	214e      	movs	r1, #78	; 0x4e
 8002fdc:	4803      	ldr	r0, [pc, #12]	; (8002fec <lcd_send_data+0x5c>)
 8002fde:	f003 fcab 	bl	8006938 <HAL_I2C_Master_Transmit>
}
 8002fe2:	bf00      	nop
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	2000026c 	.word	0x2000026c

08002ff0 <lcd_clear>:

void lcd_clear (void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8002ff6:	2080      	movs	r0, #128	; 0x80
 8002ff8:	f7ff ff9a 	bl	8002f30 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	607b      	str	r3, [r7, #4]
 8003000:	e005      	b.n	800300e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8003002:	2020      	movs	r0, #32
 8003004:	f7ff ffc4 	bl	8002f90 <lcd_send_data>
	for (int i=0; i<70; i++)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3301      	adds	r3, #1
 800300c:	607b      	str	r3, [r7, #4]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b45      	cmp	r3, #69	; 0x45
 8003012:	ddf6      	ble.n	8003002 <lcd_clear+0x12>
	}
}
 8003014:	bf00      	nop
 8003016:	bf00      	nop
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b082      	sub	sp, #8
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
 8003026:	6039      	str	r1, [r7, #0]
    switch (row)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <lcd_put_cur+0x18>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d005      	beq.n	8003040 <lcd_put_cur+0x22>
 8003034:	e009      	b.n	800304a <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800303c:	603b      	str	r3, [r7, #0]
            break;
 800303e:	e004      	b.n	800304a <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003046:	603b      	str	r3, [r7, #0]
            break;
 8003048:	bf00      	nop
    }

    lcd_send_cmd (col);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	b2db      	uxtb	r3, r3
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff ff6e 	bl	8002f30 <lcd_send_cmd>
}
 8003054:	bf00      	nop
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <lcd_init>:


void lcd_init (void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8003060:	2032      	movs	r0, #50	; 0x32
 8003062:	f001 fd09 	bl	8004a78 <HAL_Delay>
	lcd_send_cmd (0x30);
 8003066:	2030      	movs	r0, #48	; 0x30
 8003068:	f7ff ff62 	bl	8002f30 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800306c:	2005      	movs	r0, #5
 800306e:	f001 fd03 	bl	8004a78 <HAL_Delay>
	lcd_send_cmd (0x30);
 8003072:	2030      	movs	r0, #48	; 0x30
 8003074:	f7ff ff5c 	bl	8002f30 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8003078:	2001      	movs	r0, #1
 800307a:	f001 fcfd 	bl	8004a78 <HAL_Delay>
	lcd_send_cmd (0x30);
 800307e:	2030      	movs	r0, #48	; 0x30
 8003080:	f7ff ff56 	bl	8002f30 <lcd_send_cmd>
	HAL_Delay(10);
 8003084:	200a      	movs	r0, #10
 8003086:	f001 fcf7 	bl	8004a78 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800308a:	2020      	movs	r0, #32
 800308c:	f7ff ff50 	bl	8002f30 <lcd_send_cmd>
	HAL_Delay(10);
 8003090:	200a      	movs	r0, #10
 8003092:	f001 fcf1 	bl	8004a78 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8003096:	2028      	movs	r0, #40	; 0x28
 8003098:	f7ff ff4a 	bl	8002f30 <lcd_send_cmd>
	HAL_Delay(1);
 800309c:	2001      	movs	r0, #1
 800309e:	f001 fceb 	bl	8004a78 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80030a2:	2008      	movs	r0, #8
 80030a4:	f7ff ff44 	bl	8002f30 <lcd_send_cmd>
	HAL_Delay(1);
 80030a8:	2001      	movs	r0, #1
 80030aa:	f001 fce5 	bl	8004a78 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80030ae:	2001      	movs	r0, #1
 80030b0:	f7ff ff3e 	bl	8002f30 <lcd_send_cmd>
	HAL_Delay(1);
 80030b4:	2001      	movs	r0, #1
 80030b6:	f001 fcdf 	bl	8004a78 <HAL_Delay>
	HAL_Delay(1);
 80030ba:	2001      	movs	r0, #1
 80030bc:	f001 fcdc 	bl	8004a78 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80030c0:	2006      	movs	r0, #6
 80030c2:	f7ff ff35 	bl	8002f30 <lcd_send_cmd>
	HAL_Delay(1);
 80030c6:	2001      	movs	r0, #1
 80030c8:	f001 fcd6 	bl	8004a78 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80030cc:	200c      	movs	r0, #12
 80030ce:	f7ff ff2f 	bl	8002f30 <lcd_send_cmd>
}
 80030d2:	bf00      	nop
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b082      	sub	sp, #8
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80030de:	e006      	b.n	80030ee <lcd_send_string+0x18>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	607a      	str	r2, [r7, #4]
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff ff51 	bl	8002f90 <lcd_send_data>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f4      	bne.n	80030e0 <lcd_send_string+0xa>
}
 80030f6:	bf00      	nop
 80030f8:	bf00      	nop
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003106:	463b      	mov	r3, r7
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	605a      	str	r2, [r3, #4]
 800310e:	609a      	str	r2, [r3, #8]
 8003110:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003112:	4b3e      	ldr	r3, [pc, #248]	; (800320c <MX_ADC1_Init+0x10c>)
 8003114:	4a3e      	ldr	r2, [pc, #248]	; (8003210 <MX_ADC1_Init+0x110>)
 8003116:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003118:	4b3c      	ldr	r3, [pc, #240]	; (800320c <MX_ADC1_Init+0x10c>)
 800311a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800311e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003120:	4b3a      	ldr	r3, [pc, #232]	; (800320c <MX_ADC1_Init+0x10c>)
 8003122:	2200      	movs	r2, #0
 8003124:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003126:	4b39      	ldr	r3, [pc, #228]	; (800320c <MX_ADC1_Init+0x10c>)
 8003128:	2201      	movs	r2, #1
 800312a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800312c:	4b37      	ldr	r3, [pc, #220]	; (800320c <MX_ADC1_Init+0x10c>)
 800312e:	2201      	movs	r2, #1
 8003130:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003132:	4b36      	ldr	r3, [pc, #216]	; (800320c <MX_ADC1_Init+0x10c>)
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800313a:	4b34      	ldr	r3, [pc, #208]	; (800320c <MX_ADC1_Init+0x10c>)
 800313c:	2200      	movs	r2, #0
 800313e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003140:	4b32      	ldr	r3, [pc, #200]	; (800320c <MX_ADC1_Init+0x10c>)
 8003142:	4a34      	ldr	r2, [pc, #208]	; (8003214 <MX_ADC1_Init+0x114>)
 8003144:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003146:	4b31      	ldr	r3, [pc, #196]	; (800320c <MX_ADC1_Init+0x10c>)
 8003148:	2200      	movs	r2, #0
 800314a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 800314c:	4b2f      	ldr	r3, [pc, #188]	; (800320c <MX_ADC1_Init+0x10c>)
 800314e:	2205      	movs	r2, #5
 8003150:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003152:	4b2e      	ldr	r3, [pc, #184]	; (800320c <MX_ADC1_Init+0x10c>)
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800315a:	4b2c      	ldr	r3, [pc, #176]	; (800320c <MX_ADC1_Init+0x10c>)
 800315c:	2201      	movs	r2, #1
 800315e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003160:	482a      	ldr	r0, [pc, #168]	; (800320c <MX_ADC1_Init+0x10c>)
 8003162:	f001 fcad 	bl	8004ac0 <HAL_ADC_Init>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800316c:	f000 fe68 	bl	8003e40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003170:	2301      	movs	r3, #1
 8003172:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003174:	2301      	movs	r3, #1
 8003176:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003178:	2300      	movs	r3, #0
 800317a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800317c:	463b      	mov	r3, r7
 800317e:	4619      	mov	r1, r3
 8003180:	4822      	ldr	r0, [pc, #136]	; (800320c <MX_ADC1_Init+0x10c>)
 8003182:	f001 ff2f 	bl	8004fe4 <HAL_ADC_ConfigChannel>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800318c:	f000 fe58 	bl	8003e40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003190:	2302      	movs	r3, #2
 8003192:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003194:	2302      	movs	r3, #2
 8003196:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003198:	463b      	mov	r3, r7
 800319a:	4619      	mov	r1, r3
 800319c:	481b      	ldr	r0, [pc, #108]	; (800320c <MX_ADC1_Init+0x10c>)
 800319e:	f001 ff21 	bl	8004fe4 <HAL_ADC_ConfigChannel>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80031a8:	f000 fe4a 	bl	8003e40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80031ac:	2303      	movs	r3, #3
 80031ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80031b0:	2303      	movs	r3, #3
 80031b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031b4:	463b      	mov	r3, r7
 80031b6:	4619      	mov	r1, r3
 80031b8:	4814      	ldr	r0, [pc, #80]	; (800320c <MX_ADC1_Init+0x10c>)
 80031ba:	f001 ff13 	bl	8004fe4 <HAL_ADC_ConfigChannel>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80031c4:	f000 fe3c 	bl	8003e40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80031c8:	2309      	movs	r3, #9
 80031ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80031cc:	2304      	movs	r3, #4
 80031ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031d0:	463b      	mov	r3, r7
 80031d2:	4619      	mov	r1, r3
 80031d4:	480d      	ldr	r0, [pc, #52]	; (800320c <MX_ADC1_Init+0x10c>)
 80031d6:	f001 ff05 	bl	8004fe4 <HAL_ADC_ConfigChannel>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80031e0:	f000 fe2e 	bl	8003e40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80031e4:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <MX_ADC1_Init+0x118>)
 80031e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80031e8:	2305      	movs	r3, #5
 80031ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80031ec:	2307      	movs	r3, #7
 80031ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031f0:	463b      	mov	r3, r7
 80031f2:	4619      	mov	r1, r3
 80031f4:	4805      	ldr	r0, [pc, #20]	; (800320c <MX_ADC1_Init+0x10c>)
 80031f6:	f001 fef5 	bl	8004fe4 <HAL_ADC_ConfigChannel>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8003200:	f000 fe1e 	bl	8003e40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003204:	bf00      	nop
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	20000104 	.word	0x20000104
 8003210:	40012000 	.word	0x40012000
 8003214:	0f000001 	.word	0x0f000001
 8003218:	10000012 	.word	0x10000012

0800321c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b08c      	sub	sp, #48	; 0x30
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003224:	f107 031c 	add.w	r3, r7, #28
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	605a      	str	r2, [r3, #4]
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	60da      	str	r2, [r3, #12]
 8003232:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a4d      	ldr	r2, [pc, #308]	; (8003370 <HAL_ADC_MspInit+0x154>)
 800323a:	4293      	cmp	r3, r2
 800323c:	f040 8094 	bne.w	8003368 <HAL_ADC_MspInit+0x14c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003240:	2300      	movs	r3, #0
 8003242:	61bb      	str	r3, [r7, #24]
 8003244:	4b4b      	ldr	r3, [pc, #300]	; (8003374 <HAL_ADC_MspInit+0x158>)
 8003246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003248:	4a4a      	ldr	r2, [pc, #296]	; (8003374 <HAL_ADC_MspInit+0x158>)
 800324a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800324e:	6453      	str	r3, [r2, #68]	; 0x44
 8003250:	4b48      	ldr	r3, [pc, #288]	; (8003374 <HAL_ADC_MspInit+0x158>)
 8003252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003258:	61bb      	str	r3, [r7, #24]
 800325a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	4b44      	ldr	r3, [pc, #272]	; (8003374 <HAL_ADC_MspInit+0x158>)
 8003262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003264:	4a43      	ldr	r2, [pc, #268]	; (8003374 <HAL_ADC_MspInit+0x158>)
 8003266:	f043 0304 	orr.w	r3, r3, #4
 800326a:	6313      	str	r3, [r2, #48]	; 0x30
 800326c:	4b41      	ldr	r3, [pc, #260]	; (8003374 <HAL_ADC_MspInit+0x158>)
 800326e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	617b      	str	r3, [r7, #20]
 8003276:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003278:	2300      	movs	r3, #0
 800327a:	613b      	str	r3, [r7, #16]
 800327c:	4b3d      	ldr	r3, [pc, #244]	; (8003374 <HAL_ADC_MspInit+0x158>)
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	4a3c      	ldr	r2, [pc, #240]	; (8003374 <HAL_ADC_MspInit+0x158>)
 8003282:	f043 0301 	orr.w	r3, r3, #1
 8003286:	6313      	str	r3, [r2, #48]	; 0x30
 8003288:	4b3a      	ldr	r3, [pc, #232]	; (8003374 <HAL_ADC_MspInit+0x158>)
 800328a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	613b      	str	r3, [r7, #16]
 8003292:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003294:	2300      	movs	r3, #0
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	4b36      	ldr	r3, [pc, #216]	; (8003374 <HAL_ADC_MspInit+0x158>)
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	4a35      	ldr	r2, [pc, #212]	; (8003374 <HAL_ADC_MspInit+0x158>)
 800329e:	f043 0302 	orr.w	r3, r3, #2
 80032a2:	6313      	str	r3, [r2, #48]	; 0x30
 80032a4:	4b33      	ldr	r3, [pc, #204]	; (8003374 <HAL_ADC_MspInit+0x158>)
 80032a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80032b0:	2307      	movs	r3, #7
 80032b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032b4:	2303      	movs	r3, #3
 80032b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b8:	2300      	movs	r3, #0
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032bc:	f107 031c 	add.w	r3, r7, #28
 80032c0:	4619      	mov	r1, r3
 80032c2:	482d      	ldr	r0, [pc, #180]	; (8003378 <HAL_ADC_MspInit+0x15c>)
 80032c4:	f003 f802 	bl	80062cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80032c8:	230e      	movs	r3, #14
 80032ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032cc:	2303      	movs	r3, #3
 80032ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d0:	2300      	movs	r3, #0
 80032d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032d4:	f107 031c 	add.w	r3, r7, #28
 80032d8:	4619      	mov	r1, r3
 80032da:	4828      	ldr	r0, [pc, #160]	; (800337c <HAL_ADC_MspInit+0x160>)
 80032dc:	f002 fff6 	bl	80062cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80032e0:	2302      	movs	r3, #2
 80032e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032e4:	2303      	movs	r3, #3
 80032e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e8:	2300      	movs	r3, #0
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ec:	f107 031c 	add.w	r3, r7, #28
 80032f0:	4619      	mov	r1, r3
 80032f2:	4823      	ldr	r0, [pc, #140]	; (8003380 <HAL_ADC_MspInit+0x164>)
 80032f4:	f002 ffea 	bl	80062cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80032f8:	4b22      	ldr	r3, [pc, #136]	; (8003384 <HAL_ADC_MspInit+0x168>)
 80032fa:	4a23      	ldr	r2, [pc, #140]	; (8003388 <HAL_ADC_MspInit+0x16c>)
 80032fc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80032fe:	4b21      	ldr	r3, [pc, #132]	; (8003384 <HAL_ADC_MspInit+0x168>)
 8003300:	2200      	movs	r2, #0
 8003302:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003304:	4b1f      	ldr	r3, [pc, #124]	; (8003384 <HAL_ADC_MspInit+0x168>)
 8003306:	2200      	movs	r2, #0
 8003308:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800330a:	4b1e      	ldr	r3, [pc, #120]	; (8003384 <HAL_ADC_MspInit+0x168>)
 800330c:	2200      	movs	r2, #0
 800330e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003310:	4b1c      	ldr	r3, [pc, #112]	; (8003384 <HAL_ADC_MspInit+0x168>)
 8003312:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003316:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003318:	4b1a      	ldr	r3, [pc, #104]	; (8003384 <HAL_ADC_MspInit+0x168>)
 800331a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800331e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003320:	4b18      	ldr	r3, [pc, #96]	; (8003384 <HAL_ADC_MspInit+0x168>)
 8003322:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003326:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003328:	4b16      	ldr	r3, [pc, #88]	; (8003384 <HAL_ADC_MspInit+0x168>)
 800332a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800332e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003330:	4b14      	ldr	r3, [pc, #80]	; (8003384 <HAL_ADC_MspInit+0x168>)
 8003332:	2200      	movs	r2, #0
 8003334:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003336:	4b13      	ldr	r3, [pc, #76]	; (8003384 <HAL_ADC_MspInit+0x168>)
 8003338:	2200      	movs	r2, #0
 800333a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800333c:	4811      	ldr	r0, [pc, #68]	; (8003384 <HAL_ADC_MspInit+0x168>)
 800333e:	f002 fa0d 	bl	800575c <HAL_DMA_Init>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8003348:	f000 fd7a 	bl	8003e40 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a0d      	ldr	r2, [pc, #52]	; (8003384 <HAL_ADC_MspInit+0x168>)
 8003350:	639a      	str	r2, [r3, #56]	; 0x38
 8003352:	4a0c      	ldr	r2, [pc, #48]	; (8003384 <HAL_ADC_MspInit+0x168>)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8003358:	2200      	movs	r2, #0
 800335a:	2105      	movs	r1, #5
 800335c:	2012      	movs	r0, #18
 800335e:	f002 f9b7 	bl	80056d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003362:	2012      	movs	r0, #18
 8003364:	f002 f9d0 	bl	8005708 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003368:	bf00      	nop
 800336a:	3730      	adds	r7, #48	; 0x30
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40012000 	.word	0x40012000
 8003374:	40023800 	.word	0x40023800
 8003378:	40020800 	.word	0x40020800
 800337c:	40020000 	.word	0x40020000
 8003380:	40020400 	.word	0x40020400
 8003384:	20000168 	.word	0x20000168
 8003388:	40026410 	.word	0x40026410

0800338c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003390:	4b06      	ldr	r3, [pc, #24]	; (80033ac <MX_CRC_Init+0x20>)
 8003392:	4a07      	ldr	r2, [pc, #28]	; (80033b0 <MX_CRC_Init+0x24>)
 8003394:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003396:	4805      	ldr	r0, [pc, #20]	; (80033ac <MX_CRC_Init+0x20>)
 8003398:	f002 f9c4 	bl	8005724 <HAL_CRC_Init>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80033a2:	f000 fd4d 	bl	8003e40 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80033a6:	bf00      	nop
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	200001c8 	.word	0x200001c8
 80033b0:	40023000 	.word	0x40023000

080033b4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a0b      	ldr	r2, [pc, #44]	; (80033f0 <HAL_CRC_MspInit+0x3c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d10d      	bne.n	80033e2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80033c6:	2300      	movs	r3, #0
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <HAL_CRC_MspInit+0x40>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	4a09      	ldr	r2, [pc, #36]	; (80033f4 <HAL_CRC_MspInit+0x40>)
 80033d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80033d4:	6313      	str	r3, [r2, #48]	; 0x30
 80033d6:	4b07      	ldr	r3, [pc, #28]	; (80033f4 <HAL_CRC_MspInit+0x40>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80033e2:	bf00      	nop
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40023000 	.word	0x40023000
 80033f4:	40023800 	.word	0x40023800

080033f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80033fe:	2300      	movs	r3, #0
 8003400:	607b      	str	r3, [r7, #4]
 8003402:	4b0c      	ldr	r3, [pc, #48]	; (8003434 <MX_DMA_Init+0x3c>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	4a0b      	ldr	r2, [pc, #44]	; (8003434 <MX_DMA_Init+0x3c>)
 8003408:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800340c:	6313      	str	r3, [r2, #48]	; 0x30
 800340e:	4b09      	ldr	r3, [pc, #36]	; (8003434 <MX_DMA_Init+0x3c>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003416:	607b      	str	r3, [r7, #4]
 8003418:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800341a:	2200      	movs	r2, #0
 800341c:	2105      	movs	r1, #5
 800341e:	2038      	movs	r0, #56	; 0x38
 8003420:	f002 f956 	bl	80056d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003424:	2038      	movs	r0, #56	; 0x38
 8003426:	f002 f96f 	bl	8005708 <HAL_NVIC_EnableIRQ>

}
 800342a:	bf00      	nop
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	40023800 	.word	0x40023800

08003438 <configureTimerForRunTimeStats>:
void vApplicationDaemonTaskStartupHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0

}
 800343c:	bf00      	nop
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8003446:	b480      	push	{r7}
 8003448:	af00      	add	r7, sp, #0
return 0;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8003456:	b480      	push	{r7}
 8003458:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800345a:	bf00      	nop
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8003468:	bf00      	nop
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800348c:	bf00      	nop
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <vApplicationDaemonTaskStartupHook>:
/* USER CODE END 5 */

/* USER CODE BEGIN DAEMON_TASK_STARTUP_HOOK */
void vApplicationDaemonTaskStartupHook(void)
{
 8003496:	b480      	push	{r7}
 8003498:	af00      	add	r7, sp, #0
}
 800349a:	bf00      	nop
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <PreSleepProcessing>:
/* USER CODE END DAEMON_TASK_STARTUP_HOOK */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of PdcFrontDelayTimer */
  PdcFrontDelayTimerHandle = osTimerNew(PdcFrontDelayCallback, osTimerOnce, NULL, &PdcFrontDelayTimer_attributes);
 80034d0:	4b85      	ldr	r3, [pc, #532]	; (80036e8 <MX_FREERTOS_Init+0x21c>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	2100      	movs	r1, #0
 80034d6:	4885      	ldr	r0, [pc, #532]	; (80036ec <MX_FREERTOS_Init+0x220>)
 80034d8:	f008 fd4a 	bl	800bf70 <osTimerNew>
 80034dc:	4603      	mov	r3, r0
 80034de:	4a84      	ldr	r2, [pc, #528]	; (80036f0 <MX_FREERTOS_Init+0x224>)
 80034e0:	6013      	str	r3, [r2, #0]

  /* creation of PdcRearDelayTimer */
  PdcRearDelayTimerHandle = osTimerNew(PdcRearDelayCallback, osTimerPeriodic, NULL, &PdcRearDelayTimer_attributes);
 80034e2:	4b84      	ldr	r3, [pc, #528]	; (80036f4 <MX_FREERTOS_Init+0x228>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	2101      	movs	r1, #1
 80034e8:	4883      	ldr	r0, [pc, #524]	; (80036f8 <MX_FREERTOS_Init+0x22c>)
 80034ea:	f008 fd41 	bl	800bf70 <osTimerNew>
 80034ee:	4603      	mov	r3, r0
 80034f0:	4a82      	ldr	r2, [pc, #520]	; (80036fc <MX_FREERTOS_Init+0x230>)
 80034f2:	6013      	str	r3, [r2, #0]

  /* creation of PdcSecondFrontDelayTimer */
  PdcSecondFrontDelayTimerHandle = osTimerNew(PdcSecondFrontDelayCallback, osTimerPeriodic, NULL, &PdcSecondFrontDelayTimer_attributes);
 80034f4:	4b82      	ldr	r3, [pc, #520]	; (8003700 <MX_FREERTOS_Init+0x234>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	2101      	movs	r1, #1
 80034fa:	4882      	ldr	r0, [pc, #520]	; (8003704 <MX_FREERTOS_Init+0x238>)
 80034fc:	f008 fd38 	bl	800bf70 <osTimerNew>
 8003500:	4603      	mov	r3, r0
 8003502:	4a81      	ldr	r2, [pc, #516]	; (8003708 <MX_FREERTOS_Init+0x23c>)
 8003504:	6013      	str	r3, [r2, #0]

  /* creation of PdcSecondRearDelayTimer */
  PdcSecondRearDelayTimerHandle = osTimerNew(PdcSecondRearDelayCallback, osTimerPeriodic, NULL, &PdcSecondRearDelayTimer_attributes);
 8003506:	4b81      	ldr	r3, [pc, #516]	; (800370c <MX_FREERTOS_Init+0x240>)
 8003508:	2200      	movs	r2, #0
 800350a:	2101      	movs	r1, #1
 800350c:	4880      	ldr	r0, [pc, #512]	; (8003710 <MX_FREERTOS_Init+0x244>)
 800350e:	f008 fd2f 	bl	800bf70 <osTimerNew>
 8003512:	4603      	mov	r3, r0
 8003514:	4a7f      	ldr	r2, [pc, #508]	; (8003714 <MX_FREERTOS_Init+0x248>)
 8003516:	6013      	str	r3, [r2, #0]

  /* creation of PdcFrontGlobalTimer */
  PdcFrontGlobalTimerHandle = osTimerNew(PdcFrontGlobalTimerCallback, osTimerPeriodic, NULL, &PdcFrontGlobalTimer_attributes);
 8003518:	4b7f      	ldr	r3, [pc, #508]	; (8003718 <MX_FREERTOS_Init+0x24c>)
 800351a:	2200      	movs	r2, #0
 800351c:	2101      	movs	r1, #1
 800351e:	487f      	ldr	r0, [pc, #508]	; (800371c <MX_FREERTOS_Init+0x250>)
 8003520:	f008 fd26 	bl	800bf70 <osTimerNew>
 8003524:	4603      	mov	r3, r0
 8003526:	4a7e      	ldr	r2, [pc, #504]	; (8003720 <MX_FREERTOS_Init+0x254>)
 8003528:	6013      	str	r3, [r2, #0]

  /* creation of PdcRearGlobalTimer */
  PdcRearGlobalTimerHandle = osTimerNew(PdcRearGlobalTimerCallback, osTimerPeriodic, NULL, &PdcRearGlobalTimer_attributes);
 800352a:	4b7e      	ldr	r3, [pc, #504]	; (8003724 <MX_FREERTOS_Init+0x258>)
 800352c:	2200      	movs	r2, #0
 800352e:	2101      	movs	r1, #1
 8003530:	487d      	ldr	r0, [pc, #500]	; (8003728 <MX_FREERTOS_Init+0x25c>)
 8003532:	f008 fd1d 	bl	800bf70 <osTimerNew>
 8003536:	4603      	mov	r3, r0
 8003538:	4a7c      	ldr	r2, [pc, #496]	; (800372c <MX_FREERTOS_Init+0x260>)
 800353a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of QM_APPL_LP */
  QM_APPL_LPHandle = osThreadNew(TASK_QM_APPL_LP, NULL, &QM_APPL_LP_attributes);
 800353c:	4a7c      	ldr	r2, [pc, #496]	; (8003730 <MX_FREERTOS_Init+0x264>)
 800353e:	2100      	movs	r1, #0
 8003540:	487c      	ldr	r0, [pc, #496]	; (8003734 <MX_FREERTOS_Init+0x268>)
 8003542:	f008 fc51 	bl	800bde8 <osThreadNew>
 8003546:	4603      	mov	r3, r0
 8003548:	4a7b      	ldr	r2, [pc, #492]	; (8003738 <MX_FREERTOS_Init+0x26c>)
 800354a:	6013      	str	r3, [r2, #0]

  /* creation of QM_APPL_HP */
  QM_APPL_HPHandle = osThreadNew(TASK_QM_APPL_HP, NULL, &QM_APPL_HP_attributes);
 800354c:	4a7b      	ldr	r2, [pc, #492]	; (800373c <MX_FREERTOS_Init+0x270>)
 800354e:	2100      	movs	r1, #0
 8003550:	487b      	ldr	r0, [pc, #492]	; (8003740 <MX_FREERTOS_Init+0x274>)
 8003552:	f008 fc49 	bl	800bde8 <osThreadNew>
 8003556:	4603      	mov	r3, r0
 8003558:	4a7a      	ldr	r2, [pc, #488]	; (8003744 <MX_FREERTOS_Init+0x278>)
 800355a:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_APPL_LP */
  ASIL_APPL_LPHandle = osThreadNew(TASK_ASIL_APPL_LP, NULL, &ASIL_APPL_LP_attributes);
 800355c:	4a7a      	ldr	r2, [pc, #488]	; (8003748 <MX_FREERTOS_Init+0x27c>)
 800355e:	2100      	movs	r1, #0
 8003560:	487a      	ldr	r0, [pc, #488]	; (800374c <MX_FREERTOS_Init+0x280>)
 8003562:	f008 fc41 	bl	800bde8 <osThreadNew>
 8003566:	4603      	mov	r3, r0
 8003568:	4a79      	ldr	r2, [pc, #484]	; (8003750 <MX_FREERTOS_Init+0x284>)
 800356a:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_APPL_HP */
  ASIL_APPL_HPHandle = osThreadNew(TASK_ASIL_APPL_HP, NULL, &ASIL_APPL_HP_attributes);
 800356c:	4a79      	ldr	r2, [pc, #484]	; (8003754 <MX_FREERTOS_Init+0x288>)
 800356e:	2100      	movs	r1, #0
 8003570:	4879      	ldr	r0, [pc, #484]	; (8003758 <MX_FREERTOS_Init+0x28c>)
 8003572:	f008 fc39 	bl	800bde8 <osThreadNew>
 8003576:	4603      	mov	r3, r0
 8003578:	4a78      	ldr	r2, [pc, #480]	; (800375c <MX_FREERTOS_Init+0x290>)
 800357a:	6013      	str	r3, [r2, #0]

  /* creation of QM_BSW_LP */
  QM_BSW_LPHandle = osThreadNew(TASK_QM_BSW_LP, NULL, &QM_BSW_LP_attributes);
 800357c:	4a78      	ldr	r2, [pc, #480]	; (8003760 <MX_FREERTOS_Init+0x294>)
 800357e:	2100      	movs	r1, #0
 8003580:	4878      	ldr	r0, [pc, #480]	; (8003764 <MX_FREERTOS_Init+0x298>)
 8003582:	f008 fc31 	bl	800bde8 <osThreadNew>
 8003586:	4603      	mov	r3, r0
 8003588:	4a77      	ldr	r2, [pc, #476]	; (8003768 <MX_FREERTOS_Init+0x29c>)
 800358a:	6013      	str	r3, [r2, #0]

  /* creation of QM_BSW_HP */
  QM_BSW_HPHandle = osThreadNew(TASK_QM_BSW_HP, NULL, &QM_BSW_HP_attributes);
 800358c:	4a77      	ldr	r2, [pc, #476]	; (800376c <MX_FREERTOS_Init+0x2a0>)
 800358e:	2100      	movs	r1, #0
 8003590:	4877      	ldr	r0, [pc, #476]	; (8003770 <MX_FREERTOS_Init+0x2a4>)
 8003592:	f008 fc29 	bl	800bde8 <osThreadNew>
 8003596:	4603      	mov	r3, r0
 8003598:	4a76      	ldr	r2, [pc, #472]	; (8003774 <MX_FREERTOS_Init+0x2a8>)
 800359a:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_BSW_HP */
  ASIL_BSW_HPHandle = osThreadNew(TASK_ASIL_BSW_HP, NULL, &ASIL_BSW_HP_attributes);
 800359c:	4a76      	ldr	r2, [pc, #472]	; (8003778 <MX_FREERTOS_Init+0x2ac>)
 800359e:	2100      	movs	r1, #0
 80035a0:	4876      	ldr	r0, [pc, #472]	; (800377c <MX_FREERTOS_Init+0x2b0>)
 80035a2:	f008 fc21 	bl	800bde8 <osThreadNew>
 80035a6:	4603      	mov	r3, r0
 80035a8:	4a75      	ldr	r2, [pc, #468]	; (8003780 <MX_FREERTOS_Init+0x2b4>)
 80035aa:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_BSW_LP */
  ASIL_BSW_LPHandle = osThreadNew(TASK_ASIL_BSW_LP, NULL, &ASIL_BSW_LP_attributes);
 80035ac:	4a75      	ldr	r2, [pc, #468]	; (8003784 <MX_FREERTOS_Init+0x2b8>)
 80035ae:	2100      	movs	r1, #0
 80035b0:	4875      	ldr	r0, [pc, #468]	; (8003788 <MX_FREERTOS_Init+0x2bc>)
 80035b2:	f008 fc19 	bl	800bde8 <osThreadNew>
 80035b6:	4603      	mov	r3, r0
 80035b8:	4a74      	ldr	r2, [pc, #464]	; (800378c <MX_FREERTOS_Init+0x2c0>)
 80035ba:	6013      	str	r3, [r2, #0]

  /* creation of OS_InitHook */
  OS_InitHookHandle = osThreadNew(TASK_OS_InitHook, NULL, &OS_InitHook_attributes);
 80035bc:	4a74      	ldr	r2, [pc, #464]	; (8003790 <MX_FREERTOS_Init+0x2c4>)
 80035be:	2100      	movs	r1, #0
 80035c0:	4874      	ldr	r0, [pc, #464]	; (8003794 <MX_FREERTOS_Init+0x2c8>)
 80035c2:	f008 fc11 	bl	800bde8 <osThreadNew>
 80035c6:	4603      	mov	r3, r0
 80035c8:	4a73      	ldr	r2, [pc, #460]	; (8003798 <MX_FREERTOS_Init+0x2cc>)
 80035ca:	6013      	str	r3, [r2, #0]

  /* creation of OS_StartHook */
  OS_StartHookHandle = osThreadNew(TASK_OS_StartHook, NULL, &OS_StartHook_attributes);
 80035cc:	4a73      	ldr	r2, [pc, #460]	; (800379c <MX_FREERTOS_Init+0x2d0>)
 80035ce:	2100      	movs	r1, #0
 80035d0:	4873      	ldr	r0, [pc, #460]	; (80037a0 <MX_FREERTOS_Init+0x2d4>)
 80035d2:	f008 fc09 	bl	800bde8 <osThreadNew>
 80035d6:	4603      	mov	r3, r0
 80035d8:	4a72      	ldr	r2, [pc, #456]	; (80037a4 <MX_FREERTOS_Init+0x2d8>)
 80035da:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of eventPOR */
  eventPORHandle = osEventFlagsNew(&eventPOR_attributes);
 80035dc:	4872      	ldr	r0, [pc, #456]	; (80037a8 <MX_FREERTOS_Init+0x2dc>)
 80035de:	f008 fda8 	bl	800c132 <osEventFlagsNew>
 80035e2:	4603      	mov	r3, r0
 80035e4:	4a71      	ldr	r2, [pc, #452]	; (80037ac <MX_FREERTOS_Init+0x2e0>)
 80035e6:	6013      	str	r3, [r2, #0]

  /* creation of eventHWR */
  eventHWRHandle = osEventFlagsNew(&eventHWR_attributes);
 80035e8:	4871      	ldr	r0, [pc, #452]	; (80037b0 <MX_FREERTOS_Init+0x2e4>)
 80035ea:	f008 fda2 	bl	800c132 <osEventFlagsNew>
 80035ee:	4603      	mov	r3, r0
 80035f0:	4a70      	ldr	r2, [pc, #448]	; (80037b4 <MX_FREERTOS_Init+0x2e8>)
 80035f2:	6013      	str	r3, [r2, #0]

  /* creation of eventSWR */
  eventSWRHandle = osEventFlagsNew(&eventSWR_attributes);
 80035f4:	4870      	ldr	r0, [pc, #448]	; (80037b8 <MX_FREERTOS_Init+0x2ec>)
 80035f6:	f008 fd9c 	bl	800c132 <osEventFlagsNew>
 80035fa:	4603      	mov	r3, r0
 80035fc:	4a6f      	ldr	r2, [pc, #444]	; (80037bc <MX_FREERTOS_Init+0x2f0>)
 80035fe:	6013      	str	r3, [r2, #0]

  /* creation of eventCoreReset */
  eventCoreResetHandle = osEventFlagsNew(&eventCoreReset_attributes);
 8003600:	486f      	ldr	r0, [pc, #444]	; (80037c0 <MX_FREERTOS_Init+0x2f4>)
 8003602:	f008 fd96 	bl	800c132 <osEventFlagsNew>
 8003606:	4603      	mov	r3, r0
 8003608:	4a6e      	ldr	r2, [pc, #440]	; (80037c4 <MX_FREERTOS_Init+0x2f8>)
 800360a:	6013      	str	r3, [r2, #0]

  /* creation of eventMemManage */
  eventMemManageHandle = osEventFlagsNew(&eventMemManage_attributes);
 800360c:	486e      	ldr	r0, [pc, #440]	; (80037c8 <MX_FREERTOS_Init+0x2fc>)
 800360e:	f008 fd90 	bl	800c132 <osEventFlagsNew>
 8003612:	4603      	mov	r3, r0
 8003614:	4a6d      	ldr	r2, [pc, #436]	; (80037cc <MX_FREERTOS_Init+0x300>)
 8003616:	6013      	str	r3, [r2, #0]

  /* creation of eventNMI */
  eventNMIHandle = osEventFlagsNew(&eventNMI_attributes);
 8003618:	486d      	ldr	r0, [pc, #436]	; (80037d0 <MX_FREERTOS_Init+0x304>)
 800361a:	f008 fd8a 	bl	800c132 <osEventFlagsNew>
 800361e:	4603      	mov	r3, r0
 8003620:	4a6c      	ldr	r2, [pc, #432]	; (80037d4 <MX_FREERTOS_Init+0x308>)
 8003622:	6013      	str	r3, [r2, #0]

  /* creation of eventHardFault */
  eventHardFaultHandle = osEventFlagsNew(&eventHardFault_attributes);
 8003624:	486c      	ldr	r0, [pc, #432]	; (80037d8 <MX_FREERTOS_Init+0x30c>)
 8003626:	f008 fd84 	bl	800c132 <osEventFlagsNew>
 800362a:	4603      	mov	r3, r0
 800362c:	4a6b      	ldr	r2, [pc, #428]	; (80037dc <MX_FREERTOS_Init+0x310>)
 800362e:	6013      	str	r3, [r2, #0]

  /* creation of eventBusFault */
  eventBusFaultHandle = osEventFlagsNew(&eventBusFault_attributes);
 8003630:	486b      	ldr	r0, [pc, #428]	; (80037e0 <MX_FREERTOS_Init+0x314>)
 8003632:	f008 fd7e 	bl	800c132 <osEventFlagsNew>
 8003636:	4603      	mov	r3, r0
 8003638:	4a6a      	ldr	r2, [pc, #424]	; (80037e4 <MX_FREERTOS_Init+0x318>)
 800363a:	6013      	str	r3, [r2, #0]

  /* creation of eventUsageFault */
  eventUsageFaultHandle = osEventFlagsNew(&eventUsageFault_attributes);
 800363c:	486a      	ldr	r0, [pc, #424]	; (80037e8 <MX_FREERTOS_Init+0x31c>)
 800363e:	f008 fd78 	bl	800c132 <osEventFlagsNew>
 8003642:	4603      	mov	r3, r0
 8003644:	4a69      	ldr	r2, [pc, #420]	; (80037ec <MX_FREERTOS_Init+0x320>)
 8003646:	6013      	str	r3, [r2, #0]

  /* creation of eventDebugMon */
  eventDebugMonHandle = osEventFlagsNew(&eventDebugMon_attributes);
 8003648:	4869      	ldr	r0, [pc, #420]	; (80037f0 <MX_FREERTOS_Init+0x324>)
 800364a:	f008 fd72 	bl	800c132 <osEventFlagsNew>
 800364e:	4603      	mov	r3, r0
 8003650:	4a68      	ldr	r2, [pc, #416]	; (80037f4 <MX_FREERTOS_Init+0x328>)
 8003652:	6013      	str	r3, [r2, #0]

  /* creation of eventPVD_IRQ */
  eventPVD_IRQHandle = osEventFlagsNew(&eventPVD_IRQ_attributes);
 8003654:	4868      	ldr	r0, [pc, #416]	; (80037f8 <MX_FREERTOS_Init+0x32c>)
 8003656:	f008 fd6c 	bl	800c132 <osEventFlagsNew>
 800365a:	4603      	mov	r3, r0
 800365c:	4a67      	ldr	r2, [pc, #412]	; (80037fc <MX_FREERTOS_Init+0x330>)
 800365e:	6013      	str	r3, [r2, #0]

  /* creation of eventFlash_IRQ */
  eventFlash_IRQHandle = osEventFlagsNew(&eventFlash_IRQ_attributes);
 8003660:	4867      	ldr	r0, [pc, #412]	; (8003800 <MX_FREERTOS_Init+0x334>)
 8003662:	f008 fd66 	bl	800c132 <osEventFlagsNew>
 8003666:	4603      	mov	r3, r0
 8003668:	4a66      	ldr	r2, [pc, #408]	; (8003804 <MX_FREERTOS_Init+0x338>)
 800366a:	6013      	str	r3, [r2, #0]

  /* creation of eventRCC_IRQ */
  eventRCC_IRQHandle = osEventFlagsNew(&eventRCC_IRQ_attributes);
 800366c:	4866      	ldr	r0, [pc, #408]	; (8003808 <MX_FREERTOS_Init+0x33c>)
 800366e:	f008 fd60 	bl	800c132 <osEventFlagsNew>
 8003672:	4603      	mov	r3, r0
 8003674:	4a65      	ldr	r2, [pc, #404]	; (800380c <MX_FREERTOS_Init+0x340>)
 8003676:	6013      	str	r3, [r2, #0]

  /* creation of eventTIM1_IRQ */
  eventTIM1_IRQHandle = osEventFlagsNew(&eventTIM1_IRQ_attributes);
 8003678:	4865      	ldr	r0, [pc, #404]	; (8003810 <MX_FREERTOS_Init+0x344>)
 800367a:	f008 fd5a 	bl	800c132 <osEventFlagsNew>
 800367e:	4603      	mov	r3, r0
 8003680:	4a64      	ldr	r2, [pc, #400]	; (8003814 <MX_FREERTOS_Init+0x348>)
 8003682:	6013      	str	r3, [r2, #0]

  /* creation of eventTIM10_IRQ */
  eventTIM10_IRQHandle = osEventFlagsNew(&eventTIM10_IRQ_attributes);
 8003684:	4864      	ldr	r0, [pc, #400]	; (8003818 <MX_FREERTOS_Init+0x34c>)
 8003686:	f008 fd54 	bl	800c132 <osEventFlagsNew>
 800368a:	4603      	mov	r3, r0
 800368c:	4a63      	ldr	r2, [pc, #396]	; (800381c <MX_FREERTOS_Init+0x350>)
 800368e:	6013      	str	r3, [r2, #0]

  /* creation of eventTIM2_IRQ */
  eventTIM2_IRQHandle = osEventFlagsNew(&eventTIM2_IRQ_attributes);
 8003690:	4863      	ldr	r0, [pc, #396]	; (8003820 <MX_FREERTOS_Init+0x354>)
 8003692:	f008 fd4e 	bl	800c132 <osEventFlagsNew>
 8003696:	4603      	mov	r3, r0
 8003698:	4a62      	ldr	r2, [pc, #392]	; (8003824 <MX_FREERTOS_Init+0x358>)
 800369a:	6013      	str	r3, [r2, #0]

  /* creation of eventTIM3_IRQ */
  eventTIM3_IRQHandle = osEventFlagsNew(&eventTIM3_IRQ_attributes);
 800369c:	4862      	ldr	r0, [pc, #392]	; (8003828 <MX_FREERTOS_Init+0x35c>)
 800369e:	f008 fd48 	bl	800c132 <osEventFlagsNew>
 80036a2:	4603      	mov	r3, r0
 80036a4:	4a61      	ldr	r2, [pc, #388]	; (800382c <MX_FREERTOS_Init+0x360>)
 80036a6:	6013      	str	r3, [r2, #0]

  /* creation of eventTIM4_IRQ */
  eventTIM4_IRQHandle = osEventFlagsNew(&eventTIM4_IRQ_attributes);
 80036a8:	4861      	ldr	r0, [pc, #388]	; (8003830 <MX_FREERTOS_Init+0x364>)
 80036aa:	f008 fd42 	bl	800c132 <osEventFlagsNew>
 80036ae:	4603      	mov	r3, r0
 80036b0:	4a60      	ldr	r2, [pc, #384]	; (8003834 <MX_FREERTOS_Init+0x368>)
 80036b2:	6013      	str	r3, [r2, #0]

  /* creation of eventSPI2_IRQ */
  eventSPI2_IRQHandle = osEventFlagsNew(&eventSPI2_IRQ_attributes);
 80036b4:	4860      	ldr	r0, [pc, #384]	; (8003838 <MX_FREERTOS_Init+0x36c>)
 80036b6:	f008 fd3c 	bl	800c132 <osEventFlagsNew>
 80036ba:	4603      	mov	r3, r0
 80036bc:	4a5f      	ldr	r2, [pc, #380]	; (800383c <MX_FREERTOS_Init+0x370>)
 80036be:	6013      	str	r3, [r2, #0]

  /* creation of eventSPI3_IRQ */
  eventSPI3_IRQHandle = osEventFlagsNew(&eventSPI3_IRQ_attributes);
 80036c0:	485f      	ldr	r0, [pc, #380]	; (8003840 <MX_FREERTOS_Init+0x374>)
 80036c2:	f008 fd36 	bl	800c132 <osEventFlagsNew>
 80036c6:	4603      	mov	r3, r0
 80036c8:	4a5e      	ldr	r2, [pc, #376]	; (8003844 <MX_FREERTOS_Init+0x378>)
 80036ca:	6013      	str	r3, [r2, #0]

  /* creation of eventUSART1_IRQ */
  eventUSART1_IRQHandle = osEventFlagsNew(&eventUSART1_IRQ_attributes);
 80036cc:	485e      	ldr	r0, [pc, #376]	; (8003848 <MX_FREERTOS_Init+0x37c>)
 80036ce:	f008 fd30 	bl	800c132 <osEventFlagsNew>
 80036d2:	4603      	mov	r3, r0
 80036d4:	4a5d      	ldr	r2, [pc, #372]	; (800384c <MX_FREERTOS_Init+0x380>)
 80036d6:	6013      	str	r3, [r2, #0]

  /* creation of eventWDGR */
  eventWDGRHandle = osEventFlagsNew(&eventWDGR_attributes);
 80036d8:	485d      	ldr	r0, [pc, #372]	; (8003850 <MX_FREERTOS_Init+0x384>)
 80036da:	f008 fd2a 	bl	800c132 <osEventFlagsNew>
 80036de:	4603      	mov	r3, r0
 80036e0:	4a5c      	ldr	r2, [pc, #368]	; (8003854 <MX_FREERTOS_Init+0x388>)
 80036e2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80036e4:	bf00      	nop
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	0800f910 	.word	0x0800f910
 80036ec:	0800395d 	.word	0x0800395d
 80036f0:	200001fc 	.word	0x200001fc
 80036f4:	0800f920 	.word	0x0800f920
 80036f8:	0800397d 	.word	0x0800397d
 80036fc:	20000200 	.word	0x20000200
 8003700:	0800f930 	.word	0x0800f930
 8003704:	0800399d 	.word	0x0800399d
 8003708:	20000204 	.word	0x20000204
 800370c:	0800f940 	.word	0x0800f940
 8003710:	080039bd 	.word	0x080039bd
 8003714:	20000208 	.word	0x20000208
 8003718:	0800f950 	.word	0x0800f950
 800371c:	080039dd 	.word	0x080039dd
 8003720:	2000020c 	.word	0x2000020c
 8003724:	0800f960 	.word	0x0800f960
 8003728:	080039f1 	.word	0x080039f1
 800372c:	20000210 	.word	0x20000210
 8003730:	0800f7a8 	.word	0x0800f7a8
 8003734:	08003859 	.word	0x08003859
 8003738:	200001d4 	.word	0x200001d4
 800373c:	0800f7cc 	.word	0x0800f7cc
 8003740:	0800386d 	.word	0x0800386d
 8003744:	200001d8 	.word	0x200001d8
 8003748:	0800f7f0 	.word	0x0800f7f0
 800374c:	08003899 	.word	0x08003899
 8003750:	200001dc 	.word	0x200001dc
 8003754:	0800f814 	.word	0x0800f814
 8003758:	080038a9 	.word	0x080038a9
 800375c:	200001e0 	.word	0x200001e0
 8003760:	0800f838 	.word	0x0800f838
 8003764:	080038b9 	.word	0x080038b9
 8003768:	200001e4 	.word	0x200001e4
 800376c:	0800f85c 	.word	0x0800f85c
 8003770:	080038c9 	.word	0x080038c9
 8003774:	200001e8 	.word	0x200001e8
 8003778:	0800f880 	.word	0x0800f880
 800377c:	080038d9 	.word	0x080038d9
 8003780:	200001ec 	.word	0x200001ec
 8003784:	0800f8a4 	.word	0x0800f8a4
 8003788:	080038ed 	.word	0x080038ed
 800378c:	200001f0 	.word	0x200001f0
 8003790:	0800f8c8 	.word	0x0800f8c8
 8003794:	080038fd 	.word	0x080038fd
 8003798:	200001f4 	.word	0x200001f4
 800379c:	0800f8ec 	.word	0x0800f8ec
 80037a0:	08003939 	.word	0x08003939
 80037a4:	200001f8 	.word	0x200001f8
 80037a8:	0800f970 	.word	0x0800f970
 80037ac:	20000214 	.word	0x20000214
 80037b0:	0800f980 	.word	0x0800f980
 80037b4:	20000218 	.word	0x20000218
 80037b8:	0800f990 	.word	0x0800f990
 80037bc:	2000021c 	.word	0x2000021c
 80037c0:	0800f9a0 	.word	0x0800f9a0
 80037c4:	20000220 	.word	0x20000220
 80037c8:	0800f9b0 	.word	0x0800f9b0
 80037cc:	20000224 	.word	0x20000224
 80037d0:	0800f9c0 	.word	0x0800f9c0
 80037d4:	20000228 	.word	0x20000228
 80037d8:	0800f9d0 	.word	0x0800f9d0
 80037dc:	2000022c 	.word	0x2000022c
 80037e0:	0800f9e0 	.word	0x0800f9e0
 80037e4:	20000230 	.word	0x20000230
 80037e8:	0800f9f0 	.word	0x0800f9f0
 80037ec:	20000234 	.word	0x20000234
 80037f0:	0800fa00 	.word	0x0800fa00
 80037f4:	20000238 	.word	0x20000238
 80037f8:	0800fa10 	.word	0x0800fa10
 80037fc:	2000023c 	.word	0x2000023c
 8003800:	0800fa20 	.word	0x0800fa20
 8003804:	20000240 	.word	0x20000240
 8003808:	0800fa30 	.word	0x0800fa30
 800380c:	20000244 	.word	0x20000244
 8003810:	0800fa40 	.word	0x0800fa40
 8003814:	20000248 	.word	0x20000248
 8003818:	0800fa50 	.word	0x0800fa50
 800381c:	2000024c 	.word	0x2000024c
 8003820:	0800fa60 	.word	0x0800fa60
 8003824:	20000250 	.word	0x20000250
 8003828:	0800fa70 	.word	0x0800fa70
 800382c:	20000254 	.word	0x20000254
 8003830:	0800fa80 	.word	0x0800fa80
 8003834:	20000258 	.word	0x20000258
 8003838:	0800fa90 	.word	0x0800fa90
 800383c:	2000025c 	.word	0x2000025c
 8003840:	0800faa0 	.word	0x0800faa0
 8003844:	20000260 	.word	0x20000260
 8003848:	0800fab0 	.word	0x0800fab0
 800384c:	20000264 	.word	0x20000264
 8003850:	0800fac0 	.word	0x0800fac0
 8003854:	20000268 	.word	0x20000268

08003858 <TASK_QM_APPL_LP>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TASK_QM_APPL_LP */
void TASK_QM_APPL_LP(void *argument)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TASK_QM_APPL_LP */

  /* USER CODE END TASK_QM_APPL_LP */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <TASK_QM_APPL_HP>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TASK_QM_APPL_HP */
void TASK_QM_APPL_HP(void *argument)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TASK_QM_APPL_HP */

	BtcMainFunction();
 8003874:	f7fd fd12 	bl	800129c <BtcMainFunction>
	CenLocMainFunction();
 8003878:	f7fd ffc4 	bl	8001804 <CenLocMainFunction>
	ExtLightsMainFunction();
 800387c:	f7fd ffce 	bl	800181c <ExtLightsMainFunction>
	HVACMainFunction();
 8003880:	f7fe fd06 	bl	8002290 <HVACMainFunction>
	IntLightsMainFunction();
 8003884:	f7fe ff60 	bl	8002748 <IntLightsMainFunction>
	PdcMainFunction();
 8003888:	f7ff f9bc 	bl	8002c04 <PdcMainFunction>
	SecAlmMainFunction();
 800388c:	f7ff fb12 	bl	8002eb4 <SecAlmMainFunction>


  /* USER CODE END TASK_QM_APPL_HP */
}
 8003890:	bf00      	nop
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <TASK_ASIL_APPL_LP>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TASK_ASIL_APPL_LP */
void TASK_ASIL_APPL_LP(void *argument)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TASK_ASIL_APPL_LP */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80038a0:	2001      	movs	r0, #1
 80038a2:	f008 fb34 	bl	800bf0e <osDelay>
 80038a6:	e7fb      	b.n	80038a0 <TASK_ASIL_APPL_LP+0x8>

080038a8 <TASK_ASIL_APPL_HP>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TASK_ASIL_APPL_HP */
void TASK_ASIL_APPL_HP(void *argument)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TASK_ASIL_APPL_HP */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80038b0:	2001      	movs	r0, #1
 80038b2:	f008 fb2c 	bl	800bf0e <osDelay>
 80038b6:	e7fb      	b.n	80038b0 <TASK_ASIL_APPL_HP+0x8>

080038b8 <TASK_QM_BSW_LP>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TASK_QM_BSW_LP */
void TASK_QM_BSW_LP(void *argument)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TASK_QM_BSW_LP */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80038c0:	2001      	movs	r0, #1
 80038c2:	f008 fb24 	bl	800bf0e <osDelay>
 80038c6:	e7fb      	b.n	80038c0 <TASK_QM_BSW_LP+0x8>

080038c8 <TASK_QM_BSW_HP>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TASK_QM_BSW_HP */
void TASK_QM_BSW_HP(void *argument)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TASK_QM_BSW_HP */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80038d0:	2001      	movs	r0, #1
 80038d2:	f008 fb1c 	bl	800bf0e <osDelay>
 80038d6:	e7fb      	b.n	80038d0 <TASK_QM_BSW_HP+0x8>

080038d8 <TASK_ASIL_BSW_HP>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TASK_ASIL_BSW_HP */
void TASK_ASIL_BSW_HP(void *argument)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]




  /* USER CODE END TASK_ASIL_BSW_HP */
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <TASK_ASIL_BSW_LP>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TASK_ASIL_BSW_LP */
void TASK_ASIL_BSW_LP(void *argument)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TASK_ASIL_BSW_LP */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80038f4:	2001      	movs	r0, #1
 80038f6:	f008 fb0a 	bl	800bf0e <osDelay>
 80038fa:	e7fb      	b.n	80038f4 <TASK_ASIL_BSW_LP+0x8>

080038fc <TASK_OS_InitHook>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TASK_OS_InitHook */
void TASK_OS_InitHook(void *argument)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TASK_OS_InitHook */



	BtcInit();
 8003904:	f7fd f9dc 	bl	8000cc0 <BtcInit>
	CenLocInit();
 8003908:	f7fd fcd0 	bl	80012ac <CenLocInit>
	ExtLightsInit();
 800390c:	f7fd ff8e 	bl	800182c <ExtLightsInit>
	IntLightsInit();
 8003910:	f7fe ff26 	bl	8002760 <IntLightsInit>
	HVACInit();
 8003914:	f7fe fe96 	bl	8002644 <HVACInit>
	PdcInit();
 8003918:	f7ff f97c 	bl	8002c14 <PdcInit>
	SecAlmInit();
 800391c:	f7ff fad0 	bl	8002ec0 <SecAlmInit>

	OS_Counter = 0;
 8003920:	4b04      	ldr	r3, [pc, #16]	; (8003934 <TASK_OS_InitHook+0x38>)
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]

	vTaskSuspend(NULL);
 8003926:	2000      	movs	r0, #0
 8003928:	f00a f98c 	bl	800dc44 <vTaskSuspend>

  /* USER CODE END TASK_OS_InitHook */
}
 800392c:	bf00      	nop
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	200001d0 	.word	0x200001d0

08003938 <TASK_OS_StartHook>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TASK_OS_StartHook */
void TASK_OS_StartHook(void *argument)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TASK_OS_StartHook */

	OS_Counter++;
 8003940:	4b05      	ldr	r3, [pc, #20]	; (8003958 <TASK_OS_StartHook+0x20>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	3301      	adds	r3, #1
 8003946:	4a04      	ldr	r2, [pc, #16]	; (8003958 <TASK_OS_StartHook+0x20>)
 8003948:	6013      	str	r3, [r2, #0]

  /* USER CODE END TASK_OS_StartHook */
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	200001d0 	.word	0x200001d0

0800395c <PdcFrontDelayCallback>:

/* PdcFrontDelayCallback function */
void PdcFrontDelayCallback(void *argument)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcFrontDelayCallback */
	Pdc_FrontGenerateDelayFlag = STD_HIGH;
 8003964:	4b04      	ldr	r3, [pc, #16]	; (8003978 <PdcFrontDelayCallback+0x1c>)
 8003966:	2201      	movs	r2, #1
 8003968:	701a      	strb	r2, [r3, #0]
  /* USER CODE END PdcFrontDelayCallback */
}
 800396a:	bf00      	nop
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	200000f5 	.word	0x200000f5

0800397c <PdcRearDelayCallback>:

/* PdcRearDelayCallback function */
void PdcRearDelayCallback(void *argument)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcRearDelayCallback */
	Pdc_RearGenerateDelayFlag = STD_HIGH;
 8003984:	4b04      	ldr	r3, [pc, #16]	; (8003998 <PdcRearDelayCallback+0x1c>)
 8003986:	2201      	movs	r2, #1
 8003988:	701a      	strb	r2, [r3, #0]
  /* USER CODE END PdcRearDelayCallback */
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	200000f4 	.word	0x200000f4

0800399c <PdcSecondFrontDelayCallback>:

/* PdcSecondFrontDelayCallback function */
void PdcSecondFrontDelayCallback(void *argument)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcSecondFrontDelayCallback */
	Pdc_SecondFrontGenerateDelayFlag = STD_HIGH;
 80039a4:	4b04      	ldr	r3, [pc, #16]	; (80039b8 <PdcSecondFrontDelayCallback+0x1c>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END PdcSecondFrontDelayCallback */
}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	200000f9 	.word	0x200000f9

080039bc <PdcSecondRearDelayCallback>:

/* PdcSecondRearDelayCallback function */
void PdcSecondRearDelayCallback(void *argument)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcSecondRearDelayCallback */
	Pdc_SecondRearGenerateDelayFlag = STD_HIGH;
 80039c4:	4b04      	ldr	r3, [pc, #16]	; (80039d8 <PdcSecondRearDelayCallback+0x1c>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END PdcSecondRearDelayCallback */
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	200000f8 	.word	0x200000f8

080039dc <PdcFrontGlobalTimerCallback>:

/* PdcFrontGlobalTimerCallback function */
void PdcFrontGlobalTimerCallback(void *argument)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcFrontGlobalTimerCallback */

  /* USER CODE END PdcFrontGlobalTimerCallback */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <PdcRearGlobalTimerCallback>:

/* PdcRearGlobalTimerCallback function */
void PdcRearGlobalTimerCallback(void *argument)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcRearGlobalTimerCallback */

  /* USER CODE END PdcRearGlobalTimerCallback */
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	4b1e      	ldr	r3, [pc, #120]	; (8003a88 <MX_GPIO_Init+0x84>)
 8003a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a12:	4a1d      	ldr	r2, [pc, #116]	; (8003a88 <MX_GPIO_Init+0x84>)
 8003a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a18:	6313      	str	r3, [r2, #48]	; 0x30
 8003a1a:	4b1b      	ldr	r3, [pc, #108]	; (8003a88 <MX_GPIO_Init+0x84>)
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a26:	2300      	movs	r3, #0
 8003a28:	60bb      	str	r3, [r7, #8]
 8003a2a:	4b17      	ldr	r3, [pc, #92]	; (8003a88 <MX_GPIO_Init+0x84>)
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2e:	4a16      	ldr	r2, [pc, #88]	; (8003a88 <MX_GPIO_Init+0x84>)
 8003a30:	f043 0304 	orr.w	r3, r3, #4
 8003a34:	6313      	str	r3, [r2, #48]	; 0x30
 8003a36:	4b14      	ldr	r3, [pc, #80]	; (8003a88 <MX_GPIO_Init+0x84>)
 8003a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3a:	f003 0304 	and.w	r3, r3, #4
 8003a3e:	60bb      	str	r3, [r7, #8]
 8003a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a42:	2300      	movs	r3, #0
 8003a44:	607b      	str	r3, [r7, #4]
 8003a46:	4b10      	ldr	r3, [pc, #64]	; (8003a88 <MX_GPIO_Init+0x84>)
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	4a0f      	ldr	r2, [pc, #60]	; (8003a88 <MX_GPIO_Init+0x84>)
 8003a4c:	f043 0301 	orr.w	r3, r3, #1
 8003a50:	6313      	str	r3, [r2, #48]	; 0x30
 8003a52:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <MX_GPIO_Init+0x84>)
 8003a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	607b      	str	r3, [r7, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a5e:	2300      	movs	r3, #0
 8003a60:	603b      	str	r3, [r7, #0]
 8003a62:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <MX_GPIO_Init+0x84>)
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	4a08      	ldr	r2, [pc, #32]	; (8003a88 <MX_GPIO_Init+0x84>)
 8003a68:	f043 0302 	orr.w	r3, r3, #2
 8003a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a6e:	4b06      	ldr	r3, [pc, #24]	; (8003a88 <MX_GPIO_Init+0x84>)
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	603b      	str	r3, [r7, #0]
 8003a78:	683b      	ldr	r3, [r7, #0]

}
 8003a7a:	bf00      	nop
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40023800 	.word	0x40023800

08003a8c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003a90:	4b12      	ldr	r3, [pc, #72]	; (8003adc <MX_I2C1_Init+0x50>)
 8003a92:	4a13      	ldr	r2, [pc, #76]	; (8003ae0 <MX_I2C1_Init+0x54>)
 8003a94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003a96:	4b11      	ldr	r3, [pc, #68]	; (8003adc <MX_I2C1_Init+0x50>)
 8003a98:	4a12      	ldr	r2, [pc, #72]	; (8003ae4 <MX_I2C1_Init+0x58>)
 8003a9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003a9c:	4b0f      	ldr	r3, [pc, #60]	; (8003adc <MX_I2C1_Init+0x50>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003aa2:	4b0e      	ldr	r3, [pc, #56]	; (8003adc <MX_I2C1_Init+0x50>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003aa8:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <MX_I2C1_Init+0x50>)
 8003aaa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003aae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ab0:	4b0a      	ldr	r3, [pc, #40]	; (8003adc <MX_I2C1_Init+0x50>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003ab6:	4b09      	ldr	r3, [pc, #36]	; (8003adc <MX_I2C1_Init+0x50>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003abc:	4b07      	ldr	r3, [pc, #28]	; (8003adc <MX_I2C1_Init+0x50>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ac2:	4b06      	ldr	r3, [pc, #24]	; (8003adc <MX_I2C1_Init+0x50>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003ac8:	4804      	ldr	r0, [pc, #16]	; (8003adc <MX_I2C1_Init+0x50>)
 8003aca:	f002 fdb5 	bl	8006638 <HAL_I2C_Init>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003ad4:	f000 f9b4 	bl	8003e40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003ad8:	bf00      	nop
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	2000026c 	.word	0x2000026c
 8003ae0:	40005400 	.word	0x40005400
 8003ae4:	000186a0 	.word	0x000186a0

08003ae8 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003aec:	4b12      	ldr	r3, [pc, #72]	; (8003b38 <MX_I2C3_Init+0x50>)
 8003aee:	4a13      	ldr	r2, [pc, #76]	; (8003b3c <MX_I2C3_Init+0x54>)
 8003af0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003af2:	4b11      	ldr	r3, [pc, #68]	; (8003b38 <MX_I2C3_Init+0x50>)
 8003af4:	4a12      	ldr	r2, [pc, #72]	; (8003b40 <MX_I2C3_Init+0x58>)
 8003af6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003af8:	4b0f      	ldr	r3, [pc, #60]	; (8003b38 <MX_I2C3_Init+0x50>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003afe:	4b0e      	ldr	r3, [pc, #56]	; (8003b38 <MX_I2C3_Init+0x50>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b04:	4b0c      	ldr	r3, [pc, #48]	; (8003b38 <MX_I2C3_Init+0x50>)
 8003b06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b0a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	; (8003b38 <MX_I2C3_Init+0x50>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003b12:	4b09      	ldr	r3, [pc, #36]	; (8003b38 <MX_I2C3_Init+0x50>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b18:	4b07      	ldr	r3, [pc, #28]	; (8003b38 <MX_I2C3_Init+0x50>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b1e:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <MX_I2C3_Init+0x50>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003b24:	4804      	ldr	r0, [pc, #16]	; (8003b38 <MX_I2C3_Init+0x50>)
 8003b26:	f002 fd87 	bl	8006638 <HAL_I2C_Init>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003b30:	f000 f986 	bl	8003e40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003b34:	bf00      	nop
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	200002f0 	.word	0x200002f0
 8003b3c:	40005c00 	.word	0x40005c00
 8003b40:	000186a0 	.word	0x000186a0

08003b44 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b08c      	sub	sp, #48	; 0x30
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b4c:	f107 031c 	add.w	r3, r7, #28
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	605a      	str	r2, [r3, #4]
 8003b56:	609a      	str	r2, [r3, #8]
 8003b58:	60da      	str	r2, [r3, #12]
 8003b5a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a4a      	ldr	r2, [pc, #296]	; (8003c8c <HAL_I2C_MspInit+0x148>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d13d      	bne.n	8003be2 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b66:	2300      	movs	r3, #0
 8003b68:	61bb      	str	r3, [r7, #24]
 8003b6a:	4b49      	ldr	r3, [pc, #292]	; (8003c90 <HAL_I2C_MspInit+0x14c>)
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	4a48      	ldr	r2, [pc, #288]	; (8003c90 <HAL_I2C_MspInit+0x14c>)
 8003b70:	f043 0302 	orr.w	r3, r3, #2
 8003b74:	6313      	str	r3, [r2, #48]	; 0x30
 8003b76:	4b46      	ldr	r3, [pc, #280]	; (8003c90 <HAL_I2C_MspInit+0x14c>)
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	61bb      	str	r3, [r7, #24]
 8003b80:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8003b82:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b88:	2312      	movs	r3, #18
 8003b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b90:	2303      	movs	r3, #3
 8003b92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b94:	2304      	movs	r3, #4
 8003b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b98:	f107 031c 	add.w	r3, r7, #28
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	483d      	ldr	r0, [pc, #244]	; (8003c94 <HAL_I2C_MspInit+0x150>)
 8003ba0:	f002 fb94 	bl	80062cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	4b39      	ldr	r3, [pc, #228]	; (8003c90 <HAL_I2C_MspInit+0x14c>)
 8003baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bac:	4a38      	ldr	r2, [pc, #224]	; (8003c90 <HAL_I2C_MspInit+0x14c>)
 8003bae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003bb2:	6413      	str	r3, [r2, #64]	; 0x40
 8003bb4:	4b36      	ldr	r3, [pc, #216]	; (8003c90 <HAL_I2C_MspInit+0x14c>)
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bbc:	617b      	str	r3, [r7, #20]
 8003bbe:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	2105      	movs	r1, #5
 8003bc4:	201f      	movs	r0, #31
 8003bc6:	f001 fd83 	bl	80056d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003bca:	201f      	movs	r0, #31
 8003bcc:	f001 fd9c 	bl	8005708 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	2105      	movs	r1, #5
 8003bd4:	2020      	movs	r0, #32
 8003bd6:	f001 fd7b 	bl	80056d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003bda:	2020      	movs	r0, #32
 8003bdc:	f001 fd94 	bl	8005708 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003be0:	e050      	b.n	8003c84 <HAL_I2C_MspInit+0x140>
  else if(i2cHandle->Instance==I2C3)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a2c      	ldr	r2, [pc, #176]	; (8003c98 <HAL_I2C_MspInit+0x154>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d14b      	bne.n	8003c84 <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bec:	2300      	movs	r3, #0
 8003bee:	613b      	str	r3, [r7, #16]
 8003bf0:	4b27      	ldr	r3, [pc, #156]	; (8003c90 <HAL_I2C_MspInit+0x14c>)
 8003bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf4:	4a26      	ldr	r2, [pc, #152]	; (8003c90 <HAL_I2C_MspInit+0x14c>)
 8003bf6:	f043 0304 	orr.w	r3, r3, #4
 8003bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8003bfc:	4b24      	ldr	r3, [pc, #144]	; (8003c90 <HAL_I2C_MspInit+0x14c>)
 8003bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	613b      	str	r3, [r7, #16]
 8003c06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c08:	2300      	movs	r3, #0
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	4b20      	ldr	r3, [pc, #128]	; (8003c90 <HAL_I2C_MspInit+0x14c>)
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c10:	4a1f      	ldr	r2, [pc, #124]	; (8003c90 <HAL_I2C_MspInit+0x14c>)
 8003c12:	f043 0301 	orr.w	r3, r3, #1
 8003c16:	6313      	str	r3, [r2, #48]	; 0x30
 8003c18:	4b1d      	ldr	r3, [pc, #116]	; (8003c90 <HAL_I2C_MspInit+0x14c>)
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003c24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c2a:	2312      	movs	r3, #18
 8003c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c32:	2303      	movs	r3, #3
 8003c34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003c36:	2304      	movs	r3, #4
 8003c38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c3a:	f107 031c 	add.w	r3, r7, #28
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4816      	ldr	r0, [pc, #88]	; (8003c9c <HAL_I2C_MspInit+0x158>)
 8003c42:	f002 fb43 	bl	80062cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003c46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c4c:	2312      	movs	r3, #18
 8003c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c50:	2300      	movs	r3, #0
 8003c52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c54:	2303      	movs	r3, #3
 8003c56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003c58:	2304      	movs	r3, #4
 8003c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c5c:	f107 031c 	add.w	r3, r7, #28
 8003c60:	4619      	mov	r1, r3
 8003c62:	480f      	ldr	r0, [pc, #60]	; (8003ca0 <HAL_I2C_MspInit+0x15c>)
 8003c64:	f002 fb32 	bl	80062cc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60bb      	str	r3, [r7, #8]
 8003c6c:	4b08      	ldr	r3, [pc, #32]	; (8003c90 <HAL_I2C_MspInit+0x14c>)
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	4a07      	ldr	r2, [pc, #28]	; (8003c90 <HAL_I2C_MspInit+0x14c>)
 8003c72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c76:	6413      	str	r3, [r2, #64]	; 0x40
 8003c78:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <HAL_I2C_MspInit+0x14c>)
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c80:	60bb      	str	r3, [r7, #8]
 8003c82:	68bb      	ldr	r3, [r7, #8]
}
 8003c84:	bf00      	nop
 8003c86:	3730      	adds	r7, #48	; 0x30
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40005400 	.word	0x40005400
 8003c90:	40023800 	.word	0x40023800
 8003c94:	40020400 	.word	0x40020400
 8003c98:	40005c00 	.word	0x40005c00
 8003c9c:	40020800 	.word	0x40020800
 8003ca0:	40020000 	.word	0x40020000

08003ca4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ca8:	f000 fea4 	bl	80049f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003cac:	f000 f828 	bl	8003d00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003cb0:	f7ff fea8 	bl	8003a04 <MX_GPIO_Init>
  MX_DMA_Init();
 8003cb4:	f7ff fba0 	bl	80033f8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003cb8:	f000 fdc0 	bl	800483c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8003cbc:	f000 fb8c 	bl	80043d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003cc0:	f000 fbd8 	bl	8004474 <MX_TIM3_Init>
  MX_TIM5_Init();
 8003cc4:	f000 fc72 	bl	80045ac <MX_TIM5_Init>
  MX_TIM4_Init();
 8003cc8:	f000 fc22 	bl	8004510 <MX_TIM4_Init>
  MX_ADC1_Init();
 8003ccc:	f7ff fa18 	bl	8003100 <MX_ADC1_Init>
  MX_CRC_Init();
 8003cd0:	f7ff fb5c 	bl	800338c <MX_CRC_Init>
  MX_RTC_Init();
 8003cd4:	f000 f8ba 	bl	8003e4c <MX_RTC_Init>
  MX_I2C1_Init();
 8003cd8:	f7ff fed8 	bl	8003a8c <MX_I2C1_Init>
  MX_TIM9_Init();
 8003cdc:	f000 fcb4 	bl	8004648 <MX_TIM9_Init>
  MX_TIM10_Init();
 8003ce0:	f000 fcec 	bl	80046bc <MX_TIM10_Init>
  MX_I2C3_Init();
 8003ce4:	f7ff ff00 	bl	8003ae8 <MX_I2C3_Init>
  MX_SPI1_Init();
 8003ce8:	f000 f996 	bl	8004018 <MX_SPI1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8003cec:	f000 f872 	bl	8003dd4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003cf0:	f008 f830 	bl	800bd54 <osKernelInitialize>
  MX_FREERTOS_Init();
 8003cf4:	f7ff fbea 	bl	80034cc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003cf8:	f008 f850 	bl	800bd9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003cfc:	e7fe      	b.n	8003cfc <main+0x58>
	...

08003d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b094      	sub	sp, #80	; 0x50
 8003d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d06:	f107 0320 	add.w	r3, r7, #32
 8003d0a:	2230      	movs	r2, #48	; 0x30
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f00b fb06 	bl	800f320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d14:	f107 030c 	add.w	r3, r7, #12
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	605a      	str	r2, [r3, #4]
 8003d1e:	609a      	str	r2, [r3, #8]
 8003d20:	60da      	str	r2, [r3, #12]
 8003d22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d24:	2300      	movs	r3, #0
 8003d26:	60bb      	str	r3, [r7, #8]
 8003d28:	4b28      	ldr	r3, [pc, #160]	; (8003dcc <SystemClock_Config+0xcc>)
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2c:	4a27      	ldr	r2, [pc, #156]	; (8003dcc <SystemClock_Config+0xcc>)
 8003d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d32:	6413      	str	r3, [r2, #64]	; 0x40
 8003d34:	4b25      	ldr	r3, [pc, #148]	; (8003dcc <SystemClock_Config+0xcc>)
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d3c:	60bb      	str	r3, [r7, #8]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d40:	2300      	movs	r3, #0
 8003d42:	607b      	str	r3, [r7, #4]
 8003d44:	4b22      	ldr	r3, [pc, #136]	; (8003dd0 <SystemClock_Config+0xd0>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a21      	ldr	r2, [pc, #132]	; (8003dd0 <SystemClock_Config+0xd0>)
 8003d4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d4e:	6013      	str	r3, [r2, #0]
 8003d50:	4b1f      	ldr	r3, [pc, #124]	; (8003dd0 <SystemClock_Config+0xd0>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003d58:	607b      	str	r3, [r7, #4]
 8003d5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003d5c:	2309      	movs	r3, #9
 8003d5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003d66:	2301      	movs	r3, #1
 8003d68:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003d6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003d74:	2304      	movs	r3, #4
 8003d76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003d78:	2364      	movs	r3, #100	; 0x64
 8003d7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003d80:	2304      	movs	r3, #4
 8003d82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d84:	f107 0320 	add.w	r3, r7, #32
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f004 fdeb 	bl	8008964 <HAL_RCC_OscConfig>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003d94:	f000 f854 	bl	8003e40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d98:	230f      	movs	r3, #15
 8003d9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003da0:	2300      	movs	r3, #0
 8003da2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003da8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003daa:	2300      	movs	r3, #0
 8003dac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003dae:	f107 030c 	add.w	r3, r7, #12
 8003db2:	2103      	movs	r1, #3
 8003db4:	4618      	mov	r0, r3
 8003db6:	f005 f84d 	bl	8008e54 <HAL_RCC_ClockConfig>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003dc0:	f000 f83e 	bl	8003e40 <Error_Handler>
  }
}
 8003dc4:	bf00      	nop
 8003dc6:	3750      	adds	r7, #80	; 0x50
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	40007000 	.word	0x40007000

08003dd4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 8003dd8:	2200      	movs	r2, #0
 8003dda:	2105      	movs	r1, #5
 8003ddc:	2004      	movs	r0, #4
 8003dde:	f001 fc77 	bl	80056d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8003de2:	2004      	movs	r0, #4
 8003de4:	f001 fc90 	bl	8005708 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003de8:	2200      	movs	r2, #0
 8003dea:	2105      	movs	r1, #5
 8003dec:	201c      	movs	r0, #28
 8003dee:	f001 fc6f 	bl	80056d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003df2:	201c      	movs	r0, #28
 8003df4:	f001 fc88 	bl	8005708 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003df8:	2200      	movs	r2, #0
 8003dfa:	2105      	movs	r1, #5
 8003dfc:	201d      	movs	r0, #29
 8003dfe:	f001 fc67 	bl	80056d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003e02:	201d      	movs	r0, #29
 8003e04:	f001 fc80 	bl	8005708 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 8003e08:	2200      	movs	r2, #0
 8003e0a:	2105      	movs	r1, #5
 8003e0c:	2051      	movs	r0, #81	; 0x51
 8003e0e:	f001 fc5f 	bl	80056d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8003e12:	2051      	movs	r0, #81	; 0x51
 8003e14:	f001 fc78 	bl	8005708 <HAL_NVIC_EnableIRQ>
}
 8003e18:	bf00      	nop
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a04      	ldr	r2, [pc, #16]	; (8003e3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d101      	bne.n	8003e32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003e2e:	f000 fe03 	bl	8004a38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003e32:	bf00      	nop
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40010000 	.word	0x40010000

08003e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e44:	b672      	cpsid	i
}
 8003e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e48:	e7fe      	b.n	8003e48 <Error_Handler+0x8>
	...

08003e4c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b090      	sub	sp, #64	; 0x40
 8003e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003e52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e56:	2200      	movs	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	605a      	str	r2, [r3, #4]
 8003e5c:	609a      	str	r2, [r3, #8]
 8003e5e:	60da      	str	r2, [r3, #12]
 8003e60:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003e62:	2300      	movs	r3, #0
 8003e64:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8003e66:	463b      	mov	r3, r7
 8003e68:	2228      	movs	r2, #40	; 0x28
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f00b fa57 	bl	800f320 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003e72:	4b46      	ldr	r3, [pc, #280]	; (8003f8c <MX_RTC_Init+0x140>)
 8003e74:	4a46      	ldr	r2, [pc, #280]	; (8003f90 <MX_RTC_Init+0x144>)
 8003e76:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003e78:	4b44      	ldr	r3, [pc, #272]	; (8003f8c <MX_RTC_Init+0x140>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003e7e:	4b43      	ldr	r3, [pc, #268]	; (8003f8c <MX_RTC_Init+0x140>)
 8003e80:	227f      	movs	r2, #127	; 0x7f
 8003e82:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003e84:	4b41      	ldr	r3, [pc, #260]	; (8003f8c <MX_RTC_Init+0x140>)
 8003e86:	22ff      	movs	r2, #255	; 0xff
 8003e88:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003e8a:	4b40      	ldr	r3, [pc, #256]	; (8003f8c <MX_RTC_Init+0x140>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003e90:	4b3e      	ldr	r3, [pc, #248]	; (8003f8c <MX_RTC_Init+0x140>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003e96:	4b3d      	ldr	r3, [pc, #244]	; (8003f8c <MX_RTC_Init+0x140>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003e9c:	483b      	ldr	r0, [pc, #236]	; (8003f8c <MX_RTC_Init+0x140>)
 8003e9e:	f005 fb1b 	bl	80094d8 <HAL_RTC_Init>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8003ea8:	f7ff ffca 	bl	8003e40 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003eac:	2300      	movs	r3, #0
 8003eae:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003ec6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003eca:	2201      	movs	r2, #1
 8003ecc:	4619      	mov	r1, r3
 8003ece:	482f      	ldr	r0, [pc, #188]	; (8003f8c <MX_RTC_Init+0x140>)
 8003ed0:	f005 fba4 	bl	800961c <HAL_RTC_SetTime>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8003eda:	f7ff ffb1 	bl	8003e40 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8003eea:	2301      	movs	r3, #1
 8003eec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003ef6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003efa:	2201      	movs	r2, #1
 8003efc:	4619      	mov	r1, r3
 8003efe:	4823      	ldr	r0, [pc, #140]	; (8003f8c <MX_RTC_Init+0x140>)
 8003f00:	f005 fc26 	bl	8009750 <HAL_RTC_SetDate>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8003f0a:	f7ff ff99 	bl	8003e40 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8003f12:	2300      	movs	r3, #0
 8003f14:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8003f16:	2300      	movs	r3, #0
 8003f18:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003f22:	2300      	movs	r3, #0
 8003f24:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8003f32:	2301      	movs	r3, #1
 8003f34:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8003f38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003f3e:	463b      	mov	r3, r7
 8003f40:	2201      	movs	r2, #1
 8003f42:	4619      	mov	r1, r3
 8003f44:	4811      	ldr	r0, [pc, #68]	; (8003f8c <MX_RTC_Init+0x140>)
 8003f46:	f005 fc87 	bl	8009858 <HAL_RTC_SetAlarm>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8003f50:	f7ff ff76 	bl	8003e40 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8003f54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f58:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003f5a:	463b      	mov	r3, r7
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	4619      	mov	r1, r3
 8003f60:	480a      	ldr	r0, [pc, #40]	; (8003f8c <MX_RTC_Init+0x140>)
 8003f62:	f005 fc79 	bl	8009858 <HAL_RTC_SetAlarm>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8003f6c:	f7ff ff68 	bl	8003e40 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8003f70:	2200      	movs	r2, #0
 8003f72:	2100      	movs	r1, #0
 8003f74:	4805      	ldr	r0, [pc, #20]	; (8003f8c <MX_RTC_Init+0x140>)
 8003f76:	f005 fe58 	bl	8009c2a <HAL_RTCEx_SetWakeUpTimer>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8003f80:	f7ff ff5e 	bl	8003e40 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003f84:	bf00      	nop
 8003f86:	3740      	adds	r7, #64	; 0x40
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	20000374 	.word	0x20000374
 8003f90:	40002800 	.word	0x40002800

08003f94 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b088      	sub	sp, #32
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f9c:	f107 0308 	add.w	r3, r7, #8
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	605a      	str	r2, [r3, #4]
 8003fa6:	609a      	str	r2, [r3, #8]
 8003fa8:	60da      	str	r2, [r3, #12]
 8003faa:	611a      	str	r2, [r3, #16]
 8003fac:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a0c      	ldr	r2, [pc, #48]	; (8003fe4 <HAL_RTC_MspInit+0x50>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d111      	bne.n	8003fdc <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003fb8:	2302      	movs	r3, #2
 8003fba:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003fbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fc0:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fc2:	f107 0308 	add.w	r3, r7, #8
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f005 f996 	bl	80092f8 <HAL_RCCEx_PeriphCLKConfig>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003fd2:	f7ff ff35 	bl	8003e40 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003fd6:	4b04      	ldr	r3, [pc, #16]	; (8003fe8 <HAL_RTC_MspInit+0x54>)
 8003fd8:	2201      	movs	r2, #1
 8003fda:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003fdc:	bf00      	nop
 8003fde:	3720      	adds	r7, #32
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40002800 	.word	0x40002800
 8003fe8:	42470e3c 	.word	0x42470e3c

08003fec <HAL_RTC_MspDeInit>:

void HAL_RTC_MspDeInit(RTC_HandleTypeDef* rtcHandle)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a05      	ldr	r2, [pc, #20]	; (8004010 <HAL_RTC_MspDeInit+0x24>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d102      	bne.n	8004004 <HAL_RTC_MspDeInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 8003ffe:	4b05      	ldr	r3, [pc, #20]	; (8004014 <HAL_RTC_MspDeInit+0x28>)
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr
 8004010:	40002800 	.word	0x40002800
 8004014:	42470e3c 	.word	0x42470e3c

08004018 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800401c:	4b17      	ldr	r3, [pc, #92]	; (800407c <MX_SPI1_Init+0x64>)
 800401e:	4a18      	ldr	r2, [pc, #96]	; (8004080 <MX_SPI1_Init+0x68>)
 8004020:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004022:	4b16      	ldr	r3, [pc, #88]	; (800407c <MX_SPI1_Init+0x64>)
 8004024:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004028:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800402a:	4b14      	ldr	r3, [pc, #80]	; (800407c <MX_SPI1_Init+0x64>)
 800402c:	2200      	movs	r2, #0
 800402e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004030:	4b12      	ldr	r3, [pc, #72]	; (800407c <MX_SPI1_Init+0x64>)
 8004032:	2200      	movs	r2, #0
 8004034:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004036:	4b11      	ldr	r3, [pc, #68]	; (800407c <MX_SPI1_Init+0x64>)
 8004038:	2200      	movs	r2, #0
 800403a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800403c:	4b0f      	ldr	r3, [pc, #60]	; (800407c <MX_SPI1_Init+0x64>)
 800403e:	2200      	movs	r2, #0
 8004040:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004042:	4b0e      	ldr	r3, [pc, #56]	; (800407c <MX_SPI1_Init+0x64>)
 8004044:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004048:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800404a:	4b0c      	ldr	r3, [pc, #48]	; (800407c <MX_SPI1_Init+0x64>)
 800404c:	2200      	movs	r2, #0
 800404e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004050:	4b0a      	ldr	r3, [pc, #40]	; (800407c <MX_SPI1_Init+0x64>)
 8004052:	2200      	movs	r2, #0
 8004054:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004056:	4b09      	ldr	r3, [pc, #36]	; (800407c <MX_SPI1_Init+0x64>)
 8004058:	2200      	movs	r2, #0
 800405a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800405c:	4b07      	ldr	r3, [pc, #28]	; (800407c <MX_SPI1_Init+0x64>)
 800405e:	2200      	movs	r2, #0
 8004060:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004062:	4b06      	ldr	r3, [pc, #24]	; (800407c <MX_SPI1_Init+0x64>)
 8004064:	220a      	movs	r2, #10
 8004066:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004068:	4804      	ldr	r0, [pc, #16]	; (800407c <MX_SPI1_Init+0x64>)
 800406a:	f005 fe8f 	bl	8009d8c <HAL_SPI_Init>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004074:	f7ff fee4 	bl	8003e40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004078:	bf00      	nop
 800407a:	bd80      	pop	{r7, pc}
 800407c:	200003b0 	.word	0x200003b0
 8004080:	40013000 	.word	0x40013000

08004084 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b08a      	sub	sp, #40	; 0x28
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800408c:	f107 0314 	add.w	r3, r7, #20
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	605a      	str	r2, [r3, #4]
 8004096:	609a      	str	r2, [r3, #8]
 8004098:	60da      	str	r2, [r3, #12]
 800409a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a1d      	ldr	r2, [pc, #116]	; (8004118 <HAL_SPI_MspInit+0x94>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d133      	bne.n	800410e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80040a6:	2300      	movs	r3, #0
 80040a8:	613b      	str	r3, [r7, #16]
 80040aa:	4b1c      	ldr	r3, [pc, #112]	; (800411c <HAL_SPI_MspInit+0x98>)
 80040ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ae:	4a1b      	ldr	r2, [pc, #108]	; (800411c <HAL_SPI_MspInit+0x98>)
 80040b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80040b4:	6453      	str	r3, [r2, #68]	; 0x44
 80040b6:	4b19      	ldr	r3, [pc, #100]	; (800411c <HAL_SPI_MspInit+0x98>)
 80040b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040be:	613b      	str	r3, [r7, #16]
 80040c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040c2:	2300      	movs	r3, #0
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	4b15      	ldr	r3, [pc, #84]	; (800411c <HAL_SPI_MspInit+0x98>)
 80040c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ca:	4a14      	ldr	r2, [pc, #80]	; (800411c <HAL_SPI_MspInit+0x98>)
 80040cc:	f043 0301 	orr.w	r3, r3, #1
 80040d0:	6313      	str	r3, [r2, #48]	; 0x30
 80040d2:	4b12      	ldr	r3, [pc, #72]	; (800411c <HAL_SPI_MspInit+0x98>)
 80040d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80040de:	23e0      	movs	r3, #224	; 0xe0
 80040e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e2:	2302      	movs	r3, #2
 80040e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e6:	2300      	movs	r3, #0
 80040e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ea:	2303      	movs	r3, #3
 80040ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80040ee:	2305      	movs	r3, #5
 80040f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040f2:	f107 0314 	add.w	r3, r7, #20
 80040f6:	4619      	mov	r1, r3
 80040f8:	4809      	ldr	r0, [pc, #36]	; (8004120 <HAL_SPI_MspInit+0x9c>)
 80040fa:	f002 f8e7 	bl	80062cc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80040fe:	2200      	movs	r2, #0
 8004100:	2105      	movs	r1, #5
 8004102:	2023      	movs	r0, #35	; 0x23
 8004104:	f001 fae4 	bl	80056d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004108:	2023      	movs	r0, #35	; 0x23
 800410a:	f001 fafd 	bl	8005708 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800410e:	bf00      	nop
 8004110:	3728      	adds	r7, #40	; 0x28
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	40013000 	.word	0x40013000
 800411c:	40023800 	.word	0x40023800
 8004120:	40020000 	.word	0x40020000

08004124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800412a:	2300      	movs	r3, #0
 800412c:	607b      	str	r3, [r7, #4]
 800412e:	4b1a      	ldr	r3, [pc, #104]	; (8004198 <HAL_MspInit+0x74>)
 8004130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004132:	4a19      	ldr	r2, [pc, #100]	; (8004198 <HAL_MspInit+0x74>)
 8004134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004138:	6453      	str	r3, [r2, #68]	; 0x44
 800413a:	4b17      	ldr	r3, [pc, #92]	; (8004198 <HAL_MspInit+0x74>)
 800413c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004142:	607b      	str	r3, [r7, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004146:	2300      	movs	r3, #0
 8004148:	603b      	str	r3, [r7, #0]
 800414a:	4b13      	ldr	r3, [pc, #76]	; (8004198 <HAL_MspInit+0x74>)
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	4a12      	ldr	r2, [pc, #72]	; (8004198 <HAL_MspInit+0x74>)
 8004150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004154:	6413      	str	r3, [r2, #64]	; 0x40
 8004156:	4b10      	ldr	r3, [pc, #64]	; (8004198 <HAL_MspInit+0x74>)
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800415e:	603b      	str	r3, [r7, #0]
 8004160:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004162:	2200      	movs	r2, #0
 8004164:	210f      	movs	r1, #15
 8004166:	f06f 0001 	mvn.w	r0, #1
 800416a:	f001 fab1 	bl	80056d0 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 800416e:	2200      	movs	r2, #0
 8004170:	2105      	movs	r1, #5
 8004172:	2001      	movs	r0, #1
 8004174:	f001 faac 	bl	80056d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8004178:	2001      	movs	r0, #1
 800417a:	f001 fac5 	bl	8005708 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800417e:	2200      	movs	r2, #0
 8004180:	2105      	movs	r1, #5
 8004182:	2005      	movs	r0, #5
 8004184:	f001 faa4 	bl	80056d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004188:	2005      	movs	r0, #5
 800418a:	f001 fabd 	bl	8005708 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800418e:	bf00      	nop
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	40023800 	.word	0x40023800

0800419c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b08c      	sub	sp, #48	; 0x30
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80041ac:	2300      	movs	r3, #0
 80041ae:	60bb      	str	r3, [r7, #8]
 80041b0:	4b2e      	ldr	r3, [pc, #184]	; (800426c <HAL_InitTick+0xd0>)
 80041b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b4:	4a2d      	ldr	r2, [pc, #180]	; (800426c <HAL_InitTick+0xd0>)
 80041b6:	f043 0301 	orr.w	r3, r3, #1
 80041ba:	6453      	str	r3, [r2, #68]	; 0x44
 80041bc:	4b2b      	ldr	r3, [pc, #172]	; (800426c <HAL_InitTick+0xd0>)
 80041be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	60bb      	str	r3, [r7, #8]
 80041c6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80041c8:	f107 020c 	add.w	r2, r7, #12
 80041cc:	f107 0310 	add.w	r3, r7, #16
 80041d0:	4611      	mov	r1, r2
 80041d2:	4618      	mov	r0, r3
 80041d4:	f005 f85e 	bl	8009294 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80041d8:	f005 f848 	bl	800926c <HAL_RCC_GetPCLK2Freq>
 80041dc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80041de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e0:	4a23      	ldr	r2, [pc, #140]	; (8004270 <HAL_InitTick+0xd4>)
 80041e2:	fba2 2303 	umull	r2, r3, r2, r3
 80041e6:	0c9b      	lsrs	r3, r3, #18
 80041e8:	3b01      	subs	r3, #1
 80041ea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80041ec:	4b21      	ldr	r3, [pc, #132]	; (8004274 <HAL_InitTick+0xd8>)
 80041ee:	4a22      	ldr	r2, [pc, #136]	; (8004278 <HAL_InitTick+0xdc>)
 80041f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80041f2:	4b20      	ldr	r3, [pc, #128]	; (8004274 <HAL_InitTick+0xd8>)
 80041f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80041f8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80041fa:	4a1e      	ldr	r2, [pc, #120]	; (8004274 <HAL_InitTick+0xd8>)
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004200:	4b1c      	ldr	r3, [pc, #112]	; (8004274 <HAL_InitTick+0xd8>)
 8004202:	2200      	movs	r2, #0
 8004204:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004206:	4b1b      	ldr	r3, [pc, #108]	; (8004274 <HAL_InitTick+0xd8>)
 8004208:	2200      	movs	r2, #0
 800420a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800420c:	4b19      	ldr	r3, [pc, #100]	; (8004274 <HAL_InitTick+0xd8>)
 800420e:	2200      	movs	r2, #0
 8004210:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8004212:	4818      	ldr	r0, [pc, #96]	; (8004274 <HAL_InitTick+0xd8>)
 8004214:	f005 ffdc 	bl	800a1d0 <HAL_TIM_Base_Init>
 8004218:	4603      	mov	r3, r0
 800421a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800421e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004222:	2b00      	cmp	r3, #0
 8004224:	d11b      	bne.n	800425e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8004226:	4813      	ldr	r0, [pc, #76]	; (8004274 <HAL_InitTick+0xd8>)
 8004228:	f006 f8b0 	bl	800a38c <HAL_TIM_Base_Start_IT>
 800422c:	4603      	mov	r3, r0
 800422e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8004232:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004236:	2b00      	cmp	r3, #0
 8004238:	d111      	bne.n	800425e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800423a:	2019      	movs	r0, #25
 800423c:	f001 fa64 	bl	8005708 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b0f      	cmp	r3, #15
 8004244:	d808      	bhi.n	8004258 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8004246:	2200      	movs	r2, #0
 8004248:	6879      	ldr	r1, [r7, #4]
 800424a:	2019      	movs	r0, #25
 800424c:	f001 fa40 	bl	80056d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004250:	4a0a      	ldr	r2, [pc, #40]	; (800427c <HAL_InitTick+0xe0>)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	e002      	b.n	800425e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800425e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004262:	4618      	mov	r0, r3
 8004264:	3730      	adds	r7, #48	; 0x30
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40023800 	.word	0x40023800
 8004270:	431bde83 	.word	0x431bde83
 8004274:	20000430 	.word	0x20000430
 8004278:	40010000 	.word	0x40010000
 800427c:	20000004 	.word	0x20000004

08004280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004284:	e7fe      	b.n	8004284 <NMI_Handler+0x4>

08004286 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004286:	b480      	push	{r7}
 8004288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800428a:	e7fe      	b.n	800428a <HardFault_Handler+0x4>

0800428c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004290:	e7fe      	b.n	8004290 <MemManage_Handler+0x4>

08004292 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004292:	b480      	push	{r7}
 8004294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004296:	e7fe      	b.n	8004296 <BusFault_Handler+0x4>

08004298 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800429c:	e7fe      	b.n	800429c <UsageFault_Handler+0x4>

0800429e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800429e:	b480      	push	{r7}
 80042a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042a2:	bf00      	nop
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80042b0:	f004 fb3e 	bl	8008930 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 80042b4:	bf00      	nop
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80042bc:	f001 fe5e 	bl	8005f7c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80042c0:	bf00      	nop
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80042c8:	bf00      	nop
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
	...

080042d4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80042d8:	4802      	ldr	r0, [pc, #8]	; (80042e4 <ADC_IRQHandler+0x10>)
 80042da:	f000 fc57 	bl	8004b8c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80042de:	bf00      	nop
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20000104 	.word	0x20000104

080042e8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80042ec:	4803      	ldr	r0, [pc, #12]	; (80042fc <TIM1_UP_TIM10_IRQHandler+0x14>)
 80042ee:	f006 f8af 	bl	800a450 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80042f2:	4803      	ldr	r0, [pc, #12]	; (8004300 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80042f4:	f006 f8ac 	bl	800a450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80042f8:	bf00      	nop
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	20000430 	.word	0x20000430
 8004300:	20000868 	.word	0x20000868

08004304 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004308:	4802      	ldr	r0, [pc, #8]	; (8004314 <TIM2_IRQHandler+0x10>)
 800430a:	f006 f8a1 	bl	800a450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800430e:	bf00      	nop
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	200004e4 	.word	0x200004e4

08004318 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800431c:	4802      	ldr	r0, [pc, #8]	; (8004328 <TIM3_IRQHandler+0x10>)
 800431e:	f006 f897 	bl	800a450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004322:	bf00      	nop
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	20000598 	.word	0x20000598

0800432c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004330:	4802      	ldr	r0, [pc, #8]	; (800433c <TIM4_IRQHandler+0x10>)
 8004332:	f006 f88d 	bl	800a450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004336:	bf00      	nop
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	2000064c 	.word	0x2000064c

08004340 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004344:	4802      	ldr	r0, [pc, #8]	; (8004350 <I2C1_EV_IRQHandler+0x10>)
 8004346:	f002 fbf5 	bl	8006b34 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800434a:	bf00      	nop
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	2000026c 	.word	0x2000026c

08004354 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004358:	4802      	ldr	r0, [pc, #8]	; (8004364 <I2C1_ER_IRQHandler+0x10>)
 800435a:	f002 fd5c 	bl	8006e16 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800435e:	bf00      	nop
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	2000026c 	.word	0x2000026c

08004368 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800436c:	4802      	ldr	r0, [pc, #8]	; (8004378 <SPI1_IRQHandler+0x10>)
 800436e:	f005 fdc9 	bl	8009f04 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004372:	bf00      	nop
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	200003b0 	.word	0x200003b0

0800437c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004380:	4802      	ldr	r0, [pc, #8]	; (800438c <USART1_IRQHandler+0x10>)
 8004382:	f006 fd37 	bl	800adf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004386:	bf00      	nop
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	2000091c 	.word	0x2000091c

08004390 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004394:	4802      	ldr	r0, [pc, #8]	; (80043a0 <DMA2_Stream0_IRQHandler+0x10>)
 8004396:	f001 fb79 	bl	8005a8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800439a:	bf00      	nop
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	20000168 	.word	0x20000168

080043a4 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80043a8:	bf00      	nop
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
	...

080043b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043b8:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <SystemInit+0x20>)
 80043ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043be:	4a05      	ldr	r2, [pc, #20]	; (80043d4 <SystemInit+0x20>)
 80043c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043c8:	bf00      	nop
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	e000ed00 	.word	0xe000ed00

080043d8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043de:	f107 0308 	add.w	r3, r7, #8
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	605a      	str	r2, [r3, #4]
 80043e8:	609a      	str	r2, [r3, #8]
 80043ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043ec:	463b      	mov	r3, r7
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80043f4:	4b1e      	ldr	r3, [pc, #120]	; (8004470 <MX_TIM2_Init+0x98>)
 80043f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80043fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 80043fc:	4b1c      	ldr	r3, [pc, #112]	; (8004470 <MX_TIM2_Init+0x98>)
 80043fe:	f242 720f 	movw	r2, #9999	; 0x270f
 8004402:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004404:	4b1a      	ldr	r3, [pc, #104]	; (8004470 <MX_TIM2_Init+0x98>)
 8004406:	2200      	movs	r2, #0
 8004408:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800440a:	4b19      	ldr	r3, [pc, #100]	; (8004470 <MX_TIM2_Init+0x98>)
 800440c:	f242 720f 	movw	r2, #9999	; 0x270f
 8004410:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004412:	4b17      	ldr	r3, [pc, #92]	; (8004470 <MX_TIM2_Init+0x98>)
 8004414:	2200      	movs	r2, #0
 8004416:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004418:	4b15      	ldr	r3, [pc, #84]	; (8004470 <MX_TIM2_Init+0x98>)
 800441a:	2200      	movs	r2, #0
 800441c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800441e:	4814      	ldr	r0, [pc, #80]	; (8004470 <MX_TIM2_Init+0x98>)
 8004420:	f005 fed6 	bl	800a1d0 <HAL_TIM_Base_Init>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800442a:	f7ff fd09 	bl	8003e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800442e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004432:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004434:	f107 0308 	add.w	r3, r7, #8
 8004438:	4619      	mov	r1, r3
 800443a:	480d      	ldr	r0, [pc, #52]	; (8004470 <MX_TIM2_Init+0x98>)
 800443c:	f006 f930 	bl	800a6a0 <HAL_TIM_ConfigClockSource>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004446:	f7ff fcfb 	bl	8003e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800444a:	2300      	movs	r3, #0
 800444c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800444e:	2300      	movs	r3, #0
 8004450:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004452:	463b      	mov	r3, r7
 8004454:	4619      	mov	r1, r3
 8004456:	4806      	ldr	r0, [pc, #24]	; (8004470 <MX_TIM2_Init+0x98>)
 8004458:	f006 fbb6 	bl	800abc8 <HAL_TIMEx_MasterConfigSynchronization>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004462:	f7ff fced 	bl	8003e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004466:	bf00      	nop
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	200004e4 	.word	0x200004e4

08004474 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800447a:	f107 0308 	add.w	r3, r7, #8
 800447e:	2200      	movs	r2, #0
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	605a      	str	r2, [r3, #4]
 8004484:	609a      	str	r2, [r3, #8]
 8004486:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004488:	463b      	mov	r3, r7
 800448a:	2200      	movs	r2, #0
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004490:	4b1d      	ldr	r3, [pc, #116]	; (8004508 <MX_TIM3_Init+0x94>)
 8004492:	4a1e      	ldr	r2, [pc, #120]	; (800450c <MX_TIM3_Init+0x98>)
 8004494:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8004496:	4b1c      	ldr	r3, [pc, #112]	; (8004508 <MX_TIM3_Init+0x94>)
 8004498:	f242 720f 	movw	r2, #9999	; 0x270f
 800449c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800449e:	4b1a      	ldr	r3, [pc, #104]	; (8004508 <MX_TIM3_Init+0x94>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 80044a4:	4b18      	ldr	r3, [pc, #96]	; (8004508 <MX_TIM3_Init+0x94>)
 80044a6:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80044aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044ac:	4b16      	ldr	r3, [pc, #88]	; (8004508 <MX_TIM3_Init+0x94>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044b2:	4b15      	ldr	r3, [pc, #84]	; (8004508 <MX_TIM3_Init+0x94>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80044b8:	4813      	ldr	r0, [pc, #76]	; (8004508 <MX_TIM3_Init+0x94>)
 80044ba:	f005 fe89 	bl	800a1d0 <HAL_TIM_Base_Init>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80044c4:	f7ff fcbc 	bl	8003e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80044ce:	f107 0308 	add.w	r3, r7, #8
 80044d2:	4619      	mov	r1, r3
 80044d4:	480c      	ldr	r0, [pc, #48]	; (8004508 <MX_TIM3_Init+0x94>)
 80044d6:	f006 f8e3 	bl	800a6a0 <HAL_TIM_ConfigClockSource>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d001      	beq.n	80044e4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80044e0:	f7ff fcae 	bl	8003e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044e4:	2300      	movs	r3, #0
 80044e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044e8:	2300      	movs	r3, #0
 80044ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80044ec:	463b      	mov	r3, r7
 80044ee:	4619      	mov	r1, r3
 80044f0:	4805      	ldr	r0, [pc, #20]	; (8004508 <MX_TIM3_Init+0x94>)
 80044f2:	f006 fb69 	bl	800abc8 <HAL_TIMEx_MasterConfigSynchronization>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80044fc:	f7ff fca0 	bl	8003e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004500:	bf00      	nop
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	20000598 	.word	0x20000598
 800450c:	40000400 	.word	0x40000400

08004510 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004516:	f107 0308 	add.w	r3, r7, #8
 800451a:	2200      	movs	r2, #0
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	605a      	str	r2, [r3, #4]
 8004520:	609a      	str	r2, [r3, #8]
 8004522:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004524:	463b      	mov	r3, r7
 8004526:	2200      	movs	r2, #0
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800452c:	4b1d      	ldr	r3, [pc, #116]	; (80045a4 <MX_TIM4_Init+0x94>)
 800452e:	4a1e      	ldr	r2, [pc, #120]	; (80045a8 <MX_TIM4_Init+0x98>)
 8004530:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 8004532:	4b1c      	ldr	r3, [pc, #112]	; (80045a4 <MX_TIM4_Init+0x94>)
 8004534:	f242 720f 	movw	r2, #9999	; 0x270f
 8004538:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800453a:	4b1a      	ldr	r3, [pc, #104]	; (80045a4 <MX_TIM4_Init+0x94>)
 800453c:	2200      	movs	r2, #0
 800453e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8004540:	4b18      	ldr	r3, [pc, #96]	; (80045a4 <MX_TIM4_Init+0x94>)
 8004542:	f242 720f 	movw	r2, #9999	; 0x270f
 8004546:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004548:	4b16      	ldr	r3, [pc, #88]	; (80045a4 <MX_TIM4_Init+0x94>)
 800454a:	2200      	movs	r2, #0
 800454c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800454e:	4b15      	ldr	r3, [pc, #84]	; (80045a4 <MX_TIM4_Init+0x94>)
 8004550:	2200      	movs	r2, #0
 8004552:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004554:	4813      	ldr	r0, [pc, #76]	; (80045a4 <MX_TIM4_Init+0x94>)
 8004556:	f005 fe3b 	bl	800a1d0 <HAL_TIM_Base_Init>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8004560:	f7ff fc6e 	bl	8003e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004568:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800456a:	f107 0308 	add.w	r3, r7, #8
 800456e:	4619      	mov	r1, r3
 8004570:	480c      	ldr	r0, [pc, #48]	; (80045a4 <MX_TIM4_Init+0x94>)
 8004572:	f006 f895 	bl	800a6a0 <HAL_TIM_ConfigClockSource>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800457c:	f7ff fc60 	bl	8003e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004580:	2300      	movs	r3, #0
 8004582:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004584:	2300      	movs	r3, #0
 8004586:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004588:	463b      	mov	r3, r7
 800458a:	4619      	mov	r1, r3
 800458c:	4805      	ldr	r0, [pc, #20]	; (80045a4 <MX_TIM4_Init+0x94>)
 800458e:	f006 fb1b 	bl	800abc8 <HAL_TIMEx_MasterConfigSynchronization>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8004598:	f7ff fc52 	bl	8003e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800459c:	bf00      	nop
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	2000064c 	.word	0x2000064c
 80045a8:	40000800 	.word	0x40000800

080045ac <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045b2:	f107 0308 	add.w	r3, r7, #8
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	605a      	str	r2, [r3, #4]
 80045bc:	609a      	str	r2, [r3, #8]
 80045be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045c0:	463b      	mov	r3, r7
 80045c2:	2200      	movs	r2, #0
 80045c4:	601a      	str	r2, [r3, #0]
 80045c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80045c8:	4b1d      	ldr	r3, [pc, #116]	; (8004640 <MX_TIM5_Init+0x94>)
 80045ca:	4a1e      	ldr	r2, [pc, #120]	; (8004644 <MX_TIM5_Init+0x98>)
 80045cc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80045ce:	4b1c      	ldr	r3, [pc, #112]	; (8004640 <MX_TIM5_Init+0x94>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045d4:	4b1a      	ldr	r3, [pc, #104]	; (8004640 <MX_TIM5_Init+0x94>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80045da:	4b19      	ldr	r3, [pc, #100]	; (8004640 <MX_TIM5_Init+0x94>)
 80045dc:	f04f 32ff 	mov.w	r2, #4294967295
 80045e0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045e2:	4b17      	ldr	r3, [pc, #92]	; (8004640 <MX_TIM5_Init+0x94>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045e8:	4b15      	ldr	r3, [pc, #84]	; (8004640 <MX_TIM5_Init+0x94>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80045ee:	4814      	ldr	r0, [pc, #80]	; (8004640 <MX_TIM5_Init+0x94>)
 80045f0:	f005 fdee 	bl	800a1d0 <HAL_TIM_Base_Init>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80045fa:	f7ff fc21 	bl	8003e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004602:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004604:	f107 0308 	add.w	r3, r7, #8
 8004608:	4619      	mov	r1, r3
 800460a:	480d      	ldr	r0, [pc, #52]	; (8004640 <MX_TIM5_Init+0x94>)
 800460c:	f006 f848 	bl	800a6a0 <HAL_TIM_ConfigClockSource>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8004616:	f7ff fc13 	bl	8003e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800461a:	2300      	movs	r3, #0
 800461c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800461e:	2300      	movs	r3, #0
 8004620:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004622:	463b      	mov	r3, r7
 8004624:	4619      	mov	r1, r3
 8004626:	4806      	ldr	r0, [pc, #24]	; (8004640 <MX_TIM5_Init+0x94>)
 8004628:	f006 face 	bl	800abc8 <HAL_TIMEx_MasterConfigSynchronization>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8004632:	f7ff fc05 	bl	8003e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004636:	bf00      	nop
 8004638:	3718      	adds	r7, #24
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	20000700 	.word	0x20000700
 8004644:	40000c00 	.word	0x40000c00

08004648 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800464e:	463b      	mov	r3, r7
 8004650:	2200      	movs	r2, #0
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	605a      	str	r2, [r3, #4]
 8004656:	609a      	str	r2, [r3, #8]
 8004658:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800465a:	4b16      	ldr	r3, [pc, #88]	; (80046b4 <MX_TIM9_Init+0x6c>)
 800465c:	4a16      	ldr	r2, [pc, #88]	; (80046b8 <MX_TIM9_Init+0x70>)
 800465e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 10000-1;
 8004660:	4b14      	ldr	r3, [pc, #80]	; (80046b4 <MX_TIM9_Init+0x6c>)
 8004662:	f242 720f 	movw	r2, #9999	; 0x270f
 8004666:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004668:	4b12      	ldr	r3, [pc, #72]	; (80046b4 <MX_TIM9_Init+0x6c>)
 800466a:	2200      	movs	r2, #0
 800466c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 10000-1;
 800466e:	4b11      	ldr	r3, [pc, #68]	; (80046b4 <MX_TIM9_Init+0x6c>)
 8004670:	f242 720f 	movw	r2, #9999	; 0x270f
 8004674:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004676:	4b0f      	ldr	r3, [pc, #60]	; (80046b4 <MX_TIM9_Init+0x6c>)
 8004678:	2200      	movs	r2, #0
 800467a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800467c:	4b0d      	ldr	r3, [pc, #52]	; (80046b4 <MX_TIM9_Init+0x6c>)
 800467e:	2200      	movs	r2, #0
 8004680:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8004682:	480c      	ldr	r0, [pc, #48]	; (80046b4 <MX_TIM9_Init+0x6c>)
 8004684:	f005 fda4 	bl	800a1d0 <HAL_TIM_Base_Init>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 800468e:	f7ff fbd7 	bl	8003e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004696:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8004698:	463b      	mov	r3, r7
 800469a:	4619      	mov	r1, r3
 800469c:	4805      	ldr	r0, [pc, #20]	; (80046b4 <MX_TIM9_Init+0x6c>)
 800469e:	f005 ffff 	bl	800a6a0 <HAL_TIM_ConfigClockSource>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 80046a8:	f7ff fbca 	bl	8003e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80046ac:	bf00      	nop
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	200007b4 	.word	0x200007b4
 80046b8:	40014000 	.word	0x40014000

080046bc <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80046c0:	4b0e      	ldr	r3, [pc, #56]	; (80046fc <MX_TIM10_Init+0x40>)
 80046c2:	4a0f      	ldr	r2, [pc, #60]	; (8004700 <MX_TIM10_Init+0x44>)
 80046c4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 10000-1;
 80046c6:	4b0d      	ldr	r3, [pc, #52]	; (80046fc <MX_TIM10_Init+0x40>)
 80046c8:	f242 720f 	movw	r2, #9999	; 0x270f
 80046cc:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046ce:	4b0b      	ldr	r3, [pc, #44]	; (80046fc <MX_TIM10_Init+0x40>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 80046d4:	4b09      	ldr	r3, [pc, #36]	; (80046fc <MX_TIM10_Init+0x40>)
 80046d6:	f242 720f 	movw	r2, #9999	; 0x270f
 80046da:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046dc:	4b07      	ldr	r3, [pc, #28]	; (80046fc <MX_TIM10_Init+0x40>)
 80046de:	2200      	movs	r2, #0
 80046e0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046e2:	4b06      	ldr	r3, [pc, #24]	; (80046fc <MX_TIM10_Init+0x40>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80046e8:	4804      	ldr	r0, [pc, #16]	; (80046fc <MX_TIM10_Init+0x40>)
 80046ea:	f005 fd71 	bl	800a1d0 <HAL_TIM_Base_Init>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80046f4:	f7ff fba4 	bl	8003e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80046f8:	bf00      	nop
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	20000868 	.word	0x20000868
 8004700:	40014400 	.word	0x40014400

08004704 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b088      	sub	sp, #32
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004714:	d10e      	bne.n	8004734 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004716:	2300      	movs	r3, #0
 8004718:	61fb      	str	r3, [r7, #28]
 800471a:	4b42      	ldr	r3, [pc, #264]	; (8004824 <HAL_TIM_Base_MspInit+0x120>)
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	4a41      	ldr	r2, [pc, #260]	; (8004824 <HAL_TIM_Base_MspInit+0x120>)
 8004720:	f043 0301 	orr.w	r3, r3, #1
 8004724:	6413      	str	r3, [r2, #64]	; 0x40
 8004726:	4b3f      	ldr	r3, [pc, #252]	; (8004824 <HAL_TIM_Base_MspInit+0x120>)
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	61fb      	str	r3, [r7, #28]
 8004730:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8004732:	e072      	b.n	800481a <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM3)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a3b      	ldr	r2, [pc, #236]	; (8004828 <HAL_TIM_Base_MspInit+0x124>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d10e      	bne.n	800475c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800473e:	2300      	movs	r3, #0
 8004740:	61bb      	str	r3, [r7, #24]
 8004742:	4b38      	ldr	r3, [pc, #224]	; (8004824 <HAL_TIM_Base_MspInit+0x120>)
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	4a37      	ldr	r2, [pc, #220]	; (8004824 <HAL_TIM_Base_MspInit+0x120>)
 8004748:	f043 0302 	orr.w	r3, r3, #2
 800474c:	6413      	str	r3, [r2, #64]	; 0x40
 800474e:	4b35      	ldr	r3, [pc, #212]	; (8004824 <HAL_TIM_Base_MspInit+0x120>)
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	61bb      	str	r3, [r7, #24]
 8004758:	69bb      	ldr	r3, [r7, #24]
}
 800475a:	e05e      	b.n	800481a <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM4)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a32      	ldr	r2, [pc, #200]	; (800482c <HAL_TIM_Base_MspInit+0x128>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d116      	bne.n	8004794 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004766:	2300      	movs	r3, #0
 8004768:	617b      	str	r3, [r7, #20]
 800476a:	4b2e      	ldr	r3, [pc, #184]	; (8004824 <HAL_TIM_Base_MspInit+0x120>)
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	4a2d      	ldr	r2, [pc, #180]	; (8004824 <HAL_TIM_Base_MspInit+0x120>)
 8004770:	f043 0304 	orr.w	r3, r3, #4
 8004774:	6413      	str	r3, [r2, #64]	; 0x40
 8004776:	4b2b      	ldr	r3, [pc, #172]	; (8004824 <HAL_TIM_Base_MspInit+0x120>)
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	f003 0304 	and.w	r3, r3, #4
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8004782:	2200      	movs	r2, #0
 8004784:	2105      	movs	r1, #5
 8004786:	201e      	movs	r0, #30
 8004788:	f000 ffa2 	bl	80056d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800478c:	201e      	movs	r0, #30
 800478e:	f000 ffbb 	bl	8005708 <HAL_NVIC_EnableIRQ>
}
 8004792:	e042      	b.n	800481a <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM5)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a25      	ldr	r2, [pc, #148]	; (8004830 <HAL_TIM_Base_MspInit+0x12c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d10e      	bne.n	80047bc <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800479e:	2300      	movs	r3, #0
 80047a0:	613b      	str	r3, [r7, #16]
 80047a2:	4b20      	ldr	r3, [pc, #128]	; (8004824 <HAL_TIM_Base_MspInit+0x120>)
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	4a1f      	ldr	r2, [pc, #124]	; (8004824 <HAL_TIM_Base_MspInit+0x120>)
 80047a8:	f043 0308 	orr.w	r3, r3, #8
 80047ac:	6413      	str	r3, [r2, #64]	; 0x40
 80047ae:	4b1d      	ldr	r3, [pc, #116]	; (8004824 <HAL_TIM_Base_MspInit+0x120>)
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	613b      	str	r3, [r7, #16]
 80047b8:	693b      	ldr	r3, [r7, #16]
}
 80047ba:	e02e      	b.n	800481a <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM9)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a1c      	ldr	r2, [pc, #112]	; (8004834 <HAL_TIM_Base_MspInit+0x130>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d10e      	bne.n	80047e4 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80047c6:	2300      	movs	r3, #0
 80047c8:	60fb      	str	r3, [r7, #12]
 80047ca:	4b16      	ldr	r3, [pc, #88]	; (8004824 <HAL_TIM_Base_MspInit+0x120>)
 80047cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ce:	4a15      	ldr	r2, [pc, #84]	; (8004824 <HAL_TIM_Base_MspInit+0x120>)
 80047d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047d4:	6453      	str	r3, [r2, #68]	; 0x44
 80047d6:	4b13      	ldr	r3, [pc, #76]	; (8004824 <HAL_TIM_Base_MspInit+0x120>)
 80047d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	68fb      	ldr	r3, [r7, #12]
}
 80047e2:	e01a      	b.n	800481a <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM10)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a13      	ldr	r2, [pc, #76]	; (8004838 <HAL_TIM_Base_MspInit+0x134>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d115      	bne.n	800481a <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80047ee:	2300      	movs	r3, #0
 80047f0:	60bb      	str	r3, [r7, #8]
 80047f2:	4b0c      	ldr	r3, [pc, #48]	; (8004824 <HAL_TIM_Base_MspInit+0x120>)
 80047f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f6:	4a0b      	ldr	r2, [pc, #44]	; (8004824 <HAL_TIM_Base_MspInit+0x120>)
 80047f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047fc:	6453      	str	r3, [r2, #68]	; 0x44
 80047fe:	4b09      	ldr	r3, [pc, #36]	; (8004824 <HAL_TIM_Base_MspInit+0x120>)
 8004800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004806:	60bb      	str	r3, [r7, #8]
 8004808:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 800480a:	2200      	movs	r2, #0
 800480c:	210f      	movs	r1, #15
 800480e:	2019      	movs	r0, #25
 8004810:	f000 ff5e 	bl	80056d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004814:	2019      	movs	r0, #25
 8004816:	f000 ff77 	bl	8005708 <HAL_NVIC_EnableIRQ>
}
 800481a:	bf00      	nop
 800481c:	3720      	adds	r7, #32
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	40023800 	.word	0x40023800
 8004828:	40000400 	.word	0x40000400
 800482c:	40000800 	.word	0x40000800
 8004830:	40000c00 	.word	0x40000c00
 8004834:	40014000 	.word	0x40014000
 8004838:	40014400 	.word	0x40014400

0800483c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004840:	4b11      	ldr	r3, [pc, #68]	; (8004888 <MX_USART1_UART_Init+0x4c>)
 8004842:	4a12      	ldr	r2, [pc, #72]	; (800488c <MX_USART1_UART_Init+0x50>)
 8004844:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8004846:	4b10      	ldr	r3, [pc, #64]	; (8004888 <MX_USART1_UART_Init+0x4c>)
 8004848:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800484c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800484e:	4b0e      	ldr	r3, [pc, #56]	; (8004888 <MX_USART1_UART_Init+0x4c>)
 8004850:	2200      	movs	r2, #0
 8004852:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004854:	4b0c      	ldr	r3, [pc, #48]	; (8004888 <MX_USART1_UART_Init+0x4c>)
 8004856:	2200      	movs	r2, #0
 8004858:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800485a:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <MX_USART1_UART_Init+0x4c>)
 800485c:	2200      	movs	r2, #0
 800485e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004860:	4b09      	ldr	r3, [pc, #36]	; (8004888 <MX_USART1_UART_Init+0x4c>)
 8004862:	220c      	movs	r2, #12
 8004864:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004866:	4b08      	ldr	r3, [pc, #32]	; (8004888 <MX_USART1_UART_Init+0x4c>)
 8004868:	2200      	movs	r2, #0
 800486a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800486c:	4b06      	ldr	r3, [pc, #24]	; (8004888 <MX_USART1_UART_Init+0x4c>)
 800486e:	2200      	movs	r2, #0
 8004870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004872:	4805      	ldr	r0, [pc, #20]	; (8004888 <MX_USART1_UART_Init+0x4c>)
 8004874:	f006 fa34 	bl	800ace0 <HAL_UART_Init>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800487e:	f7ff fadf 	bl	8003e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004882:	bf00      	nop
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	2000091c 	.word	0x2000091c
 800488c:	40011000 	.word	0x40011000

08004890 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b08a      	sub	sp, #40	; 0x28
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004898:	f107 0314 	add.w	r3, r7, #20
 800489c:	2200      	movs	r2, #0
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	605a      	str	r2, [r3, #4]
 80048a2:	609a      	str	r2, [r3, #8]
 80048a4:	60da      	str	r2, [r3, #12]
 80048a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a2c      	ldr	r2, [pc, #176]	; (8004960 <HAL_UART_MspInit+0xd0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d152      	bne.n	8004958 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80048b2:	2300      	movs	r3, #0
 80048b4:	613b      	str	r3, [r7, #16]
 80048b6:	4b2b      	ldr	r3, [pc, #172]	; (8004964 <HAL_UART_MspInit+0xd4>)
 80048b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ba:	4a2a      	ldr	r2, [pc, #168]	; (8004964 <HAL_UART_MspInit+0xd4>)
 80048bc:	f043 0310 	orr.w	r3, r3, #16
 80048c0:	6453      	str	r3, [r2, #68]	; 0x44
 80048c2:	4b28      	ldr	r3, [pc, #160]	; (8004964 <HAL_UART_MspInit+0xd4>)
 80048c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c6:	f003 0310 	and.w	r3, r3, #16
 80048ca:	613b      	str	r3, [r7, #16]
 80048cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048ce:	2300      	movs	r3, #0
 80048d0:	60fb      	str	r3, [r7, #12]
 80048d2:	4b24      	ldr	r3, [pc, #144]	; (8004964 <HAL_UART_MspInit+0xd4>)
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	4a23      	ldr	r2, [pc, #140]	; (8004964 <HAL_UART_MspInit+0xd4>)
 80048d8:	f043 0301 	orr.w	r3, r3, #1
 80048dc:	6313      	str	r3, [r2, #48]	; 0x30
 80048de:	4b21      	ldr	r3, [pc, #132]	; (8004964 <HAL_UART_MspInit+0xd4>)
 80048e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048ea:	2300      	movs	r3, #0
 80048ec:	60bb      	str	r3, [r7, #8]
 80048ee:	4b1d      	ldr	r3, [pc, #116]	; (8004964 <HAL_UART_MspInit+0xd4>)
 80048f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f2:	4a1c      	ldr	r2, [pc, #112]	; (8004964 <HAL_UART_MspInit+0xd4>)
 80048f4:	f043 0302 	orr.w	r3, r3, #2
 80048f8:	6313      	str	r3, [r2, #48]	; 0x30
 80048fa:	4b1a      	ldr	r3, [pc, #104]	; (8004964 <HAL_UART_MspInit+0xd4>)
 80048fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	60bb      	str	r3, [r7, #8]
 8004904:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800490a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800490c:	2302      	movs	r3, #2
 800490e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004910:	2300      	movs	r3, #0
 8004912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004914:	2303      	movs	r3, #3
 8004916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004918:	2307      	movs	r3, #7
 800491a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800491c:	f107 0314 	add.w	r3, r7, #20
 8004920:	4619      	mov	r1, r3
 8004922:	4811      	ldr	r0, [pc, #68]	; (8004968 <HAL_UART_MspInit+0xd8>)
 8004924:	f001 fcd2 	bl	80062cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004928:	2380      	movs	r3, #128	; 0x80
 800492a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800492c:	2302      	movs	r3, #2
 800492e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004930:	2300      	movs	r3, #0
 8004932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004934:	2303      	movs	r3, #3
 8004936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004938:	2307      	movs	r3, #7
 800493a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800493c:	f107 0314 	add.w	r3, r7, #20
 8004940:	4619      	mov	r1, r3
 8004942:	480a      	ldr	r0, [pc, #40]	; (800496c <HAL_UART_MspInit+0xdc>)
 8004944:	f001 fcc2 	bl	80062cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004948:	2200      	movs	r2, #0
 800494a:	2105      	movs	r1, #5
 800494c:	2025      	movs	r0, #37	; 0x25
 800494e:	f000 febf 	bl	80056d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004952:	2025      	movs	r0, #37	; 0x25
 8004954:	f000 fed8 	bl	8005708 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004958:	bf00      	nop
 800495a:	3728      	adds	r7, #40	; 0x28
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	40011000 	.word	0x40011000
 8004964:	40023800 	.word	0x40023800
 8004968:	40020000 	.word	0x40020000
 800496c:	40020400 	.word	0x40020400

08004970 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a05      	ldr	r2, [pc, #20]	; (8004994 <HAL_UART_RxCpltCallback+0x24>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d104      	bne.n	800498c <HAL_UART_RxCpltCallback+0x1c>
  {

	//BtcReceivedDataIRQ = STD_HIGH;
    HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1);
 8004982:	2201      	movs	r2, #1
 8004984:	4904      	ldr	r1, [pc, #16]	; (8004998 <HAL_UART_RxCpltCallback+0x28>)
 8004986:	4805      	ldr	r0, [pc, #20]	; (800499c <HAL_UART_RxCpltCallback+0x2c>)
 8004988:	f006 fa04 	bl	800ad94 <HAL_UART_Receive_IT>

	  /* do nothing */

  }

}
 800498c:	bf00      	nop
 800498e:	3708      	adds	r7, #8
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	40011000 	.word	0x40011000
 8004998:	20000090 	.word	0x20000090
 800499c:	2000091c 	.word	0x2000091c

080049a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80049a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80049d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80049a4:	480d      	ldr	r0, [pc, #52]	; (80049dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80049a6:	490e      	ldr	r1, [pc, #56]	; (80049e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80049a8:	4a0e      	ldr	r2, [pc, #56]	; (80049e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80049aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049ac:	e002      	b.n	80049b4 <LoopCopyDataInit>

080049ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049b2:	3304      	adds	r3, #4

080049b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049b8:	d3f9      	bcc.n	80049ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049ba:	4a0b      	ldr	r2, [pc, #44]	; (80049e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80049bc:	4c0b      	ldr	r4, [pc, #44]	; (80049ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80049be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049c0:	e001      	b.n	80049c6 <LoopFillZerobss>

080049c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049c4:	3204      	adds	r2, #4

080049c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049c8:	d3fb      	bcc.n	80049c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80049ca:	f7ff fcf3 	bl	80043b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80049ce:	f00a fc73 	bl	800f2b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80049d2:	f7ff f967 	bl	8003ca4 <main>
  bx  lr    
 80049d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80049d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80049dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80049e0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80049e4:	0800fb60 	.word	0x0800fb60
  ldr r2, =_sbss
 80049e8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80049ec:	2000b624 	.word	0x2000b624

080049f0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80049f0:	e7fe      	b.n	80049f0 <DMA1_Stream0_IRQHandler>
	...

080049f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80049f8:	4b0e      	ldr	r3, [pc, #56]	; (8004a34 <HAL_Init+0x40>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a0d      	ldr	r2, [pc, #52]	; (8004a34 <HAL_Init+0x40>)
 80049fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a04:	4b0b      	ldr	r3, [pc, #44]	; (8004a34 <HAL_Init+0x40>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a0a      	ldr	r2, [pc, #40]	; (8004a34 <HAL_Init+0x40>)
 8004a0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a10:	4b08      	ldr	r3, [pc, #32]	; (8004a34 <HAL_Init+0x40>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a07      	ldr	r2, [pc, #28]	; (8004a34 <HAL_Init+0x40>)
 8004a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a1c:	2003      	movs	r0, #3
 8004a1e:	f000 fe4c 	bl	80056ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a22:	200f      	movs	r0, #15
 8004a24:	f7ff fbba 	bl	800419c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a28:	f7ff fb7c 	bl	8004124 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	40023c00 	.word	0x40023c00

08004a38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a3c:	4b06      	ldr	r3, [pc, #24]	; (8004a58 <HAL_IncTick+0x20>)
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	461a      	mov	r2, r3
 8004a42:	4b06      	ldr	r3, [pc, #24]	; (8004a5c <HAL_IncTick+0x24>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4413      	add	r3, r2
 8004a48:	4a04      	ldr	r2, [pc, #16]	; (8004a5c <HAL_IncTick+0x24>)
 8004a4a:	6013      	str	r3, [r2, #0]
}
 8004a4c:	bf00      	nop
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	20000008 	.word	0x20000008
 8004a5c:	20000990 	.word	0x20000990

08004a60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	af00      	add	r7, sp, #0
  return uwTick;
 8004a64:	4b03      	ldr	r3, [pc, #12]	; (8004a74 <HAL_GetTick+0x14>)
 8004a66:	681b      	ldr	r3, [r3, #0]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	20000990 	.word	0x20000990

08004a78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a80:	f7ff ffee 	bl	8004a60 <HAL_GetTick>
 8004a84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a90:	d005      	beq.n	8004a9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a92:	4b0a      	ldr	r3, [pc, #40]	; (8004abc <HAL_Delay+0x44>)
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	461a      	mov	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a9e:	bf00      	nop
 8004aa0:	f7ff ffde 	bl	8004a60 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d8f7      	bhi.n	8004aa0 <HAL_Delay+0x28>
  {
  }
}
 8004ab0:	bf00      	nop
 8004ab2:	bf00      	nop
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	20000008 	.word	0x20000008

08004ac0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e04a      	b.n	8004b6c <HAL_ADC_Init+0xac>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d120      	bne.n	8004b20 <HAL_ADC_Init+0x60>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a24      	ldr	r2, [pc, #144]	; (8004b74 <HAL_ADC_Init+0xb4>)
 8004ae2:	649a      	str	r2, [r3, #72]	; 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a24      	ldr	r2, [pc, #144]	; (8004b78 <HAL_ADC_Init+0xb8>)
 8004ae8:	64da      	str	r2, [r3, #76]	; 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a23      	ldr	r2, [pc, #140]	; (8004b7c <HAL_ADC_Init+0xbc>)
 8004aee:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a23      	ldr	r2, [pc, #140]	; (8004b80 <HAL_ADC_Init+0xc0>)
 8004af4:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a22      	ldr	r2, [pc, #136]	; (8004b84 <HAL_ADC_Init+0xc4>)
 8004afa:	659a      	str	r2, [r3, #88]	; 0x58
    if (hadc->MspInitCallback == NULL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d102      	bne.n	8004b0a <HAL_ADC_Init+0x4a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a20      	ldr	r2, [pc, #128]	; (8004b88 <HAL_ADC_Init+0xc8>)
 8004b08:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b24:	f003 0310 	and.w	r3, r3, #16
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d118      	bne.n	8004b5e <HAL_ADC_Init+0x9e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b30:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004b34:	f023 0302 	bic.w	r3, r3, #2
 8004b38:	f043 0202 	orr.w	r2, r3, #2
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 fb81 	bl	8005248 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b50:	f023 0303 	bic.w	r3, r3, #3
 8004b54:	f043 0201 	orr.w	r2, r3, #1
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	641a      	str	r2, [r3, #64]	; 0x40
 8004b5c:	e001      	b.n	8004b62 <HAL_ADC_Init+0xa2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	08004f95 	.word	0x08004f95
 8004b78:	08004fa9 	.word	0x08004fa9
 8004b7c:	08004fbd 	.word	0x08004fbd
 8004b80:	08004fd1 	.word	0x08004fd1
 8004b84:	0800554d 	.word	0x0800554d
 8004b88:	0800321d 	.word	0x0800321d

08004b8c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	2300      	movs	r3, #0
 8004b9a:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	f003 0320 	and.w	r3, r3, #32
 8004bba:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d04a      	beq.n	8004c58 <HAL_ADC_IRQHandler+0xcc>
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d047      	beq.n	8004c58 <HAL_ADC_IRQHandler+0xcc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bcc:	f003 0310 	and.w	r3, r3, #16
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d105      	bne.n	8004be0 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d12b      	bne.n	8004c46 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d127      	bne.n	8004c46 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d006      	beq.n	8004c12 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d119      	bne.n	8004c46 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 0220 	bic.w	r2, r2, #32
 8004c20:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d105      	bne.n	8004c46 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	f043 0201 	orr.w	r2, r3, #1
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	4798      	blx	r3
#else
    HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f06f 0212 	mvn.w	r2, #18
 8004c56:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f003 0304 	and.w	r3, r3, #4
 8004c5e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c66:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d058      	beq.n	8004d20 <HAL_ADC_IRQHandler+0x194>
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d055      	beq.n	8004d20 <HAL_ADC_IRQHandler+0x194>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c78:	f003 0310 	and.w	r3, r3, #16
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d105      	bne.n	8004c8c <HAL_ADC_IRQHandler+0x100>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c84:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d139      	bne.n	8004d0e <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d006      	beq.n	8004cb6 <HAL_ADC_IRQHandler+0x12a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d12b      	bne.n	8004d0e <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d124      	bne.n	8004d0e <HAL_ADC_IRQHandler+0x182>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d11d      	bne.n	8004d0e <HAL_ADC_IRQHandler+0x182>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d119      	bne.n	8004d0e <HAL_ADC_IRQHandler+0x182>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ce8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d105      	bne.n	8004d0e <HAL_ADC_IRQHandler+0x182>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	f043 0201 	orr.w	r2, r3, #1
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f06f 020c 	mvn.w	r2, #12
 8004d1e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d018      	beq.n	8004d68 <HAL_ADC_IRQHandler+0x1dc>
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d015      	beq.n	8004d68 <HAL_ADC_IRQHandler+0x1dc>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d10e      	bne.n	8004d68 <HAL_ADC_IRQHandler+0x1dc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f06f 0201 	mvn.w	r2, #1
 8004d66:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f003 0320 	and.w	r3, r3, #32
 8004d6e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d76:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d016      	beq.n	8004dac <HAL_ADC_IRQHandler+0x220>
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d013      	beq.n	8004dac <HAL_ADC_IRQHandler+0x220>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d88:	f043 0202 	orr.w	r2, r3, #2
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f06f 0220 	mvn.w	r2, #32
 8004d98:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	4798      	blx	r3
#else
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f06f 0220 	mvn.w	r2, #32
 8004daa:	601a      	str	r2, [r3, #0]
  }
}
 8004dac:	bf00      	nop
 8004dae:	3718      	adds	r7, #24
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d101      	bne.n	8004dd2 <HAL_ADC_Start_DMA+0x1e>
 8004dce:	2302      	movs	r3, #2
 8004dd0:	e0ce      	b.n	8004f70 <HAL_ADC_Start_DMA+0x1bc>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d018      	beq.n	8004e1a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689a      	ldr	r2, [r3, #8]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0201 	orr.w	r2, r2, #1
 8004df6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004df8:	4b5f      	ldr	r3, [pc, #380]	; (8004f78 <HAL_ADC_Start_DMA+0x1c4>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a5f      	ldr	r2, [pc, #380]	; (8004f7c <HAL_ADC_Start_DMA+0x1c8>)
 8004dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004e02:	0c9a      	lsrs	r2, r3, #18
 8004e04:	4613      	mov	r3, r2
 8004e06:	005b      	lsls	r3, r3, #1
 8004e08:	4413      	add	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004e0c:	e002      	b.n	8004e14 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	3b01      	subs	r3, #1
 8004e12:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1f9      	bne.n	8004e0e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e28:	d107      	bne.n	8004e3a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689a      	ldr	r2, [r3, #8]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e38:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	f040 8086 	bne.w	8004f56 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004e52:	f023 0301 	bic.w	r3, r3, #1
 8004e56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d007      	beq.n	8004e7c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004e74:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e88:	d106      	bne.n	8004e98 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8e:	f023 0206 	bic.w	r2, r3, #6
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	645a      	str	r2, [r3, #68]	; 0x44
 8004e96:	e002      	b.n	8004e9e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ea6:	4b36      	ldr	r3, [pc, #216]	; (8004f80 <HAL_ADC_Start_DMA+0x1cc>)
 8004ea8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eae:	4a35      	ldr	r2, [pc, #212]	; (8004f84 <HAL_ADC_Start_DMA+0x1d0>)
 8004eb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb6:	4a34      	ldr	r2, [pc, #208]	; (8004f88 <HAL_ADC_Start_DMA+0x1d4>)
 8004eb8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebe:	4a33      	ldr	r2, [pc, #204]	; (8004f8c <HAL_ADC_Start_DMA+0x1d8>)
 8004ec0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004eca:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004eda:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689a      	ldr	r2, [r3, #8]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eea:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	334c      	adds	r3, #76	; 0x4c
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f000 fcdc 	bl	80058b8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f003 031f 	and.w	r3, r3, #31
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10f      	bne.n	8004f2c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d129      	bne.n	8004f6e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	689a      	ldr	r2, [r3, #8]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004f28:	609a      	str	r2, [r3, #8]
 8004f2a:	e020      	b.n	8004f6e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a17      	ldr	r2, [pc, #92]	; (8004f90 <HAL_ADC_Start_DMA+0x1dc>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d11b      	bne.n	8004f6e <HAL_ADC_Start_DMA+0x1ba>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d114      	bne.n	8004f6e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689a      	ldr	r2, [r3, #8]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004f52:	609a      	str	r2, [r3, #8]
 8004f54:	e00b      	b.n	8004f6e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5a:	f043 0210 	orr.w	r2, r3, #16
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f66:	f043 0201 	orr.w	r2, r3, #1
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3718      	adds	r7, #24
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	20000000 	.word	0x20000000
 8004f7c:	431bde83 	.word	0x431bde83
 8004f80:	40012300 	.word	0x40012300
 8004f84:	08005441 	.word	0x08005441
 8004f88:	080054ff 	.word	0x080054ff
 8004f8c:	0800551d 	.word	0x0800551d
 8004f90:	40012000 	.word	0x40012000

08004f94 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d101      	bne.n	8005000 <HAL_ADC_ConfigChannel+0x1c>
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	e113      	b.n	8005228 <HAL_ADC_ConfigChannel+0x244>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b09      	cmp	r3, #9
 800500e:	d925      	bls.n	800505c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68d9      	ldr	r1, [r3, #12]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	b29b      	uxth	r3, r3
 800501c:	461a      	mov	r2, r3
 800501e:	4613      	mov	r3, r2
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	4413      	add	r3, r2
 8005024:	3b1e      	subs	r3, #30
 8005026:	2207      	movs	r2, #7
 8005028:	fa02 f303 	lsl.w	r3, r2, r3
 800502c:	43da      	mvns	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	400a      	ands	r2, r1
 8005034:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68d9      	ldr	r1, [r3, #12]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	b29b      	uxth	r3, r3
 8005046:	4618      	mov	r0, r3
 8005048:	4603      	mov	r3, r0
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	4403      	add	r3, r0
 800504e:	3b1e      	subs	r3, #30
 8005050:	409a      	lsls	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	60da      	str	r2, [r3, #12]
 800505a:	e022      	b.n	80050a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6919      	ldr	r1, [r3, #16]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	b29b      	uxth	r3, r3
 8005068:	461a      	mov	r2, r3
 800506a:	4613      	mov	r3, r2
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	4413      	add	r3, r2
 8005070:	2207      	movs	r2, #7
 8005072:	fa02 f303 	lsl.w	r3, r2, r3
 8005076:	43da      	mvns	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	400a      	ands	r2, r1
 800507e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6919      	ldr	r1, [r3, #16]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	689a      	ldr	r2, [r3, #8]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	b29b      	uxth	r3, r3
 8005090:	4618      	mov	r0, r3
 8005092:	4603      	mov	r3, r0
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	4403      	add	r3, r0
 8005098:	409a      	lsls	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2b06      	cmp	r3, #6
 80050a8:	d824      	bhi.n	80050f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	4613      	mov	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	3b05      	subs	r3, #5
 80050bc:	221f      	movs	r2, #31
 80050be:	fa02 f303 	lsl.w	r3, r2, r3
 80050c2:	43da      	mvns	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	400a      	ands	r2, r1
 80050ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	4618      	mov	r0, r3
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	4613      	mov	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	3b05      	subs	r3, #5
 80050e6:	fa00 f203 	lsl.w	r2, r0, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	635a      	str	r2, [r3, #52]	; 0x34
 80050f2:	e04c      	b.n	800518e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	2b0c      	cmp	r3, #12
 80050fa:	d824      	bhi.n	8005146 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	4613      	mov	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	4413      	add	r3, r2
 800510c:	3b23      	subs	r3, #35	; 0x23
 800510e:	221f      	movs	r2, #31
 8005110:	fa02 f303 	lsl.w	r3, r2, r3
 8005114:	43da      	mvns	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	400a      	ands	r2, r1
 800511c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	b29b      	uxth	r3, r3
 800512a:	4618      	mov	r0, r3
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	4613      	mov	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4413      	add	r3, r2
 8005136:	3b23      	subs	r3, #35	; 0x23
 8005138:	fa00 f203 	lsl.w	r2, r0, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	430a      	orrs	r2, r1
 8005142:	631a      	str	r2, [r3, #48]	; 0x30
 8005144:	e023      	b.n	800518e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	4613      	mov	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	3b41      	subs	r3, #65	; 0x41
 8005158:	221f      	movs	r2, #31
 800515a:	fa02 f303 	lsl.w	r3, r2, r3
 800515e:	43da      	mvns	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	400a      	ands	r2, r1
 8005166:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	b29b      	uxth	r3, r3
 8005174:	4618      	mov	r0, r3
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	4613      	mov	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	4413      	add	r3, r2
 8005180:	3b41      	subs	r3, #65	; 0x41
 8005182:	fa00 f203 	lsl.w	r2, r0, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800518e:	4b29      	ldr	r3, [pc, #164]	; (8005234 <HAL_ADC_ConfigChannel+0x250>)
 8005190:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a28      	ldr	r2, [pc, #160]	; (8005238 <HAL_ADC_ConfigChannel+0x254>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d10f      	bne.n	80051bc <HAL_ADC_ConfigChannel+0x1d8>
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b12      	cmp	r3, #18
 80051a2:	d10b      	bne.n	80051bc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a1d      	ldr	r2, [pc, #116]	; (8005238 <HAL_ADC_ConfigChannel+0x254>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d12b      	bne.n	800521e <HAL_ADC_ConfigChannel+0x23a>
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a1c      	ldr	r2, [pc, #112]	; (800523c <HAL_ADC_ConfigChannel+0x258>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d003      	beq.n	80051d8 <HAL_ADC_ConfigChannel+0x1f4>
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b11      	cmp	r3, #17
 80051d6:	d122      	bne.n	800521e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a11      	ldr	r2, [pc, #68]	; (800523c <HAL_ADC_ConfigChannel+0x258>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d111      	bne.n	800521e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80051fa:	4b11      	ldr	r3, [pc, #68]	; (8005240 <HAL_ADC_ConfigChannel+0x25c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a11      	ldr	r2, [pc, #68]	; (8005244 <HAL_ADC_ConfigChannel+0x260>)
 8005200:	fba2 2303 	umull	r2, r3, r2, r3
 8005204:	0c9a      	lsrs	r2, r3, #18
 8005206:	4613      	mov	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	4413      	add	r3, r2
 800520c:	005b      	lsls	r3, r3, #1
 800520e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005210:	e002      	b.n	8005218 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	3b01      	subs	r3, #1
 8005216:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1f9      	bne.n	8005212 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	40012300 	.word	0x40012300
 8005238:	40012000 	.word	0x40012000
 800523c:	10000012 	.word	0x10000012
 8005240:	20000000 	.word	0x20000000
 8005244:	431bde83 	.word	0x431bde83

08005248 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005250:	4b79      	ldr	r3, [pc, #484]	; (8005438 <ADC_Init+0x1f0>)
 8005252:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	431a      	orrs	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800527c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6859      	ldr	r1, [r3, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	021a      	lsls	r2, r3, #8
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80052a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	6859      	ldr	r1, [r3, #4]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689a      	ldr	r2, [r3, #8]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6899      	ldr	r1, [r3, #8]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68da      	ldr	r2, [r3, #12]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052da:	4a58      	ldr	r2, [pc, #352]	; (800543c <ADC_Init+0x1f4>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d022      	beq.n	8005326 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689a      	ldr	r2, [r3, #8]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80052ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6899      	ldr	r1, [r3, #8]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005310:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	6899      	ldr	r1, [r3, #8]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	430a      	orrs	r2, r1
 8005322:	609a      	str	r2, [r3, #8]
 8005324:	e00f      	b.n	8005346 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005334:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005344:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 0202 	bic.w	r2, r2, #2
 8005354:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6899      	ldr	r1, [r3, #8]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	7e1b      	ldrb	r3, [r3, #24]
 8005360:	005a      	lsls	r2, r3, #1
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	430a      	orrs	r2, r1
 8005368:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d01b      	beq.n	80053ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005382:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005392:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6859      	ldr	r1, [r3, #4]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	3b01      	subs	r3, #1
 80053a0:	035a      	lsls	r2, r3, #13
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	605a      	str	r2, [r3, #4]
 80053aa:	e007      	b.n	80053bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80053ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	3b01      	subs	r3, #1
 80053d8:	051a      	lsls	r2, r3, #20
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689a      	ldr	r2, [r3, #8]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80053f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6899      	ldr	r1, [r3, #8]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80053fe:	025a      	lsls	r2, r3, #9
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689a      	ldr	r2, [r3, #8]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005416:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6899      	ldr	r1, [r3, #8]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	029a      	lsls	r2, r3, #10
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	609a      	str	r2, [r3, #8]
}
 800542c:	bf00      	nop
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	40012300 	.word	0x40012300
 800543c:	0f000001 	.word	0x0f000001

08005440 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005456:	2b00      	cmp	r3, #0
 8005458:	d13d      	bne.n	80054d6 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d12b      	bne.n	80054cc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005478:	2b00      	cmp	r3, #0
 800547a:	d127      	bne.n	80054cc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005482:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005486:	2b00      	cmp	r3, #0
 8005488:	d006      	beq.n	8005498 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005494:	2b00      	cmp	r3, #0
 8005496:	d119      	bne.n	80054cc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 0220 	bic.w	r2, r2, #32
 80054a6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d105      	bne.n	80054cc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c4:	f043 0201 	orr.w	r2, r3, #1
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	4798      	blx	r3
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80054d4:	e00f      	b.n	80054f6 <ADC_DMAConvCplt+0xb6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	f003 0310 	and.w	r3, r3, #16
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d004      	beq.n	80054ec <ADC_DMAConvCplt+0xac>
      hadc->ErrorCallback(hadc);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	4798      	blx	r3
}
 80054ea:	e004      	b.n	80054f6 <ADC_DMAConvCplt+0xb6>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	4798      	blx	r3
}
 80054f6:	bf00      	nop
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b084      	sub	sp, #16
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005514:	bf00      	nop
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005528:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2240      	movs	r2, #64	; 0x40
 800552e:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005534:	f043 0204 	orr.w	r2, r3, #4
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005544:	bf00      	nop
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f003 0307 	and.w	r3, r3, #7
 800556e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005570:	4b0c      	ldr	r3, [pc, #48]	; (80055a4 <__NVIC_SetPriorityGrouping+0x44>)
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800557c:	4013      	ands	r3, r2
 800557e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800558c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005592:	4a04      	ldr	r2, [pc, #16]	; (80055a4 <__NVIC_SetPriorityGrouping+0x44>)
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	60d3      	str	r3, [r2, #12]
}
 8005598:	bf00      	nop
 800559a:	3714      	adds	r7, #20
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr
 80055a4:	e000ed00 	.word	0xe000ed00

080055a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055a8:	b480      	push	{r7}
 80055aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055ac:	4b04      	ldr	r3, [pc, #16]	; (80055c0 <__NVIC_GetPriorityGrouping+0x18>)
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	0a1b      	lsrs	r3, r3, #8
 80055b2:	f003 0307 	and.w	r3, r3, #7
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	e000ed00 	.word	0xe000ed00

080055c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	4603      	mov	r3, r0
 80055cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	db0b      	blt.n	80055ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055d6:	79fb      	ldrb	r3, [r7, #7]
 80055d8:	f003 021f 	and.w	r2, r3, #31
 80055dc:	4907      	ldr	r1, [pc, #28]	; (80055fc <__NVIC_EnableIRQ+0x38>)
 80055de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055e2:	095b      	lsrs	r3, r3, #5
 80055e4:	2001      	movs	r0, #1
 80055e6:	fa00 f202 	lsl.w	r2, r0, r2
 80055ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80055ee:	bf00      	nop
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	e000e100 	.word	0xe000e100

08005600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	4603      	mov	r3, r0
 8005608:	6039      	str	r1, [r7, #0]
 800560a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800560c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005610:	2b00      	cmp	r3, #0
 8005612:	db0a      	blt.n	800562a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	b2da      	uxtb	r2, r3
 8005618:	490c      	ldr	r1, [pc, #48]	; (800564c <__NVIC_SetPriority+0x4c>)
 800561a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800561e:	0112      	lsls	r2, r2, #4
 8005620:	b2d2      	uxtb	r2, r2
 8005622:	440b      	add	r3, r1
 8005624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005628:	e00a      	b.n	8005640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	b2da      	uxtb	r2, r3
 800562e:	4908      	ldr	r1, [pc, #32]	; (8005650 <__NVIC_SetPriority+0x50>)
 8005630:	79fb      	ldrb	r3, [r7, #7]
 8005632:	f003 030f 	and.w	r3, r3, #15
 8005636:	3b04      	subs	r3, #4
 8005638:	0112      	lsls	r2, r2, #4
 800563a:	b2d2      	uxtb	r2, r2
 800563c:	440b      	add	r3, r1
 800563e:	761a      	strb	r2, [r3, #24]
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	e000e100 	.word	0xe000e100
 8005650:	e000ed00 	.word	0xe000ed00

08005654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005654:	b480      	push	{r7}
 8005656:	b089      	sub	sp, #36	; 0x24
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f003 0307 	and.w	r3, r3, #7
 8005666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	f1c3 0307 	rsb	r3, r3, #7
 800566e:	2b04      	cmp	r3, #4
 8005670:	bf28      	it	cs
 8005672:	2304      	movcs	r3, #4
 8005674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	3304      	adds	r3, #4
 800567a:	2b06      	cmp	r3, #6
 800567c:	d902      	bls.n	8005684 <NVIC_EncodePriority+0x30>
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	3b03      	subs	r3, #3
 8005682:	e000      	b.n	8005686 <NVIC_EncodePriority+0x32>
 8005684:	2300      	movs	r3, #0
 8005686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005688:	f04f 32ff 	mov.w	r2, #4294967295
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	fa02 f303 	lsl.w	r3, r2, r3
 8005692:	43da      	mvns	r2, r3
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	401a      	ands	r2, r3
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800569c:	f04f 31ff 	mov.w	r1, #4294967295
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	fa01 f303 	lsl.w	r3, r1, r3
 80056a6:	43d9      	mvns	r1, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056ac:	4313      	orrs	r3, r2
         );
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3724      	adds	r7, #36	; 0x24
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b082      	sub	sp, #8
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7ff ff4c 	bl	8005560 <__NVIC_SetPriorityGrouping>
}
 80056c8:	bf00      	nop
 80056ca:	3708      	adds	r7, #8
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	4603      	mov	r3, r0
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
 80056dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80056de:	2300      	movs	r3, #0
 80056e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80056e2:	f7ff ff61 	bl	80055a8 <__NVIC_GetPriorityGrouping>
 80056e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	68b9      	ldr	r1, [r7, #8]
 80056ec:	6978      	ldr	r0, [r7, #20]
 80056ee:	f7ff ffb1 	bl	8005654 <NVIC_EncodePriority>
 80056f2:	4602      	mov	r2, r0
 80056f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056f8:	4611      	mov	r1, r2
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7ff ff80 	bl	8005600 <__NVIC_SetPriority>
}
 8005700:	bf00      	nop
 8005702:	3718      	adds	r7, #24
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	4603      	mov	r3, r0
 8005710:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005716:	4618      	mov	r0, r3
 8005718:	f7ff ff54 	bl	80055c4 <__NVIC_EnableIRQ>
}
 800571c:	bf00      	nop
 800571e:	3708      	adds	r7, #8
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e00e      	b.n	8005754 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	795b      	ldrb	r3, [r3, #5]
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	d105      	bne.n	800574c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7fd fe34 	bl	80033b4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3708      	adds	r7, #8
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005764:	2300      	movs	r3, #0
 8005766:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005768:	f7ff f97a 	bl	8004a60 <HAL_GetTick>
 800576c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d101      	bne.n	8005778 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e099      	b.n	80058ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2202      	movs	r2, #2
 800577c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 0201 	bic.w	r2, r2, #1
 8005796:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005798:	e00f      	b.n	80057ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800579a:	f7ff f961 	bl	8004a60 <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	2b05      	cmp	r3, #5
 80057a6:	d908      	bls.n	80057ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2220      	movs	r2, #32
 80057ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2203      	movs	r2, #3
 80057b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e078      	b.n	80058ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0301 	and.w	r3, r3, #1
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1e8      	bne.n	800579a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	4b38      	ldr	r3, [pc, #224]	; (80058b4 <HAL_DMA_Init+0x158>)
 80057d4:	4013      	ands	r3, r2
 80057d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	4313      	orrs	r3, r2
 800580a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	2b04      	cmp	r3, #4
 8005812:	d107      	bne.n	8005824 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581c:	4313      	orrs	r3, r2
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	4313      	orrs	r3, r2
 8005822:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	f023 0307 	bic.w	r3, r3, #7
 800583a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	4313      	orrs	r3, r2
 8005844:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584a:	2b04      	cmp	r3, #4
 800584c:	d117      	bne.n	800587e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	4313      	orrs	r3, r2
 8005856:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00e      	beq.n	800587e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 fb0f 	bl	8005e84 <DMA_CheckFifoParam>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d008      	beq.n	800587e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2240      	movs	r2, #64	; 0x40
 8005870:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800587a:	2301      	movs	r3, #1
 800587c:	e016      	b.n	80058ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fac6 	bl	8005e18 <DMA_CalcBaseAndBitshift>
 800588c:	4603      	mov	r3, r0
 800588e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005894:	223f      	movs	r2, #63	; 0x3f
 8005896:	409a      	lsls	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3718      	adds	r7, #24
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	f010803f 	.word	0xf010803f

080058b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
 80058c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058c6:	2300      	movs	r3, #0
 80058c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d101      	bne.n	80058de <HAL_DMA_Start_IT+0x26>
 80058da:	2302      	movs	r3, #2
 80058dc:	e040      	b.n	8005960 <HAL_DMA_Start_IT+0xa8>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d12f      	bne.n	8005952 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2202      	movs	r2, #2
 80058f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	68b9      	ldr	r1, [r7, #8]
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f000 fa58 	bl	8005dbc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005910:	223f      	movs	r2, #63	; 0x3f
 8005912:	409a      	lsls	r2, r3
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f042 0216 	orr.w	r2, r2, #22
 8005926:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592c:	2b00      	cmp	r3, #0
 800592e:	d007      	beq.n	8005940 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f042 0208 	orr.w	r2, r2, #8
 800593e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0201 	orr.w	r2, r2, #1
 800594e:	601a      	str	r2, [r3, #0]
 8005950:	e005      	b.n	800595e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800595a:	2302      	movs	r3, #2
 800595c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800595e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005960:	4618      	mov	r0, r3
 8005962:	3718      	adds	r7, #24
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005974:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005976:	f7ff f873 	bl	8004a60 <HAL_GetTick>
 800597a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d008      	beq.n	800599a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2280      	movs	r2, #128	; 0x80
 800598c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e052      	b.n	8005a40 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f022 0216 	bic.w	r2, r2, #22
 80059a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	695a      	ldr	r2, [r3, #20]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d103      	bne.n	80059ca <HAL_DMA_Abort+0x62>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d007      	beq.n	80059da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 0208 	bic.w	r2, r2, #8
 80059d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 0201 	bic.w	r2, r2, #1
 80059e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059ea:	e013      	b.n	8005a14 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059ec:	f7ff f838 	bl	8004a60 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b05      	cmp	r3, #5
 80059f8:	d90c      	bls.n	8005a14 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2220      	movs	r2, #32
 80059fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2203      	movs	r2, #3
 8005a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e015      	b.n	8005a40 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1e4      	bne.n	80059ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a26:	223f      	movs	r2, #63	; 0x3f
 8005a28:	409a      	lsls	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d004      	beq.n	8005a66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2280      	movs	r2, #128	; 0x80
 8005a60:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e00c      	b.n	8005a80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2205      	movs	r2, #5
 8005a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 0201 	bic.w	r2, r2, #1
 8005a7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005a98:	4b8e      	ldr	r3, [pc, #568]	; (8005cd4 <HAL_DMA_IRQHandler+0x248>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a8e      	ldr	r2, [pc, #568]	; (8005cd8 <HAL_DMA_IRQHandler+0x24c>)
 8005a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa2:	0a9b      	lsrs	r3, r3, #10
 8005aa4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aaa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ab6:	2208      	movs	r2, #8
 8005ab8:	409a      	lsls	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4013      	ands	r3, r2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d01a      	beq.n	8005af8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d013      	beq.n	8005af8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f022 0204 	bic.w	r2, r2, #4
 8005ade:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae4:	2208      	movs	r2, #8
 8005ae6:	409a      	lsls	r2, r3
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af0:	f043 0201 	orr.w	r2, r3, #1
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005afc:	2201      	movs	r2, #1
 8005afe:	409a      	lsls	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	4013      	ands	r3, r2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d012      	beq.n	8005b2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00b      	beq.n	8005b2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	409a      	lsls	r2, r3
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b26:	f043 0202 	orr.w	r2, r3, #2
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b32:	2204      	movs	r2, #4
 8005b34:	409a      	lsls	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	4013      	ands	r3, r2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d012      	beq.n	8005b64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00b      	beq.n	8005b64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b50:	2204      	movs	r2, #4
 8005b52:	409a      	lsls	r2, r3
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b5c:	f043 0204 	orr.w	r2, r3, #4
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b68:	2210      	movs	r2, #16
 8005b6a:	409a      	lsls	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d043      	beq.n	8005bfc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0308 	and.w	r3, r3, #8
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d03c      	beq.n	8005bfc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b86:	2210      	movs	r2, #16
 8005b88:	409a      	lsls	r2, r3
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d018      	beq.n	8005bce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d108      	bne.n	8005bbc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d024      	beq.n	8005bfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	4798      	blx	r3
 8005bba:	e01f      	b.n	8005bfc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d01b      	beq.n	8005bfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	4798      	blx	r3
 8005bcc:	e016      	b.n	8005bfc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d107      	bne.n	8005bec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 0208 	bic.w	r2, r2, #8
 8005bea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d003      	beq.n	8005bfc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c00:	2220      	movs	r2, #32
 8005c02:	409a      	lsls	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4013      	ands	r3, r2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 808f 	beq.w	8005d2c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0310 	and.w	r3, r3, #16
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f000 8087 	beq.w	8005d2c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c22:	2220      	movs	r2, #32
 8005c24:	409a      	lsls	r2, r3
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b05      	cmp	r3, #5
 8005c34:	d136      	bne.n	8005ca4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 0216 	bic.w	r2, r2, #22
 8005c44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	695a      	ldr	r2, [r3, #20]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d103      	bne.n	8005c66 <HAL_DMA_IRQHandler+0x1da>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d007      	beq.n	8005c76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f022 0208 	bic.w	r2, r2, #8
 8005c74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c7a:	223f      	movs	r2, #63	; 0x3f
 8005c7c:	409a      	lsls	r2, r3
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d07e      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	4798      	blx	r3
        }
        return;
 8005ca2:	e079      	b.n	8005d98 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d01d      	beq.n	8005cee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10d      	bne.n	8005cdc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d031      	beq.n	8005d2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	4798      	blx	r3
 8005cd0:	e02c      	b.n	8005d2c <HAL_DMA_IRQHandler+0x2a0>
 8005cd2:	bf00      	nop
 8005cd4:	20000000 	.word	0x20000000
 8005cd8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d023      	beq.n	8005d2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	4798      	blx	r3
 8005cec:	e01e      	b.n	8005d2c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10f      	bne.n	8005d1c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f022 0210 	bic.w	r2, r2, #16
 8005d0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d003      	beq.n	8005d2c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d032      	beq.n	8005d9a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d38:	f003 0301 	and.w	r3, r3, #1
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d022      	beq.n	8005d86 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2205      	movs	r2, #5
 8005d44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f022 0201 	bic.w	r2, r2, #1
 8005d56:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	60bb      	str	r3, [r7, #8]
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d307      	bcc.n	8005d74 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1f2      	bne.n	8005d58 <HAL_DMA_IRQHandler+0x2cc>
 8005d72:	e000      	b.n	8005d76 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005d74:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d005      	beq.n	8005d9a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	4798      	blx	r3
 8005d96:	e000      	b.n	8005d9a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005d98:	bf00      	nop
    }
  }
}
 8005d9a:	3718      	adds	r7, #24
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005dae:	b2db      	uxtb	r3, r3
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
 8005dc8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005dd8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	2b40      	cmp	r3, #64	; 0x40
 8005de8:	d108      	bne.n	8005dfc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005dfa:	e007      	b.n	8005e0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	60da      	str	r2, [r3, #12]
}
 8005e0c:	bf00      	nop
 8005e0e:	3714      	adds	r7, #20
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	3b10      	subs	r3, #16
 8005e28:	4a14      	ldr	r2, [pc, #80]	; (8005e7c <DMA_CalcBaseAndBitshift+0x64>)
 8005e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e2e:	091b      	lsrs	r3, r3, #4
 8005e30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005e32:	4a13      	ldr	r2, [pc, #76]	; (8005e80 <DMA_CalcBaseAndBitshift+0x68>)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	4413      	add	r3, r2
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2b03      	cmp	r3, #3
 8005e44:	d909      	bls.n	8005e5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005e4e:	f023 0303 	bic.w	r3, r3, #3
 8005e52:	1d1a      	adds	r2, r3, #4
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	659a      	str	r2, [r3, #88]	; 0x58
 8005e58:	e007      	b.n	8005e6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005e62:	f023 0303 	bic.w	r3, r3, #3
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	aaaaaaab 	.word	0xaaaaaaab
 8005e80:	0800fae8 	.word	0x0800fae8

08005e84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d11f      	bne.n	8005ede <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	2b03      	cmp	r3, #3
 8005ea2:	d856      	bhi.n	8005f52 <DMA_CheckFifoParam+0xce>
 8005ea4:	a201      	add	r2, pc, #4	; (adr r2, 8005eac <DMA_CheckFifoParam+0x28>)
 8005ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eaa:	bf00      	nop
 8005eac:	08005ebd 	.word	0x08005ebd
 8005eb0:	08005ecf 	.word	0x08005ecf
 8005eb4:	08005ebd 	.word	0x08005ebd
 8005eb8:	08005f53 	.word	0x08005f53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d046      	beq.n	8005f56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ecc:	e043      	b.n	8005f56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ed6:	d140      	bne.n	8005f5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005edc:	e03d      	b.n	8005f5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ee6:	d121      	bne.n	8005f2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	2b03      	cmp	r3, #3
 8005eec:	d837      	bhi.n	8005f5e <DMA_CheckFifoParam+0xda>
 8005eee:	a201      	add	r2, pc, #4	; (adr r2, 8005ef4 <DMA_CheckFifoParam+0x70>)
 8005ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef4:	08005f05 	.word	0x08005f05
 8005ef8:	08005f0b 	.word	0x08005f0b
 8005efc:	08005f05 	.word	0x08005f05
 8005f00:	08005f1d 	.word	0x08005f1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	73fb      	strb	r3, [r7, #15]
      break;
 8005f08:	e030      	b.n	8005f6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d025      	beq.n	8005f62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f1a:	e022      	b.n	8005f62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f24:	d11f      	bne.n	8005f66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005f2a:	e01c      	b.n	8005f66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d903      	bls.n	8005f3a <DMA_CheckFifoParam+0xb6>
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	2b03      	cmp	r3, #3
 8005f36:	d003      	beq.n	8005f40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005f38:	e018      	b.n	8005f6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	73fb      	strb	r3, [r7, #15]
      break;
 8005f3e:	e015      	b.n	8005f6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00e      	beq.n	8005f6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f50:	e00b      	b.n	8005f6a <DMA_CheckFifoParam+0xe6>
      break;
 8005f52:	bf00      	nop
 8005f54:	e00a      	b.n	8005f6c <DMA_CheckFifoParam+0xe8>
      break;
 8005f56:	bf00      	nop
 8005f58:	e008      	b.n	8005f6c <DMA_CheckFifoParam+0xe8>
      break;
 8005f5a:	bf00      	nop
 8005f5c:	e006      	b.n	8005f6c <DMA_CheckFifoParam+0xe8>
      break;
 8005f5e:	bf00      	nop
 8005f60:	e004      	b.n	8005f6c <DMA_CheckFifoParam+0xe8>
      break;
 8005f62:	bf00      	nop
 8005f64:	e002      	b.n	8005f6c <DMA_CheckFifoParam+0xe8>
      break;   
 8005f66:	bf00      	nop
 8005f68:	e000      	b.n	8005f6c <DMA_CheckFifoParam+0xe8>
      break;
 8005f6a:	bf00      	nop
    }
  } 
  
  return status; 
 8005f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop

08005f7c <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8005f82:	2300      	movs	r3, #0
 8005f84:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005f86:	4b4b      	ldr	r3, [pc, #300]	; (80060b4 <HAL_FLASH_IRQHandler+0x138>)
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d020      	beq.n	8005fd4 <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8005f92:	4b49      	ldr	r3, [pc, #292]	; (80060b8 <HAL_FLASH_IRQHandler+0x13c>)
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d107      	bne.n	8005fac <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8005f9c:	4b46      	ldr	r3, [pc, #280]	; (80060b8 <HAL_FLASH_IRQHandler+0x13c>)
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8005fa2:	4b45      	ldr	r3, [pc, #276]	; (80060b8 <HAL_FLASH_IRQHandler+0x13c>)
 8005fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8005fa8:	60da      	str	r2, [r3, #12]
 8005faa:	e00b      	b.n	8005fc4 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8005fac:	4b42      	ldr	r3, [pc, #264]	; (80060b8 <HAL_FLASH_IRQHandler+0x13c>)
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d103      	bne.n	8005fbe <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8005fb6:	4b40      	ldr	r3, [pc, #256]	; (80060b8 <HAL_FLASH_IRQHandler+0x13c>)
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	607b      	str	r3, [r7, #4]
 8005fbc:	e002      	b.n	8005fc4 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8005fbe:	4b3e      	ldr	r3, [pc, #248]	; (80060b8 <HAL_FLASH_IRQHandler+0x13c>)
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8005fc4:	f000 f88e 	bl	80060e4 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 f881 	bl	80060d0 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005fce:	4b3a      	ldr	r3, [pc, #232]	; (80060b8 <HAL_FLASH_IRQHandler+0x13c>)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005fd4:	4b37      	ldr	r3, [pc, #220]	; (80060b4 <HAL_FLASH_IRQHandler+0x138>)
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	f003 0301 	and.w	r3, r3, #1
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d04a      	beq.n	8006076 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005fe0:	4b34      	ldr	r3, [pc, #208]	; (80060b4 <HAL_FLASH_IRQHandler+0x138>)
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8005fe6:	4b34      	ldr	r3, [pc, #208]	; (80060b8 <HAL_FLASH_IRQHandler+0x13c>)
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d12d      	bne.n	800604c <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8005ff0:	4b31      	ldr	r3, [pc, #196]	; (80060b8 <HAL_FLASH_IRQHandler+0x13c>)
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	4a30      	ldr	r2, [pc, #192]	; (80060b8 <HAL_FLASH_IRQHandler+0x13c>)
 8005ff8:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8005ffa:	4b2f      	ldr	r3, [pc, #188]	; (80060b8 <HAL_FLASH_IRQHandler+0x13c>)
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d015      	beq.n	800602e <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8006002:	4b2d      	ldr	r3, [pc, #180]	; (80060b8 <HAL_FLASH_IRQHandler+0x13c>)
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 f857 	bl	80060bc <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 800600e:	4b2a      	ldr	r3, [pc, #168]	; (80060b8 <HAL_FLASH_IRQHandler+0x13c>)
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	3301      	adds	r3, #1
 8006014:	4a28      	ldr	r2, [pc, #160]	; (80060b8 <HAL_FLASH_IRQHandler+0x13c>)
 8006016:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8006018:	4b27      	ldr	r3, [pc, #156]	; (80060b8 <HAL_FLASH_IRQHandler+0x13c>)
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 800601e:	4b26      	ldr	r3, [pc, #152]	; (80060b8 <HAL_FLASH_IRQHandler+0x13c>)
 8006020:	7a1b      	ldrb	r3, [r3, #8]
 8006022:	b2db      	uxtb	r3, r3
 8006024:	4619      	mov	r1, r3
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f8c2 	bl	80061b0 <FLASH_Erase_Sector>
 800602c:	e023      	b.n	8006076 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 800602e:	f04f 33ff 	mov.w	r3, #4294967295
 8006032:	607b      	str	r3, [r7, #4]
 8006034:	4a20      	ldr	r2, [pc, #128]	; (80060b8 <HAL_FLASH_IRQHandler+0x13c>)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800603a:	4b1f      	ldr	r3, [pc, #124]	; (80060b8 <HAL_FLASH_IRQHandler+0x13c>)
 800603c:	2200      	movs	r2, #0
 800603e:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8006040:	f000 f8fe 	bl	8006240 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 f839 	bl	80060bc <HAL_FLASH_EndOfOperationCallback>
 800604a:	e014      	b.n	8006076 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 800604c:	4b1a      	ldr	r3, [pc, #104]	; (80060b8 <HAL_FLASH_IRQHandler+0x13c>)
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b02      	cmp	r3, #2
 8006054:	d107      	bne.n	8006066 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8006056:	f000 f8f3 	bl	8006240 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 800605a:	4b17      	ldr	r3, [pc, #92]	; (80060b8 <HAL_FLASH_IRQHandler+0x13c>)
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	4618      	mov	r0, r3
 8006060:	f000 f82c 	bl	80060bc <HAL_FLASH_EndOfOperationCallback>
 8006064:	e004      	b.n	8006070 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8006066:	4b14      	ldr	r3, [pc, #80]	; (80060b8 <HAL_FLASH_IRQHandler+0x13c>)
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	4618      	mov	r0, r3
 800606c:	f000 f826 	bl	80060bc <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8006070:	4b11      	ldr	r3, [pc, #68]	; (80060b8 <HAL_FLASH_IRQHandler+0x13c>)
 8006072:	2200      	movs	r2, #0
 8006074:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8006076:	4b10      	ldr	r3, [pc, #64]	; (80060b8 <HAL_FLASH_IRQHandler+0x13c>)
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b00      	cmp	r3, #0
 800607e:	d114      	bne.n	80060aa <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8006080:	4b0c      	ldr	r3, [pc, #48]	; (80060b4 <HAL_FLASH_IRQHandler+0x138>)
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	4a0b      	ldr	r2, [pc, #44]	; (80060b4 <HAL_FLASH_IRQHandler+0x138>)
 8006086:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800608a:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 800608c:	4b09      	ldr	r3, [pc, #36]	; (80060b4 <HAL_FLASH_IRQHandler+0x138>)
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	4a08      	ldr	r2, [pc, #32]	; (80060b4 <HAL_FLASH_IRQHandler+0x138>)
 8006092:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006096:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8006098:	4b06      	ldr	r3, [pc, #24]	; (80060b4 <HAL_FLASH_IRQHandler+0x138>)
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	4a05      	ldr	r2, [pc, #20]	; (80060b4 <HAL_FLASH_IRQHandler+0x138>)
 800609e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80060a2:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 80060a4:	4b04      	ldr	r3, [pc, #16]	; (80060b8 <HAL_FLASH_IRQHandler+0x13c>)
 80060a6:	2200      	movs	r2, #0
 80060a8:	761a      	strb	r2, [r3, #24]
  }
}
 80060aa:	bf00      	nop
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	40023c00 	.word	0x40023c00
 80060b8:	20000994 	.word	0x20000994

080060bc <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80060e4:	b480      	push	{r7}
 80060e6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80060e8:	4b2f      	ldr	r3, [pc, #188]	; (80061a8 <FLASH_SetErrorCode+0xc4>)
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f003 0310 	and.w	r3, r3, #16
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d008      	beq.n	8006106 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80060f4:	4b2d      	ldr	r3, [pc, #180]	; (80061ac <FLASH_SetErrorCode+0xc8>)
 80060f6:	69db      	ldr	r3, [r3, #28]
 80060f8:	f043 0310 	orr.w	r3, r3, #16
 80060fc:	4a2b      	ldr	r2, [pc, #172]	; (80061ac <FLASH_SetErrorCode+0xc8>)
 80060fe:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006100:	4b29      	ldr	r3, [pc, #164]	; (80061a8 <FLASH_SetErrorCode+0xc4>)
 8006102:	2210      	movs	r2, #16
 8006104:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8006106:	4b28      	ldr	r3, [pc, #160]	; (80061a8 <FLASH_SetErrorCode+0xc4>)
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	f003 0320 	and.w	r3, r3, #32
 800610e:	2b00      	cmp	r3, #0
 8006110:	d008      	beq.n	8006124 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8006112:	4b26      	ldr	r3, [pc, #152]	; (80061ac <FLASH_SetErrorCode+0xc8>)
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	f043 0308 	orr.w	r3, r3, #8
 800611a:	4a24      	ldr	r2, [pc, #144]	; (80061ac <FLASH_SetErrorCode+0xc8>)
 800611c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800611e:	4b22      	ldr	r3, [pc, #136]	; (80061a8 <FLASH_SetErrorCode+0xc4>)
 8006120:	2220      	movs	r2, #32
 8006122:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8006124:	4b20      	ldr	r3, [pc, #128]	; (80061a8 <FLASH_SetErrorCode+0xc4>)
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612c:	2b00      	cmp	r3, #0
 800612e:	d008      	beq.n	8006142 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006130:	4b1e      	ldr	r3, [pc, #120]	; (80061ac <FLASH_SetErrorCode+0xc8>)
 8006132:	69db      	ldr	r3, [r3, #28]
 8006134:	f043 0304 	orr.w	r3, r3, #4
 8006138:	4a1c      	ldr	r2, [pc, #112]	; (80061ac <FLASH_SetErrorCode+0xc8>)
 800613a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800613c:	4b1a      	ldr	r3, [pc, #104]	; (80061a8 <FLASH_SetErrorCode+0xc4>)
 800613e:	2240      	movs	r2, #64	; 0x40
 8006140:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8006142:	4b19      	ldr	r3, [pc, #100]	; (80061a8 <FLASH_SetErrorCode+0xc4>)
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800614a:	2b00      	cmp	r3, #0
 800614c:	d008      	beq.n	8006160 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800614e:	4b17      	ldr	r3, [pc, #92]	; (80061ac <FLASH_SetErrorCode+0xc8>)
 8006150:	69db      	ldr	r3, [r3, #28]
 8006152:	f043 0302 	orr.w	r3, r3, #2
 8006156:	4a15      	ldr	r2, [pc, #84]	; (80061ac <FLASH_SetErrorCode+0xc8>)
 8006158:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800615a:	4b13      	ldr	r3, [pc, #76]	; (80061a8 <FLASH_SetErrorCode+0xc4>)
 800615c:	2280      	movs	r2, #128	; 0x80
 800615e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8006160:	4b11      	ldr	r3, [pc, #68]	; (80061a8 <FLASH_SetErrorCode+0xc4>)
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006168:	2b00      	cmp	r3, #0
 800616a:	d009      	beq.n	8006180 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800616c:	4b0f      	ldr	r3, [pc, #60]	; (80061ac <FLASH_SetErrorCode+0xc8>)
 800616e:	69db      	ldr	r3, [r3, #28]
 8006170:	f043 0301 	orr.w	r3, r3, #1
 8006174:	4a0d      	ldr	r2, [pc, #52]	; (80061ac <FLASH_SetErrorCode+0xc8>)
 8006176:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8006178:	4b0b      	ldr	r3, [pc, #44]	; (80061a8 <FLASH_SetErrorCode+0xc4>)
 800617a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800617e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8006180:	4b09      	ldr	r3, [pc, #36]	; (80061a8 <FLASH_SetErrorCode+0xc4>)
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	f003 0302 	and.w	r3, r3, #2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d008      	beq.n	800619e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800618c:	4b07      	ldr	r3, [pc, #28]	; (80061ac <FLASH_SetErrorCode+0xc8>)
 800618e:	69db      	ldr	r3, [r3, #28]
 8006190:	f043 0320 	orr.w	r3, r3, #32
 8006194:	4a05      	ldr	r2, [pc, #20]	; (80061ac <FLASH_SetErrorCode+0xc8>)
 8006196:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8006198:	4b03      	ldr	r3, [pc, #12]	; (80061a8 <FLASH_SetErrorCode+0xc4>)
 800619a:	2202      	movs	r2, #2
 800619c:	60da      	str	r2, [r3, #12]
  }
}
 800619e:	bf00      	nop
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr
 80061a8:	40023c00 	.word	0x40023c00
 80061ac:	20000994 	.word	0x20000994

080061b0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	460b      	mov	r3, r1
 80061ba:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80061bc:	2300      	movs	r3, #0
 80061be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80061c0:	78fb      	ldrb	r3, [r7, #3]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d102      	bne.n	80061cc <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80061c6:	2300      	movs	r3, #0
 80061c8:	60fb      	str	r3, [r7, #12]
 80061ca:	e010      	b.n	80061ee <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80061cc:	78fb      	ldrb	r3, [r7, #3]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d103      	bne.n	80061da <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80061d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061d6:	60fb      	str	r3, [r7, #12]
 80061d8:	e009      	b.n	80061ee <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80061da:	78fb      	ldrb	r3, [r7, #3]
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d103      	bne.n	80061e8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80061e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061e4:	60fb      	str	r3, [r7, #12]
 80061e6:	e002      	b.n	80061ee <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80061e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80061ec:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80061ee:	4b13      	ldr	r3, [pc, #76]	; (800623c <FLASH_Erase_Sector+0x8c>)
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	4a12      	ldr	r2, [pc, #72]	; (800623c <FLASH_Erase_Sector+0x8c>)
 80061f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80061fa:	4b10      	ldr	r3, [pc, #64]	; (800623c <FLASH_Erase_Sector+0x8c>)
 80061fc:	691a      	ldr	r2, [r3, #16]
 80061fe:	490f      	ldr	r1, [pc, #60]	; (800623c <FLASH_Erase_Sector+0x8c>)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4313      	orrs	r3, r2
 8006204:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8006206:	4b0d      	ldr	r3, [pc, #52]	; (800623c <FLASH_Erase_Sector+0x8c>)
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	4a0c      	ldr	r2, [pc, #48]	; (800623c <FLASH_Erase_Sector+0x8c>)
 800620c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006210:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8006212:	4b0a      	ldr	r3, [pc, #40]	; (800623c <FLASH_Erase_Sector+0x8c>)
 8006214:	691a      	ldr	r2, [r3, #16]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	00db      	lsls	r3, r3, #3
 800621a:	4313      	orrs	r3, r2
 800621c:	4a07      	ldr	r2, [pc, #28]	; (800623c <FLASH_Erase_Sector+0x8c>)
 800621e:	f043 0302 	orr.w	r3, r3, #2
 8006222:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006224:	4b05      	ldr	r3, [pc, #20]	; (800623c <FLASH_Erase_Sector+0x8c>)
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	4a04      	ldr	r2, [pc, #16]	; (800623c <FLASH_Erase_Sector+0x8c>)
 800622a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800622e:	6113      	str	r3, [r2, #16]
}
 8006230:	bf00      	nop
 8006232:	3714      	adds	r7, #20
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	40023c00 	.word	0x40023c00

08006240 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006240:	b480      	push	{r7}
 8006242:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8006244:	4b20      	ldr	r3, [pc, #128]	; (80062c8 <FLASH_FlushCaches+0x88>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800624c:	2b00      	cmp	r3, #0
 800624e:	d017      	beq.n	8006280 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006250:	4b1d      	ldr	r3, [pc, #116]	; (80062c8 <FLASH_FlushCaches+0x88>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a1c      	ldr	r2, [pc, #112]	; (80062c8 <FLASH_FlushCaches+0x88>)
 8006256:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800625a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800625c:	4b1a      	ldr	r3, [pc, #104]	; (80062c8 <FLASH_FlushCaches+0x88>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a19      	ldr	r2, [pc, #100]	; (80062c8 <FLASH_FlushCaches+0x88>)
 8006262:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006266:	6013      	str	r3, [r2, #0]
 8006268:	4b17      	ldr	r3, [pc, #92]	; (80062c8 <FLASH_FlushCaches+0x88>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a16      	ldr	r2, [pc, #88]	; (80062c8 <FLASH_FlushCaches+0x88>)
 800626e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006272:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006274:	4b14      	ldr	r3, [pc, #80]	; (80062c8 <FLASH_FlushCaches+0x88>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a13      	ldr	r2, [pc, #76]	; (80062c8 <FLASH_FlushCaches+0x88>)
 800627a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800627e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8006280:	4b11      	ldr	r3, [pc, #68]	; (80062c8 <FLASH_FlushCaches+0x88>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006288:	2b00      	cmp	r3, #0
 800628a:	d017      	beq.n	80062bc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800628c:	4b0e      	ldr	r3, [pc, #56]	; (80062c8 <FLASH_FlushCaches+0x88>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a0d      	ldr	r2, [pc, #52]	; (80062c8 <FLASH_FlushCaches+0x88>)
 8006292:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006296:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006298:	4b0b      	ldr	r3, [pc, #44]	; (80062c8 <FLASH_FlushCaches+0x88>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a0a      	ldr	r2, [pc, #40]	; (80062c8 <FLASH_FlushCaches+0x88>)
 800629e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80062a2:	6013      	str	r3, [r2, #0]
 80062a4:	4b08      	ldr	r3, [pc, #32]	; (80062c8 <FLASH_FlushCaches+0x88>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a07      	ldr	r2, [pc, #28]	; (80062c8 <FLASH_FlushCaches+0x88>)
 80062aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062ae:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80062b0:	4b05      	ldr	r3, [pc, #20]	; (80062c8 <FLASH_FlushCaches+0x88>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a04      	ldr	r2, [pc, #16]	; (80062c8 <FLASH_FlushCaches+0x88>)
 80062b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80062ba:	6013      	str	r3, [r2, #0]
  }
}
 80062bc:	bf00      	nop
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	40023c00 	.word	0x40023c00

080062cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b089      	sub	sp, #36	; 0x24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80062d6:	2300      	movs	r3, #0
 80062d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80062da:	2300      	movs	r3, #0
 80062dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80062de:	2300      	movs	r3, #0
 80062e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062e2:	2300      	movs	r3, #0
 80062e4:	61fb      	str	r3, [r7, #28]
 80062e6:	e159      	b.n	800659c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80062e8:	2201      	movs	r2, #1
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	fa02 f303 	lsl.w	r3, r2, r3
 80062f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	4013      	ands	r3, r2
 80062fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	429a      	cmp	r2, r3
 8006302:	f040 8148 	bne.w	8006596 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f003 0303 	and.w	r3, r3, #3
 800630e:	2b01      	cmp	r3, #1
 8006310:	d005      	beq.n	800631e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800631a:	2b02      	cmp	r3, #2
 800631c:	d130      	bne.n	8006380 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	005b      	lsls	r3, r3, #1
 8006328:	2203      	movs	r2, #3
 800632a:	fa02 f303 	lsl.w	r3, r2, r3
 800632e:	43db      	mvns	r3, r3
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	4013      	ands	r3, r2
 8006334:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	68da      	ldr	r2, [r3, #12]
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	005b      	lsls	r3, r3, #1
 800633e:	fa02 f303 	lsl.w	r3, r2, r3
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	4313      	orrs	r3, r2
 8006346:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006354:	2201      	movs	r2, #1
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	fa02 f303 	lsl.w	r3, r2, r3
 800635c:	43db      	mvns	r3, r3
 800635e:	69ba      	ldr	r2, [r7, #24]
 8006360:	4013      	ands	r3, r2
 8006362:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	091b      	lsrs	r3, r3, #4
 800636a:	f003 0201 	and.w	r2, r3, #1
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	fa02 f303 	lsl.w	r3, r2, r3
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	4313      	orrs	r3, r2
 8006378:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	69ba      	ldr	r2, [r7, #24]
 800637e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f003 0303 	and.w	r3, r3, #3
 8006388:	2b03      	cmp	r3, #3
 800638a:	d017      	beq.n	80063bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	005b      	lsls	r3, r3, #1
 8006396:	2203      	movs	r2, #3
 8006398:	fa02 f303 	lsl.w	r3, r2, r3
 800639c:	43db      	mvns	r3, r3
 800639e:	69ba      	ldr	r2, [r7, #24]
 80063a0:	4013      	ands	r3, r2
 80063a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	689a      	ldr	r2, [r3, #8]
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	fa02 f303 	lsl.w	r3, r2, r3
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	69ba      	ldr	r2, [r7, #24]
 80063ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	f003 0303 	and.w	r3, r3, #3
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d123      	bne.n	8006410 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	08da      	lsrs	r2, r3, #3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	3208      	adds	r2, #8
 80063d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	f003 0307 	and.w	r3, r3, #7
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	220f      	movs	r2, #15
 80063e0:	fa02 f303 	lsl.w	r3, r2, r3
 80063e4:	43db      	mvns	r3, r3
 80063e6:	69ba      	ldr	r2, [r7, #24]
 80063e8:	4013      	ands	r3, r2
 80063ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	691a      	ldr	r2, [r3, #16]
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	f003 0307 	and.w	r3, r3, #7
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	fa02 f303 	lsl.w	r3, r2, r3
 80063fc:	69ba      	ldr	r2, [r7, #24]
 80063fe:	4313      	orrs	r3, r2
 8006400:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	08da      	lsrs	r2, r3, #3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	3208      	adds	r2, #8
 800640a:	69b9      	ldr	r1, [r7, #24]
 800640c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	005b      	lsls	r3, r3, #1
 800641a:	2203      	movs	r2, #3
 800641c:	fa02 f303 	lsl.w	r3, r2, r3
 8006420:	43db      	mvns	r3, r3
 8006422:	69ba      	ldr	r2, [r7, #24]
 8006424:	4013      	ands	r3, r2
 8006426:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f003 0203 	and.w	r2, r3, #3
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	005b      	lsls	r3, r3, #1
 8006434:	fa02 f303 	lsl.w	r3, r2, r3
 8006438:	69ba      	ldr	r2, [r7, #24]
 800643a:	4313      	orrs	r3, r2
 800643c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	69ba      	ldr	r2, [r7, #24]
 8006442:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800644c:	2b00      	cmp	r3, #0
 800644e:	f000 80a2 	beq.w	8006596 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006452:	2300      	movs	r3, #0
 8006454:	60fb      	str	r3, [r7, #12]
 8006456:	4b57      	ldr	r3, [pc, #348]	; (80065b4 <HAL_GPIO_Init+0x2e8>)
 8006458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800645a:	4a56      	ldr	r2, [pc, #344]	; (80065b4 <HAL_GPIO_Init+0x2e8>)
 800645c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006460:	6453      	str	r3, [r2, #68]	; 0x44
 8006462:	4b54      	ldr	r3, [pc, #336]	; (80065b4 <HAL_GPIO_Init+0x2e8>)
 8006464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800646a:	60fb      	str	r3, [r7, #12]
 800646c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800646e:	4a52      	ldr	r2, [pc, #328]	; (80065b8 <HAL_GPIO_Init+0x2ec>)
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	089b      	lsrs	r3, r3, #2
 8006474:	3302      	adds	r3, #2
 8006476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800647a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	f003 0303 	and.w	r3, r3, #3
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	220f      	movs	r2, #15
 8006486:	fa02 f303 	lsl.w	r3, r2, r3
 800648a:	43db      	mvns	r3, r3
 800648c:	69ba      	ldr	r2, [r7, #24]
 800648e:	4013      	ands	r3, r2
 8006490:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a49      	ldr	r2, [pc, #292]	; (80065bc <HAL_GPIO_Init+0x2f0>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d019      	beq.n	80064ce <HAL_GPIO_Init+0x202>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a48      	ldr	r2, [pc, #288]	; (80065c0 <HAL_GPIO_Init+0x2f4>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d013      	beq.n	80064ca <HAL_GPIO_Init+0x1fe>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a47      	ldr	r2, [pc, #284]	; (80065c4 <HAL_GPIO_Init+0x2f8>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d00d      	beq.n	80064c6 <HAL_GPIO_Init+0x1fa>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a46      	ldr	r2, [pc, #280]	; (80065c8 <HAL_GPIO_Init+0x2fc>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d007      	beq.n	80064c2 <HAL_GPIO_Init+0x1f6>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a45      	ldr	r2, [pc, #276]	; (80065cc <HAL_GPIO_Init+0x300>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d101      	bne.n	80064be <HAL_GPIO_Init+0x1f2>
 80064ba:	2304      	movs	r3, #4
 80064bc:	e008      	b.n	80064d0 <HAL_GPIO_Init+0x204>
 80064be:	2307      	movs	r3, #7
 80064c0:	e006      	b.n	80064d0 <HAL_GPIO_Init+0x204>
 80064c2:	2303      	movs	r3, #3
 80064c4:	e004      	b.n	80064d0 <HAL_GPIO_Init+0x204>
 80064c6:	2302      	movs	r3, #2
 80064c8:	e002      	b.n	80064d0 <HAL_GPIO_Init+0x204>
 80064ca:	2301      	movs	r3, #1
 80064cc:	e000      	b.n	80064d0 <HAL_GPIO_Init+0x204>
 80064ce:	2300      	movs	r3, #0
 80064d0:	69fa      	ldr	r2, [r7, #28]
 80064d2:	f002 0203 	and.w	r2, r2, #3
 80064d6:	0092      	lsls	r2, r2, #2
 80064d8:	4093      	lsls	r3, r2
 80064da:	69ba      	ldr	r2, [r7, #24]
 80064dc:	4313      	orrs	r3, r2
 80064de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80064e0:	4935      	ldr	r1, [pc, #212]	; (80065b8 <HAL_GPIO_Init+0x2ec>)
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	089b      	lsrs	r3, r3, #2
 80064e6:	3302      	adds	r3, #2
 80064e8:	69ba      	ldr	r2, [r7, #24]
 80064ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80064ee:	4b38      	ldr	r3, [pc, #224]	; (80065d0 <HAL_GPIO_Init+0x304>)
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	43db      	mvns	r3, r3
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	4013      	ands	r3, r2
 80064fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800650a:	69ba      	ldr	r2, [r7, #24]
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	4313      	orrs	r3, r2
 8006510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006512:	4a2f      	ldr	r2, [pc, #188]	; (80065d0 <HAL_GPIO_Init+0x304>)
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006518:	4b2d      	ldr	r3, [pc, #180]	; (80065d0 <HAL_GPIO_Init+0x304>)
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	43db      	mvns	r3, r3
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	4013      	ands	r3, r2
 8006526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d003      	beq.n	800653c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006534:	69ba      	ldr	r2, [r7, #24]
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	4313      	orrs	r3, r2
 800653a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800653c:	4a24      	ldr	r2, [pc, #144]	; (80065d0 <HAL_GPIO_Init+0x304>)
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006542:	4b23      	ldr	r3, [pc, #140]	; (80065d0 <HAL_GPIO_Init+0x304>)
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	43db      	mvns	r3, r3
 800654c:	69ba      	ldr	r2, [r7, #24]
 800654e:	4013      	ands	r3, r2
 8006550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d003      	beq.n	8006566 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800655e:	69ba      	ldr	r2, [r7, #24]
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	4313      	orrs	r3, r2
 8006564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006566:	4a1a      	ldr	r2, [pc, #104]	; (80065d0 <HAL_GPIO_Init+0x304>)
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800656c:	4b18      	ldr	r3, [pc, #96]	; (80065d0 <HAL_GPIO_Init+0x304>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	43db      	mvns	r3, r3
 8006576:	69ba      	ldr	r2, [r7, #24]
 8006578:	4013      	ands	r3, r2
 800657a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006584:	2b00      	cmp	r3, #0
 8006586:	d003      	beq.n	8006590 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006588:	69ba      	ldr	r2, [r7, #24]
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	4313      	orrs	r3, r2
 800658e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006590:	4a0f      	ldr	r2, [pc, #60]	; (80065d0 <HAL_GPIO_Init+0x304>)
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	3301      	adds	r3, #1
 800659a:	61fb      	str	r3, [r7, #28]
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	2b0f      	cmp	r3, #15
 80065a0:	f67f aea2 	bls.w	80062e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80065a4:	bf00      	nop
 80065a6:	bf00      	nop
 80065a8:	3724      	adds	r7, #36	; 0x24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	40023800 	.word	0x40023800
 80065b8:	40013800 	.word	0x40013800
 80065bc:	40020000 	.word	0x40020000
 80065c0:	40020400 	.word	0x40020400
 80065c4:	40020800 	.word	0x40020800
 80065c8:	40020c00 	.word	0x40020c00
 80065cc:	40021000 	.word	0x40021000
 80065d0:	40013c00 	.word	0x40013c00

080065d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	460b      	mov	r3, r1
 80065de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	691a      	ldr	r2, [r3, #16]
 80065e4:	887b      	ldrh	r3, [r7, #2]
 80065e6:	4013      	ands	r3, r2
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d002      	beq.n	80065f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80065ec:	2301      	movs	r3, #1
 80065ee:	73fb      	strb	r3, [r7, #15]
 80065f0:	e001      	b.n	80065f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80065f2:	2300      	movs	r3, #0
 80065f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80065f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3714      	adds	r7, #20
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	460b      	mov	r3, r1
 800660e:	807b      	strh	r3, [r7, #2]
 8006610:	4613      	mov	r3, r2
 8006612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006614:	787b      	ldrb	r3, [r7, #1]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d003      	beq.n	8006622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800661a:	887a      	ldrh	r2, [r7, #2]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006620:	e003      	b.n	800662a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006622:	887b      	ldrh	r3, [r7, #2]
 8006624:	041a      	lsls	r2, r3, #16
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	619a      	str	r2, [r3, #24]
}
 800662a:	bf00      	nop
 800662c:	370c      	adds	r7, #12
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
	...

08006638 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d101      	bne.n	800664a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e171      	b.n	800692e <HAL_I2C_Init+0x2f6>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b00      	cmp	r3, #0
 8006654:	d12c      	bne.n	80066b0 <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a77      	ldr	r2, [pc, #476]	; (8006840 <HAL_I2C_Init+0x208>)
 8006662:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a77      	ldr	r2, [pc, #476]	; (8006844 <HAL_I2C_Init+0x20c>)
 8006668:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a76      	ldr	r2, [pc, #472]	; (8006848 <HAL_I2C_Init+0x210>)
 800666e:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a76      	ldr	r2, [pc, #472]	; (800684c <HAL_I2C_Init+0x214>)
 8006674:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a75      	ldr	r2, [pc, #468]	; (8006850 <HAL_I2C_Init+0x218>)
 800667a:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a75      	ldr	r2, [pc, #468]	; (8006854 <HAL_I2C_Init+0x21c>)
 8006680:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a74      	ldr	r2, [pc, #464]	; (8006858 <HAL_I2C_Init+0x220>)
 8006686:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a74      	ldr	r2, [pc, #464]	; (800685c <HAL_I2C_Init+0x224>)
 800668c:	671a      	str	r2, [r3, #112]	; 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a73      	ldr	r2, [pc, #460]	; (8006860 <HAL_I2C_Init+0x228>)
 8006692:	675a      	str	r2, [r3, #116]	; 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a73      	ldr	r2, [pc, #460]	; (8006864 <HAL_I2C_Init+0x22c>)
 8006698:	679a      	str	r2, [r3, #120]	; 0x78

    if (hi2c->MspInitCallback == NULL)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d102      	bne.n	80066a8 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a70      	ldr	r2, [pc, #448]	; (8006868 <HAL_I2C_Init+0x230>)
 80066a6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2224      	movs	r2, #36	; 0x24
 80066b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f022 0201 	bic.w	r2, r2, #1
 80066c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80066e8:	f002 fdac 	bl	8009244 <HAL_RCC_GetPCLK1Freq>
 80066ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	4a5e      	ldr	r2, [pc, #376]	; (800686c <HAL_I2C_Init+0x234>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d807      	bhi.n	8006708 <HAL_I2C_Init+0xd0>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4a5d      	ldr	r2, [pc, #372]	; (8006870 <HAL_I2C_Init+0x238>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	bf94      	ite	ls
 8006700:	2301      	movls	r3, #1
 8006702:	2300      	movhi	r3, #0
 8006704:	b2db      	uxtb	r3, r3
 8006706:	e006      	b.n	8006716 <HAL_I2C_Init+0xde>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	4a5a      	ldr	r2, [pc, #360]	; (8006874 <HAL_I2C_Init+0x23c>)
 800670c:	4293      	cmp	r3, r2
 800670e:	bf94      	ite	ls
 8006710:	2301      	movls	r3, #1
 8006712:	2300      	movhi	r3, #0
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <HAL_I2C_Init+0xe6>
  {
    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e107      	b.n	800692e <HAL_I2C_Init+0x2f6>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	4a55      	ldr	r2, [pc, #340]	; (8006878 <HAL_I2C_Init+0x240>)
 8006722:	fba2 2303 	umull	r2, r3, r2, r3
 8006726:	0c9b      	lsrs	r3, r3, #18
 8006728:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68ba      	ldr	r2, [r7, #8]
 800673a:	430a      	orrs	r2, r1
 800673c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	6a1b      	ldr	r3, [r3, #32]
 8006744:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	4a47      	ldr	r2, [pc, #284]	; (800686c <HAL_I2C_Init+0x234>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d802      	bhi.n	8006758 <HAL_I2C_Init+0x120>
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	3301      	adds	r3, #1
 8006756:	e009      	b.n	800676c <HAL_I2C_Init+0x134>
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800675e:	fb02 f303 	mul.w	r3, r2, r3
 8006762:	4a46      	ldr	r2, [pc, #280]	; (800687c <HAL_I2C_Init+0x244>)
 8006764:	fba2 2303 	umull	r2, r3, r2, r3
 8006768:	099b      	lsrs	r3, r3, #6
 800676a:	3301      	adds	r3, #1
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	6812      	ldr	r2, [r2, #0]
 8006770:	430b      	orrs	r3, r1
 8006772:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	69db      	ldr	r3, [r3, #28]
 800677a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800677e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	4939      	ldr	r1, [pc, #228]	; (800686c <HAL_I2C_Init+0x234>)
 8006788:	428b      	cmp	r3, r1
 800678a:	d819      	bhi.n	80067c0 <HAL_I2C_Init+0x188>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	1e59      	subs	r1, r3, #1
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	005b      	lsls	r3, r3, #1
 8006796:	fbb1 f3f3 	udiv	r3, r1, r3
 800679a:	1c59      	adds	r1, r3, #1
 800679c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80067a0:	400b      	ands	r3, r1
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00a      	beq.n	80067bc <HAL_I2C_Init+0x184>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	1e59      	subs	r1, r3, #1
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	005b      	lsls	r3, r3, #1
 80067b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80067b4:	3301      	adds	r3, #1
 80067b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067ba:	e071      	b.n	80068a0 <HAL_I2C_Init+0x268>
 80067bc:	2304      	movs	r3, #4
 80067be:	e06f      	b.n	80068a0 <HAL_I2C_Init+0x268>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d111      	bne.n	80067ec <HAL_I2C_Init+0x1b4>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	1e58      	subs	r0, r3, #1
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6859      	ldr	r1, [r3, #4]
 80067d0:	460b      	mov	r3, r1
 80067d2:	005b      	lsls	r3, r3, #1
 80067d4:	440b      	add	r3, r1
 80067d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80067da:	3301      	adds	r3, #1
 80067dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	bf0c      	ite	eq
 80067e4:	2301      	moveq	r3, #1
 80067e6:	2300      	movne	r3, #0
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	e012      	b.n	8006812 <HAL_I2C_Init+0x1da>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	1e58      	subs	r0, r3, #1
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6859      	ldr	r1, [r3, #4]
 80067f4:	460b      	mov	r3, r1
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	440b      	add	r3, r1
 80067fa:	0099      	lsls	r1, r3, #2
 80067fc:	440b      	add	r3, r1
 80067fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8006802:	3301      	adds	r3, #1
 8006804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006808:	2b00      	cmp	r3, #0
 800680a:	bf0c      	ite	eq
 800680c:	2301      	moveq	r3, #1
 800680e:	2300      	movne	r3, #0
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d001      	beq.n	800681a <HAL_I2C_Init+0x1e2>
 8006816:	2301      	movs	r3, #1
 8006818:	e042      	b.n	80068a0 <HAL_I2C_Init+0x268>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d12e      	bne.n	8006880 <HAL_I2C_Init+0x248>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	1e58      	subs	r0, r3, #1
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6859      	ldr	r1, [r3, #4]
 800682a:	460b      	mov	r3, r1
 800682c:	005b      	lsls	r3, r3, #1
 800682e:	440b      	add	r3, r1
 8006830:	fbb0 f3f3 	udiv	r3, r0, r3
 8006834:	3301      	adds	r3, #1
 8006836:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800683a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800683e:	e02f      	b.n	80068a0 <HAL_I2C_Init+0x268>
 8006840:	08006f65 	.word	0x08006f65
 8006844:	08006f79 	.word	0x08006f79
 8006848:	08006f8d 	.word	0x08006f8d
 800684c:	08006fa1 	.word	0x08006fa1
 8006850:	08006fd1 	.word	0x08006fd1
 8006854:	08006fe5 	.word	0x08006fe5
 8006858:	08006ff9 	.word	0x08006ff9
 800685c:	0800700d 	.word	0x0800700d
 8006860:	08007021 	.word	0x08007021
 8006864:	08006fb5 	.word	0x08006fb5
 8006868:	08003b45 	.word	0x08003b45
 800686c:	000186a0 	.word	0x000186a0
 8006870:	001e847f 	.word	0x001e847f
 8006874:	003d08ff 	.word	0x003d08ff
 8006878:	431bde83 	.word	0x431bde83
 800687c:	10624dd3 	.word	0x10624dd3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	1e58      	subs	r0, r3, #1
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6859      	ldr	r1, [r3, #4]
 8006888:	460b      	mov	r3, r1
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	440b      	add	r3, r1
 800688e:	0099      	lsls	r1, r3, #2
 8006890:	440b      	add	r3, r1
 8006892:	fbb0 f3f3 	udiv	r3, r0, r3
 8006896:	3301      	adds	r3, #1
 8006898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800689c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068a0:	6879      	ldr	r1, [r7, #4]
 80068a2:	6809      	ldr	r1, [r1, #0]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	69da      	ldr	r2, [r3, #28]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	431a      	orrs	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	430a      	orrs	r2, r1
 80068c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80068ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	6911      	ldr	r1, [r2, #16]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	68d2      	ldr	r2, [r2, #12]
 80068da:	4311      	orrs	r1, r2
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	6812      	ldr	r2, [r2, #0]
 80068e0:	430b      	orrs	r3, r1
 80068e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	695a      	ldr	r2, [r3, #20]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	431a      	orrs	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	430a      	orrs	r2, r1
 80068fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f042 0201 	orr.w	r2, r2, #1
 800690e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2220      	movs	r2, #32
 800691a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop

08006938 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b088      	sub	sp, #32
 800693c:	af02      	add	r7, sp, #8
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	607a      	str	r2, [r7, #4]
 8006942:	461a      	mov	r2, r3
 8006944:	460b      	mov	r3, r1
 8006946:	817b      	strh	r3, [r7, #10]
 8006948:	4613      	mov	r3, r2
 800694a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800694c:	f7fe f888 	bl	8004a60 <HAL_GetTick>
 8006950:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b20      	cmp	r3, #32
 800695c:	f040 80e0 	bne.w	8006b20 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	2319      	movs	r3, #25
 8006966:	2201      	movs	r2, #1
 8006968:	4970      	ldr	r1, [pc, #448]	; (8006b2c <HAL_I2C_Master_Transmit+0x1f4>)
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f001 fe0c 	bl	8008588 <I2C_WaitOnFlagUntilTimeout>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006976:	2302      	movs	r3, #2
 8006978:	e0d3      	b.n	8006b22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006980:	2b01      	cmp	r3, #1
 8006982:	d101      	bne.n	8006988 <HAL_I2C_Master_Transmit+0x50>
 8006984:	2302      	movs	r3, #2
 8006986:	e0cc      	b.n	8006b22 <HAL_I2C_Master_Transmit+0x1ea>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	2b01      	cmp	r3, #1
 800699c:	d007      	beq.n	80069ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f042 0201 	orr.w	r2, r2, #1
 80069ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2221      	movs	r2, #33	; 0x21
 80069c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2210      	movs	r2, #16
 80069ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	893a      	ldrh	r2, [r7, #8]
 80069de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	4a50      	ldr	r2, [pc, #320]	; (8006b30 <HAL_I2C_Master_Transmit+0x1f8>)
 80069ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80069f0:	8979      	ldrh	r1, [r7, #10]
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	6a3a      	ldr	r2, [r7, #32]
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f001 fc9a 	bl	8008330 <I2C_MasterRequestWrite>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d001      	beq.n	8006a06 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e08d      	b.n	8006b22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a06:	2300      	movs	r3, #0
 8006a08:	613b      	str	r3, [r7, #16]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	695b      	ldr	r3, [r3, #20]
 8006a10:	613b      	str	r3, [r7, #16]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	699b      	ldr	r3, [r3, #24]
 8006a18:	613b      	str	r3, [r7, #16]
 8006a1a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006a1c:	e066      	b.n	8006aec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a1e:	697a      	ldr	r2, [r7, #20]
 8006a20:	6a39      	ldr	r1, [r7, #32]
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f001 fe86 	bl	8008734 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00d      	beq.n	8006a4a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a32:	2b04      	cmp	r3, #4
 8006a34:	d107      	bne.n	8006a46 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e06b      	b.n	8006b22 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4e:	781a      	ldrb	r2, [r3, #0]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5a:	1c5a      	adds	r2, r3, #1
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	3b01      	subs	r3, #1
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a72:	3b01      	subs	r3, #1
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	f003 0304 	and.w	r3, r3, #4
 8006a84:	2b04      	cmp	r3, #4
 8006a86:	d11b      	bne.n	8006ac0 <HAL_I2C_Master_Transmit+0x188>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d017      	beq.n	8006ac0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a94:	781a      	ldrb	r2, [r3, #0]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa0:	1c5a      	adds	r2, r3, #1
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	3b01      	subs	r3, #1
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	6a39      	ldr	r1, [r7, #32]
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f001 fe76 	bl	80087b6 <I2C_WaitOnBTFFlagUntilTimeout>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00d      	beq.n	8006aec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad4:	2b04      	cmp	r3, #4
 8006ad6:	d107      	bne.n	8006ae8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ae6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e01a      	b.n	8006b22 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d194      	bne.n	8006a1e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2220      	movs	r2, #32
 8006b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	e000      	b.n	8006b22 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006b20:	2302      	movs	r3, #2
  }
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3718      	adds	r7, #24
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	00100002 	.word	0x00100002
 8006b30:	ffff0000 	.word	0xffff0000

08006b34 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b088      	sub	sp, #32
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b54:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b5c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006b5e:	7bfb      	ldrb	r3, [r7, #15]
 8006b60:	2b10      	cmp	r3, #16
 8006b62:	d003      	beq.n	8006b6c <HAL_I2C_EV_IRQHandler+0x38>
 8006b64:	7bfb      	ldrb	r3, [r7, #15]
 8006b66:	2b40      	cmp	r3, #64	; 0x40
 8006b68:	f040 80c1 	bne.w	8006cee <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10d      	bne.n	8006ba2 <HAL_I2C_EV_IRQHandler+0x6e>
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006b8c:	d003      	beq.n	8006b96 <HAL_I2C_EV_IRQHandler+0x62>
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006b94:	d101      	bne.n	8006b9a <HAL_I2C_EV_IRQHandler+0x66>
 8006b96:	2301      	movs	r3, #1
 8006b98:	e000      	b.n	8006b9c <HAL_I2C_EV_IRQHandler+0x68>
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	f000 8132 	beq.w	8006e06 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	f003 0301 	and.w	r3, r3, #1
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00c      	beq.n	8006bc6 <HAL_I2C_EV_IRQHandler+0x92>
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	0a5b      	lsrs	r3, r3, #9
 8006bb0:	f003 0301 	and.w	r3, r3, #1
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d006      	beq.n	8006bc6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f001 fe9e 	bl	80088fa <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 fd8f 	bl	80076e2 <I2C_Master_SB>
 8006bc4:	e092      	b.n	8006cec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	08db      	lsrs	r3, r3, #3
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d009      	beq.n	8006be6 <HAL_I2C_EV_IRQHandler+0xb2>
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	0a5b      	lsrs	r3, r3, #9
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d003      	beq.n	8006be6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 fe05 	bl	80077ee <I2C_Master_ADD10>
 8006be4:	e082      	b.n	8006cec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	085b      	lsrs	r3, r3, #1
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d009      	beq.n	8006c06 <HAL_I2C_EV_IRQHandler+0xd2>
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	0a5b      	lsrs	r3, r3, #9
 8006bf6:	f003 0301 	and.w	r3, r3, #1
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d003      	beq.n	8006c06 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 fe1f 	bl	8007842 <I2C_Master_ADDR>
 8006c04:	e072      	b.n	8006cec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	089b      	lsrs	r3, r3, #2
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d03b      	beq.n	8006c8a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c20:	f000 80f3 	beq.w	8006e0a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	09db      	lsrs	r3, r3, #7
 8006c28:	f003 0301 	and.w	r3, r3, #1
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00f      	beq.n	8006c50 <HAL_I2C_EV_IRQHandler+0x11c>
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	0a9b      	lsrs	r3, r3, #10
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d009      	beq.n	8006c50 <HAL_I2C_EV_IRQHandler+0x11c>
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	089b      	lsrs	r3, r3, #2
 8006c40:	f003 0301 	and.w	r3, r3, #1
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d103      	bne.n	8006c50 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 f9f3 	bl	8007034 <I2C_MasterTransmit_TXE>
 8006c4e:	e04d      	b.n	8006cec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	089b      	lsrs	r3, r3, #2
 8006c54:	f003 0301 	and.w	r3, r3, #1
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 80d6 	beq.w	8006e0a <HAL_I2C_EV_IRQHandler+0x2d6>
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	0a5b      	lsrs	r3, r3, #9
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	f000 80cf 	beq.w	8006e0a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006c6c:	7bbb      	ldrb	r3, [r7, #14]
 8006c6e:	2b21      	cmp	r3, #33	; 0x21
 8006c70:	d103      	bne.n	8006c7a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fa7d 	bl	8007172 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c78:	e0c7      	b.n	8006e0a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006c7a:	7bfb      	ldrb	r3, [r7, #15]
 8006c7c:	2b40      	cmp	r3, #64	; 0x40
 8006c7e:	f040 80c4 	bne.w	8006e0a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 faee 	bl	8007264 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c88:	e0bf      	b.n	8006e0a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c98:	f000 80b7 	beq.w	8006e0a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	099b      	lsrs	r3, r3, #6
 8006ca0:	f003 0301 	and.w	r3, r3, #1
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00f      	beq.n	8006cc8 <HAL_I2C_EV_IRQHandler+0x194>
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	0a9b      	lsrs	r3, r3, #10
 8006cac:	f003 0301 	and.w	r3, r3, #1
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d009      	beq.n	8006cc8 <HAL_I2C_EV_IRQHandler+0x194>
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	089b      	lsrs	r3, r3, #2
 8006cb8:	f003 0301 	and.w	r3, r3, #1
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d103      	bne.n	8006cc8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fb64 	bl	800738e <I2C_MasterReceive_RXNE>
 8006cc6:	e011      	b.n	8006cec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	089b      	lsrs	r3, r3, #2
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f000 809a 	beq.w	8006e0a <HAL_I2C_EV_IRQHandler+0x2d6>
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	0a5b      	lsrs	r3, r3, #9
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f000 8093 	beq.w	8006e0a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 fc10 	bl	800750a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006cea:	e08e      	b.n	8006e0a <HAL_I2C_EV_IRQHandler+0x2d6>
 8006cec:	e08d      	b.n	8006e0a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d004      	beq.n	8006d00 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	61fb      	str	r3, [r7, #28]
 8006cfe:	e007      	b.n	8006d10 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	695b      	ldr	r3, [r3, #20]
 8006d0e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	085b      	lsrs	r3, r3, #1
 8006d14:	f003 0301 	and.w	r3, r3, #1
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d012      	beq.n	8006d42 <HAL_I2C_EV_IRQHandler+0x20e>
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	0a5b      	lsrs	r3, r3, #9
 8006d20:	f003 0301 	and.w	r3, r3, #1
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00c      	beq.n	8006d42 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d003      	beq.n	8006d38 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006d38:	69b9      	ldr	r1, [r7, #24]
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 ffd2 	bl	8007ce4 <I2C_Slave_ADDR>
 8006d40:	e066      	b.n	8006e10 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	091b      	lsrs	r3, r3, #4
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d009      	beq.n	8006d62 <HAL_I2C_EV_IRQHandler+0x22e>
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	0a5b      	lsrs	r3, r3, #9
 8006d52:	f003 0301 	and.w	r3, r3, #1
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d003      	beq.n	8006d62 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f001 f80c 	bl	8007d78 <I2C_Slave_STOPF>
 8006d60:	e056      	b.n	8006e10 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006d62:	7bbb      	ldrb	r3, [r7, #14]
 8006d64:	2b21      	cmp	r3, #33	; 0x21
 8006d66:	d002      	beq.n	8006d6e <HAL_I2C_EV_IRQHandler+0x23a>
 8006d68:	7bbb      	ldrb	r3, [r7, #14]
 8006d6a:	2b29      	cmp	r3, #41	; 0x29
 8006d6c:	d125      	bne.n	8006dba <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	09db      	lsrs	r3, r3, #7
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00f      	beq.n	8006d9a <HAL_I2C_EV_IRQHandler+0x266>
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	0a9b      	lsrs	r3, r3, #10
 8006d7e:	f003 0301 	and.w	r3, r3, #1
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d009      	beq.n	8006d9a <HAL_I2C_EV_IRQHandler+0x266>
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	089b      	lsrs	r3, r3, #2
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d103      	bne.n	8006d9a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fee6 	bl	8007b64 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006d98:	e039      	b.n	8006e0e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	089b      	lsrs	r3, r3, #2
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d033      	beq.n	8006e0e <HAL_I2C_EV_IRQHandler+0x2da>
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	0a5b      	lsrs	r3, r3, #9
 8006daa:	f003 0301 	and.w	r3, r3, #1
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d02d      	beq.n	8006e0e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 ff14 	bl	8007be0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006db8:	e029      	b.n	8006e0e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	099b      	lsrs	r3, r3, #6
 8006dbe:	f003 0301 	and.w	r3, r3, #1
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00f      	beq.n	8006de6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	0a9b      	lsrs	r3, r3, #10
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d009      	beq.n	8006de6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	089b      	lsrs	r3, r3, #2
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d103      	bne.n	8006de6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 ff1f 	bl	8007c22 <I2C_SlaveReceive_RXNE>
 8006de4:	e014      	b.n	8006e10 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	089b      	lsrs	r3, r3, #2
 8006dea:	f003 0301 	and.w	r3, r3, #1
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00e      	beq.n	8006e10 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	0a5b      	lsrs	r3, r3, #9
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d008      	beq.n	8006e10 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 ff4e 	bl	8007ca0 <I2C_SlaveReceive_BTF>
 8006e04:	e004      	b.n	8006e10 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006e06:	bf00      	nop
 8006e08:	e002      	b.n	8006e10 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e0a:	bf00      	nop
 8006e0c:	e000      	b.n	8006e10 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e0e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006e10:	3720      	adds	r7, #32
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b08a      	sub	sp, #40	; 0x28
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e38:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006e3a:	6a3b      	ldr	r3, [r7, #32]
 8006e3c:	0a1b      	lsrs	r3, r3, #8
 8006e3e:	f003 0301 	and.w	r3, r3, #1
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00e      	beq.n	8006e64 <HAL_I2C_ER_IRQHandler+0x4e>
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	0a1b      	lsrs	r3, r3, #8
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d008      	beq.n	8006e64 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e54:	f043 0301 	orr.w	r3, r3, #1
 8006e58:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006e62:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006e64:	6a3b      	ldr	r3, [r7, #32]
 8006e66:	0a5b      	lsrs	r3, r3, #9
 8006e68:	f003 0301 	and.w	r3, r3, #1
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00e      	beq.n	8006e8e <HAL_I2C_ER_IRQHandler+0x78>
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	0a1b      	lsrs	r3, r3, #8
 8006e74:	f003 0301 	and.w	r3, r3, #1
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d008      	beq.n	8006e8e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7e:	f043 0302 	orr.w	r3, r3, #2
 8006e82:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006e8c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006e8e:	6a3b      	ldr	r3, [r7, #32]
 8006e90:	0a9b      	lsrs	r3, r3, #10
 8006e92:	f003 0301 	and.w	r3, r3, #1
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d03f      	beq.n	8006f1a <HAL_I2C_ER_IRQHandler+0x104>
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	0a1b      	lsrs	r3, r3, #8
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d039      	beq.n	8006f1a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006ea6:	7efb      	ldrb	r3, [r7, #27]
 8006ea8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eb8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ebe:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006ec0:	7ebb      	ldrb	r3, [r7, #26]
 8006ec2:	2b20      	cmp	r3, #32
 8006ec4:	d112      	bne.n	8006eec <HAL_I2C_ER_IRQHandler+0xd6>
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10f      	bne.n	8006eec <HAL_I2C_ER_IRQHandler+0xd6>
 8006ecc:	7cfb      	ldrb	r3, [r7, #19]
 8006ece:	2b21      	cmp	r3, #33	; 0x21
 8006ed0:	d008      	beq.n	8006ee4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006ed2:	7cfb      	ldrb	r3, [r7, #19]
 8006ed4:	2b29      	cmp	r3, #41	; 0x29
 8006ed6:	d005      	beq.n	8006ee4 <HAL_I2C_ER_IRQHandler+0xce>
 8006ed8:	7cfb      	ldrb	r3, [r7, #19]
 8006eda:	2b28      	cmp	r3, #40	; 0x28
 8006edc:	d106      	bne.n	8006eec <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2b21      	cmp	r3, #33	; 0x21
 8006ee2:	d103      	bne.n	8006eec <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f001 f87b 	bl	8007fe0 <I2C_Slave_AF>
 8006eea:	e016      	b.n	8006f1a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ef4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef8:	f043 0304 	orr.w	r3, r3, #4
 8006efc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006efe:	7efb      	ldrb	r3, [r7, #27]
 8006f00:	2b10      	cmp	r3, #16
 8006f02:	d002      	beq.n	8006f0a <HAL_I2C_ER_IRQHandler+0xf4>
 8006f04:	7efb      	ldrb	r3, [r7, #27]
 8006f06:	2b40      	cmp	r3, #64	; 0x40
 8006f08:	d107      	bne.n	8006f1a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f18:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006f1a:	6a3b      	ldr	r3, [r7, #32]
 8006f1c:	0adb      	lsrs	r3, r3, #11
 8006f1e:	f003 0301 	and.w	r3, r3, #1
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00e      	beq.n	8006f44 <HAL_I2C_ER_IRQHandler+0x12e>
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	0a1b      	lsrs	r3, r3, #8
 8006f2a:	f003 0301 	and.w	r3, r3, #1
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d008      	beq.n	8006f44 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f34:	f043 0308 	orr.w	r3, r3, #8
 8006f38:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006f42:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d008      	beq.n	8006f5c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	431a      	orrs	r2, r3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f001 f8b4 	bl	80080c4 <I2C_ITError>
  }
}
 8006f5c:	bf00      	nop
 8006f5e:	3728      	adds	r7, #40	; 0x28
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	70fb      	strb	r3, [r7, #3]
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006fc4:	bf00      	nop
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006fd8:	bf00      	nop
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006fec:	bf00      	nop
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007000:	bf00      	nop
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007014:	bf00      	nop
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007042:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800704a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007050:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007056:	2b00      	cmp	r3, #0
 8007058:	d153      	bne.n	8007102 <I2C_MasterTransmit_TXE+0xce>
 800705a:	7bfb      	ldrb	r3, [r7, #15]
 800705c:	2b21      	cmp	r3, #33	; 0x21
 800705e:	d150      	bne.n	8007102 <I2C_MasterTransmit_TXE+0xce>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	2b08      	cmp	r3, #8
 8007064:	d01e      	beq.n	80070a4 <I2C_MasterTransmit_TXE+0x70>
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	2b20      	cmp	r3, #32
 800706a:	d01b      	beq.n	80070a4 <I2C_MasterTransmit_TXE+0x70>
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007072:	d017      	beq.n	80070a4 <I2C_MasterTransmit_TXE+0x70>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	685a      	ldr	r2, [r3, #4]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007082:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2211      	movs	r2, #17
 8007088:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2220      	movs	r2, #32
 8007096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80070a2:	e062      	b.n	800716a <I2C_MasterTransmit_TXE+0x136>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	685a      	ldr	r2, [r3, #4]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070b2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070c2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2220      	movs	r2, #32
 80070ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	2b40      	cmp	r3, #64	; 0x40
 80070dc:	d108      	bne.n	80070f0 <I2C_MasterTransmit_TXE+0xbc>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80070ee:	e03c      	b.n	800716a <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MemTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007100:	e033      	b.n	800716a <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MasterTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007102:	7bfb      	ldrb	r3, [r7, #15]
 8007104:	2b21      	cmp	r3, #33	; 0x21
 8007106:	d005      	beq.n	8007114 <I2C_MasterTransmit_TXE+0xe0>
 8007108:	7bbb      	ldrb	r3, [r7, #14]
 800710a:	2b40      	cmp	r3, #64	; 0x40
 800710c:	d12d      	bne.n	800716a <I2C_MasterTransmit_TXE+0x136>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800710e:	7bfb      	ldrb	r3, [r7, #15]
 8007110:	2b22      	cmp	r3, #34	; 0x22
 8007112:	d12a      	bne.n	800716a <I2C_MasterTransmit_TXE+0x136>
  {
    if (hi2c->XferCount == 0U)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007118:	b29b      	uxth	r3, r3
 800711a:	2b00      	cmp	r3, #0
 800711c:	d108      	bne.n	8007130 <I2C_MasterTransmit_TXE+0xfc>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	685a      	ldr	r2, [r3, #4]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800712c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800712e:	e01c      	b.n	800716a <I2C_MasterTransmit_TXE+0x136>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007136:	b2db      	uxtb	r3, r3
 8007138:	2b40      	cmp	r3, #64	; 0x40
 800713a:	d103      	bne.n	8007144 <I2C_MasterTransmit_TXE+0x110>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 f891 	bl	8007264 <I2C_MemoryTransmit_TXE_BTF>
}
 8007142:	e012      	b.n	800716a <I2C_MasterTransmit_TXE+0x136>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007148:	781a      	ldrb	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007154:	1c5a      	adds	r2, r3, #1
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800715e:	b29b      	uxth	r3, r3
 8007160:	3b01      	subs	r3, #1
 8007162:	b29a      	uxth	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007168:	e7ff      	b.n	800716a <I2C_MasterTransmit_TXE+0x136>
 800716a:	bf00      	nop
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b084      	sub	sp, #16
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007186:	b2db      	uxtb	r3, r3
 8007188:	2b21      	cmp	r3, #33	; 0x21
 800718a:	d167      	bne.n	800725c <I2C_MasterTransmit_BTF+0xea>
  {
    if (hi2c->XferCount != 0U)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007190:	b29b      	uxth	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	d012      	beq.n	80071bc <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719a:	781a      	ldrb	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a6:	1c5a      	adds	r2, r3, #1
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	3b01      	subs	r3, #1
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80071ba:	e04f      	b.n	800725c <I2C_MasterTransmit_BTF+0xea>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2b08      	cmp	r3, #8
 80071c0:	d01e      	beq.n	8007200 <I2C_MasterTransmit_BTF+0x8e>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2b20      	cmp	r3, #32
 80071c6:	d01b      	beq.n	8007200 <I2C_MasterTransmit_BTF+0x8e>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80071ce:	d017      	beq.n	8007200 <I2C_MasterTransmit_BTF+0x8e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	685a      	ldr	r2, [r3, #4]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80071de:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2211      	movs	r2, #17
 80071e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2220      	movs	r2, #32
 80071f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->MasterTxCpltCallback(hi2c);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	4798      	blx	r3
}
 80071fe:	e02d      	b.n	800725c <I2C_MasterTransmit_BTF+0xea>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	685a      	ldr	r2, [r3, #4]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800720e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800721e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2220      	movs	r2, #32
 800722a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007234:	b2db      	uxtb	r3, r3
 8007236:	2b40      	cmp	r3, #64	; 0x40
 8007238:	d108      	bne.n	800724c <I2C_MasterTransmit_BTF+0xda>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MemTxCpltCallback(hi2c);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	4798      	blx	r3
}
 800724a:	e007      	b.n	800725c <I2C_MasterTransmit_BTF+0xea>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MasterTxCpltCallback(hi2c);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	4798      	blx	r3
}
 800725c:	bf00      	nop
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007272:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007278:	2b00      	cmp	r3, #0
 800727a:	d11d      	bne.n	80072b8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007280:	2b01      	cmp	r3, #1
 8007282:	d10b      	bne.n	800729c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007288:	b2da      	uxtb	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007294:	1c9a      	adds	r2, r3, #2
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800729a:	e074      	b.n	8007386 <I2C_MemoryTransmit_TXE_BTF+0x122>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	121b      	asrs	r3, r3, #8
 80072a4:	b2da      	uxtb	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072b0:	1c5a      	adds	r2, r3, #1
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80072b6:	e066      	b.n	8007386 <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 1U)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d10b      	bne.n	80072d8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072c4:	b2da      	uxtb	r2, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072d0:	1c5a      	adds	r2, r3, #1
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80072d6:	e056      	b.n	8007386 <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 2U)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d152      	bne.n	8007386 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80072e0:	7bfb      	ldrb	r3, [r7, #15]
 80072e2:	2b22      	cmp	r3, #34	; 0x22
 80072e4:	d10d      	bne.n	8007302 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072f4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072fa:	1c5a      	adds	r2, r3, #1
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007300:	e041      	b.n	8007386 <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007306:	b29b      	uxth	r3, r3
 8007308:	2b00      	cmp	r3, #0
 800730a:	d015      	beq.n	8007338 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800730c:	7bfb      	ldrb	r3, [r7, #15]
 800730e:	2b21      	cmp	r3, #33	; 0x21
 8007310:	d112      	bne.n	8007338 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007316:	781a      	ldrb	r2, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007322:	1c5a      	adds	r2, r3, #1
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800732c:	b29b      	uxth	r3, r3
 800732e:	3b01      	subs	r3, #1
 8007330:	b29a      	uxth	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007336:	e026      	b.n	8007386 <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800733c:	b29b      	uxth	r3, r3
 800733e:	2b00      	cmp	r3, #0
 8007340:	d121      	bne.n	8007386 <I2C_MemoryTransmit_TXE_BTF+0x122>
 8007342:	7bfb      	ldrb	r3, [r7, #15]
 8007344:	2b21      	cmp	r3, #33	; 0x21
 8007346:	d11e      	bne.n	8007386 <I2C_MemoryTransmit_TXE_BTF+0x122>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	685a      	ldr	r2, [r3, #4]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007356:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007366:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2220      	movs	r2, #32
 8007372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->MemTxCpltCallback(hi2c);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	4798      	blx	r3
}
 8007386:	bf00      	nop
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}

0800738e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b084      	sub	sp, #16
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b22      	cmp	r3, #34	; 0x22
 80073a0:	f040 80af 	bne.w	8007502 <I2C_MasterReceive_RXNE+0x174>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2b03      	cmp	r3, #3
 80073b0:	d921      	bls.n	80073f6 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	691a      	ldr	r2, [r3, #16]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073bc:	b2d2      	uxtb	r2, r2
 80073be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c4:	1c5a      	adds	r2, r3, #1
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	3b01      	subs	r3, #1
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073dc:	b29b      	uxth	r3, r3
 80073de:	2b03      	cmp	r3, #3
 80073e0:	f040 808f 	bne.w	8007502 <I2C_MasterReceive_RXNE+0x174>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	685a      	ldr	r2, [r3, #4]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073f2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80073f4:	e085      	b.n	8007502 <I2C_MasterReceive_RXNE+0x174>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d078      	beq.n	80074f0 <I2C_MasterReceive_RXNE+0x162>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d002      	beq.n	800740a <I2C_MasterReceive_RXNE+0x7c>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d172      	bne.n	80074f0 <I2C_MasterReceive_RXNE+0x162>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f001 fa14 	bl	8008838 <I2C_WaitOnSTOPRequestThroughIT>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d144      	bne.n	80074a0 <I2C_MasterReceive_RXNE+0x112>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007424:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	685a      	ldr	r2, [r3, #4]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007434:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	691a      	ldr	r2, [r3, #16]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007440:	b2d2      	uxtb	r2, r2
 8007442:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007448:	1c5a      	adds	r2, r3, #1
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007452:	b29b      	uxth	r3, r3
 8007454:	3b01      	subs	r3, #1
 8007456:	b29a      	uxth	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2220      	movs	r2, #32
 8007460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800746a:	b2db      	uxtb	r3, r3
 800746c:	2b40      	cmp	r3, #64	; 0x40
 800746e:	d10b      	bne.n	8007488 <I2C_MasterReceive_RXNE+0xfa>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MemRxCpltCallback(hi2c);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007486:	e03c      	b.n	8007502 <I2C_MasterReceive_RXNE+0x174>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2212      	movs	r2, #18
 8007494:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MasterRxCpltCallback(hi2c);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800749e:	e030      	b.n	8007502 <I2C_MasterReceive_RXNE+0x174>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	685a      	ldr	r2, [r3, #4]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80074ae:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	691a      	ldr	r2, [r3, #16]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ba:	b2d2      	uxtb	r2, r2
 80074bc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c2:	1c5a      	adds	r2, r3, #1
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	3b01      	subs	r3, #1
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2220      	movs	r2, #32
 80074da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCallback(hi2c);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80074ee:	e008      	b.n	8007502 <I2C_MasterReceive_RXNE+0x174>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	685a      	ldr	r2, [r3, #4]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074fe:	605a      	str	r2, [r3, #4]
}
 8007500:	e7ff      	b.n	8007502 <I2C_MasterReceive_RXNE+0x174>
 8007502:	bf00      	nop
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b084      	sub	sp, #16
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007516:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800751c:	b29b      	uxth	r3, r3
 800751e:	2b04      	cmp	r3, #4
 8007520:	d11b      	bne.n	800755a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	685a      	ldr	r2, [r3, #4]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007530:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	691a      	ldr	r2, [r3, #16]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753c:	b2d2      	uxtb	r2, r2
 800753e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007544:	1c5a      	adds	r2, r3, #1
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800754e:	b29b      	uxth	r3, r3
 8007550:	3b01      	subs	r3, #1
 8007552:	b29a      	uxth	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007558:	e0bf      	b.n	80076da <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 3U)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800755e:	b29b      	uxth	r3, r3
 8007560:	2b03      	cmp	r3, #3
 8007562:	d129      	bne.n	80075b8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	685a      	ldr	r2, [r3, #4]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007572:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2b04      	cmp	r3, #4
 8007578:	d00a      	beq.n	8007590 <I2C_MasterReceive_BTF+0x86>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2b02      	cmp	r3, #2
 800757e:	d007      	beq.n	8007590 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800758e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	691a      	ldr	r2, [r3, #16]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759a:	b2d2      	uxtb	r2, r2
 800759c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a2:	1c5a      	adds	r2, r3, #1
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	3b01      	subs	r3, #1
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80075b6:	e090      	b.n	80076da <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 2U)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075bc:	b29b      	uxth	r3, r3
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d178      	bne.n	80076b4 <I2C_MasterReceive_BTF+0x1aa>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d002      	beq.n	80075ce <I2C_MasterReceive_BTF+0xc4>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2b10      	cmp	r3, #16
 80075cc:	d108      	bne.n	80075e0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075dc:	601a      	str	r2, [r3, #0]
 80075de:	e019      	b.n	8007614 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2b04      	cmp	r3, #4
 80075e4:	d002      	beq.n	80075ec <I2C_MasterReceive_BTF+0xe2>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d108      	bne.n	80075fe <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80075fa:	601a      	str	r2, [r3, #0]
 80075fc:	e00a      	b.n	8007614 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2b10      	cmp	r3, #16
 8007602:	d007      	beq.n	8007614 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007612:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	691a      	ldr	r2, [r3, #16]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761e:	b2d2      	uxtb	r2, r2
 8007620:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007626:	1c5a      	adds	r2, r3, #1
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007630:	b29b      	uxth	r3, r3
 8007632:	3b01      	subs	r3, #1
 8007634:	b29a      	uxth	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	691a      	ldr	r2, [r3, #16]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007644:	b2d2      	uxtb	r2, r2
 8007646:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764c:	1c5a      	adds	r2, r3, #1
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007656:	b29b      	uxth	r3, r3
 8007658:	3b01      	subs	r3, #1
 800765a:	b29a      	uxth	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800766e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2220      	movs	r2, #32
 8007674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800767e:	b2db      	uxtb	r3, r3
 8007680:	2b40      	cmp	r3, #64	; 0x40
 8007682:	d10b      	bne.n	800769c <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MemRxCpltCallback(hi2c);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	4798      	blx	r3
}
 800769a:	e01e      	b.n	80076da <I2C_MasterReceive_BTF+0x1d0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2212      	movs	r2, #18
 80076a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MasterRxCpltCallback(hi2c);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	4798      	blx	r3
}
 80076b2:	e012      	b.n	80076da <I2C_MasterReceive_BTF+0x1d0>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	691a      	ldr	r2, [r3, #16]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076be:	b2d2      	uxtb	r2, r2
 80076c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c6:	1c5a      	adds	r2, r3, #1
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	3b01      	subs	r3, #1
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80076da:	bf00      	nop
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80076e2:	b480      	push	{r7}
 80076e4:	b083      	sub	sp, #12
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	2b40      	cmp	r3, #64	; 0x40
 80076f4:	d117      	bne.n	8007726 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d109      	bne.n	8007712 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007702:	b2db      	uxtb	r3, r3
 8007704:	461a      	mov	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800770e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007710:	e067      	b.n	80077e2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007716:	b2db      	uxtb	r3, r3
 8007718:	f043 0301 	orr.w	r3, r3, #1
 800771c:	b2da      	uxtb	r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	611a      	str	r2, [r3, #16]
}
 8007724:	e05d      	b.n	80077e2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800772e:	d133      	bne.n	8007798 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b21      	cmp	r3, #33	; 0x21
 800773a:	d109      	bne.n	8007750 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007740:	b2db      	uxtb	r3, r3
 8007742:	461a      	mov	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800774c:	611a      	str	r2, [r3, #16]
 800774e:	e008      	b.n	8007762 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007754:	b2db      	uxtb	r3, r3
 8007756:	f043 0301 	orr.w	r3, r3, #1
 800775a:	b2da      	uxtb	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007766:	2b00      	cmp	r3, #0
 8007768:	d004      	beq.n	8007774 <I2C_Master_SB+0x92>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800776e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007770:	2b00      	cmp	r3, #0
 8007772:	d108      	bne.n	8007786 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007778:	2b00      	cmp	r3, #0
 800777a:	d032      	beq.n	80077e2 <I2C_Master_SB+0x100>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007782:	2b00      	cmp	r3, #0
 8007784:	d02d      	beq.n	80077e2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	685a      	ldr	r2, [r3, #4]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007794:	605a      	str	r2, [r3, #4]
}
 8007796:	e024      	b.n	80077e2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10e      	bne.n	80077be <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	11db      	asrs	r3, r3, #7
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	f003 0306 	and.w	r3, r3, #6
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	f063 030f 	orn	r3, r3, #15
 80077b4:	b2da      	uxtb	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	611a      	str	r2, [r3, #16]
}
 80077bc:	e011      	b.n	80077e2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d10d      	bne.n	80077e2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	11db      	asrs	r3, r3, #7
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	f003 0306 	and.w	r3, r3, #6
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	f063 030e 	orn	r3, r3, #14
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	611a      	str	r2, [r3, #16]
}
 80077e2:	bf00      	nop
 80077e4:	370c      	adds	r7, #12
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr

080077ee <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80077ee:	b480      	push	{r7}
 80077f0:	b083      	sub	sp, #12
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077fa:	b2da      	uxtb	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007806:	2b00      	cmp	r3, #0
 8007808:	d004      	beq.n	8007814 <I2C_Master_ADD10+0x26>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800780e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007810:	2b00      	cmp	r3, #0
 8007812:	d108      	bne.n	8007826 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00c      	beq.n	8007836 <I2C_Master_ADD10+0x48>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007822:	2b00      	cmp	r3, #0
 8007824:	d007      	beq.n	8007836 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	685a      	ldr	r2, [r3, #4]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007834:	605a      	str	r2, [r3, #4]
  }
}
 8007836:	bf00      	nop
 8007838:	370c      	adds	r7, #12
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007842:	b480      	push	{r7}
 8007844:	b091      	sub	sp, #68	; 0x44
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007850:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007858:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800785e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007866:	b2db      	uxtb	r3, r3
 8007868:	2b22      	cmp	r3, #34	; 0x22
 800786a:	f040 8169 	bne.w	8007b40 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10f      	bne.n	8007896 <I2C_Master_ADDR+0x54>
 8007876:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800787a:	2b40      	cmp	r3, #64	; 0x40
 800787c:	d10b      	bne.n	8007896 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800787e:	2300      	movs	r3, #0
 8007880:	633b      	str	r3, [r7, #48]	; 0x30
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	695b      	ldr	r3, [r3, #20]
 8007888:	633b      	str	r3, [r7, #48]	; 0x30
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	699b      	ldr	r3, [r3, #24]
 8007890:	633b      	str	r3, [r7, #48]	; 0x30
 8007892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007894:	e160      	b.n	8007b58 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800789a:	2b00      	cmp	r3, #0
 800789c:	d11d      	bne.n	80078da <I2C_Master_ADDR+0x98>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	691b      	ldr	r3, [r3, #16]
 80078a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80078a6:	d118      	bne.n	80078da <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078a8:	2300      	movs	r3, #0
 80078aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	695b      	ldr	r3, [r3, #20]
 80078b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	699b      	ldr	r3, [r3, #24]
 80078ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078cc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078d2:	1c5a      	adds	r2, r3, #1
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	651a      	str	r2, [r3, #80]	; 0x50
 80078d8:	e13e      	b.n	8007b58 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078de:	b29b      	uxth	r3, r3
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d113      	bne.n	800790c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078e4:	2300      	movs	r3, #0
 80078e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	695b      	ldr	r3, [r3, #20]
 80078ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80078f8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007908:	601a      	str	r2, [r3, #0]
 800790a:	e115      	b.n	8007b38 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007910:	b29b      	uxth	r3, r3
 8007912:	2b01      	cmp	r3, #1
 8007914:	f040 808a 	bne.w	8007a2c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800791e:	d137      	bne.n	8007990 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800792e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800793a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800793e:	d113      	bne.n	8007968 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800794e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007950:	2300      	movs	r3, #0
 8007952:	627b      	str	r3, [r7, #36]	; 0x24
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	695b      	ldr	r3, [r3, #20]
 800795a:	627b      	str	r3, [r7, #36]	; 0x24
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	699b      	ldr	r3, [r3, #24]
 8007962:	627b      	str	r3, [r7, #36]	; 0x24
 8007964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007966:	e0e7      	b.n	8007b38 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007968:	2300      	movs	r3, #0
 800796a:	623b      	str	r3, [r7, #32]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	695b      	ldr	r3, [r3, #20]
 8007972:	623b      	str	r3, [r7, #32]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	699b      	ldr	r3, [r3, #24]
 800797a:	623b      	str	r3, [r7, #32]
 800797c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800798c:	601a      	str	r2, [r3, #0]
 800798e:	e0d3      	b.n	8007b38 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007992:	2b08      	cmp	r3, #8
 8007994:	d02e      	beq.n	80079f4 <I2C_Master_ADDR+0x1b2>
 8007996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007998:	2b20      	cmp	r3, #32
 800799a:	d02b      	beq.n	80079f4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800799c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800799e:	2b12      	cmp	r3, #18
 80079a0:	d102      	bne.n	80079a8 <I2C_Master_ADDR+0x166>
 80079a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d125      	bne.n	80079f4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80079a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079aa:	2b04      	cmp	r3, #4
 80079ac:	d00e      	beq.n	80079cc <I2C_Master_ADDR+0x18a>
 80079ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	d00b      	beq.n	80079cc <I2C_Master_ADDR+0x18a>
 80079b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b6:	2b10      	cmp	r3, #16
 80079b8:	d008      	beq.n	80079cc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079c8:	601a      	str	r2, [r3, #0]
 80079ca:	e007      	b.n	80079dc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80079da:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079dc:	2300      	movs	r3, #0
 80079de:	61fb      	str	r3, [r7, #28]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	61fb      	str	r3, [r7, #28]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	61fb      	str	r3, [r7, #28]
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	e0a1      	b.n	8007b38 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a02:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a04:	2300      	movs	r3, #0
 8007a06:	61bb      	str	r3, [r7, #24]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	61bb      	str	r3, [r7, #24]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	61bb      	str	r3, [r7, #24]
 8007a18:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a28:	601a      	str	r2, [r3, #0]
 8007a2a:	e085      	b.n	8007b38 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d14d      	bne.n	8007ad2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a38:	2b04      	cmp	r3, #4
 8007a3a:	d016      	beq.n	8007a6a <I2C_Master_ADDR+0x228>
 8007a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d013      	beq.n	8007a6a <I2C_Master_ADDR+0x228>
 8007a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a44:	2b10      	cmp	r3, #16
 8007a46:	d010      	beq.n	8007a6a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a56:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a66:	601a      	str	r2, [r3, #0]
 8007a68:	e007      	b.n	8007a7a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a78:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a88:	d117      	bne.n	8007aba <I2C_Master_ADDR+0x278>
 8007a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007a90:	d00b      	beq.n	8007aaa <I2C_Master_ADDR+0x268>
 8007a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d008      	beq.n	8007aaa <I2C_Master_ADDR+0x268>
 8007a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9a:	2b08      	cmp	r3, #8
 8007a9c:	d005      	beq.n	8007aaa <I2C_Master_ADDR+0x268>
 8007a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa0:	2b10      	cmp	r3, #16
 8007aa2:	d002      	beq.n	8007aaa <I2C_Master_ADDR+0x268>
 8007aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa6:	2b20      	cmp	r3, #32
 8007aa8:	d107      	bne.n	8007aba <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	685a      	ldr	r2, [r3, #4]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ab8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007aba:	2300      	movs	r3, #0
 8007abc:	617b      	str	r3, [r7, #20]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	695b      	ldr	r3, [r3, #20]
 8007ac4:	617b      	str	r3, [r7, #20]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	617b      	str	r3, [r7, #20]
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	e032      	b.n	8007b38 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ae0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007aec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007af0:	d117      	bne.n	8007b22 <I2C_Master_ADDR+0x2e0>
 8007af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007af8:	d00b      	beq.n	8007b12 <I2C_Master_ADDR+0x2d0>
 8007afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d008      	beq.n	8007b12 <I2C_Master_ADDR+0x2d0>
 8007b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b02:	2b08      	cmp	r3, #8
 8007b04:	d005      	beq.n	8007b12 <I2C_Master_ADDR+0x2d0>
 8007b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b08:	2b10      	cmp	r3, #16
 8007b0a:	d002      	beq.n	8007b12 <I2C_Master_ADDR+0x2d0>
 8007b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0e:	2b20      	cmp	r3, #32
 8007b10:	d107      	bne.n	8007b22 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	685a      	ldr	r2, [r3, #4]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b20:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b22:	2300      	movs	r3, #0
 8007b24:	613b      	str	r3, [r7, #16]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	695b      	ldr	r3, [r3, #20]
 8007b2c:	613b      	str	r3, [r7, #16]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	613b      	str	r3, [r7, #16]
 8007b36:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007b3e:	e00b      	b.n	8007b58 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b40:	2300      	movs	r3, #0
 8007b42:	60fb      	str	r3, [r7, #12]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	695b      	ldr	r3, [r3, #20]
 8007b4a:	60fb      	str	r3, [r7, #12]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	699b      	ldr	r3, [r3, #24]
 8007b52:	60fb      	str	r3, [r7, #12]
 8007b54:	68fb      	ldr	r3, [r7, #12]
}
 8007b56:	e7ff      	b.n	8007b58 <I2C_Master_ADDR+0x316>
 8007b58:	bf00      	nop
 8007b5a:	3744      	adds	r7, #68	; 0x44
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b72:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d02c      	beq.n	8007bd8 <I2C_SlaveTransmit_TXE+0x74>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b82:	781a      	ldrb	r2, [r3, #0]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8e:	1c5a      	adds	r2, r3, #1
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	b29a      	uxth	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d115      	bne.n	8007bd8 <I2C_SlaveTransmit_TXE+0x74>
 8007bac:	7bfb      	ldrb	r3, [r7, #15]
 8007bae:	2b29      	cmp	r3, #41	; 0x29
 8007bb0:	d112      	bne.n	8007bd8 <I2C_SlaveTransmit_TXE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	685a      	ldr	r2, [r3, #4]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bc0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2221      	movs	r2, #33	; 0x21
 8007bc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2228      	movs	r2, #40	; 0x28
 8007bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	4798      	blx	r3
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007bd8:	bf00      	nop
 8007bda:	3710      	adds	r7, #16
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d011      	beq.n	8007c16 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf6:	781a      	ldrb	r2, [r3, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c02:	1c5a      	adds	r2, r3, #1
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007c16:	bf00      	nop
 8007c18:	370c      	adds	r7, #12
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b084      	sub	sp, #16
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c30:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d02d      	beq.n	8007c98 <I2C_SlaveReceive_RXNE+0x76>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	691a      	ldr	r2, [r3, #16]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c46:	b2d2      	uxtb	r2, r2
 8007c48:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4e:	1c5a      	adds	r2, r3, #1
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d115      	bne.n	8007c98 <I2C_SlaveReceive_RXNE+0x76>
 8007c6c:	7bfb      	ldrb	r3, [r7, #15]
 8007c6e:	2b2a      	cmp	r3, #42	; 0x2a
 8007c70:	d112      	bne.n	8007c98 <I2C_SlaveReceive_RXNE+0x76>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	685a      	ldr	r2, [r3, #4]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c80:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2222      	movs	r2, #34	; 0x22
 8007c86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2228      	movs	r2, #40	; 0x28
 8007c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	4798      	blx	r3
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007c98:	bf00      	nop
 8007c9a:	3710      	adds	r7, #16
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d012      	beq.n	8007cd8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	691a      	ldr	r2, [r3, #16]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbc:	b2d2      	uxtb	r2, r2
 8007cbe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc4:	1c5a      	adds	r2, r3, #1
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	b29a      	uxth	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007cd8:	bf00      	nop
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007cfe:	2b28      	cmp	r3, #40	; 0x28
 8007d00:	d127      	bne.n	8007d52 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	685a      	ldr	r2, [r3, #4]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d10:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	089b      	lsrs	r3, r3, #2
 8007d16:	f003 0301 	and.w	r3, r3, #1
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d101      	bne.n	8007d22 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	09db      	lsrs	r3, r3, #7
 8007d26:	f003 0301 	and.w	r3, r3, #1
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d103      	bne.n	8007d36 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	81bb      	strh	r3, [r7, #12]
 8007d34:	e002      	b.n	8007d3c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	699b      	ldr	r3, [r3, #24]
 8007d3a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d48:	89ba      	ldrh	r2, [r7, #12]
 8007d4a:	7bf9      	ldrb	r1, [r7, #15]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	4798      	blx	r3
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007d50:	e00e      	b.n	8007d70 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d52:	2300      	movs	r3, #0
 8007d54:	60bb      	str	r3, [r7, #8]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	695b      	ldr	r3, [r3, #20]
 8007d5c:	60bb      	str	r3, [r7, #8]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	699b      	ldr	r3, [r3, #24]
 8007d64:	60bb      	str	r3, [r7, #8]
 8007d66:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007d70:	bf00      	nop
 8007d72:	3710      	adds	r7, #16
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d86:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	685a      	ldr	r2, [r3, #4]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007d96:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007d98:	2300      	movs	r3, #0
 8007d9a:	60bb      	str	r3, [r7, #8]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	695b      	ldr	r3, [r3, #20]
 8007da2:	60bb      	str	r3, [r7, #8]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f042 0201 	orr.w	r2, r2, #1
 8007db2:	601a      	str	r2, [r3, #0]
 8007db4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dc4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dd4:	d172      	bne.n	8007ebc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007dd6:	7bfb      	ldrb	r3, [r7, #15]
 8007dd8:	2b22      	cmp	r3, #34	; 0x22
 8007dda:	d002      	beq.n	8007de2 <I2C_Slave_STOPF+0x6a>
 8007ddc:	7bfb      	ldrb	r3, [r7, #15]
 8007dde:	2b2a      	cmp	r3, #42	; 0x2a
 8007de0:	d135      	bne.n	8007e4e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d005      	beq.n	8007e06 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfe:	f043 0204 	orr.w	r2, r3, #4
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	685a      	ldr	r2, [r3, #4]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e14:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7fd ffc0 	bl	8005da0 <HAL_DMA_GetState>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d049      	beq.n	8007eba <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2a:	4a6b      	ldr	r2, [pc, #428]	; (8007fd8 <I2C_Slave_STOPF+0x260>)
 8007e2c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7fd fe08 	bl	8005a48 <HAL_DMA_Abort_IT>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d03d      	beq.n	8007eba <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007e48:	4610      	mov	r0, r2
 8007e4a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007e4c:	e035      	b.n	8007eba <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d005      	beq.n	8007e72 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6a:	f043 0204 	orr.w	r2, r3, #4
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	685a      	ldr	r2, [r3, #4]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e80:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7fd ff8a 	bl	8005da0 <HAL_DMA_GetState>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d014      	beq.n	8007ebc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e96:	4a50      	ldr	r2, [pc, #320]	; (8007fd8 <I2C_Slave_STOPF+0x260>)
 8007e98:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7fd fdd2 	bl	8005a48 <HAL_DMA_Abort_IT>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d008      	beq.n	8007ebc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007eb4:	4610      	mov	r0, r2
 8007eb6:	4798      	blx	r3
 8007eb8:	e000      	b.n	8007ebc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007eba:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d03e      	beq.n	8007f44 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	695b      	ldr	r3, [r3, #20]
 8007ecc:	f003 0304 	and.w	r3, r3, #4
 8007ed0:	2b04      	cmp	r3, #4
 8007ed2:	d112      	bne.n	8007efa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	691a      	ldr	r2, [r3, #16]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ede:	b2d2      	uxtb	r2, r2
 8007ee0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee6:	1c5a      	adds	r2, r3, #1
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	695b      	ldr	r3, [r3, #20]
 8007f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f04:	2b40      	cmp	r3, #64	; 0x40
 8007f06:	d112      	bne.n	8007f2e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	691a      	ldr	r2, [r3, #16]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f12:	b2d2      	uxtb	r2, r2
 8007f14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1a:	1c5a      	adds	r2, r3, #1
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	3b01      	subs	r3, #1
 8007f28:	b29a      	uxth	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d005      	beq.n	8007f44 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3c:	f043 0204 	orr.w	r2, r3, #4
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d003      	beq.n	8007f54 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 f8b9 	bl	80080c4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007f52:	e03c      	b.n	8007fce <I2C_Slave_STOPF+0x256>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007f54:	7bfb      	ldrb	r3, [r7, #15]
 8007f56:	2b2a      	cmp	r3, #42	; 0x2a
 8007f58:	d10a      	bne.n	8007f70 <I2C_Slave_STOPF+0x1f8>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2228      	movs	r2, #40	; 0x28
 8007f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->SlaveRxCpltCallback(hi2c);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	4798      	blx	r3
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	2b28      	cmp	r3, #40	; 0x28
 8007f7a:	d112      	bne.n	8007fa2 <I2C_Slave_STOPF+0x22a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a17      	ldr	r2, [pc, #92]	; (8007fdc <I2C_Slave_STOPF+0x264>)
 8007f80:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2220      	movs	r2, #32
 8007f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ListenCpltCallback(hi2c);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	4798      	blx	r3
}
 8007fa0:	e015      	b.n	8007fce <I2C_Slave_STOPF+0x256>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa6:	2b22      	cmp	r3, #34	; 0x22
 8007fa8:	d002      	beq.n	8007fb0 <I2C_Slave_STOPF+0x238>
 8007faa:	7bfb      	ldrb	r3, [r7, #15]
 8007fac:	2b22      	cmp	r3, #34	; 0x22
 8007fae:	d10e      	bne.n	8007fce <I2C_Slave_STOPF+0x256>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2220      	movs	r2, #32
 8007fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->SlaveRxCpltCallback(hi2c);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	4798      	blx	r3
}
 8007fce:	bf00      	nop
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	08008435 	.word	0x08008435
 8007fdc:	ffff0000 	.word	0xffff0000

08007fe0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fee:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	2b08      	cmp	r3, #8
 8007ffa:	d002      	beq.n	8008002 <I2C_Slave_AF+0x22>
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	2b20      	cmp	r3, #32
 8008000:	d12a      	bne.n	8008058 <I2C_Slave_AF+0x78>
 8008002:	7bfb      	ldrb	r3, [r7, #15]
 8008004:	2b28      	cmp	r3, #40	; 0x28
 8008006:	d127      	bne.n	8008058 <I2C_Slave_AF+0x78>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a2d      	ldr	r2, [pc, #180]	; (80080c0 <I2C_Slave_AF+0xe0>)
 800800c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	685a      	ldr	r2, [r3, #4]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800801c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008026:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008036:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2220      	movs	r2, #32
 8008042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	4798      	blx	r3
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008056:	e02f      	b.n	80080b8 <I2C_Slave_AF+0xd8>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008058:	7bfb      	ldrb	r3, [r7, #15]
 800805a:	2b21      	cmp	r3, #33	; 0x21
 800805c:	d127      	bne.n	80080ae <I2C_Slave_AF+0xce>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4a17      	ldr	r2, [pc, #92]	; (80080c0 <I2C_Slave_AF+0xe0>)
 8008062:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2221      	movs	r2, #33	; 0x21
 8008068:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2220      	movs	r2, #32
 800806e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	685a      	ldr	r2, [r3, #4]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008088:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008092:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080a2:	601a      	str	r2, [r3, #0]
    hi2c->SlaveTxCpltCallback(hi2c);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	4798      	blx	r3
}
 80080ac:	e004      	b.n	80080b8 <I2C_Slave_AF+0xd8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80080b6:	615a      	str	r2, [r3, #20]
}
 80080b8:	bf00      	nop
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	ffff0000 	.word	0xffff0000

080080c4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080d2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080da:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80080dc:	7bbb      	ldrb	r3, [r7, #14]
 80080de:	2b10      	cmp	r3, #16
 80080e0:	d002      	beq.n	80080e8 <I2C_ITError+0x24>
 80080e2:	7bbb      	ldrb	r3, [r7, #14]
 80080e4:	2b40      	cmp	r3, #64	; 0x40
 80080e6:	d10a      	bne.n	80080fe <I2C_ITError+0x3a>
 80080e8:	7bfb      	ldrb	r3, [r7, #15]
 80080ea:	2b22      	cmp	r3, #34	; 0x22
 80080ec:	d107      	bne.n	80080fe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080fc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80080fe:	7bfb      	ldrb	r3, [r7, #15]
 8008100:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008104:	2b28      	cmp	r3, #40	; 0x28
 8008106:	d107      	bne.n	8008118 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2228      	movs	r2, #40	; 0x28
 8008112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008116:	e015      	b.n	8008144 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008122:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008126:	d00a      	beq.n	800813e <I2C_ITError+0x7a>
 8008128:	7bfb      	ldrb	r3, [r7, #15]
 800812a:	2b60      	cmp	r3, #96	; 0x60
 800812c:	d007      	beq.n	800813e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2220      	movs	r2, #32
 8008132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800814e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008152:	d162      	bne.n	800821a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	685a      	ldr	r2, [r3, #4]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008162:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008168:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800816c:	b2db      	uxtb	r3, r3
 800816e:	2b01      	cmp	r3, #1
 8008170:	d020      	beq.n	80081b4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008176:	4a6c      	ldr	r2, [pc, #432]	; (8008328 <I2C_ITError+0x264>)
 8008178:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800817e:	4618      	mov	r0, r3
 8008180:	f7fd fc62 	bl	8005a48 <HAL_DMA_Abort_IT>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	f000 808b 	beq.w	80082a2 <I2C_ITError+0x1de>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f022 0201 	bic.w	r2, r2, #1
 800819a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2220      	movs	r2, #32
 80081a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80081ae:	4610      	mov	r0, r2
 80081b0:	4798      	blx	r3
 80081b2:	e076      	b.n	80082a2 <I2C_ITError+0x1de>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b8:	4a5b      	ldr	r2, [pc, #364]	; (8008328 <I2C_ITError+0x264>)
 80081ba:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7fd fc41 	bl	8005a48 <HAL_DMA_Abort_IT>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d06a      	beq.n	80082a2 <I2C_ITError+0x1de>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	695b      	ldr	r3, [r3, #20]
 80081d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d6:	2b40      	cmp	r3, #64	; 0x40
 80081d8:	d10b      	bne.n	80081f2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	691a      	ldr	r2, [r3, #16]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e4:	b2d2      	uxtb	r2, r2
 80081e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ec:	1c5a      	adds	r2, r3, #1
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f022 0201 	bic.w	r2, r2, #1
 8008200:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2220      	movs	r2, #32
 8008206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008214:	4610      	mov	r0, r2
 8008216:	4798      	blx	r3
 8008218:	e043      	b.n	80082a2 <I2C_ITError+0x1de>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008220:	b2db      	uxtb	r3, r3
 8008222:	2b60      	cmp	r3, #96	; 0x60
 8008224:	d126      	bne.n	8008274 <I2C_ITError+0x1b0>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2220      	movs	r2, #32
 800822a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	695b      	ldr	r3, [r3, #20]
 800823a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800823e:	2b40      	cmp	r3, #64	; 0x40
 8008240:	d10b      	bne.n	800825a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	691a      	ldr	r2, [r3, #16]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824c:	b2d2      	uxtb	r2, r2
 800824e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008254:	1c5a      	adds	r2, r3, #1
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f022 0201 	bic.w	r2, r2, #1
 8008268:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	4798      	blx	r3
 8008272:	e016      	b.n	80082a2 <I2C_ITError+0x1de>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	695b      	ldr	r3, [r3, #20]
 800827a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800827e:	2b40      	cmp	r3, #64	; 0x40
 8008280:	d10b      	bne.n	800829a <I2C_ITError+0x1d6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	691a      	ldr	r2, [r3, #16]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828c:	b2d2      	uxtb	r2, r2
 800828e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008294:	1c5a      	adds	r2, r3, #1
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	4798      	blx	r3
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	f003 0301 	and.w	r3, r3, #1
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d10e      	bne.n	80082d0 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d109      	bne.n	80082d0 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d104      	bne.n	80082d0 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d007      	beq.n	80082e0 <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	685a      	ldr	r2, [r3, #4]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80082de:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082e6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ec:	f003 0304 	and.w	r3, r3, #4
 80082f0:	2b04      	cmp	r3, #4
 80082f2:	d114      	bne.n	800831e <I2C_ITError+0x25a>
 80082f4:	7bfb      	ldrb	r3, [r7, #15]
 80082f6:	2b28      	cmp	r3, #40	; 0x28
 80082f8:	d111      	bne.n	800831e <I2C_ITError+0x25a>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a0b      	ldr	r2, [pc, #44]	; (800832c <I2C_ITError+0x268>)
 80082fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2220      	movs	r2, #32
 800830a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	4798      	blx	r3
#else
    HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800831e:	bf00      	nop
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	08008435 	.word	0x08008435
 800832c:	ffff0000 	.word	0xffff0000

08008330 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b088      	sub	sp, #32
 8008334:	af02      	add	r7, sp, #8
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	607a      	str	r2, [r7, #4]
 800833a:	603b      	str	r3, [r7, #0]
 800833c:	460b      	mov	r3, r1
 800833e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008344:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	2b08      	cmp	r3, #8
 800834a:	d006      	beq.n	800835a <I2C_MasterRequestWrite+0x2a>
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	2b01      	cmp	r3, #1
 8008350:	d003      	beq.n	800835a <I2C_MasterRequestWrite+0x2a>
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008358:	d108      	bne.n	800836c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008368:	601a      	str	r2, [r3, #0]
 800836a:	e00b      	b.n	8008384 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008370:	2b12      	cmp	r3, #18
 8008372:	d107      	bne.n	8008384 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008382:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	9300      	str	r3, [sp, #0]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f000 f8f9 	bl	8008588 <I2C_WaitOnFlagUntilTimeout>
 8008396:	4603      	mov	r3, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00d      	beq.n	80083b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083aa:	d103      	bne.n	80083b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80083b4:	2303      	movs	r3, #3
 80083b6:	e035      	b.n	8008424 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083c0:	d108      	bne.n	80083d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80083c2:	897b      	ldrh	r3, [r7, #10]
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	461a      	mov	r2, r3
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80083d0:	611a      	str	r2, [r3, #16]
 80083d2:	e01b      	b.n	800840c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80083d4:	897b      	ldrh	r3, [r7, #10]
 80083d6:	11db      	asrs	r3, r3, #7
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	f003 0306 	and.w	r3, r3, #6
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	f063 030f 	orn	r3, r3, #15
 80083e4:	b2da      	uxtb	r2, r3
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	490e      	ldr	r1, [pc, #56]	; (800842c <I2C_MasterRequestWrite+0xfc>)
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f000 f91f 	bl	8008636 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d001      	beq.n	8008402 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e010      	b.n	8008424 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008402:	897b      	ldrh	r3, [r7, #10]
 8008404:	b2da      	uxtb	r2, r3
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	4907      	ldr	r1, [pc, #28]	; (8008430 <I2C_MasterRequestWrite+0x100>)
 8008412:	68f8      	ldr	r0, [r7, #12]
 8008414:	f000 f90f 	bl	8008636 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d001      	beq.n	8008422 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	e000      	b.n	8008424 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	3718      	adds	r7, #24
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	00010008 	.word	0x00010008
 8008430:	00010002 	.word	0x00010002

08008434 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b086      	sub	sp, #24
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800843c:	2300      	movs	r3, #0
 800843e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008444:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800844c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800844e:	4b4c      	ldr	r3, [pc, #304]	; (8008580 <I2C_DMAAbort+0x14c>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	08db      	lsrs	r3, r3, #3
 8008454:	4a4b      	ldr	r2, [pc, #300]	; (8008584 <I2C_DMAAbort+0x150>)
 8008456:	fba2 2303 	umull	r2, r3, r2, r3
 800845a:	0a1a      	lsrs	r2, r3, #8
 800845c:	4613      	mov	r3, r2
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	4413      	add	r3, r2
 8008462:	00da      	lsls	r2, r3, #3
 8008464:	1ad3      	subs	r3, r2, r3
 8008466:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d106      	bne.n	800847c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008472:	f043 0220 	orr.w	r2, r3, #32
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800847a:	e00a      	b.n	8008492 <I2C_DMAAbort+0x5e>
    }
    count--;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	3b01      	subs	r3, #1
 8008480:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800848c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008490:	d0ea      	beq.n	8008468 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008496:	2b00      	cmp	r3, #0
 8008498:	d003      	beq.n	80084a2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800849e:	2200      	movs	r2, #0
 80084a0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d003      	beq.n	80084b2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ae:	2200      	movs	r2, #0
 80084b0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084c0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	2200      	movs	r2, #0
 80084c6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d003      	beq.n	80084d8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084d4:	2200      	movs	r2, #0
 80084d6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d003      	beq.n	80084e8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e4:	2200      	movs	r2, #0
 80084e6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f022 0201 	bic.w	r2, r2, #1
 80084f6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	2b60      	cmp	r3, #96	; 0x60
 8008502:	d10f      	bne.n	8008524 <I2C_DMAAbort+0xf0>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	2220      	movs	r2, #32
 8008508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	2200      	movs	r2, #0
 8008510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	2200      	movs	r2, #0
 8008518:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800851e:	6978      	ldr	r0, [r7, #20]
 8008520:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008522:	e028      	b.n	8008576 <I2C_DMAAbort+0x142>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008524:	7cfb      	ldrb	r3, [r7, #19]
 8008526:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800852a:	2b28      	cmp	r3, #40	; 0x28
 800852c:	d117      	bne.n	800855e <I2C_DMAAbort+0x12a>
      __HAL_I2C_ENABLE(hi2c);
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f042 0201 	orr.w	r2, r2, #1
 800853c:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800854c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	2200      	movs	r2, #0
 8008552:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	2228      	movs	r2, #40	; 0x28
 8008558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800855c:	e007      	b.n	800856e <I2C_DMAAbort+0x13a>
      hi2c->State = HAL_I2C_STATE_READY;
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	2220      	movs	r2, #32
 8008562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	2200      	movs	r2, #0
 800856a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCallback(hi2c);
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008572:	6978      	ldr	r0, [r7, #20]
 8008574:	4798      	blx	r3
}
 8008576:	bf00      	nop
 8008578:	3718      	adds	r7, #24
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	20000000 	.word	0x20000000
 8008584:	14f8b589 	.word	0x14f8b589

08008588 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	603b      	str	r3, [r7, #0]
 8008594:	4613      	mov	r3, r2
 8008596:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008598:	e025      	b.n	80085e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a0:	d021      	beq.n	80085e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085a2:	f7fc fa5d 	bl	8004a60 <HAL_GetTick>
 80085a6:	4602      	mov	r2, r0
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	1ad3      	subs	r3, r2, r3
 80085ac:	683a      	ldr	r2, [r7, #0]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d302      	bcc.n	80085b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d116      	bne.n	80085e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2200      	movs	r2, #0
 80085bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2220      	movs	r2, #32
 80085c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d2:	f043 0220 	orr.w	r2, r3, #32
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2200      	movs	r2, #0
 80085de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	e023      	b.n	800862e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	0c1b      	lsrs	r3, r3, #16
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d10d      	bne.n	800860c <I2C_WaitOnFlagUntilTimeout+0x84>
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	695b      	ldr	r3, [r3, #20]
 80085f6:	43da      	mvns	r2, r3
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	4013      	ands	r3, r2
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	2b00      	cmp	r3, #0
 8008600:	bf0c      	ite	eq
 8008602:	2301      	moveq	r3, #1
 8008604:	2300      	movne	r3, #0
 8008606:	b2db      	uxtb	r3, r3
 8008608:	461a      	mov	r2, r3
 800860a:	e00c      	b.n	8008626 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	699b      	ldr	r3, [r3, #24]
 8008612:	43da      	mvns	r2, r3
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	4013      	ands	r3, r2
 8008618:	b29b      	uxth	r3, r3
 800861a:	2b00      	cmp	r3, #0
 800861c:	bf0c      	ite	eq
 800861e:	2301      	moveq	r3, #1
 8008620:	2300      	movne	r3, #0
 8008622:	b2db      	uxtb	r3, r3
 8008624:	461a      	mov	r2, r3
 8008626:	79fb      	ldrb	r3, [r7, #7]
 8008628:	429a      	cmp	r2, r3
 800862a:	d0b6      	beq.n	800859a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b084      	sub	sp, #16
 800863a:	af00      	add	r7, sp, #0
 800863c:	60f8      	str	r0, [r7, #12]
 800863e:	60b9      	str	r1, [r7, #8]
 8008640:	607a      	str	r2, [r7, #4]
 8008642:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008644:	e051      	b.n	80086ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	695b      	ldr	r3, [r3, #20]
 800864c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008654:	d123      	bne.n	800869e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008664:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800866e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2200      	movs	r2, #0
 8008674:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2220      	movs	r2, #32
 800867a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2200      	movs	r2, #0
 8008682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868a:	f043 0204 	orr.w	r2, r3, #4
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2200      	movs	r2, #0
 8008696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	e046      	b.n	800872c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a4:	d021      	beq.n	80086ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086a6:	f7fc f9db 	bl	8004a60 <HAL_GetTick>
 80086aa:	4602      	mov	r2, r0
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	1ad3      	subs	r3, r2, r3
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d302      	bcc.n	80086bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d116      	bne.n	80086ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2200      	movs	r2, #0
 80086c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2220      	movs	r2, #32
 80086c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2200      	movs	r2, #0
 80086ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d6:	f043 0220 	orr.w	r2, r3, #32
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80086e6:	2301      	movs	r3, #1
 80086e8:	e020      	b.n	800872c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	0c1b      	lsrs	r3, r3, #16
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d10c      	bne.n	800870e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	695b      	ldr	r3, [r3, #20]
 80086fa:	43da      	mvns	r2, r3
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	4013      	ands	r3, r2
 8008700:	b29b      	uxth	r3, r3
 8008702:	2b00      	cmp	r3, #0
 8008704:	bf14      	ite	ne
 8008706:	2301      	movne	r3, #1
 8008708:	2300      	moveq	r3, #0
 800870a:	b2db      	uxtb	r3, r3
 800870c:	e00b      	b.n	8008726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	699b      	ldr	r3, [r3, #24]
 8008714:	43da      	mvns	r2, r3
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	4013      	ands	r3, r2
 800871a:	b29b      	uxth	r3, r3
 800871c:	2b00      	cmp	r3, #0
 800871e:	bf14      	ite	ne
 8008720:	2301      	movne	r3, #1
 8008722:	2300      	moveq	r3, #0
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b00      	cmp	r3, #0
 8008728:	d18d      	bne.n	8008646 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3710      	adds	r7, #16
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008740:	e02d      	b.n	800879e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	f000 f8aa 	bl	800889c <I2C_IsAcknowledgeFailed>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d001      	beq.n	8008752 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e02d      	b.n	80087ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008758:	d021      	beq.n	800879e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800875a:	f7fc f981 	bl	8004a60 <HAL_GetTick>
 800875e:	4602      	mov	r2, r0
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	68ba      	ldr	r2, [r7, #8]
 8008766:	429a      	cmp	r2, r3
 8008768:	d302      	bcc.n	8008770 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d116      	bne.n	800879e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2220      	movs	r2, #32
 800877a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800878a:	f043 0220 	orr.w	r2, r3, #32
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2200      	movs	r2, #0
 8008796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	e007      	b.n	80087ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	695b      	ldr	r3, [r3, #20]
 80087a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087a8:	2b80      	cmp	r3, #128	; 0x80
 80087aa:	d1ca      	bne.n	8008742 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b084      	sub	sp, #16
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	60f8      	str	r0, [r7, #12]
 80087be:	60b9      	str	r1, [r7, #8]
 80087c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80087c2:	e02d      	b.n	8008820 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f000 f869 	bl	800889c <I2C_IsAcknowledgeFailed>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d001      	beq.n	80087d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	e02d      	b.n	8008830 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087da:	d021      	beq.n	8008820 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087dc:	f7fc f940 	bl	8004a60 <HAL_GetTick>
 80087e0:	4602      	mov	r2, r0
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	1ad3      	subs	r3, r2, r3
 80087e6:	68ba      	ldr	r2, [r7, #8]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d302      	bcc.n	80087f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d116      	bne.n	8008820 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2200      	movs	r2, #0
 80087f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2220      	movs	r2, #32
 80087fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880c:	f043 0220 	orr.w	r2, r3, #32
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2200      	movs	r2, #0
 8008818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	e007      	b.n	8008830 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	695b      	ldr	r3, [r3, #20]
 8008826:	f003 0304 	and.w	r3, r3, #4
 800882a:	2b04      	cmp	r3, #4
 800882c:	d1ca      	bne.n	80087c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800882e:	2300      	movs	r3, #0
}
 8008830:	4618      	mov	r0, r3
 8008832:	3710      	adds	r7, #16
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008838:	b480      	push	{r7}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008840:	2300      	movs	r3, #0
 8008842:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008844:	4b13      	ldr	r3, [pc, #76]	; (8008894 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	08db      	lsrs	r3, r3, #3
 800884a:	4a13      	ldr	r2, [pc, #76]	; (8008898 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800884c:	fba2 2303 	umull	r2, r3, r2, r3
 8008850:	0a1a      	lsrs	r2, r3, #8
 8008852:	4613      	mov	r3, r2
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	4413      	add	r3, r2
 8008858:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	3b01      	subs	r3, #1
 800885e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d107      	bne.n	8008876 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886a:	f043 0220 	orr.w	r2, r3, #32
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	e008      	b.n	8008888 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008884:	d0e9      	beq.n	800885a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008886:	2300      	movs	r3, #0
}
 8008888:	4618      	mov	r0, r3
 800888a:	3714      	adds	r7, #20
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr
 8008894:	20000000 	.word	0x20000000
 8008898:	14f8b589 	.word	0x14f8b589

0800889c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	695b      	ldr	r3, [r3, #20]
 80088aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088b2:	d11b      	bne.n	80088ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80088bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2200      	movs	r2, #0
 80088c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2220      	movs	r2, #32
 80088c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d8:	f043 0204 	orr.w	r2, r3, #4
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e000      	b.n	80088ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	370c      	adds	r7, #12
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr

080088fa <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80088fa:	b480      	push	{r7}
 80088fc:	b083      	sub	sp, #12
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008906:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800890a:	d103      	bne.n	8008914 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008912:	e007      	b.n	8008924 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008918:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800891c:	d102      	bne.n	8008924 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2208      	movs	r2, #8
 8008922:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008924:	bf00      	nop
 8008926:	370c      	adds	r7, #12
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr

08008930 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8008934:	4b06      	ldr	r3, [pc, #24]	; (8008950 <HAL_PWR_PVD_IRQHandler+0x20>)
 8008936:	695b      	ldr	r3, [r3, #20]
 8008938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800893c:	2b00      	cmp	r3, #0
 800893e:	d005      	beq.n	800894c <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8008940:	f000 f808 	bl	8008954 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8008944:	4b02      	ldr	r3, [pc, #8]	; (8008950 <HAL_PWR_PVD_IRQHandler+0x20>)
 8008946:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800894a:	615a      	str	r2, [r3, #20]
  }
}
 800894c:	bf00      	nop
 800894e:	bd80      	pop	{r7, pc}
 8008950:	40013c00 	.word	0x40013c00

08008954 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8008954:	b480      	push	{r7}
 8008956:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8008958:	bf00      	nop
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr
	...

08008964 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b086      	sub	sp, #24
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d101      	bne.n	8008976 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e267      	b.n	8008e46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f003 0301 	and.w	r3, r3, #1
 800897e:	2b00      	cmp	r3, #0
 8008980:	d075      	beq.n	8008a6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008982:	4b88      	ldr	r3, [pc, #544]	; (8008ba4 <HAL_RCC_OscConfig+0x240>)
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	f003 030c 	and.w	r3, r3, #12
 800898a:	2b04      	cmp	r3, #4
 800898c:	d00c      	beq.n	80089a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800898e:	4b85      	ldr	r3, [pc, #532]	; (8008ba4 <HAL_RCC_OscConfig+0x240>)
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008996:	2b08      	cmp	r3, #8
 8008998:	d112      	bne.n	80089c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800899a:	4b82      	ldr	r3, [pc, #520]	; (8008ba4 <HAL_RCC_OscConfig+0x240>)
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089a6:	d10b      	bne.n	80089c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089a8:	4b7e      	ldr	r3, [pc, #504]	; (8008ba4 <HAL_RCC_OscConfig+0x240>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d05b      	beq.n	8008a6c <HAL_RCC_OscConfig+0x108>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d157      	bne.n	8008a6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	e242      	b.n	8008e46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089c8:	d106      	bne.n	80089d8 <HAL_RCC_OscConfig+0x74>
 80089ca:	4b76      	ldr	r3, [pc, #472]	; (8008ba4 <HAL_RCC_OscConfig+0x240>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a75      	ldr	r2, [pc, #468]	; (8008ba4 <HAL_RCC_OscConfig+0x240>)
 80089d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089d4:	6013      	str	r3, [r2, #0]
 80089d6:	e01d      	b.n	8008a14 <HAL_RCC_OscConfig+0xb0>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80089e0:	d10c      	bne.n	80089fc <HAL_RCC_OscConfig+0x98>
 80089e2:	4b70      	ldr	r3, [pc, #448]	; (8008ba4 <HAL_RCC_OscConfig+0x240>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a6f      	ldr	r2, [pc, #444]	; (8008ba4 <HAL_RCC_OscConfig+0x240>)
 80089e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80089ec:	6013      	str	r3, [r2, #0]
 80089ee:	4b6d      	ldr	r3, [pc, #436]	; (8008ba4 <HAL_RCC_OscConfig+0x240>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a6c      	ldr	r2, [pc, #432]	; (8008ba4 <HAL_RCC_OscConfig+0x240>)
 80089f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089f8:	6013      	str	r3, [r2, #0]
 80089fa:	e00b      	b.n	8008a14 <HAL_RCC_OscConfig+0xb0>
 80089fc:	4b69      	ldr	r3, [pc, #420]	; (8008ba4 <HAL_RCC_OscConfig+0x240>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a68      	ldr	r2, [pc, #416]	; (8008ba4 <HAL_RCC_OscConfig+0x240>)
 8008a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a06:	6013      	str	r3, [r2, #0]
 8008a08:	4b66      	ldr	r3, [pc, #408]	; (8008ba4 <HAL_RCC_OscConfig+0x240>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a65      	ldr	r2, [pc, #404]	; (8008ba4 <HAL_RCC_OscConfig+0x240>)
 8008a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d013      	beq.n	8008a44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a1c:	f7fc f820 	bl	8004a60 <HAL_GetTick>
 8008a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a22:	e008      	b.n	8008a36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008a24:	f7fc f81c 	bl	8004a60 <HAL_GetTick>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	1ad3      	subs	r3, r2, r3
 8008a2e:	2b64      	cmp	r3, #100	; 0x64
 8008a30:	d901      	bls.n	8008a36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008a32:	2303      	movs	r3, #3
 8008a34:	e207      	b.n	8008e46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a36:	4b5b      	ldr	r3, [pc, #364]	; (8008ba4 <HAL_RCC_OscConfig+0x240>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d0f0      	beq.n	8008a24 <HAL_RCC_OscConfig+0xc0>
 8008a42:	e014      	b.n	8008a6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a44:	f7fc f80c 	bl	8004a60 <HAL_GetTick>
 8008a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a4a:	e008      	b.n	8008a5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008a4c:	f7fc f808 	bl	8004a60 <HAL_GetTick>
 8008a50:	4602      	mov	r2, r0
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	1ad3      	subs	r3, r2, r3
 8008a56:	2b64      	cmp	r3, #100	; 0x64
 8008a58:	d901      	bls.n	8008a5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008a5a:	2303      	movs	r3, #3
 8008a5c:	e1f3      	b.n	8008e46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a5e:	4b51      	ldr	r3, [pc, #324]	; (8008ba4 <HAL_RCC_OscConfig+0x240>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1f0      	bne.n	8008a4c <HAL_RCC_OscConfig+0xe8>
 8008a6a:	e000      	b.n	8008a6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 0302 	and.w	r3, r3, #2
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d063      	beq.n	8008b42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008a7a:	4b4a      	ldr	r3, [pc, #296]	; (8008ba4 <HAL_RCC_OscConfig+0x240>)
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	f003 030c 	and.w	r3, r3, #12
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00b      	beq.n	8008a9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008a86:	4b47      	ldr	r3, [pc, #284]	; (8008ba4 <HAL_RCC_OscConfig+0x240>)
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008a8e:	2b08      	cmp	r3, #8
 8008a90:	d11c      	bne.n	8008acc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008a92:	4b44      	ldr	r3, [pc, #272]	; (8008ba4 <HAL_RCC_OscConfig+0x240>)
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d116      	bne.n	8008acc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a9e:	4b41      	ldr	r3, [pc, #260]	; (8008ba4 <HAL_RCC_OscConfig+0x240>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f003 0302 	and.w	r3, r3, #2
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d005      	beq.n	8008ab6 <HAL_RCC_OscConfig+0x152>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d001      	beq.n	8008ab6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e1c7      	b.n	8008e46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ab6:	4b3b      	ldr	r3, [pc, #236]	; (8008ba4 <HAL_RCC_OscConfig+0x240>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	00db      	lsls	r3, r3, #3
 8008ac4:	4937      	ldr	r1, [pc, #220]	; (8008ba4 <HAL_RCC_OscConfig+0x240>)
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008aca:	e03a      	b.n	8008b42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d020      	beq.n	8008b16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008ad4:	4b34      	ldr	r3, [pc, #208]	; (8008ba8 <HAL_RCC_OscConfig+0x244>)
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ada:	f7fb ffc1 	bl	8004a60 <HAL_GetTick>
 8008ade:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ae0:	e008      	b.n	8008af4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ae2:	f7fb ffbd 	bl	8004a60 <HAL_GetTick>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	1ad3      	subs	r3, r2, r3
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	d901      	bls.n	8008af4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008af0:	2303      	movs	r3, #3
 8008af2:	e1a8      	b.n	8008e46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008af4:	4b2b      	ldr	r3, [pc, #172]	; (8008ba4 <HAL_RCC_OscConfig+0x240>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 0302 	and.w	r3, r3, #2
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d0f0      	beq.n	8008ae2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b00:	4b28      	ldr	r3, [pc, #160]	; (8008ba4 <HAL_RCC_OscConfig+0x240>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	691b      	ldr	r3, [r3, #16]
 8008b0c:	00db      	lsls	r3, r3, #3
 8008b0e:	4925      	ldr	r1, [pc, #148]	; (8008ba4 <HAL_RCC_OscConfig+0x240>)
 8008b10:	4313      	orrs	r3, r2
 8008b12:	600b      	str	r3, [r1, #0]
 8008b14:	e015      	b.n	8008b42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008b16:	4b24      	ldr	r3, [pc, #144]	; (8008ba8 <HAL_RCC_OscConfig+0x244>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b1c:	f7fb ffa0 	bl	8004a60 <HAL_GetTick>
 8008b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b22:	e008      	b.n	8008b36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b24:	f7fb ff9c 	bl	8004a60 <HAL_GetTick>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d901      	bls.n	8008b36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008b32:	2303      	movs	r3, #3
 8008b34:	e187      	b.n	8008e46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b36:	4b1b      	ldr	r3, [pc, #108]	; (8008ba4 <HAL_RCC_OscConfig+0x240>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f003 0302 	and.w	r3, r3, #2
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1f0      	bne.n	8008b24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f003 0308 	and.w	r3, r3, #8
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d036      	beq.n	8008bbc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	695b      	ldr	r3, [r3, #20]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d016      	beq.n	8008b84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b56:	4b15      	ldr	r3, [pc, #84]	; (8008bac <HAL_RCC_OscConfig+0x248>)
 8008b58:	2201      	movs	r2, #1
 8008b5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b5c:	f7fb ff80 	bl	8004a60 <HAL_GetTick>
 8008b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b62:	e008      	b.n	8008b76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b64:	f7fb ff7c 	bl	8004a60 <HAL_GetTick>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	1ad3      	subs	r3, r2, r3
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d901      	bls.n	8008b76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008b72:	2303      	movs	r3, #3
 8008b74:	e167      	b.n	8008e46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b76:	4b0b      	ldr	r3, [pc, #44]	; (8008ba4 <HAL_RCC_OscConfig+0x240>)
 8008b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b7a:	f003 0302 	and.w	r3, r3, #2
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d0f0      	beq.n	8008b64 <HAL_RCC_OscConfig+0x200>
 8008b82:	e01b      	b.n	8008bbc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b84:	4b09      	ldr	r3, [pc, #36]	; (8008bac <HAL_RCC_OscConfig+0x248>)
 8008b86:	2200      	movs	r2, #0
 8008b88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b8a:	f7fb ff69 	bl	8004a60 <HAL_GetTick>
 8008b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b90:	e00e      	b.n	8008bb0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b92:	f7fb ff65 	bl	8004a60 <HAL_GetTick>
 8008b96:	4602      	mov	r2, r0
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	1ad3      	subs	r3, r2, r3
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d907      	bls.n	8008bb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	e150      	b.n	8008e46 <HAL_RCC_OscConfig+0x4e2>
 8008ba4:	40023800 	.word	0x40023800
 8008ba8:	42470000 	.word	0x42470000
 8008bac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008bb0:	4b88      	ldr	r3, [pc, #544]	; (8008dd4 <HAL_RCC_OscConfig+0x470>)
 8008bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bb4:	f003 0302 	and.w	r3, r3, #2
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d1ea      	bne.n	8008b92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f003 0304 	and.w	r3, r3, #4
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f000 8097 	beq.w	8008cf8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008bce:	4b81      	ldr	r3, [pc, #516]	; (8008dd4 <HAL_RCC_OscConfig+0x470>)
 8008bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d10f      	bne.n	8008bfa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008bda:	2300      	movs	r3, #0
 8008bdc:	60bb      	str	r3, [r7, #8]
 8008bde:	4b7d      	ldr	r3, [pc, #500]	; (8008dd4 <HAL_RCC_OscConfig+0x470>)
 8008be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be2:	4a7c      	ldr	r2, [pc, #496]	; (8008dd4 <HAL_RCC_OscConfig+0x470>)
 8008be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008be8:	6413      	str	r3, [r2, #64]	; 0x40
 8008bea:	4b7a      	ldr	r3, [pc, #488]	; (8008dd4 <HAL_RCC_OscConfig+0x470>)
 8008bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bf2:	60bb      	str	r3, [r7, #8]
 8008bf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008bfa:	4b77      	ldr	r3, [pc, #476]	; (8008dd8 <HAL_RCC_OscConfig+0x474>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d118      	bne.n	8008c38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008c06:	4b74      	ldr	r3, [pc, #464]	; (8008dd8 <HAL_RCC_OscConfig+0x474>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a73      	ldr	r2, [pc, #460]	; (8008dd8 <HAL_RCC_OscConfig+0x474>)
 8008c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008c12:	f7fb ff25 	bl	8004a60 <HAL_GetTick>
 8008c16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c18:	e008      	b.n	8008c2c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c1a:	f7fb ff21 	bl	8004a60 <HAL_GetTick>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	1ad3      	subs	r3, r2, r3
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	d901      	bls.n	8008c2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008c28:	2303      	movs	r3, #3
 8008c2a:	e10c      	b.n	8008e46 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c2c:	4b6a      	ldr	r3, [pc, #424]	; (8008dd8 <HAL_RCC_OscConfig+0x474>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d0f0      	beq.n	8008c1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d106      	bne.n	8008c4e <HAL_RCC_OscConfig+0x2ea>
 8008c40:	4b64      	ldr	r3, [pc, #400]	; (8008dd4 <HAL_RCC_OscConfig+0x470>)
 8008c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c44:	4a63      	ldr	r2, [pc, #396]	; (8008dd4 <HAL_RCC_OscConfig+0x470>)
 8008c46:	f043 0301 	orr.w	r3, r3, #1
 8008c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8008c4c:	e01c      	b.n	8008c88 <HAL_RCC_OscConfig+0x324>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	2b05      	cmp	r3, #5
 8008c54:	d10c      	bne.n	8008c70 <HAL_RCC_OscConfig+0x30c>
 8008c56:	4b5f      	ldr	r3, [pc, #380]	; (8008dd4 <HAL_RCC_OscConfig+0x470>)
 8008c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c5a:	4a5e      	ldr	r2, [pc, #376]	; (8008dd4 <HAL_RCC_OscConfig+0x470>)
 8008c5c:	f043 0304 	orr.w	r3, r3, #4
 8008c60:	6713      	str	r3, [r2, #112]	; 0x70
 8008c62:	4b5c      	ldr	r3, [pc, #368]	; (8008dd4 <HAL_RCC_OscConfig+0x470>)
 8008c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c66:	4a5b      	ldr	r2, [pc, #364]	; (8008dd4 <HAL_RCC_OscConfig+0x470>)
 8008c68:	f043 0301 	orr.w	r3, r3, #1
 8008c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8008c6e:	e00b      	b.n	8008c88 <HAL_RCC_OscConfig+0x324>
 8008c70:	4b58      	ldr	r3, [pc, #352]	; (8008dd4 <HAL_RCC_OscConfig+0x470>)
 8008c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c74:	4a57      	ldr	r2, [pc, #348]	; (8008dd4 <HAL_RCC_OscConfig+0x470>)
 8008c76:	f023 0301 	bic.w	r3, r3, #1
 8008c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8008c7c:	4b55      	ldr	r3, [pc, #340]	; (8008dd4 <HAL_RCC_OscConfig+0x470>)
 8008c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c80:	4a54      	ldr	r2, [pc, #336]	; (8008dd4 <HAL_RCC_OscConfig+0x470>)
 8008c82:	f023 0304 	bic.w	r3, r3, #4
 8008c86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d015      	beq.n	8008cbc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c90:	f7fb fee6 	bl	8004a60 <HAL_GetTick>
 8008c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c96:	e00a      	b.n	8008cae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c98:	f7fb fee2 	bl	8004a60 <HAL_GetTick>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d901      	bls.n	8008cae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008caa:	2303      	movs	r3, #3
 8008cac:	e0cb      	b.n	8008e46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008cae:	4b49      	ldr	r3, [pc, #292]	; (8008dd4 <HAL_RCC_OscConfig+0x470>)
 8008cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cb2:	f003 0302 	and.w	r3, r3, #2
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d0ee      	beq.n	8008c98 <HAL_RCC_OscConfig+0x334>
 8008cba:	e014      	b.n	8008ce6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008cbc:	f7fb fed0 	bl	8004a60 <HAL_GetTick>
 8008cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008cc2:	e00a      	b.n	8008cda <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008cc4:	f7fb fecc 	bl	8004a60 <HAL_GetTick>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	1ad3      	subs	r3, r2, r3
 8008cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d901      	bls.n	8008cda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	e0b5      	b.n	8008e46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008cda:	4b3e      	ldr	r3, [pc, #248]	; (8008dd4 <HAL_RCC_OscConfig+0x470>)
 8008cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cde:	f003 0302 	and.w	r3, r3, #2
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d1ee      	bne.n	8008cc4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008ce6:	7dfb      	ldrb	r3, [r7, #23]
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d105      	bne.n	8008cf8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008cec:	4b39      	ldr	r3, [pc, #228]	; (8008dd4 <HAL_RCC_OscConfig+0x470>)
 8008cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf0:	4a38      	ldr	r2, [pc, #224]	; (8008dd4 <HAL_RCC_OscConfig+0x470>)
 8008cf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cf6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	699b      	ldr	r3, [r3, #24]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f000 80a1 	beq.w	8008e44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008d02:	4b34      	ldr	r3, [pc, #208]	; (8008dd4 <HAL_RCC_OscConfig+0x470>)
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	f003 030c 	and.w	r3, r3, #12
 8008d0a:	2b08      	cmp	r3, #8
 8008d0c:	d05c      	beq.n	8008dc8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d141      	bne.n	8008d9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d16:	4b31      	ldr	r3, [pc, #196]	; (8008ddc <HAL_RCC_OscConfig+0x478>)
 8008d18:	2200      	movs	r2, #0
 8008d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d1c:	f7fb fea0 	bl	8004a60 <HAL_GetTick>
 8008d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d22:	e008      	b.n	8008d36 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d24:	f7fb fe9c 	bl	8004a60 <HAL_GetTick>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	1ad3      	subs	r3, r2, r3
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	d901      	bls.n	8008d36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008d32:	2303      	movs	r3, #3
 8008d34:	e087      	b.n	8008e46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d36:	4b27      	ldr	r3, [pc, #156]	; (8008dd4 <HAL_RCC_OscConfig+0x470>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1f0      	bne.n	8008d24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	69da      	ldr	r2, [r3, #28]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6a1b      	ldr	r3, [r3, #32]
 8008d4a:	431a      	orrs	r2, r3
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d50:	019b      	lsls	r3, r3, #6
 8008d52:	431a      	orrs	r2, r3
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d58:	085b      	lsrs	r3, r3, #1
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	041b      	lsls	r3, r3, #16
 8008d5e:	431a      	orrs	r2, r3
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d64:	061b      	lsls	r3, r3, #24
 8008d66:	491b      	ldr	r1, [pc, #108]	; (8008dd4 <HAL_RCC_OscConfig+0x470>)
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d6c:	4b1b      	ldr	r3, [pc, #108]	; (8008ddc <HAL_RCC_OscConfig+0x478>)
 8008d6e:	2201      	movs	r2, #1
 8008d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d72:	f7fb fe75 	bl	8004a60 <HAL_GetTick>
 8008d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d78:	e008      	b.n	8008d8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d7a:	f7fb fe71 	bl	8004a60 <HAL_GetTick>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	d901      	bls.n	8008d8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008d88:	2303      	movs	r3, #3
 8008d8a:	e05c      	b.n	8008e46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d8c:	4b11      	ldr	r3, [pc, #68]	; (8008dd4 <HAL_RCC_OscConfig+0x470>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d0f0      	beq.n	8008d7a <HAL_RCC_OscConfig+0x416>
 8008d98:	e054      	b.n	8008e44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d9a:	4b10      	ldr	r3, [pc, #64]	; (8008ddc <HAL_RCC_OscConfig+0x478>)
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008da0:	f7fb fe5e 	bl	8004a60 <HAL_GetTick>
 8008da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008da6:	e008      	b.n	8008dba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008da8:	f7fb fe5a 	bl	8004a60 <HAL_GetTick>
 8008dac:	4602      	mov	r2, r0
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	1ad3      	subs	r3, r2, r3
 8008db2:	2b02      	cmp	r3, #2
 8008db4:	d901      	bls.n	8008dba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008db6:	2303      	movs	r3, #3
 8008db8:	e045      	b.n	8008e46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dba:	4b06      	ldr	r3, [pc, #24]	; (8008dd4 <HAL_RCC_OscConfig+0x470>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d1f0      	bne.n	8008da8 <HAL_RCC_OscConfig+0x444>
 8008dc6:	e03d      	b.n	8008e44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	699b      	ldr	r3, [r3, #24]
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d107      	bne.n	8008de0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e038      	b.n	8008e46 <HAL_RCC_OscConfig+0x4e2>
 8008dd4:	40023800 	.word	0x40023800
 8008dd8:	40007000 	.word	0x40007000
 8008ddc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008de0:	4b1b      	ldr	r3, [pc, #108]	; (8008e50 <HAL_RCC_OscConfig+0x4ec>)
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	699b      	ldr	r3, [r3, #24]
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d028      	beq.n	8008e40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d121      	bne.n	8008e40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d11a      	bne.n	8008e40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008e0a:	68fa      	ldr	r2, [r7, #12]
 8008e0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008e10:	4013      	ands	r3, r2
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008e16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d111      	bne.n	8008e40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e26:	085b      	lsrs	r3, r3, #1
 8008e28:	3b01      	subs	r3, #1
 8008e2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d107      	bne.n	8008e40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d001      	beq.n	8008e44 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008e40:	2301      	movs	r3, #1
 8008e42:	e000      	b.n	8008e46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008e44:	2300      	movs	r3, #0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3718      	adds	r7, #24
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	40023800 	.word	0x40023800

08008e54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d101      	bne.n	8008e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008e64:	2301      	movs	r3, #1
 8008e66:	e0cc      	b.n	8009002 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008e68:	4b68      	ldr	r3, [pc, #416]	; (800900c <HAL_RCC_ClockConfig+0x1b8>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f003 0307 	and.w	r3, r3, #7
 8008e70:	683a      	ldr	r2, [r7, #0]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d90c      	bls.n	8008e90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e76:	4b65      	ldr	r3, [pc, #404]	; (800900c <HAL_RCC_ClockConfig+0x1b8>)
 8008e78:	683a      	ldr	r2, [r7, #0]
 8008e7a:	b2d2      	uxtb	r2, r2
 8008e7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e7e:	4b63      	ldr	r3, [pc, #396]	; (800900c <HAL_RCC_ClockConfig+0x1b8>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f003 0307 	and.w	r3, r3, #7
 8008e86:	683a      	ldr	r2, [r7, #0]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d001      	beq.n	8008e90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e0b8      	b.n	8009002 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f003 0302 	and.w	r3, r3, #2
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d020      	beq.n	8008ede <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f003 0304 	and.w	r3, r3, #4
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d005      	beq.n	8008eb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ea8:	4b59      	ldr	r3, [pc, #356]	; (8009010 <HAL_RCC_ClockConfig+0x1bc>)
 8008eaa:	689b      	ldr	r3, [r3, #8]
 8008eac:	4a58      	ldr	r2, [pc, #352]	; (8009010 <HAL_RCC_ClockConfig+0x1bc>)
 8008eae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008eb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f003 0308 	and.w	r3, r3, #8
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d005      	beq.n	8008ecc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008ec0:	4b53      	ldr	r3, [pc, #332]	; (8009010 <HAL_RCC_ClockConfig+0x1bc>)
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	4a52      	ldr	r2, [pc, #328]	; (8009010 <HAL_RCC_ClockConfig+0x1bc>)
 8008ec6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008eca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ecc:	4b50      	ldr	r3, [pc, #320]	; (8009010 <HAL_RCC_ClockConfig+0x1bc>)
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	494d      	ldr	r1, [pc, #308]	; (8009010 <HAL_RCC_ClockConfig+0x1bc>)
 8008eda:	4313      	orrs	r3, r2
 8008edc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f003 0301 	and.w	r3, r3, #1
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d044      	beq.n	8008f74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d107      	bne.n	8008f02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ef2:	4b47      	ldr	r3, [pc, #284]	; (8009010 <HAL_RCC_ClockConfig+0x1bc>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d119      	bne.n	8008f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008efe:	2301      	movs	r3, #1
 8008f00:	e07f      	b.n	8009002 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	2b02      	cmp	r3, #2
 8008f08:	d003      	beq.n	8008f12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008f0e:	2b03      	cmp	r3, #3
 8008f10:	d107      	bne.n	8008f22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f12:	4b3f      	ldr	r3, [pc, #252]	; (8009010 <HAL_RCC_ClockConfig+0x1bc>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d109      	bne.n	8008f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e06f      	b.n	8009002 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f22:	4b3b      	ldr	r3, [pc, #236]	; (8009010 <HAL_RCC_ClockConfig+0x1bc>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f003 0302 	and.w	r3, r3, #2
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d101      	bne.n	8008f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e067      	b.n	8009002 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008f32:	4b37      	ldr	r3, [pc, #220]	; (8009010 <HAL_RCC_ClockConfig+0x1bc>)
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	f023 0203 	bic.w	r2, r3, #3
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	4934      	ldr	r1, [pc, #208]	; (8009010 <HAL_RCC_ClockConfig+0x1bc>)
 8008f40:	4313      	orrs	r3, r2
 8008f42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008f44:	f7fb fd8c 	bl	8004a60 <HAL_GetTick>
 8008f48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f4a:	e00a      	b.n	8008f62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f4c:	f7fb fd88 	bl	8004a60 <HAL_GetTick>
 8008f50:	4602      	mov	r2, r0
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	1ad3      	subs	r3, r2, r3
 8008f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d901      	bls.n	8008f62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008f5e:	2303      	movs	r3, #3
 8008f60:	e04f      	b.n	8009002 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f62:	4b2b      	ldr	r3, [pc, #172]	; (8009010 <HAL_RCC_ClockConfig+0x1bc>)
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	f003 020c 	and.w	r2, r3, #12
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d1eb      	bne.n	8008f4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008f74:	4b25      	ldr	r3, [pc, #148]	; (800900c <HAL_RCC_ClockConfig+0x1b8>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f003 0307 	and.w	r3, r3, #7
 8008f7c:	683a      	ldr	r2, [r7, #0]
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d20c      	bcs.n	8008f9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f82:	4b22      	ldr	r3, [pc, #136]	; (800900c <HAL_RCC_ClockConfig+0x1b8>)
 8008f84:	683a      	ldr	r2, [r7, #0]
 8008f86:	b2d2      	uxtb	r2, r2
 8008f88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f8a:	4b20      	ldr	r3, [pc, #128]	; (800900c <HAL_RCC_ClockConfig+0x1b8>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f003 0307 	and.w	r3, r3, #7
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d001      	beq.n	8008f9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	e032      	b.n	8009002 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0304 	and.w	r3, r3, #4
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d008      	beq.n	8008fba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008fa8:	4b19      	ldr	r3, [pc, #100]	; (8009010 <HAL_RCC_ClockConfig+0x1bc>)
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	4916      	ldr	r1, [pc, #88]	; (8009010 <HAL_RCC_ClockConfig+0x1bc>)
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f003 0308 	and.w	r3, r3, #8
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d009      	beq.n	8008fda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008fc6:	4b12      	ldr	r3, [pc, #72]	; (8009010 <HAL_RCC_ClockConfig+0x1bc>)
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	00db      	lsls	r3, r3, #3
 8008fd4:	490e      	ldr	r1, [pc, #56]	; (8009010 <HAL_RCC_ClockConfig+0x1bc>)
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008fda:	f000 f821 	bl	8009020 <HAL_RCC_GetSysClockFreq>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	4b0b      	ldr	r3, [pc, #44]	; (8009010 <HAL_RCC_ClockConfig+0x1bc>)
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	091b      	lsrs	r3, r3, #4
 8008fe6:	f003 030f 	and.w	r3, r3, #15
 8008fea:	490a      	ldr	r1, [pc, #40]	; (8009014 <HAL_RCC_ClockConfig+0x1c0>)
 8008fec:	5ccb      	ldrb	r3, [r1, r3]
 8008fee:	fa22 f303 	lsr.w	r3, r2, r3
 8008ff2:	4a09      	ldr	r2, [pc, #36]	; (8009018 <HAL_RCC_ClockConfig+0x1c4>)
 8008ff4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008ff6:	4b09      	ldr	r3, [pc, #36]	; (800901c <HAL_RCC_ClockConfig+0x1c8>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7fb f8ce 	bl	800419c <HAL_InitTick>

  return HAL_OK;
 8009000:	2300      	movs	r3, #0
}
 8009002:	4618      	mov	r0, r3
 8009004:	3710      	adds	r7, #16
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	40023c00 	.word	0x40023c00
 8009010:	40023800 	.word	0x40023800
 8009014:	0800fad0 	.word	0x0800fad0
 8009018:	20000000 	.word	0x20000000
 800901c:	20000004 	.word	0x20000004

08009020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009024:	b094      	sub	sp, #80	; 0x50
 8009026:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009028:	2300      	movs	r3, #0
 800902a:	647b      	str	r3, [r7, #68]	; 0x44
 800902c:	2300      	movs	r3, #0
 800902e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009030:	2300      	movs	r3, #0
 8009032:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009034:	2300      	movs	r3, #0
 8009036:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009038:	4b79      	ldr	r3, [pc, #484]	; (8009220 <HAL_RCC_GetSysClockFreq+0x200>)
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	f003 030c 	and.w	r3, r3, #12
 8009040:	2b08      	cmp	r3, #8
 8009042:	d00d      	beq.n	8009060 <HAL_RCC_GetSysClockFreq+0x40>
 8009044:	2b08      	cmp	r3, #8
 8009046:	f200 80e1 	bhi.w	800920c <HAL_RCC_GetSysClockFreq+0x1ec>
 800904a:	2b00      	cmp	r3, #0
 800904c:	d002      	beq.n	8009054 <HAL_RCC_GetSysClockFreq+0x34>
 800904e:	2b04      	cmp	r3, #4
 8009050:	d003      	beq.n	800905a <HAL_RCC_GetSysClockFreq+0x3a>
 8009052:	e0db      	b.n	800920c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009054:	4b73      	ldr	r3, [pc, #460]	; (8009224 <HAL_RCC_GetSysClockFreq+0x204>)
 8009056:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009058:	e0db      	b.n	8009212 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800905a:	4b73      	ldr	r3, [pc, #460]	; (8009228 <HAL_RCC_GetSysClockFreq+0x208>)
 800905c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800905e:	e0d8      	b.n	8009212 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009060:	4b6f      	ldr	r3, [pc, #444]	; (8009220 <HAL_RCC_GetSysClockFreq+0x200>)
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009068:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800906a:	4b6d      	ldr	r3, [pc, #436]	; (8009220 <HAL_RCC_GetSysClockFreq+0x200>)
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009072:	2b00      	cmp	r3, #0
 8009074:	d063      	beq.n	800913e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009076:	4b6a      	ldr	r3, [pc, #424]	; (8009220 <HAL_RCC_GetSysClockFreq+0x200>)
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	099b      	lsrs	r3, r3, #6
 800907c:	2200      	movs	r2, #0
 800907e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009080:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009088:	633b      	str	r3, [r7, #48]	; 0x30
 800908a:	2300      	movs	r3, #0
 800908c:	637b      	str	r3, [r7, #52]	; 0x34
 800908e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009092:	4622      	mov	r2, r4
 8009094:	462b      	mov	r3, r5
 8009096:	f04f 0000 	mov.w	r0, #0
 800909a:	f04f 0100 	mov.w	r1, #0
 800909e:	0159      	lsls	r1, r3, #5
 80090a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80090a4:	0150      	lsls	r0, r2, #5
 80090a6:	4602      	mov	r2, r0
 80090a8:	460b      	mov	r3, r1
 80090aa:	4621      	mov	r1, r4
 80090ac:	1a51      	subs	r1, r2, r1
 80090ae:	6139      	str	r1, [r7, #16]
 80090b0:	4629      	mov	r1, r5
 80090b2:	eb63 0301 	sbc.w	r3, r3, r1
 80090b6:	617b      	str	r3, [r7, #20]
 80090b8:	f04f 0200 	mov.w	r2, #0
 80090bc:	f04f 0300 	mov.w	r3, #0
 80090c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80090c4:	4659      	mov	r1, fp
 80090c6:	018b      	lsls	r3, r1, #6
 80090c8:	4651      	mov	r1, sl
 80090ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80090ce:	4651      	mov	r1, sl
 80090d0:	018a      	lsls	r2, r1, #6
 80090d2:	4651      	mov	r1, sl
 80090d4:	ebb2 0801 	subs.w	r8, r2, r1
 80090d8:	4659      	mov	r1, fp
 80090da:	eb63 0901 	sbc.w	r9, r3, r1
 80090de:	f04f 0200 	mov.w	r2, #0
 80090e2:	f04f 0300 	mov.w	r3, #0
 80090e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80090ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80090ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80090f2:	4690      	mov	r8, r2
 80090f4:	4699      	mov	r9, r3
 80090f6:	4623      	mov	r3, r4
 80090f8:	eb18 0303 	adds.w	r3, r8, r3
 80090fc:	60bb      	str	r3, [r7, #8]
 80090fe:	462b      	mov	r3, r5
 8009100:	eb49 0303 	adc.w	r3, r9, r3
 8009104:	60fb      	str	r3, [r7, #12]
 8009106:	f04f 0200 	mov.w	r2, #0
 800910a:	f04f 0300 	mov.w	r3, #0
 800910e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009112:	4629      	mov	r1, r5
 8009114:	024b      	lsls	r3, r1, #9
 8009116:	4621      	mov	r1, r4
 8009118:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800911c:	4621      	mov	r1, r4
 800911e:	024a      	lsls	r2, r1, #9
 8009120:	4610      	mov	r0, r2
 8009122:	4619      	mov	r1, r3
 8009124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009126:	2200      	movs	r2, #0
 8009128:	62bb      	str	r3, [r7, #40]	; 0x28
 800912a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800912c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009130:	f7f7 fc44 	bl	80009bc <__aeabi_uldivmod>
 8009134:	4602      	mov	r2, r0
 8009136:	460b      	mov	r3, r1
 8009138:	4613      	mov	r3, r2
 800913a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800913c:	e058      	b.n	80091f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800913e:	4b38      	ldr	r3, [pc, #224]	; (8009220 <HAL_RCC_GetSysClockFreq+0x200>)
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	099b      	lsrs	r3, r3, #6
 8009144:	2200      	movs	r2, #0
 8009146:	4618      	mov	r0, r3
 8009148:	4611      	mov	r1, r2
 800914a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800914e:	623b      	str	r3, [r7, #32]
 8009150:	2300      	movs	r3, #0
 8009152:	627b      	str	r3, [r7, #36]	; 0x24
 8009154:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009158:	4642      	mov	r2, r8
 800915a:	464b      	mov	r3, r9
 800915c:	f04f 0000 	mov.w	r0, #0
 8009160:	f04f 0100 	mov.w	r1, #0
 8009164:	0159      	lsls	r1, r3, #5
 8009166:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800916a:	0150      	lsls	r0, r2, #5
 800916c:	4602      	mov	r2, r0
 800916e:	460b      	mov	r3, r1
 8009170:	4641      	mov	r1, r8
 8009172:	ebb2 0a01 	subs.w	sl, r2, r1
 8009176:	4649      	mov	r1, r9
 8009178:	eb63 0b01 	sbc.w	fp, r3, r1
 800917c:	f04f 0200 	mov.w	r2, #0
 8009180:	f04f 0300 	mov.w	r3, #0
 8009184:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009188:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800918c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009190:	ebb2 040a 	subs.w	r4, r2, sl
 8009194:	eb63 050b 	sbc.w	r5, r3, fp
 8009198:	f04f 0200 	mov.w	r2, #0
 800919c:	f04f 0300 	mov.w	r3, #0
 80091a0:	00eb      	lsls	r3, r5, #3
 80091a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80091a6:	00e2      	lsls	r2, r4, #3
 80091a8:	4614      	mov	r4, r2
 80091aa:	461d      	mov	r5, r3
 80091ac:	4643      	mov	r3, r8
 80091ae:	18e3      	adds	r3, r4, r3
 80091b0:	603b      	str	r3, [r7, #0]
 80091b2:	464b      	mov	r3, r9
 80091b4:	eb45 0303 	adc.w	r3, r5, r3
 80091b8:	607b      	str	r3, [r7, #4]
 80091ba:	f04f 0200 	mov.w	r2, #0
 80091be:	f04f 0300 	mov.w	r3, #0
 80091c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80091c6:	4629      	mov	r1, r5
 80091c8:	028b      	lsls	r3, r1, #10
 80091ca:	4621      	mov	r1, r4
 80091cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80091d0:	4621      	mov	r1, r4
 80091d2:	028a      	lsls	r2, r1, #10
 80091d4:	4610      	mov	r0, r2
 80091d6:	4619      	mov	r1, r3
 80091d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091da:	2200      	movs	r2, #0
 80091dc:	61bb      	str	r3, [r7, #24]
 80091de:	61fa      	str	r2, [r7, #28]
 80091e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80091e4:	f7f7 fbea 	bl	80009bc <__aeabi_uldivmod>
 80091e8:	4602      	mov	r2, r0
 80091ea:	460b      	mov	r3, r1
 80091ec:	4613      	mov	r3, r2
 80091ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80091f0:	4b0b      	ldr	r3, [pc, #44]	; (8009220 <HAL_RCC_GetSysClockFreq+0x200>)
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	0c1b      	lsrs	r3, r3, #16
 80091f6:	f003 0303 	and.w	r3, r3, #3
 80091fa:	3301      	adds	r3, #1
 80091fc:	005b      	lsls	r3, r3, #1
 80091fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009200:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009204:	fbb2 f3f3 	udiv	r3, r2, r3
 8009208:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800920a:	e002      	b.n	8009212 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800920c:	4b05      	ldr	r3, [pc, #20]	; (8009224 <HAL_RCC_GetSysClockFreq+0x204>)
 800920e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009210:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009214:	4618      	mov	r0, r3
 8009216:	3750      	adds	r7, #80	; 0x50
 8009218:	46bd      	mov	sp, r7
 800921a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800921e:	bf00      	nop
 8009220:	40023800 	.word	0x40023800
 8009224:	00f42400 	.word	0x00f42400
 8009228:	007a1200 	.word	0x007a1200

0800922c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800922c:	b480      	push	{r7}
 800922e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009230:	4b03      	ldr	r3, [pc, #12]	; (8009240 <HAL_RCC_GetHCLKFreq+0x14>)
 8009232:	681b      	ldr	r3, [r3, #0]
}
 8009234:	4618      	mov	r0, r3
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr
 800923e:	bf00      	nop
 8009240:	20000000 	.word	0x20000000

08009244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009248:	f7ff fff0 	bl	800922c <HAL_RCC_GetHCLKFreq>
 800924c:	4602      	mov	r2, r0
 800924e:	4b05      	ldr	r3, [pc, #20]	; (8009264 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	0a9b      	lsrs	r3, r3, #10
 8009254:	f003 0307 	and.w	r3, r3, #7
 8009258:	4903      	ldr	r1, [pc, #12]	; (8009268 <HAL_RCC_GetPCLK1Freq+0x24>)
 800925a:	5ccb      	ldrb	r3, [r1, r3]
 800925c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009260:	4618      	mov	r0, r3
 8009262:	bd80      	pop	{r7, pc}
 8009264:	40023800 	.word	0x40023800
 8009268:	0800fae0 	.word	0x0800fae0

0800926c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009270:	f7ff ffdc 	bl	800922c <HAL_RCC_GetHCLKFreq>
 8009274:	4602      	mov	r2, r0
 8009276:	4b05      	ldr	r3, [pc, #20]	; (800928c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	0b5b      	lsrs	r3, r3, #13
 800927c:	f003 0307 	and.w	r3, r3, #7
 8009280:	4903      	ldr	r1, [pc, #12]	; (8009290 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009282:	5ccb      	ldrb	r3, [r1, r3]
 8009284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009288:	4618      	mov	r0, r3
 800928a:	bd80      	pop	{r7, pc}
 800928c:	40023800 	.word	0x40023800
 8009290:	0800fae0 	.word	0x0800fae0

08009294 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	220f      	movs	r2, #15
 80092a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80092a4:	4b12      	ldr	r3, [pc, #72]	; (80092f0 <HAL_RCC_GetClockConfig+0x5c>)
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	f003 0203 	and.w	r2, r3, #3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80092b0:	4b0f      	ldr	r3, [pc, #60]	; (80092f0 <HAL_RCC_GetClockConfig+0x5c>)
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80092bc:	4b0c      	ldr	r3, [pc, #48]	; (80092f0 <HAL_RCC_GetClockConfig+0x5c>)
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80092c8:	4b09      	ldr	r3, [pc, #36]	; (80092f0 <HAL_RCC_GetClockConfig+0x5c>)
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	08db      	lsrs	r3, r3, #3
 80092ce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80092d6:	4b07      	ldr	r3, [pc, #28]	; (80092f4 <HAL_RCC_GetClockConfig+0x60>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f003 0207 	and.w	r2, r3, #7
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	601a      	str	r2, [r3, #0]
}
 80092e2:	bf00      	nop
 80092e4:	370c      	adds	r7, #12
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr
 80092ee:	bf00      	nop
 80092f0:	40023800 	.word	0x40023800
 80092f4:	40023c00 	.word	0x40023c00

080092f8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b086      	sub	sp, #24
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009300:	2300      	movs	r3, #0
 8009302:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009304:	2300      	movs	r3, #0
 8009306:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f003 0301 	and.w	r3, r3, #1
 8009310:	2b00      	cmp	r3, #0
 8009312:	d105      	bne.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800931c:	2b00      	cmp	r3, #0
 800931e:	d038      	beq.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009320:	4b68      	ldr	r3, [pc, #416]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009322:	2200      	movs	r2, #0
 8009324:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009326:	f7fb fb9b 	bl	8004a60 <HAL_GetTick>
 800932a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800932c:	e008      	b.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800932e:	f7fb fb97 	bl	8004a60 <HAL_GetTick>
 8009332:	4602      	mov	r2, r0
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	1ad3      	subs	r3, r2, r3
 8009338:	2b02      	cmp	r3, #2
 800933a:	d901      	bls.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800933c:	2303      	movs	r3, #3
 800933e:	e0bd      	b.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009340:	4b61      	ldr	r3, [pc, #388]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009348:	2b00      	cmp	r3, #0
 800934a:	d1f0      	bne.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	685a      	ldr	r2, [r3, #4]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	019b      	lsls	r3, r3, #6
 8009356:	431a      	orrs	r2, r3
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	071b      	lsls	r3, r3, #28
 800935e:	495a      	ldr	r1, [pc, #360]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009360:	4313      	orrs	r3, r2
 8009362:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009366:	4b57      	ldr	r3, [pc, #348]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009368:	2201      	movs	r2, #1
 800936a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800936c:	f7fb fb78 	bl	8004a60 <HAL_GetTick>
 8009370:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009372:	e008      	b.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009374:	f7fb fb74 	bl	8004a60 <HAL_GetTick>
 8009378:	4602      	mov	r2, r0
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	1ad3      	subs	r3, r2, r3
 800937e:	2b02      	cmp	r3, #2
 8009380:	d901      	bls.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009382:	2303      	movs	r3, #3
 8009384:	e09a      	b.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009386:	4b50      	ldr	r3, [pc, #320]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800938e:	2b00      	cmp	r3, #0
 8009390:	d0f0      	beq.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f003 0302 	and.w	r3, r3, #2
 800939a:	2b00      	cmp	r3, #0
 800939c:	f000 8083 	beq.w	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80093a0:	2300      	movs	r3, #0
 80093a2:	60fb      	str	r3, [r7, #12]
 80093a4:	4b48      	ldr	r3, [pc, #288]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a8:	4a47      	ldr	r2, [pc, #284]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093ae:	6413      	str	r3, [r2, #64]	; 0x40
 80093b0:	4b45      	ldr	r3, [pc, #276]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093b8:	60fb      	str	r3, [r7, #12]
 80093ba:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80093bc:	4b43      	ldr	r3, [pc, #268]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a42      	ldr	r2, [pc, #264]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80093c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093c6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80093c8:	f7fb fb4a 	bl	8004a60 <HAL_GetTick>
 80093cc:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80093ce:	e008      	b.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80093d0:	f7fb fb46 	bl	8004a60 <HAL_GetTick>
 80093d4:	4602      	mov	r2, r0
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	1ad3      	subs	r3, r2, r3
 80093da:	2b02      	cmp	r3, #2
 80093dc:	d901      	bls.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80093de:	2303      	movs	r3, #3
 80093e0:	e06c      	b.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80093e2:	4b3a      	ldr	r3, [pc, #232]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d0f0      	beq.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80093ee:	4b36      	ldr	r3, [pc, #216]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093f6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d02f      	beq.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	691b      	ldr	r3, [r3, #16]
 8009402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009406:	693a      	ldr	r2, [r7, #16]
 8009408:	429a      	cmp	r2, r3
 800940a:	d028      	beq.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800940c:	4b2e      	ldr	r3, [pc, #184]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800940e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009414:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009416:	4b2e      	ldr	r3, [pc, #184]	; (80094d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009418:	2201      	movs	r2, #1
 800941a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800941c:	4b2c      	ldr	r3, [pc, #176]	; (80094d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800941e:	2200      	movs	r2, #0
 8009420:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009422:	4a29      	ldr	r2, [pc, #164]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009428:	4b27      	ldr	r3, [pc, #156]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800942a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800942c:	f003 0301 	and.w	r3, r3, #1
 8009430:	2b01      	cmp	r3, #1
 8009432:	d114      	bne.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009434:	f7fb fb14 	bl	8004a60 <HAL_GetTick>
 8009438:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800943a:	e00a      	b.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800943c:	f7fb fb10 	bl	8004a60 <HAL_GetTick>
 8009440:	4602      	mov	r2, r0
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	1ad3      	subs	r3, r2, r3
 8009446:	f241 3288 	movw	r2, #5000	; 0x1388
 800944a:	4293      	cmp	r3, r2
 800944c:	d901      	bls.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800944e:	2303      	movs	r3, #3
 8009450:	e034      	b.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009452:	4b1d      	ldr	r3, [pc, #116]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009456:	f003 0302 	and.w	r3, r3, #2
 800945a:	2b00      	cmp	r3, #0
 800945c:	d0ee      	beq.n	800943c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009466:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800946a:	d10d      	bne.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800946c:	4b16      	ldr	r3, [pc, #88]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	691b      	ldr	r3, [r3, #16]
 8009478:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800947c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009480:	4911      	ldr	r1, [pc, #68]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009482:	4313      	orrs	r3, r2
 8009484:	608b      	str	r3, [r1, #8]
 8009486:	e005      	b.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8009488:	4b0f      	ldr	r3, [pc, #60]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	4a0e      	ldr	r2, [pc, #56]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800948e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009492:	6093      	str	r3, [r2, #8]
 8009494:	4b0c      	ldr	r3, [pc, #48]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009496:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	691b      	ldr	r3, [r3, #16]
 800949c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094a0:	4909      	ldr	r1, [pc, #36]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094a2:	4313      	orrs	r3, r2
 80094a4:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f003 0308 	and.w	r3, r3, #8
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d003      	beq.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	7d1a      	ldrb	r2, [r3, #20]
 80094b6:	4b07      	ldr	r3, [pc, #28]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80094b8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80094ba:	2300      	movs	r3, #0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3718      	adds	r7, #24
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	42470068 	.word	0x42470068
 80094c8:	40023800 	.word	0x40023800
 80094cc:	40007000 	.word	0x40007000
 80094d0:	42470e40 	.word	0x42470e40
 80094d4:	424711e0 	.word	0x424711e0

080094d8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d101      	bne.n	80094ee <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	e084      	b.n	80095f8 <HAL_RTC_Init+0x120>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	7f5b      	ldrb	r3, [r3, #29]
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d123      	bne.n	8009540 <HAL_RTC_Init+0x68>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	771a      	strb	r2, [r3, #28]

    hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;        /* Legacy weak AlarmAEventCallback      */
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	4a3f      	ldr	r2, [pc, #252]	; (8009600 <HAL_RTC_Init+0x128>)
 8009502:	621a      	str	r2, [r3, #32]
    hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;      /* Legacy weak AlarmBEventCallback      */
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a3f      	ldr	r2, [pc, #252]	; (8009604 <HAL_RTC_Init+0x12c>)
 8009508:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;   /* Legacy weak TimeStampEventCallback   */
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4a3e      	ldr	r2, [pc, #248]	; (8009608 <HAL_RTC_Init+0x130>)
 800950e:	629a      	str	r2, [r3, #40]	; 0x28
    hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpTimerEventCallback */
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4a3e      	ldr	r2, [pc, #248]	; (800960c <HAL_RTC_Init+0x134>)
 8009514:	62da      	str	r2, [r3, #44]	; 0x2c
    hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;     /* Legacy weak Tamper1EventCallback     */
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	4a3d      	ldr	r2, [pc, #244]	; (8009610 <HAL_RTC_Init+0x138>)
 800951a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(RTC_TAMPER2_SUPPORT)
    hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;     /* Legacy weak Tamper2EventCallback     */
#endif /* RTC_TAMPER2_SUPPORT */

    if (hrtc->MspInitCallback == NULL)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009520:	2b00      	cmp	r3, #0
 8009522:	d102      	bne.n	800952a <HAL_RTC_Init+0x52>
    {
      hrtc->MspInitCallback = HAL_RTC_MspInit;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4a3b      	ldr	r2, [pc, #236]	; (8009614 <HAL_RTC_Init+0x13c>)
 8009528:	635a      	str	r2, [r3, #52]	; 0x34
    }
    /* Init the low level hardware */
    hrtc->MspInitCallback(hrtc);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	4798      	blx	r3

    if (hrtc->MspDeInitCallback == NULL)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009536:	2b00      	cmp	r3, #0
 8009538:	d102      	bne.n	8009540 <HAL_RTC_Init+0x68>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4a36      	ldr	r2, [pc, #216]	; (8009618 <HAL_RTC_Init+0x140>)
 800953e:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_RTC_MspInit(hrtc);
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2202      	movs	r2, #2
 8009544:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	22ca      	movs	r2, #202	; 0xca
 800954c:	625a      	str	r2, [r3, #36]	; 0x24
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	2253      	movs	r2, #83	; 0x53
 8009554:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 fada 	bl	8009b10 <RTC_EnterInitMode>
 800955c:	4603      	mov	r3, r0
 800955e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8009560:	7bfb      	ldrb	r3, [r7, #15]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d12c      	bne.n	80095c0 <HAL_RTC_Init+0xe8>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	6812      	ldr	r2, [r2, #0]
 8009570:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009574:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009578:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	6899      	ldr	r1, [r3, #8]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	685a      	ldr	r2, [r3, #4]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	691b      	ldr	r3, [r3, #16]
 8009588:	431a      	orrs	r2, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	695b      	ldr	r3, [r3, #20]
 800958e:	431a      	orrs	r2, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	430a      	orrs	r2, r1
 8009596:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	68d2      	ldr	r2, [r2, #12]
 80095a0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	6919      	ldr	r1, [r3, #16]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	041a      	lsls	r2, r3, #16
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	430a      	orrs	r2, r1
 80095b4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 fae1 	bl	8009b7e <RTC_ExitInitMode>
 80095bc:	4603      	mov	r3, r0
 80095be:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80095c0:	7bfb      	ldrb	r3, [r7, #15]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d113      	bne.n	80095ee <HAL_RTC_Init+0x116>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80095d4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	699a      	ldr	r2, [r3, #24]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	430a      	orrs	r2, r1
 80095e6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2201      	movs	r2, #1
 80095ec:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	22ff      	movs	r2, #255	; 0xff
 80095f4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80095f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3710      	adds	r7, #16
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	08009aad 	.word	0x08009aad
 8009604:	08009d79 	.word	0x08009d79
 8009608:	08009c03 	.word	0x08009c03
 800960c:	08009d65 	.word	0x08009d65
 8009610:	08009c17 	.word	0x08009c17
 8009614:	08003f95 	.word	0x08003f95
 8009618:	08003fed 	.word	0x08003fed

0800961c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800961c:	b590      	push	{r4, r7, lr}
 800961e:	b087      	sub	sp, #28
 8009620:	af00      	add	r7, sp, #0
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009628:	2300      	movs	r3, #0
 800962a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	7f1b      	ldrb	r3, [r3, #28]
 8009630:	2b01      	cmp	r3, #1
 8009632:	d101      	bne.n	8009638 <HAL_RTC_SetTime+0x1c>
 8009634:	2302      	movs	r3, #2
 8009636:	e087      	b.n	8009748 <HAL_RTC_SetTime+0x12c>
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2201      	movs	r2, #1
 800963c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2202      	movs	r2, #2
 8009642:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d126      	bne.n	8009698 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009654:	2b00      	cmp	r3, #0
 8009656:	d102      	bne.n	800965e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	2200      	movs	r2, #0
 800965c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	4618      	mov	r0, r3
 8009664:	f000 fab0 	bl	8009bc8 <RTC_ByteToBcd2>
 8009668:	4603      	mov	r3, r0
 800966a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	785b      	ldrb	r3, [r3, #1]
 8009670:	4618      	mov	r0, r3
 8009672:	f000 faa9 	bl	8009bc8 <RTC_ByteToBcd2>
 8009676:	4603      	mov	r3, r0
 8009678:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800967a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	789b      	ldrb	r3, [r3, #2]
 8009680:	4618      	mov	r0, r3
 8009682:	f000 faa1 	bl	8009bc8 <RTC_ByteToBcd2>
 8009686:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009688:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	78db      	ldrb	r3, [r3, #3]
 8009690:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009692:	4313      	orrs	r3, r2
 8009694:	617b      	str	r3, [r7, #20]
 8009696:	e018      	b.n	80096ca <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d102      	bne.n	80096ac <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	2200      	movs	r2, #0
 80096aa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	785b      	ldrb	r3, [r3, #1]
 80096b6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80096b8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80096ba:	68ba      	ldr	r2, [r7, #8]
 80096bc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80096be:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	78db      	ldrb	r3, [r3, #3]
 80096c4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80096c6:	4313      	orrs	r3, r2
 80096c8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	22ca      	movs	r2, #202	; 0xca
 80096d0:	625a      	str	r2, [r3, #36]	; 0x24
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	2253      	movs	r2, #83	; 0x53
 80096d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80096da:	68f8      	ldr	r0, [r7, #12]
 80096dc:	f000 fa18 	bl	8009b10 <RTC_EnterInitMode>
 80096e0:	4603      	mov	r3, r0
 80096e2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80096e4:	7cfb      	ldrb	r3, [r7, #19]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d120      	bne.n	800972c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80096f4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80096f8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	689a      	ldr	r2, [r3, #8]
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009708:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	6899      	ldr	r1, [r3, #8]
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	68da      	ldr	r2, [r3, #12]
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	691b      	ldr	r3, [r3, #16]
 8009718:	431a      	orrs	r2, r3
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	430a      	orrs	r2, r1
 8009720:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	f000 fa2b 	bl	8009b7e <RTC_ExitInitMode>
 8009728:	4603      	mov	r3, r0
 800972a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800972c:	7cfb      	ldrb	r3, [r7, #19]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d102      	bne.n	8009738 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2201      	movs	r2, #1
 8009736:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	22ff      	movs	r2, #255	; 0xff
 800973e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2200      	movs	r2, #0
 8009744:	771a      	strb	r2, [r3, #28]

  return status;
 8009746:	7cfb      	ldrb	r3, [r7, #19]
}
 8009748:	4618      	mov	r0, r3
 800974a:	371c      	adds	r7, #28
 800974c:	46bd      	mov	sp, r7
 800974e:	bd90      	pop	{r4, r7, pc}

08009750 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009750:	b590      	push	{r4, r7, lr}
 8009752:	b087      	sub	sp, #28
 8009754:	af00      	add	r7, sp, #0
 8009756:	60f8      	str	r0, [r7, #12]
 8009758:	60b9      	str	r1, [r7, #8]
 800975a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800975c:	2300      	movs	r3, #0
 800975e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	7f1b      	ldrb	r3, [r3, #28]
 8009764:	2b01      	cmp	r3, #1
 8009766:	d101      	bne.n	800976c <HAL_RTC_SetDate+0x1c>
 8009768:	2302      	movs	r3, #2
 800976a:	e071      	b.n	8009850 <HAL_RTC_SetDate+0x100>
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2201      	movs	r2, #1
 8009770:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2202      	movs	r2, #2
 8009776:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d10e      	bne.n	800979c <HAL_RTC_SetDate+0x4c>
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	785b      	ldrb	r3, [r3, #1]
 8009782:	f003 0310 	and.w	r3, r3, #16
 8009786:	2b00      	cmp	r3, #0
 8009788:	d008      	beq.n	800979c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	785b      	ldrb	r3, [r3, #1]
 800978e:	f023 0310 	bic.w	r3, r3, #16
 8009792:	b2db      	uxtb	r3, r3
 8009794:	330a      	adds	r3, #10
 8009796:	b2da      	uxtb	r2, r3
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d11c      	bne.n	80097dc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	78db      	ldrb	r3, [r3, #3]
 80097a6:	4618      	mov	r0, r3
 80097a8:	f000 fa0e 	bl	8009bc8 <RTC_ByteToBcd2>
 80097ac:	4603      	mov	r3, r0
 80097ae:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	785b      	ldrb	r3, [r3, #1]
 80097b4:	4618      	mov	r0, r3
 80097b6:	f000 fa07 	bl	8009bc8 <RTC_ByteToBcd2>
 80097ba:	4603      	mov	r3, r0
 80097bc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80097be:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	789b      	ldrb	r3, [r3, #2]
 80097c4:	4618      	mov	r0, r3
 80097c6:	f000 f9ff 	bl	8009bc8 <RTC_ByteToBcd2>
 80097ca:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80097cc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80097d6:	4313      	orrs	r3, r2
 80097d8:	617b      	str	r3, [r7, #20]
 80097da:	e00e      	b.n	80097fa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	78db      	ldrb	r3, [r3, #3]
 80097e0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	785b      	ldrb	r3, [r3, #1]
 80097e6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80097e8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80097ea:	68ba      	ldr	r2, [r7, #8]
 80097ec:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80097ee:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80097f6:	4313      	orrs	r3, r2
 80097f8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	22ca      	movs	r2, #202	; 0xca
 8009800:	625a      	str	r2, [r3, #36]	; 0x24
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2253      	movs	r2, #83	; 0x53
 8009808:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800980a:	68f8      	ldr	r0, [r7, #12]
 800980c:	f000 f980 	bl	8009b10 <RTC_EnterInitMode>
 8009810:	4603      	mov	r3, r0
 8009812:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009814:	7cfb      	ldrb	r3, [r7, #19]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d10c      	bne.n	8009834 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009824:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009828:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f000 f9a7 	bl	8009b7e <RTC_ExitInitMode>
 8009830:	4603      	mov	r3, r0
 8009832:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009834:	7cfb      	ldrb	r3, [r7, #19]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d102      	bne.n	8009840 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2201      	movs	r2, #1
 800983e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	22ff      	movs	r2, #255	; 0xff
 8009846:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2200      	movs	r2, #0
 800984c:	771a      	strb	r2, [r3, #28]

  return status;
 800984e:	7cfb      	ldrb	r3, [r7, #19]
}
 8009850:	4618      	mov	r0, r3
 8009852:	371c      	adds	r7, #28
 8009854:	46bd      	mov	sp, r7
 8009856:	bd90      	pop	{r4, r7, pc}

08009858 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009858:	b590      	push	{r4, r7, lr}
 800985a:	b089      	sub	sp, #36	; 0x24
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8009864:	2300      	movs	r3, #0
 8009866:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8009868:	2300      	movs	r3, #0
 800986a:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800986c:	2300      	movs	r3, #0
 800986e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	7f1b      	ldrb	r3, [r3, #28]
 8009874:	2b01      	cmp	r3, #1
 8009876:	d101      	bne.n	800987c <HAL_RTC_SetAlarm+0x24>
 8009878:	2302      	movs	r3, #2
 800987a:	e113      	b.n	8009aa4 <HAL_RTC_SetAlarm+0x24c>
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2201      	movs	r2, #1
 8009880:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2202      	movs	r2, #2
 8009886:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d137      	bne.n	80098fe <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009898:	2b00      	cmp	r3, #0
 800989a:	d102      	bne.n	80098a2 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	2200      	movs	r2, #0
 80098a0:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	4618      	mov	r0, r3
 80098a8:	f000 f98e 	bl	8009bc8 <RTC_ByteToBcd2>
 80098ac:	4603      	mov	r3, r0
 80098ae:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	785b      	ldrb	r3, [r3, #1]
 80098b4:	4618      	mov	r0, r3
 80098b6:	f000 f987 	bl	8009bc8 <RTC_ByteToBcd2>
 80098ba:	4603      	mov	r3, r0
 80098bc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80098be:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	789b      	ldrb	r3, [r3, #2]
 80098c4:	4618      	mov	r0, r3
 80098c6:	f000 f97f 	bl	8009bc8 <RTC_ByteToBcd2>
 80098ca:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80098cc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	78db      	ldrb	r3, [r3, #3]
 80098d4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80098d6:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80098e0:	4618      	mov	r0, r3
 80098e2:	f000 f971 	bl	8009bc8 <RTC_ByteToBcd2>
 80098e6:	4603      	mov	r3, r0
 80098e8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80098ea:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80098f2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80098f8:	4313      	orrs	r3, r2
 80098fa:	61fb      	str	r3, [r7, #28]
 80098fc:	e023      	b.n	8009946 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009908:	2b00      	cmp	r3, #0
 800990a:	d102      	bne.n	8009912 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	2200      	movs	r2, #0
 8009910:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	785b      	ldrb	r3, [r3, #1]
 800991c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800991e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009920:	68ba      	ldr	r2, [r7, #8]
 8009922:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009924:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	78db      	ldrb	r3, [r3, #3]
 800992a:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800992c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009934:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009936:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800993c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009942:	4313      	orrs	r3, r2
 8009944:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800994e:	4313      	orrs	r3, r2
 8009950:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	22ca      	movs	r2, #202	; 0xca
 8009958:	625a      	str	r2, [r3, #36]	; 0x24
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2253      	movs	r2, #83	; 0x53
 8009960:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800996a:	d148      	bne.n	80099fe <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	689a      	ldr	r2, [r3, #8]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800997a:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	689a      	ldr	r2, [r3, #8]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800998a:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	b2da      	uxtb	r2, r3
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800999c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800999e:	f7fb f85f 	bl	8004a60 <HAL_GetTick>
 80099a2:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80099a4:	e013      	b.n	80099ce <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80099a6:	f7fb f85b 	bl	8004a60 <HAL_GetTick>
 80099aa:	4602      	mov	r2, r0
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	1ad3      	subs	r3, r2, r3
 80099b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80099b4:	d90b      	bls.n	80099ce <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	22ff      	movs	r2, #255	; 0xff
 80099bc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2203      	movs	r2, #3
 80099c2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2200      	movs	r2, #0
 80099c8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80099ca:	2303      	movs	r3, #3
 80099cc:	e06a      	b.n	8009aa4 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	68db      	ldr	r3, [r3, #12]
 80099d4:	f003 0301 	and.w	r3, r3, #1
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d0e4      	beq.n	80099a6 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	69fa      	ldr	r2, [r7, #28]
 80099e2:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	697a      	ldr	r2, [r7, #20]
 80099ea:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	689a      	ldr	r2, [r3, #8]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099fa:	609a      	str	r2, [r3, #8]
 80099fc:	e047      	b.n	8009a8e <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	689a      	ldr	r2, [r3, #8]
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009a0c:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	689a      	ldr	r2, [r3, #8]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a1c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	b2da      	uxtb	r2, r3
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f462 7220 	orn	r2, r2, #640	; 0x280
 8009a2e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009a30:	f7fb f816 	bl	8004a60 <HAL_GetTick>
 8009a34:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009a36:	e013      	b.n	8009a60 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009a38:	f7fb f812 	bl	8004a60 <HAL_GetTick>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	69bb      	ldr	r3, [r7, #24]
 8009a40:	1ad3      	subs	r3, r2, r3
 8009a42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a46:	d90b      	bls.n	8009a60 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	22ff      	movs	r2, #255	; 0xff
 8009a4e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2203      	movs	r2, #3
 8009a54:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009a5c:	2303      	movs	r3, #3
 8009a5e:	e021      	b.n	8009aa4 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	68db      	ldr	r3, [r3, #12]
 8009a66:	f003 0302 	and.w	r3, r3, #2
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d0e4      	beq.n	8009a38 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	69fa      	ldr	r2, [r7, #28]
 8009a74:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	697a      	ldr	r2, [r7, #20]
 8009a7c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	689a      	ldr	r2, [r3, #8]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a8c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	22ff      	movs	r2, #255	; 0xff
 8009a94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2201      	movs	r2, #1
 8009a9a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009aa2:	2300      	movs	r3, #0
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3724      	adds	r7, #36	; 0x24
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd90      	pop	{r4, r7, pc}

08009aac <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8009ab4:	bf00      	nop
 8009ab6:	370c      	adds	r7, #12
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	68da      	ldr	r2, [r3, #12]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009ada:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009adc:	f7fa ffc0 	bl	8004a60 <HAL_GetTick>
 8009ae0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009ae2:	e009      	b.n	8009af8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009ae4:	f7fa ffbc 	bl	8004a60 <HAL_GetTick>
 8009ae8:	4602      	mov	r2, r0
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	1ad3      	subs	r3, r2, r3
 8009aee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009af2:	d901      	bls.n	8009af8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009af4:	2303      	movs	r3, #3
 8009af6:	e007      	b.n	8009b08 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	f003 0320 	and.w	r3, r3, #32
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d0ee      	beq.n	8009ae4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009b06:	2300      	movs	r3, #0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3710      	adds	r7, #16
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d122      	bne.n	8009b74 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	68da      	ldr	r2, [r3, #12]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009b3c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009b3e:	f7fa ff8f 	bl	8004a60 <HAL_GetTick>
 8009b42:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009b44:	e00c      	b.n	8009b60 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009b46:	f7fa ff8b 	bl	8004a60 <HAL_GetTick>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	1ad3      	subs	r3, r2, r3
 8009b50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b54:	d904      	bls.n	8009b60 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2204      	movs	r2, #4
 8009b5a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d102      	bne.n	8009b74 <RTC_EnterInitMode+0x64>
 8009b6e:	7bfb      	ldrb	r3, [r7, #15]
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	d1e8      	bne.n	8009b46 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3710      	adds	r7, #16
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b084      	sub	sp, #16
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b86:	2300      	movs	r3, #0
 8009b88:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	68da      	ldr	r2, [r3, #12]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b98:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	f003 0320 	and.w	r3, r3, #32
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d10a      	bne.n	8009bbe <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f7ff ff89 	bl	8009ac0 <HAL_RTC_WaitForSynchro>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d004      	beq.n	8009bbe <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2204      	movs	r2, #4
 8009bb8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3710      	adds	r7, #16
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b085      	sub	sp, #20
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	4603      	mov	r3, r0
 8009bd0:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8009bd6:	e005      	b.n	8009be4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009bd8:	7bfb      	ldrb	r3, [r7, #15]
 8009bda:	3301      	adds	r3, #1
 8009bdc:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8009bde:	79fb      	ldrb	r3, [r7, #7]
 8009be0:	3b0a      	subs	r3, #10
 8009be2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009be4:	79fb      	ldrb	r3, [r7, #7]
 8009be6:	2b09      	cmp	r3, #9
 8009be8:	d8f6      	bhi.n	8009bd8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8009bea:	7bfb      	ldrb	r3, [r7, #15]
 8009bec:	011b      	lsls	r3, r3, #4
 8009bee:	b2da      	uxtb	r2, r3
 8009bf0:	79fb      	ldrb	r3, [r7, #7]
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	b2db      	uxtb	r3, r3
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3714      	adds	r7, #20
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr

08009c02 <HAL_RTCEx_TimeStampEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009c02:	b480      	push	{r7}
 8009c04:	b083      	sub	sp, #12
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 8009c0a:	bf00      	nop
 8009c0c:	370c      	adds	r7, #12
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr

08009c16 <HAL_RTCEx_Tamper1EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 8009c16:	b480      	push	{r7}
 8009c18:	b083      	sub	sp, #12
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 8009c1e:	bf00      	nop
 8009c20:	370c      	adds	r7, #12
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr

08009c2a <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b086      	sub	sp, #24
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	60f8      	str	r0, [r7, #12]
 8009c32:	60b9      	str	r1, [r7, #8]
 8009c34:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8009c36:	2300      	movs	r3, #0
 8009c38:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	7f1b      	ldrb	r3, [r3, #28]
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d101      	bne.n	8009c46 <HAL_RTCEx_SetWakeUpTimer+0x1c>
 8009c42:	2302      	movs	r3, #2
 8009c44:	e08a      	b.n	8009d5c <HAL_RTCEx_SetWakeUpTimer+0x132>
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2201      	movs	r2, #1
 8009c4a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2202      	movs	r2, #2
 8009c50:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	22ca      	movs	r2, #202	; 0xca
 8009c58:	625a      	str	r2, [r3, #36]	; 0x24
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	2253      	movs	r2, #83	; 0x53
 8009c60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d01e      	beq.n	8009cae <HAL_RTCEx_SetWakeUpTimer+0x84>
  {
    tickstart = HAL_GetTick();
 8009c70:	f7fa fef6 	bl	8004a60 <HAL_GetTick>
 8009c74:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8009c76:	e013      	b.n	8009ca0 <HAL_RTCEx_SetWakeUpTimer+0x76>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009c78:	f7fa fef2 	bl	8004a60 <HAL_GetTick>
 8009c7c:	4602      	mov	r2, r0
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	1ad3      	subs	r3, r2, r3
 8009c82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c86:	d90b      	bls.n	8009ca0 <HAL_RTCEx_SetWakeUpTimer+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	22ff      	movs	r2, #255	; 0xff
 8009c8e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2203      	movs	r2, #3
 8009c94:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009c9c:	2303      	movs	r3, #3
 8009c9e:	e05d      	b.n	8009d5c <HAL_RTCEx_SetWakeUpTimer+0x132>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	68db      	ldr	r3, [r3, #12]
 8009ca6:	f003 0304 	and.w	r3, r3, #4
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d1e4      	bne.n	8009c78 <HAL_RTCEx_SetWakeUpTimer+0x4e>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	689a      	ldr	r2, [r3, #8]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cbc:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	68db      	ldr	r3, [r3, #12]
 8009cc4:	b2da      	uxtb	r2, r3
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8009cce:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009cd0:	f7fa fec6 	bl	8004a60 <HAL_GetTick>
 8009cd4:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8009cd6:	e013      	b.n	8009d00 <HAL_RTCEx_SetWakeUpTimer+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009cd8:	f7fa fec2 	bl	8004a60 <HAL_GetTick>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ce6:	d90b      	bls.n	8009d00 <HAL_RTCEx_SetWakeUpTimer+0xd6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	22ff      	movs	r2, #255	; 0xff
 8009cee:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2203      	movs	r2, #3
 8009cf4:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8009cfc:	2303      	movs	r3, #3
 8009cfe:	e02d      	b.n	8009d5c <HAL_RTCEx_SetWakeUpTimer+0x132>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	f003 0304 	and.w	r3, r3, #4
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d0e4      	beq.n	8009cd8 <HAL_RTCEx_SetWakeUpTimer+0xae>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	689a      	ldr	r2, [r3, #8]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f022 0207 	bic.w	r2, r2, #7
 8009d1c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	6899      	ldr	r1, [r3, #8]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	430a      	orrs	r2, r1
 8009d2c:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	68ba      	ldr	r2, [r7, #8]
 8009d34:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	689a      	ldr	r2, [r3, #8]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009d44:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	22ff      	movs	r2, #255	; 0xff
 8009d4c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2201      	movs	r2, #1
 8009d52:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2200      	movs	r2, #0
 8009d58:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009d5a:	2300      	movs	r3, #0
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3718      	adds	r7, #24
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b083      	sub	sp, #12
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8009d6c:	bf00      	nop
 8009d6e:	370c      	adds	r7, #12
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8009d80:	bf00      	nop
 8009d82:	370c      	adds	r7, #12
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr

08009d8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d101      	bne.n	8009d9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e09b      	b.n	8009ed6 <HAL_SPI_Init+0x14a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d108      	bne.n	8009db8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009dae:	d009      	beq.n	8009dc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	61da      	str	r2, [r3, #28]
 8009db6:	e005      	b.n	8009dc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d126      	bne.n	8009e24 <HAL_SPI_Init+0x98>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	4a3f      	ldr	r2, [pc, #252]	; (8009ee0 <HAL_SPI_Init+0x154>)
 8009de2:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	4a3f      	ldr	r2, [pc, #252]	; (8009ee4 <HAL_SPI_Init+0x158>)
 8009de8:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	4a3e      	ldr	r2, [pc, #248]	; (8009ee8 <HAL_SPI_Init+0x15c>)
 8009dee:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4a3e      	ldr	r2, [pc, #248]	; (8009eec <HAL_SPI_Init+0x160>)
 8009df4:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	4a3d      	ldr	r2, [pc, #244]	; (8009ef0 <HAL_SPI_Init+0x164>)
 8009dfa:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	4a3d      	ldr	r2, [pc, #244]	; (8009ef4 <HAL_SPI_Init+0x168>)
 8009e00:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	4a3c      	ldr	r2, [pc, #240]	; (8009ef8 <HAL_SPI_Init+0x16c>)
 8009e06:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4a3c      	ldr	r2, [pc, #240]	; (8009efc <HAL_SPI_Init+0x170>)
 8009e0c:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d102      	bne.n	8009e1c <HAL_SPI_Init+0x90>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	4a39      	ldr	r2, [pc, #228]	; (8009f00 <HAL_SPI_Init+0x174>)
 8009e1a:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2202      	movs	r2, #2
 8009e28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009e4c:	431a      	orrs	r2, r3
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e56:	431a      	orrs	r2, r3
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	691b      	ldr	r3, [r3, #16]
 8009e5c:	f003 0302 	and.w	r3, r3, #2
 8009e60:	431a      	orrs	r2, r3
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	695b      	ldr	r3, [r3, #20]
 8009e66:	f003 0301 	and.w	r3, r3, #1
 8009e6a:	431a      	orrs	r2, r3
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	699b      	ldr	r3, [r3, #24]
 8009e70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e74:	431a      	orrs	r2, r3
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	69db      	ldr	r3, [r3, #28]
 8009e7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e7e:	431a      	orrs	r2, r3
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6a1b      	ldr	r3, [r3, #32]
 8009e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e88:	ea42 0103 	orr.w	r1, r2, r3
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e90:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	430a      	orrs	r2, r1
 8009e9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	699b      	ldr	r3, [r3, #24]
 8009ea0:	0c1b      	lsrs	r3, r3, #16
 8009ea2:	f003 0104 	and.w	r1, r3, #4
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eaa:	f003 0210 	and.w	r2, r3, #16
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	430a      	orrs	r2, r1
 8009eb4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	69da      	ldr	r2, [r3, #28]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009ec4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009ed4:	2300      	movs	r3, #0
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3708      	adds	r7, #8
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	0800a105 	.word	0x0800a105
 8009ee4:	0800a119 	.word	0x0800a119
 8009ee8:	0800a12d 	.word	0x0800a12d
 8009eec:	0800a141 	.word	0x0800a141
 8009ef0:	0800a155 	.word	0x0800a155
 8009ef4:	0800a169 	.word	0x0800a169
 8009ef8:	0800a17d 	.word	0x0800a17d
 8009efc:	0800a191 	.word	0x0800a191
 8009f00:	08004085 	.word	0x08004085

08009f04 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b088      	sub	sp, #32
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009f1c:	69bb      	ldr	r3, [r7, #24]
 8009f1e:	099b      	lsrs	r3, r3, #6
 8009f20:	f003 0301 	and.w	r3, r3, #1
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d10f      	bne.n	8009f48 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d00a      	beq.n	8009f48 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009f32:	69fb      	ldr	r3, [r7, #28]
 8009f34:	099b      	lsrs	r3, r3, #6
 8009f36:	f003 0301 	and.w	r3, r3, #1
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d004      	beq.n	8009f48 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	4798      	blx	r3
    return;
 8009f46:	e0d8      	b.n	800a0fa <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	085b      	lsrs	r3, r3, #1
 8009f4c:	f003 0301 	and.w	r3, r3, #1
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d00a      	beq.n	8009f6a <HAL_SPI_IRQHandler+0x66>
 8009f54:	69fb      	ldr	r3, [r7, #28]
 8009f56:	09db      	lsrs	r3, r3, #7
 8009f58:	f003 0301 	and.w	r3, r3, #1
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d004      	beq.n	8009f6a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	4798      	blx	r3
    return;
 8009f68:	e0c7      	b.n	800a0fa <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	095b      	lsrs	r3, r3, #5
 8009f6e:	f003 0301 	and.w	r3, r3, #1
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d10c      	bne.n	8009f90 <HAL_SPI_IRQHandler+0x8c>
 8009f76:	69bb      	ldr	r3, [r7, #24]
 8009f78:	099b      	lsrs	r3, r3, #6
 8009f7a:	f003 0301 	and.w	r3, r3, #1
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d106      	bne.n	8009f90 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	0a1b      	lsrs	r3, r3, #8
 8009f86:	f003 0301 	and.w	r3, r3, #1
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	f000 80b5 	beq.w	800a0fa <HAL_SPI_IRQHandler+0x1f6>
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	095b      	lsrs	r3, r3, #5
 8009f94:	f003 0301 	and.w	r3, r3, #1
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	f000 80ae 	beq.w	800a0fa <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	099b      	lsrs	r3, r3, #6
 8009fa2:	f003 0301 	and.w	r3, r3, #1
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d023      	beq.n	8009ff2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009fb0:	b2db      	uxtb	r3, r3
 8009fb2:	2b03      	cmp	r3, #3
 8009fb4:	d011      	beq.n	8009fda <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fba:	f043 0204 	orr.w	r2, r3, #4
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	617b      	str	r3, [r7, #20]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	617b      	str	r3, [r7, #20]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	689b      	ldr	r3, [r3, #8]
 8009fd4:	617b      	str	r3, [r7, #20]
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	e00b      	b.n	8009ff2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009fda:	2300      	movs	r3, #0
 8009fdc:	613b      	str	r3, [r7, #16]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	613b      	str	r3, [r7, #16]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	613b      	str	r3, [r7, #16]
 8009fee:	693b      	ldr	r3, [r7, #16]
        return;
 8009ff0:	e083      	b.n	800a0fa <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	095b      	lsrs	r3, r3, #5
 8009ff6:	f003 0301 	and.w	r3, r3, #1
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d014      	beq.n	800a028 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a002:	f043 0201 	orr.w	r2, r3, #1
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a00a:	2300      	movs	r3, #0
 800a00c:	60fb      	str	r3, [r7, #12]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	689b      	ldr	r3, [r3, #8]
 800a014:	60fb      	str	r3, [r7, #12]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a024:	601a      	str	r2, [r3, #0]
 800a026:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	0a1b      	lsrs	r3, r3, #8
 800a02c:	f003 0301 	and.w	r3, r3, #1
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00c      	beq.n	800a04e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a038:	f043 0208 	orr.w	r2, r3, #8
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a040:	2300      	movs	r3, #0
 800a042:	60bb      	str	r3, [r7, #8]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	689b      	ldr	r3, [r3, #8]
 800a04a:	60bb      	str	r3, [r7, #8]
 800a04c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a052:	2b00      	cmp	r3, #0
 800a054:	d050      	beq.n	800a0f8 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	685a      	ldr	r2, [r3, #4]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a064:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2201      	movs	r2, #1
 800a06a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a06e:	69fb      	ldr	r3, [r7, #28]
 800a070:	f003 0302 	and.w	r3, r3, #2
 800a074:	2b00      	cmp	r3, #0
 800a076:	d104      	bne.n	800a082 <HAL_SPI_IRQHandler+0x17e>
 800a078:	69fb      	ldr	r3, [r7, #28]
 800a07a:	f003 0301 	and.w	r3, r3, #1
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d034      	beq.n	800a0ec <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	685a      	ldr	r2, [r3, #4]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f022 0203 	bic.w	r2, r2, #3
 800a090:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a096:	2b00      	cmp	r3, #0
 800a098:	d011      	beq.n	800a0be <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a09e:	4a18      	ldr	r2, [pc, #96]	; (800a100 <HAL_SPI_IRQHandler+0x1fc>)
 800a0a0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7fb fcce 	bl	8005a48 <HAL_DMA_Abort_IT>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d005      	beq.n	800a0be <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d017      	beq.n	800a0f6 <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0ca:	4a0d      	ldr	r2, [pc, #52]	; (800a100 <HAL_SPI_IRQHandler+0x1fc>)
 800a0cc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7fb fcb8 	bl	8005a48 <HAL_DMA_Abort_IT>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d00b      	beq.n	800a0f6 <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800a0ea:	e004      	b.n	800a0f6 <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a0f4:	e000      	b.n	800a0f8 <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 800a0f6:	bf00      	nop
    return;
 800a0f8:	bf00      	nop
  }
}
 800a0fa:	3720      	adds	r7, #32
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	0800a1a5 	.word	0x0800a1a5

0800a104 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a10c:	bf00      	nop
 800a10e:	370c      	adds	r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a120:	bf00      	nop
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr

0800a12c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b083      	sub	sp, #12
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a134:	bf00      	nop
 800a136:	370c      	adds	r7, #12
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a140:	b480      	push	{r7}
 800a142:	b083      	sub	sp, #12
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a148:	bf00      	nop
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800a15c:	bf00      	nop
 800a15e:	370c      	adds	r7, #12
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800a170:	bf00      	nop
 800a172:	370c      	adds	r7, #12
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr

0800a17c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a184:	bf00      	nop
 800a186:	370c      	adds	r7, #12
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a190:	b480      	push	{r7}
 800a192:	b083      	sub	sp, #12
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 800a198:	bf00      	nop
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr

0800a1a4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1b0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1c2:	68f8      	ldr	r0, [r7, #12]
 800a1c4:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a1c6:	bf00      	nop
 800a1c8:	3710      	adds	r7, #16
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
	...

0800a1d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d101      	bne.n	800a1e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e04c      	b.n	800a27c <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1e8:	b2db      	uxtb	r3, r3
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d111      	bne.n	800a212 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 fc8e 	bl	800ab18 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a200:	2b00      	cmp	r3, #0
 800a202:	d102      	bne.n	800a20a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	4a1f      	ldr	r2, [pc, #124]	; (800a284 <HAL_TIM_Base_Init+0xb4>)
 800a208:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2202      	movs	r2, #2
 800a216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	3304      	adds	r3, #4
 800a222:	4619      	mov	r1, r3
 800a224:	4610      	mov	r0, r2
 800a226:	f000 fb5d 	bl	800a8e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2201      	movs	r2, #1
 800a22e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2201      	movs	r2, #1
 800a236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2201      	movs	r2, #1
 800a23e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2201      	movs	r2, #1
 800a246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2201      	movs	r2, #1
 800a24e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2201      	movs	r2, #1
 800a256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2201      	movs	r2, #1
 800a25e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2201      	movs	r2, #1
 800a266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2201      	movs	r2, #1
 800a26e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2201      	movs	r2, #1
 800a276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a27a:	2300      	movs	r3, #0
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3708      	adds	r7, #8
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	08004705 	.word	0x08004705

0800a288 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a288:	b480      	push	{r7}
 800a28a:	b085      	sub	sp, #20
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a296:	b2db      	uxtb	r3, r3
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d001      	beq.n	800a2a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a29c:	2301      	movs	r3, #1
 800a29e:	e03c      	b.n	800a31a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2202      	movs	r2, #2
 800a2a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a1e      	ldr	r2, [pc, #120]	; (800a328 <HAL_TIM_Base_Start+0xa0>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d018      	beq.n	800a2e4 <HAL_TIM_Base_Start+0x5c>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2ba:	d013      	beq.n	800a2e4 <HAL_TIM_Base_Start+0x5c>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a1a      	ldr	r2, [pc, #104]	; (800a32c <HAL_TIM_Base_Start+0xa4>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d00e      	beq.n	800a2e4 <HAL_TIM_Base_Start+0x5c>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4a19      	ldr	r2, [pc, #100]	; (800a330 <HAL_TIM_Base_Start+0xa8>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d009      	beq.n	800a2e4 <HAL_TIM_Base_Start+0x5c>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4a17      	ldr	r2, [pc, #92]	; (800a334 <HAL_TIM_Base_Start+0xac>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d004      	beq.n	800a2e4 <HAL_TIM_Base_Start+0x5c>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	4a16      	ldr	r2, [pc, #88]	; (800a338 <HAL_TIM_Base_Start+0xb0>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d111      	bne.n	800a308 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	689b      	ldr	r3, [r3, #8]
 800a2ea:	f003 0307 	and.w	r3, r3, #7
 800a2ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2b06      	cmp	r3, #6
 800a2f4:	d010      	beq.n	800a318 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f042 0201 	orr.w	r2, r2, #1
 800a304:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a306:	e007      	b.n	800a318 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f042 0201 	orr.w	r2, r2, #1
 800a316:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a318:	2300      	movs	r3, #0
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3714      	adds	r7, #20
 800a31e:	46bd      	mov	sp, r7
 800a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a324:	4770      	bx	lr
 800a326:	bf00      	nop
 800a328:	40010000 	.word	0x40010000
 800a32c:	40000400 	.word	0x40000400
 800a330:	40000800 	.word	0x40000800
 800a334:	40000c00 	.word	0x40000c00
 800a338:	40014000 	.word	0x40014000

0800a33c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	6a1a      	ldr	r2, [r3, #32]
 800a34a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a34e:	4013      	ands	r3, r2
 800a350:	2b00      	cmp	r3, #0
 800a352:	d10f      	bne.n	800a374 <HAL_TIM_Base_Stop+0x38>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	6a1a      	ldr	r2, [r3, #32]
 800a35a:	f240 4344 	movw	r3, #1092	; 0x444
 800a35e:	4013      	ands	r3, r2
 800a360:	2b00      	cmp	r3, #0
 800a362:	d107      	bne.n	800a374 <HAL_TIM_Base_Stop+0x38>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f022 0201 	bic.w	r2, r2, #1
 800a372:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2201      	movs	r2, #1
 800a378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a37c:	2300      	movs	r3, #0
}
 800a37e:	4618      	mov	r0, r3
 800a380:	370c      	adds	r7, #12
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr
	...

0800a38c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b085      	sub	sp, #20
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a39a:	b2db      	uxtb	r3, r3
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	d001      	beq.n	800a3a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	e044      	b.n	800a42e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2202      	movs	r2, #2
 800a3a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	68da      	ldr	r2, [r3, #12]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f042 0201 	orr.w	r2, r2, #1
 800a3ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a1e      	ldr	r2, [pc, #120]	; (800a43c <HAL_TIM_Base_Start_IT+0xb0>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d018      	beq.n	800a3f8 <HAL_TIM_Base_Start_IT+0x6c>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3ce:	d013      	beq.n	800a3f8 <HAL_TIM_Base_Start_IT+0x6c>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4a1a      	ldr	r2, [pc, #104]	; (800a440 <HAL_TIM_Base_Start_IT+0xb4>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d00e      	beq.n	800a3f8 <HAL_TIM_Base_Start_IT+0x6c>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4a19      	ldr	r2, [pc, #100]	; (800a444 <HAL_TIM_Base_Start_IT+0xb8>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d009      	beq.n	800a3f8 <HAL_TIM_Base_Start_IT+0x6c>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a17      	ldr	r2, [pc, #92]	; (800a448 <HAL_TIM_Base_Start_IT+0xbc>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d004      	beq.n	800a3f8 <HAL_TIM_Base_Start_IT+0x6c>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4a16      	ldr	r2, [pc, #88]	; (800a44c <HAL_TIM_Base_Start_IT+0xc0>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d111      	bne.n	800a41c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	689b      	ldr	r3, [r3, #8]
 800a3fe:	f003 0307 	and.w	r3, r3, #7
 800a402:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2b06      	cmp	r3, #6
 800a408:	d010      	beq.n	800a42c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	681a      	ldr	r2, [r3, #0]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f042 0201 	orr.w	r2, r2, #1
 800a418:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a41a:	e007      	b.n	800a42c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f042 0201 	orr.w	r2, r2, #1
 800a42a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a42c:	2300      	movs	r3, #0
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3714      	adds	r7, #20
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop
 800a43c:	40010000 	.word	0x40010000
 800a440:	40000400 	.word	0x40000400
 800a444:	40000800 	.word	0x40000800
 800a448:	40000c00 	.word	0x40000c00
 800a44c:	40014000 	.word	0x40014000

0800a450 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	691b      	ldr	r3, [r3, #16]
 800a45e:	f003 0302 	and.w	r3, r3, #2
 800a462:	2b02      	cmp	r3, #2
 800a464:	d128      	bne.n	800a4b8 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	f003 0302 	and.w	r3, r3, #2
 800a470:	2b02      	cmp	r3, #2
 800a472:	d121      	bne.n	800a4b8 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f06f 0202 	mvn.w	r2, #2
 800a47c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2201      	movs	r2, #1
 800a482:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	699b      	ldr	r3, [r3, #24]
 800a48a:	f003 0303 	and.w	r3, r3, #3
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d005      	beq.n	800a49e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	4798      	blx	r3
 800a49c:	e009      	b.n	800a4b2 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	691b      	ldr	r3, [r3, #16]
 800a4be:	f003 0304 	and.w	r3, r3, #4
 800a4c2:	2b04      	cmp	r3, #4
 800a4c4:	d128      	bne.n	800a518 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	f003 0304 	and.w	r3, r3, #4
 800a4d0:	2b04      	cmp	r3, #4
 800a4d2:	d121      	bne.n	800a518 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f06f 0204 	mvn.w	r2, #4
 800a4dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2202      	movs	r2, #2
 800a4e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	699b      	ldr	r3, [r3, #24]
 800a4ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d005      	beq.n	800a4fe <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	4798      	blx	r3
 800a4fc:	e009      	b.n	800a512 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2200      	movs	r2, #0
 800a516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	f003 0308 	and.w	r3, r3, #8
 800a522:	2b08      	cmp	r3, #8
 800a524:	d128      	bne.n	800a578 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	68db      	ldr	r3, [r3, #12]
 800a52c:	f003 0308 	and.w	r3, r3, #8
 800a530:	2b08      	cmp	r3, #8
 800a532:	d121      	bne.n	800a578 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f06f 0208 	mvn.w	r2, #8
 800a53c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2204      	movs	r2, #4
 800a542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	69db      	ldr	r3, [r3, #28]
 800a54a:	f003 0303 	and.w	r3, r3, #3
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d005      	beq.n	800a55e <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	4798      	blx	r3
 800a55c:	e009      	b.n	800a572 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2200      	movs	r2, #0
 800a576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	691b      	ldr	r3, [r3, #16]
 800a57e:	f003 0310 	and.w	r3, r3, #16
 800a582:	2b10      	cmp	r3, #16
 800a584:	d128      	bne.n	800a5d8 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	68db      	ldr	r3, [r3, #12]
 800a58c:	f003 0310 	and.w	r3, r3, #16
 800a590:	2b10      	cmp	r3, #16
 800a592:	d121      	bne.n	800a5d8 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f06f 0210 	mvn.w	r2, #16
 800a59c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2208      	movs	r2, #8
 800a5a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	69db      	ldr	r3, [r3, #28]
 800a5aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d005      	beq.n	800a5be <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	4798      	blx	r3
 800a5bc:	e009      	b.n	800a5d2 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	691b      	ldr	r3, [r3, #16]
 800a5de:	f003 0301 	and.w	r3, r3, #1
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d110      	bne.n	800a608 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	68db      	ldr	r3, [r3, #12]
 800a5ec:	f003 0301 	and.w	r3, r3, #1
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	d109      	bne.n	800a608 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f06f 0201 	mvn.w	r2, #1
 800a5fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	691b      	ldr	r3, [r3, #16]
 800a60e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a612:	2b80      	cmp	r3, #128	; 0x80
 800a614:	d110      	bne.n	800a638 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	68db      	ldr	r3, [r3, #12]
 800a61c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a620:	2b80      	cmp	r3, #128	; 0x80
 800a622:	d109      	bne.n	800a638 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a62c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	691b      	ldr	r3, [r3, #16]
 800a63e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a642:	2b40      	cmp	r3, #64	; 0x40
 800a644:	d110      	bne.n	800a668 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	68db      	ldr	r3, [r3, #12]
 800a64c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a650:	2b40      	cmp	r3, #64	; 0x40
 800a652:	d109      	bne.n	800a668 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a65c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	691b      	ldr	r3, [r3, #16]
 800a66e:	f003 0320 	and.w	r3, r3, #32
 800a672:	2b20      	cmp	r3, #32
 800a674:	d110      	bne.n	800a698 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	f003 0320 	and.w	r3, r3, #32
 800a680:	2b20      	cmp	r3, #32
 800a682:	d109      	bne.n	800a698 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f06f 0220 	mvn.w	r2, #32
 800a68c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a698:	bf00      	nop
 800a69a:	3708      	adds	r7, #8
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d101      	bne.n	800a6bc <HAL_TIM_ConfigClockSource+0x1c>
 800a6b8:	2302      	movs	r3, #2
 800a6ba:	e0b4      	b.n	800a826 <HAL_TIM_ConfigClockSource+0x186>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2201      	movs	r2, #1
 800a6c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2202      	movs	r2, #2
 800a6c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	689b      	ldr	r3, [r3, #8]
 800a6d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a6da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a6e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	68ba      	ldr	r2, [r7, #8]
 800a6ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6f4:	d03e      	beq.n	800a774 <HAL_TIM_ConfigClockSource+0xd4>
 800a6f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6fa:	f200 8087 	bhi.w	800a80c <HAL_TIM_ConfigClockSource+0x16c>
 800a6fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a702:	f000 8086 	beq.w	800a812 <HAL_TIM_ConfigClockSource+0x172>
 800a706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a70a:	d87f      	bhi.n	800a80c <HAL_TIM_ConfigClockSource+0x16c>
 800a70c:	2b70      	cmp	r3, #112	; 0x70
 800a70e:	d01a      	beq.n	800a746 <HAL_TIM_ConfigClockSource+0xa6>
 800a710:	2b70      	cmp	r3, #112	; 0x70
 800a712:	d87b      	bhi.n	800a80c <HAL_TIM_ConfigClockSource+0x16c>
 800a714:	2b60      	cmp	r3, #96	; 0x60
 800a716:	d050      	beq.n	800a7ba <HAL_TIM_ConfigClockSource+0x11a>
 800a718:	2b60      	cmp	r3, #96	; 0x60
 800a71a:	d877      	bhi.n	800a80c <HAL_TIM_ConfigClockSource+0x16c>
 800a71c:	2b50      	cmp	r3, #80	; 0x50
 800a71e:	d03c      	beq.n	800a79a <HAL_TIM_ConfigClockSource+0xfa>
 800a720:	2b50      	cmp	r3, #80	; 0x50
 800a722:	d873      	bhi.n	800a80c <HAL_TIM_ConfigClockSource+0x16c>
 800a724:	2b40      	cmp	r3, #64	; 0x40
 800a726:	d058      	beq.n	800a7da <HAL_TIM_ConfigClockSource+0x13a>
 800a728:	2b40      	cmp	r3, #64	; 0x40
 800a72a:	d86f      	bhi.n	800a80c <HAL_TIM_ConfigClockSource+0x16c>
 800a72c:	2b30      	cmp	r3, #48	; 0x30
 800a72e:	d064      	beq.n	800a7fa <HAL_TIM_ConfigClockSource+0x15a>
 800a730:	2b30      	cmp	r3, #48	; 0x30
 800a732:	d86b      	bhi.n	800a80c <HAL_TIM_ConfigClockSource+0x16c>
 800a734:	2b20      	cmp	r3, #32
 800a736:	d060      	beq.n	800a7fa <HAL_TIM_ConfigClockSource+0x15a>
 800a738:	2b20      	cmp	r3, #32
 800a73a:	d867      	bhi.n	800a80c <HAL_TIM_ConfigClockSource+0x16c>
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d05c      	beq.n	800a7fa <HAL_TIM_ConfigClockSource+0x15a>
 800a740:	2b10      	cmp	r3, #16
 800a742:	d05a      	beq.n	800a7fa <HAL_TIM_ConfigClockSource+0x15a>
 800a744:	e062      	b.n	800a80c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6818      	ldr	r0, [r3, #0]
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	6899      	ldr	r1, [r3, #8]
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	685a      	ldr	r2, [r3, #4]
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	68db      	ldr	r3, [r3, #12]
 800a756:	f000 f9bf 	bl	800aad8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a768:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	68ba      	ldr	r2, [r7, #8]
 800a770:	609a      	str	r2, [r3, #8]
      break;
 800a772:	e04f      	b.n	800a814 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6818      	ldr	r0, [r3, #0]
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	6899      	ldr	r1, [r3, #8]
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	685a      	ldr	r2, [r3, #4]
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	68db      	ldr	r3, [r3, #12]
 800a784:	f000 f9a8 	bl	800aad8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	689a      	ldr	r2, [r3, #8]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a796:	609a      	str	r2, [r3, #8]
      break;
 800a798:	e03c      	b.n	800a814 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6818      	ldr	r0, [r3, #0]
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	6859      	ldr	r1, [r3, #4]
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	68db      	ldr	r3, [r3, #12]
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	f000 f91c 	bl	800a9e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	2150      	movs	r1, #80	; 0x50
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f000 f975 	bl	800aaa2 <TIM_ITRx_SetConfig>
      break;
 800a7b8:	e02c      	b.n	800a814 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6818      	ldr	r0, [r3, #0]
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	6859      	ldr	r1, [r3, #4]
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	f000 f93b 	bl	800aa42 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	2160      	movs	r1, #96	; 0x60
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f000 f965 	bl	800aaa2 <TIM_ITRx_SetConfig>
      break;
 800a7d8:	e01c      	b.n	800a814 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6818      	ldr	r0, [r3, #0]
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	6859      	ldr	r1, [r3, #4]
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	68db      	ldr	r3, [r3, #12]
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	f000 f8fc 	bl	800a9e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	2140      	movs	r1, #64	; 0x40
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f000 f955 	bl	800aaa2 <TIM_ITRx_SetConfig>
      break;
 800a7f8:	e00c      	b.n	800a814 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4619      	mov	r1, r3
 800a804:	4610      	mov	r0, r2
 800a806:	f000 f94c 	bl	800aaa2 <TIM_ITRx_SetConfig>
      break;
 800a80a:	e003      	b.n	800a814 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a80c:	2301      	movs	r3, #1
 800a80e:	73fb      	strb	r3, [r7, #15]
      break;
 800a810:	e000      	b.n	800a814 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a812:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2201      	movs	r2, #1
 800a818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a824:	7bfb      	ldrb	r3, [r7, #15]
}
 800a826:	4618      	mov	r0, r3
 800a828:	3710      	adds	r7, #16
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}

0800a82e <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a82e:	b480      	push	{r7}
 800a830:	b083      	sub	sp, #12
 800a832:	af00      	add	r7, sp, #0
 800a834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800a836:	bf00      	nop
 800a838:	370c      	adds	r7, #12
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr

0800a842 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a842:	b480      	push	{r7}
 800a844:	b083      	sub	sp, #12
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a84a:	bf00      	nop
 800a84c:	370c      	adds	r7, #12
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr

0800a856 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a856:	b480      	push	{r7}
 800a858:	b083      	sub	sp, #12
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a85e:	bf00      	nop
 800a860:	370c      	adds	r7, #12
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr

0800a86a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a86a:	b480      	push	{r7}
 800a86c:	b083      	sub	sp, #12
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800a872:	bf00      	nop
 800a874:	370c      	adds	r7, #12
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr

0800a87e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a87e:	b480      	push	{r7}
 800a880:	b083      	sub	sp, #12
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a886:	bf00      	nop
 800a888:	370c      	adds	r7, #12
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr

0800a892 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a892:	b480      	push	{r7}
 800a894:	b083      	sub	sp, #12
 800a896:	af00      	add	r7, sp, #0
 800a898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a89a:	bf00      	nop
 800a89c:	370c      	adds	r7, #12
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr

0800a8a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a8a6:	b480      	push	{r7}
 800a8a8:	b083      	sub	sp, #12
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a8ae:	bf00      	nop
 800a8b0:	370c      	adds	r7, #12
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr

0800a8ba <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a8ba:	b480      	push	{r7}
 800a8bc:	b083      	sub	sp, #12
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800a8c2:	bf00      	nop
 800a8c4:	370c      	adds	r7, #12
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr

0800a8ce <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a8ce:	b480      	push	{r7}
 800a8d0:	b083      	sub	sp, #12
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a8d6:	bf00      	nop
 800a8d8:	370c      	adds	r7, #12
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr
	...

0800a8e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b085      	sub	sp, #20
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	4a34      	ldr	r2, [pc, #208]	; (800a9c8 <TIM_Base_SetConfig+0xe4>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d00f      	beq.n	800a91c <TIM_Base_SetConfig+0x38>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a902:	d00b      	beq.n	800a91c <TIM_Base_SetConfig+0x38>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	4a31      	ldr	r2, [pc, #196]	; (800a9cc <TIM_Base_SetConfig+0xe8>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d007      	beq.n	800a91c <TIM_Base_SetConfig+0x38>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	4a30      	ldr	r2, [pc, #192]	; (800a9d0 <TIM_Base_SetConfig+0xec>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d003      	beq.n	800a91c <TIM_Base_SetConfig+0x38>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	4a2f      	ldr	r2, [pc, #188]	; (800a9d4 <TIM_Base_SetConfig+0xf0>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d108      	bne.n	800a92e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	68fa      	ldr	r2, [r7, #12]
 800a92a:	4313      	orrs	r3, r2
 800a92c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4a25      	ldr	r2, [pc, #148]	; (800a9c8 <TIM_Base_SetConfig+0xe4>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d01b      	beq.n	800a96e <TIM_Base_SetConfig+0x8a>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a93c:	d017      	beq.n	800a96e <TIM_Base_SetConfig+0x8a>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	4a22      	ldr	r2, [pc, #136]	; (800a9cc <TIM_Base_SetConfig+0xe8>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d013      	beq.n	800a96e <TIM_Base_SetConfig+0x8a>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	4a21      	ldr	r2, [pc, #132]	; (800a9d0 <TIM_Base_SetConfig+0xec>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d00f      	beq.n	800a96e <TIM_Base_SetConfig+0x8a>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	4a20      	ldr	r2, [pc, #128]	; (800a9d4 <TIM_Base_SetConfig+0xf0>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d00b      	beq.n	800a96e <TIM_Base_SetConfig+0x8a>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	4a1f      	ldr	r2, [pc, #124]	; (800a9d8 <TIM_Base_SetConfig+0xf4>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d007      	beq.n	800a96e <TIM_Base_SetConfig+0x8a>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	4a1e      	ldr	r2, [pc, #120]	; (800a9dc <TIM_Base_SetConfig+0xf8>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d003      	beq.n	800a96e <TIM_Base_SetConfig+0x8a>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4a1d      	ldr	r2, [pc, #116]	; (800a9e0 <TIM_Base_SetConfig+0xfc>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d108      	bne.n	800a980 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	68fa      	ldr	r2, [r7, #12]
 800a97c:	4313      	orrs	r3, r2
 800a97e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	695b      	ldr	r3, [r3, #20]
 800a98a:	4313      	orrs	r3, r2
 800a98c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	68fa      	ldr	r2, [r7, #12]
 800a992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	689a      	ldr	r2, [r3, #8]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	681a      	ldr	r2, [r3, #0]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	4a08      	ldr	r2, [pc, #32]	; (800a9c8 <TIM_Base_SetConfig+0xe4>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d103      	bne.n	800a9b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	691a      	ldr	r2, [r3, #16]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	615a      	str	r2, [r3, #20]
}
 800a9ba:	bf00      	nop
 800a9bc:	3714      	adds	r7, #20
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr
 800a9c6:	bf00      	nop
 800a9c8:	40010000 	.word	0x40010000
 800a9cc:	40000400 	.word	0x40000400
 800a9d0:	40000800 	.word	0x40000800
 800a9d4:	40000c00 	.word	0x40000c00
 800a9d8:	40014000 	.word	0x40014000
 800a9dc:	40014400 	.word	0x40014400
 800a9e0:	40014800 	.word	0x40014800

0800a9e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b087      	sub	sp, #28
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	60f8      	str	r0, [r7, #12]
 800a9ec:	60b9      	str	r1, [r7, #8]
 800a9ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	6a1b      	ldr	r3, [r3, #32]
 800a9f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	6a1b      	ldr	r3, [r3, #32]
 800a9fa:	f023 0201 	bic.w	r2, r3, #1
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	699b      	ldr	r3, [r3, #24]
 800aa06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	011b      	lsls	r3, r3, #4
 800aa14:	693a      	ldr	r2, [r7, #16]
 800aa16:	4313      	orrs	r3, r2
 800aa18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	f023 030a 	bic.w	r3, r3, #10
 800aa20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa22:	697a      	ldr	r2, [r7, #20]
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	4313      	orrs	r3, r2
 800aa28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	693a      	ldr	r2, [r7, #16]
 800aa2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	697a      	ldr	r2, [r7, #20]
 800aa34:	621a      	str	r2, [r3, #32]
}
 800aa36:	bf00      	nop
 800aa38:	371c      	adds	r7, #28
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr

0800aa42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa42:	b480      	push	{r7}
 800aa44:	b087      	sub	sp, #28
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	60f8      	str	r0, [r7, #12]
 800aa4a:	60b9      	str	r1, [r7, #8]
 800aa4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	6a1b      	ldr	r3, [r3, #32]
 800aa52:	f023 0210 	bic.w	r2, r3, #16
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	699b      	ldr	r3, [r3, #24]
 800aa5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	6a1b      	ldr	r3, [r3, #32]
 800aa64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	031b      	lsls	r3, r3, #12
 800aa72:	697a      	ldr	r2, [r7, #20]
 800aa74:	4313      	orrs	r3, r2
 800aa76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aa7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	011b      	lsls	r3, r3, #4
 800aa84:	693a      	ldr	r2, [r7, #16]
 800aa86:	4313      	orrs	r3, r2
 800aa88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	697a      	ldr	r2, [r7, #20]
 800aa8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	693a      	ldr	r2, [r7, #16]
 800aa94:	621a      	str	r2, [r3, #32]
}
 800aa96:	bf00      	nop
 800aa98:	371c      	adds	r7, #28
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr

0800aaa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aaa2:	b480      	push	{r7}
 800aaa4:	b085      	sub	sp, #20
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
 800aaaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	689b      	ldr	r3, [r3, #8]
 800aab0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aab8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aaba:	683a      	ldr	r2, [r7, #0]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	4313      	orrs	r3, r2
 800aac0:	f043 0307 	orr.w	r3, r3, #7
 800aac4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	68fa      	ldr	r2, [r7, #12]
 800aaca:	609a      	str	r2, [r3, #8]
}
 800aacc:	bf00      	nop
 800aace:	3714      	adds	r7, #20
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr

0800aad8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aad8:	b480      	push	{r7}
 800aada:	b087      	sub	sp, #28
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	60b9      	str	r1, [r7, #8]
 800aae2:	607a      	str	r2, [r7, #4]
 800aae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	689b      	ldr	r3, [r3, #8]
 800aaea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aaf2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	021a      	lsls	r2, r3, #8
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	431a      	orrs	r2, r3
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	4313      	orrs	r3, r2
 800ab00:	697a      	ldr	r2, [r7, #20]
 800ab02:	4313      	orrs	r3, r2
 800ab04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	697a      	ldr	r2, [r7, #20]
 800ab0a:	609a      	str	r2, [r3, #8]
}
 800ab0c:	bf00      	nop
 800ab0e:	371c      	adds	r7, #28
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b083      	sub	sp, #12
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	4a1c      	ldr	r2, [pc, #112]	; (800ab94 <TIM_ResetCallback+0x7c>)
 800ab24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	4a1b      	ldr	r2, [pc, #108]	; (800ab98 <TIM_ResetCallback+0x80>)
 800ab2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	4a1a      	ldr	r2, [pc, #104]	; (800ab9c <TIM_ResetCallback+0x84>)
 800ab34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	4a19      	ldr	r2, [pc, #100]	; (800aba0 <TIM_ResetCallback+0x88>)
 800ab3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	4a18      	ldr	r2, [pc, #96]	; (800aba4 <TIM_ResetCallback+0x8c>)
 800ab44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	4a17      	ldr	r2, [pc, #92]	; (800aba8 <TIM_ResetCallback+0x90>)
 800ab4c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	4a16      	ldr	r2, [pc, #88]	; (800abac <TIM_ResetCallback+0x94>)
 800ab54:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	4a15      	ldr	r2, [pc, #84]	; (800abb0 <TIM_ResetCallback+0x98>)
 800ab5c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	4a14      	ldr	r2, [pc, #80]	; (800abb4 <TIM_ResetCallback+0x9c>)
 800ab64:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	4a13      	ldr	r2, [pc, #76]	; (800abb8 <TIM_ResetCallback+0xa0>)
 800ab6c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	4a12      	ldr	r2, [pc, #72]	; (800abbc <TIM_ResetCallback+0xa4>)
 800ab74:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	4a11      	ldr	r2, [pc, #68]	; (800abc0 <TIM_ResetCallback+0xa8>)
 800ab7c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	4a10      	ldr	r2, [pc, #64]	; (800abc4 <TIM_ResetCallback+0xac>)
 800ab84:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800ab88:	bf00      	nop
 800ab8a:	370c      	adds	r7, #12
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr
 800ab94:	08003e1d 	.word	0x08003e1d
 800ab98:	0800a82f 	.word	0x0800a82f
 800ab9c:	0800a8a7 	.word	0x0800a8a7
 800aba0:	0800a8bb 	.word	0x0800a8bb
 800aba4:	0800a857 	.word	0x0800a857
 800aba8:	0800a86b 	.word	0x0800a86b
 800abac:	0800a843 	.word	0x0800a843
 800abb0:	0800a87f 	.word	0x0800a87f
 800abb4:	0800a893 	.word	0x0800a893
 800abb8:	0800a8cf 	.word	0x0800a8cf
 800abbc:	0800aca5 	.word	0x0800aca5
 800abc0:	0800acb9 	.word	0x0800acb9
 800abc4:	0800accd 	.word	0x0800accd

0800abc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800abc8:	b480      	push	{r7}
 800abca:	b085      	sub	sp, #20
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d101      	bne.n	800abe0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800abdc:	2302      	movs	r3, #2
 800abde:	e050      	b.n	800ac82 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2201      	movs	r2, #1
 800abe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2202      	movs	r2, #2
 800abec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4a1c      	ldr	r2, [pc, #112]	; (800ac90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d018      	beq.n	800ac56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac2c:	d013      	beq.n	800ac56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	4a18      	ldr	r2, [pc, #96]	; (800ac94 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d00e      	beq.n	800ac56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4a16      	ldr	r2, [pc, #88]	; (800ac98 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d009      	beq.n	800ac56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4a15      	ldr	r2, [pc, #84]	; (800ac9c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d004      	beq.n	800ac56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4a13      	ldr	r2, [pc, #76]	; (800aca0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d10c      	bne.n	800ac70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	68ba      	ldr	r2, [r7, #8]
 800ac64:	4313      	orrs	r3, r2
 800ac66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	68ba      	ldr	r2, [r7, #8]
 800ac6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2201      	movs	r2, #1
 800ac74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac80:	2300      	movs	r3, #0
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3714      	adds	r7, #20
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr
 800ac8e:	bf00      	nop
 800ac90:	40010000 	.word	0x40010000
 800ac94:	40000400 	.word	0x40000400
 800ac98:	40000800 	.word	0x40000800
 800ac9c:	40000c00 	.word	0x40000c00
 800aca0:	40014000 	.word	0x40014000

0800aca4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800acac:	bf00      	nop
 800acae:	370c      	adds	r7, #12
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800acb8:	b480      	push	{r7}
 800acba:	b083      	sub	sp, #12
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800acc0:	bf00      	nop
 800acc2:	370c      	adds	r7, #12
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800accc:	b480      	push	{r7}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800acd4:	bf00      	nop
 800acd6:	370c      	adds	r7, #12
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b082      	sub	sp, #8
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d101      	bne.n	800acf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800acee:	2301      	movs	r3, #1
 800acf0:	e04a      	b.n	800ad88 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acf8:	b2db      	uxtb	r3, r3
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d111      	bne.n	800ad22 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2200      	movs	r2, #0
 800ad02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 fb58 	bl	800b3bc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d102      	bne.n	800ad1a <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	4a1e      	ldr	r2, [pc, #120]	; (800ad90 <HAL_UART_Init+0xb0>)
 800ad18:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2224      	movs	r2, #36	; 0x24
 800ad26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	68da      	ldr	r2, [r3, #12]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ad38:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 fd52 	bl	800b7e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	691a      	ldr	r2, [r3, #16]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ad4e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	695a      	ldr	r2, [r3, #20]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ad5e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	68da      	ldr	r2, [r3, #12]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ad6e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2220      	movs	r2, #32
 800ad7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2220      	movs	r2, #32
 800ad82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ad86:	2300      	movs	r3, #0
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3708      	adds	r7, #8
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	08004891 	.word	0x08004891

0800ad94 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b084      	sub	sp, #16
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	60f8      	str	r0, [r7, #12]
 800ad9c:	60b9      	str	r1, [r7, #8]
 800ad9e:	4613      	mov	r3, r2
 800ada0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ada8:	b2db      	uxtb	r3, r3
 800adaa:	2b20      	cmp	r3, #32
 800adac:	d11d      	bne.n	800adea <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d002      	beq.n	800adba <HAL_UART_Receive_IT+0x26>
 800adb4:	88fb      	ldrh	r3, [r7, #6]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d101      	bne.n	800adbe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800adba:	2301      	movs	r3, #1
 800adbc:	e016      	b.n	800adec <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	d101      	bne.n	800adcc <HAL_UART_Receive_IT+0x38>
 800adc8:	2302      	movs	r3, #2
 800adca:	e00f      	b.n	800adec <HAL_UART_Receive_IT+0x58>
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2201      	movs	r2, #1
 800add0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2200      	movs	r2, #0
 800add8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800adda:	88fb      	ldrh	r3, [r7, #6]
 800addc:	461a      	mov	r2, r3
 800adde:	68b9      	ldr	r1, [r7, #8]
 800ade0:	68f8      	ldr	r0, [r7, #12]
 800ade2:	f000 fb23 	bl	800b42c <UART_Start_Receive_IT>
 800ade6:	4603      	mov	r3, r0
 800ade8:	e000      	b.n	800adec <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800adea:	2302      	movs	r3, #2
  }
}
 800adec:	4618      	mov	r0, r3
 800adee:	3710      	adds	r7, #16
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b0ba      	sub	sp, #232	; 0xe8
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	68db      	ldr	r3, [r3, #12]
 800ae0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	695b      	ldr	r3, [r3, #20]
 800ae16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ae20:	2300      	movs	r3, #0
 800ae22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ae26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae2a:	f003 030f 	and.w	r3, r3, #15
 800ae2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ae32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d10f      	bne.n	800ae5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ae3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae3e:	f003 0320 	and.w	r3, r3, #32
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d009      	beq.n	800ae5a <HAL_UART_IRQHandler+0x66>
 800ae46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae4a:	f003 0320 	and.w	r3, r3, #32
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d003      	beq.n	800ae5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 fc09 	bl	800b66a <UART_Receive_IT>
      return;
 800ae58:	e25b      	b.n	800b312 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ae5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	f000 80e1 	beq.w	800b026 <HAL_UART_IRQHandler+0x232>
 800ae64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae68:	f003 0301 	and.w	r3, r3, #1
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d106      	bne.n	800ae7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ae70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae74:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	f000 80d4 	beq.w	800b026 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ae7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae82:	f003 0301 	and.w	r3, r3, #1
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d00b      	beq.n	800aea2 <HAL_UART_IRQHandler+0xae>
 800ae8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d005      	beq.n	800aea2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae9a:	f043 0201 	orr.w	r2, r3, #1
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aea6:	f003 0304 	and.w	r3, r3, #4
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d00b      	beq.n	800aec6 <HAL_UART_IRQHandler+0xd2>
 800aeae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aeb2:	f003 0301 	and.w	r3, r3, #1
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d005      	beq.n	800aec6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aebe:	f043 0202 	orr.w	r2, r3, #2
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeca:	f003 0302 	and.w	r3, r3, #2
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d00b      	beq.n	800aeea <HAL_UART_IRQHandler+0xf6>
 800aed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aed6:	f003 0301 	and.w	r3, r3, #1
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d005      	beq.n	800aeea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aee2:	f043 0204 	orr.w	r2, r3, #4
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800aeea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeee:	f003 0308 	and.w	r3, r3, #8
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d011      	beq.n	800af1a <HAL_UART_IRQHandler+0x126>
 800aef6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aefa:	f003 0320 	and.w	r3, r3, #32
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d105      	bne.n	800af0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800af02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af06:	f003 0301 	and.w	r3, r3, #1
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d005      	beq.n	800af1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af12:	f043 0208 	orr.w	r2, r3, #8
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af1e:	2b00      	cmp	r3, #0
 800af20:	f000 81f2 	beq.w	800b308 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800af24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af28:	f003 0320 	and.w	r3, r3, #32
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d008      	beq.n	800af42 <HAL_UART_IRQHandler+0x14e>
 800af30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af34:	f003 0320 	and.w	r3, r3, #32
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d002      	beq.n	800af42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f000 fb94 	bl	800b66a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	695b      	ldr	r3, [r3, #20]
 800af48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af4c:	2b40      	cmp	r3, #64	; 0x40
 800af4e:	bf0c      	ite	eq
 800af50:	2301      	moveq	r3, #1
 800af52:	2300      	movne	r3, #0
 800af54:	b2db      	uxtb	r3, r3
 800af56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af5e:	f003 0308 	and.w	r3, r3, #8
 800af62:	2b00      	cmp	r3, #0
 800af64:	d103      	bne.n	800af6e <HAL_UART_IRQHandler+0x17a>
 800af66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d051      	beq.n	800b012 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 fa9a 	bl	800b4a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	695b      	ldr	r3, [r3, #20]
 800af7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af7e:	2b40      	cmp	r3, #64	; 0x40
 800af80:	d142      	bne.n	800b008 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	3314      	adds	r3, #20
 800af88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800af90:	e853 3f00 	ldrex	r3, [r3]
 800af94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800af98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800af9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	3314      	adds	r3, #20
 800afaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800afae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800afb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800afba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800afbe:	e841 2300 	strex	r3, r2, [r1]
 800afc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800afc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d1d9      	bne.n	800af82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d013      	beq.n	800affe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afda:	4a7f      	ldr	r2, [pc, #508]	; (800b1d8 <HAL_UART_IRQHandler+0x3e4>)
 800afdc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afe2:	4618      	mov	r0, r3
 800afe4:	f7fa fd30 	bl	8005a48 <HAL_DMA_Abort_IT>
 800afe8:	4603      	mov	r3, r0
 800afea:	2b00      	cmp	r3, #0
 800afec:	d019      	beq.n	800b022 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aff4:	687a      	ldr	r2, [r7, #4]
 800aff6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800aff8:	4610      	mov	r0, r2
 800affa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800affc:	e011      	b.n	800b022 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b006:	e00c      	b.n	800b022 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b010:	e007      	b.n	800b022 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2200      	movs	r2, #0
 800b01e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b020:	e172      	b.n	800b308 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b022:	bf00      	nop
    return;
 800b024:	e170      	b.n	800b308 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	f040 814c 	bne.w	800b2c8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b034:	f003 0310 	and.w	r3, r3, #16
 800b038:	2b00      	cmp	r3, #0
 800b03a:	f000 8145 	beq.w	800b2c8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b03e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b042:	f003 0310 	and.w	r3, r3, #16
 800b046:	2b00      	cmp	r3, #0
 800b048:	f000 813e 	beq.w	800b2c8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b04c:	2300      	movs	r3, #0
 800b04e:	60bb      	str	r3, [r7, #8]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	60bb      	str	r3, [r7, #8]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	60bb      	str	r3, [r7, #8]
 800b060:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	695b      	ldr	r3, [r3, #20]
 800b068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b06c:	2b40      	cmp	r3, #64	; 0x40
 800b06e:	f040 80b5 	bne.w	800b1dc <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b07e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b082:	2b00      	cmp	r3, #0
 800b084:	f000 8142 	beq.w	800b30c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b08c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b090:	429a      	cmp	r2, r3
 800b092:	f080 813b 	bcs.w	800b30c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b09c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0a2:	69db      	ldr	r3, [r3, #28]
 800b0a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0a8:	f000 8088 	beq.w	800b1bc <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	330c      	adds	r3, #12
 800b0b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b0ba:	e853 3f00 	ldrex	r3, [r3]
 800b0be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b0c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b0c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	330c      	adds	r3, #12
 800b0d4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b0d8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b0dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0e0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b0e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b0e8:	e841 2300 	strex	r3, r2, [r1]
 800b0ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b0f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d1d9      	bne.n	800b0ac <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	3314      	adds	r3, #20
 800b0fe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b100:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b102:	e853 3f00 	ldrex	r3, [r3]
 800b106:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b108:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b10a:	f023 0301 	bic.w	r3, r3, #1
 800b10e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	3314      	adds	r3, #20
 800b118:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b11c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b120:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b122:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b124:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b128:	e841 2300 	strex	r3, r2, [r1]
 800b12c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b12e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b130:	2b00      	cmp	r3, #0
 800b132:	d1e1      	bne.n	800b0f8 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	3314      	adds	r3, #20
 800b13a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b13c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b13e:	e853 3f00 	ldrex	r3, [r3]
 800b142:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b144:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b146:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b14a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	3314      	adds	r3, #20
 800b154:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b158:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b15a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b15c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b15e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b160:	e841 2300 	strex	r3, r2, [r1]
 800b164:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b166:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d1e3      	bne.n	800b134 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2220      	movs	r2, #32
 800b170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2200      	movs	r2, #0
 800b178:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	330c      	adds	r3, #12
 800b180:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b184:	e853 3f00 	ldrex	r3, [r3]
 800b188:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b18a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b18c:	f023 0310 	bic.w	r3, r3, #16
 800b190:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	330c      	adds	r3, #12
 800b19a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b19e:	65ba      	str	r2, [r7, #88]	; 0x58
 800b1a0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b1a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b1a6:	e841 2300 	strex	r3, r2, [r1]
 800b1aa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b1ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d1e3      	bne.n	800b17a <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7fa fbd6 	bl	8005968 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1c0:	687a      	ldr	r2, [r7, #4]
 800b1c2:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800b1c4:	687a      	ldr	r2, [r7, #4]
 800b1c6:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800b1c8:	b292      	uxth	r2, r2
 800b1ca:	1a8a      	subs	r2, r1, r2
 800b1cc:	b292      	uxth	r2, r2
 800b1ce:	4611      	mov	r1, r2
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b1d4:	e09a      	b.n	800b30c <HAL_UART_IRQHandler+0x518>
 800b1d6:	bf00      	nop
 800b1d8:	0800b56f 	.word	0x0800b56f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	1ad3      	subs	r3, r2, r3
 800b1e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	f000 808c 	beq.w	800b310 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b1f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	f000 8087 	beq.w	800b310 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	330c      	adds	r3, #12
 800b208:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b20c:	e853 3f00 	ldrex	r3, [r3]
 800b210:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b214:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b218:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	330c      	adds	r3, #12
 800b222:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b226:	647a      	str	r2, [r7, #68]	; 0x44
 800b228:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b22a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b22c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b22e:	e841 2300 	strex	r3, r2, [r1]
 800b232:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b236:	2b00      	cmp	r3, #0
 800b238:	d1e3      	bne.n	800b202 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	3314      	adds	r3, #20
 800b240:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b244:	e853 3f00 	ldrex	r3, [r3]
 800b248:	623b      	str	r3, [r7, #32]
   return(result);
 800b24a:	6a3b      	ldr	r3, [r7, #32]
 800b24c:	f023 0301 	bic.w	r3, r3, #1
 800b250:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	3314      	adds	r3, #20
 800b25a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b25e:	633a      	str	r2, [r7, #48]	; 0x30
 800b260:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b262:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b266:	e841 2300 	strex	r3, r2, [r1]
 800b26a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d1e3      	bne.n	800b23a <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2220      	movs	r2, #32
 800b276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2200      	movs	r2, #0
 800b27e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	330c      	adds	r3, #12
 800b286:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	e853 3f00 	ldrex	r3, [r3]
 800b28e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f023 0310 	bic.w	r3, r3, #16
 800b296:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	330c      	adds	r3, #12
 800b2a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b2a4:	61fa      	str	r2, [r7, #28]
 800b2a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a8:	69b9      	ldr	r1, [r7, #24]
 800b2aa:	69fa      	ldr	r2, [r7, #28]
 800b2ac:	e841 2300 	strex	r3, r2, [r1]
 800b2b0:	617b      	str	r3, [r7, #20]
   return(result);
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d1e3      	bne.n	800b280 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2bc:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800b2c0:	4611      	mov	r1, r2
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b2c6:	e023      	b.n	800b310 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b2c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d009      	beq.n	800b2e8 <HAL_UART_IRQHandler+0x4f4>
 800b2d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d003      	beq.n	800b2e8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f000 f959 	bl	800b598 <UART_Transmit_IT>
    return;
 800b2e6:	e014      	b.n	800b312 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b2e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d00e      	beq.n	800b312 <HAL_UART_IRQHandler+0x51e>
 800b2f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d008      	beq.n	800b312 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 f999 	bl	800b638 <UART_EndTransmit_IT>
    return;
 800b306:	e004      	b.n	800b312 <HAL_UART_IRQHandler+0x51e>
    return;
 800b308:	bf00      	nop
 800b30a:	e002      	b.n	800b312 <HAL_UART_IRQHandler+0x51e>
      return;
 800b30c:	bf00      	nop
 800b30e:	e000      	b.n	800b312 <HAL_UART_IRQHandler+0x51e>
      return;
 800b310:	bf00      	nop
  }
}
 800b312:	37e8      	adds	r7, #232	; 0xe8
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}

0800b318 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b320:	bf00      	nop
 800b322:	370c      	adds	r7, #12
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b083      	sub	sp, #12
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b334:	bf00      	nop
 800b336:	370c      	adds	r7, #12
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr

0800b340 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b340:	b480      	push	{r7}
 800b342:	b083      	sub	sp, #12
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b348:	bf00      	nop
 800b34a:	370c      	adds	r7, #12
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr

0800b354 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b354:	b480      	push	{r7}
 800b356:	b083      	sub	sp, #12
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b35c:	bf00      	nop
 800b35e:	370c      	adds	r7, #12
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr

0800b368 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b368:	b480      	push	{r7}
 800b36a:	b083      	sub	sp, #12
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b370:	bf00      	nop
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr

0800b37c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b384:	bf00      	nop
 800b386:	370c      	adds	r7, #12
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr

0800b390 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b390:	b480      	push	{r7}
 800b392:	b083      	sub	sp, #12
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b398:	bf00      	nop
 800b39a:	370c      	adds	r7, #12
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr

0800b3a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b083      	sub	sp, #12
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	460b      	mov	r3, r1
 800b3ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b3b0:	bf00      	nop
 800b3b2:	370c      	adds	r7, #12
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr

0800b3bc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	4a10      	ldr	r2, [pc, #64]	; (800b408 <UART_InitCallbacksToDefault+0x4c>)
 800b3c8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	4a0f      	ldr	r2, [pc, #60]	; (800b40c <UART_InitCallbacksToDefault+0x50>)
 800b3ce:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	4a0f      	ldr	r2, [pc, #60]	; (800b410 <UART_InitCallbacksToDefault+0x54>)
 800b3d4:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	4a0e      	ldr	r2, [pc, #56]	; (800b414 <UART_InitCallbacksToDefault+0x58>)
 800b3da:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	4a0e      	ldr	r2, [pc, #56]	; (800b418 <UART_InitCallbacksToDefault+0x5c>)
 800b3e0:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	4a0d      	ldr	r2, [pc, #52]	; (800b41c <UART_InitCallbacksToDefault+0x60>)
 800b3e6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	4a0d      	ldr	r2, [pc, #52]	; (800b420 <UART_InitCallbacksToDefault+0x64>)
 800b3ec:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	4a0c      	ldr	r2, [pc, #48]	; (800b424 <UART_InitCallbacksToDefault+0x68>)
 800b3f2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	4a0c      	ldr	r2, [pc, #48]	; (800b428 <UART_InitCallbacksToDefault+0x6c>)
 800b3f8:	669a      	str	r2, [r3, #104]	; 0x68

}
 800b3fa:	bf00      	nop
 800b3fc:	370c      	adds	r7, #12
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr
 800b406:	bf00      	nop
 800b408:	0800b32d 	.word	0x0800b32d
 800b40c:	0800b319 	.word	0x0800b319
 800b410:	0800b341 	.word	0x0800b341
 800b414:	08004971 	.word	0x08004971
 800b418:	0800b355 	.word	0x0800b355
 800b41c:	0800b369 	.word	0x0800b369
 800b420:	0800b37d 	.word	0x0800b37d
 800b424:	0800b391 	.word	0x0800b391
 800b428:	0800b3a5 	.word	0x0800b3a5

0800b42c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b085      	sub	sp, #20
 800b430:	af00      	add	r7, sp, #0
 800b432:	60f8      	str	r0, [r7, #12]
 800b434:	60b9      	str	r1, [r7, #8]
 800b436:	4613      	mov	r3, r2
 800b438:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	68ba      	ldr	r2, [r7, #8]
 800b43e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	88fa      	ldrh	r2, [r7, #6]
 800b444:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	88fa      	ldrh	r2, [r7, #6]
 800b44a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2200      	movs	r2, #0
 800b450:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2222      	movs	r2, #34	; 0x22
 800b456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	2200      	movs	r2, #0
 800b45e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	691b      	ldr	r3, [r3, #16]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d007      	beq.n	800b47a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	68da      	ldr	r2, [r3, #12]
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b478:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	695a      	ldr	r2, [r3, #20]
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f042 0201 	orr.w	r2, r2, #1
 800b488:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	68da      	ldr	r2, [r3, #12]
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f042 0220 	orr.w	r2, r2, #32
 800b498:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b49a:	2300      	movs	r3, #0
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3714      	adds	r7, #20
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr

0800b4a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b095      	sub	sp, #84	; 0x54
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	330c      	adds	r3, #12
 800b4b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4ba:	e853 3f00 	ldrex	r3, [r3]
 800b4be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b4c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	330c      	adds	r3, #12
 800b4ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b4d0:	643a      	str	r2, [r7, #64]	; 0x40
 800b4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b4d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b4d8:	e841 2300 	strex	r3, r2, [r1]
 800b4dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d1e5      	bne.n	800b4b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	3314      	adds	r3, #20
 800b4ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ec:	6a3b      	ldr	r3, [r7, #32]
 800b4ee:	e853 3f00 	ldrex	r3, [r3]
 800b4f2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b4f4:	69fb      	ldr	r3, [r7, #28]
 800b4f6:	f023 0301 	bic.w	r3, r3, #1
 800b4fa:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	3314      	adds	r3, #20
 800b502:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b504:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b506:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b508:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b50a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b50c:	e841 2300 	strex	r3, r2, [r1]
 800b510:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b514:	2b00      	cmp	r3, #0
 800b516:	d1e5      	bne.n	800b4e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d119      	bne.n	800b554 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	330c      	adds	r3, #12
 800b526:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	e853 3f00 	ldrex	r3, [r3]
 800b52e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	f023 0310 	bic.w	r3, r3, #16
 800b536:	647b      	str	r3, [r7, #68]	; 0x44
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	330c      	adds	r3, #12
 800b53e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b540:	61ba      	str	r2, [r7, #24]
 800b542:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b544:	6979      	ldr	r1, [r7, #20]
 800b546:	69ba      	ldr	r2, [r7, #24]
 800b548:	e841 2300 	strex	r3, r2, [r1]
 800b54c:	613b      	str	r3, [r7, #16]
   return(result);
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d1e5      	bne.n	800b520 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2220      	movs	r2, #32
 800b558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2200      	movs	r2, #0
 800b560:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b562:	bf00      	nop
 800b564:	3754      	adds	r7, #84	; 0x54
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr

0800b56e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b56e:	b580      	push	{r7, lr}
 800b570:	b084      	sub	sp, #16
 800b572:	af00      	add	r7, sp, #0
 800b574:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b57a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2200      	movs	r2, #0
 800b580:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2200      	movs	r2, #0
 800b586:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b58c:	68f8      	ldr	r0, [r7, #12]
 800b58e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b590:	bf00      	nop
 800b592:	3710      	adds	r7, #16
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b598:	b480      	push	{r7}
 800b59a:	b085      	sub	sp, #20
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5a6:	b2db      	uxtb	r3, r3
 800b5a8:	2b21      	cmp	r3, #33	; 0x21
 800b5aa:	d13e      	bne.n	800b62a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	689b      	ldr	r3, [r3, #8]
 800b5b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5b4:	d114      	bne.n	800b5e0 <UART_Transmit_IT+0x48>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	691b      	ldr	r3, [r3, #16]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d110      	bne.n	800b5e0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6a1b      	ldr	r3, [r3, #32]
 800b5c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	881b      	ldrh	r3, [r3, #0]
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b5d2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6a1b      	ldr	r3, [r3, #32]
 800b5d8:	1c9a      	adds	r2, r3, #2
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	621a      	str	r2, [r3, #32]
 800b5de:	e008      	b.n	800b5f2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6a1b      	ldr	r3, [r3, #32]
 800b5e4:	1c59      	adds	r1, r3, #1
 800b5e6:	687a      	ldr	r2, [r7, #4]
 800b5e8:	6211      	str	r1, [r2, #32]
 800b5ea:	781a      	ldrb	r2, [r3, #0]
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b5f6:	b29b      	uxth	r3, r3
 800b5f8:	3b01      	subs	r3, #1
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	687a      	ldr	r2, [r7, #4]
 800b5fe:	4619      	mov	r1, r3
 800b600:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b602:	2b00      	cmp	r3, #0
 800b604:	d10f      	bne.n	800b626 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	68da      	ldr	r2, [r3, #12]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b614:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	68da      	ldr	r2, [r3, #12]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b624:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b626:	2300      	movs	r3, #0
 800b628:	e000      	b.n	800b62c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b62a:	2302      	movs	r3, #2
  }
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3714      	adds	r7, #20
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr

0800b638 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b082      	sub	sp, #8
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	68da      	ldr	r2, [r3, #12]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b64e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2220      	movs	r2, #32
 800b654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b660:	2300      	movs	r3, #0
}
 800b662:	4618      	mov	r0, r3
 800b664:	3708      	adds	r7, #8
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}

0800b66a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b66a:	b580      	push	{r7, lr}
 800b66c:	b08c      	sub	sp, #48	; 0x30
 800b66e:	af00      	add	r7, sp, #0
 800b670:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b678:	b2db      	uxtb	r3, r3
 800b67a:	2b22      	cmp	r3, #34	; 0x22
 800b67c:	f040 80ad 	bne.w	800b7da <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	689b      	ldr	r3, [r3, #8]
 800b684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b688:	d117      	bne.n	800b6ba <UART_Receive_IT+0x50>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	691b      	ldr	r3, [r3, #16]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d113      	bne.n	800b6ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b692:	2300      	movs	r3, #0
 800b694:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b69a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6a8:	b29a      	uxth	r2, r3
 800b6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6b2:	1c9a      	adds	r2, r3, #2
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	629a      	str	r2, [r3, #40]	; 0x28
 800b6b8:	e026      	b.n	800b708 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	689b      	ldr	r3, [r3, #8]
 800b6c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6cc:	d007      	beq.n	800b6de <UART_Receive_IT+0x74>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	689b      	ldr	r3, [r3, #8]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d10a      	bne.n	800b6ec <UART_Receive_IT+0x82>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	691b      	ldr	r3, [r3, #16]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d106      	bne.n	800b6ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	b2da      	uxtb	r2, r3
 800b6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e8:	701a      	strb	r2, [r3, #0]
 800b6ea:	e008      	b.n	800b6fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	b2db      	uxtb	r3, r3
 800b6f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6f8:	b2da      	uxtb	r2, r3
 800b6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b702:	1c5a      	adds	r2, r3, #1
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b70c:	b29b      	uxth	r3, r3
 800b70e:	3b01      	subs	r3, #1
 800b710:	b29b      	uxth	r3, r3
 800b712:	687a      	ldr	r2, [r7, #4]
 800b714:	4619      	mov	r1, r3
 800b716:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d15c      	bne.n	800b7d6 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	68da      	ldr	r2, [r3, #12]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f022 0220 	bic.w	r2, r2, #32
 800b72a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	68da      	ldr	r2, [r3, #12]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b73a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	695a      	ldr	r2, [r3, #20]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f022 0201 	bic.w	r2, r2, #1
 800b74a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2220      	movs	r2, #32
 800b750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b758:	2b01      	cmp	r3, #1
 800b75a:	d136      	bne.n	800b7ca <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2200      	movs	r2, #0
 800b760:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	330c      	adds	r3, #12
 800b768:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	e853 3f00 	ldrex	r3, [r3]
 800b770:	613b      	str	r3, [r7, #16]
   return(result);
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	f023 0310 	bic.w	r3, r3, #16
 800b778:	627b      	str	r3, [r7, #36]	; 0x24
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	330c      	adds	r3, #12
 800b780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b782:	623a      	str	r2, [r7, #32]
 800b784:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b786:	69f9      	ldr	r1, [r7, #28]
 800b788:	6a3a      	ldr	r2, [r7, #32]
 800b78a:	e841 2300 	strex	r3, r2, [r1]
 800b78e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b790:	69bb      	ldr	r3, [r7, #24]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d1e5      	bne.n	800b762 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f003 0310 	and.w	r3, r3, #16
 800b7a0:	2b10      	cmp	r3, #16
 800b7a2:	d10a      	bne.n	800b7ba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	60fb      	str	r3, [r7, #12]
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	60fb      	str	r3, [r7, #12]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	685b      	ldr	r3, [r3, #4]
 800b7b6:	60fb      	str	r3, [r7, #12]
 800b7b8:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b7be:	687a      	ldr	r2, [r7, #4]
 800b7c0:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800b7c2:	4611      	mov	r1, r2
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	4798      	blx	r3
 800b7c8:	e003      	b.n	800b7d2 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	e002      	b.n	800b7dc <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	e000      	b.n	800b7dc <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800b7da:	2302      	movs	r3, #2
  }
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3730      	adds	r7, #48	; 0x30
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b7e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b7e8:	b0c0      	sub	sp, #256	; 0x100
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b7f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	691b      	ldr	r3, [r3, #16]
 800b7f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b7fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b800:	68d9      	ldr	r1, [r3, #12]
 800b802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b806:	681a      	ldr	r2, [r3, #0]
 800b808:	ea40 0301 	orr.w	r3, r0, r1
 800b80c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b80e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b812:	689a      	ldr	r2, [r3, #8]
 800b814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b818:	691b      	ldr	r3, [r3, #16]
 800b81a:	431a      	orrs	r2, r3
 800b81c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b820:	695b      	ldr	r3, [r3, #20]
 800b822:	431a      	orrs	r2, r3
 800b824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b828:	69db      	ldr	r3, [r3, #28]
 800b82a:	4313      	orrs	r3, r2
 800b82c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	68db      	ldr	r3, [r3, #12]
 800b838:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b83c:	f021 010c 	bic.w	r1, r1, #12
 800b840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b844:	681a      	ldr	r2, [r3, #0]
 800b846:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b84a:	430b      	orrs	r3, r1
 800b84c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b84e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	695b      	ldr	r3, [r3, #20]
 800b856:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b85a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b85e:	6999      	ldr	r1, [r3, #24]
 800b860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b864:	681a      	ldr	r2, [r3, #0]
 800b866:	ea40 0301 	orr.w	r3, r0, r1
 800b86a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b86c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b870:	681a      	ldr	r2, [r3, #0]
 800b872:	4b8f      	ldr	r3, [pc, #572]	; (800bab0 <UART_SetConfig+0x2cc>)
 800b874:	429a      	cmp	r2, r3
 800b876:	d005      	beq.n	800b884 <UART_SetConfig+0xa0>
 800b878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b87c:	681a      	ldr	r2, [r3, #0]
 800b87e:	4b8d      	ldr	r3, [pc, #564]	; (800bab4 <UART_SetConfig+0x2d0>)
 800b880:	429a      	cmp	r2, r3
 800b882:	d104      	bne.n	800b88e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b884:	f7fd fcf2 	bl	800926c <HAL_RCC_GetPCLK2Freq>
 800b888:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b88c:	e003      	b.n	800b896 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b88e:	f7fd fcd9 	bl	8009244 <HAL_RCC_GetPCLK1Freq>
 800b892:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b89a:	69db      	ldr	r3, [r3, #28]
 800b89c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8a0:	f040 810c 	bne.w	800babc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b8a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b8ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b8b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b8b6:	4622      	mov	r2, r4
 800b8b8:	462b      	mov	r3, r5
 800b8ba:	1891      	adds	r1, r2, r2
 800b8bc:	65b9      	str	r1, [r7, #88]	; 0x58
 800b8be:	415b      	adcs	r3, r3
 800b8c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b8c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b8c6:	4621      	mov	r1, r4
 800b8c8:	eb12 0801 	adds.w	r8, r2, r1
 800b8cc:	4629      	mov	r1, r5
 800b8ce:	eb43 0901 	adc.w	r9, r3, r1
 800b8d2:	f04f 0200 	mov.w	r2, #0
 800b8d6:	f04f 0300 	mov.w	r3, #0
 800b8da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b8de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b8e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b8e6:	4690      	mov	r8, r2
 800b8e8:	4699      	mov	r9, r3
 800b8ea:	4623      	mov	r3, r4
 800b8ec:	eb18 0303 	adds.w	r3, r8, r3
 800b8f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b8f4:	462b      	mov	r3, r5
 800b8f6:	eb49 0303 	adc.w	r3, r9, r3
 800b8fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b8fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	2200      	movs	r2, #0
 800b906:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b90a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b90e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b912:	460b      	mov	r3, r1
 800b914:	18db      	adds	r3, r3, r3
 800b916:	653b      	str	r3, [r7, #80]	; 0x50
 800b918:	4613      	mov	r3, r2
 800b91a:	eb42 0303 	adc.w	r3, r2, r3
 800b91e:	657b      	str	r3, [r7, #84]	; 0x54
 800b920:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b924:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b928:	f7f5 f848 	bl	80009bc <__aeabi_uldivmod>
 800b92c:	4602      	mov	r2, r0
 800b92e:	460b      	mov	r3, r1
 800b930:	4b61      	ldr	r3, [pc, #388]	; (800bab8 <UART_SetConfig+0x2d4>)
 800b932:	fba3 2302 	umull	r2, r3, r3, r2
 800b936:	095b      	lsrs	r3, r3, #5
 800b938:	011c      	lsls	r4, r3, #4
 800b93a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b93e:	2200      	movs	r2, #0
 800b940:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b944:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b948:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b94c:	4642      	mov	r2, r8
 800b94e:	464b      	mov	r3, r9
 800b950:	1891      	adds	r1, r2, r2
 800b952:	64b9      	str	r1, [r7, #72]	; 0x48
 800b954:	415b      	adcs	r3, r3
 800b956:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b958:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b95c:	4641      	mov	r1, r8
 800b95e:	eb12 0a01 	adds.w	sl, r2, r1
 800b962:	4649      	mov	r1, r9
 800b964:	eb43 0b01 	adc.w	fp, r3, r1
 800b968:	f04f 0200 	mov.w	r2, #0
 800b96c:	f04f 0300 	mov.w	r3, #0
 800b970:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b974:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b978:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b97c:	4692      	mov	sl, r2
 800b97e:	469b      	mov	fp, r3
 800b980:	4643      	mov	r3, r8
 800b982:	eb1a 0303 	adds.w	r3, sl, r3
 800b986:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b98a:	464b      	mov	r3, r9
 800b98c:	eb4b 0303 	adc.w	r3, fp, r3
 800b990:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	2200      	movs	r2, #0
 800b99c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b9a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b9a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	18db      	adds	r3, r3, r3
 800b9ac:	643b      	str	r3, [r7, #64]	; 0x40
 800b9ae:	4613      	mov	r3, r2
 800b9b0:	eb42 0303 	adc.w	r3, r2, r3
 800b9b4:	647b      	str	r3, [r7, #68]	; 0x44
 800b9b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b9ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b9be:	f7f4 fffd 	bl	80009bc <__aeabi_uldivmod>
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	4611      	mov	r1, r2
 800b9c8:	4b3b      	ldr	r3, [pc, #236]	; (800bab8 <UART_SetConfig+0x2d4>)
 800b9ca:	fba3 2301 	umull	r2, r3, r3, r1
 800b9ce:	095b      	lsrs	r3, r3, #5
 800b9d0:	2264      	movs	r2, #100	; 0x64
 800b9d2:	fb02 f303 	mul.w	r3, r2, r3
 800b9d6:	1acb      	subs	r3, r1, r3
 800b9d8:	00db      	lsls	r3, r3, #3
 800b9da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b9de:	4b36      	ldr	r3, [pc, #216]	; (800bab8 <UART_SetConfig+0x2d4>)
 800b9e0:	fba3 2302 	umull	r2, r3, r3, r2
 800b9e4:	095b      	lsrs	r3, r3, #5
 800b9e6:	005b      	lsls	r3, r3, #1
 800b9e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b9ec:	441c      	add	r4, r3
 800b9ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b9f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b9fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ba00:	4642      	mov	r2, r8
 800ba02:	464b      	mov	r3, r9
 800ba04:	1891      	adds	r1, r2, r2
 800ba06:	63b9      	str	r1, [r7, #56]	; 0x38
 800ba08:	415b      	adcs	r3, r3
 800ba0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ba10:	4641      	mov	r1, r8
 800ba12:	1851      	adds	r1, r2, r1
 800ba14:	6339      	str	r1, [r7, #48]	; 0x30
 800ba16:	4649      	mov	r1, r9
 800ba18:	414b      	adcs	r3, r1
 800ba1a:	637b      	str	r3, [r7, #52]	; 0x34
 800ba1c:	f04f 0200 	mov.w	r2, #0
 800ba20:	f04f 0300 	mov.w	r3, #0
 800ba24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ba28:	4659      	mov	r1, fp
 800ba2a:	00cb      	lsls	r3, r1, #3
 800ba2c:	4651      	mov	r1, sl
 800ba2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba32:	4651      	mov	r1, sl
 800ba34:	00ca      	lsls	r2, r1, #3
 800ba36:	4610      	mov	r0, r2
 800ba38:	4619      	mov	r1, r3
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	4642      	mov	r2, r8
 800ba3e:	189b      	adds	r3, r3, r2
 800ba40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ba44:	464b      	mov	r3, r9
 800ba46:	460a      	mov	r2, r1
 800ba48:	eb42 0303 	adc.w	r3, r2, r3
 800ba4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ba50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	2200      	movs	r2, #0
 800ba58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ba5c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ba60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ba64:	460b      	mov	r3, r1
 800ba66:	18db      	adds	r3, r3, r3
 800ba68:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba6a:	4613      	mov	r3, r2
 800ba6c:	eb42 0303 	adc.w	r3, r2, r3
 800ba70:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ba76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ba7a:	f7f4 ff9f 	bl	80009bc <__aeabi_uldivmod>
 800ba7e:	4602      	mov	r2, r0
 800ba80:	460b      	mov	r3, r1
 800ba82:	4b0d      	ldr	r3, [pc, #52]	; (800bab8 <UART_SetConfig+0x2d4>)
 800ba84:	fba3 1302 	umull	r1, r3, r3, r2
 800ba88:	095b      	lsrs	r3, r3, #5
 800ba8a:	2164      	movs	r1, #100	; 0x64
 800ba8c:	fb01 f303 	mul.w	r3, r1, r3
 800ba90:	1ad3      	subs	r3, r2, r3
 800ba92:	00db      	lsls	r3, r3, #3
 800ba94:	3332      	adds	r3, #50	; 0x32
 800ba96:	4a08      	ldr	r2, [pc, #32]	; (800bab8 <UART_SetConfig+0x2d4>)
 800ba98:	fba2 2303 	umull	r2, r3, r2, r3
 800ba9c:	095b      	lsrs	r3, r3, #5
 800ba9e:	f003 0207 	and.w	r2, r3, #7
 800baa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	4422      	add	r2, r4
 800baaa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800baac:	e105      	b.n	800bcba <UART_SetConfig+0x4d6>
 800baae:	bf00      	nop
 800bab0:	40011000 	.word	0x40011000
 800bab4:	40011400 	.word	0x40011400
 800bab8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800babc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bac0:	2200      	movs	r2, #0
 800bac2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bac6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800baca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bace:	4642      	mov	r2, r8
 800bad0:	464b      	mov	r3, r9
 800bad2:	1891      	adds	r1, r2, r2
 800bad4:	6239      	str	r1, [r7, #32]
 800bad6:	415b      	adcs	r3, r3
 800bad8:	627b      	str	r3, [r7, #36]	; 0x24
 800bada:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bade:	4641      	mov	r1, r8
 800bae0:	1854      	adds	r4, r2, r1
 800bae2:	4649      	mov	r1, r9
 800bae4:	eb43 0501 	adc.w	r5, r3, r1
 800bae8:	f04f 0200 	mov.w	r2, #0
 800baec:	f04f 0300 	mov.w	r3, #0
 800baf0:	00eb      	lsls	r3, r5, #3
 800baf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800baf6:	00e2      	lsls	r2, r4, #3
 800baf8:	4614      	mov	r4, r2
 800bafa:	461d      	mov	r5, r3
 800bafc:	4643      	mov	r3, r8
 800bafe:	18e3      	adds	r3, r4, r3
 800bb00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bb04:	464b      	mov	r3, r9
 800bb06:	eb45 0303 	adc.w	r3, r5, r3
 800bb0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bb0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb12:	685b      	ldr	r3, [r3, #4]
 800bb14:	2200      	movs	r2, #0
 800bb16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bb1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bb1e:	f04f 0200 	mov.w	r2, #0
 800bb22:	f04f 0300 	mov.w	r3, #0
 800bb26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bb2a:	4629      	mov	r1, r5
 800bb2c:	008b      	lsls	r3, r1, #2
 800bb2e:	4621      	mov	r1, r4
 800bb30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bb34:	4621      	mov	r1, r4
 800bb36:	008a      	lsls	r2, r1, #2
 800bb38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bb3c:	f7f4 ff3e 	bl	80009bc <__aeabi_uldivmod>
 800bb40:	4602      	mov	r2, r0
 800bb42:	460b      	mov	r3, r1
 800bb44:	4b60      	ldr	r3, [pc, #384]	; (800bcc8 <UART_SetConfig+0x4e4>)
 800bb46:	fba3 2302 	umull	r2, r3, r3, r2
 800bb4a:	095b      	lsrs	r3, r3, #5
 800bb4c:	011c      	lsls	r4, r3, #4
 800bb4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb52:	2200      	movs	r2, #0
 800bb54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bb58:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bb5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bb60:	4642      	mov	r2, r8
 800bb62:	464b      	mov	r3, r9
 800bb64:	1891      	adds	r1, r2, r2
 800bb66:	61b9      	str	r1, [r7, #24]
 800bb68:	415b      	adcs	r3, r3
 800bb6a:	61fb      	str	r3, [r7, #28]
 800bb6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bb70:	4641      	mov	r1, r8
 800bb72:	1851      	adds	r1, r2, r1
 800bb74:	6139      	str	r1, [r7, #16]
 800bb76:	4649      	mov	r1, r9
 800bb78:	414b      	adcs	r3, r1
 800bb7a:	617b      	str	r3, [r7, #20]
 800bb7c:	f04f 0200 	mov.w	r2, #0
 800bb80:	f04f 0300 	mov.w	r3, #0
 800bb84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bb88:	4659      	mov	r1, fp
 800bb8a:	00cb      	lsls	r3, r1, #3
 800bb8c:	4651      	mov	r1, sl
 800bb8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bb92:	4651      	mov	r1, sl
 800bb94:	00ca      	lsls	r2, r1, #3
 800bb96:	4610      	mov	r0, r2
 800bb98:	4619      	mov	r1, r3
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	4642      	mov	r2, r8
 800bb9e:	189b      	adds	r3, r3, r2
 800bba0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bba4:	464b      	mov	r3, r9
 800bba6:	460a      	mov	r2, r1
 800bba8:	eb42 0303 	adc.w	r3, r2, r3
 800bbac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bbb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	67bb      	str	r3, [r7, #120]	; 0x78
 800bbba:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bbbc:	f04f 0200 	mov.w	r2, #0
 800bbc0:	f04f 0300 	mov.w	r3, #0
 800bbc4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bbc8:	4649      	mov	r1, r9
 800bbca:	008b      	lsls	r3, r1, #2
 800bbcc:	4641      	mov	r1, r8
 800bbce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bbd2:	4641      	mov	r1, r8
 800bbd4:	008a      	lsls	r2, r1, #2
 800bbd6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bbda:	f7f4 feef 	bl	80009bc <__aeabi_uldivmod>
 800bbde:	4602      	mov	r2, r0
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	4b39      	ldr	r3, [pc, #228]	; (800bcc8 <UART_SetConfig+0x4e4>)
 800bbe4:	fba3 1302 	umull	r1, r3, r3, r2
 800bbe8:	095b      	lsrs	r3, r3, #5
 800bbea:	2164      	movs	r1, #100	; 0x64
 800bbec:	fb01 f303 	mul.w	r3, r1, r3
 800bbf0:	1ad3      	subs	r3, r2, r3
 800bbf2:	011b      	lsls	r3, r3, #4
 800bbf4:	3332      	adds	r3, #50	; 0x32
 800bbf6:	4a34      	ldr	r2, [pc, #208]	; (800bcc8 <UART_SetConfig+0x4e4>)
 800bbf8:	fba2 2303 	umull	r2, r3, r2, r3
 800bbfc:	095b      	lsrs	r3, r3, #5
 800bbfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bc02:	441c      	add	r4, r3
 800bc04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc08:	2200      	movs	r2, #0
 800bc0a:	673b      	str	r3, [r7, #112]	; 0x70
 800bc0c:	677a      	str	r2, [r7, #116]	; 0x74
 800bc0e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bc12:	4642      	mov	r2, r8
 800bc14:	464b      	mov	r3, r9
 800bc16:	1891      	adds	r1, r2, r2
 800bc18:	60b9      	str	r1, [r7, #8]
 800bc1a:	415b      	adcs	r3, r3
 800bc1c:	60fb      	str	r3, [r7, #12]
 800bc1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bc22:	4641      	mov	r1, r8
 800bc24:	1851      	adds	r1, r2, r1
 800bc26:	6039      	str	r1, [r7, #0]
 800bc28:	4649      	mov	r1, r9
 800bc2a:	414b      	adcs	r3, r1
 800bc2c:	607b      	str	r3, [r7, #4]
 800bc2e:	f04f 0200 	mov.w	r2, #0
 800bc32:	f04f 0300 	mov.w	r3, #0
 800bc36:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bc3a:	4659      	mov	r1, fp
 800bc3c:	00cb      	lsls	r3, r1, #3
 800bc3e:	4651      	mov	r1, sl
 800bc40:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bc44:	4651      	mov	r1, sl
 800bc46:	00ca      	lsls	r2, r1, #3
 800bc48:	4610      	mov	r0, r2
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	4642      	mov	r2, r8
 800bc50:	189b      	adds	r3, r3, r2
 800bc52:	66bb      	str	r3, [r7, #104]	; 0x68
 800bc54:	464b      	mov	r3, r9
 800bc56:	460a      	mov	r2, r1
 800bc58:	eb42 0303 	adc.w	r3, r2, r3
 800bc5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bc5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	2200      	movs	r2, #0
 800bc66:	663b      	str	r3, [r7, #96]	; 0x60
 800bc68:	667a      	str	r2, [r7, #100]	; 0x64
 800bc6a:	f04f 0200 	mov.w	r2, #0
 800bc6e:	f04f 0300 	mov.w	r3, #0
 800bc72:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bc76:	4649      	mov	r1, r9
 800bc78:	008b      	lsls	r3, r1, #2
 800bc7a:	4641      	mov	r1, r8
 800bc7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bc80:	4641      	mov	r1, r8
 800bc82:	008a      	lsls	r2, r1, #2
 800bc84:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bc88:	f7f4 fe98 	bl	80009bc <__aeabi_uldivmod>
 800bc8c:	4602      	mov	r2, r0
 800bc8e:	460b      	mov	r3, r1
 800bc90:	4b0d      	ldr	r3, [pc, #52]	; (800bcc8 <UART_SetConfig+0x4e4>)
 800bc92:	fba3 1302 	umull	r1, r3, r3, r2
 800bc96:	095b      	lsrs	r3, r3, #5
 800bc98:	2164      	movs	r1, #100	; 0x64
 800bc9a:	fb01 f303 	mul.w	r3, r1, r3
 800bc9e:	1ad3      	subs	r3, r2, r3
 800bca0:	011b      	lsls	r3, r3, #4
 800bca2:	3332      	adds	r3, #50	; 0x32
 800bca4:	4a08      	ldr	r2, [pc, #32]	; (800bcc8 <UART_SetConfig+0x4e4>)
 800bca6:	fba2 2303 	umull	r2, r3, r2, r3
 800bcaa:	095b      	lsrs	r3, r3, #5
 800bcac:	f003 020f 	and.w	r2, r3, #15
 800bcb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	4422      	add	r2, r4
 800bcb8:	609a      	str	r2, [r3, #8]
}
 800bcba:	bf00      	nop
 800bcbc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bcc6:	bf00      	nop
 800bcc8:	51eb851f 	.word	0x51eb851f

0800bccc <__NVIC_SetPriority>:
{
 800bccc:	b480      	push	{r7}
 800bcce:	b083      	sub	sp, #12
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	6039      	str	r1, [r7, #0]
 800bcd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bcd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	db0a      	blt.n	800bcf6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	b2da      	uxtb	r2, r3
 800bce4:	490c      	ldr	r1, [pc, #48]	; (800bd18 <__NVIC_SetPriority+0x4c>)
 800bce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcea:	0112      	lsls	r2, r2, #4
 800bcec:	b2d2      	uxtb	r2, r2
 800bcee:	440b      	add	r3, r1
 800bcf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bcf4:	e00a      	b.n	800bd0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	b2da      	uxtb	r2, r3
 800bcfa:	4908      	ldr	r1, [pc, #32]	; (800bd1c <__NVIC_SetPriority+0x50>)
 800bcfc:	79fb      	ldrb	r3, [r7, #7]
 800bcfe:	f003 030f 	and.w	r3, r3, #15
 800bd02:	3b04      	subs	r3, #4
 800bd04:	0112      	lsls	r2, r2, #4
 800bd06:	b2d2      	uxtb	r2, r2
 800bd08:	440b      	add	r3, r1
 800bd0a:	761a      	strb	r2, [r3, #24]
}
 800bd0c:	bf00      	nop
 800bd0e:	370c      	adds	r7, #12
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr
 800bd18:	e000e100 	.word	0xe000e100
 800bd1c:	e000ed00 	.word	0xe000ed00

0800bd20 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bd20:	b580      	push	{r7, lr}
 800bd22:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bd24:	4b05      	ldr	r3, [pc, #20]	; (800bd3c <SysTick_Handler+0x1c>)
 800bd26:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bd28:	f002 fd88 	bl	800e83c <xTaskGetSchedulerState>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	2b01      	cmp	r3, #1
 800bd30:	d001      	beq.n	800bd36 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bd32:	f000 ff21 	bl	800cb78 <xPortSysTickHandler>
  }
}
 800bd36:	bf00      	nop
 800bd38:	bd80      	pop	{r7, pc}
 800bd3a:	bf00      	nop
 800bd3c:	e000e010 	.word	0xe000e010

0800bd40 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bd40:	b580      	push	{r7, lr}
 800bd42:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bd44:	2100      	movs	r1, #0
 800bd46:	f06f 0004 	mvn.w	r0, #4
 800bd4a:	f7ff ffbf 	bl	800bccc <__NVIC_SetPriority>
#endif
}
 800bd4e:	bf00      	nop
 800bd50:	bd80      	pop	{r7, pc}
	...

0800bd54 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bd54:	b480      	push	{r7}
 800bd56:	b083      	sub	sp, #12
 800bd58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd5a:	f3ef 8305 	mrs	r3, IPSR
 800bd5e:	603b      	str	r3, [r7, #0]
  return(result);
 800bd60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d003      	beq.n	800bd6e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bd66:	f06f 0305 	mvn.w	r3, #5
 800bd6a:	607b      	str	r3, [r7, #4]
 800bd6c:	e00c      	b.n	800bd88 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bd6e:	4b0a      	ldr	r3, [pc, #40]	; (800bd98 <osKernelInitialize+0x44>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d105      	bne.n	800bd82 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bd76:	4b08      	ldr	r3, [pc, #32]	; (800bd98 <osKernelInitialize+0x44>)
 800bd78:	2201      	movs	r2, #1
 800bd7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	607b      	str	r3, [r7, #4]
 800bd80:	e002      	b.n	800bd88 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bd82:	f04f 33ff 	mov.w	r3, #4294967295
 800bd86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bd88:	687b      	ldr	r3, [r7, #4]
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	370c      	adds	r7, #12
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr
 800bd96:	bf00      	nop
 800bd98:	200009b4 	.word	0x200009b4

0800bd9c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b082      	sub	sp, #8
 800bda0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bda2:	f3ef 8305 	mrs	r3, IPSR
 800bda6:	603b      	str	r3, [r7, #0]
  return(result);
 800bda8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d003      	beq.n	800bdb6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800bdae:	f06f 0305 	mvn.w	r3, #5
 800bdb2:	607b      	str	r3, [r7, #4]
 800bdb4:	e010      	b.n	800bdd8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bdb6:	4b0b      	ldr	r3, [pc, #44]	; (800bde4 <osKernelStart+0x48>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	2b01      	cmp	r3, #1
 800bdbc:	d109      	bne.n	800bdd2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bdbe:	f7ff ffbf 	bl	800bd40 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bdc2:	4b08      	ldr	r3, [pc, #32]	; (800bde4 <osKernelStart+0x48>)
 800bdc4:	2202      	movs	r2, #2
 800bdc6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bdc8:	f001 ffb2 	bl	800dd30 <vTaskStartScheduler>
      stat = osOK;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	607b      	str	r3, [r7, #4]
 800bdd0:	e002      	b.n	800bdd8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bdd2:	f04f 33ff 	mov.w	r3, #4294967295
 800bdd6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bdd8:	687b      	ldr	r3, [r7, #4]
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3708      	adds	r7, #8
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
 800bde2:	bf00      	nop
 800bde4:	200009b4 	.word	0x200009b4

0800bde8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b08e      	sub	sp, #56	; 0x38
 800bdec:	af04      	add	r7, sp, #16
 800bdee:	60f8      	str	r0, [r7, #12]
 800bdf0:	60b9      	str	r1, [r7, #8]
 800bdf2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bdf8:	f3ef 8305 	mrs	r3, IPSR
 800bdfc:	617b      	str	r3, [r7, #20]
  return(result);
 800bdfe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800be00:	2b00      	cmp	r3, #0
 800be02:	d17f      	bne.n	800bf04 <osThreadNew+0x11c>
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d07c      	beq.n	800bf04 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800be0a:	2380      	movs	r3, #128	; 0x80
 800be0c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800be0e:	2318      	movs	r3, #24
 800be10:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800be12:	2300      	movs	r3, #0
 800be14:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800be16:	f04f 33ff 	mov.w	r3, #4294967295
 800be1a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d046      	beq.n	800beb0 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d002      	beq.n	800be30 <osThreadNew+0x48>
        name = attr->name;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	699b      	ldr	r3, [r3, #24]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d002      	beq.n	800be3e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	699b      	ldr	r3, [r3, #24]
 800be3c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800be3e:	69fb      	ldr	r3, [r7, #28]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d008      	beq.n	800be56 <osThreadNew+0x6e>
 800be44:	69fb      	ldr	r3, [r7, #28]
 800be46:	2b38      	cmp	r3, #56	; 0x38
 800be48:	d805      	bhi.n	800be56 <osThreadNew+0x6e>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	685b      	ldr	r3, [r3, #4]
 800be4e:	f003 0301 	and.w	r3, r3, #1
 800be52:	2b00      	cmp	r3, #0
 800be54:	d001      	beq.n	800be5a <osThreadNew+0x72>
        return (NULL);
 800be56:	2300      	movs	r3, #0
 800be58:	e055      	b.n	800bf06 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	695b      	ldr	r3, [r3, #20]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d003      	beq.n	800be6a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	695b      	ldr	r3, [r3, #20]
 800be66:	089b      	lsrs	r3, r3, #2
 800be68:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	689b      	ldr	r3, [r3, #8]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d00f      	beq.n	800be92 <osThreadNew+0xaa>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	68db      	ldr	r3, [r3, #12]
 800be76:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 800be7a:	d30a      	bcc.n	800be92 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800be80:	2b00      	cmp	r3, #0
 800be82:	d006      	beq.n	800be92 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	695b      	ldr	r3, [r3, #20]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d002      	beq.n	800be92 <osThreadNew+0xaa>
        mem = 1;
 800be8c:	2301      	movs	r3, #1
 800be8e:	61bb      	str	r3, [r7, #24]
 800be90:	e010      	b.n	800beb4 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	689b      	ldr	r3, [r3, #8]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d10c      	bne.n	800beb4 <osThreadNew+0xcc>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	68db      	ldr	r3, [r3, #12]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d108      	bne.n	800beb4 <osThreadNew+0xcc>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	691b      	ldr	r3, [r3, #16]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d104      	bne.n	800beb4 <osThreadNew+0xcc>
          mem = 0;
 800beaa:	2300      	movs	r3, #0
 800beac:	61bb      	str	r3, [r7, #24]
 800beae:	e001      	b.n	800beb4 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800beb0:	2300      	movs	r3, #0
 800beb2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800beb4:	69bb      	ldr	r3, [r7, #24]
 800beb6:	2b01      	cmp	r3, #1
 800beb8:	d110      	bne.n	800bedc <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bec2:	9202      	str	r2, [sp, #8]
 800bec4:	9301      	str	r3, [sp, #4]
 800bec6:	69fb      	ldr	r3, [r7, #28]
 800bec8:	9300      	str	r3, [sp, #0]
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	6a3a      	ldr	r2, [r7, #32]
 800bece:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bed0:	68f8      	ldr	r0, [r7, #12]
 800bed2:	f001 fcb1 	bl	800d838 <xTaskCreateStatic>
 800bed6:	4603      	mov	r3, r0
 800bed8:	613b      	str	r3, [r7, #16]
 800beda:	e013      	b.n	800bf04 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800bedc:	69bb      	ldr	r3, [r7, #24]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d110      	bne.n	800bf04 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bee2:	6a3b      	ldr	r3, [r7, #32]
 800bee4:	b29a      	uxth	r2, r3
 800bee6:	f107 0310 	add.w	r3, r7, #16
 800beea:	9301      	str	r3, [sp, #4]
 800beec:	69fb      	ldr	r3, [r7, #28]
 800beee:	9300      	str	r3, [sp, #0]
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bef4:	68f8      	ldr	r0, [r7, #12]
 800bef6:	f001 fcfe 	bl	800d8f6 <xTaskCreate>
 800befa:	4603      	mov	r3, r0
 800befc:	2b01      	cmp	r3, #1
 800befe:	d001      	beq.n	800bf04 <osThreadNew+0x11c>
            hTask = NULL;
 800bf00:	2300      	movs	r3, #0
 800bf02:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bf04:	693b      	ldr	r3, [r7, #16]
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3728      	adds	r7, #40	; 0x28
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}

0800bf0e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bf0e:	b580      	push	{r7, lr}
 800bf10:	b084      	sub	sp, #16
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf16:	f3ef 8305 	mrs	r3, IPSR
 800bf1a:	60bb      	str	r3, [r7, #8]
  return(result);
 800bf1c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d003      	beq.n	800bf2a <osDelay+0x1c>
    stat = osErrorISR;
 800bf22:	f06f 0305 	mvn.w	r3, #5
 800bf26:	60fb      	str	r3, [r7, #12]
 800bf28:	e007      	b.n	800bf3a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d002      	beq.n	800bf3a <osDelay+0x2c>
      vTaskDelay(ticks);
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f001 fe51 	bl	800dbdc <vTaskDelay>
    }
  }

  return (stat);
 800bf3a:	68fb      	ldr	r3, [r7, #12]
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3710      	adds	r7, #16
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b084      	sub	sp, #16
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f003 f992 	bl	800f276 <pvTimerGetTimerID>
 800bf52:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d005      	beq.n	800bf66 <TimerCallback+0x22>
    callb->func (callb->arg);
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	68fa      	ldr	r2, [r7, #12]
 800bf60:	6852      	ldr	r2, [r2, #4]
 800bf62:	4610      	mov	r0, r2
 800bf64:	4798      	blx	r3
  }
}
 800bf66:	bf00      	nop
 800bf68:	3710      	adds	r7, #16
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}
	...

0800bf70 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b08c      	sub	sp, #48	; 0x30
 800bf74:	af02      	add	r7, sp, #8
 800bf76:	60f8      	str	r0, [r7, #12]
 800bf78:	607a      	str	r2, [r7, #4]
 800bf7a:	603b      	str	r3, [r7, #0]
 800bf7c:	460b      	mov	r3, r1
 800bf7e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800bf80:	2300      	movs	r3, #0
 800bf82:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf84:	f3ef 8305 	mrs	r3, IPSR
 800bf88:	613b      	str	r3, [r7, #16]
  return(result);
 800bf8a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d163      	bne.n	800c058 <osTimerNew+0xe8>
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d060      	beq.n	800c058 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800bf96:	2008      	movs	r0, #8
 800bf98:	f000 f990 	bl	800c2bc <pvPortMalloc>
 800bf9c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800bf9e:	697b      	ldr	r3, [r7, #20]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d059      	beq.n	800c058 <osTimerNew+0xe8>
      callb->func = func;
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	68fa      	ldr	r2, [r7, #12]
 800bfa8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800bfb0:	7afb      	ldrb	r3, [r7, #11]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d102      	bne.n	800bfbc <osTimerNew+0x4c>
        reload = pdFALSE;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	61fb      	str	r3, [r7, #28]
 800bfba:	e001      	b.n	800bfc0 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800bfc0:	f04f 33ff 	mov.w	r3, #4294967295
 800bfc4:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d01c      	beq.n	800c00a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d002      	beq.n	800bfde <osTimerNew+0x6e>
          name = attr->name;
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	689b      	ldr	r3, [r3, #8]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d006      	beq.n	800bff4 <osTimerNew+0x84>
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	68db      	ldr	r3, [r3, #12]
 800bfea:	2b2b      	cmp	r3, #43	; 0x2b
 800bfec:	d902      	bls.n	800bff4 <osTimerNew+0x84>
          mem = 1;
 800bfee:	2301      	movs	r3, #1
 800bff0:	61bb      	str	r3, [r7, #24]
 800bff2:	e00c      	b.n	800c00e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	689b      	ldr	r3, [r3, #8]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d108      	bne.n	800c00e <osTimerNew+0x9e>
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	68db      	ldr	r3, [r3, #12]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d104      	bne.n	800c00e <osTimerNew+0x9e>
            mem = 0;
 800c004:	2300      	movs	r3, #0
 800c006:	61bb      	str	r3, [r7, #24]
 800c008:	e001      	b.n	800c00e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800c00a:	2300      	movs	r3, #0
 800c00c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800c00e:	69bb      	ldr	r3, [r7, #24]
 800c010:	2b01      	cmp	r3, #1
 800c012:	d10c      	bne.n	800c02e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	689b      	ldr	r3, [r3, #8]
 800c018:	9301      	str	r3, [sp, #4]
 800c01a:	4b12      	ldr	r3, [pc, #72]	; (800c064 <osTimerNew+0xf4>)
 800c01c:	9300      	str	r3, [sp, #0]
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	69fa      	ldr	r2, [r7, #28]
 800c022:	2101      	movs	r1, #1
 800c024:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c026:	f002 fd5e 	bl	800eae6 <xTimerCreateStatic>
 800c02a:	6238      	str	r0, [r7, #32]
 800c02c:	e00b      	b.n	800c046 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800c02e:	69bb      	ldr	r3, [r7, #24]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d108      	bne.n	800c046 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800c034:	4b0b      	ldr	r3, [pc, #44]	; (800c064 <osTimerNew+0xf4>)
 800c036:	9300      	str	r3, [sp, #0]
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	69fa      	ldr	r2, [r7, #28]
 800c03c:	2101      	movs	r1, #1
 800c03e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c040:	f002 fd30 	bl	800eaa4 <xTimerCreate>
 800c044:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800c046:	6a3b      	ldr	r3, [r7, #32]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d105      	bne.n	800c058 <osTimerNew+0xe8>
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d002      	beq.n	800c058 <osTimerNew+0xe8>
        vPortFree (callb);
 800c052:	6978      	ldr	r0, [r7, #20]
 800c054:	f000 fa02 	bl	800c45c <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800c058:	6a3b      	ldr	r3, [r7, #32]
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3728      	adds	r7, #40	; 0x28
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}
 800c062:	bf00      	nop
 800c064:	0800bf45 	.word	0x0800bf45

0800c068 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800c068:	b580      	push	{r7, lr}
 800c06a:	b088      	sub	sp, #32
 800c06c:	af02      	add	r7, sp, #8
 800c06e:	6078      	str	r0, [r7, #4]
 800c070:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c076:	f3ef 8305 	mrs	r3, IPSR
 800c07a:	60fb      	str	r3, [r7, #12]
  return(result);
 800c07c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d003      	beq.n	800c08a <osTimerStart+0x22>
    stat = osErrorISR;
 800c082:	f06f 0305 	mvn.w	r3, #5
 800c086:	617b      	str	r3, [r7, #20]
 800c088:	e017      	b.n	800c0ba <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d103      	bne.n	800c098 <osTimerStart+0x30>
    stat = osErrorParameter;
 800c090:	f06f 0303 	mvn.w	r3, #3
 800c094:	617b      	str	r3, [r7, #20]
 800c096:	e010      	b.n	800c0ba <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800c098:	2300      	movs	r3, #0
 800c09a:	9300      	str	r3, [sp, #0]
 800c09c:	2300      	movs	r3, #0
 800c09e:	683a      	ldr	r2, [r7, #0]
 800c0a0:	2104      	movs	r1, #4
 800c0a2:	6938      	ldr	r0, [r7, #16]
 800c0a4:	f002 fd98 	bl	800ebd8 <xTimerGenericCommand>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	2b01      	cmp	r3, #1
 800c0ac:	d102      	bne.n	800c0b4 <osTimerStart+0x4c>
      stat = osOK;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	617b      	str	r3, [r7, #20]
 800c0b2:	e002      	b.n	800c0ba <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800c0b4:	f06f 0302 	mvn.w	r3, #2
 800c0b8:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c0ba:	697b      	ldr	r3, [r7, #20]
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3718      	adds	r7, #24
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b088      	sub	sp, #32
 800c0c8:	af02      	add	r7, sp, #8
 800c0ca:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0d0:	f3ef 8305 	mrs	r3, IPSR
 800c0d4:	60fb      	str	r3, [r7, #12]
  return(result);
 800c0d6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d003      	beq.n	800c0e4 <osTimerStop+0x20>
    stat = osErrorISR;
 800c0dc:	f06f 0305 	mvn.w	r3, #5
 800c0e0:	617b      	str	r3, [r7, #20]
 800c0e2:	e021      	b.n	800c128 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d103      	bne.n	800c0f2 <osTimerStop+0x2e>
    stat = osErrorParameter;
 800c0ea:	f06f 0303 	mvn.w	r3, #3
 800c0ee:	617b      	str	r3, [r7, #20]
 800c0f0:	e01a      	b.n	800c128 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800c0f2:	6938      	ldr	r0, [r7, #16]
 800c0f4:	f003 f896 	bl	800f224 <xTimerIsTimerActive>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d103      	bne.n	800c106 <osTimerStop+0x42>
      stat = osErrorResource;
 800c0fe:	f06f 0302 	mvn.w	r3, #2
 800c102:	617b      	str	r3, [r7, #20]
 800c104:	e010      	b.n	800c128 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800c106:	2300      	movs	r3, #0
 800c108:	9300      	str	r3, [sp, #0]
 800c10a:	2300      	movs	r3, #0
 800c10c:	2200      	movs	r2, #0
 800c10e:	2103      	movs	r1, #3
 800c110:	6938      	ldr	r0, [r7, #16]
 800c112:	f002 fd61 	bl	800ebd8 <xTimerGenericCommand>
 800c116:	4603      	mov	r3, r0
 800c118:	2b01      	cmp	r3, #1
 800c11a:	d102      	bne.n	800c122 <osTimerStop+0x5e>
        stat = osOK;
 800c11c:	2300      	movs	r3, #0
 800c11e:	617b      	str	r3, [r7, #20]
 800c120:	e002      	b.n	800c128 <osTimerStop+0x64>
      } else {
        stat = osError;
 800c122:	f04f 33ff 	mov.w	r3, #4294967295
 800c126:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c128:	697b      	ldr	r3, [r7, #20]
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3718      	adds	r7, #24
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}

0800c132 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800c132:	b580      	push	{r7, lr}
 800c134:	b086      	sub	sp, #24
 800c136:	af00      	add	r7, sp, #0
 800c138:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800c13a:	2300      	movs	r3, #0
 800c13c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c13e:	f3ef 8305 	mrs	r3, IPSR
 800c142:	60fb      	str	r3, [r7, #12]
  return(result);
 800c144:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800c146:	2b00      	cmp	r3, #0
 800c148:	d12d      	bne.n	800c1a6 <osEventFlagsNew+0x74>
    mem = -1;
 800c14a:	f04f 33ff 	mov.w	r3, #4294967295
 800c14e:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d015      	beq.n	800c182 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	689b      	ldr	r3, [r3, #8]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d006      	beq.n	800c16c <osEventFlagsNew+0x3a>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	68db      	ldr	r3, [r3, #12]
 800c162:	2b1f      	cmp	r3, #31
 800c164:	d902      	bls.n	800c16c <osEventFlagsNew+0x3a>
        mem = 1;
 800c166:	2301      	movs	r3, #1
 800c168:	613b      	str	r3, [r7, #16]
 800c16a:	e00c      	b.n	800c186 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	689b      	ldr	r3, [r3, #8]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d108      	bne.n	800c186 <osEventFlagsNew+0x54>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	68db      	ldr	r3, [r3, #12]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d104      	bne.n	800c186 <osEventFlagsNew+0x54>
          mem = 0;
 800c17c:	2300      	movs	r3, #0
 800c17e:	613b      	str	r3, [r7, #16]
 800c180:	e001      	b.n	800c186 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800c182:	2300      	movs	r3, #0
 800c184:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	2b01      	cmp	r3, #1
 800c18a:	d106      	bne.n	800c19a <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	689b      	ldr	r3, [r3, #8]
 800c190:	4618      	mov	r0, r3
 800c192:	f000 f841 	bl	800c218 <xEventGroupCreateStatic>
 800c196:	6178      	str	r0, [r7, #20]
 800c198:	e005      	b.n	800c1a6 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d102      	bne.n	800c1a6 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800c1a0:	f000 f871 	bl	800c286 <xEventGroupCreate>
 800c1a4:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800c1a6:	697b      	ldr	r3, [r7, #20]
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3718      	adds	r7, #24
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}

0800c1b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c1b0:	b480      	push	{r7}
 800c1b2:	b085      	sub	sp, #20
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	60f8      	str	r0, [r7, #12]
 800c1b8:	60b9      	str	r1, [r7, #8]
 800c1ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	4a07      	ldr	r2, [pc, #28]	; (800c1dc <vApplicationGetIdleTaskMemory+0x2c>)
 800c1c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	4a06      	ldr	r2, [pc, #24]	; (800c1e0 <vApplicationGetIdleTaskMemory+0x30>)
 800c1c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2280      	movs	r2, #128	; 0x80
 800c1cc:	601a      	str	r2, [r3, #0]
}
 800c1ce:	bf00      	nop
 800c1d0:	3714      	adds	r7, #20
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d8:	4770      	bx	lr
 800c1da:	bf00      	nop
 800c1dc:	200009b8 	.word	0x200009b8
 800c1e0:	20000b74 	.word	0x20000b74

0800c1e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c1e4:	b480      	push	{r7}
 800c1e6:	b085      	sub	sp, #20
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	60f8      	str	r0, [r7, #12]
 800c1ec:	60b9      	str	r1, [r7, #8]
 800c1ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	4a07      	ldr	r2, [pc, #28]	; (800c210 <vApplicationGetTimerTaskMemory+0x2c>)
 800c1f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	4a06      	ldr	r2, [pc, #24]	; (800c214 <vApplicationGetTimerTaskMemory+0x30>)
 800c1fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c202:	601a      	str	r2, [r3, #0]
}
 800c204:	bf00      	nop
 800c206:	3714      	adds	r7, #20
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr
 800c210:	20000d74 	.word	0x20000d74
 800c214:	20000f30 	.word	0x20000f30

0800c218 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b086      	sub	sp, #24
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d10a      	bne.n	800c23c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c22a:	f383 8811 	msr	BASEPRI, r3
 800c22e:	f3bf 8f6f 	isb	sy
 800c232:	f3bf 8f4f 	dsb	sy
 800c236:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c238:	bf00      	nop
 800c23a:	e7fe      	b.n	800c23a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800c23c:	2320      	movs	r3, #32
 800c23e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	2b20      	cmp	r3, #32
 800c244:	d00a      	beq.n	800c25c <xEventGroupCreateStatic+0x44>
	__asm volatile
 800c246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c24a:	f383 8811 	msr	BASEPRI, r3
 800c24e:	f3bf 8f6f 	isb	sy
 800c252:	f3bf 8f4f 	dsb	sy
 800c256:	60fb      	str	r3, [r7, #12]
}
 800c258:	bf00      	nop
 800c25a:	e7fe      	b.n	800c25a <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d00a      	beq.n	800c27c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	2200      	movs	r2, #0
 800c26a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	3304      	adds	r3, #4
 800c270:	4618      	mov	r0, r3
 800c272:	f000 fa11 	bl	800c698 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	2201      	movs	r2, #1
 800c27a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800c27c:	697b      	ldr	r3, [r7, #20]
	}
 800c27e:	4618      	mov	r0, r3
 800c280:	3718      	adds	r7, #24
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}

0800c286 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800c286:	b580      	push	{r7, lr}
 800c288:	b082      	sub	sp, #8
 800c28a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800c28c:	2020      	movs	r0, #32
 800c28e:	f000 f815 	bl	800c2bc <pvPortMalloc>
 800c292:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d00a      	beq.n	800c2b0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2200      	movs	r2, #0
 800c29e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	3304      	adds	r3, #4
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f000 f9f7 	bl	800c698 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800c2b0:	687b      	ldr	r3, [r7, #4]
	}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3708      	adds	r7, #8
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
	...

0800c2bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b08a      	sub	sp, #40	; 0x28
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c2c8:	f001 fda4 	bl	800de14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c2cc:	4b5d      	ldr	r3, [pc, #372]	; (800c444 <pvPortMalloc+0x188>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d101      	bne.n	800c2d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c2d4:	f000 f924 	bl	800c520 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c2d8:	4b5b      	ldr	r3, [pc, #364]	; (800c448 <pvPortMalloc+0x18c>)
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	4013      	ands	r3, r2
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	f040 8093 	bne.w	800c40c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d01d      	beq.n	800c328 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c2ec:	2208      	movs	r2, #8
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	4413      	add	r3, r2
 800c2f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f003 0307 	and.w	r3, r3, #7
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d014      	beq.n	800c328 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f023 0307 	bic.w	r3, r3, #7
 800c304:	3308      	adds	r3, #8
 800c306:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f003 0307 	and.w	r3, r3, #7
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d00a      	beq.n	800c328 <pvPortMalloc+0x6c>
	__asm volatile
 800c312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c316:	f383 8811 	msr	BASEPRI, r3
 800c31a:	f3bf 8f6f 	isb	sy
 800c31e:	f3bf 8f4f 	dsb	sy
 800c322:	617b      	str	r3, [r7, #20]
}
 800c324:	bf00      	nop
 800c326:	e7fe      	b.n	800c326 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d06e      	beq.n	800c40c <pvPortMalloc+0x150>
 800c32e:	4b47      	ldr	r3, [pc, #284]	; (800c44c <pvPortMalloc+0x190>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	429a      	cmp	r2, r3
 800c336:	d869      	bhi.n	800c40c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c338:	4b45      	ldr	r3, [pc, #276]	; (800c450 <pvPortMalloc+0x194>)
 800c33a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c33c:	4b44      	ldr	r3, [pc, #272]	; (800c450 <pvPortMalloc+0x194>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c342:	e004      	b.n	800c34e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c346:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c350:	685b      	ldr	r3, [r3, #4]
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	429a      	cmp	r2, r3
 800c356:	d903      	bls.n	800c360 <pvPortMalloc+0xa4>
 800c358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d1f1      	bne.n	800c344 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c360:	4b38      	ldr	r3, [pc, #224]	; (800c444 <pvPortMalloc+0x188>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c366:	429a      	cmp	r2, r3
 800c368:	d050      	beq.n	800c40c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c36a:	6a3b      	ldr	r3, [r7, #32]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	2208      	movs	r2, #8
 800c370:	4413      	add	r3, r2
 800c372:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c376:	681a      	ldr	r2, [r3, #0]
 800c378:	6a3b      	ldr	r3, [r7, #32]
 800c37a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c37e:	685a      	ldr	r2, [r3, #4]
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	1ad2      	subs	r2, r2, r3
 800c384:	2308      	movs	r3, #8
 800c386:	005b      	lsls	r3, r3, #1
 800c388:	429a      	cmp	r2, r3
 800c38a:	d91f      	bls.n	800c3cc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c38c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	4413      	add	r3, r2
 800c392:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c394:	69bb      	ldr	r3, [r7, #24]
 800c396:	f003 0307 	and.w	r3, r3, #7
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d00a      	beq.n	800c3b4 <pvPortMalloc+0xf8>
	__asm volatile
 800c39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a2:	f383 8811 	msr	BASEPRI, r3
 800c3a6:	f3bf 8f6f 	isb	sy
 800c3aa:	f3bf 8f4f 	dsb	sy
 800c3ae:	613b      	str	r3, [r7, #16]
}
 800c3b0:	bf00      	nop
 800c3b2:	e7fe      	b.n	800c3b2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b6:	685a      	ldr	r2, [r3, #4]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	1ad2      	subs	r2, r2, r3
 800c3bc:	69bb      	ldr	r3, [r7, #24]
 800c3be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c3c6:	69b8      	ldr	r0, [r7, #24]
 800c3c8:	f000 f90c 	bl	800c5e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c3cc:	4b1f      	ldr	r3, [pc, #124]	; (800c44c <pvPortMalloc+0x190>)
 800c3ce:	681a      	ldr	r2, [r3, #0]
 800c3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	1ad3      	subs	r3, r2, r3
 800c3d6:	4a1d      	ldr	r2, [pc, #116]	; (800c44c <pvPortMalloc+0x190>)
 800c3d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c3da:	4b1c      	ldr	r3, [pc, #112]	; (800c44c <pvPortMalloc+0x190>)
 800c3dc:	681a      	ldr	r2, [r3, #0]
 800c3de:	4b1d      	ldr	r3, [pc, #116]	; (800c454 <pvPortMalloc+0x198>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d203      	bcs.n	800c3ee <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c3e6:	4b19      	ldr	r3, [pc, #100]	; (800c44c <pvPortMalloc+0x190>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	4a1a      	ldr	r2, [pc, #104]	; (800c454 <pvPortMalloc+0x198>)
 800c3ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f0:	685a      	ldr	r2, [r3, #4]
 800c3f2:	4b15      	ldr	r3, [pc, #84]	; (800c448 <pvPortMalloc+0x18c>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	431a      	orrs	r2, r3
 800c3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3fe:	2200      	movs	r2, #0
 800c400:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c402:	4b15      	ldr	r3, [pc, #84]	; (800c458 <pvPortMalloc+0x19c>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	3301      	adds	r3, #1
 800c408:	4a13      	ldr	r2, [pc, #76]	; (800c458 <pvPortMalloc+0x19c>)
 800c40a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c40c:	f001 fd48 	bl	800dea0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800c410:	69fb      	ldr	r3, [r7, #28]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d101      	bne.n	800c41a <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800c416:	f7f7 f837 	bl	8003488 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c41a:	69fb      	ldr	r3, [r7, #28]
 800c41c:	f003 0307 	and.w	r3, r3, #7
 800c420:	2b00      	cmp	r3, #0
 800c422:	d00a      	beq.n	800c43a <pvPortMalloc+0x17e>
	__asm volatile
 800c424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c428:	f383 8811 	msr	BASEPRI, r3
 800c42c:	f3bf 8f6f 	isb	sy
 800c430:	f3bf 8f4f 	dsb	sy
 800c434:	60fb      	str	r3, [r7, #12]
}
 800c436:	bf00      	nop
 800c438:	e7fe      	b.n	800c438 <pvPortMalloc+0x17c>
	return pvReturn;
 800c43a:	69fb      	ldr	r3, [r7, #28]
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3728      	adds	r7, #40	; 0x28
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}
 800c444:	2000af78 	.word	0x2000af78
 800c448:	2000af8c 	.word	0x2000af8c
 800c44c:	2000af7c 	.word	0x2000af7c
 800c450:	2000af70 	.word	0x2000af70
 800c454:	2000af80 	.word	0x2000af80
 800c458:	2000af84 	.word	0x2000af84

0800c45c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b086      	sub	sp, #24
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d04d      	beq.n	800c50a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c46e:	2308      	movs	r3, #8
 800c470:	425b      	negs	r3, r3
 800c472:	697a      	ldr	r2, [r7, #20]
 800c474:	4413      	add	r3, r2
 800c476:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	685a      	ldr	r2, [r3, #4]
 800c480:	4b24      	ldr	r3, [pc, #144]	; (800c514 <vPortFree+0xb8>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	4013      	ands	r3, r2
 800c486:	2b00      	cmp	r3, #0
 800c488:	d10a      	bne.n	800c4a0 <vPortFree+0x44>
	__asm volatile
 800c48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c48e:	f383 8811 	msr	BASEPRI, r3
 800c492:	f3bf 8f6f 	isb	sy
 800c496:	f3bf 8f4f 	dsb	sy
 800c49a:	60fb      	str	r3, [r7, #12]
}
 800c49c:	bf00      	nop
 800c49e:	e7fe      	b.n	800c49e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d00a      	beq.n	800c4be <vPortFree+0x62>
	__asm volatile
 800c4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ac:	f383 8811 	msr	BASEPRI, r3
 800c4b0:	f3bf 8f6f 	isb	sy
 800c4b4:	f3bf 8f4f 	dsb	sy
 800c4b8:	60bb      	str	r3, [r7, #8]
}
 800c4ba:	bf00      	nop
 800c4bc:	e7fe      	b.n	800c4bc <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	685a      	ldr	r2, [r3, #4]
 800c4c2:	4b14      	ldr	r3, [pc, #80]	; (800c514 <vPortFree+0xb8>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	4013      	ands	r3, r2
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d01e      	beq.n	800c50a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d11a      	bne.n	800c50a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	685a      	ldr	r2, [r3, #4]
 800c4d8:	4b0e      	ldr	r3, [pc, #56]	; (800c514 <vPortFree+0xb8>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	43db      	mvns	r3, r3
 800c4de:	401a      	ands	r2, r3
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c4e4:	f001 fc96 	bl	800de14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	685a      	ldr	r2, [r3, #4]
 800c4ec:	4b0a      	ldr	r3, [pc, #40]	; (800c518 <vPortFree+0xbc>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4413      	add	r3, r2
 800c4f2:	4a09      	ldr	r2, [pc, #36]	; (800c518 <vPortFree+0xbc>)
 800c4f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c4f6:	6938      	ldr	r0, [r7, #16]
 800c4f8:	f000 f874 	bl	800c5e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c4fc:	4b07      	ldr	r3, [pc, #28]	; (800c51c <vPortFree+0xc0>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	3301      	adds	r3, #1
 800c502:	4a06      	ldr	r2, [pc, #24]	; (800c51c <vPortFree+0xc0>)
 800c504:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c506:	f001 fccb 	bl	800dea0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c50a:	bf00      	nop
 800c50c:	3718      	adds	r7, #24
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}
 800c512:	bf00      	nop
 800c514:	2000af8c 	.word	0x2000af8c
 800c518:	2000af7c 	.word	0x2000af7c
 800c51c:	2000af88 	.word	0x2000af88

0800c520 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c520:	b480      	push	{r7}
 800c522:	b085      	sub	sp, #20
 800c524:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c526:	f649 4340 	movw	r3, #40000	; 0x9c40
 800c52a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c52c:	4b27      	ldr	r3, [pc, #156]	; (800c5cc <prvHeapInit+0xac>)
 800c52e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	f003 0307 	and.w	r3, r3, #7
 800c536:	2b00      	cmp	r3, #0
 800c538:	d00c      	beq.n	800c554 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	3307      	adds	r3, #7
 800c53e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	f023 0307 	bic.w	r3, r3, #7
 800c546:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c548:	68ba      	ldr	r2, [r7, #8]
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	1ad3      	subs	r3, r2, r3
 800c54e:	4a1f      	ldr	r2, [pc, #124]	; (800c5cc <prvHeapInit+0xac>)
 800c550:	4413      	add	r3, r2
 800c552:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c558:	4a1d      	ldr	r2, [pc, #116]	; (800c5d0 <prvHeapInit+0xb0>)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c55e:	4b1c      	ldr	r3, [pc, #112]	; (800c5d0 <prvHeapInit+0xb0>)
 800c560:	2200      	movs	r2, #0
 800c562:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	68ba      	ldr	r2, [r7, #8]
 800c568:	4413      	add	r3, r2
 800c56a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c56c:	2208      	movs	r2, #8
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	1a9b      	subs	r3, r3, r2
 800c572:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	f023 0307 	bic.w	r3, r3, #7
 800c57a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	4a15      	ldr	r2, [pc, #84]	; (800c5d4 <prvHeapInit+0xb4>)
 800c580:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c582:	4b14      	ldr	r3, [pc, #80]	; (800c5d4 <prvHeapInit+0xb4>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	2200      	movs	r2, #0
 800c588:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c58a:	4b12      	ldr	r3, [pc, #72]	; (800c5d4 <prvHeapInit+0xb4>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	2200      	movs	r2, #0
 800c590:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	68fa      	ldr	r2, [r7, #12]
 800c59a:	1ad2      	subs	r2, r2, r3
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c5a0:	4b0c      	ldr	r3, [pc, #48]	; (800c5d4 <prvHeapInit+0xb4>)
 800c5a2:	681a      	ldr	r2, [r3, #0]
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	685b      	ldr	r3, [r3, #4]
 800c5ac:	4a0a      	ldr	r2, [pc, #40]	; (800c5d8 <prvHeapInit+0xb8>)
 800c5ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	685b      	ldr	r3, [r3, #4]
 800c5b4:	4a09      	ldr	r2, [pc, #36]	; (800c5dc <prvHeapInit+0xbc>)
 800c5b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c5b8:	4b09      	ldr	r3, [pc, #36]	; (800c5e0 <prvHeapInit+0xc0>)
 800c5ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c5be:	601a      	str	r2, [r3, #0]
}
 800c5c0:	bf00      	nop
 800c5c2:	3714      	adds	r7, #20
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr
 800c5cc:	20001330 	.word	0x20001330
 800c5d0:	2000af70 	.word	0x2000af70
 800c5d4:	2000af78 	.word	0x2000af78
 800c5d8:	2000af80 	.word	0x2000af80
 800c5dc:	2000af7c 	.word	0x2000af7c
 800c5e0:	2000af8c 	.word	0x2000af8c

0800c5e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b085      	sub	sp, #20
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c5ec:	4b28      	ldr	r3, [pc, #160]	; (800c690 <prvInsertBlockIntoFreeList+0xac>)
 800c5ee:	60fb      	str	r3, [r7, #12]
 800c5f0:	e002      	b.n	800c5f8 <prvInsertBlockIntoFreeList+0x14>
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	60fb      	str	r3, [r7, #12]
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	687a      	ldr	r2, [r7, #4]
 800c5fe:	429a      	cmp	r2, r3
 800c600:	d8f7      	bhi.n	800c5f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	685b      	ldr	r3, [r3, #4]
 800c60a:	68ba      	ldr	r2, [r7, #8]
 800c60c:	4413      	add	r3, r2
 800c60e:	687a      	ldr	r2, [r7, #4]
 800c610:	429a      	cmp	r2, r3
 800c612:	d108      	bne.n	800c626 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	685a      	ldr	r2, [r3, #4]
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	441a      	add	r2, r3
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	685b      	ldr	r3, [r3, #4]
 800c62e:	68ba      	ldr	r2, [r7, #8]
 800c630:	441a      	add	r2, r3
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	429a      	cmp	r2, r3
 800c638:	d118      	bne.n	800c66c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681a      	ldr	r2, [r3, #0]
 800c63e:	4b15      	ldr	r3, [pc, #84]	; (800c694 <prvInsertBlockIntoFreeList+0xb0>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	429a      	cmp	r2, r3
 800c644:	d00d      	beq.n	800c662 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	685a      	ldr	r2, [r3, #4]
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	441a      	add	r2, r3
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	681a      	ldr	r2, [r3, #0]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	601a      	str	r2, [r3, #0]
 800c660:	e008      	b.n	800c674 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c662:	4b0c      	ldr	r3, [pc, #48]	; (800c694 <prvInsertBlockIntoFreeList+0xb0>)
 800c664:	681a      	ldr	r2, [r3, #0]
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	601a      	str	r2, [r3, #0]
 800c66a:	e003      	b.n	800c674 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	681a      	ldr	r2, [r3, #0]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c674:	68fa      	ldr	r2, [r7, #12]
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	429a      	cmp	r2, r3
 800c67a:	d002      	beq.n	800c682 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c682:	bf00      	nop
 800c684:	3714      	adds	r7, #20
 800c686:	46bd      	mov	sp, r7
 800c688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68c:	4770      	bx	lr
 800c68e:	bf00      	nop
 800c690:	2000af70 	.word	0x2000af70
 800c694:	2000af78 	.word	0x2000af78

0800c698 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c698:	b480      	push	{r7}
 800c69a:	b083      	sub	sp, #12
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f103 0208 	add.w	r2, r3, #8
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f04f 32ff 	mov.w	r2, #4294967295
 800c6b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f103 0208 	add.w	r2, r3, #8
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f103 0208 	add.w	r2, r3, #8
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c6cc:	bf00      	nop
 800c6ce:	370c      	adds	r7, #12
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d6:	4770      	bx	lr

0800c6d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c6d8:	b480      	push	{r7}
 800c6da:	b083      	sub	sp, #12
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c6e6:	bf00      	nop
 800c6e8:	370c      	adds	r7, #12
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr

0800c6f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c6f2:	b480      	push	{r7}
 800c6f4:	b085      	sub	sp, #20
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	6078      	str	r0, [r7, #4]
 800c6fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	685b      	ldr	r3, [r3, #4]
 800c700:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	68fa      	ldr	r2, [r7, #12]
 800c706:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	689a      	ldr	r2, [r3, #8]
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	689b      	ldr	r3, [r3, #8]
 800c714:	683a      	ldr	r2, [r7, #0]
 800c716:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	683a      	ldr	r2, [r7, #0]
 800c71c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	687a      	ldr	r2, [r7, #4]
 800c722:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	1c5a      	adds	r2, r3, #1
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	601a      	str	r2, [r3, #0]
}
 800c72e:	bf00      	nop
 800c730:	3714      	adds	r7, #20
 800c732:	46bd      	mov	sp, r7
 800c734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c738:	4770      	bx	lr

0800c73a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c73a:	b480      	push	{r7}
 800c73c:	b085      	sub	sp, #20
 800c73e:	af00      	add	r7, sp, #0
 800c740:	6078      	str	r0, [r7, #4]
 800c742:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c750:	d103      	bne.n	800c75a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	691b      	ldr	r3, [r3, #16]
 800c756:	60fb      	str	r3, [r7, #12]
 800c758:	e00c      	b.n	800c774 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	3308      	adds	r3, #8
 800c75e:	60fb      	str	r3, [r7, #12]
 800c760:	e002      	b.n	800c768 <vListInsert+0x2e>
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	685b      	ldr	r3, [r3, #4]
 800c766:	60fb      	str	r3, [r7, #12]
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	685b      	ldr	r3, [r3, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	68ba      	ldr	r2, [r7, #8]
 800c770:	429a      	cmp	r2, r3
 800c772:	d2f6      	bcs.n	800c762 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	685a      	ldr	r2, [r3, #4]
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	685b      	ldr	r3, [r3, #4]
 800c780:	683a      	ldr	r2, [r7, #0]
 800c782:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	68fa      	ldr	r2, [r7, #12]
 800c788:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	683a      	ldr	r2, [r7, #0]
 800c78e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	1c5a      	adds	r2, r3, #1
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	601a      	str	r2, [r3, #0]
}
 800c7a0:	bf00      	nop
 800c7a2:	3714      	adds	r7, #20
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7aa:	4770      	bx	lr

0800c7ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	b085      	sub	sp, #20
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	691b      	ldr	r3, [r3, #16]
 800c7b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	685b      	ldr	r3, [r3, #4]
 800c7be:	687a      	ldr	r2, [r7, #4]
 800c7c0:	6892      	ldr	r2, [r2, #8]
 800c7c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	689b      	ldr	r3, [r3, #8]
 800c7c8:	687a      	ldr	r2, [r7, #4]
 800c7ca:	6852      	ldr	r2, [r2, #4]
 800c7cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	685b      	ldr	r3, [r3, #4]
 800c7d2:	687a      	ldr	r2, [r7, #4]
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d103      	bne.n	800c7e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	689a      	ldr	r2, [r3, #8]
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	1e5a      	subs	r2, r3, #1
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	681b      	ldr	r3, [r3, #0]
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3714      	adds	r7, #20
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr

0800c800 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c800:	b480      	push	{r7}
 800c802:	b085      	sub	sp, #20
 800c804:	af00      	add	r7, sp, #0
 800c806:	60f8      	str	r0, [r7, #12]
 800c808:	60b9      	str	r1, [r7, #8]
 800c80a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	3b04      	subs	r3, #4
 800c810:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c818:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	3b04      	subs	r3, #4
 800c81e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	f023 0201 	bic.w	r2, r3, #1
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	3b04      	subs	r3, #4
 800c82e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c830:	4a0c      	ldr	r2, [pc, #48]	; (800c864 <pxPortInitialiseStack+0x64>)
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	3b14      	subs	r3, #20
 800c83a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c83c:	687a      	ldr	r2, [r7, #4]
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	3b04      	subs	r3, #4
 800c846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	f06f 0202 	mvn.w	r2, #2
 800c84e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	3b20      	subs	r3, #32
 800c854:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c856:	68fb      	ldr	r3, [r7, #12]
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3714      	adds	r7, #20
 800c85c:	46bd      	mov	sp, r7
 800c85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c862:	4770      	bx	lr
 800c864:	0800c869 	.word	0x0800c869

0800c868 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c868:	b480      	push	{r7}
 800c86a:	b085      	sub	sp, #20
 800c86c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c86e:	2300      	movs	r3, #0
 800c870:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c872:	4b12      	ldr	r3, [pc, #72]	; (800c8bc <prvTaskExitError+0x54>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c87a:	d00a      	beq.n	800c892 <prvTaskExitError+0x2a>
	__asm volatile
 800c87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c880:	f383 8811 	msr	BASEPRI, r3
 800c884:	f3bf 8f6f 	isb	sy
 800c888:	f3bf 8f4f 	dsb	sy
 800c88c:	60fb      	str	r3, [r7, #12]
}
 800c88e:	bf00      	nop
 800c890:	e7fe      	b.n	800c890 <prvTaskExitError+0x28>
	__asm volatile
 800c892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c896:	f383 8811 	msr	BASEPRI, r3
 800c89a:	f3bf 8f6f 	isb	sy
 800c89e:	f3bf 8f4f 	dsb	sy
 800c8a2:	60bb      	str	r3, [r7, #8]
}
 800c8a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c8a6:	bf00      	nop
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d0fc      	beq.n	800c8a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c8ae:	bf00      	nop
 800c8b0:	bf00      	nop
 800c8b2:	3714      	adds	r7, #20
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ba:	4770      	bx	lr
 800c8bc:	2000000c 	.word	0x2000000c

0800c8c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c8c0:	4b07      	ldr	r3, [pc, #28]	; (800c8e0 <pxCurrentTCBConst2>)
 800c8c2:	6819      	ldr	r1, [r3, #0]
 800c8c4:	6808      	ldr	r0, [r1, #0]
 800c8c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8ca:	f380 8809 	msr	PSP, r0
 800c8ce:	f3bf 8f6f 	isb	sy
 800c8d2:	f04f 0000 	mov.w	r0, #0
 800c8d6:	f380 8811 	msr	BASEPRI, r0
 800c8da:	4770      	bx	lr
 800c8dc:	f3af 8000 	nop.w

0800c8e0 <pxCurrentTCBConst2>:
 800c8e0:	2000afe4 	.word	0x2000afe4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c8e4:	bf00      	nop
 800c8e6:	bf00      	nop

0800c8e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c8e8:	4808      	ldr	r0, [pc, #32]	; (800c90c <prvPortStartFirstTask+0x24>)
 800c8ea:	6800      	ldr	r0, [r0, #0]
 800c8ec:	6800      	ldr	r0, [r0, #0]
 800c8ee:	f380 8808 	msr	MSP, r0
 800c8f2:	f04f 0000 	mov.w	r0, #0
 800c8f6:	f380 8814 	msr	CONTROL, r0
 800c8fa:	b662      	cpsie	i
 800c8fc:	b661      	cpsie	f
 800c8fe:	f3bf 8f4f 	dsb	sy
 800c902:	f3bf 8f6f 	isb	sy
 800c906:	df00      	svc	0
 800c908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c90a:	bf00      	nop
 800c90c:	e000ed08 	.word	0xe000ed08

0800c910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b086      	sub	sp, #24
 800c914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c916:	4b46      	ldr	r3, [pc, #280]	; (800ca30 <xPortStartScheduler+0x120>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	4a46      	ldr	r2, [pc, #280]	; (800ca34 <xPortStartScheduler+0x124>)
 800c91c:	4293      	cmp	r3, r2
 800c91e:	d10a      	bne.n	800c936 <xPortStartScheduler+0x26>
	__asm volatile
 800c920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c924:	f383 8811 	msr	BASEPRI, r3
 800c928:	f3bf 8f6f 	isb	sy
 800c92c:	f3bf 8f4f 	dsb	sy
 800c930:	613b      	str	r3, [r7, #16]
}
 800c932:	bf00      	nop
 800c934:	e7fe      	b.n	800c934 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c936:	4b3e      	ldr	r3, [pc, #248]	; (800ca30 <xPortStartScheduler+0x120>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	4a3f      	ldr	r2, [pc, #252]	; (800ca38 <xPortStartScheduler+0x128>)
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d10a      	bne.n	800c956 <xPortStartScheduler+0x46>
	__asm volatile
 800c940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c944:	f383 8811 	msr	BASEPRI, r3
 800c948:	f3bf 8f6f 	isb	sy
 800c94c:	f3bf 8f4f 	dsb	sy
 800c950:	60fb      	str	r3, [r7, #12]
}
 800c952:	bf00      	nop
 800c954:	e7fe      	b.n	800c954 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c956:	4b39      	ldr	r3, [pc, #228]	; (800ca3c <xPortStartScheduler+0x12c>)
 800c958:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	781b      	ldrb	r3, [r3, #0]
 800c95e:	b2db      	uxtb	r3, r3
 800c960:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	22ff      	movs	r2, #255	; 0xff
 800c966:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	781b      	ldrb	r3, [r3, #0]
 800c96c:	b2db      	uxtb	r3, r3
 800c96e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c970:	78fb      	ldrb	r3, [r7, #3]
 800c972:	b2db      	uxtb	r3, r3
 800c974:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c978:	b2da      	uxtb	r2, r3
 800c97a:	4b31      	ldr	r3, [pc, #196]	; (800ca40 <xPortStartScheduler+0x130>)
 800c97c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c97e:	4b31      	ldr	r3, [pc, #196]	; (800ca44 <xPortStartScheduler+0x134>)
 800c980:	2207      	movs	r2, #7
 800c982:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c984:	e009      	b.n	800c99a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c986:	4b2f      	ldr	r3, [pc, #188]	; (800ca44 <xPortStartScheduler+0x134>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	3b01      	subs	r3, #1
 800c98c:	4a2d      	ldr	r2, [pc, #180]	; (800ca44 <xPortStartScheduler+0x134>)
 800c98e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c990:	78fb      	ldrb	r3, [r7, #3]
 800c992:	b2db      	uxtb	r3, r3
 800c994:	005b      	lsls	r3, r3, #1
 800c996:	b2db      	uxtb	r3, r3
 800c998:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c99a:	78fb      	ldrb	r3, [r7, #3]
 800c99c:	b2db      	uxtb	r3, r3
 800c99e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9a2:	2b80      	cmp	r3, #128	; 0x80
 800c9a4:	d0ef      	beq.n	800c986 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c9a6:	4b27      	ldr	r3, [pc, #156]	; (800ca44 <xPortStartScheduler+0x134>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f1c3 0307 	rsb	r3, r3, #7
 800c9ae:	2b04      	cmp	r3, #4
 800c9b0:	d00a      	beq.n	800c9c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b6:	f383 8811 	msr	BASEPRI, r3
 800c9ba:	f3bf 8f6f 	isb	sy
 800c9be:	f3bf 8f4f 	dsb	sy
 800c9c2:	60bb      	str	r3, [r7, #8]
}
 800c9c4:	bf00      	nop
 800c9c6:	e7fe      	b.n	800c9c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c9c8:	4b1e      	ldr	r3, [pc, #120]	; (800ca44 <xPortStartScheduler+0x134>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	021b      	lsls	r3, r3, #8
 800c9ce:	4a1d      	ldr	r2, [pc, #116]	; (800ca44 <xPortStartScheduler+0x134>)
 800c9d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c9d2:	4b1c      	ldr	r3, [pc, #112]	; (800ca44 <xPortStartScheduler+0x134>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c9da:	4a1a      	ldr	r2, [pc, #104]	; (800ca44 <xPortStartScheduler+0x134>)
 800c9dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	b2da      	uxtb	r2, r3
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c9e6:	4b18      	ldr	r3, [pc, #96]	; (800ca48 <xPortStartScheduler+0x138>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4a17      	ldr	r2, [pc, #92]	; (800ca48 <xPortStartScheduler+0x138>)
 800c9ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c9f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c9f2:	4b15      	ldr	r3, [pc, #84]	; (800ca48 <xPortStartScheduler+0x138>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	4a14      	ldr	r2, [pc, #80]	; (800ca48 <xPortStartScheduler+0x138>)
 800c9f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c9fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c9fe:	f000 f9a9 	bl	800cd54 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ca02:	4b12      	ldr	r3, [pc, #72]	; (800ca4c <xPortStartScheduler+0x13c>)
 800ca04:	2200      	movs	r2, #0
 800ca06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ca08:	f000 f9e0 	bl	800cdcc <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ca0c:	4b10      	ldr	r3, [pc, #64]	; (800ca50 <xPortStartScheduler+0x140>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	4a0f      	ldr	r2, [pc, #60]	; (800ca50 <xPortStartScheduler+0x140>)
 800ca12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ca16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ca18:	f7ff ff66 	bl	800c8e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ca1c:	f001 fbd8 	bl	800e1d0 <vTaskSwitchContext>
	prvTaskExitError();
 800ca20:	f7ff ff22 	bl	800c868 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ca24:	2300      	movs	r3, #0
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	3718      	adds	r7, #24
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
 800ca2e:	bf00      	nop
 800ca30:	e000ed00 	.word	0xe000ed00
 800ca34:	410fc271 	.word	0x410fc271
 800ca38:	410fc270 	.word	0x410fc270
 800ca3c:	e000e400 	.word	0xe000e400
 800ca40:	2000af9c 	.word	0x2000af9c
 800ca44:	2000afa0 	.word	0x2000afa0
 800ca48:	e000ed20 	.word	0xe000ed20
 800ca4c:	2000000c 	.word	0x2000000c
 800ca50:	e000ef34 	.word	0xe000ef34

0800ca54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ca54:	b480      	push	{r7}
 800ca56:	b083      	sub	sp, #12
 800ca58:	af00      	add	r7, sp, #0
	__asm volatile
 800ca5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca5e:	f383 8811 	msr	BASEPRI, r3
 800ca62:	f3bf 8f6f 	isb	sy
 800ca66:	f3bf 8f4f 	dsb	sy
 800ca6a:	607b      	str	r3, [r7, #4]
}
 800ca6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ca6e:	4b0f      	ldr	r3, [pc, #60]	; (800caac <vPortEnterCritical+0x58>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	3301      	adds	r3, #1
 800ca74:	4a0d      	ldr	r2, [pc, #52]	; (800caac <vPortEnterCritical+0x58>)
 800ca76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ca78:	4b0c      	ldr	r3, [pc, #48]	; (800caac <vPortEnterCritical+0x58>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	2b01      	cmp	r3, #1
 800ca7e:	d10f      	bne.n	800caa0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ca80:	4b0b      	ldr	r3, [pc, #44]	; (800cab0 <vPortEnterCritical+0x5c>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	b2db      	uxtb	r3, r3
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d00a      	beq.n	800caa0 <vPortEnterCritical+0x4c>
	__asm volatile
 800ca8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca8e:	f383 8811 	msr	BASEPRI, r3
 800ca92:	f3bf 8f6f 	isb	sy
 800ca96:	f3bf 8f4f 	dsb	sy
 800ca9a:	603b      	str	r3, [r7, #0]
}
 800ca9c:	bf00      	nop
 800ca9e:	e7fe      	b.n	800ca9e <vPortEnterCritical+0x4a>
	}
}
 800caa0:	bf00      	nop
 800caa2:	370c      	adds	r7, #12
 800caa4:	46bd      	mov	sp, r7
 800caa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caaa:	4770      	bx	lr
 800caac:	2000000c 	.word	0x2000000c
 800cab0:	e000ed04 	.word	0xe000ed04

0800cab4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cab4:	b480      	push	{r7}
 800cab6:	b083      	sub	sp, #12
 800cab8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800caba:	4b12      	ldr	r3, [pc, #72]	; (800cb04 <vPortExitCritical+0x50>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d10a      	bne.n	800cad8 <vPortExitCritical+0x24>
	__asm volatile
 800cac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac6:	f383 8811 	msr	BASEPRI, r3
 800caca:	f3bf 8f6f 	isb	sy
 800cace:	f3bf 8f4f 	dsb	sy
 800cad2:	607b      	str	r3, [r7, #4]
}
 800cad4:	bf00      	nop
 800cad6:	e7fe      	b.n	800cad6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cad8:	4b0a      	ldr	r3, [pc, #40]	; (800cb04 <vPortExitCritical+0x50>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	3b01      	subs	r3, #1
 800cade:	4a09      	ldr	r2, [pc, #36]	; (800cb04 <vPortExitCritical+0x50>)
 800cae0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cae2:	4b08      	ldr	r3, [pc, #32]	; (800cb04 <vPortExitCritical+0x50>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d105      	bne.n	800caf6 <vPortExitCritical+0x42>
 800caea:	2300      	movs	r3, #0
 800caec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800caf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800caf6:	bf00      	nop
 800caf8:	370c      	adds	r7, #12
 800cafa:	46bd      	mov	sp, r7
 800cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb00:	4770      	bx	lr
 800cb02:	bf00      	nop
 800cb04:	2000000c 	.word	0x2000000c
	...

0800cb10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cb10:	f3ef 8009 	mrs	r0, PSP
 800cb14:	f3bf 8f6f 	isb	sy
 800cb18:	4b15      	ldr	r3, [pc, #84]	; (800cb70 <pxCurrentTCBConst>)
 800cb1a:	681a      	ldr	r2, [r3, #0]
 800cb1c:	f01e 0f10 	tst.w	lr, #16
 800cb20:	bf08      	it	eq
 800cb22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cb26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb2a:	6010      	str	r0, [r2, #0]
 800cb2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cb30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cb34:	f380 8811 	msr	BASEPRI, r0
 800cb38:	f3bf 8f4f 	dsb	sy
 800cb3c:	f3bf 8f6f 	isb	sy
 800cb40:	f001 fb46 	bl	800e1d0 <vTaskSwitchContext>
 800cb44:	f04f 0000 	mov.w	r0, #0
 800cb48:	f380 8811 	msr	BASEPRI, r0
 800cb4c:	bc09      	pop	{r0, r3}
 800cb4e:	6819      	ldr	r1, [r3, #0]
 800cb50:	6808      	ldr	r0, [r1, #0]
 800cb52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb56:	f01e 0f10 	tst.w	lr, #16
 800cb5a:	bf08      	it	eq
 800cb5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cb60:	f380 8809 	msr	PSP, r0
 800cb64:	f3bf 8f6f 	isb	sy
 800cb68:	4770      	bx	lr
 800cb6a:	bf00      	nop
 800cb6c:	f3af 8000 	nop.w

0800cb70 <pxCurrentTCBConst>:
 800cb70:	2000afe4 	.word	0x2000afe4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cb74:	bf00      	nop
 800cb76:	bf00      	nop

0800cb78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
	__asm volatile
 800cb7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb82:	f383 8811 	msr	BASEPRI, r3
 800cb86:	f3bf 8f6f 	isb	sy
 800cb8a:	f3bf 8f4f 	dsb	sy
 800cb8e:	607b      	str	r3, [r7, #4]
}
 800cb90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cb92:	f001 fa5b 	bl	800e04c <xTaskIncrementTick>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d003      	beq.n	800cba4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cb9c:	4b06      	ldr	r3, [pc, #24]	; (800cbb8 <xPortSysTickHandler+0x40>)
 800cb9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cba2:	601a      	str	r2, [r3, #0]
 800cba4:	2300      	movs	r3, #0
 800cba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	f383 8811 	msr	BASEPRI, r3
}
 800cbae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cbb0:	bf00      	nop
 800cbb2:	3708      	adds	r7, #8
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	e000ed04 	.word	0xe000ed04

0800cbbc <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b088      	sub	sp, #32
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800cbc4:	4b5d      	ldr	r3, [pc, #372]	; (800cd3c <vPortSuppressTicksAndSleep+0x180>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	687a      	ldr	r2, [r7, #4]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d902      	bls.n	800cbd4 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800cbce:	4b5b      	ldr	r3, [pc, #364]	; (800cd3c <vPortSuppressTicksAndSleep+0x180>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800cbd4:	4b5a      	ldr	r3, [pc, #360]	; (800cd40 <vPortSuppressTicksAndSleep+0x184>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4a59      	ldr	r2, [pc, #356]	; (800cd40 <vPortSuppressTicksAndSleep+0x184>)
 800cbda:	f023 0301 	bic.w	r3, r3, #1
 800cbde:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800cbe0:	4b58      	ldr	r3, [pc, #352]	; (800cd44 <vPortSuppressTicksAndSleep+0x188>)
 800cbe2:	681a      	ldr	r2, [r3, #0]
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	3b01      	subs	r3, #1
 800cbe8:	4957      	ldr	r1, [pc, #348]	; (800cd48 <vPortSuppressTicksAndSleep+0x18c>)
 800cbea:	6809      	ldr	r1, [r1, #0]
 800cbec:	fb01 f303 	mul.w	r3, r1, r3
 800cbf0:	4413      	add	r3, r2
 800cbf2:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800cbf4:	4b55      	ldr	r3, [pc, #340]	; (800cd4c <vPortSuppressTicksAndSleep+0x190>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	69fa      	ldr	r2, [r7, #28]
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	d904      	bls.n	800cc08 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800cbfe:	4b53      	ldr	r3, [pc, #332]	; (800cd4c <vPortSuppressTicksAndSleep+0x190>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	69fa      	ldr	r2, [r7, #28]
 800cc04:	1ad3      	subs	r3, r2, r3
 800cc06:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800cc08:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800cc0a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800cc0e:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800cc12:	f001 fd21 	bl	800e658 <eTaskConfirmSleepModeStatus>
 800cc16:	4603      	mov	r3, r0
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d110      	bne.n	800cc3e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800cc1c:	4b49      	ldr	r3, [pc, #292]	; (800cd44 <vPortSuppressTicksAndSleep+0x188>)
 800cc1e:	4a4c      	ldr	r2, [pc, #304]	; (800cd50 <vPortSuppressTicksAndSleep+0x194>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800cc24:	4b46      	ldr	r3, [pc, #280]	; (800cd40 <vPortSuppressTicksAndSleep+0x184>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4a45      	ldr	r2, [pc, #276]	; (800cd40 <vPortSuppressTicksAndSleep+0x184>)
 800cc2a:	f043 0301 	orr.w	r3, r3, #1
 800cc2e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800cc30:	4b45      	ldr	r3, [pc, #276]	; (800cd48 <vPortSuppressTicksAndSleep+0x18c>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4a46      	ldr	r2, [pc, #280]	; (800cd50 <vPortSuppressTicksAndSleep+0x194>)
 800cc36:	3b01      	subs	r3, #1
 800cc38:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800cc3a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800cc3c:	e079      	b.n	800cd32 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800cc3e:	4a44      	ldr	r2, [pc, #272]	; (800cd50 <vPortSuppressTicksAndSleep+0x194>)
 800cc40:	69fb      	ldr	r3, [r7, #28]
 800cc42:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cc44:	4b3f      	ldr	r3, [pc, #252]	; (800cd44 <vPortSuppressTicksAndSleep+0x188>)
 800cc46:	2200      	movs	r2, #0
 800cc48:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800cc4a:	4b3d      	ldr	r3, [pc, #244]	; (800cd40 <vPortSuppressTicksAndSleep+0x184>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	4a3c      	ldr	r2, [pc, #240]	; (800cd40 <vPortSuppressTicksAndSleep+0x184>)
 800cc50:	f043 0301 	orr.w	r3, r3, #1
 800cc54:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	613b      	str	r3, [r7, #16]
 800cc5e:	6938      	ldr	r0, [r7, #16]
 800cc60:	f7f6 fc20 	bl	80034a4 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800cc64:	693b      	ldr	r3, [r7, #16]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d004      	beq.n	800cc74 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800cc6a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800cc6e:	bf30      	wfi
				__asm volatile( "isb" );
 800cc70:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f7f6 fc1f 	bl	80034b8 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800cc7a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800cc7c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800cc80:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800cc84:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800cc86:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800cc8a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800cc8e:	4b2c      	ldr	r3, [pc, #176]	; (800cd40 <vPortSuppressTicksAndSleep+0x184>)
 800cc90:	2206      	movs	r2, #6
 800cc92:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800cc94:	4b2a      	ldr	r3, [pc, #168]	; (800cd40 <vPortSuppressTicksAndSleep+0x184>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d01d      	beq.n	800ccdc <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800cca0:	4b29      	ldr	r3, [pc, #164]	; (800cd48 <vPortSuppressTicksAndSleep+0x18c>)
 800cca2:	681a      	ldr	r2, [r3, #0]
 800cca4:	4b27      	ldr	r3, [pc, #156]	; (800cd44 <vPortSuppressTicksAndSleep+0x188>)
 800cca6:	6819      	ldr	r1, [r3, #0]
 800cca8:	69fb      	ldr	r3, [r7, #28]
 800ccaa:	1acb      	subs	r3, r1, r3
 800ccac:	4413      	add	r3, r2
 800ccae:	3b01      	subs	r3, #1
 800ccb0:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800ccb2:	4b26      	ldr	r3, [pc, #152]	; (800cd4c <vPortSuppressTicksAndSleep+0x190>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	697a      	ldr	r2, [r7, #20]
 800ccb8:	429a      	cmp	r2, r3
 800ccba:	d304      	bcc.n	800ccc6 <vPortSuppressTicksAndSleep+0x10a>
 800ccbc:	4b22      	ldr	r3, [pc, #136]	; (800cd48 <vPortSuppressTicksAndSleep+0x18c>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	697a      	ldr	r2, [r7, #20]
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d903      	bls.n	800ccce <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800ccc6:	4b20      	ldr	r3, [pc, #128]	; (800cd48 <vPortSuppressTicksAndSleep+0x18c>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	3b01      	subs	r3, #1
 800cccc:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800ccce:	4a20      	ldr	r2, [pc, #128]	; (800cd50 <vPortSuppressTicksAndSleep+0x194>)
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	3b01      	subs	r3, #1
 800ccd8:	61bb      	str	r3, [r7, #24]
 800ccda:	e018      	b.n	800cd0e <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800ccdc:	4b1a      	ldr	r3, [pc, #104]	; (800cd48 <vPortSuppressTicksAndSleep+0x18c>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	687a      	ldr	r2, [r7, #4]
 800cce2:	fb03 f202 	mul.w	r2, r3, r2
 800cce6:	4b17      	ldr	r3, [pc, #92]	; (800cd44 <vPortSuppressTicksAndSleep+0x188>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	1ad3      	subs	r3, r2, r3
 800ccec:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800ccee:	4b16      	ldr	r3, [pc, #88]	; (800cd48 <vPortSuppressTicksAndSleep+0x18c>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	68fa      	ldr	r2, [r7, #12]
 800ccf4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccf8:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800ccfa:	69bb      	ldr	r3, [r7, #24]
 800ccfc:	3301      	adds	r3, #1
 800ccfe:	4a12      	ldr	r2, [pc, #72]	; (800cd48 <vPortSuppressTicksAndSleep+0x18c>)
 800cd00:	6812      	ldr	r2, [r2, #0]
 800cd02:	fb03 f202 	mul.w	r2, r3, r2
 800cd06:	4912      	ldr	r1, [pc, #72]	; (800cd50 <vPortSuppressTicksAndSleep+0x194>)
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	1ad3      	subs	r3, r2, r3
 800cd0c:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cd0e:	4b0d      	ldr	r3, [pc, #52]	; (800cd44 <vPortSuppressTicksAndSleep+0x188>)
 800cd10:	2200      	movs	r2, #0
 800cd12:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800cd14:	4b0a      	ldr	r3, [pc, #40]	; (800cd40 <vPortSuppressTicksAndSleep+0x184>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	4a09      	ldr	r2, [pc, #36]	; (800cd40 <vPortSuppressTicksAndSleep+0x184>)
 800cd1a:	f043 0301 	orr.w	r3, r3, #1
 800cd1e:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800cd20:	69b8      	ldr	r0, [r7, #24]
 800cd22:	f001 f96b 	bl	800dffc <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800cd26:	4b08      	ldr	r3, [pc, #32]	; (800cd48 <vPortSuppressTicksAndSleep+0x18c>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	4a09      	ldr	r2, [pc, #36]	; (800cd50 <vPortSuppressTicksAndSleep+0x194>)
 800cd2c:	3b01      	subs	r3, #1
 800cd2e:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800cd30:	b662      	cpsie	i
	}
 800cd32:	bf00      	nop
 800cd34:	3720      	adds	r7, #32
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}
 800cd3a:	bf00      	nop
 800cd3c:	2000af94 	.word	0x2000af94
 800cd40:	e000e010 	.word	0xe000e010
 800cd44:	e000e018 	.word	0xe000e018
 800cd48:	2000af90 	.word	0x2000af90
 800cd4c:	2000af98 	.word	0x2000af98
 800cd50:	e000e014 	.word	0xe000e014

0800cd54 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cd54:	b480      	push	{r7}
 800cd56:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800cd58:	4b14      	ldr	r3, [pc, #80]	; (800cdac <vPortSetupTimerInterrupt+0x58>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	4a14      	ldr	r2, [pc, #80]	; (800cdb0 <vPortSetupTimerInterrupt+0x5c>)
 800cd5e:	fba2 2303 	umull	r2, r3, r2, r3
 800cd62:	099b      	lsrs	r3, r3, #6
 800cd64:	4a13      	ldr	r2, [pc, #76]	; (800cdb4 <vPortSetupTimerInterrupt+0x60>)
 800cd66:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800cd68:	4b12      	ldr	r3, [pc, #72]	; (800cdb4 <vPortSetupTimerInterrupt+0x60>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800cd70:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd74:	4a10      	ldr	r2, [pc, #64]	; (800cdb8 <vPortSetupTimerInterrupt+0x64>)
 800cd76:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800cd78:	4b10      	ldr	r3, [pc, #64]	; (800cdbc <vPortSetupTimerInterrupt+0x68>)
 800cd7a:	222d      	movs	r2, #45	; 0x2d
 800cd7c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cd7e:	4b10      	ldr	r3, [pc, #64]	; (800cdc0 <vPortSetupTimerInterrupt+0x6c>)
 800cd80:	2200      	movs	r2, #0
 800cd82:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cd84:	4b0f      	ldr	r3, [pc, #60]	; (800cdc4 <vPortSetupTimerInterrupt+0x70>)
 800cd86:	2200      	movs	r2, #0
 800cd88:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cd8a:	4b08      	ldr	r3, [pc, #32]	; (800cdac <vPortSetupTimerInterrupt+0x58>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	4a08      	ldr	r2, [pc, #32]	; (800cdb0 <vPortSetupTimerInterrupt+0x5c>)
 800cd90:	fba2 2303 	umull	r2, r3, r2, r3
 800cd94:	099b      	lsrs	r3, r3, #6
 800cd96:	4a0c      	ldr	r2, [pc, #48]	; (800cdc8 <vPortSetupTimerInterrupt+0x74>)
 800cd98:	3b01      	subs	r3, #1
 800cd9a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cd9c:	4b08      	ldr	r3, [pc, #32]	; (800cdc0 <vPortSetupTimerInterrupt+0x6c>)
 800cd9e:	2207      	movs	r2, #7
 800cda0:	601a      	str	r2, [r3, #0]
}
 800cda2:	bf00      	nop
 800cda4:	46bd      	mov	sp, r7
 800cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdaa:	4770      	bx	lr
 800cdac:	20000000 	.word	0x20000000
 800cdb0:	10624dd3 	.word	0x10624dd3
 800cdb4:	2000af90 	.word	0x2000af90
 800cdb8:	2000af94 	.word	0x2000af94
 800cdbc:	2000af98 	.word	0x2000af98
 800cdc0:	e000e010 	.word	0xe000e010
 800cdc4:	e000e018 	.word	0xe000e018
 800cdc8:	e000e014 	.word	0xe000e014

0800cdcc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cdcc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cddc <vPortEnableVFP+0x10>
 800cdd0:	6801      	ldr	r1, [r0, #0]
 800cdd2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cdd6:	6001      	str	r1, [r0, #0]
 800cdd8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cdda:	bf00      	nop
 800cddc:	e000ed88 	.word	0xe000ed88

0800cde0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cde0:	b480      	push	{r7}
 800cde2:	b085      	sub	sp, #20
 800cde4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cde6:	f3ef 8305 	mrs	r3, IPSR
 800cdea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	2b0f      	cmp	r3, #15
 800cdf0:	d914      	bls.n	800ce1c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cdf2:	4a17      	ldr	r2, [pc, #92]	; (800ce50 <vPortValidateInterruptPriority+0x70>)
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	4413      	add	r3, r2
 800cdf8:	781b      	ldrb	r3, [r3, #0]
 800cdfa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cdfc:	4b15      	ldr	r3, [pc, #84]	; (800ce54 <vPortValidateInterruptPriority+0x74>)
 800cdfe:	781b      	ldrb	r3, [r3, #0]
 800ce00:	7afa      	ldrb	r2, [r7, #11]
 800ce02:	429a      	cmp	r2, r3
 800ce04:	d20a      	bcs.n	800ce1c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ce06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce0a:	f383 8811 	msr	BASEPRI, r3
 800ce0e:	f3bf 8f6f 	isb	sy
 800ce12:	f3bf 8f4f 	dsb	sy
 800ce16:	607b      	str	r3, [r7, #4]
}
 800ce18:	bf00      	nop
 800ce1a:	e7fe      	b.n	800ce1a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ce1c:	4b0e      	ldr	r3, [pc, #56]	; (800ce58 <vPortValidateInterruptPriority+0x78>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ce24:	4b0d      	ldr	r3, [pc, #52]	; (800ce5c <vPortValidateInterruptPriority+0x7c>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d90a      	bls.n	800ce42 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ce2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce30:	f383 8811 	msr	BASEPRI, r3
 800ce34:	f3bf 8f6f 	isb	sy
 800ce38:	f3bf 8f4f 	dsb	sy
 800ce3c:	603b      	str	r3, [r7, #0]
}
 800ce3e:	bf00      	nop
 800ce40:	e7fe      	b.n	800ce40 <vPortValidateInterruptPriority+0x60>
	}
 800ce42:	bf00      	nop
 800ce44:	3714      	adds	r7, #20
 800ce46:	46bd      	mov	sp, r7
 800ce48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4c:	4770      	bx	lr
 800ce4e:	bf00      	nop
 800ce50:	e000e3f0 	.word	0xe000e3f0
 800ce54:	2000af9c 	.word	0x2000af9c
 800ce58:	e000ed0c 	.word	0xe000ed0c
 800ce5c:	2000afa0 	.word	0x2000afa0

0800ce60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b084      	sub	sp, #16
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
 800ce68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d10a      	bne.n	800ce8a <xQueueGenericReset+0x2a>
	__asm volatile
 800ce74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce78:	f383 8811 	msr	BASEPRI, r3
 800ce7c:	f3bf 8f6f 	isb	sy
 800ce80:	f3bf 8f4f 	dsb	sy
 800ce84:	60bb      	str	r3, [r7, #8]
}
 800ce86:	bf00      	nop
 800ce88:	e7fe      	b.n	800ce88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ce8a:	f7ff fde3 	bl	800ca54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681a      	ldr	r2, [r3, #0]
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce96:	68f9      	ldr	r1, [r7, #12]
 800ce98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ce9a:	fb01 f303 	mul.w	r3, r1, r3
 800ce9e:	441a      	add	r2, r3
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	2200      	movs	r2, #0
 800cea8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	681a      	ldr	r2, [r3, #0]
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681a      	ldr	r2, [r3, #0]
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceba:	3b01      	subs	r3, #1
 800cebc:	68f9      	ldr	r1, [r7, #12]
 800cebe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cec0:	fb01 f303 	mul.w	r3, r1, r3
 800cec4:	441a      	add	r2, r3
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	22ff      	movs	r2, #255	; 0xff
 800cece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	22ff      	movs	r2, #255	; 0xff
 800ced6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d114      	bne.n	800cf0a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	691b      	ldr	r3, [r3, #16]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d01a      	beq.n	800cf1e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	3310      	adds	r3, #16
 800ceec:	4618      	mov	r0, r3
 800ceee:	f001 fa77 	bl	800e3e0 <xTaskRemoveFromEventList>
 800cef2:	4603      	mov	r3, r0
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d012      	beq.n	800cf1e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cef8:	4b0c      	ldr	r3, [pc, #48]	; (800cf2c <xQueueGenericReset+0xcc>)
 800cefa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cefe:	601a      	str	r2, [r3, #0]
 800cf00:	f3bf 8f4f 	dsb	sy
 800cf04:	f3bf 8f6f 	isb	sy
 800cf08:	e009      	b.n	800cf1e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	3310      	adds	r3, #16
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f7ff fbc2 	bl	800c698 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	3324      	adds	r3, #36	; 0x24
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f7ff fbbd 	bl	800c698 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cf1e:	f7ff fdc9 	bl	800cab4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cf22:	2301      	movs	r3, #1
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3710      	adds	r7, #16
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}
 800cf2c:	e000ed04 	.word	0xe000ed04

0800cf30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b08e      	sub	sp, #56	; 0x38
 800cf34:	af02      	add	r7, sp, #8
 800cf36:	60f8      	str	r0, [r7, #12]
 800cf38:	60b9      	str	r1, [r7, #8]
 800cf3a:	607a      	str	r2, [r7, #4]
 800cf3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d10a      	bne.n	800cf5a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cf44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf48:	f383 8811 	msr	BASEPRI, r3
 800cf4c:	f3bf 8f6f 	isb	sy
 800cf50:	f3bf 8f4f 	dsb	sy
 800cf54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cf56:	bf00      	nop
 800cf58:	e7fe      	b.n	800cf58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d10a      	bne.n	800cf76 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cf60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf64:	f383 8811 	msr	BASEPRI, r3
 800cf68:	f3bf 8f6f 	isb	sy
 800cf6c:	f3bf 8f4f 	dsb	sy
 800cf70:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cf72:	bf00      	nop
 800cf74:	e7fe      	b.n	800cf74 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d002      	beq.n	800cf82 <xQueueGenericCreateStatic+0x52>
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d001      	beq.n	800cf86 <xQueueGenericCreateStatic+0x56>
 800cf82:	2301      	movs	r3, #1
 800cf84:	e000      	b.n	800cf88 <xQueueGenericCreateStatic+0x58>
 800cf86:	2300      	movs	r3, #0
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d10a      	bne.n	800cfa2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cf8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf90:	f383 8811 	msr	BASEPRI, r3
 800cf94:	f3bf 8f6f 	isb	sy
 800cf98:	f3bf 8f4f 	dsb	sy
 800cf9c:	623b      	str	r3, [r7, #32]
}
 800cf9e:	bf00      	nop
 800cfa0:	e7fe      	b.n	800cfa0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d102      	bne.n	800cfae <xQueueGenericCreateStatic+0x7e>
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d101      	bne.n	800cfb2 <xQueueGenericCreateStatic+0x82>
 800cfae:	2301      	movs	r3, #1
 800cfb0:	e000      	b.n	800cfb4 <xQueueGenericCreateStatic+0x84>
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d10a      	bne.n	800cfce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cfb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfbc:	f383 8811 	msr	BASEPRI, r3
 800cfc0:	f3bf 8f6f 	isb	sy
 800cfc4:	f3bf 8f4f 	dsb	sy
 800cfc8:	61fb      	str	r3, [r7, #28]
}
 800cfca:	bf00      	nop
 800cfcc:	e7fe      	b.n	800cfcc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cfce:	2350      	movs	r3, #80	; 0x50
 800cfd0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	2b50      	cmp	r3, #80	; 0x50
 800cfd6:	d00a      	beq.n	800cfee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cfd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfdc:	f383 8811 	msr	BASEPRI, r3
 800cfe0:	f3bf 8f6f 	isb	sy
 800cfe4:	f3bf 8f4f 	dsb	sy
 800cfe8:	61bb      	str	r3, [r7, #24]
}
 800cfea:	bf00      	nop
 800cfec:	e7fe      	b.n	800cfec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cfee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d00d      	beq.n	800d016 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cffc:	2201      	movs	r2, #1
 800cffe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d002:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d008:	9300      	str	r3, [sp, #0]
 800d00a:	4613      	mov	r3, r2
 800d00c:	687a      	ldr	r2, [r7, #4]
 800d00e:	68b9      	ldr	r1, [r7, #8]
 800d010:	68f8      	ldr	r0, [r7, #12]
 800d012:	f000 f805 	bl	800d020 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d018:	4618      	mov	r0, r3
 800d01a:	3730      	adds	r7, #48	; 0x30
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}

0800d020 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b084      	sub	sp, #16
 800d024:	af00      	add	r7, sp, #0
 800d026:	60f8      	str	r0, [r7, #12]
 800d028:	60b9      	str	r1, [r7, #8]
 800d02a:	607a      	str	r2, [r7, #4]
 800d02c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d103      	bne.n	800d03c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d034:	69bb      	ldr	r3, [r7, #24]
 800d036:	69ba      	ldr	r2, [r7, #24]
 800d038:	601a      	str	r2, [r3, #0]
 800d03a:	e002      	b.n	800d042 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d03c:	69bb      	ldr	r3, [r7, #24]
 800d03e:	687a      	ldr	r2, [r7, #4]
 800d040:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d042:	69bb      	ldr	r3, [r7, #24]
 800d044:	68fa      	ldr	r2, [r7, #12]
 800d046:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d048:	69bb      	ldr	r3, [r7, #24]
 800d04a:	68ba      	ldr	r2, [r7, #8]
 800d04c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d04e:	2101      	movs	r1, #1
 800d050:	69b8      	ldr	r0, [r7, #24]
 800d052:	f7ff ff05 	bl	800ce60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d056:	69bb      	ldr	r3, [r7, #24]
 800d058:	78fa      	ldrb	r2, [r7, #3]
 800d05a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d05e:	bf00      	nop
 800d060:	3710      	adds	r7, #16
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}
	...

0800d068 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b08e      	sub	sp, #56	; 0x38
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	60f8      	str	r0, [r7, #12]
 800d070:	60b9      	str	r1, [r7, #8]
 800d072:	607a      	str	r2, [r7, #4]
 800d074:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d076:	2300      	movs	r3, #0
 800d078:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d080:	2b00      	cmp	r3, #0
 800d082:	d10a      	bne.n	800d09a <xQueueGenericSend+0x32>
	__asm volatile
 800d084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d088:	f383 8811 	msr	BASEPRI, r3
 800d08c:	f3bf 8f6f 	isb	sy
 800d090:	f3bf 8f4f 	dsb	sy
 800d094:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d096:	bf00      	nop
 800d098:	e7fe      	b.n	800d098 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d103      	bne.n	800d0a8 <xQueueGenericSend+0x40>
 800d0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d101      	bne.n	800d0ac <xQueueGenericSend+0x44>
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	e000      	b.n	800d0ae <xQueueGenericSend+0x46>
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d10a      	bne.n	800d0c8 <xQueueGenericSend+0x60>
	__asm volatile
 800d0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b6:	f383 8811 	msr	BASEPRI, r3
 800d0ba:	f3bf 8f6f 	isb	sy
 800d0be:	f3bf 8f4f 	dsb	sy
 800d0c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d0c4:	bf00      	nop
 800d0c6:	e7fe      	b.n	800d0c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	2b02      	cmp	r3, #2
 800d0cc:	d103      	bne.n	800d0d6 <xQueueGenericSend+0x6e>
 800d0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0d2:	2b01      	cmp	r3, #1
 800d0d4:	d101      	bne.n	800d0da <xQueueGenericSend+0x72>
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	e000      	b.n	800d0dc <xQueueGenericSend+0x74>
 800d0da:	2300      	movs	r3, #0
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d10a      	bne.n	800d0f6 <xQueueGenericSend+0x8e>
	__asm volatile
 800d0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e4:	f383 8811 	msr	BASEPRI, r3
 800d0e8:	f3bf 8f6f 	isb	sy
 800d0ec:	f3bf 8f4f 	dsb	sy
 800d0f0:	623b      	str	r3, [r7, #32]
}
 800d0f2:	bf00      	nop
 800d0f4:	e7fe      	b.n	800d0f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d0f6:	f001 fba1 	bl	800e83c <xTaskGetSchedulerState>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d102      	bne.n	800d106 <xQueueGenericSend+0x9e>
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d101      	bne.n	800d10a <xQueueGenericSend+0xa2>
 800d106:	2301      	movs	r3, #1
 800d108:	e000      	b.n	800d10c <xQueueGenericSend+0xa4>
 800d10a:	2300      	movs	r3, #0
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d10a      	bne.n	800d126 <xQueueGenericSend+0xbe>
	__asm volatile
 800d110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d114:	f383 8811 	msr	BASEPRI, r3
 800d118:	f3bf 8f6f 	isb	sy
 800d11c:	f3bf 8f4f 	dsb	sy
 800d120:	61fb      	str	r3, [r7, #28]
}
 800d122:	bf00      	nop
 800d124:	e7fe      	b.n	800d124 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d126:	f7ff fc95 	bl	800ca54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d12c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d132:	429a      	cmp	r2, r3
 800d134:	d302      	bcc.n	800d13c <xQueueGenericSend+0xd4>
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	2b02      	cmp	r3, #2
 800d13a:	d129      	bne.n	800d190 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d13c:	683a      	ldr	r2, [r7, #0]
 800d13e:	68b9      	ldr	r1, [r7, #8]
 800d140:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d142:	f000 fa0b 	bl	800d55c <prvCopyDataToQueue>
 800d146:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d010      	beq.n	800d172 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d152:	3324      	adds	r3, #36	; 0x24
 800d154:	4618      	mov	r0, r3
 800d156:	f001 f943 	bl	800e3e0 <xTaskRemoveFromEventList>
 800d15a:	4603      	mov	r3, r0
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d013      	beq.n	800d188 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d160:	4b3f      	ldr	r3, [pc, #252]	; (800d260 <xQueueGenericSend+0x1f8>)
 800d162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d166:	601a      	str	r2, [r3, #0]
 800d168:	f3bf 8f4f 	dsb	sy
 800d16c:	f3bf 8f6f 	isb	sy
 800d170:	e00a      	b.n	800d188 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d174:	2b00      	cmp	r3, #0
 800d176:	d007      	beq.n	800d188 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d178:	4b39      	ldr	r3, [pc, #228]	; (800d260 <xQueueGenericSend+0x1f8>)
 800d17a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d17e:	601a      	str	r2, [r3, #0]
 800d180:	f3bf 8f4f 	dsb	sy
 800d184:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d188:	f7ff fc94 	bl	800cab4 <vPortExitCritical>
				return pdPASS;
 800d18c:	2301      	movs	r3, #1
 800d18e:	e063      	b.n	800d258 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d103      	bne.n	800d19e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d196:	f7ff fc8d 	bl	800cab4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d19a:	2300      	movs	r3, #0
 800d19c:	e05c      	b.n	800d258 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d106      	bne.n	800d1b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d1a4:	f107 0314 	add.w	r3, r7, #20
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f001 f97f 	bl	800e4ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d1b2:	f7ff fc7f 	bl	800cab4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d1b6:	f000 fe2d 	bl	800de14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d1ba:	f7ff fc4b 	bl	800ca54 <vPortEnterCritical>
 800d1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d1c4:	b25b      	sxtb	r3, r3
 800d1c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1ca:	d103      	bne.n	800d1d4 <xQueueGenericSend+0x16c>
 800d1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d1da:	b25b      	sxtb	r3, r3
 800d1dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1e0:	d103      	bne.n	800d1ea <xQueueGenericSend+0x182>
 800d1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d1ea:	f7ff fc63 	bl	800cab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d1ee:	1d3a      	adds	r2, r7, #4
 800d1f0:	f107 0314 	add.w	r3, r7, #20
 800d1f4:	4611      	mov	r1, r2
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f001 f96e 	bl	800e4d8 <xTaskCheckForTimeOut>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d124      	bne.n	800d24c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d202:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d204:	f000 faa2 	bl	800d74c <prvIsQueueFull>
 800d208:	4603      	mov	r3, r0
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d018      	beq.n	800d240 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d210:	3310      	adds	r3, #16
 800d212:	687a      	ldr	r2, [r7, #4]
 800d214:	4611      	mov	r1, r2
 800d216:	4618      	mov	r0, r3
 800d218:	f001 f892 	bl	800e340 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d21c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d21e:	f000 fa2d 	bl	800d67c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d222:	f000 fe3d 	bl	800dea0 <xTaskResumeAll>
 800d226:	4603      	mov	r3, r0
 800d228:	2b00      	cmp	r3, #0
 800d22a:	f47f af7c 	bne.w	800d126 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d22e:	4b0c      	ldr	r3, [pc, #48]	; (800d260 <xQueueGenericSend+0x1f8>)
 800d230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d234:	601a      	str	r2, [r3, #0]
 800d236:	f3bf 8f4f 	dsb	sy
 800d23a:	f3bf 8f6f 	isb	sy
 800d23e:	e772      	b.n	800d126 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d240:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d242:	f000 fa1b 	bl	800d67c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d246:	f000 fe2b 	bl	800dea0 <xTaskResumeAll>
 800d24a:	e76c      	b.n	800d126 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d24c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d24e:	f000 fa15 	bl	800d67c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d252:	f000 fe25 	bl	800dea0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d256:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d258:	4618      	mov	r0, r3
 800d25a:	3738      	adds	r7, #56	; 0x38
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}
 800d260:	e000ed04 	.word	0xe000ed04

0800d264 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b090      	sub	sp, #64	; 0x40
 800d268:	af00      	add	r7, sp, #0
 800d26a:	60f8      	str	r0, [r7, #12]
 800d26c:	60b9      	str	r1, [r7, #8]
 800d26e:	607a      	str	r2, [r7, #4]
 800d270:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d10a      	bne.n	800d292 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d280:	f383 8811 	msr	BASEPRI, r3
 800d284:	f3bf 8f6f 	isb	sy
 800d288:	f3bf 8f4f 	dsb	sy
 800d28c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d28e:	bf00      	nop
 800d290:	e7fe      	b.n	800d290 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d103      	bne.n	800d2a0 <xQueueGenericSendFromISR+0x3c>
 800d298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d29a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d101      	bne.n	800d2a4 <xQueueGenericSendFromISR+0x40>
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	e000      	b.n	800d2a6 <xQueueGenericSendFromISR+0x42>
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d10a      	bne.n	800d2c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ae:	f383 8811 	msr	BASEPRI, r3
 800d2b2:	f3bf 8f6f 	isb	sy
 800d2b6:	f3bf 8f4f 	dsb	sy
 800d2ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d2bc:	bf00      	nop
 800d2be:	e7fe      	b.n	800d2be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	2b02      	cmp	r3, #2
 800d2c4:	d103      	bne.n	800d2ce <xQueueGenericSendFromISR+0x6a>
 800d2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2ca:	2b01      	cmp	r3, #1
 800d2cc:	d101      	bne.n	800d2d2 <xQueueGenericSendFromISR+0x6e>
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	e000      	b.n	800d2d4 <xQueueGenericSendFromISR+0x70>
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d10a      	bne.n	800d2ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2dc:	f383 8811 	msr	BASEPRI, r3
 800d2e0:	f3bf 8f6f 	isb	sy
 800d2e4:	f3bf 8f4f 	dsb	sy
 800d2e8:	623b      	str	r3, [r7, #32]
}
 800d2ea:	bf00      	nop
 800d2ec:	e7fe      	b.n	800d2ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d2ee:	f7ff fd77 	bl	800cde0 <vPortValidateInterruptPriority>
	__asm volatile
 800d2f2:	f3ef 8211 	mrs	r2, BASEPRI
 800d2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2fa:	f383 8811 	msr	BASEPRI, r3
 800d2fe:	f3bf 8f6f 	isb	sy
 800d302:	f3bf 8f4f 	dsb	sy
 800d306:	61fa      	str	r2, [r7, #28]
 800d308:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800d30a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d30c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d316:	429a      	cmp	r2, r3
 800d318:	d302      	bcc.n	800d320 <xQueueGenericSendFromISR+0xbc>
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	2b02      	cmp	r3, #2
 800d31e:	d12f      	bne.n	800d380 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d322:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d32c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d32e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d330:	683a      	ldr	r2, [r7, #0]
 800d332:	68b9      	ldr	r1, [r7, #8]
 800d334:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d336:	f000 f911 	bl	800d55c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d33a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d33e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d342:	d112      	bne.n	800d36a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d016      	beq.n	800d37a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d34e:	3324      	adds	r3, #36	; 0x24
 800d350:	4618      	mov	r0, r3
 800d352:	f001 f845 	bl	800e3e0 <xTaskRemoveFromEventList>
 800d356:	4603      	mov	r3, r0
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d00e      	beq.n	800d37a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d00b      	beq.n	800d37a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2201      	movs	r2, #1
 800d366:	601a      	str	r2, [r3, #0]
 800d368:	e007      	b.n	800d37a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d36a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d36e:	3301      	adds	r3, #1
 800d370:	b2db      	uxtb	r3, r3
 800d372:	b25a      	sxtb	r2, r3
 800d374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d37a:	2301      	movs	r3, #1
 800d37c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d37e:	e001      	b.n	800d384 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d380:	2300      	movs	r3, #0
 800d382:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d386:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	f383 8811 	msr	BASEPRI, r3
}
 800d38e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d392:	4618      	mov	r0, r3
 800d394:	3740      	adds	r7, #64	; 0x40
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}
	...

0800d39c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b08c      	sub	sp, #48	; 0x30
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	60f8      	str	r0, [r7, #12]
 800d3a4:	60b9      	str	r1, [r7, #8]
 800d3a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d10a      	bne.n	800d3cc <xQueueReceive+0x30>
	__asm volatile
 800d3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ba:	f383 8811 	msr	BASEPRI, r3
 800d3be:	f3bf 8f6f 	isb	sy
 800d3c2:	f3bf 8f4f 	dsb	sy
 800d3c6:	623b      	str	r3, [r7, #32]
}
 800d3c8:	bf00      	nop
 800d3ca:	e7fe      	b.n	800d3ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d103      	bne.n	800d3da <xQueueReceive+0x3e>
 800d3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d101      	bne.n	800d3de <xQueueReceive+0x42>
 800d3da:	2301      	movs	r3, #1
 800d3dc:	e000      	b.n	800d3e0 <xQueueReceive+0x44>
 800d3de:	2300      	movs	r3, #0
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d10a      	bne.n	800d3fa <xQueueReceive+0x5e>
	__asm volatile
 800d3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e8:	f383 8811 	msr	BASEPRI, r3
 800d3ec:	f3bf 8f6f 	isb	sy
 800d3f0:	f3bf 8f4f 	dsb	sy
 800d3f4:	61fb      	str	r3, [r7, #28]
}
 800d3f6:	bf00      	nop
 800d3f8:	e7fe      	b.n	800d3f8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d3fa:	f001 fa1f 	bl	800e83c <xTaskGetSchedulerState>
 800d3fe:	4603      	mov	r3, r0
 800d400:	2b00      	cmp	r3, #0
 800d402:	d102      	bne.n	800d40a <xQueueReceive+0x6e>
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d101      	bne.n	800d40e <xQueueReceive+0x72>
 800d40a:	2301      	movs	r3, #1
 800d40c:	e000      	b.n	800d410 <xQueueReceive+0x74>
 800d40e:	2300      	movs	r3, #0
 800d410:	2b00      	cmp	r3, #0
 800d412:	d10a      	bne.n	800d42a <xQueueReceive+0x8e>
	__asm volatile
 800d414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d418:	f383 8811 	msr	BASEPRI, r3
 800d41c:	f3bf 8f6f 	isb	sy
 800d420:	f3bf 8f4f 	dsb	sy
 800d424:	61bb      	str	r3, [r7, #24]
}
 800d426:	bf00      	nop
 800d428:	e7fe      	b.n	800d428 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d42a:	f7ff fb13 	bl	800ca54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d432:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d436:	2b00      	cmp	r3, #0
 800d438:	d01f      	beq.n	800d47a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d43a:	68b9      	ldr	r1, [r7, #8]
 800d43c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d43e:	f000 f8f7 	bl	800d630 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d444:	1e5a      	subs	r2, r3, #1
 800d446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d448:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d44c:	691b      	ldr	r3, [r3, #16]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d00f      	beq.n	800d472 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d454:	3310      	adds	r3, #16
 800d456:	4618      	mov	r0, r3
 800d458:	f000 ffc2 	bl	800e3e0 <xTaskRemoveFromEventList>
 800d45c:	4603      	mov	r3, r0
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d007      	beq.n	800d472 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d462:	4b3d      	ldr	r3, [pc, #244]	; (800d558 <xQueueReceive+0x1bc>)
 800d464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d468:	601a      	str	r2, [r3, #0]
 800d46a:	f3bf 8f4f 	dsb	sy
 800d46e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d472:	f7ff fb1f 	bl	800cab4 <vPortExitCritical>
				return pdPASS;
 800d476:	2301      	movs	r3, #1
 800d478:	e069      	b.n	800d54e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d103      	bne.n	800d488 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d480:	f7ff fb18 	bl	800cab4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d484:	2300      	movs	r3, #0
 800d486:	e062      	b.n	800d54e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d106      	bne.n	800d49c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d48e:	f107 0310 	add.w	r3, r7, #16
 800d492:	4618      	mov	r0, r3
 800d494:	f001 f80a 	bl	800e4ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d498:	2301      	movs	r3, #1
 800d49a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d49c:	f7ff fb0a 	bl	800cab4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d4a0:	f000 fcb8 	bl	800de14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d4a4:	f7ff fad6 	bl	800ca54 <vPortEnterCritical>
 800d4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d4ae:	b25b      	sxtb	r3, r3
 800d4b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4b4:	d103      	bne.n	800d4be <xQueueReceive+0x122>
 800d4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d4c4:	b25b      	sxtb	r3, r3
 800d4c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ca:	d103      	bne.n	800d4d4 <xQueueReceive+0x138>
 800d4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d4d4:	f7ff faee 	bl	800cab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d4d8:	1d3a      	adds	r2, r7, #4
 800d4da:	f107 0310 	add.w	r3, r7, #16
 800d4de:	4611      	mov	r1, r2
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f000 fff9 	bl	800e4d8 <xTaskCheckForTimeOut>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d123      	bne.n	800d534 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d4ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4ee:	f000 f917 	bl	800d720 <prvIsQueueEmpty>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d017      	beq.n	800d528 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4fa:	3324      	adds	r3, #36	; 0x24
 800d4fc:	687a      	ldr	r2, [r7, #4]
 800d4fe:	4611      	mov	r1, r2
 800d500:	4618      	mov	r0, r3
 800d502:	f000 ff1d 	bl	800e340 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d506:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d508:	f000 f8b8 	bl	800d67c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d50c:	f000 fcc8 	bl	800dea0 <xTaskResumeAll>
 800d510:	4603      	mov	r3, r0
 800d512:	2b00      	cmp	r3, #0
 800d514:	d189      	bne.n	800d42a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d516:	4b10      	ldr	r3, [pc, #64]	; (800d558 <xQueueReceive+0x1bc>)
 800d518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d51c:	601a      	str	r2, [r3, #0]
 800d51e:	f3bf 8f4f 	dsb	sy
 800d522:	f3bf 8f6f 	isb	sy
 800d526:	e780      	b.n	800d42a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d52a:	f000 f8a7 	bl	800d67c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d52e:	f000 fcb7 	bl	800dea0 <xTaskResumeAll>
 800d532:	e77a      	b.n	800d42a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d534:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d536:	f000 f8a1 	bl	800d67c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d53a:	f000 fcb1 	bl	800dea0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d53e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d540:	f000 f8ee 	bl	800d720 <prvIsQueueEmpty>
 800d544:	4603      	mov	r3, r0
 800d546:	2b00      	cmp	r3, #0
 800d548:	f43f af6f 	beq.w	800d42a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d54c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3730      	adds	r7, #48	; 0x30
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}
 800d556:	bf00      	nop
 800d558:	e000ed04 	.word	0xe000ed04

0800d55c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b086      	sub	sp, #24
 800d560:	af00      	add	r7, sp, #0
 800d562:	60f8      	str	r0, [r7, #12]
 800d564:	60b9      	str	r1, [r7, #8]
 800d566:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d568:	2300      	movs	r3, #0
 800d56a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d570:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d576:	2b00      	cmp	r3, #0
 800d578:	d10d      	bne.n	800d596 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d14d      	bne.n	800d61e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	689b      	ldr	r3, [r3, #8]
 800d586:	4618      	mov	r0, r3
 800d588:	f001 f976 	bl	800e878 <xTaskPriorityDisinherit>
 800d58c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	2200      	movs	r2, #0
 800d592:	609a      	str	r2, [r3, #8]
 800d594:	e043      	b.n	800d61e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d119      	bne.n	800d5d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	6858      	ldr	r0, [r3, #4]
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5a4:	461a      	mov	r2, r3
 800d5a6:	68b9      	ldr	r1, [r7, #8]
 800d5a8:	f001 feac 	bl	800f304 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	685a      	ldr	r2, [r3, #4]
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5b4:	441a      	add	r2, r3
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	685a      	ldr	r2, [r3, #4]
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	689b      	ldr	r3, [r3, #8]
 800d5c2:	429a      	cmp	r2, r3
 800d5c4:	d32b      	bcc.n	800d61e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	681a      	ldr	r2, [r3, #0]
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	605a      	str	r2, [r3, #4]
 800d5ce:	e026      	b.n	800d61e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	68d8      	ldr	r0, [r3, #12]
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5d8:	461a      	mov	r2, r3
 800d5da:	68b9      	ldr	r1, [r7, #8]
 800d5dc:	f001 fe92 	bl	800f304 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	68da      	ldr	r2, [r3, #12]
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5e8:	425b      	negs	r3, r3
 800d5ea:	441a      	add	r2, r3
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	68da      	ldr	r2, [r3, #12]
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d207      	bcs.n	800d60c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	689a      	ldr	r2, [r3, #8]
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d604:	425b      	negs	r3, r3
 800d606:	441a      	add	r2, r3
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2b02      	cmp	r3, #2
 800d610:	d105      	bne.n	800d61e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d002      	beq.n	800d61e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d618:	693b      	ldr	r3, [r7, #16]
 800d61a:	3b01      	subs	r3, #1
 800d61c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	1c5a      	adds	r2, r3, #1
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d626:	697b      	ldr	r3, [r7, #20]
}
 800d628:	4618      	mov	r0, r3
 800d62a:	3718      	adds	r7, #24
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}

0800d630 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b082      	sub	sp, #8
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
 800d638:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d018      	beq.n	800d674 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	68da      	ldr	r2, [r3, #12]
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d64a:	441a      	add	r2, r3
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	68da      	ldr	r2, [r3, #12]
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	689b      	ldr	r3, [r3, #8]
 800d658:	429a      	cmp	r2, r3
 800d65a:	d303      	bcc.n	800d664 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681a      	ldr	r2, [r3, #0]
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	68d9      	ldr	r1, [r3, #12]
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d66c:	461a      	mov	r2, r3
 800d66e:	6838      	ldr	r0, [r7, #0]
 800d670:	f001 fe48 	bl	800f304 <memcpy>
	}
}
 800d674:	bf00      	nop
 800d676:	3708      	adds	r7, #8
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}

0800d67c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b084      	sub	sp, #16
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d684:	f7ff f9e6 	bl	800ca54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d68e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d690:	e011      	b.n	800d6b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d696:	2b00      	cmp	r3, #0
 800d698:	d012      	beq.n	800d6c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	3324      	adds	r3, #36	; 0x24
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f000 fe9e 	bl	800e3e0 <xTaskRemoveFromEventList>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d001      	beq.n	800d6ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d6aa:	f000 ff87 	bl	800e5bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d6ae:	7bfb      	ldrb	r3, [r7, #15]
 800d6b0:	3b01      	subs	r3, #1
 800d6b2:	b2db      	uxtb	r3, r3
 800d6b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d6b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	dce9      	bgt.n	800d692 <prvUnlockQueue+0x16>
 800d6be:	e000      	b.n	800d6c2 <prvUnlockQueue+0x46>
					break;
 800d6c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	22ff      	movs	r2, #255	; 0xff
 800d6c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d6ca:	f7ff f9f3 	bl	800cab4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d6ce:	f7ff f9c1 	bl	800ca54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d6d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d6da:	e011      	b.n	800d700 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	691b      	ldr	r3, [r3, #16]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d012      	beq.n	800d70a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	3310      	adds	r3, #16
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f000 fe79 	bl	800e3e0 <xTaskRemoveFromEventList>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d001      	beq.n	800d6f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d6f4:	f000 ff62 	bl	800e5bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d6f8:	7bbb      	ldrb	r3, [r7, #14]
 800d6fa:	3b01      	subs	r3, #1
 800d6fc:	b2db      	uxtb	r3, r3
 800d6fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d700:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d704:	2b00      	cmp	r3, #0
 800d706:	dce9      	bgt.n	800d6dc <prvUnlockQueue+0x60>
 800d708:	e000      	b.n	800d70c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d70a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	22ff      	movs	r2, #255	; 0xff
 800d710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d714:	f7ff f9ce 	bl	800cab4 <vPortExitCritical>
}
 800d718:	bf00      	nop
 800d71a:	3710      	adds	r7, #16
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}

0800d720 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b084      	sub	sp, #16
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d728:	f7ff f994 	bl	800ca54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d730:	2b00      	cmp	r3, #0
 800d732:	d102      	bne.n	800d73a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d734:	2301      	movs	r3, #1
 800d736:	60fb      	str	r3, [r7, #12]
 800d738:	e001      	b.n	800d73e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d73a:	2300      	movs	r3, #0
 800d73c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d73e:	f7ff f9b9 	bl	800cab4 <vPortExitCritical>

	return xReturn;
 800d742:	68fb      	ldr	r3, [r7, #12]
}
 800d744:	4618      	mov	r0, r3
 800d746:	3710      	adds	r7, #16
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}

0800d74c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b084      	sub	sp, #16
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d754:	f7ff f97e 	bl	800ca54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d760:	429a      	cmp	r2, r3
 800d762:	d102      	bne.n	800d76a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d764:	2301      	movs	r3, #1
 800d766:	60fb      	str	r3, [r7, #12]
 800d768:	e001      	b.n	800d76e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d76a:	2300      	movs	r3, #0
 800d76c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d76e:	f7ff f9a1 	bl	800cab4 <vPortExitCritical>

	return xReturn;
 800d772:	68fb      	ldr	r3, [r7, #12]
}
 800d774:	4618      	mov	r0, r3
 800d776:	3710      	adds	r7, #16
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}

0800d77c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d77c:	b480      	push	{r7}
 800d77e:	b085      	sub	sp, #20
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
 800d784:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d786:	2300      	movs	r3, #0
 800d788:	60fb      	str	r3, [r7, #12]
 800d78a:	e014      	b.n	800d7b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d78c:	4a0f      	ldr	r2, [pc, #60]	; (800d7cc <vQueueAddToRegistry+0x50>)
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d10b      	bne.n	800d7b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d798:	490c      	ldr	r1, [pc, #48]	; (800d7cc <vQueueAddToRegistry+0x50>)
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	683a      	ldr	r2, [r7, #0]
 800d79e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d7a2:	4a0a      	ldr	r2, [pc, #40]	; (800d7cc <vQueueAddToRegistry+0x50>)
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	00db      	lsls	r3, r3, #3
 800d7a8:	4413      	add	r3, r2
 800d7aa:	687a      	ldr	r2, [r7, #4]
 800d7ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d7ae:	e006      	b.n	800d7be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	3301      	adds	r3, #1
 800d7b4:	60fb      	str	r3, [r7, #12]
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	2b07      	cmp	r3, #7
 800d7ba:	d9e7      	bls.n	800d78c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d7bc:	bf00      	nop
 800d7be:	bf00      	nop
 800d7c0:	3714      	adds	r7, #20
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c8:	4770      	bx	lr
 800d7ca:	bf00      	nop
 800d7cc:	2000afa4 	.word	0x2000afa4

0800d7d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b086      	sub	sp, #24
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	60f8      	str	r0, [r7, #12]
 800d7d8:	60b9      	str	r1, [r7, #8]
 800d7da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d7e0:	f7ff f938 	bl	800ca54 <vPortEnterCritical>
 800d7e4:	697b      	ldr	r3, [r7, #20]
 800d7e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d7ea:	b25b      	sxtb	r3, r3
 800d7ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7f0:	d103      	bne.n	800d7fa <vQueueWaitForMessageRestricted+0x2a>
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d800:	b25b      	sxtb	r3, r3
 800d802:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d806:	d103      	bne.n	800d810 <vQueueWaitForMessageRestricted+0x40>
 800d808:	697b      	ldr	r3, [r7, #20]
 800d80a:	2200      	movs	r2, #0
 800d80c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d810:	f7ff f950 	bl	800cab4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d814:	697b      	ldr	r3, [r7, #20]
 800d816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d106      	bne.n	800d82a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d81c:	697b      	ldr	r3, [r7, #20]
 800d81e:	3324      	adds	r3, #36	; 0x24
 800d820:	687a      	ldr	r2, [r7, #4]
 800d822:	68b9      	ldr	r1, [r7, #8]
 800d824:	4618      	mov	r0, r3
 800d826:	f000 fdaf 	bl	800e388 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d82a:	6978      	ldr	r0, [r7, #20]
 800d82c:	f7ff ff26 	bl	800d67c <prvUnlockQueue>
	}
 800d830:	bf00      	nop
 800d832:	3718      	adds	r7, #24
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}

0800d838 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b08e      	sub	sp, #56	; 0x38
 800d83c:	af04      	add	r7, sp, #16
 800d83e:	60f8      	str	r0, [r7, #12]
 800d840:	60b9      	str	r1, [r7, #8]
 800d842:	607a      	str	r2, [r7, #4]
 800d844:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d10a      	bne.n	800d862 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d850:	f383 8811 	msr	BASEPRI, r3
 800d854:	f3bf 8f6f 	isb	sy
 800d858:	f3bf 8f4f 	dsb	sy
 800d85c:	623b      	str	r3, [r7, #32]
}
 800d85e:	bf00      	nop
 800d860:	e7fe      	b.n	800d860 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d864:	2b00      	cmp	r3, #0
 800d866:	d10a      	bne.n	800d87e <xTaskCreateStatic+0x46>
	__asm volatile
 800d868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d86c:	f383 8811 	msr	BASEPRI, r3
 800d870:	f3bf 8f6f 	isb	sy
 800d874:	f3bf 8f4f 	dsb	sy
 800d878:	61fb      	str	r3, [r7, #28]
}
 800d87a:	bf00      	nop
 800d87c:	e7fe      	b.n	800d87c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d87e:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 800d882:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 800d88a:	d00a      	beq.n	800d8a2 <xTaskCreateStatic+0x6a>
	__asm volatile
 800d88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d890:	f383 8811 	msr	BASEPRI, r3
 800d894:	f3bf 8f6f 	isb	sy
 800d898:	f3bf 8f4f 	dsb	sy
 800d89c:	61bb      	str	r3, [r7, #24]
}
 800d89e:	bf00      	nop
 800d8a0:	e7fe      	b.n	800d8a0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d8a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d01e      	beq.n	800d8e8 <xTaskCreateStatic+0xb0>
 800d8aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d01b      	beq.n	800d8e8 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d8b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8bc:	2202      	movs	r2, #2
 800d8be:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	9303      	str	r3, [sp, #12]
 800d8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c8:	9302      	str	r3, [sp, #8]
 800d8ca:	f107 0314 	add.w	r3, r7, #20
 800d8ce:	9301      	str	r3, [sp, #4]
 800d8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d2:	9300      	str	r3, [sp, #0]
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	687a      	ldr	r2, [r7, #4]
 800d8d8:	68b9      	ldr	r1, [r7, #8]
 800d8da:	68f8      	ldr	r0, [r7, #12]
 800d8dc:	f000 f852 	bl	800d984 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d8e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d8e2:	f000 f90b 	bl	800dafc <prvAddNewTaskToReadyList>
 800d8e6:	e001      	b.n	800d8ec <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d8ec:	697b      	ldr	r3, [r7, #20]
	}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	3728      	adds	r7, #40	; 0x28
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}

0800d8f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d8f6:	b580      	push	{r7, lr}
 800d8f8:	b08c      	sub	sp, #48	; 0x30
 800d8fa:	af04      	add	r7, sp, #16
 800d8fc:	60f8      	str	r0, [r7, #12]
 800d8fe:	60b9      	str	r1, [r7, #8]
 800d900:	603b      	str	r3, [r7, #0]
 800d902:	4613      	mov	r3, r2
 800d904:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d906:	88fb      	ldrh	r3, [r7, #6]
 800d908:	009b      	lsls	r3, r3, #2
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7fe fcd6 	bl	800c2bc <pvPortMalloc>
 800d910:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d00f      	beq.n	800d938 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d918:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 800d91c:	f7fe fcce 	bl	800c2bc <pvPortMalloc>
 800d920:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d922:	69fb      	ldr	r3, [r7, #28]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d003      	beq.n	800d930 <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d928:	69fb      	ldr	r3, [r7, #28]
 800d92a:	697a      	ldr	r2, [r7, #20]
 800d92c:	631a      	str	r2, [r3, #48]	; 0x30
 800d92e:	e005      	b.n	800d93c <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d930:	6978      	ldr	r0, [r7, #20]
 800d932:	f7fe fd93 	bl	800c45c <vPortFree>
 800d936:	e001      	b.n	800d93c <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d938:	2300      	movs	r3, #0
 800d93a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d93c:	69fb      	ldr	r3, [r7, #28]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d017      	beq.n	800d972 <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d942:	69fb      	ldr	r3, [r7, #28]
 800d944:	2200      	movs	r2, #0
 800d946:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d94a:	88fa      	ldrh	r2, [r7, #6]
 800d94c:	2300      	movs	r3, #0
 800d94e:	9303      	str	r3, [sp, #12]
 800d950:	69fb      	ldr	r3, [r7, #28]
 800d952:	9302      	str	r3, [sp, #8]
 800d954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d956:	9301      	str	r3, [sp, #4]
 800d958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d95a:	9300      	str	r3, [sp, #0]
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	68b9      	ldr	r1, [r7, #8]
 800d960:	68f8      	ldr	r0, [r7, #12]
 800d962:	f000 f80f 	bl	800d984 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d966:	69f8      	ldr	r0, [r7, #28]
 800d968:	f000 f8c8 	bl	800dafc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d96c:	2301      	movs	r3, #1
 800d96e:	61bb      	str	r3, [r7, #24]
 800d970:	e002      	b.n	800d978 <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d972:	f04f 33ff 	mov.w	r3, #4294967295
 800d976:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d978:	69bb      	ldr	r3, [r7, #24]
	}
 800d97a:	4618      	mov	r0, r3
 800d97c:	3720      	adds	r7, #32
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd80      	pop	{r7, pc}
	...

0800d984 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b088      	sub	sp, #32
 800d988:	af00      	add	r7, sp, #0
 800d98a:	60f8      	str	r0, [r7, #12]
 800d98c:	60b9      	str	r1, [r7, #8]
 800d98e:	607a      	str	r2, [r7, #4]
 800d990:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d994:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	009b      	lsls	r3, r3, #2
 800d99a:	461a      	mov	r2, r3
 800d99c:	21a5      	movs	r1, #165	; 0xa5
 800d99e:	f001 fcbf 	bl	800f320 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d9ac:	3b01      	subs	r3, #1
 800d9ae:	009b      	lsls	r3, r3, #2
 800d9b0:	4413      	add	r3, r2
 800d9b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d9b4:	69bb      	ldr	r3, [r7, #24]
 800d9b6:	f023 0307 	bic.w	r3, r3, #7
 800d9ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d9bc:	69bb      	ldr	r3, [r7, #24]
 800d9be:	f003 0307 	and.w	r3, r3, #7
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d00a      	beq.n	800d9dc <prvInitialiseNewTask+0x58>
	__asm volatile
 800d9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ca:	f383 8811 	msr	BASEPRI, r3
 800d9ce:	f3bf 8f6f 	isb	sy
 800d9d2:	f3bf 8f4f 	dsb	sy
 800d9d6:	617b      	str	r3, [r7, #20]
}
 800d9d8:	bf00      	nop
 800d9da:	e7fe      	b.n	800d9da <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800d9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9de:	69ba      	ldr	r2, [r7, #24]
 800d9e0:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d01f      	beq.n	800da2a <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	61fb      	str	r3, [r7, #28]
 800d9ee:	e012      	b.n	800da16 <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d9f0:	68ba      	ldr	r2, [r7, #8]
 800d9f2:	69fb      	ldr	r3, [r7, #28]
 800d9f4:	4413      	add	r3, r2
 800d9f6:	7819      	ldrb	r1, [r3, #0]
 800d9f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9fa:	69fb      	ldr	r3, [r7, #28]
 800d9fc:	4413      	add	r3, r2
 800d9fe:	3334      	adds	r3, #52	; 0x34
 800da00:	460a      	mov	r2, r1
 800da02:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800da04:	68ba      	ldr	r2, [r7, #8]
 800da06:	69fb      	ldr	r3, [r7, #28]
 800da08:	4413      	add	r3, r2
 800da0a:	781b      	ldrb	r3, [r3, #0]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d006      	beq.n	800da1e <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800da10:	69fb      	ldr	r3, [r7, #28]
 800da12:	3301      	adds	r3, #1
 800da14:	61fb      	str	r3, [r7, #28]
 800da16:	69fb      	ldr	r3, [r7, #28]
 800da18:	2bfe      	cmp	r3, #254	; 0xfe
 800da1a:	d9e9      	bls.n	800d9f0 <prvInitialiseNewTask+0x6c>
 800da1c:	e000      	b.n	800da20 <prvInitialiseNewTask+0x9c>
			{
				break;
 800da1e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800da20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da22:	2200      	movs	r2, #0
 800da24:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 800da28:	e003      	b.n	800da32 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800da2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da2c:	2200      	movs	r2, #0
 800da2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800da32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da34:	2b37      	cmp	r3, #55	; 0x37
 800da36:	d901      	bls.n	800da3c <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800da38:	2337      	movs	r3, #55	; 0x37
 800da3a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800da3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da40:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800da42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da46:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		pxNewTCB->uxMutexesHeld = 0;
 800da4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da4c:	2200      	movs	r2, #0
 800da4e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800da52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da54:	3304      	adds	r3, #4
 800da56:	4618      	mov	r0, r3
 800da58:	f7fe fe3e 	bl	800c6d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800da5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da5e:	3318      	adds	r3, #24
 800da60:	4618      	mov	r0, r3
 800da62:	f7fe fe39 	bl	800c6d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800da66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800da72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800da76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da7a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800da7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da7e:	2200      	movs	r2, #0
 800da80:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800da84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da86:	2200      	movs	r2, #0
 800da88:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800da8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da8e:	2200      	movs	r2, #0
 800da90:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800da94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da96:	2200      	movs	r2, #0
 800da98:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800da9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800daa2:	2260      	movs	r2, #96	; 0x60
 800daa4:	2100      	movs	r1, #0
 800daa6:	4618      	mov	r0, r3
 800daa8:	f001 fc3a 	bl	800f320 <memset>
 800daac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daae:	4a10      	ldr	r2, [pc, #64]	; (800daf0 <prvInitialiseNewTask+0x16c>)
 800dab0:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 800dab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab6:	4a0f      	ldr	r2, [pc, #60]	; (800daf4 <prvInitialiseNewTask+0x170>)
 800dab8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800dabc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dabe:	4a0e      	ldr	r2, [pc, #56]	; (800daf8 <prvInitialiseNewTask+0x174>)
 800dac0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 800dac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac6:	2200      	movs	r2, #0
 800dac8:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dacc:	683a      	ldr	r2, [r7, #0]
 800dace:	68f9      	ldr	r1, [r7, #12]
 800dad0:	69b8      	ldr	r0, [r7, #24]
 800dad2:	f7fe fe95 	bl	800c800 <pxPortInitialiseStack>
 800dad6:	4602      	mov	r2, r0
 800dad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dada:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d002      	beq.n	800dae8 <prvInitialiseNewTask+0x164>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dae6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dae8:	bf00      	nop
 800daea:	3720      	adds	r7, #32
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}
 800daf0:	0800fb10 	.word	0x0800fb10
 800daf4:	0800fb30 	.word	0x0800fb30
 800daf8:	0800faf0 	.word	0x0800faf0

0800dafc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b082      	sub	sp, #8
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800db04:	f7fe ffa6 	bl	800ca54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800db08:	4b2d      	ldr	r3, [pc, #180]	; (800dbc0 <prvAddNewTaskToReadyList+0xc4>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	3301      	adds	r3, #1
 800db0e:	4a2c      	ldr	r2, [pc, #176]	; (800dbc0 <prvAddNewTaskToReadyList+0xc4>)
 800db10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800db12:	4b2c      	ldr	r3, [pc, #176]	; (800dbc4 <prvAddNewTaskToReadyList+0xc8>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d109      	bne.n	800db2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800db1a:	4a2a      	ldr	r2, [pc, #168]	; (800dbc4 <prvAddNewTaskToReadyList+0xc8>)
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800db20:	4b27      	ldr	r3, [pc, #156]	; (800dbc0 <prvAddNewTaskToReadyList+0xc4>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	2b01      	cmp	r3, #1
 800db26:	d110      	bne.n	800db4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800db28:	f000 fdc4 	bl	800e6b4 <prvInitialiseTaskLists>
 800db2c:	e00d      	b.n	800db4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800db2e:	4b26      	ldr	r3, [pc, #152]	; (800dbc8 <prvAddNewTaskToReadyList+0xcc>)
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d109      	bne.n	800db4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800db36:	4b23      	ldr	r3, [pc, #140]	; (800dbc4 <prvAddNewTaskToReadyList+0xc8>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db40:	429a      	cmp	r2, r3
 800db42:	d802      	bhi.n	800db4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800db44:	4a1f      	ldr	r2, [pc, #124]	; (800dbc4 <prvAddNewTaskToReadyList+0xc8>)
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800db4a:	4b20      	ldr	r3, [pc, #128]	; (800dbcc <prvAddNewTaskToReadyList+0xd0>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	3301      	adds	r3, #1
 800db50:	4a1e      	ldr	r2, [pc, #120]	; (800dbcc <prvAddNewTaskToReadyList+0xd0>)
 800db52:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800db54:	4b1d      	ldr	r3, [pc, #116]	; (800dbcc <prvAddNewTaskToReadyList+0xd0>)
 800db56:	681a      	ldr	r2, [r3, #0]
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db62:	4b1b      	ldr	r3, [pc, #108]	; (800dbd0 <prvAddNewTaskToReadyList+0xd4>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	429a      	cmp	r2, r3
 800db68:	d903      	bls.n	800db72 <prvAddNewTaskToReadyList+0x76>
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db6e:	4a18      	ldr	r2, [pc, #96]	; (800dbd0 <prvAddNewTaskToReadyList+0xd4>)
 800db70:	6013      	str	r3, [r2, #0]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db76:	4613      	mov	r3, r2
 800db78:	009b      	lsls	r3, r3, #2
 800db7a:	4413      	add	r3, r2
 800db7c:	009b      	lsls	r3, r3, #2
 800db7e:	4a15      	ldr	r2, [pc, #84]	; (800dbd4 <prvAddNewTaskToReadyList+0xd8>)
 800db80:	441a      	add	r2, r3
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	3304      	adds	r3, #4
 800db86:	4619      	mov	r1, r3
 800db88:	4610      	mov	r0, r2
 800db8a:	f7fe fdb2 	bl	800c6f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800db8e:	f7fe ff91 	bl	800cab4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800db92:	4b0d      	ldr	r3, [pc, #52]	; (800dbc8 <prvAddNewTaskToReadyList+0xcc>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d00e      	beq.n	800dbb8 <prvAddNewTaskToReadyList+0xbc>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800db9a:	4b0a      	ldr	r3, [pc, #40]	; (800dbc4 <prvAddNewTaskToReadyList+0xc8>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d207      	bcs.n	800dbb8 <prvAddNewTaskToReadyList+0xbc>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dba8:	4b0b      	ldr	r3, [pc, #44]	; (800dbd8 <prvAddNewTaskToReadyList+0xdc>)
 800dbaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbae:	601a      	str	r2, [r3, #0]
 800dbb0:	f3bf 8f4f 	dsb	sy
 800dbb4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dbb8:	bf00      	nop
 800dbba:	3708      	adds	r7, #8
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}
 800dbc0:	2000b4bc 	.word	0x2000b4bc
 800dbc4:	2000afe4 	.word	0x2000afe4
 800dbc8:	2000b4c8 	.word	0x2000b4c8
 800dbcc:	2000b4d8 	.word	0x2000b4d8
 800dbd0:	2000b4c4 	.word	0x2000b4c4
 800dbd4:	2000afe8 	.word	0x2000afe8
 800dbd8:	e000ed04 	.word	0xe000ed04

0800dbdc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b084      	sub	sp, #16
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d017      	beq.n	800dc1e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dbee:	4b13      	ldr	r3, [pc, #76]	; (800dc3c <vTaskDelay+0x60>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d00a      	beq.n	800dc0c <vTaskDelay+0x30>
	__asm volatile
 800dbf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbfa:	f383 8811 	msr	BASEPRI, r3
 800dbfe:	f3bf 8f6f 	isb	sy
 800dc02:	f3bf 8f4f 	dsb	sy
 800dc06:	60bb      	str	r3, [r7, #8]
}
 800dc08:	bf00      	nop
 800dc0a:	e7fe      	b.n	800dc0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dc0c:	f000 f902 	bl	800de14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dc10:	2100      	movs	r1, #0
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f000 fea4 	bl	800e960 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dc18:	f000 f942 	bl	800dea0 <xTaskResumeAll>
 800dc1c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d107      	bne.n	800dc34 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800dc24:	4b06      	ldr	r3, [pc, #24]	; (800dc40 <vTaskDelay+0x64>)
 800dc26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc2a:	601a      	str	r2, [r3, #0]
 800dc2c:	f3bf 8f4f 	dsb	sy
 800dc30:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dc34:	bf00      	nop
 800dc36:	3710      	adds	r7, #16
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}
 800dc3c:	2000b4e4 	.word	0x2000b4e4
 800dc40:	e000ed04 	.word	0xe000ed04

0800dc44 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b084      	sub	sp, #16
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800dc4c:	f7fe ff02 	bl	800ca54 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d102      	bne.n	800dc5c <vTaskSuspend+0x18>
 800dc56:	4b30      	ldr	r3, [pc, #192]	; (800dd18 <vTaskSuspend+0xd4>)
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	e000      	b.n	800dc5e <vTaskSuspend+0x1a>
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	3304      	adds	r3, #4
 800dc64:	4618      	mov	r0, r3
 800dc66:	f7fe fda1 	bl	800c7ac <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d004      	beq.n	800dc7c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	3318      	adds	r3, #24
 800dc76:	4618      	mov	r0, r3
 800dc78:	f7fe fd98 	bl	800c7ac <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	3304      	adds	r3, #4
 800dc80:	4619      	mov	r1, r3
 800dc82:	4826      	ldr	r0, [pc, #152]	; (800dd1c <vTaskSuspend+0xd8>)
 800dc84:	f7fe fd35 	bl	800c6f2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800dc8e:	b2db      	uxtb	r3, r3
 800dc90:	2b01      	cmp	r3, #1
 800dc92:	d103      	bne.n	800dc9c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	2200      	movs	r2, #0
 800dc98:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800dc9c:	f7fe ff0a 	bl	800cab4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800dca0:	4b1f      	ldr	r3, [pc, #124]	; (800dd20 <vTaskSuspend+0xdc>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d005      	beq.n	800dcb4 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800dca8:	f7fe fed4 	bl	800ca54 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800dcac:	f000 fda6 	bl	800e7fc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800dcb0:	f7fe ff00 	bl	800cab4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800dcb4:	4b18      	ldr	r3, [pc, #96]	; (800dd18 <vTaskSuspend+0xd4>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	68fa      	ldr	r2, [r7, #12]
 800dcba:	429a      	cmp	r2, r3
 800dcbc:	d127      	bne.n	800dd0e <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800dcbe:	4b18      	ldr	r3, [pc, #96]	; (800dd20 <vTaskSuspend+0xdc>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d017      	beq.n	800dcf6 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800dcc6:	4b17      	ldr	r3, [pc, #92]	; (800dd24 <vTaskSuspend+0xe0>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d00a      	beq.n	800dce4 <vTaskSuspend+0xa0>
	__asm volatile
 800dcce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcd2:	f383 8811 	msr	BASEPRI, r3
 800dcd6:	f3bf 8f6f 	isb	sy
 800dcda:	f3bf 8f4f 	dsb	sy
 800dcde:	60bb      	str	r3, [r7, #8]
}
 800dce0:	bf00      	nop
 800dce2:	e7fe      	b.n	800dce2 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800dce4:	4b10      	ldr	r3, [pc, #64]	; (800dd28 <vTaskSuspend+0xe4>)
 800dce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcea:	601a      	str	r2, [r3, #0]
 800dcec:	f3bf 8f4f 	dsb	sy
 800dcf0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dcf4:	e00b      	b.n	800dd0e <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800dcf6:	4b09      	ldr	r3, [pc, #36]	; (800dd1c <vTaskSuspend+0xd8>)
 800dcf8:	681a      	ldr	r2, [r3, #0]
 800dcfa:	4b0c      	ldr	r3, [pc, #48]	; (800dd2c <vTaskSuspend+0xe8>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	429a      	cmp	r2, r3
 800dd00:	d103      	bne.n	800dd0a <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800dd02:	4b05      	ldr	r3, [pc, #20]	; (800dd18 <vTaskSuspend+0xd4>)
 800dd04:	2200      	movs	r2, #0
 800dd06:	601a      	str	r2, [r3, #0]
	}
 800dd08:	e001      	b.n	800dd0e <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800dd0a:	f000 fa61 	bl	800e1d0 <vTaskSwitchContext>
	}
 800dd0e:	bf00      	nop
 800dd10:	3710      	adds	r7, #16
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}
 800dd16:	bf00      	nop
 800dd18:	2000afe4 	.word	0x2000afe4
 800dd1c:	2000b4a4 	.word	0x2000b4a4
 800dd20:	2000b4c8 	.word	0x2000b4c8
 800dd24:	2000b4e4 	.word	0x2000b4e4
 800dd28:	e000ed04 	.word	0xe000ed04
 800dd2c:	2000b4bc 	.word	0x2000b4bc

0800dd30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b08a      	sub	sp, #40	; 0x28
 800dd34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dd36:	2300      	movs	r3, #0
 800dd38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dd3e:	463a      	mov	r2, r7
 800dd40:	1d39      	adds	r1, r7, #4
 800dd42:	f107 0308 	add.w	r3, r7, #8
 800dd46:	4618      	mov	r0, r3
 800dd48:	f7fe fa32 	bl	800c1b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dd4c:	6839      	ldr	r1, [r7, #0]
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	68ba      	ldr	r2, [r7, #8]
 800dd52:	9202      	str	r2, [sp, #8]
 800dd54:	9301      	str	r3, [sp, #4]
 800dd56:	2300      	movs	r3, #0
 800dd58:	9300      	str	r3, [sp, #0]
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	460a      	mov	r2, r1
 800dd5e:	4925      	ldr	r1, [pc, #148]	; (800ddf4 <vTaskStartScheduler+0xc4>)
 800dd60:	4825      	ldr	r0, [pc, #148]	; (800ddf8 <vTaskStartScheduler+0xc8>)
 800dd62:	f7ff fd69 	bl	800d838 <xTaskCreateStatic>
 800dd66:	4603      	mov	r3, r0
 800dd68:	4a24      	ldr	r2, [pc, #144]	; (800ddfc <vTaskStartScheduler+0xcc>)
 800dd6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dd6c:	4b23      	ldr	r3, [pc, #140]	; (800ddfc <vTaskStartScheduler+0xcc>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d002      	beq.n	800dd7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dd74:	2301      	movs	r3, #1
 800dd76:	617b      	str	r3, [r7, #20]
 800dd78:	e001      	b.n	800dd7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	2b01      	cmp	r3, #1
 800dd82:	d102      	bne.n	800dd8a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dd84:	f000 fe46 	bl	800ea14 <xTimerCreateTimerTask>
 800dd88:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dd8a:	697b      	ldr	r3, [r7, #20]
 800dd8c:	2b01      	cmp	r3, #1
 800dd8e:	d11e      	bne.n	800ddce <vTaskStartScheduler+0x9e>
	__asm volatile
 800dd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd94:	f383 8811 	msr	BASEPRI, r3
 800dd98:	f3bf 8f6f 	isb	sy
 800dd9c:	f3bf 8f4f 	dsb	sy
 800dda0:	613b      	str	r3, [r7, #16]
}
 800dda2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dda4:	4b16      	ldr	r3, [pc, #88]	; (800de00 <vTaskStartScheduler+0xd0>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ddac:	4a15      	ldr	r2, [pc, #84]	; (800de04 <vTaskStartScheduler+0xd4>)
 800ddae:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ddb0:	4b15      	ldr	r3, [pc, #84]	; (800de08 <vTaskStartScheduler+0xd8>)
 800ddb2:	f04f 32ff 	mov.w	r2, #4294967295
 800ddb6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ddb8:	4b14      	ldr	r3, [pc, #80]	; (800de0c <vTaskStartScheduler+0xdc>)
 800ddba:	2201      	movs	r2, #1
 800ddbc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ddbe:	4b14      	ldr	r3, [pc, #80]	; (800de10 <vTaskStartScheduler+0xe0>)
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800ddc4:	f7f5 fb38 	bl	8003438 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ddc8:	f7fe fda2 	bl	800c910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ddcc:	e00e      	b.n	800ddec <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ddce:	697b      	ldr	r3, [r7, #20]
 800ddd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddd4:	d10a      	bne.n	800ddec <vTaskStartScheduler+0xbc>
	__asm volatile
 800ddd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddda:	f383 8811 	msr	BASEPRI, r3
 800ddde:	f3bf 8f6f 	isb	sy
 800dde2:	f3bf 8f4f 	dsb	sy
 800dde6:	60fb      	str	r3, [r7, #12]
}
 800dde8:	bf00      	nop
 800ddea:	e7fe      	b.n	800ddea <vTaskStartScheduler+0xba>
}
 800ddec:	bf00      	nop
 800ddee:	3718      	adds	r7, #24
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}
 800ddf4:	0800f768 	.word	0x0800f768
 800ddf8:	0800e5d5 	.word	0x0800e5d5
 800ddfc:	2000b4e0 	.word	0x2000b4e0
 800de00:	2000afe4 	.word	0x2000afe4
 800de04:	20000010 	.word	0x20000010
 800de08:	2000b4dc 	.word	0x2000b4dc
 800de0c:	2000b4c8 	.word	0x2000b4c8
 800de10:	2000b4c0 	.word	0x2000b4c0

0800de14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800de14:	b480      	push	{r7}
 800de16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800de18:	4b04      	ldr	r3, [pc, #16]	; (800de2c <vTaskSuspendAll+0x18>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	3301      	adds	r3, #1
 800de1e:	4a03      	ldr	r2, [pc, #12]	; (800de2c <vTaskSuspendAll+0x18>)
 800de20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800de22:	bf00      	nop
 800de24:	46bd      	mov	sp, r7
 800de26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2a:	4770      	bx	lr
 800de2c:	2000b4e4 	.word	0x2000b4e4

0800de30 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800de30:	b480      	push	{r7}
 800de32:	b083      	sub	sp, #12
 800de34:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800de36:	2300      	movs	r3, #0
 800de38:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800de3a:	4b14      	ldr	r3, [pc, #80]	; (800de8c <prvGetExpectedIdleTime+0x5c>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d001      	beq.n	800de46 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800de42:	2301      	movs	r3, #1
 800de44:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800de46:	4b12      	ldr	r3, [pc, #72]	; (800de90 <prvGetExpectedIdleTime+0x60>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d002      	beq.n	800de56 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800de50:	2300      	movs	r3, #0
 800de52:	607b      	str	r3, [r7, #4]
 800de54:	e012      	b.n	800de7c <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800de56:	4b0f      	ldr	r3, [pc, #60]	; (800de94 <prvGetExpectedIdleTime+0x64>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	2b01      	cmp	r3, #1
 800de5c:	d902      	bls.n	800de64 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800de5e:	2300      	movs	r3, #0
 800de60:	607b      	str	r3, [r7, #4]
 800de62:	e00b      	b.n	800de7c <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d002      	beq.n	800de70 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800de6a:	2300      	movs	r3, #0
 800de6c:	607b      	str	r3, [r7, #4]
 800de6e:	e005      	b.n	800de7c <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800de70:	4b09      	ldr	r3, [pc, #36]	; (800de98 <prvGetExpectedIdleTime+0x68>)
 800de72:	681a      	ldr	r2, [r3, #0]
 800de74:	4b09      	ldr	r3, [pc, #36]	; (800de9c <prvGetExpectedIdleTime+0x6c>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	1ad3      	subs	r3, r2, r3
 800de7a:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800de7c:	687b      	ldr	r3, [r7, #4]
	}
 800de7e:	4618      	mov	r0, r3
 800de80:	370c      	adds	r7, #12
 800de82:	46bd      	mov	sp, r7
 800de84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de88:	4770      	bx	lr
 800de8a:	bf00      	nop
 800de8c:	2000b4c4 	.word	0x2000b4c4
 800de90:	2000afe4 	.word	0x2000afe4
 800de94:	2000afe8 	.word	0x2000afe8
 800de98:	2000b4dc 	.word	0x2000b4dc
 800de9c:	2000b4c0 	.word	0x2000b4c0

0800dea0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b084      	sub	sp, #16
 800dea4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dea6:	2300      	movs	r3, #0
 800dea8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800deaa:	2300      	movs	r3, #0
 800deac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800deae:	4b42      	ldr	r3, [pc, #264]	; (800dfb8 <xTaskResumeAll+0x118>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d10a      	bne.n	800decc <xTaskResumeAll+0x2c>
	__asm volatile
 800deb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deba:	f383 8811 	msr	BASEPRI, r3
 800debe:	f3bf 8f6f 	isb	sy
 800dec2:	f3bf 8f4f 	dsb	sy
 800dec6:	603b      	str	r3, [r7, #0]
}
 800dec8:	bf00      	nop
 800deca:	e7fe      	b.n	800deca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800decc:	f7fe fdc2 	bl	800ca54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ded0:	4b39      	ldr	r3, [pc, #228]	; (800dfb8 <xTaskResumeAll+0x118>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	3b01      	subs	r3, #1
 800ded6:	4a38      	ldr	r2, [pc, #224]	; (800dfb8 <xTaskResumeAll+0x118>)
 800ded8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800deda:	4b37      	ldr	r3, [pc, #220]	; (800dfb8 <xTaskResumeAll+0x118>)
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d162      	bne.n	800dfa8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dee2:	4b36      	ldr	r3, [pc, #216]	; (800dfbc <xTaskResumeAll+0x11c>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d05e      	beq.n	800dfa8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800deea:	e02f      	b.n	800df4c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800deec:	4b34      	ldr	r3, [pc, #208]	; (800dfc0 <xTaskResumeAll+0x120>)
 800deee:	68db      	ldr	r3, [r3, #12]
 800def0:	68db      	ldr	r3, [r3, #12]
 800def2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	3318      	adds	r3, #24
 800def8:	4618      	mov	r0, r3
 800defa:	f7fe fc57 	bl	800c7ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	3304      	adds	r3, #4
 800df02:	4618      	mov	r0, r3
 800df04:	f7fe fc52 	bl	800c7ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df0c:	4b2d      	ldr	r3, [pc, #180]	; (800dfc4 <xTaskResumeAll+0x124>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	429a      	cmp	r2, r3
 800df12:	d903      	bls.n	800df1c <xTaskResumeAll+0x7c>
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df18:	4a2a      	ldr	r2, [pc, #168]	; (800dfc4 <xTaskResumeAll+0x124>)
 800df1a:	6013      	str	r3, [r2, #0]
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df20:	4613      	mov	r3, r2
 800df22:	009b      	lsls	r3, r3, #2
 800df24:	4413      	add	r3, r2
 800df26:	009b      	lsls	r3, r3, #2
 800df28:	4a27      	ldr	r2, [pc, #156]	; (800dfc8 <xTaskResumeAll+0x128>)
 800df2a:	441a      	add	r2, r3
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	3304      	adds	r3, #4
 800df30:	4619      	mov	r1, r3
 800df32:	4610      	mov	r0, r2
 800df34:	f7fe fbdd 	bl	800c6f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df3c:	4b23      	ldr	r3, [pc, #140]	; (800dfcc <xTaskResumeAll+0x12c>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df42:	429a      	cmp	r2, r3
 800df44:	d302      	bcc.n	800df4c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800df46:	4b22      	ldr	r3, [pc, #136]	; (800dfd0 <xTaskResumeAll+0x130>)
 800df48:	2201      	movs	r2, #1
 800df4a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800df4c:	4b1c      	ldr	r3, [pc, #112]	; (800dfc0 <xTaskResumeAll+0x120>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d1cb      	bne.n	800deec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d001      	beq.n	800df5e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800df5a:	f000 fc4f 	bl	800e7fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800df5e:	4b1d      	ldr	r3, [pc, #116]	; (800dfd4 <xTaskResumeAll+0x134>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d010      	beq.n	800df8c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800df6a:	f000 f86f 	bl	800e04c <xTaskIncrementTick>
 800df6e:	4603      	mov	r3, r0
 800df70:	2b00      	cmp	r3, #0
 800df72:	d002      	beq.n	800df7a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800df74:	4b16      	ldr	r3, [pc, #88]	; (800dfd0 <xTaskResumeAll+0x130>)
 800df76:	2201      	movs	r2, #1
 800df78:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	3b01      	subs	r3, #1
 800df7e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d1f1      	bne.n	800df6a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800df86:	4b13      	ldr	r3, [pc, #76]	; (800dfd4 <xTaskResumeAll+0x134>)
 800df88:	2200      	movs	r2, #0
 800df8a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800df8c:	4b10      	ldr	r3, [pc, #64]	; (800dfd0 <xTaskResumeAll+0x130>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d009      	beq.n	800dfa8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800df94:	2301      	movs	r3, #1
 800df96:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800df98:	4b0f      	ldr	r3, [pc, #60]	; (800dfd8 <xTaskResumeAll+0x138>)
 800df9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df9e:	601a      	str	r2, [r3, #0]
 800dfa0:	f3bf 8f4f 	dsb	sy
 800dfa4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dfa8:	f7fe fd84 	bl	800cab4 <vPortExitCritical>

	return xAlreadyYielded;
 800dfac:	68bb      	ldr	r3, [r7, #8]
}
 800dfae:	4618      	mov	r0, r3
 800dfb0:	3710      	adds	r7, #16
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}
 800dfb6:	bf00      	nop
 800dfb8:	2000b4e4 	.word	0x2000b4e4
 800dfbc:	2000b4bc 	.word	0x2000b4bc
 800dfc0:	2000b478 	.word	0x2000b478
 800dfc4:	2000b4c4 	.word	0x2000b4c4
 800dfc8:	2000afe8 	.word	0x2000afe8
 800dfcc:	2000afe4 	.word	0x2000afe4
 800dfd0:	2000b4d0 	.word	0x2000b4d0
 800dfd4:	2000b4cc 	.word	0x2000b4cc
 800dfd8:	e000ed04 	.word	0xe000ed04

0800dfdc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dfdc:	b480      	push	{r7}
 800dfde:	b083      	sub	sp, #12
 800dfe0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dfe2:	4b05      	ldr	r3, [pc, #20]	; (800dff8 <xTaskGetTickCount+0x1c>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dfe8:	687b      	ldr	r3, [r7, #4]
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	370c      	adds	r7, #12
 800dfee:	46bd      	mov	sp, r7
 800dff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff4:	4770      	bx	lr
 800dff6:	bf00      	nop
 800dff8:	2000b4c0 	.word	0x2000b4c0

0800dffc <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800dffc:	b480      	push	{r7}
 800dffe:	b085      	sub	sp, #20
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800e004:	4b0f      	ldr	r3, [pc, #60]	; (800e044 <vTaskStepTick+0x48>)
 800e006:	681a      	ldr	r2, [r3, #0]
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	441a      	add	r2, r3
 800e00c:	4b0e      	ldr	r3, [pc, #56]	; (800e048 <vTaskStepTick+0x4c>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	429a      	cmp	r2, r3
 800e012:	d90a      	bls.n	800e02a <vTaskStepTick+0x2e>
	__asm volatile
 800e014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e018:	f383 8811 	msr	BASEPRI, r3
 800e01c:	f3bf 8f6f 	isb	sy
 800e020:	f3bf 8f4f 	dsb	sy
 800e024:	60fb      	str	r3, [r7, #12]
}
 800e026:	bf00      	nop
 800e028:	e7fe      	b.n	800e028 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800e02a:	4b06      	ldr	r3, [pc, #24]	; (800e044 <vTaskStepTick+0x48>)
 800e02c:	681a      	ldr	r2, [r3, #0]
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	4413      	add	r3, r2
 800e032:	4a04      	ldr	r2, [pc, #16]	; (800e044 <vTaskStepTick+0x48>)
 800e034:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800e036:	bf00      	nop
 800e038:	3714      	adds	r7, #20
 800e03a:	46bd      	mov	sp, r7
 800e03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e040:	4770      	bx	lr
 800e042:	bf00      	nop
 800e044:	2000b4c0 	.word	0x2000b4c0
 800e048:	2000b4dc 	.word	0x2000b4dc

0800e04c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b086      	sub	sp, #24
 800e050:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e052:	2300      	movs	r3, #0
 800e054:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e056:	4b53      	ldr	r3, [pc, #332]	; (800e1a4 <xTaskIncrementTick+0x158>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	f040 8095 	bne.w	800e18a <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e060:	4b51      	ldr	r3, [pc, #324]	; (800e1a8 <xTaskIncrementTick+0x15c>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	3301      	adds	r3, #1
 800e066:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e068:	4a4f      	ldr	r2, [pc, #316]	; (800e1a8 <xTaskIncrementTick+0x15c>)
 800e06a:	693b      	ldr	r3, [r7, #16]
 800e06c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e06e:	693b      	ldr	r3, [r7, #16]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d120      	bne.n	800e0b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e074:	4b4d      	ldr	r3, [pc, #308]	; (800e1ac <xTaskIncrementTick+0x160>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d00a      	beq.n	800e094 <xTaskIncrementTick+0x48>
	__asm volatile
 800e07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e082:	f383 8811 	msr	BASEPRI, r3
 800e086:	f3bf 8f6f 	isb	sy
 800e08a:	f3bf 8f4f 	dsb	sy
 800e08e:	603b      	str	r3, [r7, #0]
}
 800e090:	bf00      	nop
 800e092:	e7fe      	b.n	800e092 <xTaskIncrementTick+0x46>
 800e094:	4b45      	ldr	r3, [pc, #276]	; (800e1ac <xTaskIncrementTick+0x160>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	60fb      	str	r3, [r7, #12]
 800e09a:	4b45      	ldr	r3, [pc, #276]	; (800e1b0 <xTaskIncrementTick+0x164>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	4a43      	ldr	r2, [pc, #268]	; (800e1ac <xTaskIncrementTick+0x160>)
 800e0a0:	6013      	str	r3, [r2, #0]
 800e0a2:	4a43      	ldr	r2, [pc, #268]	; (800e1b0 <xTaskIncrementTick+0x164>)
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	6013      	str	r3, [r2, #0]
 800e0a8:	4b42      	ldr	r3, [pc, #264]	; (800e1b4 <xTaskIncrementTick+0x168>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	3301      	adds	r3, #1
 800e0ae:	4a41      	ldr	r2, [pc, #260]	; (800e1b4 <xTaskIncrementTick+0x168>)
 800e0b0:	6013      	str	r3, [r2, #0]
 800e0b2:	f000 fba3 	bl	800e7fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e0b6:	4b40      	ldr	r3, [pc, #256]	; (800e1b8 <xTaskIncrementTick+0x16c>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	693a      	ldr	r2, [r7, #16]
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d349      	bcc.n	800e154 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e0c0:	4b3a      	ldr	r3, [pc, #232]	; (800e1ac <xTaskIncrementTick+0x160>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d104      	bne.n	800e0d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0ca:	4b3b      	ldr	r3, [pc, #236]	; (800e1b8 <xTaskIncrementTick+0x16c>)
 800e0cc:	f04f 32ff 	mov.w	r2, #4294967295
 800e0d0:	601a      	str	r2, [r3, #0]
					break;
 800e0d2:	e03f      	b.n	800e154 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0d4:	4b35      	ldr	r3, [pc, #212]	; (800e1ac <xTaskIncrementTick+0x160>)
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	68db      	ldr	r3, [r3, #12]
 800e0da:	68db      	ldr	r3, [r3, #12]
 800e0dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	685b      	ldr	r3, [r3, #4]
 800e0e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e0e4:	693a      	ldr	r2, [r7, #16]
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	d203      	bcs.n	800e0f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e0ec:	4a32      	ldr	r2, [pc, #200]	; (800e1b8 <xTaskIncrementTick+0x16c>)
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e0f2:	e02f      	b.n	800e154 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	3304      	adds	r3, #4
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f7fe fb57 	bl	800c7ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e0fe:	68bb      	ldr	r3, [r7, #8]
 800e100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e102:	2b00      	cmp	r3, #0
 800e104:	d004      	beq.n	800e110 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	3318      	adds	r3, #24
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7fe fb4e 	bl	800c7ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e114:	4b29      	ldr	r3, [pc, #164]	; (800e1bc <xTaskIncrementTick+0x170>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	429a      	cmp	r2, r3
 800e11a:	d903      	bls.n	800e124 <xTaskIncrementTick+0xd8>
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e120:	4a26      	ldr	r2, [pc, #152]	; (800e1bc <xTaskIncrementTick+0x170>)
 800e122:	6013      	str	r3, [r2, #0]
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e128:	4613      	mov	r3, r2
 800e12a:	009b      	lsls	r3, r3, #2
 800e12c:	4413      	add	r3, r2
 800e12e:	009b      	lsls	r3, r3, #2
 800e130:	4a23      	ldr	r2, [pc, #140]	; (800e1c0 <xTaskIncrementTick+0x174>)
 800e132:	441a      	add	r2, r3
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	3304      	adds	r3, #4
 800e138:	4619      	mov	r1, r3
 800e13a:	4610      	mov	r0, r2
 800e13c:	f7fe fad9 	bl	800c6f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e140:	68bb      	ldr	r3, [r7, #8]
 800e142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e144:	4b1f      	ldr	r3, [pc, #124]	; (800e1c4 <xTaskIncrementTick+0x178>)
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e14a:	429a      	cmp	r2, r3
 800e14c:	d3b8      	bcc.n	800e0c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e14e:	2301      	movs	r3, #1
 800e150:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e152:	e7b5      	b.n	800e0c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e154:	4b1b      	ldr	r3, [pc, #108]	; (800e1c4 <xTaskIncrementTick+0x178>)
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e15a:	4919      	ldr	r1, [pc, #100]	; (800e1c0 <xTaskIncrementTick+0x174>)
 800e15c:	4613      	mov	r3, r2
 800e15e:	009b      	lsls	r3, r3, #2
 800e160:	4413      	add	r3, r2
 800e162:	009b      	lsls	r3, r3, #2
 800e164:	440b      	add	r3, r1
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	2b01      	cmp	r3, #1
 800e16a:	d901      	bls.n	800e170 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e16c:	2301      	movs	r3, #1
 800e16e:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 800e170:	4b15      	ldr	r3, [pc, #84]	; (800e1c8 <xTaskIncrementTick+0x17c>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d101      	bne.n	800e17c <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 800e178:	f7f5 f974 	bl	8003464 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e17c:	4b13      	ldr	r3, [pc, #76]	; (800e1cc <xTaskIncrementTick+0x180>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d009      	beq.n	800e198 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 800e184:	2301      	movs	r3, #1
 800e186:	617b      	str	r3, [r7, #20]
 800e188:	e006      	b.n	800e198 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e18a:	4b0f      	ldr	r3, [pc, #60]	; (800e1c8 <xTaskIncrementTick+0x17c>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	3301      	adds	r3, #1
 800e190:	4a0d      	ldr	r2, [pc, #52]	; (800e1c8 <xTaskIncrementTick+0x17c>)
 800e192:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800e194:	f7f5 f966 	bl	8003464 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 800e198:	697b      	ldr	r3, [r7, #20]
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	3718      	adds	r7, #24
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}
 800e1a2:	bf00      	nop
 800e1a4:	2000b4e4 	.word	0x2000b4e4
 800e1a8:	2000b4c0 	.word	0x2000b4c0
 800e1ac:	2000b470 	.word	0x2000b470
 800e1b0:	2000b474 	.word	0x2000b474
 800e1b4:	2000b4d4 	.word	0x2000b4d4
 800e1b8:	2000b4dc 	.word	0x2000b4dc
 800e1bc:	2000b4c4 	.word	0x2000b4c4
 800e1c0:	2000afe8 	.word	0x2000afe8
 800e1c4:	2000afe4 	.word	0x2000afe4
 800e1c8:	2000b4cc 	.word	0x2000b4cc
 800e1cc:	2000b4d0 	.word	0x2000b4d0

0800e1d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b086      	sub	sp, #24
 800e1d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e1d6:	4b51      	ldr	r3, [pc, #324]	; (800e31c <vTaskSwitchContext+0x14c>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d003      	beq.n	800e1e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e1de:	4b50      	ldr	r3, [pc, #320]	; (800e320 <vTaskSwitchContext+0x150>)
 800e1e0:	2201      	movs	r2, #1
 800e1e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e1e4:	e095      	b.n	800e312 <vTaskSwitchContext+0x142>
		xYieldPending = pdFALSE;
 800e1e6:	4b4e      	ldr	r3, [pc, #312]	; (800e320 <vTaskSwitchContext+0x150>)
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e1ec:	f7f5 f92b 	bl	8003446 <getRunTimeCounterValue>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	4a4c      	ldr	r2, [pc, #304]	; (800e324 <vTaskSwitchContext+0x154>)
 800e1f4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e1f6:	4b4b      	ldr	r3, [pc, #300]	; (800e324 <vTaskSwitchContext+0x154>)
 800e1f8:	681a      	ldr	r2, [r3, #0]
 800e1fa:	4b4b      	ldr	r3, [pc, #300]	; (800e328 <vTaskSwitchContext+0x158>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	429a      	cmp	r2, r3
 800e200:	d90b      	bls.n	800e21a <vTaskSwitchContext+0x4a>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e202:	4b4a      	ldr	r3, [pc, #296]	; (800e32c <vTaskSwitchContext+0x15c>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
 800e20a:	4a46      	ldr	r2, [pc, #280]	; (800e324 <vTaskSwitchContext+0x154>)
 800e20c:	6810      	ldr	r0, [r2, #0]
 800e20e:	4a46      	ldr	r2, [pc, #280]	; (800e328 <vTaskSwitchContext+0x158>)
 800e210:	6812      	ldr	r2, [r2, #0]
 800e212:	1a82      	subs	r2, r0, r2
 800e214:	440a      	add	r2, r1
 800e216:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			ulTaskSwitchedInTime = ulTotalRunTime;
 800e21a:	4b42      	ldr	r3, [pc, #264]	; (800e324 <vTaskSwitchContext+0x154>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	4a42      	ldr	r2, [pc, #264]	; (800e328 <vTaskSwitchContext+0x158>)
 800e220:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800e222:	4b42      	ldr	r3, [pc, #264]	; (800e32c <vTaskSwitchContext+0x15c>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e228:	613b      	str	r3, [r7, #16]
 800e22a:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800e22e:	60fb      	str	r3, [r7, #12]
 800e230:	693b      	ldr	r3, [r7, #16]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	68fa      	ldr	r2, [r7, #12]
 800e236:	429a      	cmp	r2, r3
 800e238:	d111      	bne.n	800e25e <vTaskSwitchContext+0x8e>
 800e23a:	693b      	ldr	r3, [r7, #16]
 800e23c:	3304      	adds	r3, #4
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	68fa      	ldr	r2, [r7, #12]
 800e242:	429a      	cmp	r2, r3
 800e244:	d10b      	bne.n	800e25e <vTaskSwitchContext+0x8e>
 800e246:	693b      	ldr	r3, [r7, #16]
 800e248:	3308      	adds	r3, #8
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	68fa      	ldr	r2, [r7, #12]
 800e24e:	429a      	cmp	r2, r3
 800e250:	d105      	bne.n	800e25e <vTaskSwitchContext+0x8e>
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	330c      	adds	r3, #12
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	68fa      	ldr	r2, [r7, #12]
 800e25a:	429a      	cmp	r2, r3
 800e25c:	d008      	beq.n	800e270 <vTaskSwitchContext+0xa0>
 800e25e:	4b33      	ldr	r3, [pc, #204]	; (800e32c <vTaskSwitchContext+0x15c>)
 800e260:	681a      	ldr	r2, [r3, #0]
 800e262:	4b32      	ldr	r3, [pc, #200]	; (800e32c <vTaskSwitchContext+0x15c>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	3334      	adds	r3, #52	; 0x34
 800e268:	4619      	mov	r1, r3
 800e26a:	4610      	mov	r0, r2
 800e26c:	f7f5 f901 	bl	8003472 <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 800e270:	4b2e      	ldr	r3, [pc, #184]	; (800e32c <vTaskSwitchContext+0x15c>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	4a2e      	ldr	r2, [pc, #184]	; (800e330 <vTaskSwitchContext+0x160>)
 800e276:	6812      	ldr	r2, [r2, #0]
 800e278:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e27c:	4b2d      	ldr	r3, [pc, #180]	; (800e334 <vTaskSwitchContext+0x164>)
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	617b      	str	r3, [r7, #20]
 800e282:	e010      	b.n	800e2a6 <vTaskSwitchContext+0xd6>
 800e284:	697b      	ldr	r3, [r7, #20]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d10a      	bne.n	800e2a0 <vTaskSwitchContext+0xd0>
	__asm volatile
 800e28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e28e:	f383 8811 	msr	BASEPRI, r3
 800e292:	f3bf 8f6f 	isb	sy
 800e296:	f3bf 8f4f 	dsb	sy
 800e29a:	607b      	str	r3, [r7, #4]
}
 800e29c:	bf00      	nop
 800e29e:	e7fe      	b.n	800e29e <vTaskSwitchContext+0xce>
 800e2a0:	697b      	ldr	r3, [r7, #20]
 800e2a2:	3b01      	subs	r3, #1
 800e2a4:	617b      	str	r3, [r7, #20]
 800e2a6:	4924      	ldr	r1, [pc, #144]	; (800e338 <vTaskSwitchContext+0x168>)
 800e2a8:	697a      	ldr	r2, [r7, #20]
 800e2aa:	4613      	mov	r3, r2
 800e2ac:	009b      	lsls	r3, r3, #2
 800e2ae:	4413      	add	r3, r2
 800e2b0:	009b      	lsls	r3, r3, #2
 800e2b2:	440b      	add	r3, r1
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d0e4      	beq.n	800e284 <vTaskSwitchContext+0xb4>
 800e2ba:	697a      	ldr	r2, [r7, #20]
 800e2bc:	4613      	mov	r3, r2
 800e2be:	009b      	lsls	r3, r3, #2
 800e2c0:	4413      	add	r3, r2
 800e2c2:	009b      	lsls	r3, r3, #2
 800e2c4:	4a1c      	ldr	r2, [pc, #112]	; (800e338 <vTaskSwitchContext+0x168>)
 800e2c6:	4413      	add	r3, r2
 800e2c8:	60bb      	str	r3, [r7, #8]
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	685b      	ldr	r3, [r3, #4]
 800e2ce:	685a      	ldr	r2, [r3, #4]
 800e2d0:	68bb      	ldr	r3, [r7, #8]
 800e2d2:	605a      	str	r2, [r3, #4]
 800e2d4:	68bb      	ldr	r3, [r7, #8]
 800e2d6:	685a      	ldr	r2, [r3, #4]
 800e2d8:	68bb      	ldr	r3, [r7, #8]
 800e2da:	3308      	adds	r3, #8
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d104      	bne.n	800e2ea <vTaskSwitchContext+0x11a>
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	685b      	ldr	r3, [r3, #4]
 800e2e4:	685a      	ldr	r2, [r3, #4]
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	605a      	str	r2, [r3, #4]
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	685b      	ldr	r3, [r3, #4]
 800e2ee:	68db      	ldr	r3, [r3, #12]
 800e2f0:	4a0e      	ldr	r2, [pc, #56]	; (800e32c <vTaskSwitchContext+0x15c>)
 800e2f2:	6013      	str	r3, [r2, #0]
 800e2f4:	4a0f      	ldr	r2, [pc, #60]	; (800e334 <vTaskSwitchContext+0x164>)
 800e2f6:	697b      	ldr	r3, [r7, #20]
 800e2f8:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 800e2fa:	4b0c      	ldr	r3, [pc, #48]	; (800e32c <vTaskSwitchContext+0x15c>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800e302:	4a0b      	ldr	r2, [pc, #44]	; (800e330 <vTaskSwitchContext+0x160>)
 800e304:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e306:	4b09      	ldr	r3, [pc, #36]	; (800e32c <vTaskSwitchContext+0x15c>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e30e:	4a0b      	ldr	r2, [pc, #44]	; (800e33c <vTaskSwitchContext+0x16c>)
 800e310:	6013      	str	r3, [r2, #0]
}
 800e312:	bf00      	nop
 800e314:	3718      	adds	r7, #24
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}
 800e31a:	bf00      	nop
 800e31c:	2000b4e4 	.word	0x2000b4e4
 800e320:	2000b4d0 	.word	0x2000b4d0
 800e324:	2000b4ec 	.word	0x2000b4ec
 800e328:	2000b4e8 	.word	0x2000b4e8
 800e32c:	2000afe4 	.word	0x2000afe4
 800e330:	2000b4b8 	.word	0x2000b4b8
 800e334:	2000b4c4 	.word	0x2000b4c4
 800e338:	2000afe8 	.word	0x2000afe8
 800e33c:	20000010 	.word	0x20000010

0800e340 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b084      	sub	sp, #16
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
 800e348:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d10a      	bne.n	800e366 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e354:	f383 8811 	msr	BASEPRI, r3
 800e358:	f3bf 8f6f 	isb	sy
 800e35c:	f3bf 8f4f 	dsb	sy
 800e360:	60fb      	str	r3, [r7, #12]
}
 800e362:	bf00      	nop
 800e364:	e7fe      	b.n	800e364 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e366:	4b07      	ldr	r3, [pc, #28]	; (800e384 <vTaskPlaceOnEventList+0x44>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	3318      	adds	r3, #24
 800e36c:	4619      	mov	r1, r3
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f7fe f9e3 	bl	800c73a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e374:	2101      	movs	r1, #1
 800e376:	6838      	ldr	r0, [r7, #0]
 800e378:	f000 faf2 	bl	800e960 <prvAddCurrentTaskToDelayedList>
}
 800e37c:	bf00      	nop
 800e37e:	3710      	adds	r7, #16
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}
 800e384:	2000afe4 	.word	0x2000afe4

0800e388 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b086      	sub	sp, #24
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	60f8      	str	r0, [r7, #12]
 800e390:	60b9      	str	r1, [r7, #8]
 800e392:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d10a      	bne.n	800e3b0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e39e:	f383 8811 	msr	BASEPRI, r3
 800e3a2:	f3bf 8f6f 	isb	sy
 800e3a6:	f3bf 8f4f 	dsb	sy
 800e3aa:	617b      	str	r3, [r7, #20]
}
 800e3ac:	bf00      	nop
 800e3ae:	e7fe      	b.n	800e3ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e3b0:	4b0a      	ldr	r3, [pc, #40]	; (800e3dc <vTaskPlaceOnEventListRestricted+0x54>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	3318      	adds	r3, #24
 800e3b6:	4619      	mov	r1, r3
 800e3b8:	68f8      	ldr	r0, [r7, #12]
 800e3ba:	f7fe f99a 	bl	800c6f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d002      	beq.n	800e3ca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e3c4:	f04f 33ff 	mov.w	r3, #4294967295
 800e3c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e3ca:	6879      	ldr	r1, [r7, #4]
 800e3cc:	68b8      	ldr	r0, [r7, #8]
 800e3ce:	f000 fac7 	bl	800e960 <prvAddCurrentTaskToDelayedList>
	}
 800e3d2:	bf00      	nop
 800e3d4:	3718      	adds	r7, #24
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}
 800e3da:	bf00      	nop
 800e3dc:	2000afe4 	.word	0x2000afe4

0800e3e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b086      	sub	sp, #24
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	68db      	ldr	r3, [r3, #12]
 800e3ec:	68db      	ldr	r3, [r3, #12]
 800e3ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e3f0:	693b      	ldr	r3, [r7, #16]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d10a      	bne.n	800e40c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3fa:	f383 8811 	msr	BASEPRI, r3
 800e3fe:	f3bf 8f6f 	isb	sy
 800e402:	f3bf 8f4f 	dsb	sy
 800e406:	60fb      	str	r3, [r7, #12]
}
 800e408:	bf00      	nop
 800e40a:	e7fe      	b.n	800e40a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e40c:	693b      	ldr	r3, [r7, #16]
 800e40e:	3318      	adds	r3, #24
 800e410:	4618      	mov	r0, r3
 800e412:	f7fe f9cb 	bl	800c7ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e416:	4b1f      	ldr	r3, [pc, #124]	; (800e494 <xTaskRemoveFromEventList+0xb4>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d11f      	bne.n	800e45e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e41e:	693b      	ldr	r3, [r7, #16]
 800e420:	3304      	adds	r3, #4
 800e422:	4618      	mov	r0, r3
 800e424:	f7fe f9c2 	bl	800c7ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e428:	693b      	ldr	r3, [r7, #16]
 800e42a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e42c:	4b1a      	ldr	r3, [pc, #104]	; (800e498 <xTaskRemoveFromEventList+0xb8>)
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	429a      	cmp	r2, r3
 800e432:	d903      	bls.n	800e43c <xTaskRemoveFromEventList+0x5c>
 800e434:	693b      	ldr	r3, [r7, #16]
 800e436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e438:	4a17      	ldr	r2, [pc, #92]	; (800e498 <xTaskRemoveFromEventList+0xb8>)
 800e43a:	6013      	str	r3, [r2, #0]
 800e43c:	693b      	ldr	r3, [r7, #16]
 800e43e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e440:	4613      	mov	r3, r2
 800e442:	009b      	lsls	r3, r3, #2
 800e444:	4413      	add	r3, r2
 800e446:	009b      	lsls	r3, r3, #2
 800e448:	4a14      	ldr	r2, [pc, #80]	; (800e49c <xTaskRemoveFromEventList+0xbc>)
 800e44a:	441a      	add	r2, r3
 800e44c:	693b      	ldr	r3, [r7, #16]
 800e44e:	3304      	adds	r3, #4
 800e450:	4619      	mov	r1, r3
 800e452:	4610      	mov	r0, r2
 800e454:	f7fe f94d 	bl	800c6f2 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800e458:	f000 f9d0 	bl	800e7fc <prvResetNextTaskUnblockTime>
 800e45c:	e005      	b.n	800e46a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	3318      	adds	r3, #24
 800e462:	4619      	mov	r1, r3
 800e464:	480e      	ldr	r0, [pc, #56]	; (800e4a0 <xTaskRemoveFromEventList+0xc0>)
 800e466:	f7fe f944 	bl	800c6f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e46a:	693b      	ldr	r3, [r7, #16]
 800e46c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e46e:	4b0d      	ldr	r3, [pc, #52]	; (800e4a4 <xTaskRemoveFromEventList+0xc4>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e474:	429a      	cmp	r2, r3
 800e476:	d905      	bls.n	800e484 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e478:	2301      	movs	r3, #1
 800e47a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e47c:	4b0a      	ldr	r3, [pc, #40]	; (800e4a8 <xTaskRemoveFromEventList+0xc8>)
 800e47e:	2201      	movs	r2, #1
 800e480:	601a      	str	r2, [r3, #0]
 800e482:	e001      	b.n	800e488 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800e484:	2300      	movs	r3, #0
 800e486:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e488:	697b      	ldr	r3, [r7, #20]
}
 800e48a:	4618      	mov	r0, r3
 800e48c:	3718      	adds	r7, #24
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}
 800e492:	bf00      	nop
 800e494:	2000b4e4 	.word	0x2000b4e4
 800e498:	2000b4c4 	.word	0x2000b4c4
 800e49c:	2000afe8 	.word	0x2000afe8
 800e4a0:	2000b478 	.word	0x2000b478
 800e4a4:	2000afe4 	.word	0x2000afe4
 800e4a8:	2000b4d0 	.word	0x2000b4d0

0800e4ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e4ac:	b480      	push	{r7}
 800e4ae:	b083      	sub	sp, #12
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e4b4:	4b06      	ldr	r3, [pc, #24]	; (800e4d0 <vTaskInternalSetTimeOutState+0x24>)
 800e4b6:	681a      	ldr	r2, [r3, #0]
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e4bc:	4b05      	ldr	r3, [pc, #20]	; (800e4d4 <vTaskInternalSetTimeOutState+0x28>)
 800e4be:	681a      	ldr	r2, [r3, #0]
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	605a      	str	r2, [r3, #4]
}
 800e4c4:	bf00      	nop
 800e4c6:	370c      	adds	r7, #12
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ce:	4770      	bx	lr
 800e4d0:	2000b4d4 	.word	0x2000b4d4
 800e4d4:	2000b4c0 	.word	0x2000b4c0

0800e4d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b088      	sub	sp, #32
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d10a      	bne.n	800e4fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ec:	f383 8811 	msr	BASEPRI, r3
 800e4f0:	f3bf 8f6f 	isb	sy
 800e4f4:	f3bf 8f4f 	dsb	sy
 800e4f8:	613b      	str	r3, [r7, #16]
}
 800e4fa:	bf00      	nop
 800e4fc:	e7fe      	b.n	800e4fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d10a      	bne.n	800e51a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e508:	f383 8811 	msr	BASEPRI, r3
 800e50c:	f3bf 8f6f 	isb	sy
 800e510:	f3bf 8f4f 	dsb	sy
 800e514:	60fb      	str	r3, [r7, #12]
}
 800e516:	bf00      	nop
 800e518:	e7fe      	b.n	800e518 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e51a:	f7fe fa9b 	bl	800ca54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e51e:	4b24      	ldr	r3, [pc, #144]	; (800e5b0 <xTaskCheckForTimeOut+0xd8>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	685b      	ldr	r3, [r3, #4]
 800e528:	69ba      	ldr	r2, [r7, #24]
 800e52a:	1ad3      	subs	r3, r2, r3
 800e52c:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800e52e:	4b21      	ldr	r3, [pc, #132]	; (800e5b4 <xTaskCheckForTimeOut+0xdc>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	f893 31b6 	ldrb.w	r3, [r3, #438]	; 0x1b6
 800e536:	2b00      	cmp	r3, #0
 800e538:	d007      	beq.n	800e54a <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800e53a:	4b1e      	ldr	r3, [pc, #120]	; (800e5b4 <xTaskCheckForTimeOut+0xdc>)
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	2200      	movs	r2, #0
 800e540:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
				xReturn = pdTRUE;
 800e544:	2301      	movs	r3, #1
 800e546:	61fb      	str	r3, [r7, #28]
 800e548:	e02b      	b.n	800e5a2 <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e54a:	683b      	ldr	r3, [r7, #0]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e552:	d102      	bne.n	800e55a <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e554:	2300      	movs	r3, #0
 800e556:	61fb      	str	r3, [r7, #28]
 800e558:	e023      	b.n	800e5a2 <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681a      	ldr	r2, [r3, #0]
 800e55e:	4b16      	ldr	r3, [pc, #88]	; (800e5b8 <xTaskCheckForTimeOut+0xe0>)
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	429a      	cmp	r2, r3
 800e564:	d007      	beq.n	800e576 <xTaskCheckForTimeOut+0x9e>
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	685b      	ldr	r3, [r3, #4]
 800e56a:	69ba      	ldr	r2, [r7, #24]
 800e56c:	429a      	cmp	r2, r3
 800e56e:	d302      	bcc.n	800e576 <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e570:	2301      	movs	r3, #1
 800e572:	61fb      	str	r3, [r7, #28]
 800e574:	e015      	b.n	800e5a2 <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	697a      	ldr	r2, [r7, #20]
 800e57c:	429a      	cmp	r2, r3
 800e57e:	d20b      	bcs.n	800e598 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	681a      	ldr	r2, [r3, #0]
 800e584:	697b      	ldr	r3, [r7, #20]
 800e586:	1ad2      	subs	r2, r2, r3
 800e588:	683b      	ldr	r3, [r7, #0]
 800e58a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f7ff ff8d 	bl	800e4ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e592:	2300      	movs	r3, #0
 800e594:	61fb      	str	r3, [r7, #28]
 800e596:	e004      	b.n	800e5a2 <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	2200      	movs	r2, #0
 800e59c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e59e:	2301      	movs	r3, #1
 800e5a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e5a2:	f7fe fa87 	bl	800cab4 <vPortExitCritical>

	return xReturn;
 800e5a6:	69fb      	ldr	r3, [r7, #28]
}
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	3720      	adds	r7, #32
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	bd80      	pop	{r7, pc}
 800e5b0:	2000b4c0 	.word	0x2000b4c0
 800e5b4:	2000afe4 	.word	0x2000afe4
 800e5b8:	2000b4d4 	.word	0x2000b4d4

0800e5bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e5bc:	b480      	push	{r7}
 800e5be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e5c0:	4b03      	ldr	r3, [pc, #12]	; (800e5d0 <vTaskMissedYield+0x14>)
 800e5c2:	2201      	movs	r2, #1
 800e5c4:	601a      	str	r2, [r3, #0]
}
 800e5c6:	bf00      	nop
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ce:	4770      	bx	lr
 800e5d0:	2000b4d0 	.word	0x2000b4d0

0800e5d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b084      	sub	sp, #16
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e5dc:	f000 f8aa 	bl	800e734 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e5e0:	4b19      	ldr	r3, [pc, #100]	; (800e648 <prvIdleTask+0x74>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	2b01      	cmp	r3, #1
 800e5e6:	d907      	bls.n	800e5f8 <prvIdleTask+0x24>
			{
				taskYIELD();
 800e5e8:	4b18      	ldr	r3, [pc, #96]	; (800e64c <prvIdleTask+0x78>)
 800e5ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5ee:	601a      	str	r2, [r3, #0]
 800e5f0:	f3bf 8f4f 	dsb	sy
 800e5f4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800e5f8:	f7f4 ff2d 	bl	8003456 <vApplicationIdleHook>
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800e5fc:	f7ff fc18 	bl	800de30 <prvGetExpectedIdleTime>
 800e600:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	2b01      	cmp	r3, #1
 800e606:	d9e9      	bls.n	800e5dc <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800e608:	f7ff fc04 	bl	800de14 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800e60c:	4b10      	ldr	r3, [pc, #64]	; (800e650 <prvIdleTask+0x7c>)
 800e60e:	681a      	ldr	r2, [r3, #0]
 800e610:	4b10      	ldr	r3, [pc, #64]	; (800e654 <prvIdleTask+0x80>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	429a      	cmp	r2, r3
 800e616:	d20a      	bcs.n	800e62e <prvIdleTask+0x5a>
	__asm volatile
 800e618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e61c:	f383 8811 	msr	BASEPRI, r3
 800e620:	f3bf 8f6f 	isb	sy
 800e624:	f3bf 8f4f 	dsb	sy
 800e628:	60bb      	str	r3, [r7, #8]
}
 800e62a:	bf00      	nop
 800e62c:	e7fe      	b.n	800e62c <prvIdleTask+0x58>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800e62e:	f7ff fbff 	bl	800de30 <prvGetExpectedIdleTime>
 800e632:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	2b01      	cmp	r3, #1
 800e638:	d902      	bls.n	800e640 <prvIdleTask+0x6c>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800e63a:	68f8      	ldr	r0, [r7, #12]
 800e63c:	f7fe fabe 	bl	800cbbc <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800e640:	f7ff fc2e 	bl	800dea0 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800e644:	e7ca      	b.n	800e5dc <prvIdleTask+0x8>
 800e646:	bf00      	nop
 800e648:	2000afe8 	.word	0x2000afe8
 800e64c:	e000ed04 	.word	0xe000ed04
 800e650:	2000b4dc 	.word	0x2000b4dc
 800e654:	2000b4c0 	.word	0x2000b4c0

0800e658 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800e658:	b480      	push	{r7}
 800e65a:	b083      	sub	sp, #12
 800e65c:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800e65e:	2301      	movs	r3, #1
 800e660:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800e662:	2301      	movs	r3, #1
 800e664:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800e666:	4b0f      	ldr	r3, [pc, #60]	; (800e6a4 <eTaskConfirmSleepModeStatus+0x4c>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d002      	beq.n	800e674 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800e66e:	2300      	movs	r3, #0
 800e670:	71fb      	strb	r3, [r7, #7]
 800e672:	e010      	b.n	800e696 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800e674:	4b0c      	ldr	r3, [pc, #48]	; (800e6a8 <eTaskConfirmSleepModeStatus+0x50>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d002      	beq.n	800e682 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800e67c:	2300      	movs	r3, #0
 800e67e:	71fb      	strb	r3, [r7, #7]
 800e680:	e009      	b.n	800e696 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800e682:	4b0a      	ldr	r3, [pc, #40]	; (800e6ac <eTaskConfirmSleepModeStatus+0x54>)
 800e684:	681a      	ldr	r2, [r3, #0]
 800e686:	4b0a      	ldr	r3, [pc, #40]	; (800e6b0 <eTaskConfirmSleepModeStatus+0x58>)
 800e688:	6819      	ldr	r1, [r3, #0]
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	1acb      	subs	r3, r1, r3
 800e68e:	429a      	cmp	r2, r3
 800e690:	d101      	bne.n	800e696 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800e692:	2302      	movs	r3, #2
 800e694:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800e696:	79fb      	ldrb	r3, [r7, #7]
	}
 800e698:	4618      	mov	r0, r3
 800e69a:	370c      	adds	r7, #12
 800e69c:	46bd      	mov	sp, r7
 800e69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a2:	4770      	bx	lr
 800e6a4:	2000b478 	.word	0x2000b478
 800e6a8:	2000b4d0 	.word	0x2000b4d0
 800e6ac:	2000b4a4 	.word	0x2000b4a4
 800e6b0:	2000b4bc 	.word	0x2000b4bc

0800e6b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b082      	sub	sp, #8
 800e6b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	607b      	str	r3, [r7, #4]
 800e6be:	e00c      	b.n	800e6da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e6c0:	687a      	ldr	r2, [r7, #4]
 800e6c2:	4613      	mov	r3, r2
 800e6c4:	009b      	lsls	r3, r3, #2
 800e6c6:	4413      	add	r3, r2
 800e6c8:	009b      	lsls	r3, r3, #2
 800e6ca:	4a12      	ldr	r2, [pc, #72]	; (800e714 <prvInitialiseTaskLists+0x60>)
 800e6cc:	4413      	add	r3, r2
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f7fd ffe2 	bl	800c698 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	3301      	adds	r3, #1
 800e6d8:	607b      	str	r3, [r7, #4]
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	2b37      	cmp	r3, #55	; 0x37
 800e6de:	d9ef      	bls.n	800e6c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e6e0:	480d      	ldr	r0, [pc, #52]	; (800e718 <prvInitialiseTaskLists+0x64>)
 800e6e2:	f7fd ffd9 	bl	800c698 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e6e6:	480d      	ldr	r0, [pc, #52]	; (800e71c <prvInitialiseTaskLists+0x68>)
 800e6e8:	f7fd ffd6 	bl	800c698 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e6ec:	480c      	ldr	r0, [pc, #48]	; (800e720 <prvInitialiseTaskLists+0x6c>)
 800e6ee:	f7fd ffd3 	bl	800c698 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e6f2:	480c      	ldr	r0, [pc, #48]	; (800e724 <prvInitialiseTaskLists+0x70>)
 800e6f4:	f7fd ffd0 	bl	800c698 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e6f8:	480b      	ldr	r0, [pc, #44]	; (800e728 <prvInitialiseTaskLists+0x74>)
 800e6fa:	f7fd ffcd 	bl	800c698 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e6fe:	4b0b      	ldr	r3, [pc, #44]	; (800e72c <prvInitialiseTaskLists+0x78>)
 800e700:	4a05      	ldr	r2, [pc, #20]	; (800e718 <prvInitialiseTaskLists+0x64>)
 800e702:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e704:	4b0a      	ldr	r3, [pc, #40]	; (800e730 <prvInitialiseTaskLists+0x7c>)
 800e706:	4a05      	ldr	r2, [pc, #20]	; (800e71c <prvInitialiseTaskLists+0x68>)
 800e708:	601a      	str	r2, [r3, #0]
}
 800e70a:	bf00      	nop
 800e70c:	3708      	adds	r7, #8
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd80      	pop	{r7, pc}
 800e712:	bf00      	nop
 800e714:	2000afe8 	.word	0x2000afe8
 800e718:	2000b448 	.word	0x2000b448
 800e71c:	2000b45c 	.word	0x2000b45c
 800e720:	2000b478 	.word	0x2000b478
 800e724:	2000b48c 	.word	0x2000b48c
 800e728:	2000b4a4 	.word	0x2000b4a4
 800e72c:	2000b470 	.word	0x2000b470
 800e730:	2000b474 	.word	0x2000b474

0800e734 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b082      	sub	sp, #8
 800e738:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e73a:	e019      	b.n	800e770 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e73c:	f7fe f98a 	bl	800ca54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e740:	4b10      	ldr	r3, [pc, #64]	; (800e784 <prvCheckTasksWaitingTermination+0x50>)
 800e742:	68db      	ldr	r3, [r3, #12]
 800e744:	68db      	ldr	r3, [r3, #12]
 800e746:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	3304      	adds	r3, #4
 800e74c:	4618      	mov	r0, r3
 800e74e:	f7fe f82d 	bl	800c7ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e752:	4b0d      	ldr	r3, [pc, #52]	; (800e788 <prvCheckTasksWaitingTermination+0x54>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	3b01      	subs	r3, #1
 800e758:	4a0b      	ldr	r2, [pc, #44]	; (800e788 <prvCheckTasksWaitingTermination+0x54>)
 800e75a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e75c:	4b0b      	ldr	r3, [pc, #44]	; (800e78c <prvCheckTasksWaitingTermination+0x58>)
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	3b01      	subs	r3, #1
 800e762:	4a0a      	ldr	r2, [pc, #40]	; (800e78c <prvCheckTasksWaitingTermination+0x58>)
 800e764:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e766:	f7fe f9a5 	bl	800cab4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f000 f810 	bl	800e790 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e770:	4b06      	ldr	r3, [pc, #24]	; (800e78c <prvCheckTasksWaitingTermination+0x58>)
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d1e1      	bne.n	800e73c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e778:	bf00      	nop
 800e77a:	bf00      	nop
 800e77c:	3708      	adds	r7, #8
 800e77e:	46bd      	mov	sp, r7
 800e780:	bd80      	pop	{r7, pc}
 800e782:	bf00      	nop
 800e784:	2000b48c 	.word	0x2000b48c
 800e788:	2000b4bc 	.word	0x2000b4bc
 800e78c:	2000b4a0 	.word	0x2000b4a0

0800e790 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e790:	b580      	push	{r7, lr}
 800e792:	b084      	sub	sp, #16
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f000 fdd4 	bl	800f34c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d108      	bne.n	800e7c0 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f7fd fe52 	bl	800c45c <vPortFree>
				vPortFree( pxTCB );
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f7fd fe4f 	bl	800c45c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e7be:	e018      	b.n	800e7f2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800e7c6:	2b01      	cmp	r3, #1
 800e7c8:	d103      	bne.n	800e7d2 <prvDeleteTCB+0x42>
				vPortFree( pxTCB );
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f7fd fe46 	bl	800c45c <vPortFree>
	}
 800e7d0:	e00f      	b.n	800e7f2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800e7d8:	2b02      	cmp	r3, #2
 800e7da:	d00a      	beq.n	800e7f2 <prvDeleteTCB+0x62>
	__asm volatile
 800e7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e0:	f383 8811 	msr	BASEPRI, r3
 800e7e4:	f3bf 8f6f 	isb	sy
 800e7e8:	f3bf 8f4f 	dsb	sy
 800e7ec:	60fb      	str	r3, [r7, #12]
}
 800e7ee:	bf00      	nop
 800e7f0:	e7fe      	b.n	800e7f0 <prvDeleteTCB+0x60>
	}
 800e7f2:	bf00      	nop
 800e7f4:	3710      	adds	r7, #16
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}
	...

0800e7fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e7fc:	b480      	push	{r7}
 800e7fe:	b083      	sub	sp, #12
 800e800:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e802:	4b0c      	ldr	r3, [pc, #48]	; (800e834 <prvResetNextTaskUnblockTime+0x38>)
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d104      	bne.n	800e816 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e80c:	4b0a      	ldr	r3, [pc, #40]	; (800e838 <prvResetNextTaskUnblockTime+0x3c>)
 800e80e:	f04f 32ff 	mov.w	r2, #4294967295
 800e812:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e814:	e008      	b.n	800e828 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e816:	4b07      	ldr	r3, [pc, #28]	; (800e834 <prvResetNextTaskUnblockTime+0x38>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	68db      	ldr	r3, [r3, #12]
 800e81c:	68db      	ldr	r3, [r3, #12]
 800e81e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	685b      	ldr	r3, [r3, #4]
 800e824:	4a04      	ldr	r2, [pc, #16]	; (800e838 <prvResetNextTaskUnblockTime+0x3c>)
 800e826:	6013      	str	r3, [r2, #0]
}
 800e828:	bf00      	nop
 800e82a:	370c      	adds	r7, #12
 800e82c:	46bd      	mov	sp, r7
 800e82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e832:	4770      	bx	lr
 800e834:	2000b470 	.word	0x2000b470
 800e838:	2000b4dc 	.word	0x2000b4dc

0800e83c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e83c:	b480      	push	{r7}
 800e83e:	b083      	sub	sp, #12
 800e840:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e842:	4b0b      	ldr	r3, [pc, #44]	; (800e870 <xTaskGetSchedulerState+0x34>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d102      	bne.n	800e850 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e84a:	2301      	movs	r3, #1
 800e84c:	607b      	str	r3, [r7, #4]
 800e84e:	e008      	b.n	800e862 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e850:	4b08      	ldr	r3, [pc, #32]	; (800e874 <xTaskGetSchedulerState+0x38>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d102      	bne.n	800e85e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e858:	2302      	movs	r3, #2
 800e85a:	607b      	str	r3, [r7, #4]
 800e85c:	e001      	b.n	800e862 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e85e:	2300      	movs	r3, #0
 800e860:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e862:	687b      	ldr	r3, [r7, #4]
	}
 800e864:	4618      	mov	r0, r3
 800e866:	370c      	adds	r7, #12
 800e868:	46bd      	mov	sp, r7
 800e86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86e:	4770      	bx	lr
 800e870:	2000b4c8 	.word	0x2000b4c8
 800e874:	2000b4e4 	.word	0x2000b4e4

0800e878 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b086      	sub	sp, #24
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e884:	2300      	movs	r3, #0
 800e886:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d05c      	beq.n	800e948 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e88e:	4b31      	ldr	r3, [pc, #196]	; (800e954 <xTaskPriorityDisinherit+0xdc>)
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	693a      	ldr	r2, [r7, #16]
 800e894:	429a      	cmp	r2, r3
 800e896:	d00a      	beq.n	800e8ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e89c:	f383 8811 	msr	BASEPRI, r3
 800e8a0:	f3bf 8f6f 	isb	sy
 800e8a4:	f3bf 8f4f 	dsb	sy
 800e8a8:	60fb      	str	r3, [r7, #12]
}
 800e8aa:	bf00      	nop
 800e8ac:	e7fe      	b.n	800e8ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e8ae:	693b      	ldr	r3, [r7, #16]
 800e8b0:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d10a      	bne.n	800e8ce <xTaskPriorityDisinherit+0x56>
	__asm volatile
 800e8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8bc:	f383 8811 	msr	BASEPRI, r3
 800e8c0:	f3bf 8f6f 	isb	sy
 800e8c4:	f3bf 8f4f 	dsb	sy
 800e8c8:	60bb      	str	r3, [r7, #8]
}
 800e8ca:	bf00      	nop
 800e8cc:	e7fe      	b.n	800e8cc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800e8d4:	1e5a      	subs	r2, r3, #1
 800e8d6:	693b      	ldr	r3, [r7, #16]
 800e8d8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e8dc:	693b      	ldr	r3, [r7, #16]
 800e8de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8e0:	693b      	ldr	r3, [r7, #16]
 800e8e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800e8e6:	429a      	cmp	r2, r3
 800e8e8:	d02e      	beq.n	800e948 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d129      	bne.n	800e948 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e8f4:	693b      	ldr	r3, [r7, #16]
 800e8f6:	3304      	adds	r3, #4
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f7fd ff57 	bl	800c7ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e8fe:	693b      	ldr	r3, [r7, #16]
 800e900:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800e904:	693b      	ldr	r3, [r7, #16]
 800e906:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e908:	693b      	ldr	r3, [r7, #16]
 800e90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e90c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e910:	693b      	ldr	r3, [r7, #16]
 800e912:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e914:	693b      	ldr	r3, [r7, #16]
 800e916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e918:	4b0f      	ldr	r3, [pc, #60]	; (800e958 <xTaskPriorityDisinherit+0xe0>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	429a      	cmp	r2, r3
 800e91e:	d903      	bls.n	800e928 <xTaskPriorityDisinherit+0xb0>
 800e920:	693b      	ldr	r3, [r7, #16]
 800e922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e924:	4a0c      	ldr	r2, [pc, #48]	; (800e958 <xTaskPriorityDisinherit+0xe0>)
 800e926:	6013      	str	r3, [r2, #0]
 800e928:	693b      	ldr	r3, [r7, #16]
 800e92a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e92c:	4613      	mov	r3, r2
 800e92e:	009b      	lsls	r3, r3, #2
 800e930:	4413      	add	r3, r2
 800e932:	009b      	lsls	r3, r3, #2
 800e934:	4a09      	ldr	r2, [pc, #36]	; (800e95c <xTaskPriorityDisinherit+0xe4>)
 800e936:	441a      	add	r2, r3
 800e938:	693b      	ldr	r3, [r7, #16]
 800e93a:	3304      	adds	r3, #4
 800e93c:	4619      	mov	r1, r3
 800e93e:	4610      	mov	r0, r2
 800e940:	f7fd fed7 	bl	800c6f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e944:	2301      	movs	r3, #1
 800e946:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e948:	697b      	ldr	r3, [r7, #20]
	}
 800e94a:	4618      	mov	r0, r3
 800e94c:	3718      	adds	r7, #24
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd80      	pop	{r7, pc}
 800e952:	bf00      	nop
 800e954:	2000afe4 	.word	0x2000afe4
 800e958:	2000b4c4 	.word	0x2000b4c4
 800e95c:	2000afe8 	.word	0x2000afe8

0800e960 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b084      	sub	sp, #16
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
 800e968:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e96a:	4b24      	ldr	r3, [pc, #144]	; (800e9fc <prvAddCurrentTaskToDelayedList+0x9c>)
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800e970:	4b23      	ldr	r3, [pc, #140]	; (800ea00 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	2200      	movs	r2, #0
 800e976:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e97a:	4b21      	ldr	r3, [pc, #132]	; (800ea00 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	3304      	adds	r3, #4
 800e980:	4618      	mov	r0, r3
 800e982:	f7fd ff13 	bl	800c7ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e98c:	d10a      	bne.n	800e9a4 <prvAddCurrentTaskToDelayedList+0x44>
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d007      	beq.n	800e9a4 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e994:	4b1a      	ldr	r3, [pc, #104]	; (800ea00 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	3304      	adds	r3, #4
 800e99a:	4619      	mov	r1, r3
 800e99c:	4819      	ldr	r0, [pc, #100]	; (800ea04 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e99e:	f7fd fea8 	bl	800c6f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e9a2:	e026      	b.n	800e9f2 <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e9a4:	68fa      	ldr	r2, [r7, #12]
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	4413      	add	r3, r2
 800e9aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e9ac:	4b14      	ldr	r3, [pc, #80]	; (800ea00 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	68ba      	ldr	r2, [r7, #8]
 800e9b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e9b4:	68ba      	ldr	r2, [r7, #8]
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	429a      	cmp	r2, r3
 800e9ba:	d209      	bcs.n	800e9d0 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e9bc:	4b12      	ldr	r3, [pc, #72]	; (800ea08 <prvAddCurrentTaskToDelayedList+0xa8>)
 800e9be:	681a      	ldr	r2, [r3, #0]
 800e9c0:	4b0f      	ldr	r3, [pc, #60]	; (800ea00 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	3304      	adds	r3, #4
 800e9c6:	4619      	mov	r1, r3
 800e9c8:	4610      	mov	r0, r2
 800e9ca:	f7fd feb6 	bl	800c73a <vListInsert>
}
 800e9ce:	e010      	b.n	800e9f2 <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e9d0:	4b0e      	ldr	r3, [pc, #56]	; (800ea0c <prvAddCurrentTaskToDelayedList+0xac>)
 800e9d2:	681a      	ldr	r2, [r3, #0]
 800e9d4:	4b0a      	ldr	r3, [pc, #40]	; (800ea00 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	3304      	adds	r3, #4
 800e9da:	4619      	mov	r1, r3
 800e9dc:	4610      	mov	r0, r2
 800e9de:	f7fd feac 	bl	800c73a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e9e2:	4b0b      	ldr	r3, [pc, #44]	; (800ea10 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	68ba      	ldr	r2, [r7, #8]
 800e9e8:	429a      	cmp	r2, r3
 800e9ea:	d202      	bcs.n	800e9f2 <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 800e9ec:	4a08      	ldr	r2, [pc, #32]	; (800ea10 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	6013      	str	r3, [r2, #0]
}
 800e9f2:	bf00      	nop
 800e9f4:	3710      	adds	r7, #16
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}
 800e9fa:	bf00      	nop
 800e9fc:	2000b4c0 	.word	0x2000b4c0
 800ea00:	2000afe4 	.word	0x2000afe4
 800ea04:	2000b4a4 	.word	0x2000b4a4
 800ea08:	2000b474 	.word	0x2000b474
 800ea0c:	2000b470 	.word	0x2000b470
 800ea10:	2000b4dc 	.word	0x2000b4dc

0800ea14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b08a      	sub	sp, #40	; 0x28
 800ea18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ea1e:	f000 fbc1 	bl	800f1a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ea22:	4b1c      	ldr	r3, [pc, #112]	; (800ea94 <xTimerCreateTimerTask+0x80>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d021      	beq.n	800ea6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ea2e:	2300      	movs	r3, #0
 800ea30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ea32:	1d3a      	adds	r2, r7, #4
 800ea34:	f107 0108 	add.w	r1, r7, #8
 800ea38:	f107 030c 	add.w	r3, r7, #12
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f7fd fbd1 	bl	800c1e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ea42:	6879      	ldr	r1, [r7, #4]
 800ea44:	68bb      	ldr	r3, [r7, #8]
 800ea46:	68fa      	ldr	r2, [r7, #12]
 800ea48:	9202      	str	r2, [sp, #8]
 800ea4a:	9301      	str	r3, [sp, #4]
 800ea4c:	2302      	movs	r3, #2
 800ea4e:	9300      	str	r3, [sp, #0]
 800ea50:	2300      	movs	r3, #0
 800ea52:	460a      	mov	r2, r1
 800ea54:	4910      	ldr	r1, [pc, #64]	; (800ea98 <xTimerCreateTimerTask+0x84>)
 800ea56:	4811      	ldr	r0, [pc, #68]	; (800ea9c <xTimerCreateTimerTask+0x88>)
 800ea58:	f7fe feee 	bl	800d838 <xTaskCreateStatic>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	4a10      	ldr	r2, [pc, #64]	; (800eaa0 <xTimerCreateTimerTask+0x8c>)
 800ea60:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ea62:	4b0f      	ldr	r3, [pc, #60]	; (800eaa0 <xTimerCreateTimerTask+0x8c>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d001      	beq.n	800ea6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ea6a:	2301      	movs	r3, #1
 800ea6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ea6e:	697b      	ldr	r3, [r7, #20]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d10a      	bne.n	800ea8a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ea74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea78:	f383 8811 	msr	BASEPRI, r3
 800ea7c:	f3bf 8f6f 	isb	sy
 800ea80:	f3bf 8f4f 	dsb	sy
 800ea84:	613b      	str	r3, [r7, #16]
}
 800ea86:	bf00      	nop
 800ea88:	e7fe      	b.n	800ea88 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ea8a:	697b      	ldr	r3, [r7, #20]
}
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	3718      	adds	r7, #24
 800ea90:	46bd      	mov	sp, r7
 800ea92:	bd80      	pop	{r7, pc}
 800ea94:	2000b520 	.word	0x2000b520
 800ea98:	0800f798 	.word	0x0800f798
 800ea9c:	0800ed49 	.word	0x0800ed49
 800eaa0:	2000b524 	.word	0x2000b524

0800eaa4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b088      	sub	sp, #32
 800eaa8:	af02      	add	r7, sp, #8
 800eaaa:	60f8      	str	r0, [r7, #12]
 800eaac:	60b9      	str	r1, [r7, #8]
 800eaae:	607a      	str	r2, [r7, #4]
 800eab0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800eab2:	202c      	movs	r0, #44	; 0x2c
 800eab4:	f7fd fc02 	bl	800c2bc <pvPortMalloc>
 800eab8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800eaba:	697b      	ldr	r3, [r7, #20]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d00d      	beq.n	800eadc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800eac0:	697b      	ldr	r3, [r7, #20]
 800eac2:	2200      	movs	r2, #0
 800eac4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	9301      	str	r3, [sp, #4]
 800eacc:	6a3b      	ldr	r3, [r7, #32]
 800eace:	9300      	str	r3, [sp, #0]
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	687a      	ldr	r2, [r7, #4]
 800ead4:	68b9      	ldr	r1, [r7, #8]
 800ead6:	68f8      	ldr	r0, [r7, #12]
 800ead8:	f000 f843 	bl	800eb62 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800eadc:	697b      	ldr	r3, [r7, #20]
	}
 800eade:	4618      	mov	r0, r3
 800eae0:	3718      	adds	r7, #24
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}

0800eae6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800eae6:	b580      	push	{r7, lr}
 800eae8:	b08a      	sub	sp, #40	; 0x28
 800eaea:	af02      	add	r7, sp, #8
 800eaec:	60f8      	str	r0, [r7, #12]
 800eaee:	60b9      	str	r1, [r7, #8]
 800eaf0:	607a      	str	r2, [r7, #4]
 800eaf2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800eaf4:	232c      	movs	r3, #44	; 0x2c
 800eaf6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800eaf8:	693b      	ldr	r3, [r7, #16]
 800eafa:	2b2c      	cmp	r3, #44	; 0x2c
 800eafc:	d00a      	beq.n	800eb14 <xTimerCreateStatic+0x2e>
	__asm volatile
 800eafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb02:	f383 8811 	msr	BASEPRI, r3
 800eb06:	f3bf 8f6f 	isb	sy
 800eb0a:	f3bf 8f4f 	dsb	sy
 800eb0e:	61bb      	str	r3, [r7, #24]
}
 800eb10:	bf00      	nop
 800eb12:	e7fe      	b.n	800eb12 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800eb14:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800eb16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d10a      	bne.n	800eb32 <xTimerCreateStatic+0x4c>
	__asm volatile
 800eb1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb20:	f383 8811 	msr	BASEPRI, r3
 800eb24:	f3bf 8f6f 	isb	sy
 800eb28:	f3bf 8f4f 	dsb	sy
 800eb2c:	617b      	str	r3, [r7, #20]
}
 800eb2e:	bf00      	nop
 800eb30:	e7fe      	b.n	800eb30 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800eb32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb34:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800eb36:	69fb      	ldr	r3, [r7, #28]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d00d      	beq.n	800eb58 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800eb3c:	69fb      	ldr	r3, [r7, #28]
 800eb3e:	2202      	movs	r2, #2
 800eb40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800eb44:	69fb      	ldr	r3, [r7, #28]
 800eb46:	9301      	str	r3, [sp, #4]
 800eb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb4a:	9300      	str	r3, [sp, #0]
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	687a      	ldr	r2, [r7, #4]
 800eb50:	68b9      	ldr	r1, [r7, #8]
 800eb52:	68f8      	ldr	r0, [r7, #12]
 800eb54:	f000 f805 	bl	800eb62 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800eb58:	69fb      	ldr	r3, [r7, #28]
	}
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	3720      	adds	r7, #32
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	bd80      	pop	{r7, pc}

0800eb62 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800eb62:	b580      	push	{r7, lr}
 800eb64:	b086      	sub	sp, #24
 800eb66:	af00      	add	r7, sp, #0
 800eb68:	60f8      	str	r0, [r7, #12]
 800eb6a:	60b9      	str	r1, [r7, #8]
 800eb6c:	607a      	str	r2, [r7, #4]
 800eb6e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d10a      	bne.n	800eb8c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800eb76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb7a:	f383 8811 	msr	BASEPRI, r3
 800eb7e:	f3bf 8f6f 	isb	sy
 800eb82:	f3bf 8f4f 	dsb	sy
 800eb86:	617b      	str	r3, [r7, #20]
}
 800eb88:	bf00      	nop
 800eb8a:	e7fe      	b.n	800eb8a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800eb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d01e      	beq.n	800ebd0 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800eb92:	f000 fb07 	bl	800f1a4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800eb96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb98:	68fa      	ldr	r2, [r7, #12]
 800eb9a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800eb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb9e:	68ba      	ldr	r2, [r7, #8]
 800eba0:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800eba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eba4:	683a      	ldr	r2, [r7, #0]
 800eba6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800eba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebaa:	6a3a      	ldr	r2, [r7, #32]
 800ebac:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800ebae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebb0:	3304      	adds	r3, #4
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f7fd fd90 	bl	800c6d8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d008      	beq.n	800ebd0 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800ebbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ebc4:	f043 0304 	orr.w	r3, r3, #4
 800ebc8:	b2da      	uxtb	r2, r3
 800ebca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebcc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800ebd0:	bf00      	nop
 800ebd2:	3718      	adds	r7, #24
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}

0800ebd8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b08a      	sub	sp, #40	; 0x28
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	60f8      	str	r0, [r7, #12]
 800ebe0:	60b9      	str	r1, [r7, #8]
 800ebe2:	607a      	str	r2, [r7, #4]
 800ebe4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d10a      	bne.n	800ec06 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ebf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebf4:	f383 8811 	msr	BASEPRI, r3
 800ebf8:	f3bf 8f6f 	isb	sy
 800ebfc:	f3bf 8f4f 	dsb	sy
 800ec00:	623b      	str	r3, [r7, #32]
}
 800ec02:	bf00      	nop
 800ec04:	e7fe      	b.n	800ec04 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ec06:	4b1a      	ldr	r3, [pc, #104]	; (800ec70 <xTimerGenericCommand+0x98>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d02a      	beq.n	800ec64 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ec0e:	68bb      	ldr	r3, [r7, #8]
 800ec10:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ec1a:	68bb      	ldr	r3, [r7, #8]
 800ec1c:	2b05      	cmp	r3, #5
 800ec1e:	dc18      	bgt.n	800ec52 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ec20:	f7ff fe0c 	bl	800e83c <xTaskGetSchedulerState>
 800ec24:	4603      	mov	r3, r0
 800ec26:	2b02      	cmp	r3, #2
 800ec28:	d109      	bne.n	800ec3e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ec2a:	4b11      	ldr	r3, [pc, #68]	; (800ec70 <xTimerGenericCommand+0x98>)
 800ec2c:	6818      	ldr	r0, [r3, #0]
 800ec2e:	f107 0110 	add.w	r1, r7, #16
 800ec32:	2300      	movs	r3, #0
 800ec34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec36:	f7fe fa17 	bl	800d068 <xQueueGenericSend>
 800ec3a:	6278      	str	r0, [r7, #36]	; 0x24
 800ec3c:	e012      	b.n	800ec64 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ec3e:	4b0c      	ldr	r3, [pc, #48]	; (800ec70 <xTimerGenericCommand+0x98>)
 800ec40:	6818      	ldr	r0, [r3, #0]
 800ec42:	f107 0110 	add.w	r1, r7, #16
 800ec46:	2300      	movs	r3, #0
 800ec48:	2200      	movs	r2, #0
 800ec4a:	f7fe fa0d 	bl	800d068 <xQueueGenericSend>
 800ec4e:	6278      	str	r0, [r7, #36]	; 0x24
 800ec50:	e008      	b.n	800ec64 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ec52:	4b07      	ldr	r3, [pc, #28]	; (800ec70 <xTimerGenericCommand+0x98>)
 800ec54:	6818      	ldr	r0, [r3, #0]
 800ec56:	f107 0110 	add.w	r1, r7, #16
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	683a      	ldr	r2, [r7, #0]
 800ec5e:	f7fe fb01 	bl	800d264 <xQueueGenericSendFromISR>
 800ec62:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ec64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ec66:	4618      	mov	r0, r3
 800ec68:	3728      	adds	r7, #40	; 0x28
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd80      	pop	{r7, pc}
 800ec6e:	bf00      	nop
 800ec70:	2000b520 	.word	0x2000b520

0800ec74 <xTimerGetExpiryTime>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
{
 800ec74:	b480      	push	{r7}
 800ec76:	b087      	sub	sp, #28
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
Timer_t * pxTimer =  xTimer;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	617b      	str	r3, [r7, #20]
TickType_t xReturn;

	configASSERT( xTimer );
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d10a      	bne.n	800ec9c <xTimerGetExpiryTime+0x28>
	__asm volatile
 800ec86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec8a:	f383 8811 	msr	BASEPRI, r3
 800ec8e:	f3bf 8f6f 	isb	sy
 800ec92:	f3bf 8f4f 	dsb	sy
 800ec96:	60fb      	str	r3, [r7, #12]
}
 800ec98:	bf00      	nop
 800ec9a:	e7fe      	b.n	800ec9a <xTimerGetExpiryTime+0x26>
	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 800ec9c:	697b      	ldr	r3, [r7, #20]
 800ec9e:	685b      	ldr	r3, [r3, #4]
 800eca0:	613b      	str	r3, [r7, #16]
	return xReturn;
 800eca2:	693b      	ldr	r3, [r7, #16]
}
 800eca4:	4618      	mov	r0, r3
 800eca6:	371c      	adds	r7, #28
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecae:	4770      	bx	lr

0800ecb0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b088      	sub	sp, #32
 800ecb4:	af02      	add	r7, sp, #8
 800ecb6:	6078      	str	r0, [r7, #4]
 800ecb8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ecba:	4b22      	ldr	r3, [pc, #136]	; (800ed44 <prvProcessExpiredTimer+0x94>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	68db      	ldr	r3, [r3, #12]
 800ecc0:	68db      	ldr	r3, [r3, #12]
 800ecc2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ecc4:	697b      	ldr	r3, [r7, #20]
 800ecc6:	3304      	adds	r3, #4
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f7fd fd6f 	bl	800c7ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ecd4:	f003 0304 	and.w	r3, r3, #4
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d022      	beq.n	800ed22 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ecdc:	697b      	ldr	r3, [r7, #20]
 800ecde:	699a      	ldr	r2, [r3, #24]
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	18d1      	adds	r1, r2, r3
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	683a      	ldr	r2, [r7, #0]
 800ece8:	6978      	ldr	r0, [r7, #20]
 800ecea:	f000 f8d3 	bl	800ee94 <prvInsertTimerInActiveList>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d01f      	beq.n	800ed34 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	9300      	str	r3, [sp, #0]
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	687a      	ldr	r2, [r7, #4]
 800ecfc:	2100      	movs	r1, #0
 800ecfe:	6978      	ldr	r0, [r7, #20]
 800ed00:	f7ff ff6a 	bl	800ebd8 <xTimerGenericCommand>
 800ed04:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ed06:	693b      	ldr	r3, [r7, #16]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d113      	bne.n	800ed34 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ed0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed10:	f383 8811 	msr	BASEPRI, r3
 800ed14:	f3bf 8f6f 	isb	sy
 800ed18:	f3bf 8f4f 	dsb	sy
 800ed1c:	60fb      	str	r3, [r7, #12]
}
 800ed1e:	bf00      	nop
 800ed20:	e7fe      	b.n	800ed20 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ed22:	697b      	ldr	r3, [r7, #20]
 800ed24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed28:	f023 0301 	bic.w	r3, r3, #1
 800ed2c:	b2da      	uxtb	r2, r3
 800ed2e:	697b      	ldr	r3, [r7, #20]
 800ed30:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ed34:	697b      	ldr	r3, [r7, #20]
 800ed36:	6a1b      	ldr	r3, [r3, #32]
 800ed38:	6978      	ldr	r0, [r7, #20]
 800ed3a:	4798      	blx	r3
}
 800ed3c:	bf00      	nop
 800ed3e:	3718      	adds	r7, #24
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}
 800ed44:	2000b518 	.word	0x2000b518

0800ed48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b084      	sub	sp, #16
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
 800ed50:	f7f4 fba1 	bl	8003496 <vApplicationDaemonTaskStartupHook>

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ed54:	f107 0308 	add.w	r3, r7, #8
 800ed58:	4618      	mov	r0, r3
 800ed5a:	f000 f857 	bl	800ee0c <prvGetNextExpireTime>
 800ed5e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ed60:	68bb      	ldr	r3, [r7, #8]
 800ed62:	4619      	mov	r1, r3
 800ed64:	68f8      	ldr	r0, [r7, #12]
 800ed66:	f000 f803 	bl	800ed70 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ed6a:	f000 f8d5 	bl	800ef18 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ed6e:	e7f1      	b.n	800ed54 <prvTimerTask+0xc>

0800ed70 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b084      	sub	sp, #16
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
 800ed78:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ed7a:	f7ff f84b 	bl	800de14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ed7e:	f107 0308 	add.w	r3, r7, #8
 800ed82:	4618      	mov	r0, r3
 800ed84:	f000 f866 	bl	800ee54 <prvSampleTimeNow>
 800ed88:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d130      	bne.n	800edf2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d10a      	bne.n	800edac <prvProcessTimerOrBlockTask+0x3c>
 800ed96:	687a      	ldr	r2, [r7, #4]
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	429a      	cmp	r2, r3
 800ed9c:	d806      	bhi.n	800edac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ed9e:	f7ff f87f 	bl	800dea0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800eda2:	68f9      	ldr	r1, [r7, #12]
 800eda4:	6878      	ldr	r0, [r7, #4]
 800eda6:	f7ff ff83 	bl	800ecb0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800edaa:	e024      	b.n	800edf6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d008      	beq.n	800edc4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800edb2:	4b13      	ldr	r3, [pc, #76]	; (800ee00 <prvProcessTimerOrBlockTask+0x90>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d101      	bne.n	800edc0 <prvProcessTimerOrBlockTask+0x50>
 800edbc:	2301      	movs	r3, #1
 800edbe:	e000      	b.n	800edc2 <prvProcessTimerOrBlockTask+0x52>
 800edc0:	2300      	movs	r3, #0
 800edc2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800edc4:	4b0f      	ldr	r3, [pc, #60]	; (800ee04 <prvProcessTimerOrBlockTask+0x94>)
 800edc6:	6818      	ldr	r0, [r3, #0]
 800edc8:	687a      	ldr	r2, [r7, #4]
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	1ad3      	subs	r3, r2, r3
 800edce:	683a      	ldr	r2, [r7, #0]
 800edd0:	4619      	mov	r1, r3
 800edd2:	f7fe fcfd 	bl	800d7d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800edd6:	f7ff f863 	bl	800dea0 <xTaskResumeAll>
 800edda:	4603      	mov	r3, r0
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d10a      	bne.n	800edf6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ede0:	4b09      	ldr	r3, [pc, #36]	; (800ee08 <prvProcessTimerOrBlockTask+0x98>)
 800ede2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ede6:	601a      	str	r2, [r3, #0]
 800ede8:	f3bf 8f4f 	dsb	sy
 800edec:	f3bf 8f6f 	isb	sy
}
 800edf0:	e001      	b.n	800edf6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800edf2:	f7ff f855 	bl	800dea0 <xTaskResumeAll>
}
 800edf6:	bf00      	nop
 800edf8:	3710      	adds	r7, #16
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}
 800edfe:	bf00      	nop
 800ee00:	2000b51c 	.word	0x2000b51c
 800ee04:	2000b520 	.word	0x2000b520
 800ee08:	e000ed04 	.word	0xe000ed04

0800ee0c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ee0c:	b480      	push	{r7}
 800ee0e:	b085      	sub	sp, #20
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ee14:	4b0e      	ldr	r3, [pc, #56]	; (800ee50 <prvGetNextExpireTime+0x44>)
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d101      	bne.n	800ee22 <prvGetNextExpireTime+0x16>
 800ee1e:	2201      	movs	r2, #1
 800ee20:	e000      	b.n	800ee24 <prvGetNextExpireTime+0x18>
 800ee22:	2200      	movs	r2, #0
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d105      	bne.n	800ee3c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ee30:	4b07      	ldr	r3, [pc, #28]	; (800ee50 <prvGetNextExpireTime+0x44>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	68db      	ldr	r3, [r3, #12]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	60fb      	str	r3, [r7, #12]
 800ee3a:	e001      	b.n	800ee40 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ee40:	68fb      	ldr	r3, [r7, #12]
}
 800ee42:	4618      	mov	r0, r3
 800ee44:	3714      	adds	r7, #20
 800ee46:	46bd      	mov	sp, r7
 800ee48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4c:	4770      	bx	lr
 800ee4e:	bf00      	nop
 800ee50:	2000b518 	.word	0x2000b518

0800ee54 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b084      	sub	sp, #16
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ee5c:	f7ff f8be 	bl	800dfdc <xTaskGetTickCount>
 800ee60:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ee62:	4b0b      	ldr	r3, [pc, #44]	; (800ee90 <prvSampleTimeNow+0x3c>)
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	68fa      	ldr	r2, [r7, #12]
 800ee68:	429a      	cmp	r2, r3
 800ee6a:	d205      	bcs.n	800ee78 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ee6c:	f000 f936 	bl	800f0dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2201      	movs	r2, #1
 800ee74:	601a      	str	r2, [r3, #0]
 800ee76:	e002      	b.n	800ee7e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ee7e:	4a04      	ldr	r2, [pc, #16]	; (800ee90 <prvSampleTimeNow+0x3c>)
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ee84:	68fb      	ldr	r3, [r7, #12]
}
 800ee86:	4618      	mov	r0, r3
 800ee88:	3710      	adds	r7, #16
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}
 800ee8e:	bf00      	nop
 800ee90:	2000b528 	.word	0x2000b528

0800ee94 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b086      	sub	sp, #24
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	60f8      	str	r0, [r7, #12]
 800ee9c:	60b9      	str	r1, [r7, #8]
 800ee9e:	607a      	str	r2, [r7, #4]
 800eea0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800eea2:	2300      	movs	r3, #0
 800eea4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	68ba      	ldr	r2, [r7, #8]
 800eeaa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	68fa      	ldr	r2, [r7, #12]
 800eeb0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800eeb2:	68ba      	ldr	r2, [r7, #8]
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	429a      	cmp	r2, r3
 800eeb8:	d812      	bhi.n	800eee0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eeba:	687a      	ldr	r2, [r7, #4]
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	1ad2      	subs	r2, r2, r3
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	699b      	ldr	r3, [r3, #24]
 800eec4:	429a      	cmp	r2, r3
 800eec6:	d302      	bcc.n	800eece <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800eec8:	2301      	movs	r3, #1
 800eeca:	617b      	str	r3, [r7, #20]
 800eecc:	e01b      	b.n	800ef06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800eece:	4b10      	ldr	r3, [pc, #64]	; (800ef10 <prvInsertTimerInActiveList+0x7c>)
 800eed0:	681a      	ldr	r2, [r3, #0]
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	3304      	adds	r3, #4
 800eed6:	4619      	mov	r1, r3
 800eed8:	4610      	mov	r0, r2
 800eeda:	f7fd fc2e 	bl	800c73a <vListInsert>
 800eede:	e012      	b.n	800ef06 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800eee0:	687a      	ldr	r2, [r7, #4]
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	429a      	cmp	r2, r3
 800eee6:	d206      	bcs.n	800eef6 <prvInsertTimerInActiveList+0x62>
 800eee8:	68ba      	ldr	r2, [r7, #8]
 800eeea:	683b      	ldr	r3, [r7, #0]
 800eeec:	429a      	cmp	r2, r3
 800eeee:	d302      	bcc.n	800eef6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800eef0:	2301      	movs	r3, #1
 800eef2:	617b      	str	r3, [r7, #20]
 800eef4:	e007      	b.n	800ef06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eef6:	4b07      	ldr	r3, [pc, #28]	; (800ef14 <prvInsertTimerInActiveList+0x80>)
 800eef8:	681a      	ldr	r2, [r3, #0]
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	3304      	adds	r3, #4
 800eefe:	4619      	mov	r1, r3
 800ef00:	4610      	mov	r0, r2
 800ef02:	f7fd fc1a 	bl	800c73a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ef06:	697b      	ldr	r3, [r7, #20]
}
 800ef08:	4618      	mov	r0, r3
 800ef0a:	3718      	adds	r7, #24
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	bd80      	pop	{r7, pc}
 800ef10:	2000b51c 	.word	0x2000b51c
 800ef14:	2000b518 	.word	0x2000b518

0800ef18 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b08e      	sub	sp, #56	; 0x38
 800ef1c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ef1e:	e0ca      	b.n	800f0b6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	da18      	bge.n	800ef58 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ef26:	1d3b      	adds	r3, r7, #4
 800ef28:	3304      	adds	r3, #4
 800ef2a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ef2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d10a      	bne.n	800ef48 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ef32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef36:	f383 8811 	msr	BASEPRI, r3
 800ef3a:	f3bf 8f6f 	isb	sy
 800ef3e:	f3bf 8f4f 	dsb	sy
 800ef42:	61fb      	str	r3, [r7, #28]
}
 800ef44:	bf00      	nop
 800ef46:	e7fe      	b.n	800ef46 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ef48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef4e:	6850      	ldr	r0, [r2, #4]
 800ef50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef52:	6892      	ldr	r2, [r2, #8]
 800ef54:	4611      	mov	r1, r2
 800ef56:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	f2c0 80aa 	blt.w	800f0b4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ef64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef66:	695b      	ldr	r3, [r3, #20]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d004      	beq.n	800ef76 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ef6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef6e:	3304      	adds	r3, #4
 800ef70:	4618      	mov	r0, r3
 800ef72:	f7fd fc1b 	bl	800c7ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ef76:	463b      	mov	r3, r7
 800ef78:	4618      	mov	r0, r3
 800ef7a:	f7ff ff6b 	bl	800ee54 <prvSampleTimeNow>
 800ef7e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2b09      	cmp	r3, #9
 800ef84:	f200 8097 	bhi.w	800f0b6 <prvProcessReceivedCommands+0x19e>
 800ef88:	a201      	add	r2, pc, #4	; (adr r2, 800ef90 <prvProcessReceivedCommands+0x78>)
 800ef8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef8e:	bf00      	nop
 800ef90:	0800efb9 	.word	0x0800efb9
 800ef94:	0800efb9 	.word	0x0800efb9
 800ef98:	0800efb9 	.word	0x0800efb9
 800ef9c:	0800f02d 	.word	0x0800f02d
 800efa0:	0800f041 	.word	0x0800f041
 800efa4:	0800f08b 	.word	0x0800f08b
 800efa8:	0800efb9 	.word	0x0800efb9
 800efac:	0800efb9 	.word	0x0800efb9
 800efb0:	0800f02d 	.word	0x0800f02d
 800efb4:	0800f041 	.word	0x0800f041
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800efb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800efbe:	f043 0301 	orr.w	r3, r3, #1
 800efc2:	b2da      	uxtb	r2, r3
 800efc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800efca:	68ba      	ldr	r2, [r7, #8]
 800efcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efce:	699b      	ldr	r3, [r3, #24]
 800efd0:	18d1      	adds	r1, r2, r3
 800efd2:	68bb      	ldr	r3, [r7, #8]
 800efd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800efd8:	f7ff ff5c 	bl	800ee94 <prvInsertTimerInActiveList>
 800efdc:	4603      	mov	r3, r0
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d069      	beq.n	800f0b6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800efe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efe4:	6a1b      	ldr	r3, [r3, #32]
 800efe6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800efe8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800efea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eff0:	f003 0304 	and.w	r3, r3, #4
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d05e      	beq.n	800f0b6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800eff8:	68ba      	ldr	r2, [r7, #8]
 800effa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800effc:	699b      	ldr	r3, [r3, #24]
 800effe:	441a      	add	r2, r3
 800f000:	2300      	movs	r3, #0
 800f002:	9300      	str	r3, [sp, #0]
 800f004:	2300      	movs	r3, #0
 800f006:	2100      	movs	r1, #0
 800f008:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f00a:	f7ff fde5 	bl	800ebd8 <xTimerGenericCommand>
 800f00e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f010:	6a3b      	ldr	r3, [r7, #32]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d14f      	bne.n	800f0b6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f01a:	f383 8811 	msr	BASEPRI, r3
 800f01e:	f3bf 8f6f 	isb	sy
 800f022:	f3bf 8f4f 	dsb	sy
 800f026:	61bb      	str	r3, [r7, #24]
}
 800f028:	bf00      	nop
 800f02a:	e7fe      	b.n	800f02a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f02e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f032:	f023 0301 	bic.w	r3, r3, #1
 800f036:	b2da      	uxtb	r2, r3
 800f038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f03a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f03e:	e03a      	b.n	800f0b6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f042:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f046:	f043 0301 	orr.w	r3, r3, #1
 800f04a:	b2da      	uxtb	r2, r3
 800f04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f04e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f052:	68ba      	ldr	r2, [r7, #8]
 800f054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f056:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f05a:	699b      	ldr	r3, [r3, #24]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d10a      	bne.n	800f076 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f064:	f383 8811 	msr	BASEPRI, r3
 800f068:	f3bf 8f6f 	isb	sy
 800f06c:	f3bf 8f4f 	dsb	sy
 800f070:	617b      	str	r3, [r7, #20]
}
 800f072:	bf00      	nop
 800f074:	e7fe      	b.n	800f074 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f078:	699a      	ldr	r2, [r3, #24]
 800f07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f07c:	18d1      	adds	r1, r2, r3
 800f07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f082:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f084:	f7ff ff06 	bl	800ee94 <prvInsertTimerInActiveList>
					break;
 800f088:	e015      	b.n	800f0b6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f08c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f090:	f003 0302 	and.w	r3, r3, #2
 800f094:	2b00      	cmp	r3, #0
 800f096:	d103      	bne.n	800f0a0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f098:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f09a:	f7fd f9df 	bl	800c45c <vPortFree>
 800f09e:	e00a      	b.n	800f0b6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f0a6:	f023 0301 	bic.w	r3, r3, #1
 800f0aa:	b2da      	uxtb	r2, r3
 800f0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f0b2:	e000      	b.n	800f0b6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f0b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f0b6:	4b08      	ldr	r3, [pc, #32]	; (800f0d8 <prvProcessReceivedCommands+0x1c0>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	1d39      	adds	r1, r7, #4
 800f0bc:	2200      	movs	r2, #0
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f7fe f96c 	bl	800d39c <xQueueReceive>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	f47f af2a 	bne.w	800ef20 <prvProcessReceivedCommands+0x8>
	}
}
 800f0cc:	bf00      	nop
 800f0ce:	bf00      	nop
 800f0d0:	3730      	adds	r7, #48	; 0x30
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd80      	pop	{r7, pc}
 800f0d6:	bf00      	nop
 800f0d8:	2000b520 	.word	0x2000b520

0800f0dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b088      	sub	sp, #32
 800f0e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f0e2:	e048      	b.n	800f176 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f0e4:	4b2d      	ldr	r3, [pc, #180]	; (800f19c <prvSwitchTimerLists+0xc0>)
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	68db      	ldr	r3, [r3, #12]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0ee:	4b2b      	ldr	r3, [pc, #172]	; (800f19c <prvSwitchTimerLists+0xc0>)
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	68db      	ldr	r3, [r3, #12]
 800f0f4:	68db      	ldr	r3, [r3, #12]
 800f0f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	3304      	adds	r3, #4
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f7fd fb55 	bl	800c7ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	6a1b      	ldr	r3, [r3, #32]
 800f106:	68f8      	ldr	r0, [r7, #12]
 800f108:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f110:	f003 0304 	and.w	r3, r3, #4
 800f114:	2b00      	cmp	r3, #0
 800f116:	d02e      	beq.n	800f176 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	699b      	ldr	r3, [r3, #24]
 800f11c:	693a      	ldr	r2, [r7, #16]
 800f11e:	4413      	add	r3, r2
 800f120:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f122:	68ba      	ldr	r2, [r7, #8]
 800f124:	693b      	ldr	r3, [r7, #16]
 800f126:	429a      	cmp	r2, r3
 800f128:	d90e      	bls.n	800f148 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	68ba      	ldr	r2, [r7, #8]
 800f12e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	68fa      	ldr	r2, [r7, #12]
 800f134:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f136:	4b19      	ldr	r3, [pc, #100]	; (800f19c <prvSwitchTimerLists+0xc0>)
 800f138:	681a      	ldr	r2, [r3, #0]
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	3304      	adds	r3, #4
 800f13e:	4619      	mov	r1, r3
 800f140:	4610      	mov	r0, r2
 800f142:	f7fd fafa 	bl	800c73a <vListInsert>
 800f146:	e016      	b.n	800f176 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f148:	2300      	movs	r3, #0
 800f14a:	9300      	str	r3, [sp, #0]
 800f14c:	2300      	movs	r3, #0
 800f14e:	693a      	ldr	r2, [r7, #16]
 800f150:	2100      	movs	r1, #0
 800f152:	68f8      	ldr	r0, [r7, #12]
 800f154:	f7ff fd40 	bl	800ebd8 <xTimerGenericCommand>
 800f158:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d10a      	bne.n	800f176 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f164:	f383 8811 	msr	BASEPRI, r3
 800f168:	f3bf 8f6f 	isb	sy
 800f16c:	f3bf 8f4f 	dsb	sy
 800f170:	603b      	str	r3, [r7, #0]
}
 800f172:	bf00      	nop
 800f174:	e7fe      	b.n	800f174 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f176:	4b09      	ldr	r3, [pc, #36]	; (800f19c <prvSwitchTimerLists+0xc0>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d1b1      	bne.n	800f0e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f180:	4b06      	ldr	r3, [pc, #24]	; (800f19c <prvSwitchTimerLists+0xc0>)
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f186:	4b06      	ldr	r3, [pc, #24]	; (800f1a0 <prvSwitchTimerLists+0xc4>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	4a04      	ldr	r2, [pc, #16]	; (800f19c <prvSwitchTimerLists+0xc0>)
 800f18c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f18e:	4a04      	ldr	r2, [pc, #16]	; (800f1a0 <prvSwitchTimerLists+0xc4>)
 800f190:	697b      	ldr	r3, [r7, #20]
 800f192:	6013      	str	r3, [r2, #0]
}
 800f194:	bf00      	nop
 800f196:	3718      	adds	r7, #24
 800f198:	46bd      	mov	sp, r7
 800f19a:	bd80      	pop	{r7, pc}
 800f19c:	2000b518 	.word	0x2000b518
 800f1a0:	2000b51c 	.word	0x2000b51c

0800f1a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b082      	sub	sp, #8
 800f1a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f1aa:	f7fd fc53 	bl	800ca54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f1ae:	4b15      	ldr	r3, [pc, #84]	; (800f204 <prvCheckForValidListAndQueue+0x60>)
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d120      	bne.n	800f1f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f1b6:	4814      	ldr	r0, [pc, #80]	; (800f208 <prvCheckForValidListAndQueue+0x64>)
 800f1b8:	f7fd fa6e 	bl	800c698 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f1bc:	4813      	ldr	r0, [pc, #76]	; (800f20c <prvCheckForValidListAndQueue+0x68>)
 800f1be:	f7fd fa6b 	bl	800c698 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f1c2:	4b13      	ldr	r3, [pc, #76]	; (800f210 <prvCheckForValidListAndQueue+0x6c>)
 800f1c4:	4a10      	ldr	r2, [pc, #64]	; (800f208 <prvCheckForValidListAndQueue+0x64>)
 800f1c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f1c8:	4b12      	ldr	r3, [pc, #72]	; (800f214 <prvCheckForValidListAndQueue+0x70>)
 800f1ca:	4a10      	ldr	r2, [pc, #64]	; (800f20c <prvCheckForValidListAndQueue+0x68>)
 800f1cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	9300      	str	r3, [sp, #0]
 800f1d2:	4b11      	ldr	r3, [pc, #68]	; (800f218 <prvCheckForValidListAndQueue+0x74>)
 800f1d4:	4a11      	ldr	r2, [pc, #68]	; (800f21c <prvCheckForValidListAndQueue+0x78>)
 800f1d6:	2110      	movs	r1, #16
 800f1d8:	200a      	movs	r0, #10
 800f1da:	f7fd fea9 	bl	800cf30 <xQueueGenericCreateStatic>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	4a08      	ldr	r2, [pc, #32]	; (800f204 <prvCheckForValidListAndQueue+0x60>)
 800f1e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f1e4:	4b07      	ldr	r3, [pc, #28]	; (800f204 <prvCheckForValidListAndQueue+0x60>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d005      	beq.n	800f1f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f1ec:	4b05      	ldr	r3, [pc, #20]	; (800f204 <prvCheckForValidListAndQueue+0x60>)
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	490b      	ldr	r1, [pc, #44]	; (800f220 <prvCheckForValidListAndQueue+0x7c>)
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f7fe fac2 	bl	800d77c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f1f8:	f7fd fc5c 	bl	800cab4 <vPortExitCritical>
}
 800f1fc:	bf00      	nop
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}
 800f202:	bf00      	nop
 800f204:	2000b520 	.word	0x2000b520
 800f208:	2000b4f0 	.word	0x2000b4f0
 800f20c:	2000b504 	.word	0x2000b504
 800f210:	2000b518 	.word	0x2000b518
 800f214:	2000b51c 	.word	0x2000b51c
 800f218:	2000b5cc 	.word	0x2000b5cc
 800f21c:	2000b52c 	.word	0x2000b52c
 800f220:	0800f7a0 	.word	0x0800f7a0

0800f224 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800f224:	b580      	push	{r7, lr}
 800f226:	b086      	sub	sp, #24
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d10a      	bne.n	800f24c <xTimerIsTimerActive+0x28>
	__asm volatile
 800f236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f23a:	f383 8811 	msr	BASEPRI, r3
 800f23e:	f3bf 8f6f 	isb	sy
 800f242:	f3bf 8f4f 	dsb	sy
 800f246:	60fb      	str	r3, [r7, #12]
}
 800f248:	bf00      	nop
 800f24a:	e7fe      	b.n	800f24a <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800f24c:	f7fd fc02 	bl	800ca54 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800f250:	693b      	ldr	r3, [r7, #16]
 800f252:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f256:	f003 0301 	and.w	r3, r3, #1
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d102      	bne.n	800f264 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800f25e:	2300      	movs	r3, #0
 800f260:	617b      	str	r3, [r7, #20]
 800f262:	e001      	b.n	800f268 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800f264:	2301      	movs	r3, #1
 800f266:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800f268:	f7fd fc24 	bl	800cab4 <vPortExitCritical>

	return xReturn;
 800f26c:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800f26e:	4618      	mov	r0, r3
 800f270:	3718      	adds	r7, #24
 800f272:	46bd      	mov	sp, r7
 800f274:	bd80      	pop	{r7, pc}

0800f276 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800f276:	b580      	push	{r7, lr}
 800f278:	b086      	sub	sp, #24
 800f27a:	af00      	add	r7, sp, #0
 800f27c:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d10a      	bne.n	800f29e <pvTimerGetTimerID+0x28>
	__asm volatile
 800f288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f28c:	f383 8811 	msr	BASEPRI, r3
 800f290:	f3bf 8f6f 	isb	sy
 800f294:	f3bf 8f4f 	dsb	sy
 800f298:	60fb      	str	r3, [r7, #12]
}
 800f29a:	bf00      	nop
 800f29c:	e7fe      	b.n	800f29c <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800f29e:	f7fd fbd9 	bl	800ca54 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800f2a2:	697b      	ldr	r3, [r7, #20]
 800f2a4:	69db      	ldr	r3, [r3, #28]
 800f2a6:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800f2a8:	f7fd fc04 	bl	800cab4 <vPortExitCritical>

	return pvReturn;
 800f2ac:	693b      	ldr	r3, [r7, #16]
}
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	3718      	adds	r7, #24
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}
	...

0800f2b8 <__libc_init_array>:
 800f2b8:	b570      	push	{r4, r5, r6, lr}
 800f2ba:	4d0d      	ldr	r5, [pc, #52]	; (800f2f0 <__libc_init_array+0x38>)
 800f2bc:	4c0d      	ldr	r4, [pc, #52]	; (800f2f4 <__libc_init_array+0x3c>)
 800f2be:	1b64      	subs	r4, r4, r5
 800f2c0:	10a4      	asrs	r4, r4, #2
 800f2c2:	2600      	movs	r6, #0
 800f2c4:	42a6      	cmp	r6, r4
 800f2c6:	d109      	bne.n	800f2dc <__libc_init_array+0x24>
 800f2c8:	4d0b      	ldr	r5, [pc, #44]	; (800f2f8 <__libc_init_array+0x40>)
 800f2ca:	4c0c      	ldr	r4, [pc, #48]	; (800f2fc <__libc_init_array+0x44>)
 800f2cc:	f000 f8f2 	bl	800f4b4 <_init>
 800f2d0:	1b64      	subs	r4, r4, r5
 800f2d2:	10a4      	asrs	r4, r4, #2
 800f2d4:	2600      	movs	r6, #0
 800f2d6:	42a6      	cmp	r6, r4
 800f2d8:	d105      	bne.n	800f2e6 <__libc_init_array+0x2e>
 800f2da:	bd70      	pop	{r4, r5, r6, pc}
 800f2dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f2e0:	4798      	blx	r3
 800f2e2:	3601      	adds	r6, #1
 800f2e4:	e7ee      	b.n	800f2c4 <__libc_init_array+0xc>
 800f2e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f2ea:	4798      	blx	r3
 800f2ec:	3601      	adds	r6, #1
 800f2ee:	e7f2      	b.n	800f2d6 <__libc_init_array+0x1e>
 800f2f0:	0800fb58 	.word	0x0800fb58
 800f2f4:	0800fb58 	.word	0x0800fb58
 800f2f8:	0800fb58 	.word	0x0800fb58
 800f2fc:	0800fb5c 	.word	0x0800fb5c

0800f300 <__retarget_lock_acquire_recursive>:
 800f300:	4770      	bx	lr

0800f302 <__retarget_lock_release_recursive>:
 800f302:	4770      	bx	lr

0800f304 <memcpy>:
 800f304:	440a      	add	r2, r1
 800f306:	4291      	cmp	r1, r2
 800f308:	f100 33ff 	add.w	r3, r0, #4294967295
 800f30c:	d100      	bne.n	800f310 <memcpy+0xc>
 800f30e:	4770      	bx	lr
 800f310:	b510      	push	{r4, lr}
 800f312:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f316:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f31a:	4291      	cmp	r1, r2
 800f31c:	d1f9      	bne.n	800f312 <memcpy+0xe>
 800f31e:	bd10      	pop	{r4, pc}

0800f320 <memset>:
 800f320:	4402      	add	r2, r0
 800f322:	4603      	mov	r3, r0
 800f324:	4293      	cmp	r3, r2
 800f326:	d100      	bne.n	800f32a <memset+0xa>
 800f328:	4770      	bx	lr
 800f32a:	f803 1b01 	strb.w	r1, [r3], #1
 800f32e:	e7f9      	b.n	800f324 <memset+0x4>

0800f330 <cleanup_glue>:
 800f330:	b538      	push	{r3, r4, r5, lr}
 800f332:	460c      	mov	r4, r1
 800f334:	6809      	ldr	r1, [r1, #0]
 800f336:	4605      	mov	r5, r0
 800f338:	b109      	cbz	r1, 800f33e <cleanup_glue+0xe>
 800f33a:	f7ff fff9 	bl	800f330 <cleanup_glue>
 800f33e:	4621      	mov	r1, r4
 800f340:	4628      	mov	r0, r5
 800f342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f346:	f000 b869 	b.w	800f41c <_free_r>
	...

0800f34c <_reclaim_reent>:
 800f34c:	4b2c      	ldr	r3, [pc, #176]	; (800f400 <_reclaim_reent+0xb4>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	4283      	cmp	r3, r0
 800f352:	b570      	push	{r4, r5, r6, lr}
 800f354:	4604      	mov	r4, r0
 800f356:	d051      	beq.n	800f3fc <_reclaim_reent+0xb0>
 800f358:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f35a:	b143      	cbz	r3, 800f36e <_reclaim_reent+0x22>
 800f35c:	68db      	ldr	r3, [r3, #12]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d14a      	bne.n	800f3f8 <_reclaim_reent+0xac>
 800f362:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f364:	6819      	ldr	r1, [r3, #0]
 800f366:	b111      	cbz	r1, 800f36e <_reclaim_reent+0x22>
 800f368:	4620      	mov	r0, r4
 800f36a:	f000 f857 	bl	800f41c <_free_r>
 800f36e:	6961      	ldr	r1, [r4, #20]
 800f370:	b111      	cbz	r1, 800f378 <_reclaim_reent+0x2c>
 800f372:	4620      	mov	r0, r4
 800f374:	f000 f852 	bl	800f41c <_free_r>
 800f378:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f37a:	b111      	cbz	r1, 800f382 <_reclaim_reent+0x36>
 800f37c:	4620      	mov	r0, r4
 800f37e:	f000 f84d 	bl	800f41c <_free_r>
 800f382:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f384:	b111      	cbz	r1, 800f38c <_reclaim_reent+0x40>
 800f386:	4620      	mov	r0, r4
 800f388:	f000 f848 	bl	800f41c <_free_r>
 800f38c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f38e:	b111      	cbz	r1, 800f396 <_reclaim_reent+0x4a>
 800f390:	4620      	mov	r0, r4
 800f392:	f000 f843 	bl	800f41c <_free_r>
 800f396:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f398:	b111      	cbz	r1, 800f3a0 <_reclaim_reent+0x54>
 800f39a:	4620      	mov	r0, r4
 800f39c:	f000 f83e 	bl	800f41c <_free_r>
 800f3a0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f3a2:	b111      	cbz	r1, 800f3aa <_reclaim_reent+0x5e>
 800f3a4:	4620      	mov	r0, r4
 800f3a6:	f000 f839 	bl	800f41c <_free_r>
 800f3aa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f3ac:	b111      	cbz	r1, 800f3b4 <_reclaim_reent+0x68>
 800f3ae:	4620      	mov	r0, r4
 800f3b0:	f000 f834 	bl	800f41c <_free_r>
 800f3b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f3b6:	b111      	cbz	r1, 800f3be <_reclaim_reent+0x72>
 800f3b8:	4620      	mov	r0, r4
 800f3ba:	f000 f82f 	bl	800f41c <_free_r>
 800f3be:	69a3      	ldr	r3, [r4, #24]
 800f3c0:	b1e3      	cbz	r3, 800f3fc <_reclaim_reent+0xb0>
 800f3c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f3c4:	4620      	mov	r0, r4
 800f3c6:	4798      	blx	r3
 800f3c8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f3ca:	b1b9      	cbz	r1, 800f3fc <_reclaim_reent+0xb0>
 800f3cc:	4620      	mov	r0, r4
 800f3ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f3d2:	f7ff bfad 	b.w	800f330 <cleanup_glue>
 800f3d6:	5949      	ldr	r1, [r1, r5]
 800f3d8:	b941      	cbnz	r1, 800f3ec <_reclaim_reent+0xa0>
 800f3da:	3504      	adds	r5, #4
 800f3dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f3de:	2d80      	cmp	r5, #128	; 0x80
 800f3e0:	68d9      	ldr	r1, [r3, #12]
 800f3e2:	d1f8      	bne.n	800f3d6 <_reclaim_reent+0x8a>
 800f3e4:	4620      	mov	r0, r4
 800f3e6:	f000 f819 	bl	800f41c <_free_r>
 800f3ea:	e7ba      	b.n	800f362 <_reclaim_reent+0x16>
 800f3ec:	680e      	ldr	r6, [r1, #0]
 800f3ee:	4620      	mov	r0, r4
 800f3f0:	f000 f814 	bl	800f41c <_free_r>
 800f3f4:	4631      	mov	r1, r6
 800f3f6:	e7ef      	b.n	800f3d8 <_reclaim_reent+0x8c>
 800f3f8:	2500      	movs	r5, #0
 800f3fa:	e7ef      	b.n	800f3dc <_reclaim_reent+0x90>
 800f3fc:	bd70      	pop	{r4, r5, r6, pc}
 800f3fe:	bf00      	nop
 800f400:	20000010 	.word	0x20000010

0800f404 <__malloc_lock>:
 800f404:	4801      	ldr	r0, [pc, #4]	; (800f40c <__malloc_lock+0x8>)
 800f406:	f7ff bf7b 	b.w	800f300 <__retarget_lock_acquire_recursive>
 800f40a:	bf00      	nop
 800f40c:	2000b61c 	.word	0x2000b61c

0800f410 <__malloc_unlock>:
 800f410:	4801      	ldr	r0, [pc, #4]	; (800f418 <__malloc_unlock+0x8>)
 800f412:	f7ff bf76 	b.w	800f302 <__retarget_lock_release_recursive>
 800f416:	bf00      	nop
 800f418:	2000b61c 	.word	0x2000b61c

0800f41c <_free_r>:
 800f41c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f41e:	2900      	cmp	r1, #0
 800f420:	d044      	beq.n	800f4ac <_free_r+0x90>
 800f422:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f426:	9001      	str	r0, [sp, #4]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	f1a1 0404 	sub.w	r4, r1, #4
 800f42e:	bfb8      	it	lt
 800f430:	18e4      	addlt	r4, r4, r3
 800f432:	f7ff ffe7 	bl	800f404 <__malloc_lock>
 800f436:	4a1e      	ldr	r2, [pc, #120]	; (800f4b0 <_free_r+0x94>)
 800f438:	9801      	ldr	r0, [sp, #4]
 800f43a:	6813      	ldr	r3, [r2, #0]
 800f43c:	b933      	cbnz	r3, 800f44c <_free_r+0x30>
 800f43e:	6063      	str	r3, [r4, #4]
 800f440:	6014      	str	r4, [r2, #0]
 800f442:	b003      	add	sp, #12
 800f444:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f448:	f7ff bfe2 	b.w	800f410 <__malloc_unlock>
 800f44c:	42a3      	cmp	r3, r4
 800f44e:	d908      	bls.n	800f462 <_free_r+0x46>
 800f450:	6825      	ldr	r5, [r4, #0]
 800f452:	1961      	adds	r1, r4, r5
 800f454:	428b      	cmp	r3, r1
 800f456:	bf01      	itttt	eq
 800f458:	6819      	ldreq	r1, [r3, #0]
 800f45a:	685b      	ldreq	r3, [r3, #4]
 800f45c:	1949      	addeq	r1, r1, r5
 800f45e:	6021      	streq	r1, [r4, #0]
 800f460:	e7ed      	b.n	800f43e <_free_r+0x22>
 800f462:	461a      	mov	r2, r3
 800f464:	685b      	ldr	r3, [r3, #4]
 800f466:	b10b      	cbz	r3, 800f46c <_free_r+0x50>
 800f468:	42a3      	cmp	r3, r4
 800f46a:	d9fa      	bls.n	800f462 <_free_r+0x46>
 800f46c:	6811      	ldr	r1, [r2, #0]
 800f46e:	1855      	adds	r5, r2, r1
 800f470:	42a5      	cmp	r5, r4
 800f472:	d10b      	bne.n	800f48c <_free_r+0x70>
 800f474:	6824      	ldr	r4, [r4, #0]
 800f476:	4421      	add	r1, r4
 800f478:	1854      	adds	r4, r2, r1
 800f47a:	42a3      	cmp	r3, r4
 800f47c:	6011      	str	r1, [r2, #0]
 800f47e:	d1e0      	bne.n	800f442 <_free_r+0x26>
 800f480:	681c      	ldr	r4, [r3, #0]
 800f482:	685b      	ldr	r3, [r3, #4]
 800f484:	6053      	str	r3, [r2, #4]
 800f486:	4421      	add	r1, r4
 800f488:	6011      	str	r1, [r2, #0]
 800f48a:	e7da      	b.n	800f442 <_free_r+0x26>
 800f48c:	d902      	bls.n	800f494 <_free_r+0x78>
 800f48e:	230c      	movs	r3, #12
 800f490:	6003      	str	r3, [r0, #0]
 800f492:	e7d6      	b.n	800f442 <_free_r+0x26>
 800f494:	6825      	ldr	r5, [r4, #0]
 800f496:	1961      	adds	r1, r4, r5
 800f498:	428b      	cmp	r3, r1
 800f49a:	bf04      	itt	eq
 800f49c:	6819      	ldreq	r1, [r3, #0]
 800f49e:	685b      	ldreq	r3, [r3, #4]
 800f4a0:	6063      	str	r3, [r4, #4]
 800f4a2:	bf04      	itt	eq
 800f4a4:	1949      	addeq	r1, r1, r5
 800f4a6:	6021      	streq	r1, [r4, #0]
 800f4a8:	6054      	str	r4, [r2, #4]
 800f4aa:	e7ca      	b.n	800f442 <_free_r+0x26>
 800f4ac:	b003      	add	sp, #12
 800f4ae:	bd30      	pop	{r4, r5, pc}
 800f4b0:	2000b620 	.word	0x2000b620

0800f4b4 <_init>:
 800f4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4b6:	bf00      	nop
 800f4b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4ba:	bc08      	pop	{r3}
 800f4bc:	469e      	mov	lr, r3
 800f4be:	4770      	bx	lr

0800f4c0 <_fini>:
 800f4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4c2:	bf00      	nop
 800f4c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4c6:	bc08      	pop	{r3}
 800f4c8:	469e      	mov	lr, r3
 800f4ca:	4770      	bx	lr
