
I4_BCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce40  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000780  0800cfe0  0800cfe0  0001cfe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d760  0800d760  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800d760  0800d760  0001d760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d768  0800d768  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d768  0800d768  0001d768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d76c  0800d76c  0001d76c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800d770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000547c  20000074  0800d7e4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200054f0  0800d7e4  000254f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d0eb  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000678e  00000000  00000000  0004d18f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023b8  00000000  00000000  00053920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002118  00000000  00000000  00055cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000206ec  00000000  00000000  00057df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000377ab  00000000  00000000  000784dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b0a02  00000000  00000000  000afc87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00160689  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009454  00000000  00000000  001606dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cfc8 	.word	0x0800cfc8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800cfc8 	.word	0x0800cfc8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <BtcRxVal>:
	return E_OK;

}

StdReturnType BtcRxVal()
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0

	if(BtcReceivedDataOnBluetooth >= 116 && BtcReceivedDataOnBluetooth <= 132)
 80004e8:	4bec      	ldr	r3, [pc, #944]	; (800089c <BtcRxVal+0x3b8>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b73      	cmp	r3, #115	; 0x73
 80004ee:	d90a      	bls.n	8000506 <BtcRxVal+0x22>
 80004f0:	4bea      	ldr	r3, [pc, #936]	; (800089c <BtcRxVal+0x3b8>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2b84      	cmp	r3, #132	; 0x84
 80004f6:	d806      	bhi.n	8000506 <BtcRxVal+0x22>
	{

		Btc_TemperatureValue = BtcReceivedDataOnBluetooth - 100;
 80004f8:	4be8      	ldr	r3, [pc, #928]	; (800089c <BtcRxVal+0x3b8>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	3b64      	subs	r3, #100	; 0x64
 80004fe:	b2da      	uxtb	r2, r3
 8000500:	4be7      	ldr	r3, [pc, #924]	; (80008a0 <BtcRxVal+0x3bc>)
 8000502:	701a      	strb	r2, [r3, #0]
 8000504:	e00d      	b.n	8000522 <BtcRxVal+0x3e>

	}
	else if(BtcReceivedDataOnBluetooth >= 150 && BtcReceivedDataOnBluetooth <= 157)
 8000506:	4be5      	ldr	r3, [pc, #916]	; (800089c <BtcRxVal+0x3b8>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b95      	cmp	r3, #149	; 0x95
 800050c:	d909      	bls.n	8000522 <BtcRxVal+0x3e>
 800050e:	4be3      	ldr	r3, [pc, #908]	; (800089c <BtcRxVal+0x3b8>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b9d      	cmp	r3, #157	; 0x9d
 8000514:	d805      	bhi.n	8000522 <BtcRxVal+0x3e>
	{

		Btc_FanValue = BtcReceivedDataOnBluetooth - 150;
 8000516:	4be1      	ldr	r3, [pc, #900]	; (800089c <BtcRxVal+0x3b8>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	336a      	adds	r3, #106	; 0x6a
 800051c:	b2da      	uxtb	r2, r3
 800051e:	4be1      	ldr	r3, [pc, #900]	; (80008a4 <BtcRxVal+0x3c0>)
 8000520:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	switch(BtcReceivedDataOnBluetooth)
 8000522:	4bde      	ldr	r3, [pc, #888]	; (800089c <BtcRxVal+0x3b8>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	3b01      	subs	r3, #1
 8000528:	2bd5      	cmp	r3, #213	; 0xd5
 800052a:	f200 8297 	bhi.w	8000a5c <BtcRxVal+0x578>
 800052e:	a201      	add	r2, pc, #4	; (adr r2, 8000534 <BtcRxVal+0x50>)
 8000530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000534:	080008cd 	.word	0x080008cd
 8000538:	080008d5 	.word	0x080008d5
 800053c:	080008dd 	.word	0x080008dd
 8000540:	080008eb 	.word	0x080008eb
 8000544:	080008f3 	.word	0x080008f3
 8000548:	08000901 	.word	0x08000901
 800054c:	08000909 	.word	0x08000909
 8000550:	08000917 	.word	0x08000917
 8000554:	0800091f 	.word	0x0800091f
 8000558:	0800092d 	.word	0x0800092d
 800055c:	08000935 	.word	0x08000935
 8000560:	0800093d 	.word	0x0800093d
 8000564:	08000945 	.word	0x08000945
 8000568:	0800094d 	.word	0x0800094d
 800056c:	08000955 	.word	0x08000955
 8000570:	0800095d 	.word	0x0800095d
 8000574:	08000965 	.word	0x08000965
 8000578:	0800096d 	.word	0x0800096d
 800057c:	08000975 	.word	0x08000975
 8000580:	0800097d 	.word	0x0800097d
 8000584:	0800088d 	.word	0x0800088d
 8000588:	08000895 	.word	0x08000895
 800058c:	08000a5d 	.word	0x08000a5d
 8000590:	08000a5d 	.word	0x08000a5d
 8000594:	08000a5d 	.word	0x08000a5d
 8000598:	08000a5d 	.word	0x08000a5d
 800059c:	08000a5d 	.word	0x08000a5d
 80005a0:	08000a5d 	.word	0x08000a5d
 80005a4:	08000a5d 	.word	0x08000a5d
 80005a8:	08000a5d 	.word	0x08000a5d
 80005ac:	08000a5d 	.word	0x08000a5d
 80005b0:	08000a5d 	.word	0x08000a5d
 80005b4:	08000a5d 	.word	0x08000a5d
 80005b8:	08000a5d 	.word	0x08000a5d
 80005bc:	08000a5d 	.word	0x08000a5d
 80005c0:	08000a5d 	.word	0x08000a5d
 80005c4:	08000a5d 	.word	0x08000a5d
 80005c8:	08000a5d 	.word	0x08000a5d
 80005cc:	08000a5d 	.word	0x08000a5d
 80005d0:	08000a5d 	.word	0x08000a5d
 80005d4:	08000a5d 	.word	0x08000a5d
 80005d8:	08000a5d 	.word	0x08000a5d
 80005dc:	08000a5d 	.word	0x08000a5d
 80005e0:	08000a5d 	.word	0x08000a5d
 80005e4:	08000a5d 	.word	0x08000a5d
 80005e8:	08000a5d 	.word	0x08000a5d
 80005ec:	08000a5d 	.word	0x08000a5d
 80005f0:	08000a5d 	.word	0x08000a5d
 80005f4:	08000a5d 	.word	0x08000a5d
 80005f8:	08000a5d 	.word	0x08000a5d
 80005fc:	08000a5d 	.word	0x08000a5d
 8000600:	08000a5d 	.word	0x08000a5d
 8000604:	08000a5d 	.word	0x08000a5d
 8000608:	08000a5d 	.word	0x08000a5d
 800060c:	08000a5d 	.word	0x08000a5d
 8000610:	08000a5d 	.word	0x08000a5d
 8000614:	08000a5d 	.word	0x08000a5d
 8000618:	08000a5d 	.word	0x08000a5d
 800061c:	08000a5d 	.word	0x08000a5d
 8000620:	08000a5d 	.word	0x08000a5d
 8000624:	08000a5d 	.word	0x08000a5d
 8000628:	08000a5d 	.word	0x08000a5d
 800062c:	08000a5d 	.word	0x08000a5d
 8000630:	08000a5d 	.word	0x08000a5d
 8000634:	08000a5d 	.word	0x08000a5d
 8000638:	08000a5d 	.word	0x08000a5d
 800063c:	08000a5d 	.word	0x08000a5d
 8000640:	08000a5d 	.word	0x08000a5d
 8000644:	08000a5d 	.word	0x08000a5d
 8000648:	08000a5d 	.word	0x08000a5d
 800064c:	08000a5d 	.word	0x08000a5d
 8000650:	08000a5d 	.word	0x08000a5d
 8000654:	08000a5d 	.word	0x08000a5d
 8000658:	08000a5d 	.word	0x08000a5d
 800065c:	08000a5d 	.word	0x08000a5d
 8000660:	08000a5d 	.word	0x08000a5d
 8000664:	08000a5d 	.word	0x08000a5d
 8000668:	08000a5d 	.word	0x08000a5d
 800066c:	08000a5d 	.word	0x08000a5d
 8000670:	08000a5d 	.word	0x08000a5d
 8000674:	08000a5d 	.word	0x08000a5d
 8000678:	08000a5d 	.word	0x08000a5d
 800067c:	08000a5d 	.word	0x08000a5d
 8000680:	08000a5d 	.word	0x08000a5d
 8000684:	08000a5d 	.word	0x08000a5d
 8000688:	08000a5d 	.word	0x08000a5d
 800068c:	08000a5d 	.word	0x08000a5d
 8000690:	08000a5d 	.word	0x08000a5d
 8000694:	08000a5d 	.word	0x08000a5d
 8000698:	08000a5d 	.word	0x08000a5d
 800069c:	08000a5d 	.word	0x08000a5d
 80006a0:	08000a5d 	.word	0x08000a5d
 80006a4:	08000a5d 	.word	0x08000a5d
 80006a8:	08000a5d 	.word	0x08000a5d
 80006ac:	08000a5d 	.word	0x08000a5d
 80006b0:	08000a5d 	.word	0x08000a5d
 80006b4:	08000a5d 	.word	0x08000a5d
 80006b8:	08000a5d 	.word	0x08000a5d
 80006bc:	08000a5d 	.word	0x08000a5d
 80006c0:	080008ad 	.word	0x080008ad
 80006c4:	080008b5 	.word	0x080008b5
 80006c8:	080008bd 	.word	0x080008bd
 80006cc:	080008c5 	.word	0x080008c5
 80006d0:	08000a5d 	.word	0x08000a5d
 80006d4:	08000a5d 	.word	0x08000a5d
 80006d8:	08000a5d 	.word	0x08000a5d
 80006dc:	08000a5d 	.word	0x08000a5d
 80006e0:	08000a5d 	.word	0x08000a5d
 80006e4:	08000a5d 	.word	0x08000a5d
 80006e8:	08000a5d 	.word	0x08000a5d
 80006ec:	08000a5d 	.word	0x08000a5d
 80006f0:	08000a5d 	.word	0x08000a5d
 80006f4:	08000a5d 	.word	0x08000a5d
 80006f8:	08000a5d 	.word	0x08000a5d
 80006fc:	08000a5d 	.word	0x08000a5d
 8000700:	08000a5d 	.word	0x08000a5d
 8000704:	08000a5d 	.word	0x08000a5d
 8000708:	08000a5d 	.word	0x08000a5d
 800070c:	08000a5d 	.word	0x08000a5d
 8000710:	08000a5d 	.word	0x08000a5d
 8000714:	08000a5d 	.word	0x08000a5d
 8000718:	08000a5d 	.word	0x08000a5d
 800071c:	08000a5d 	.word	0x08000a5d
 8000720:	08000a5d 	.word	0x08000a5d
 8000724:	08000a5d 	.word	0x08000a5d
 8000728:	08000a5d 	.word	0x08000a5d
 800072c:	08000a5d 	.word	0x08000a5d
 8000730:	08000a5d 	.word	0x08000a5d
 8000734:	08000a5d 	.word	0x08000a5d
 8000738:	08000a5d 	.word	0x08000a5d
 800073c:	08000a5d 	.word	0x08000a5d
 8000740:	08000a5d 	.word	0x08000a5d
 8000744:	08000a5d 	.word	0x08000a5d
 8000748:	08000a5d 	.word	0x08000a5d
 800074c:	08000a5d 	.word	0x08000a5d
 8000750:	08000a5d 	.word	0x08000a5d
 8000754:	08000a5d 	.word	0x08000a5d
 8000758:	08000a5d 	.word	0x08000a5d
 800075c:	08000a5d 	.word	0x08000a5d
 8000760:	08000a5d 	.word	0x08000a5d
 8000764:	08000a5d 	.word	0x08000a5d
 8000768:	08000a5d 	.word	0x08000a5d
 800076c:	08000a5d 	.word	0x08000a5d
 8000770:	08000a5d 	.word	0x08000a5d
 8000774:	08000a5d 	.word	0x08000a5d
 8000778:	08000a5d 	.word	0x08000a5d
 800077c:	08000a5d 	.word	0x08000a5d
 8000780:	08000a5d 	.word	0x08000a5d
 8000784:	08000a5d 	.word	0x08000a5d
 8000788:	08000a5d 	.word	0x08000a5d
 800078c:	08000a5d 	.word	0x08000a5d
 8000790:	08000a5d 	.word	0x08000a5d
 8000794:	08000a5d 	.word	0x08000a5d
 8000798:	08000a5d 	.word	0x08000a5d
 800079c:	08000a5d 	.word	0x08000a5d
 80007a0:	08000a5d 	.word	0x08000a5d
 80007a4:	08000a5d 	.word	0x08000a5d
 80007a8:	08000a5d 	.word	0x08000a5d
 80007ac:	08000a5d 	.word	0x08000a5d
 80007b0:	08000a5d 	.word	0x08000a5d
 80007b4:	08000a5d 	.word	0x08000a5d
 80007b8:	08000a5d 	.word	0x08000a5d
 80007bc:	08000a5d 	.word	0x08000a5d
 80007c0:	08000a5d 	.word	0x08000a5d
 80007c4:	08000a5d 	.word	0x08000a5d
 80007c8:	08000a5d 	.word	0x08000a5d
 80007cc:	08000a5d 	.word	0x08000a5d
 80007d0:	08000a5d 	.word	0x08000a5d
 80007d4:	08000a5d 	.word	0x08000a5d
 80007d8:	08000a5d 	.word	0x08000a5d
 80007dc:	08000a5d 	.word	0x08000a5d
 80007e0:	08000a5d 	.word	0x08000a5d
 80007e4:	08000a5d 	.word	0x08000a5d
 80007e8:	08000a5d 	.word	0x08000a5d
 80007ec:	08000a5d 	.word	0x08000a5d
 80007f0:	08000a5d 	.word	0x08000a5d
 80007f4:	08000a5d 	.word	0x08000a5d
 80007f8:	08000a5d 	.word	0x08000a5d
 80007fc:	08000a5d 	.word	0x08000a5d
 8000800:	08000a5d 	.word	0x08000a5d
 8000804:	08000a5d 	.word	0x08000a5d
 8000808:	08000a5d 	.word	0x08000a5d
 800080c:	08000a5d 	.word	0x08000a5d
 8000810:	08000a5d 	.word	0x08000a5d
 8000814:	08000a5d 	.word	0x08000a5d
 8000818:	08000a5d 	.word	0x08000a5d
 800081c:	08000a5d 	.word	0x08000a5d
 8000820:	08000a5d 	.word	0x08000a5d
 8000824:	08000a5d 	.word	0x08000a5d
 8000828:	08000a5d 	.word	0x08000a5d
 800082c:	08000a5d 	.word	0x08000a5d
 8000830:	08000a5d 	.word	0x08000a5d
 8000834:	08000a5d 	.word	0x08000a5d
 8000838:	08000a5d 	.word	0x08000a5d
 800083c:	08000a5d 	.word	0x08000a5d
 8000840:	08000a5d 	.word	0x08000a5d
 8000844:	08000a5d 	.word	0x08000a5d
 8000848:	08000a5d 	.word	0x08000a5d
 800084c:	08000a5d 	.word	0x08000a5d
 8000850:	08000985 	.word	0x08000985
 8000854:	0800098d 	.word	0x0800098d
 8000858:	0800099b 	.word	0x0800099b
 800085c:	080009c1 	.word	0x080009c1
 8000860:	080009c9 	.word	0x080009c9
 8000864:	08000a35 	.word	0x08000a35
 8000868:	08000a55 	.word	0x08000a55
 800086c:	080009d1 	.word	0x080009d1
 8000870:	080009d9 	.word	0x080009d9
 8000874:	080009e1 	.word	0x080009e1
 8000878:	080009f5 	.word	0x080009f5
 800087c:	080009fd 	.word	0x080009fd
 8000880:	08000a11 	.word	0x08000a11
 8000884:	08000a19 	.word	0x08000a19
 8000888:	08000a2d 	.word	0x08000a2d
	{

		case BTC_RX_EXTLIGHTS_REVERSELIGHT_ON:

			Btc_ReverseLight = BTC_RX_EXTLIGHTS_REVERSELIGHT_ON;
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <BtcRxVal+0x3c4>)
 800088e:	2215      	movs	r2, #21
 8000890:	701a      	strb	r2, [r3, #0]

			break;
 8000892:	e0e4      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF:

			Btc_ReverseLight = BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF;
 8000894:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <BtcRxVal+0x3c4>)
 8000896:	2216      	movs	r2, #22
 8000898:	701a      	strb	r2, [r3, #0]

			break;
 800089a:	e0e0      	b.n	8000a5e <BtcRxVal+0x57a>
 800089c:	20000090 	.word	0x20000090
 80008a0:	200000a9 	.word	0x200000a9
 80008a4:	200000aa 	.word	0x200000aa
 80008a8:	200000a8 	.word	0x200000a8

		case BTC_RX_EXTLIGHTS_POSITIONZERO:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONZERO;
 80008ac:	4b6f      	ldr	r3, [pc, #444]	; (8000a6c <BtcRxVal+0x588>)
 80008ae:	2264      	movs	r2, #100	; 0x64
 80008b0:	701a      	strb	r2, [r3, #0]

			break;
 80008b2:	e0d4      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
 80008b4:	4b6d      	ldr	r3, [pc, #436]	; (8000a6c <BtcRxVal+0x588>)
 80008b6:	2265      	movs	r2, #101	; 0x65
 80008b8:	701a      	strb	r2, [r3, #0]

			break;
 80008ba:	e0d0      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_POSITIONLIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
 80008bc:	4b6b      	ldr	r3, [pc, #428]	; (8000a6c <BtcRxVal+0x588>)
 80008be:	2266      	movs	r2, #102	; 0x66
 80008c0:	701a      	strb	r2, [r3, #0]

			break;
 80008c2:	e0cc      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
 80008c4:	4b69      	ldr	r3, [pc, #420]	; (8000a6c <BtcRxVal+0x588>)
 80008c6:	2267      	movs	r2, #103	; 0x67
 80008c8:	701a      	strb	r2, [r3, #0]

			break;
 80008ca:	e0c8      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_CENLOC_ON:

			Btc_CenLoc = STD_HIGH;
 80008cc:	4b68      	ldr	r3, [pc, #416]	; (8000a70 <BtcRxVal+0x58c>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	701a      	strb	r2, [r3, #0]

			break;
 80008d2:	e0c4      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_CENLOC_OFF:

			Btc_CenLoc = STD_LOW;
 80008d4:	4b66      	ldr	r3, [pc, #408]	; (8000a70 <BtcRxVal+0x58c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	701a      	strb	r2, [r3, #0]

			break;
 80008da:	e0c0      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_HIGBEAM_ON:

			Btc_HighBeam = STD_HIGH;
 80008dc:	4b65      	ldr	r3, [pc, #404]	; (8000a74 <BtcRxVal+0x590>)
 80008de:	2201      	movs	r2, #1
 80008e0:	701a      	strb	r2, [r3, #0]
			Btc_FlashHighBeam = STD_LOW;
 80008e2:	4b65      	ldr	r3, [pc, #404]	; (8000a78 <BtcRxVal+0x594>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]

			break;
 80008e8:	e0b9      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_HIGBEAM_OFF:

			Btc_HighBeam = STD_LOW;
 80008ea:	4b62      	ldr	r3, [pc, #392]	; (8000a74 <BtcRxVal+0x590>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	701a      	strb	r2, [r3, #0]

			break;
 80008f0:	e0b5      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_ON:

			Btc_FlashHighBeam = STD_HIGH;
 80008f2:	4b61      	ldr	r3, [pc, #388]	; (8000a78 <BtcRxVal+0x594>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	701a      	strb	r2, [r3, #0]
			Btc_HighBeam = STD_LOW;
 80008f8:	4b5e      	ldr	r3, [pc, #376]	; (8000a74 <BtcRxVal+0x590>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]

			break;
 80008fe:	e0ae      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_OFF:

			Btc_FlashHighBeam = STD_LOW;
 8000900:	4b5d      	ldr	r3, [pc, #372]	; (8000a78 <BtcRxVal+0x594>)
 8000902:	2200      	movs	r2, #0
 8000904:	701a      	strb	r2, [r3, #0]

			break;
 8000906:	e0aa      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:

			Btc_TurnSignalLeft = STD_HIGH;
 8000908:	4b5c      	ldr	r3, [pc, #368]	; (8000a7c <BtcRxVal+0x598>)
 800090a:	2201      	movs	r2, #1
 800090c:	701a      	strb	r2, [r3, #0]
			Btc_TurnSignalRight = STD_LOW;
 800090e:	4b5c      	ldr	r3, [pc, #368]	; (8000a80 <BtcRxVal+0x59c>)
 8000910:	2200      	movs	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]

			break;
 8000914:	e0a3      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:

			Btc_TurnSignalLeft = STD_LOW;
 8000916:	4b59      	ldr	r3, [pc, #356]	; (8000a7c <BtcRxVal+0x598>)
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]

			break;
 800091c:	e09f      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_ESTLIGHTS_TURNSIGNALRIGHT_ON:

			Btc_TurnSignalRight = STD_HIGH;
 800091e:	4b58      	ldr	r3, [pc, #352]	; (8000a80 <BtcRxVal+0x59c>)
 8000920:	2201      	movs	r2, #1
 8000922:	701a      	strb	r2, [r3, #0]
			Btc_TurnSignalLeft = STD_LOW;
 8000924:	4b55      	ldr	r3, [pc, #340]	; (8000a7c <BtcRxVal+0x598>)
 8000926:	2200      	movs	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]

			break;
 800092a:	e098      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_ESTLIGHTS_TURNSIGNALRIGHT_OFF:

			Btc_TurnSignalRight = STD_LOW;
 800092c:	4b54      	ldr	r3, [pc, #336]	; (8000a80 <BtcRxVal+0x59c>)
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]

			break;
 8000932:	e094      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:

			Btc_HazardLight = STD_HIGH;
 8000934:	4b53      	ldr	r3, [pc, #332]	; (8000a84 <BtcRxVal+0x5a0>)
 8000936:	2201      	movs	r2, #1
 8000938:	701a      	strb	r2, [r3, #0]

			break;
 800093a:	e090      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:

			Btc_HazardLight = STD_LOW;
 800093c:	4b51      	ldr	r3, [pc, #324]	; (8000a84 <BtcRxVal+0x5a0>)
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]

			break;
 8000942:	e08c      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:

			Btc_FrontFogLight = STD_HIGH;
 8000944:	4b50      	ldr	r3, [pc, #320]	; (8000a88 <BtcRxVal+0x5a4>)
 8000946:	2201      	movs	r2, #1
 8000948:	701a      	strb	r2, [r3, #0]

			break;
 800094a:	e088      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:

			Btc_FrontFogLight = STD_LOW;
 800094c:	4b4e      	ldr	r3, [pc, #312]	; (8000a88 <BtcRxVal+0x5a4>)
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]

			break;
 8000952:	e084      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:

			Btc_RearFogLight = STD_HIGH;
 8000954:	4b4d      	ldr	r3, [pc, #308]	; (8000a8c <BtcRxVal+0x5a8>)
 8000956:	2201      	movs	r2, #1
 8000958:	701a      	strb	r2, [r3, #0]

			break;
 800095a:	e080      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:

			Btc_RearFogLight = STD_LOW;
 800095c:	4b4b      	ldr	r3, [pc, #300]	; (8000a8c <BtcRxVal+0x5a8>)
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]

			break;
 8000962:	e07c      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_BRAKELIGHTON:

			Btc_BrakeLight = STD_HIGH;
 8000964:	4b4a      	ldr	r3, [pc, #296]	; (8000a90 <BtcRxVal+0x5ac>)
 8000966:	2201      	movs	r2, #1
 8000968:	701a      	strb	r2, [r3, #0]

			break;
 800096a:	e078      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:

			Btc_BrakeLight = STD_LOW;
 800096c:	4b48      	ldr	r3, [pc, #288]	; (8000a90 <BtcRxVal+0x5ac>)
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]

			break;
 8000972:	e074      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:

			Btc_IntLights = STD_HIGH;
 8000974:	4b47      	ldr	r3, [pc, #284]	; (8000a94 <BtcRxVal+0x5b0>)
 8000976:	2201      	movs	r2, #1
 8000978:	701a      	strb	r2, [r3, #0]

			break;
 800097a:	e070      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:

			Btc_IntLights = STD_LOW;
 800097c:	4b45      	ldr	r3, [pc, #276]	; (8000a94 <BtcRxVal+0x5b0>)
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]

			break;
 8000982:	e06c      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_HVAC_NORMALMODE_ON:

			Btc_NormalMode = STD_HIGH;
 8000984:	4b44      	ldr	r3, [pc, #272]	; (8000a98 <BtcRxVal+0x5b4>)
 8000986:	2201      	movs	r2, #1
 8000988:	701a      	strb	r2, [r3, #0]

			break;
 800098a:	e068      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_HVAC_RECIRCULATIONMODE_ON:

			Btc_NormalMode 			= STD_LOW;
 800098c:	4b42      	ldr	r3, [pc, #264]	; (8000a98 <BtcRxVal+0x5b4>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
			Btc_RecirculationMode 	= STD_HIGH;
 8000992:	4b42      	ldr	r3, [pc, #264]	; (8000a9c <BtcRxVal+0x5b8>)
 8000994:	2201      	movs	r2, #1
 8000996:	701a      	strb	r2, [r3, #0]

			break;
 8000998:	e061      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_HVAC_AUTOMATICMODE_ON:

			Btc_NormalMode 			= STD_LOW;
 800099a:	4b3f      	ldr	r3, [pc, #252]	; (8000a98 <BtcRxVal+0x5b4>)
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]
			Btc_RecirculationMode 	= STD_LOW;
 80009a0:	4b3e      	ldr	r3, [pc, #248]	; (8000a9c <BtcRxVal+0x5b8>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]
			Btc_LegVents 			= STD_LOW;
 80009a6:	4b3e      	ldr	r3, [pc, #248]	; (8000aa0 <BtcRxVal+0x5bc>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
			Btc_MidVents 			= STD_LOW;
 80009ac:	4b3d      	ldr	r3, [pc, #244]	; (8000aa4 <BtcRxVal+0x5c0>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]
			Btc_WindshieldVents 	= STD_LOW;
 80009b2:	4b3d      	ldr	r3, [pc, #244]	; (8000aa8 <BtcRxVal+0x5c4>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode 		= STD_HIGH;
 80009b8:	4b3c      	ldr	r3, [pc, #240]	; (8000aac <BtcRxVal+0x5c8>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	701a      	strb	r2, [r3, #0]

			break;
 80009be:	e04e      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_HVAC_BACKWINDOWDEFROSTON:

			Btc_BackwindowDefrost = STD_HIGH;
 80009c0:	4b3b      	ldr	r3, [pc, #236]	; (8000ab0 <BtcRxVal+0x5cc>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	701a      	strb	r2, [r3, #0]

			break;
 80009c6:	e04a      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_HVAC_BACKWINDOWDEFROSTOFF:

			Btc_BackwindowDefrost = STD_LOW;
 80009c8:	4b39      	ldr	r3, [pc, #228]	; (8000ab0 <BtcRxVal+0x5cc>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	701a      	strb	r2, [r3, #0]

			break;
 80009ce:	e046      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_HVAC_AC_ON:

			Btc_AC = STD_HIGH;
 80009d0:	4b38      	ldr	r3, [pc, #224]	; (8000ab4 <BtcRxVal+0x5d0>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	701a      	strb	r2, [r3, #0]

			break;
 80009d6:	e042      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_HVAC_AC_OFF:

			Btc_AC = STD_LOW;
 80009d8:	4b36      	ldr	r3, [pc, #216]	; (8000ab4 <BtcRxVal+0x5d0>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]

			break;
 80009de:	e03e      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_HVAC_LEGVENT_ON:

			Btc_LegVents 			= STD_HIGH;
 80009e0:	4b2f      	ldr	r3, [pc, #188]	; (8000aa0 <BtcRxVal+0x5bc>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	701a      	strb	r2, [r3, #0]
			Btc_WindshieldDefrost 	= STD_LOW;
 80009e6:	4b34      	ldr	r3, [pc, #208]	; (8000ab8 <BtcRxVal+0x5d4>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode 		= STD_LOW;
 80009ec:	4b2f      	ldr	r3, [pc, #188]	; (8000aac <BtcRxVal+0x5c8>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]

			break;
 80009f2:	e034      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_HVAC_LEGVENT_OFF:

			Btc_LegVents = STD_LOW;
 80009f4:	4b2a      	ldr	r3, [pc, #168]	; (8000aa0 <BtcRxVal+0x5bc>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	701a      	strb	r2, [r3, #0]

			break;
 80009fa:	e030      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_HVAC_MIDVENT_ON:

			Btc_MidVents 			= STD_HIGH;
 80009fc:	4b29      	ldr	r3, [pc, #164]	; (8000aa4 <BtcRxVal+0x5c0>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	701a      	strb	r2, [r3, #0]
			Btc_WindshieldDefrost 	= STD_LOW;
 8000a02:	4b2d      	ldr	r3, [pc, #180]	; (8000ab8 <BtcRxVal+0x5d4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode 		= STD_LOW;
 8000a08:	4b28      	ldr	r3, [pc, #160]	; (8000aac <BtcRxVal+0x5c8>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	701a      	strb	r2, [r3, #0]

			break;
 8000a0e:	e026      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_HVAC_MIDVENT_OFF:

			Btc_MidVents = STD_LOW;
 8000a10:	4b24      	ldr	r3, [pc, #144]	; (8000aa4 <BtcRxVal+0x5c0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	701a      	strb	r2, [r3, #0]

			break;
 8000a16:	e022      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_HVAC_WINDSHIELDVENT_ON:

			Btc_WindshieldVents 	= STD_HIGH;
 8000a18:	4b23      	ldr	r3, [pc, #140]	; (8000aa8 <BtcRxVal+0x5c4>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	701a      	strb	r2, [r3, #0]
			Btc_WindshieldDefrost 	= STD_LOW;
 8000a1e:	4b26      	ldr	r3, [pc, #152]	; (8000ab8 <BtcRxVal+0x5d4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode 		= STD_LOW;
 8000a24:	4b21      	ldr	r3, [pc, #132]	; (8000aac <BtcRxVal+0x5c8>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]

			break;
 8000a2a:	e018      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_HVAC_WINDSHIELDVENT_OFF:

			Btc_WindshieldVents = STD_LOW;
 8000a2c:	4b1e      	ldr	r3, [pc, #120]	; (8000aa8 <BtcRxVal+0x5c4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	701a      	strb	r2, [r3, #0]

			break;
 8000a32:	e014      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_HVAC_WINDSHIELDDEFROST_ON:

			Btc_WindshieldDefrost	= STD_HIGH;
 8000a34:	4b20      	ldr	r3, [pc, #128]	; (8000ab8 <BtcRxVal+0x5d4>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	701a      	strb	r2, [r3, #0]
			Btc_LegVents 			= STD_LOW;
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <BtcRxVal+0x5bc>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	701a      	strb	r2, [r3, #0]
			Btc_MidVents 			= STD_LOW;
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <BtcRxVal+0x5c0>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]
			Btc_WindshieldVents 	= STD_LOW;
 8000a46:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <BtcRxVal+0x5c4>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode 		= STD_LOW;
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <BtcRxVal+0x5c8>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	701a      	strb	r2, [r3, #0]

			break;
 8000a52:	e004      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_HVAC_WINDSHIELDDEFROST_OFF:

			Btc_WindshieldDefrost = STD_LOW;
 8000a54:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <BtcRxVal+0x5d4>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	701a      	strb	r2, [r3, #0]


			break;
 8000a5a:	e000      	b.n	8000a5e <BtcRxVal+0x57a>

		default:

			break;
 8000a5c:	bf00      	nop

	}

	return 1;
 8000a5e:	2301      	movs	r3, #1

}
 8000a60:	4618      	mov	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	2000009f 	.word	0x2000009f
 8000a70:	20000099 	.word	0x20000099
 8000a74:	200000a0 	.word	0x200000a0
 8000a78:	200000a1 	.word	0x200000a1
 8000a7c:	200000a3 	.word	0x200000a3
 8000a80:	200000a4 	.word	0x200000a4
 8000a84:	200000a5 	.word	0x200000a5
 8000a88:	200000a2 	.word	0x200000a2
 8000a8c:	200000a7 	.word	0x200000a7
 8000a90:	200000a6 	.word	0x200000a6
 8000a94:	200000b5 	.word	0x200000b5
 8000a98:	200000b3 	.word	0x200000b3
 8000a9c:	200000b2 	.word	0x200000b2
 8000aa0:	200000ab 	.word	0x200000ab
 8000aa4:	200000ac 	.word	0x200000ac
 8000aa8:	200000ad 	.word	0x200000ad
 8000aac:	200000b1 	.word	0x200000b1
 8000ab0:	200000af 	.word	0x200000af
 8000ab4:	200000b0 	.word	0x200000b0
 8000ab8:	200000ae 	.word	0x200000ae

08000abc <BtcEnableUart>:

StdReturnType BtcEnableUart()
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0

	uint8 status = STD_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	71fb      	strb	r3, [r7, #7]

	if(HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1) != E_NOT_OK)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	490e      	ldr	r1, [pc, #56]	; (8000b04 <BtcEnableUart+0x48>)
 8000aca:	480f      	ldr	r0, [pc, #60]	; (8000b08 <BtcEnableUart+0x4c>)
 8000acc:	f008 f86a 	bl	8008ba4 <HAL_UART_Receive_IT>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d007      	beq.n	8000ae6 <BtcEnableUart+0x2a>
	{
		HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	490a      	ldr	r1, [pc, #40]	; (8000b04 <BtcEnableUart+0x48>)
 8000ada:	480b      	ldr	r0, [pc, #44]	; (8000b08 <BtcEnableUart+0x4c>)
 8000adc:	f008 f862 	bl	8008ba4 <HAL_UART_Receive_IT>
		status = E_OK;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	71fb      	strb	r3, [r7, #7]
 8000ae4:	e009      	b.n	8000afa <BtcEnableUart+0x3e>
	}
	else if(HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1) == E_NOT_OK)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	4906      	ldr	r1, [pc, #24]	; (8000b04 <BtcEnableUart+0x48>)
 8000aea:	4807      	ldr	r0, [pc, #28]	; (8000b08 <BtcEnableUart+0x4c>)
 8000aec:	f008 f85a 	bl	8008ba4 <HAL_UART_Receive_IT>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d101      	bne.n	8000afa <BtcEnableUart+0x3e>
	{
		status = E_NOT_OK;
 8000af6:	2301      	movs	r3, #1
 8000af8:	71fb      	strb	r3, [r7, #7]
	else
	{
		/* do nothing */
	}

	return status;
 8000afa:	79fb      	ldrb	r3, [r7, #7]

}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000090 	.word	0x20000090
 8000b08:	20000820 	.word	0x20000820

08000b0c <BtcMainFunction>:

void BtcMainFunction()
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0

	BtcEnableUart();
 8000b10:	f7ff ffd4 	bl	8000abc <BtcEnableUart>
	BtcRxVal();
 8000b14:	f7ff fce6 	bl	80004e4 <BtcRxVal>

}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <CenLocState>:

	return E_OK;
}

StdReturnType CenLocState()
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0

	uint8 status = E_OK;
 8000b22:	2300      	movs	r3, #0
 8000b24:	71fb      	strb	r3, [r7, #7]

	if(CenLoc_PreviousState != CenLoc_CurrentState)
 8000b26:	4b1e      	ldr	r3, [pc, #120]	; (8000ba0 <CenLocState+0x84>)
 8000b28:	781a      	ldrb	r2, [r3, #0]
 8000b2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <CenLocState+0x88>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d030      	beq.n	8000b94 <CenLocState+0x78>
	{

		CenLoc_ExtLights_LockedState 	= CenLoc_PreviousState;
 8000b32:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <CenLocState+0x84>)
 8000b34:	781a      	ldrb	r2, [r3, #0]
 8000b36:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <CenLocState+0x8c>)
 8000b38:	701a      	strb	r2, [r3, #0]
		CenLoc_ExtLights_UnlockedState 	= CenLoc_CurrentState;
 8000b3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <CenLocState+0x88>)
 8000b3c:	781a      	ldrb	r2, [r3, #0]
 8000b3e:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <CenLocState+0x90>)
 8000b40:	701a      	strb	r2, [r3, #0]
		CenLoc_PreviousState 			= CenLoc_CurrentState;
 8000b42:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <CenLocState+0x88>)
 8000b44:	781a      	ldrb	r2, [r3, #0]
 8000b46:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <CenLocState+0x84>)
 8000b48:	701a      	strb	r2, [r3, #0]
		CenLoc_LockUnlockFlag 			= !CenLoc_CurrentState;
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <CenLocState+0x88>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	bf0c      	ite	eq
 8000b52:	2301      	moveq	r3, #1
 8000b54:	2300      	movne	r3, #0
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <CenLocState+0x94>)
 8000b5c:	701a      	strb	r2, [r3, #0]

		CenLoc_LockCounter 				= STD_LOW;
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <CenLocState+0x98>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]
		CenLoc_UnlockCounter 			= STD_LOW;
 8000b64:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <CenLocState+0x9c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim2IRQFlag 				= STD_LOW;
 8000b6a:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <CenLocState+0xa0>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim5IRQFlag 				= STD_LOW;
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <CenLocState+0xa4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim3IRQFlag				= STD_LOW;
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <CenLocState+0xa8>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim11IRQFlag				= STD_LOW;
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <CenLocState+0xac>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	701a      	strb	r2, [r3, #0]

		HAL_TIM_Base_Init(&htim2);
 8000b82:	4812      	ldr	r0, [pc, #72]	; (8000bcc <CenLocState+0xb0>)
 8000b84:	f006 fe9c 	bl	80078c0 <HAL_TIM_Base_Init>
		HAL_TIM_Base_Init(&htim3);
 8000b88:	4811      	ldr	r0, [pc, #68]	; (8000bd0 <CenLocState+0xb4>)
 8000b8a:	f006 fe99 	bl	80078c0 <HAL_TIM_Base_Init>
		HAL_TIM_Base_Init(&htim5);
 8000b8e:	4811      	ldr	r0, [pc, #68]	; (8000bd4 <CenLocState+0xb8>)
 8000b90:	f006 fe96 	bl	80078c0 <HAL_TIM_Base_Init>

		/* do nothing */

	}

	return status;
 8000b94:	79fb      	ldrb	r3, [r7, #7]

}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000092 	.word	0x20000092
 8000ba4:	20000091 	.word	0x20000091
 8000ba8:	20000095 	.word	0x20000095
 8000bac:	20000094 	.word	0x20000094
 8000bb0:	20000093 	.word	0x20000093
 8000bb4:	20000097 	.word	0x20000097
 8000bb8:	20000098 	.word	0x20000098
 8000bbc:	2000009b 	.word	0x2000009b
 8000bc0:	2000009d 	.word	0x2000009d
 8000bc4:	2000009c 	.word	0x2000009c
 8000bc8:	2000009e 	.word	0x2000009e
 8000bcc:	200003e8 	.word	0x200003e8
 8000bd0:	2000049c 	.word	0x2000049c
 8000bd4:	20000604 	.word	0x20000604

08000bd8 <CenLocSecAlmStateToOff>:

void CenLocSecAlmStateToOff()
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0

	if(CenLoc_CurrentState == STD_HIGH)
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <CenLocSecAlmStateToOff+0x1c>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d102      	bne.n	8000bea <CenLocSecAlmStateToOff+0x12>
	{

		SecAlm_Trigger = STD_LOW;
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <CenLocSecAlmStateToOff+0x20>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	20000091 	.word	0x20000091
 8000bf8:	200000ba 	.word	0x200000ba

08000bfc <CenLocRxBtcState>:

void CenLocRxBtcState()
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

	if(Btc_CenLoc == STD_HIGH)
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <CenLocRxBtcState+0x30>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d104      	bne.n	8000c12 <CenLocRxBtcState+0x16>
	{

		CenLoc_CurrentState = Btc_CenLoc;
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <CenLocRxBtcState+0x30>)
 8000c0a:	781a      	ldrb	r2, [r3, #0]
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <CenLocRxBtcState+0x34>)
 8000c0e:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8000c10:	e007      	b.n	8000c22 <CenLocRxBtcState+0x26>
	else if(Btc_CenLoc == STD_LOW)
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <CenLocRxBtcState+0x30>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d103      	bne.n	8000c22 <CenLocRxBtcState+0x26>
		CenLoc_CurrentState = Btc_CenLoc;
 8000c1a:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <CenLocRxBtcState+0x30>)
 8000c1c:	781a      	ldrb	r2, [r3, #0]
 8000c1e:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <CenLocRxBtcState+0x34>)
 8000c20:	701a      	strb	r2, [r3, #0]
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	20000099 	.word	0x20000099
 8000c30:	20000091 	.word	0x20000091

08000c34 <CenLocToggleDoorLED>:

void CenLocToggleDoorLED(uint8 PinState)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CENLOC_DOOR_LED_PORT, CENLOC_DOOR_LED_PIN, PinState);
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	461a      	mov	r2, r3
 8000c42:	2180      	movs	r1, #128	; 0x80
 8000c44:	4803      	ldr	r0, [pc, #12]	; (8000c54 <CenLocToggleDoorLED+0x20>)
 8000c46:	f003 fd99 	bl	800477c <HAL_GPIO_WritePin>

}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40020400 	.word	0x40020400

08000c58 <CenLocFollowMeHome>:

void CenLocFollowMeHome()
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0

	if(CenLoc_Tim5IRQFlag == 1)
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <CenLocFollowMeHome+0x50>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d10c      	bne.n	8000c7e <CenLocFollowMeHome+0x26>
	{

		ExtLightsFrontFogLight(STD_HIGH);
 8000c64:	2001      	movs	r0, #1
 8000c66:	f000 f977 	bl	8000f58 <ExtLightsFrontFogLight>
		ExtLightsDayTimeRunningLight(STD_HIGH);
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f000 f962 	bl	8000f34 <ExtLightsDayTimeRunningLight>
		ExtLightsLowBeam(STD_HIGH);
 8000c70:	2001      	movs	r0, #1
 8000c72:	f000 f94d 	bl	8000f10 <ExtLightsLowBeam>
		ExtLightsRearPositionLight(STD_HIGH);
 8000c76:	2001      	movs	r0, #1
 8000c78:	f000 f9a4 	bl	8000fc4 <ExtLightsRearPositionLight>

		/* do nothing */

	}

}
 8000c7c:	e012      	b.n	8000ca4 <CenLocFollowMeHome+0x4c>
	else if(CenLoc_Tim5IRQFlag == 2)
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <CenLocFollowMeHome+0x50>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d10e      	bne.n	8000ca4 <CenLocFollowMeHome+0x4c>
		ExtLightsFrontFogLight(STD_LOW);
 8000c86:	2000      	movs	r0, #0
 8000c88:	f000 f966 	bl	8000f58 <ExtLightsFrontFogLight>
		ExtLightsDayTimeRunningLight(STD_LOW);
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f000 f951 	bl	8000f34 <ExtLightsDayTimeRunningLight>
		ExtLightsLowBeam(STD_LOW);
 8000c92:	2000      	movs	r0, #0
 8000c94:	f000 f93c 	bl	8000f10 <ExtLightsLowBeam>
		ExtLightsRearPositionLight(STD_LOW);
 8000c98:	2000      	movs	r0, #0
 8000c9a:	f000 f993 	bl	8000fc4 <ExtLightsRearPositionLight>
		HAL_TIM_Base_Stop_IT(&htim5);
 8000c9e:	4803      	ldr	r0, [pc, #12]	; (8000cac <CenLocFollowMeHome+0x54>)
 8000ca0:	f006 ff72 	bl	8007b88 <HAL_TIM_Base_Stop_IT>
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	2000009d 	.word	0x2000009d
 8000cac:	20000604 	.word	0x20000604

08000cb0 <CenLocBlinkSignals>:

void CenLocBlinkSignals()
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0

	ExtLightsTurnSignalLeft(CenLoc_BlinkState);
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <CenLocBlinkSignals+0x1c>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 f95f 	bl	8000f7c <ExtLightsTurnSignalLeft>
	ExtLightsTurnSignalRight(CenLoc_BlinkState);
 8000cbe:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <CenLocBlinkSignals+0x1c>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 f96c 	bl	8000fa0 <ExtLightsTurnSignalRight>

}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000096 	.word	0x20000096

08000cd0 <CenLocLockUnlockStates>:

StdReturnType CenLocLockUnlockStates()
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0

	uint8 status = STD_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	71fb      	strb	r3, [r7, #7]


	if(CenLoc_CurrentState == STD_HIGH && SecAlm_Trigger == STD_LOW)
 8000cda:	4b73      	ldr	r3, [pc, #460]	; (8000ea8 <CenLocLockUnlockStates+0x1d8>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d172      	bne.n	8000dc8 <CenLocLockUnlockStates+0xf8>
 8000ce2:	4b72      	ldr	r3, [pc, #456]	; (8000eac <CenLocLockUnlockStates+0x1dc>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d16e      	bne.n	8000dc8 <CenLocLockUnlockStates+0xf8>
	{

		HAL_TIM_Base_Stop_IT(&htim3);
 8000cea:	4871      	ldr	r0, [pc, #452]	; (8000eb0 <CenLocLockUnlockStates+0x1e0>)
 8000cec:	f006 ff4c 	bl	8007b88 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Start_IT(&htim5);
 8000cf0:	4870      	ldr	r0, [pc, #448]	; (8000eb4 <CenLocLockUnlockStates+0x1e4>)
 8000cf2:	f006 feb7 	bl	8007a64 <HAL_TIM_Base_Start_IT>
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000cf6:	4b6e      	ldr	r3, [pc, #440]	; (8000eb0 <CenLocLockUnlockStates+0x1e0>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	625a      	str	r2, [r3, #36]	; 0x24
		CenLocToggleDoorLED(CenLoc_CurrentState);
 8000cfe:	4b6a      	ldr	r3, [pc, #424]	; (8000ea8 <CenLocLockUnlockStates+0x1d8>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ff96 	bl	8000c34 <CenLocToggleDoorLED>
		SecAlmToggleAlarmLed(!CenLoc_CurrentState);
 8000d08:	4b67      	ldr	r3, [pc, #412]	; (8000ea8 <CenLocLockUnlockStates+0x1d8>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	bf0c      	ite	eq
 8000d10:	2301      	moveq	r3, #1
 8000d12:	2300      	movne	r3, #0
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 f9d6 	bl	80010c8 <SecAlmToggleAlarmLed>
		CenLocFollowMeHome();
 8000d1c:	f7ff ff9c 	bl	8000c58 <CenLocFollowMeHome>
		localPreviousState = STD_HIGH;
 8000d20:	4b65      	ldr	r3, [pc, #404]	; (8000eb8 <CenLocLockUnlockStates+0x1e8>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	701a      	strb	r2, [r3, #0]

		if(CenLoc_Tim2IRQFlag <= 4)
 8000d26:	4b65      	ldr	r3, [pc, #404]	; (8000ebc <CenLocLockUnlockStates+0x1ec>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b04      	cmp	r3, #4
 8000d2c:	d83e      	bhi.n	8000dac <CenLocLockUnlockStates+0xdc>
		{

			HAL_TIM_Base_Start_IT(&htim2);
 8000d2e:	4864      	ldr	r0, [pc, #400]	; (8000ec0 <CenLocLockUnlockStates+0x1f0>)
 8000d30:	f006 fe98 	bl	8007a64 <HAL_TIM_Base_Start_IT>

			switch(CenLoc_Tim2IRQFlag)
 8000d34:	4b61      	ldr	r3, [pc, #388]	; (8000ebc <CenLocLockUnlockStates+0x1ec>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	2b03      	cmp	r3, #3
 8000d3c:	d842      	bhi.n	8000dc4 <CenLocLockUnlockStates+0xf4>
 8000d3e:	a201      	add	r2, pc, #4	; (adr r2, 8000d44 <CenLocLockUnlockStates+0x74>)
 8000d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d44:	08000d55 	.word	0x08000d55
 8000d48:	08000d6b 	.word	0x08000d6b
 8000d4c:	08000d81 	.word	0x08000d81
 8000d50:	08000d97 	.word	0x08000d97
			{

				case 1:

					CenLoc_BlinkState = STD_HIGH;
 8000d54:	4b5b      	ldr	r3, [pc, #364]	; (8000ec4 <CenLocLockUnlockStates+0x1f4>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	701a      	strb	r2, [r3, #0]
					CenLocToggleBuzzer(CenLoc_BlinkState);
 8000d5a:	4b5a      	ldr	r3, [pc, #360]	; (8000ec4 <CenLocLockUnlockStates+0x1f4>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f8b8 	bl	8000ed4 <CenLocToggleBuzzer>
					CenLocBlinkSignals();
 8000d64:	f7ff ffa4 	bl	8000cb0 <CenLocBlinkSignals>

					break;
 8000d68:	e02d      	b.n	8000dc6 <CenLocLockUnlockStates+0xf6>

				case 2:

					CenLoc_BlinkState = STD_LOW;
 8000d6a:	4b56      	ldr	r3, [pc, #344]	; (8000ec4 <CenLocLockUnlockStates+0x1f4>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
					CenLocToggleBuzzer(CenLoc_BlinkState);
 8000d70:	4b54      	ldr	r3, [pc, #336]	; (8000ec4 <CenLocLockUnlockStates+0x1f4>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f000 f8ad 	bl	8000ed4 <CenLocToggleBuzzer>
					CenLocBlinkSignals();
 8000d7a:	f7ff ff99 	bl	8000cb0 <CenLocBlinkSignals>

					break;
 8000d7e:	e022      	b.n	8000dc6 <CenLocLockUnlockStates+0xf6>

				case 3:

					CenLoc_BlinkState = STD_HIGH;
 8000d80:	4b50      	ldr	r3, [pc, #320]	; (8000ec4 <CenLocLockUnlockStates+0x1f4>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	701a      	strb	r2, [r3, #0]
					CenLocToggleBuzzer(CenLoc_BlinkState);
 8000d86:	4b4f      	ldr	r3, [pc, #316]	; (8000ec4 <CenLocLockUnlockStates+0x1f4>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 f8a2 	bl	8000ed4 <CenLocToggleBuzzer>
					CenLocBlinkSignals();
 8000d90:	f7ff ff8e 	bl	8000cb0 <CenLocBlinkSignals>

					break;
 8000d94:	e017      	b.n	8000dc6 <CenLocLockUnlockStates+0xf6>

				case 4:

					CenLoc_BlinkState = STD_LOW;
 8000d96:	4b4b      	ldr	r3, [pc, #300]	; (8000ec4 <CenLocLockUnlockStates+0x1f4>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
					CenLocToggleBuzzer(CenLoc_BlinkState);
 8000d9c:	4b49      	ldr	r3, [pc, #292]	; (8000ec4 <CenLocLockUnlockStates+0x1f4>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f000 f897 	bl	8000ed4 <CenLocToggleBuzzer>
					CenLocBlinkSignals();
 8000da6:	f7ff ff83 	bl	8000cb0 <CenLocBlinkSignals>

					break;
 8000daa:	e00c      	b.n	8000dc6 <CenLocLockUnlockStates+0xf6>
					break;

			}

		}
		else if(CenLoc_Tim2IRQFlag == 5)
 8000dac:	4b43      	ldr	r3, [pc, #268]	; (8000ebc <CenLocLockUnlockStates+0x1ec>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b05      	cmp	r3, #5
 8000db2:	d172      	bne.n	8000e9a <CenLocLockUnlockStates+0x1ca>
		{

			HAL_TIM_Base_Stop_IT(&htim2);
 8000db4:	4842      	ldr	r0, [pc, #264]	; (8000ec0 <CenLocLockUnlockStates+0x1f0>)
 8000db6:	f006 fee7 	bl	8007b88 <HAL_TIM_Base_Stop_IT>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000dba:	4b41      	ldr	r3, [pc, #260]	; (8000ec0 <CenLocLockUnlockStates+0x1f0>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	625a      	str	r2, [r3, #36]	; 0x24
		if(CenLoc_Tim2IRQFlag <= 4)
 8000dc2:	e06a      	b.n	8000e9a <CenLocLockUnlockStates+0x1ca>
					break;
 8000dc4:	bf00      	nop
		if(CenLoc_Tim2IRQFlag <= 4)
 8000dc6:	e068      	b.n	8000e9a <CenLocLockUnlockStates+0x1ca>
			/* do nothing */

		}

	}
	else if(CenLoc_CurrentState == STD_LOW && SecAlm_Trigger == STD_LOW)
 8000dc8:	4b37      	ldr	r3, [pc, #220]	; (8000ea8 <CenLocLockUnlockStates+0x1d8>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d165      	bne.n	8000e9c <CenLocLockUnlockStates+0x1cc>
 8000dd0:	4b36      	ldr	r3, [pc, #216]	; (8000eac <CenLocLockUnlockStates+0x1dc>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d161      	bne.n	8000e9c <CenLocLockUnlockStates+0x1cc>
	{

		CenLocToggleDoorLED(CenLoc_CurrentState);
 8000dd8:	4b33      	ldr	r3, [pc, #204]	; (8000ea8 <CenLocLockUnlockStates+0x1d8>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff ff29 	bl	8000c34 <CenLocToggleDoorLED>
		CenLocFollowMeHome();
 8000de2:	f7ff ff39 	bl	8000c58 <CenLocFollowMeHome>
		HAL_TIM_Base_Start_IT(&htim3);
 8000de6:	4832      	ldr	r0, [pc, #200]	; (8000eb0 <CenLocLockUnlockStates+0x1e0>)
 8000de8:	f006 fe3c 	bl	8007a64 <HAL_TIM_Base_Start_IT>

		if(CenLoc_Tim3IRQFlag == 2)
 8000dec:	4b36      	ldr	r3, [pc, #216]	; (8000ec8 <CenLocLockUnlockStates+0x1f8>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d11a      	bne.n	8000e2a <CenLocLockUnlockStates+0x15a>
		{

			HAL_TIM_Base_Start_IT(&htim11);
 8000df4:	4835      	ldr	r0, [pc, #212]	; (8000ecc <CenLocLockUnlockStates+0x1fc>)
 8000df6:	f006 fe35 	bl	8007a64 <HAL_TIM_Base_Start_IT>

			if(CenLoc_Tim11IRQFlag == 1)
 8000dfa:	4b35      	ldr	r3, [pc, #212]	; (8000ed0 <CenLocLockUnlockStates+0x200>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d103      	bne.n	8000e0a <CenLocLockUnlockStates+0x13a>
			{

				SecAlmToggleAlarmLed(1);
 8000e02:	2001      	movs	r0, #1
 8000e04:	f000 f960 	bl	80010c8 <SecAlmToggleAlarmLed>
 8000e08:	e00f      	b.n	8000e2a <CenLocLockUnlockStates+0x15a>

			}
			else if(CenLoc_Tim11IRQFlag > 1)
 8000e0a:	4b31      	ldr	r3, [pc, #196]	; (8000ed0 <CenLocLockUnlockStates+0x200>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d90b      	bls.n	8000e2a <CenLocLockUnlockStates+0x15a>
			{

				SecAlmToggleAlarmLed(0);
 8000e12:	2000      	movs	r0, #0
 8000e14:	f000 f958 	bl	80010c8 <SecAlmToggleAlarmLed>
				CenLoc_Tim11IRQFlag = 0;
 8000e18:	4b2d      	ldr	r3, [pc, #180]	; (8000ed0 <CenLocLockUnlockStates+0x200>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	701a      	strb	r2, [r3, #0]
				CenLoc_Tim3IRQFlag = 1;
 8000e1e:	4b2a      	ldr	r3, [pc, #168]	; (8000ec8 <CenLocLockUnlockStates+0x1f8>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim11);
 8000e24:	4829      	ldr	r0, [pc, #164]	; (8000ecc <CenLocLockUnlockStates+0x1fc>)
 8000e26:	f006 feaf 	bl	8007b88 <HAL_TIM_Base_Stop_IT>

			/* do nothing */

		}

		if(CenLoc_Tim2IRQFlag <= 2 && localPreviousState == STD_HIGH)
 8000e2a:	4b24      	ldr	r3, [pc, #144]	; (8000ebc <CenLocLockUnlockStates+0x1ec>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d827      	bhi.n	8000e82 <CenLocLockUnlockStates+0x1b2>
 8000e32:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <CenLocLockUnlockStates+0x1e8>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d123      	bne.n	8000e82 <CenLocLockUnlockStates+0x1b2>
		{

			HAL_TIM_Base_Start_IT(&htim2);
 8000e3a:	4821      	ldr	r0, [pc, #132]	; (8000ec0 <CenLocLockUnlockStates+0x1f0>)
 8000e3c:	f006 fe12 	bl	8007a64 <HAL_TIM_Base_Start_IT>

			switch(CenLoc_Tim2IRQFlag)
 8000e40:	4b1e      	ldr	r3, [pc, #120]	; (8000ebc <CenLocLockUnlockStates+0x1ec>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d002      	beq.n	8000e4e <CenLocLockUnlockStates+0x17e>
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d00b      	beq.n	8000e64 <CenLocLockUnlockStates+0x194>

				break;

			default:

				break;
 8000e4c:	e018      	b.n	8000e80 <CenLocLockUnlockStates+0x1b0>
				CenLoc_BlinkState = STD_HIGH;
 8000e4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ec4 <CenLocLockUnlockStates+0x1f4>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	701a      	strb	r2, [r3, #0]
				CenLocToggleBuzzer(CenLoc_BlinkState);
 8000e54:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <CenLocLockUnlockStates+0x1f4>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 f83b 	bl	8000ed4 <CenLocToggleBuzzer>
				CenLocBlinkSignals();
 8000e5e:	f7ff ff27 	bl	8000cb0 <CenLocBlinkSignals>
				break;
 8000e62:	e00d      	b.n	8000e80 <CenLocLockUnlockStates+0x1b0>
				CenLoc_BlinkState = STD_LOW;
 8000e64:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <CenLocLockUnlockStates+0x1f4>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
				CenLocToggleBuzzer(CenLoc_BlinkState);
 8000e6a:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <CenLocLockUnlockStates+0x1f4>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 f830 	bl	8000ed4 <CenLocToggleBuzzer>
				CenLocBlinkSignals();
 8000e74:	f7ff ff1c 	bl	8000cb0 <CenLocBlinkSignals>
				localPreviousState = STD_LOW;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <CenLocLockUnlockStates+0x1e8>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	701a      	strb	r2, [r3, #0]
				break;
 8000e7e:	bf00      	nop
			switch(CenLoc_Tim2IRQFlag)
 8000e80:	e00c      	b.n	8000e9c <CenLocLockUnlockStates+0x1cc>

			}

		}
		else if(CenLoc_Tim2IRQFlag == 3)
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <CenLocLockUnlockStates+0x1ec>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d108      	bne.n	8000e9c <CenLocLockUnlockStates+0x1cc>
		{

			HAL_TIM_Base_Stop_IT(&htim2);
 8000e8a:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <CenLocLockUnlockStates+0x1f0>)
 8000e8c:	f006 fe7c 	bl	8007b88 <HAL_TIM_Base_Stop_IT>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <CenLocLockUnlockStates+0x1f0>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2200      	movs	r2, #0
 8000e96:	625a      	str	r2, [r3, #36]	; 0x24
 8000e98:	e000      	b.n	8000e9c <CenLocLockUnlockStates+0x1cc>
		if(CenLoc_Tim2IRQFlag <= 4)
 8000e9a:	bf00      	nop
			/* do nothing */
		}

	}

	return status;
 8000e9c:	79fb      	ldrb	r3, [r7, #7]

}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000091 	.word	0x20000091
 8000eac:	200000ba 	.word	0x200000ba
 8000eb0:	2000049c 	.word	0x2000049c
 8000eb4:	20000604 	.word	0x20000604
 8000eb8:	2000009a 	.word	0x2000009a
 8000ebc:	2000009b 	.word	0x2000009b
 8000ec0:	200003e8 	.word	0x200003e8
 8000ec4:	20000096 	.word	0x20000096
 8000ec8:	2000009c 	.word	0x2000009c
 8000ecc:	2000076c 	.word	0x2000076c
 8000ed0:	2000009e 	.word	0x2000009e

08000ed4 <CenLocToggleBuzzer>:

void CenLocToggleBuzzer(uint8 PinState)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CENLOC_BUZZER_PORT, CENLOC_BUZZER_PIN, PinState);
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	2110      	movs	r1, #16
 8000ee4:	4803      	ldr	r0, [pc, #12]	; (8000ef4 <CenLocToggleBuzzer+0x20>)
 8000ee6:	f003 fc49 	bl	800477c <HAL_GPIO_WritePin>

}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40020800 	.word	0x40020800

08000ef8 <CenLocMainFunction>:

void CenLocMainFunction()
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0

	CenLocRxBtcState();
 8000efc:	f7ff fe7e 	bl	8000bfc <CenLocRxBtcState>
	CenLocState();
 8000f00:	f7ff fe0c 	bl	8000b1c <CenLocState>
	CenLocSecAlmStateToOff();
 8000f04:	f7ff fe68 	bl	8000bd8 <CenLocSecAlmStateToOff>
	CenLocLockUnlockStates();
 8000f08:	f7ff fee2 	bl	8000cd0 <CenLocLockUnlockStates>

}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <ExtLightsLowBeam>:
	return sensorValue;

}

void ExtLightsLowBeam(uint8 PinState)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_LOWBEAM_PORT, EXTLIGHTS_LOWBEAM_PIN, PinState);
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	2110      	movs	r1, #16
 8000f20:	4803      	ldr	r0, [pc, #12]	; (8000f30 <ExtLightsLowBeam+0x20>)
 8000f22:	f003 fc2b 	bl	800477c <HAL_GPIO_WritePin>

}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40020000 	.word	0x40020000

08000f34 <ExtLightsDayTimeRunningLight>:
	HAL_GPIO_WritePin(EXTLIGHTS_HIGHBEAM_PORT, EXTLIGHTS_HIGHBEAM_PIN, PinState);

}

void ExtLightsDayTimeRunningLight(uint8 PinState)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_DAYTIMERUNNINGLIGHT_PORT, EXTLIGHTS_DAYTIMERUNNINGLIGHT_PIN, PinState);
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	461a      	mov	r2, r3
 8000f42:	2102      	movs	r1, #2
 8000f44:	4803      	ldr	r0, [pc, #12]	; (8000f54 <ExtLightsDayTimeRunningLight+0x20>)
 8000f46:	f003 fc19 	bl	800477c <HAL_GPIO_WritePin>

}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40020000 	.word	0x40020000

08000f58 <ExtLightsFrontFogLight>:

void ExtLightsFrontFogLight(uint8 PinState)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_FRONTFOGLIGHT_PORT, EXTLIGHTS_FRONTFOGLIGHT_PIN, PinState);
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	461a      	mov	r2, r3
 8000f66:	2108      	movs	r1, #8
 8000f68:	4803      	ldr	r0, [pc, #12]	; (8000f78 <ExtLightsFrontFogLight+0x20>)
 8000f6a:	f003 fc07 	bl	800477c <HAL_GPIO_WritePin>

}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40020800 	.word	0x40020800

08000f7c <ExtLightsTurnSignalLeft>:

void ExtLightsTurnSignalLeft(uint8 PinState)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_TURNSIGNALLEFT_PORT, EXTLIGHTS_TURNSIGNALLEFT_PIN, PinState);
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f8e:	4803      	ldr	r0, [pc, #12]	; (8000f9c <ExtLightsTurnSignalLeft+0x20>)
 8000f90:	f003 fbf4 	bl	800477c <HAL_GPIO_WritePin>

}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40020800 	.word	0x40020800

08000fa0 <ExtLightsTurnSignalRight>:

void ExtLightsTurnSignalRight(uint8 PinState)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_TURNSIGNALRIGHT_PORT, EXTLIGHTS_TURNSIGNALRIGHT_PIN, PinState);
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	461a      	mov	r2, r3
 8000fae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fb2:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <ExtLightsTurnSignalRight+0x20>)
 8000fb4:	f003 fbe2 	bl	800477c <HAL_GPIO_WritePin>

}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40020800 	.word	0x40020800

08000fc4 <ExtLightsRearPositionLight>:

void ExtLightsRearPositionLight(uint8 PinState)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_REARPOSITIONLIGHT_PORT, EXTLIGHTS_REARPOSITIONLIGHT_PIN, PinState);
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <ExtLightsRearPositionLight+0x20>)
 8000fd8:	f003 fbd0 	bl	800477c <HAL_GPIO_WritePin>

}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40020800 	.word	0x40020800

08000fe8 <IntLightsRxBtcState>:
void IntLightsMainFunction();
void IntLightsToggleIntLights(uint8 PinState);
void IntLightsRxBtcState();

void IntLightsRxBtcState()
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0

	uint8 lightsStateFromBtcCommand = BtcReceivedDataOnBluetooth;
 8000fee:	4b24      	ldr	r3, [pc, #144]	; (8001080 <IntLightsRxBtcState+0x98>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	71fb      	strb	r3, [r7, #7]

	switch(lightsStateFromBtcCommand)
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	2b13      	cmp	r3, #19
 8000ffa:	d83b      	bhi.n	8001074 <IntLightsRxBtcState+0x8c>
 8000ffc:	a201      	add	r2, pc, #4	; (adr r2, 8001004 <IntLightsRxBtcState+0x1c>)
 8000ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001002:	bf00      	nop
 8001004:	08001055 	.word	0x08001055
 8001008:	0800105d 	.word	0x0800105d
 800100c:	08001075 	.word	0x08001075
 8001010:	08001075 	.word	0x08001075
 8001014:	08001075 	.word	0x08001075
 8001018:	08001075 	.word	0x08001075
 800101c:	08001075 	.word	0x08001075
 8001020:	08001075 	.word	0x08001075
 8001024:	08001075 	.word	0x08001075
 8001028:	08001075 	.word	0x08001075
 800102c:	08001075 	.word	0x08001075
 8001030:	08001075 	.word	0x08001075
 8001034:	08001075 	.word	0x08001075
 8001038:	08001075 	.word	0x08001075
 800103c:	08001075 	.word	0x08001075
 8001040:	08001075 	.word	0x08001075
 8001044:	08001075 	.word	0x08001075
 8001048:	08001075 	.word	0x08001075
 800104c:	08001065 	.word	0x08001065
 8001050:	0800106d 	.word	0x0800106d
	{
		case LIGHTSON_CENLOCON:

			IntLights_CurrentState = STD_HIGH;
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <IntLightsRxBtcState+0x9c>)
 8001056:	2201      	movs	r2, #1
 8001058:	701a      	strb	r2, [r3, #0]

			break;
 800105a:	e00b      	b.n	8001074 <IntLightsRxBtcState+0x8c>

		case LIGHTSOFF_CENLOCOFF:

			IntLights_CurrentState = STD_LOW;
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <IntLightsRxBtcState+0x9c>)
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]

			break;
 8001062:	e007      	b.n	8001074 <IntLightsRxBtcState+0x8c>

		case LIGHTSON_INTLIGHTSON:

			IntLights_CurrentState = STD_HIGH;
 8001064:	4b07      	ldr	r3, [pc, #28]	; (8001084 <IntLightsRxBtcState+0x9c>)
 8001066:	2201      	movs	r2, #1
 8001068:	701a      	strb	r2, [r3, #0]

			break;
 800106a:	e003      	b.n	8001074 <IntLightsRxBtcState+0x8c>

		case LIGHTSOFF_INTLIGHTSOFF:

			IntLights_CurrentState = STD_LOW;
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <IntLightsRxBtcState+0x9c>)
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]

			break;
 8001072:	bf00      	nop

	}

}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	20000090 	.word	0x20000090
 8001084:	200000b4 	.word	0x200000b4

08001088 <IntLightsMainFunction>:

void IntLightsMainFunction()
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0

	IntLightsRxBtcState();
 800108c:	f7ff ffac 	bl	8000fe8 <IntLightsRxBtcState>
	IntLightsToggleIntLights(IntLights_CurrentState);
 8001090:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <IntLightsMainFunction+0x18>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f000 f805 	bl	80010a4 <IntLightsToggleIntLights>

}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200000b4 	.word	0x200000b4

080010a4 <IntLightsToggleIntLights>:
	return E_OK;

}

void IntLightsToggleIntLights(uint8 PinState)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(INTERIOR_LIGHT_PORT, INTERIOR_LIGHT_PIN, PinState);
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	461a      	mov	r2, r3
 80010b2:	2104      	movs	r1, #4
 80010b4:	4803      	ldr	r0, [pc, #12]	; (80010c4 <IntLightsToggleIntLights+0x20>)
 80010b6:	f003 fb61 	bl	800477c <HAL_GPIO_WritePin>

}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40020800 	.word	0x40020800

080010c8 <SecAlmToggleAlarmLed>:
	HAL_GPIO_WritePin(SECALM_BUZZER_PORT, SECALM_BUZZER_PIN, PinState);

}

void SecAlmToggleAlarmLed(uint8 PinState)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(SECALM_LED_PORT, SECALM_LED_PIN, PinState);
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	461a      	mov	r2, r3
 80010d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010da:	4803      	ldr	r0, [pc, #12]	; (80010e8 <SecAlmToggleAlarmLed+0x20>)
 80010dc:	f003 fb4e 	bl	800477c <HAL_GPIO_WritePin>

}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40020000 	.word	0x40020000

080010ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010f2:	463b      	mov	r3, r7
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010fe:	4b36      	ldr	r3, [pc, #216]	; (80011d8 <MX_ADC1_Init+0xec>)
 8001100:	4a36      	ldr	r2, [pc, #216]	; (80011dc <MX_ADC1_Init+0xf0>)
 8001102:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001104:	4b34      	ldr	r3, [pc, #208]	; (80011d8 <MX_ADC1_Init+0xec>)
 8001106:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800110a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800110c:	4b32      	ldr	r3, [pc, #200]	; (80011d8 <MX_ADC1_Init+0xec>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001112:	4b31      	ldr	r3, [pc, #196]	; (80011d8 <MX_ADC1_Init+0xec>)
 8001114:	2201      	movs	r2, #1
 8001116:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001118:	4b2f      	ldr	r3, [pc, #188]	; (80011d8 <MX_ADC1_Init+0xec>)
 800111a:	2201      	movs	r2, #1
 800111c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800111e:	4b2e      	ldr	r3, [pc, #184]	; (80011d8 <MX_ADC1_Init+0xec>)
 8001120:	2200      	movs	r2, #0
 8001122:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001126:	4b2c      	ldr	r3, [pc, #176]	; (80011d8 <MX_ADC1_Init+0xec>)
 8001128:	2200      	movs	r2, #0
 800112a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800112c:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <MX_ADC1_Init+0xec>)
 800112e:	4a2c      	ldr	r2, [pc, #176]	; (80011e0 <MX_ADC1_Init+0xf4>)
 8001130:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001132:	4b29      	ldr	r3, [pc, #164]	; (80011d8 <MX_ADC1_Init+0xec>)
 8001134:	2200      	movs	r2, #0
 8001136:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001138:	4b27      	ldr	r3, [pc, #156]	; (80011d8 <MX_ADC1_Init+0xec>)
 800113a:	2204      	movs	r2, #4
 800113c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800113e:	4b26      	ldr	r3, [pc, #152]	; (80011d8 <MX_ADC1_Init+0xec>)
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001146:	4b24      	ldr	r3, [pc, #144]	; (80011d8 <MX_ADC1_Init+0xec>)
 8001148:	2201      	movs	r2, #1
 800114a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800114c:	4822      	ldr	r0, [pc, #136]	; (80011d8 <MX_ADC1_Init+0xec>)
 800114e:	f001 fafd 	bl	800274c <HAL_ADC_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001158:	f000 fcce 	bl	8001af8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800115c:	2302      	movs	r3, #2
 800115e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001160:	2301      	movs	r3, #1
 8001162:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001168:	463b      	mov	r3, r7
 800116a:	4619      	mov	r1, r3
 800116c:	481a      	ldr	r0, [pc, #104]	; (80011d8 <MX_ADC1_Init+0xec>)
 800116e:	f001 fdd9 	bl	8002d24 <HAL_ADC_ConfigChannel>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001178:	f000 fcbe 	bl	8001af8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800117c:	2303      	movs	r3, #3
 800117e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001180:	2302      	movs	r3, #2
 8001182:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001184:	463b      	mov	r3, r7
 8001186:	4619      	mov	r1, r3
 8001188:	4813      	ldr	r0, [pc, #76]	; (80011d8 <MX_ADC1_Init+0xec>)
 800118a:	f001 fdcb 	bl	8002d24 <HAL_ADC_ConfigChannel>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001194:	f000 fcb0 	bl	8001af8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001198:	2306      	movs	r3, #6
 800119a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800119c:	2303      	movs	r3, #3
 800119e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011a0:	463b      	mov	r3, r7
 80011a2:	4619      	mov	r1, r3
 80011a4:	480c      	ldr	r0, [pc, #48]	; (80011d8 <MX_ADC1_Init+0xec>)
 80011a6:	f001 fdbd 	bl	8002d24 <HAL_ADC_ConfigChannel>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80011b0:	f000 fca2 	bl	8001af8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <MX_ADC1_Init+0xf8>)
 80011b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80011b8:	2304      	movs	r3, #4
 80011ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011bc:	463b      	mov	r3, r7
 80011be:	4619      	mov	r1, r3
 80011c0:	4805      	ldr	r0, [pc, #20]	; (80011d8 <MX_ADC1_Init+0xec>)
 80011c2:	f001 fdaf 	bl	8002d24 <HAL_ADC_ConfigChannel>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80011cc:	f000 fc94 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200000bc 	.word	0x200000bc
 80011dc:	40012000 	.word	0x40012000
 80011e0:	0f000001 	.word	0x0f000001
 80011e4:	10000012 	.word	0x10000012

080011e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	; 0x28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a32      	ldr	r2, [pc, #200]	; (80012d0 <HAL_ADC_MspInit+0xe8>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d15e      	bne.n	80012c8 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	4b31      	ldr	r3, [pc, #196]	; (80012d4 <HAL_ADC_MspInit+0xec>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	4a30      	ldr	r2, [pc, #192]	; (80012d4 <HAL_ADC_MspInit+0xec>)
 8001214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001218:	6453      	str	r3, [r2, #68]	; 0x44
 800121a:	4b2e      	ldr	r3, [pc, #184]	; (80012d4 <HAL_ADC_MspInit+0xec>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	4b2a      	ldr	r3, [pc, #168]	; (80012d4 <HAL_ADC_MspInit+0xec>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a29      	ldr	r2, [pc, #164]	; (80012d4 <HAL_ADC_MspInit+0xec>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b27      	ldr	r3, [pc, #156]	; (80012d4 <HAL_ADC_MspInit+0xec>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6;
 8001242:	234c      	movs	r3, #76	; 0x4c
 8001244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001246:	2303      	movs	r3, #3
 8001248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4619      	mov	r1, r3
 8001254:	4820      	ldr	r0, [pc, #128]	; (80012d8 <HAL_ADC_MspInit+0xf0>)
 8001256:	f002 fff7 	bl	8004248 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800125a:	4b20      	ldr	r3, [pc, #128]	; (80012dc <HAL_ADC_MspInit+0xf4>)
 800125c:	4a20      	ldr	r2, [pc, #128]	; (80012e0 <HAL_ADC_MspInit+0xf8>)
 800125e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001260:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <HAL_ADC_MspInit+0xf4>)
 8001262:	2200      	movs	r2, #0
 8001264:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001266:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <HAL_ADC_MspInit+0xf4>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <HAL_ADC_MspInit+0xf4>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001272:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <HAL_ADC_MspInit+0xf4>)
 8001274:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001278:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800127a:	4b18      	ldr	r3, [pc, #96]	; (80012dc <HAL_ADC_MspInit+0xf4>)
 800127c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001280:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001282:	4b16      	ldr	r3, [pc, #88]	; (80012dc <HAL_ADC_MspInit+0xf4>)
 8001284:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001288:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800128a:	4b14      	ldr	r3, [pc, #80]	; (80012dc <HAL_ADC_MspInit+0xf4>)
 800128c:	2200      	movs	r2, #0
 800128e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <HAL_ADC_MspInit+0xf4>)
 8001292:	2200      	movs	r2, #0
 8001294:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <HAL_ADC_MspInit+0xf4>)
 8001298:	2200      	movs	r2, #0
 800129a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800129c:	480f      	ldr	r0, [pc, #60]	; (80012dc <HAL_ADC_MspInit+0xf4>)
 800129e:	f002 f907 	bl	80034b0 <HAL_DMA_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80012a8:	f000 fc26 	bl	8001af8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <HAL_ADC_MspInit+0xf4>)
 80012b0:	639a      	str	r2, [r3, #56]	; 0x38
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <HAL_ADC_MspInit+0xf4>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80012b8:	2200      	movs	r2, #0
 80012ba:	2105      	movs	r1, #5
 80012bc:	2012      	movs	r0, #18
 80012be:	f002 f889 	bl	80033d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80012c2:	2012      	movs	r0, #18
 80012c4:	f002 f8b2 	bl	800342c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012c8:	bf00      	nop
 80012ca:	3728      	adds	r7, #40	; 0x28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40012000 	.word	0x40012000
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40020000 	.word	0x40020000
 80012dc:	20000120 	.word	0x20000120
 80012e0:	40026410 	.word	0x40026410

080012e4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MX_CRC_Init+0x20>)
 80012ea:	4a07      	ldr	r2, [pc, #28]	; (8001308 <MX_CRC_Init+0x24>)
 80012ec:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80012ee:	4805      	ldr	r0, [pc, #20]	; (8001304 <MX_CRC_Init+0x20>)
 80012f0:	f002 f8b4 	bl	800345c <HAL_CRC_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80012fa:	f000 fbfd 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000180 	.word	0x20000180
 8001308:	40023000 	.word	0x40023000

0800130c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a0b      	ldr	r2, [pc, #44]	; (8001348 <HAL_CRC_MspInit+0x3c>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d10d      	bne.n	800133a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b0a      	ldr	r3, [pc, #40]	; (800134c <HAL_CRC_MspInit+0x40>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a09      	ldr	r2, [pc, #36]	; (800134c <HAL_CRC_MspInit+0x40>)
 8001328:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b07      	ldr	r3, [pc, #28]	; (800134c <HAL_CRC_MspInit+0x40>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800133a:	bf00      	nop
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40023000 	.word	0x40023000
 800134c:	40023800 	.word	0x40023800

08001350 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <MX_DMA_Init+0x3c>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a0b      	ldr	r2, [pc, #44]	; (800138c <MX_DMA_Init+0x3c>)
 8001360:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <MX_DMA_Init+0x3c>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2105      	movs	r1, #5
 8001376:	2038      	movs	r0, #56	; 0x38
 8001378:	f002 f82c 	bl	80033d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800137c:	2038      	movs	r0, #56	; 0x38
 800137e:	f002 f855 	bl	800342c <HAL_NVIC_EnableIRQ>

}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800

08001390 <configureTimerForRunTimeStats>:
void vApplicationDaemonTaskStartupHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0

}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0
return 0;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
 80013d2:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <vApplicationDaemonTaskStartupHook>:
/* USER CODE END 5 */

/* USER CODE BEGIN DAEMON_TASK_STARTUP_HOOK */
void vApplicationDaemonTaskStartupHook(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <PreSleepProcessing>:
/* USER CODE END DAEMON_TASK_STARTUP_HOOK */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of PdcFrontDelayTimer */
  PdcFrontDelayTimerHandle = osTimerNew(PdcFrontDelayCallback, osTimerPeriodic, NULL, &PdcFrontDelayTimer_attributes);
 8001428:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <MX_FREERTOS_Init+0x94>)
 800142a:	2200      	movs	r2, #0
 800142c:	2101      	movs	r1, #1
 800142e:	4823      	ldr	r0, [pc, #140]	; (80014bc <MX_FREERTOS_Init+0x98>)
 8001430:	f008 fcf4 	bl	8009e1c <osTimerNew>
 8001434:	4603      	mov	r3, r0
 8001436:	4a22      	ldr	r2, [pc, #136]	; (80014c0 <MX_FREERTOS_Init+0x9c>)
 8001438:	6013      	str	r3, [r2, #0]

  /* creation of PdcSecondFrontDelayTimer */
  PdcSecondFrontDelayTimerHandle = osTimerNew(PdcSecondFrontDelayCallback, osTimerPeriodic, NULL, &PdcSecondFrontDelayTimer_attributes);
 800143a:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <MX_FREERTOS_Init+0xa0>)
 800143c:	2200      	movs	r2, #0
 800143e:	2101      	movs	r1, #1
 8001440:	4821      	ldr	r0, [pc, #132]	; (80014c8 <MX_FREERTOS_Init+0xa4>)
 8001442:	f008 fceb 	bl	8009e1c <osTimerNew>
 8001446:	4603      	mov	r3, r0
 8001448:	4a20      	ldr	r2, [pc, #128]	; (80014cc <MX_FREERTOS_Init+0xa8>)
 800144a:	6013      	str	r3, [r2, #0]

  /* creation of PdcFrontGlobalTimer */
  PdcFrontGlobalTimerHandle = osTimerNew(PdcFrontGlobalTimerCallback, osTimerPeriodic, NULL, &PdcFrontGlobalTimer_attributes);
 800144c:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <MX_FREERTOS_Init+0xac>)
 800144e:	2200      	movs	r2, #0
 8001450:	2101      	movs	r1, #1
 8001452:	4820      	ldr	r0, [pc, #128]	; (80014d4 <MX_FREERTOS_Init+0xb0>)
 8001454:	f008 fce2 	bl	8009e1c <osTimerNew>
 8001458:	4603      	mov	r3, r0
 800145a:	4a1f      	ldr	r2, [pc, #124]	; (80014d8 <MX_FREERTOS_Init+0xb4>)
 800145c:	6013      	str	r3, [r2, #0]

  /* creation of PdcRearGlobalTimer */
  PdcRearGlobalTimerHandle = osTimerNew(PdcRearGlobalCallback, osTimerPeriodic, NULL, &PdcRearGlobalTimer_attributes);
 800145e:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <MX_FREERTOS_Init+0xb8>)
 8001460:	2200      	movs	r2, #0
 8001462:	2101      	movs	r1, #1
 8001464:	481e      	ldr	r0, [pc, #120]	; (80014e0 <MX_FREERTOS_Init+0xbc>)
 8001466:	f008 fcd9 	bl	8009e1c <osTimerNew>
 800146a:	4603      	mov	r3, r0
 800146c:	4a1d      	ldr	r2, [pc, #116]	; (80014e4 <MX_FREERTOS_Init+0xc0>)
 800146e:	6013      	str	r3, [r2, #0]

  /* creation of PdcRearDelayTimer */
  PdcRearDelayTimerHandle = osTimerNew(PdcRearDelayCallback, osTimerPeriodic, NULL, &PdcRearDelayTimer_attributes);
 8001470:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <MX_FREERTOS_Init+0xc4>)
 8001472:	2200      	movs	r2, #0
 8001474:	2101      	movs	r1, #1
 8001476:	481d      	ldr	r0, [pc, #116]	; (80014ec <MX_FREERTOS_Init+0xc8>)
 8001478:	f008 fcd0 	bl	8009e1c <osTimerNew>
 800147c:	4603      	mov	r3, r0
 800147e:	4a1c      	ldr	r2, [pc, #112]	; (80014f0 <MX_FREERTOS_Init+0xcc>)
 8001480:	6013      	str	r3, [r2, #0]

  /* creation of PdcSecondRearDelayTimer */
  PdcSecondRearDelayTimerHandle = osTimerNew(PdcSecondRearDelayCallback, osTimerPeriodic, NULL, &PdcSecondRearDelayTimer_attributes);
 8001482:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <MX_FREERTOS_Init+0xd0>)
 8001484:	2200      	movs	r2, #0
 8001486:	2101      	movs	r1, #1
 8001488:	481b      	ldr	r0, [pc, #108]	; (80014f8 <MX_FREERTOS_Init+0xd4>)
 800148a:	f008 fcc7 	bl	8009e1c <osTimerNew>
 800148e:	4603      	mov	r3, r0
 8001490:	4a1a      	ldr	r2, [pc, #104]	; (80014fc <MX_FREERTOS_Init+0xd8>)
 8001492:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001494:	4a1a      	ldr	r2, [pc, #104]	; (8001500 <MX_FREERTOS_Init+0xdc>)
 8001496:	2100      	movs	r1, #0
 8001498:	481a      	ldr	r0, [pc, #104]	; (8001504 <MX_FREERTOS_Init+0xe0>)
 800149a:	f008 fbfb 	bl	8009c94 <osThreadNew>
 800149e:	4603      	mov	r3, r0
 80014a0:	4a19      	ldr	r2, [pc, #100]	; (8001508 <MX_FREERTOS_Init+0xe4>)
 80014a2:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80014a4:	4a19      	ldr	r2, [pc, #100]	; (800150c <MX_FREERTOS_Init+0xe8>)
 80014a6:	2100      	movs	r1, #0
 80014a8:	4819      	ldr	r0, [pc, #100]	; (8001510 <MX_FREERTOS_Init+0xec>)
 80014aa:	f008 fbf3 	bl	8009c94 <osThreadNew>
 80014ae:	4603      	mov	r3, r0
 80014b0:	4a18      	ldr	r2, [pc, #96]	; (8001514 <MX_FREERTOS_Init+0xf0>)
 80014b2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	0800d680 	.word	0x0800d680
 80014bc:	08001555 	.word	0x08001555
 80014c0:	20000194 	.word	0x20000194
 80014c4:	0800d690 	.word	0x0800d690
 80014c8:	08001575 	.word	0x08001575
 80014cc:	20000198 	.word	0x20000198
 80014d0:	0800d6a0 	.word	0x0800d6a0
 80014d4:	08001595 	.word	0x08001595
 80014d8:	2000019c 	.word	0x2000019c
 80014dc:	0800d6b0 	.word	0x0800d6b0
 80014e0:	080015a9 	.word	0x080015a9
 80014e4:	200001a0 	.word	0x200001a0
 80014e8:	0800d6c0 	.word	0x0800d6c0
 80014ec:	080015bd 	.word	0x080015bd
 80014f0:	200001a4 	.word	0x200001a4
 80014f4:	0800d6d0 	.word	0x0800d6d0
 80014f8:	080015dd 	.word	0x080015dd
 80014fc:	200001a8 	.word	0x200001a8
 8001500:	0800d638 	.word	0x0800d638
 8001504:	08001519 	.word	0x08001519
 8001508:	2000018c 	.word	0x2000018c
 800150c:	0800d65c 	.word	0x0800d65c
 8001510:	08001535 	.word	0x08001535
 8001514:	20000190 	.word	0x20000190

08001518 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  for(;;)
  {

		BtcMainFunction();
 8001520:	f7ff faf4 	bl	8000b0c <BtcMainFunction>
		CenLocMainFunction();
 8001524:	f7ff fce8 	bl	8000ef8 <CenLocMainFunction>
		//ExtLightsMainFunction();
		IntLightsMainFunction();
 8001528:	f7ff fdae 	bl	8001088 <IntLightsMainFunction>
		//SecAlmMainFunction();
		//HVACMainFunction();
		//PdcMainFunction();

		osDelay(1);
 800152c:	2001      	movs	r0, #1
 800152e:	f008 fc44 	bl	8009dba <osDelay>
		BtcMainFunction();
 8001532:	e7f5      	b.n	8001520 <StartDefaultTask+0x8>

08001534 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  OS_Counter++;
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <StartTask02+0x1c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	3301      	adds	r3, #1
 8001542:	4a03      	ldr	r2, [pc, #12]	; (8001550 <StartTask02+0x1c>)
 8001544:	6013      	str	r3, [r2, #0]
	  osDelay(1);
 8001546:	2001      	movs	r0, #1
 8001548:	f008 fc37 	bl	8009dba <osDelay>
	  OS_Counter++;
 800154c:	e7f6      	b.n	800153c <StartTask02+0x8>
 800154e:	bf00      	nop
 8001550:	20000188 	.word	0x20000188

08001554 <PdcFrontDelayCallback>:
  /* USER CODE END StartTask02 */
}

/* PdcFrontDelayCallback function */
void PdcFrontDelayCallback(void *argument)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcFrontDelayCallback */
	Pdc_FrontGenerateDelayFlag = STD_HIGH;
 800155c:	4b04      	ldr	r3, [pc, #16]	; (8001570 <PdcFrontDelayCallback+0x1c>)
 800155e:	2201      	movs	r2, #1
 8001560:	701a      	strb	r2, [r3, #0]
  /* USER CODE END PdcFrontDelayCallback */
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	200000b7 	.word	0x200000b7

08001574 <PdcSecondFrontDelayCallback>:

/* PdcSecondFrontDelayCallback function */
void PdcSecondFrontDelayCallback(void *argument)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcSecondFrontDelayCallback */
	Pdc_SecondFrontGenerateDelayFlag = STD_HIGH;
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <PdcSecondFrontDelayCallback+0x1c>)
 800157e:	2201      	movs	r2, #1
 8001580:	701a      	strb	r2, [r3, #0]
  /* USER CODE END PdcSecondFrontDelayCallback */
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	200000b9 	.word	0x200000b9

08001594 <PdcFrontGlobalTimerCallback>:

/* PdcFrontGlobalTimerCallback function */
void PdcFrontGlobalTimerCallback(void *argument)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcFrontGlobalTimerCallback */

  /* USER CODE END PdcFrontGlobalTimerCallback */
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <PdcRearGlobalCallback>:

/* PdcRearGlobalCallback function */
void PdcRearGlobalCallback(void *argument)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcRearGlobalCallback */

  /* USER CODE END PdcRearGlobalCallback */
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <PdcRearDelayCallback>:

/* PdcRearDelayCallback function */
void PdcRearDelayCallback(void *argument)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcRearDelayCallback */
	Pdc_RearGenerateDelayFlag = STD_HIGH;
 80015c4:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <PdcRearDelayCallback+0x1c>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END PdcRearDelayCallback */
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	200000b6 	.word	0x200000b6

080015dc <PdcSecondRearDelayCallback>:

/* PdcSecondRearDelayCallback function */
void PdcSecondRearDelayCallback(void *argument)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcSecondRearDelayCallback */
	Pdc_SecondRearGenerateDelayFlag = STD_HIGH;
 80015e4:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <PdcSecondRearDelayCallback+0x1c>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END PdcSecondRearDelayCallback */
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	200000b8 	.word	0x200000b8

080015fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	; 0x28
 8001600:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
 8001610:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	4b43      	ldr	r3, [pc, #268]	; (8001724 <MX_GPIO_Init+0x128>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a42      	ldr	r2, [pc, #264]	; (8001724 <MX_GPIO_Init+0x128>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b40      	ldr	r3, [pc, #256]	; (8001724 <MX_GPIO_Init+0x128>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	4b3c      	ldr	r3, [pc, #240]	; (8001724 <MX_GPIO_Init+0x128>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a3b      	ldr	r2, [pc, #236]	; (8001724 <MX_GPIO_Init+0x128>)
 8001638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b39      	ldr	r3, [pc, #228]	; (8001724 <MX_GPIO_Init+0x128>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	4b35      	ldr	r3, [pc, #212]	; (8001724 <MX_GPIO_Init+0x128>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a34      	ldr	r2, [pc, #208]	; (8001724 <MX_GPIO_Init+0x128>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b32      	ldr	r3, [pc, #200]	; (8001724 <MX_GPIO_Init+0x128>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	4b2e      	ldr	r3, [pc, #184]	; (8001724 <MX_GPIO_Init+0x128>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a2d      	ldr	r2, [pc, #180]	; (8001724 <MX_GPIO_Init+0x128>)
 8001670:	f043 0302 	orr.w	r3, r3, #2
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b2b      	ldr	r3, [pc, #172]	; (8001724 <MX_GPIO_Init+0x128>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|LTS_Pin|RTS_Pin|IL_Pin
 8001682:	2200      	movs	r2, #0
 8001684:	f64f 411c 	movw	r1, #64540	; 0xfc1c
 8001688:	4827      	ldr	r0, [pc, #156]	; (8001728 <MX_GPIO_Init+0x12c>)
 800168a:	f003 f877 	bl	800477c <HAL_GPIO_WritePin>
                          |FL_Pin|BUZZ1_Pin|RFL_Pin|BL_Pin
                          |PRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DRL_Pin|LB_Pin|SAL_Pin, GPIO_PIN_RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	f248 0112 	movw	r1, #32786	; 0x8012
 8001694:	4825      	ldr	r0, [pc, #148]	; (800172c <MX_GPIO_Init+0x130>)
 8001696:	f003 f871 	bl	800477c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HB_Pin|BUZZ2_Pin|BUZZ3_Pin|BUZZ4_Pin
 800169a:	2200      	movs	r2, #0
 800169c:	f24e 0181 	movw	r1, #57473	; 0xe081
 80016a0:	4823      	ldr	r0, [pc, #140]	; (8001730 <MX_GPIO_Init+0x134>)
 80016a2:	f003 f86b 	bl	800477c <HAL_GPIO_WritePin>
                          |CLL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|LTS_Pin|RTS_Pin|IL_Pin
 80016a6:	f64f 431c 	movw	r3, #64540	; 0xfc1c
 80016aa:	617b      	str	r3, [r7, #20]
                          |FL_Pin|BUZZ1_Pin|RFL_Pin|BL_Pin
                          |PRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2300      	movs	r3, #0
 80016b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	4619      	mov	r1, r3
 80016be:	481a      	ldr	r0, [pc, #104]	; (8001728 <MX_GPIO_Init+0x12c>)
 80016c0:	f002 fdc2 	bl	8004248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LPN_Pin;
 80016c4:	2301      	movs	r3, #1
 80016c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LPN_GPIO_Port, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	4814      	ldr	r0, [pc, #80]	; (800172c <MX_GPIO_Init+0x130>)
 80016da:	f002 fdb5 	bl	8004248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DRL_Pin|LB_Pin|SAL_Pin;
 80016de:	f248 0312 	movw	r3, #32786	; 0x8012
 80016e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e4:	2301      	movs	r3, #1
 80016e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ec:	2300      	movs	r3, #0
 80016ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	4619      	mov	r1, r3
 80016f6:	480d      	ldr	r0, [pc, #52]	; (800172c <MX_GPIO_Init+0x130>)
 80016f8:	f002 fda6 	bl	8004248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = HB_Pin|BUZZ2_Pin|BUZZ3_Pin|BUZZ4_Pin
 80016fc:	f24e 0381 	movw	r3, #57473	; 0xe081
 8001700:	617b      	str	r3, [r7, #20]
                          |CLL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001702:	2301      	movs	r3, #1
 8001704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170a:	2300      	movs	r3, #0
 800170c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4619      	mov	r1, r3
 8001714:	4806      	ldr	r0, [pc, #24]	; (8001730 <MX_GPIO_Init+0x134>)
 8001716:	f002 fd97 	bl	8004248 <HAL_GPIO_Init>

}
 800171a:	bf00      	nop
 800171c:	3728      	adds	r7, #40	; 0x28
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800
 8001728:	40020800 	.word	0x40020800
 800172c:	40020000 	.word	0x40020000
 8001730:	40020400 	.word	0x40020400

08001734 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <MX_I2C1_Init+0x50>)
 800173a:	4a13      	ldr	r2, [pc, #76]	; (8001788 <MX_I2C1_Init+0x54>)
 800173c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <MX_I2C1_Init+0x50>)
 8001740:	4a12      	ldr	r2, [pc, #72]	; (800178c <MX_I2C1_Init+0x58>)
 8001742:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <MX_I2C1_Init+0x50>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <MX_I2C1_Init+0x50>)
 800174c:	2200      	movs	r2, #0
 800174e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <MX_I2C1_Init+0x50>)
 8001752:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001756:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001758:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <MX_I2C1_Init+0x50>)
 800175a:	2200      	movs	r2, #0
 800175c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <MX_I2C1_Init+0x50>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001764:	4b07      	ldr	r3, [pc, #28]	; (8001784 <MX_I2C1_Init+0x50>)
 8001766:	2200      	movs	r2, #0
 8001768:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <MX_I2C1_Init+0x50>)
 800176c:	2200      	movs	r2, #0
 800176e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001770:	4804      	ldr	r0, [pc, #16]	; (8001784 <MX_I2C1_Init+0x50>)
 8001772:	f003 f835 	bl	80047e0 <HAL_I2C_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800177c:	f000 f9bc 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200001ac 	.word	0x200001ac
 8001788:	40005400 	.word	0x40005400
 800178c:	000186a0 	.word	0x000186a0

08001790 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <MX_I2C3_Init+0x50>)
 8001796:	4a13      	ldr	r2, [pc, #76]	; (80017e4 <MX_I2C3_Init+0x54>)
 8001798:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <MX_I2C3_Init+0x50>)
 800179c:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <MX_I2C3_Init+0x58>)
 800179e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017a0:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <MX_I2C3_Init+0x50>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <MX_I2C3_Init+0x50>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <MX_I2C3_Init+0x50>)
 80017ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017b2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017b4:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <MX_I2C3_Init+0x50>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <MX_I2C3_Init+0x50>)
 80017bc:	2200      	movs	r2, #0
 80017be:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017c0:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <MX_I2C3_Init+0x50>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <MX_I2C3_Init+0x50>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80017cc:	4804      	ldr	r0, [pc, #16]	; (80017e0 <MX_I2C3_Init+0x50>)
 80017ce:	f003 f807 	bl	80047e0 <HAL_I2C_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80017d8:	f000 f98e 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000230 	.word	0x20000230
 80017e4:	40005c00 	.word	0x40005c00
 80017e8:	000186a0 	.word	0x000186a0

080017ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08c      	sub	sp, #48	; 0x30
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 031c 	add.w	r3, r7, #28
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a52      	ldr	r2, [pc, #328]	; (8001954 <HAL_I2C_MspInit+0x168>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d13d      	bne.n	800188a <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
 8001812:	4b51      	ldr	r3, [pc, #324]	; (8001958 <HAL_I2C_MspInit+0x16c>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a50      	ldr	r2, [pc, #320]	; (8001958 <HAL_I2C_MspInit+0x16c>)
 8001818:	f043 0302 	orr.w	r3, r3, #2
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b4e      	ldr	r3, [pc, #312]	; (8001958 <HAL_I2C_MspInit+0x16c>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	61bb      	str	r3, [r7, #24]
 8001828:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800182a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800182e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001830:	2312      	movs	r3, #18
 8001832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001838:	2303      	movs	r3, #3
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800183c:	2304      	movs	r3, #4
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001840:	f107 031c 	add.w	r3, r7, #28
 8001844:	4619      	mov	r1, r3
 8001846:	4845      	ldr	r0, [pc, #276]	; (800195c <HAL_I2C_MspInit+0x170>)
 8001848:	f002 fcfe 	bl	8004248 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	4b41      	ldr	r3, [pc, #260]	; (8001958 <HAL_I2C_MspInit+0x16c>)
 8001852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001854:	4a40      	ldr	r2, [pc, #256]	; (8001958 <HAL_I2C_MspInit+0x16c>)
 8001856:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800185a:	6413      	str	r3, [r2, #64]	; 0x40
 800185c:	4b3e      	ldr	r3, [pc, #248]	; (8001958 <HAL_I2C_MspInit+0x16c>)
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001868:	2200      	movs	r2, #0
 800186a:	2105      	movs	r1, #5
 800186c:	201f      	movs	r0, #31
 800186e:	f001 fdb1 	bl	80033d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001872:	201f      	movs	r0, #31
 8001874:	f001 fdda 	bl	800342c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001878:	2200      	movs	r2, #0
 800187a:	2105      	movs	r1, #5
 800187c:	2020      	movs	r0, #32
 800187e:	f001 fda9 	bl	80033d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001882:	2020      	movs	r0, #32
 8001884:	f001 fdd2 	bl	800342c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001888:	e060      	b.n	800194c <HAL_I2C_MspInit+0x160>
  else if(i2cHandle->Instance==I2C3)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a34      	ldr	r2, [pc, #208]	; (8001960 <HAL_I2C_MspInit+0x174>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d15b      	bne.n	800194c <HAL_I2C_MspInit+0x160>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001894:	2300      	movs	r3, #0
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	4b2f      	ldr	r3, [pc, #188]	; (8001958 <HAL_I2C_MspInit+0x16c>)
 800189a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189c:	4a2e      	ldr	r2, [pc, #184]	; (8001958 <HAL_I2C_MspInit+0x16c>)
 800189e:	f043 0304 	orr.w	r3, r3, #4
 80018a2:	6313      	str	r3, [r2, #48]	; 0x30
 80018a4:	4b2c      	ldr	r3, [pc, #176]	; (8001958 <HAL_I2C_MspInit+0x16c>)
 80018a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b0:	2300      	movs	r3, #0
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	4b28      	ldr	r3, [pc, #160]	; (8001958 <HAL_I2C_MspInit+0x16c>)
 80018b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b8:	4a27      	ldr	r2, [pc, #156]	; (8001958 <HAL_I2C_MspInit+0x16c>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	6313      	str	r3, [r2, #48]	; 0x30
 80018c0:	4b25      	ldr	r3, [pc, #148]	; (8001958 <HAL_I2C_MspInit+0x16c>)
 80018c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018d2:	2312      	movs	r3, #18
 80018d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018da:	2303      	movs	r3, #3
 80018dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80018de:	2304      	movs	r3, #4
 80018e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e2:	f107 031c 	add.w	r3, r7, #28
 80018e6:	4619      	mov	r1, r3
 80018e8:	481e      	ldr	r0, [pc, #120]	; (8001964 <HAL_I2C_MspInit+0x178>)
 80018ea:	f002 fcad 	bl	8004248 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018f4:	2312      	movs	r3, #18
 80018f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fc:	2303      	movs	r3, #3
 80018fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001900:	2304      	movs	r3, #4
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001904:	f107 031c 	add.w	r3, r7, #28
 8001908:	4619      	mov	r1, r3
 800190a:	4817      	ldr	r0, [pc, #92]	; (8001968 <HAL_I2C_MspInit+0x17c>)
 800190c:	f002 fc9c 	bl	8004248 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	4b10      	ldr	r3, [pc, #64]	; (8001958 <HAL_I2C_MspInit+0x16c>)
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	4a0f      	ldr	r2, [pc, #60]	; (8001958 <HAL_I2C_MspInit+0x16c>)
 800191a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800191e:	6413      	str	r3, [r2, #64]	; 0x40
 8001920:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <HAL_I2C_MspInit+0x16c>)
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 800192c:	2200      	movs	r2, #0
 800192e:	2105      	movs	r1, #5
 8001930:	2048      	movs	r0, #72	; 0x48
 8001932:	f001 fd4f 	bl	80033d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001936:	2048      	movs	r0, #72	; 0x48
 8001938:	f001 fd78 	bl	800342c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 800193c:	2200      	movs	r2, #0
 800193e:	2105      	movs	r1, #5
 8001940:	2049      	movs	r0, #73	; 0x49
 8001942:	f001 fd47 	bl	80033d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8001946:	2049      	movs	r0, #73	; 0x49
 8001948:	f001 fd70 	bl	800342c <HAL_NVIC_EnableIRQ>
}
 800194c:	bf00      	nop
 800194e:	3730      	adds	r7, #48	; 0x30
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40005400 	.word	0x40005400
 8001958:	40023800 	.word	0x40023800
 800195c:	40020400 	.word	0x40020400
 8001960:	40005c00 	.word	0x40005c00
 8001964:	40020800 	.word	0x40020800
 8001968:	40020000 	.word	0x40020000

0800196c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001970:	f000 feaa 	bl	80026c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001974:	f000 f82a 	bl	80019cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001978:	f7ff fe40 	bl	80015fc <MX_GPIO_Init>
  MX_DMA_Init();
 800197c:	f7ff fce8 	bl	8001350 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001980:	f000 fd64 	bl	800244c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001984:	f000 fb16 	bl	8001fb4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001988:	f000 fb62 	bl	8002050 <MX_TIM3_Init>
  MX_TIM5_Init();
 800198c:	f000 fbfc 	bl	8002188 <MX_TIM5_Init>
  MX_TIM4_Init();
 8001990:	f000 fbac 	bl	80020ec <MX_TIM4_Init>
  MX_ADC1_Init();
 8001994:	f7ff fbaa 	bl	80010ec <MX_ADC1_Init>
  MX_CRC_Init();
 8001998:	f7ff fca4 	bl	80012e4 <MX_CRC_Init>
  MX_TIM9_Init();
 800199c:	f000 fc44 	bl	8002228 <MX_TIM9_Init>
  MX_I2C3_Init();
 80019a0:	f7ff fef6 	bl	8001790 <MX_I2C3_Init>
  MX_SPI1_Init();
 80019a4:	f000 f8b8 	bl	8001b18 <MX_SPI1_Init>
  MX_MBEDTLS_Init();
 80019a8:	f008 f8de 	bl	8009b68 <MX_MBEDTLS_Init>
  MX_TIM11_Init();
 80019ac:	f000 fc76 	bl	800229c <MX_TIM11_Init>
  MX_I2C1_Init();
 80019b0:	f7ff fec0 	bl	8001734 <MX_I2C1_Init>
  /* Call PreOsInit function */
  MX_MBEDTLS_Init();
 80019b4:	f008 f8d8 	bl	8009b68 <MX_MBEDTLS_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80019b8:	f000 f870 	bl	8001a9c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80019bc:	f008 f920 	bl	8009c00 <osKernelInitialize>
  MX_FREERTOS_Init();
 80019c0:	f7ff fd30 	bl	8001424 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80019c4:	f008 f940 	bl	8009c48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <main+0x5c>
	...

080019cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b094      	sub	sp, #80	; 0x50
 80019d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019d2:	f107 0320 	add.w	r3, r7, #32
 80019d6:	2230      	movs	r2, #48	; 0x30
 80019d8:	2100      	movs	r1, #0
 80019da:	4618      	mov	r0, r3
 80019dc:	f00b fa2a 	bl	800ce34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019e0:	f107 030c 	add.w	r3, r7, #12
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f0:	2300      	movs	r3, #0
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	4b27      	ldr	r3, [pc, #156]	; (8001a94 <SystemClock_Config+0xc8>)
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	4a26      	ldr	r2, [pc, #152]	; (8001a94 <SystemClock_Config+0xc8>)
 80019fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001a00:	4b24      	ldr	r3, [pc, #144]	; (8001a94 <SystemClock_Config+0xc8>)
 8001a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	607b      	str	r3, [r7, #4]
 8001a10:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <SystemClock_Config+0xcc>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a20      	ldr	r2, [pc, #128]	; (8001a98 <SystemClock_Config+0xcc>)
 8001a16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	4b1e      	ldr	r3, [pc, #120]	; (8001a98 <SystemClock_Config+0xcc>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a32:	2302      	movs	r3, #2
 8001a34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a3c:	2304      	movs	r3, #4
 8001a3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001a40:	2364      	movs	r3, #100	; 0x64
 8001a42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a44:	2302      	movs	r3, #2
 8001a46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a48:	2304      	movs	r3, #4
 8001a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a4c:	f107 0320 	add.w	r3, r7, #32
 8001a50:	4618      	mov	r0, r3
 8001a52:	f004 fddf 	bl	8006614 <HAL_RCC_OscConfig>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a5c:	f000 f84c 	bl	8001af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a60:	230f      	movs	r3, #15
 8001a62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a64:	2302      	movs	r3, #2
 8001a66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a76:	f107 030c 	add.w	r3, r7, #12
 8001a7a:	2103      	movs	r1, #3
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f005 f8f1 	bl	8006c64 <HAL_RCC_ClockConfig>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a88:	f000 f836 	bl	8001af8 <Error_Handler>
  }
}
 8001a8c:	bf00      	nop
 8001a8e:	3750      	adds	r7, #80	; 0x50
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40007000 	.word	0x40007000

08001a9c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2105      	movs	r1, #5
 8001aa4:	2004      	movs	r0, #4
 8001aa6:	f001 fc95 	bl	80033d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001aaa:	2004      	movs	r0, #4
 8001aac:	f001 fcbe 	bl	800342c <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2105      	movs	r1, #5
 8001ab4:	201c      	movs	r0, #28
 8001ab6:	f001 fc8d 	bl	80033d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001aba:	201c      	movs	r0, #28
 8001abc:	f001 fcb6 	bl	800342c <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2105      	movs	r1, #5
 8001ac4:	2051      	movs	r0, #81	; 0x51
 8001ac6:	f001 fc85 	bl	80033d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8001aca:	2051      	movs	r0, #81	; 0x51
 8001acc:	f001 fcae 	bl	800342c <HAL_NVIC_EnableIRQ>
}
 8001ad0:	bf00      	nop
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d101      	bne.n	8001aea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ae6:	f000 fe11 	bl	800270c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40010000 	.word	0x40010000

08001af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001afc:	b672      	cpsid	i
}
 8001afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <Error_Handler+0x8>

08001b02 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
 8001b0a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001b1c:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <MX_SPI1_Init+0x64>)
 8001b1e:	4a18      	ldr	r2, [pc, #96]	; (8001b80 <MX_SPI1_Init+0x68>)
 8001b20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b22:	4b16      	ldr	r3, [pc, #88]	; (8001b7c <MX_SPI1_Init+0x64>)
 8001b24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b2a:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <MX_SPI1_Init+0x64>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <MX_SPI1_Init+0x64>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <MX_SPI1_Init+0x64>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <MX_SPI1_Init+0x64>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <MX_SPI1_Init+0x64>)
 8001b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b48:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <MX_SPI1_Init+0x64>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b50:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <MX_SPI1_Init+0x64>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b56:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <MX_SPI1_Init+0x64>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b5c:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <MX_SPI1_Init+0x64>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <MX_SPI1_Init+0x64>)
 8001b64:	220a      	movs	r2, #10
 8001b66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b68:	4804      	ldr	r0, [pc, #16]	; (8001b7c <MX_SPI1_Init+0x64>)
 8001b6a:	f005 fb75 	bl	8007258 <HAL_SPI_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b74:	f7ff ffc0 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	200002b4 	.word	0x200002b4
 8001b80:	40013000 	.word	0x40013000

08001b84 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08a      	sub	sp, #40	; 0x28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a2c      	ldr	r2, [pc, #176]	; (8001c54 <HAL_SPI_MspInit+0xd0>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d151      	bne.n	8001c4a <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	4b2b      	ldr	r3, [pc, #172]	; (8001c58 <HAL_SPI_MspInit+0xd4>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	4a2a      	ldr	r2, [pc, #168]	; (8001c58 <HAL_SPI_MspInit+0xd4>)
 8001bb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb6:	4b28      	ldr	r3, [pc, #160]	; (8001c58 <HAL_SPI_MspInit+0xd4>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <HAL_SPI_MspInit+0xd4>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	4a23      	ldr	r2, [pc, #140]	; (8001c58 <HAL_SPI_MspInit+0xd4>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd2:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <HAL_SPI_MspInit+0xd4>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <HAL_SPI_MspInit+0xd4>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	4a1c      	ldr	r2, [pc, #112]	; (8001c58 <HAL_SPI_MspInit+0xd4>)
 8001be8:	f043 0302 	orr.w	r3, r3, #2
 8001bec:	6313      	str	r3, [r2, #48]	; 0x30
 8001bee:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <HAL_SPI_MspInit+0xd4>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001bfa:	23a0      	movs	r3, #160	; 0xa0
 8001bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c06:	2303      	movs	r3, #3
 8001c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c0a:	2305      	movs	r3, #5
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0e:	f107 0314 	add.w	r3, r7, #20
 8001c12:	4619      	mov	r1, r3
 8001c14:	4811      	ldr	r0, [pc, #68]	; (8001c5c <HAL_SPI_MspInit+0xd8>)
 8001c16:	f002 fb17 	bl	8004248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c1a:	2310      	movs	r3, #16
 8001c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c26:	2303      	movs	r3, #3
 8001c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c2a:	2305      	movs	r3, #5
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2e:	f107 0314 	add.w	r3, r7, #20
 8001c32:	4619      	mov	r1, r3
 8001c34:	480a      	ldr	r0, [pc, #40]	; (8001c60 <HAL_SPI_MspInit+0xdc>)
 8001c36:	f002 fb07 	bl	8004248 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2105      	movs	r1, #5
 8001c3e:	2023      	movs	r0, #35	; 0x23
 8001c40:	f001 fbc8 	bl	80033d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001c44:	2023      	movs	r0, #35	; 0x23
 8001c46:	f001 fbf1 	bl	800342c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	3728      	adds	r7, #40	; 0x28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40013000 	.word	0x40013000
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40020000 	.word	0x40020000
 8001c60:	40020400 	.word	0x40020400

08001c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <HAL_MspInit+0x74>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	4a19      	ldr	r2, [pc, #100]	; (8001cd8 <HAL_MspInit+0x74>)
 8001c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c78:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7a:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <HAL_MspInit+0x74>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	603b      	str	r3, [r7, #0]
 8001c8a:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <HAL_MspInit+0x74>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	4a12      	ldr	r2, [pc, #72]	; (8001cd8 <HAL_MspInit+0x74>)
 8001c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c94:	6413      	str	r3, [r2, #64]	; 0x40
 8001c96:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <HAL_MspInit+0x74>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	603b      	str	r3, [r7, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	210f      	movs	r1, #15
 8001ca6:	f06f 0001 	mvn.w	r0, #1
 8001caa:	f001 fb93 	bl	80033d4 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2105      	movs	r1, #5
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	f001 fb8e 	bl	80033d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001cb8:	2001      	movs	r0, #1
 8001cba:	f001 fbb7 	bl	800342c <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2105      	movs	r1, #5
 8001cc2:	2005      	movs	r0, #5
 8001cc4:	f001 fb86 	bl	80033d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001cc8:	2005      	movs	r0, #5
 8001cca:	f001 fbaf 	bl	800342c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800

08001cdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08c      	sub	sp, #48	; 0x30
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001cec:	2300      	movs	r3, #0
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	4b2e      	ldr	r3, [pc, #184]	; (8001dac <HAL_InitTick+0xd0>)
 8001cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf4:	4a2d      	ldr	r2, [pc, #180]	; (8001dac <HAL_InitTick+0xd0>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	6453      	str	r3, [r2, #68]	; 0x44
 8001cfc:	4b2b      	ldr	r3, [pc, #172]	; (8001dac <HAL_InitTick+0xd0>)
 8001cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d08:	f107 020c 	add.w	r2, r7, #12
 8001d0c:	f107 0310 	add.w	r3, r7, #16
 8001d10:	4611      	mov	r1, r2
 8001d12:	4618      	mov	r0, r3
 8001d14:	f005 fa6e 	bl	80071f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001d18:	f005 fa58 	bl	80071cc <HAL_RCC_GetPCLK2Freq>
 8001d1c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d20:	4a23      	ldr	r2, [pc, #140]	; (8001db0 <HAL_InitTick+0xd4>)
 8001d22:	fba2 2303 	umull	r2, r3, r2, r3
 8001d26:	0c9b      	lsrs	r3, r3, #18
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d2c:	4b21      	ldr	r3, [pc, #132]	; (8001db4 <HAL_InitTick+0xd8>)
 8001d2e:	4a22      	ldr	r2, [pc, #136]	; (8001db8 <HAL_InitTick+0xdc>)
 8001d30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001d32:	4b20      	ldr	r3, [pc, #128]	; (8001db4 <HAL_InitTick+0xd8>)
 8001d34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d38:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d3a:	4a1e      	ldr	r2, [pc, #120]	; (8001db4 <HAL_InitTick+0xd8>)
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001d40:	4b1c      	ldr	r3, [pc, #112]	; (8001db4 <HAL_InitTick+0xd8>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d46:	4b1b      	ldr	r3, [pc, #108]	; (8001db4 <HAL_InitTick+0xd8>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d4c:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <HAL_InitTick+0xd8>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001d52:	4818      	ldr	r0, [pc, #96]	; (8001db4 <HAL_InitTick+0xd8>)
 8001d54:	f005 fdb4 	bl	80078c0 <HAL_TIM_Base_Init>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001d5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d11b      	bne.n	8001d9e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001d66:	4813      	ldr	r0, [pc, #76]	; (8001db4 <HAL_InitTick+0xd8>)
 8001d68:	f005 fe7c 	bl	8007a64 <HAL_TIM_Base_Start_IT>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001d72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d111      	bne.n	8001d9e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d7a:	2019      	movs	r0, #25
 8001d7c:	f001 fb56 	bl	800342c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b0f      	cmp	r3, #15
 8001d84:	d808      	bhi.n	8001d98 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001d86:	2200      	movs	r2, #0
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	2019      	movs	r0, #25
 8001d8c:	f001 fb22 	bl	80033d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d90:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <HAL_InitTick+0xe0>)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	e002      	b.n	8001d9e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001d9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3730      	adds	r7, #48	; 0x30
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800
 8001db0:	431bde83 	.word	0x431bde83
 8001db4:	20000334 	.word	0x20000334
 8001db8:	40010000 	.word	0x40010000
 8001dbc:	20000004 	.word	0x20000004

08001dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dc4:	e7fe      	b.n	8001dc4 <NMI_Handler+0x4>

08001dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dca:	e7fe      	b.n	8001dca <HardFault_Handler+0x4>

08001dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <MemManage_Handler+0x4>

08001dd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dd6:	e7fe      	b.n	8001dd6 <BusFault_Handler+0x4>

08001dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ddc:	e7fe      	b.n	8001ddc <UsageFault_Handler+0x4>

08001dde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8001df0:	f004 fbf6 	bl	80065e0 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001dfc:	f002 f84e 	bl	8003e9c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8001e00:	bf00      	nop
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
	...

08001e14 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e18:	4802      	ldr	r0, [pc, #8]	; (8001e24 <ADC_IRQHandler+0x10>)
 8001e1a:	f000 fe19 	bl	8002a50 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	200000bc 	.word	0x200000bc

08001e28 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001e2c:	4802      	ldr	r0, [pc, #8]	; (8001e38 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001e2e:	f005 ff15 	bl	8007c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	200006b8 	.word	0x200006b8

08001e3c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e40:	4802      	ldr	r0, [pc, #8]	; (8001e4c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e42:	f005 ff0b 	bl	8007c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000334 	.word	0x20000334

08001e50 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */
	CenLoc_Tim11IRQFlag++;
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>)
 8001e5e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001e60:	4803      	ldr	r0, [pc, #12]	; (8001e70 <TIM1_TRG_COM_TIM11_IRQHandler+0x20>)
 8001e62:	f005 fefb 	bl	8007c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	2000009e 	.word	0x2000009e
 8001e70:	2000076c 	.word	0x2000076c

08001e74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	CenLoc_Tim2IRQFlag = CenLoc_Tim2IRQFlag + 1;
 8001e78:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <TIM2_IRQHandler+0x1c>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	4b03      	ldr	r3, [pc, #12]	; (8001e90 <TIM2_IRQHandler+0x1c>)
 8001e82:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e84:	4803      	ldr	r0, [pc, #12]	; (8001e94 <TIM2_IRQHandler+0x20>)
 8001e86:	f005 fee9 	bl	8007c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	2000009b 	.word	0x2000009b
 8001e94:	200003e8 	.word	0x200003e8

08001e98 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	CenLoc_Tim3IRQFlag++;
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <TIM3_IRQHandler+0x1c>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	4b03      	ldr	r3, [pc, #12]	; (8001eb4 <TIM3_IRQHandler+0x1c>)
 8001ea6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ea8:	4803      	ldr	r0, [pc, #12]	; (8001eb8 <TIM3_IRQHandler+0x20>)
 8001eaa:	f005 fed7 	bl	8007c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	2000009c 	.word	0x2000009c
 8001eb8:	2000049c 	.word	0x2000049c

08001ebc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ec0:	4802      	ldr	r0, [pc, #8]	; (8001ecc <TIM4_IRQHandler+0x10>)
 8001ec2:	f005 fecb 	bl	8007c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000550 	.word	0x20000550

08001ed0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001ed4:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <I2C1_EV_IRQHandler+0x10>)
 8001ed6:	f002 fe8d 	bl	8004bf4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	200001ac 	.word	0x200001ac

08001ee4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001ee8:	4802      	ldr	r0, [pc, #8]	; (8001ef4 <I2C1_ER_IRQHandler+0x10>)
 8001eea:	f002 fff4 	bl	8004ed6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	200001ac 	.word	0x200001ac

08001ef8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001efc:	4802      	ldr	r0, [pc, #8]	; (8001f08 <SPI1_IRQHandler+0x10>)
 8001efe:	f005 fb79 	bl	80075f4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	200002b4 	.word	0x200002b4

08001f0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f10:	4802      	ldr	r0, [pc, #8]	; (8001f1c <USART1_IRQHandler+0x10>)
 8001f12:	f006 fe77 	bl	8008c04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000820 	.word	0x20000820

08001f20 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	CenLoc_Tim5IRQFlag++;
 8001f24:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <TIM5_IRQHandler+0x1c>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	4b03      	ldr	r3, [pc, #12]	; (8001f3c <TIM5_IRQHandler+0x1c>)
 8001f2e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001f30:	4803      	ldr	r0, [pc, #12]	; (8001f40 <TIM5_IRQHandler+0x20>)
 8001f32:	f005 fe93 	bl	8007c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	2000009d 	.word	0x2000009d
 8001f40:	20000604 	.word	0x20000604

08001f44 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f48:	4802      	ldr	r0, [pc, #8]	; (8001f54 <DMA2_Stream0_IRQHandler+0x10>)
 8001f4a:	f001 fd5d 	bl	8003a08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000120 	.word	0x20000120

08001f58 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001f5c:	4802      	ldr	r0, [pc, #8]	; (8001f68 <I2C3_EV_IRQHandler+0x10>)
 8001f5e:	f002 fe49 	bl	8004bf4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000230 	.word	0x20000230

08001f6c <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8001f70:	4802      	ldr	r0, [pc, #8]	; (8001f7c <I2C3_ER_IRQHandler+0x10>)
 8001f72:	f002 ffb0 	bl	8004ed6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000230 	.word	0x20000230

08001f80 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <SystemInit+0x20>)
 8001f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9a:	4a05      	ldr	r2, [pc, #20]	; (8001fb0 <SystemInit+0x20>)
 8001f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fba:	f107 0308 	add.w	r3, r7, #8
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc8:	463b      	mov	r3, r7
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fd0:	4b1e      	ldr	r3, [pc, #120]	; (800204c <MX_TIM2_Init+0x98>)
 8001fd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fd6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 8001fd8:	4b1c      	ldr	r3, [pc, #112]	; (800204c <MX_TIM2_Init+0x98>)
 8001fda:	f242 720f 	movw	r2, #9999	; 0x270f
 8001fde:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	; (800204c <MX_TIM2_Init+0x98>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2500-1;
 8001fe6:	4b19      	ldr	r3, [pc, #100]	; (800204c <MX_TIM2_Init+0x98>)
 8001fe8:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001fec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fee:	4b17      	ldr	r3, [pc, #92]	; (800204c <MX_TIM2_Init+0x98>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff4:	4b15      	ldr	r3, [pc, #84]	; (800204c <MX_TIM2_Init+0x98>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ffa:	4814      	ldr	r0, [pc, #80]	; (800204c <MX_TIM2_Init+0x98>)
 8001ffc:	f005 fc60 	bl	80078c0 <HAL_TIM_Base_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002006:	f7ff fd77 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800200a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800200e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002010:	f107 0308 	add.w	r3, r7, #8
 8002014:	4619      	mov	r1, r3
 8002016:	480d      	ldr	r0, [pc, #52]	; (800204c <MX_TIM2_Init+0x98>)
 8002018:	f005 ff48 	bl	8007eac <HAL_TIM_ConfigClockSource>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002022:	f7ff fd69 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002026:	2300      	movs	r3, #0
 8002028:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800202a:	2300      	movs	r3, #0
 800202c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800202e:	463b      	mov	r3, r7
 8002030:	4619      	mov	r1, r3
 8002032:	4806      	ldr	r0, [pc, #24]	; (800204c <MX_TIM2_Init+0x98>)
 8002034:	f006 fc16 	bl	8008864 <HAL_TIMEx_MasterConfigSynchronization>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800203e:	f7ff fd5b 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002042:	bf00      	nop
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200003e8 	.word	0x200003e8

08002050 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002056:	f107 0308 	add.w	r3, r7, #8
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	605a      	str	r2, [r3, #4]
 8002060:	609a      	str	r2, [r3, #8]
 8002062:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002064:	463b      	mov	r3, r7
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800206c:	4b1d      	ldr	r3, [pc, #116]	; (80020e4 <MX_TIM3_Init+0x94>)
 800206e:	4a1e      	ldr	r2, [pc, #120]	; (80020e8 <MX_TIM3_Init+0x98>)
 8002070:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8002072:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <MX_TIM3_Init+0x94>)
 8002074:	f242 720f 	movw	r2, #9999	; 0x270f
 8002078:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800207a:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <MX_TIM3_Init+0x94>)
 800207c:	2200      	movs	r2, #0
 800207e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000-1;
 8002080:	4b18      	ldr	r3, [pc, #96]	; (80020e4 <MX_TIM3_Init+0x94>)
 8002082:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8002086:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002088:	4b16      	ldr	r3, [pc, #88]	; (80020e4 <MX_TIM3_Init+0x94>)
 800208a:	2200      	movs	r2, #0
 800208c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800208e:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <MX_TIM3_Init+0x94>)
 8002090:	2200      	movs	r2, #0
 8002092:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002094:	4813      	ldr	r0, [pc, #76]	; (80020e4 <MX_TIM3_Init+0x94>)
 8002096:	f005 fc13 	bl	80078c0 <HAL_TIM_Base_Init>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80020a0:	f7ff fd2a 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020aa:	f107 0308 	add.w	r3, r7, #8
 80020ae:	4619      	mov	r1, r3
 80020b0:	480c      	ldr	r0, [pc, #48]	; (80020e4 <MX_TIM3_Init+0x94>)
 80020b2:	f005 fefb 	bl	8007eac <HAL_TIM_ConfigClockSource>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80020bc:	f7ff fd1c 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020c0:	2300      	movs	r3, #0
 80020c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c4:	2300      	movs	r3, #0
 80020c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020c8:	463b      	mov	r3, r7
 80020ca:	4619      	mov	r1, r3
 80020cc:	4805      	ldr	r0, [pc, #20]	; (80020e4 <MX_TIM3_Init+0x94>)
 80020ce:	f006 fbc9 	bl	8008864 <HAL_TIMEx_MasterConfigSynchronization>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80020d8:	f7ff fd0e 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020dc:	bf00      	nop
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	2000049c 	.word	0x2000049c
 80020e8:	40000400 	.word	0x40000400

080020ec <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020f2:	f107 0308 	add.w	r3, r7, #8
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	609a      	str	r2, [r3, #8]
 80020fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002100:	463b      	mov	r3, r7
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002108:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <MX_TIM4_Init+0x94>)
 800210a:	4a1e      	ldr	r2, [pc, #120]	; (8002184 <MX_TIM4_Init+0x98>)
 800210c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 800210e:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <MX_TIM4_Init+0x94>)
 8002110:	f242 720f 	movw	r2, #9999	; 0x270f
 8002114:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002116:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <MX_TIM4_Init+0x94>)
 8002118:	2200      	movs	r2, #0
 800211a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 800211c:	4b18      	ldr	r3, [pc, #96]	; (8002180 <MX_TIM4_Init+0x94>)
 800211e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002122:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002124:	4b16      	ldr	r3, [pc, #88]	; (8002180 <MX_TIM4_Init+0x94>)
 8002126:	2200      	movs	r2, #0
 8002128:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800212a:	4b15      	ldr	r3, [pc, #84]	; (8002180 <MX_TIM4_Init+0x94>)
 800212c:	2200      	movs	r2, #0
 800212e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002130:	4813      	ldr	r0, [pc, #76]	; (8002180 <MX_TIM4_Init+0x94>)
 8002132:	f005 fbc5 	bl	80078c0 <HAL_TIM_Base_Init>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800213c:	f7ff fcdc 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002144:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002146:	f107 0308 	add.w	r3, r7, #8
 800214a:	4619      	mov	r1, r3
 800214c:	480c      	ldr	r0, [pc, #48]	; (8002180 <MX_TIM4_Init+0x94>)
 800214e:	f005 fead 	bl	8007eac <HAL_TIM_ConfigClockSource>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002158:	f7ff fcce 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800215c:	2300      	movs	r3, #0
 800215e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002160:	2300      	movs	r3, #0
 8002162:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002164:	463b      	mov	r3, r7
 8002166:	4619      	mov	r1, r3
 8002168:	4805      	ldr	r0, [pc, #20]	; (8002180 <MX_TIM4_Init+0x94>)
 800216a:	f006 fb7b 	bl	8008864 <HAL_TIMEx_MasterConfigSynchronization>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002174:	f7ff fcc0 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002178:	bf00      	nop
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000550 	.word	0x20000550
 8002184:	40000800 	.word	0x40000800

08002188 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800218e:	f107 0308 	add.w	r3, r7, #8
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	609a      	str	r2, [r3, #8]
 800219a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800219c:	463b      	mov	r3, r7
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80021a4:	4b1d      	ldr	r3, [pc, #116]	; (800221c <MX_TIM5_Init+0x94>)
 80021a6:	4a1e      	ldr	r2, [pc, #120]	; (8002220 <MX_TIM5_Init+0x98>)
 80021a8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 10000-1;
 80021aa:	4b1c      	ldr	r3, [pc, #112]	; (800221c <MX_TIM5_Init+0x94>)
 80021ac:	f242 720f 	movw	r2, #9999	; 0x270f
 80021b0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b2:	4b1a      	ldr	r3, [pc, #104]	; (800221c <MX_TIM5_Init+0x94>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100000-1;
 80021b8:	4b18      	ldr	r3, [pc, #96]	; (800221c <MX_TIM5_Init+0x94>)
 80021ba:	4a1a      	ldr	r2, [pc, #104]	; (8002224 <MX_TIM5_Init+0x9c>)
 80021bc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021be:	4b17      	ldr	r3, [pc, #92]	; (800221c <MX_TIM5_Init+0x94>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c4:	4b15      	ldr	r3, [pc, #84]	; (800221c <MX_TIM5_Init+0x94>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80021ca:	4814      	ldr	r0, [pc, #80]	; (800221c <MX_TIM5_Init+0x94>)
 80021cc:	f005 fb78 	bl	80078c0 <HAL_TIM_Base_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80021d6:	f7ff fc8f 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80021e0:	f107 0308 	add.w	r3, r7, #8
 80021e4:	4619      	mov	r1, r3
 80021e6:	480d      	ldr	r0, [pc, #52]	; (800221c <MX_TIM5_Init+0x94>)
 80021e8:	f005 fe60 	bl	8007eac <HAL_TIM_ConfigClockSource>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80021f2:	f7ff fc81 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021f6:	2300      	movs	r3, #0
 80021f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80021fe:	463b      	mov	r3, r7
 8002200:	4619      	mov	r1, r3
 8002202:	4806      	ldr	r0, [pc, #24]	; (800221c <MX_TIM5_Init+0x94>)
 8002204:	f006 fb2e 	bl	8008864 <HAL_TIMEx_MasterConfigSynchronization>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800220e:	f7ff fc73 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002212:	bf00      	nop
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000604 	.word	0x20000604
 8002220:	40000c00 	.word	0x40000c00
 8002224:	0001869f 	.word	0x0001869f

08002228 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800222e:	463b      	mov	r3, r7
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800223a:	4b16      	ldr	r3, [pc, #88]	; (8002294 <MX_TIM9_Init+0x6c>)
 800223c:	4a16      	ldr	r2, [pc, #88]	; (8002298 <MX_TIM9_Init+0x70>)
 800223e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 10000-1;
 8002240:	4b14      	ldr	r3, [pc, #80]	; (8002294 <MX_TIM9_Init+0x6c>)
 8002242:	f242 720f 	movw	r2, #9999	; 0x270f
 8002246:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002248:	4b12      	ldr	r3, [pc, #72]	; (8002294 <MX_TIM9_Init+0x6c>)
 800224a:	2200      	movs	r2, #0
 800224c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 10000-1;
 800224e:	4b11      	ldr	r3, [pc, #68]	; (8002294 <MX_TIM9_Init+0x6c>)
 8002250:	f242 720f 	movw	r2, #9999	; 0x270f
 8002254:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002256:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <MX_TIM9_Init+0x6c>)
 8002258:	2200      	movs	r2, #0
 800225a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800225c:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <MX_TIM9_Init+0x6c>)
 800225e:	2200      	movs	r2, #0
 8002260:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002262:	480c      	ldr	r0, [pc, #48]	; (8002294 <MX_TIM9_Init+0x6c>)
 8002264:	f005 fb2c 	bl	80078c0 <HAL_TIM_Base_Init>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 800226e:	f7ff fc43 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002272:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002276:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002278:	463b      	mov	r3, r7
 800227a:	4619      	mov	r1, r3
 800227c:	4805      	ldr	r0, [pc, #20]	; (8002294 <MX_TIM9_Init+0x6c>)
 800227e:	f005 fe15 	bl	8007eac <HAL_TIM_ConfigClockSource>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8002288:	f7ff fc36 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800228c:	bf00      	nop
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	200006b8 	.word	0x200006b8
 8002298:	40014000 	.word	0x40014000

0800229c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80022a0:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <MX_TIM11_Init+0x40>)
 80022a2:	4a0f      	ldr	r2, [pc, #60]	; (80022e0 <MX_TIM11_Init+0x44>)
 80022a4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 10000-1;
 80022a6:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <MX_TIM11_Init+0x40>)
 80022a8:	f242 720f 	movw	r2, #9999	; 0x270f
 80022ac:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ae:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <MX_TIM11_Init+0x40>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 5000-1;
 80022b4:	4b09      	ldr	r3, [pc, #36]	; (80022dc <MX_TIM11_Init+0x40>)
 80022b6:	f241 3287 	movw	r2, #4999	; 0x1387
 80022ba:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022bc:	4b07      	ldr	r3, [pc, #28]	; (80022dc <MX_TIM11_Init+0x40>)
 80022be:	2200      	movs	r2, #0
 80022c0:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c2:	4b06      	ldr	r3, [pc, #24]	; (80022dc <MX_TIM11_Init+0x40>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80022c8:	4804      	ldr	r0, [pc, #16]	; (80022dc <MX_TIM11_Init+0x40>)
 80022ca:	f005 faf9 	bl	80078c0 <HAL_TIM_Base_Init>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 80022d4:	f7ff fc10 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	2000076c 	.word	0x2000076c
 80022e0:	40014800 	.word	0x40014800

080022e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f4:	d10e      	bne.n	8002314 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
 80022fa:	4b4e      	ldr	r3, [pc, #312]	; (8002434 <HAL_TIM_Base_MspInit+0x150>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	4a4d      	ldr	r2, [pc, #308]	; (8002434 <HAL_TIM_Base_MspInit+0x150>)
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	6413      	str	r3, [r2, #64]	; 0x40
 8002306:	4b4b      	ldr	r3, [pc, #300]	; (8002434 <HAL_TIM_Base_MspInit+0x150>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	61fb      	str	r3, [r7, #28]
 8002310:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002312:	e08a      	b.n	800242a <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM3)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a47      	ldr	r2, [pc, #284]	; (8002438 <HAL_TIM_Base_MspInit+0x154>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d116      	bne.n	800234c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	61bb      	str	r3, [r7, #24]
 8002322:	4b44      	ldr	r3, [pc, #272]	; (8002434 <HAL_TIM_Base_MspInit+0x150>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	4a43      	ldr	r2, [pc, #268]	; (8002434 <HAL_TIM_Base_MspInit+0x150>)
 8002328:	f043 0302 	orr.w	r3, r3, #2
 800232c:	6413      	str	r3, [r2, #64]	; 0x40
 800232e:	4b41      	ldr	r3, [pc, #260]	; (8002434 <HAL_TIM_Base_MspInit+0x150>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	61bb      	str	r3, [r7, #24]
 8002338:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800233a:	2200      	movs	r2, #0
 800233c:	2105      	movs	r1, #5
 800233e:	201d      	movs	r0, #29
 8002340:	f001 f848 	bl	80033d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002344:	201d      	movs	r0, #29
 8002346:	f001 f871 	bl	800342c <HAL_NVIC_EnableIRQ>
}
 800234a:	e06e      	b.n	800242a <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM4)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a3a      	ldr	r2, [pc, #232]	; (800243c <HAL_TIM_Base_MspInit+0x158>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d116      	bne.n	8002384 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	4b36      	ldr	r3, [pc, #216]	; (8002434 <HAL_TIM_Base_MspInit+0x150>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	4a35      	ldr	r2, [pc, #212]	; (8002434 <HAL_TIM_Base_MspInit+0x150>)
 8002360:	f043 0304 	orr.w	r3, r3, #4
 8002364:	6413      	str	r3, [r2, #64]	; 0x40
 8002366:	4b33      	ldr	r3, [pc, #204]	; (8002434 <HAL_TIM_Base_MspInit+0x150>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002372:	2200      	movs	r2, #0
 8002374:	2105      	movs	r1, #5
 8002376:	201e      	movs	r0, #30
 8002378:	f001 f82c 	bl	80033d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800237c:	201e      	movs	r0, #30
 800237e:	f001 f855 	bl	800342c <HAL_NVIC_EnableIRQ>
}
 8002382:	e052      	b.n	800242a <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM5)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a2d      	ldr	r2, [pc, #180]	; (8002440 <HAL_TIM_Base_MspInit+0x15c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d116      	bne.n	80023bc <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	4b28      	ldr	r3, [pc, #160]	; (8002434 <HAL_TIM_Base_MspInit+0x150>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	4a27      	ldr	r2, [pc, #156]	; (8002434 <HAL_TIM_Base_MspInit+0x150>)
 8002398:	f043 0308 	orr.w	r3, r3, #8
 800239c:	6413      	str	r3, [r2, #64]	; 0x40
 800239e:	4b25      	ldr	r3, [pc, #148]	; (8002434 <HAL_TIM_Base_MspInit+0x150>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80023aa:	2200      	movs	r2, #0
 80023ac:	2105      	movs	r1, #5
 80023ae:	2032      	movs	r0, #50	; 0x32
 80023b0:	f001 f810 	bl	80033d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80023b4:	2032      	movs	r0, #50	; 0x32
 80023b6:	f001 f839 	bl	800342c <HAL_NVIC_EnableIRQ>
}
 80023ba:	e036      	b.n	800242a <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM9)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a20      	ldr	r2, [pc, #128]	; (8002444 <HAL_TIM_Base_MspInit+0x160>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d116      	bne.n	80023f4 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	4b1a      	ldr	r3, [pc, #104]	; (8002434 <HAL_TIM_Base_MspInit+0x150>)
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	4a19      	ldr	r2, [pc, #100]	; (8002434 <HAL_TIM_Base_MspInit+0x150>)
 80023d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d4:	6453      	str	r3, [r2, #68]	; 0x44
 80023d6:	4b17      	ldr	r3, [pc, #92]	; (8002434 <HAL_TIM_Base_MspInit+0x150>)
 80023d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80023e2:	2200      	movs	r2, #0
 80023e4:	2105      	movs	r1, #5
 80023e6:	2018      	movs	r0, #24
 80023e8:	f000 fff4 	bl	80033d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80023ec:	2018      	movs	r0, #24
 80023ee:	f001 f81d 	bl	800342c <HAL_NVIC_EnableIRQ>
}
 80023f2:	e01a      	b.n	800242a <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM11)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a13      	ldr	r2, [pc, #76]	; (8002448 <HAL_TIM_Base_MspInit+0x164>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d115      	bne.n	800242a <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <HAL_TIM_Base_MspInit+0x150>)
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	4a0b      	ldr	r2, [pc, #44]	; (8002434 <HAL_TIM_Base_MspInit+0x150>)
 8002408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800240c:	6453      	str	r3, [r2, #68]	; 0x44
 800240e:	4b09      	ldr	r3, [pc, #36]	; (8002434 <HAL_TIM_Base_MspInit+0x150>)
 8002410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002416:	60bb      	str	r3, [r7, #8]
 8002418:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 800241a:	2200      	movs	r2, #0
 800241c:	2105      	movs	r1, #5
 800241e:	201a      	movs	r0, #26
 8002420:	f000 ffd8 	bl	80033d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002424:	201a      	movs	r0, #26
 8002426:	f001 f801 	bl	800342c <HAL_NVIC_EnableIRQ>
}
 800242a:	bf00      	nop
 800242c:	3720      	adds	r7, #32
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40023800 	.word	0x40023800
 8002438:	40000400 	.word	0x40000400
 800243c:	40000800 	.word	0x40000800
 8002440:	40000c00 	.word	0x40000c00
 8002444:	40014000 	.word	0x40014000
 8002448:	40014800 	.word	0x40014800

0800244c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002450:	4b11      	ldr	r3, [pc, #68]	; (8002498 <MX_USART1_UART_Init+0x4c>)
 8002452:	4a12      	ldr	r2, [pc, #72]	; (800249c <MX_USART1_UART_Init+0x50>)
 8002454:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002456:	4b10      	ldr	r3, [pc, #64]	; (8002498 <MX_USART1_UART_Init+0x4c>)
 8002458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800245c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800245e:	4b0e      	ldr	r3, [pc, #56]	; (8002498 <MX_USART1_UART_Init+0x4c>)
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002464:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <MX_USART1_UART_Init+0x4c>)
 8002466:	2200      	movs	r2, #0
 8002468:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800246a:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <MX_USART1_UART_Init+0x4c>)
 800246c:	2200      	movs	r2, #0
 800246e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002470:	4b09      	ldr	r3, [pc, #36]	; (8002498 <MX_USART1_UART_Init+0x4c>)
 8002472:	220c      	movs	r2, #12
 8002474:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002476:	4b08      	ldr	r3, [pc, #32]	; (8002498 <MX_USART1_UART_Init+0x4c>)
 8002478:	2200      	movs	r2, #0
 800247a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <MX_USART1_UART_Init+0x4c>)
 800247e:	2200      	movs	r2, #0
 8002480:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002482:	4805      	ldr	r0, [pc, #20]	; (8002498 <MX_USART1_UART_Init+0x4c>)
 8002484:	f006 faca 	bl	8008a1c <HAL_UART_Init>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800248e:	f7ff fb33 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20000820 	.word	0x20000820
 800249c:	40011000 	.word	0x40011000

080024a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08a      	sub	sp, #40	; 0x28
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a8:	f107 0314 	add.w	r3, r7, #20
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	60da      	str	r2, [r3, #12]
 80024b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a1d      	ldr	r2, [pc, #116]	; (8002534 <HAL_UART_MspInit+0x94>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d133      	bne.n	800252a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	4b1c      	ldr	r3, [pc, #112]	; (8002538 <HAL_UART_MspInit+0x98>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	4a1b      	ldr	r2, [pc, #108]	; (8002538 <HAL_UART_MspInit+0x98>)
 80024cc:	f043 0310 	orr.w	r3, r3, #16
 80024d0:	6453      	str	r3, [r2, #68]	; 0x44
 80024d2:	4b19      	ldr	r3, [pc, #100]	; (8002538 <HAL_UART_MspInit+0x98>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	f003 0310 	and.w	r3, r3, #16
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	4b15      	ldr	r3, [pc, #84]	; (8002538 <HAL_UART_MspInit+0x98>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	4a14      	ldr	r2, [pc, #80]	; (8002538 <HAL_UART_MspInit+0x98>)
 80024e8:	f043 0302 	orr.w	r3, r3, #2
 80024ec:	6313      	str	r3, [r2, #48]	; 0x30
 80024ee:	4b12      	ldr	r3, [pc, #72]	; (8002538 <HAL_UART_MspInit+0x98>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB3     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80024fa:	2348      	movs	r3, #72	; 0x48
 80024fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fe:	2302      	movs	r3, #2
 8002500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002506:	2303      	movs	r3, #3
 8002508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800250a:	2307      	movs	r3, #7
 800250c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800250e:	f107 0314 	add.w	r3, r7, #20
 8002512:	4619      	mov	r1, r3
 8002514:	4809      	ldr	r0, [pc, #36]	; (800253c <HAL_UART_MspInit+0x9c>)
 8002516:	f001 fe97 	bl	8004248 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800251a:	2200      	movs	r2, #0
 800251c:	2105      	movs	r1, #5
 800251e:	2025      	movs	r0, #37	; 0x25
 8002520:	f000 ff58 	bl	80033d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002524:	2025      	movs	r0, #37	; 0x25
 8002526:	f000 ff81 	bl	800342c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800252a:	bf00      	nop
 800252c:	3728      	adds	r7, #40	; 0x28
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40011000 	.word	0x40011000
 8002538:	40023800 	.word	0x40023800
 800253c:	40020400 	.word	0x40020400

08002540 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a05      	ldr	r2, [pc, #20]	; (8002564 <HAL_UART_RxCpltCallback+0x24>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d104      	bne.n	800255c <HAL_UART_RxCpltCallback+0x1c>
  {

	//BtcReceivedDataIRQ = STD_HIGH;
    HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1);
 8002552:	2201      	movs	r2, #1
 8002554:	4904      	ldr	r1, [pc, #16]	; (8002568 <HAL_UART_RxCpltCallback+0x28>)
 8002556:	4805      	ldr	r0, [pc, #20]	; (800256c <HAL_UART_RxCpltCallback+0x2c>)
 8002558:	f006 fb24 	bl	8008ba4 <HAL_UART_Receive_IT>

	  /* do nothing */

  }

}
 800255c:	bf00      	nop
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40011000 	.word	0x40011000
 8002568:	20000090 	.word	0x20000090
 800256c:	20000820 	.word	0x20000820

08002570 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002570:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002574:	480d      	ldr	r0, [pc, #52]	; (80025ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002576:	490e      	ldr	r1, [pc, #56]	; (80025b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002578:	4a0e      	ldr	r2, [pc, #56]	; (80025b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800257a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800257c:	e002      	b.n	8002584 <LoopCopyDataInit>

0800257e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800257e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002582:	3304      	adds	r3, #4

08002584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002588:	d3f9      	bcc.n	800257e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800258a:	4a0b      	ldr	r2, [pc, #44]	; (80025b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800258c:	4c0b      	ldr	r4, [pc, #44]	; (80025bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800258e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002590:	e001      	b.n	8002596 <LoopFillZerobss>

08002592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002594:	3204      	adds	r2, #4

08002596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002598:	d3fb      	bcc.n	8002592 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800259a:	f7ff fcf9 	bl	8001f90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800259e:	f00a fc17 	bl	800cdd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025a2:	f7ff f9e3 	bl	800196c <main>
  bx  lr    
 80025a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80025a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025b0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80025b4:	0800d770 	.word	0x0800d770
  ldr r2, =_sbss
 80025b8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80025bc:	200054f0 	.word	0x200054f0

080025c0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025c0:	e7fe      	b.n	80025c0 <DMA1_Stream0_IRQHandler>

080025c2 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b084      	sub	sp, #16
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d104      	bne.n	80025da <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80025d0:	b672      	cpsid	i
}
 80025d2:	bf00      	nop
 80025d4:	f7ff fa90 	bl	8001af8 <Error_Handler>
 80025d8:	e7fe      	b.n	80025d8 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	7a1b      	ldrb	r3, [r3, #8]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d904      	bls.n	80025ec <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 80025e2:	b672      	cpsid	i
}
 80025e4:	bf00      	nop
 80025e6:	f7ff fa87 	bl	8001af8 <Error_Handler>
 80025ea:	e7fe      	b.n	80025ea <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	7a1b      	ldrb	r3, [r3, #8]
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	b2d1      	uxtb	r1, r2
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	7211      	strb	r1, [r2, #8]
 80025f8:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80025fa:	f3ef 8211 	mrs	r2, BASEPRI
 80025fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002602:	f383 8811 	msr	BASEPRI, r3
 8002606:	f3bf 8f6f 	isb	sy
 800260a:	f3bf 8f4f 	dsb	sy
 800260e:	60fa      	str	r2, [r7, #12]
 8002610:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 800261a:	bf00      	nop
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b084      	sub	sp, #16
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d104      	bne.n	800263a <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002630:	b672      	cpsid	i
}
 8002632:	bf00      	nop
 8002634:	f7ff fa60 	bl	8001af8 <Error_Handler>
 8002638:	e7fe      	b.n	8002638 <stm32_lock_release+0x16>
  lock->nesting_level--;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	7a1b      	ldrb	r3, [r3, #8]
 800263e:	3b01      	subs	r3, #1
 8002640:	b2da      	uxtb	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	7a1b      	ldrb	r3, [r3, #8]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d904      	bls.n	8002658 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 800264e:	b672      	cpsid	i
}
 8002650:	bf00      	nop
 8002652:	f7ff fa51 	bl	8001af8 <Error_Handler>
 8002656:	e7fe      	b.n	8002656 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	7a1b      	ldrb	r3, [r3, #8]
 800265c:	461a      	mov	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002664:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800266c:	bf00      	nop
}
 800266e:	bf00      	nop
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d104      	bne.n	800268e <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002684:	b672      	cpsid	i
}
 8002686:	bf00      	nop
 8002688:	f7ff fa36 	bl	8001af8 <Error_Handler>
 800268c:	e7fe      	b.n	800268c <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff ff96 	bl	80025c2 <stm32_lock_acquire>
}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d104      	bne.n	80026b6 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80026ac:	b672      	cpsid	i
}
 80026ae:	bf00      	nop
 80026b0:	f7ff fa22 	bl	8001af8 <Error_Handler>
 80026b4:	e7fe      	b.n	80026b4 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff ffb2 	bl	8002622 <stm32_lock_release>
}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026cc:	4b0e      	ldr	r3, [pc, #56]	; (8002708 <HAL_Init+0x40>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a0d      	ldr	r2, [pc, #52]	; (8002708 <HAL_Init+0x40>)
 80026d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026d8:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <HAL_Init+0x40>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <HAL_Init+0x40>)
 80026de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026e4:	4b08      	ldr	r3, [pc, #32]	; (8002708 <HAL_Init+0x40>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a07      	ldr	r2, [pc, #28]	; (8002708 <HAL_Init+0x40>)
 80026ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026f0:	2003      	movs	r0, #3
 80026f2:	f000 fe4f 	bl	8003394 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026f6:	2005      	movs	r0, #5
 80026f8:	f7ff faf0 	bl	8001cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026fc:	f7ff fab2 	bl	8001c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40023c00 	.word	0x40023c00

0800270c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <HAL_IncTick+0x20>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	461a      	mov	r2, r3
 8002716:	4b06      	ldr	r3, [pc, #24]	; (8002730 <HAL_IncTick+0x24>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4413      	add	r3, r2
 800271c:	4a04      	ldr	r2, [pc, #16]	; (8002730 <HAL_IncTick+0x24>)
 800271e:	6013      	str	r3, [r2, #0]
}
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	20000008 	.word	0x20000008
 8002730:	200008a0 	.word	0x200008a0

08002734 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return uwTick;
 8002738:	4b03      	ldr	r3, [pc, #12]	; (8002748 <HAL_GetTick+0x14>)
 800273a:	681b      	ldr	r3, [r3, #0]
}
 800273c:	4618      	mov	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	200008a0 	.word	0x200008a0

0800274c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002754:	2300      	movs	r3, #0
 8002756:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e16f      	b.n	8002a42 <HAL_ADC_Init+0x2f6>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a93      	ldr	r2, [pc, #588]	; (80029b4 <HAL_ADC_Init+0x268>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d004      	beq.n	8002776 <HAL_ADC_Init+0x2a>
 800276c:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8002770:	4891      	ldr	r0, [pc, #580]	; (80029b8 <HAL_ADC_Init+0x26c>)
 8002772:	f7ff f9c6 	bl	8001b02 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d013      	beq.n	80027a6 <HAL_ADC_Init+0x5a>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002786:	d00e      	beq.n	80027a6 <HAL_ADC_Init+0x5a>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002790:	d009      	beq.n	80027a6 <HAL_ADC_Init+0x5a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800279a:	d004      	beq.n	80027a6 <HAL_ADC_Init+0x5a>
 800279c:	f240 1143 	movw	r1, #323	; 0x143
 80027a0:	4885      	ldr	r0, [pc, #532]	; (80029b8 <HAL_ADC_Init+0x26c>)
 80027a2:	f7ff f9ae 	bl	8001b02 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d013      	beq.n	80027d6 <HAL_ADC_Init+0x8a>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027b6:	d00e      	beq.n	80027d6 <HAL_ADC_Init+0x8a>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027c0:	d009      	beq.n	80027d6 <HAL_ADC_Init+0x8a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027ca:	d004      	beq.n	80027d6 <HAL_ADC_Init+0x8a>
 80027cc:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80027d0:	4879      	ldr	r0, [pc, #484]	; (80029b8 <HAL_ADC_Init+0x26c>)
 80027d2:	f7ff f996 	bl	8001b02 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d008      	beq.n	80027f0 <HAL_ADC_Init+0xa4>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d004      	beq.n	80027f0 <HAL_ADC_Init+0xa4>
 80027e6:	f240 1145 	movw	r1, #325	; 0x145
 80027ea:	4873      	ldr	r0, [pc, #460]	; (80029b8 <HAL_ADC_Init+0x26c>)
 80027ec:	f7ff f989 	bl	8001b02 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	7e1b      	ldrb	r3, [r3, #24]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d008      	beq.n	800280a <HAL_ADC_Init+0xbe>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	7e1b      	ldrb	r3, [r3, #24]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d004      	beq.n	800280a <HAL_ADC_Init+0xbe>
 8002800:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8002804:	486c      	ldr	r0, [pc, #432]	; (80029b8 <HAL_ADC_Init+0x26c>)
 8002806:	f7ff f97c 	bl	8001b02 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280e:	2b00      	cmp	r3, #0
 8002810:	d054      	beq.n	80028bc <HAL_ADC_Init+0x170>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002816:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800281a:	d04f      	beq.n	80028bc <HAL_ADC_Init+0x170>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002820:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002824:	d04a      	beq.n	80028bc <HAL_ADC_Init+0x170>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800282e:	d045      	beq.n	80028bc <HAL_ADC_Init+0x170>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002834:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002838:	d040      	beq.n	80028bc <HAL_ADC_Init+0x170>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002842:	d03b      	beq.n	80028bc <HAL_ADC_Init+0x170>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002848:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800284c:	d036      	beq.n	80028bc <HAL_ADC_Init+0x170>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002852:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8002856:	d031      	beq.n	80028bc <HAL_ADC_Init+0x170>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002860:	d02c      	beq.n	80028bc <HAL_ADC_Init+0x170>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002866:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 800286a:	d027      	beq.n	80028bc <HAL_ADC_Init+0x170>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002870:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8002874:	d022      	beq.n	80028bc <HAL_ADC_Init+0x170>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287a:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 800287e:	d01d      	beq.n	80028bc <HAL_ADC_Init+0x170>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002884:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002888:	d018      	beq.n	80028bc <HAL_ADC_Init+0x170>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288e:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8002892:	d013      	beq.n	80028bc <HAL_ADC_Init+0x170>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002898:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 800289c:	d00e      	beq.n	80028bc <HAL_ADC_Init+0x170>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80028a6:	d009      	beq.n	80028bc <HAL_ADC_Init+0x170>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ac:	4a43      	ldr	r2, [pc, #268]	; (80029bc <HAL_ADC_Init+0x270>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d004      	beq.n	80028bc <HAL_ADC_Init+0x170>
 80028b2:	f240 1147 	movw	r1, #327	; 0x147
 80028b6:	4840      	ldr	r0, [pc, #256]	; (80029b8 <HAL_ADC_Init+0x26c>)
 80028b8:	f7ff f923 	bl	8001b02 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d009      	beq.n	80028d8 <HAL_ADC_Init+0x18c>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028cc:	d004      	beq.n	80028d8 <HAL_ADC_Init+0x18c>
 80028ce:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80028d2:	4839      	ldr	r0, [pc, #228]	; (80029b8 <HAL_ADC_Init+0x26c>)
 80028d4:	f7ff f915 	bl	8001b02 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_ADC_Init+0x19c>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	2b10      	cmp	r3, #16
 80028e6:	d904      	bls.n	80028f2 <HAL_ADC_Init+0x1a6>
 80028e8:	f240 1149 	movw	r1, #329	; 0x149
 80028ec:	4832      	ldr	r0, [pc, #200]	; (80029b8 <HAL_ADC_Init+0x26c>)
 80028ee:	f7ff f908 	bl	8001b02 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d009      	beq.n	8002910 <HAL_ADC_Init+0x1c4>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002902:	2b01      	cmp	r3, #1
 8002904:	d004      	beq.n	8002910 <HAL_ADC_Init+0x1c4>
 8002906:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800290a:	482b      	ldr	r0, [pc, #172]	; (80029b8 <HAL_ADC_Init+0x26c>)
 800290c:	f7ff f8f9 	bl	8001b02 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d00c      	beq.n	8002932 <HAL_ADC_Init+0x1e6>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d008      	beq.n	8002932 <HAL_ADC_Init+0x1e6>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	2b02      	cmp	r3, #2
 8002926:	d004      	beq.n	8002932 <HAL_ADC_Init+0x1e6>
 8002928:	f240 114b 	movw	r1, #331	; 0x14b
 800292c:	4822      	ldr	r0, [pc, #136]	; (80029b8 <HAL_ADC_Init+0x26c>)
 800292e:	f7ff f8e8 	bl	8001b02 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d009      	beq.n	8002950 <HAL_ADC_Init+0x204>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d004      	beq.n	8002950 <HAL_ADC_Init+0x204>
 8002946:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800294a:	481b      	ldr	r0, [pc, #108]	; (80029b8 <HAL_ADC_Init+0x26c>)
 800294c:	f7ff f8d9 	bl	8001b02 <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002954:	4a19      	ldr	r2, [pc, #100]	; (80029bc <HAL_ADC_Init+0x270>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d017      	beq.n	800298a <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295e:	2b00      	cmp	r3, #0
 8002960:	d013      	beq.n	800298a <HAL_ADC_Init+0x23e>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002966:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800296a:	d00e      	beq.n	800298a <HAL_ADC_Init+0x23e>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002970:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002974:	d009      	beq.n	800298a <HAL_ADC_Init+0x23e>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800297e:	d004      	beq.n	800298a <HAL_ADC_Init+0x23e>
 8002980:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8002984:	480c      	ldr	r0, [pc, #48]	; (80029b8 <HAL_ADC_Init+0x26c>)
 8002986:	f7ff f8bc 	bl	8001b02 <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	2b00      	cmp	r3, #0
 8002990:	d131      	bne.n	80029f6 <HAL_ADC_Init+0x2aa>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a0a      	ldr	r2, [pc, #40]	; (80029c0 <HAL_ADC_Init+0x274>)
 8002996:	649a      	str	r2, [r3, #72]	; 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a0a      	ldr	r2, [pc, #40]	; (80029c4 <HAL_ADC_Init+0x278>)
 800299c:	64da      	str	r2, [r3, #76]	; 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a09      	ldr	r2, [pc, #36]	; (80029c8 <HAL_ADC_Init+0x27c>)
 80029a2:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a09      	ldr	r2, [pc, #36]	; (80029cc <HAL_ADC_Init+0x280>)
 80029a8:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a08      	ldr	r2, [pc, #32]	; (80029d0 <HAL_ADC_Init+0x284>)
 80029ae:	659a      	str	r2, [r3, #88]	; 0x58
    if (hadc->MspInitCallback == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	e00f      	b.n	80029d4 <HAL_ADC_Init+0x288>
 80029b4:	40012000 	.word	0x40012000
 80029b8:	0800d07c 	.word	0x0800d07c
 80029bc:	0f000001 	.word	0x0f000001
 80029c0:	08002cd5 	.word	0x08002cd5
 80029c4:	08002ce9 	.word	0x08002ce9
 80029c8:	08002cfd 	.word	0x08002cfd
 80029cc:	08002d11 	.word	0x08002d11
 80029d0:	08003225 	.word	0x08003225
 80029d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d102      	bne.n	80029e0 <HAL_ADC_Init+0x294>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a1b      	ldr	r2, [pc, #108]	; (8002a4c <HAL_ADC_Init+0x300>)
 80029de:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	f003 0310 	and.w	r3, r3, #16
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d118      	bne.n	8002a34 <HAL_ADC_Init+0x2e8>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a0a:	f023 0302 	bic.w	r3, r3, #2
 8002a0e:	f043 0202 	orr.w	r2, r3, #2
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 fafa 	bl	8003010 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f023 0303 	bic.w	r3, r3, #3
 8002a2a:	f043 0201 	orr.w	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40
 8002a32:	e001      	b.n	8002a38 <HAL_ADC_Init+0x2ec>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	080011e9 	.word	0x080011e9

08002a50 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	7e1b      	ldrb	r3, [r3, #24]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_ADC_IRQHandler+0x3a>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	7e1b      	ldrb	r3, [r3, #24]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d004      	beq.n	8002a8a <HAL_ADC_IRQHandler+0x3a>
 8002a80:	f240 41b7 	movw	r1, #1207	; 0x4b7
 8002a84:	4892      	ldr	r0, [pc, #584]	; (8002cd0 <HAL_ADC_IRQHandler+0x280>)
 8002a86:	f7ff f83c 	bl	8001b02 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_ADC_IRQHandler+0x4a>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	2b10      	cmp	r3, #16
 8002a98:	d904      	bls.n	8002aa4 <HAL_ADC_IRQHandler+0x54>
 8002a9a:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
 8002a9e:	488c      	ldr	r0, [pc, #560]	; (8002cd0 <HAL_ADC_IRQHandler+0x280>)
 8002aa0:	f7ff f82f 	bl	8001b02 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d00c      	beq.n	8002ac6 <HAL_ADC_IRQHandler+0x76>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d008      	beq.n	8002ac6 <HAL_ADC_IRQHandler+0x76>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d004      	beq.n	8002ac6 <HAL_ADC_IRQHandler+0x76>
 8002abc:	f240 41b9 	movw	r1, #1209	; 0x4b9
 8002ac0:	4883      	ldr	r0, [pc, #524]	; (8002cd0 <HAL_ADC_IRQHandler+0x280>)
 8002ac2:	f7ff f81e 	bl	8001b02 <assert_failed>
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	f003 0320 	and.w	r3, r3, #32
 8002ad4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d04a      	beq.n	8002b72 <HAL_ADC_IRQHandler+0x122>
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d047      	beq.n	8002b72 <HAL_ADC_IRQHandler+0x122>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	f003 0310 	and.w	r3, r3, #16
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d105      	bne.n	8002afa <HAL_ADC_IRQHandler+0xaa>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d12b      	bne.n	8002b60 <HAL_ADC_IRQHandler+0x110>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d127      	bne.n	8002b60 <HAL_ADC_IRQHandler+0x110>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b16:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d006      	beq.n	8002b2c <HAL_ADC_IRQHandler+0xdc>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d119      	bne.n	8002b60 <HAL_ADC_IRQHandler+0x110>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0220 	bic.w	r2, r2, #32
 8002b3a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d105      	bne.n	8002b60 <HAL_ADC_IRQHandler+0x110>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	f043 0201 	orr.w	r2, r3, #1
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	4798      	blx	r3
#else
    HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0212 	mvn.w	r2, #18
 8002b70:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b80:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d058      	beq.n	8002c3a <HAL_ADC_IRQHandler+0x1ea>
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d055      	beq.n	8002c3a <HAL_ADC_IRQHandler+0x1ea>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f003 0310 	and.w	r3, r3, #16
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d105      	bne.n	8002ba6 <HAL_ADC_IRQHandler+0x156>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d139      	bne.n	8002c28 <HAL_ADC_IRQHandler+0x1d8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bba:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d006      	beq.n	8002bd0 <HAL_ADC_IRQHandler+0x180>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d12b      	bne.n	8002c28 <HAL_ADC_IRQHandler+0x1d8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d124      	bne.n	8002c28 <HAL_ADC_IRQHandler+0x1d8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d11d      	bne.n	8002c28 <HAL_ADC_IRQHandler+0x1d8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d119      	bne.n	8002c28 <HAL_ADC_IRQHandler+0x1d8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c02:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d105      	bne.n	8002c28 <HAL_ADC_IRQHandler+0x1d8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	f043 0201 	orr.w	r2, r3, #1
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f06f 020c 	mvn.w	r2, #12
 8002c38:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c48:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d018      	beq.n	8002c82 <HAL_ADC_IRQHandler+0x232>
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d015      	beq.n	8002c82 <HAL_ADC_IRQHandler+0x232>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d10e      	bne.n	8002c82 <HAL_ADC_IRQHandler+0x232>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f06f 0201 	mvn.w	r2, #1
 8002c80:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f003 0320 	and.w	r3, r3, #32
 8002c88:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c90:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d016      	beq.n	8002cc6 <HAL_ADC_IRQHandler+0x276>
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d013      	beq.n	8002cc6 <HAL_ADC_IRQHandler+0x276>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca2:	f043 0202 	orr.w	r2, r3, #2
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f06f 0220 	mvn.w	r2, #32
 8002cb2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	4798      	blx	r3
#else
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f06f 0220 	mvn.w	r2, #32
 8002cc4:	601a      	str	r2, [r3, #0]
  }
}
 8002cc6:	bf00      	nop
 8002cc8:	3718      	adds	r7, #24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	0800d07c 	.word	0x0800d07c

08002cd4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2b12      	cmp	r3, #18
 8002d38:	d909      	bls.n	8002d4e <HAL_ADC_ConfigChannel+0x2a>
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a72      	ldr	r2, [pc, #456]	; (8002f08 <HAL_ADC_ConfigChannel+0x1e4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d004      	beq.n	8002d4e <HAL_ADC_ConfigChannel+0x2a>
 8002d44:	f240 618b 	movw	r1, #1675	; 0x68b
 8002d48:	4870      	ldr	r0, [pc, #448]	; (8002f0c <HAL_ADC_ConfigChannel+0x1e8>)
 8002d4a:	f7fe feda 	bl	8001b02 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_ADC_ConfigChannel+0x3a>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b10      	cmp	r3, #16
 8002d5c:	d904      	bls.n	8002d68 <HAL_ADC_ConfigChannel+0x44>
 8002d5e:	f240 618c 	movw	r1, #1676	; 0x68c
 8002d62:	486a      	ldr	r0, [pc, #424]	; (8002f0c <HAL_ADC_ConfigChannel+0x1e8>)
 8002d64:	f7fe fecd 	bl	8001b02 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d020      	beq.n	8002db2 <HAL_ADC_ConfigChannel+0x8e>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d01c      	beq.n	8002db2 <HAL_ADC_ConfigChannel+0x8e>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d018      	beq.n	8002db2 <HAL_ADC_ConfigChannel+0x8e>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	d014      	beq.n	8002db2 <HAL_ADC_ConfigChannel+0x8e>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d010      	beq.n	8002db2 <HAL_ADC_ConfigChannel+0x8e>
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	2b05      	cmp	r3, #5
 8002d96:	d00c      	beq.n	8002db2 <HAL_ADC_ConfigChannel+0x8e>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2b06      	cmp	r3, #6
 8002d9e:	d008      	beq.n	8002db2 <HAL_ADC_ConfigChannel+0x8e>
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	2b07      	cmp	r3, #7
 8002da6:	d004      	beq.n	8002db2 <HAL_ADC_ConfigChannel+0x8e>
 8002da8:	f240 618d 	movw	r1, #1677	; 0x68d
 8002dac:	4857      	ldr	r0, [pc, #348]	; (8002f0c <HAL_ADC_ConfigChannel+0x1e8>)
 8002dae:	f7fe fea8 	bl	8001b02 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x9c>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e118      	b.n	8002ff2 <HAL_ADC_ConfigChannel+0x2ce>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2b09      	cmp	r3, #9
 8002dce:	d925      	bls.n	8002e1c <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68d9      	ldr	r1, [r3, #12]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	461a      	mov	r2, r3
 8002dde:	4613      	mov	r3, r2
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	4413      	add	r3, r2
 8002de4:	3b1e      	subs	r3, #30
 8002de6:	2207      	movs	r2, #7
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43da      	mvns	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	400a      	ands	r2, r1
 8002df4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68d9      	ldr	r1, [r3, #12]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	4618      	mov	r0, r3
 8002e08:	4603      	mov	r3, r0
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	4403      	add	r3, r0
 8002e0e:	3b1e      	subs	r3, #30
 8002e10:	409a      	lsls	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	60da      	str	r2, [r3, #12]
 8002e1a:	e022      	b.n	8002e62 <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6919      	ldr	r1, [r3, #16]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	4413      	add	r3, r2
 8002e30:	2207      	movs	r2, #7
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43da      	mvns	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	400a      	ands	r2, r1
 8002e3e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6919      	ldr	r1, [r3, #16]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	4618      	mov	r0, r3
 8002e52:	4603      	mov	r3, r0
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	4403      	add	r3, r0
 8002e58:	409a      	lsls	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b06      	cmp	r3, #6
 8002e68:	d824      	bhi.n	8002eb4 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	3b05      	subs	r3, #5
 8002e7c:	221f      	movs	r2, #31
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	43da      	mvns	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	400a      	ands	r2, r1
 8002e8a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	4618      	mov	r0, r3
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	3b05      	subs	r3, #5
 8002ea6:	fa00 f203 	lsl.w	r2, r0, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	635a      	str	r2, [r3, #52]	; 0x34
 8002eb2:	e051      	b.n	8002f58 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2b0c      	cmp	r3, #12
 8002eba:	d829      	bhi.n	8002f10 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	3b23      	subs	r3, #35	; 0x23
 8002ece:	221f      	movs	r2, #31
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	43da      	mvns	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	400a      	ands	r2, r1
 8002edc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	4618      	mov	r0, r3
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	3b23      	subs	r3, #35	; 0x23
 8002ef8:	fa00 f203 	lsl.w	r2, r0, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	631a      	str	r2, [r3, #48]	; 0x30
 8002f04:	e028      	b.n	8002f58 <HAL_ADC_ConfigChannel+0x234>
 8002f06:	bf00      	nop
 8002f08:	10000012 	.word	0x10000012
 8002f0c:	0800d07c 	.word	0x0800d07c
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	3b41      	subs	r3, #65	; 0x41
 8002f22:	221f      	movs	r2, #31
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	43da      	mvns	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	400a      	ands	r2, r1
 8002f30:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	4618      	mov	r0, r3
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	3b41      	subs	r3, #65	; 0x41
 8002f4c:	fa00 f203 	lsl.w	r2, r0, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f58:	4b28      	ldr	r3, [pc, #160]	; (8002ffc <HAL_ADC_ConfigChannel+0x2d8>)
 8002f5a:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a27      	ldr	r2, [pc, #156]	; (8003000 <HAL_ADC_ConfigChannel+0x2dc>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d10f      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x262>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b12      	cmp	r3, #18
 8002f6c:	d10b      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a1d      	ldr	r2, [pc, #116]	; (8003000 <HAL_ADC_ConfigChannel+0x2dc>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d12b      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0x2c4>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a1b      	ldr	r2, [pc, #108]	; (8003004 <HAL_ADC_ConfigChannel+0x2e0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d003      	beq.n	8002fa2 <HAL_ADC_ConfigChannel+0x27e>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b11      	cmp	r3, #17
 8002fa0:	d122      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a11      	ldr	r2, [pc, #68]	; (8003004 <HAL_ADC_ConfigChannel+0x2e0>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d111      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fc4:	4b10      	ldr	r3, [pc, #64]	; (8003008 <HAL_ADC_ConfigChannel+0x2e4>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a10      	ldr	r2, [pc, #64]	; (800300c <HAL_ADC_ConfigChannel+0x2e8>)
 8002fca:	fba2 2303 	umull	r2, r3, r2, r3
 8002fce:	0c9a      	lsrs	r2, r3, #18
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fda:	e002      	b.n	8002fe2 <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1f9      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40012300 	.word	0x40012300
 8003000:	40012000 	.word	0x40012000
 8003004:	10000012 	.word	0x10000012
 8003008:	20000000 	.word	0x20000000
 800300c:	431bde83 	.word	0x431bde83

08003010 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003018:	4b7f      	ldr	r3, [pc, #508]	; (8003218 <ADC_Init+0x208>)
 800301a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	431a      	orrs	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003044:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6859      	ldr	r1, [r3, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	021a      	lsls	r2, r3, #8
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003068:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6859      	ldr	r1, [r3, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800308a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6899      	ldr	r1, [r3, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a2:	4a5e      	ldr	r2, [pc, #376]	; (800321c <ADC_Init+0x20c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d022      	beq.n	80030ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6899      	ldr	r1, [r3, #8]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6899      	ldr	r1, [r3, #8]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	609a      	str	r2, [r3, #8]
 80030ec:	e00f      	b.n	800310e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800310c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0202 	bic.w	r2, r2, #2
 800311c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6899      	ldr	r1, [r3, #8]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	7e1b      	ldrb	r3, [r3, #24]
 8003128:	005a      	lsls	r2, r3, #1
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d028      	beq.n	800318e <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <ADC_Init+0x13c>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	2b08      	cmp	r3, #8
 800314a:	d904      	bls.n	8003156 <ADC_Init+0x146>
 800314c:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8003150:	4833      	ldr	r0, [pc, #204]	; (8003220 <ADC_Init+0x210>)
 8003152:	f7fe fcd6 	bl	8001b02 <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003164:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003174:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6859      	ldr	r1, [r3, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	3b01      	subs	r3, #1
 8003182:	035a      	lsls	r2, r3, #13
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	605a      	str	r2, [r3, #4]
 800318c:	e007      	b.n	800319e <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800319c:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80031ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	3b01      	subs	r3, #1
 80031ba:	051a      	lsls	r2, r3, #20
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80031d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6899      	ldr	r1, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031e0:	025a      	lsls	r2, r3, #9
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6899      	ldr	r1, [r3, #8]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	029a      	lsls	r2, r3, #10
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	609a      	str	r2, [r3, #8]
}
 800320e:	bf00      	nop
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40012300 	.word	0x40012300
 800321c:	0f000001 	.word	0x0f000001
 8003220:	0800d07c 	.word	0x0800d07c

08003224 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003248:	4b0c      	ldr	r3, [pc, #48]	; (800327c <__NVIC_SetPriorityGrouping+0x44>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003254:	4013      	ands	r3, r2
 8003256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003260:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800326a:	4a04      	ldr	r2, [pc, #16]	; (800327c <__NVIC_SetPriorityGrouping+0x44>)
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	60d3      	str	r3, [r2, #12]
}
 8003270:	bf00      	nop
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	e000ed00 	.word	0xe000ed00

08003280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003284:	4b04      	ldr	r3, [pc, #16]	; (8003298 <__NVIC_GetPriorityGrouping+0x18>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	0a1b      	lsrs	r3, r3, #8
 800328a:	f003 0307 	and.w	r3, r3, #7
}
 800328e:	4618      	mov	r0, r3
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	e000ed00 	.word	0xe000ed00

0800329c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	db0b      	blt.n	80032c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ae:	79fb      	ldrb	r3, [r7, #7]
 80032b0:	f003 021f 	and.w	r2, r3, #31
 80032b4:	4907      	ldr	r1, [pc, #28]	; (80032d4 <__NVIC_EnableIRQ+0x38>)
 80032b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	2001      	movs	r0, #1
 80032be:	fa00 f202 	lsl.w	r2, r0, r2
 80032c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	e000e100 	.word	0xe000e100

080032d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	4603      	mov	r3, r0
 80032e0:	6039      	str	r1, [r7, #0]
 80032e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	db0a      	blt.n	8003302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	490c      	ldr	r1, [pc, #48]	; (8003324 <__NVIC_SetPriority+0x4c>)
 80032f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f6:	0112      	lsls	r2, r2, #4
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	440b      	add	r3, r1
 80032fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003300:	e00a      	b.n	8003318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	b2da      	uxtb	r2, r3
 8003306:	4908      	ldr	r1, [pc, #32]	; (8003328 <__NVIC_SetPriority+0x50>)
 8003308:	79fb      	ldrb	r3, [r7, #7]
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	3b04      	subs	r3, #4
 8003310:	0112      	lsls	r2, r2, #4
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	440b      	add	r3, r1
 8003316:	761a      	strb	r2, [r3, #24]
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	e000e100 	.word	0xe000e100
 8003328:	e000ed00 	.word	0xe000ed00

0800332c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800332c:	b480      	push	{r7}
 800332e:	b089      	sub	sp, #36	; 0x24
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	f1c3 0307 	rsb	r3, r3, #7
 8003346:	2b04      	cmp	r3, #4
 8003348:	bf28      	it	cs
 800334a:	2304      	movcs	r3, #4
 800334c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	3304      	adds	r3, #4
 8003352:	2b06      	cmp	r3, #6
 8003354:	d902      	bls.n	800335c <NVIC_EncodePriority+0x30>
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	3b03      	subs	r3, #3
 800335a:	e000      	b.n	800335e <NVIC_EncodePriority+0x32>
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003360:	f04f 32ff 	mov.w	r2, #4294967295
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43da      	mvns	r2, r3
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	401a      	ands	r2, r3
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003374:	f04f 31ff 	mov.w	r1, #4294967295
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	fa01 f303 	lsl.w	r3, r1, r3
 800337e:	43d9      	mvns	r1, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003384:	4313      	orrs	r3, r2
         );
}
 8003386:	4618      	mov	r0, r3
 8003388:	3724      	adds	r7, #36	; 0x24
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
	...

08003394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b07      	cmp	r3, #7
 80033a0:	d00f      	beq.n	80033c2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b06      	cmp	r3, #6
 80033a6:	d00c      	beq.n	80033c2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b05      	cmp	r3, #5
 80033ac:	d009      	beq.n	80033c2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d006      	beq.n	80033c2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b03      	cmp	r3, #3
 80033b8:	d003      	beq.n	80033c2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80033ba:	2190      	movs	r1, #144	; 0x90
 80033bc:	4804      	ldr	r0, [pc, #16]	; (80033d0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80033be:	f7fe fba0 	bl	8001b02 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff ff38 	bl	8003238 <__NVIC_SetPriorityGrouping>
}
 80033c8:	bf00      	nop
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	0800d0f0 	.word	0x0800d0f0

080033d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
 80033e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b0f      	cmp	r3, #15
 80033ea:	d903      	bls.n	80033f4 <HAL_NVIC_SetPriority+0x20>
 80033ec:	21a8      	movs	r1, #168	; 0xa8
 80033ee:	480e      	ldr	r0, [pc, #56]	; (8003428 <HAL_NVIC_SetPriority+0x54>)
 80033f0:	f7fe fb87 	bl	8001b02 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	2b0f      	cmp	r3, #15
 80033f8:	d903      	bls.n	8003402 <HAL_NVIC_SetPriority+0x2e>
 80033fa:	21a9      	movs	r1, #169	; 0xa9
 80033fc:	480a      	ldr	r0, [pc, #40]	; (8003428 <HAL_NVIC_SetPriority+0x54>)
 80033fe:	f7fe fb80 	bl	8001b02 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003402:	f7ff ff3d 	bl	8003280 <__NVIC_GetPriorityGrouping>
 8003406:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	68b9      	ldr	r1, [r7, #8]
 800340c:	6978      	ldr	r0, [r7, #20]
 800340e:	f7ff ff8d 	bl	800332c <NVIC_EncodePriority>
 8003412:	4602      	mov	r2, r0
 8003414:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003418:	4611      	mov	r1, r2
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff ff5c 	bl	80032d8 <__NVIC_SetPriority>
}
 8003420:	bf00      	nop
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	0800d0f0 	.word	0x0800d0f0

0800342c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343a:	2b00      	cmp	r3, #0
 800343c:	da03      	bge.n	8003446 <HAL_NVIC_EnableIRQ+0x1a>
 800343e:	21bc      	movs	r1, #188	; 0xbc
 8003440:	4805      	ldr	r0, [pc, #20]	; (8003458 <HAL_NVIC_EnableIRQ+0x2c>)
 8003442:	f7fe fb5e 	bl	8001b02 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff ff26 	bl	800329c <__NVIC_EnableIRQ>
}
 8003450:	bf00      	nop
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	0800d0f0 	.word	0x0800d0f0

0800345c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e017      	b.n	800349e <HAL_CRC_Init+0x42>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a0d      	ldr	r2, [pc, #52]	; (80034a8 <HAL_CRC_Init+0x4c>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d003      	beq.n	8003480 <HAL_CRC_Init+0x24>
 8003478:	2168      	movs	r1, #104	; 0x68
 800347a:	480c      	ldr	r0, [pc, #48]	; (80034ac <HAL_CRC_Init+0x50>)
 800347c:	f7fe fb41 	bl	8001b02 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	795b      	ldrb	r3, [r3, #5]
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d105      	bne.n	8003496 <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7fd ff3b 	bl	800130c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40023000 	.word	0x40023000
 80034ac:	0800d168 	.word	0x0800d168

080034b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034bc:	f7ff f93a 	bl	8002734 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e203      	b.n	80038d4 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a8b      	ldr	r2, [pc, #556]	; (8003700 <HAL_DMA_Init+0x250>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d04e      	beq.n	8003574 <HAL_DMA_Init+0xc4>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a8a      	ldr	r2, [pc, #552]	; (8003704 <HAL_DMA_Init+0x254>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d049      	beq.n	8003574 <HAL_DMA_Init+0xc4>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a88      	ldr	r2, [pc, #544]	; (8003708 <HAL_DMA_Init+0x258>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d044      	beq.n	8003574 <HAL_DMA_Init+0xc4>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a87      	ldr	r2, [pc, #540]	; (800370c <HAL_DMA_Init+0x25c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d03f      	beq.n	8003574 <HAL_DMA_Init+0xc4>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a85      	ldr	r2, [pc, #532]	; (8003710 <HAL_DMA_Init+0x260>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d03a      	beq.n	8003574 <HAL_DMA_Init+0xc4>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a84      	ldr	r2, [pc, #528]	; (8003714 <HAL_DMA_Init+0x264>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d035      	beq.n	8003574 <HAL_DMA_Init+0xc4>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a82      	ldr	r2, [pc, #520]	; (8003718 <HAL_DMA_Init+0x268>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d030      	beq.n	8003574 <HAL_DMA_Init+0xc4>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a81      	ldr	r2, [pc, #516]	; (800371c <HAL_DMA_Init+0x26c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d02b      	beq.n	8003574 <HAL_DMA_Init+0xc4>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a7f      	ldr	r2, [pc, #508]	; (8003720 <HAL_DMA_Init+0x270>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d026      	beq.n	8003574 <HAL_DMA_Init+0xc4>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a7e      	ldr	r2, [pc, #504]	; (8003724 <HAL_DMA_Init+0x274>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d021      	beq.n	8003574 <HAL_DMA_Init+0xc4>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a7c      	ldr	r2, [pc, #496]	; (8003728 <HAL_DMA_Init+0x278>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d01c      	beq.n	8003574 <HAL_DMA_Init+0xc4>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a7b      	ldr	r2, [pc, #492]	; (800372c <HAL_DMA_Init+0x27c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d017      	beq.n	8003574 <HAL_DMA_Init+0xc4>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a79      	ldr	r2, [pc, #484]	; (8003730 <HAL_DMA_Init+0x280>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d012      	beq.n	8003574 <HAL_DMA_Init+0xc4>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a78      	ldr	r2, [pc, #480]	; (8003734 <HAL_DMA_Init+0x284>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d00d      	beq.n	8003574 <HAL_DMA_Init+0xc4>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a76      	ldr	r2, [pc, #472]	; (8003738 <HAL_DMA_Init+0x288>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d008      	beq.n	8003574 <HAL_DMA_Init+0xc4>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a75      	ldr	r2, [pc, #468]	; (800373c <HAL_DMA_Init+0x28c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d003      	beq.n	8003574 <HAL_DMA_Init+0xc4>
 800356c:	21b7      	movs	r1, #183	; 0xb7
 800356e:	4874      	ldr	r0, [pc, #464]	; (8003740 <HAL_DMA_Init+0x290>)
 8003570:	f7fe fac7 	bl	8001b02 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d026      	beq.n	80035ca <HAL_DMA_Init+0x11a>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003584:	d021      	beq.n	80035ca <HAL_DMA_Init+0x11a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800358e:	d01c      	beq.n	80035ca <HAL_DMA_Init+0x11a>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003598:	d017      	beq.n	80035ca <HAL_DMA_Init+0x11a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035a2:	d012      	beq.n	80035ca <HAL_DMA_Init+0x11a>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80035ac:	d00d      	beq.n	80035ca <HAL_DMA_Init+0x11a>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80035b6:	d008      	beq.n	80035ca <HAL_DMA_Init+0x11a>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80035c0:	d003      	beq.n	80035ca <HAL_DMA_Init+0x11a>
 80035c2:	21b8      	movs	r1, #184	; 0xb8
 80035c4:	485e      	ldr	r0, [pc, #376]	; (8003740 <HAL_DMA_Init+0x290>)
 80035c6:	f7fe fa9c 	bl	8001b02 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00b      	beq.n	80035ea <HAL_DMA_Init+0x13a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	2b40      	cmp	r3, #64	; 0x40
 80035d8:	d007      	beq.n	80035ea <HAL_DMA_Init+0x13a>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	2b80      	cmp	r3, #128	; 0x80
 80035e0:	d003      	beq.n	80035ea <HAL_DMA_Init+0x13a>
 80035e2:	21b9      	movs	r1, #185	; 0xb9
 80035e4:	4856      	ldr	r0, [pc, #344]	; (8003740 <HAL_DMA_Init+0x290>)
 80035e6:	f7fe fa8c 	bl	8001b02 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035f2:	d007      	beq.n	8003604 <HAL_DMA_Init+0x154>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <HAL_DMA_Init+0x154>
 80035fc:	21ba      	movs	r1, #186	; 0xba
 80035fe:	4850      	ldr	r0, [pc, #320]	; (8003740 <HAL_DMA_Init+0x290>)
 8003600:	f7fe fa7f 	bl	8001b02 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800360c:	d007      	beq.n	800361e <HAL_DMA_Init+0x16e>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_DMA_Init+0x16e>
 8003616:	21bb      	movs	r1, #187	; 0xbb
 8003618:	4849      	ldr	r0, [pc, #292]	; (8003740 <HAL_DMA_Init+0x290>)
 800361a:	f7fe fa72 	bl	8001b02 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00d      	beq.n	8003642 <HAL_DMA_Init+0x192>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800362e:	d008      	beq.n	8003642 <HAL_DMA_Init+0x192>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003638:	d003      	beq.n	8003642 <HAL_DMA_Init+0x192>
 800363a:	21bc      	movs	r1, #188	; 0xbc
 800363c:	4840      	ldr	r0, [pc, #256]	; (8003740 <HAL_DMA_Init+0x290>)
 800363e:	f7fe fa60 	bl	8001b02 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00d      	beq.n	8003666 <HAL_DMA_Init+0x1b6>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003652:	d008      	beq.n	8003666 <HAL_DMA_Init+0x1b6>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800365c:	d003      	beq.n	8003666 <HAL_DMA_Init+0x1b6>
 800365e:	21bd      	movs	r1, #189	; 0xbd
 8003660:	4837      	ldr	r0, [pc, #220]	; (8003740 <HAL_DMA_Init+0x290>)
 8003662:	f7fe fa4e 	bl	8001b02 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00c      	beq.n	8003688 <HAL_DMA_Init+0x1d8>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003676:	d007      	beq.n	8003688 <HAL_DMA_Init+0x1d8>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	2b20      	cmp	r3, #32
 800367e:	d003      	beq.n	8003688 <HAL_DMA_Init+0x1d8>
 8003680:	21be      	movs	r1, #190	; 0xbe
 8003682:	482f      	ldr	r0, [pc, #188]	; (8003740 <HAL_DMA_Init+0x290>)
 8003684:	f7fe fa3d 	bl	8001b02 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d012      	beq.n	80036b6 <HAL_DMA_Init+0x206>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003698:	d00d      	beq.n	80036b6 <HAL_DMA_Init+0x206>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036a2:	d008      	beq.n	80036b6 <HAL_DMA_Init+0x206>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80036ac:	d003      	beq.n	80036b6 <HAL_DMA_Init+0x206>
 80036ae:	21bf      	movs	r1, #191	; 0xbf
 80036b0:	4823      	ldr	r0, [pc, #140]	; (8003740 <HAL_DMA_Init+0x290>)
 80036b2:	f7fe fa26 	bl	8001b02 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d007      	beq.n	80036ce <HAL_DMA_Init+0x21e>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d003      	beq.n	80036ce <HAL_DMA_Init+0x21e>
 80036c6:	21c0      	movs	r1, #192	; 0xc0
 80036c8:	481d      	ldr	r0, [pc, #116]	; (8003740 <HAL_DMA_Init+0x290>)
 80036ca:	f7fe fa1a 	bl	8001b02 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d064      	beq.n	80037a0 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d032      	beq.n	8003744 <HAL_DMA_Init+0x294>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d02e      	beq.n	8003744 <HAL_DMA_Init+0x294>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d02a      	beq.n	8003744 <HAL_DMA_Init+0x294>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d026      	beq.n	8003744 <HAL_DMA_Init+0x294>
 80036f6:	21c5      	movs	r1, #197	; 0xc5
 80036f8:	4811      	ldr	r0, [pc, #68]	; (8003740 <HAL_DMA_Init+0x290>)
 80036fa:	f7fe fa02 	bl	8001b02 <assert_failed>
 80036fe:	e021      	b.n	8003744 <HAL_DMA_Init+0x294>
 8003700:	40026010 	.word	0x40026010
 8003704:	40026028 	.word	0x40026028
 8003708:	40026040 	.word	0x40026040
 800370c:	40026058 	.word	0x40026058
 8003710:	40026070 	.word	0x40026070
 8003714:	40026088 	.word	0x40026088
 8003718:	400260a0 	.word	0x400260a0
 800371c:	400260b8 	.word	0x400260b8
 8003720:	40026410 	.word	0x40026410
 8003724:	40026428 	.word	0x40026428
 8003728:	40026440 	.word	0x40026440
 800372c:	40026458 	.word	0x40026458
 8003730:	40026470 	.word	0x40026470
 8003734:	40026488 	.word	0x40026488
 8003738:	400264a0 	.word	0x400264a0
 800373c:	400264b8 	.word	0x400264b8
 8003740:	0800d1dc 	.word	0x0800d1dc
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	2b00      	cmp	r3, #0
 800374a:	d012      	beq.n	8003772 <HAL_DMA_Init+0x2c2>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003750:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003754:	d00d      	beq.n	8003772 <HAL_DMA_Init+0x2c2>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800375e:	d008      	beq.n	8003772 <HAL_DMA_Init+0x2c2>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003768:	d003      	beq.n	8003772 <HAL_DMA_Init+0x2c2>
 800376a:	21c6      	movs	r1, #198	; 0xc6
 800376c:	485b      	ldr	r0, [pc, #364]	; (80038dc <HAL_DMA_Init+0x42c>)
 800376e:	f7fe f9c8 	bl	8001b02 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	2b00      	cmp	r3, #0
 8003778:	d012      	beq.n	80037a0 <HAL_DMA_Init+0x2f0>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003782:	d00d      	beq.n	80037a0 <HAL_DMA_Init+0x2f0>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800378c:	d008      	beq.n	80037a0 <HAL_DMA_Init+0x2f0>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003796:	d003      	beq.n	80037a0 <HAL_DMA_Init+0x2f0>
 8003798:	21c7      	movs	r1, #199	; 0xc7
 800379a:	4850      	ldr	r0, [pc, #320]	; (80038dc <HAL_DMA_Init+0x42c>)
 800379c:	f7fe f9b1 	bl	8001b02 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2202      	movs	r2, #2
 80037a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 0201 	bic.w	r2, r2, #1
 80037be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037c0:	e00f      	b.n	80037e2 <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037c2:	f7fe ffb7 	bl	8002734 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b05      	cmp	r3, #5
 80037ce:	d908      	bls.n	80037e2 <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2220      	movs	r2, #32
 80037d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2203      	movs	r2, #3
 80037da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e078      	b.n	80038d4 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1e8      	bne.n	80037c2 <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	4b39      	ldr	r3, [pc, #228]	; (80038e0 <HAL_DMA_Init+0x430>)
 80037fc:	4013      	ands	r3, r2
 80037fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800380e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800381a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003826:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	4313      	orrs	r3, r2
 8003832:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	2b04      	cmp	r3, #4
 800383a:	d107      	bne.n	800384c <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	4313      	orrs	r3, r2
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	4313      	orrs	r3, r2
 800384a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	f023 0307 	bic.w	r3, r3, #7
 8003862:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	4313      	orrs	r3, r2
 800386c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	2b04      	cmp	r3, #4
 8003874:	d117      	bne.n	80038a6 <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	4313      	orrs	r3, r2
 800387e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00e      	beq.n	80038a6 <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 fa8b 	bl	8003da4 <DMA_CheckFifoParam>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2240      	movs	r2, #64	; 0x40
 8003898:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80038a2:	2301      	movs	r3, #1
 80038a4:	e016      	b.n	80038d4 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 fa42 	bl	8003d38 <DMA_CalcBaseAndBitshift>
 80038b4:	4603      	mov	r3, r0
 80038b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038bc:	223f      	movs	r2, #63	; 0x3f
 80038be:	409a      	lsls	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3718      	adds	r7, #24
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	0800d1dc 	.word	0x0800d1dc
 80038e0:	f010803f 	.word	0xf010803f

080038e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80038f2:	f7fe ff1f 	bl	8002734 <HAL_GetTick>
 80038f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d008      	beq.n	8003916 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2280      	movs	r2, #128	; 0x80
 8003908:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e052      	b.n	80039bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0216 	bic.w	r2, r2, #22
 8003924:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	695a      	ldr	r2, [r3, #20]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003934:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	2b00      	cmp	r3, #0
 800393c:	d103      	bne.n	8003946 <HAL_DMA_Abort+0x62>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003942:	2b00      	cmp	r3, #0
 8003944:	d007      	beq.n	8003956 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0208 	bic.w	r2, r2, #8
 8003954:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0201 	bic.w	r2, r2, #1
 8003964:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003966:	e013      	b.n	8003990 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003968:	f7fe fee4 	bl	8002734 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b05      	cmp	r3, #5
 8003974:	d90c      	bls.n	8003990 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2220      	movs	r2, #32
 800397a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2203      	movs	r2, #3
 8003980:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e015      	b.n	80039bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1e4      	bne.n	8003968 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a2:	223f      	movs	r2, #63	; 0x3f
 80039a4:	409a      	lsls	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d004      	beq.n	80039e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2280      	movs	r2, #128	; 0x80
 80039dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e00c      	b.n	80039fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2205      	movs	r2, #5
 80039e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0201 	bic.w	r2, r2, #1
 80039f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a14:	4b8e      	ldr	r3, [pc, #568]	; (8003c50 <HAL_DMA_IRQHandler+0x248>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a8e      	ldr	r2, [pc, #568]	; (8003c54 <HAL_DMA_IRQHandler+0x24c>)
 8003a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1e:	0a9b      	lsrs	r3, r3, #10
 8003a20:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a26:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a32:	2208      	movs	r2, #8
 8003a34:	409a      	lsls	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d01a      	beq.n	8003a74 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d013      	beq.n	8003a74 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0204 	bic.w	r2, r2, #4
 8003a5a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a60:	2208      	movs	r2, #8
 8003a62:	409a      	lsls	r2, r3
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6c:	f043 0201 	orr.w	r2, r3, #1
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a78:	2201      	movs	r2, #1
 8003a7a:	409a      	lsls	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d012      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00b      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a96:	2201      	movs	r2, #1
 8003a98:	409a      	lsls	r2, r3
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa2:	f043 0202 	orr.w	r2, r3, #2
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aae:	2204      	movs	r2, #4
 8003ab0:	409a      	lsls	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d012      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00b      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003acc:	2204      	movs	r2, #4
 8003ace:	409a      	lsls	r2, r3
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad8:	f043 0204 	orr.w	r2, r3, #4
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae4:	2210      	movs	r2, #16
 8003ae6:	409a      	lsls	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4013      	ands	r3, r2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d043      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d03c      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b02:	2210      	movs	r2, #16
 8003b04:	409a      	lsls	r2, r3
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d018      	beq.n	8003b4a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d108      	bne.n	8003b38 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d024      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	4798      	blx	r3
 8003b36:	e01f      	b.n	8003b78 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d01b      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	4798      	blx	r3
 8003b48:	e016      	b.n	8003b78 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d107      	bne.n	8003b68 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 0208 	bic.w	r2, r2, #8
 8003b66:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	409a      	lsls	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4013      	ands	r3, r2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 808f 	beq.w	8003ca8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0310 	and.w	r3, r3, #16
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 8087 	beq.w	8003ca8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	409a      	lsls	r2, r3
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b05      	cmp	r3, #5
 8003bb0:	d136      	bne.n	8003c20 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0216 	bic.w	r2, r2, #22
 8003bc0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695a      	ldr	r2, [r3, #20]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bd0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d103      	bne.n	8003be2 <HAL_DMA_IRQHandler+0x1da>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d007      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0208 	bic.w	r2, r2, #8
 8003bf0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf6:	223f      	movs	r2, #63	; 0x3f
 8003bf8:	409a      	lsls	r2, r3
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d07e      	beq.n	8003d14 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	4798      	blx	r3
        }
        return;
 8003c1e:	e079      	b.n	8003d14 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d01d      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10d      	bne.n	8003c58 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d031      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	4798      	blx	r3
 8003c4c:	e02c      	b.n	8003ca8 <HAL_DMA_IRQHandler+0x2a0>
 8003c4e:	bf00      	nop
 8003c50:	20000000 	.word	0x20000000
 8003c54:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d023      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	4798      	blx	r3
 8003c68:	e01e      	b.n	8003ca8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10f      	bne.n	8003c98 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0210 	bic.w	r2, r2, #16
 8003c86:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d032      	beq.n	8003d16 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d022      	beq.n	8003d02 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2205      	movs	r2, #5
 8003cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 0201 	bic.w	r2, r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	60bb      	str	r3, [r7, #8]
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d307      	bcc.n	8003cf0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f2      	bne.n	8003cd4 <HAL_DMA_IRQHandler+0x2cc>
 8003cee:	e000      	b.n	8003cf2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003cf0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d005      	beq.n	8003d16 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	4798      	blx	r3
 8003d12:	e000      	b.n	8003d16 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003d14:	bf00      	nop
    }
  }
}
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d2a:	b2db      	uxtb	r3, r3
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	3b10      	subs	r3, #16
 8003d48:	4a14      	ldr	r2, [pc, #80]	; (8003d9c <DMA_CalcBaseAndBitshift+0x64>)
 8003d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4e:	091b      	lsrs	r3, r3, #4
 8003d50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d52:	4a13      	ldr	r2, [pc, #76]	; (8003da0 <DMA_CalcBaseAndBitshift+0x68>)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4413      	add	r3, r2
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2b03      	cmp	r3, #3
 8003d64:	d909      	bls.n	8003d7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d6e:	f023 0303 	bic.w	r3, r3, #3
 8003d72:	1d1a      	adds	r2, r3, #4
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	659a      	str	r2, [r3, #88]	; 0x58
 8003d78:	e007      	b.n	8003d8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d82:	f023 0303 	bic.w	r3, r3, #3
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	aaaaaaab 	.word	0xaaaaaaab
 8003da0:	0800d6f8 	.word	0x0800d6f8

08003da4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dac:	2300      	movs	r3, #0
 8003dae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d11f      	bne.n	8003dfe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2b03      	cmp	r3, #3
 8003dc2:	d856      	bhi.n	8003e72 <DMA_CheckFifoParam+0xce>
 8003dc4:	a201      	add	r2, pc, #4	; (adr r2, 8003dcc <DMA_CheckFifoParam+0x28>)
 8003dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dca:	bf00      	nop
 8003dcc:	08003ddd 	.word	0x08003ddd
 8003dd0:	08003def 	.word	0x08003def
 8003dd4:	08003ddd 	.word	0x08003ddd
 8003dd8:	08003e73 	.word	0x08003e73
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d046      	beq.n	8003e76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dec:	e043      	b.n	8003e76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003df6:	d140      	bne.n	8003e7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dfc:	e03d      	b.n	8003e7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e06:	d121      	bne.n	8003e4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b03      	cmp	r3, #3
 8003e0c:	d837      	bhi.n	8003e7e <DMA_CheckFifoParam+0xda>
 8003e0e:	a201      	add	r2, pc, #4	; (adr r2, 8003e14 <DMA_CheckFifoParam+0x70>)
 8003e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e14:	08003e25 	.word	0x08003e25
 8003e18:	08003e2b 	.word	0x08003e2b
 8003e1c:	08003e25 	.word	0x08003e25
 8003e20:	08003e3d 	.word	0x08003e3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	73fb      	strb	r3, [r7, #15]
      break;
 8003e28:	e030      	b.n	8003e8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d025      	beq.n	8003e82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e3a:	e022      	b.n	8003e82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e44:	d11f      	bne.n	8003e86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e4a:	e01c      	b.n	8003e86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d903      	bls.n	8003e5a <DMA_CheckFifoParam+0xb6>
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b03      	cmp	r3, #3
 8003e56:	d003      	beq.n	8003e60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e58:	e018      	b.n	8003e8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	73fb      	strb	r3, [r7, #15]
      break;
 8003e5e:	e015      	b.n	8003e8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00e      	beq.n	8003e8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e70:	e00b      	b.n	8003e8a <DMA_CheckFifoParam+0xe6>
      break;
 8003e72:	bf00      	nop
 8003e74:	e00a      	b.n	8003e8c <DMA_CheckFifoParam+0xe8>
      break;
 8003e76:	bf00      	nop
 8003e78:	e008      	b.n	8003e8c <DMA_CheckFifoParam+0xe8>
      break;
 8003e7a:	bf00      	nop
 8003e7c:	e006      	b.n	8003e8c <DMA_CheckFifoParam+0xe8>
      break;
 8003e7e:	bf00      	nop
 8003e80:	e004      	b.n	8003e8c <DMA_CheckFifoParam+0xe8>
      break;
 8003e82:	bf00      	nop
 8003e84:	e002      	b.n	8003e8c <DMA_CheckFifoParam+0xe8>
      break;   
 8003e86:	bf00      	nop
 8003e88:	e000      	b.n	8003e8c <DMA_CheckFifoParam+0xe8>
      break;
 8003e8a:	bf00      	nop
    }
  } 
  
  return status; 
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop

08003e9c <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003ea6:	4b4b      	ldr	r3, [pc, #300]	; (8003fd4 <HAL_FLASH_IRQHandler+0x138>)
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d020      	beq.n	8003ef4 <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8003eb2:	4b49      	ldr	r3, [pc, #292]	; (8003fd8 <HAL_FLASH_IRQHandler+0x13c>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d107      	bne.n	8003ecc <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8003ebc:	4b46      	ldr	r3, [pc, #280]	; (8003fd8 <HAL_FLASH_IRQHandler+0x13c>)
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8003ec2:	4b45      	ldr	r3, [pc, #276]	; (8003fd8 <HAL_FLASH_IRQHandler+0x13c>)
 8003ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec8:	60da      	str	r2, [r3, #12]
 8003eca:	e00b      	b.n	8003ee4 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8003ecc:	4b42      	ldr	r3, [pc, #264]	; (8003fd8 <HAL_FLASH_IRQHandler+0x13c>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d103      	bne.n	8003ede <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8003ed6:	4b40      	ldr	r3, [pc, #256]	; (8003fd8 <HAL_FLASH_IRQHandler+0x13c>)
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	607b      	str	r3, [r7, #4]
 8003edc:	e002      	b.n	8003ee4 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8003ede:	4b3e      	ldr	r3, [pc, #248]	; (8003fd8 <HAL_FLASH_IRQHandler+0x13c>)
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8003ee4:	f000 f88e 	bl	8004004 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 f881 	bl	8003ff0 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003eee:	4b3a      	ldr	r3, [pc, #232]	; (8003fd8 <HAL_FLASH_IRQHandler+0x13c>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003ef4:	4b37      	ldr	r3, [pc, #220]	; (8003fd4 <HAL_FLASH_IRQHandler+0x138>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d04a      	beq.n	8003f96 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003f00:	4b34      	ldr	r3, [pc, #208]	; (8003fd4 <HAL_FLASH_IRQHandler+0x138>)
 8003f02:	2201      	movs	r2, #1
 8003f04:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8003f06:	4b34      	ldr	r3, [pc, #208]	; (8003fd8 <HAL_FLASH_IRQHandler+0x13c>)
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d12d      	bne.n	8003f6c <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8003f10:	4b31      	ldr	r3, [pc, #196]	; (8003fd8 <HAL_FLASH_IRQHandler+0x13c>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	3b01      	subs	r3, #1
 8003f16:	4a30      	ldr	r2, [pc, #192]	; (8003fd8 <HAL_FLASH_IRQHandler+0x13c>)
 8003f18:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8003f1a:	4b2f      	ldr	r3, [pc, #188]	; (8003fd8 <HAL_FLASH_IRQHandler+0x13c>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d015      	beq.n	8003f4e <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8003f22:	4b2d      	ldr	r3, [pc, #180]	; (8003fd8 <HAL_FLASH_IRQHandler+0x13c>)
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f857 	bl	8003fdc <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8003f2e:	4b2a      	ldr	r3, [pc, #168]	; (8003fd8 <HAL_FLASH_IRQHandler+0x13c>)
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	3301      	adds	r3, #1
 8003f34:	4a28      	ldr	r2, [pc, #160]	; (8003fd8 <HAL_FLASH_IRQHandler+0x13c>)
 8003f36:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8003f38:	4b27      	ldr	r3, [pc, #156]	; (8003fd8 <HAL_FLASH_IRQHandler+0x13c>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8003f3e:	4b26      	ldr	r3, [pc, #152]	; (8003fd8 <HAL_FLASH_IRQHandler+0x13c>)
 8003f40:	7a1b      	ldrb	r3, [r3, #8]
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	4619      	mov	r1, r3
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f8c2 	bl	80040d0 <FLASH_Erase_Sector>
 8003f4c:	e023      	b.n	8003f96 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8003f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f52:	607b      	str	r3, [r7, #4]
 8003f54:	4a20      	ldr	r2, [pc, #128]	; (8003fd8 <HAL_FLASH_IRQHandler+0x13c>)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003f5a:	4b1f      	ldr	r3, [pc, #124]	; (8003fd8 <HAL_FLASH_IRQHandler+0x13c>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8003f60:	f000 f92c 	bl	80041bc <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f839 	bl	8003fdc <HAL_FLASH_EndOfOperationCallback>
 8003f6a:	e014      	b.n	8003f96 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8003f6c:	4b1a      	ldr	r3, [pc, #104]	; (8003fd8 <HAL_FLASH_IRQHandler+0x13c>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d107      	bne.n	8003f86 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8003f76:	f000 f921 	bl	80041bc <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8003f7a:	4b17      	ldr	r3, [pc, #92]	; (8003fd8 <HAL_FLASH_IRQHandler+0x13c>)
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 f82c 	bl	8003fdc <HAL_FLASH_EndOfOperationCallback>
 8003f84:	e004      	b.n	8003f90 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8003f86:	4b14      	ldr	r3, [pc, #80]	; (8003fd8 <HAL_FLASH_IRQHandler+0x13c>)
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 f826 	bl	8003fdc <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003f90:	4b11      	ldr	r3, [pc, #68]	; (8003fd8 <HAL_FLASH_IRQHandler+0x13c>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8003f96:	4b10      	ldr	r3, [pc, #64]	; (8003fd8 <HAL_FLASH_IRQHandler+0x13c>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d114      	bne.n	8003fca <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8003fa0:	4b0c      	ldr	r3, [pc, #48]	; (8003fd4 <HAL_FLASH_IRQHandler+0x138>)
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	4a0b      	ldr	r2, [pc, #44]	; (8003fd4 <HAL_FLASH_IRQHandler+0x138>)
 8003fa6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003faa:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8003fac:	4b09      	ldr	r3, [pc, #36]	; (8003fd4 <HAL_FLASH_IRQHandler+0x138>)
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	4a08      	ldr	r2, [pc, #32]	; (8003fd4 <HAL_FLASH_IRQHandler+0x138>)
 8003fb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fb6:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8003fb8:	4b06      	ldr	r3, [pc, #24]	; (8003fd4 <HAL_FLASH_IRQHandler+0x138>)
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	4a05      	ldr	r2, [pc, #20]	; (8003fd4 <HAL_FLASH_IRQHandler+0x138>)
 8003fbe:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003fc2:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8003fc4:	4b04      	ldr	r3, [pc, #16]	; (8003fd8 <HAL_FLASH_IRQHandler+0x13c>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	761a      	strb	r2, [r3, #24]
  }
}
 8003fca:	bf00      	nop
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40023c00 	.word	0x40023c00
 8003fd8:	200008a4 	.word	0x200008a4

08003fdc <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004008:	4b2f      	ldr	r3, [pc, #188]	; (80040c8 <FLASH_SetErrorCode+0xc4>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f003 0310 	and.w	r3, r3, #16
 8004010:	2b00      	cmp	r3, #0
 8004012:	d008      	beq.n	8004026 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004014:	4b2d      	ldr	r3, [pc, #180]	; (80040cc <FLASH_SetErrorCode+0xc8>)
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	f043 0310 	orr.w	r3, r3, #16
 800401c:	4a2b      	ldr	r2, [pc, #172]	; (80040cc <FLASH_SetErrorCode+0xc8>)
 800401e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004020:	4b29      	ldr	r3, [pc, #164]	; (80040c8 <FLASH_SetErrorCode+0xc4>)
 8004022:	2210      	movs	r2, #16
 8004024:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004026:	4b28      	ldr	r3, [pc, #160]	; (80040c8 <FLASH_SetErrorCode+0xc4>)
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f003 0320 	and.w	r3, r3, #32
 800402e:	2b00      	cmp	r3, #0
 8004030:	d008      	beq.n	8004044 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004032:	4b26      	ldr	r3, [pc, #152]	; (80040cc <FLASH_SetErrorCode+0xc8>)
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	f043 0308 	orr.w	r3, r3, #8
 800403a:	4a24      	ldr	r2, [pc, #144]	; (80040cc <FLASH_SetErrorCode+0xc8>)
 800403c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800403e:	4b22      	ldr	r3, [pc, #136]	; (80040c8 <FLASH_SetErrorCode+0xc4>)
 8004040:	2220      	movs	r2, #32
 8004042:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004044:	4b20      	ldr	r3, [pc, #128]	; (80040c8 <FLASH_SetErrorCode+0xc4>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404c:	2b00      	cmp	r3, #0
 800404e:	d008      	beq.n	8004062 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004050:	4b1e      	ldr	r3, [pc, #120]	; (80040cc <FLASH_SetErrorCode+0xc8>)
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	f043 0304 	orr.w	r3, r3, #4
 8004058:	4a1c      	ldr	r2, [pc, #112]	; (80040cc <FLASH_SetErrorCode+0xc8>)
 800405a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800405c:	4b1a      	ldr	r3, [pc, #104]	; (80040c8 <FLASH_SetErrorCode+0xc4>)
 800405e:	2240      	movs	r2, #64	; 0x40
 8004060:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004062:	4b19      	ldr	r3, [pc, #100]	; (80040c8 <FLASH_SetErrorCode+0xc4>)
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800406a:	2b00      	cmp	r3, #0
 800406c:	d008      	beq.n	8004080 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800406e:	4b17      	ldr	r3, [pc, #92]	; (80040cc <FLASH_SetErrorCode+0xc8>)
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	f043 0302 	orr.w	r3, r3, #2
 8004076:	4a15      	ldr	r2, [pc, #84]	; (80040cc <FLASH_SetErrorCode+0xc8>)
 8004078:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800407a:	4b13      	ldr	r3, [pc, #76]	; (80040c8 <FLASH_SetErrorCode+0xc4>)
 800407c:	2280      	movs	r2, #128	; 0x80
 800407e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004080:	4b11      	ldr	r3, [pc, #68]	; (80040c8 <FLASH_SetErrorCode+0xc4>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004088:	2b00      	cmp	r3, #0
 800408a:	d009      	beq.n	80040a0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800408c:	4b0f      	ldr	r3, [pc, #60]	; (80040cc <FLASH_SetErrorCode+0xc8>)
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	f043 0301 	orr.w	r3, r3, #1
 8004094:	4a0d      	ldr	r2, [pc, #52]	; (80040cc <FLASH_SetErrorCode+0xc8>)
 8004096:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004098:	4b0b      	ldr	r3, [pc, #44]	; (80040c8 <FLASH_SetErrorCode+0xc4>)
 800409a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800409e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80040a0:	4b09      	ldr	r3, [pc, #36]	; (80040c8 <FLASH_SetErrorCode+0xc4>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d008      	beq.n	80040be <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80040ac:	4b07      	ldr	r3, [pc, #28]	; (80040cc <FLASH_SetErrorCode+0xc8>)
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	f043 0320 	orr.w	r3, r3, #32
 80040b4:	4a05      	ldr	r2, [pc, #20]	; (80040cc <FLASH_SetErrorCode+0xc8>)
 80040b6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80040b8:	4b03      	ldr	r3, [pc, #12]	; (80040c8 <FLASH_SetErrorCode+0xc4>)
 80040ba:	2202      	movs	r2, #2
 80040bc:	60da      	str	r2, [r3, #12]
  }
}
 80040be:	bf00      	nop
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	40023c00 	.word	0x40023c00
 80040cc:	200008a4 	.word	0x200008a4

080040d0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80040dc:	2300      	movs	r3, #0
 80040de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d019      	beq.n	800411a <FLASH_Erase_Sector+0x4a>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d016      	beq.n	800411a <FLASH_Erase_Sector+0x4a>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d013      	beq.n	800411a <FLASH_Erase_Sector+0x4a>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b03      	cmp	r3, #3
 80040f6:	d010      	beq.n	800411a <FLASH_Erase_Sector+0x4a>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d00d      	beq.n	800411a <FLASH_Erase_Sector+0x4a>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b05      	cmp	r3, #5
 8004102:	d00a      	beq.n	800411a <FLASH_Erase_Sector+0x4a>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b06      	cmp	r3, #6
 8004108:	d007      	beq.n	800411a <FLASH_Erase_Sector+0x4a>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b07      	cmp	r3, #7
 800410e:	d004      	beq.n	800411a <FLASH_Erase_Sector+0x4a>
 8004110:	f240 31d9 	movw	r1, #985	; 0x3d9
 8004114:	4827      	ldr	r0, [pc, #156]	; (80041b4 <FLASH_Erase_Sector+0xe4>)
 8004116:	f7fd fcf4 	bl	8001b02 <assert_failed>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800411a:	78fb      	ldrb	r3, [r7, #3]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00d      	beq.n	800413c <FLASH_Erase_Sector+0x6c>
 8004120:	78fb      	ldrb	r3, [r7, #3]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d00a      	beq.n	800413c <FLASH_Erase_Sector+0x6c>
 8004126:	78fb      	ldrb	r3, [r7, #3]
 8004128:	2b02      	cmp	r3, #2
 800412a:	d007      	beq.n	800413c <FLASH_Erase_Sector+0x6c>
 800412c:	78fb      	ldrb	r3, [r7, #3]
 800412e:	2b03      	cmp	r3, #3
 8004130:	d004      	beq.n	800413c <FLASH_Erase_Sector+0x6c>
 8004132:	f240 31da 	movw	r1, #986	; 0x3da
 8004136:	481f      	ldr	r0, [pc, #124]	; (80041b4 <FLASH_Erase_Sector+0xe4>)
 8004138:	f7fd fce3 	bl	8001b02 <assert_failed>

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d102      	bne.n	8004148 <FLASH_Erase_Sector+0x78>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	e010      	b.n	800416a <FLASH_Erase_Sector+0x9a>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004148:	78fb      	ldrb	r3, [r7, #3]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d103      	bne.n	8004156 <FLASH_Erase_Sector+0x86>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800414e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	e009      	b.n	800416a <FLASH_Erase_Sector+0x9a>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004156:	78fb      	ldrb	r3, [r7, #3]
 8004158:	2b02      	cmp	r3, #2
 800415a:	d103      	bne.n	8004164 <FLASH_Erase_Sector+0x94>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800415c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	e002      	b.n	800416a <FLASH_Erase_Sector+0x9a>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004164:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004168:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800416a:	4b13      	ldr	r3, [pc, #76]	; (80041b8 <FLASH_Erase_Sector+0xe8>)
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	4a12      	ldr	r2, [pc, #72]	; (80041b8 <FLASH_Erase_Sector+0xe8>)
 8004170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004174:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004176:	4b10      	ldr	r3, [pc, #64]	; (80041b8 <FLASH_Erase_Sector+0xe8>)
 8004178:	691a      	ldr	r2, [r3, #16]
 800417a:	490f      	ldr	r1, [pc, #60]	; (80041b8 <FLASH_Erase_Sector+0xe8>)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4313      	orrs	r3, r2
 8004180:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004182:	4b0d      	ldr	r3, [pc, #52]	; (80041b8 <FLASH_Erase_Sector+0xe8>)
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	4a0c      	ldr	r2, [pc, #48]	; (80041b8 <FLASH_Erase_Sector+0xe8>)
 8004188:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800418c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800418e:	4b0a      	ldr	r3, [pc, #40]	; (80041b8 <FLASH_Erase_Sector+0xe8>)
 8004190:	691a      	ldr	r2, [r3, #16]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	4313      	orrs	r3, r2
 8004198:	4a07      	ldr	r2, [pc, #28]	; (80041b8 <FLASH_Erase_Sector+0xe8>)
 800419a:	f043 0302 	orr.w	r3, r3, #2
 800419e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80041a0:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <FLASH_Erase_Sector+0xe8>)
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	4a04      	ldr	r2, [pc, #16]	; (80041b8 <FLASH_Erase_Sector+0xe8>)
 80041a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041aa:	6113      	str	r3, [r2, #16]
}
 80041ac:	bf00      	nop
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	0800d250 	.word	0x0800d250
 80041b8:	40023c00 	.word	0x40023c00

080041bc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80041c0:	4b20      	ldr	r3, [pc, #128]	; (8004244 <FLASH_FlushCaches+0x88>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d017      	beq.n	80041fc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80041cc:	4b1d      	ldr	r3, [pc, #116]	; (8004244 <FLASH_FlushCaches+0x88>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a1c      	ldr	r2, [pc, #112]	; (8004244 <FLASH_FlushCaches+0x88>)
 80041d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041d6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80041d8:	4b1a      	ldr	r3, [pc, #104]	; (8004244 <FLASH_FlushCaches+0x88>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a19      	ldr	r2, [pc, #100]	; (8004244 <FLASH_FlushCaches+0x88>)
 80041de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80041e2:	6013      	str	r3, [r2, #0]
 80041e4:	4b17      	ldr	r3, [pc, #92]	; (8004244 <FLASH_FlushCaches+0x88>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a16      	ldr	r2, [pc, #88]	; (8004244 <FLASH_FlushCaches+0x88>)
 80041ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041ee:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80041f0:	4b14      	ldr	r3, [pc, #80]	; (8004244 <FLASH_FlushCaches+0x88>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a13      	ldr	r2, [pc, #76]	; (8004244 <FLASH_FlushCaches+0x88>)
 80041f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041fa:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80041fc:	4b11      	ldr	r3, [pc, #68]	; (8004244 <FLASH_FlushCaches+0x88>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004204:	2b00      	cmp	r3, #0
 8004206:	d017      	beq.n	8004238 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004208:	4b0e      	ldr	r3, [pc, #56]	; (8004244 <FLASH_FlushCaches+0x88>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a0d      	ldr	r2, [pc, #52]	; (8004244 <FLASH_FlushCaches+0x88>)
 800420e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004212:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004214:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <FLASH_FlushCaches+0x88>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a0a      	ldr	r2, [pc, #40]	; (8004244 <FLASH_FlushCaches+0x88>)
 800421a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800421e:	6013      	str	r3, [r2, #0]
 8004220:	4b08      	ldr	r3, [pc, #32]	; (8004244 <FLASH_FlushCaches+0x88>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a07      	ldr	r2, [pc, #28]	; (8004244 <FLASH_FlushCaches+0x88>)
 8004226:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800422a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800422c:	4b05      	ldr	r3, [pc, #20]	; (8004244 <FLASH_FlushCaches+0x88>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a04      	ldr	r2, [pc, #16]	; (8004244 <FLASH_FlushCaches+0x88>)
 8004232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004236:	6013      	str	r3, [r2, #0]
  }
}
 8004238:	bf00      	nop
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40023c00 	.word	0x40023c00

08004248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b088      	sub	sp, #32
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004252:	2300      	movs	r3, #0
 8004254:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004256:	2300      	movs	r3, #0
 8004258:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800425a:	2300      	movs	r3, #0
 800425c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a33      	ldr	r2, [pc, #204]	; (8004330 <HAL_GPIO_Init+0xe8>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d017      	beq.n	8004296 <HAL_GPIO_Init+0x4e>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a32      	ldr	r2, [pc, #200]	; (8004334 <HAL_GPIO_Init+0xec>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d013      	beq.n	8004296 <HAL_GPIO_Init+0x4e>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a31      	ldr	r2, [pc, #196]	; (8004338 <HAL_GPIO_Init+0xf0>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d00f      	beq.n	8004296 <HAL_GPIO_Init+0x4e>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a30      	ldr	r2, [pc, #192]	; (800433c <HAL_GPIO_Init+0xf4>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00b      	beq.n	8004296 <HAL_GPIO_Init+0x4e>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a2f      	ldr	r2, [pc, #188]	; (8004340 <HAL_GPIO_Init+0xf8>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d007      	beq.n	8004296 <HAL_GPIO_Init+0x4e>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a2e      	ldr	r2, [pc, #184]	; (8004344 <HAL_GPIO_Init+0xfc>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d003      	beq.n	8004296 <HAL_GPIO_Init+0x4e>
 800428e:	21ac      	movs	r1, #172	; 0xac
 8004290:	482d      	ldr	r0, [pc, #180]	; (8004348 <HAL_GPIO_Init+0x100>)
 8004292:	f7fd fc36 	bl	8001b02 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	b29b      	uxth	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	d005      	beq.n	80042ac <HAL_GPIO_Init+0x64>
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	0c1b      	lsrs	r3, r3, #16
 80042a6:	041b      	lsls	r3, r3, #16
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <HAL_GPIO_Init+0x6c>
 80042ac:	21ad      	movs	r1, #173	; 0xad
 80042ae:	4826      	ldr	r0, [pc, #152]	; (8004348 <HAL_GPIO_Init+0x100>)
 80042b0:	f7fd fc27 	bl	8001b02 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d035      	beq.n	8004328 <HAL_GPIO_Init+0xe0>
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d031      	beq.n	8004328 <HAL_GPIO_Init+0xe0>
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	2b11      	cmp	r3, #17
 80042ca:	d02d      	beq.n	8004328 <HAL_GPIO_Init+0xe0>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d029      	beq.n	8004328 <HAL_GPIO_Init+0xe0>
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	2b12      	cmp	r3, #18
 80042da:	d025      	beq.n	8004328 <HAL_GPIO_Init+0xe0>
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80042e4:	d020      	beq.n	8004328 <HAL_GPIO_Init+0xe0>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80042ee:	d01b      	beq.n	8004328 <HAL_GPIO_Init+0xe0>
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80042f8:	d016      	beq.n	8004328 <HAL_GPIO_Init+0xe0>
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8004302:	d011      	beq.n	8004328 <HAL_GPIO_Init+0xe0>
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 800430c:	d00c      	beq.n	8004328 <HAL_GPIO_Init+0xe0>
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8004316:	d007      	beq.n	8004328 <HAL_GPIO_Init+0xe0>
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	2b03      	cmp	r3, #3
 800431e:	d003      	beq.n	8004328 <HAL_GPIO_Init+0xe0>
 8004320:	21ae      	movs	r1, #174	; 0xae
 8004322:	4809      	ldr	r0, [pc, #36]	; (8004348 <HAL_GPIO_Init+0x100>)
 8004324:	f7fd fbed 	bl	8001b02 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004328:	2300      	movs	r3, #0
 800432a:	61fb      	str	r3, [r7, #28]
 800432c:	e20c      	b.n	8004748 <HAL_GPIO_Init+0x500>
 800432e:	bf00      	nop
 8004330:	40020000 	.word	0x40020000
 8004334:	40020400 	.word	0x40020400
 8004338:	40020800 	.word	0x40020800
 800433c:	40020c00 	.word	0x40020c00
 8004340:	40021000 	.word	0x40021000
 8004344:	40021c00 	.word	0x40021c00
 8004348:	0800d2c8 	.word	0x0800d2c8
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800434c:	2201      	movs	r2, #1
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	fa02 f303 	lsl.w	r3, r2, r3
 8004354:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	4013      	ands	r3, r2
 800435e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	429a      	cmp	r2, r3
 8004366:	f040 81ec 	bne.w	8004742 <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f003 0303 	and.w	r3, r3, #3
 8004372:	2b01      	cmp	r3, #1
 8004374:	d005      	beq.n	8004382 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800437e:	2b02      	cmp	r3, #2
 8004380:	d144      	bne.n	800440c <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00f      	beq.n	80043aa <HAL_GPIO_Init+0x162>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d00b      	beq.n	80043aa <HAL_GPIO_Init+0x162>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	2b02      	cmp	r3, #2
 8004398:	d007      	beq.n	80043aa <HAL_GPIO_Init+0x162>
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	2b03      	cmp	r3, #3
 80043a0:	d003      	beq.n	80043aa <HAL_GPIO_Init+0x162>
 80043a2:	21c0      	movs	r1, #192	; 0xc0
 80043a4:	4884      	ldr	r0, [pc, #528]	; (80045b8 <HAL_GPIO_Init+0x370>)
 80043a6:	f7fd fbac 	bl	8001b02 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	2203      	movs	r2, #3
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	43db      	mvns	r3, r3
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	4013      	ands	r3, r2
 80043c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043e0:	2201      	movs	r2, #1
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	43db      	mvns	r3, r3
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	4013      	ands	r3, r2
 80043ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	091b      	lsrs	r3, r3, #4
 80043f6:	f003 0201 	and.w	r2, r3, #1
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	4313      	orrs	r3, r2
 8004404:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f003 0303 	and.w	r3, r3, #3
 8004414:	2b03      	cmp	r3, #3
 8004416:	d027      	beq.n	8004468 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00b      	beq.n	8004438 <HAL_GPIO_Init+0x1f0>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d007      	beq.n	8004438 <HAL_GPIO_Init+0x1f0>
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	2b02      	cmp	r3, #2
 800442e:	d003      	beq.n	8004438 <HAL_GPIO_Init+0x1f0>
 8004430:	21d1      	movs	r1, #209	; 0xd1
 8004432:	4861      	ldr	r0, [pc, #388]	; (80045b8 <HAL_GPIO_Init+0x370>)
 8004434:	f7fd fb65 	bl	8001b02 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	2203      	movs	r2, #3
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	43db      	mvns	r3, r3
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	4013      	ands	r3, r2
 800444e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	fa02 f303 	lsl.w	r3, r2, r3
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	4313      	orrs	r3, r2
 8004460:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f003 0303 	and.w	r3, r3, #3
 8004470:	2b02      	cmp	r3, #2
 8004472:	f040 80a3 	bne.w	80045bc <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d077      	beq.n	800456e <HAL_GPIO_Init+0x326>
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	2b09      	cmp	r3, #9
 8004484:	d073      	beq.n	800456e <HAL_GPIO_Init+0x326>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d06f      	beq.n	800456e <HAL_GPIO_Init+0x326>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d06b      	beq.n	800456e <HAL_GPIO_Init+0x326>
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d067      	beq.n	800456e <HAL_GPIO_Init+0x326>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d063      	beq.n	800456e <HAL_GPIO_Init+0x326>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d05f      	beq.n	800456e <HAL_GPIO_Init+0x326>
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d05b      	beq.n	800456e <HAL_GPIO_Init+0x326>
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d057      	beq.n	800456e <HAL_GPIO_Init+0x326>
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d053      	beq.n	800456e <HAL_GPIO_Init+0x326>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d04f      	beq.n	800456e <HAL_GPIO_Init+0x326>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	d04b      	beq.n	800456e <HAL_GPIO_Init+0x326>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d047      	beq.n	800456e <HAL_GPIO_Init+0x326>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	d043      	beq.n	800456e <HAL_GPIO_Init+0x326>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	2b05      	cmp	r3, #5
 80044ec:	d03f      	beq.n	800456e <HAL_GPIO_Init+0x326>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	2b05      	cmp	r3, #5
 80044f4:	d03b      	beq.n	800456e <HAL_GPIO_Init+0x326>
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	2b05      	cmp	r3, #5
 80044fc:	d037      	beq.n	800456e <HAL_GPIO_Init+0x326>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	2b06      	cmp	r3, #6
 8004504:	d033      	beq.n	800456e <HAL_GPIO_Init+0x326>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	2b06      	cmp	r3, #6
 800450c:	d02f      	beq.n	800456e <HAL_GPIO_Init+0x326>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	2b05      	cmp	r3, #5
 8004514:	d02b      	beq.n	800456e <HAL_GPIO_Init+0x326>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	2b06      	cmp	r3, #6
 800451c:	d027      	beq.n	800456e <HAL_GPIO_Init+0x326>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	2b07      	cmp	r3, #7
 8004524:	d023      	beq.n	800456e <HAL_GPIO_Init+0x326>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	2b07      	cmp	r3, #7
 800452c:	d01f      	beq.n	800456e <HAL_GPIO_Init+0x326>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	2b07      	cmp	r3, #7
 8004534:	d01b      	beq.n	800456e <HAL_GPIO_Init+0x326>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	2b08      	cmp	r3, #8
 800453c:	d017      	beq.n	800456e <HAL_GPIO_Init+0x326>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	2b0a      	cmp	r3, #10
 8004544:	d013      	beq.n	800456e <HAL_GPIO_Init+0x326>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	2b09      	cmp	r3, #9
 800454c:	d00f      	beq.n	800456e <HAL_GPIO_Init+0x326>
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	2b09      	cmp	r3, #9
 8004554:	d00b      	beq.n	800456e <HAL_GPIO_Init+0x326>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	2b0c      	cmp	r3, #12
 800455c:	d007      	beq.n	800456e <HAL_GPIO_Init+0x326>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	2b0f      	cmp	r3, #15
 8004564:	d003      	beq.n	800456e <HAL_GPIO_Init+0x326>
 8004566:	21de      	movs	r1, #222	; 0xde
 8004568:	4813      	ldr	r0, [pc, #76]	; (80045b8 <HAL_GPIO_Init+0x370>)
 800456a:	f7fd faca 	bl	8001b02 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	08da      	lsrs	r2, r3, #3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	3208      	adds	r2, #8
 8004576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800457a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	220f      	movs	r2, #15
 8004586:	fa02 f303 	lsl.w	r3, r2, r3
 800458a:	43db      	mvns	r3, r3
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	4013      	ands	r3, r2
 8004590:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	691a      	ldr	r2, [r3, #16]
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	08da      	lsrs	r2, r3, #3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3208      	adds	r2, #8
 80045b0:	69b9      	ldr	r1, [r7, #24]
 80045b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80045b6:	e001      	b.n	80045bc <HAL_GPIO_Init+0x374>
 80045b8:	0800d2c8 	.word	0x0800d2c8
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	2203      	movs	r2, #3
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	43db      	mvns	r3, r3
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	4013      	ands	r3, r2
 80045d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f003 0203 	and.w	r2, r3, #3
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 80a2 	beq.w	8004742 <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045fe:	2300      	movs	r3, #0
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	4b56      	ldr	r3, [pc, #344]	; (800475c <HAL_GPIO_Init+0x514>)
 8004604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004606:	4a55      	ldr	r2, [pc, #340]	; (800475c <HAL_GPIO_Init+0x514>)
 8004608:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800460c:	6453      	str	r3, [r2, #68]	; 0x44
 800460e:	4b53      	ldr	r3, [pc, #332]	; (800475c <HAL_GPIO_Init+0x514>)
 8004610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800461a:	4a51      	ldr	r2, [pc, #324]	; (8004760 <HAL_GPIO_Init+0x518>)
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	089b      	lsrs	r3, r3, #2
 8004620:	3302      	adds	r3, #2
 8004622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004626:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	220f      	movs	r2, #15
 8004632:	fa02 f303 	lsl.w	r3, r2, r3
 8004636:	43db      	mvns	r3, r3
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	4013      	ands	r3, r2
 800463c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a48      	ldr	r2, [pc, #288]	; (8004764 <HAL_GPIO_Init+0x51c>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d019      	beq.n	800467a <HAL_GPIO_Init+0x432>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a47      	ldr	r2, [pc, #284]	; (8004768 <HAL_GPIO_Init+0x520>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d013      	beq.n	8004676 <HAL_GPIO_Init+0x42e>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a46      	ldr	r2, [pc, #280]	; (800476c <HAL_GPIO_Init+0x524>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d00d      	beq.n	8004672 <HAL_GPIO_Init+0x42a>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a45      	ldr	r2, [pc, #276]	; (8004770 <HAL_GPIO_Init+0x528>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d007      	beq.n	800466e <HAL_GPIO_Init+0x426>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a44      	ldr	r2, [pc, #272]	; (8004774 <HAL_GPIO_Init+0x52c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d101      	bne.n	800466a <HAL_GPIO_Init+0x422>
 8004666:	2304      	movs	r3, #4
 8004668:	e008      	b.n	800467c <HAL_GPIO_Init+0x434>
 800466a:	2307      	movs	r3, #7
 800466c:	e006      	b.n	800467c <HAL_GPIO_Init+0x434>
 800466e:	2303      	movs	r3, #3
 8004670:	e004      	b.n	800467c <HAL_GPIO_Init+0x434>
 8004672:	2302      	movs	r3, #2
 8004674:	e002      	b.n	800467c <HAL_GPIO_Init+0x434>
 8004676:	2301      	movs	r3, #1
 8004678:	e000      	b.n	800467c <HAL_GPIO_Init+0x434>
 800467a:	2300      	movs	r3, #0
 800467c:	69fa      	ldr	r2, [r7, #28]
 800467e:	f002 0203 	and.w	r2, r2, #3
 8004682:	0092      	lsls	r2, r2, #2
 8004684:	4093      	lsls	r3, r2
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	4313      	orrs	r3, r2
 800468a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800468c:	4934      	ldr	r1, [pc, #208]	; (8004760 <HAL_GPIO_Init+0x518>)
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	089b      	lsrs	r3, r3, #2
 8004692:	3302      	adds	r3, #2
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800469a:	4b37      	ldr	r3, [pc, #220]	; (8004778 <HAL_GPIO_Init+0x530>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	43db      	mvns	r3, r3
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	4013      	ands	r3, r2
 80046a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046be:	4a2e      	ldr	r2, [pc, #184]	; (8004778 <HAL_GPIO_Init+0x530>)
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046c4:	4b2c      	ldr	r3, [pc, #176]	; (8004778 <HAL_GPIO_Init+0x530>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	43db      	mvns	r3, r3
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	4013      	ands	r3, r2
 80046d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d003      	beq.n	80046e8 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046e8:	4a23      	ldr	r2, [pc, #140]	; (8004778 <HAL_GPIO_Init+0x530>)
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80046ee:	4b22      	ldr	r3, [pc, #136]	; (8004778 <HAL_GPIO_Init+0x530>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	43db      	mvns	r3, r3
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	4013      	ands	r3, r2
 80046fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	4313      	orrs	r3, r2
 8004710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004712:	4a19      	ldr	r2, [pc, #100]	; (8004778 <HAL_GPIO_Init+0x530>)
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004718:	4b17      	ldr	r3, [pc, #92]	; (8004778 <HAL_GPIO_Init+0x530>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	43db      	mvns	r3, r3
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4013      	ands	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	4313      	orrs	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800473c:	4a0e      	ldr	r2, [pc, #56]	; (8004778 <HAL_GPIO_Init+0x530>)
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	3301      	adds	r3, #1
 8004746:	61fb      	str	r3, [r7, #28]
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	2b0f      	cmp	r3, #15
 800474c:	f67f adfe 	bls.w	800434c <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8004750:	bf00      	nop
 8004752:	bf00      	nop
 8004754:	3720      	adds	r7, #32
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	40023800 	.word	0x40023800
 8004760:	40013800 	.word	0x40013800
 8004764:	40020000 	.word	0x40020000
 8004768:	40020400 	.word	0x40020400
 800476c:	40020800 	.word	0x40020800
 8004770:	40020c00 	.word	0x40020c00
 8004774:	40021000 	.word	0x40021000
 8004778:	40013c00 	.word	0x40013c00

0800477c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	460b      	mov	r3, r1
 8004786:	807b      	strh	r3, [r7, #2]
 8004788:	4613      	mov	r3, r2
 800478a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800478c:	887b      	ldrh	r3, [r7, #2]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d004      	beq.n	800479c <HAL_GPIO_WritePin+0x20>
 8004792:	887b      	ldrh	r3, [r7, #2]
 8004794:	0c1b      	lsrs	r3, r3, #16
 8004796:	041b      	lsls	r3, r3, #16
 8004798:	2b00      	cmp	r3, #0
 800479a:	d004      	beq.n	80047a6 <HAL_GPIO_WritePin+0x2a>
 800479c:	f240 119d 	movw	r1, #413	; 0x19d
 80047a0:	480e      	ldr	r0, [pc, #56]	; (80047dc <HAL_GPIO_WritePin+0x60>)
 80047a2:	f7fd f9ae 	bl	8001b02 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80047a6:	787b      	ldrb	r3, [r7, #1]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d007      	beq.n	80047bc <HAL_GPIO_WritePin+0x40>
 80047ac:	787b      	ldrb	r3, [r7, #1]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d004      	beq.n	80047bc <HAL_GPIO_WritePin+0x40>
 80047b2:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80047b6:	4809      	ldr	r0, [pc, #36]	; (80047dc <HAL_GPIO_WritePin+0x60>)
 80047b8:	f7fd f9a3 	bl	8001b02 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80047bc:	787b      	ldrb	r3, [r7, #1]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047c2:	887a      	ldrh	r2, [r7, #2]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047c8:	e003      	b.n	80047d2 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047ca:	887b      	ldrh	r3, [r7, #2]
 80047cc:	041a      	lsls	r2, r3, #16
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	619a      	str	r2, [r3, #24]
}
 80047d2:	bf00      	nop
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	0800d2c8 	.word	0x0800d2c8

080047e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e1f7      	b.n	8004be2 <HAL_I2C_Init+0x402>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a81      	ldr	r2, [pc, #516]	; (80049fc <HAL_I2C_Init+0x21c>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d00e      	beq.n	800481a <HAL_I2C_Init+0x3a>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a7f      	ldr	r2, [pc, #508]	; (8004a00 <HAL_I2C_Init+0x220>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d009      	beq.n	800481a <HAL_I2C_Init+0x3a>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a7e      	ldr	r2, [pc, #504]	; (8004a04 <HAL_I2C_Init+0x224>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d004      	beq.n	800481a <HAL_I2C_Init+0x3a>
 8004810:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8004814:	487c      	ldr	r0, [pc, #496]	; (8004a08 <HAL_I2C_Init+0x228>)
 8004816:	f7fd f974 	bl	8001b02 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d004      	beq.n	800482c <HAL_I2C_Init+0x4c>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	4a79      	ldr	r2, [pc, #484]	; (8004a0c <HAL_I2C_Init+0x22c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d904      	bls.n	8004836 <HAL_I2C_Init+0x56>
 800482c:	f240 11bf 	movw	r1, #447	; 0x1bf
 8004830:	4875      	ldr	r0, [pc, #468]	; (8004a08 <HAL_I2C_Init+0x228>)
 8004832:	f7fd f966 	bl	8001b02 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d009      	beq.n	8004852 <HAL_I2C_Init+0x72>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004846:	d004      	beq.n	8004852 <HAL_I2C_Init+0x72>
 8004848:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800484c:	486e      	ldr	r0, [pc, #440]	; (8004a08 <HAL_I2C_Init+0x228>)
 800484e:	f7fd f958 	bl	8001b02 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800485a:	f023 0303 	bic.w	r3, r3, #3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d004      	beq.n	800486c <HAL_I2C_Init+0x8c>
 8004862:	f240 11c1 	movw	r1, #449	; 0x1c1
 8004866:	4868      	ldr	r0, [pc, #416]	; (8004a08 <HAL_I2C_Init+0x228>)
 8004868:	f7fd f94b 	bl	8001b02 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004874:	d009      	beq.n	800488a <HAL_I2C_Init+0xaa>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800487e:	d004      	beq.n	800488a <HAL_I2C_Init+0xaa>
 8004880:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8004884:	4860      	ldr	r0, [pc, #384]	; (8004a08 <HAL_I2C_Init+0x228>)
 8004886:	f7fd f93c 	bl	8001b02 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d008      	beq.n	80048a4 <HAL_I2C_Init+0xc4>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d004      	beq.n	80048a4 <HAL_I2C_Init+0xc4>
 800489a:	f240 11c3 	movw	r1, #451	; 0x1c3
 800489e:	485a      	ldr	r0, [pc, #360]	; (8004a08 <HAL_I2C_Init+0x228>)
 80048a0:	f7fd f92f 	bl	8001b02 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d004      	beq.n	80048ba <HAL_I2C_Init+0xda>
 80048b0:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80048b4:	4854      	ldr	r0, [pc, #336]	; (8004a08 <HAL_I2C_Init+0x228>)
 80048b6:	f7fd f924 	bl	8001b02 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d008      	beq.n	80048d4 <HAL_I2C_Init+0xf4>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	2b40      	cmp	r3, #64	; 0x40
 80048c8:	d004      	beq.n	80048d4 <HAL_I2C_Init+0xf4>
 80048ca:	f240 11c5 	movw	r1, #453	; 0x1c5
 80048ce:	484e      	ldr	r0, [pc, #312]	; (8004a08 <HAL_I2C_Init+0x228>)
 80048d0:	f7fd f917 	bl	8001b02 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d008      	beq.n	80048ee <HAL_I2C_Init+0x10e>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a1b      	ldr	r3, [r3, #32]
 80048e0:	2b80      	cmp	r3, #128	; 0x80
 80048e2:	d004      	beq.n	80048ee <HAL_I2C_Init+0x10e>
 80048e4:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80048e8:	4847      	ldr	r0, [pc, #284]	; (8004a08 <HAL_I2C_Init+0x228>)
 80048ea:	f7fd f90a 	bl	8001b02 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d12c      	bne.n	8004954 <HAL_I2C_Init+0x174>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a42      	ldr	r2, [pc, #264]	; (8004a10 <HAL_I2C_Init+0x230>)
 8004906:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a42      	ldr	r2, [pc, #264]	; (8004a14 <HAL_I2C_Init+0x234>)
 800490c:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a41      	ldr	r2, [pc, #260]	; (8004a18 <HAL_I2C_Init+0x238>)
 8004912:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a41      	ldr	r2, [pc, #260]	; (8004a1c <HAL_I2C_Init+0x23c>)
 8004918:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a40      	ldr	r2, [pc, #256]	; (8004a20 <HAL_I2C_Init+0x240>)
 800491e:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a40      	ldr	r2, [pc, #256]	; (8004a24 <HAL_I2C_Init+0x244>)
 8004924:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a3f      	ldr	r2, [pc, #252]	; (8004a28 <HAL_I2C_Init+0x248>)
 800492a:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a3f      	ldr	r2, [pc, #252]	; (8004a2c <HAL_I2C_Init+0x24c>)
 8004930:	671a      	str	r2, [r3, #112]	; 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a3e      	ldr	r2, [pc, #248]	; (8004a30 <HAL_I2C_Init+0x250>)
 8004936:	675a      	str	r2, [r3, #116]	; 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a3e      	ldr	r2, [pc, #248]	; (8004a34 <HAL_I2C_Init+0x254>)
 800493c:	679a      	str	r2, [r3, #120]	; 0x78

    if (hi2c->MspInitCallback == NULL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004942:	2b00      	cmp	r3, #0
 8004944:	d102      	bne.n	800494c <HAL_I2C_Init+0x16c>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a3b      	ldr	r2, [pc, #236]	; (8004a38 <HAL_I2C_Init+0x258>)
 800494a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2224      	movs	r2, #36	; 0x24
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0201 	bic.w	r2, r2, #1
 800496a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800497a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800498a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800498c:	f002 fc0a 	bl	80071a4 <HAL_RCC_GetPCLK1Freq>
 8004990:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	4a29      	ldr	r2, [pc, #164]	; (8004a3c <HAL_I2C_Init+0x25c>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d807      	bhi.n	80049ac <HAL_I2C_Init+0x1cc>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4a28      	ldr	r2, [pc, #160]	; (8004a40 <HAL_I2C_Init+0x260>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	bf94      	ite	ls
 80049a4:	2301      	movls	r3, #1
 80049a6:	2300      	movhi	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	e006      	b.n	80049ba <HAL_I2C_Init+0x1da>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4a25      	ldr	r2, [pc, #148]	; (8004a44 <HAL_I2C_Init+0x264>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	bf94      	ite	ls
 80049b4:	2301      	movls	r3, #1
 80049b6:	2300      	movhi	r3, #0
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <HAL_I2C_Init+0x1e2>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e10f      	b.n	8004be2 <HAL_I2C_Init+0x402>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4a20      	ldr	r2, [pc, #128]	; (8004a48 <HAL_I2C_Init+0x268>)
 80049c6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ca:	0c9b      	lsrs	r3, r3, #18
 80049cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	430a      	orrs	r2, r1
 80049e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	4a12      	ldr	r2, [pc, #72]	; (8004a3c <HAL_I2C_Init+0x25c>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d82a      	bhi.n	8004a4c <HAL_I2C_Init+0x26c>
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	3301      	adds	r3, #1
 80049fa:	e031      	b.n	8004a60 <HAL_I2C_Init+0x280>
 80049fc:	40005400 	.word	0x40005400
 8004a00:	40005800 	.word	0x40005800
 8004a04:	40005c00 	.word	0x40005c00
 8004a08:	0800d33c 	.word	0x0800d33c
 8004a0c:	00061a80 	.word	0x00061a80
 8004a10:	08005025 	.word	0x08005025
 8004a14:	08005039 	.word	0x08005039
 8004a18:	0800504d 	.word	0x0800504d
 8004a1c:	08005061 	.word	0x08005061
 8004a20:	08005091 	.word	0x08005091
 8004a24:	080050a5 	.word	0x080050a5
 8004a28:	080050b9 	.word	0x080050b9
 8004a2c:	080050cd 	.word	0x080050cd
 8004a30:	080050e1 	.word	0x080050e1
 8004a34:	08005075 	.word	0x08005075
 8004a38:	080017ed 	.word	0x080017ed
 8004a3c:	000186a0 	.word	0x000186a0
 8004a40:	001e847f 	.word	0x001e847f
 8004a44:	003d08ff 	.word	0x003d08ff
 8004a48:	431bde83 	.word	0x431bde83
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a52:	fb02 f303 	mul.w	r3, r2, r3
 8004a56:	4a65      	ldr	r2, [pc, #404]	; (8004bec <HAL_I2C_Init+0x40c>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	099b      	lsrs	r3, r3, #6
 8004a5e:	3301      	adds	r3, #1
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6812      	ldr	r2, [r2, #0]
 8004a64:	430b      	orrs	r3, r1
 8004a66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	495d      	ldr	r1, [pc, #372]	; (8004bf0 <HAL_I2C_Init+0x410>)
 8004a7c:	428b      	cmp	r3, r1
 8004a7e:	d819      	bhi.n	8004ab4 <HAL_I2C_Init+0x2d4>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	1e59      	subs	r1, r3, #1
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a8e:	1c59      	adds	r1, r3, #1
 8004a90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a94:	400b      	ands	r3, r1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00a      	beq.n	8004ab0 <HAL_I2C_Init+0x2d0>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	1e59      	subs	r1, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aae:	e051      	b.n	8004b54 <HAL_I2C_Init+0x374>
 8004ab0:	2304      	movs	r3, #4
 8004ab2:	e04f      	b.n	8004b54 <HAL_I2C_Init+0x374>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d111      	bne.n	8004ae0 <HAL_I2C_Init+0x300>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	1e58      	subs	r0, r3, #1
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6859      	ldr	r1, [r3, #4]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	005b      	lsls	r3, r3, #1
 8004ac8:	440b      	add	r3, r1
 8004aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ace:	3301      	adds	r3, #1
 8004ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	bf0c      	ite	eq
 8004ad8:	2301      	moveq	r3, #1
 8004ada:	2300      	movne	r3, #0
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	e012      	b.n	8004b06 <HAL_I2C_Init+0x326>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	1e58      	subs	r0, r3, #1
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6859      	ldr	r1, [r3, #4]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	440b      	add	r3, r1
 8004aee:	0099      	lsls	r1, r3, #2
 8004af0:	440b      	add	r3, r1
 8004af2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004af6:	3301      	adds	r3, #1
 8004af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	bf0c      	ite	eq
 8004b00:	2301      	moveq	r3, #1
 8004b02:	2300      	movne	r3, #0
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <HAL_I2C_Init+0x32e>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e022      	b.n	8004b54 <HAL_I2C_Init+0x374>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10e      	bne.n	8004b34 <HAL_I2C_Init+0x354>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	1e58      	subs	r0, r3, #1
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6859      	ldr	r1, [r3, #4]
 8004b1e:	460b      	mov	r3, r1
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	440b      	add	r3, r1
 8004b24:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b28:	3301      	adds	r3, #1
 8004b2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b32:	e00f      	b.n	8004b54 <HAL_I2C_Init+0x374>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	1e58      	subs	r0, r3, #1
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6859      	ldr	r1, [r3, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	440b      	add	r3, r1
 8004b42:	0099      	lsls	r1, r3, #2
 8004b44:	440b      	add	r3, r1
 8004b46:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b54:	6879      	ldr	r1, [r7, #4]
 8004b56:	6809      	ldr	r1, [r1, #0]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	69da      	ldr	r2, [r3, #28]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6911      	ldr	r1, [r2, #16]
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	68d2      	ldr	r2, [r2, #12]
 8004b8e:	4311      	orrs	r1, r2
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	6812      	ldr	r2, [r2, #0]
 8004b94:	430b      	orrs	r3, r1
 8004b96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	695a      	ldr	r2, [r3, #20]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	431a      	orrs	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f042 0201 	orr.w	r2, r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	10624dd3 	.word	0x10624dd3
 8004bf0:	000186a0 	.word	0x000186a0

08004bf4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b088      	sub	sp, #32
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c14:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c1c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004c1e:	7bfb      	ldrb	r3, [r7, #15]
 8004c20:	2b10      	cmp	r3, #16
 8004c22:	d003      	beq.n	8004c2c <HAL_I2C_EV_IRQHandler+0x38>
 8004c24:	7bfb      	ldrb	r3, [r7, #15]
 8004c26:	2b40      	cmp	r3, #64	; 0x40
 8004c28:	f040 80c1 	bne.w	8004dae <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10d      	bne.n	8004c62 <HAL_I2C_EV_IRQHandler+0x6e>
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004c4c:	d003      	beq.n	8004c56 <HAL_I2C_EV_IRQHandler+0x62>
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004c54:	d101      	bne.n	8004c5a <HAL_I2C_EV_IRQHandler+0x66>
 8004c56:	2301      	movs	r3, #1
 8004c58:	e000      	b.n	8004c5c <HAL_I2C_EV_IRQHandler+0x68>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	f000 8132 	beq.w	8004ec6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00c      	beq.n	8004c86 <HAL_I2C_EV_IRQHandler+0x92>
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	0a5b      	lsrs	r3, r3, #9
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d006      	beq.n	8004c86 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f001 fc95 	bl	80065a8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fd8f 	bl	80057a2 <I2C_Master_SB>
 8004c84:	e092      	b.n	8004dac <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	08db      	lsrs	r3, r3, #3
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d009      	beq.n	8004ca6 <HAL_I2C_EV_IRQHandler+0xb2>
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	0a5b      	lsrs	r3, r3, #9
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fe05 	bl	80058ae <I2C_Master_ADD10>
 8004ca4:	e082      	b.n	8004dac <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	085b      	lsrs	r3, r3, #1
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d009      	beq.n	8004cc6 <HAL_I2C_EV_IRQHandler+0xd2>
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	0a5b      	lsrs	r3, r3, #9
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 fe1f 	bl	8005902 <I2C_Master_ADDR>
 8004cc4:	e072      	b.n	8004dac <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	089b      	lsrs	r3, r3, #2
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d03b      	beq.n	8004d4a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ce0:	f000 80f3 	beq.w	8004eca <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	09db      	lsrs	r3, r3, #7
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00f      	beq.n	8004d10 <HAL_I2C_EV_IRQHandler+0x11c>
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	0a9b      	lsrs	r3, r3, #10
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d009      	beq.n	8004d10 <HAL_I2C_EV_IRQHandler+0x11c>
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	089b      	lsrs	r3, r3, #2
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d103      	bne.n	8004d10 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f9f3 	bl	80050f4 <I2C_MasterTransmit_TXE>
 8004d0e:	e04d      	b.n	8004dac <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	089b      	lsrs	r3, r3, #2
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 80d6 	beq.w	8004eca <HAL_I2C_EV_IRQHandler+0x2d6>
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	0a5b      	lsrs	r3, r3, #9
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 80cf 	beq.w	8004eca <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004d2c:	7bbb      	ldrb	r3, [r7, #14]
 8004d2e:	2b21      	cmp	r3, #33	; 0x21
 8004d30:	d103      	bne.n	8004d3a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 fa7d 	bl	8005232 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d38:	e0c7      	b.n	8004eca <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004d3a:	7bfb      	ldrb	r3, [r7, #15]
 8004d3c:	2b40      	cmp	r3, #64	; 0x40
 8004d3e:	f040 80c4 	bne.w	8004eca <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 faee 	bl	8005324 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d48:	e0bf      	b.n	8004eca <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d58:	f000 80b7 	beq.w	8004eca <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	099b      	lsrs	r3, r3, #6
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00f      	beq.n	8004d88 <HAL_I2C_EV_IRQHandler+0x194>
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	0a9b      	lsrs	r3, r3, #10
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d009      	beq.n	8004d88 <HAL_I2C_EV_IRQHandler+0x194>
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	089b      	lsrs	r3, r3, #2
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d103      	bne.n	8004d88 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 fb64 	bl	800544e <I2C_MasterReceive_RXNE>
 8004d86:	e011      	b.n	8004dac <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	089b      	lsrs	r3, r3, #2
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 809a 	beq.w	8004eca <HAL_I2C_EV_IRQHandler+0x2d6>
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	0a5b      	lsrs	r3, r3, #9
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 8093 	beq.w	8004eca <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 fc10 	bl	80055ca <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004daa:	e08e      	b.n	8004eca <HAL_I2C_EV_IRQHandler+0x2d6>
 8004dac:	e08d      	b.n	8004eca <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d004      	beq.n	8004dc0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	61fb      	str	r3, [r7, #28]
 8004dbe:	e007      	b.n	8004dd0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	085b      	lsrs	r3, r3, #1
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d012      	beq.n	8004e02 <HAL_I2C_EV_IRQHandler+0x20e>
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	0a5b      	lsrs	r3, r3, #9
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00c      	beq.n	8004e02 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d003      	beq.n	8004df8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004df8:	69b9      	ldr	r1, [r7, #24]
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 ffd2 	bl	8005da4 <I2C_Slave_ADDR>
 8004e00:	e066      	b.n	8004ed0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	091b      	lsrs	r3, r3, #4
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d009      	beq.n	8004e22 <HAL_I2C_EV_IRQHandler+0x22e>
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	0a5b      	lsrs	r3, r3, #9
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f001 f80c 	bl	8005e38 <I2C_Slave_STOPF>
 8004e20:	e056      	b.n	8004ed0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004e22:	7bbb      	ldrb	r3, [r7, #14]
 8004e24:	2b21      	cmp	r3, #33	; 0x21
 8004e26:	d002      	beq.n	8004e2e <HAL_I2C_EV_IRQHandler+0x23a>
 8004e28:	7bbb      	ldrb	r3, [r7, #14]
 8004e2a:	2b29      	cmp	r3, #41	; 0x29
 8004e2c:	d125      	bne.n	8004e7a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	09db      	lsrs	r3, r3, #7
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00f      	beq.n	8004e5a <HAL_I2C_EV_IRQHandler+0x266>
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	0a9b      	lsrs	r3, r3, #10
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d009      	beq.n	8004e5a <HAL_I2C_EV_IRQHandler+0x266>
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	089b      	lsrs	r3, r3, #2
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d103      	bne.n	8004e5a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 fee6 	bl	8005c24 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e58:	e039      	b.n	8004ece <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	089b      	lsrs	r3, r3, #2
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d033      	beq.n	8004ece <HAL_I2C_EV_IRQHandler+0x2da>
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	0a5b      	lsrs	r3, r3, #9
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d02d      	beq.n	8004ece <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 ff14 	bl	8005ca0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e78:	e029      	b.n	8004ece <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	099b      	lsrs	r3, r3, #6
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00f      	beq.n	8004ea6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	0a9b      	lsrs	r3, r3, #10
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d009      	beq.n	8004ea6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	089b      	lsrs	r3, r3, #2
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d103      	bne.n	8004ea6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 ff1f 	bl	8005ce2 <I2C_SlaveReceive_RXNE>
 8004ea4:	e014      	b.n	8004ed0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	089b      	lsrs	r3, r3, #2
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00e      	beq.n	8004ed0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	0a5b      	lsrs	r3, r3, #9
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d008      	beq.n	8004ed0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 ff4e 	bl	8005d60 <I2C_SlaveReceive_BTF>
 8004ec4:	e004      	b.n	8004ed0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004ec6:	bf00      	nop
 8004ec8:	e002      	b.n	8004ed0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004eca:	bf00      	nop
 8004ecc:	e000      	b.n	8004ed0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ece:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004ed0:	3720      	adds	r7, #32
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b08a      	sub	sp, #40	; 0x28
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ef8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	0a1b      	lsrs	r3, r3, #8
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00e      	beq.n	8004f24 <HAL_I2C_ER_IRQHandler+0x4e>
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	0a1b      	lsrs	r3, r3, #8
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d008      	beq.n	8004f24 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	f043 0301 	orr.w	r3, r3, #1
 8004f18:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f22:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004f24:	6a3b      	ldr	r3, [r7, #32]
 8004f26:	0a5b      	lsrs	r3, r3, #9
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00e      	beq.n	8004f4e <HAL_I2C_ER_IRQHandler+0x78>
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	0a1b      	lsrs	r3, r3, #8
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d008      	beq.n	8004f4e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	f043 0302 	orr.w	r3, r3, #2
 8004f42:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004f4c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	0a9b      	lsrs	r3, r3, #10
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d03f      	beq.n	8004fda <HAL_I2C_ER_IRQHandler+0x104>
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	0a1b      	lsrs	r3, r3, #8
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d039      	beq.n	8004fda <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004f66:	7efb      	ldrb	r3, [r7, #27]
 8004f68:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f78:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004f80:	7ebb      	ldrb	r3, [r7, #26]
 8004f82:	2b20      	cmp	r3, #32
 8004f84:	d112      	bne.n	8004fac <HAL_I2C_ER_IRQHandler+0xd6>
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10f      	bne.n	8004fac <HAL_I2C_ER_IRQHandler+0xd6>
 8004f8c:	7cfb      	ldrb	r3, [r7, #19]
 8004f8e:	2b21      	cmp	r3, #33	; 0x21
 8004f90:	d008      	beq.n	8004fa4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004f92:	7cfb      	ldrb	r3, [r7, #19]
 8004f94:	2b29      	cmp	r3, #41	; 0x29
 8004f96:	d005      	beq.n	8004fa4 <HAL_I2C_ER_IRQHandler+0xce>
 8004f98:	7cfb      	ldrb	r3, [r7, #19]
 8004f9a:	2b28      	cmp	r3, #40	; 0x28
 8004f9c:	d106      	bne.n	8004fac <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2b21      	cmp	r3, #33	; 0x21
 8004fa2:	d103      	bne.n	8004fac <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f001 f87b 	bl	80060a0 <I2C_Slave_AF>
 8004faa:	e016      	b.n	8004fda <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fb4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb8:	f043 0304 	orr.w	r3, r3, #4
 8004fbc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004fbe:	7efb      	ldrb	r3, [r7, #27]
 8004fc0:	2b10      	cmp	r3, #16
 8004fc2:	d002      	beq.n	8004fca <HAL_I2C_ER_IRQHandler+0xf4>
 8004fc4:	7efb      	ldrb	r3, [r7, #27]
 8004fc6:	2b40      	cmp	r3, #64	; 0x40
 8004fc8:	d107      	bne.n	8004fda <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fd8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	0adb      	lsrs	r3, r3, #11
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00e      	beq.n	8005004 <HAL_I2C_ER_IRQHandler+0x12e>
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	0a1b      	lsrs	r3, r3, #8
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d008      	beq.n	8005004 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	f043 0308 	orr.w	r3, r3, #8
 8004ff8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005002:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	2b00      	cmp	r3, #0
 8005008:	d008      	beq.n	800501c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	431a      	orrs	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f001 f8b4 	bl	8006184 <I2C_ITError>
  }
}
 800501c:	bf00      	nop
 800501e:	3728      	adds	r7, #40	; 0x28
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	460b      	mov	r3, r1
 800507e:	70fb      	strb	r3, [r7, #3]
 8005080:	4613      	mov	r3, r2
 8005082:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005102:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800510a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005110:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005116:	2b00      	cmp	r3, #0
 8005118:	d153      	bne.n	80051c2 <I2C_MasterTransmit_TXE+0xce>
 800511a:	7bfb      	ldrb	r3, [r7, #15]
 800511c:	2b21      	cmp	r3, #33	; 0x21
 800511e:	d150      	bne.n	80051c2 <I2C_MasterTransmit_TXE+0xce>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	2b08      	cmp	r3, #8
 8005124:	d01e      	beq.n	8005164 <I2C_MasterTransmit_TXE+0x70>
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	2b20      	cmp	r3, #32
 800512a:	d01b      	beq.n	8005164 <I2C_MasterTransmit_TXE+0x70>
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005132:	d017      	beq.n	8005164 <I2C_MasterTransmit_TXE+0x70>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005142:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2211      	movs	r2, #17
 8005148:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2220      	movs	r2, #32
 8005156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005162:	e062      	b.n	800522a <I2C_MasterTransmit_TXE+0x136>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005172:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005182:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2220      	movs	r2, #32
 800518e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b40      	cmp	r3, #64	; 0x40
 800519c:	d108      	bne.n	80051b0 <I2C_MasterTransmit_TXE+0xbc>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80051ae:	e03c      	b.n	800522a <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MemTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80051c0:	e033      	b.n	800522a <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MasterTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80051c2:	7bfb      	ldrb	r3, [r7, #15]
 80051c4:	2b21      	cmp	r3, #33	; 0x21
 80051c6:	d005      	beq.n	80051d4 <I2C_MasterTransmit_TXE+0xe0>
 80051c8:	7bbb      	ldrb	r3, [r7, #14]
 80051ca:	2b40      	cmp	r3, #64	; 0x40
 80051cc:	d12d      	bne.n	800522a <I2C_MasterTransmit_TXE+0x136>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80051ce:	7bfb      	ldrb	r3, [r7, #15]
 80051d0:	2b22      	cmp	r3, #34	; 0x22
 80051d2:	d12a      	bne.n	800522a <I2C_MasterTransmit_TXE+0x136>
  {
    if (hi2c->XferCount == 0U)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d8:	b29b      	uxth	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d108      	bne.n	80051f0 <I2C_MasterTransmit_TXE+0xfc>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ec:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80051ee:	e01c      	b.n	800522a <I2C_MasterTransmit_TXE+0x136>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b40      	cmp	r3, #64	; 0x40
 80051fa:	d103      	bne.n	8005204 <I2C_MasterTransmit_TXE+0x110>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 f891 	bl	8005324 <I2C_MemoryTransmit_TXE_BTF>
}
 8005202:	e012      	b.n	800522a <I2C_MasterTransmit_TXE+0x136>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	781a      	ldrb	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800521e:	b29b      	uxth	r3, r3
 8005220:	3b01      	subs	r3, #1
 8005222:	b29a      	uxth	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005228:	e7ff      	b.n	800522a <I2C_MasterTransmit_TXE+0x136>
 800522a:	bf00      	nop
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b084      	sub	sp, #16
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b21      	cmp	r3, #33	; 0x21
 800524a:	d167      	bne.n	800531c <I2C_MasterTransmit_BTF+0xea>
  {
    if (hi2c->XferCount != 0U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005250:	b29b      	uxth	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d012      	beq.n	800527c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	781a      	ldrb	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005270:	b29b      	uxth	r3, r3
 8005272:	3b01      	subs	r3, #1
 8005274:	b29a      	uxth	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800527a:	e04f      	b.n	800531c <I2C_MasterTransmit_BTF+0xea>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2b08      	cmp	r3, #8
 8005280:	d01e      	beq.n	80052c0 <I2C_MasterTransmit_BTF+0x8e>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2b20      	cmp	r3, #32
 8005286:	d01b      	beq.n	80052c0 <I2C_MasterTransmit_BTF+0x8e>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800528e:	d017      	beq.n	80052c0 <I2C_MasterTransmit_BTF+0x8e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800529e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2211      	movs	r2, #17
 80052a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2220      	movs	r2, #32
 80052b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->MasterTxCpltCallback(hi2c);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	4798      	blx	r3
}
 80052be:	e02d      	b.n	800531c <I2C_MasterTransmit_BTF+0xea>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052ce:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052de:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2220      	movs	r2, #32
 80052ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b40      	cmp	r3, #64	; 0x40
 80052f8:	d108      	bne.n	800530c <I2C_MasterTransmit_BTF+0xda>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MemTxCpltCallback(hi2c);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	4798      	blx	r3
}
 800530a:	e007      	b.n	800531c <I2C_MasterTransmit_BTF+0xea>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MasterTxCpltCallback(hi2c);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	4798      	blx	r3
}
 800531c:	bf00      	nop
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005332:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005338:	2b00      	cmp	r3, #0
 800533a:	d11d      	bne.n	8005378 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005340:	2b01      	cmp	r3, #1
 8005342:	d10b      	bne.n	800535c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005348:	b2da      	uxtb	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005354:	1c9a      	adds	r2, r3, #2
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800535a:	e074      	b.n	8005446 <I2C_MemoryTransmit_TXE_BTF+0x122>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005360:	b29b      	uxth	r3, r3
 8005362:	121b      	asrs	r3, r3, #8
 8005364:	b2da      	uxtb	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005370:	1c5a      	adds	r2, r3, #1
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005376:	e066      	b.n	8005446 <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 1U)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800537c:	2b01      	cmp	r3, #1
 800537e:	d10b      	bne.n	8005398 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005384:	b2da      	uxtb	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005390:	1c5a      	adds	r2, r3, #1
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005396:	e056      	b.n	8005446 <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 2U)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800539c:	2b02      	cmp	r3, #2
 800539e:	d152      	bne.n	8005446 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80053a0:	7bfb      	ldrb	r3, [r7, #15]
 80053a2:	2b22      	cmp	r3, #34	; 0x22
 80053a4:	d10d      	bne.n	80053c2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053b4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ba:	1c5a      	adds	r2, r3, #1
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	651a      	str	r2, [r3, #80]	; 0x50
}
 80053c0:	e041      	b.n	8005446 <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d015      	beq.n	80053f8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80053cc:	7bfb      	ldrb	r3, [r7, #15]
 80053ce:	2b21      	cmp	r3, #33	; 0x21
 80053d0:	d112      	bne.n	80053f8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d6:	781a      	ldrb	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	3b01      	subs	r3, #1
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80053f6:	e026      	b.n	8005446 <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d121      	bne.n	8005446 <I2C_MemoryTransmit_TXE_BTF+0x122>
 8005402:	7bfb      	ldrb	r3, [r7, #15]
 8005404:	2b21      	cmp	r3, #33	; 0x21
 8005406:	d11e      	bne.n	8005446 <I2C_MemoryTransmit_TXE_BTF+0x122>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005416:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005426:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2220      	movs	r2, #32
 8005432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->MemTxCpltCallback(hi2c);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	4798      	blx	r3
}
 8005446:	bf00      	nop
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b084      	sub	sp, #16
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b22      	cmp	r3, #34	; 0x22
 8005460:	f040 80af 	bne.w	80055c2 <I2C_MasterReceive_RXNE+0x174>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005468:	b29b      	uxth	r3, r3
 800546a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2b03      	cmp	r3, #3
 8005470:	d921      	bls.n	80054b6 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	691a      	ldr	r2, [r3, #16]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547c:	b2d2      	uxtb	r2, r2
 800547e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005484:	1c5a      	adds	r2, r3, #1
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800548e:	b29b      	uxth	r3, r3
 8005490:	3b01      	subs	r3, #1
 8005492:	b29a      	uxth	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800549c:	b29b      	uxth	r3, r3
 800549e:	2b03      	cmp	r3, #3
 80054a0:	f040 808f 	bne.w	80055c2 <I2C_MasterReceive_RXNE+0x174>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	685a      	ldr	r2, [r3, #4]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054b2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80054b4:	e085      	b.n	80055c2 <I2C_MasterReceive_RXNE+0x174>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d078      	beq.n	80055b0 <I2C_MasterReceive_RXNE+0x162>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d002      	beq.n	80054ca <I2C_MasterReceive_RXNE+0x7c>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d172      	bne.n	80055b0 <I2C_MasterReceive_RXNE+0x162>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f001 f83a 	bl	8006544 <I2C_WaitOnSTOPRequestThroughIT>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d144      	bne.n	8005560 <I2C_MasterReceive_RXNE+0x112>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054e4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054f4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	691a      	ldr	r2, [r3, #16]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005500:	b2d2      	uxtb	r2, r2
 8005502:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	1c5a      	adds	r2, r3, #1
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005512:	b29b      	uxth	r3, r3
 8005514:	3b01      	subs	r3, #1
 8005516:	b29a      	uxth	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2220      	movs	r2, #32
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b40      	cmp	r3, #64	; 0x40
 800552e:	d10b      	bne.n	8005548 <I2C_MasterReceive_RXNE+0xfa>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MemRxCpltCallback(hi2c);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005546:	e03c      	b.n	80055c2 <I2C_MasterReceive_RXNE+0x174>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2212      	movs	r2, #18
 8005554:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MasterRxCpltCallback(hi2c);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800555e:	e030      	b.n	80055c2 <I2C_MasterReceive_RXNE+0x174>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800556e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	691a      	ldr	r2, [r3, #16]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557a:	b2d2      	uxtb	r2, r2
 800557c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005582:	1c5a      	adds	r2, r3, #1
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800558c:	b29b      	uxth	r3, r3
 800558e:	3b01      	subs	r3, #1
 8005590:	b29a      	uxth	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2220      	movs	r2, #32
 800559a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCallback(hi2c);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80055ae:	e008      	b.n	80055c2 <I2C_MasterReceive_RXNE+0x174>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055be:	605a      	str	r2, [r3, #4]
}
 80055c0:	e7ff      	b.n	80055c2 <I2C_MasterReceive_RXNE+0x174>
 80055c2:	bf00      	nop
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b084      	sub	sp, #16
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055dc:	b29b      	uxth	r3, r3
 80055de:	2b04      	cmp	r3, #4
 80055e0:	d11b      	bne.n	800561a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055f0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	691a      	ldr	r2, [r3, #16]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	b2d2      	uxtb	r2, r2
 80055fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005604:	1c5a      	adds	r2, r3, #1
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800560e:	b29b      	uxth	r3, r3
 8005610:	3b01      	subs	r3, #1
 8005612:	b29a      	uxth	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005618:	e0bf      	b.n	800579a <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 3U)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800561e:	b29b      	uxth	r3, r3
 8005620:	2b03      	cmp	r3, #3
 8005622:	d129      	bne.n	8005678 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005632:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2b04      	cmp	r3, #4
 8005638:	d00a      	beq.n	8005650 <I2C_MasterReceive_BTF+0x86>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2b02      	cmp	r3, #2
 800563e:	d007      	beq.n	8005650 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800564e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	691a      	ldr	r2, [r3, #16]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565a:	b2d2      	uxtb	r2, r2
 800565c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005662:	1c5a      	adds	r2, r3, #1
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566c:	b29b      	uxth	r3, r3
 800566e:	3b01      	subs	r3, #1
 8005670:	b29a      	uxth	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005676:	e090      	b.n	800579a <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 2U)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800567c:	b29b      	uxth	r3, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	d178      	bne.n	8005774 <I2C_MasterReceive_BTF+0x1aa>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d002      	beq.n	800568e <I2C_MasterReceive_BTF+0xc4>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2b10      	cmp	r3, #16
 800568c:	d108      	bne.n	80056a0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	e019      	b.n	80056d4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	d002      	beq.n	80056ac <I2C_MasterReceive_BTF+0xe2>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d108      	bne.n	80056be <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	e00a      	b.n	80056d4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2b10      	cmp	r3, #16
 80056c2:	d007      	beq.n	80056d4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056d2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	691a      	ldr	r2, [r3, #16]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056de:	b2d2      	uxtb	r2, r2
 80056e0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	3b01      	subs	r3, #1
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	691a      	ldr	r2, [r3, #16]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005704:	b2d2      	uxtb	r2, r2
 8005706:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570c:	1c5a      	adds	r2, r3, #1
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005716:	b29b      	uxth	r3, r3
 8005718:	3b01      	subs	r3, #1
 800571a:	b29a      	uxth	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800572e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2220      	movs	r2, #32
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b40      	cmp	r3, #64	; 0x40
 8005742:	d10b      	bne.n	800575c <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MemRxCpltCallback(hi2c);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	4798      	blx	r3
}
 800575a:	e01e      	b.n	800579a <I2C_MasterReceive_BTF+0x1d0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2212      	movs	r2, #18
 8005768:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MasterRxCpltCallback(hi2c);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	4798      	blx	r3
}
 8005772:	e012      	b.n	800579a <I2C_MasterReceive_BTF+0x1d0>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	691a      	ldr	r2, [r3, #16]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	b2d2      	uxtb	r2, r2
 8005780:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005790:	b29b      	uxth	r3, r3
 8005792:	3b01      	subs	r3, #1
 8005794:	b29a      	uxth	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800579a:	bf00      	nop
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b083      	sub	sp, #12
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b40      	cmp	r3, #64	; 0x40
 80057b4:	d117      	bne.n	80057e6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d109      	bne.n	80057d2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	461a      	mov	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80057ce:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80057d0:	e067      	b.n	80058a2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	f043 0301 	orr.w	r3, r3, #1
 80057dc:	b2da      	uxtb	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	611a      	str	r2, [r3, #16]
}
 80057e4:	e05d      	b.n	80058a2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057ee:	d133      	bne.n	8005858 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b21      	cmp	r3, #33	; 0x21
 80057fa:	d109      	bne.n	8005810 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005800:	b2db      	uxtb	r3, r3
 8005802:	461a      	mov	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800580c:	611a      	str	r2, [r3, #16]
 800580e:	e008      	b.n	8005822 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005814:	b2db      	uxtb	r3, r3
 8005816:	f043 0301 	orr.w	r3, r3, #1
 800581a:	b2da      	uxtb	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005826:	2b00      	cmp	r3, #0
 8005828:	d004      	beq.n	8005834 <I2C_Master_SB+0x92>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800582e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005830:	2b00      	cmp	r3, #0
 8005832:	d108      	bne.n	8005846 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005838:	2b00      	cmp	r3, #0
 800583a:	d032      	beq.n	80058a2 <I2C_Master_SB+0x100>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005842:	2b00      	cmp	r3, #0
 8005844:	d02d      	beq.n	80058a2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005854:	605a      	str	r2, [r3, #4]
}
 8005856:	e024      	b.n	80058a2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10e      	bne.n	800587e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005864:	b29b      	uxth	r3, r3
 8005866:	11db      	asrs	r3, r3, #7
 8005868:	b2db      	uxtb	r3, r3
 800586a:	f003 0306 	and.w	r3, r3, #6
 800586e:	b2db      	uxtb	r3, r3
 8005870:	f063 030f 	orn	r3, r3, #15
 8005874:	b2da      	uxtb	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	611a      	str	r2, [r3, #16]
}
 800587c:	e011      	b.n	80058a2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005882:	2b01      	cmp	r3, #1
 8005884:	d10d      	bne.n	80058a2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588a:	b29b      	uxth	r3, r3
 800588c:	11db      	asrs	r3, r3, #7
 800588e:	b2db      	uxtb	r3, r3
 8005890:	f003 0306 	and.w	r3, r3, #6
 8005894:	b2db      	uxtb	r3, r3
 8005896:	f063 030e 	orn	r3, r3, #14
 800589a:	b2da      	uxtb	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	611a      	str	r2, [r3, #16]
}
 80058a2:	bf00      	nop
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b083      	sub	sp, #12
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d004      	beq.n	80058d4 <I2C_Master_ADD10+0x26>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d108      	bne.n	80058e6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00c      	beq.n	80058f6 <I2C_Master_ADD10+0x48>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d007      	beq.n	80058f6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058f4:	605a      	str	r2, [r3, #4]
  }
}
 80058f6:	bf00      	nop
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005902:	b480      	push	{r7}
 8005904:	b091      	sub	sp, #68	; 0x44
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005910:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005918:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005926:	b2db      	uxtb	r3, r3
 8005928:	2b22      	cmp	r3, #34	; 0x22
 800592a:	f040 8169 	bne.w	8005c00 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10f      	bne.n	8005956 <I2C_Master_ADDR+0x54>
 8005936:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800593a:	2b40      	cmp	r3, #64	; 0x40
 800593c:	d10b      	bne.n	8005956 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800593e:	2300      	movs	r3, #0
 8005940:	633b      	str	r3, [r7, #48]	; 0x30
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	633b      	str	r3, [r7, #48]	; 0x30
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	633b      	str	r3, [r7, #48]	; 0x30
 8005952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005954:	e160      	b.n	8005c18 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800595a:	2b00      	cmp	r3, #0
 800595c:	d11d      	bne.n	800599a <I2C_Master_ADDR+0x98>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005966:	d118      	bne.n	800599a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005968:	2300      	movs	r3, #0
 800596a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800597c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800598c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005992:	1c5a      	adds	r2, r3, #1
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	651a      	str	r2, [r3, #80]	; 0x50
 8005998:	e13e      	b.n	8005c18 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800599e:	b29b      	uxth	r3, r3
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d113      	bne.n	80059cc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059a4:	2300      	movs	r3, #0
 80059a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80059b8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059c8:	601a      	str	r2, [r3, #0]
 80059ca:	e115      	b.n	8005bf8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	f040 808a 	bne.w	8005aec <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80059d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059de:	d137      	bne.n	8005a50 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ee:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059fe:	d113      	bne.n	8005a28 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a0e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a10:	2300      	movs	r3, #0
 8005a12:	627b      	str	r3, [r7, #36]	; 0x24
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	627b      	str	r3, [r7, #36]	; 0x24
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	e0e7      	b.n	8005bf8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a28:	2300      	movs	r3, #0
 8005a2a:	623b      	str	r3, [r7, #32]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	623b      	str	r3, [r7, #32]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	623b      	str	r3, [r7, #32]
 8005a3c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a4c:	601a      	str	r2, [r3, #0]
 8005a4e:	e0d3      	b.n	8005bf8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a52:	2b08      	cmp	r3, #8
 8005a54:	d02e      	beq.n	8005ab4 <I2C_Master_ADDR+0x1b2>
 8005a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a58:	2b20      	cmp	r3, #32
 8005a5a:	d02b      	beq.n	8005ab4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a5e:	2b12      	cmp	r3, #18
 8005a60:	d102      	bne.n	8005a68 <I2C_Master_ADDR+0x166>
 8005a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d125      	bne.n	8005ab4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6a:	2b04      	cmp	r3, #4
 8005a6c:	d00e      	beq.n	8005a8c <I2C_Master_ADDR+0x18a>
 8005a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d00b      	beq.n	8005a8c <I2C_Master_ADDR+0x18a>
 8005a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a76:	2b10      	cmp	r3, #16
 8005a78:	d008      	beq.n	8005a8c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a88:	601a      	str	r2, [r3, #0]
 8005a8a:	e007      	b.n	8005a9c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a9a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	61fb      	str	r3, [r7, #28]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	61fb      	str	r3, [r7, #28]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	61fb      	str	r3, [r7, #28]
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	e0a1      	b.n	8005bf8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ac2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	61bb      	str	r3, [r7, #24]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	61bb      	str	r3, [r7, #24]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	61bb      	str	r3, [r7, #24]
 8005ad8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ae8:	601a      	str	r2, [r3, #0]
 8005aea:	e085      	b.n	8005bf8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d14d      	bne.n	8005b92 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af8:	2b04      	cmp	r3, #4
 8005afa:	d016      	beq.n	8005b2a <I2C_Master_ADDR+0x228>
 8005afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d013      	beq.n	8005b2a <I2C_Master_ADDR+0x228>
 8005b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b04:	2b10      	cmp	r3, #16
 8005b06:	d010      	beq.n	8005b2a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b16:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	e007      	b.n	8005b3a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b38:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b48:	d117      	bne.n	8005b7a <I2C_Master_ADDR+0x278>
 8005b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b50:	d00b      	beq.n	8005b6a <I2C_Master_ADDR+0x268>
 8005b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d008      	beq.n	8005b6a <I2C_Master_ADDR+0x268>
 8005b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5a:	2b08      	cmp	r3, #8
 8005b5c:	d005      	beq.n	8005b6a <I2C_Master_ADDR+0x268>
 8005b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b60:	2b10      	cmp	r3, #16
 8005b62:	d002      	beq.n	8005b6a <I2C_Master_ADDR+0x268>
 8005b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b66:	2b20      	cmp	r3, #32
 8005b68:	d107      	bne.n	8005b7a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b78:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	617b      	str	r3, [r7, #20]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	695b      	ldr	r3, [r3, #20]
 8005b84:	617b      	str	r3, [r7, #20]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	617b      	str	r3, [r7, #20]
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	e032      	b.n	8005bf8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ba0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bb0:	d117      	bne.n	8005be2 <I2C_Master_ADDR+0x2e0>
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005bb8:	d00b      	beq.n	8005bd2 <I2C_Master_ADDR+0x2d0>
 8005bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d008      	beq.n	8005bd2 <I2C_Master_ADDR+0x2d0>
 8005bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc2:	2b08      	cmp	r3, #8
 8005bc4:	d005      	beq.n	8005bd2 <I2C_Master_ADDR+0x2d0>
 8005bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc8:	2b10      	cmp	r3, #16
 8005bca:	d002      	beq.n	8005bd2 <I2C_Master_ADDR+0x2d0>
 8005bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bce:	2b20      	cmp	r3, #32
 8005bd0:	d107      	bne.n	8005be2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005be0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005be2:	2300      	movs	r3, #0
 8005be4:	613b      	str	r3, [r7, #16]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	613b      	str	r3, [r7, #16]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	613b      	str	r3, [r7, #16]
 8005bf6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005bfe:	e00b      	b.n	8005c18 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c00:	2300      	movs	r3, #0
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	60fb      	str	r3, [r7, #12]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	60fb      	str	r3, [r7, #12]
 8005c14:	68fb      	ldr	r3, [r7, #12]
}
 8005c16:	e7ff      	b.n	8005c18 <I2C_Master_ADDR+0x316>
 8005c18:	bf00      	nop
 8005c1a:	3744      	adds	r7, #68	; 0x44
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c32:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d02c      	beq.n	8005c98 <I2C_SlaveTransmit_TXE+0x74>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	781a      	ldrb	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4e:	1c5a      	adds	r2, r3, #1
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d115      	bne.n	8005c98 <I2C_SlaveTransmit_TXE+0x74>
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
 8005c6e:	2b29      	cmp	r3, #41	; 0x29
 8005c70:	d112      	bne.n	8005c98 <I2C_SlaveTransmit_TXE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c80:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2221      	movs	r2, #33	; 0x21
 8005c86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2228      	movs	r2, #40	; 0x28
 8005c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	4798      	blx	r3
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005c98:	bf00      	nop
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d011      	beq.n	8005cd6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb6:	781a      	ldrb	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc2:	1c5a      	adds	r2, r3, #1
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005cd6:	bf00      	nop
 8005cd8:	370c      	adds	r7, #12
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b084      	sub	sp, #16
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d02d      	beq.n	8005d58 <I2C_SlaveReceive_RXNE+0x76>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	691a      	ldr	r2, [r3, #16]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d06:	b2d2      	uxtb	r2, r2
 8005d08:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0e:	1c5a      	adds	r2, r3, #1
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d115      	bne.n	8005d58 <I2C_SlaveReceive_RXNE+0x76>
 8005d2c:	7bfb      	ldrb	r3, [r7, #15]
 8005d2e:	2b2a      	cmp	r3, #42	; 0x2a
 8005d30:	d112      	bne.n	8005d58 <I2C_SlaveReceive_RXNE+0x76>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d40:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2222      	movs	r2, #34	; 0x22
 8005d46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2228      	movs	r2, #40	; 0x28
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	4798      	blx	r3
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005d58:	bf00      	nop
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d012      	beq.n	8005d98 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	691a      	ldr	r2, [r3, #16]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7c:	b2d2      	uxtb	r2, r2
 8005d7e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d84:	1c5a      	adds	r2, r3, #1
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	3b01      	subs	r3, #1
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005dae:	2300      	movs	r3, #0
 8005db0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005dbe:	2b28      	cmp	r3, #40	; 0x28
 8005dc0:	d127      	bne.n	8005e12 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dd0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	089b      	lsrs	r3, r3, #2
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005dde:	2301      	movs	r3, #1
 8005de0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	09db      	lsrs	r3, r3, #7
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d103      	bne.n	8005df6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	81bb      	strh	r3, [r7, #12]
 8005df4:	e002      	b.n	8005dfc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e08:	89ba      	ldrh	r2, [r7, #12]
 8005e0a:	7bf9      	ldrb	r1, [r7, #15]
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	4798      	blx	r3
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005e10:	e00e      	b.n	8005e30 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e12:	2300      	movs	r3, #0
 8005e14:	60bb      	str	r3, [r7, #8]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	60bb      	str	r3, [r7, #8]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	60bb      	str	r3, [r7, #8]
 8005e26:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005e30:	bf00      	nop
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e46:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e56:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60bb      	str	r3, [r7, #8]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	60bb      	str	r3, [r7, #8]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f042 0201 	orr.w	r2, r2, #1
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e84:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e94:	d172      	bne.n	8005f7c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005e96:	7bfb      	ldrb	r3, [r7, #15]
 8005e98:	2b22      	cmp	r3, #34	; 0x22
 8005e9a:	d002      	beq.n	8005ea2 <I2C_Slave_STOPF+0x6a>
 8005e9c:	7bfb      	ldrb	r3, [r7, #15]
 8005e9e:	2b2a      	cmp	r3, #42	; 0x2a
 8005ea0:	d135      	bne.n	8005f0e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d005      	beq.n	8005ec6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebe:	f043 0204 	orr.w	r2, r3, #4
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ed4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7fd ff1e 	bl	8003d1c <HAL_DMA_GetState>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d049      	beq.n	8005f7a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eea:	4a6b      	ldr	r2, [pc, #428]	; (8006098 <I2C_Slave_STOPF+0x260>)
 8005eec:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7fd fd66 	bl	80039c4 <HAL_DMA_Abort_IT>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d03d      	beq.n	8005f7a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f08:	4610      	mov	r0, r2
 8005f0a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005f0c:	e035      	b.n	8005f7a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d005      	beq.n	8005f32 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	f043 0204 	orr.w	r2, r3, #4
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f40:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7fd fee8 	bl	8003d1c <HAL_DMA_GetState>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d014      	beq.n	8005f7c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f56:	4a50      	ldr	r2, [pc, #320]	; (8006098 <I2C_Slave_STOPF+0x260>)
 8005f58:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7fd fd30 	bl	80039c4 <HAL_DMA_Abort_IT>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d008      	beq.n	8005f7c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f74:	4610      	mov	r0, r2
 8005f76:	4798      	blx	r3
 8005f78:	e000      	b.n	8005f7c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005f7a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d03e      	beq.n	8006004 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	f003 0304 	and.w	r3, r3, #4
 8005f90:	2b04      	cmp	r3, #4
 8005f92:	d112      	bne.n	8005fba <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	691a      	ldr	r2, [r3, #16]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9e:	b2d2      	uxtb	r2, r2
 8005fa0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa6:	1c5a      	adds	r2, r3, #1
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc4:	2b40      	cmp	r3, #64	; 0x40
 8005fc6:	d112      	bne.n	8005fee <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	691a      	ldr	r2, [r3, #16]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd2:	b2d2      	uxtb	r2, r2
 8005fd4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fda:	1c5a      	adds	r2, r3, #1
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d005      	beq.n	8006004 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffc:	f043 0204 	orr.w	r2, r3, #4
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006008:	2b00      	cmp	r3, #0
 800600a:	d003      	beq.n	8006014 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 f8b9 	bl	8006184 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006012:	e03c      	b.n	800608e <I2C_Slave_STOPF+0x256>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006014:	7bfb      	ldrb	r3, [r7, #15]
 8006016:	2b2a      	cmp	r3, #42	; 0x2a
 8006018:	d10a      	bne.n	8006030 <I2C_Slave_STOPF+0x1f8>
      hi2c->PreviousState = I2C_STATE_NONE;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2228      	movs	r2, #40	; 0x28
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->SlaveRxCpltCallback(hi2c);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	4798      	blx	r3
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006036:	b2db      	uxtb	r3, r3
 8006038:	2b28      	cmp	r3, #40	; 0x28
 800603a:	d112      	bne.n	8006062 <I2C_Slave_STOPF+0x22a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a17      	ldr	r2, [pc, #92]	; (800609c <I2C_Slave_STOPF+0x264>)
 8006040:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2220      	movs	r2, #32
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ListenCpltCallback(hi2c);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	4798      	blx	r3
}
 8006060:	e015      	b.n	800608e <I2C_Slave_STOPF+0x256>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006066:	2b22      	cmp	r3, #34	; 0x22
 8006068:	d002      	beq.n	8006070 <I2C_Slave_STOPF+0x238>
 800606a:	7bfb      	ldrb	r3, [r7, #15]
 800606c:	2b22      	cmp	r3, #34	; 0x22
 800606e:	d10e      	bne.n	800608e <I2C_Slave_STOPF+0x256>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2220      	movs	r2, #32
 800607a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->SlaveRxCpltCallback(hi2c);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	4798      	blx	r3
}
 800608e:	bf00      	nop
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	080063f1 	.word	0x080063f1
 800609c:	ffff0000 	.word	0xffff0000

080060a0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ae:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2b08      	cmp	r3, #8
 80060ba:	d002      	beq.n	80060c2 <I2C_Slave_AF+0x22>
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	2b20      	cmp	r3, #32
 80060c0:	d12a      	bne.n	8006118 <I2C_Slave_AF+0x78>
 80060c2:	7bfb      	ldrb	r3, [r7, #15]
 80060c4:	2b28      	cmp	r3, #40	; 0x28
 80060c6:	d127      	bne.n	8006118 <I2C_Slave_AF+0x78>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a2d      	ldr	r2, [pc, #180]	; (8006180 <I2C_Slave_AF+0xe0>)
 80060cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	685a      	ldr	r2, [r3, #4]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80060dc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80060e6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060f6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2220      	movs	r2, #32
 8006102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	4798      	blx	r3
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006116:	e02f      	b.n	8006178 <I2C_Slave_AF+0xd8>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006118:	7bfb      	ldrb	r3, [r7, #15]
 800611a:	2b21      	cmp	r3, #33	; 0x21
 800611c:	d127      	bne.n	800616e <I2C_Slave_AF+0xce>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a17      	ldr	r2, [pc, #92]	; (8006180 <I2C_Slave_AF+0xe0>)
 8006122:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2221      	movs	r2, #33	; 0x21
 8006128:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2220      	movs	r2, #32
 800612e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	685a      	ldr	r2, [r3, #4]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006148:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006152:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006162:	601a      	str	r2, [r3, #0]
    hi2c->SlaveTxCpltCallback(hi2c);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	4798      	blx	r3
}
 800616c:	e004      	b.n	8006178 <I2C_Slave_AF+0xd8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006176:	615a      	str	r2, [r3, #20]
}
 8006178:	bf00      	nop
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	ffff0000 	.word	0xffff0000

08006184 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006192:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800619a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800619c:	7bbb      	ldrb	r3, [r7, #14]
 800619e:	2b10      	cmp	r3, #16
 80061a0:	d002      	beq.n	80061a8 <I2C_ITError+0x24>
 80061a2:	7bbb      	ldrb	r3, [r7, #14]
 80061a4:	2b40      	cmp	r3, #64	; 0x40
 80061a6:	d10a      	bne.n	80061be <I2C_ITError+0x3a>
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
 80061aa:	2b22      	cmp	r3, #34	; 0x22
 80061ac:	d107      	bne.n	80061be <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061bc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80061be:	7bfb      	ldrb	r3, [r7, #15]
 80061c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80061c4:	2b28      	cmp	r3, #40	; 0x28
 80061c6:	d107      	bne.n	80061d8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2228      	movs	r2, #40	; 0x28
 80061d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80061d6:	e015      	b.n	8006204 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061e6:	d00a      	beq.n	80061fe <I2C_ITError+0x7a>
 80061e8:	7bfb      	ldrb	r3, [r7, #15]
 80061ea:	2b60      	cmp	r3, #96	; 0x60
 80061ec:	d007      	beq.n	80061fe <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2220      	movs	r2, #32
 80061f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800620e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006212:	d162      	bne.n	80062da <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006222:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006228:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b01      	cmp	r3, #1
 8006230:	d020      	beq.n	8006274 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006236:	4a6c      	ldr	r2, [pc, #432]	; (80063e8 <I2C_ITError+0x264>)
 8006238:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800623e:	4618      	mov	r0, r3
 8006240:	f7fd fbc0 	bl	80039c4 <HAL_DMA_Abort_IT>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	f000 808b 	beq.w	8006362 <I2C_ITError+0x1de>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f022 0201 	bic.w	r2, r2, #1
 800625a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2220      	movs	r2, #32
 8006260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800626e:	4610      	mov	r0, r2
 8006270:	4798      	blx	r3
 8006272:	e076      	b.n	8006362 <I2C_ITError+0x1de>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006278:	4a5b      	ldr	r2, [pc, #364]	; (80063e8 <I2C_ITError+0x264>)
 800627a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006280:	4618      	mov	r0, r3
 8006282:	f7fd fb9f 	bl	80039c4 <HAL_DMA_Abort_IT>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d06a      	beq.n	8006362 <I2C_ITError+0x1de>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006296:	2b40      	cmp	r3, #64	; 0x40
 8006298:	d10b      	bne.n	80062b2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	691a      	ldr	r2, [r3, #16]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a4:	b2d2      	uxtb	r2, r2
 80062a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ac:	1c5a      	adds	r2, r3, #1
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f022 0201 	bic.w	r2, r2, #1
 80062c0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2220      	movs	r2, #32
 80062c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80062d4:	4610      	mov	r0, r2
 80062d6:	4798      	blx	r3
 80062d8:	e043      	b.n	8006362 <I2C_ITError+0x1de>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b60      	cmp	r3, #96	; 0x60
 80062e4:	d126      	bne.n	8006334 <I2C_ITError+0x1b0>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2220      	movs	r2, #32
 80062ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fe:	2b40      	cmp	r3, #64	; 0x40
 8006300:	d10b      	bne.n	800631a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	691a      	ldr	r2, [r3, #16]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630c:	b2d2      	uxtb	r2, r2
 800630e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006314:	1c5a      	adds	r2, r3, #1
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f022 0201 	bic.w	r2, r2, #1
 8006328:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	4798      	blx	r3
 8006332:	e016      	b.n	8006362 <I2C_ITError+0x1de>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633e:	2b40      	cmp	r3, #64	; 0x40
 8006340:	d10b      	bne.n	800635a <I2C_ITError+0x1d6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	691a      	ldr	r2, [r3, #16]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634c:	b2d2      	uxtb	r2, r2
 800634e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006354:	1c5a      	adds	r2, r3, #1
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	4798      	blx	r3
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006366:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10e      	bne.n	8006390 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006378:	2b00      	cmp	r3, #0
 800637a:	d109      	bne.n	8006390 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006382:	2b00      	cmp	r3, #0
 8006384:	d104      	bne.n	8006390 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800638c:	2b00      	cmp	r3, #0
 800638e:	d007      	beq.n	80063a0 <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	685a      	ldr	r2, [r3, #4]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800639e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063a6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ac:	f003 0304 	and.w	r3, r3, #4
 80063b0:	2b04      	cmp	r3, #4
 80063b2:	d114      	bne.n	80063de <I2C_ITError+0x25a>
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
 80063b6:	2b28      	cmp	r3, #40	; 0x28
 80063b8:	d111      	bne.n	80063de <I2C_ITError+0x25a>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a0b      	ldr	r2, [pc, #44]	; (80063ec <I2C_ITError+0x268>)
 80063be:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2220      	movs	r2, #32
 80063ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	4798      	blx	r3
#else
    HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80063de:	bf00      	nop
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	080063f1 	.word	0x080063f1
 80063ec:	ffff0000 	.word	0xffff0000

080063f0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063f8:	2300      	movs	r3, #0
 80063fa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006400:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006408:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800640a:	4b4c      	ldr	r3, [pc, #304]	; (800653c <I2C_DMAAbort+0x14c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	08db      	lsrs	r3, r3, #3
 8006410:	4a4b      	ldr	r2, [pc, #300]	; (8006540 <I2C_DMAAbort+0x150>)
 8006412:	fba2 2303 	umull	r2, r3, r2, r3
 8006416:	0a1a      	lsrs	r2, r3, #8
 8006418:	4613      	mov	r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4413      	add	r3, r2
 800641e:	00da      	lsls	r2, r3, #3
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d106      	bne.n	8006438 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642e:	f043 0220 	orr.w	r2, r3, #32
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006436:	e00a      	b.n	800644e <I2C_DMAAbort+0x5e>
    }
    count--;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	3b01      	subs	r3, #1
 800643c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800644c:	d0ea      	beq.n	8006424 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800645a:	2200      	movs	r2, #0
 800645c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006462:	2b00      	cmp	r3, #0
 8006464:	d003      	beq.n	800646e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646a:	2200      	movs	r2, #0
 800646c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800647c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	2200      	movs	r2, #0
 8006482:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006488:	2b00      	cmp	r3, #0
 800648a:	d003      	beq.n	8006494 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006490:	2200      	movs	r2, #0
 8006492:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006498:	2b00      	cmp	r3, #0
 800649a:	d003      	beq.n	80064a4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a0:	2200      	movs	r2, #0
 80064a2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 0201 	bic.w	r2, r2, #1
 80064b2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	2b60      	cmp	r3, #96	; 0x60
 80064be:	d10f      	bne.n	80064e0 <I2C_DMAAbort+0xf0>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	2220      	movs	r2, #32
 80064c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	2200      	movs	r2, #0
 80064d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064da:	6978      	ldr	r0, [r7, #20]
 80064dc:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80064de:	e028      	b.n	8006532 <I2C_DMAAbort+0x142>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80064e0:	7cfb      	ldrb	r3, [r7, #19]
 80064e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80064e6:	2b28      	cmp	r3, #40	; 0x28
 80064e8:	d117      	bne.n	800651a <I2C_DMAAbort+0x12a>
      __HAL_I2C_ENABLE(hi2c);
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f042 0201 	orr.w	r2, r2, #1
 80064f8:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006508:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	2200      	movs	r2, #0
 800650e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	2228      	movs	r2, #40	; 0x28
 8006514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006518:	e007      	b.n	800652a <I2C_DMAAbort+0x13a>
      hi2c->State = HAL_I2C_STATE_READY;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	2220      	movs	r2, #32
 800651e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCallback(hi2c);
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800652e:	6978      	ldr	r0, [r7, #20]
 8006530:	4798      	blx	r3
}
 8006532:	bf00      	nop
 8006534:	3718      	adds	r7, #24
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	20000000 	.word	0x20000000
 8006540:	14f8b589 	.word	0x14f8b589

08006544 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800654c:	2300      	movs	r3, #0
 800654e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006550:	4b13      	ldr	r3, [pc, #76]	; (80065a0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	08db      	lsrs	r3, r3, #3
 8006556:	4a13      	ldr	r2, [pc, #76]	; (80065a4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006558:	fba2 2303 	umull	r2, r3, r2, r3
 800655c:	0a1a      	lsrs	r2, r3, #8
 800655e:	4613      	mov	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4413      	add	r3, r2
 8006564:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	3b01      	subs	r3, #1
 800656a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d107      	bne.n	8006582 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006576:	f043 0220 	orr.w	r2, r3, #32
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e008      	b.n	8006594 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800658c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006590:	d0e9      	beq.n	8006566 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3714      	adds	r7, #20
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr
 80065a0:	20000000 	.word	0x20000000
 80065a4:	14f8b589 	.word	0x14f8b589

080065a8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80065b8:	d103      	bne.n	80065c2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80065c0:	e007      	b.n	80065d2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80065ca:	d102      	bne.n	80065d2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2208      	movs	r2, #8
 80065d0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80065d2:	bf00      	nop
 80065d4:	370c      	adds	r7, #12
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
	...

080065e0 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80065e4:	4b06      	ldr	r3, [pc, #24]	; (8006600 <HAL_PWR_PVD_IRQHandler+0x20>)
 80065e6:	695b      	ldr	r3, [r3, #20]
 80065e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d005      	beq.n	80065fc <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80065f0:	f000 f808 	bl	8006604 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80065f4:	4b02      	ldr	r3, [pc, #8]	; (8006600 <HAL_PWR_PVD_IRQHandler+0x20>)
 80065f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80065fa:	615a      	str	r2, [r3, #20]
  }
}
 80065fc:	bf00      	nop
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	40013c00 	.word	0x40013c00

08006604 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8006604:	b480      	push	{r7}
 8006606:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8006608:	bf00      	nop
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
	...

08006614 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e314      	b.n	8006c50 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b0f      	cmp	r3, #15
 800662c:	d903      	bls.n	8006636 <HAL_RCC_OscConfig+0x22>
 800662e:	21e6      	movs	r1, #230	; 0xe6
 8006630:	4897      	ldr	r0, [pc, #604]	; (8006890 <HAL_RCC_OscConfig+0x27c>)
 8006632:	f7fb fa66 	bl	8001b02 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b00      	cmp	r3, #0
 8006640:	f000 8088 	beq.w	8006754 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00d      	beq.n	8006668 <HAL_RCC_OscConfig+0x54>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006654:	d008      	beq.n	8006668 <HAL_RCC_OscConfig+0x54>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800665e:	d003      	beq.n	8006668 <HAL_RCC_OscConfig+0x54>
 8006660:	21eb      	movs	r1, #235	; 0xeb
 8006662:	488b      	ldr	r0, [pc, #556]	; (8006890 <HAL_RCC_OscConfig+0x27c>)
 8006664:	f7fb fa4d 	bl	8001b02 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006668:	4b8a      	ldr	r3, [pc, #552]	; (8006894 <HAL_RCC_OscConfig+0x280>)
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	f003 030c 	and.w	r3, r3, #12
 8006670:	2b04      	cmp	r3, #4
 8006672:	d00c      	beq.n	800668e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006674:	4b87      	ldr	r3, [pc, #540]	; (8006894 <HAL_RCC_OscConfig+0x280>)
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800667c:	2b08      	cmp	r3, #8
 800667e:	d112      	bne.n	80066a6 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006680:	4b84      	ldr	r3, [pc, #528]	; (8006894 <HAL_RCC_OscConfig+0x280>)
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006688:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800668c:	d10b      	bne.n	80066a6 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800668e:	4b81      	ldr	r3, [pc, #516]	; (8006894 <HAL_RCC_OscConfig+0x280>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d05b      	beq.n	8006752 <HAL_RCC_OscConfig+0x13e>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d157      	bne.n	8006752 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e2d4      	b.n	8006c50 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066ae:	d106      	bne.n	80066be <HAL_RCC_OscConfig+0xaa>
 80066b0:	4b78      	ldr	r3, [pc, #480]	; (8006894 <HAL_RCC_OscConfig+0x280>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a77      	ldr	r2, [pc, #476]	; (8006894 <HAL_RCC_OscConfig+0x280>)
 80066b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066ba:	6013      	str	r3, [r2, #0]
 80066bc:	e01d      	b.n	80066fa <HAL_RCC_OscConfig+0xe6>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066c6:	d10c      	bne.n	80066e2 <HAL_RCC_OscConfig+0xce>
 80066c8:	4b72      	ldr	r3, [pc, #456]	; (8006894 <HAL_RCC_OscConfig+0x280>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a71      	ldr	r2, [pc, #452]	; (8006894 <HAL_RCC_OscConfig+0x280>)
 80066ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066d2:	6013      	str	r3, [r2, #0]
 80066d4:	4b6f      	ldr	r3, [pc, #444]	; (8006894 <HAL_RCC_OscConfig+0x280>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a6e      	ldr	r2, [pc, #440]	; (8006894 <HAL_RCC_OscConfig+0x280>)
 80066da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066de:	6013      	str	r3, [r2, #0]
 80066e0:	e00b      	b.n	80066fa <HAL_RCC_OscConfig+0xe6>
 80066e2:	4b6c      	ldr	r3, [pc, #432]	; (8006894 <HAL_RCC_OscConfig+0x280>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a6b      	ldr	r2, [pc, #428]	; (8006894 <HAL_RCC_OscConfig+0x280>)
 80066e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066ec:	6013      	str	r3, [r2, #0]
 80066ee:	4b69      	ldr	r3, [pc, #420]	; (8006894 <HAL_RCC_OscConfig+0x280>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a68      	ldr	r2, [pc, #416]	; (8006894 <HAL_RCC_OscConfig+0x280>)
 80066f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d013      	beq.n	800672a <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006702:	f7fc f817 	bl	8002734 <HAL_GetTick>
 8006706:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006708:	e008      	b.n	800671c <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800670a:	f7fc f813 	bl	8002734 <HAL_GetTick>
 800670e:	4602      	mov	r2, r0
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	2b64      	cmp	r3, #100	; 0x64
 8006716:	d901      	bls.n	800671c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e299      	b.n	8006c50 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800671c:	4b5d      	ldr	r3, [pc, #372]	; (8006894 <HAL_RCC_OscConfig+0x280>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d0f0      	beq.n	800670a <HAL_RCC_OscConfig+0xf6>
 8006728:	e014      	b.n	8006754 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800672a:	f7fc f803 	bl	8002734 <HAL_GetTick>
 800672e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006730:	e008      	b.n	8006744 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006732:	f7fb ffff 	bl	8002734 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	2b64      	cmp	r3, #100	; 0x64
 800673e:	d901      	bls.n	8006744 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e285      	b.n	8006c50 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006744:	4b53      	ldr	r3, [pc, #332]	; (8006894 <HAL_RCC_OscConfig+0x280>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1f0      	bne.n	8006732 <HAL_RCC_OscConfig+0x11e>
 8006750:	e000      	b.n	8006754 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006752:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0302 	and.w	r3, r3, #2
 800675c:	2b00      	cmp	r3, #0
 800675e:	d079      	beq.n	8006854 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d008      	beq.n	800677a <HAL_RCC_OscConfig+0x166>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d004      	beq.n	800677a <HAL_RCC_OscConfig+0x166>
 8006770:	f240 111d 	movw	r1, #285	; 0x11d
 8006774:	4846      	ldr	r0, [pc, #280]	; (8006890 <HAL_RCC_OscConfig+0x27c>)
 8006776:	f7fb f9c4 	bl	8001b02 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	2b1f      	cmp	r3, #31
 8006780:	d904      	bls.n	800678c <HAL_RCC_OscConfig+0x178>
 8006782:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8006786:	4842      	ldr	r0, [pc, #264]	; (8006890 <HAL_RCC_OscConfig+0x27c>)
 8006788:	f7fb f9bb 	bl	8001b02 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800678c:	4b41      	ldr	r3, [pc, #260]	; (8006894 <HAL_RCC_OscConfig+0x280>)
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	f003 030c 	and.w	r3, r3, #12
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00b      	beq.n	80067b0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006798:	4b3e      	ldr	r3, [pc, #248]	; (8006894 <HAL_RCC_OscConfig+0x280>)
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067a0:	2b08      	cmp	r3, #8
 80067a2:	d11c      	bne.n	80067de <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067a4:	4b3b      	ldr	r3, [pc, #236]	; (8006894 <HAL_RCC_OscConfig+0x280>)
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d116      	bne.n	80067de <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067b0:	4b38      	ldr	r3, [pc, #224]	; (8006894 <HAL_RCC_OscConfig+0x280>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0302 	and.w	r3, r3, #2
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d005      	beq.n	80067c8 <HAL_RCC_OscConfig+0x1b4>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d001      	beq.n	80067c8 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e243      	b.n	8006c50 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067c8:	4b32      	ldr	r3, [pc, #200]	; (8006894 <HAL_RCC_OscConfig+0x280>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	00db      	lsls	r3, r3, #3
 80067d6:	492f      	ldr	r1, [pc, #188]	; (8006894 <HAL_RCC_OscConfig+0x280>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067dc:	e03a      	b.n	8006854 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d020      	beq.n	8006828 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067e6:	4b2c      	ldr	r3, [pc, #176]	; (8006898 <HAL_RCC_OscConfig+0x284>)
 80067e8:	2201      	movs	r2, #1
 80067ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ec:	f7fb ffa2 	bl	8002734 <HAL_GetTick>
 80067f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067f2:	e008      	b.n	8006806 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067f4:	f7fb ff9e 	bl	8002734 <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d901      	bls.n	8006806 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e224      	b.n	8006c50 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006806:	4b23      	ldr	r3, [pc, #140]	; (8006894 <HAL_RCC_OscConfig+0x280>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b00      	cmp	r3, #0
 8006810:	d0f0      	beq.n	80067f4 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006812:	4b20      	ldr	r3, [pc, #128]	; (8006894 <HAL_RCC_OscConfig+0x280>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	00db      	lsls	r3, r3, #3
 8006820:	491c      	ldr	r1, [pc, #112]	; (8006894 <HAL_RCC_OscConfig+0x280>)
 8006822:	4313      	orrs	r3, r2
 8006824:	600b      	str	r3, [r1, #0]
 8006826:	e015      	b.n	8006854 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006828:	4b1b      	ldr	r3, [pc, #108]	; (8006898 <HAL_RCC_OscConfig+0x284>)
 800682a:	2200      	movs	r2, #0
 800682c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800682e:	f7fb ff81 	bl	8002734 <HAL_GetTick>
 8006832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006834:	e008      	b.n	8006848 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006836:	f7fb ff7d 	bl	8002734 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	2b02      	cmp	r3, #2
 8006842:	d901      	bls.n	8006848 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e203      	b.n	8006c50 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006848:	4b12      	ldr	r3, [pc, #72]	; (8006894 <HAL_RCC_OscConfig+0x280>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0302 	and.w	r3, r3, #2
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1f0      	bne.n	8006836 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0308 	and.w	r3, r3, #8
 800685c:	2b00      	cmp	r3, #0
 800685e:	d045      	beq.n	80068ec <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d008      	beq.n	800687a <HAL_RCC_OscConfig+0x266>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	695b      	ldr	r3, [r3, #20]
 800686c:	2b01      	cmp	r3, #1
 800686e:	d004      	beq.n	800687a <HAL_RCC_OscConfig+0x266>
 8006870:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8006874:	4806      	ldr	r0, [pc, #24]	; (8006890 <HAL_RCC_OscConfig+0x27c>)
 8006876:	f7fb f944 	bl	8001b02 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d01e      	beq.n	80068c0 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006882:	4b06      	ldr	r3, [pc, #24]	; (800689c <HAL_RCC_OscConfig+0x288>)
 8006884:	2201      	movs	r2, #1
 8006886:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006888:	f7fb ff54 	bl	8002734 <HAL_GetTick>
 800688c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800688e:	e010      	b.n	80068b2 <HAL_RCC_OscConfig+0x29e>
 8006890:	0800d3b0 	.word	0x0800d3b0
 8006894:	40023800 	.word	0x40023800
 8006898:	42470000 	.word	0x42470000
 800689c:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068a0:	f7fb ff48 	bl	8002734 <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d901      	bls.n	80068b2 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e1ce      	b.n	8006c50 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068b2:	4b5e      	ldr	r3, [pc, #376]	; (8006a2c <HAL_RCC_OscConfig+0x418>)
 80068b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d0f0      	beq.n	80068a0 <HAL_RCC_OscConfig+0x28c>
 80068be:	e015      	b.n	80068ec <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068c0:	4b5b      	ldr	r3, [pc, #364]	; (8006a30 <HAL_RCC_OscConfig+0x41c>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068c6:	f7fb ff35 	bl	8002734 <HAL_GetTick>
 80068ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068cc:	e008      	b.n	80068e0 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068ce:	f7fb ff31 	bl	8002734 <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d901      	bls.n	80068e0 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e1b7      	b.n	8006c50 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068e0:	4b52      	ldr	r3, [pc, #328]	; (8006a2c <HAL_RCC_OscConfig+0x418>)
 80068e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068e4:	f003 0302 	and.w	r3, r3, #2
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1f0      	bne.n	80068ce <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0304 	and.w	r3, r3, #4
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 80b0 	beq.w	8006a5a <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068fa:	2300      	movs	r3, #0
 80068fc:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00c      	beq.n	8006920 <HAL_RCC_OscConfig+0x30c>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	2b01      	cmp	r3, #1
 800690c:	d008      	beq.n	8006920 <HAL_RCC_OscConfig+0x30c>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	2b05      	cmp	r3, #5
 8006914:	d004      	beq.n	8006920 <HAL_RCC_OscConfig+0x30c>
 8006916:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800691a:	4846      	ldr	r0, [pc, #280]	; (8006a34 <HAL_RCC_OscConfig+0x420>)
 800691c:	f7fb f8f1 	bl	8001b02 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006920:	4b42      	ldr	r3, [pc, #264]	; (8006a2c <HAL_RCC_OscConfig+0x418>)
 8006922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10f      	bne.n	800694c <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800692c:	2300      	movs	r3, #0
 800692e:	60bb      	str	r3, [r7, #8]
 8006930:	4b3e      	ldr	r3, [pc, #248]	; (8006a2c <HAL_RCC_OscConfig+0x418>)
 8006932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006934:	4a3d      	ldr	r2, [pc, #244]	; (8006a2c <HAL_RCC_OscConfig+0x418>)
 8006936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800693a:	6413      	str	r3, [r2, #64]	; 0x40
 800693c:	4b3b      	ldr	r3, [pc, #236]	; (8006a2c <HAL_RCC_OscConfig+0x418>)
 800693e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006944:	60bb      	str	r3, [r7, #8]
 8006946:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006948:	2301      	movs	r3, #1
 800694a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800694c:	4b3a      	ldr	r3, [pc, #232]	; (8006a38 <HAL_RCC_OscConfig+0x424>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006954:	2b00      	cmp	r3, #0
 8006956:	d118      	bne.n	800698a <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006958:	4b37      	ldr	r3, [pc, #220]	; (8006a38 <HAL_RCC_OscConfig+0x424>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a36      	ldr	r2, [pc, #216]	; (8006a38 <HAL_RCC_OscConfig+0x424>)
 800695e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006962:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006964:	f7fb fee6 	bl	8002734 <HAL_GetTick>
 8006968:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800696a:	e008      	b.n	800697e <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800696c:	f7fb fee2 	bl	8002734 <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	2b02      	cmp	r3, #2
 8006978:	d901      	bls.n	800697e <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e168      	b.n	8006c50 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800697e:	4b2e      	ldr	r3, [pc, #184]	; (8006a38 <HAL_RCC_OscConfig+0x424>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006986:	2b00      	cmp	r3, #0
 8006988:	d0f0      	beq.n	800696c <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d106      	bne.n	80069a0 <HAL_RCC_OscConfig+0x38c>
 8006992:	4b26      	ldr	r3, [pc, #152]	; (8006a2c <HAL_RCC_OscConfig+0x418>)
 8006994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006996:	4a25      	ldr	r2, [pc, #148]	; (8006a2c <HAL_RCC_OscConfig+0x418>)
 8006998:	f043 0301 	orr.w	r3, r3, #1
 800699c:	6713      	str	r3, [r2, #112]	; 0x70
 800699e:	e01c      	b.n	80069da <HAL_RCC_OscConfig+0x3c6>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	2b05      	cmp	r3, #5
 80069a6:	d10c      	bne.n	80069c2 <HAL_RCC_OscConfig+0x3ae>
 80069a8:	4b20      	ldr	r3, [pc, #128]	; (8006a2c <HAL_RCC_OscConfig+0x418>)
 80069aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ac:	4a1f      	ldr	r2, [pc, #124]	; (8006a2c <HAL_RCC_OscConfig+0x418>)
 80069ae:	f043 0304 	orr.w	r3, r3, #4
 80069b2:	6713      	str	r3, [r2, #112]	; 0x70
 80069b4:	4b1d      	ldr	r3, [pc, #116]	; (8006a2c <HAL_RCC_OscConfig+0x418>)
 80069b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b8:	4a1c      	ldr	r2, [pc, #112]	; (8006a2c <HAL_RCC_OscConfig+0x418>)
 80069ba:	f043 0301 	orr.w	r3, r3, #1
 80069be:	6713      	str	r3, [r2, #112]	; 0x70
 80069c0:	e00b      	b.n	80069da <HAL_RCC_OscConfig+0x3c6>
 80069c2:	4b1a      	ldr	r3, [pc, #104]	; (8006a2c <HAL_RCC_OscConfig+0x418>)
 80069c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c6:	4a19      	ldr	r2, [pc, #100]	; (8006a2c <HAL_RCC_OscConfig+0x418>)
 80069c8:	f023 0301 	bic.w	r3, r3, #1
 80069cc:	6713      	str	r3, [r2, #112]	; 0x70
 80069ce:	4b17      	ldr	r3, [pc, #92]	; (8006a2c <HAL_RCC_OscConfig+0x418>)
 80069d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d2:	4a16      	ldr	r2, [pc, #88]	; (8006a2c <HAL_RCC_OscConfig+0x418>)
 80069d4:	f023 0304 	bic.w	r3, r3, #4
 80069d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d015      	beq.n	8006a0e <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069e2:	f7fb fea7 	bl	8002734 <HAL_GetTick>
 80069e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069e8:	e00a      	b.n	8006a00 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069ea:	f7fb fea3 	bl	8002734 <HAL_GetTick>
 80069ee:	4602      	mov	r2, r0
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d901      	bls.n	8006a00 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e127      	b.n	8006c50 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a00:	4b0a      	ldr	r3, [pc, #40]	; (8006a2c <HAL_RCC_OscConfig+0x418>)
 8006a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a04:	f003 0302 	and.w	r3, r3, #2
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d0ee      	beq.n	80069ea <HAL_RCC_OscConfig+0x3d6>
 8006a0c:	e01c      	b.n	8006a48 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a0e:	f7fb fe91 	bl	8002734 <HAL_GetTick>
 8006a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a14:	e012      	b.n	8006a3c <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a16:	f7fb fe8d 	bl	8002734 <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d909      	bls.n	8006a3c <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e111      	b.n	8006c50 <HAL_RCC_OscConfig+0x63c>
 8006a2c:	40023800 	.word	0x40023800
 8006a30:	42470e80 	.word	0x42470e80
 8006a34:	0800d3b0 	.word	0x0800d3b0
 8006a38:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a3c:	4b86      	ldr	r3, [pc, #536]	; (8006c58 <HAL_RCC_OscConfig+0x644>)
 8006a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a40:	f003 0302 	and.w	r3, r3, #2
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1e6      	bne.n	8006a16 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a48:	7dfb      	ldrb	r3, [r7, #23]
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d105      	bne.n	8006a5a <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a4e:	4b82      	ldr	r3, [pc, #520]	; (8006c58 <HAL_RCC_OscConfig+0x644>)
 8006a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a52:	4a81      	ldr	r2, [pc, #516]	; (8006c58 <HAL_RCC_OscConfig+0x644>)
 8006a54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00c      	beq.n	8006a7c <HAL_RCC_OscConfig+0x468>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d008      	beq.n	8006a7c <HAL_RCC_OscConfig+0x468>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d004      	beq.n	8006a7c <HAL_RCC_OscConfig+0x468>
 8006a72:	f240 11cd 	movw	r1, #461	; 0x1cd
 8006a76:	4879      	ldr	r0, [pc, #484]	; (8006c5c <HAL_RCC_OscConfig+0x648>)
 8006a78:	f7fb f843 	bl	8001b02 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	699b      	ldr	r3, [r3, #24]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f000 80e4 	beq.w	8006c4e <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a86:	4b74      	ldr	r3, [pc, #464]	; (8006c58 <HAL_RCC_OscConfig+0x644>)
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f003 030c 	and.w	r3, r3, #12
 8006a8e:	2b08      	cmp	r3, #8
 8006a90:	f000 80a5 	beq.w	8006bde <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	f040 8089 	bne.w	8006bb0 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	69db      	ldr	r3, [r3, #28]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d009      	beq.n	8006aba <HAL_RCC_OscConfig+0x4a6>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006aae:	d004      	beq.n	8006aba <HAL_RCC_OscConfig+0x4a6>
 8006ab0:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8006ab4:	4869      	ldr	r0, [pc, #420]	; (8006c5c <HAL_RCC_OscConfig+0x648>)
 8006ab6:	f7fb f824 	bl	8001b02 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	2b3f      	cmp	r3, #63	; 0x3f
 8006ac0:	d904      	bls.n	8006acc <HAL_RCC_OscConfig+0x4b8>
 8006ac2:	f240 11d7 	movw	r1, #471	; 0x1d7
 8006ac6:	4865      	ldr	r0, [pc, #404]	; (8006c5c <HAL_RCC_OscConfig+0x648>)
 8006ac8:	f7fb f81b 	bl	8001b02 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad0:	2b31      	cmp	r3, #49	; 0x31
 8006ad2:	d904      	bls.n	8006ade <HAL_RCC_OscConfig+0x4ca>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad8:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8006adc:	d904      	bls.n	8006ae8 <HAL_RCC_OscConfig+0x4d4>
 8006ade:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8006ae2:	485e      	ldr	r0, [pc, #376]	; (8006c5c <HAL_RCC_OscConfig+0x648>)
 8006ae4:	f7fb f80d 	bl	8001b02 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d010      	beq.n	8006b12 <HAL_RCC_OscConfig+0x4fe>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af4:	2b04      	cmp	r3, #4
 8006af6:	d00c      	beq.n	8006b12 <HAL_RCC_OscConfig+0x4fe>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006afc:	2b06      	cmp	r3, #6
 8006afe:	d008      	beq.n	8006b12 <HAL_RCC_OscConfig+0x4fe>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b04:	2b08      	cmp	r3, #8
 8006b06:	d004      	beq.n	8006b12 <HAL_RCC_OscConfig+0x4fe>
 8006b08:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006b0c:	4853      	ldr	r0, [pc, #332]	; (8006c5c <HAL_RCC_OscConfig+0x648>)
 8006b0e:	f7fa fff8 	bl	8001b02 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d903      	bls.n	8006b22 <HAL_RCC_OscConfig+0x50e>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1e:	2b0f      	cmp	r3, #15
 8006b20:	d904      	bls.n	8006b2c <HAL_RCC_OscConfig+0x518>
 8006b22:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8006b26:	484d      	ldr	r0, [pc, #308]	; (8006c5c <HAL_RCC_OscConfig+0x648>)
 8006b28:	f7fa ffeb 	bl	8001b02 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b2c:	4b4c      	ldr	r3, [pc, #304]	; (8006c60 <HAL_RCC_OscConfig+0x64c>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b32:	f7fb fdff 	bl	8002734 <HAL_GetTick>
 8006b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b38:	e008      	b.n	8006b4c <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b3a:	f7fb fdfb 	bl	8002734 <HAL_GetTick>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d901      	bls.n	8006b4c <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e081      	b.n	8006c50 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b4c:	4b42      	ldr	r3, [pc, #264]	; (8006c58 <HAL_RCC_OscConfig+0x644>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1f0      	bne.n	8006b3a <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	69da      	ldr	r2, [r3, #28]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a1b      	ldr	r3, [r3, #32]
 8006b60:	431a      	orrs	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b66:	019b      	lsls	r3, r3, #6
 8006b68:	431a      	orrs	r2, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6e:	085b      	lsrs	r3, r3, #1
 8006b70:	3b01      	subs	r3, #1
 8006b72:	041b      	lsls	r3, r3, #16
 8006b74:	431a      	orrs	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7a:	061b      	lsls	r3, r3, #24
 8006b7c:	4936      	ldr	r1, [pc, #216]	; (8006c58 <HAL_RCC_OscConfig+0x644>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b82:	4b37      	ldr	r3, [pc, #220]	; (8006c60 <HAL_RCC_OscConfig+0x64c>)
 8006b84:	2201      	movs	r2, #1
 8006b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b88:	f7fb fdd4 	bl	8002734 <HAL_GetTick>
 8006b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b8e:	e008      	b.n	8006ba2 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b90:	f7fb fdd0 	bl	8002734 <HAL_GetTick>
 8006b94:	4602      	mov	r2, r0
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d901      	bls.n	8006ba2 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e056      	b.n	8006c50 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ba2:	4b2d      	ldr	r3, [pc, #180]	; (8006c58 <HAL_RCC_OscConfig+0x644>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d0f0      	beq.n	8006b90 <HAL_RCC_OscConfig+0x57c>
 8006bae:	e04e      	b.n	8006c4e <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bb0:	4b2b      	ldr	r3, [pc, #172]	; (8006c60 <HAL_RCC_OscConfig+0x64c>)
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bb6:	f7fb fdbd 	bl	8002734 <HAL_GetTick>
 8006bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bbc:	e008      	b.n	8006bd0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bbe:	f7fb fdb9 	bl	8002734 <HAL_GetTick>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d901      	bls.n	8006bd0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e03f      	b.n	8006c50 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bd0:	4b21      	ldr	r3, [pc, #132]	; (8006c58 <HAL_RCC_OscConfig+0x644>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1f0      	bne.n	8006bbe <HAL_RCC_OscConfig+0x5aa>
 8006bdc:	e037      	b.n	8006c4e <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d101      	bne.n	8006bea <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e032      	b.n	8006c50 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006bea:	4b1b      	ldr	r3, [pc, #108]	; (8006c58 <HAL_RCC_OscConfig+0x644>)
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	699b      	ldr	r3, [r3, #24]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d028      	beq.n	8006c4a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d121      	bne.n	8006c4a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d11a      	bne.n	8006c4a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c20:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d111      	bne.n	8006c4a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c30:	085b      	lsrs	r3, r3, #1
 8006c32:	3b01      	subs	r3, #1
 8006c34:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d107      	bne.n	8006c4a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c44:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d001      	beq.n	8006c4e <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e000      	b.n	8006c50 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3718      	adds	r7, #24
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	40023800 	.word	0x40023800
 8006c5c:	0800d3b0 	.word	0x0800d3b0
 8006c60:	42470060 	.word	0x42470060

08006c64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d101      	bne.n	8006c78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e174      	b.n	8006f62 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d003      	beq.n	8006c88 <HAL_RCC_ClockConfig+0x24>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b0f      	cmp	r3, #15
 8006c86:	d904      	bls.n	8006c92 <HAL_RCC_ClockConfig+0x2e>
 8006c88:	f240 215a 	movw	r1, #602	; 0x25a
 8006c8c:	487b      	ldr	r0, [pc, #492]	; (8006e7c <HAL_RCC_ClockConfig+0x218>)
 8006c8e:	f7fa ff38 	bl	8001b02 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d019      	beq.n	8006ccc <HAL_RCC_ClockConfig+0x68>
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d016      	beq.n	8006ccc <HAL_RCC_ClockConfig+0x68>
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d013      	beq.n	8006ccc <HAL_RCC_ClockConfig+0x68>
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	2b03      	cmp	r3, #3
 8006ca8:	d010      	beq.n	8006ccc <HAL_RCC_ClockConfig+0x68>
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	2b04      	cmp	r3, #4
 8006cae:	d00d      	beq.n	8006ccc <HAL_RCC_ClockConfig+0x68>
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	2b05      	cmp	r3, #5
 8006cb4:	d00a      	beq.n	8006ccc <HAL_RCC_ClockConfig+0x68>
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	2b06      	cmp	r3, #6
 8006cba:	d007      	beq.n	8006ccc <HAL_RCC_ClockConfig+0x68>
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	2b07      	cmp	r3, #7
 8006cc0:	d004      	beq.n	8006ccc <HAL_RCC_ClockConfig+0x68>
 8006cc2:	f240 215b 	movw	r1, #603	; 0x25b
 8006cc6:	486d      	ldr	r0, [pc, #436]	; (8006e7c <HAL_RCC_ClockConfig+0x218>)
 8006cc8:	f7fa ff1b 	bl	8001b02 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ccc:	4b6c      	ldr	r3, [pc, #432]	; (8006e80 <HAL_RCC_ClockConfig+0x21c>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0307 	and.w	r3, r3, #7
 8006cd4:	683a      	ldr	r2, [r7, #0]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d90c      	bls.n	8006cf4 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cda:	4b69      	ldr	r3, [pc, #420]	; (8006e80 <HAL_RCC_ClockConfig+0x21c>)
 8006cdc:	683a      	ldr	r2, [r7, #0]
 8006cde:	b2d2      	uxtb	r2, r2
 8006ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ce2:	4b67      	ldr	r3, [pc, #412]	; (8006e80 <HAL_RCC_ClockConfig+0x21c>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0307 	and.w	r3, r3, #7
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d001      	beq.n	8006cf4 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e136      	b.n	8006f62 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0302 	and.w	r3, r3, #2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d049      	beq.n	8006d94 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0304 	and.w	r3, r3, #4
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d005      	beq.n	8006d18 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d0c:	4b5d      	ldr	r3, [pc, #372]	; (8006e84 <HAL_RCC_ClockConfig+0x220>)
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	4a5c      	ldr	r2, [pc, #368]	; (8006e84 <HAL_RCC_ClockConfig+0x220>)
 8006d12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0308 	and.w	r3, r3, #8
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d005      	beq.n	8006d30 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d24:	4b57      	ldr	r3, [pc, #348]	; (8006e84 <HAL_RCC_ClockConfig+0x220>)
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	4a56      	ldr	r2, [pc, #344]	; (8006e84 <HAL_RCC_ClockConfig+0x220>)
 8006d2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d024      	beq.n	8006d82 <HAL_RCC_ClockConfig+0x11e>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	2b80      	cmp	r3, #128	; 0x80
 8006d3e:	d020      	beq.n	8006d82 <HAL_RCC_ClockConfig+0x11e>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	2b90      	cmp	r3, #144	; 0x90
 8006d46:	d01c      	beq.n	8006d82 <HAL_RCC_ClockConfig+0x11e>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	2ba0      	cmp	r3, #160	; 0xa0
 8006d4e:	d018      	beq.n	8006d82 <HAL_RCC_ClockConfig+0x11e>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	2bb0      	cmp	r3, #176	; 0xb0
 8006d56:	d014      	beq.n	8006d82 <HAL_RCC_ClockConfig+0x11e>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	2bc0      	cmp	r3, #192	; 0xc0
 8006d5e:	d010      	beq.n	8006d82 <HAL_RCC_ClockConfig+0x11e>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	2bd0      	cmp	r3, #208	; 0xd0
 8006d66:	d00c      	beq.n	8006d82 <HAL_RCC_ClockConfig+0x11e>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	2be0      	cmp	r3, #224	; 0xe0
 8006d6e:	d008      	beq.n	8006d82 <HAL_RCC_ClockConfig+0x11e>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	2bf0      	cmp	r3, #240	; 0xf0
 8006d76:	d004      	beq.n	8006d82 <HAL_RCC_ClockConfig+0x11e>
 8006d78:	f240 217e 	movw	r1, #638	; 0x27e
 8006d7c:	483f      	ldr	r0, [pc, #252]	; (8006e7c <HAL_RCC_ClockConfig+0x218>)
 8006d7e:	f7fa fec0 	bl	8001b02 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d82:	4b40      	ldr	r3, [pc, #256]	; (8006e84 <HAL_RCC_ClockConfig+0x220>)
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	493d      	ldr	r1, [pc, #244]	; (8006e84 <HAL_RCC_ClockConfig+0x220>)
 8006d90:	4313      	orrs	r3, r2
 8006d92:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0301 	and.w	r3, r3, #1
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d059      	beq.n	8006e54 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d010      	beq.n	8006dca <HAL_RCC_ClockConfig+0x166>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d00c      	beq.n	8006dca <HAL_RCC_ClockConfig+0x166>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d008      	beq.n	8006dca <HAL_RCC_ClockConfig+0x166>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	2b03      	cmp	r3, #3
 8006dbe:	d004      	beq.n	8006dca <HAL_RCC_ClockConfig+0x166>
 8006dc0:	f240 2185 	movw	r1, #645	; 0x285
 8006dc4:	482d      	ldr	r0, [pc, #180]	; (8006e7c <HAL_RCC_ClockConfig+0x218>)
 8006dc6:	f7fa fe9c 	bl	8001b02 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d107      	bne.n	8006de2 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dd2:	4b2c      	ldr	r3, [pc, #176]	; (8006e84 <HAL_RCC_ClockConfig+0x220>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d119      	bne.n	8006e12 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e0bf      	b.n	8006f62 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d003      	beq.n	8006df2 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006dee:	2b03      	cmp	r3, #3
 8006df0:	d107      	bne.n	8006e02 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006df2:	4b24      	ldr	r3, [pc, #144]	; (8006e84 <HAL_RCC_ClockConfig+0x220>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d109      	bne.n	8006e12 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e0af      	b.n	8006f62 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e02:	4b20      	ldr	r3, [pc, #128]	; (8006e84 <HAL_RCC_ClockConfig+0x220>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0302 	and.w	r3, r3, #2
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d101      	bne.n	8006e12 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e0a7      	b.n	8006f62 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e12:	4b1c      	ldr	r3, [pc, #112]	; (8006e84 <HAL_RCC_ClockConfig+0x220>)
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	f023 0203 	bic.w	r2, r3, #3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	4919      	ldr	r1, [pc, #100]	; (8006e84 <HAL_RCC_ClockConfig+0x220>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e24:	f7fb fc86 	bl	8002734 <HAL_GetTick>
 8006e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e2a:	e00a      	b.n	8006e42 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e2c:	f7fb fc82 	bl	8002734 <HAL_GetTick>
 8006e30:	4602      	mov	r2, r0
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d901      	bls.n	8006e42 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e08f      	b.n	8006f62 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e42:	4b10      	ldr	r3, [pc, #64]	; (8006e84 <HAL_RCC_ClockConfig+0x220>)
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f003 020c 	and.w	r2, r3, #12
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d1eb      	bne.n	8006e2c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e54:	4b0a      	ldr	r3, [pc, #40]	; (8006e80 <HAL_RCC_ClockConfig+0x21c>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0307 	and.w	r3, r3, #7
 8006e5c:	683a      	ldr	r2, [r7, #0]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d212      	bcs.n	8006e88 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e62:	4b07      	ldr	r3, [pc, #28]	; (8006e80 <HAL_RCC_ClockConfig+0x21c>)
 8006e64:	683a      	ldr	r2, [r7, #0]
 8006e66:	b2d2      	uxtb	r2, r2
 8006e68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e6a:	4b05      	ldr	r3, [pc, #20]	; (8006e80 <HAL_RCC_ClockConfig+0x21c>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0307 	and.w	r3, r3, #7
 8006e72:	683a      	ldr	r2, [r7, #0]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d007      	beq.n	8006e88 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e072      	b.n	8006f62 <HAL_RCC_ClockConfig+0x2fe>
 8006e7c:	0800d3b0 	.word	0x0800d3b0
 8006e80:	40023c00 	.word	0x40023c00
 8006e84:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0304 	and.w	r3, r3, #4
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d025      	beq.n	8006ee0 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d018      	beq.n	8006ece <HAL_RCC_ClockConfig+0x26a>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ea4:	d013      	beq.n	8006ece <HAL_RCC_ClockConfig+0x26a>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006eae:	d00e      	beq.n	8006ece <HAL_RCC_ClockConfig+0x26a>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006eb8:	d009      	beq.n	8006ece <HAL_RCC_ClockConfig+0x26a>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8006ec2:	d004      	beq.n	8006ece <HAL_RCC_ClockConfig+0x26a>
 8006ec4:	f240 21c3 	movw	r1, #707	; 0x2c3
 8006ec8:	4828      	ldr	r0, [pc, #160]	; (8006f6c <HAL_RCC_ClockConfig+0x308>)
 8006eca:	f7fa fe1a 	bl	8001b02 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ece:	4b28      	ldr	r3, [pc, #160]	; (8006f70 <HAL_RCC_ClockConfig+0x30c>)
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	4925      	ldr	r1, [pc, #148]	; (8006f70 <HAL_RCC_ClockConfig+0x30c>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 0308 	and.w	r3, r3, #8
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d026      	beq.n	8006f3a <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d018      	beq.n	8006f26 <HAL_RCC_ClockConfig+0x2c2>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006efc:	d013      	beq.n	8006f26 <HAL_RCC_ClockConfig+0x2c2>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006f06:	d00e      	beq.n	8006f26 <HAL_RCC_ClockConfig+0x2c2>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006f10:	d009      	beq.n	8006f26 <HAL_RCC_ClockConfig+0x2c2>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8006f1a:	d004      	beq.n	8006f26 <HAL_RCC_ClockConfig+0x2c2>
 8006f1c:	f240 21ca 	movw	r1, #714	; 0x2ca
 8006f20:	4812      	ldr	r0, [pc, #72]	; (8006f6c <HAL_RCC_ClockConfig+0x308>)
 8006f22:	f7fa fdee 	bl	8001b02 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f26:	4b12      	ldr	r3, [pc, #72]	; (8006f70 <HAL_RCC_ClockConfig+0x30c>)
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	00db      	lsls	r3, r3, #3
 8006f34:	490e      	ldr	r1, [pc, #56]	; (8006f70 <HAL_RCC_ClockConfig+0x30c>)
 8006f36:	4313      	orrs	r3, r2
 8006f38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006f3a:	f000 f821 	bl	8006f80 <HAL_RCC_GetSysClockFreq>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	4b0b      	ldr	r3, [pc, #44]	; (8006f70 <HAL_RCC_ClockConfig+0x30c>)
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	091b      	lsrs	r3, r3, #4
 8006f46:	f003 030f 	and.w	r3, r3, #15
 8006f4a:	490a      	ldr	r1, [pc, #40]	; (8006f74 <HAL_RCC_ClockConfig+0x310>)
 8006f4c:	5ccb      	ldrb	r3, [r1, r3]
 8006f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f52:	4a09      	ldr	r2, [pc, #36]	; (8006f78 <HAL_RCC_ClockConfig+0x314>)
 8006f54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006f56:	4b09      	ldr	r3, [pc, #36]	; (8006f7c <HAL_RCC_ClockConfig+0x318>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7fa febe 	bl	8001cdc <HAL_InitTick>

  return HAL_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3710      	adds	r7, #16
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	0800d3b0 	.word	0x0800d3b0
 8006f70:	40023800 	.word	0x40023800
 8006f74:	0800d6e0 	.word	0x0800d6e0
 8006f78:	20000000 	.word	0x20000000
 8006f7c:	20000004 	.word	0x20000004

08006f80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f84:	b094      	sub	sp, #80	; 0x50
 8006f86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	647b      	str	r3, [r7, #68]	; 0x44
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f90:	2300      	movs	r3, #0
 8006f92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006f94:	2300      	movs	r3, #0
 8006f96:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f98:	4b79      	ldr	r3, [pc, #484]	; (8007180 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	f003 030c 	and.w	r3, r3, #12
 8006fa0:	2b08      	cmp	r3, #8
 8006fa2:	d00d      	beq.n	8006fc0 <HAL_RCC_GetSysClockFreq+0x40>
 8006fa4:	2b08      	cmp	r3, #8
 8006fa6:	f200 80e1 	bhi.w	800716c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d002      	beq.n	8006fb4 <HAL_RCC_GetSysClockFreq+0x34>
 8006fae:	2b04      	cmp	r3, #4
 8006fb0:	d003      	beq.n	8006fba <HAL_RCC_GetSysClockFreq+0x3a>
 8006fb2:	e0db      	b.n	800716c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006fb4:	4b73      	ldr	r3, [pc, #460]	; (8007184 <HAL_RCC_GetSysClockFreq+0x204>)
 8006fb6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006fb8:	e0db      	b.n	8007172 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006fba:	4b73      	ldr	r3, [pc, #460]	; (8007188 <HAL_RCC_GetSysClockFreq+0x208>)
 8006fbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006fbe:	e0d8      	b.n	8007172 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006fc0:	4b6f      	ldr	r3, [pc, #444]	; (8007180 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fc8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006fca:	4b6d      	ldr	r3, [pc, #436]	; (8007180 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d063      	beq.n	800709e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fd6:	4b6a      	ldr	r3, [pc, #424]	; (8007180 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	099b      	lsrs	r3, r3, #6
 8006fdc:	2200      	movs	r2, #0
 8006fde:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fe0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fe8:	633b      	str	r3, [r7, #48]	; 0x30
 8006fea:	2300      	movs	r3, #0
 8006fec:	637b      	str	r3, [r7, #52]	; 0x34
 8006fee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006ff2:	4622      	mov	r2, r4
 8006ff4:	462b      	mov	r3, r5
 8006ff6:	f04f 0000 	mov.w	r0, #0
 8006ffa:	f04f 0100 	mov.w	r1, #0
 8006ffe:	0159      	lsls	r1, r3, #5
 8007000:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007004:	0150      	lsls	r0, r2, #5
 8007006:	4602      	mov	r2, r0
 8007008:	460b      	mov	r3, r1
 800700a:	4621      	mov	r1, r4
 800700c:	1a51      	subs	r1, r2, r1
 800700e:	6139      	str	r1, [r7, #16]
 8007010:	4629      	mov	r1, r5
 8007012:	eb63 0301 	sbc.w	r3, r3, r1
 8007016:	617b      	str	r3, [r7, #20]
 8007018:	f04f 0200 	mov.w	r2, #0
 800701c:	f04f 0300 	mov.w	r3, #0
 8007020:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007024:	4659      	mov	r1, fp
 8007026:	018b      	lsls	r3, r1, #6
 8007028:	4651      	mov	r1, sl
 800702a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800702e:	4651      	mov	r1, sl
 8007030:	018a      	lsls	r2, r1, #6
 8007032:	4651      	mov	r1, sl
 8007034:	ebb2 0801 	subs.w	r8, r2, r1
 8007038:	4659      	mov	r1, fp
 800703a:	eb63 0901 	sbc.w	r9, r3, r1
 800703e:	f04f 0200 	mov.w	r2, #0
 8007042:	f04f 0300 	mov.w	r3, #0
 8007046:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800704a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800704e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007052:	4690      	mov	r8, r2
 8007054:	4699      	mov	r9, r3
 8007056:	4623      	mov	r3, r4
 8007058:	eb18 0303 	adds.w	r3, r8, r3
 800705c:	60bb      	str	r3, [r7, #8]
 800705e:	462b      	mov	r3, r5
 8007060:	eb49 0303 	adc.w	r3, r9, r3
 8007064:	60fb      	str	r3, [r7, #12]
 8007066:	f04f 0200 	mov.w	r2, #0
 800706a:	f04f 0300 	mov.w	r3, #0
 800706e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007072:	4629      	mov	r1, r5
 8007074:	024b      	lsls	r3, r1, #9
 8007076:	4621      	mov	r1, r4
 8007078:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800707c:	4621      	mov	r1, r4
 800707e:	024a      	lsls	r2, r1, #9
 8007080:	4610      	mov	r0, r2
 8007082:	4619      	mov	r1, r3
 8007084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007086:	2200      	movs	r2, #0
 8007088:	62bb      	str	r3, [r7, #40]	; 0x28
 800708a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800708c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007090:	f7f9 f8a6 	bl	80001e0 <__aeabi_uldivmod>
 8007094:	4602      	mov	r2, r0
 8007096:	460b      	mov	r3, r1
 8007098:	4613      	mov	r3, r2
 800709a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800709c:	e058      	b.n	8007150 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800709e:	4b38      	ldr	r3, [pc, #224]	; (8007180 <HAL_RCC_GetSysClockFreq+0x200>)
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	099b      	lsrs	r3, r3, #6
 80070a4:	2200      	movs	r2, #0
 80070a6:	4618      	mov	r0, r3
 80070a8:	4611      	mov	r1, r2
 80070aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80070ae:	623b      	str	r3, [r7, #32]
 80070b0:	2300      	movs	r3, #0
 80070b2:	627b      	str	r3, [r7, #36]	; 0x24
 80070b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80070b8:	4642      	mov	r2, r8
 80070ba:	464b      	mov	r3, r9
 80070bc:	f04f 0000 	mov.w	r0, #0
 80070c0:	f04f 0100 	mov.w	r1, #0
 80070c4:	0159      	lsls	r1, r3, #5
 80070c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070ca:	0150      	lsls	r0, r2, #5
 80070cc:	4602      	mov	r2, r0
 80070ce:	460b      	mov	r3, r1
 80070d0:	4641      	mov	r1, r8
 80070d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80070d6:	4649      	mov	r1, r9
 80070d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80070dc:	f04f 0200 	mov.w	r2, #0
 80070e0:	f04f 0300 	mov.w	r3, #0
 80070e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80070e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80070ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80070f0:	ebb2 040a 	subs.w	r4, r2, sl
 80070f4:	eb63 050b 	sbc.w	r5, r3, fp
 80070f8:	f04f 0200 	mov.w	r2, #0
 80070fc:	f04f 0300 	mov.w	r3, #0
 8007100:	00eb      	lsls	r3, r5, #3
 8007102:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007106:	00e2      	lsls	r2, r4, #3
 8007108:	4614      	mov	r4, r2
 800710a:	461d      	mov	r5, r3
 800710c:	4643      	mov	r3, r8
 800710e:	18e3      	adds	r3, r4, r3
 8007110:	603b      	str	r3, [r7, #0]
 8007112:	464b      	mov	r3, r9
 8007114:	eb45 0303 	adc.w	r3, r5, r3
 8007118:	607b      	str	r3, [r7, #4]
 800711a:	f04f 0200 	mov.w	r2, #0
 800711e:	f04f 0300 	mov.w	r3, #0
 8007122:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007126:	4629      	mov	r1, r5
 8007128:	028b      	lsls	r3, r1, #10
 800712a:	4621      	mov	r1, r4
 800712c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007130:	4621      	mov	r1, r4
 8007132:	028a      	lsls	r2, r1, #10
 8007134:	4610      	mov	r0, r2
 8007136:	4619      	mov	r1, r3
 8007138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800713a:	2200      	movs	r2, #0
 800713c:	61bb      	str	r3, [r7, #24]
 800713e:	61fa      	str	r2, [r7, #28]
 8007140:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007144:	f7f9 f84c 	bl	80001e0 <__aeabi_uldivmod>
 8007148:	4602      	mov	r2, r0
 800714a:	460b      	mov	r3, r1
 800714c:	4613      	mov	r3, r2
 800714e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007150:	4b0b      	ldr	r3, [pc, #44]	; (8007180 <HAL_RCC_GetSysClockFreq+0x200>)
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	0c1b      	lsrs	r3, r3, #16
 8007156:	f003 0303 	and.w	r3, r3, #3
 800715a:	3301      	adds	r3, #1
 800715c:	005b      	lsls	r3, r3, #1
 800715e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007160:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007164:	fbb2 f3f3 	udiv	r3, r2, r3
 8007168:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800716a:	e002      	b.n	8007172 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800716c:	4b05      	ldr	r3, [pc, #20]	; (8007184 <HAL_RCC_GetSysClockFreq+0x204>)
 800716e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007170:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007174:	4618      	mov	r0, r3
 8007176:	3750      	adds	r7, #80	; 0x50
 8007178:	46bd      	mov	sp, r7
 800717a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800717e:	bf00      	nop
 8007180:	40023800 	.word	0x40023800
 8007184:	00f42400 	.word	0x00f42400
 8007188:	007a1200 	.word	0x007a1200

0800718c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800718c:	b480      	push	{r7}
 800718e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007190:	4b03      	ldr	r3, [pc, #12]	; (80071a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007192:	681b      	ldr	r3, [r3, #0]
}
 8007194:	4618      	mov	r0, r3
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	20000000 	.word	0x20000000

080071a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80071a8:	f7ff fff0 	bl	800718c <HAL_RCC_GetHCLKFreq>
 80071ac:	4602      	mov	r2, r0
 80071ae:	4b05      	ldr	r3, [pc, #20]	; (80071c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	0a9b      	lsrs	r3, r3, #10
 80071b4:	f003 0307 	and.w	r3, r3, #7
 80071b8:	4903      	ldr	r1, [pc, #12]	; (80071c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071ba:	5ccb      	ldrb	r3, [r1, r3]
 80071bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	40023800 	.word	0x40023800
 80071c8:	0800d6f0 	.word	0x0800d6f0

080071cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80071d0:	f7ff ffdc 	bl	800718c <HAL_RCC_GetHCLKFreq>
 80071d4:	4602      	mov	r2, r0
 80071d6:	4b05      	ldr	r3, [pc, #20]	; (80071ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	0b5b      	lsrs	r3, r3, #13
 80071dc:	f003 0307 	and.w	r3, r3, #7
 80071e0:	4903      	ldr	r1, [pc, #12]	; (80071f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80071e2:	5ccb      	ldrb	r3, [r1, r3]
 80071e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	40023800 	.word	0x40023800
 80071f0:	0800d6f0 	.word	0x0800d6f0

080071f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	220f      	movs	r2, #15
 8007202:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007204:	4b12      	ldr	r3, [pc, #72]	; (8007250 <HAL_RCC_GetClockConfig+0x5c>)
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	f003 0203 	and.w	r2, r3, #3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007210:	4b0f      	ldr	r3, [pc, #60]	; (8007250 <HAL_RCC_GetClockConfig+0x5c>)
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800721c:	4b0c      	ldr	r3, [pc, #48]	; (8007250 <HAL_RCC_GetClockConfig+0x5c>)
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007228:	4b09      	ldr	r3, [pc, #36]	; (8007250 <HAL_RCC_GetClockConfig+0x5c>)
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	08db      	lsrs	r3, r3, #3
 800722e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007236:	4b07      	ldr	r3, [pc, #28]	; (8007254 <HAL_RCC_GetClockConfig+0x60>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 0207 	and.w	r2, r3, #7
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	601a      	str	r2, [r3, #0]
}
 8007242:	bf00      	nop
 8007244:	370c      	adds	r7, #12
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	40023800 	.word	0x40023800
 8007254:	40023c00 	.word	0x40023c00

08007258 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d101      	bne.n	800726a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e1ac      	b.n	80075c4 <HAL_SPI_Init+0x36c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a75      	ldr	r2, [pc, #468]	; (8007444 <HAL_SPI_Init+0x1ec>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d018      	beq.n	80072a6 <HAL_SPI_Init+0x4e>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a73      	ldr	r2, [pc, #460]	; (8007448 <HAL_SPI_Init+0x1f0>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d013      	beq.n	80072a6 <HAL_SPI_Init+0x4e>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a72      	ldr	r2, [pc, #456]	; (800744c <HAL_SPI_Init+0x1f4>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d00e      	beq.n	80072a6 <HAL_SPI_Init+0x4e>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a70      	ldr	r2, [pc, #448]	; (8007450 <HAL_SPI_Init+0x1f8>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d009      	beq.n	80072a6 <HAL_SPI_Init+0x4e>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a6f      	ldr	r2, [pc, #444]	; (8007454 <HAL_SPI_Init+0x1fc>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d004      	beq.n	80072a6 <HAL_SPI_Init+0x4e>
 800729c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80072a0:	486d      	ldr	r0, [pc, #436]	; (8007458 <HAL_SPI_Init+0x200>)
 80072a2:	f7fa fc2e 	bl	8001b02 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d009      	beq.n	80072c2 <HAL_SPI_Init+0x6a>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072b6:	d004      	beq.n	80072c2 <HAL_SPI_Init+0x6a>
 80072b8:	f240 1141 	movw	r1, #321	; 0x141
 80072bc:	4866      	ldr	r0, [pc, #408]	; (8007458 <HAL_SPI_Init+0x200>)
 80072be:	f7fa fc20 	bl	8001b02 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00e      	beq.n	80072e8 <HAL_SPI_Init+0x90>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072d2:	d009      	beq.n	80072e8 <HAL_SPI_Init+0x90>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072dc:	d004      	beq.n	80072e8 <HAL_SPI_Init+0x90>
 80072de:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80072e2:	485d      	ldr	r0, [pc, #372]	; (8007458 <HAL_SPI_Init+0x200>)
 80072e4:	f7fa fc0d 	bl	8001b02 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072f0:	d008      	beq.n	8007304 <HAL_SPI_Init+0xac>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d004      	beq.n	8007304 <HAL_SPI_Init+0xac>
 80072fa:	f240 1143 	movw	r1, #323	; 0x143
 80072fe:	4856      	ldr	r0, [pc, #344]	; (8007458 <HAL_SPI_Init+0x200>)
 8007300:	f7fa fbff 	bl	8001b02 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	699b      	ldr	r3, [r3, #24]
 8007308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800730c:	d00d      	beq.n	800732a <HAL_SPI_Init+0xd2>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d009      	beq.n	800732a <HAL_SPI_Init+0xd2>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800731e:	d004      	beq.n	800732a <HAL_SPI_Init+0xd2>
 8007320:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8007324:	484c      	ldr	r0, [pc, #304]	; (8007458 <HAL_SPI_Init+0x200>)
 8007326:	f7fa fbec 	bl	8001b02 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	69db      	ldr	r3, [r3, #28]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d020      	beq.n	8007374 <HAL_SPI_Init+0x11c>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	69db      	ldr	r3, [r3, #28]
 8007336:	2b08      	cmp	r3, #8
 8007338:	d01c      	beq.n	8007374 <HAL_SPI_Init+0x11c>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	69db      	ldr	r3, [r3, #28]
 800733e:	2b10      	cmp	r3, #16
 8007340:	d018      	beq.n	8007374 <HAL_SPI_Init+0x11c>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	69db      	ldr	r3, [r3, #28]
 8007346:	2b18      	cmp	r3, #24
 8007348:	d014      	beq.n	8007374 <HAL_SPI_Init+0x11c>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	69db      	ldr	r3, [r3, #28]
 800734e:	2b20      	cmp	r3, #32
 8007350:	d010      	beq.n	8007374 <HAL_SPI_Init+0x11c>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	69db      	ldr	r3, [r3, #28]
 8007356:	2b28      	cmp	r3, #40	; 0x28
 8007358:	d00c      	beq.n	8007374 <HAL_SPI_Init+0x11c>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	69db      	ldr	r3, [r3, #28]
 800735e:	2b30      	cmp	r3, #48	; 0x30
 8007360:	d008      	beq.n	8007374 <HAL_SPI_Init+0x11c>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	69db      	ldr	r3, [r3, #28]
 8007366:	2b38      	cmp	r3, #56	; 0x38
 8007368:	d004      	beq.n	8007374 <HAL_SPI_Init+0x11c>
 800736a:	f240 1145 	movw	r1, #325	; 0x145
 800736e:	483a      	ldr	r0, [pc, #232]	; (8007458 <HAL_SPI_Init+0x200>)
 8007370:	f7fa fbc7 	bl	8001b02 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a1b      	ldr	r3, [r3, #32]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d008      	beq.n	800738e <HAL_SPI_Init+0x136>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6a1b      	ldr	r3, [r3, #32]
 8007380:	2b80      	cmp	r3, #128	; 0x80
 8007382:	d004      	beq.n	800738e <HAL_SPI_Init+0x136>
 8007384:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8007388:	4833      	ldr	r0, [pc, #204]	; (8007458 <HAL_SPI_Init+0x200>)
 800738a:	f7fa fbba 	bl	8001b02 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007392:	2b00      	cmp	r3, #0
 8007394:	d008      	beq.n	80073a8 <HAL_SPI_Init+0x150>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739a:	2b10      	cmp	r3, #16
 800739c:	d004      	beq.n	80073a8 <HAL_SPI_Init+0x150>
 800739e:	f240 1147 	movw	r1, #327	; 0x147
 80073a2:	482d      	ldr	r0, [pc, #180]	; (8007458 <HAL_SPI_Init+0x200>)
 80073a4:	f7fa fbad 	bl	8001b02 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d155      	bne.n	800745c <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d008      	beq.n	80073ca <HAL_SPI_Init+0x172>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d004      	beq.n	80073ca <HAL_SPI_Init+0x172>
 80073c0:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80073c4:	4824      	ldr	r0, [pc, #144]	; (8007458 <HAL_SPI_Init+0x200>)
 80073c6:	f7fa fb9c 	bl	8001b02 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	695b      	ldr	r3, [r3, #20]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d008      	beq.n	80073e4 <HAL_SPI_Init+0x18c>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d004      	beq.n	80073e4 <HAL_SPI_Init+0x18c>
 80073da:	f240 114b 	movw	r1, #331	; 0x14b
 80073de:	481e      	ldr	r0, [pc, #120]	; (8007458 <HAL_SPI_Init+0x200>)
 80073e0:	f7fa fb8f 	bl	8001b02 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073ec:	d125      	bne.n	800743a <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	69db      	ldr	r3, [r3, #28]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d05d      	beq.n	80074b2 <HAL_SPI_Init+0x25a>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	69db      	ldr	r3, [r3, #28]
 80073fa:	2b08      	cmp	r3, #8
 80073fc:	d059      	beq.n	80074b2 <HAL_SPI_Init+0x25a>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	2b10      	cmp	r3, #16
 8007404:	d055      	beq.n	80074b2 <HAL_SPI_Init+0x25a>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	69db      	ldr	r3, [r3, #28]
 800740a:	2b18      	cmp	r3, #24
 800740c:	d051      	beq.n	80074b2 <HAL_SPI_Init+0x25a>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	2b20      	cmp	r3, #32
 8007414:	d04d      	beq.n	80074b2 <HAL_SPI_Init+0x25a>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	69db      	ldr	r3, [r3, #28]
 800741a:	2b28      	cmp	r3, #40	; 0x28
 800741c:	d049      	beq.n	80074b2 <HAL_SPI_Init+0x25a>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	69db      	ldr	r3, [r3, #28]
 8007422:	2b30      	cmp	r3, #48	; 0x30
 8007424:	d045      	beq.n	80074b2 <HAL_SPI_Init+0x25a>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	69db      	ldr	r3, [r3, #28]
 800742a:	2b38      	cmp	r3, #56	; 0x38
 800742c:	d041      	beq.n	80074b2 <HAL_SPI_Init+0x25a>
 800742e:	f240 114f 	movw	r1, #335	; 0x14f
 8007432:	4809      	ldr	r0, [pc, #36]	; (8007458 <HAL_SPI_Init+0x200>)
 8007434:	f7fa fb65 	bl	8001b02 <assert_failed>
 8007438:	e03b      	b.n	80074b2 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	61da      	str	r2, [r3, #28]
 8007440:	e037      	b.n	80074b2 <HAL_SPI_Init+0x25a>
 8007442:	bf00      	nop
 8007444:	40013000 	.word	0x40013000
 8007448:	40003800 	.word	0x40003800
 800744c:	40003c00 	.word	0x40003c00
 8007450:	40013400 	.word	0x40013400
 8007454:	40015000 	.word	0x40015000
 8007458:	0800d424 	.word	0x0800d424
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	69db      	ldr	r3, [r3, #28]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d020      	beq.n	80074a6 <HAL_SPI_Init+0x24e>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	69db      	ldr	r3, [r3, #28]
 8007468:	2b08      	cmp	r3, #8
 800746a:	d01c      	beq.n	80074a6 <HAL_SPI_Init+0x24e>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	69db      	ldr	r3, [r3, #28]
 8007470:	2b10      	cmp	r3, #16
 8007472:	d018      	beq.n	80074a6 <HAL_SPI_Init+0x24e>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	69db      	ldr	r3, [r3, #28]
 8007478:	2b18      	cmp	r3, #24
 800747a:	d014      	beq.n	80074a6 <HAL_SPI_Init+0x24e>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	69db      	ldr	r3, [r3, #28]
 8007480:	2b20      	cmp	r3, #32
 8007482:	d010      	beq.n	80074a6 <HAL_SPI_Init+0x24e>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	69db      	ldr	r3, [r3, #28]
 8007488:	2b28      	cmp	r3, #40	; 0x28
 800748a:	d00c      	beq.n	80074a6 <HAL_SPI_Init+0x24e>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	69db      	ldr	r3, [r3, #28]
 8007490:	2b30      	cmp	r3, #48	; 0x30
 8007492:	d008      	beq.n	80074a6 <HAL_SPI_Init+0x24e>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	69db      	ldr	r3, [r3, #28]
 8007498:	2b38      	cmp	r3, #56	; 0x38
 800749a:	d004      	beq.n	80074a6 <HAL_SPI_Init+0x24e>
 800749c:	f240 1159 	movw	r1, #345	; 0x159
 80074a0:	484a      	ldr	r0, [pc, #296]	; (80075cc <HAL_SPI_Init+0x374>)
 80074a2:	f7fa fb2e 	bl	8001b02 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d126      	bne.n	8007512 <HAL_SPI_Init+0x2ba>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a40      	ldr	r2, [pc, #256]	; (80075d0 <HAL_SPI_Init+0x378>)
 80074d0:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a3f      	ldr	r2, [pc, #252]	; (80075d4 <HAL_SPI_Init+0x37c>)
 80074d6:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a3f      	ldr	r2, [pc, #252]	; (80075d8 <HAL_SPI_Init+0x380>)
 80074dc:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a3e      	ldr	r2, [pc, #248]	; (80075dc <HAL_SPI_Init+0x384>)
 80074e2:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a3e      	ldr	r2, [pc, #248]	; (80075e0 <HAL_SPI_Init+0x388>)
 80074e8:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a3d      	ldr	r2, [pc, #244]	; (80075e4 <HAL_SPI_Init+0x38c>)
 80074ee:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a3d      	ldr	r2, [pc, #244]	; (80075e8 <HAL_SPI_Init+0x390>)
 80074f4:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a3c      	ldr	r2, [pc, #240]	; (80075ec <HAL_SPI_Init+0x394>)
 80074fa:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007500:	2b00      	cmp	r3, #0
 8007502:	d102      	bne.n	800750a <HAL_SPI_Init+0x2b2>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a3a      	ldr	r2, [pc, #232]	; (80075f0 <HAL_SPI_Init+0x398>)
 8007508:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2202      	movs	r2, #2
 8007516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007528:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800753a:	431a      	orrs	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007544:	431a      	orrs	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	f003 0302 	and.w	r3, r3, #2
 800754e:	431a      	orrs	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	695b      	ldr	r3, [r3, #20]
 8007554:	f003 0301 	and.w	r3, r3, #1
 8007558:	431a      	orrs	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007562:	431a      	orrs	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	69db      	ldr	r3, [r3, #28]
 8007568:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800756c:	431a      	orrs	r2, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a1b      	ldr	r3, [r3, #32]
 8007572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007576:	ea42 0103 	orr.w	r1, r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	430a      	orrs	r2, r1
 8007588:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	0c1b      	lsrs	r3, r3, #16
 8007590:	f003 0104 	and.w	r1, r3, #4
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	f003 0210 	and.w	r2, r3, #16
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	430a      	orrs	r2, r1
 80075a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	69da      	ldr	r2, [r3, #28]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3708      	adds	r7, #8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	0800d424 	.word	0x0800d424
 80075d0:	080077f5 	.word	0x080077f5
 80075d4:	08007809 	.word	0x08007809
 80075d8:	0800781d 	.word	0x0800781d
 80075dc:	08007831 	.word	0x08007831
 80075e0:	08007845 	.word	0x08007845
 80075e4:	08007859 	.word	0x08007859
 80075e8:	0800786d 	.word	0x0800786d
 80075ec:	08007881 	.word	0x08007881
 80075f0:	08001b85 	.word	0x08001b85

080075f4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b088      	sub	sp, #32
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	099b      	lsrs	r3, r3, #6
 8007610:	f003 0301 	and.w	r3, r3, #1
 8007614:	2b00      	cmp	r3, #0
 8007616:	d10f      	bne.n	8007638 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007618:	69bb      	ldr	r3, [r7, #24]
 800761a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00a      	beq.n	8007638 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	099b      	lsrs	r3, r3, #6
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	2b00      	cmp	r3, #0
 800762c:	d004      	beq.n	8007638 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	4798      	blx	r3
    return;
 8007636:	e0d8      	b.n	80077ea <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	085b      	lsrs	r3, r3, #1
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00a      	beq.n	800765a <HAL_SPI_IRQHandler+0x66>
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	09db      	lsrs	r3, r3, #7
 8007648:	f003 0301 	and.w	r3, r3, #1
 800764c:	2b00      	cmp	r3, #0
 800764e:	d004      	beq.n	800765a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	4798      	blx	r3
    return;
 8007658:	e0c7      	b.n	80077ea <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	095b      	lsrs	r3, r3, #5
 800765e:	f003 0301 	and.w	r3, r3, #1
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10c      	bne.n	8007680 <HAL_SPI_IRQHandler+0x8c>
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	099b      	lsrs	r3, r3, #6
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	2b00      	cmp	r3, #0
 8007670:	d106      	bne.n	8007680 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	0a1b      	lsrs	r3, r3, #8
 8007676:	f003 0301 	and.w	r3, r3, #1
 800767a:	2b00      	cmp	r3, #0
 800767c:	f000 80b5 	beq.w	80077ea <HAL_SPI_IRQHandler+0x1f6>
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	095b      	lsrs	r3, r3, #5
 8007684:	f003 0301 	and.w	r3, r3, #1
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 80ae 	beq.w	80077ea <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	099b      	lsrs	r3, r3, #6
 8007692:	f003 0301 	and.w	r3, r3, #1
 8007696:	2b00      	cmp	r3, #0
 8007698:	d023      	beq.n	80076e2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2b03      	cmp	r3, #3
 80076a4:	d011      	beq.n	80076ca <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076aa:	f043 0204 	orr.w	r2, r3, #4
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076b2:	2300      	movs	r3, #0
 80076b4:	617b      	str	r3, [r7, #20]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	617b      	str	r3, [r7, #20]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	617b      	str	r3, [r7, #20]
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	e00b      	b.n	80076e2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076ca:	2300      	movs	r3, #0
 80076cc:	613b      	str	r3, [r7, #16]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	613b      	str	r3, [r7, #16]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	613b      	str	r3, [r7, #16]
 80076de:	693b      	ldr	r3, [r7, #16]
        return;
 80076e0:	e083      	b.n	80077ea <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	095b      	lsrs	r3, r3, #5
 80076e6:	f003 0301 	and.w	r3, r3, #1
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d014      	beq.n	8007718 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076f2:	f043 0201 	orr.w	r2, r3, #1
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80076fa:	2300      	movs	r3, #0
 80076fc:	60fb      	str	r3, [r7, #12]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	60fb      	str	r3, [r7, #12]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007714:	601a      	str	r2, [r3, #0]
 8007716:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	0a1b      	lsrs	r3, r3, #8
 800771c:	f003 0301 	and.w	r3, r3, #1
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00c      	beq.n	800773e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007728:	f043 0208 	orr.w	r2, r3, #8
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007730:	2300      	movs	r3, #0
 8007732:	60bb      	str	r3, [r7, #8]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	60bb      	str	r3, [r7, #8]
 800773c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007742:	2b00      	cmp	r3, #0
 8007744:	d050      	beq.n	80077e8 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	685a      	ldr	r2, [r3, #4]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007754:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	f003 0302 	and.w	r3, r3, #2
 8007764:	2b00      	cmp	r3, #0
 8007766:	d104      	bne.n	8007772 <HAL_SPI_IRQHandler+0x17e>
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	f003 0301 	and.w	r3, r3, #1
 800776e:	2b00      	cmp	r3, #0
 8007770:	d034      	beq.n	80077dc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	685a      	ldr	r2, [r3, #4]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f022 0203 	bic.w	r2, r2, #3
 8007780:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007786:	2b00      	cmp	r3, #0
 8007788:	d011      	beq.n	80077ae <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800778e:	4a18      	ldr	r2, [pc, #96]	; (80077f0 <HAL_SPI_IRQHandler+0x1fc>)
 8007790:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007796:	4618      	mov	r0, r3
 8007798:	f7fc f914 	bl	80039c4 <HAL_DMA_Abort_IT>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d005      	beq.n	80077ae <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d017      	beq.n	80077e6 <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077ba:	4a0d      	ldr	r2, [pc, #52]	; (80077f0 <HAL_SPI_IRQHandler+0x1fc>)
 80077bc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7fc f8fe 	bl	80039c4 <HAL_DMA_Abort_IT>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00b      	beq.n	80077e6 <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80077da:	e004      	b.n	80077e6 <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80077e4:	e000      	b.n	80077e8 <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 80077e6:	bf00      	nop
    return;
 80077e8:	bf00      	nop
  }
}
 80077ea:	3720      	adds	r7, #32
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	08007895 	.word	0x08007895

080077f4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80077fc:	bf00      	nop
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800784c:	bf00      	nop
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007874:	bf00      	nop
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8007888:	bf00      	nop
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80078b6:	bf00      	nop
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
	...

080078c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d101      	bne.n	80078d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	e0b2      	b.n	8007a38 <HAL_TIM_Base_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a5a      	ldr	r2, [pc, #360]	; (8007a40 <HAL_TIM_Base_Init+0x180>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d027      	beq.n	800792c <HAL_TIM_Base_Init+0x6c>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078e4:	d022      	beq.n	800792c <HAL_TIM_Base_Init+0x6c>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a56      	ldr	r2, [pc, #344]	; (8007a44 <HAL_TIM_Base_Init+0x184>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d01d      	beq.n	800792c <HAL_TIM_Base_Init+0x6c>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a54      	ldr	r2, [pc, #336]	; (8007a48 <HAL_TIM_Base_Init+0x188>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d018      	beq.n	800792c <HAL_TIM_Base_Init+0x6c>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a53      	ldr	r2, [pc, #332]	; (8007a4c <HAL_TIM_Base_Init+0x18c>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d013      	beq.n	800792c <HAL_TIM_Base_Init+0x6c>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a51      	ldr	r2, [pc, #324]	; (8007a50 <HAL_TIM_Base_Init+0x190>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d00e      	beq.n	800792c <HAL_TIM_Base_Init+0x6c>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a50      	ldr	r2, [pc, #320]	; (8007a54 <HAL_TIM_Base_Init+0x194>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d009      	beq.n	800792c <HAL_TIM_Base_Init+0x6c>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a4e      	ldr	r2, [pc, #312]	; (8007a58 <HAL_TIM_Base_Init+0x198>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d004      	beq.n	800792c <HAL_TIM_Base_Init+0x6c>
 8007922:	f240 1113 	movw	r1, #275	; 0x113
 8007926:	484d      	ldr	r0, [pc, #308]	; (8007a5c <HAL_TIM_Base_Init+0x19c>)
 8007928:	f7fa f8eb 	bl	8001b02 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d014      	beq.n	800795e <HAL_TIM_Base_Init+0x9e>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	2b10      	cmp	r3, #16
 800793a:	d010      	beq.n	800795e <HAL_TIM_Base_Init+0x9e>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	2b20      	cmp	r3, #32
 8007942:	d00c      	beq.n	800795e <HAL_TIM_Base_Init+0x9e>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	2b40      	cmp	r3, #64	; 0x40
 800794a:	d008      	beq.n	800795e <HAL_TIM_Base_Init+0x9e>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	2b60      	cmp	r3, #96	; 0x60
 8007952:	d004      	beq.n	800795e <HAL_TIM_Base_Init+0x9e>
 8007954:	f44f 718a 	mov.w	r1, #276	; 0x114
 8007958:	4840      	ldr	r0, [pc, #256]	; (8007a5c <HAL_TIM_Base_Init+0x19c>)
 800795a:	f7fa f8d2 	bl	8001b02 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00e      	beq.n	8007984 <HAL_TIM_Base_Init+0xc4>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800796e:	d009      	beq.n	8007984 <HAL_TIM_Base_Init+0xc4>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007978:	d004      	beq.n	8007984 <HAL_TIM_Base_Init+0xc4>
 800797a:	f240 1115 	movw	r1, #277	; 0x115
 800797e:	4837      	ldr	r0, [pc, #220]	; (8007a5c <HAL_TIM_Base_Init+0x19c>)
 8007980:	f7fa f8bf 	bl	8001b02 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d008      	beq.n	800799e <HAL_TIM_Base_Init+0xde>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	2b80      	cmp	r3, #128	; 0x80
 8007992:	d004      	beq.n	800799e <HAL_TIM_Base_Init+0xde>
 8007994:	f44f 718b 	mov.w	r1, #278	; 0x116
 8007998:	4830      	ldr	r0, [pc, #192]	; (8007a5c <HAL_TIM_Base_Init+0x19c>)
 800799a:	f7fa f8b2 	bl	8001b02 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d111      	bne.n	80079ce <HAL_TIM_Base_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 fefe 	bl	80087b4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d102      	bne.n	80079c6 <HAL_TIM_Base_Init+0x106>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a27      	ldr	r2, [pc, #156]	; (8007a60 <HAL_TIM_Base_Init+0x1a0>)
 80079c4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2202      	movs	r2, #2
 80079d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	3304      	adds	r3, #4
 80079de:	4619      	mov	r1, r3
 80079e0:	4610      	mov	r0, r2
 80079e2:	f000 fdcd 	bl	8008580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2201      	movs	r2, #1
 80079ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2201      	movs	r2, #1
 8007a12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	40010000 	.word	0x40010000
 8007a44:	40000400 	.word	0x40000400
 8007a48:	40000800 	.word	0x40000800
 8007a4c:	40000c00 	.word	0x40000c00
 8007a50:	40014000 	.word	0x40014000
 8007a54:	40014400 	.word	0x40014400
 8007a58:	40014800 	.word	0x40014800
 8007a5c:	0800d498 	.word	0x0800d498
 8007a60:	080022e5 	.word	0x080022e5

08007a64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a3d      	ldr	r2, [pc, #244]	; (8007b68 <HAL_TIM_Base_Start_IT+0x104>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d027      	beq.n	8007ac6 <HAL_TIM_Base_Start_IT+0x62>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a7e:	d022      	beq.n	8007ac6 <HAL_TIM_Base_Start_IT+0x62>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a39      	ldr	r2, [pc, #228]	; (8007b6c <HAL_TIM_Base_Start_IT+0x108>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d01d      	beq.n	8007ac6 <HAL_TIM_Base_Start_IT+0x62>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a38      	ldr	r2, [pc, #224]	; (8007b70 <HAL_TIM_Base_Start_IT+0x10c>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d018      	beq.n	8007ac6 <HAL_TIM_Base_Start_IT+0x62>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a36      	ldr	r2, [pc, #216]	; (8007b74 <HAL_TIM_Base_Start_IT+0x110>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d013      	beq.n	8007ac6 <HAL_TIM_Base_Start_IT+0x62>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a35      	ldr	r2, [pc, #212]	; (8007b78 <HAL_TIM_Base_Start_IT+0x114>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d00e      	beq.n	8007ac6 <HAL_TIM_Base_Start_IT+0x62>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a33      	ldr	r2, [pc, #204]	; (8007b7c <HAL_TIM_Base_Start_IT+0x118>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d009      	beq.n	8007ac6 <HAL_TIM_Base_Start_IT+0x62>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a32      	ldr	r2, [pc, #200]	; (8007b80 <HAL_TIM_Base_Start_IT+0x11c>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d004      	beq.n	8007ac6 <HAL_TIM_Base_Start_IT+0x62>
 8007abc:	f240 11cf 	movw	r1, #463	; 0x1cf
 8007ac0:	4830      	ldr	r0, [pc, #192]	; (8007b84 <HAL_TIM_Base_Start_IT+0x120>)
 8007ac2:	f7fa f81e 	bl	8001b02 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d001      	beq.n	8007ad6 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e044      	b.n	8007b60 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2202      	movs	r2, #2
 8007ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68da      	ldr	r2, [r3, #12]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f042 0201 	orr.w	r2, r2, #1
 8007aec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a1d      	ldr	r2, [pc, #116]	; (8007b68 <HAL_TIM_Base_Start_IT+0x104>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d018      	beq.n	8007b2a <HAL_TIM_Base_Start_IT+0xc6>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b00:	d013      	beq.n	8007b2a <HAL_TIM_Base_Start_IT+0xc6>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a19      	ldr	r2, [pc, #100]	; (8007b6c <HAL_TIM_Base_Start_IT+0x108>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d00e      	beq.n	8007b2a <HAL_TIM_Base_Start_IT+0xc6>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a17      	ldr	r2, [pc, #92]	; (8007b70 <HAL_TIM_Base_Start_IT+0x10c>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d009      	beq.n	8007b2a <HAL_TIM_Base_Start_IT+0xc6>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a16      	ldr	r2, [pc, #88]	; (8007b74 <HAL_TIM_Base_Start_IT+0x110>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d004      	beq.n	8007b2a <HAL_TIM_Base_Start_IT+0xc6>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a14      	ldr	r2, [pc, #80]	; (8007b78 <HAL_TIM_Base_Start_IT+0x114>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d111      	bne.n	8007b4e <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	f003 0307 	and.w	r3, r3, #7
 8007b34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2b06      	cmp	r3, #6
 8007b3a:	d010      	beq.n	8007b5e <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f042 0201 	orr.w	r2, r2, #1
 8007b4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b4c:	e007      	b.n	8007b5e <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f042 0201 	orr.w	r2, r2, #1
 8007b5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	40010000 	.word	0x40010000
 8007b6c:	40000400 	.word	0x40000400
 8007b70:	40000800 	.word	0x40000800
 8007b74:	40000c00 	.word	0x40000c00
 8007b78:	40014000 	.word	0x40014000
 8007b7c:	40014400 	.word	0x40014400
 8007b80:	40014800 	.word	0x40014800
 8007b84:	0800d498 	.word	0x0800d498

08007b88 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a29      	ldr	r2, [pc, #164]	; (8007c3c <HAL_TIM_Base_Stop_IT+0xb4>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d027      	beq.n	8007bea <HAL_TIM_Base_Stop_IT+0x62>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ba2:	d022      	beq.n	8007bea <HAL_TIM_Base_Stop_IT+0x62>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a25      	ldr	r2, [pc, #148]	; (8007c40 <HAL_TIM_Base_Stop_IT+0xb8>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d01d      	beq.n	8007bea <HAL_TIM_Base_Stop_IT+0x62>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a24      	ldr	r2, [pc, #144]	; (8007c44 <HAL_TIM_Base_Stop_IT+0xbc>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d018      	beq.n	8007bea <HAL_TIM_Base_Stop_IT+0x62>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a22      	ldr	r2, [pc, #136]	; (8007c48 <HAL_TIM_Base_Stop_IT+0xc0>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d013      	beq.n	8007bea <HAL_TIM_Base_Stop_IT+0x62>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a21      	ldr	r2, [pc, #132]	; (8007c4c <HAL_TIM_Base_Stop_IT+0xc4>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d00e      	beq.n	8007bea <HAL_TIM_Base_Stop_IT+0x62>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a1f      	ldr	r2, [pc, #124]	; (8007c50 <HAL_TIM_Base_Stop_IT+0xc8>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d009      	beq.n	8007bea <HAL_TIM_Base_Stop_IT+0x62>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a1e      	ldr	r2, [pc, #120]	; (8007c54 <HAL_TIM_Base_Stop_IT+0xcc>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d004      	beq.n	8007bea <HAL_TIM_Base_Stop_IT+0x62>
 8007be0:	f240 11f7 	movw	r1, #503	; 0x1f7
 8007be4:	481c      	ldr	r0, [pc, #112]	; (8007c58 <HAL_TIM_Base_Stop_IT+0xd0>)
 8007be6:	f7f9 ff8c 	bl	8001b02 <assert_failed>

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68da      	ldr	r2, [r3, #12]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f022 0201 	bic.w	r2, r2, #1
 8007bf8:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	6a1a      	ldr	r2, [r3, #32]
 8007c00:	f241 1311 	movw	r3, #4369	; 0x1111
 8007c04:	4013      	ands	r3, r2
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10f      	bne.n	8007c2a <HAL_TIM_Base_Stop_IT+0xa2>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	6a1a      	ldr	r2, [r3, #32]
 8007c10:	f240 4344 	movw	r3, #1092	; 0x444
 8007c14:	4013      	ands	r3, r2
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d107      	bne.n	8007c2a <HAL_TIM_Base_Stop_IT+0xa2>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f022 0201 	bic.w	r2, r2, #1
 8007c28:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3708      	adds	r7, #8
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	40010000 	.word	0x40010000
 8007c40:	40000400 	.word	0x40000400
 8007c44:	40000800 	.word	0x40000800
 8007c48:	40000c00 	.word	0x40000c00
 8007c4c:	40014000 	.word	0x40014000
 8007c50:	40014400 	.word	0x40014400
 8007c54:	40014800 	.word	0x40014800
 8007c58:	0800d498 	.word	0x0800d498

08007c5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	f003 0302 	and.w	r3, r3, #2
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d128      	bne.n	8007cc4 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	f003 0302 	and.w	r3, r3, #2
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	d121      	bne.n	8007cc4 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f06f 0202 	mvn.w	r2, #2
 8007c88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	f003 0303 	and.w	r3, r3, #3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d005      	beq.n	8007caa <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	4798      	blx	r3
 8007ca8:	e009      	b.n	8007cbe <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	f003 0304 	and.w	r3, r3, #4
 8007cce:	2b04      	cmp	r3, #4
 8007cd0:	d128      	bne.n	8007d24 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	f003 0304 	and.w	r3, r3, #4
 8007cdc:	2b04      	cmp	r3, #4
 8007cde:	d121      	bne.n	8007d24 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f06f 0204 	mvn.w	r2, #4
 8007ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2202      	movs	r2, #2
 8007cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d005      	beq.n	8007d0a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	4798      	blx	r3
 8007d08:	e009      	b.n	8007d1e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	f003 0308 	and.w	r3, r3, #8
 8007d2e:	2b08      	cmp	r3, #8
 8007d30:	d128      	bne.n	8007d84 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	f003 0308 	and.w	r3, r3, #8
 8007d3c:	2b08      	cmp	r3, #8
 8007d3e:	d121      	bne.n	8007d84 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f06f 0208 	mvn.w	r2, #8
 8007d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2204      	movs	r2, #4
 8007d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	69db      	ldr	r3, [r3, #28]
 8007d56:	f003 0303 	and.w	r3, r3, #3
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d005      	beq.n	8007d6a <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	4798      	blx	r3
 8007d68:	e009      	b.n	8007d7e <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	f003 0310 	and.w	r3, r3, #16
 8007d8e:	2b10      	cmp	r3, #16
 8007d90:	d128      	bne.n	8007de4 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	f003 0310 	and.w	r3, r3, #16
 8007d9c:	2b10      	cmp	r3, #16
 8007d9e:	d121      	bne.n	8007de4 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f06f 0210 	mvn.w	r2, #16
 8007da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2208      	movs	r2, #8
 8007dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	69db      	ldr	r3, [r3, #28]
 8007db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d005      	beq.n	8007dca <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	4798      	blx	r3
 8007dc8:	e009      	b.n	8007dde <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	f003 0301 	and.w	r3, r3, #1
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d110      	bne.n	8007e14 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	f003 0301 	and.w	r3, r3, #1
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d109      	bne.n	8007e14 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f06f 0201 	mvn.w	r2, #1
 8007e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e1e:	2b80      	cmp	r3, #128	; 0x80
 8007e20:	d110      	bne.n	8007e44 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e2c:	2b80      	cmp	r3, #128	; 0x80
 8007e2e:	d109      	bne.n	8007e44 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e4e:	2b40      	cmp	r3, #64	; 0x40
 8007e50:	d110      	bne.n	8007e74 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e5c:	2b40      	cmp	r3, #64	; 0x40
 8007e5e:	d109      	bne.n	8007e74 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	f003 0320 	and.w	r3, r3, #32
 8007e7e:	2b20      	cmp	r3, #32
 8007e80:	d110      	bne.n	8007ea4 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	f003 0320 	and.w	r3, r3, #32
 8007e8c:	2b20      	cmp	r3, #32
 8007e8e:	d109      	bne.n	8007ea4 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f06f 0220 	mvn.w	r2, #32
 8007e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ea4:	bf00      	nop
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d101      	bne.n	8007ec8 <HAL_TIM_ConfigClockSource+0x1c>
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	e2f0      	b.n	80084aa <HAL_TIM_ConfigClockSource+0x5fe>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2202      	movs	r2, #2
 8007ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ee0:	d029      	beq.n	8007f36 <HAL_TIM_ConfigClockSource+0x8a>
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	2b70      	cmp	r3, #112	; 0x70
 8007ee8:	d025      	beq.n	8007f36 <HAL_TIM_ConfigClockSource+0x8a>
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ef2:	d020      	beq.n	8007f36 <HAL_TIM_ConfigClockSource+0x8a>
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2b40      	cmp	r3, #64	; 0x40
 8007efa:	d01c      	beq.n	8007f36 <HAL_TIM_ConfigClockSource+0x8a>
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2b50      	cmp	r3, #80	; 0x50
 8007f02:	d018      	beq.n	8007f36 <HAL_TIM_ConfigClockSource+0x8a>
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2b60      	cmp	r3, #96	; 0x60
 8007f0a:	d014      	beq.n	8007f36 <HAL_TIM_ConfigClockSource+0x8a>
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d010      	beq.n	8007f36 <HAL_TIM_ConfigClockSource+0x8a>
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2b10      	cmp	r3, #16
 8007f1a:	d00c      	beq.n	8007f36 <HAL_TIM_ConfigClockSource+0x8a>
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2b20      	cmp	r3, #32
 8007f22:	d008      	beq.n	8007f36 <HAL_TIM_ConfigClockSource+0x8a>
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b30      	cmp	r3, #48	; 0x30
 8007f2a:	d004      	beq.n	8007f36 <HAL_TIM_ConfigClockSource+0x8a>
 8007f2c:	f241 41b7 	movw	r1, #5303	; 0x14b7
 8007f30:	487c      	ldr	r0, [pc, #496]	; (8008124 <HAL_TIM_ConfigClockSource+0x278>)
 8007f32:	f7f9 fde6 	bl	8001b02 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007f44:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f4c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f5e:	f000 80f1 	beq.w	8008144 <HAL_TIM_ConfigClockSource+0x298>
 8007f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f66:	f200 8293 	bhi.w	8008490 <HAL_TIM_ConfigClockSource+0x5e4>
 8007f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f6e:	d02d      	beq.n	8007fcc <HAL_TIM_ConfigClockSource+0x120>
 8007f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f74:	f200 828c 	bhi.w	8008490 <HAL_TIM_ConfigClockSource+0x5e4>
 8007f78:	2b70      	cmp	r3, #112	; 0x70
 8007f7a:	d05d      	beq.n	8008038 <HAL_TIM_ConfigClockSource+0x18c>
 8007f7c:	2b70      	cmp	r3, #112	; 0x70
 8007f7e:	f200 8287 	bhi.w	8008490 <HAL_TIM_ConfigClockSource+0x5e4>
 8007f82:	2b60      	cmp	r3, #96	; 0x60
 8007f84:	f000 81a0 	beq.w	80082c8 <HAL_TIM_ConfigClockSource+0x41c>
 8007f88:	2b60      	cmp	r3, #96	; 0x60
 8007f8a:	f200 8281 	bhi.w	8008490 <HAL_TIM_ConfigClockSource+0x5e4>
 8007f8e:	2b50      	cmp	r3, #80	; 0x50
 8007f90:	f000 8144 	beq.w	800821c <HAL_TIM_ConfigClockSource+0x370>
 8007f94:	2b50      	cmp	r3, #80	; 0x50
 8007f96:	f200 827b 	bhi.w	8008490 <HAL_TIM_ConfigClockSource+0x5e4>
 8007f9a:	2b40      	cmp	r3, #64	; 0x40
 8007f9c:	f000 81f6 	beq.w	800838c <HAL_TIM_ConfigClockSource+0x4e0>
 8007fa0:	2b40      	cmp	r3, #64	; 0x40
 8007fa2:	f200 8275 	bhi.w	8008490 <HAL_TIM_ConfigClockSource+0x5e4>
 8007fa6:	2b30      	cmp	r3, #48	; 0x30
 8007fa8:	f000 8246 	beq.w	8008438 <HAL_TIM_ConfigClockSource+0x58c>
 8007fac:	2b30      	cmp	r3, #48	; 0x30
 8007fae:	f200 826f 	bhi.w	8008490 <HAL_TIM_ConfigClockSource+0x5e4>
 8007fb2:	2b20      	cmp	r3, #32
 8007fb4:	f000 8240 	beq.w	8008438 <HAL_TIM_ConfigClockSource+0x58c>
 8007fb8:	2b20      	cmp	r3, #32
 8007fba:	f200 8269 	bhi.w	8008490 <HAL_TIM_ConfigClockSource+0x5e4>
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	f000 823a 	beq.w	8008438 <HAL_TIM_ConfigClockSource+0x58c>
 8007fc4:	2b10      	cmp	r3, #16
 8007fc6:	f000 8237 	beq.w	8008438 <HAL_TIM_ConfigClockSource+0x58c>
 8007fca:	e261      	b.n	8008490 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a55      	ldr	r2, [pc, #340]	; (8008128 <HAL_TIM_ConfigClockSource+0x27c>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	f000 825f 	beq.w	8008496 <HAL_TIM_ConfigClockSource+0x5ea>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fe0:	f000 8259 	beq.w	8008496 <HAL_TIM_ConfigClockSource+0x5ea>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a50      	ldr	r2, [pc, #320]	; (800812c <HAL_TIM_ConfigClockSource+0x280>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	f000 8253 	beq.w	8008496 <HAL_TIM_ConfigClockSource+0x5ea>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a4e      	ldr	r2, [pc, #312]	; (8008130 <HAL_TIM_ConfigClockSource+0x284>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	f000 824d 	beq.w	8008496 <HAL_TIM_ConfigClockSource+0x5ea>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a4c      	ldr	r2, [pc, #304]	; (8008134 <HAL_TIM_ConfigClockSource+0x288>)
 8008002:	4293      	cmp	r3, r2
 8008004:	f000 8247 	beq.w	8008496 <HAL_TIM_ConfigClockSource+0x5ea>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a4a      	ldr	r2, [pc, #296]	; (8008138 <HAL_TIM_ConfigClockSource+0x28c>)
 800800e:	4293      	cmp	r3, r2
 8008010:	f000 8241 	beq.w	8008496 <HAL_TIM_ConfigClockSource+0x5ea>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a48      	ldr	r2, [pc, #288]	; (800813c <HAL_TIM_ConfigClockSource+0x290>)
 800801a:	4293      	cmp	r3, r2
 800801c:	f000 823b 	beq.w	8008496 <HAL_TIM_ConfigClockSource+0x5ea>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a46      	ldr	r2, [pc, #280]	; (8008140 <HAL_TIM_ConfigClockSource+0x294>)
 8008026:	4293      	cmp	r3, r2
 8008028:	f000 8235 	beq.w	8008496 <HAL_TIM_ConfigClockSource+0x5ea>
 800802c:	f241 41c3 	movw	r1, #5315	; 0x14c3
 8008030:	483c      	ldr	r0, [pc, #240]	; (8008124 <HAL_TIM_ConfigClockSource+0x278>)
 8008032:	f7f9 fd66 	bl	8001b02 <assert_failed>
      break;
 8008036:	e22e      	b.n	8008496 <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a3a      	ldr	r2, [pc, #232]	; (8008128 <HAL_TIM_ConfigClockSource+0x27c>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d01d      	beq.n	800807e <HAL_TIM_ConfigClockSource+0x1d2>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800804a:	d018      	beq.n	800807e <HAL_TIM_ConfigClockSource+0x1d2>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a36      	ldr	r2, [pc, #216]	; (800812c <HAL_TIM_ConfigClockSource+0x280>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d013      	beq.n	800807e <HAL_TIM_ConfigClockSource+0x1d2>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a35      	ldr	r2, [pc, #212]	; (8008130 <HAL_TIM_ConfigClockSource+0x284>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d00e      	beq.n	800807e <HAL_TIM_ConfigClockSource+0x1d2>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a33      	ldr	r2, [pc, #204]	; (8008134 <HAL_TIM_ConfigClockSource+0x288>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d009      	beq.n	800807e <HAL_TIM_ConfigClockSource+0x1d2>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a32      	ldr	r2, [pc, #200]	; (8008138 <HAL_TIM_ConfigClockSource+0x28c>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d004      	beq.n	800807e <HAL_TIM_ConfigClockSource+0x1d2>
 8008074:	f241 41ca 	movw	r1, #5322	; 0x14ca
 8008078:	482a      	ldr	r0, [pc, #168]	; (8008124 <HAL_TIM_ConfigClockSource+0x278>)
 800807a:	f7f9 fd42 	bl	8001b02 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d013      	beq.n	80080ae <HAL_TIM_ConfigClockSource+0x202>
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800808e:	d00e      	beq.n	80080ae <HAL_TIM_ConfigClockSource+0x202>
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008098:	d009      	beq.n	80080ae <HAL_TIM_ConfigClockSource+0x202>
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080a2:	d004      	beq.n	80080ae <HAL_TIM_ConfigClockSource+0x202>
 80080a4:	f241 41cd 	movw	r1, #5325	; 0x14cd
 80080a8:	481e      	ldr	r0, [pc, #120]	; (8008124 <HAL_TIM_ConfigClockSource+0x278>)
 80080aa:	f7f9 fd2a 	bl	8001b02 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080b6:	d014      	beq.n	80080e2 <HAL_TIM_ConfigClockSource+0x236>
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d010      	beq.n	80080e2 <HAL_TIM_ConfigClockSource+0x236>
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00c      	beq.n	80080e2 <HAL_TIM_ConfigClockSource+0x236>
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d008      	beq.n	80080e2 <HAL_TIM_ConfigClockSource+0x236>
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	2b0a      	cmp	r3, #10
 80080d6:	d004      	beq.n	80080e2 <HAL_TIM_ConfigClockSource+0x236>
 80080d8:	f241 41ce 	movw	r1, #5326	; 0x14ce
 80080dc:	4811      	ldr	r0, [pc, #68]	; (8008124 <HAL_TIM_ConfigClockSource+0x278>)
 80080de:	f7f9 fd10 	bl	8001b02 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	2b0f      	cmp	r3, #15
 80080e8:	d904      	bls.n	80080f4 <HAL_TIM_ConfigClockSource+0x248>
 80080ea:	f241 41cf 	movw	r1, #5327	; 0x14cf
 80080ee:	480d      	ldr	r0, [pc, #52]	; (8008124 <HAL_TIM_ConfigClockSource+0x278>)
 80080f0:	f7f9 fd07 	bl	8001b02 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6818      	ldr	r0, [r3, #0]
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	6899      	ldr	r1, [r3, #8]
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	685a      	ldr	r2, [r3, #4]
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	f000 fb36 	bl	8008774 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008116:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	68ba      	ldr	r2, [r7, #8]
 800811e:	609a      	str	r2, [r3, #8]
      break;
 8008120:	e1ba      	b.n	8008498 <HAL_TIM_ConfigClockSource+0x5ec>
 8008122:	bf00      	nop
 8008124:	0800d498 	.word	0x0800d498
 8008128:	40010000 	.word	0x40010000
 800812c:	40000400 	.word	0x40000400
 8008130:	40000800 	.word	0x40000800
 8008134:	40000c00 	.word	0x40000c00
 8008138:	40014000 	.word	0x40014000
 800813c:	40014400 	.word	0x40014400
 8008140:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a8a      	ldr	r2, [pc, #552]	; (8008374 <HAL_TIM_ConfigClockSource+0x4c8>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d018      	beq.n	8008180 <HAL_TIM_ConfigClockSource+0x2d4>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008156:	d013      	beq.n	8008180 <HAL_TIM_ConfigClockSource+0x2d4>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a86      	ldr	r2, [pc, #536]	; (8008378 <HAL_TIM_ConfigClockSource+0x4cc>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d00e      	beq.n	8008180 <HAL_TIM_ConfigClockSource+0x2d4>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a85      	ldr	r2, [pc, #532]	; (800837c <HAL_TIM_ConfigClockSource+0x4d0>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d009      	beq.n	8008180 <HAL_TIM_ConfigClockSource+0x2d4>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a83      	ldr	r2, [pc, #524]	; (8008380 <HAL_TIM_ConfigClockSource+0x4d4>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d004      	beq.n	8008180 <HAL_TIM_ConfigClockSource+0x2d4>
 8008176:	f241 41e2 	movw	r1, #5346	; 0x14e2
 800817a:	4882      	ldr	r0, [pc, #520]	; (8008384 <HAL_TIM_ConfigClockSource+0x4d8>)
 800817c:	f7f9 fcc1 	bl	8001b02 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d013      	beq.n	80081b0 <HAL_TIM_ConfigClockSource+0x304>
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008190:	d00e      	beq.n	80081b0 <HAL_TIM_ConfigClockSource+0x304>
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800819a:	d009      	beq.n	80081b0 <HAL_TIM_ConfigClockSource+0x304>
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081a4:	d004      	beq.n	80081b0 <HAL_TIM_ConfigClockSource+0x304>
 80081a6:	f241 41e5 	movw	r1, #5349	; 0x14e5
 80081aa:	4876      	ldr	r0, [pc, #472]	; (8008384 <HAL_TIM_ConfigClockSource+0x4d8>)
 80081ac:	f7f9 fca9 	bl	8001b02 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081b8:	d014      	beq.n	80081e4 <HAL_TIM_ConfigClockSource+0x338>
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d010      	beq.n	80081e4 <HAL_TIM_ConfigClockSource+0x338>
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00c      	beq.n	80081e4 <HAL_TIM_ConfigClockSource+0x338>
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	2b02      	cmp	r3, #2
 80081d0:	d008      	beq.n	80081e4 <HAL_TIM_ConfigClockSource+0x338>
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	2b0a      	cmp	r3, #10
 80081d8:	d004      	beq.n	80081e4 <HAL_TIM_ConfigClockSource+0x338>
 80081da:	f241 41e6 	movw	r1, #5350	; 0x14e6
 80081de:	4869      	ldr	r0, [pc, #420]	; (8008384 <HAL_TIM_ConfigClockSource+0x4d8>)
 80081e0:	f7f9 fc8f 	bl	8001b02 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	2b0f      	cmp	r3, #15
 80081ea:	d904      	bls.n	80081f6 <HAL_TIM_ConfigClockSource+0x34a>
 80081ec:	f241 41e7 	movw	r1, #5351	; 0x14e7
 80081f0:	4864      	ldr	r0, [pc, #400]	; (8008384 <HAL_TIM_ConfigClockSource+0x4d8>)
 80081f2:	f7f9 fc86 	bl	8001b02 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6818      	ldr	r0, [r3, #0]
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	6899      	ldr	r1, [r3, #8]
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	685a      	ldr	r2, [r3, #4]
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	f000 fab5 	bl	8008774 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	689a      	ldr	r2, [r3, #8]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008218:	609a      	str	r2, [r3, #8]
      break;
 800821a:	e13d      	b.n	8008498 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a54      	ldr	r2, [pc, #336]	; (8008374 <HAL_TIM_ConfigClockSource+0x4c8>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d01d      	beq.n	8008262 <HAL_TIM_ConfigClockSource+0x3b6>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800822e:	d018      	beq.n	8008262 <HAL_TIM_ConfigClockSource+0x3b6>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a50      	ldr	r2, [pc, #320]	; (8008378 <HAL_TIM_ConfigClockSource+0x4cc>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d013      	beq.n	8008262 <HAL_TIM_ConfigClockSource+0x3b6>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a4f      	ldr	r2, [pc, #316]	; (800837c <HAL_TIM_ConfigClockSource+0x4d0>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d00e      	beq.n	8008262 <HAL_TIM_ConfigClockSource+0x3b6>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a4d      	ldr	r2, [pc, #308]	; (8008380 <HAL_TIM_ConfigClockSource+0x4d4>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d009      	beq.n	8008262 <HAL_TIM_ConfigClockSource+0x3b6>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a4d      	ldr	r2, [pc, #308]	; (8008388 <HAL_TIM_ConfigClockSource+0x4dc>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d004      	beq.n	8008262 <HAL_TIM_ConfigClockSource+0x3b6>
 8008258:	f241 41f6 	movw	r1, #5366	; 0x14f6
 800825c:	4849      	ldr	r0, [pc, #292]	; (8008384 <HAL_TIM_ConfigClockSource+0x4d8>)
 800825e:	f7f9 fc50 	bl	8001b02 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800826a:	d014      	beq.n	8008296 <HAL_TIM_ConfigClockSource+0x3ea>
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d010      	beq.n	8008296 <HAL_TIM_ConfigClockSource+0x3ea>
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00c      	beq.n	8008296 <HAL_TIM_ConfigClockSource+0x3ea>
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	2b02      	cmp	r3, #2
 8008282:	d008      	beq.n	8008296 <HAL_TIM_ConfigClockSource+0x3ea>
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	2b0a      	cmp	r3, #10
 800828a:	d004      	beq.n	8008296 <HAL_TIM_ConfigClockSource+0x3ea>
 800828c:	f241 41f9 	movw	r1, #5369	; 0x14f9
 8008290:	483c      	ldr	r0, [pc, #240]	; (8008384 <HAL_TIM_ConfigClockSource+0x4d8>)
 8008292:	f7f9 fc36 	bl	8001b02 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	2b0f      	cmp	r3, #15
 800829c:	d904      	bls.n	80082a8 <HAL_TIM_ConfigClockSource+0x3fc>
 800829e:	f241 41fa 	movw	r1, #5370	; 0x14fa
 80082a2:	4838      	ldr	r0, [pc, #224]	; (8008384 <HAL_TIM_ConfigClockSource+0x4d8>)
 80082a4:	f7f9 fc2d 	bl	8001b02 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6818      	ldr	r0, [r3, #0]
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	6859      	ldr	r1, [r3, #4]
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	461a      	mov	r2, r3
 80082b6:	f000 f9e3 	bl	8008680 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2150      	movs	r1, #80	; 0x50
 80082c0:	4618      	mov	r0, r3
 80082c2:	f000 fa3c 	bl	800873e <TIM_ITRx_SetConfig>
      break;
 80082c6:	e0e7      	b.n	8008498 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a29      	ldr	r2, [pc, #164]	; (8008374 <HAL_TIM_ConfigClockSource+0x4c8>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d01d      	beq.n	800830e <HAL_TIM_ConfigClockSource+0x462>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082da:	d018      	beq.n	800830e <HAL_TIM_ConfigClockSource+0x462>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a25      	ldr	r2, [pc, #148]	; (8008378 <HAL_TIM_ConfigClockSource+0x4cc>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d013      	beq.n	800830e <HAL_TIM_ConfigClockSource+0x462>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a24      	ldr	r2, [pc, #144]	; (800837c <HAL_TIM_ConfigClockSource+0x4d0>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d00e      	beq.n	800830e <HAL_TIM_ConfigClockSource+0x462>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a22      	ldr	r2, [pc, #136]	; (8008380 <HAL_TIM_ConfigClockSource+0x4d4>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d009      	beq.n	800830e <HAL_TIM_ConfigClockSource+0x462>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a22      	ldr	r2, [pc, #136]	; (8008388 <HAL_TIM_ConfigClockSource+0x4dc>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d004      	beq.n	800830e <HAL_TIM_ConfigClockSource+0x462>
 8008304:	f241 5106 	movw	r1, #5382	; 0x1506
 8008308:	481e      	ldr	r0, [pc, #120]	; (8008384 <HAL_TIM_ConfigClockSource+0x4d8>)
 800830a:	f7f9 fbfa 	bl	8001b02 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008316:	d014      	beq.n	8008342 <HAL_TIM_ConfigClockSource+0x496>
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d010      	beq.n	8008342 <HAL_TIM_ConfigClockSource+0x496>
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00c      	beq.n	8008342 <HAL_TIM_ConfigClockSource+0x496>
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	2b02      	cmp	r3, #2
 800832e:	d008      	beq.n	8008342 <HAL_TIM_ConfigClockSource+0x496>
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	2b0a      	cmp	r3, #10
 8008336:	d004      	beq.n	8008342 <HAL_TIM_ConfigClockSource+0x496>
 8008338:	f241 5109 	movw	r1, #5385	; 0x1509
 800833c:	4811      	ldr	r0, [pc, #68]	; (8008384 <HAL_TIM_ConfigClockSource+0x4d8>)
 800833e:	f7f9 fbe0 	bl	8001b02 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	2b0f      	cmp	r3, #15
 8008348:	d904      	bls.n	8008354 <HAL_TIM_ConfigClockSource+0x4a8>
 800834a:	f241 510a 	movw	r1, #5386	; 0x150a
 800834e:	480d      	ldr	r0, [pc, #52]	; (8008384 <HAL_TIM_ConfigClockSource+0x4d8>)
 8008350:	f7f9 fbd7 	bl	8001b02 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6818      	ldr	r0, [r3, #0]
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	6859      	ldr	r1, [r3, #4]
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	461a      	mov	r2, r3
 8008362:	f000 f9bc 	bl	80086de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2160      	movs	r1, #96	; 0x60
 800836c:	4618      	mov	r0, r3
 800836e:	f000 f9e6 	bl	800873e <TIM_ITRx_SetConfig>
      break;
 8008372:	e091      	b.n	8008498 <HAL_TIM_ConfigClockSource+0x5ec>
 8008374:	40010000 	.word	0x40010000
 8008378:	40000400 	.word	0x40000400
 800837c:	40000800 	.word	0x40000800
 8008380:	40000c00 	.word	0x40000c00
 8008384:	0800d498 	.word	0x0800d498
 8008388:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a48      	ldr	r2, [pc, #288]	; (80084b4 <HAL_TIM_ConfigClockSource+0x608>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d01d      	beq.n	80083d2 <HAL_TIM_ConfigClockSource+0x526>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800839e:	d018      	beq.n	80083d2 <HAL_TIM_ConfigClockSource+0x526>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a44      	ldr	r2, [pc, #272]	; (80084b8 <HAL_TIM_ConfigClockSource+0x60c>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d013      	beq.n	80083d2 <HAL_TIM_ConfigClockSource+0x526>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a43      	ldr	r2, [pc, #268]	; (80084bc <HAL_TIM_ConfigClockSource+0x610>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d00e      	beq.n	80083d2 <HAL_TIM_ConfigClockSource+0x526>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a41      	ldr	r2, [pc, #260]	; (80084c0 <HAL_TIM_ConfigClockSource+0x614>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d009      	beq.n	80083d2 <HAL_TIM_ConfigClockSource+0x526>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a40      	ldr	r2, [pc, #256]	; (80084c4 <HAL_TIM_ConfigClockSource+0x618>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d004      	beq.n	80083d2 <HAL_TIM_ConfigClockSource+0x526>
 80083c8:	f241 5116 	movw	r1, #5398	; 0x1516
 80083cc:	483e      	ldr	r0, [pc, #248]	; (80084c8 <HAL_TIM_ConfigClockSource+0x61c>)
 80083ce:	f7f9 fb98 	bl	8001b02 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083da:	d014      	beq.n	8008406 <HAL_TIM_ConfigClockSource+0x55a>
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d010      	beq.n	8008406 <HAL_TIM_ConfigClockSource+0x55a>
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d00c      	beq.n	8008406 <HAL_TIM_ConfigClockSource+0x55a>
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d008      	beq.n	8008406 <HAL_TIM_ConfigClockSource+0x55a>
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	2b0a      	cmp	r3, #10
 80083fa:	d004      	beq.n	8008406 <HAL_TIM_ConfigClockSource+0x55a>
 80083fc:	f241 5119 	movw	r1, #5401	; 0x1519
 8008400:	4831      	ldr	r0, [pc, #196]	; (80084c8 <HAL_TIM_ConfigClockSource+0x61c>)
 8008402:	f7f9 fb7e 	bl	8001b02 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	2b0f      	cmp	r3, #15
 800840c:	d904      	bls.n	8008418 <HAL_TIM_ConfigClockSource+0x56c>
 800840e:	f241 511a 	movw	r1, #5402	; 0x151a
 8008412:	482d      	ldr	r0, [pc, #180]	; (80084c8 <HAL_TIM_ConfigClockSource+0x61c>)
 8008414:	f7f9 fb75 	bl	8001b02 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6818      	ldr	r0, [r3, #0]
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	6859      	ldr	r1, [r3, #4]
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	461a      	mov	r2, r3
 8008426:	f000 f92b 	bl	8008680 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2140      	movs	r1, #64	; 0x40
 8008430:	4618      	mov	r0, r3
 8008432:	f000 f984 	bl	800873e <TIM_ITRx_SetConfig>
      break;
 8008436:	e02f      	b.n	8008498 <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a1d      	ldr	r2, [pc, #116]	; (80084b4 <HAL_TIM_ConfigClockSource+0x608>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d01d      	beq.n	800847e <HAL_TIM_ConfigClockSource+0x5d2>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800844a:	d018      	beq.n	800847e <HAL_TIM_ConfigClockSource+0x5d2>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a19      	ldr	r2, [pc, #100]	; (80084b8 <HAL_TIM_ConfigClockSource+0x60c>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d013      	beq.n	800847e <HAL_TIM_ConfigClockSource+0x5d2>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a18      	ldr	r2, [pc, #96]	; (80084bc <HAL_TIM_ConfigClockSource+0x610>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d00e      	beq.n	800847e <HAL_TIM_ConfigClockSource+0x5d2>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a16      	ldr	r2, [pc, #88]	; (80084c0 <HAL_TIM_ConfigClockSource+0x614>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d009      	beq.n	800847e <HAL_TIM_ConfigClockSource+0x5d2>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a15      	ldr	r2, [pc, #84]	; (80084c4 <HAL_TIM_ConfigClockSource+0x618>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d004      	beq.n	800847e <HAL_TIM_ConfigClockSource+0x5d2>
 8008474:	f241 5129 	movw	r1, #5417	; 0x1529
 8008478:	4813      	ldr	r0, [pc, #76]	; (80084c8 <HAL_TIM_ConfigClockSource+0x61c>)
 800847a:	f7f9 fb42 	bl	8001b02 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4619      	mov	r1, r3
 8008488:	4610      	mov	r0, r2
 800848a:	f000 f958 	bl	800873e <TIM_ITRx_SetConfig>
      break;
 800848e:	e003      	b.n	8008498 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	73fb      	strb	r3, [r7, #15]
      break;
 8008494:	e000      	b.n	8008498 <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 8008496:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	40010000 	.word	0x40010000
 80084b8:	40000400 	.word	0x40000400
 80084bc:	40000800 	.word	0x40000800
 80084c0:	40000c00 	.word	0x40000c00
 80084c4:	40014000 	.word	0x40014000
 80084c8:	0800d498 	.word	0x0800d498

080084cc <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80084d4:	bf00      	nop
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084fc:	bf00      	nop
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008510:	bf00      	nop
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008524:	bf00      	nop
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800854c:	bf00      	nop
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008560:	bf00      	nop
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008574:	bf00      	nop
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008580:	b480      	push	{r7}
 8008582:	b085      	sub	sp, #20
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4a34      	ldr	r2, [pc, #208]	; (8008664 <TIM_Base_SetConfig+0xe4>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d00f      	beq.n	80085b8 <TIM_Base_SetConfig+0x38>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800859e:	d00b      	beq.n	80085b8 <TIM_Base_SetConfig+0x38>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	4a31      	ldr	r2, [pc, #196]	; (8008668 <TIM_Base_SetConfig+0xe8>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d007      	beq.n	80085b8 <TIM_Base_SetConfig+0x38>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a30      	ldr	r2, [pc, #192]	; (800866c <TIM_Base_SetConfig+0xec>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d003      	beq.n	80085b8 <TIM_Base_SetConfig+0x38>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a2f      	ldr	r2, [pc, #188]	; (8008670 <TIM_Base_SetConfig+0xf0>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d108      	bne.n	80085ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a25      	ldr	r2, [pc, #148]	; (8008664 <TIM_Base_SetConfig+0xe4>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d01b      	beq.n	800860a <TIM_Base_SetConfig+0x8a>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085d8:	d017      	beq.n	800860a <TIM_Base_SetConfig+0x8a>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a22      	ldr	r2, [pc, #136]	; (8008668 <TIM_Base_SetConfig+0xe8>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d013      	beq.n	800860a <TIM_Base_SetConfig+0x8a>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a21      	ldr	r2, [pc, #132]	; (800866c <TIM_Base_SetConfig+0xec>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d00f      	beq.n	800860a <TIM_Base_SetConfig+0x8a>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a20      	ldr	r2, [pc, #128]	; (8008670 <TIM_Base_SetConfig+0xf0>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d00b      	beq.n	800860a <TIM_Base_SetConfig+0x8a>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4a1f      	ldr	r2, [pc, #124]	; (8008674 <TIM_Base_SetConfig+0xf4>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d007      	beq.n	800860a <TIM_Base_SetConfig+0x8a>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4a1e      	ldr	r2, [pc, #120]	; (8008678 <TIM_Base_SetConfig+0xf8>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d003      	beq.n	800860a <TIM_Base_SetConfig+0x8a>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	4a1d      	ldr	r2, [pc, #116]	; (800867c <TIM_Base_SetConfig+0xfc>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d108      	bne.n	800861c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	4313      	orrs	r3, r2
 800861a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	695b      	ldr	r3, [r3, #20]
 8008626:	4313      	orrs	r3, r2
 8008628:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	68fa      	ldr	r2, [r7, #12]
 800862e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	689a      	ldr	r2, [r3, #8]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a08      	ldr	r2, [pc, #32]	; (8008664 <TIM_Base_SetConfig+0xe4>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d103      	bne.n	8008650 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	691a      	ldr	r2, [r3, #16]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2201      	movs	r2, #1
 8008654:	615a      	str	r2, [r3, #20]
}
 8008656:	bf00      	nop
 8008658:	3714      	adds	r7, #20
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr
 8008662:	bf00      	nop
 8008664:	40010000 	.word	0x40010000
 8008668:	40000400 	.word	0x40000400
 800866c:	40000800 	.word	0x40000800
 8008670:	40000c00 	.word	0x40000c00
 8008674:	40014000 	.word	0x40014000
 8008678:	40014400 	.word	0x40014400
 800867c:	40014800 	.word	0x40014800

08008680 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008680:	b480      	push	{r7}
 8008682:	b087      	sub	sp, #28
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6a1b      	ldr	r3, [r3, #32]
 8008690:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6a1b      	ldr	r3, [r3, #32]
 8008696:	f023 0201 	bic.w	r2, r3, #1
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	699b      	ldr	r3, [r3, #24]
 80086a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	011b      	lsls	r3, r3, #4
 80086b0:	693a      	ldr	r2, [r7, #16]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	f023 030a 	bic.w	r3, r3, #10
 80086bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80086be:	697a      	ldr	r2, [r7, #20]
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	693a      	ldr	r2, [r7, #16]
 80086ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	697a      	ldr	r2, [r7, #20]
 80086d0:	621a      	str	r2, [r3, #32]
}
 80086d2:	bf00      	nop
 80086d4:	371c      	adds	r7, #28
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr

080086de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086de:	b480      	push	{r7}
 80086e0:	b087      	sub	sp, #28
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	60f8      	str	r0, [r7, #12]
 80086e6:	60b9      	str	r1, [r7, #8]
 80086e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6a1b      	ldr	r3, [r3, #32]
 80086ee:	f023 0210 	bic.w	r2, r3, #16
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	699b      	ldr	r3, [r3, #24]
 80086fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6a1b      	ldr	r3, [r3, #32]
 8008700:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008708:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	031b      	lsls	r3, r3, #12
 800870e:	697a      	ldr	r2, [r7, #20]
 8008710:	4313      	orrs	r3, r2
 8008712:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800871a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	011b      	lsls	r3, r3, #4
 8008720:	693a      	ldr	r2, [r7, #16]
 8008722:	4313      	orrs	r3, r2
 8008724:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	697a      	ldr	r2, [r7, #20]
 800872a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	693a      	ldr	r2, [r7, #16]
 8008730:	621a      	str	r2, [r3, #32]
}
 8008732:	bf00      	nop
 8008734:	371c      	adds	r7, #28
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr

0800873e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800873e:	b480      	push	{r7}
 8008740:	b085      	sub	sp, #20
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
 8008746:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008754:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008756:	683a      	ldr	r2, [r7, #0]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	4313      	orrs	r3, r2
 800875c:	f043 0307 	orr.w	r3, r3, #7
 8008760:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	609a      	str	r2, [r3, #8]
}
 8008768:	bf00      	nop
 800876a:	3714      	adds	r7, #20
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008774:	b480      	push	{r7}
 8008776:	b087      	sub	sp, #28
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	607a      	str	r2, [r7, #4]
 8008780:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800878e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	021a      	lsls	r2, r3, #8
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	431a      	orrs	r2, r3
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	4313      	orrs	r3, r2
 800879c:	697a      	ldr	r2, [r7, #20]
 800879e:	4313      	orrs	r3, r2
 80087a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	697a      	ldr	r2, [r7, #20]
 80087a6:	609a      	str	r2, [r3, #8]
}
 80087a8:	bf00      	nop
 80087aa:	371c      	adds	r7, #28
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a1c      	ldr	r2, [pc, #112]	; (8008830 <TIM_ResetCallback+0x7c>)
 80087c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4a1b      	ldr	r2, [pc, #108]	; (8008834 <TIM_ResetCallback+0x80>)
 80087c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	4a1a      	ldr	r2, [pc, #104]	; (8008838 <TIM_ResetCallback+0x84>)
 80087d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	4a19      	ldr	r2, [pc, #100]	; (800883c <TIM_ResetCallback+0x88>)
 80087d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	4a18      	ldr	r2, [pc, #96]	; (8008840 <TIM_ResetCallback+0x8c>)
 80087e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4a17      	ldr	r2, [pc, #92]	; (8008844 <TIM_ResetCallback+0x90>)
 80087e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a16      	ldr	r2, [pc, #88]	; (8008848 <TIM_ResetCallback+0x94>)
 80087f0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4a15      	ldr	r2, [pc, #84]	; (800884c <TIM_ResetCallback+0x98>)
 80087f8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	4a14      	ldr	r2, [pc, #80]	; (8008850 <TIM_ResetCallback+0x9c>)
 8008800:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	4a13      	ldr	r2, [pc, #76]	; (8008854 <TIM_ResetCallback+0xa0>)
 8008808:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4a12      	ldr	r2, [pc, #72]	; (8008858 <TIM_ResetCallback+0xa4>)
 8008810:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4a11      	ldr	r2, [pc, #68]	; (800885c <TIM_ResetCallback+0xa8>)
 8008818:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4a10      	ldr	r2, [pc, #64]	; (8008860 <TIM_ResetCallback+0xac>)
 8008820:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8008824:	bf00      	nop
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr
 8008830:	08001ad5 	.word	0x08001ad5
 8008834:	080084cd 	.word	0x080084cd
 8008838:	08008545 	.word	0x08008545
 800883c:	08008559 	.word	0x08008559
 8008840:	080084f5 	.word	0x080084f5
 8008844:	08008509 	.word	0x08008509
 8008848:	080084e1 	.word	0x080084e1
 800884c:	0800851d 	.word	0x0800851d
 8008850:	08008531 	.word	0x08008531
 8008854:	0800856d 	.word	0x0800856d
 8008858:	080089e1 	.word	0x080089e1
 800885c:	080089f5 	.word	0x080089f5
 8008860:	08008a09 	.word	0x08008a09

08008864 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a55      	ldr	r2, [pc, #340]	; (80089c8 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d018      	beq.n	80088aa <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008880:	d013      	beq.n	80088aa <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a51      	ldr	r2, [pc, #324]	; (80089cc <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d00e      	beq.n	80088aa <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a4f      	ldr	r2, [pc, #316]	; (80089d0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d009      	beq.n	80088aa <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a4e      	ldr	r2, [pc, #312]	; (80089d4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d004      	beq.n	80088aa <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80088a0:	f240 71b1 	movw	r1, #1969	; 0x7b1
 80088a4:	484c      	ldr	r0, [pc, #304]	; (80089d8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80088a6:	f7f9 f92c 	bl	8001b02 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d020      	beq.n	80088f4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2b10      	cmp	r3, #16
 80088b8:	d01c      	beq.n	80088f4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2b20      	cmp	r3, #32
 80088c0:	d018      	beq.n	80088f4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2b30      	cmp	r3, #48	; 0x30
 80088c8:	d014      	beq.n	80088f4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2b40      	cmp	r3, #64	; 0x40
 80088d0:	d010      	beq.n	80088f4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2b50      	cmp	r3, #80	; 0x50
 80088d8:	d00c      	beq.n	80088f4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2b60      	cmp	r3, #96	; 0x60
 80088e0:	d008      	beq.n	80088f4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2b70      	cmp	r3, #112	; 0x70
 80088e8:	d004      	beq.n	80088f4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80088ea:	f240 71b2 	movw	r1, #1970	; 0x7b2
 80088ee:	483a      	ldr	r0, [pc, #232]	; (80089d8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80088f0:	f7f9 f907 	bl	8001b02 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	2b80      	cmp	r3, #128	; 0x80
 80088fa:	d008      	beq.n	800890e <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d004      	beq.n	800890e <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8008904:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8008908:	4833      	ldr	r0, [pc, #204]	; (80089d8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800890a:	f7f9 f8fa 	bl	8001b02 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008914:	2b01      	cmp	r3, #1
 8008916:	d101      	bne.n	800891c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008918:	2302      	movs	r3, #2
 800891a:	e050      	b.n	80089be <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2202      	movs	r2, #2
 8008928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008942:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68fa      	ldr	r2, [r7, #12]
 800894a:	4313      	orrs	r3, r2
 800894c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a1b      	ldr	r2, [pc, #108]	; (80089c8 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d018      	beq.n	8008992 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008968:	d013      	beq.n	8008992 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a17      	ldr	r2, [pc, #92]	; (80089cc <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d00e      	beq.n	8008992 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a15      	ldr	r2, [pc, #84]	; (80089d0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d009      	beq.n	8008992 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a14      	ldr	r2, [pc, #80]	; (80089d4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d004      	beq.n	8008992 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a13      	ldr	r2, [pc, #76]	; (80089dc <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d10c      	bne.n	80089ac <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008998:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	68ba      	ldr	r2, [r7, #8]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	68ba      	ldr	r2, [r7, #8]
 80089aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	40010000 	.word	0x40010000
 80089cc:	40000400 	.word	0x40000400
 80089d0:	40000800 	.word	0x40000800
 80089d4:	40000c00 	.word	0x40000c00
 80089d8:	0800d50c 	.word	0x0800d50c
 80089dc:	40014000 	.word	0x40014000

080089e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80089e8:	bf00      	nop
 80089ea:	370c      	adds	r7, #12
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80089fc:	bf00      	nop
 80089fe:	370c      	adds	r7, #12
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a10:	bf00      	nop
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d101      	bne.n	8008a2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e0ab      	b.n	8008b86 <HAL_UART_Init+0x16a>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	699b      	ldr	r3, [r3, #24]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d02c      	beq.n	8008a90 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a55      	ldr	r2, [pc, #340]	; (8008b90 <HAL_UART_Init+0x174>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d00e      	beq.n	8008a5e <HAL_UART_Init+0x42>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a53      	ldr	r2, [pc, #332]	; (8008b94 <HAL_UART_Init+0x178>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d009      	beq.n	8008a5e <HAL_UART_Init+0x42>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a52      	ldr	r2, [pc, #328]	; (8008b98 <HAL_UART_Init+0x17c>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d004      	beq.n	8008a5e <HAL_UART_Init+0x42>
 8008a54:	f240 1173 	movw	r1, #371	; 0x173
 8008a58:	4850      	ldr	r0, [pc, #320]	; (8008b9c <HAL_UART_Init+0x180>)
 8008a5a:	f7f9 f852 	bl	8001b02 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	699b      	ldr	r3, [r3, #24]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d028      	beq.n	8008ab8 <HAL_UART_Init+0x9c>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	699b      	ldr	r3, [r3, #24]
 8008a6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a6e:	d023      	beq.n	8008ab8 <HAL_UART_Init+0x9c>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	699b      	ldr	r3, [r3, #24]
 8008a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a78:	d01e      	beq.n	8008ab8 <HAL_UART_Init+0x9c>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	699b      	ldr	r3, [r3, #24]
 8008a7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a82:	d019      	beq.n	8008ab8 <HAL_UART_Init+0x9c>
 8008a84:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8008a88:	4844      	ldr	r0, [pc, #272]	; (8008b9c <HAL_UART_Init+0x180>)
 8008a8a:	f7f9 f83a 	bl	8001b02 <assert_failed>
 8008a8e:	e013      	b.n	8008ab8 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a3e      	ldr	r2, [pc, #248]	; (8008b90 <HAL_UART_Init+0x174>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d00e      	beq.n	8008ab8 <HAL_UART_Init+0x9c>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a3d      	ldr	r2, [pc, #244]	; (8008b94 <HAL_UART_Init+0x178>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d009      	beq.n	8008ab8 <HAL_UART_Init+0x9c>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a3b      	ldr	r2, [pc, #236]	; (8008b98 <HAL_UART_Init+0x17c>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d004      	beq.n	8008ab8 <HAL_UART_Init+0x9c>
 8008aae:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8008ab2:	483a      	ldr	r0, [pc, #232]	; (8008b9c <HAL_UART_Init+0x180>)
 8008ab4:	f7f9 f825 	bl	8001b02 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d009      	beq.n	8008ad4 <HAL_UART_Init+0xb8>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ac8:	d004      	beq.n	8008ad4 <HAL_UART_Init+0xb8>
 8008aca:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8008ace:	4833      	ldr	r0, [pc, #204]	; (8008b9c <HAL_UART_Init+0x180>)
 8008ad0:	f7f9 f817 	bl	8001b02 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	69db      	ldr	r3, [r3, #28]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d009      	beq.n	8008af0 <HAL_UART_Init+0xd4>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	69db      	ldr	r3, [r3, #28]
 8008ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ae4:	d004      	beq.n	8008af0 <HAL_UART_Init+0xd4>
 8008ae6:	f240 117b 	movw	r1, #379	; 0x17b
 8008aea:	482c      	ldr	r0, [pc, #176]	; (8008b9c <HAL_UART_Init+0x180>)
 8008aec:	f7f9 f809 	bl	8001b02 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d111      	bne.n	8008b20 <HAL_UART_Init+0x104>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 fb61 	bl	80091cc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d102      	bne.n	8008b18 <HAL_UART_Init+0xfc>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4a22      	ldr	r2, [pc, #136]	; (8008ba0 <HAL_UART_Init+0x184>)
 8008b16:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2224      	movs	r2, #36	; 0x24
 8008b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	68da      	ldr	r2, [r3, #12]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 fd5b 	bl	80095f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	691a      	ldr	r2, [r3, #16]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	695a      	ldr	r2, [r3, #20]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68da      	ldr	r2, [r3, #12]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2220      	movs	r2, #32
 8008b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2220      	movs	r2, #32
 8008b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008b84:	2300      	movs	r3, #0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3708      	adds	r7, #8
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	40011000 	.word	0x40011000
 8008b94:	40004400 	.word	0x40004400
 8008b98:	40011400 	.word	0x40011400
 8008b9c:	0800d584 	.word	0x0800d584
 8008ba0:	080024a1 	.word	0x080024a1

08008ba4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	4613      	mov	r3, r2
 8008bb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	2b20      	cmp	r3, #32
 8008bbc:	d11d      	bne.n	8008bfa <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d002      	beq.n	8008bca <HAL_UART_Receive_IT+0x26>
 8008bc4:	88fb      	ldrh	r3, [r7, #6]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d101      	bne.n	8008bce <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e016      	b.n	8008bfc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d101      	bne.n	8008bdc <HAL_UART_Receive_IT+0x38>
 8008bd8:	2302      	movs	r3, #2
 8008bda:	e00f      	b.n	8008bfc <HAL_UART_Receive_IT+0x58>
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2200      	movs	r2, #0
 8008be8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008bea:	88fb      	ldrh	r3, [r7, #6]
 8008bec:	461a      	mov	r2, r3
 8008bee:	68b9      	ldr	r1, [r7, #8]
 8008bf0:	68f8      	ldr	r0, [r7, #12]
 8008bf2:	f000 fb23 	bl	800923c <UART_Start_Receive_IT>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	e000      	b.n	8008bfc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008bfa:	2302      	movs	r3, #2
  }
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b0ba      	sub	sp, #232	; 0xe8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	695b      	ldr	r3, [r3, #20]
 8008c26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008c30:	2300      	movs	r3, #0
 8008c32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c3a:	f003 030f 	and.w	r3, r3, #15
 8008c3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008c42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d10f      	bne.n	8008c6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c4e:	f003 0320 	and.w	r3, r3, #32
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d009      	beq.n	8008c6a <HAL_UART_IRQHandler+0x66>
 8008c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c5a:	f003 0320 	and.w	r3, r3, #32
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d003      	beq.n	8008c6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 fc09 	bl	800947a <UART_Receive_IT>
      return;
 8008c68:	e25b      	b.n	8009122 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008c6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	f000 80e1 	beq.w	8008e36 <HAL_UART_IRQHandler+0x232>
 8008c74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c78:	f003 0301 	and.w	r3, r3, #1
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d106      	bne.n	8008c8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c84:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	f000 80d4 	beq.w	8008e36 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c92:	f003 0301 	and.w	r3, r3, #1
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00b      	beq.n	8008cb2 <HAL_UART_IRQHandler+0xae>
 8008c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d005      	beq.n	8008cb2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008caa:	f043 0201 	orr.w	r2, r3, #1
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cb6:	f003 0304 	and.w	r3, r3, #4
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00b      	beq.n	8008cd6 <HAL_UART_IRQHandler+0xd2>
 8008cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cc2:	f003 0301 	and.w	r3, r3, #1
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d005      	beq.n	8008cd6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cce:	f043 0202 	orr.w	r2, r3, #2
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cda:	f003 0302 	and.w	r3, r3, #2
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d00b      	beq.n	8008cfa <HAL_UART_IRQHandler+0xf6>
 8008ce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ce6:	f003 0301 	and.w	r3, r3, #1
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d005      	beq.n	8008cfa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf2:	f043 0204 	orr.w	r2, r3, #4
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cfe:	f003 0308 	and.w	r3, r3, #8
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d011      	beq.n	8008d2a <HAL_UART_IRQHandler+0x126>
 8008d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d0a:	f003 0320 	and.w	r3, r3, #32
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d105      	bne.n	8008d1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008d12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d16:	f003 0301 	and.w	r3, r3, #1
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d005      	beq.n	8008d2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d22:	f043 0208 	orr.w	r2, r3, #8
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	f000 81f2 	beq.w	8009118 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d38:	f003 0320 	and.w	r3, r3, #32
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d008      	beq.n	8008d52 <HAL_UART_IRQHandler+0x14e>
 8008d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d44:	f003 0320 	and.w	r3, r3, #32
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d002      	beq.n	8008d52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 fb94 	bl	800947a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	695b      	ldr	r3, [r3, #20]
 8008d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d5c:	2b40      	cmp	r3, #64	; 0x40
 8008d5e:	bf0c      	ite	eq
 8008d60:	2301      	moveq	r3, #1
 8008d62:	2300      	movne	r3, #0
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d6e:	f003 0308 	and.w	r3, r3, #8
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d103      	bne.n	8008d7e <HAL_UART_IRQHandler+0x17a>
 8008d76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d051      	beq.n	8008e22 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 fa9a 	bl	80092b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	695b      	ldr	r3, [r3, #20]
 8008d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d8e:	2b40      	cmp	r3, #64	; 0x40
 8008d90:	d142      	bne.n	8008e18 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	3314      	adds	r3, #20
 8008d98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008da0:	e853 3f00 	ldrex	r3, [r3]
 8008da4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008da8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008dac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008db0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	3314      	adds	r3, #20
 8008dba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008dbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008dc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008dca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008dce:	e841 2300 	strex	r3, r2, [r1]
 8008dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008dd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d1d9      	bne.n	8008d92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d013      	beq.n	8008e0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dea:	4a7f      	ldr	r2, [pc, #508]	; (8008fe8 <HAL_UART_IRQHandler+0x3e4>)
 8008dec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7fa fde6 	bl	80039c4 <HAL_DMA_Abort_IT>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d019      	beq.n	8008e32 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008e08:	4610      	mov	r0, r2
 8008e0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e0c:	e011      	b.n	8008e32 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e16:	e00c      	b.n	8008e32 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e20:	e007      	b.n	8008e32 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008e30:	e172      	b.n	8009118 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e32:	bf00      	nop
    return;
 8008e34:	e170      	b.n	8009118 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	f040 814c 	bne.w	80090d8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e44:	f003 0310 	and.w	r3, r3, #16
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	f000 8145 	beq.w	80090d8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e52:	f003 0310 	and.w	r3, r3, #16
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	f000 813e 	beq.w	80090d8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	60bb      	str	r3, [r7, #8]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	60bb      	str	r3, [r7, #8]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	60bb      	str	r3, [r7, #8]
 8008e70:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	695b      	ldr	r3, [r3, #20]
 8008e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e7c:	2b40      	cmp	r3, #64	; 0x40
 8008e7e:	f040 80b5 	bne.w	8008fec <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e8e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	f000 8142 	beq.w	800911c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	f080 813b 	bcs.w	800911c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008eac:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb2:	69db      	ldr	r3, [r3, #28]
 8008eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eb8:	f000 8088 	beq.w	8008fcc <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	330c      	adds	r3, #12
 8008ec2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008eca:	e853 3f00 	ldrex	r3, [r3]
 8008ece:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008ed2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ed6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008eda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	330c      	adds	r3, #12
 8008ee4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008ee8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008eec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008ef4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008ef8:	e841 2300 	strex	r3, r2, [r1]
 8008efc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008f00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d1d9      	bne.n	8008ebc <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	3314      	adds	r3, #20
 8008f0e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f12:	e853 3f00 	ldrex	r3, [r3]
 8008f16:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008f18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f1a:	f023 0301 	bic.w	r3, r3, #1
 8008f1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	3314      	adds	r3, #20
 8008f28:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008f2c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008f30:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f32:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008f34:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008f38:	e841 2300 	strex	r3, r2, [r1]
 8008f3c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008f3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d1e1      	bne.n	8008f08 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	3314      	adds	r3, #20
 8008f4a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f4e:	e853 3f00 	ldrex	r3, [r3]
 8008f52:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008f54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	3314      	adds	r3, #20
 8008f64:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008f68:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008f6a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f6c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008f6e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008f70:	e841 2300 	strex	r3, r2, [r1]
 8008f74:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008f76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d1e3      	bne.n	8008f44 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2220      	movs	r2, #32
 8008f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	330c      	adds	r3, #12
 8008f90:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f94:	e853 3f00 	ldrex	r3, [r3]
 8008f98:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008f9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f9c:	f023 0310 	bic.w	r3, r3, #16
 8008fa0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	330c      	adds	r3, #12
 8008faa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008fae:	65ba      	str	r2, [r7, #88]	; 0x58
 8008fb0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008fb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008fb6:	e841 2300 	strex	r3, r2, [r1]
 8008fba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1e3      	bne.n	8008f8a <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7fa fc8c 	bl	80038e4 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8008fd8:	b292      	uxth	r2, r2
 8008fda:	1a8a      	subs	r2, r1, r2
 8008fdc:	b292      	uxth	r2, r2
 8008fde:	4611      	mov	r1, r2
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008fe4:	e09a      	b.n	800911c <HAL_UART_IRQHandler+0x518>
 8008fe6:	bf00      	nop
 8008fe8:	0800937f 	.word	0x0800937f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	1ad3      	subs	r3, r2, r3
 8008ff8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009000:	b29b      	uxth	r3, r3
 8009002:	2b00      	cmp	r3, #0
 8009004:	f000 808c 	beq.w	8009120 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009008:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800900c:	2b00      	cmp	r3, #0
 800900e:	f000 8087 	beq.w	8009120 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	330c      	adds	r3, #12
 8009018:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800901c:	e853 3f00 	ldrex	r3, [r3]
 8009020:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009024:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009028:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	330c      	adds	r3, #12
 8009032:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009036:	647a      	str	r2, [r7, #68]	; 0x44
 8009038:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800903c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800903e:	e841 2300 	strex	r3, r2, [r1]
 8009042:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1e3      	bne.n	8009012 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	3314      	adds	r3, #20
 8009050:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009054:	e853 3f00 	ldrex	r3, [r3]
 8009058:	623b      	str	r3, [r7, #32]
   return(result);
 800905a:	6a3b      	ldr	r3, [r7, #32]
 800905c:	f023 0301 	bic.w	r3, r3, #1
 8009060:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	3314      	adds	r3, #20
 800906a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800906e:	633a      	str	r2, [r7, #48]	; 0x30
 8009070:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009072:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009076:	e841 2300 	strex	r3, r2, [r1]
 800907a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800907c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907e:	2b00      	cmp	r3, #0
 8009080:	d1e3      	bne.n	800904a <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2220      	movs	r2, #32
 8009086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	330c      	adds	r3, #12
 8009096:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	e853 3f00 	ldrex	r3, [r3]
 800909e:	60fb      	str	r3, [r7, #12]
   return(result);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f023 0310 	bic.w	r3, r3, #16
 80090a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	330c      	adds	r3, #12
 80090b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80090b4:	61fa      	str	r2, [r7, #28]
 80090b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b8:	69b9      	ldr	r1, [r7, #24]
 80090ba:	69fa      	ldr	r2, [r7, #28]
 80090bc:	e841 2300 	strex	r3, r2, [r1]
 80090c0:	617b      	str	r3, [r7, #20]
   return(result);
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d1e3      	bne.n	8009090 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090cc:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 80090d0:	4611      	mov	r1, r2
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80090d6:	e023      	b.n	8009120 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80090d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d009      	beq.n	80090f8 <HAL_UART_IRQHandler+0x4f4>
 80090e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d003      	beq.n	80090f8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 f959 	bl	80093a8 <UART_Transmit_IT>
    return;
 80090f6:	e014      	b.n	8009122 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80090f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009100:	2b00      	cmp	r3, #0
 8009102:	d00e      	beq.n	8009122 <HAL_UART_IRQHandler+0x51e>
 8009104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800910c:	2b00      	cmp	r3, #0
 800910e:	d008      	beq.n	8009122 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 f999 	bl	8009448 <UART_EndTransmit_IT>
    return;
 8009116:	e004      	b.n	8009122 <HAL_UART_IRQHandler+0x51e>
    return;
 8009118:	bf00      	nop
 800911a:	e002      	b.n	8009122 <HAL_UART_IRQHandler+0x51e>
      return;
 800911c:	bf00      	nop
 800911e:	e000      	b.n	8009122 <HAL_UART_IRQHandler+0x51e>
      return;
 8009120:	bf00      	nop
  }
}
 8009122:	37e8      	adds	r7, #232	; 0xe8
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009130:	bf00      	nop
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009144:	bf00      	nop
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009158:	bf00      	nop
 800915a:	370c      	adds	r7, #12
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800916c:	bf00      	nop
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009180:	bf00      	nop
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009194:	bf00      	nop
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80091a8:	bf00      	nop
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b083      	sub	sp, #12
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	460b      	mov	r3, r1
 80091be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80091c0:	bf00      	nop
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a10      	ldr	r2, [pc, #64]	; (8009218 <UART_InitCallbacksToDefault+0x4c>)
 80091d8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4a0f      	ldr	r2, [pc, #60]	; (800921c <UART_InitCallbacksToDefault+0x50>)
 80091de:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4a0f      	ldr	r2, [pc, #60]	; (8009220 <UART_InitCallbacksToDefault+0x54>)
 80091e4:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	4a0e      	ldr	r2, [pc, #56]	; (8009224 <UART_InitCallbacksToDefault+0x58>)
 80091ea:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	4a0e      	ldr	r2, [pc, #56]	; (8009228 <UART_InitCallbacksToDefault+0x5c>)
 80091f0:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4a0d      	ldr	r2, [pc, #52]	; (800922c <UART_InitCallbacksToDefault+0x60>)
 80091f6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4a0d      	ldr	r2, [pc, #52]	; (8009230 <UART_InitCallbacksToDefault+0x64>)
 80091fc:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4a0c      	ldr	r2, [pc, #48]	; (8009234 <UART_InitCallbacksToDefault+0x68>)
 8009202:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	4a0c      	ldr	r2, [pc, #48]	; (8009238 <UART_InitCallbacksToDefault+0x6c>)
 8009208:	669a      	str	r2, [r3, #104]	; 0x68

}
 800920a:	bf00      	nop
 800920c:	370c      	adds	r7, #12
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr
 8009216:	bf00      	nop
 8009218:	0800913d 	.word	0x0800913d
 800921c:	08009129 	.word	0x08009129
 8009220:	08009151 	.word	0x08009151
 8009224:	08002541 	.word	0x08002541
 8009228:	08009165 	.word	0x08009165
 800922c:	08009179 	.word	0x08009179
 8009230:	0800918d 	.word	0x0800918d
 8009234:	080091a1 	.word	0x080091a1
 8009238:	080091b5 	.word	0x080091b5

0800923c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800923c:	b480      	push	{r7}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	4613      	mov	r3, r2
 8009248:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	68ba      	ldr	r2, [r7, #8]
 800924e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	88fa      	ldrh	r2, [r7, #6]
 8009254:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	88fa      	ldrh	r2, [r7, #6]
 800925a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2200      	movs	r2, #0
 8009260:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2222      	movs	r2, #34	; 0x22
 8009266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2200      	movs	r2, #0
 800926e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d007      	beq.n	800928a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	68da      	ldr	r2, [r3, #12]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009288:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	695a      	ldr	r2, [r3, #20]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f042 0201 	orr.w	r2, r2, #1
 8009298:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	68da      	ldr	r2, [r3, #12]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f042 0220 	orr.w	r2, r2, #32
 80092a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3714      	adds	r7, #20
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b095      	sub	sp, #84	; 0x54
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	330c      	adds	r3, #12
 80092c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ca:	e853 3f00 	ldrex	r3, [r3]
 80092ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80092d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	330c      	adds	r3, #12
 80092de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80092e0:	643a      	str	r2, [r7, #64]	; 0x40
 80092e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80092e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092e8:	e841 2300 	strex	r3, r2, [r1]
 80092ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d1e5      	bne.n	80092c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	3314      	adds	r3, #20
 80092fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092fc:	6a3b      	ldr	r3, [r7, #32]
 80092fe:	e853 3f00 	ldrex	r3, [r3]
 8009302:	61fb      	str	r3, [r7, #28]
   return(result);
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	f023 0301 	bic.w	r3, r3, #1
 800930a:	64bb      	str	r3, [r7, #72]	; 0x48
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	3314      	adds	r3, #20
 8009312:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009314:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009316:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009318:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800931a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800931c:	e841 2300 	strex	r3, r2, [r1]
 8009320:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009324:	2b00      	cmp	r3, #0
 8009326:	d1e5      	bne.n	80092f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800932c:	2b01      	cmp	r3, #1
 800932e:	d119      	bne.n	8009364 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	330c      	adds	r3, #12
 8009336:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	e853 3f00 	ldrex	r3, [r3]
 800933e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	f023 0310 	bic.w	r3, r3, #16
 8009346:	647b      	str	r3, [r7, #68]	; 0x44
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	330c      	adds	r3, #12
 800934e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009350:	61ba      	str	r2, [r7, #24]
 8009352:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009354:	6979      	ldr	r1, [r7, #20]
 8009356:	69ba      	ldr	r2, [r7, #24]
 8009358:	e841 2300 	strex	r3, r2, [r1]
 800935c:	613b      	str	r3, [r7, #16]
   return(result);
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1e5      	bne.n	8009330 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2220      	movs	r2, #32
 8009368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009372:	bf00      	nop
 8009374:	3754      	adds	r7, #84	; 0x54
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr

0800937e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b084      	sub	sp, #16
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800938a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2200      	movs	r2, #0
 8009390:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2200      	movs	r2, #0
 8009396:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800939c:	68f8      	ldr	r0, [r7, #12]
 800939e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093a0:	bf00      	nop
 80093a2:	3710      	adds	r7, #16
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b085      	sub	sp, #20
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	2b21      	cmp	r3, #33	; 0x21
 80093ba:	d13e      	bne.n	800943a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093c4:	d114      	bne.n	80093f0 <UART_Transmit_IT+0x48>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d110      	bne.n	80093f0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6a1b      	ldr	r3, [r3, #32]
 80093d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	881b      	ldrh	r3, [r3, #0]
 80093d8:	461a      	mov	r2, r3
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80093e2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6a1b      	ldr	r3, [r3, #32]
 80093e8:	1c9a      	adds	r2, r3, #2
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	621a      	str	r2, [r3, #32]
 80093ee:	e008      	b.n	8009402 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6a1b      	ldr	r3, [r3, #32]
 80093f4:	1c59      	adds	r1, r3, #1
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	6211      	str	r1, [r2, #32]
 80093fa:	781a      	ldrb	r2, [r3, #0]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009406:	b29b      	uxth	r3, r3
 8009408:	3b01      	subs	r3, #1
 800940a:	b29b      	uxth	r3, r3
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	4619      	mov	r1, r3
 8009410:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009412:	2b00      	cmp	r3, #0
 8009414:	d10f      	bne.n	8009436 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	68da      	ldr	r2, [r3, #12]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009424:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	68da      	ldr	r2, [r3, #12]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009434:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009436:	2300      	movs	r3, #0
 8009438:	e000      	b.n	800943c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800943a:	2302      	movs	r3, #2
  }
}
 800943c:	4618      	mov	r0, r3
 800943e:	3714      	adds	r7, #20
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	68da      	ldr	r2, [r3, #12]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800945e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2220      	movs	r2, #32
 8009464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009470:	2300      	movs	r3, #0
}
 8009472:	4618      	mov	r0, r3
 8009474:	3708      	adds	r7, #8
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b08c      	sub	sp, #48	; 0x30
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009488:	b2db      	uxtb	r3, r3
 800948a:	2b22      	cmp	r3, #34	; 0x22
 800948c:	f040 80ad 	bne.w	80095ea <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009498:	d117      	bne.n	80094ca <UART_Receive_IT+0x50>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	691b      	ldr	r3, [r3, #16]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d113      	bne.n	80094ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80094a2:	2300      	movs	r3, #0
 80094a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094aa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094b8:	b29a      	uxth	r2, r3
 80094ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094c2:	1c9a      	adds	r2, r3, #2
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	629a      	str	r2, [r3, #40]	; 0x28
 80094c8:	e026      	b.n	8009518 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80094d0:	2300      	movs	r3, #0
 80094d2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094dc:	d007      	beq.n	80094ee <UART_Receive_IT+0x74>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d10a      	bne.n	80094fc <UART_Receive_IT+0x82>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	691b      	ldr	r3, [r3, #16]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d106      	bne.n	80094fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	b2da      	uxtb	r2, r3
 80094f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f8:	701a      	strb	r2, [r3, #0]
 80094fa:	e008      	b.n	800950e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	b2db      	uxtb	r3, r3
 8009504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009508:	b2da      	uxtb	r2, r3
 800950a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800950c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009512:	1c5a      	adds	r2, r3, #1
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800951c:	b29b      	uxth	r3, r3
 800951e:	3b01      	subs	r3, #1
 8009520:	b29b      	uxth	r3, r3
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	4619      	mov	r1, r3
 8009526:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009528:	2b00      	cmp	r3, #0
 800952a:	d15c      	bne.n	80095e6 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	68da      	ldr	r2, [r3, #12]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f022 0220 	bic.w	r2, r2, #32
 800953a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	68da      	ldr	r2, [r3, #12]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800954a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	695a      	ldr	r2, [r3, #20]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f022 0201 	bic.w	r2, r2, #1
 800955a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2220      	movs	r2, #32
 8009560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009568:	2b01      	cmp	r3, #1
 800956a:	d136      	bne.n	80095da <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	330c      	adds	r3, #12
 8009578:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	e853 3f00 	ldrex	r3, [r3]
 8009580:	613b      	str	r3, [r7, #16]
   return(result);
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	f023 0310 	bic.w	r3, r3, #16
 8009588:	627b      	str	r3, [r7, #36]	; 0x24
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	330c      	adds	r3, #12
 8009590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009592:	623a      	str	r2, [r7, #32]
 8009594:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009596:	69f9      	ldr	r1, [r7, #28]
 8009598:	6a3a      	ldr	r2, [r7, #32]
 800959a:	e841 2300 	strex	r3, r2, [r1]
 800959e:	61bb      	str	r3, [r7, #24]
   return(result);
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d1e5      	bne.n	8009572 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f003 0310 	and.w	r3, r3, #16
 80095b0:	2b10      	cmp	r3, #16
 80095b2:	d10a      	bne.n	80095ca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80095b4:	2300      	movs	r3, #0
 80095b6:	60fb      	str	r3, [r7, #12]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	60fb      	str	r3, [r7, #12]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	60fb      	str	r3, [r7, #12]
 80095c8:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80095d2:	4611      	mov	r1, r2
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	4798      	blx	r3
 80095d8:	e003      	b.n	80095e2 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80095e2:	2300      	movs	r3, #0
 80095e4:	e002      	b.n	80095ec <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 80095e6:	2300      	movs	r3, #0
 80095e8:	e000      	b.n	80095ec <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 80095ea:	2302      	movs	r3, #2
  }
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3730      	adds	r7, #48	; 0x30
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095f8:	b0c0      	sub	sp, #256	; 0x100
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8009600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009604:	685a      	ldr	r2, [r3, #4]
 8009606:	4bcf      	ldr	r3, [pc, #828]	; (8009944 <UART_SetConfig+0x350>)
 8009608:	429a      	cmp	r2, r3
 800960a:	d904      	bls.n	8009616 <UART_SetConfig+0x22>
 800960c:	f640 6161 	movw	r1, #3681	; 0xe61
 8009610:	48cd      	ldr	r0, [pc, #820]	; (8009948 <UART_SetConfig+0x354>)
 8009612:	f7f8 fa76 	bl	8001b02 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8009616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d00a      	beq.n	8009636 <UART_SetConfig+0x42>
 8009620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800962a:	d004      	beq.n	8009636 <UART_SetConfig+0x42>
 800962c:	f640 6162 	movw	r1, #3682	; 0xe62
 8009630:	48c5      	ldr	r0, [pc, #788]	; (8009948 <UART_SetConfig+0x354>)
 8009632:	f7f8 fa66 	bl	8001b02 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8009636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d010      	beq.n	8009662 <UART_SetConfig+0x6e>
 8009640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009644:	691b      	ldr	r3, [r3, #16]
 8009646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800964a:	d00a      	beq.n	8009662 <UART_SetConfig+0x6e>
 800964c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009656:	d004      	beq.n	8009662 <UART_SetConfig+0x6e>
 8009658:	f640 6163 	movw	r1, #3683	; 0xe63
 800965c:	48ba      	ldr	r0, [pc, #744]	; (8009948 <UART_SetConfig+0x354>)
 800965e:	f7f8 fa50 	bl	8001b02 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8009662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009666:	695a      	ldr	r2, [r3, #20]
 8009668:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800966c:	4013      	ands	r3, r2
 800966e:	2b00      	cmp	r3, #0
 8009670:	d104      	bne.n	800967c <UART_SetConfig+0x88>
 8009672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009676:	695b      	ldr	r3, [r3, #20]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d104      	bne.n	8009686 <UART_SetConfig+0x92>
 800967c:	f640 6164 	movw	r1, #3684	; 0xe64
 8009680:	48b1      	ldr	r0, [pc, #708]	; (8009948 <UART_SetConfig+0x354>)
 8009682:	f7f8 fa3e 	bl	8001b02 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009696:	68d9      	ldr	r1, [r3, #12]
 8009698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	ea40 0301 	orr.w	r3, r0, r1
 80096a2:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80096a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096a8:	689a      	ldr	r2, [r3, #8]
 80096aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096ae:	691b      	ldr	r3, [r3, #16]
 80096b0:	431a      	orrs	r2, r3
 80096b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096b6:	695b      	ldr	r3, [r3, #20]
 80096b8:	431a      	orrs	r2, r3
 80096ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096be:	69db      	ldr	r3, [r3, #28]
 80096c0:	4313      	orrs	r3, r2
 80096c2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80096c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	68db      	ldr	r3, [r3, #12]
 80096ce:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80096d2:	f021 010c 	bic.w	r1, r1, #12
 80096d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80096e0:	430b      	orrs	r3, r1
 80096e2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80096e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	695b      	ldr	r3, [r3, #20]
 80096ec:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80096f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096f4:	6999      	ldr	r1, [r3, #24]
 80096f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	ea40 0301 	orr.w	r3, r0, r1
 8009700:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	4b90      	ldr	r3, [pc, #576]	; (800994c <UART_SetConfig+0x358>)
 800970a:	429a      	cmp	r2, r3
 800970c:	d005      	beq.n	800971a <UART_SetConfig+0x126>
 800970e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	4b8e      	ldr	r3, [pc, #568]	; (8009950 <UART_SetConfig+0x35c>)
 8009716:	429a      	cmp	r2, r3
 8009718:	d104      	bne.n	8009724 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800971a:	f7fd fd57 	bl	80071cc <HAL_RCC_GetPCLK2Freq>
 800971e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009722:	e003      	b.n	800972c <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009724:	f7fd fd3e 	bl	80071a4 <HAL_RCC_GetPCLK1Freq>
 8009728:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800972c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009730:	69db      	ldr	r3, [r3, #28]
 8009732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009736:	f040 810f 	bne.w	8009958 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800973a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800973e:	2200      	movs	r2, #0
 8009740:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009744:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009748:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800974c:	4622      	mov	r2, r4
 800974e:	462b      	mov	r3, r5
 8009750:	1891      	adds	r1, r2, r2
 8009752:	65b9      	str	r1, [r7, #88]	; 0x58
 8009754:	415b      	adcs	r3, r3
 8009756:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009758:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800975c:	4621      	mov	r1, r4
 800975e:	eb12 0801 	adds.w	r8, r2, r1
 8009762:	4629      	mov	r1, r5
 8009764:	eb43 0901 	adc.w	r9, r3, r1
 8009768:	f04f 0200 	mov.w	r2, #0
 800976c:	f04f 0300 	mov.w	r3, #0
 8009770:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009774:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009778:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800977c:	4690      	mov	r8, r2
 800977e:	4699      	mov	r9, r3
 8009780:	4623      	mov	r3, r4
 8009782:	eb18 0303 	adds.w	r3, r8, r3
 8009786:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800978a:	462b      	mov	r3, r5
 800978c:	eb49 0303 	adc.w	r3, r9, r3
 8009790:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80097a0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80097a4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80097a8:	460b      	mov	r3, r1
 80097aa:	18db      	adds	r3, r3, r3
 80097ac:	653b      	str	r3, [r7, #80]	; 0x50
 80097ae:	4613      	mov	r3, r2
 80097b0:	eb42 0303 	adc.w	r3, r2, r3
 80097b4:	657b      	str	r3, [r7, #84]	; 0x54
 80097b6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80097ba:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80097be:	f7f6 fd0f 	bl	80001e0 <__aeabi_uldivmod>
 80097c2:	4602      	mov	r2, r0
 80097c4:	460b      	mov	r3, r1
 80097c6:	4b63      	ldr	r3, [pc, #396]	; (8009954 <UART_SetConfig+0x360>)
 80097c8:	fba3 2302 	umull	r2, r3, r3, r2
 80097cc:	095b      	lsrs	r3, r3, #5
 80097ce:	011c      	lsls	r4, r3, #4
 80097d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097d4:	2200      	movs	r2, #0
 80097d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80097da:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80097de:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80097e2:	4642      	mov	r2, r8
 80097e4:	464b      	mov	r3, r9
 80097e6:	1891      	adds	r1, r2, r2
 80097e8:	64b9      	str	r1, [r7, #72]	; 0x48
 80097ea:	415b      	adcs	r3, r3
 80097ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80097f2:	4641      	mov	r1, r8
 80097f4:	eb12 0a01 	adds.w	sl, r2, r1
 80097f8:	4649      	mov	r1, r9
 80097fa:	eb43 0b01 	adc.w	fp, r3, r1
 80097fe:	f04f 0200 	mov.w	r2, #0
 8009802:	f04f 0300 	mov.w	r3, #0
 8009806:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800980a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800980e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009812:	4692      	mov	sl, r2
 8009814:	469b      	mov	fp, r3
 8009816:	4643      	mov	r3, r8
 8009818:	eb1a 0303 	adds.w	r3, sl, r3
 800981c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009820:	464b      	mov	r3, r9
 8009822:	eb4b 0303 	adc.w	r3, fp, r3
 8009826:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800982a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	2200      	movs	r2, #0
 8009832:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009836:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800983a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800983e:	460b      	mov	r3, r1
 8009840:	18db      	adds	r3, r3, r3
 8009842:	643b      	str	r3, [r7, #64]	; 0x40
 8009844:	4613      	mov	r3, r2
 8009846:	eb42 0303 	adc.w	r3, r2, r3
 800984a:	647b      	str	r3, [r7, #68]	; 0x44
 800984c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009850:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009854:	f7f6 fcc4 	bl	80001e0 <__aeabi_uldivmod>
 8009858:	4602      	mov	r2, r0
 800985a:	460b      	mov	r3, r1
 800985c:	4611      	mov	r1, r2
 800985e:	4b3d      	ldr	r3, [pc, #244]	; (8009954 <UART_SetConfig+0x360>)
 8009860:	fba3 2301 	umull	r2, r3, r3, r1
 8009864:	095b      	lsrs	r3, r3, #5
 8009866:	2264      	movs	r2, #100	; 0x64
 8009868:	fb02 f303 	mul.w	r3, r2, r3
 800986c:	1acb      	subs	r3, r1, r3
 800986e:	00db      	lsls	r3, r3, #3
 8009870:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009874:	4b37      	ldr	r3, [pc, #220]	; (8009954 <UART_SetConfig+0x360>)
 8009876:	fba3 2302 	umull	r2, r3, r3, r2
 800987a:	095b      	lsrs	r3, r3, #5
 800987c:	005b      	lsls	r3, r3, #1
 800987e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009882:	441c      	add	r4, r3
 8009884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009888:	2200      	movs	r2, #0
 800988a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800988e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009892:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009896:	4642      	mov	r2, r8
 8009898:	464b      	mov	r3, r9
 800989a:	1891      	adds	r1, r2, r2
 800989c:	63b9      	str	r1, [r7, #56]	; 0x38
 800989e:	415b      	adcs	r3, r3
 80098a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098a2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80098a6:	4641      	mov	r1, r8
 80098a8:	1851      	adds	r1, r2, r1
 80098aa:	6339      	str	r1, [r7, #48]	; 0x30
 80098ac:	4649      	mov	r1, r9
 80098ae:	414b      	adcs	r3, r1
 80098b0:	637b      	str	r3, [r7, #52]	; 0x34
 80098b2:	f04f 0200 	mov.w	r2, #0
 80098b6:	f04f 0300 	mov.w	r3, #0
 80098ba:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80098be:	4659      	mov	r1, fp
 80098c0:	00cb      	lsls	r3, r1, #3
 80098c2:	4651      	mov	r1, sl
 80098c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80098c8:	4651      	mov	r1, sl
 80098ca:	00ca      	lsls	r2, r1, #3
 80098cc:	4610      	mov	r0, r2
 80098ce:	4619      	mov	r1, r3
 80098d0:	4603      	mov	r3, r0
 80098d2:	4642      	mov	r2, r8
 80098d4:	189b      	adds	r3, r3, r2
 80098d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80098da:	464b      	mov	r3, r9
 80098dc:	460a      	mov	r2, r1
 80098de:	eb42 0303 	adc.w	r3, r2, r3
 80098e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80098e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80098f2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80098f6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80098fa:	460b      	mov	r3, r1
 80098fc:	18db      	adds	r3, r3, r3
 80098fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8009900:	4613      	mov	r3, r2
 8009902:	eb42 0303 	adc.w	r3, r2, r3
 8009906:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009908:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800990c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009910:	f7f6 fc66 	bl	80001e0 <__aeabi_uldivmod>
 8009914:	4602      	mov	r2, r0
 8009916:	460b      	mov	r3, r1
 8009918:	4b0e      	ldr	r3, [pc, #56]	; (8009954 <UART_SetConfig+0x360>)
 800991a:	fba3 1302 	umull	r1, r3, r3, r2
 800991e:	095b      	lsrs	r3, r3, #5
 8009920:	2164      	movs	r1, #100	; 0x64
 8009922:	fb01 f303 	mul.w	r3, r1, r3
 8009926:	1ad3      	subs	r3, r2, r3
 8009928:	00db      	lsls	r3, r3, #3
 800992a:	3332      	adds	r3, #50	; 0x32
 800992c:	4a09      	ldr	r2, [pc, #36]	; (8009954 <UART_SetConfig+0x360>)
 800992e:	fba2 2303 	umull	r2, r3, r2, r3
 8009932:	095b      	lsrs	r3, r3, #5
 8009934:	f003 0207 	and.w	r2, r3, #7
 8009938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4422      	add	r2, r4
 8009940:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009942:	e108      	b.n	8009b56 <UART_SetConfig+0x562>
 8009944:	00a037a0 	.word	0x00a037a0
 8009948:	0800d584 	.word	0x0800d584
 800994c:	40011000 	.word	0x40011000
 8009950:	40011400 	.word	0x40011400
 8009954:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009958:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800995c:	2200      	movs	r2, #0
 800995e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009962:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009966:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800996a:	4642      	mov	r2, r8
 800996c:	464b      	mov	r3, r9
 800996e:	1891      	adds	r1, r2, r2
 8009970:	6239      	str	r1, [r7, #32]
 8009972:	415b      	adcs	r3, r3
 8009974:	627b      	str	r3, [r7, #36]	; 0x24
 8009976:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800997a:	4641      	mov	r1, r8
 800997c:	1854      	adds	r4, r2, r1
 800997e:	4649      	mov	r1, r9
 8009980:	eb43 0501 	adc.w	r5, r3, r1
 8009984:	f04f 0200 	mov.w	r2, #0
 8009988:	f04f 0300 	mov.w	r3, #0
 800998c:	00eb      	lsls	r3, r5, #3
 800998e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009992:	00e2      	lsls	r2, r4, #3
 8009994:	4614      	mov	r4, r2
 8009996:	461d      	mov	r5, r3
 8009998:	4643      	mov	r3, r8
 800999a:	18e3      	adds	r3, r4, r3
 800999c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80099a0:	464b      	mov	r3, r9
 80099a2:	eb45 0303 	adc.w	r3, r5, r3
 80099a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80099aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80099b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80099ba:	f04f 0200 	mov.w	r2, #0
 80099be:	f04f 0300 	mov.w	r3, #0
 80099c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80099c6:	4629      	mov	r1, r5
 80099c8:	008b      	lsls	r3, r1, #2
 80099ca:	4621      	mov	r1, r4
 80099cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099d0:	4621      	mov	r1, r4
 80099d2:	008a      	lsls	r2, r1, #2
 80099d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80099d8:	f7f6 fc02 	bl	80001e0 <__aeabi_uldivmod>
 80099dc:	4602      	mov	r2, r0
 80099de:	460b      	mov	r3, r1
 80099e0:	4b60      	ldr	r3, [pc, #384]	; (8009b64 <UART_SetConfig+0x570>)
 80099e2:	fba3 2302 	umull	r2, r3, r3, r2
 80099e6:	095b      	lsrs	r3, r3, #5
 80099e8:	011c      	lsls	r4, r3, #4
 80099ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099ee:	2200      	movs	r2, #0
 80099f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80099f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80099f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80099fc:	4642      	mov	r2, r8
 80099fe:	464b      	mov	r3, r9
 8009a00:	1891      	adds	r1, r2, r2
 8009a02:	61b9      	str	r1, [r7, #24]
 8009a04:	415b      	adcs	r3, r3
 8009a06:	61fb      	str	r3, [r7, #28]
 8009a08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009a0c:	4641      	mov	r1, r8
 8009a0e:	1851      	adds	r1, r2, r1
 8009a10:	6139      	str	r1, [r7, #16]
 8009a12:	4649      	mov	r1, r9
 8009a14:	414b      	adcs	r3, r1
 8009a16:	617b      	str	r3, [r7, #20]
 8009a18:	f04f 0200 	mov.w	r2, #0
 8009a1c:	f04f 0300 	mov.w	r3, #0
 8009a20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009a24:	4659      	mov	r1, fp
 8009a26:	00cb      	lsls	r3, r1, #3
 8009a28:	4651      	mov	r1, sl
 8009a2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a2e:	4651      	mov	r1, sl
 8009a30:	00ca      	lsls	r2, r1, #3
 8009a32:	4610      	mov	r0, r2
 8009a34:	4619      	mov	r1, r3
 8009a36:	4603      	mov	r3, r0
 8009a38:	4642      	mov	r2, r8
 8009a3a:	189b      	adds	r3, r3, r2
 8009a3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009a40:	464b      	mov	r3, r9
 8009a42:	460a      	mov	r2, r1
 8009a44:	eb42 0303 	adc.w	r3, r2, r3
 8009a48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	67bb      	str	r3, [r7, #120]	; 0x78
 8009a56:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009a58:	f04f 0200 	mov.w	r2, #0
 8009a5c:	f04f 0300 	mov.w	r3, #0
 8009a60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009a64:	4649      	mov	r1, r9
 8009a66:	008b      	lsls	r3, r1, #2
 8009a68:	4641      	mov	r1, r8
 8009a6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a6e:	4641      	mov	r1, r8
 8009a70:	008a      	lsls	r2, r1, #2
 8009a72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009a76:	f7f6 fbb3 	bl	80001e0 <__aeabi_uldivmod>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	4b39      	ldr	r3, [pc, #228]	; (8009b64 <UART_SetConfig+0x570>)
 8009a80:	fba3 1302 	umull	r1, r3, r3, r2
 8009a84:	095b      	lsrs	r3, r3, #5
 8009a86:	2164      	movs	r1, #100	; 0x64
 8009a88:	fb01 f303 	mul.w	r3, r1, r3
 8009a8c:	1ad3      	subs	r3, r2, r3
 8009a8e:	011b      	lsls	r3, r3, #4
 8009a90:	3332      	adds	r3, #50	; 0x32
 8009a92:	4a34      	ldr	r2, [pc, #208]	; (8009b64 <UART_SetConfig+0x570>)
 8009a94:	fba2 2303 	umull	r2, r3, r2, r3
 8009a98:	095b      	lsrs	r3, r3, #5
 8009a9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a9e:	441c      	add	r4, r3
 8009aa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	673b      	str	r3, [r7, #112]	; 0x70
 8009aa8:	677a      	str	r2, [r7, #116]	; 0x74
 8009aaa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009aae:	4642      	mov	r2, r8
 8009ab0:	464b      	mov	r3, r9
 8009ab2:	1891      	adds	r1, r2, r2
 8009ab4:	60b9      	str	r1, [r7, #8]
 8009ab6:	415b      	adcs	r3, r3
 8009ab8:	60fb      	str	r3, [r7, #12]
 8009aba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009abe:	4641      	mov	r1, r8
 8009ac0:	1851      	adds	r1, r2, r1
 8009ac2:	6039      	str	r1, [r7, #0]
 8009ac4:	4649      	mov	r1, r9
 8009ac6:	414b      	adcs	r3, r1
 8009ac8:	607b      	str	r3, [r7, #4]
 8009aca:	f04f 0200 	mov.w	r2, #0
 8009ace:	f04f 0300 	mov.w	r3, #0
 8009ad2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009ad6:	4659      	mov	r1, fp
 8009ad8:	00cb      	lsls	r3, r1, #3
 8009ada:	4651      	mov	r1, sl
 8009adc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ae0:	4651      	mov	r1, sl
 8009ae2:	00ca      	lsls	r2, r1, #3
 8009ae4:	4610      	mov	r0, r2
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	4603      	mov	r3, r0
 8009aea:	4642      	mov	r2, r8
 8009aec:	189b      	adds	r3, r3, r2
 8009aee:	66bb      	str	r3, [r7, #104]	; 0x68
 8009af0:	464b      	mov	r3, r9
 8009af2:	460a      	mov	r2, r1
 8009af4:	eb42 0303 	adc.w	r3, r2, r3
 8009af8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	2200      	movs	r2, #0
 8009b02:	663b      	str	r3, [r7, #96]	; 0x60
 8009b04:	667a      	str	r2, [r7, #100]	; 0x64
 8009b06:	f04f 0200 	mov.w	r2, #0
 8009b0a:	f04f 0300 	mov.w	r3, #0
 8009b0e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009b12:	4649      	mov	r1, r9
 8009b14:	008b      	lsls	r3, r1, #2
 8009b16:	4641      	mov	r1, r8
 8009b18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b1c:	4641      	mov	r1, r8
 8009b1e:	008a      	lsls	r2, r1, #2
 8009b20:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009b24:	f7f6 fb5c 	bl	80001e0 <__aeabi_uldivmod>
 8009b28:	4602      	mov	r2, r0
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	4b0d      	ldr	r3, [pc, #52]	; (8009b64 <UART_SetConfig+0x570>)
 8009b2e:	fba3 1302 	umull	r1, r3, r3, r2
 8009b32:	095b      	lsrs	r3, r3, #5
 8009b34:	2164      	movs	r1, #100	; 0x64
 8009b36:	fb01 f303 	mul.w	r3, r1, r3
 8009b3a:	1ad3      	subs	r3, r2, r3
 8009b3c:	011b      	lsls	r3, r3, #4
 8009b3e:	3332      	adds	r3, #50	; 0x32
 8009b40:	4a08      	ldr	r2, [pc, #32]	; (8009b64 <UART_SetConfig+0x570>)
 8009b42:	fba2 2303 	umull	r2, r3, r2, r3
 8009b46:	095b      	lsrs	r3, r3, #5
 8009b48:	f003 020f 	and.w	r2, r3, #15
 8009b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4422      	add	r2, r4
 8009b54:	609a      	str	r2, [r3, #8]
}
 8009b56:	bf00      	nop
 8009b58:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b62:	bf00      	nop
 8009b64:	51eb851f 	.word	0x51eb851f

08009b68 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 8009b6c:	bf00      	nop
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr
	...

08009b78 <__NVIC_SetPriority>:
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	4603      	mov	r3, r0
 8009b80:	6039      	str	r1, [r7, #0]
 8009b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	db0a      	blt.n	8009ba2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	b2da      	uxtb	r2, r3
 8009b90:	490c      	ldr	r1, [pc, #48]	; (8009bc4 <__NVIC_SetPriority+0x4c>)
 8009b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b96:	0112      	lsls	r2, r2, #4
 8009b98:	b2d2      	uxtb	r2, r2
 8009b9a:	440b      	add	r3, r1
 8009b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009ba0:	e00a      	b.n	8009bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	b2da      	uxtb	r2, r3
 8009ba6:	4908      	ldr	r1, [pc, #32]	; (8009bc8 <__NVIC_SetPriority+0x50>)
 8009ba8:	79fb      	ldrb	r3, [r7, #7]
 8009baa:	f003 030f 	and.w	r3, r3, #15
 8009bae:	3b04      	subs	r3, #4
 8009bb0:	0112      	lsls	r2, r2, #4
 8009bb2:	b2d2      	uxtb	r2, r2
 8009bb4:	440b      	add	r3, r1
 8009bb6:	761a      	strb	r2, [r3, #24]
}
 8009bb8:	bf00      	nop
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr
 8009bc4:	e000e100 	.word	0xe000e100
 8009bc8:	e000ed00 	.word	0xe000ed00

08009bcc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009bd0:	4b05      	ldr	r3, [pc, #20]	; (8009be8 <SysTick_Handler+0x1c>)
 8009bd2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009bd4:	f002 fc06 	bl	800c3e4 <xTaskGetSchedulerState>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d001      	beq.n	8009be2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009bde:	f000 fe2b 	bl	800a838 <xPortSysTickHandler>
  }
}
 8009be2:	bf00      	nop
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	e000e010 	.word	0xe000e010

08009bec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009bec:	b580      	push	{r7, lr}
 8009bee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009bf0:	2100      	movs	r1, #0
 8009bf2:	f06f 0004 	mvn.w	r0, #4
 8009bf6:	f7ff ffbf 	bl	8009b78 <__NVIC_SetPriority>
#endif
}
 8009bfa:	bf00      	nop
 8009bfc:	bd80      	pop	{r7, pc}
	...

08009c00 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009c00:	b480      	push	{r7}
 8009c02:	b083      	sub	sp, #12
 8009c04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c06:	f3ef 8305 	mrs	r3, IPSR
 8009c0a:	603b      	str	r3, [r7, #0]
  return(result);
 8009c0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d003      	beq.n	8009c1a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009c12:	f06f 0305 	mvn.w	r3, #5
 8009c16:	607b      	str	r3, [r7, #4]
 8009c18:	e00c      	b.n	8009c34 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009c1a:	4b0a      	ldr	r3, [pc, #40]	; (8009c44 <osKernelInitialize+0x44>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d105      	bne.n	8009c2e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009c22:	4b08      	ldr	r3, [pc, #32]	; (8009c44 <osKernelInitialize+0x44>)
 8009c24:	2201      	movs	r2, #1
 8009c26:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	607b      	str	r3, [r7, #4]
 8009c2c:	e002      	b.n	8009c34 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009c34:	687b      	ldr	r3, [r7, #4]
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	370c      	adds	r7, #12
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	200008c4 	.word	0x200008c4

08009c48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c4e:	f3ef 8305 	mrs	r3, IPSR
 8009c52:	603b      	str	r3, [r7, #0]
  return(result);
 8009c54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d003      	beq.n	8009c62 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009c5a:	f06f 0305 	mvn.w	r3, #5
 8009c5e:	607b      	str	r3, [r7, #4]
 8009c60:	e010      	b.n	8009c84 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009c62:	4b0b      	ldr	r3, [pc, #44]	; (8009c90 <osKernelStart+0x48>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d109      	bne.n	8009c7e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009c6a:	f7ff ffbf 	bl	8009bec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009c6e:	4b08      	ldr	r3, [pc, #32]	; (8009c90 <osKernelStart+0x48>)
 8009c70:	2202      	movs	r2, #2
 8009c72:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009c74:	f001 fe46 	bl	800b904 <vTaskStartScheduler>
      stat = osOK;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	607b      	str	r3, [r7, #4]
 8009c7c:	e002      	b.n	8009c84 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009c84:	687b      	ldr	r3, [r7, #4]
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3708      	adds	r7, #8
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	200008c4 	.word	0x200008c4

08009c94 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b08e      	sub	sp, #56	; 0x38
 8009c98:	af04      	add	r7, sp, #16
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ca4:	f3ef 8305 	mrs	r3, IPSR
 8009ca8:	617b      	str	r3, [r7, #20]
  return(result);
 8009caa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d17f      	bne.n	8009db0 <osThreadNew+0x11c>
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d07c      	beq.n	8009db0 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8009cb6:	2380      	movs	r3, #128	; 0x80
 8009cb8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009cba:	2318      	movs	r3, #24
 8009cbc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8009cc6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d046      	beq.n	8009d5c <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d002      	beq.n	8009cdc <osThreadNew+0x48>
        name = attr->name;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	699b      	ldr	r3, [r3, #24]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d002      	beq.n	8009cea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	699b      	ldr	r3, [r3, #24]
 8009ce8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009cea:	69fb      	ldr	r3, [r7, #28]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d008      	beq.n	8009d02 <osThreadNew+0x6e>
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	2b38      	cmp	r3, #56	; 0x38
 8009cf4:	d805      	bhi.n	8009d02 <osThreadNew+0x6e>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	f003 0301 	and.w	r3, r3, #1
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d001      	beq.n	8009d06 <osThreadNew+0x72>
        return (NULL);
 8009d02:	2300      	movs	r3, #0
 8009d04:	e055      	b.n	8009db2 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	695b      	ldr	r3, [r3, #20]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d003      	beq.n	8009d16 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	695b      	ldr	r3, [r3, #20]
 8009d12:	089b      	lsrs	r3, r3, #2
 8009d14:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d00f      	beq.n	8009d3e <osThreadNew+0xaa>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	68db      	ldr	r3, [r3, #12]
 8009d22:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 8009d26:	d30a      	bcc.n	8009d3e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d006      	beq.n	8009d3e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	695b      	ldr	r3, [r3, #20]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d002      	beq.n	8009d3e <osThreadNew+0xaa>
        mem = 1;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	61bb      	str	r3, [r7, #24]
 8009d3c:	e010      	b.n	8009d60 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	689b      	ldr	r3, [r3, #8]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d10c      	bne.n	8009d60 <osThreadNew+0xcc>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	68db      	ldr	r3, [r3, #12]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d108      	bne.n	8009d60 <osThreadNew+0xcc>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	691b      	ldr	r3, [r3, #16]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d104      	bne.n	8009d60 <osThreadNew+0xcc>
          mem = 0;
 8009d56:	2300      	movs	r3, #0
 8009d58:	61bb      	str	r3, [r7, #24]
 8009d5a:	e001      	b.n	8009d60 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009d60:	69bb      	ldr	r3, [r7, #24]
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d110      	bne.n	8009d88 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009d6e:	9202      	str	r2, [sp, #8]
 8009d70:	9301      	str	r3, [sp, #4]
 8009d72:	69fb      	ldr	r3, [r7, #28]
 8009d74:	9300      	str	r3, [sp, #0]
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	6a3a      	ldr	r2, [r7, #32]
 8009d7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d7c:	68f8      	ldr	r0, [r7, #12]
 8009d7e:	f001 fbbb 	bl	800b4f8 <xTaskCreateStatic>
 8009d82:	4603      	mov	r3, r0
 8009d84:	613b      	str	r3, [r7, #16]
 8009d86:	e013      	b.n	8009db0 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d110      	bne.n	8009db0 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009d8e:	6a3b      	ldr	r3, [r7, #32]
 8009d90:	b29a      	uxth	r2, r3
 8009d92:	f107 0310 	add.w	r3, r7, #16
 8009d96:	9301      	str	r3, [sp, #4]
 8009d98:	69fb      	ldr	r3, [r7, #28]
 8009d9a:	9300      	str	r3, [sp, #0]
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f001 fc08 	bl	800b5b6 <xTaskCreate>
 8009da6:	4603      	mov	r3, r0
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d001      	beq.n	8009db0 <osThreadNew+0x11c>
            hTask = NULL;
 8009dac:	2300      	movs	r3, #0
 8009dae:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009db0:	693b      	ldr	r3, [r7, #16]
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3728      	adds	r7, #40	; 0x28
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}

08009dba <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b084      	sub	sp, #16
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009dc2:	f3ef 8305 	mrs	r3, IPSR
 8009dc6:	60bb      	str	r3, [r7, #8]
  return(result);
 8009dc8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d003      	beq.n	8009dd6 <osDelay+0x1c>
    stat = osErrorISR;
 8009dce:	f06f 0305 	mvn.w	r3, #5
 8009dd2:	60fb      	str	r3, [r7, #12]
 8009dd4:	e007      	b.n	8009de6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d002      	beq.n	8009de6 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f001 fd5b 	bl	800b89c <vTaskDelay>
    }
  }

  return (stat);
 8009de6:	68fb      	ldr	r3, [r7, #12]
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3710      	adds	r7, #16
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f002 ffc9 	bl	800cd90 <pvTimerGetTimerID>
 8009dfe:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d005      	beq.n	8009e12 <TimerCallback+0x22>
    callb->func (callb->arg);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	68fa      	ldr	r2, [r7, #12]
 8009e0c:	6852      	ldr	r2, [r2, #4]
 8009e0e:	4610      	mov	r0, r2
 8009e10:	4798      	blx	r3
  }
}
 8009e12:	bf00      	nop
 8009e14:	3710      	adds	r7, #16
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
	...

08009e1c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b08c      	sub	sp, #48	; 0x30
 8009e20:	af02      	add	r7, sp, #8
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	607a      	str	r2, [r7, #4]
 8009e26:	603b      	str	r3, [r7, #0]
 8009e28:	460b      	mov	r3, r1
 8009e2a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e30:	f3ef 8305 	mrs	r3, IPSR
 8009e34:	613b      	str	r3, [r7, #16]
  return(result);
 8009e36:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d163      	bne.n	8009f04 <osTimerNew+0xe8>
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d060      	beq.n	8009f04 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8009e42:	2008      	movs	r0, #8
 8009e44:	f000 f89a 	bl	8009f7c <pvPortMalloc>
 8009e48:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d059      	beq.n	8009f04 <osTimerNew+0xe8>
      callb->func = func;
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	68fa      	ldr	r2, [r7, #12]
 8009e54:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8009e5c:	7afb      	ldrb	r3, [r7, #11]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d102      	bne.n	8009e68 <osTimerNew+0x4c>
        reload = pdFALSE;
 8009e62:	2300      	movs	r3, #0
 8009e64:	61fb      	str	r3, [r7, #28]
 8009e66:	e001      	b.n	8009e6c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8009e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e70:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8009e72:	2300      	movs	r3, #0
 8009e74:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d01c      	beq.n	8009eb6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d002      	beq.n	8009e8a <osTimerNew+0x6e>
          name = attr->name;
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d006      	beq.n	8009ea0 <osTimerNew+0x84>
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	68db      	ldr	r3, [r3, #12]
 8009e96:	2b2b      	cmp	r3, #43	; 0x2b
 8009e98:	d902      	bls.n	8009ea0 <osTimerNew+0x84>
          mem = 1;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	61bb      	str	r3, [r7, #24]
 8009e9e:	e00c      	b.n	8009eba <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d108      	bne.n	8009eba <osTimerNew+0x9e>
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	68db      	ldr	r3, [r3, #12]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d104      	bne.n	8009eba <osTimerNew+0x9e>
            mem = 0;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	61bb      	str	r3, [r7, #24]
 8009eb4:	e001      	b.n	8009eba <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8009eba:	69bb      	ldr	r3, [r7, #24]
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d10c      	bne.n	8009eda <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	9301      	str	r3, [sp, #4]
 8009ec6:	4b12      	ldr	r3, [pc, #72]	; (8009f10 <osTimerNew+0xf4>)
 8009ec8:	9300      	str	r3, [sp, #0]
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	69fa      	ldr	r2, [r7, #28]
 8009ece:	2101      	movs	r1, #1
 8009ed0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ed2:	f002 fbdc 	bl	800c68e <xTimerCreateStatic>
 8009ed6:	6238      	str	r0, [r7, #32]
 8009ed8:	e00b      	b.n	8009ef2 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d108      	bne.n	8009ef2 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8009ee0:	4b0b      	ldr	r3, [pc, #44]	; (8009f10 <osTimerNew+0xf4>)
 8009ee2:	9300      	str	r3, [sp, #0]
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	69fa      	ldr	r2, [r7, #28]
 8009ee8:	2101      	movs	r1, #1
 8009eea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009eec:	f002 fbae 	bl	800c64c <xTimerCreate>
 8009ef0:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8009ef2:	6a3b      	ldr	r3, [r7, #32]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d105      	bne.n	8009f04 <osTimerNew+0xe8>
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d002      	beq.n	8009f04 <osTimerNew+0xe8>
        vPortFree (callb);
 8009efe:	6978      	ldr	r0, [r7, #20]
 8009f00:	f000 f90c 	bl	800a11c <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8009f04:	6a3b      	ldr	r3, [r7, #32]
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3728      	adds	r7, #40	; 0x28
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	08009df1 	.word	0x08009df1

08009f14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009f14:	b480      	push	{r7}
 8009f16:	b085      	sub	sp, #20
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	4a07      	ldr	r2, [pc, #28]	; (8009f40 <vApplicationGetIdleTaskMemory+0x2c>)
 8009f24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	4a06      	ldr	r2, [pc, #24]	; (8009f44 <vApplicationGetIdleTaskMemory+0x30>)
 8009f2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2280      	movs	r2, #128	; 0x80
 8009f30:	601a      	str	r2, [r3, #0]
}
 8009f32:	bf00      	nop
 8009f34:	3714      	adds	r7, #20
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr
 8009f3e:	bf00      	nop
 8009f40:	200008c8 	.word	0x200008c8
 8009f44:	20000a84 	.word	0x20000a84

08009f48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009f48:	b480      	push	{r7}
 8009f4a:	b085      	sub	sp, #20
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	60b9      	str	r1, [r7, #8]
 8009f52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	4a07      	ldr	r2, [pc, #28]	; (8009f74 <vApplicationGetTimerTaskMemory+0x2c>)
 8009f58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	4a06      	ldr	r2, [pc, #24]	; (8009f78 <vApplicationGetTimerTaskMemory+0x30>)
 8009f5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f66:	601a      	str	r2, [r3, #0]
}
 8009f68:	bf00      	nop
 8009f6a:	3714      	adds	r7, #20
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr
 8009f74:	20000c84 	.word	0x20000c84
 8009f78:	20000e40 	.word	0x20000e40

08009f7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b08a      	sub	sp, #40	; 0x28
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009f84:	2300      	movs	r3, #0
 8009f86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009f88:	f001 fd2e 	bl	800b9e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009f8c:	4b5d      	ldr	r3, [pc, #372]	; (800a104 <pvPortMalloc+0x188>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d101      	bne.n	8009f98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009f94:	f000 f924 	bl	800a1e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009f98:	4b5b      	ldr	r3, [pc, #364]	; (800a108 <pvPortMalloc+0x18c>)
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	4013      	ands	r3, r2
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	f040 8093 	bne.w	800a0cc <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d01d      	beq.n	8009fe8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009fac:	2208      	movs	r2, #8
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f003 0307 	and.w	r3, r3, #7
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d014      	beq.n	8009fe8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f023 0307 	bic.w	r3, r3, #7
 8009fc4:	3308      	adds	r3, #8
 8009fc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f003 0307 	and.w	r3, r3, #7
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d00a      	beq.n	8009fe8 <pvPortMalloc+0x6c>
	__asm volatile
 8009fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd6:	f383 8811 	msr	BASEPRI, r3
 8009fda:	f3bf 8f6f 	isb	sy
 8009fde:	f3bf 8f4f 	dsb	sy
 8009fe2:	617b      	str	r3, [r7, #20]
}
 8009fe4:	bf00      	nop
 8009fe6:	e7fe      	b.n	8009fe6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d06e      	beq.n	800a0cc <pvPortMalloc+0x150>
 8009fee:	4b47      	ldr	r3, [pc, #284]	; (800a10c <pvPortMalloc+0x190>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d869      	bhi.n	800a0cc <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009ff8:	4b45      	ldr	r3, [pc, #276]	; (800a110 <pvPortMalloc+0x194>)
 8009ffa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009ffc:	4b44      	ldr	r3, [pc, #272]	; (800a110 <pvPortMalloc+0x194>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a002:	e004      	b.n	800a00e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a006:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	429a      	cmp	r2, r3
 800a016:	d903      	bls.n	800a020 <pvPortMalloc+0xa4>
 800a018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d1f1      	bne.n	800a004 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a020:	4b38      	ldr	r3, [pc, #224]	; (800a104 <pvPortMalloc+0x188>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a026:	429a      	cmp	r2, r3
 800a028:	d050      	beq.n	800a0cc <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a02a:	6a3b      	ldr	r3, [r7, #32]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	2208      	movs	r2, #8
 800a030:	4413      	add	r3, r2
 800a032:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a036:	681a      	ldr	r2, [r3, #0]
 800a038:	6a3b      	ldr	r3, [r7, #32]
 800a03a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03e:	685a      	ldr	r2, [r3, #4]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	1ad2      	subs	r2, r2, r3
 800a044:	2308      	movs	r3, #8
 800a046:	005b      	lsls	r3, r3, #1
 800a048:	429a      	cmp	r2, r3
 800a04a:	d91f      	bls.n	800a08c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a04c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	4413      	add	r3, r2
 800a052:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a054:	69bb      	ldr	r3, [r7, #24]
 800a056:	f003 0307 	and.w	r3, r3, #7
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d00a      	beq.n	800a074 <pvPortMalloc+0xf8>
	__asm volatile
 800a05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a062:	f383 8811 	msr	BASEPRI, r3
 800a066:	f3bf 8f6f 	isb	sy
 800a06a:	f3bf 8f4f 	dsb	sy
 800a06e:	613b      	str	r3, [r7, #16]
}
 800a070:	bf00      	nop
 800a072:	e7fe      	b.n	800a072 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a076:	685a      	ldr	r2, [r3, #4]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	1ad2      	subs	r2, r2, r3
 800a07c:	69bb      	ldr	r3, [r7, #24]
 800a07e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a086:	69b8      	ldr	r0, [r7, #24]
 800a088:	f000 f90c 	bl	800a2a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a08c:	4b1f      	ldr	r3, [pc, #124]	; (800a10c <pvPortMalloc+0x190>)
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	1ad3      	subs	r3, r2, r3
 800a096:	4a1d      	ldr	r2, [pc, #116]	; (800a10c <pvPortMalloc+0x190>)
 800a098:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a09a:	4b1c      	ldr	r3, [pc, #112]	; (800a10c <pvPortMalloc+0x190>)
 800a09c:	681a      	ldr	r2, [r3, #0]
 800a09e:	4b1d      	ldr	r3, [pc, #116]	; (800a114 <pvPortMalloc+0x198>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d203      	bcs.n	800a0ae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a0a6:	4b19      	ldr	r3, [pc, #100]	; (800a10c <pvPortMalloc+0x190>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a1a      	ldr	r2, [pc, #104]	; (800a114 <pvPortMalloc+0x198>)
 800a0ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b0:	685a      	ldr	r2, [r3, #4]
 800a0b2:	4b15      	ldr	r3, [pc, #84]	; (800a108 <pvPortMalloc+0x18c>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	431a      	orrs	r2, r3
 800a0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0be:	2200      	movs	r2, #0
 800a0c0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a0c2:	4b15      	ldr	r3, [pc, #84]	; (800a118 <pvPortMalloc+0x19c>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	4a13      	ldr	r2, [pc, #76]	; (800a118 <pvPortMalloc+0x19c>)
 800a0ca:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a0cc:	f001 fcd2 	bl	800ba74 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d101      	bne.n	800a0da <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800a0d6:	f7f7 f983 	bl	80013e0 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0da:	69fb      	ldr	r3, [r7, #28]
 800a0dc:	f003 0307 	and.w	r3, r3, #7
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d00a      	beq.n	800a0fa <pvPortMalloc+0x17e>
	__asm volatile
 800a0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e8:	f383 8811 	msr	BASEPRI, r3
 800a0ec:	f3bf 8f6f 	isb	sy
 800a0f0:	f3bf 8f4f 	dsb	sy
 800a0f4:	60fb      	str	r3, [r7, #12]
}
 800a0f6:	bf00      	nop
 800a0f8:	e7fe      	b.n	800a0f8 <pvPortMalloc+0x17c>
	return pvReturn;
 800a0fa:	69fb      	ldr	r3, [r7, #28]
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3728      	adds	r7, #40	; 0x28
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}
 800a104:	20004e48 	.word	0x20004e48
 800a108:	20004e5c 	.word	0x20004e5c
 800a10c:	20004e4c 	.word	0x20004e4c
 800a110:	20004e40 	.word	0x20004e40
 800a114:	20004e50 	.word	0x20004e50
 800a118:	20004e54 	.word	0x20004e54

0800a11c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b086      	sub	sp, #24
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d04d      	beq.n	800a1ca <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a12e:	2308      	movs	r3, #8
 800a130:	425b      	negs	r3, r3
 800a132:	697a      	ldr	r2, [r7, #20]
 800a134:	4413      	add	r3, r2
 800a136:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	685a      	ldr	r2, [r3, #4]
 800a140:	4b24      	ldr	r3, [pc, #144]	; (800a1d4 <vPortFree+0xb8>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4013      	ands	r3, r2
 800a146:	2b00      	cmp	r3, #0
 800a148:	d10a      	bne.n	800a160 <vPortFree+0x44>
	__asm volatile
 800a14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14e:	f383 8811 	msr	BASEPRI, r3
 800a152:	f3bf 8f6f 	isb	sy
 800a156:	f3bf 8f4f 	dsb	sy
 800a15a:	60fb      	str	r3, [r7, #12]
}
 800a15c:	bf00      	nop
 800a15e:	e7fe      	b.n	800a15e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d00a      	beq.n	800a17e <vPortFree+0x62>
	__asm volatile
 800a168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a16c:	f383 8811 	msr	BASEPRI, r3
 800a170:	f3bf 8f6f 	isb	sy
 800a174:	f3bf 8f4f 	dsb	sy
 800a178:	60bb      	str	r3, [r7, #8]
}
 800a17a:	bf00      	nop
 800a17c:	e7fe      	b.n	800a17c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	685a      	ldr	r2, [r3, #4]
 800a182:	4b14      	ldr	r3, [pc, #80]	; (800a1d4 <vPortFree+0xb8>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4013      	ands	r3, r2
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d01e      	beq.n	800a1ca <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d11a      	bne.n	800a1ca <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	685a      	ldr	r2, [r3, #4]
 800a198:	4b0e      	ldr	r3, [pc, #56]	; (800a1d4 <vPortFree+0xb8>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	43db      	mvns	r3, r3
 800a19e:	401a      	ands	r2, r3
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a1a4:	f001 fc20 	bl	800b9e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	685a      	ldr	r2, [r3, #4]
 800a1ac:	4b0a      	ldr	r3, [pc, #40]	; (800a1d8 <vPortFree+0xbc>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4413      	add	r3, r2
 800a1b2:	4a09      	ldr	r2, [pc, #36]	; (800a1d8 <vPortFree+0xbc>)
 800a1b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a1b6:	6938      	ldr	r0, [r7, #16]
 800a1b8:	f000 f874 	bl	800a2a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a1bc:	4b07      	ldr	r3, [pc, #28]	; (800a1dc <vPortFree+0xc0>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	4a06      	ldr	r2, [pc, #24]	; (800a1dc <vPortFree+0xc0>)
 800a1c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a1c6:	f001 fc55 	bl	800ba74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a1ca:	bf00      	nop
 800a1cc:	3718      	adds	r7, #24
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	20004e5c 	.word	0x20004e5c
 800a1d8:	20004e4c 	.word	0x20004e4c
 800a1dc:	20004e58 	.word	0x20004e58

0800a1e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b085      	sub	sp, #20
 800a1e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a1e6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a1ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a1ec:	4b27      	ldr	r3, [pc, #156]	; (800a28c <prvHeapInit+0xac>)
 800a1ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f003 0307 	and.w	r3, r3, #7
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d00c      	beq.n	800a214 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	3307      	adds	r3, #7
 800a1fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f023 0307 	bic.w	r3, r3, #7
 800a206:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a208:	68ba      	ldr	r2, [r7, #8]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	1ad3      	subs	r3, r2, r3
 800a20e:	4a1f      	ldr	r2, [pc, #124]	; (800a28c <prvHeapInit+0xac>)
 800a210:	4413      	add	r3, r2
 800a212:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a218:	4a1d      	ldr	r2, [pc, #116]	; (800a290 <prvHeapInit+0xb0>)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a21e:	4b1c      	ldr	r3, [pc, #112]	; (800a290 <prvHeapInit+0xb0>)
 800a220:	2200      	movs	r2, #0
 800a222:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	68ba      	ldr	r2, [r7, #8]
 800a228:	4413      	add	r3, r2
 800a22a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a22c:	2208      	movs	r2, #8
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	1a9b      	subs	r3, r3, r2
 800a232:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f023 0307 	bic.w	r3, r3, #7
 800a23a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	4a15      	ldr	r2, [pc, #84]	; (800a294 <prvHeapInit+0xb4>)
 800a240:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a242:	4b14      	ldr	r3, [pc, #80]	; (800a294 <prvHeapInit+0xb4>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	2200      	movs	r2, #0
 800a248:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a24a:	4b12      	ldr	r3, [pc, #72]	; (800a294 <prvHeapInit+0xb4>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	2200      	movs	r2, #0
 800a250:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	68fa      	ldr	r2, [r7, #12]
 800a25a:	1ad2      	subs	r2, r2, r3
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a260:	4b0c      	ldr	r3, [pc, #48]	; (800a294 <prvHeapInit+0xb4>)
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	4a0a      	ldr	r2, [pc, #40]	; (800a298 <prvHeapInit+0xb8>)
 800a26e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	4a09      	ldr	r2, [pc, #36]	; (800a29c <prvHeapInit+0xbc>)
 800a276:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a278:	4b09      	ldr	r3, [pc, #36]	; (800a2a0 <prvHeapInit+0xc0>)
 800a27a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a27e:	601a      	str	r2, [r3, #0]
}
 800a280:	bf00      	nop
 800a282:	3714      	adds	r7, #20
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr
 800a28c:	20001240 	.word	0x20001240
 800a290:	20004e40 	.word	0x20004e40
 800a294:	20004e48 	.word	0x20004e48
 800a298:	20004e50 	.word	0x20004e50
 800a29c:	20004e4c 	.word	0x20004e4c
 800a2a0:	20004e5c 	.word	0x20004e5c

0800a2a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b085      	sub	sp, #20
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a2ac:	4b28      	ldr	r3, [pc, #160]	; (800a350 <prvInsertBlockIntoFreeList+0xac>)
 800a2ae:	60fb      	str	r3, [r7, #12]
 800a2b0:	e002      	b.n	800a2b8 <prvInsertBlockIntoFreeList+0x14>
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	60fb      	str	r3, [r7, #12]
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d8f7      	bhi.n	800a2b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	68ba      	ldr	r2, [r7, #8]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d108      	bne.n	800a2e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	685a      	ldr	r2, [r3, #4]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	441a      	add	r2, r3
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	68ba      	ldr	r2, [r7, #8]
 800a2f0:	441a      	add	r2, r3
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d118      	bne.n	800a32c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	4b15      	ldr	r3, [pc, #84]	; (800a354 <prvInsertBlockIntoFreeList+0xb0>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	429a      	cmp	r2, r3
 800a304:	d00d      	beq.n	800a322 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	685a      	ldr	r2, [r3, #4]
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	441a      	add	r2, r3
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	601a      	str	r2, [r3, #0]
 800a320:	e008      	b.n	800a334 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a322:	4b0c      	ldr	r3, [pc, #48]	; (800a354 <prvInsertBlockIntoFreeList+0xb0>)
 800a324:	681a      	ldr	r2, [r3, #0]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	601a      	str	r2, [r3, #0]
 800a32a:	e003      	b.n	800a334 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a334:	68fa      	ldr	r2, [r7, #12]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	429a      	cmp	r2, r3
 800a33a:	d002      	beq.n	800a342 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a342:	bf00      	nop
 800a344:	3714      	adds	r7, #20
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr
 800a34e:	bf00      	nop
 800a350:	20004e40 	.word	0x20004e40
 800a354:	20004e48 	.word	0x20004e48

0800a358 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a358:	b480      	push	{r7}
 800a35a:	b083      	sub	sp, #12
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f103 0208 	add.w	r2, r3, #8
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f04f 32ff 	mov.w	r2, #4294967295
 800a370:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f103 0208 	add.w	r2, r3, #8
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f103 0208 	add.w	r2, r3, #8
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2200      	movs	r2, #0
 800a38a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a38c:	bf00      	nop
 800a38e:	370c      	adds	r7, #12
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr

0800a398 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a398:	b480      	push	{r7}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a3a6:	bf00      	nop
 800a3a8:	370c      	adds	r7, #12
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr

0800a3b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a3b2:	b480      	push	{r7}
 800a3b4:	b085      	sub	sp, #20
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
 800a3ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	689a      	ldr	r2, [r3, #8]
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	689b      	ldr	r3, [r3, #8]
 800a3d4:	683a      	ldr	r2, [r7, #0]
 800a3d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	683a      	ldr	r2, [r7, #0]
 800a3dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	1c5a      	adds	r2, r3, #1
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	601a      	str	r2, [r3, #0]
}
 800a3ee:	bf00      	nop
 800a3f0:	3714      	adds	r7, #20
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr

0800a3fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a3fa:	b480      	push	{r7}
 800a3fc:	b085      	sub	sp, #20
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
 800a402:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a410:	d103      	bne.n	800a41a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	691b      	ldr	r3, [r3, #16]
 800a416:	60fb      	str	r3, [r7, #12]
 800a418:	e00c      	b.n	800a434 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	3308      	adds	r3, #8
 800a41e:	60fb      	str	r3, [r7, #12]
 800a420:	e002      	b.n	800a428 <vListInsert+0x2e>
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	60fb      	str	r3, [r7, #12]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	68ba      	ldr	r2, [r7, #8]
 800a430:	429a      	cmp	r2, r3
 800a432:	d2f6      	bcs.n	800a422 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	685a      	ldr	r2, [r3, #4]
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	683a      	ldr	r2, [r7, #0]
 800a442:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	68fa      	ldr	r2, [r7, #12]
 800a448:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	683a      	ldr	r2, [r7, #0]
 800a44e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	1c5a      	adds	r2, r3, #1
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	601a      	str	r2, [r3, #0]
}
 800a460:	bf00      	nop
 800a462:	3714      	adds	r7, #20
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a46c:	b480      	push	{r7}
 800a46e:	b085      	sub	sp, #20
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	691b      	ldr	r3, [r3, #16]
 800a478:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	6892      	ldr	r2, [r2, #8]
 800a482:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	6852      	ldr	r2, [r2, #4]
 800a48c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	687a      	ldr	r2, [r7, #4]
 800a494:	429a      	cmp	r2, r3
 800a496:	d103      	bne.n	800a4a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	689a      	ldr	r2, [r3, #8]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	1e5a      	subs	r2, r3, #1
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3714      	adds	r7, #20
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b085      	sub	sp, #20
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	60b9      	str	r1, [r7, #8]
 800a4ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	3b04      	subs	r3, #4
 800a4d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a4d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	3b04      	subs	r3, #4
 800a4de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	f023 0201 	bic.w	r2, r3, #1
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	3b04      	subs	r3, #4
 800a4ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a4f0:	4a0c      	ldr	r2, [pc, #48]	; (800a524 <pxPortInitialiseStack+0x64>)
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	3b14      	subs	r3, #20
 800a4fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	3b04      	subs	r3, #4
 800a506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f06f 0202 	mvn.w	r2, #2
 800a50e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	3b20      	subs	r3, #32
 800a514:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a516:	68fb      	ldr	r3, [r7, #12]
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3714      	adds	r7, #20
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr
 800a524:	0800a529 	.word	0x0800a529

0800a528 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a528:	b480      	push	{r7}
 800a52a:	b085      	sub	sp, #20
 800a52c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a52e:	2300      	movs	r3, #0
 800a530:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a532:	4b12      	ldr	r3, [pc, #72]	; (800a57c <prvTaskExitError+0x54>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a53a:	d00a      	beq.n	800a552 <prvTaskExitError+0x2a>
	__asm volatile
 800a53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a540:	f383 8811 	msr	BASEPRI, r3
 800a544:	f3bf 8f6f 	isb	sy
 800a548:	f3bf 8f4f 	dsb	sy
 800a54c:	60fb      	str	r3, [r7, #12]
}
 800a54e:	bf00      	nop
 800a550:	e7fe      	b.n	800a550 <prvTaskExitError+0x28>
	__asm volatile
 800a552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a556:	f383 8811 	msr	BASEPRI, r3
 800a55a:	f3bf 8f6f 	isb	sy
 800a55e:	f3bf 8f4f 	dsb	sy
 800a562:	60bb      	str	r3, [r7, #8]
}
 800a564:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a566:	bf00      	nop
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d0fc      	beq.n	800a568 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a56e:	bf00      	nop
 800a570:	bf00      	nop
 800a572:	3714      	adds	r7, #20
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr
 800a57c:	2000000c 	.word	0x2000000c

0800a580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a580:	4b07      	ldr	r3, [pc, #28]	; (800a5a0 <pxCurrentTCBConst2>)
 800a582:	6819      	ldr	r1, [r3, #0]
 800a584:	6808      	ldr	r0, [r1, #0]
 800a586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a58a:	f380 8809 	msr	PSP, r0
 800a58e:	f3bf 8f6f 	isb	sy
 800a592:	f04f 0000 	mov.w	r0, #0
 800a596:	f380 8811 	msr	BASEPRI, r0
 800a59a:	4770      	bx	lr
 800a59c:	f3af 8000 	nop.w

0800a5a0 <pxCurrentTCBConst2>:
 800a5a0:	20004eb4 	.word	0x20004eb4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a5a4:	bf00      	nop
 800a5a6:	bf00      	nop

0800a5a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a5a8:	4808      	ldr	r0, [pc, #32]	; (800a5cc <prvPortStartFirstTask+0x24>)
 800a5aa:	6800      	ldr	r0, [r0, #0]
 800a5ac:	6800      	ldr	r0, [r0, #0]
 800a5ae:	f380 8808 	msr	MSP, r0
 800a5b2:	f04f 0000 	mov.w	r0, #0
 800a5b6:	f380 8814 	msr	CONTROL, r0
 800a5ba:	b662      	cpsie	i
 800a5bc:	b661      	cpsie	f
 800a5be:	f3bf 8f4f 	dsb	sy
 800a5c2:	f3bf 8f6f 	isb	sy
 800a5c6:	df00      	svc	0
 800a5c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a5ca:	bf00      	nop
 800a5cc:	e000ed08 	.word	0xe000ed08

0800a5d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b086      	sub	sp, #24
 800a5d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a5d6:	4b46      	ldr	r3, [pc, #280]	; (800a6f0 <xPortStartScheduler+0x120>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a46      	ldr	r2, [pc, #280]	; (800a6f4 <xPortStartScheduler+0x124>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d10a      	bne.n	800a5f6 <xPortStartScheduler+0x26>
	__asm volatile
 800a5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e4:	f383 8811 	msr	BASEPRI, r3
 800a5e8:	f3bf 8f6f 	isb	sy
 800a5ec:	f3bf 8f4f 	dsb	sy
 800a5f0:	613b      	str	r3, [r7, #16]
}
 800a5f2:	bf00      	nop
 800a5f4:	e7fe      	b.n	800a5f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a5f6:	4b3e      	ldr	r3, [pc, #248]	; (800a6f0 <xPortStartScheduler+0x120>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4a3f      	ldr	r2, [pc, #252]	; (800a6f8 <xPortStartScheduler+0x128>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d10a      	bne.n	800a616 <xPortStartScheduler+0x46>
	__asm volatile
 800a600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a604:	f383 8811 	msr	BASEPRI, r3
 800a608:	f3bf 8f6f 	isb	sy
 800a60c:	f3bf 8f4f 	dsb	sy
 800a610:	60fb      	str	r3, [r7, #12]
}
 800a612:	bf00      	nop
 800a614:	e7fe      	b.n	800a614 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a616:	4b39      	ldr	r3, [pc, #228]	; (800a6fc <xPortStartScheduler+0x12c>)
 800a618:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	22ff      	movs	r2, #255	; 0xff
 800a626:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	781b      	ldrb	r3, [r3, #0]
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a630:	78fb      	ldrb	r3, [r7, #3]
 800a632:	b2db      	uxtb	r3, r3
 800a634:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a638:	b2da      	uxtb	r2, r3
 800a63a:	4b31      	ldr	r3, [pc, #196]	; (800a700 <xPortStartScheduler+0x130>)
 800a63c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a63e:	4b31      	ldr	r3, [pc, #196]	; (800a704 <xPortStartScheduler+0x134>)
 800a640:	2207      	movs	r2, #7
 800a642:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a644:	e009      	b.n	800a65a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a646:	4b2f      	ldr	r3, [pc, #188]	; (800a704 <xPortStartScheduler+0x134>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	3b01      	subs	r3, #1
 800a64c:	4a2d      	ldr	r2, [pc, #180]	; (800a704 <xPortStartScheduler+0x134>)
 800a64e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a650:	78fb      	ldrb	r3, [r7, #3]
 800a652:	b2db      	uxtb	r3, r3
 800a654:	005b      	lsls	r3, r3, #1
 800a656:	b2db      	uxtb	r3, r3
 800a658:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a65a:	78fb      	ldrb	r3, [r7, #3]
 800a65c:	b2db      	uxtb	r3, r3
 800a65e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a662:	2b80      	cmp	r3, #128	; 0x80
 800a664:	d0ef      	beq.n	800a646 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a666:	4b27      	ldr	r3, [pc, #156]	; (800a704 <xPortStartScheduler+0x134>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f1c3 0307 	rsb	r3, r3, #7
 800a66e:	2b04      	cmp	r3, #4
 800a670:	d00a      	beq.n	800a688 <xPortStartScheduler+0xb8>
	__asm volatile
 800a672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a676:	f383 8811 	msr	BASEPRI, r3
 800a67a:	f3bf 8f6f 	isb	sy
 800a67e:	f3bf 8f4f 	dsb	sy
 800a682:	60bb      	str	r3, [r7, #8]
}
 800a684:	bf00      	nop
 800a686:	e7fe      	b.n	800a686 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a688:	4b1e      	ldr	r3, [pc, #120]	; (800a704 <xPortStartScheduler+0x134>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	021b      	lsls	r3, r3, #8
 800a68e:	4a1d      	ldr	r2, [pc, #116]	; (800a704 <xPortStartScheduler+0x134>)
 800a690:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a692:	4b1c      	ldr	r3, [pc, #112]	; (800a704 <xPortStartScheduler+0x134>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a69a:	4a1a      	ldr	r2, [pc, #104]	; (800a704 <xPortStartScheduler+0x134>)
 800a69c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	b2da      	uxtb	r2, r3
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a6a6:	4b18      	ldr	r3, [pc, #96]	; (800a708 <xPortStartScheduler+0x138>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a17      	ldr	r2, [pc, #92]	; (800a708 <xPortStartScheduler+0x138>)
 800a6ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a6b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a6b2:	4b15      	ldr	r3, [pc, #84]	; (800a708 <xPortStartScheduler+0x138>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4a14      	ldr	r2, [pc, #80]	; (800a708 <xPortStartScheduler+0x138>)
 800a6b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a6bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a6be:	f000 f9a9 	bl	800aa14 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a6c2:	4b12      	ldr	r3, [pc, #72]	; (800a70c <xPortStartScheduler+0x13c>)
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a6c8:	f000 f9e0 	bl	800aa8c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a6cc:	4b10      	ldr	r3, [pc, #64]	; (800a710 <xPortStartScheduler+0x140>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4a0f      	ldr	r2, [pc, #60]	; (800a710 <xPortStartScheduler+0x140>)
 800a6d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a6d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a6d8:	f7ff ff66 	bl	800a5a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a6dc:	f001 fb62 	bl	800bda4 <vTaskSwitchContext>
	prvTaskExitError();
 800a6e0:	f7ff ff22 	bl	800a528 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a6e4:	2300      	movs	r3, #0
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3718      	adds	r7, #24
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	e000ed00 	.word	0xe000ed00
 800a6f4:	410fc271 	.word	0x410fc271
 800a6f8:	410fc270 	.word	0x410fc270
 800a6fc:	e000e400 	.word	0xe000e400
 800a700:	20004e6c 	.word	0x20004e6c
 800a704:	20004e70 	.word	0x20004e70
 800a708:	e000ed20 	.word	0xe000ed20
 800a70c:	2000000c 	.word	0x2000000c
 800a710:	e000ef34 	.word	0xe000ef34

0800a714 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a714:	b480      	push	{r7}
 800a716:	b083      	sub	sp, #12
 800a718:	af00      	add	r7, sp, #0
	__asm volatile
 800a71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71e:	f383 8811 	msr	BASEPRI, r3
 800a722:	f3bf 8f6f 	isb	sy
 800a726:	f3bf 8f4f 	dsb	sy
 800a72a:	607b      	str	r3, [r7, #4]
}
 800a72c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a72e:	4b0f      	ldr	r3, [pc, #60]	; (800a76c <vPortEnterCritical+0x58>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	3301      	adds	r3, #1
 800a734:	4a0d      	ldr	r2, [pc, #52]	; (800a76c <vPortEnterCritical+0x58>)
 800a736:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a738:	4b0c      	ldr	r3, [pc, #48]	; (800a76c <vPortEnterCritical+0x58>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d10f      	bne.n	800a760 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a740:	4b0b      	ldr	r3, [pc, #44]	; (800a770 <vPortEnterCritical+0x5c>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	b2db      	uxtb	r3, r3
 800a746:	2b00      	cmp	r3, #0
 800a748:	d00a      	beq.n	800a760 <vPortEnterCritical+0x4c>
	__asm volatile
 800a74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74e:	f383 8811 	msr	BASEPRI, r3
 800a752:	f3bf 8f6f 	isb	sy
 800a756:	f3bf 8f4f 	dsb	sy
 800a75a:	603b      	str	r3, [r7, #0]
}
 800a75c:	bf00      	nop
 800a75e:	e7fe      	b.n	800a75e <vPortEnterCritical+0x4a>
	}
}
 800a760:	bf00      	nop
 800a762:	370c      	adds	r7, #12
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr
 800a76c:	2000000c 	.word	0x2000000c
 800a770:	e000ed04 	.word	0xe000ed04

0800a774 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a774:	b480      	push	{r7}
 800a776:	b083      	sub	sp, #12
 800a778:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a77a:	4b12      	ldr	r3, [pc, #72]	; (800a7c4 <vPortExitCritical+0x50>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d10a      	bne.n	800a798 <vPortExitCritical+0x24>
	__asm volatile
 800a782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a786:	f383 8811 	msr	BASEPRI, r3
 800a78a:	f3bf 8f6f 	isb	sy
 800a78e:	f3bf 8f4f 	dsb	sy
 800a792:	607b      	str	r3, [r7, #4]
}
 800a794:	bf00      	nop
 800a796:	e7fe      	b.n	800a796 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a798:	4b0a      	ldr	r3, [pc, #40]	; (800a7c4 <vPortExitCritical+0x50>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	3b01      	subs	r3, #1
 800a79e:	4a09      	ldr	r2, [pc, #36]	; (800a7c4 <vPortExitCritical+0x50>)
 800a7a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a7a2:	4b08      	ldr	r3, [pc, #32]	; (800a7c4 <vPortExitCritical+0x50>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d105      	bne.n	800a7b6 <vPortExitCritical+0x42>
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	f383 8811 	msr	BASEPRI, r3
}
 800a7b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a7b6:	bf00      	nop
 800a7b8:	370c      	adds	r7, #12
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr
 800a7c2:	bf00      	nop
 800a7c4:	2000000c 	.word	0x2000000c
	...

0800a7d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a7d0:	f3ef 8009 	mrs	r0, PSP
 800a7d4:	f3bf 8f6f 	isb	sy
 800a7d8:	4b15      	ldr	r3, [pc, #84]	; (800a830 <pxCurrentTCBConst>)
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	f01e 0f10 	tst.w	lr, #16
 800a7e0:	bf08      	it	eq
 800a7e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a7e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ea:	6010      	str	r0, [r2, #0]
 800a7ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a7f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a7f4:	f380 8811 	msr	BASEPRI, r0
 800a7f8:	f3bf 8f4f 	dsb	sy
 800a7fc:	f3bf 8f6f 	isb	sy
 800a800:	f001 fad0 	bl	800bda4 <vTaskSwitchContext>
 800a804:	f04f 0000 	mov.w	r0, #0
 800a808:	f380 8811 	msr	BASEPRI, r0
 800a80c:	bc09      	pop	{r0, r3}
 800a80e:	6819      	ldr	r1, [r3, #0]
 800a810:	6808      	ldr	r0, [r1, #0]
 800a812:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a816:	f01e 0f10 	tst.w	lr, #16
 800a81a:	bf08      	it	eq
 800a81c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a820:	f380 8809 	msr	PSP, r0
 800a824:	f3bf 8f6f 	isb	sy
 800a828:	4770      	bx	lr
 800a82a:	bf00      	nop
 800a82c:	f3af 8000 	nop.w

0800a830 <pxCurrentTCBConst>:
 800a830:	20004eb4 	.word	0x20004eb4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a834:	bf00      	nop
 800a836:	bf00      	nop

0800a838 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
	__asm volatile
 800a83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a842:	f383 8811 	msr	BASEPRI, r3
 800a846:	f3bf 8f6f 	isb	sy
 800a84a:	f3bf 8f4f 	dsb	sy
 800a84e:	607b      	str	r3, [r7, #4]
}
 800a850:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a852:	f001 f9e5 	bl	800bc20 <xTaskIncrementTick>
 800a856:	4603      	mov	r3, r0
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d003      	beq.n	800a864 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a85c:	4b06      	ldr	r3, [pc, #24]	; (800a878 <xPortSysTickHandler+0x40>)
 800a85e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a862:	601a      	str	r2, [r3, #0]
 800a864:	2300      	movs	r3, #0
 800a866:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	f383 8811 	msr	BASEPRI, r3
}
 800a86e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a870:	bf00      	nop
 800a872:	3708      	adds	r7, #8
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}
 800a878:	e000ed04 	.word	0xe000ed04

0800a87c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b088      	sub	sp, #32
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800a884:	4b5d      	ldr	r3, [pc, #372]	; (800a9fc <vPortSuppressTicksAndSleep+0x180>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	687a      	ldr	r2, [r7, #4]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d902      	bls.n	800a894 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800a88e:	4b5b      	ldr	r3, [pc, #364]	; (800a9fc <vPortSuppressTicksAndSleep+0x180>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800a894:	4b5a      	ldr	r3, [pc, #360]	; (800aa00 <vPortSuppressTicksAndSleep+0x184>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4a59      	ldr	r2, [pc, #356]	; (800aa00 <vPortSuppressTicksAndSleep+0x184>)
 800a89a:	f023 0301 	bic.w	r3, r3, #1
 800a89e:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800a8a0:	4b58      	ldr	r3, [pc, #352]	; (800aa04 <vPortSuppressTicksAndSleep+0x188>)
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	3b01      	subs	r3, #1
 800a8a8:	4957      	ldr	r1, [pc, #348]	; (800aa08 <vPortSuppressTicksAndSleep+0x18c>)
 800a8aa:	6809      	ldr	r1, [r1, #0]
 800a8ac:	fb01 f303 	mul.w	r3, r1, r3
 800a8b0:	4413      	add	r3, r2
 800a8b2:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800a8b4:	4b55      	ldr	r3, [pc, #340]	; (800aa0c <vPortSuppressTicksAndSleep+0x190>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	69fa      	ldr	r2, [r7, #28]
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d904      	bls.n	800a8c8 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800a8be:	4b53      	ldr	r3, [pc, #332]	; (800aa0c <vPortSuppressTicksAndSleep+0x190>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	69fa      	ldr	r2, [r7, #28]
 800a8c4:	1ad3      	subs	r3, r2, r3
 800a8c6:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800a8c8:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800a8ca:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800a8ce:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800a8d2:	f001 fc95 	bl	800c200 <eTaskConfirmSleepModeStatus>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d110      	bne.n	800a8fe <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800a8dc:	4b49      	ldr	r3, [pc, #292]	; (800aa04 <vPortSuppressTicksAndSleep+0x188>)
 800a8de:	4a4c      	ldr	r2, [pc, #304]	; (800aa10 <vPortSuppressTicksAndSleep+0x194>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800a8e4:	4b46      	ldr	r3, [pc, #280]	; (800aa00 <vPortSuppressTicksAndSleep+0x184>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a45      	ldr	r2, [pc, #276]	; (800aa00 <vPortSuppressTicksAndSleep+0x184>)
 800a8ea:	f043 0301 	orr.w	r3, r3, #1
 800a8ee:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800a8f0:	4b45      	ldr	r3, [pc, #276]	; (800aa08 <vPortSuppressTicksAndSleep+0x18c>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4a46      	ldr	r2, [pc, #280]	; (800aa10 <vPortSuppressTicksAndSleep+0x194>)
 800a8f6:	3b01      	subs	r3, #1
 800a8f8:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800a8fa:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800a8fc:	e079      	b.n	800a9f2 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800a8fe:	4a44      	ldr	r2, [pc, #272]	; (800aa10 <vPortSuppressTicksAndSleep+0x194>)
 800a900:	69fb      	ldr	r3, [r7, #28]
 800a902:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a904:	4b3f      	ldr	r3, [pc, #252]	; (800aa04 <vPortSuppressTicksAndSleep+0x188>)
 800a906:	2200      	movs	r2, #0
 800a908:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800a90a:	4b3d      	ldr	r3, [pc, #244]	; (800aa00 <vPortSuppressTicksAndSleep+0x184>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4a3c      	ldr	r2, [pc, #240]	; (800aa00 <vPortSuppressTicksAndSleep+0x184>)
 800a910:	f043 0301 	orr.w	r3, r3, #1
 800a914:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800a91a:	2300      	movs	r3, #0
 800a91c:	613b      	str	r3, [r7, #16]
 800a91e:	6938      	ldr	r0, [r7, #16]
 800a920:	f7f6 fd6c 	bl	80013fc <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d004      	beq.n	800a934 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800a92a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800a92e:	bf30      	wfi
				__asm volatile( "isb" );
 800a930:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f7f6 fd6b 	bl	8001410 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800a93a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800a93c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800a940:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800a944:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800a946:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800a94a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800a94e:	4b2c      	ldr	r3, [pc, #176]	; (800aa00 <vPortSuppressTicksAndSleep+0x184>)
 800a950:	2206      	movs	r2, #6
 800a952:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800a954:	4b2a      	ldr	r3, [pc, #168]	; (800aa00 <vPortSuppressTicksAndSleep+0x184>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d01d      	beq.n	800a99c <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800a960:	4b29      	ldr	r3, [pc, #164]	; (800aa08 <vPortSuppressTicksAndSleep+0x18c>)
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	4b27      	ldr	r3, [pc, #156]	; (800aa04 <vPortSuppressTicksAndSleep+0x188>)
 800a966:	6819      	ldr	r1, [r3, #0]
 800a968:	69fb      	ldr	r3, [r7, #28]
 800a96a:	1acb      	subs	r3, r1, r3
 800a96c:	4413      	add	r3, r2
 800a96e:	3b01      	subs	r3, #1
 800a970:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800a972:	4b26      	ldr	r3, [pc, #152]	; (800aa0c <vPortSuppressTicksAndSleep+0x190>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	697a      	ldr	r2, [r7, #20]
 800a978:	429a      	cmp	r2, r3
 800a97a:	d304      	bcc.n	800a986 <vPortSuppressTicksAndSleep+0x10a>
 800a97c:	4b22      	ldr	r3, [pc, #136]	; (800aa08 <vPortSuppressTicksAndSleep+0x18c>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	697a      	ldr	r2, [r7, #20]
 800a982:	429a      	cmp	r2, r3
 800a984:	d903      	bls.n	800a98e <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800a986:	4b20      	ldr	r3, [pc, #128]	; (800aa08 <vPortSuppressTicksAndSleep+0x18c>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	3b01      	subs	r3, #1
 800a98c:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800a98e:	4a20      	ldr	r2, [pc, #128]	; (800aa10 <vPortSuppressTicksAndSleep+0x194>)
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	3b01      	subs	r3, #1
 800a998:	61bb      	str	r3, [r7, #24]
 800a99a:	e018      	b.n	800a9ce <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800a99c:	4b1a      	ldr	r3, [pc, #104]	; (800aa08 <vPortSuppressTicksAndSleep+0x18c>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	687a      	ldr	r2, [r7, #4]
 800a9a2:	fb03 f202 	mul.w	r2, r3, r2
 800a9a6:	4b17      	ldr	r3, [pc, #92]	; (800aa04 <vPortSuppressTicksAndSleep+0x188>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	1ad3      	subs	r3, r2, r3
 800a9ac:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800a9ae:	4b16      	ldr	r3, [pc, #88]	; (800aa08 <vPortSuppressTicksAndSleep+0x18c>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	68fa      	ldr	r2, [r7, #12]
 800a9b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9b8:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800a9ba:	69bb      	ldr	r3, [r7, #24]
 800a9bc:	3301      	adds	r3, #1
 800a9be:	4a12      	ldr	r2, [pc, #72]	; (800aa08 <vPortSuppressTicksAndSleep+0x18c>)
 800a9c0:	6812      	ldr	r2, [r2, #0]
 800a9c2:	fb03 f202 	mul.w	r2, r3, r2
 800a9c6:	4912      	ldr	r1, [pc, #72]	; (800aa10 <vPortSuppressTicksAndSleep+0x194>)
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	1ad3      	subs	r3, r2, r3
 800a9cc:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a9ce:	4b0d      	ldr	r3, [pc, #52]	; (800aa04 <vPortSuppressTicksAndSleep+0x188>)
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800a9d4:	4b0a      	ldr	r3, [pc, #40]	; (800aa00 <vPortSuppressTicksAndSleep+0x184>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4a09      	ldr	r2, [pc, #36]	; (800aa00 <vPortSuppressTicksAndSleep+0x184>)
 800a9da:	f043 0301 	orr.w	r3, r3, #1
 800a9de:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800a9e0:	69b8      	ldr	r0, [r7, #24]
 800a9e2:	f001 f8f5 	bl	800bbd0 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800a9e6:	4b08      	ldr	r3, [pc, #32]	; (800aa08 <vPortSuppressTicksAndSleep+0x18c>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4a09      	ldr	r2, [pc, #36]	; (800aa10 <vPortSuppressTicksAndSleep+0x194>)
 800a9ec:	3b01      	subs	r3, #1
 800a9ee:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800a9f0:	b662      	cpsie	i
	}
 800a9f2:	bf00      	nop
 800a9f4:	3720      	adds	r7, #32
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	20004e64 	.word	0x20004e64
 800aa00:	e000e010 	.word	0xe000e010
 800aa04:	e000e018 	.word	0xe000e018
 800aa08:	20004e60 	.word	0x20004e60
 800aa0c:	20004e68 	.word	0x20004e68
 800aa10:	e000e014 	.word	0xe000e014

0800aa14 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aa14:	b480      	push	{r7}
 800aa16:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800aa18:	4b14      	ldr	r3, [pc, #80]	; (800aa6c <vPortSetupTimerInterrupt+0x58>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a14      	ldr	r2, [pc, #80]	; (800aa70 <vPortSetupTimerInterrupt+0x5c>)
 800aa1e:	fba2 2303 	umull	r2, r3, r2, r3
 800aa22:	099b      	lsrs	r3, r3, #6
 800aa24:	4a13      	ldr	r2, [pc, #76]	; (800aa74 <vPortSetupTimerInterrupt+0x60>)
 800aa26:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800aa28:	4b12      	ldr	r3, [pc, #72]	; (800aa74 <vPortSetupTimerInterrupt+0x60>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800aa30:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa34:	4a10      	ldr	r2, [pc, #64]	; (800aa78 <vPortSetupTimerInterrupt+0x64>)
 800aa36:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800aa38:	4b10      	ldr	r3, [pc, #64]	; (800aa7c <vPortSetupTimerInterrupt+0x68>)
 800aa3a:	222d      	movs	r2, #45	; 0x2d
 800aa3c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa3e:	4b10      	ldr	r3, [pc, #64]	; (800aa80 <vPortSetupTimerInterrupt+0x6c>)
 800aa40:	2200      	movs	r2, #0
 800aa42:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa44:	4b0f      	ldr	r3, [pc, #60]	; (800aa84 <vPortSetupTimerInterrupt+0x70>)
 800aa46:	2200      	movs	r2, #0
 800aa48:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aa4a:	4b08      	ldr	r3, [pc, #32]	; (800aa6c <vPortSetupTimerInterrupt+0x58>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	4a08      	ldr	r2, [pc, #32]	; (800aa70 <vPortSetupTimerInterrupt+0x5c>)
 800aa50:	fba2 2303 	umull	r2, r3, r2, r3
 800aa54:	099b      	lsrs	r3, r3, #6
 800aa56:	4a0c      	ldr	r2, [pc, #48]	; (800aa88 <vPortSetupTimerInterrupt+0x74>)
 800aa58:	3b01      	subs	r3, #1
 800aa5a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aa5c:	4b08      	ldr	r3, [pc, #32]	; (800aa80 <vPortSetupTimerInterrupt+0x6c>)
 800aa5e:	2207      	movs	r2, #7
 800aa60:	601a      	str	r2, [r3, #0]
}
 800aa62:	bf00      	nop
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr
 800aa6c:	20000000 	.word	0x20000000
 800aa70:	10624dd3 	.word	0x10624dd3
 800aa74:	20004e60 	.word	0x20004e60
 800aa78:	20004e64 	.word	0x20004e64
 800aa7c:	20004e68 	.word	0x20004e68
 800aa80:	e000e010 	.word	0xe000e010
 800aa84:	e000e018 	.word	0xe000e018
 800aa88:	e000e014 	.word	0xe000e014

0800aa8c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aa8c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aa9c <vPortEnableVFP+0x10>
 800aa90:	6801      	ldr	r1, [r0, #0]
 800aa92:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aa96:	6001      	str	r1, [r0, #0]
 800aa98:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aa9a:	bf00      	nop
 800aa9c:	e000ed88 	.word	0xe000ed88

0800aaa0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b085      	sub	sp, #20
 800aaa4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aaa6:	f3ef 8305 	mrs	r3, IPSR
 800aaaa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	2b0f      	cmp	r3, #15
 800aab0:	d914      	bls.n	800aadc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aab2:	4a17      	ldr	r2, [pc, #92]	; (800ab10 <vPortValidateInterruptPriority+0x70>)
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	4413      	add	r3, r2
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aabc:	4b15      	ldr	r3, [pc, #84]	; (800ab14 <vPortValidateInterruptPriority+0x74>)
 800aabe:	781b      	ldrb	r3, [r3, #0]
 800aac0:	7afa      	ldrb	r2, [r7, #11]
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d20a      	bcs.n	800aadc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800aac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaca:	f383 8811 	msr	BASEPRI, r3
 800aace:	f3bf 8f6f 	isb	sy
 800aad2:	f3bf 8f4f 	dsb	sy
 800aad6:	607b      	str	r3, [r7, #4]
}
 800aad8:	bf00      	nop
 800aada:	e7fe      	b.n	800aada <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aadc:	4b0e      	ldr	r3, [pc, #56]	; (800ab18 <vPortValidateInterruptPriority+0x78>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aae4:	4b0d      	ldr	r3, [pc, #52]	; (800ab1c <vPortValidateInterruptPriority+0x7c>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d90a      	bls.n	800ab02 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800aaec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf0:	f383 8811 	msr	BASEPRI, r3
 800aaf4:	f3bf 8f6f 	isb	sy
 800aaf8:	f3bf 8f4f 	dsb	sy
 800aafc:	603b      	str	r3, [r7, #0]
}
 800aafe:	bf00      	nop
 800ab00:	e7fe      	b.n	800ab00 <vPortValidateInterruptPriority+0x60>
	}
 800ab02:	bf00      	nop
 800ab04:	3714      	adds	r7, #20
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr
 800ab0e:	bf00      	nop
 800ab10:	e000e3f0 	.word	0xe000e3f0
 800ab14:	20004e6c 	.word	0x20004e6c
 800ab18:	e000ed0c 	.word	0xe000ed0c
 800ab1c:	20004e70 	.word	0x20004e70

0800ab20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b084      	sub	sp, #16
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d10a      	bne.n	800ab4a <xQueueGenericReset+0x2a>
	__asm volatile
 800ab34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab38:	f383 8811 	msr	BASEPRI, r3
 800ab3c:	f3bf 8f6f 	isb	sy
 800ab40:	f3bf 8f4f 	dsb	sy
 800ab44:	60bb      	str	r3, [r7, #8]
}
 800ab46:	bf00      	nop
 800ab48:	e7fe      	b.n	800ab48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ab4a:	f7ff fde3 	bl	800a714 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681a      	ldr	r2, [r3, #0]
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab56:	68f9      	ldr	r1, [r7, #12]
 800ab58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab5a:	fb01 f303 	mul.w	r3, r1, r3
 800ab5e:	441a      	add	r2, r3
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2200      	movs	r2, #0
 800ab68:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681a      	ldr	r2, [r3, #0]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab7a:	3b01      	subs	r3, #1
 800ab7c:	68f9      	ldr	r1, [r7, #12]
 800ab7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab80:	fb01 f303 	mul.w	r3, r1, r3
 800ab84:	441a      	add	r2, r3
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	22ff      	movs	r2, #255	; 0xff
 800ab8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	22ff      	movs	r2, #255	; 0xff
 800ab96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d114      	bne.n	800abca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d01a      	beq.n	800abde <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	3310      	adds	r3, #16
 800abac:	4618      	mov	r0, r3
 800abae:	f001 f9eb 	bl	800bf88 <xTaskRemoveFromEventList>
 800abb2:	4603      	mov	r3, r0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d012      	beq.n	800abde <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800abb8:	4b0c      	ldr	r3, [pc, #48]	; (800abec <xQueueGenericReset+0xcc>)
 800abba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abbe:	601a      	str	r2, [r3, #0]
 800abc0:	f3bf 8f4f 	dsb	sy
 800abc4:	f3bf 8f6f 	isb	sy
 800abc8:	e009      	b.n	800abde <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	3310      	adds	r3, #16
 800abce:	4618      	mov	r0, r3
 800abd0:	f7ff fbc2 	bl	800a358 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	3324      	adds	r3, #36	; 0x24
 800abd8:	4618      	mov	r0, r3
 800abda:	f7ff fbbd 	bl	800a358 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800abde:	f7ff fdc9 	bl	800a774 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800abe2:	2301      	movs	r3, #1
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3710      	adds	r7, #16
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}
 800abec:	e000ed04 	.word	0xe000ed04

0800abf0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b08e      	sub	sp, #56	; 0x38
 800abf4:	af02      	add	r7, sp, #8
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	607a      	str	r2, [r7, #4]
 800abfc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d10a      	bne.n	800ac1a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ac04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac08:	f383 8811 	msr	BASEPRI, r3
 800ac0c:	f3bf 8f6f 	isb	sy
 800ac10:	f3bf 8f4f 	dsb	sy
 800ac14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ac16:	bf00      	nop
 800ac18:	e7fe      	b.n	800ac18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d10a      	bne.n	800ac36 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ac20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac24:	f383 8811 	msr	BASEPRI, r3
 800ac28:	f3bf 8f6f 	isb	sy
 800ac2c:	f3bf 8f4f 	dsb	sy
 800ac30:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ac32:	bf00      	nop
 800ac34:	e7fe      	b.n	800ac34 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d002      	beq.n	800ac42 <xQueueGenericCreateStatic+0x52>
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d001      	beq.n	800ac46 <xQueueGenericCreateStatic+0x56>
 800ac42:	2301      	movs	r3, #1
 800ac44:	e000      	b.n	800ac48 <xQueueGenericCreateStatic+0x58>
 800ac46:	2300      	movs	r3, #0
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d10a      	bne.n	800ac62 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ac4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac50:	f383 8811 	msr	BASEPRI, r3
 800ac54:	f3bf 8f6f 	isb	sy
 800ac58:	f3bf 8f4f 	dsb	sy
 800ac5c:	623b      	str	r3, [r7, #32]
}
 800ac5e:	bf00      	nop
 800ac60:	e7fe      	b.n	800ac60 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d102      	bne.n	800ac6e <xQueueGenericCreateStatic+0x7e>
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d101      	bne.n	800ac72 <xQueueGenericCreateStatic+0x82>
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e000      	b.n	800ac74 <xQueueGenericCreateStatic+0x84>
 800ac72:	2300      	movs	r3, #0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d10a      	bne.n	800ac8e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ac78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7c:	f383 8811 	msr	BASEPRI, r3
 800ac80:	f3bf 8f6f 	isb	sy
 800ac84:	f3bf 8f4f 	dsb	sy
 800ac88:	61fb      	str	r3, [r7, #28]
}
 800ac8a:	bf00      	nop
 800ac8c:	e7fe      	b.n	800ac8c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ac8e:	2350      	movs	r3, #80	; 0x50
 800ac90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	2b50      	cmp	r3, #80	; 0x50
 800ac96:	d00a      	beq.n	800acae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ac98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac9c:	f383 8811 	msr	BASEPRI, r3
 800aca0:	f3bf 8f6f 	isb	sy
 800aca4:	f3bf 8f4f 	dsb	sy
 800aca8:	61bb      	str	r3, [r7, #24]
}
 800acaa:	bf00      	nop
 800acac:	e7fe      	b.n	800acac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800acae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800acb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d00d      	beq.n	800acd6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800acba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acbc:	2201      	movs	r2, #1
 800acbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800acc2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800acc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc8:	9300      	str	r3, [sp, #0]
 800acca:	4613      	mov	r3, r2
 800accc:	687a      	ldr	r2, [r7, #4]
 800acce:	68b9      	ldr	r1, [r7, #8]
 800acd0:	68f8      	ldr	r0, [r7, #12]
 800acd2:	f000 f805 	bl	800ace0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800acd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800acd8:	4618      	mov	r0, r3
 800acda:	3730      	adds	r7, #48	; 0x30
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}

0800ace0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b084      	sub	sp, #16
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	607a      	str	r2, [r7, #4]
 800acec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d103      	bne.n	800acfc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800acf4:	69bb      	ldr	r3, [r7, #24]
 800acf6:	69ba      	ldr	r2, [r7, #24]
 800acf8:	601a      	str	r2, [r3, #0]
 800acfa:	e002      	b.n	800ad02 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800acfc:	69bb      	ldr	r3, [r7, #24]
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ad02:	69bb      	ldr	r3, [r7, #24]
 800ad04:	68fa      	ldr	r2, [r7, #12]
 800ad06:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ad08:	69bb      	ldr	r3, [r7, #24]
 800ad0a:	68ba      	ldr	r2, [r7, #8]
 800ad0c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ad0e:	2101      	movs	r1, #1
 800ad10:	69b8      	ldr	r0, [r7, #24]
 800ad12:	f7ff ff05 	bl	800ab20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ad16:	69bb      	ldr	r3, [r7, #24]
 800ad18:	78fa      	ldrb	r2, [r7, #3]
 800ad1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ad1e:	bf00      	nop
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
	...

0800ad28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b08e      	sub	sp, #56	; 0x38
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	60b9      	str	r1, [r7, #8]
 800ad32:	607a      	str	r2, [r7, #4]
 800ad34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ad36:	2300      	movs	r3, #0
 800ad38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d10a      	bne.n	800ad5a <xQueueGenericSend+0x32>
	__asm volatile
 800ad44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad48:	f383 8811 	msr	BASEPRI, r3
 800ad4c:	f3bf 8f6f 	isb	sy
 800ad50:	f3bf 8f4f 	dsb	sy
 800ad54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad56:	bf00      	nop
 800ad58:	e7fe      	b.n	800ad58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d103      	bne.n	800ad68 <xQueueGenericSend+0x40>
 800ad60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d101      	bne.n	800ad6c <xQueueGenericSend+0x44>
 800ad68:	2301      	movs	r3, #1
 800ad6a:	e000      	b.n	800ad6e <xQueueGenericSend+0x46>
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d10a      	bne.n	800ad88 <xQueueGenericSend+0x60>
	__asm volatile
 800ad72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad76:	f383 8811 	msr	BASEPRI, r3
 800ad7a:	f3bf 8f6f 	isb	sy
 800ad7e:	f3bf 8f4f 	dsb	sy
 800ad82:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ad84:	bf00      	nop
 800ad86:	e7fe      	b.n	800ad86 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	2b02      	cmp	r3, #2
 800ad8c:	d103      	bne.n	800ad96 <xQueueGenericSend+0x6e>
 800ad8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d101      	bne.n	800ad9a <xQueueGenericSend+0x72>
 800ad96:	2301      	movs	r3, #1
 800ad98:	e000      	b.n	800ad9c <xQueueGenericSend+0x74>
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d10a      	bne.n	800adb6 <xQueueGenericSend+0x8e>
	__asm volatile
 800ada0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada4:	f383 8811 	msr	BASEPRI, r3
 800ada8:	f3bf 8f6f 	isb	sy
 800adac:	f3bf 8f4f 	dsb	sy
 800adb0:	623b      	str	r3, [r7, #32]
}
 800adb2:	bf00      	nop
 800adb4:	e7fe      	b.n	800adb4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800adb6:	f001 fb15 	bl	800c3e4 <xTaskGetSchedulerState>
 800adba:	4603      	mov	r3, r0
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d102      	bne.n	800adc6 <xQueueGenericSend+0x9e>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d101      	bne.n	800adca <xQueueGenericSend+0xa2>
 800adc6:	2301      	movs	r3, #1
 800adc8:	e000      	b.n	800adcc <xQueueGenericSend+0xa4>
 800adca:	2300      	movs	r3, #0
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d10a      	bne.n	800ade6 <xQueueGenericSend+0xbe>
	__asm volatile
 800add0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add4:	f383 8811 	msr	BASEPRI, r3
 800add8:	f3bf 8f6f 	isb	sy
 800addc:	f3bf 8f4f 	dsb	sy
 800ade0:	61fb      	str	r3, [r7, #28]
}
 800ade2:	bf00      	nop
 800ade4:	e7fe      	b.n	800ade4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ade6:	f7ff fc95 	bl	800a714 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800adea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d302      	bcc.n	800adfc <xQueueGenericSend+0xd4>
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	2b02      	cmp	r3, #2
 800adfa:	d129      	bne.n	800ae50 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800adfc:	683a      	ldr	r2, [r7, #0]
 800adfe:	68b9      	ldr	r1, [r7, #8]
 800ae00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae02:	f000 fa0b 	bl	800b21c <prvCopyDataToQueue>
 800ae06:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d010      	beq.n	800ae32 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae12:	3324      	adds	r3, #36	; 0x24
 800ae14:	4618      	mov	r0, r3
 800ae16:	f001 f8b7 	bl	800bf88 <xTaskRemoveFromEventList>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d013      	beq.n	800ae48 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ae20:	4b3f      	ldr	r3, [pc, #252]	; (800af20 <xQueueGenericSend+0x1f8>)
 800ae22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae26:	601a      	str	r2, [r3, #0]
 800ae28:	f3bf 8f4f 	dsb	sy
 800ae2c:	f3bf 8f6f 	isb	sy
 800ae30:	e00a      	b.n	800ae48 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ae32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d007      	beq.n	800ae48 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ae38:	4b39      	ldr	r3, [pc, #228]	; (800af20 <xQueueGenericSend+0x1f8>)
 800ae3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae3e:	601a      	str	r2, [r3, #0]
 800ae40:	f3bf 8f4f 	dsb	sy
 800ae44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ae48:	f7ff fc94 	bl	800a774 <vPortExitCritical>
				return pdPASS;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	e063      	b.n	800af18 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d103      	bne.n	800ae5e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae56:	f7ff fc8d 	bl	800a774 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	e05c      	b.n	800af18 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d106      	bne.n	800ae72 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae64:	f107 0314 	add.w	r3, r7, #20
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f001 f8f3 	bl	800c054 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae72:	f7ff fc7f 	bl	800a774 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae76:	f000 fdb7 	bl	800b9e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae7a:	f7ff fc4b 	bl	800a714 <vPortEnterCritical>
 800ae7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae84:	b25b      	sxtb	r3, r3
 800ae86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae8a:	d103      	bne.n	800ae94 <xQueueGenericSend+0x16c>
 800ae8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae9a:	b25b      	sxtb	r3, r3
 800ae9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aea0:	d103      	bne.n	800aeaa <xQueueGenericSend+0x182>
 800aea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea4:	2200      	movs	r2, #0
 800aea6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aeaa:	f7ff fc63 	bl	800a774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aeae:	1d3a      	adds	r2, r7, #4
 800aeb0:	f107 0314 	add.w	r3, r7, #20
 800aeb4:	4611      	mov	r1, r2
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f001 f8e2 	bl	800c080 <xTaskCheckForTimeOut>
 800aebc:	4603      	mov	r3, r0
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d124      	bne.n	800af0c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aec2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aec4:	f000 faa2 	bl	800b40c <prvIsQueueFull>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d018      	beq.n	800af00 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed0:	3310      	adds	r3, #16
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	4611      	mov	r1, r2
 800aed6:	4618      	mov	r0, r3
 800aed8:	f001 f806 	bl	800bee8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aedc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aede:	f000 fa2d 	bl	800b33c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aee2:	f000 fdc7 	bl	800ba74 <xTaskResumeAll>
 800aee6:	4603      	mov	r3, r0
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	f47f af7c 	bne.w	800ade6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800aeee:	4b0c      	ldr	r3, [pc, #48]	; (800af20 <xQueueGenericSend+0x1f8>)
 800aef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aef4:	601a      	str	r2, [r3, #0]
 800aef6:	f3bf 8f4f 	dsb	sy
 800aefa:	f3bf 8f6f 	isb	sy
 800aefe:	e772      	b.n	800ade6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800af00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af02:	f000 fa1b 	bl	800b33c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af06:	f000 fdb5 	bl	800ba74 <xTaskResumeAll>
 800af0a:	e76c      	b.n	800ade6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800af0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af0e:	f000 fa15 	bl	800b33c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af12:	f000 fdaf 	bl	800ba74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800af16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3738      	adds	r7, #56	; 0x38
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}
 800af20:	e000ed04 	.word	0xe000ed04

0800af24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b090      	sub	sp, #64	; 0x40
 800af28:	af00      	add	r7, sp, #0
 800af2a:	60f8      	str	r0, [r7, #12]
 800af2c:	60b9      	str	r1, [r7, #8]
 800af2e:	607a      	str	r2, [r7, #4]
 800af30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800af36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d10a      	bne.n	800af52 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800af3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af40:	f383 8811 	msr	BASEPRI, r3
 800af44:	f3bf 8f6f 	isb	sy
 800af48:	f3bf 8f4f 	dsb	sy
 800af4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800af4e:	bf00      	nop
 800af50:	e7fe      	b.n	800af50 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d103      	bne.n	800af60 <xQueueGenericSendFromISR+0x3c>
 800af58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d101      	bne.n	800af64 <xQueueGenericSendFromISR+0x40>
 800af60:	2301      	movs	r3, #1
 800af62:	e000      	b.n	800af66 <xQueueGenericSendFromISR+0x42>
 800af64:	2300      	movs	r3, #0
 800af66:	2b00      	cmp	r3, #0
 800af68:	d10a      	bne.n	800af80 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800af6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6e:	f383 8811 	msr	BASEPRI, r3
 800af72:	f3bf 8f6f 	isb	sy
 800af76:	f3bf 8f4f 	dsb	sy
 800af7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800af7c:	bf00      	nop
 800af7e:	e7fe      	b.n	800af7e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	2b02      	cmp	r3, #2
 800af84:	d103      	bne.n	800af8e <xQueueGenericSendFromISR+0x6a>
 800af86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af8a:	2b01      	cmp	r3, #1
 800af8c:	d101      	bne.n	800af92 <xQueueGenericSendFromISR+0x6e>
 800af8e:	2301      	movs	r3, #1
 800af90:	e000      	b.n	800af94 <xQueueGenericSendFromISR+0x70>
 800af92:	2300      	movs	r3, #0
 800af94:	2b00      	cmp	r3, #0
 800af96:	d10a      	bne.n	800afae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800af98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9c:	f383 8811 	msr	BASEPRI, r3
 800afa0:	f3bf 8f6f 	isb	sy
 800afa4:	f3bf 8f4f 	dsb	sy
 800afa8:	623b      	str	r3, [r7, #32]
}
 800afaa:	bf00      	nop
 800afac:	e7fe      	b.n	800afac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800afae:	f7ff fd77 	bl	800aaa0 <vPortValidateInterruptPriority>
	__asm volatile
 800afb2:	f3ef 8211 	mrs	r2, BASEPRI
 800afb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afba:	f383 8811 	msr	BASEPRI, r3
 800afbe:	f3bf 8f6f 	isb	sy
 800afc2:	f3bf 8f4f 	dsb	sy
 800afc6:	61fa      	str	r2, [r7, #28]
 800afc8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800afca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800afcc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800afce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d302      	bcc.n	800afe0 <xQueueGenericSendFromISR+0xbc>
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	2b02      	cmp	r3, #2
 800afde:	d12f      	bne.n	800b040 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800afe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800afea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aff0:	683a      	ldr	r2, [r7, #0]
 800aff2:	68b9      	ldr	r1, [r7, #8]
 800aff4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aff6:	f000 f911 	bl	800b21c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800affa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800affe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b002:	d112      	bne.n	800b02a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d016      	beq.n	800b03a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00e:	3324      	adds	r3, #36	; 0x24
 800b010:	4618      	mov	r0, r3
 800b012:	f000 ffb9 	bl	800bf88 <xTaskRemoveFromEventList>
 800b016:	4603      	mov	r3, r0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d00e      	beq.n	800b03a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d00b      	beq.n	800b03a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2201      	movs	r2, #1
 800b026:	601a      	str	r2, [r3, #0]
 800b028:	e007      	b.n	800b03a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b02a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b02e:	3301      	adds	r3, #1
 800b030:	b2db      	uxtb	r3, r3
 800b032:	b25a      	sxtb	r2, r3
 800b034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b036:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b03a:	2301      	movs	r3, #1
 800b03c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b03e:	e001      	b.n	800b044 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b040:	2300      	movs	r3, #0
 800b042:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b046:	617b      	str	r3, [r7, #20]
	__asm volatile
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	f383 8811 	msr	BASEPRI, r3
}
 800b04e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b052:	4618      	mov	r0, r3
 800b054:	3740      	adds	r7, #64	; 0x40
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
	...

0800b05c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b08c      	sub	sp, #48	; 0x30
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b068:	2300      	movs	r3, #0
 800b06a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b072:	2b00      	cmp	r3, #0
 800b074:	d10a      	bne.n	800b08c <xQueueReceive+0x30>
	__asm volatile
 800b076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b07a:	f383 8811 	msr	BASEPRI, r3
 800b07e:	f3bf 8f6f 	isb	sy
 800b082:	f3bf 8f4f 	dsb	sy
 800b086:	623b      	str	r3, [r7, #32]
}
 800b088:	bf00      	nop
 800b08a:	e7fe      	b.n	800b08a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d103      	bne.n	800b09a <xQueueReceive+0x3e>
 800b092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b096:	2b00      	cmp	r3, #0
 800b098:	d101      	bne.n	800b09e <xQueueReceive+0x42>
 800b09a:	2301      	movs	r3, #1
 800b09c:	e000      	b.n	800b0a0 <xQueueReceive+0x44>
 800b09e:	2300      	movs	r3, #0
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d10a      	bne.n	800b0ba <xQueueReceive+0x5e>
	__asm volatile
 800b0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a8:	f383 8811 	msr	BASEPRI, r3
 800b0ac:	f3bf 8f6f 	isb	sy
 800b0b0:	f3bf 8f4f 	dsb	sy
 800b0b4:	61fb      	str	r3, [r7, #28]
}
 800b0b6:	bf00      	nop
 800b0b8:	e7fe      	b.n	800b0b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b0ba:	f001 f993 	bl	800c3e4 <xTaskGetSchedulerState>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d102      	bne.n	800b0ca <xQueueReceive+0x6e>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d101      	bne.n	800b0ce <xQueueReceive+0x72>
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	e000      	b.n	800b0d0 <xQueueReceive+0x74>
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d10a      	bne.n	800b0ea <xQueueReceive+0x8e>
	__asm volatile
 800b0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d8:	f383 8811 	msr	BASEPRI, r3
 800b0dc:	f3bf 8f6f 	isb	sy
 800b0e0:	f3bf 8f4f 	dsb	sy
 800b0e4:	61bb      	str	r3, [r7, #24]
}
 800b0e6:	bf00      	nop
 800b0e8:	e7fe      	b.n	800b0e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b0ea:	f7ff fb13 	bl	800a714 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d01f      	beq.n	800b13a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b0fa:	68b9      	ldr	r1, [r7, #8]
 800b0fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0fe:	f000 f8f7 	bl	800b2f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b104:	1e5a      	subs	r2, r3, #1
 800b106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b108:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b10c:	691b      	ldr	r3, [r3, #16]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d00f      	beq.n	800b132 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b114:	3310      	adds	r3, #16
 800b116:	4618      	mov	r0, r3
 800b118:	f000 ff36 	bl	800bf88 <xTaskRemoveFromEventList>
 800b11c:	4603      	mov	r3, r0
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d007      	beq.n	800b132 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b122:	4b3d      	ldr	r3, [pc, #244]	; (800b218 <xQueueReceive+0x1bc>)
 800b124:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b128:	601a      	str	r2, [r3, #0]
 800b12a:	f3bf 8f4f 	dsb	sy
 800b12e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b132:	f7ff fb1f 	bl	800a774 <vPortExitCritical>
				return pdPASS;
 800b136:	2301      	movs	r3, #1
 800b138:	e069      	b.n	800b20e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d103      	bne.n	800b148 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b140:	f7ff fb18 	bl	800a774 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b144:	2300      	movs	r3, #0
 800b146:	e062      	b.n	800b20e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d106      	bne.n	800b15c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b14e:	f107 0310 	add.w	r3, r7, #16
 800b152:	4618      	mov	r0, r3
 800b154:	f000 ff7e 	bl	800c054 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b158:	2301      	movs	r3, #1
 800b15a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b15c:	f7ff fb0a 	bl	800a774 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b160:	f000 fc42 	bl	800b9e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b164:	f7ff fad6 	bl	800a714 <vPortEnterCritical>
 800b168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b16a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b16e:	b25b      	sxtb	r3, r3
 800b170:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b174:	d103      	bne.n	800b17e <xQueueReceive+0x122>
 800b176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b178:	2200      	movs	r2, #0
 800b17a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b180:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b184:	b25b      	sxtb	r3, r3
 800b186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b18a:	d103      	bne.n	800b194 <xQueueReceive+0x138>
 800b18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b18e:	2200      	movs	r2, #0
 800b190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b194:	f7ff faee 	bl	800a774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b198:	1d3a      	adds	r2, r7, #4
 800b19a:	f107 0310 	add.w	r3, r7, #16
 800b19e:	4611      	mov	r1, r2
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f000 ff6d 	bl	800c080 <xTaskCheckForTimeOut>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d123      	bne.n	800b1f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b1ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1ae:	f000 f917 	bl	800b3e0 <prvIsQueueEmpty>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d017      	beq.n	800b1e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ba:	3324      	adds	r3, #36	; 0x24
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	4611      	mov	r1, r2
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f000 fe91 	bl	800bee8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b1c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1c8:	f000 f8b8 	bl	800b33c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b1cc:	f000 fc52 	bl	800ba74 <xTaskResumeAll>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d189      	bne.n	800b0ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b1d6:	4b10      	ldr	r3, [pc, #64]	; (800b218 <xQueueReceive+0x1bc>)
 800b1d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1dc:	601a      	str	r2, [r3, #0]
 800b1de:	f3bf 8f4f 	dsb	sy
 800b1e2:	f3bf 8f6f 	isb	sy
 800b1e6:	e780      	b.n	800b0ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b1e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1ea:	f000 f8a7 	bl	800b33c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b1ee:	f000 fc41 	bl	800ba74 <xTaskResumeAll>
 800b1f2:	e77a      	b.n	800b0ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b1f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1f6:	f000 f8a1 	bl	800b33c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b1fa:	f000 fc3b 	bl	800ba74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b1fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b200:	f000 f8ee 	bl	800b3e0 <prvIsQueueEmpty>
 800b204:	4603      	mov	r3, r0
 800b206:	2b00      	cmp	r3, #0
 800b208:	f43f af6f 	beq.w	800b0ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b20c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3730      	adds	r7, #48	; 0x30
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
 800b216:	bf00      	nop
 800b218:	e000ed04 	.word	0xe000ed04

0800b21c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b086      	sub	sp, #24
 800b220:	af00      	add	r7, sp, #0
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	60b9      	str	r1, [r7, #8]
 800b226:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b228:	2300      	movs	r3, #0
 800b22a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b230:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b236:	2b00      	cmp	r3, #0
 800b238:	d10d      	bne.n	800b256 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d14d      	bne.n	800b2de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	689b      	ldr	r3, [r3, #8]
 800b246:	4618      	mov	r0, r3
 800b248:	f001 f8ea 	bl	800c420 <xTaskPriorityDisinherit>
 800b24c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2200      	movs	r2, #0
 800b252:	609a      	str	r2, [r3, #8]
 800b254:	e043      	b.n	800b2de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d119      	bne.n	800b290 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	6858      	ldr	r0, [r3, #4]
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b264:	461a      	mov	r2, r3
 800b266:	68b9      	ldr	r1, [r7, #8]
 800b268:	f001 fdd6 	bl	800ce18 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	685a      	ldr	r2, [r3, #4]
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b274:	441a      	add	r2, r3
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	685a      	ldr	r2, [r3, #4]
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	689b      	ldr	r3, [r3, #8]
 800b282:	429a      	cmp	r2, r3
 800b284:	d32b      	bcc.n	800b2de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681a      	ldr	r2, [r3, #0]
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	605a      	str	r2, [r3, #4]
 800b28e:	e026      	b.n	800b2de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	68d8      	ldr	r0, [r3, #12]
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b298:	461a      	mov	r2, r3
 800b29a:	68b9      	ldr	r1, [r7, #8]
 800b29c:	f001 fdbc 	bl	800ce18 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	68da      	ldr	r2, [r3, #12]
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2a8:	425b      	negs	r3, r3
 800b2aa:	441a      	add	r2, r3
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	68da      	ldr	r2, [r3, #12]
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d207      	bcs.n	800b2cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	689a      	ldr	r2, [r3, #8]
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2c4:	425b      	negs	r3, r3
 800b2c6:	441a      	add	r2, r3
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2b02      	cmp	r3, #2
 800b2d0:	d105      	bne.n	800b2de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d002      	beq.n	800b2de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	3b01      	subs	r3, #1
 800b2dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	1c5a      	adds	r2, r3, #1
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b2e6:	697b      	ldr	r3, [r7, #20]
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3718      	adds	r7, #24
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}

0800b2f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d018      	beq.n	800b334 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	68da      	ldr	r2, [r3, #12]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b30a:	441a      	add	r2, r3
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	68da      	ldr	r2, [r3, #12]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	429a      	cmp	r2, r3
 800b31a:	d303      	bcc.n	800b324 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681a      	ldr	r2, [r3, #0]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	68d9      	ldr	r1, [r3, #12]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b32c:	461a      	mov	r2, r3
 800b32e:	6838      	ldr	r0, [r7, #0]
 800b330:	f001 fd72 	bl	800ce18 <memcpy>
	}
}
 800b334:	bf00      	nop
 800b336:	3708      	adds	r7, #8
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}

0800b33c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b084      	sub	sp, #16
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b344:	f7ff f9e6 	bl	800a714 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b34e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b350:	e011      	b.n	800b376 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b356:	2b00      	cmp	r3, #0
 800b358:	d012      	beq.n	800b380 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	3324      	adds	r3, #36	; 0x24
 800b35e:	4618      	mov	r0, r3
 800b360:	f000 fe12 	bl	800bf88 <xTaskRemoveFromEventList>
 800b364:	4603      	mov	r3, r0
 800b366:	2b00      	cmp	r3, #0
 800b368:	d001      	beq.n	800b36e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b36a:	f000 fefb 	bl	800c164 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b36e:	7bfb      	ldrb	r3, [r7, #15]
 800b370:	3b01      	subs	r3, #1
 800b372:	b2db      	uxtb	r3, r3
 800b374:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	dce9      	bgt.n	800b352 <prvUnlockQueue+0x16>
 800b37e:	e000      	b.n	800b382 <prvUnlockQueue+0x46>
					break;
 800b380:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	22ff      	movs	r2, #255	; 0xff
 800b386:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b38a:	f7ff f9f3 	bl	800a774 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b38e:	f7ff f9c1 	bl	800a714 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b398:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b39a:	e011      	b.n	800b3c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	691b      	ldr	r3, [r3, #16]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d012      	beq.n	800b3ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	3310      	adds	r3, #16
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f000 fded 	bl	800bf88 <xTaskRemoveFromEventList>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d001      	beq.n	800b3b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b3b4:	f000 fed6 	bl	800c164 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b3b8:	7bbb      	ldrb	r3, [r7, #14]
 800b3ba:	3b01      	subs	r3, #1
 800b3bc:	b2db      	uxtb	r3, r3
 800b3be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b3c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	dce9      	bgt.n	800b39c <prvUnlockQueue+0x60>
 800b3c8:	e000      	b.n	800b3cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b3ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	22ff      	movs	r2, #255	; 0xff
 800b3d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b3d4:	f7ff f9ce 	bl	800a774 <vPortExitCritical>
}
 800b3d8:	bf00      	nop
 800b3da:	3710      	adds	r7, #16
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b3e8:	f7ff f994 	bl	800a714 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d102      	bne.n	800b3fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	60fb      	str	r3, [r7, #12]
 800b3f8:	e001      	b.n	800b3fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b3fe:	f7ff f9b9 	bl	800a774 <vPortExitCritical>

	return xReturn;
 800b402:	68fb      	ldr	r3, [r7, #12]
}
 800b404:	4618      	mov	r0, r3
 800b406:	3710      	adds	r7, #16
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b414:	f7ff f97e 	bl	800a714 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b420:	429a      	cmp	r2, r3
 800b422:	d102      	bne.n	800b42a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b424:	2301      	movs	r3, #1
 800b426:	60fb      	str	r3, [r7, #12]
 800b428:	e001      	b.n	800b42e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b42a:	2300      	movs	r3, #0
 800b42c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b42e:	f7ff f9a1 	bl	800a774 <vPortExitCritical>

	return xReturn;
 800b432:	68fb      	ldr	r3, [r7, #12]
}
 800b434:	4618      	mov	r0, r3
 800b436:	3710      	adds	r7, #16
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}

0800b43c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b43c:	b480      	push	{r7}
 800b43e:	b085      	sub	sp, #20
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b446:	2300      	movs	r3, #0
 800b448:	60fb      	str	r3, [r7, #12]
 800b44a:	e014      	b.n	800b476 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b44c:	4a0f      	ldr	r2, [pc, #60]	; (800b48c <vQueueAddToRegistry+0x50>)
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d10b      	bne.n	800b470 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b458:	490c      	ldr	r1, [pc, #48]	; (800b48c <vQueueAddToRegistry+0x50>)
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	683a      	ldr	r2, [r7, #0]
 800b45e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b462:	4a0a      	ldr	r2, [pc, #40]	; (800b48c <vQueueAddToRegistry+0x50>)
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	00db      	lsls	r3, r3, #3
 800b468:	4413      	add	r3, r2
 800b46a:	687a      	ldr	r2, [r7, #4]
 800b46c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b46e:	e006      	b.n	800b47e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	3301      	adds	r3, #1
 800b474:	60fb      	str	r3, [r7, #12]
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2b07      	cmp	r3, #7
 800b47a:	d9e7      	bls.n	800b44c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b47c:	bf00      	nop
 800b47e:	bf00      	nop
 800b480:	3714      	adds	r7, #20
 800b482:	46bd      	mov	sp, r7
 800b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b488:	4770      	bx	lr
 800b48a:	bf00      	nop
 800b48c:	20004e74 	.word	0x20004e74

0800b490 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b490:	b580      	push	{r7, lr}
 800b492:	b086      	sub	sp, #24
 800b494:	af00      	add	r7, sp, #0
 800b496:	60f8      	str	r0, [r7, #12]
 800b498:	60b9      	str	r1, [r7, #8]
 800b49a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b4a0:	f7ff f938 	bl	800a714 <vPortEnterCritical>
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b4aa:	b25b      	sxtb	r3, r3
 800b4ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4b0:	d103      	bne.n	800b4ba <vQueueWaitForMessageRestricted+0x2a>
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b4c0:	b25b      	sxtb	r3, r3
 800b4c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4c6:	d103      	bne.n	800b4d0 <vQueueWaitForMessageRestricted+0x40>
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b4d0:	f7ff f950 	bl	800a774 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d106      	bne.n	800b4ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	3324      	adds	r3, #36	; 0x24
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	68b9      	ldr	r1, [r7, #8]
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f000 fd23 	bl	800bf30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b4ea:	6978      	ldr	r0, [r7, #20]
 800b4ec:	f7ff ff26 	bl	800b33c <prvUnlockQueue>
	}
 800b4f0:	bf00      	nop
 800b4f2:	3718      	adds	r7, #24
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b08e      	sub	sp, #56	; 0x38
 800b4fc:	af04      	add	r7, sp, #16
 800b4fe:	60f8      	str	r0, [r7, #12]
 800b500:	60b9      	str	r1, [r7, #8]
 800b502:	607a      	str	r2, [r7, #4]
 800b504:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d10a      	bne.n	800b522 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b510:	f383 8811 	msr	BASEPRI, r3
 800b514:	f3bf 8f6f 	isb	sy
 800b518:	f3bf 8f4f 	dsb	sy
 800b51c:	623b      	str	r3, [r7, #32]
}
 800b51e:	bf00      	nop
 800b520:	e7fe      	b.n	800b520 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b524:	2b00      	cmp	r3, #0
 800b526:	d10a      	bne.n	800b53e <xTaskCreateStatic+0x46>
	__asm volatile
 800b528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b52c:	f383 8811 	msr	BASEPRI, r3
 800b530:	f3bf 8f6f 	isb	sy
 800b534:	f3bf 8f4f 	dsb	sy
 800b538:	61fb      	str	r3, [r7, #28]
}
 800b53a:	bf00      	nop
 800b53c:	e7fe      	b.n	800b53c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b53e:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 800b542:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 800b54a:	d00a      	beq.n	800b562 <xTaskCreateStatic+0x6a>
	__asm volatile
 800b54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b550:	f383 8811 	msr	BASEPRI, r3
 800b554:	f3bf 8f6f 	isb	sy
 800b558:	f3bf 8f4f 	dsb	sy
 800b55c:	61bb      	str	r3, [r7, #24]
}
 800b55e:	bf00      	nop
 800b560:	e7fe      	b.n	800b560 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b562:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b566:	2b00      	cmp	r3, #0
 800b568:	d01e      	beq.n	800b5a8 <xTaskCreateStatic+0xb0>
 800b56a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d01b      	beq.n	800b5a8 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b572:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b576:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b578:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b57c:	2202      	movs	r2, #2
 800b57e:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b582:	2300      	movs	r3, #0
 800b584:	9303      	str	r3, [sp, #12]
 800b586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b588:	9302      	str	r3, [sp, #8]
 800b58a:	f107 0314 	add.w	r3, r7, #20
 800b58e:	9301      	str	r3, [sp, #4]
 800b590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b592:	9300      	str	r3, [sp, #0]
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	68b9      	ldr	r1, [r7, #8]
 800b59a:	68f8      	ldr	r0, [r7, #12]
 800b59c:	f000 f852 	bl	800b644 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b5a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b5a2:	f000 f90b 	bl	800b7bc <prvAddNewTaskToReadyList>
 800b5a6:	e001      	b.n	800b5ac <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b5ac:	697b      	ldr	r3, [r7, #20]
	}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3728      	adds	r7, #40	; 0x28
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}

0800b5b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b5b6:	b580      	push	{r7, lr}
 800b5b8:	b08c      	sub	sp, #48	; 0x30
 800b5ba:	af04      	add	r7, sp, #16
 800b5bc:	60f8      	str	r0, [r7, #12]
 800b5be:	60b9      	str	r1, [r7, #8]
 800b5c0:	603b      	str	r3, [r7, #0]
 800b5c2:	4613      	mov	r3, r2
 800b5c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b5c6:	88fb      	ldrh	r3, [r7, #6]
 800b5c8:	009b      	lsls	r3, r3, #2
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7fe fcd6 	bl	8009f7c <pvPortMalloc>
 800b5d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d00f      	beq.n	800b5f8 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b5d8:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 800b5dc:	f7fe fcce 	bl	8009f7c <pvPortMalloc>
 800b5e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b5e2:	69fb      	ldr	r3, [r7, #28]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d003      	beq.n	800b5f0 <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b5e8:	69fb      	ldr	r3, [r7, #28]
 800b5ea:	697a      	ldr	r2, [r7, #20]
 800b5ec:	631a      	str	r2, [r3, #48]	; 0x30
 800b5ee:	e005      	b.n	800b5fc <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b5f0:	6978      	ldr	r0, [r7, #20]
 800b5f2:	f7fe fd93 	bl	800a11c <vPortFree>
 800b5f6:	e001      	b.n	800b5fc <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b5fc:	69fb      	ldr	r3, [r7, #28]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d017      	beq.n	800b632 <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b602:	69fb      	ldr	r3, [r7, #28]
 800b604:	2200      	movs	r2, #0
 800b606:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b60a:	88fa      	ldrh	r2, [r7, #6]
 800b60c:	2300      	movs	r3, #0
 800b60e:	9303      	str	r3, [sp, #12]
 800b610:	69fb      	ldr	r3, [r7, #28]
 800b612:	9302      	str	r3, [sp, #8]
 800b614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b616:	9301      	str	r3, [sp, #4]
 800b618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b61a:	9300      	str	r3, [sp, #0]
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	68b9      	ldr	r1, [r7, #8]
 800b620:	68f8      	ldr	r0, [r7, #12]
 800b622:	f000 f80f 	bl	800b644 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b626:	69f8      	ldr	r0, [r7, #28]
 800b628:	f000 f8c8 	bl	800b7bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b62c:	2301      	movs	r3, #1
 800b62e:	61bb      	str	r3, [r7, #24]
 800b630:	e002      	b.n	800b638 <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b632:	f04f 33ff 	mov.w	r3, #4294967295
 800b636:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b638:	69bb      	ldr	r3, [r7, #24]
	}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3720      	adds	r7, #32
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
	...

0800b644 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b088      	sub	sp, #32
 800b648:	af00      	add	r7, sp, #0
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	60b9      	str	r1, [r7, #8]
 800b64e:	607a      	str	r2, [r7, #4]
 800b650:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b654:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	009b      	lsls	r3, r3, #2
 800b65a:	461a      	mov	r2, r3
 800b65c:	21a5      	movs	r1, #165	; 0xa5
 800b65e:	f001 fbe9 	bl	800ce34 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b66c:	3b01      	subs	r3, #1
 800b66e:	009b      	lsls	r3, r3, #2
 800b670:	4413      	add	r3, r2
 800b672:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b674:	69bb      	ldr	r3, [r7, #24]
 800b676:	f023 0307 	bic.w	r3, r3, #7
 800b67a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b67c:	69bb      	ldr	r3, [r7, #24]
 800b67e:	f003 0307 	and.w	r3, r3, #7
 800b682:	2b00      	cmp	r3, #0
 800b684:	d00a      	beq.n	800b69c <prvInitialiseNewTask+0x58>
	__asm volatile
 800b686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b68a:	f383 8811 	msr	BASEPRI, r3
 800b68e:	f3bf 8f6f 	isb	sy
 800b692:	f3bf 8f4f 	dsb	sy
 800b696:	617b      	str	r3, [r7, #20]
}
 800b698:	bf00      	nop
 800b69a:	e7fe      	b.n	800b69a <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800b69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69e:	69ba      	ldr	r2, [r7, #24]
 800b6a0:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d01f      	beq.n	800b6ea <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	61fb      	str	r3, [r7, #28]
 800b6ae:	e012      	b.n	800b6d6 <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b6b0:	68ba      	ldr	r2, [r7, #8]
 800b6b2:	69fb      	ldr	r3, [r7, #28]
 800b6b4:	4413      	add	r3, r2
 800b6b6:	7819      	ldrb	r1, [r3, #0]
 800b6b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6ba:	69fb      	ldr	r3, [r7, #28]
 800b6bc:	4413      	add	r3, r2
 800b6be:	3334      	adds	r3, #52	; 0x34
 800b6c0:	460a      	mov	r2, r1
 800b6c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b6c4:	68ba      	ldr	r2, [r7, #8]
 800b6c6:	69fb      	ldr	r3, [r7, #28]
 800b6c8:	4413      	add	r3, r2
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d006      	beq.n	800b6de <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b6d0:	69fb      	ldr	r3, [r7, #28]
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	61fb      	str	r3, [r7, #28]
 800b6d6:	69fb      	ldr	r3, [r7, #28]
 800b6d8:	2bfe      	cmp	r3, #254	; 0xfe
 800b6da:	d9e9      	bls.n	800b6b0 <prvInitialiseNewTask+0x6c>
 800b6dc:	e000      	b.n	800b6e0 <prvInitialiseNewTask+0x9c>
			{
				break;
 800b6de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 800b6e8:	e003      	b.n	800b6f2 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6f4:	2b37      	cmp	r3, #55	; 0x37
 800b6f6:	d901      	bls.n	800b6fc <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b6f8:	2337      	movs	r3, #55	; 0x37
 800b6fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b700:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b704:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b706:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		pxNewTCB->uxMutexesHeld = 0;
 800b70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b70c:	2200      	movs	r2, #0
 800b70e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b714:	3304      	adds	r3, #4
 800b716:	4618      	mov	r0, r3
 800b718:	f7fe fe3e 	bl	800a398 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71e:	3318      	adds	r3, #24
 800b720:	4618      	mov	r0, r3
 800b722:	f7fe fe39 	bl	800a398 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b72a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b72e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b734:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b73a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800b73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b73e:	2200      	movs	r2, #0
 800b740:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800b744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b746:	2200      	movs	r2, #0
 800b748:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74e:	2200      	movs	r2, #0
 800b750:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b756:	2200      	movs	r2, #0
 800b758:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b762:	2260      	movs	r2, #96	; 0x60
 800b764:	2100      	movs	r1, #0
 800b766:	4618      	mov	r0, r3
 800b768:	f001 fb64 	bl	800ce34 <memset>
 800b76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b76e:	4a10      	ldr	r2, [pc, #64]	; (800b7b0 <prvInitialiseNewTask+0x16c>)
 800b770:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 800b774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b776:	4a0f      	ldr	r2, [pc, #60]	; (800b7b4 <prvInitialiseNewTask+0x170>)
 800b778:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800b77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77e:	4a0e      	ldr	r2, [pc, #56]	; (800b7b8 <prvInitialiseNewTask+0x174>)
 800b780:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 800b784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b786:	2200      	movs	r2, #0
 800b788:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b78c:	683a      	ldr	r2, [r7, #0]
 800b78e:	68f9      	ldr	r1, [r7, #12]
 800b790:	69b8      	ldr	r0, [r7, #24]
 800b792:	f7fe fe95 	bl	800a4c0 <pxPortInitialiseStack>
 800b796:	4602      	mov	r2, r0
 800b798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b79a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d002      	beq.n	800b7a8 <prvInitialiseNewTask+0x164>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7a8:	bf00      	nop
 800b7aa:	3720      	adds	r7, #32
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}
 800b7b0:	0800d720 	.word	0x0800d720
 800b7b4:	0800d740 	.word	0x0800d740
 800b7b8:	0800d700 	.word	0x0800d700

0800b7bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b082      	sub	sp, #8
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b7c4:	f7fe ffa6 	bl	800a714 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b7c8:	4b2d      	ldr	r3, [pc, #180]	; (800b880 <prvAddNewTaskToReadyList+0xc4>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	4a2c      	ldr	r2, [pc, #176]	; (800b880 <prvAddNewTaskToReadyList+0xc4>)
 800b7d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b7d2:	4b2c      	ldr	r3, [pc, #176]	; (800b884 <prvAddNewTaskToReadyList+0xc8>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d109      	bne.n	800b7ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b7da:	4a2a      	ldr	r2, [pc, #168]	; (800b884 <prvAddNewTaskToReadyList+0xc8>)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b7e0:	4b27      	ldr	r3, [pc, #156]	; (800b880 <prvAddNewTaskToReadyList+0xc4>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	d110      	bne.n	800b80a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b7e8:	f000 fd38 	bl	800c25c <prvInitialiseTaskLists>
 800b7ec:	e00d      	b.n	800b80a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b7ee:	4b26      	ldr	r3, [pc, #152]	; (800b888 <prvAddNewTaskToReadyList+0xcc>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d109      	bne.n	800b80a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b7f6:	4b23      	ldr	r3, [pc, #140]	; (800b884 <prvAddNewTaskToReadyList+0xc8>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b800:	429a      	cmp	r2, r3
 800b802:	d802      	bhi.n	800b80a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b804:	4a1f      	ldr	r2, [pc, #124]	; (800b884 <prvAddNewTaskToReadyList+0xc8>)
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b80a:	4b20      	ldr	r3, [pc, #128]	; (800b88c <prvAddNewTaskToReadyList+0xd0>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	3301      	adds	r3, #1
 800b810:	4a1e      	ldr	r2, [pc, #120]	; (800b88c <prvAddNewTaskToReadyList+0xd0>)
 800b812:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b814:	4b1d      	ldr	r3, [pc, #116]	; (800b88c <prvAddNewTaskToReadyList+0xd0>)
 800b816:	681a      	ldr	r2, [r3, #0]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b822:	4b1b      	ldr	r3, [pc, #108]	; (800b890 <prvAddNewTaskToReadyList+0xd4>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	429a      	cmp	r2, r3
 800b828:	d903      	bls.n	800b832 <prvAddNewTaskToReadyList+0x76>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b82e:	4a18      	ldr	r2, [pc, #96]	; (800b890 <prvAddNewTaskToReadyList+0xd4>)
 800b830:	6013      	str	r3, [r2, #0]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b836:	4613      	mov	r3, r2
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	4413      	add	r3, r2
 800b83c:	009b      	lsls	r3, r3, #2
 800b83e:	4a15      	ldr	r2, [pc, #84]	; (800b894 <prvAddNewTaskToReadyList+0xd8>)
 800b840:	441a      	add	r2, r3
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	3304      	adds	r3, #4
 800b846:	4619      	mov	r1, r3
 800b848:	4610      	mov	r0, r2
 800b84a:	f7fe fdb2 	bl	800a3b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b84e:	f7fe ff91 	bl	800a774 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b852:	4b0d      	ldr	r3, [pc, #52]	; (800b888 <prvAddNewTaskToReadyList+0xcc>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d00e      	beq.n	800b878 <prvAddNewTaskToReadyList+0xbc>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b85a:	4b0a      	ldr	r3, [pc, #40]	; (800b884 <prvAddNewTaskToReadyList+0xc8>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b864:	429a      	cmp	r2, r3
 800b866:	d207      	bcs.n	800b878 <prvAddNewTaskToReadyList+0xbc>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b868:	4b0b      	ldr	r3, [pc, #44]	; (800b898 <prvAddNewTaskToReadyList+0xdc>)
 800b86a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b86e:	601a      	str	r2, [r3, #0]
 800b870:	f3bf 8f4f 	dsb	sy
 800b874:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b878:	bf00      	nop
 800b87a:	3708      	adds	r7, #8
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}
 800b880:	2000538c 	.word	0x2000538c
 800b884:	20004eb4 	.word	0x20004eb4
 800b888:	20005398 	.word	0x20005398
 800b88c:	200053a8 	.word	0x200053a8
 800b890:	20005394 	.word	0x20005394
 800b894:	20004eb8 	.word	0x20004eb8
 800b898:	e000ed04 	.word	0xe000ed04

0800b89c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d017      	beq.n	800b8de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b8ae:	4b13      	ldr	r3, [pc, #76]	; (800b8fc <vTaskDelay+0x60>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d00a      	beq.n	800b8cc <vTaskDelay+0x30>
	__asm volatile
 800b8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ba:	f383 8811 	msr	BASEPRI, r3
 800b8be:	f3bf 8f6f 	isb	sy
 800b8c2:	f3bf 8f4f 	dsb	sy
 800b8c6:	60bb      	str	r3, [r7, #8]
}
 800b8c8:	bf00      	nop
 800b8ca:	e7fe      	b.n	800b8ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b8cc:	f000 f88c 	bl	800b9e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b8d0:	2100      	movs	r1, #0
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 fe18 	bl	800c508 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b8d8:	f000 f8cc 	bl	800ba74 <xTaskResumeAll>
 800b8dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d107      	bne.n	800b8f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b8e4:	4b06      	ldr	r3, [pc, #24]	; (800b900 <vTaskDelay+0x64>)
 800b8e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8ea:	601a      	str	r2, [r3, #0]
 800b8ec:	f3bf 8f4f 	dsb	sy
 800b8f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b8f4:	bf00      	nop
 800b8f6:	3710      	adds	r7, #16
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}
 800b8fc:	200053b4 	.word	0x200053b4
 800b900:	e000ed04 	.word	0xe000ed04

0800b904 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b08a      	sub	sp, #40	; 0x28
 800b908:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b90a:	2300      	movs	r3, #0
 800b90c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b90e:	2300      	movs	r3, #0
 800b910:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b912:	463a      	mov	r2, r7
 800b914:	1d39      	adds	r1, r7, #4
 800b916:	f107 0308 	add.w	r3, r7, #8
 800b91a:	4618      	mov	r0, r3
 800b91c:	f7fe fafa 	bl	8009f14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b920:	6839      	ldr	r1, [r7, #0]
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	68ba      	ldr	r2, [r7, #8]
 800b926:	9202      	str	r2, [sp, #8]
 800b928:	9301      	str	r3, [sp, #4]
 800b92a:	2300      	movs	r3, #0
 800b92c:	9300      	str	r3, [sp, #0]
 800b92e:	2300      	movs	r3, #0
 800b930:	460a      	mov	r2, r1
 800b932:	4925      	ldr	r1, [pc, #148]	; (800b9c8 <vTaskStartScheduler+0xc4>)
 800b934:	4825      	ldr	r0, [pc, #148]	; (800b9cc <vTaskStartScheduler+0xc8>)
 800b936:	f7ff fddf 	bl	800b4f8 <xTaskCreateStatic>
 800b93a:	4603      	mov	r3, r0
 800b93c:	4a24      	ldr	r2, [pc, #144]	; (800b9d0 <vTaskStartScheduler+0xcc>)
 800b93e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b940:	4b23      	ldr	r3, [pc, #140]	; (800b9d0 <vTaskStartScheduler+0xcc>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d002      	beq.n	800b94e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b948:	2301      	movs	r3, #1
 800b94a:	617b      	str	r3, [r7, #20]
 800b94c:	e001      	b.n	800b952 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b94e:	2300      	movs	r3, #0
 800b950:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	2b01      	cmp	r3, #1
 800b956:	d102      	bne.n	800b95e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b958:	f000 fe30 	bl	800c5bc <xTimerCreateTimerTask>
 800b95c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	2b01      	cmp	r3, #1
 800b962:	d11e      	bne.n	800b9a2 <vTaskStartScheduler+0x9e>
	__asm volatile
 800b964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b968:	f383 8811 	msr	BASEPRI, r3
 800b96c:	f3bf 8f6f 	isb	sy
 800b970:	f3bf 8f4f 	dsb	sy
 800b974:	613b      	str	r3, [r7, #16]
}
 800b976:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b978:	4b16      	ldr	r3, [pc, #88]	; (800b9d4 <vTaskStartScheduler+0xd0>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b980:	4a15      	ldr	r2, [pc, #84]	; (800b9d8 <vTaskStartScheduler+0xd4>)
 800b982:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b984:	4b15      	ldr	r3, [pc, #84]	; (800b9dc <vTaskStartScheduler+0xd8>)
 800b986:	f04f 32ff 	mov.w	r2, #4294967295
 800b98a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b98c:	4b14      	ldr	r3, [pc, #80]	; (800b9e0 <vTaskStartScheduler+0xdc>)
 800b98e:	2201      	movs	r2, #1
 800b990:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b992:	4b14      	ldr	r3, [pc, #80]	; (800b9e4 <vTaskStartScheduler+0xe0>)
 800b994:	2200      	movs	r2, #0
 800b996:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800b998:	f7f5 fcfa 	bl	8001390 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b99c:	f7fe fe18 	bl	800a5d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b9a0:	e00e      	b.n	800b9c0 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9a8:	d10a      	bne.n	800b9c0 <vTaskStartScheduler+0xbc>
	__asm volatile
 800b9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ae:	f383 8811 	msr	BASEPRI, r3
 800b9b2:	f3bf 8f6f 	isb	sy
 800b9b6:	f3bf 8f4f 	dsb	sy
 800b9ba:	60fb      	str	r3, [r7, #12]
}
 800b9bc:	bf00      	nop
 800b9be:	e7fe      	b.n	800b9be <vTaskStartScheduler+0xba>
}
 800b9c0:	bf00      	nop
 800b9c2:	3718      	adds	r7, #24
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}
 800b9c8:	0800d5f8 	.word	0x0800d5f8
 800b9cc:	0800c17d 	.word	0x0800c17d
 800b9d0:	200053b0 	.word	0x200053b0
 800b9d4:	20004eb4 	.word	0x20004eb4
 800b9d8:	20000010 	.word	0x20000010
 800b9dc:	200053ac 	.word	0x200053ac
 800b9e0:	20005398 	.word	0x20005398
 800b9e4:	20005390 	.word	0x20005390

0800b9e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b9ec:	4b04      	ldr	r3, [pc, #16]	; (800ba00 <vTaskSuspendAll+0x18>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	4a03      	ldr	r2, [pc, #12]	; (800ba00 <vTaskSuspendAll+0x18>)
 800b9f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b9f6:	bf00      	nop
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr
 800ba00:	200053b4 	.word	0x200053b4

0800ba04 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800ba04:	b480      	push	{r7}
 800ba06:	b083      	sub	sp, #12
 800ba08:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800ba0e:	4b14      	ldr	r3, [pc, #80]	; (800ba60 <prvGetExpectedIdleTime+0x5c>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d001      	beq.n	800ba1a <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800ba16:	2301      	movs	r3, #1
 800ba18:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800ba1a:	4b12      	ldr	r3, [pc, #72]	; (800ba64 <prvGetExpectedIdleTime+0x60>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d002      	beq.n	800ba2a <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800ba24:	2300      	movs	r3, #0
 800ba26:	607b      	str	r3, [r7, #4]
 800ba28:	e012      	b.n	800ba50 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800ba2a:	4b0f      	ldr	r3, [pc, #60]	; (800ba68 <prvGetExpectedIdleTime+0x64>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d902      	bls.n	800ba38 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800ba32:	2300      	movs	r3, #0
 800ba34:	607b      	str	r3, [r7, #4]
 800ba36:	e00b      	b.n	800ba50 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d002      	beq.n	800ba44 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	607b      	str	r3, [r7, #4]
 800ba42:	e005      	b.n	800ba50 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800ba44:	4b09      	ldr	r3, [pc, #36]	; (800ba6c <prvGetExpectedIdleTime+0x68>)
 800ba46:	681a      	ldr	r2, [r3, #0]
 800ba48:	4b09      	ldr	r3, [pc, #36]	; (800ba70 <prvGetExpectedIdleTime+0x6c>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	1ad3      	subs	r3, r2, r3
 800ba4e:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800ba50:	687b      	ldr	r3, [r7, #4]
	}
 800ba52:	4618      	mov	r0, r3
 800ba54:	370c      	adds	r7, #12
 800ba56:	46bd      	mov	sp, r7
 800ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5c:	4770      	bx	lr
 800ba5e:	bf00      	nop
 800ba60:	20005394 	.word	0x20005394
 800ba64:	20004eb4 	.word	0x20004eb4
 800ba68:	20004eb8 	.word	0x20004eb8
 800ba6c:	200053ac 	.word	0x200053ac
 800ba70:	20005390 	.word	0x20005390

0800ba74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b084      	sub	sp, #16
 800ba78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ba82:	4b42      	ldr	r3, [pc, #264]	; (800bb8c <xTaskResumeAll+0x118>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d10a      	bne.n	800baa0 <xTaskResumeAll+0x2c>
	__asm volatile
 800ba8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba8e:	f383 8811 	msr	BASEPRI, r3
 800ba92:	f3bf 8f6f 	isb	sy
 800ba96:	f3bf 8f4f 	dsb	sy
 800ba9a:	603b      	str	r3, [r7, #0]
}
 800ba9c:	bf00      	nop
 800ba9e:	e7fe      	b.n	800ba9e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800baa0:	f7fe fe38 	bl	800a714 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800baa4:	4b39      	ldr	r3, [pc, #228]	; (800bb8c <xTaskResumeAll+0x118>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	3b01      	subs	r3, #1
 800baaa:	4a38      	ldr	r2, [pc, #224]	; (800bb8c <xTaskResumeAll+0x118>)
 800baac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800baae:	4b37      	ldr	r3, [pc, #220]	; (800bb8c <xTaskResumeAll+0x118>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d162      	bne.n	800bb7c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bab6:	4b36      	ldr	r3, [pc, #216]	; (800bb90 <xTaskResumeAll+0x11c>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d05e      	beq.n	800bb7c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800babe:	e02f      	b.n	800bb20 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bac0:	4b34      	ldr	r3, [pc, #208]	; (800bb94 <xTaskResumeAll+0x120>)
 800bac2:	68db      	ldr	r3, [r3, #12]
 800bac4:	68db      	ldr	r3, [r3, #12]
 800bac6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	3318      	adds	r3, #24
 800bacc:	4618      	mov	r0, r3
 800bace:	f7fe fccd 	bl	800a46c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	3304      	adds	r3, #4
 800bad6:	4618      	mov	r0, r3
 800bad8:	f7fe fcc8 	bl	800a46c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bae0:	4b2d      	ldr	r3, [pc, #180]	; (800bb98 <xTaskResumeAll+0x124>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d903      	bls.n	800baf0 <xTaskResumeAll+0x7c>
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baec:	4a2a      	ldr	r2, [pc, #168]	; (800bb98 <xTaskResumeAll+0x124>)
 800baee:	6013      	str	r3, [r2, #0]
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baf4:	4613      	mov	r3, r2
 800baf6:	009b      	lsls	r3, r3, #2
 800baf8:	4413      	add	r3, r2
 800bafa:	009b      	lsls	r3, r3, #2
 800bafc:	4a27      	ldr	r2, [pc, #156]	; (800bb9c <xTaskResumeAll+0x128>)
 800bafe:	441a      	add	r2, r3
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	3304      	adds	r3, #4
 800bb04:	4619      	mov	r1, r3
 800bb06:	4610      	mov	r0, r2
 800bb08:	f7fe fc53 	bl	800a3b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb10:	4b23      	ldr	r3, [pc, #140]	; (800bba0 <xTaskResumeAll+0x12c>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d302      	bcc.n	800bb20 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bb1a:	4b22      	ldr	r3, [pc, #136]	; (800bba4 <xTaskResumeAll+0x130>)
 800bb1c:	2201      	movs	r2, #1
 800bb1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bb20:	4b1c      	ldr	r3, [pc, #112]	; (800bb94 <xTaskResumeAll+0x120>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d1cb      	bne.n	800bac0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d001      	beq.n	800bb32 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bb2e:	f000 fc39 	bl	800c3a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bb32:	4b1d      	ldr	r3, [pc, #116]	; (800bba8 <xTaskResumeAll+0x134>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d010      	beq.n	800bb60 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bb3e:	f000 f86f 	bl	800bc20 <xTaskIncrementTick>
 800bb42:	4603      	mov	r3, r0
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d002      	beq.n	800bb4e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bb48:	4b16      	ldr	r3, [pc, #88]	; (800bba4 <xTaskResumeAll+0x130>)
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	3b01      	subs	r3, #1
 800bb52:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d1f1      	bne.n	800bb3e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bb5a:	4b13      	ldr	r3, [pc, #76]	; (800bba8 <xTaskResumeAll+0x134>)
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bb60:	4b10      	ldr	r3, [pc, #64]	; (800bba4 <xTaskResumeAll+0x130>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d009      	beq.n	800bb7c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bb68:	2301      	movs	r3, #1
 800bb6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bb6c:	4b0f      	ldr	r3, [pc, #60]	; (800bbac <xTaskResumeAll+0x138>)
 800bb6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb72:	601a      	str	r2, [r3, #0]
 800bb74:	f3bf 8f4f 	dsb	sy
 800bb78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bb7c:	f7fe fdfa 	bl	800a774 <vPortExitCritical>

	return xAlreadyYielded;
 800bb80:	68bb      	ldr	r3, [r7, #8]
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3710      	adds	r7, #16
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}
 800bb8a:	bf00      	nop
 800bb8c:	200053b4 	.word	0x200053b4
 800bb90:	2000538c 	.word	0x2000538c
 800bb94:	20005348 	.word	0x20005348
 800bb98:	20005394 	.word	0x20005394
 800bb9c:	20004eb8 	.word	0x20004eb8
 800bba0:	20004eb4 	.word	0x20004eb4
 800bba4:	200053a0 	.word	0x200053a0
 800bba8:	2000539c 	.word	0x2000539c
 800bbac:	e000ed04 	.word	0xe000ed04

0800bbb0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b083      	sub	sp, #12
 800bbb4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bbb6:	4b05      	ldr	r3, [pc, #20]	; (800bbcc <xTaskGetTickCount+0x1c>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bbbc:	687b      	ldr	r3, [r7, #4]
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	370c      	adds	r7, #12
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc8:	4770      	bx	lr
 800bbca:	bf00      	nop
 800bbcc:	20005390 	.word	0x20005390

0800bbd0 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b085      	sub	sp, #20
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800bbd8:	4b0f      	ldr	r3, [pc, #60]	; (800bc18 <vTaskStepTick+0x48>)
 800bbda:	681a      	ldr	r2, [r3, #0]
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	441a      	add	r2, r3
 800bbe0:	4b0e      	ldr	r3, [pc, #56]	; (800bc1c <vTaskStepTick+0x4c>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d90a      	bls.n	800bbfe <vTaskStepTick+0x2e>
	__asm volatile
 800bbe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbec:	f383 8811 	msr	BASEPRI, r3
 800bbf0:	f3bf 8f6f 	isb	sy
 800bbf4:	f3bf 8f4f 	dsb	sy
 800bbf8:	60fb      	str	r3, [r7, #12]
}
 800bbfa:	bf00      	nop
 800bbfc:	e7fe      	b.n	800bbfc <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800bbfe:	4b06      	ldr	r3, [pc, #24]	; (800bc18 <vTaskStepTick+0x48>)
 800bc00:	681a      	ldr	r2, [r3, #0]
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	4413      	add	r3, r2
 800bc06:	4a04      	ldr	r2, [pc, #16]	; (800bc18 <vTaskStepTick+0x48>)
 800bc08:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800bc0a:	bf00      	nop
 800bc0c:	3714      	adds	r7, #20
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc14:	4770      	bx	lr
 800bc16:	bf00      	nop
 800bc18:	20005390 	.word	0x20005390
 800bc1c:	200053ac 	.word	0x200053ac

0800bc20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b086      	sub	sp, #24
 800bc24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bc26:	2300      	movs	r3, #0
 800bc28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc2a:	4b53      	ldr	r3, [pc, #332]	; (800bd78 <xTaskIncrementTick+0x158>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	f040 8095 	bne.w	800bd5e <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bc34:	4b51      	ldr	r3, [pc, #324]	; (800bd7c <xTaskIncrementTick+0x15c>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	3301      	adds	r3, #1
 800bc3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bc3c:	4a4f      	ldr	r2, [pc, #316]	; (800bd7c <xTaskIncrementTick+0x15c>)
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d120      	bne.n	800bc8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bc48:	4b4d      	ldr	r3, [pc, #308]	; (800bd80 <xTaskIncrementTick+0x160>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d00a      	beq.n	800bc68 <xTaskIncrementTick+0x48>
	__asm volatile
 800bc52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc56:	f383 8811 	msr	BASEPRI, r3
 800bc5a:	f3bf 8f6f 	isb	sy
 800bc5e:	f3bf 8f4f 	dsb	sy
 800bc62:	603b      	str	r3, [r7, #0]
}
 800bc64:	bf00      	nop
 800bc66:	e7fe      	b.n	800bc66 <xTaskIncrementTick+0x46>
 800bc68:	4b45      	ldr	r3, [pc, #276]	; (800bd80 <xTaskIncrementTick+0x160>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	60fb      	str	r3, [r7, #12]
 800bc6e:	4b45      	ldr	r3, [pc, #276]	; (800bd84 <xTaskIncrementTick+0x164>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	4a43      	ldr	r2, [pc, #268]	; (800bd80 <xTaskIncrementTick+0x160>)
 800bc74:	6013      	str	r3, [r2, #0]
 800bc76:	4a43      	ldr	r2, [pc, #268]	; (800bd84 <xTaskIncrementTick+0x164>)
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	6013      	str	r3, [r2, #0]
 800bc7c:	4b42      	ldr	r3, [pc, #264]	; (800bd88 <xTaskIncrementTick+0x168>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	3301      	adds	r3, #1
 800bc82:	4a41      	ldr	r2, [pc, #260]	; (800bd88 <xTaskIncrementTick+0x168>)
 800bc84:	6013      	str	r3, [r2, #0]
 800bc86:	f000 fb8d 	bl	800c3a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bc8a:	4b40      	ldr	r3, [pc, #256]	; (800bd8c <xTaskIncrementTick+0x16c>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	693a      	ldr	r2, [r7, #16]
 800bc90:	429a      	cmp	r2, r3
 800bc92:	d349      	bcc.n	800bd28 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc94:	4b3a      	ldr	r3, [pc, #232]	; (800bd80 <xTaskIncrementTick+0x160>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d104      	bne.n	800bca8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc9e:	4b3b      	ldr	r3, [pc, #236]	; (800bd8c <xTaskIncrementTick+0x16c>)
 800bca0:	f04f 32ff 	mov.w	r2, #4294967295
 800bca4:	601a      	str	r2, [r3, #0]
					break;
 800bca6:	e03f      	b.n	800bd28 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bca8:	4b35      	ldr	r3, [pc, #212]	; (800bd80 <xTaskIncrementTick+0x160>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	68db      	ldr	r3, [r3, #12]
 800bcae:	68db      	ldr	r3, [r3, #12]
 800bcb0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	685b      	ldr	r3, [r3, #4]
 800bcb6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bcb8:	693a      	ldr	r2, [r7, #16]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	d203      	bcs.n	800bcc8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bcc0:	4a32      	ldr	r2, [pc, #200]	; (800bd8c <xTaskIncrementTick+0x16c>)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bcc6:	e02f      	b.n	800bd28 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	3304      	adds	r3, #4
 800bccc:	4618      	mov	r0, r3
 800bcce:	f7fe fbcd 	bl	800a46c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d004      	beq.n	800bce4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	3318      	adds	r3, #24
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7fe fbc4 	bl	800a46c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bce8:	4b29      	ldr	r3, [pc, #164]	; (800bd90 <xTaskIncrementTick+0x170>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d903      	bls.n	800bcf8 <xTaskIncrementTick+0xd8>
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcf4:	4a26      	ldr	r2, [pc, #152]	; (800bd90 <xTaskIncrementTick+0x170>)
 800bcf6:	6013      	str	r3, [r2, #0]
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcfc:	4613      	mov	r3, r2
 800bcfe:	009b      	lsls	r3, r3, #2
 800bd00:	4413      	add	r3, r2
 800bd02:	009b      	lsls	r3, r3, #2
 800bd04:	4a23      	ldr	r2, [pc, #140]	; (800bd94 <xTaskIncrementTick+0x174>)
 800bd06:	441a      	add	r2, r3
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	3304      	adds	r3, #4
 800bd0c:	4619      	mov	r1, r3
 800bd0e:	4610      	mov	r0, r2
 800bd10:	f7fe fb4f 	bl	800a3b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd18:	4b1f      	ldr	r3, [pc, #124]	; (800bd98 <xTaskIncrementTick+0x178>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d3b8      	bcc.n	800bc94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bd22:	2301      	movs	r3, #1
 800bd24:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd26:	e7b5      	b.n	800bc94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bd28:	4b1b      	ldr	r3, [pc, #108]	; (800bd98 <xTaskIncrementTick+0x178>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd2e:	4919      	ldr	r1, [pc, #100]	; (800bd94 <xTaskIncrementTick+0x174>)
 800bd30:	4613      	mov	r3, r2
 800bd32:	009b      	lsls	r3, r3, #2
 800bd34:	4413      	add	r3, r2
 800bd36:	009b      	lsls	r3, r3, #2
 800bd38:	440b      	add	r3, r1
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d901      	bls.n	800bd44 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bd40:	2301      	movs	r3, #1
 800bd42:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 800bd44:	4b15      	ldr	r3, [pc, #84]	; (800bd9c <xTaskIncrementTick+0x17c>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d101      	bne.n	800bd50 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 800bd4c:	f7f5 fb36 	bl	80013bc <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bd50:	4b13      	ldr	r3, [pc, #76]	; (800bda0 <xTaskIncrementTick+0x180>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d009      	beq.n	800bd6c <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 800bd58:	2301      	movs	r3, #1
 800bd5a:	617b      	str	r3, [r7, #20]
 800bd5c:	e006      	b.n	800bd6c <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bd5e:	4b0f      	ldr	r3, [pc, #60]	; (800bd9c <xTaskIncrementTick+0x17c>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	3301      	adds	r3, #1
 800bd64:	4a0d      	ldr	r2, [pc, #52]	; (800bd9c <xTaskIncrementTick+0x17c>)
 800bd66:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800bd68:	f7f5 fb28 	bl	80013bc <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 800bd6c:	697b      	ldr	r3, [r7, #20]
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3718      	adds	r7, #24
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	200053b4 	.word	0x200053b4
 800bd7c:	20005390 	.word	0x20005390
 800bd80:	20005340 	.word	0x20005340
 800bd84:	20005344 	.word	0x20005344
 800bd88:	200053a4 	.word	0x200053a4
 800bd8c:	200053ac 	.word	0x200053ac
 800bd90:	20005394 	.word	0x20005394
 800bd94:	20004eb8 	.word	0x20004eb8
 800bd98:	20004eb4 	.word	0x20004eb4
 800bd9c:	2000539c 	.word	0x2000539c
 800bda0:	200053a0 	.word	0x200053a0

0800bda4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b084      	sub	sp, #16
 800bda8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bdaa:	4b46      	ldr	r3, [pc, #280]	; (800bec4 <vTaskSwitchContext+0x120>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d003      	beq.n	800bdba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bdb2:	4b45      	ldr	r3, [pc, #276]	; (800bec8 <vTaskSwitchContext+0x124>)
 800bdb4:	2201      	movs	r2, #1
 800bdb6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bdb8:	e07f      	b.n	800beba <vTaskSwitchContext+0x116>
		xYieldPending = pdFALSE;
 800bdba:	4b43      	ldr	r3, [pc, #268]	; (800bec8 <vTaskSwitchContext+0x124>)
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800bdc0:	f7f5 faed 	bl	800139e <getRunTimeCounterValue>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	4a41      	ldr	r2, [pc, #260]	; (800becc <vTaskSwitchContext+0x128>)
 800bdc8:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800bdca:	4b40      	ldr	r3, [pc, #256]	; (800becc <vTaskSwitchContext+0x128>)
 800bdcc:	681a      	ldr	r2, [r3, #0]
 800bdce:	4b40      	ldr	r3, [pc, #256]	; (800bed0 <vTaskSwitchContext+0x12c>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d90b      	bls.n	800bdee <vTaskSwitchContext+0x4a>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800bdd6:	4b3f      	ldr	r3, [pc, #252]	; (800bed4 <vTaskSwitchContext+0x130>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
 800bdde:	4a3b      	ldr	r2, [pc, #236]	; (800becc <vTaskSwitchContext+0x128>)
 800bde0:	6810      	ldr	r0, [r2, #0]
 800bde2:	4a3b      	ldr	r2, [pc, #236]	; (800bed0 <vTaskSwitchContext+0x12c>)
 800bde4:	6812      	ldr	r2, [r2, #0]
 800bde6:	1a82      	subs	r2, r0, r2
 800bde8:	440a      	add	r2, r1
 800bdea:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			ulTaskSwitchedInTime = ulTotalRunTime;
 800bdee:	4b37      	ldr	r3, [pc, #220]	; (800becc <vTaskSwitchContext+0x128>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	4a37      	ldr	r2, [pc, #220]	; (800bed0 <vTaskSwitchContext+0x12c>)
 800bdf4:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800bdf6:	4b37      	ldr	r3, [pc, #220]	; (800bed4 <vTaskSwitchContext+0x130>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	681a      	ldr	r2, [r3, #0]
 800bdfc:	4b35      	ldr	r3, [pc, #212]	; (800bed4 <vTaskSwitchContext+0x130>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be02:	429a      	cmp	r2, r3
 800be04:	d808      	bhi.n	800be18 <vTaskSwitchContext+0x74>
 800be06:	4b33      	ldr	r3, [pc, #204]	; (800bed4 <vTaskSwitchContext+0x130>)
 800be08:	681a      	ldr	r2, [r3, #0]
 800be0a:	4b32      	ldr	r3, [pc, #200]	; (800bed4 <vTaskSwitchContext+0x130>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	3334      	adds	r3, #52	; 0x34
 800be10:	4619      	mov	r1, r3
 800be12:	4610      	mov	r0, r2
 800be14:	f7f5 fad9 	bl	80013ca <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 800be18:	4b2e      	ldr	r3, [pc, #184]	; (800bed4 <vTaskSwitchContext+0x130>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	4a2e      	ldr	r2, [pc, #184]	; (800bed8 <vTaskSwitchContext+0x134>)
 800be1e:	6812      	ldr	r2, [r2, #0]
 800be20:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be24:	4b2d      	ldr	r3, [pc, #180]	; (800bedc <vTaskSwitchContext+0x138>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	60fb      	str	r3, [r7, #12]
 800be2a:	e010      	b.n	800be4e <vTaskSwitchContext+0xaa>
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d10a      	bne.n	800be48 <vTaskSwitchContext+0xa4>
	__asm volatile
 800be32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be36:	f383 8811 	msr	BASEPRI, r3
 800be3a:	f3bf 8f6f 	isb	sy
 800be3e:	f3bf 8f4f 	dsb	sy
 800be42:	607b      	str	r3, [r7, #4]
}
 800be44:	bf00      	nop
 800be46:	e7fe      	b.n	800be46 <vTaskSwitchContext+0xa2>
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	3b01      	subs	r3, #1
 800be4c:	60fb      	str	r3, [r7, #12]
 800be4e:	4924      	ldr	r1, [pc, #144]	; (800bee0 <vTaskSwitchContext+0x13c>)
 800be50:	68fa      	ldr	r2, [r7, #12]
 800be52:	4613      	mov	r3, r2
 800be54:	009b      	lsls	r3, r3, #2
 800be56:	4413      	add	r3, r2
 800be58:	009b      	lsls	r3, r3, #2
 800be5a:	440b      	add	r3, r1
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d0e4      	beq.n	800be2c <vTaskSwitchContext+0x88>
 800be62:	68fa      	ldr	r2, [r7, #12]
 800be64:	4613      	mov	r3, r2
 800be66:	009b      	lsls	r3, r3, #2
 800be68:	4413      	add	r3, r2
 800be6a:	009b      	lsls	r3, r3, #2
 800be6c:	4a1c      	ldr	r2, [pc, #112]	; (800bee0 <vTaskSwitchContext+0x13c>)
 800be6e:	4413      	add	r3, r2
 800be70:	60bb      	str	r3, [r7, #8]
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	685a      	ldr	r2, [r3, #4]
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	605a      	str	r2, [r3, #4]
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	685a      	ldr	r2, [r3, #4]
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	3308      	adds	r3, #8
 800be84:	429a      	cmp	r2, r3
 800be86:	d104      	bne.n	800be92 <vTaskSwitchContext+0xee>
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	685a      	ldr	r2, [r3, #4]
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	605a      	str	r2, [r3, #4]
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	68db      	ldr	r3, [r3, #12]
 800be98:	4a0e      	ldr	r2, [pc, #56]	; (800bed4 <vTaskSwitchContext+0x130>)
 800be9a:	6013      	str	r3, [r2, #0]
 800be9c:	4a0f      	ldr	r2, [pc, #60]	; (800bedc <vTaskSwitchContext+0x138>)
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 800bea2:	4b0c      	ldr	r3, [pc, #48]	; (800bed4 <vTaskSwitchContext+0x130>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800beaa:	4a0b      	ldr	r2, [pc, #44]	; (800bed8 <vTaskSwitchContext+0x134>)
 800beac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800beae:	4b09      	ldr	r3, [pc, #36]	; (800bed4 <vTaskSwitchContext+0x130>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800beb6:	4a0b      	ldr	r2, [pc, #44]	; (800bee4 <vTaskSwitchContext+0x140>)
 800beb8:	6013      	str	r3, [r2, #0]
}
 800beba:	bf00      	nop
 800bebc:	3710      	adds	r7, #16
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
 800bec2:	bf00      	nop
 800bec4:	200053b4 	.word	0x200053b4
 800bec8:	200053a0 	.word	0x200053a0
 800becc:	200053bc 	.word	0x200053bc
 800bed0:	200053b8 	.word	0x200053b8
 800bed4:	20004eb4 	.word	0x20004eb4
 800bed8:	20005388 	.word	0x20005388
 800bedc:	20005394 	.word	0x20005394
 800bee0:	20004eb8 	.word	0x20004eb8
 800bee4:	20000010 	.word	0x20000010

0800bee8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b084      	sub	sp, #16
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d10a      	bne.n	800bf0e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800befc:	f383 8811 	msr	BASEPRI, r3
 800bf00:	f3bf 8f6f 	isb	sy
 800bf04:	f3bf 8f4f 	dsb	sy
 800bf08:	60fb      	str	r3, [r7, #12]
}
 800bf0a:	bf00      	nop
 800bf0c:	e7fe      	b.n	800bf0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bf0e:	4b07      	ldr	r3, [pc, #28]	; (800bf2c <vTaskPlaceOnEventList+0x44>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	3318      	adds	r3, #24
 800bf14:	4619      	mov	r1, r3
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f7fe fa6f 	bl	800a3fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bf1c:	2101      	movs	r1, #1
 800bf1e:	6838      	ldr	r0, [r7, #0]
 800bf20:	f000 faf2 	bl	800c508 <prvAddCurrentTaskToDelayedList>
}
 800bf24:	bf00      	nop
 800bf26:	3710      	adds	r7, #16
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}
 800bf2c:	20004eb4 	.word	0x20004eb4

0800bf30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b086      	sub	sp, #24
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	60f8      	str	r0, [r7, #12]
 800bf38:	60b9      	str	r1, [r7, #8]
 800bf3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d10a      	bne.n	800bf58 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bf42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf46:	f383 8811 	msr	BASEPRI, r3
 800bf4a:	f3bf 8f6f 	isb	sy
 800bf4e:	f3bf 8f4f 	dsb	sy
 800bf52:	617b      	str	r3, [r7, #20]
}
 800bf54:	bf00      	nop
 800bf56:	e7fe      	b.n	800bf56 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bf58:	4b0a      	ldr	r3, [pc, #40]	; (800bf84 <vTaskPlaceOnEventListRestricted+0x54>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	3318      	adds	r3, #24
 800bf5e:	4619      	mov	r1, r3
 800bf60:	68f8      	ldr	r0, [r7, #12]
 800bf62:	f7fe fa26 	bl	800a3b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d002      	beq.n	800bf72 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bf6c:	f04f 33ff 	mov.w	r3, #4294967295
 800bf70:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bf72:	6879      	ldr	r1, [r7, #4]
 800bf74:	68b8      	ldr	r0, [r7, #8]
 800bf76:	f000 fac7 	bl	800c508 <prvAddCurrentTaskToDelayedList>
	}
 800bf7a:	bf00      	nop
 800bf7c:	3718      	adds	r7, #24
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}
 800bf82:	bf00      	nop
 800bf84:	20004eb4 	.word	0x20004eb4

0800bf88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b086      	sub	sp, #24
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	68db      	ldr	r3, [r3, #12]
 800bf94:	68db      	ldr	r3, [r3, #12]
 800bf96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d10a      	bne.n	800bfb4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bf9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa2:	f383 8811 	msr	BASEPRI, r3
 800bfa6:	f3bf 8f6f 	isb	sy
 800bfaa:	f3bf 8f4f 	dsb	sy
 800bfae:	60fb      	str	r3, [r7, #12]
}
 800bfb0:	bf00      	nop
 800bfb2:	e7fe      	b.n	800bfb2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	3318      	adds	r3, #24
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f7fe fa57 	bl	800a46c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfbe:	4b1f      	ldr	r3, [pc, #124]	; (800c03c <xTaskRemoveFromEventList+0xb4>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d11f      	bne.n	800c006 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	3304      	adds	r3, #4
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f7fe fa4e 	bl	800a46c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfd4:	4b1a      	ldr	r3, [pc, #104]	; (800c040 <xTaskRemoveFromEventList+0xb8>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d903      	bls.n	800bfe4 <xTaskRemoveFromEventList+0x5c>
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfe0:	4a17      	ldr	r2, [pc, #92]	; (800c040 <xTaskRemoveFromEventList+0xb8>)
 800bfe2:	6013      	str	r3, [r2, #0]
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfe8:	4613      	mov	r3, r2
 800bfea:	009b      	lsls	r3, r3, #2
 800bfec:	4413      	add	r3, r2
 800bfee:	009b      	lsls	r3, r3, #2
 800bff0:	4a14      	ldr	r2, [pc, #80]	; (800c044 <xTaskRemoveFromEventList+0xbc>)
 800bff2:	441a      	add	r2, r3
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	3304      	adds	r3, #4
 800bff8:	4619      	mov	r1, r3
 800bffa:	4610      	mov	r0, r2
 800bffc:	f7fe f9d9 	bl	800a3b2 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800c000:	f000 f9d0 	bl	800c3a4 <prvResetNextTaskUnblockTime>
 800c004:	e005      	b.n	800c012 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	3318      	adds	r3, #24
 800c00a:	4619      	mov	r1, r3
 800c00c:	480e      	ldr	r0, [pc, #56]	; (800c048 <xTaskRemoveFromEventList+0xc0>)
 800c00e:	f7fe f9d0 	bl	800a3b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c016:	4b0d      	ldr	r3, [pc, #52]	; (800c04c <xTaskRemoveFromEventList+0xc4>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c01c:	429a      	cmp	r2, r3
 800c01e:	d905      	bls.n	800c02c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c020:	2301      	movs	r3, #1
 800c022:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c024:	4b0a      	ldr	r3, [pc, #40]	; (800c050 <xTaskRemoveFromEventList+0xc8>)
 800c026:	2201      	movs	r2, #1
 800c028:	601a      	str	r2, [r3, #0]
 800c02a:	e001      	b.n	800c030 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800c02c:	2300      	movs	r3, #0
 800c02e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c030:	697b      	ldr	r3, [r7, #20]
}
 800c032:	4618      	mov	r0, r3
 800c034:	3718      	adds	r7, #24
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}
 800c03a:	bf00      	nop
 800c03c:	200053b4 	.word	0x200053b4
 800c040:	20005394 	.word	0x20005394
 800c044:	20004eb8 	.word	0x20004eb8
 800c048:	20005348 	.word	0x20005348
 800c04c:	20004eb4 	.word	0x20004eb4
 800c050:	200053a0 	.word	0x200053a0

0800c054 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c054:	b480      	push	{r7}
 800c056:	b083      	sub	sp, #12
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c05c:	4b06      	ldr	r3, [pc, #24]	; (800c078 <vTaskInternalSetTimeOutState+0x24>)
 800c05e:	681a      	ldr	r2, [r3, #0]
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c064:	4b05      	ldr	r3, [pc, #20]	; (800c07c <vTaskInternalSetTimeOutState+0x28>)
 800c066:	681a      	ldr	r2, [r3, #0]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	605a      	str	r2, [r3, #4]
}
 800c06c:	bf00      	nop
 800c06e:	370c      	adds	r7, #12
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr
 800c078:	200053a4 	.word	0x200053a4
 800c07c:	20005390 	.word	0x20005390

0800c080 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b088      	sub	sp, #32
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d10a      	bne.n	800c0a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c094:	f383 8811 	msr	BASEPRI, r3
 800c098:	f3bf 8f6f 	isb	sy
 800c09c:	f3bf 8f4f 	dsb	sy
 800c0a0:	613b      	str	r3, [r7, #16]
}
 800c0a2:	bf00      	nop
 800c0a4:	e7fe      	b.n	800c0a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d10a      	bne.n	800c0c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0b0:	f383 8811 	msr	BASEPRI, r3
 800c0b4:	f3bf 8f6f 	isb	sy
 800c0b8:	f3bf 8f4f 	dsb	sy
 800c0bc:	60fb      	str	r3, [r7, #12]
}
 800c0be:	bf00      	nop
 800c0c0:	e7fe      	b.n	800c0c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c0c2:	f7fe fb27 	bl	800a714 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c0c6:	4b24      	ldr	r3, [pc, #144]	; (800c158 <xTaskCheckForTimeOut+0xd8>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	685b      	ldr	r3, [r3, #4]
 800c0d0:	69ba      	ldr	r2, [r7, #24]
 800c0d2:	1ad3      	subs	r3, r2, r3
 800c0d4:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800c0d6:	4b21      	ldr	r3, [pc, #132]	; (800c15c <xTaskCheckForTimeOut+0xdc>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f893 31b6 	ldrb.w	r3, [r3, #438]	; 0x1b6
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d007      	beq.n	800c0f2 <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800c0e2:	4b1e      	ldr	r3, [pc, #120]	; (800c15c <xTaskCheckForTimeOut+0xdc>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
				xReturn = pdTRUE;
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	61fb      	str	r3, [r7, #28]
 800c0f0:	e02b      	b.n	800c14a <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0fa:	d102      	bne.n	800c102 <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	61fb      	str	r3, [r7, #28]
 800c100:	e023      	b.n	800c14a <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681a      	ldr	r2, [r3, #0]
 800c106:	4b16      	ldr	r3, [pc, #88]	; (800c160 <xTaskCheckForTimeOut+0xe0>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d007      	beq.n	800c11e <xTaskCheckForTimeOut+0x9e>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	685b      	ldr	r3, [r3, #4]
 800c112:	69ba      	ldr	r2, [r7, #24]
 800c114:	429a      	cmp	r2, r3
 800c116:	d302      	bcc.n	800c11e <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c118:	2301      	movs	r3, #1
 800c11a:	61fb      	str	r3, [r7, #28]
 800c11c:	e015      	b.n	800c14a <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	697a      	ldr	r2, [r7, #20]
 800c124:	429a      	cmp	r2, r3
 800c126:	d20b      	bcs.n	800c140 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	681a      	ldr	r2, [r3, #0]
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	1ad2      	subs	r2, r2, r3
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f7ff ff8d 	bl	800c054 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c13a:	2300      	movs	r3, #0
 800c13c:	61fb      	str	r3, [r7, #28]
 800c13e:	e004      	b.n	800c14a <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	2200      	movs	r2, #0
 800c144:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c146:	2301      	movs	r3, #1
 800c148:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c14a:	f7fe fb13 	bl	800a774 <vPortExitCritical>

	return xReturn;
 800c14e:	69fb      	ldr	r3, [r7, #28]
}
 800c150:	4618      	mov	r0, r3
 800c152:	3720      	adds	r7, #32
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}
 800c158:	20005390 	.word	0x20005390
 800c15c:	20004eb4 	.word	0x20004eb4
 800c160:	200053a4 	.word	0x200053a4

0800c164 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c164:	b480      	push	{r7}
 800c166:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c168:	4b03      	ldr	r3, [pc, #12]	; (800c178 <vTaskMissedYield+0x14>)
 800c16a:	2201      	movs	r2, #1
 800c16c:	601a      	str	r2, [r3, #0]
}
 800c16e:	bf00      	nop
 800c170:	46bd      	mov	sp, r7
 800c172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c176:	4770      	bx	lr
 800c178:	200053a0 	.word	0x200053a0

0800c17c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b084      	sub	sp, #16
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c184:	f000 f8aa 	bl	800c2dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c188:	4b19      	ldr	r3, [pc, #100]	; (800c1f0 <prvIdleTask+0x74>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	2b01      	cmp	r3, #1
 800c18e:	d907      	bls.n	800c1a0 <prvIdleTask+0x24>
			{
				taskYIELD();
 800c190:	4b18      	ldr	r3, [pc, #96]	; (800c1f4 <prvIdleTask+0x78>)
 800c192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c196:	601a      	str	r2, [r3, #0]
 800c198:	f3bf 8f4f 	dsb	sy
 800c19c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800c1a0:	f7f5 f905 	bl	80013ae <vApplicationIdleHook>
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800c1a4:	f7ff fc2e 	bl	800ba04 <prvGetExpectedIdleTime>
 800c1a8:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	2b01      	cmp	r3, #1
 800c1ae:	d9e9      	bls.n	800c184 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800c1b0:	f7ff fc1a 	bl	800b9e8 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800c1b4:	4b10      	ldr	r3, [pc, #64]	; (800c1f8 <prvIdleTask+0x7c>)
 800c1b6:	681a      	ldr	r2, [r3, #0]
 800c1b8:	4b10      	ldr	r3, [pc, #64]	; (800c1fc <prvIdleTask+0x80>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d20a      	bcs.n	800c1d6 <prvIdleTask+0x5a>
	__asm volatile
 800c1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c4:	f383 8811 	msr	BASEPRI, r3
 800c1c8:	f3bf 8f6f 	isb	sy
 800c1cc:	f3bf 8f4f 	dsb	sy
 800c1d0:	60bb      	str	r3, [r7, #8]
}
 800c1d2:	bf00      	nop
 800c1d4:	e7fe      	b.n	800c1d4 <prvIdleTask+0x58>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800c1d6:	f7ff fc15 	bl	800ba04 <prvGetExpectedIdleTime>
 800c1da:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	2b01      	cmp	r3, #1
 800c1e0:	d902      	bls.n	800c1e8 <prvIdleTask+0x6c>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800c1e2:	68f8      	ldr	r0, [r7, #12]
 800c1e4:	f7fe fb4a 	bl	800a87c <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800c1e8:	f7ff fc44 	bl	800ba74 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800c1ec:	e7ca      	b.n	800c184 <prvIdleTask+0x8>
 800c1ee:	bf00      	nop
 800c1f0:	20004eb8 	.word	0x20004eb8
 800c1f4:	e000ed04 	.word	0xe000ed04
 800c1f8:	200053ac 	.word	0x200053ac
 800c1fc:	20005390 	.word	0x20005390

0800c200 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800c200:	b480      	push	{r7}
 800c202:	b083      	sub	sp, #12
 800c204:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800c206:	2301      	movs	r3, #1
 800c208:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800c20a:	2301      	movs	r3, #1
 800c20c:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800c20e:	4b0f      	ldr	r3, [pc, #60]	; (800c24c <eTaskConfirmSleepModeStatus+0x4c>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d002      	beq.n	800c21c <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800c216:	2300      	movs	r3, #0
 800c218:	71fb      	strb	r3, [r7, #7]
 800c21a:	e010      	b.n	800c23e <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800c21c:	4b0c      	ldr	r3, [pc, #48]	; (800c250 <eTaskConfirmSleepModeStatus+0x50>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d002      	beq.n	800c22a <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800c224:	2300      	movs	r3, #0
 800c226:	71fb      	strb	r3, [r7, #7]
 800c228:	e009      	b.n	800c23e <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800c22a:	4b0a      	ldr	r3, [pc, #40]	; (800c254 <eTaskConfirmSleepModeStatus+0x54>)
 800c22c:	681a      	ldr	r2, [r3, #0]
 800c22e:	4b0a      	ldr	r3, [pc, #40]	; (800c258 <eTaskConfirmSleepModeStatus+0x58>)
 800c230:	6819      	ldr	r1, [r3, #0]
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	1acb      	subs	r3, r1, r3
 800c236:	429a      	cmp	r2, r3
 800c238:	d101      	bne.n	800c23e <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800c23a:	2302      	movs	r3, #2
 800c23c:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800c23e:	79fb      	ldrb	r3, [r7, #7]
	}
 800c240:	4618      	mov	r0, r3
 800c242:	370c      	adds	r7, #12
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr
 800c24c:	20005348 	.word	0x20005348
 800c250:	200053a0 	.word	0x200053a0
 800c254:	20005374 	.word	0x20005374
 800c258:	2000538c 	.word	0x2000538c

0800c25c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c262:	2300      	movs	r3, #0
 800c264:	607b      	str	r3, [r7, #4]
 800c266:	e00c      	b.n	800c282 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c268:	687a      	ldr	r2, [r7, #4]
 800c26a:	4613      	mov	r3, r2
 800c26c:	009b      	lsls	r3, r3, #2
 800c26e:	4413      	add	r3, r2
 800c270:	009b      	lsls	r3, r3, #2
 800c272:	4a12      	ldr	r2, [pc, #72]	; (800c2bc <prvInitialiseTaskLists+0x60>)
 800c274:	4413      	add	r3, r2
 800c276:	4618      	mov	r0, r3
 800c278:	f7fe f86e 	bl	800a358 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	3301      	adds	r3, #1
 800c280:	607b      	str	r3, [r7, #4]
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2b37      	cmp	r3, #55	; 0x37
 800c286:	d9ef      	bls.n	800c268 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c288:	480d      	ldr	r0, [pc, #52]	; (800c2c0 <prvInitialiseTaskLists+0x64>)
 800c28a:	f7fe f865 	bl	800a358 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c28e:	480d      	ldr	r0, [pc, #52]	; (800c2c4 <prvInitialiseTaskLists+0x68>)
 800c290:	f7fe f862 	bl	800a358 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c294:	480c      	ldr	r0, [pc, #48]	; (800c2c8 <prvInitialiseTaskLists+0x6c>)
 800c296:	f7fe f85f 	bl	800a358 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c29a:	480c      	ldr	r0, [pc, #48]	; (800c2cc <prvInitialiseTaskLists+0x70>)
 800c29c:	f7fe f85c 	bl	800a358 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c2a0:	480b      	ldr	r0, [pc, #44]	; (800c2d0 <prvInitialiseTaskLists+0x74>)
 800c2a2:	f7fe f859 	bl	800a358 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c2a6:	4b0b      	ldr	r3, [pc, #44]	; (800c2d4 <prvInitialiseTaskLists+0x78>)
 800c2a8:	4a05      	ldr	r2, [pc, #20]	; (800c2c0 <prvInitialiseTaskLists+0x64>)
 800c2aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c2ac:	4b0a      	ldr	r3, [pc, #40]	; (800c2d8 <prvInitialiseTaskLists+0x7c>)
 800c2ae:	4a05      	ldr	r2, [pc, #20]	; (800c2c4 <prvInitialiseTaskLists+0x68>)
 800c2b0:	601a      	str	r2, [r3, #0]
}
 800c2b2:	bf00      	nop
 800c2b4:	3708      	adds	r7, #8
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
 800c2ba:	bf00      	nop
 800c2bc:	20004eb8 	.word	0x20004eb8
 800c2c0:	20005318 	.word	0x20005318
 800c2c4:	2000532c 	.word	0x2000532c
 800c2c8:	20005348 	.word	0x20005348
 800c2cc:	2000535c 	.word	0x2000535c
 800c2d0:	20005374 	.word	0x20005374
 800c2d4:	20005340 	.word	0x20005340
 800c2d8:	20005344 	.word	0x20005344

0800c2dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b082      	sub	sp, #8
 800c2e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c2e2:	e019      	b.n	800c318 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c2e4:	f7fe fa16 	bl	800a714 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2e8:	4b10      	ldr	r3, [pc, #64]	; (800c32c <prvCheckTasksWaitingTermination+0x50>)
 800c2ea:	68db      	ldr	r3, [r3, #12]
 800c2ec:	68db      	ldr	r3, [r3, #12]
 800c2ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	3304      	adds	r3, #4
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f7fe f8b9 	bl	800a46c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c2fa:	4b0d      	ldr	r3, [pc, #52]	; (800c330 <prvCheckTasksWaitingTermination+0x54>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	3b01      	subs	r3, #1
 800c300:	4a0b      	ldr	r2, [pc, #44]	; (800c330 <prvCheckTasksWaitingTermination+0x54>)
 800c302:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c304:	4b0b      	ldr	r3, [pc, #44]	; (800c334 <prvCheckTasksWaitingTermination+0x58>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	3b01      	subs	r3, #1
 800c30a:	4a0a      	ldr	r2, [pc, #40]	; (800c334 <prvCheckTasksWaitingTermination+0x58>)
 800c30c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c30e:	f7fe fa31 	bl	800a774 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f000 f810 	bl	800c338 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c318:	4b06      	ldr	r3, [pc, #24]	; (800c334 <prvCheckTasksWaitingTermination+0x58>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d1e1      	bne.n	800c2e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c320:	bf00      	nop
 800c322:	bf00      	nop
 800c324:	3708      	adds	r7, #8
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	2000535c 	.word	0x2000535c
 800c330:	2000538c 	.word	0x2000538c
 800c334:	20005370 	.word	0x20005370

0800c338 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b084      	sub	sp, #16
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c346:	4618      	mov	r0, r3
 800c348:	f000 fdd6 	bl	800cef8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800c352:	2b00      	cmp	r3, #0
 800c354:	d108      	bne.n	800c368 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c35a:	4618      	mov	r0, r3
 800c35c:	f7fd fede 	bl	800a11c <vPortFree>
				vPortFree( pxTCB );
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f7fd fedb 	bl	800a11c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c366:	e018      	b.n	800c39a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d103      	bne.n	800c37a <prvDeleteTCB+0x42>
				vPortFree( pxTCB );
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f7fd fed2 	bl	800a11c <vPortFree>
	}
 800c378:	e00f      	b.n	800c39a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800c380:	2b02      	cmp	r3, #2
 800c382:	d00a      	beq.n	800c39a <prvDeleteTCB+0x62>
	__asm volatile
 800c384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c388:	f383 8811 	msr	BASEPRI, r3
 800c38c:	f3bf 8f6f 	isb	sy
 800c390:	f3bf 8f4f 	dsb	sy
 800c394:	60fb      	str	r3, [r7, #12]
}
 800c396:	bf00      	nop
 800c398:	e7fe      	b.n	800c398 <prvDeleteTCB+0x60>
	}
 800c39a:	bf00      	nop
 800c39c:	3710      	adds	r7, #16
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}
	...

0800c3a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b083      	sub	sp, #12
 800c3a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c3aa:	4b0c      	ldr	r3, [pc, #48]	; (800c3dc <prvResetNextTaskUnblockTime+0x38>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d104      	bne.n	800c3be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c3b4:	4b0a      	ldr	r3, [pc, #40]	; (800c3e0 <prvResetNextTaskUnblockTime+0x3c>)
 800c3b6:	f04f 32ff 	mov.w	r2, #4294967295
 800c3ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c3bc:	e008      	b.n	800c3d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3be:	4b07      	ldr	r3, [pc, #28]	; (800c3dc <prvResetNextTaskUnblockTime+0x38>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	68db      	ldr	r3, [r3, #12]
 800c3c4:	68db      	ldr	r3, [r3, #12]
 800c3c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	685b      	ldr	r3, [r3, #4]
 800c3cc:	4a04      	ldr	r2, [pc, #16]	; (800c3e0 <prvResetNextTaskUnblockTime+0x3c>)
 800c3ce:	6013      	str	r3, [r2, #0]
}
 800c3d0:	bf00      	nop
 800c3d2:	370c      	adds	r7, #12
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3da:	4770      	bx	lr
 800c3dc:	20005340 	.word	0x20005340
 800c3e0:	200053ac 	.word	0x200053ac

0800c3e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b083      	sub	sp, #12
 800c3e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c3ea:	4b0b      	ldr	r3, [pc, #44]	; (800c418 <xTaskGetSchedulerState+0x34>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d102      	bne.n	800c3f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	607b      	str	r3, [r7, #4]
 800c3f6:	e008      	b.n	800c40a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3f8:	4b08      	ldr	r3, [pc, #32]	; (800c41c <xTaskGetSchedulerState+0x38>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d102      	bne.n	800c406 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c400:	2302      	movs	r3, #2
 800c402:	607b      	str	r3, [r7, #4]
 800c404:	e001      	b.n	800c40a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c406:	2300      	movs	r3, #0
 800c408:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c40a:	687b      	ldr	r3, [r7, #4]
	}
 800c40c:	4618      	mov	r0, r3
 800c40e:	370c      	adds	r7, #12
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	4770      	bx	lr
 800c418:	20005398 	.word	0x20005398
 800c41c:	200053b4 	.word	0x200053b4

0800c420 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c420:	b580      	push	{r7, lr}
 800c422:	b086      	sub	sp, #24
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c42c:	2300      	movs	r3, #0
 800c42e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d05c      	beq.n	800c4f0 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c436:	4b31      	ldr	r3, [pc, #196]	; (800c4fc <xTaskPriorityDisinherit+0xdc>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	693a      	ldr	r2, [r7, #16]
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d00a      	beq.n	800c456 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c444:	f383 8811 	msr	BASEPRI, r3
 800c448:	f3bf 8f6f 	isb	sy
 800c44c:	f3bf 8f4f 	dsb	sy
 800c450:	60fb      	str	r3, [r7, #12]
}
 800c452:	bf00      	nop
 800c454:	e7fe      	b.n	800c454 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d10a      	bne.n	800c476 <xTaskPriorityDisinherit+0x56>
	__asm volatile
 800c460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c464:	f383 8811 	msr	BASEPRI, r3
 800c468:	f3bf 8f6f 	isb	sy
 800c46c:	f3bf 8f4f 	dsb	sy
 800c470:	60bb      	str	r3, [r7, #8]
}
 800c472:	bf00      	nop
 800c474:	e7fe      	b.n	800c474 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800c47c:	1e5a      	subs	r2, r3, #1
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c48e:	429a      	cmp	r2, r3
 800c490:	d02e      	beq.n	800c4f0 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d129      	bne.n	800c4f0 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	3304      	adds	r3, #4
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f7fd ffe3 	bl	800a46c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4c0:	4b0f      	ldr	r3, [pc, #60]	; (800c500 <xTaskPriorityDisinherit+0xe0>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d903      	bls.n	800c4d0 <xTaskPriorityDisinherit+0xb0>
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4cc:	4a0c      	ldr	r2, [pc, #48]	; (800c500 <xTaskPriorityDisinherit+0xe0>)
 800c4ce:	6013      	str	r3, [r2, #0]
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4d4:	4613      	mov	r3, r2
 800c4d6:	009b      	lsls	r3, r3, #2
 800c4d8:	4413      	add	r3, r2
 800c4da:	009b      	lsls	r3, r3, #2
 800c4dc:	4a09      	ldr	r2, [pc, #36]	; (800c504 <xTaskPriorityDisinherit+0xe4>)
 800c4de:	441a      	add	r2, r3
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	3304      	adds	r3, #4
 800c4e4:	4619      	mov	r1, r3
 800c4e6:	4610      	mov	r0, r2
 800c4e8:	f7fd ff63 	bl	800a3b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c4f0:	697b      	ldr	r3, [r7, #20]
	}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3718      	adds	r7, #24
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
 800c4fa:	bf00      	nop
 800c4fc:	20004eb4 	.word	0x20004eb4
 800c500:	20005394 	.word	0x20005394
 800c504:	20004eb8 	.word	0x20004eb8

0800c508 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b084      	sub	sp, #16
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c512:	4b24      	ldr	r3, [pc, #144]	; (800c5a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800c518:	4b23      	ldr	r3, [pc, #140]	; (800c5a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	2200      	movs	r2, #0
 800c51e:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c522:	4b21      	ldr	r3, [pc, #132]	; (800c5a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	3304      	adds	r3, #4
 800c528:	4618      	mov	r0, r3
 800c52a:	f7fd ff9f 	bl	800a46c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c534:	d10a      	bne.n	800c54c <prvAddCurrentTaskToDelayedList+0x44>
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d007      	beq.n	800c54c <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c53c:	4b1a      	ldr	r3, [pc, #104]	; (800c5a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	3304      	adds	r3, #4
 800c542:	4619      	mov	r1, r3
 800c544:	4819      	ldr	r0, [pc, #100]	; (800c5ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800c546:	f7fd ff34 	bl	800a3b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c54a:	e026      	b.n	800c59a <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c54c:	68fa      	ldr	r2, [r7, #12]
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	4413      	add	r3, r2
 800c552:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c554:	4b14      	ldr	r3, [pc, #80]	; (800c5a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	68ba      	ldr	r2, [r7, #8]
 800c55a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c55c:	68ba      	ldr	r2, [r7, #8]
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	429a      	cmp	r2, r3
 800c562:	d209      	bcs.n	800c578 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c564:	4b12      	ldr	r3, [pc, #72]	; (800c5b0 <prvAddCurrentTaskToDelayedList+0xa8>)
 800c566:	681a      	ldr	r2, [r3, #0]
 800c568:	4b0f      	ldr	r3, [pc, #60]	; (800c5a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	3304      	adds	r3, #4
 800c56e:	4619      	mov	r1, r3
 800c570:	4610      	mov	r0, r2
 800c572:	f7fd ff42 	bl	800a3fa <vListInsert>
}
 800c576:	e010      	b.n	800c59a <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c578:	4b0e      	ldr	r3, [pc, #56]	; (800c5b4 <prvAddCurrentTaskToDelayedList+0xac>)
 800c57a:	681a      	ldr	r2, [r3, #0]
 800c57c:	4b0a      	ldr	r3, [pc, #40]	; (800c5a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	3304      	adds	r3, #4
 800c582:	4619      	mov	r1, r3
 800c584:	4610      	mov	r0, r2
 800c586:	f7fd ff38 	bl	800a3fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c58a:	4b0b      	ldr	r3, [pc, #44]	; (800c5b8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	68ba      	ldr	r2, [r7, #8]
 800c590:	429a      	cmp	r2, r3
 800c592:	d202      	bcs.n	800c59a <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 800c594:	4a08      	ldr	r2, [pc, #32]	; (800c5b8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	6013      	str	r3, [r2, #0]
}
 800c59a:	bf00      	nop
 800c59c:	3710      	adds	r7, #16
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
 800c5a2:	bf00      	nop
 800c5a4:	20005390 	.word	0x20005390
 800c5a8:	20004eb4 	.word	0x20004eb4
 800c5ac:	20005374 	.word	0x20005374
 800c5b0:	20005344 	.word	0x20005344
 800c5b4:	20005340 	.word	0x20005340
 800c5b8:	200053ac 	.word	0x200053ac

0800c5bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b08a      	sub	sp, #40	; 0x28
 800c5c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c5c6:	f000 fba3 	bl	800cd10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c5ca:	4b1c      	ldr	r3, [pc, #112]	; (800c63c <xTimerCreateTimerTask+0x80>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d021      	beq.n	800c616 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c5da:	1d3a      	adds	r2, r7, #4
 800c5dc:	f107 0108 	add.w	r1, r7, #8
 800c5e0:	f107 030c 	add.w	r3, r7, #12
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f7fd fcaf 	bl	8009f48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c5ea:	6879      	ldr	r1, [r7, #4]
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	68fa      	ldr	r2, [r7, #12]
 800c5f0:	9202      	str	r2, [sp, #8]
 800c5f2:	9301      	str	r3, [sp, #4]
 800c5f4:	2302      	movs	r3, #2
 800c5f6:	9300      	str	r3, [sp, #0]
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	460a      	mov	r2, r1
 800c5fc:	4910      	ldr	r1, [pc, #64]	; (800c640 <xTimerCreateTimerTask+0x84>)
 800c5fe:	4811      	ldr	r0, [pc, #68]	; (800c644 <xTimerCreateTimerTask+0x88>)
 800c600:	f7fe ff7a 	bl	800b4f8 <xTaskCreateStatic>
 800c604:	4603      	mov	r3, r0
 800c606:	4a10      	ldr	r2, [pc, #64]	; (800c648 <xTimerCreateTimerTask+0x8c>)
 800c608:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c60a:	4b0f      	ldr	r3, [pc, #60]	; (800c648 <xTimerCreateTimerTask+0x8c>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d001      	beq.n	800c616 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c612:	2301      	movs	r3, #1
 800c614:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c616:	697b      	ldr	r3, [r7, #20]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d10a      	bne.n	800c632 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c620:	f383 8811 	msr	BASEPRI, r3
 800c624:	f3bf 8f6f 	isb	sy
 800c628:	f3bf 8f4f 	dsb	sy
 800c62c:	613b      	str	r3, [r7, #16]
}
 800c62e:	bf00      	nop
 800c630:	e7fe      	b.n	800c630 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c632:	697b      	ldr	r3, [r7, #20]
}
 800c634:	4618      	mov	r0, r3
 800c636:	3718      	adds	r7, #24
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}
 800c63c:	200053f0 	.word	0x200053f0
 800c640:	0800d628 	.word	0x0800d628
 800c644:	0800c8b5 	.word	0x0800c8b5
 800c648:	200053f4 	.word	0x200053f4

0800c64c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b088      	sub	sp, #32
 800c650:	af02      	add	r7, sp, #8
 800c652:	60f8      	str	r0, [r7, #12]
 800c654:	60b9      	str	r1, [r7, #8]
 800c656:	607a      	str	r2, [r7, #4]
 800c658:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800c65a:	202c      	movs	r0, #44	; 0x2c
 800c65c:	f7fd fc8e 	bl	8009f7c <pvPortMalloc>
 800c660:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d00d      	beq.n	800c684 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	2200      	movs	r2, #0
 800c66c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	9301      	str	r3, [sp, #4]
 800c674:	6a3b      	ldr	r3, [r7, #32]
 800c676:	9300      	str	r3, [sp, #0]
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	687a      	ldr	r2, [r7, #4]
 800c67c:	68b9      	ldr	r1, [r7, #8]
 800c67e:	68f8      	ldr	r0, [r7, #12]
 800c680:	f000 f843 	bl	800c70a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c684:	697b      	ldr	r3, [r7, #20]
	}
 800c686:	4618      	mov	r0, r3
 800c688:	3718      	adds	r7, #24
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}

0800c68e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800c68e:	b580      	push	{r7, lr}
 800c690:	b08a      	sub	sp, #40	; 0x28
 800c692:	af02      	add	r7, sp, #8
 800c694:	60f8      	str	r0, [r7, #12]
 800c696:	60b9      	str	r1, [r7, #8]
 800c698:	607a      	str	r2, [r7, #4]
 800c69a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800c69c:	232c      	movs	r3, #44	; 0x2c
 800c69e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	2b2c      	cmp	r3, #44	; 0x2c
 800c6a4:	d00a      	beq.n	800c6bc <xTimerCreateStatic+0x2e>
	__asm volatile
 800c6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6aa:	f383 8811 	msr	BASEPRI, r3
 800c6ae:	f3bf 8f6f 	isb	sy
 800c6b2:	f3bf 8f4f 	dsb	sy
 800c6b6:	61bb      	str	r3, [r7, #24]
}
 800c6b8:	bf00      	nop
 800c6ba:	e7fe      	b.n	800c6ba <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c6bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800c6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d10a      	bne.n	800c6da <xTimerCreateStatic+0x4c>
	__asm volatile
 800c6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c8:	f383 8811 	msr	BASEPRI, r3
 800c6cc:	f3bf 8f6f 	isb	sy
 800c6d0:	f3bf 8f4f 	dsb	sy
 800c6d4:	617b      	str	r3, [r7, #20]
}
 800c6d6:	bf00      	nop
 800c6d8:	e7fe      	b.n	800c6d8 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800c6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6dc:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800c6de:	69fb      	ldr	r3, [r7, #28]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d00d      	beq.n	800c700 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800c6e4:	69fb      	ldr	r3, [r7, #28]
 800c6e6:	2202      	movs	r2, #2
 800c6e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c6ec:	69fb      	ldr	r3, [r7, #28]
 800c6ee:	9301      	str	r3, [sp, #4]
 800c6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f2:	9300      	str	r3, [sp, #0]
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	687a      	ldr	r2, [r7, #4]
 800c6f8:	68b9      	ldr	r1, [r7, #8]
 800c6fa:	68f8      	ldr	r0, [r7, #12]
 800c6fc:	f000 f805 	bl	800c70a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c700:	69fb      	ldr	r3, [r7, #28]
	}
 800c702:	4618      	mov	r0, r3
 800c704:	3720      	adds	r7, #32
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}

0800c70a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c70a:	b580      	push	{r7, lr}
 800c70c:	b086      	sub	sp, #24
 800c70e:	af00      	add	r7, sp, #0
 800c710:	60f8      	str	r0, [r7, #12]
 800c712:	60b9      	str	r1, [r7, #8]
 800c714:	607a      	str	r2, [r7, #4]
 800c716:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d10a      	bne.n	800c734 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800c71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c722:	f383 8811 	msr	BASEPRI, r3
 800c726:	f3bf 8f6f 	isb	sy
 800c72a:	f3bf 8f4f 	dsb	sy
 800c72e:	617b      	str	r3, [r7, #20]
}
 800c730:	bf00      	nop
 800c732:	e7fe      	b.n	800c732 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800c734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c736:	2b00      	cmp	r3, #0
 800c738:	d01e      	beq.n	800c778 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c73a:	f000 fae9 	bl	800cd10 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c740:	68fa      	ldr	r2, [r7, #12]
 800c742:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c746:	68ba      	ldr	r2, [r7, #8]
 800c748:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800c74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c74c:	683a      	ldr	r2, [r7, #0]
 800c74e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c752:	6a3a      	ldr	r2, [r7, #32]
 800c754:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c758:	3304      	adds	r3, #4
 800c75a:	4618      	mov	r0, r3
 800c75c:	f7fd fe1c 	bl	800a398 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d008      	beq.n	800c778 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800c766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c768:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c76c:	f043 0304 	orr.w	r3, r3, #4
 800c770:	b2da      	uxtb	r2, r3
 800c772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c774:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c778:	bf00      	nop
 800c77a:	3718      	adds	r7, #24
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}

0800c780 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b08a      	sub	sp, #40	; 0x28
 800c784:	af00      	add	r7, sp, #0
 800c786:	60f8      	str	r0, [r7, #12]
 800c788:	60b9      	str	r1, [r7, #8]
 800c78a:	607a      	str	r2, [r7, #4]
 800c78c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c78e:	2300      	movs	r3, #0
 800c790:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d10a      	bne.n	800c7ae <xTimerGenericCommand+0x2e>
	__asm volatile
 800c798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c79c:	f383 8811 	msr	BASEPRI, r3
 800c7a0:	f3bf 8f6f 	isb	sy
 800c7a4:	f3bf 8f4f 	dsb	sy
 800c7a8:	623b      	str	r3, [r7, #32]
}
 800c7aa:	bf00      	nop
 800c7ac:	e7fe      	b.n	800c7ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c7ae:	4b1a      	ldr	r3, [pc, #104]	; (800c818 <xTimerGenericCommand+0x98>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d02a      	beq.n	800c80c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	2b05      	cmp	r3, #5
 800c7c6:	dc18      	bgt.n	800c7fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c7c8:	f7ff fe0c 	bl	800c3e4 <xTaskGetSchedulerState>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	2b02      	cmp	r3, #2
 800c7d0:	d109      	bne.n	800c7e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c7d2:	4b11      	ldr	r3, [pc, #68]	; (800c818 <xTimerGenericCommand+0x98>)
 800c7d4:	6818      	ldr	r0, [r3, #0]
 800c7d6:	f107 0110 	add.w	r1, r7, #16
 800c7da:	2300      	movs	r3, #0
 800c7dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7de:	f7fe faa3 	bl	800ad28 <xQueueGenericSend>
 800c7e2:	6278      	str	r0, [r7, #36]	; 0x24
 800c7e4:	e012      	b.n	800c80c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c7e6:	4b0c      	ldr	r3, [pc, #48]	; (800c818 <xTimerGenericCommand+0x98>)
 800c7e8:	6818      	ldr	r0, [r3, #0]
 800c7ea:	f107 0110 	add.w	r1, r7, #16
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	f7fe fa99 	bl	800ad28 <xQueueGenericSend>
 800c7f6:	6278      	str	r0, [r7, #36]	; 0x24
 800c7f8:	e008      	b.n	800c80c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c7fa:	4b07      	ldr	r3, [pc, #28]	; (800c818 <xTimerGenericCommand+0x98>)
 800c7fc:	6818      	ldr	r0, [r3, #0]
 800c7fe:	f107 0110 	add.w	r1, r7, #16
 800c802:	2300      	movs	r3, #0
 800c804:	683a      	ldr	r2, [r7, #0]
 800c806:	f7fe fb8d 	bl	800af24 <xQueueGenericSendFromISR>
 800c80a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3728      	adds	r7, #40	; 0x28
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
 800c816:	bf00      	nop
 800c818:	200053f0 	.word	0x200053f0

0800c81c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b088      	sub	sp, #32
 800c820:	af02      	add	r7, sp, #8
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c826:	4b22      	ldr	r3, [pc, #136]	; (800c8b0 <prvProcessExpiredTimer+0x94>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	68db      	ldr	r3, [r3, #12]
 800c82c:	68db      	ldr	r3, [r3, #12]
 800c82e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	3304      	adds	r3, #4
 800c834:	4618      	mov	r0, r3
 800c836:	f7fd fe19 	bl	800a46c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c840:	f003 0304 	and.w	r3, r3, #4
 800c844:	2b00      	cmp	r3, #0
 800c846:	d022      	beq.n	800c88e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	699a      	ldr	r2, [r3, #24]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	18d1      	adds	r1, r2, r3
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	683a      	ldr	r2, [r7, #0]
 800c854:	6978      	ldr	r0, [r7, #20]
 800c856:	f000 f8d3 	bl	800ca00 <prvInsertTimerInActiveList>
 800c85a:	4603      	mov	r3, r0
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d01f      	beq.n	800c8a0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c860:	2300      	movs	r3, #0
 800c862:	9300      	str	r3, [sp, #0]
 800c864:	2300      	movs	r3, #0
 800c866:	687a      	ldr	r2, [r7, #4]
 800c868:	2100      	movs	r1, #0
 800c86a:	6978      	ldr	r0, [r7, #20]
 800c86c:	f7ff ff88 	bl	800c780 <xTimerGenericCommand>
 800c870:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d113      	bne.n	800c8a0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c87c:	f383 8811 	msr	BASEPRI, r3
 800c880:	f3bf 8f6f 	isb	sy
 800c884:	f3bf 8f4f 	dsb	sy
 800c888:	60fb      	str	r3, [r7, #12]
}
 800c88a:	bf00      	nop
 800c88c:	e7fe      	b.n	800c88c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c894:	f023 0301 	bic.w	r3, r3, #1
 800c898:	b2da      	uxtb	r2, r3
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	6a1b      	ldr	r3, [r3, #32]
 800c8a4:	6978      	ldr	r0, [r7, #20]
 800c8a6:	4798      	blx	r3
}
 800c8a8:	bf00      	nop
 800c8aa:	3718      	adds	r7, #24
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}
 800c8b0:	200053e8 	.word	0x200053e8

0800c8b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b084      	sub	sp, #16
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
 800c8bc:	f7f4 fd97 	bl	80013ee <vApplicationDaemonTaskStartupHook>

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c8c0:	f107 0308 	add.w	r3, r7, #8
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f000 f857 	bl	800c978 <prvGetNextExpireTime>
 800c8ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	68f8      	ldr	r0, [r7, #12]
 800c8d2:	f000 f803 	bl	800c8dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c8d6:	f000 f8d5 	bl	800ca84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c8da:	e7f1      	b.n	800c8c0 <prvTimerTask+0xc>

0800c8dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b084      	sub	sp, #16
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
 800c8e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c8e6:	f7ff f87f 	bl	800b9e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c8ea:	f107 0308 	add.w	r3, r7, #8
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f000 f866 	bl	800c9c0 <prvSampleTimeNow>
 800c8f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d130      	bne.n	800c95e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d10a      	bne.n	800c918 <prvProcessTimerOrBlockTask+0x3c>
 800c902:	687a      	ldr	r2, [r7, #4]
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	429a      	cmp	r2, r3
 800c908:	d806      	bhi.n	800c918 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c90a:	f7ff f8b3 	bl	800ba74 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c90e:	68f9      	ldr	r1, [r7, #12]
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f7ff ff83 	bl	800c81c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c916:	e024      	b.n	800c962 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d008      	beq.n	800c930 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c91e:	4b13      	ldr	r3, [pc, #76]	; (800c96c <prvProcessTimerOrBlockTask+0x90>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d101      	bne.n	800c92c <prvProcessTimerOrBlockTask+0x50>
 800c928:	2301      	movs	r3, #1
 800c92a:	e000      	b.n	800c92e <prvProcessTimerOrBlockTask+0x52>
 800c92c:	2300      	movs	r3, #0
 800c92e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c930:	4b0f      	ldr	r3, [pc, #60]	; (800c970 <prvProcessTimerOrBlockTask+0x94>)
 800c932:	6818      	ldr	r0, [r3, #0]
 800c934:	687a      	ldr	r2, [r7, #4]
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	1ad3      	subs	r3, r2, r3
 800c93a:	683a      	ldr	r2, [r7, #0]
 800c93c:	4619      	mov	r1, r3
 800c93e:	f7fe fda7 	bl	800b490 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c942:	f7ff f897 	bl	800ba74 <xTaskResumeAll>
 800c946:	4603      	mov	r3, r0
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d10a      	bne.n	800c962 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c94c:	4b09      	ldr	r3, [pc, #36]	; (800c974 <prvProcessTimerOrBlockTask+0x98>)
 800c94e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c952:	601a      	str	r2, [r3, #0]
 800c954:	f3bf 8f4f 	dsb	sy
 800c958:	f3bf 8f6f 	isb	sy
}
 800c95c:	e001      	b.n	800c962 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c95e:	f7ff f889 	bl	800ba74 <xTaskResumeAll>
}
 800c962:	bf00      	nop
 800c964:	3710      	adds	r7, #16
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}
 800c96a:	bf00      	nop
 800c96c:	200053ec 	.word	0x200053ec
 800c970:	200053f0 	.word	0x200053f0
 800c974:	e000ed04 	.word	0xe000ed04

0800c978 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c978:	b480      	push	{r7}
 800c97a:	b085      	sub	sp, #20
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c980:	4b0e      	ldr	r3, [pc, #56]	; (800c9bc <prvGetNextExpireTime+0x44>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d101      	bne.n	800c98e <prvGetNextExpireTime+0x16>
 800c98a:	2201      	movs	r2, #1
 800c98c:	e000      	b.n	800c990 <prvGetNextExpireTime+0x18>
 800c98e:	2200      	movs	r2, #0
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d105      	bne.n	800c9a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c99c:	4b07      	ldr	r3, [pc, #28]	; (800c9bc <prvGetNextExpireTime+0x44>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	68db      	ldr	r3, [r3, #12]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	60fb      	str	r3, [r7, #12]
 800c9a6:	e001      	b.n	800c9ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	3714      	adds	r7, #20
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b8:	4770      	bx	lr
 800c9ba:	bf00      	nop
 800c9bc:	200053e8 	.word	0x200053e8

0800c9c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b084      	sub	sp, #16
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c9c8:	f7ff f8f2 	bl	800bbb0 <xTaskGetTickCount>
 800c9cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c9ce:	4b0b      	ldr	r3, [pc, #44]	; (800c9fc <prvSampleTimeNow+0x3c>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	68fa      	ldr	r2, [r7, #12]
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d205      	bcs.n	800c9e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c9d8:	f000 f936 	bl	800cc48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2201      	movs	r2, #1
 800c9e0:	601a      	str	r2, [r3, #0]
 800c9e2:	e002      	b.n	800c9ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c9ea:	4a04      	ldr	r2, [pc, #16]	; (800c9fc <prvSampleTimeNow+0x3c>)
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	3710      	adds	r7, #16
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}
 800c9fa:	bf00      	nop
 800c9fc:	200053f8 	.word	0x200053f8

0800ca00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b086      	sub	sp, #24
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	60f8      	str	r0, [r7, #12]
 800ca08:	60b9      	str	r1, [r7, #8]
 800ca0a:	607a      	str	r2, [r7, #4]
 800ca0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	68ba      	ldr	r2, [r7, #8]
 800ca16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	68fa      	ldr	r2, [r7, #12]
 800ca1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ca1e:	68ba      	ldr	r2, [r7, #8]
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	429a      	cmp	r2, r3
 800ca24:	d812      	bhi.n	800ca4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca26:	687a      	ldr	r2, [r7, #4]
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	1ad2      	subs	r2, r2, r3
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	699b      	ldr	r3, [r3, #24]
 800ca30:	429a      	cmp	r2, r3
 800ca32:	d302      	bcc.n	800ca3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ca34:	2301      	movs	r3, #1
 800ca36:	617b      	str	r3, [r7, #20]
 800ca38:	e01b      	b.n	800ca72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ca3a:	4b10      	ldr	r3, [pc, #64]	; (800ca7c <prvInsertTimerInActiveList+0x7c>)
 800ca3c:	681a      	ldr	r2, [r3, #0]
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	3304      	adds	r3, #4
 800ca42:	4619      	mov	r1, r3
 800ca44:	4610      	mov	r0, r2
 800ca46:	f7fd fcd8 	bl	800a3fa <vListInsert>
 800ca4a:	e012      	b.n	800ca72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ca4c:	687a      	ldr	r2, [r7, #4]
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	429a      	cmp	r2, r3
 800ca52:	d206      	bcs.n	800ca62 <prvInsertTimerInActiveList+0x62>
 800ca54:	68ba      	ldr	r2, [r7, #8]
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	429a      	cmp	r2, r3
 800ca5a:	d302      	bcc.n	800ca62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	617b      	str	r3, [r7, #20]
 800ca60:	e007      	b.n	800ca72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ca62:	4b07      	ldr	r3, [pc, #28]	; (800ca80 <prvInsertTimerInActiveList+0x80>)
 800ca64:	681a      	ldr	r2, [r3, #0]
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	3304      	adds	r3, #4
 800ca6a:	4619      	mov	r1, r3
 800ca6c:	4610      	mov	r0, r2
 800ca6e:	f7fd fcc4 	bl	800a3fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ca72:	697b      	ldr	r3, [r7, #20]
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3718      	adds	r7, #24
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}
 800ca7c:	200053ec 	.word	0x200053ec
 800ca80:	200053e8 	.word	0x200053e8

0800ca84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b08e      	sub	sp, #56	; 0x38
 800ca88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ca8a:	e0ca      	b.n	800cc22 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	da18      	bge.n	800cac4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ca92:	1d3b      	adds	r3, r7, #4
 800ca94:	3304      	adds	r3, #4
 800ca96:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ca98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d10a      	bne.n	800cab4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ca9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa2:	f383 8811 	msr	BASEPRI, r3
 800caa6:	f3bf 8f6f 	isb	sy
 800caaa:	f3bf 8f4f 	dsb	sy
 800caae:	61fb      	str	r3, [r7, #28]
}
 800cab0:	bf00      	nop
 800cab2:	e7fe      	b.n	800cab2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800caba:	6850      	ldr	r0, [r2, #4]
 800cabc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cabe:	6892      	ldr	r2, [r2, #8]
 800cac0:	4611      	mov	r1, r2
 800cac2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	f2c0 80aa 	blt.w	800cc20 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad2:	695b      	ldr	r3, [r3, #20]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d004      	beq.n	800cae2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cada:	3304      	adds	r3, #4
 800cadc:	4618      	mov	r0, r3
 800cade:	f7fd fcc5 	bl	800a46c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cae2:	463b      	mov	r3, r7
 800cae4:	4618      	mov	r0, r3
 800cae6:	f7ff ff6b 	bl	800c9c0 <prvSampleTimeNow>
 800caea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2b09      	cmp	r3, #9
 800caf0:	f200 8097 	bhi.w	800cc22 <prvProcessReceivedCommands+0x19e>
 800caf4:	a201      	add	r2, pc, #4	; (adr r2, 800cafc <prvProcessReceivedCommands+0x78>)
 800caf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cafa:	bf00      	nop
 800cafc:	0800cb25 	.word	0x0800cb25
 800cb00:	0800cb25 	.word	0x0800cb25
 800cb04:	0800cb25 	.word	0x0800cb25
 800cb08:	0800cb99 	.word	0x0800cb99
 800cb0c:	0800cbad 	.word	0x0800cbad
 800cb10:	0800cbf7 	.word	0x0800cbf7
 800cb14:	0800cb25 	.word	0x0800cb25
 800cb18:	0800cb25 	.word	0x0800cb25
 800cb1c:	0800cb99 	.word	0x0800cb99
 800cb20:	0800cbad 	.word	0x0800cbad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cb24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb2a:	f043 0301 	orr.w	r3, r3, #1
 800cb2e:	b2da      	uxtb	r2, r3
 800cb30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cb36:	68ba      	ldr	r2, [r7, #8]
 800cb38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb3a:	699b      	ldr	r3, [r3, #24]
 800cb3c:	18d1      	adds	r1, r2, r3
 800cb3e:	68bb      	ldr	r3, [r7, #8]
 800cb40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb44:	f7ff ff5c 	bl	800ca00 <prvInsertTimerInActiveList>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d069      	beq.n	800cc22 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb50:	6a1b      	ldr	r3, [r3, #32]
 800cb52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb54:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb5c:	f003 0304 	and.w	r3, r3, #4
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d05e      	beq.n	800cc22 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cb64:	68ba      	ldr	r2, [r7, #8]
 800cb66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb68:	699b      	ldr	r3, [r3, #24]
 800cb6a:	441a      	add	r2, r3
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	9300      	str	r3, [sp, #0]
 800cb70:	2300      	movs	r3, #0
 800cb72:	2100      	movs	r1, #0
 800cb74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb76:	f7ff fe03 	bl	800c780 <xTimerGenericCommand>
 800cb7a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cb7c:	6a3b      	ldr	r3, [r7, #32]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d14f      	bne.n	800cc22 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800cb82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb86:	f383 8811 	msr	BASEPRI, r3
 800cb8a:	f3bf 8f6f 	isb	sy
 800cb8e:	f3bf 8f4f 	dsb	sy
 800cb92:	61bb      	str	r3, [r7, #24]
}
 800cb94:	bf00      	nop
 800cb96:	e7fe      	b.n	800cb96 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb9e:	f023 0301 	bic.w	r3, r3, #1
 800cba2:	b2da      	uxtb	r2, r3
 800cba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cba6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800cbaa:	e03a      	b.n	800cc22 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cbb2:	f043 0301 	orr.w	r3, r3, #1
 800cbb6:	b2da      	uxtb	r2, r3
 800cbb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cbbe:	68ba      	ldr	r2, [r7, #8]
 800cbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cbc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc6:	699b      	ldr	r3, [r3, #24]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d10a      	bne.n	800cbe2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800cbcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd0:	f383 8811 	msr	BASEPRI, r3
 800cbd4:	f3bf 8f6f 	isb	sy
 800cbd8:	f3bf 8f4f 	dsb	sy
 800cbdc:	617b      	str	r3, [r7, #20]
}
 800cbde:	bf00      	nop
 800cbe0:	e7fe      	b.n	800cbe0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cbe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbe4:	699a      	ldr	r2, [r3, #24]
 800cbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe8:	18d1      	adds	r1, r2, r3
 800cbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbf0:	f7ff ff06 	bl	800ca00 <prvInsertTimerInActiveList>
					break;
 800cbf4:	e015      	b.n	800cc22 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cbf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cbfc:	f003 0302 	and.w	r3, r3, #2
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d103      	bne.n	800cc0c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800cc04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc06:	f7fd fa89 	bl	800a11c <vPortFree>
 800cc0a:	e00a      	b.n	800cc22 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc12:	f023 0301 	bic.w	r3, r3, #1
 800cc16:	b2da      	uxtb	r2, r3
 800cc18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cc1e:	e000      	b.n	800cc22 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cc20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cc22:	4b08      	ldr	r3, [pc, #32]	; (800cc44 <prvProcessReceivedCommands+0x1c0>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	1d39      	adds	r1, r7, #4
 800cc28:	2200      	movs	r2, #0
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f7fe fa16 	bl	800b05c <xQueueReceive>
 800cc30:	4603      	mov	r3, r0
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	f47f af2a 	bne.w	800ca8c <prvProcessReceivedCommands+0x8>
	}
}
 800cc38:	bf00      	nop
 800cc3a:	bf00      	nop
 800cc3c:	3730      	adds	r7, #48	; 0x30
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop
 800cc44:	200053f0 	.word	0x200053f0

0800cc48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b088      	sub	sp, #32
 800cc4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cc4e:	e048      	b.n	800cce2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cc50:	4b2d      	ldr	r3, [pc, #180]	; (800cd08 <prvSwitchTimerLists+0xc0>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	68db      	ldr	r3, [r3, #12]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc5a:	4b2b      	ldr	r3, [pc, #172]	; (800cd08 <prvSwitchTimerLists+0xc0>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	68db      	ldr	r3, [r3, #12]
 800cc60:	68db      	ldr	r3, [r3, #12]
 800cc62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	3304      	adds	r3, #4
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f7fd fbff 	bl	800a46c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	6a1b      	ldr	r3, [r3, #32]
 800cc72:	68f8      	ldr	r0, [r7, #12]
 800cc74:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc7c:	f003 0304 	and.w	r3, r3, #4
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d02e      	beq.n	800cce2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	699b      	ldr	r3, [r3, #24]
 800cc88:	693a      	ldr	r2, [r7, #16]
 800cc8a:	4413      	add	r3, r2
 800cc8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cc8e:	68ba      	ldr	r2, [r7, #8]
 800cc90:	693b      	ldr	r3, [r7, #16]
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d90e      	bls.n	800ccb4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	68ba      	ldr	r2, [r7, #8]
 800cc9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	68fa      	ldr	r2, [r7, #12]
 800cca0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cca2:	4b19      	ldr	r3, [pc, #100]	; (800cd08 <prvSwitchTimerLists+0xc0>)
 800cca4:	681a      	ldr	r2, [r3, #0]
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	3304      	adds	r3, #4
 800ccaa:	4619      	mov	r1, r3
 800ccac:	4610      	mov	r0, r2
 800ccae:	f7fd fba4 	bl	800a3fa <vListInsert>
 800ccb2:	e016      	b.n	800cce2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	9300      	str	r3, [sp, #0]
 800ccb8:	2300      	movs	r3, #0
 800ccba:	693a      	ldr	r2, [r7, #16]
 800ccbc:	2100      	movs	r1, #0
 800ccbe:	68f8      	ldr	r0, [r7, #12]
 800ccc0:	f7ff fd5e 	bl	800c780 <xTimerGenericCommand>
 800ccc4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d10a      	bne.n	800cce2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800cccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd0:	f383 8811 	msr	BASEPRI, r3
 800ccd4:	f3bf 8f6f 	isb	sy
 800ccd8:	f3bf 8f4f 	dsb	sy
 800ccdc:	603b      	str	r3, [r7, #0]
}
 800ccde:	bf00      	nop
 800cce0:	e7fe      	b.n	800cce0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cce2:	4b09      	ldr	r3, [pc, #36]	; (800cd08 <prvSwitchTimerLists+0xc0>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d1b1      	bne.n	800cc50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ccec:	4b06      	ldr	r3, [pc, #24]	; (800cd08 <prvSwitchTimerLists+0xc0>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ccf2:	4b06      	ldr	r3, [pc, #24]	; (800cd0c <prvSwitchTimerLists+0xc4>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	4a04      	ldr	r2, [pc, #16]	; (800cd08 <prvSwitchTimerLists+0xc0>)
 800ccf8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ccfa:	4a04      	ldr	r2, [pc, #16]	; (800cd0c <prvSwitchTimerLists+0xc4>)
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	6013      	str	r3, [r2, #0]
}
 800cd00:	bf00      	nop
 800cd02:	3718      	adds	r7, #24
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}
 800cd08:	200053e8 	.word	0x200053e8
 800cd0c:	200053ec 	.word	0x200053ec

0800cd10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b082      	sub	sp, #8
 800cd14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cd16:	f7fd fcfd 	bl	800a714 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cd1a:	4b15      	ldr	r3, [pc, #84]	; (800cd70 <prvCheckForValidListAndQueue+0x60>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d120      	bne.n	800cd64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cd22:	4814      	ldr	r0, [pc, #80]	; (800cd74 <prvCheckForValidListAndQueue+0x64>)
 800cd24:	f7fd fb18 	bl	800a358 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cd28:	4813      	ldr	r0, [pc, #76]	; (800cd78 <prvCheckForValidListAndQueue+0x68>)
 800cd2a:	f7fd fb15 	bl	800a358 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cd2e:	4b13      	ldr	r3, [pc, #76]	; (800cd7c <prvCheckForValidListAndQueue+0x6c>)
 800cd30:	4a10      	ldr	r2, [pc, #64]	; (800cd74 <prvCheckForValidListAndQueue+0x64>)
 800cd32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cd34:	4b12      	ldr	r3, [pc, #72]	; (800cd80 <prvCheckForValidListAndQueue+0x70>)
 800cd36:	4a10      	ldr	r2, [pc, #64]	; (800cd78 <prvCheckForValidListAndQueue+0x68>)
 800cd38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	9300      	str	r3, [sp, #0]
 800cd3e:	4b11      	ldr	r3, [pc, #68]	; (800cd84 <prvCheckForValidListAndQueue+0x74>)
 800cd40:	4a11      	ldr	r2, [pc, #68]	; (800cd88 <prvCheckForValidListAndQueue+0x78>)
 800cd42:	2110      	movs	r1, #16
 800cd44:	200a      	movs	r0, #10
 800cd46:	f7fd ff53 	bl	800abf0 <xQueueGenericCreateStatic>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	4a08      	ldr	r2, [pc, #32]	; (800cd70 <prvCheckForValidListAndQueue+0x60>)
 800cd4e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cd50:	4b07      	ldr	r3, [pc, #28]	; (800cd70 <prvCheckForValidListAndQueue+0x60>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d005      	beq.n	800cd64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cd58:	4b05      	ldr	r3, [pc, #20]	; (800cd70 <prvCheckForValidListAndQueue+0x60>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	490b      	ldr	r1, [pc, #44]	; (800cd8c <prvCheckForValidListAndQueue+0x7c>)
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f7fe fb6c 	bl	800b43c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cd64:	f7fd fd06 	bl	800a774 <vPortExitCritical>
}
 800cd68:	bf00      	nop
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
 800cd6e:	bf00      	nop
 800cd70:	200053f0 	.word	0x200053f0
 800cd74:	200053c0 	.word	0x200053c0
 800cd78:	200053d4 	.word	0x200053d4
 800cd7c:	200053e8 	.word	0x200053e8
 800cd80:	200053ec 	.word	0x200053ec
 800cd84:	2000549c 	.word	0x2000549c
 800cd88:	200053fc 	.word	0x200053fc
 800cd8c:	0800d630 	.word	0x0800d630

0800cd90 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b086      	sub	sp, #24
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d10a      	bne.n	800cdb8 <pvTimerGetTimerID+0x28>
	__asm volatile
 800cda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda6:	f383 8811 	msr	BASEPRI, r3
 800cdaa:	f3bf 8f6f 	isb	sy
 800cdae:	f3bf 8f4f 	dsb	sy
 800cdb2:	60fb      	str	r3, [r7, #12]
}
 800cdb4:	bf00      	nop
 800cdb6:	e7fe      	b.n	800cdb6 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800cdb8:	f7fd fcac 	bl	800a714 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	69db      	ldr	r3, [r3, #28]
 800cdc0:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800cdc2:	f7fd fcd7 	bl	800a774 <vPortExitCritical>

	return pvReturn;
 800cdc6:	693b      	ldr	r3, [r7, #16]
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3718      	adds	r7, #24
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}

0800cdd0 <__libc_init_array>:
 800cdd0:	b570      	push	{r4, r5, r6, lr}
 800cdd2:	4d0d      	ldr	r5, [pc, #52]	; (800ce08 <__libc_init_array+0x38>)
 800cdd4:	4c0d      	ldr	r4, [pc, #52]	; (800ce0c <__libc_init_array+0x3c>)
 800cdd6:	1b64      	subs	r4, r4, r5
 800cdd8:	10a4      	asrs	r4, r4, #2
 800cdda:	2600      	movs	r6, #0
 800cddc:	42a6      	cmp	r6, r4
 800cdde:	d109      	bne.n	800cdf4 <__libc_init_array+0x24>
 800cde0:	4d0b      	ldr	r5, [pc, #44]	; (800ce10 <__libc_init_array+0x40>)
 800cde2:	4c0c      	ldr	r4, [pc, #48]	; (800ce14 <__libc_init_array+0x44>)
 800cde4:	f000 f8f0 	bl	800cfc8 <_init>
 800cde8:	1b64      	subs	r4, r4, r5
 800cdea:	10a4      	asrs	r4, r4, #2
 800cdec:	2600      	movs	r6, #0
 800cdee:	42a6      	cmp	r6, r4
 800cdf0:	d105      	bne.n	800cdfe <__libc_init_array+0x2e>
 800cdf2:	bd70      	pop	{r4, r5, r6, pc}
 800cdf4:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdf8:	4798      	blx	r3
 800cdfa:	3601      	adds	r6, #1
 800cdfc:	e7ee      	b.n	800cddc <__libc_init_array+0xc>
 800cdfe:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce02:	4798      	blx	r3
 800ce04:	3601      	adds	r6, #1
 800ce06:	e7f2      	b.n	800cdee <__libc_init_array+0x1e>
 800ce08:	0800d768 	.word	0x0800d768
 800ce0c:	0800d768 	.word	0x0800d768
 800ce10:	0800d768 	.word	0x0800d768
 800ce14:	0800d76c 	.word	0x0800d76c

0800ce18 <memcpy>:
 800ce18:	440a      	add	r2, r1
 800ce1a:	4291      	cmp	r1, r2
 800ce1c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce20:	d100      	bne.n	800ce24 <memcpy+0xc>
 800ce22:	4770      	bx	lr
 800ce24:	b510      	push	{r4, lr}
 800ce26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce2e:	4291      	cmp	r1, r2
 800ce30:	d1f9      	bne.n	800ce26 <memcpy+0xe>
 800ce32:	bd10      	pop	{r4, pc}

0800ce34 <memset>:
 800ce34:	4402      	add	r2, r0
 800ce36:	4603      	mov	r3, r0
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d100      	bne.n	800ce3e <memset+0xa>
 800ce3c:	4770      	bx	lr
 800ce3e:	f803 1b01 	strb.w	r1, [r3], #1
 800ce42:	e7f9      	b.n	800ce38 <memset+0x4>

0800ce44 <_free_r>:
 800ce44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce46:	2900      	cmp	r1, #0
 800ce48:	d044      	beq.n	800ced4 <_free_r+0x90>
 800ce4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce4e:	9001      	str	r0, [sp, #4]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	f1a1 0404 	sub.w	r4, r1, #4
 800ce56:	bfb8      	it	lt
 800ce58:	18e4      	addlt	r4, r4, r3
 800ce5a:	f000 f8a9 	bl	800cfb0 <__malloc_lock>
 800ce5e:	4a1e      	ldr	r2, [pc, #120]	; (800ced8 <_free_r+0x94>)
 800ce60:	9801      	ldr	r0, [sp, #4]
 800ce62:	6813      	ldr	r3, [r2, #0]
 800ce64:	b933      	cbnz	r3, 800ce74 <_free_r+0x30>
 800ce66:	6063      	str	r3, [r4, #4]
 800ce68:	6014      	str	r4, [r2, #0]
 800ce6a:	b003      	add	sp, #12
 800ce6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce70:	f000 b8a4 	b.w	800cfbc <__malloc_unlock>
 800ce74:	42a3      	cmp	r3, r4
 800ce76:	d908      	bls.n	800ce8a <_free_r+0x46>
 800ce78:	6825      	ldr	r5, [r4, #0]
 800ce7a:	1961      	adds	r1, r4, r5
 800ce7c:	428b      	cmp	r3, r1
 800ce7e:	bf01      	itttt	eq
 800ce80:	6819      	ldreq	r1, [r3, #0]
 800ce82:	685b      	ldreq	r3, [r3, #4]
 800ce84:	1949      	addeq	r1, r1, r5
 800ce86:	6021      	streq	r1, [r4, #0]
 800ce88:	e7ed      	b.n	800ce66 <_free_r+0x22>
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	b10b      	cbz	r3, 800ce94 <_free_r+0x50>
 800ce90:	42a3      	cmp	r3, r4
 800ce92:	d9fa      	bls.n	800ce8a <_free_r+0x46>
 800ce94:	6811      	ldr	r1, [r2, #0]
 800ce96:	1855      	adds	r5, r2, r1
 800ce98:	42a5      	cmp	r5, r4
 800ce9a:	d10b      	bne.n	800ceb4 <_free_r+0x70>
 800ce9c:	6824      	ldr	r4, [r4, #0]
 800ce9e:	4421      	add	r1, r4
 800cea0:	1854      	adds	r4, r2, r1
 800cea2:	42a3      	cmp	r3, r4
 800cea4:	6011      	str	r1, [r2, #0]
 800cea6:	d1e0      	bne.n	800ce6a <_free_r+0x26>
 800cea8:	681c      	ldr	r4, [r3, #0]
 800ceaa:	685b      	ldr	r3, [r3, #4]
 800ceac:	6053      	str	r3, [r2, #4]
 800ceae:	4421      	add	r1, r4
 800ceb0:	6011      	str	r1, [r2, #0]
 800ceb2:	e7da      	b.n	800ce6a <_free_r+0x26>
 800ceb4:	d902      	bls.n	800cebc <_free_r+0x78>
 800ceb6:	230c      	movs	r3, #12
 800ceb8:	6003      	str	r3, [r0, #0]
 800ceba:	e7d6      	b.n	800ce6a <_free_r+0x26>
 800cebc:	6825      	ldr	r5, [r4, #0]
 800cebe:	1961      	adds	r1, r4, r5
 800cec0:	428b      	cmp	r3, r1
 800cec2:	bf04      	itt	eq
 800cec4:	6819      	ldreq	r1, [r3, #0]
 800cec6:	685b      	ldreq	r3, [r3, #4]
 800cec8:	6063      	str	r3, [r4, #4]
 800ceca:	bf04      	itt	eq
 800cecc:	1949      	addeq	r1, r1, r5
 800cece:	6021      	streq	r1, [r4, #0]
 800ced0:	6054      	str	r4, [r2, #4]
 800ced2:	e7ca      	b.n	800ce6a <_free_r+0x26>
 800ced4:	b003      	add	sp, #12
 800ced6:	bd30      	pop	{r4, r5, pc}
 800ced8:	200054ec 	.word	0x200054ec

0800cedc <cleanup_glue>:
 800cedc:	b538      	push	{r3, r4, r5, lr}
 800cede:	460c      	mov	r4, r1
 800cee0:	6809      	ldr	r1, [r1, #0]
 800cee2:	4605      	mov	r5, r0
 800cee4:	b109      	cbz	r1, 800ceea <cleanup_glue+0xe>
 800cee6:	f7ff fff9 	bl	800cedc <cleanup_glue>
 800ceea:	4621      	mov	r1, r4
 800ceec:	4628      	mov	r0, r5
 800ceee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cef2:	f7ff bfa7 	b.w	800ce44 <_free_r>
	...

0800cef8 <_reclaim_reent>:
 800cef8:	4b2c      	ldr	r3, [pc, #176]	; (800cfac <_reclaim_reent+0xb4>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	4283      	cmp	r3, r0
 800cefe:	b570      	push	{r4, r5, r6, lr}
 800cf00:	4604      	mov	r4, r0
 800cf02:	d051      	beq.n	800cfa8 <_reclaim_reent+0xb0>
 800cf04:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cf06:	b143      	cbz	r3, 800cf1a <_reclaim_reent+0x22>
 800cf08:	68db      	ldr	r3, [r3, #12]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d14a      	bne.n	800cfa4 <_reclaim_reent+0xac>
 800cf0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf10:	6819      	ldr	r1, [r3, #0]
 800cf12:	b111      	cbz	r1, 800cf1a <_reclaim_reent+0x22>
 800cf14:	4620      	mov	r0, r4
 800cf16:	f7ff ff95 	bl	800ce44 <_free_r>
 800cf1a:	6961      	ldr	r1, [r4, #20]
 800cf1c:	b111      	cbz	r1, 800cf24 <_reclaim_reent+0x2c>
 800cf1e:	4620      	mov	r0, r4
 800cf20:	f7ff ff90 	bl	800ce44 <_free_r>
 800cf24:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cf26:	b111      	cbz	r1, 800cf2e <_reclaim_reent+0x36>
 800cf28:	4620      	mov	r0, r4
 800cf2a:	f7ff ff8b 	bl	800ce44 <_free_r>
 800cf2e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cf30:	b111      	cbz	r1, 800cf38 <_reclaim_reent+0x40>
 800cf32:	4620      	mov	r0, r4
 800cf34:	f7ff ff86 	bl	800ce44 <_free_r>
 800cf38:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800cf3a:	b111      	cbz	r1, 800cf42 <_reclaim_reent+0x4a>
 800cf3c:	4620      	mov	r0, r4
 800cf3e:	f7ff ff81 	bl	800ce44 <_free_r>
 800cf42:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cf44:	b111      	cbz	r1, 800cf4c <_reclaim_reent+0x54>
 800cf46:	4620      	mov	r0, r4
 800cf48:	f7ff ff7c 	bl	800ce44 <_free_r>
 800cf4c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cf4e:	b111      	cbz	r1, 800cf56 <_reclaim_reent+0x5e>
 800cf50:	4620      	mov	r0, r4
 800cf52:	f7ff ff77 	bl	800ce44 <_free_r>
 800cf56:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cf58:	b111      	cbz	r1, 800cf60 <_reclaim_reent+0x68>
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	f7ff ff72 	bl	800ce44 <_free_r>
 800cf60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf62:	b111      	cbz	r1, 800cf6a <_reclaim_reent+0x72>
 800cf64:	4620      	mov	r0, r4
 800cf66:	f7ff ff6d 	bl	800ce44 <_free_r>
 800cf6a:	69a3      	ldr	r3, [r4, #24]
 800cf6c:	b1e3      	cbz	r3, 800cfa8 <_reclaim_reent+0xb0>
 800cf6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cf70:	4620      	mov	r0, r4
 800cf72:	4798      	blx	r3
 800cf74:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cf76:	b1b9      	cbz	r1, 800cfa8 <_reclaim_reent+0xb0>
 800cf78:	4620      	mov	r0, r4
 800cf7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cf7e:	f7ff bfad 	b.w	800cedc <cleanup_glue>
 800cf82:	5949      	ldr	r1, [r1, r5]
 800cf84:	b941      	cbnz	r1, 800cf98 <_reclaim_reent+0xa0>
 800cf86:	3504      	adds	r5, #4
 800cf88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf8a:	2d80      	cmp	r5, #128	; 0x80
 800cf8c:	68d9      	ldr	r1, [r3, #12]
 800cf8e:	d1f8      	bne.n	800cf82 <_reclaim_reent+0x8a>
 800cf90:	4620      	mov	r0, r4
 800cf92:	f7ff ff57 	bl	800ce44 <_free_r>
 800cf96:	e7ba      	b.n	800cf0e <_reclaim_reent+0x16>
 800cf98:	680e      	ldr	r6, [r1, #0]
 800cf9a:	4620      	mov	r0, r4
 800cf9c:	f7ff ff52 	bl	800ce44 <_free_r>
 800cfa0:	4631      	mov	r1, r6
 800cfa2:	e7ef      	b.n	800cf84 <_reclaim_reent+0x8c>
 800cfa4:	2500      	movs	r5, #0
 800cfa6:	e7ef      	b.n	800cf88 <_reclaim_reent+0x90>
 800cfa8:	bd70      	pop	{r4, r5, r6, pc}
 800cfaa:	bf00      	nop
 800cfac:	20000010 	.word	0x20000010

0800cfb0 <__malloc_lock>:
 800cfb0:	4801      	ldr	r0, [pc, #4]	; (800cfb8 <__malloc_lock+0x8>)
 800cfb2:	f7f5 bb60 	b.w	8002676 <__retarget_lock_acquire_recursive>
 800cfb6:	bf00      	nop
 800cfb8:	20000894 	.word	0x20000894

0800cfbc <__malloc_unlock>:
 800cfbc:	4801      	ldr	r0, [pc, #4]	; (800cfc4 <__malloc_unlock+0x8>)
 800cfbe:	f7f5 bb6e 	b.w	800269e <__retarget_lock_release_recursive>
 800cfc2:	bf00      	nop
 800cfc4:	20000894 	.word	0x20000894

0800cfc8 <_init>:
 800cfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfca:	bf00      	nop
 800cfcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfce:	bc08      	pop	{r3}
 800cfd0:	469e      	mov	lr, r3
 800cfd2:	4770      	bx	lr

0800cfd4 <_fini>:
 800cfd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfd6:	bf00      	nop
 800cfd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfda:	bc08      	pop	{r3}
 800cfdc:	469e      	mov	lr, r3
 800cfde:	4770      	bx	lr
