
I4_BCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb90  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000780  0800ed30  0800ed30  0001ed30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f4b0  0800f4b0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800f4b0  0800f4b0  0001f4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f4b8  0800f4b8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f4b8  0800f4b8  0001f4b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f4bc  0800f4bc  0001f4bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800f4c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000054c0  20000074  0800f534  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005534  0800f534  00025534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d1dd  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000067a6  00000000  00000000  0004d281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023e0  00000000  00000000  00053a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002140  00000000  00000000  00055e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000206fe  00000000  00000000  00057f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003781c  00000000  00000000  00078646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b0a40  00000000  00000000  000afe62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001608a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000095e8  00000000  00000000  001608f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ed18 	.word	0x0800ed18

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800ed18 	.word	0x0800ed18

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2uiz>:
 800097c:	004a      	lsls	r2, r1, #1
 800097e:	d211      	bcs.n	80009a4 <__aeabi_d2uiz+0x28>
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d211      	bcs.n	80009aa <__aeabi_d2uiz+0x2e>
 8000986:	d50d      	bpl.n	80009a4 <__aeabi_d2uiz+0x28>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d40e      	bmi.n	80009b0 <__aeabi_d2uiz+0x34>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	fa23 f002 	lsr.w	r0, r3, r2
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d102      	bne.n	80009b6 <__aeabi_d2uiz+0x3a>
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	4770      	bx	lr
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	4770      	bx	lr

080009bc <__aeabi_uldivmod>:
 80009bc:	b953      	cbnz	r3, 80009d4 <__aeabi_uldivmod+0x18>
 80009be:	b94a      	cbnz	r2, 80009d4 <__aeabi_uldivmod+0x18>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bf08      	it	eq
 80009c4:	2800      	cmpeq	r0, #0
 80009c6:	bf1c      	itt	ne
 80009c8:	f04f 31ff 	movne.w	r1, #4294967295
 80009cc:	f04f 30ff 	movne.w	r0, #4294967295
 80009d0:	f000 b974 	b.w	8000cbc <__aeabi_idiv0>
 80009d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009dc:	f000 f806 	bl	80009ec <__udivmoddi4>
 80009e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e8:	b004      	add	sp, #16
 80009ea:	4770      	bx	lr

080009ec <__udivmoddi4>:
 80009ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f0:	9d08      	ldr	r5, [sp, #32]
 80009f2:	4604      	mov	r4, r0
 80009f4:	468e      	mov	lr, r1
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d14d      	bne.n	8000a96 <__udivmoddi4+0xaa>
 80009fa:	428a      	cmp	r2, r1
 80009fc:	4694      	mov	ip, r2
 80009fe:	d969      	bls.n	8000ad4 <__udivmoddi4+0xe8>
 8000a00:	fab2 f282 	clz	r2, r2
 8000a04:	b152      	cbz	r2, 8000a1c <__udivmoddi4+0x30>
 8000a06:	fa01 f302 	lsl.w	r3, r1, r2
 8000a0a:	f1c2 0120 	rsb	r1, r2, #32
 8000a0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a16:	ea41 0e03 	orr.w	lr, r1, r3
 8000a1a:	4094      	lsls	r4, r2
 8000a1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a20:	0c21      	lsrs	r1, r4, #16
 8000a22:	fbbe f6f8 	udiv	r6, lr, r8
 8000a26:	fa1f f78c 	uxth.w	r7, ip
 8000a2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a32:	fb06 f107 	mul.w	r1, r6, r7
 8000a36:	4299      	cmp	r1, r3
 8000a38:	d90a      	bls.n	8000a50 <__udivmoddi4+0x64>
 8000a3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a42:	f080 811f 	bcs.w	8000c84 <__udivmoddi4+0x298>
 8000a46:	4299      	cmp	r1, r3
 8000a48:	f240 811c 	bls.w	8000c84 <__udivmoddi4+0x298>
 8000a4c:	3e02      	subs	r6, #2
 8000a4e:	4463      	add	r3, ip
 8000a50:	1a5b      	subs	r3, r3, r1
 8000a52:	b2a4      	uxth	r4, r4
 8000a54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a58:	fb08 3310 	mls	r3, r8, r0, r3
 8000a5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a60:	fb00 f707 	mul.w	r7, r0, r7
 8000a64:	42a7      	cmp	r7, r4
 8000a66:	d90a      	bls.n	8000a7e <__udivmoddi4+0x92>
 8000a68:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a70:	f080 810a 	bcs.w	8000c88 <__udivmoddi4+0x29c>
 8000a74:	42a7      	cmp	r7, r4
 8000a76:	f240 8107 	bls.w	8000c88 <__udivmoddi4+0x29c>
 8000a7a:	4464      	add	r4, ip
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a82:	1be4      	subs	r4, r4, r7
 8000a84:	2600      	movs	r6, #0
 8000a86:	b11d      	cbz	r5, 8000a90 <__udivmoddi4+0xa4>
 8000a88:	40d4      	lsrs	r4, r2
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	428b      	cmp	r3, r1
 8000a98:	d909      	bls.n	8000aae <__udivmoddi4+0xc2>
 8000a9a:	2d00      	cmp	r5, #0
 8000a9c:	f000 80ef 	beq.w	8000c7e <__udivmoddi4+0x292>
 8000aa0:	2600      	movs	r6, #0
 8000aa2:	e9c5 0100 	strd	r0, r1, [r5]
 8000aa6:	4630      	mov	r0, r6
 8000aa8:	4631      	mov	r1, r6
 8000aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aae:	fab3 f683 	clz	r6, r3
 8000ab2:	2e00      	cmp	r6, #0
 8000ab4:	d14a      	bne.n	8000b4c <__udivmoddi4+0x160>
 8000ab6:	428b      	cmp	r3, r1
 8000ab8:	d302      	bcc.n	8000ac0 <__udivmoddi4+0xd4>
 8000aba:	4282      	cmp	r2, r0
 8000abc:	f200 80f9 	bhi.w	8000cb2 <__udivmoddi4+0x2c6>
 8000ac0:	1a84      	subs	r4, r0, r2
 8000ac2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	469e      	mov	lr, r3
 8000aca:	2d00      	cmp	r5, #0
 8000acc:	d0e0      	beq.n	8000a90 <__udivmoddi4+0xa4>
 8000ace:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ad2:	e7dd      	b.n	8000a90 <__udivmoddi4+0xa4>
 8000ad4:	b902      	cbnz	r2, 8000ad8 <__udivmoddi4+0xec>
 8000ad6:	deff      	udf	#255	; 0xff
 8000ad8:	fab2 f282 	clz	r2, r2
 8000adc:	2a00      	cmp	r2, #0
 8000ade:	f040 8092 	bne.w	8000c06 <__udivmoddi4+0x21a>
 8000ae2:	eba1 010c 	sub.w	r1, r1, ip
 8000ae6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aea:	fa1f fe8c 	uxth.w	lr, ip
 8000aee:	2601      	movs	r6, #1
 8000af0:	0c20      	lsrs	r0, r4, #16
 8000af2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000af6:	fb07 1113 	mls	r1, r7, r3, r1
 8000afa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000afe:	fb0e f003 	mul.w	r0, lr, r3
 8000b02:	4288      	cmp	r0, r1
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0x12c>
 8000b06:	eb1c 0101 	adds.w	r1, ip, r1
 8000b0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0x12a>
 8000b10:	4288      	cmp	r0, r1
 8000b12:	f200 80cb 	bhi.w	8000cac <__udivmoddi4+0x2c0>
 8000b16:	4643      	mov	r3, r8
 8000b18:	1a09      	subs	r1, r1, r0
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b20:	fb07 1110 	mls	r1, r7, r0, r1
 8000b24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b28:	fb0e fe00 	mul.w	lr, lr, r0
 8000b2c:	45a6      	cmp	lr, r4
 8000b2e:	d908      	bls.n	8000b42 <__udivmoddi4+0x156>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b38:	d202      	bcs.n	8000b40 <__udivmoddi4+0x154>
 8000b3a:	45a6      	cmp	lr, r4
 8000b3c:	f200 80bb 	bhi.w	8000cb6 <__udivmoddi4+0x2ca>
 8000b40:	4608      	mov	r0, r1
 8000b42:	eba4 040e 	sub.w	r4, r4, lr
 8000b46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b4a:	e79c      	b.n	8000a86 <__udivmoddi4+0x9a>
 8000b4c:	f1c6 0720 	rsb	r7, r6, #32
 8000b50:	40b3      	lsls	r3, r6
 8000b52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b62:	431c      	orrs	r4, r3
 8000b64:	40f9      	lsrs	r1, r7
 8000b66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b72:	0c20      	lsrs	r0, r4, #16
 8000b74:	fa1f fe8c 	uxth.w	lr, ip
 8000b78:	fb09 1118 	mls	r1, r9, r8, r1
 8000b7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b80:	fb08 f00e 	mul.w	r0, r8, lr
 8000b84:	4288      	cmp	r0, r1
 8000b86:	fa02 f206 	lsl.w	r2, r2, r6
 8000b8a:	d90b      	bls.n	8000ba4 <__udivmoddi4+0x1b8>
 8000b8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b94:	f080 8088 	bcs.w	8000ca8 <__udivmoddi4+0x2bc>
 8000b98:	4288      	cmp	r0, r1
 8000b9a:	f240 8085 	bls.w	8000ca8 <__udivmoddi4+0x2bc>
 8000b9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ba2:	4461      	add	r1, ip
 8000ba4:	1a09      	subs	r1, r1, r0
 8000ba6:	b2a4      	uxth	r4, r4
 8000ba8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bac:	fb09 1110 	mls	r1, r9, r0, r1
 8000bb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb8:	458e      	cmp	lr, r1
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x1e2>
 8000bbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bc4:	d26c      	bcs.n	8000ca0 <__udivmoddi4+0x2b4>
 8000bc6:	458e      	cmp	lr, r1
 8000bc8:	d96a      	bls.n	8000ca0 <__udivmoddi4+0x2b4>
 8000bca:	3802      	subs	r0, #2
 8000bcc:	4461      	add	r1, ip
 8000bce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000bd6:	eba1 010e 	sub.w	r1, r1, lr
 8000bda:	42a1      	cmp	r1, r4
 8000bdc:	46c8      	mov	r8, r9
 8000bde:	46a6      	mov	lr, r4
 8000be0:	d356      	bcc.n	8000c90 <__udivmoddi4+0x2a4>
 8000be2:	d053      	beq.n	8000c8c <__udivmoddi4+0x2a0>
 8000be4:	b15d      	cbz	r5, 8000bfe <__udivmoddi4+0x212>
 8000be6:	ebb3 0208 	subs.w	r2, r3, r8
 8000bea:	eb61 010e 	sbc.w	r1, r1, lr
 8000bee:	fa01 f707 	lsl.w	r7, r1, r7
 8000bf2:	fa22 f306 	lsr.w	r3, r2, r6
 8000bf6:	40f1      	lsrs	r1, r6
 8000bf8:	431f      	orrs	r7, r3
 8000bfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000bfe:	2600      	movs	r6, #0
 8000c00:	4631      	mov	r1, r6
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	f1c2 0320 	rsb	r3, r2, #32
 8000c0a:	40d8      	lsrs	r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	fa21 f303 	lsr.w	r3, r1, r3
 8000c14:	4091      	lsls	r1, r2
 8000c16:	4301      	orrs	r1, r0
 8000c18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1c:	fa1f fe8c 	uxth.w	lr, ip
 8000c20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c24:	fb07 3610 	mls	r6, r7, r0, r3
 8000c28:	0c0b      	lsrs	r3, r1, #16
 8000c2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c32:	429e      	cmp	r6, r3
 8000c34:	fa04 f402 	lsl.w	r4, r4, r2
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x260>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c42:	d22f      	bcs.n	8000ca4 <__udivmoddi4+0x2b8>
 8000c44:	429e      	cmp	r6, r3
 8000c46:	d92d      	bls.n	8000ca4 <__udivmoddi4+0x2b8>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1b9b      	subs	r3, r3, r6
 8000c4e:	b289      	uxth	r1, r1
 8000c50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c54:	fb07 3316 	mls	r3, r7, r6, r3
 8000c58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c60:	428b      	cmp	r3, r1
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x28a>
 8000c64:	eb1c 0101 	adds.w	r1, ip, r1
 8000c68:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c6c:	d216      	bcs.n	8000c9c <__udivmoddi4+0x2b0>
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d914      	bls.n	8000c9c <__udivmoddi4+0x2b0>
 8000c72:	3e02      	subs	r6, #2
 8000c74:	4461      	add	r1, ip
 8000c76:	1ac9      	subs	r1, r1, r3
 8000c78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c7c:	e738      	b.n	8000af0 <__udivmoddi4+0x104>
 8000c7e:	462e      	mov	r6, r5
 8000c80:	4628      	mov	r0, r5
 8000c82:	e705      	b.n	8000a90 <__udivmoddi4+0xa4>
 8000c84:	4606      	mov	r6, r0
 8000c86:	e6e3      	b.n	8000a50 <__udivmoddi4+0x64>
 8000c88:	4618      	mov	r0, r3
 8000c8a:	e6f8      	b.n	8000a7e <__udivmoddi4+0x92>
 8000c8c:	454b      	cmp	r3, r9
 8000c8e:	d2a9      	bcs.n	8000be4 <__udivmoddi4+0x1f8>
 8000c90:	ebb9 0802 	subs.w	r8, r9, r2
 8000c94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c98:	3801      	subs	r0, #1
 8000c9a:	e7a3      	b.n	8000be4 <__udivmoddi4+0x1f8>
 8000c9c:	4646      	mov	r6, r8
 8000c9e:	e7ea      	b.n	8000c76 <__udivmoddi4+0x28a>
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	e794      	b.n	8000bce <__udivmoddi4+0x1e2>
 8000ca4:	4640      	mov	r0, r8
 8000ca6:	e7d1      	b.n	8000c4c <__udivmoddi4+0x260>
 8000ca8:	46d0      	mov	r8, sl
 8000caa:	e77b      	b.n	8000ba4 <__udivmoddi4+0x1b8>
 8000cac:	3b02      	subs	r3, #2
 8000cae:	4461      	add	r1, ip
 8000cb0:	e732      	b.n	8000b18 <__udivmoddi4+0x12c>
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	e709      	b.n	8000aca <__udivmoddi4+0xde>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	e742      	b.n	8000b42 <__udivmoddi4+0x156>

08000cbc <__aeabi_idiv0>:
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <BtcRxVal>:
	return E_OK;

}

StdReturnType BtcRxVal()
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

	if(BtcReceivedDataOnBluetooth >= 116 && BtcReceivedDataOnBluetooth <= 132)
 8000cc4:	4bec      	ldr	r3, [pc, #944]	; (8001078 <BtcRxVal+0x3b8>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b73      	cmp	r3, #115	; 0x73
 8000cca:	d90a      	bls.n	8000ce2 <BtcRxVal+0x22>
 8000ccc:	4bea      	ldr	r3, [pc, #936]	; (8001078 <BtcRxVal+0x3b8>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b84      	cmp	r3, #132	; 0x84
 8000cd2:	d806      	bhi.n	8000ce2 <BtcRxVal+0x22>
	{

		Btc_TemperatureValue = BtcReceivedDataOnBluetooth - 100;
 8000cd4:	4be8      	ldr	r3, [pc, #928]	; (8001078 <BtcRxVal+0x3b8>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	3b64      	subs	r3, #100	; 0x64
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	4be7      	ldr	r3, [pc, #924]	; (800107c <BtcRxVal+0x3bc>)
 8000cde:	701a      	strb	r2, [r3, #0]
 8000ce0:	e00d      	b.n	8000cfe <BtcRxVal+0x3e>

	}
	else if(BtcReceivedDataOnBluetooth >= 150 && BtcReceivedDataOnBluetooth <= 157)
 8000ce2:	4be5      	ldr	r3, [pc, #916]	; (8001078 <BtcRxVal+0x3b8>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b95      	cmp	r3, #149	; 0x95
 8000ce8:	d909      	bls.n	8000cfe <BtcRxVal+0x3e>
 8000cea:	4be3      	ldr	r3, [pc, #908]	; (8001078 <BtcRxVal+0x3b8>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b9d      	cmp	r3, #157	; 0x9d
 8000cf0:	d805      	bhi.n	8000cfe <BtcRxVal+0x3e>
	{

		Btc_FanValue = BtcReceivedDataOnBluetooth - 150;
 8000cf2:	4be1      	ldr	r3, [pc, #900]	; (8001078 <BtcRxVal+0x3b8>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	336a      	adds	r3, #106	; 0x6a
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4be1      	ldr	r3, [pc, #900]	; (8001080 <BtcRxVal+0x3c0>)
 8000cfc:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	switch(BtcReceivedDataOnBluetooth)
 8000cfe:	4bde      	ldr	r3, [pc, #888]	; (8001078 <BtcRxVal+0x3b8>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	2bd5      	cmp	r3, #213	; 0xd5
 8000d06:	f200 8297 	bhi.w	8001238 <BtcRxVal+0x578>
 8000d0a:	a201      	add	r2, pc, #4	; (adr r2, 8000d10 <BtcRxVal+0x50>)
 8000d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d10:	080010a9 	.word	0x080010a9
 8000d14:	080010b1 	.word	0x080010b1
 8000d18:	080010b9 	.word	0x080010b9
 8000d1c:	080010c7 	.word	0x080010c7
 8000d20:	080010cf 	.word	0x080010cf
 8000d24:	080010dd 	.word	0x080010dd
 8000d28:	080010e5 	.word	0x080010e5
 8000d2c:	080010f3 	.word	0x080010f3
 8000d30:	080010fb 	.word	0x080010fb
 8000d34:	08001109 	.word	0x08001109
 8000d38:	08001111 	.word	0x08001111
 8000d3c:	08001119 	.word	0x08001119
 8000d40:	08001121 	.word	0x08001121
 8000d44:	08001129 	.word	0x08001129
 8000d48:	08001131 	.word	0x08001131
 8000d4c:	08001139 	.word	0x08001139
 8000d50:	08001141 	.word	0x08001141
 8000d54:	08001149 	.word	0x08001149
 8000d58:	08001151 	.word	0x08001151
 8000d5c:	08001159 	.word	0x08001159
 8000d60:	08001069 	.word	0x08001069
 8000d64:	08001071 	.word	0x08001071
 8000d68:	08001239 	.word	0x08001239
 8000d6c:	08001239 	.word	0x08001239
 8000d70:	08001239 	.word	0x08001239
 8000d74:	08001239 	.word	0x08001239
 8000d78:	08001239 	.word	0x08001239
 8000d7c:	08001239 	.word	0x08001239
 8000d80:	08001239 	.word	0x08001239
 8000d84:	08001239 	.word	0x08001239
 8000d88:	08001239 	.word	0x08001239
 8000d8c:	08001239 	.word	0x08001239
 8000d90:	08001239 	.word	0x08001239
 8000d94:	08001239 	.word	0x08001239
 8000d98:	08001239 	.word	0x08001239
 8000d9c:	08001239 	.word	0x08001239
 8000da0:	08001239 	.word	0x08001239
 8000da4:	08001239 	.word	0x08001239
 8000da8:	08001239 	.word	0x08001239
 8000dac:	08001239 	.word	0x08001239
 8000db0:	08001239 	.word	0x08001239
 8000db4:	08001239 	.word	0x08001239
 8000db8:	08001239 	.word	0x08001239
 8000dbc:	08001239 	.word	0x08001239
 8000dc0:	08001239 	.word	0x08001239
 8000dc4:	08001239 	.word	0x08001239
 8000dc8:	08001239 	.word	0x08001239
 8000dcc:	08001239 	.word	0x08001239
 8000dd0:	08001239 	.word	0x08001239
 8000dd4:	08001239 	.word	0x08001239
 8000dd8:	08001239 	.word	0x08001239
 8000ddc:	08001239 	.word	0x08001239
 8000de0:	08001239 	.word	0x08001239
 8000de4:	08001239 	.word	0x08001239
 8000de8:	08001239 	.word	0x08001239
 8000dec:	08001239 	.word	0x08001239
 8000df0:	08001239 	.word	0x08001239
 8000df4:	08001239 	.word	0x08001239
 8000df8:	08001239 	.word	0x08001239
 8000dfc:	08001239 	.word	0x08001239
 8000e00:	08001239 	.word	0x08001239
 8000e04:	08001239 	.word	0x08001239
 8000e08:	08001239 	.word	0x08001239
 8000e0c:	08001239 	.word	0x08001239
 8000e10:	08001239 	.word	0x08001239
 8000e14:	08001239 	.word	0x08001239
 8000e18:	08001239 	.word	0x08001239
 8000e1c:	08001239 	.word	0x08001239
 8000e20:	08001239 	.word	0x08001239
 8000e24:	08001239 	.word	0x08001239
 8000e28:	08001239 	.word	0x08001239
 8000e2c:	08001239 	.word	0x08001239
 8000e30:	08001239 	.word	0x08001239
 8000e34:	08001239 	.word	0x08001239
 8000e38:	08001239 	.word	0x08001239
 8000e3c:	08001239 	.word	0x08001239
 8000e40:	08001239 	.word	0x08001239
 8000e44:	08001239 	.word	0x08001239
 8000e48:	08001239 	.word	0x08001239
 8000e4c:	08001239 	.word	0x08001239
 8000e50:	08001239 	.word	0x08001239
 8000e54:	08001239 	.word	0x08001239
 8000e58:	08001239 	.word	0x08001239
 8000e5c:	08001239 	.word	0x08001239
 8000e60:	08001239 	.word	0x08001239
 8000e64:	08001239 	.word	0x08001239
 8000e68:	08001239 	.word	0x08001239
 8000e6c:	08001239 	.word	0x08001239
 8000e70:	08001239 	.word	0x08001239
 8000e74:	08001239 	.word	0x08001239
 8000e78:	08001239 	.word	0x08001239
 8000e7c:	08001239 	.word	0x08001239
 8000e80:	08001239 	.word	0x08001239
 8000e84:	08001239 	.word	0x08001239
 8000e88:	08001239 	.word	0x08001239
 8000e8c:	08001239 	.word	0x08001239
 8000e90:	08001239 	.word	0x08001239
 8000e94:	08001239 	.word	0x08001239
 8000e98:	08001239 	.word	0x08001239
 8000e9c:	08001089 	.word	0x08001089
 8000ea0:	08001091 	.word	0x08001091
 8000ea4:	08001099 	.word	0x08001099
 8000ea8:	080010a1 	.word	0x080010a1
 8000eac:	08001239 	.word	0x08001239
 8000eb0:	08001239 	.word	0x08001239
 8000eb4:	08001239 	.word	0x08001239
 8000eb8:	08001239 	.word	0x08001239
 8000ebc:	08001239 	.word	0x08001239
 8000ec0:	08001239 	.word	0x08001239
 8000ec4:	08001239 	.word	0x08001239
 8000ec8:	08001239 	.word	0x08001239
 8000ecc:	08001239 	.word	0x08001239
 8000ed0:	08001239 	.word	0x08001239
 8000ed4:	08001239 	.word	0x08001239
 8000ed8:	08001239 	.word	0x08001239
 8000edc:	08001239 	.word	0x08001239
 8000ee0:	08001239 	.word	0x08001239
 8000ee4:	08001239 	.word	0x08001239
 8000ee8:	08001239 	.word	0x08001239
 8000eec:	08001239 	.word	0x08001239
 8000ef0:	08001239 	.word	0x08001239
 8000ef4:	08001239 	.word	0x08001239
 8000ef8:	08001239 	.word	0x08001239
 8000efc:	08001239 	.word	0x08001239
 8000f00:	08001239 	.word	0x08001239
 8000f04:	08001239 	.word	0x08001239
 8000f08:	08001239 	.word	0x08001239
 8000f0c:	08001239 	.word	0x08001239
 8000f10:	08001239 	.word	0x08001239
 8000f14:	08001239 	.word	0x08001239
 8000f18:	08001239 	.word	0x08001239
 8000f1c:	08001239 	.word	0x08001239
 8000f20:	08001239 	.word	0x08001239
 8000f24:	08001239 	.word	0x08001239
 8000f28:	08001239 	.word	0x08001239
 8000f2c:	08001239 	.word	0x08001239
 8000f30:	08001239 	.word	0x08001239
 8000f34:	08001239 	.word	0x08001239
 8000f38:	08001239 	.word	0x08001239
 8000f3c:	08001239 	.word	0x08001239
 8000f40:	08001239 	.word	0x08001239
 8000f44:	08001239 	.word	0x08001239
 8000f48:	08001239 	.word	0x08001239
 8000f4c:	08001239 	.word	0x08001239
 8000f50:	08001239 	.word	0x08001239
 8000f54:	08001239 	.word	0x08001239
 8000f58:	08001239 	.word	0x08001239
 8000f5c:	08001239 	.word	0x08001239
 8000f60:	08001239 	.word	0x08001239
 8000f64:	08001239 	.word	0x08001239
 8000f68:	08001239 	.word	0x08001239
 8000f6c:	08001239 	.word	0x08001239
 8000f70:	08001239 	.word	0x08001239
 8000f74:	08001239 	.word	0x08001239
 8000f78:	08001239 	.word	0x08001239
 8000f7c:	08001239 	.word	0x08001239
 8000f80:	08001239 	.word	0x08001239
 8000f84:	08001239 	.word	0x08001239
 8000f88:	08001239 	.word	0x08001239
 8000f8c:	08001239 	.word	0x08001239
 8000f90:	08001239 	.word	0x08001239
 8000f94:	08001239 	.word	0x08001239
 8000f98:	08001239 	.word	0x08001239
 8000f9c:	08001239 	.word	0x08001239
 8000fa0:	08001239 	.word	0x08001239
 8000fa4:	08001239 	.word	0x08001239
 8000fa8:	08001239 	.word	0x08001239
 8000fac:	08001239 	.word	0x08001239
 8000fb0:	08001239 	.word	0x08001239
 8000fb4:	08001239 	.word	0x08001239
 8000fb8:	08001239 	.word	0x08001239
 8000fbc:	08001239 	.word	0x08001239
 8000fc0:	08001239 	.word	0x08001239
 8000fc4:	08001239 	.word	0x08001239
 8000fc8:	08001239 	.word	0x08001239
 8000fcc:	08001239 	.word	0x08001239
 8000fd0:	08001239 	.word	0x08001239
 8000fd4:	08001239 	.word	0x08001239
 8000fd8:	08001239 	.word	0x08001239
 8000fdc:	08001239 	.word	0x08001239
 8000fe0:	08001239 	.word	0x08001239
 8000fe4:	08001239 	.word	0x08001239
 8000fe8:	08001239 	.word	0x08001239
 8000fec:	08001239 	.word	0x08001239
 8000ff0:	08001239 	.word	0x08001239
 8000ff4:	08001239 	.word	0x08001239
 8000ff8:	08001239 	.word	0x08001239
 8000ffc:	08001239 	.word	0x08001239
 8001000:	08001239 	.word	0x08001239
 8001004:	08001239 	.word	0x08001239
 8001008:	08001239 	.word	0x08001239
 800100c:	08001239 	.word	0x08001239
 8001010:	08001239 	.word	0x08001239
 8001014:	08001239 	.word	0x08001239
 8001018:	08001239 	.word	0x08001239
 800101c:	08001239 	.word	0x08001239
 8001020:	08001239 	.word	0x08001239
 8001024:	08001239 	.word	0x08001239
 8001028:	08001239 	.word	0x08001239
 800102c:	08001161 	.word	0x08001161
 8001030:	08001169 	.word	0x08001169
 8001034:	08001177 	.word	0x08001177
 8001038:	0800119d 	.word	0x0800119d
 800103c:	080011a5 	.word	0x080011a5
 8001040:	08001211 	.word	0x08001211
 8001044:	08001231 	.word	0x08001231
 8001048:	080011ad 	.word	0x080011ad
 800104c:	080011b5 	.word	0x080011b5
 8001050:	080011bd 	.word	0x080011bd
 8001054:	080011d1 	.word	0x080011d1
 8001058:	080011d9 	.word	0x080011d9
 800105c:	080011ed 	.word	0x080011ed
 8001060:	080011f5 	.word	0x080011f5
 8001064:	08001209 	.word	0x08001209
	{

		case BTC_RX_EXTLIGHTS_REVERSELIGHT_ON:

			Btc_ReverseLight = BTC_RX_EXTLIGHTS_REVERSELIGHT_ON;
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <BtcRxVal+0x3c4>)
 800106a:	2215      	movs	r2, #21
 800106c:	701a      	strb	r2, [r3, #0]

			break;
 800106e:	e0e4      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF:

			Btc_ReverseLight = BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF;
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <BtcRxVal+0x3c4>)
 8001072:	2216      	movs	r2, #22
 8001074:	701a      	strb	r2, [r3, #0]

			break;
 8001076:	e0e0      	b.n	800123a <BtcRxVal+0x57a>
 8001078:	20000090 	.word	0x20000090
 800107c:	200000bd 	.word	0x200000bd
 8001080:	200000be 	.word	0x200000be
 8001084:	200000ad 	.word	0x200000ad

		case BTC_RX_EXTLIGHTS_POSITIONZERO:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONZERO;
 8001088:	4b6f      	ldr	r3, [pc, #444]	; (8001248 <BtcRxVal+0x588>)
 800108a:	2264      	movs	r2, #100	; 0x64
 800108c:	701a      	strb	r2, [r3, #0]

			break;
 800108e:	e0d4      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
 8001090:	4b6d      	ldr	r3, [pc, #436]	; (8001248 <BtcRxVal+0x588>)
 8001092:	2265      	movs	r2, #101	; 0x65
 8001094:	701a      	strb	r2, [r3, #0]

			break;
 8001096:	e0d0      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_POSITIONLIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
 8001098:	4b6b      	ldr	r3, [pc, #428]	; (8001248 <BtcRxVal+0x588>)
 800109a:	2266      	movs	r2, #102	; 0x66
 800109c:	701a      	strb	r2, [r3, #0]

			break;
 800109e:	e0cc      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
 80010a0:	4b69      	ldr	r3, [pc, #420]	; (8001248 <BtcRxVal+0x588>)
 80010a2:	2267      	movs	r2, #103	; 0x67
 80010a4:	701a      	strb	r2, [r3, #0]

			break;
 80010a6:	e0c8      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_CENLOC_ON:

			Btc_CenLoc = STD_HIGH;
 80010a8:	4b68      	ldr	r3, [pc, #416]	; (800124c <BtcRxVal+0x58c>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	701a      	strb	r2, [r3, #0]

			break;
 80010ae:	e0c4      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_CENLOC_OFF:

			Btc_CenLoc = STD_LOW;
 80010b0:	4b66      	ldr	r3, [pc, #408]	; (800124c <BtcRxVal+0x58c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]

			break;
 80010b6:	e0c0      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_HIGBEAM_ON:

			Btc_HighBeam = STD_HIGH;
 80010b8:	4b65      	ldr	r3, [pc, #404]	; (8001250 <BtcRxVal+0x590>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	701a      	strb	r2, [r3, #0]
			Btc_FlashHighBeam = STD_LOW;
 80010be:	4b65      	ldr	r3, [pc, #404]	; (8001254 <BtcRxVal+0x594>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]

			break;
 80010c4:	e0b9      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_HIGBEAM_OFF:

			Btc_HighBeam = STD_LOW;
 80010c6:	4b62      	ldr	r3, [pc, #392]	; (8001250 <BtcRxVal+0x590>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]

			break;
 80010cc:	e0b5      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_ON:

			Btc_FlashHighBeam = STD_HIGH;
 80010ce:	4b61      	ldr	r3, [pc, #388]	; (8001254 <BtcRxVal+0x594>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	701a      	strb	r2, [r3, #0]
			Btc_HighBeam = STD_LOW;
 80010d4:	4b5e      	ldr	r3, [pc, #376]	; (8001250 <BtcRxVal+0x590>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]

			break;
 80010da:	e0ae      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_OFF:

			Btc_FlashHighBeam = STD_LOW;
 80010dc:	4b5d      	ldr	r3, [pc, #372]	; (8001254 <BtcRxVal+0x594>)
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]

			break;
 80010e2:	e0aa      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:

			Btc_TurnSignalLeft = STD_HIGH;
 80010e4:	4b5c      	ldr	r3, [pc, #368]	; (8001258 <BtcRxVal+0x598>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	701a      	strb	r2, [r3, #0]
			Btc_TurnSignalRight = STD_LOW;
 80010ea:	4b5c      	ldr	r3, [pc, #368]	; (800125c <BtcRxVal+0x59c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]

			break;
 80010f0:	e0a3      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:

			Btc_TurnSignalLeft = STD_LOW;
 80010f2:	4b59      	ldr	r3, [pc, #356]	; (8001258 <BtcRxVal+0x598>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]

			break;
 80010f8:	e09f      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_ESTLIGHTS_TURNSIGNALRIGHT_ON:

			Btc_TurnSignalRight = STD_HIGH;
 80010fa:	4b58      	ldr	r3, [pc, #352]	; (800125c <BtcRxVal+0x59c>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	701a      	strb	r2, [r3, #0]
			Btc_TurnSignalLeft = STD_LOW;
 8001100:	4b55      	ldr	r3, [pc, #340]	; (8001258 <BtcRxVal+0x598>)
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]

			break;
 8001106:	e098      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_ESTLIGHTS_TURNSIGNALRIGHT_OFF:

			Btc_TurnSignalRight = STD_LOW;
 8001108:	4b54      	ldr	r3, [pc, #336]	; (800125c <BtcRxVal+0x59c>)
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]

			break;
 800110e:	e094      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:

			Btc_HazardLight = STD_HIGH;
 8001110:	4b53      	ldr	r3, [pc, #332]	; (8001260 <BtcRxVal+0x5a0>)
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]

			break;
 8001116:	e090      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:

			Btc_HazardLight = STD_LOW;
 8001118:	4b51      	ldr	r3, [pc, #324]	; (8001260 <BtcRxVal+0x5a0>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]

			break;
 800111e:	e08c      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:

			Btc_FrontFogLight = STD_HIGH;
 8001120:	4b50      	ldr	r3, [pc, #320]	; (8001264 <BtcRxVal+0x5a4>)
 8001122:	2201      	movs	r2, #1
 8001124:	701a      	strb	r2, [r3, #0]

			break;
 8001126:	e088      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:

			Btc_FrontFogLight = STD_LOW;
 8001128:	4b4e      	ldr	r3, [pc, #312]	; (8001264 <BtcRxVal+0x5a4>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]

			break;
 800112e:	e084      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:

			Btc_RearFogLight = STD_HIGH;
 8001130:	4b4d      	ldr	r3, [pc, #308]	; (8001268 <BtcRxVal+0x5a8>)
 8001132:	2201      	movs	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]

			break;
 8001136:	e080      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:

			Btc_RearFogLight = STD_LOW;
 8001138:	4b4b      	ldr	r3, [pc, #300]	; (8001268 <BtcRxVal+0x5a8>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]

			break;
 800113e:	e07c      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_BRAKELIGHTON:

			Btc_BrakeLight = STD_HIGH;
 8001140:	4b4a      	ldr	r3, [pc, #296]	; (800126c <BtcRxVal+0x5ac>)
 8001142:	2201      	movs	r2, #1
 8001144:	701a      	strb	r2, [r3, #0]

			break;
 8001146:	e078      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:

			Btc_BrakeLight = STD_LOW;
 8001148:	4b48      	ldr	r3, [pc, #288]	; (800126c <BtcRxVal+0x5ac>)
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]

			break;
 800114e:	e074      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:

			Btc_IntLights = STD_HIGH;
 8001150:	4b47      	ldr	r3, [pc, #284]	; (8001270 <BtcRxVal+0x5b0>)
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]

			break;
 8001156:	e070      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:

			Btc_IntLights = STD_LOW;
 8001158:	4b45      	ldr	r3, [pc, #276]	; (8001270 <BtcRxVal+0x5b0>)
 800115a:	2200      	movs	r2, #0
 800115c:	701a      	strb	r2, [r3, #0]

			break;
 800115e:	e06c      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_HVAC_NORMALMODE_ON:

			Btc_NormalMode = STD_HIGH;
 8001160:	4b44      	ldr	r3, [pc, #272]	; (8001274 <BtcRxVal+0x5b4>)
 8001162:	2201      	movs	r2, #1
 8001164:	701a      	strb	r2, [r3, #0]

			break;
 8001166:	e068      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_HVAC_RECIRCULATIONMODE_ON:

			Btc_NormalMode 			= STD_LOW;
 8001168:	4b42      	ldr	r3, [pc, #264]	; (8001274 <BtcRxVal+0x5b4>)
 800116a:	2200      	movs	r2, #0
 800116c:	701a      	strb	r2, [r3, #0]
			Btc_RecirculationMode 	= STD_HIGH;
 800116e:	4b42      	ldr	r3, [pc, #264]	; (8001278 <BtcRxVal+0x5b8>)
 8001170:	2201      	movs	r2, #1
 8001172:	701a      	strb	r2, [r3, #0]

			break;
 8001174:	e061      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_HVAC_AUTOMATICMODE_ON:

			Btc_NormalMode 			= STD_LOW;
 8001176:	4b3f      	ldr	r3, [pc, #252]	; (8001274 <BtcRxVal+0x5b4>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
			Btc_RecirculationMode 	= STD_LOW;
 800117c:	4b3e      	ldr	r3, [pc, #248]	; (8001278 <BtcRxVal+0x5b8>)
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
			Btc_LegVents 			= STD_LOW;
 8001182:	4b3e      	ldr	r3, [pc, #248]	; (800127c <BtcRxVal+0x5bc>)
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
			Btc_MidVents 			= STD_LOW;
 8001188:	4b3d      	ldr	r3, [pc, #244]	; (8001280 <BtcRxVal+0x5c0>)
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
			Btc_WindshieldVents 	= STD_LOW;
 800118e:	4b3d      	ldr	r3, [pc, #244]	; (8001284 <BtcRxVal+0x5c4>)
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode 		= STD_HIGH;
 8001194:	4b3c      	ldr	r3, [pc, #240]	; (8001288 <BtcRxVal+0x5c8>)
 8001196:	2201      	movs	r2, #1
 8001198:	701a      	strb	r2, [r3, #0]

			break;
 800119a:	e04e      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_HVAC_BACKWINDOWDEFROSTON:

			Btc_BackwindowDefrost = STD_HIGH;
 800119c:	4b3b      	ldr	r3, [pc, #236]	; (800128c <BtcRxVal+0x5cc>)
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]

			break;
 80011a2:	e04a      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_HVAC_BACKWINDOWDEFROSTOFF:

			Btc_BackwindowDefrost = STD_LOW;
 80011a4:	4b39      	ldr	r3, [pc, #228]	; (800128c <BtcRxVal+0x5cc>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]

			break;
 80011aa:	e046      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_HVAC_AC_ON:

			Btc_AC = STD_HIGH;
 80011ac:	4b38      	ldr	r3, [pc, #224]	; (8001290 <BtcRxVal+0x5d0>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]

			break;
 80011b2:	e042      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_HVAC_AC_OFF:

			Btc_AC = STD_LOW;
 80011b4:	4b36      	ldr	r3, [pc, #216]	; (8001290 <BtcRxVal+0x5d0>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]

			break;
 80011ba:	e03e      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_HVAC_LEGVENT_ON:

			Btc_LegVents 			= STD_HIGH;
 80011bc:	4b2f      	ldr	r3, [pc, #188]	; (800127c <BtcRxVal+0x5bc>)
 80011be:	2201      	movs	r2, #1
 80011c0:	701a      	strb	r2, [r3, #0]
			Btc_WindshieldDefrost 	= STD_LOW;
 80011c2:	4b34      	ldr	r3, [pc, #208]	; (8001294 <BtcRxVal+0x5d4>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode 		= STD_LOW;
 80011c8:	4b2f      	ldr	r3, [pc, #188]	; (8001288 <BtcRxVal+0x5c8>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]

			break;
 80011ce:	e034      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_HVAC_LEGVENT_OFF:

			Btc_LegVents = STD_LOW;
 80011d0:	4b2a      	ldr	r3, [pc, #168]	; (800127c <BtcRxVal+0x5bc>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]

			break;
 80011d6:	e030      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_HVAC_MIDVENT_ON:

			Btc_MidVents 			= STD_HIGH;
 80011d8:	4b29      	ldr	r3, [pc, #164]	; (8001280 <BtcRxVal+0x5c0>)
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
			Btc_WindshieldDefrost 	= STD_LOW;
 80011de:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <BtcRxVal+0x5d4>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode 		= STD_LOW;
 80011e4:	4b28      	ldr	r3, [pc, #160]	; (8001288 <BtcRxVal+0x5c8>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]

			break;
 80011ea:	e026      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_HVAC_MIDVENT_OFF:

			Btc_MidVents = STD_LOW;
 80011ec:	4b24      	ldr	r3, [pc, #144]	; (8001280 <BtcRxVal+0x5c0>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	701a      	strb	r2, [r3, #0]

			break;
 80011f2:	e022      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_HVAC_WINDSHIELDVENT_ON:

			Btc_WindshieldVents 	= STD_HIGH;
 80011f4:	4b23      	ldr	r3, [pc, #140]	; (8001284 <BtcRxVal+0x5c4>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	701a      	strb	r2, [r3, #0]
			Btc_WindshieldDefrost 	= STD_LOW;
 80011fa:	4b26      	ldr	r3, [pc, #152]	; (8001294 <BtcRxVal+0x5d4>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode 		= STD_LOW;
 8001200:	4b21      	ldr	r3, [pc, #132]	; (8001288 <BtcRxVal+0x5c8>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]

			break;
 8001206:	e018      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_HVAC_WINDSHIELDVENT_OFF:

			Btc_WindshieldVents = STD_LOW;
 8001208:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <BtcRxVal+0x5c4>)
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]

			break;
 800120e:	e014      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_HVAC_WINDSHIELDDEFROST_ON:

			Btc_WindshieldDefrost	= STD_HIGH;
 8001210:	4b20      	ldr	r3, [pc, #128]	; (8001294 <BtcRxVal+0x5d4>)
 8001212:	2201      	movs	r2, #1
 8001214:	701a      	strb	r2, [r3, #0]
			Btc_LegVents 			= STD_LOW;
 8001216:	4b19      	ldr	r3, [pc, #100]	; (800127c <BtcRxVal+0x5bc>)
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
			Btc_MidVents 			= STD_LOW;
 800121c:	4b18      	ldr	r3, [pc, #96]	; (8001280 <BtcRxVal+0x5c0>)
 800121e:	2200      	movs	r2, #0
 8001220:	701a      	strb	r2, [r3, #0]
			Btc_WindshieldVents 	= STD_LOW;
 8001222:	4b18      	ldr	r3, [pc, #96]	; (8001284 <BtcRxVal+0x5c4>)
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode 		= STD_LOW;
 8001228:	4b17      	ldr	r3, [pc, #92]	; (8001288 <BtcRxVal+0x5c8>)
 800122a:	2200      	movs	r2, #0
 800122c:	701a      	strb	r2, [r3, #0]

			break;
 800122e:	e004      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_HVAC_WINDSHIELDDEFROST_OFF:

			Btc_WindshieldDefrost = STD_LOW;
 8001230:	4b18      	ldr	r3, [pc, #96]	; (8001294 <BtcRxVal+0x5d4>)
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]


			break;
 8001236:	e000      	b.n	800123a <BtcRxVal+0x57a>

		default:

			break;
 8001238:	bf00      	nop

	}

	return 1;
 800123a:	2301      	movs	r3, #1

}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	200000a4 	.word	0x200000a4
 800124c:	20000095 	.word	0x20000095
 8001250:	200000a5 	.word	0x200000a5
 8001254:	200000a6 	.word	0x200000a6
 8001258:	200000a8 	.word	0x200000a8
 800125c:	200000a9 	.word	0x200000a9
 8001260:	200000aa 	.word	0x200000aa
 8001264:	200000a7 	.word	0x200000a7
 8001268:	200000ac 	.word	0x200000ac
 800126c:	200000ab 	.word	0x200000ab
 8001270:	200000e5 	.word	0x200000e5
 8001274:	200000c7 	.word	0x200000c7
 8001278:	200000c6 	.word	0x200000c6
 800127c:	200000bf 	.word	0x200000bf
 8001280:	200000c0 	.word	0x200000c0
 8001284:	200000c1 	.word	0x200000c1
 8001288:	200000c5 	.word	0x200000c5
 800128c:	200000c3 	.word	0x200000c3
 8001290:	200000c4 	.word	0x200000c4
 8001294:	200000c2 	.word	0x200000c2

08001298 <BtcEnableUart>:

StdReturnType BtcEnableUart()
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0

	uint8 status = STD_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	71fb      	strb	r3, [r7, #7]

	if(HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1) != E_NOT_OK)
 80012a2:	2201      	movs	r2, #1
 80012a4:	490e      	ldr	r1, [pc, #56]	; (80012e0 <BtcEnableUart+0x48>)
 80012a6:	480f      	ldr	r0, [pc, #60]	; (80012e4 <BtcEnableUart+0x4c>)
 80012a8:	f009 fa70 	bl	800a78c <HAL_UART_Receive_IT>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d007      	beq.n	80012c2 <BtcEnableUart+0x2a>
	{
		HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1);
 80012b2:	2201      	movs	r2, #1
 80012b4:	490a      	ldr	r1, [pc, #40]	; (80012e0 <BtcEnableUart+0x48>)
 80012b6:	480b      	ldr	r0, [pc, #44]	; (80012e4 <BtcEnableUart+0x4c>)
 80012b8:	f009 fa68 	bl	800a78c <HAL_UART_Receive_IT>
		status = E_OK;
 80012bc:	2300      	movs	r3, #0
 80012be:	71fb      	strb	r3, [r7, #7]
 80012c0:	e009      	b.n	80012d6 <BtcEnableUart+0x3e>
	}
	else if(HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1) == E_NOT_OK)
 80012c2:	2201      	movs	r2, #1
 80012c4:	4906      	ldr	r1, [pc, #24]	; (80012e0 <BtcEnableUart+0x48>)
 80012c6:	4807      	ldr	r0, [pc, #28]	; (80012e4 <BtcEnableUart+0x4c>)
 80012c8:	f009 fa60 	bl	800a78c <HAL_UART_Receive_IT>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d101      	bne.n	80012d6 <BtcEnableUart+0x3e>
	{
		status = E_NOT_OK;
 80012d2:	2301      	movs	r3, #1
 80012d4:	71fb      	strb	r3, [r7, #7]
	else
	{
		/* do nothing */
	}

	return status;
 80012d6:	79fb      	ldrb	r3, [r7, #7]

}
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000090 	.word	0x20000090
 80012e4:	20000864 	.word	0x20000864

080012e8 <BtcMainFunction>:

void BtcMainFunction()
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0

	BtcEnableUart();
 80012ec:	f7ff ffd4 	bl	8001298 <BtcEnableUart>
	BtcRxVal();
 80012f0:	f7ff fce6 	bl	8000cc0 <BtcRxVal>

}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <CenLocState>:

	return E_OK;
}

StdReturnType CenLocState()
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0

	uint8 status = E_OK;
 80012fe:	2300      	movs	r3, #0
 8001300:	71fb      	strb	r3, [r7, #7]

	if(CenLoc_PreviousState != CenLoc_CurrentState)
 8001302:	4b14      	ldr	r3, [pc, #80]	; (8001354 <CenLocState+0x5c>)
 8001304:	781a      	ldrb	r2, [r3, #0]
 8001306:	4b14      	ldr	r3, [pc, #80]	; (8001358 <CenLocState+0x60>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	429a      	cmp	r2, r3
 800130c:	d01c      	beq.n	8001348 <CenLocState+0x50>
	{
		CenLoc_PreviousStateFlag 		= CenLoc_PreviousState;
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <CenLocState+0x5c>)
 8001310:	781a      	ldrb	r2, [r3, #0]
 8001312:	4b12      	ldr	r3, [pc, #72]	; (800135c <CenLocState+0x64>)
 8001314:	701a      	strb	r2, [r3, #0]
		CenLoc_PreviousState 			= CenLoc_CurrentState;
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <CenLocState+0x60>)
 8001318:	781a      	ldrb	r2, [r3, #0]
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <CenLocState+0x5c>)
 800131c:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim2IRQFlag 				= STD_LOW;
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <CenLocState+0x68>)
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim5IRQFlag 				= STD_LOW;
 8001324:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <CenLocState+0x6c>)
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim3IRQFlag				= STD_LOW;
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <CenLocState+0x70>)
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim11IRQFlag				= STD_LOW;
 8001330:	4b0e      	ldr	r3, [pc, #56]	; (800136c <CenLocState+0x74>)
 8001332:	2200      	movs	r2, #0
 8001334:	701a      	strb	r2, [r3, #0]

		HAL_TIM_Base_Init(&htim2);
 8001336:	480e      	ldr	r0, [pc, #56]	; (8001370 <CenLocState+0x78>)
 8001338:	f008 f8b6 	bl	80094a8 <HAL_TIM_Base_Init>
		HAL_TIM_Base_Init(&htim3);
 800133c:	480d      	ldr	r0, [pc, #52]	; (8001374 <CenLocState+0x7c>)
 800133e:	f008 f8b3 	bl	80094a8 <HAL_TIM_Base_Init>
		HAL_TIM_Base_Init(&htim5);
 8001342:	480d      	ldr	r0, [pc, #52]	; (8001378 <CenLocState+0x80>)
 8001344:	f008 f8b0 	bl	80094a8 <HAL_TIM_Base_Init>

		/* do nothing */

	}

	return status;
 8001348:	79fb      	ldrb	r3, [r7, #7]

}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000092 	.word	0x20000092
 8001358:	20000091 	.word	0x20000091
 800135c:	20000094 	.word	0x20000094
 8001360:	20000097 	.word	0x20000097
 8001364:	20000099 	.word	0x20000099
 8001368:	20000098 	.word	0x20000098
 800136c:	2000009a 	.word	0x2000009a
 8001370:	2000042c 	.word	0x2000042c
 8001374:	200004e0 	.word	0x200004e0
 8001378:	20000648 	.word	0x20000648

0800137c <CenLocSecAlmStateToOff>:

void CenLocSecAlmStateToOff()
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0

	if(CenLoc_CurrentState == STD_HIGH)
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <CenLocSecAlmStateToOff+0x1c>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d102      	bne.n	800138e <CenLocSecAlmStateToOff+0x12>
	{

		SecAlm_Trigger = STD_LOW;
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <CenLocSecAlmStateToOff+0x20>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	20000091 	.word	0x20000091
 800139c:	200000f6 	.word	0x200000f6

080013a0 <CenLocRxBtcState>:

void CenLocRxBtcState()
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0

	if(Btc_CenLoc == STD_HIGH)
 80013a4:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <CenLocRxBtcState+0x30>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d104      	bne.n	80013b6 <CenLocRxBtcState+0x16>
	{

		CenLoc_CurrentState = Btc_CenLoc;
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <CenLocRxBtcState+0x30>)
 80013ae:	781a      	ldrb	r2, [r3, #0]
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <CenLocRxBtcState+0x34>)
 80013b2:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 80013b4:	e007      	b.n	80013c6 <CenLocRxBtcState+0x26>
	else if(Btc_CenLoc == STD_LOW)
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <CenLocRxBtcState+0x30>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d103      	bne.n	80013c6 <CenLocRxBtcState+0x26>
		CenLoc_CurrentState = Btc_CenLoc;
 80013be:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <CenLocRxBtcState+0x30>)
 80013c0:	781a      	ldrb	r2, [r3, #0]
 80013c2:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <CenLocRxBtcState+0x34>)
 80013c4:	701a      	strb	r2, [r3, #0]
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	20000095 	.word	0x20000095
 80013d4:	20000091 	.word	0x20000091

080013d8 <CenLocToggleDoorLED>:

void CenLocToggleDoorLED(uint8 PinState)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CENLOC_DOOR_LED_PORT, CENLOC_DOOR_LED_PIN, PinState);
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	461a      	mov	r2, r3
 80013e6:	2180      	movs	r1, #128	; 0x80
 80013e8:	4803      	ldr	r0, [pc, #12]	; (80013f8 <CenLocToggleDoorLED+0x20>)
 80013ea:	f004 ffbb 	bl	8006364 <HAL_GPIO_WritePin>

}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40020400 	.word	0x40020400

080013fc <CenLocFollowMeHome>:

void CenLocFollowMeHome()
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0

	if(CenLoc_Tim5IRQFlag == 1)
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <CenLocFollowMeHome+0x50>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d10c      	bne.n	8001422 <CenLocFollowMeHome+0x26>
	{

		ExtLightsFrontFogLight(STD_HIGH);
 8001408:	2001      	movs	r0, #1
 800140a:	f000 fbed 	bl	8001be8 <ExtLightsFrontFogLight>
		ExtLightsDayTimeRunningLight(STD_HIGH);
 800140e:	2001      	movs	r0, #1
 8001410:	f000 fbd8 	bl	8001bc4 <ExtLightsDayTimeRunningLight>
		ExtLightsLowBeam(STD_HIGH);
 8001414:	2001      	movs	r0, #1
 8001416:	f000 fbb1 	bl	8001b7c <ExtLightsLowBeam>
		ExtLightsRearPositionLight(STD_HIGH);
 800141a:	2001      	movs	r0, #1
 800141c:	f000 fc1a 	bl	8001c54 <ExtLightsRearPositionLight>

		/* do nothing */

	}

}
 8001420:	e012      	b.n	8001448 <CenLocFollowMeHome+0x4c>
	else if(CenLoc_Tim5IRQFlag == 2)
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <CenLocFollowMeHome+0x50>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b02      	cmp	r3, #2
 8001428:	d10e      	bne.n	8001448 <CenLocFollowMeHome+0x4c>
		ExtLightsFrontFogLight(STD_LOW);
 800142a:	2000      	movs	r0, #0
 800142c:	f000 fbdc 	bl	8001be8 <ExtLightsFrontFogLight>
		ExtLightsDayTimeRunningLight(STD_LOW);
 8001430:	2000      	movs	r0, #0
 8001432:	f000 fbc7 	bl	8001bc4 <ExtLightsDayTimeRunningLight>
		ExtLightsLowBeam(STD_LOW);
 8001436:	2000      	movs	r0, #0
 8001438:	f000 fba0 	bl	8001b7c <ExtLightsLowBeam>
		ExtLightsRearPositionLight(STD_LOW);
 800143c:	2000      	movs	r0, #0
 800143e:	f000 fc09 	bl	8001c54 <ExtLightsRearPositionLight>
		HAL_TIM_Base_Stop_IT(&htim5);
 8001442:	4803      	ldr	r0, [pc, #12]	; (8001450 <CenLocFollowMeHome+0x54>)
 8001444:	f008 f994 	bl	8009770 <HAL_TIM_Base_Stop_IT>
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000099 	.word	0x20000099
 8001450:	20000648 	.word	0x20000648

08001454 <CenLocBlinkSignals>:

void CenLocBlinkSignals()
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0

	ExtLightsTurnSignalLeft(CenLoc_BlinkState);
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <CenLocBlinkSignals+0x1c>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f000 fbd5 	bl	8001c0c <ExtLightsTurnSignalLeft>
	ExtLightsTurnSignalRight(CenLoc_BlinkState);
 8001462:	4b03      	ldr	r3, [pc, #12]	; (8001470 <CenLocBlinkSignals+0x1c>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f000 fbe2 	bl	8001c30 <ExtLightsTurnSignalRight>

}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000093 	.word	0x20000093

08001474 <CenLocUnlockSequence>:

void CenLocUnlockSequence()
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop_IT(&htim3);
 8001478:	4833      	ldr	r0, [pc, #204]	; (8001548 <CenLocUnlockSequence+0xd4>)
 800147a:	f008 f979 	bl	8009770 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 800147e:	4833      	ldr	r0, [pc, #204]	; (800154c <CenLocUnlockSequence+0xd8>)
 8001480:	f008 f8e4 	bl	800964c <HAL_TIM_Base_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001484:	4b30      	ldr	r3, [pc, #192]	; (8001548 <CenLocUnlockSequence+0xd4>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2200      	movs	r2, #0
 800148a:	625a      	str	r2, [r3, #36]	; 0x24

	CenLocToggleDoorLED(CenLoc_CurrentState);
 800148c:	4b30      	ldr	r3, [pc, #192]	; (8001550 <CenLocUnlockSequence+0xdc>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ffa1 	bl	80013d8 <CenLocToggleDoorLED>
	CenLocFollowMeHome();
 8001496:	f7ff ffb1 	bl	80013fc <CenLocFollowMeHome>

	localPreviousState = STD_HIGH;
 800149a:	4b2e      	ldr	r3, [pc, #184]	; (8001554 <CenLocUnlockSequence+0xe0>)
 800149c:	2201      	movs	r2, #1
 800149e:	701a      	strb	r2, [r3, #0]

	if(CenLoc_Tim2IRQFlag <= 4)
 80014a0:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <CenLocUnlockSequence+0xe4>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b04      	cmp	r3, #4
 80014a6:	d83f      	bhi.n	8001528 <CenLocUnlockSequence+0xb4>
	{

		HAL_TIM_Base_Start_IT(&htim2);
 80014a8:	482c      	ldr	r0, [pc, #176]	; (800155c <CenLocUnlockSequence+0xe8>)
 80014aa:	f008 f8cf 	bl	800964c <HAL_TIM_Base_Start_IT>

		switch(CenLoc_Tim2IRQFlag)
 80014ae:	4b2a      	ldr	r3, [pc, #168]	; (8001558 <CenLocUnlockSequence+0xe4>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	d843      	bhi.n	8001540 <CenLocUnlockSequence+0xcc>
 80014b8:	a201      	add	r2, pc, #4	; (adr r2, 80014c0 <CenLocUnlockSequence+0x4c>)
 80014ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014be:	bf00      	nop
 80014c0:	080014d1 	.word	0x080014d1
 80014c4:	080014e7 	.word	0x080014e7
 80014c8:	080014fd 	.word	0x080014fd
 80014cc:	08001513 	.word	0x08001513
		{

			case 1:

				CenLoc_BlinkState = STD_HIGH;
 80014d0:	4b23      	ldr	r3, [pc, #140]	; (8001560 <CenLocUnlockSequence+0xec>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	701a      	strb	r2, [r3, #0]
				CenLocToggleBuzzer(CenLoc_BlinkState);
 80014d6:	4b22      	ldr	r3, [pc, #136]	; (8001560 <CenLocUnlockSequence+0xec>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 f8f2 	bl	80016c4 <CenLocToggleBuzzer>
				CenLocBlinkSignals();
 80014e0:	f7ff ffb8 	bl	8001454 <CenLocBlinkSignals>

				break;
 80014e4:	e02d      	b.n	8001542 <CenLocUnlockSequence+0xce>

			case 2:

				CenLoc_BlinkState = STD_LOW;
 80014e6:	4b1e      	ldr	r3, [pc, #120]	; (8001560 <CenLocUnlockSequence+0xec>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]
				CenLocToggleBuzzer(CenLoc_BlinkState);
 80014ec:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <CenLocUnlockSequence+0xec>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 f8e7 	bl	80016c4 <CenLocToggleBuzzer>
				CenLocBlinkSignals();
 80014f6:	f7ff ffad 	bl	8001454 <CenLocBlinkSignals>

				break;
 80014fa:	e022      	b.n	8001542 <CenLocUnlockSequence+0xce>

			case 3:

				CenLoc_BlinkState = STD_HIGH;
 80014fc:	4b18      	ldr	r3, [pc, #96]	; (8001560 <CenLocUnlockSequence+0xec>)
 80014fe:	2201      	movs	r2, #1
 8001500:	701a      	strb	r2, [r3, #0]
				CenLocToggleBuzzer(CenLoc_BlinkState);
 8001502:	4b17      	ldr	r3, [pc, #92]	; (8001560 <CenLocUnlockSequence+0xec>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f000 f8dc 	bl	80016c4 <CenLocToggleBuzzer>
				CenLocBlinkSignals();
 800150c:	f7ff ffa2 	bl	8001454 <CenLocBlinkSignals>

				break;
 8001510:	e017      	b.n	8001542 <CenLocUnlockSequence+0xce>

			case 4:

				CenLoc_BlinkState = STD_LOW;
 8001512:	4b13      	ldr	r3, [pc, #76]	; (8001560 <CenLocUnlockSequence+0xec>)
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
				CenLocToggleBuzzer(CenLoc_BlinkState);
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <CenLocUnlockSequence+0xec>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f000 f8d1 	bl	80016c4 <CenLocToggleBuzzer>
				CenLocBlinkSignals();
 8001522:	f7ff ff97 	bl	8001454 <CenLocBlinkSignals>

				break;
 8001526:	e00c      	b.n	8001542 <CenLocUnlockSequence+0xce>
				break;

		}

	}
	else if(CenLoc_Tim2IRQFlag == 5)
 8001528:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <CenLocUnlockSequence+0xe4>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b05      	cmp	r3, #5
 800152e:	d108      	bne.n	8001542 <CenLocUnlockSequence+0xce>
	{

		HAL_TIM_Base_Stop_IT(&htim2);
 8001530:	480a      	ldr	r0, [pc, #40]	; (800155c <CenLocUnlockSequence+0xe8>)
 8001532:	f008 f91d 	bl	8009770 <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <CenLocUnlockSequence+0xe8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2200      	movs	r2, #0
 800153c:	625a      	str	r2, [r3, #36]	; 0x24

		/* do nothing */

	}

}
 800153e:	e000      	b.n	8001542 <CenLocUnlockSequence+0xce>
				break;
 8001540:	bf00      	nop
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200004e0 	.word	0x200004e0
 800154c:	20000648 	.word	0x20000648
 8001550:	20000091 	.word	0x20000091
 8001554:	20000096 	.word	0x20000096
 8001558:	20000097 	.word	0x20000097
 800155c:	2000042c 	.word	0x2000042c
 8001560:	20000093 	.word	0x20000093

08001564 <CenLocLockSequence>:

void CenLocLockSequence()
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0

	CenLocToggleDoorLED(CenLoc_CurrentState);
 8001568:	4b21      	ldr	r3, [pc, #132]	; (80015f0 <CenLocLockSequence+0x8c>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff33 	bl	80013d8 <CenLocToggleDoorLED>
	CenLocFollowMeHome();
 8001572:	f7ff ff43 	bl	80013fc <CenLocFollowMeHome>


	if(CenLoc_Tim2IRQFlag <= 2 && localPreviousState == STD_HIGH)
 8001576:	4b1f      	ldr	r3, [pc, #124]	; (80015f4 <CenLocLockSequence+0x90>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b02      	cmp	r3, #2
 800157c:	d82b      	bhi.n	80015d6 <CenLocLockSequence+0x72>
 800157e:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <CenLocLockSequence+0x94>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d127      	bne.n	80015d6 <CenLocLockSequence+0x72>
	{
		HAL_TIM_Base_Start_IT(&htim5);
 8001586:	481d      	ldr	r0, [pc, #116]	; (80015fc <CenLocLockSequence+0x98>)
 8001588:	f008 f860 	bl	800964c <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim2);
 800158c:	481c      	ldr	r0, [pc, #112]	; (8001600 <CenLocLockSequence+0x9c>)
 800158e:	f008 f85d 	bl	800964c <HAL_TIM_Base_Start_IT>

		switch(CenLoc_Tim2IRQFlag)
 8001592:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <CenLocLockSequence+0x90>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d002      	beq.n	80015a0 <CenLocLockSequence+0x3c>
 800159a:	2b02      	cmp	r3, #2
 800159c:	d00b      	beq.n	80015b6 <CenLocLockSequence+0x52>

			break;

		default:

			break;
 800159e:	e018      	b.n	80015d2 <CenLocLockSequence+0x6e>
			CenLoc_BlinkState = STD_HIGH;
 80015a0:	4b18      	ldr	r3, [pc, #96]	; (8001604 <CenLocLockSequence+0xa0>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	701a      	strb	r2, [r3, #0]
			CenLocToggleBuzzer(CenLoc_BlinkState);
 80015a6:	4b17      	ldr	r3, [pc, #92]	; (8001604 <CenLocLockSequence+0xa0>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 f88a 	bl	80016c4 <CenLocToggleBuzzer>
			CenLocBlinkSignals();
 80015b0:	f7ff ff50 	bl	8001454 <CenLocBlinkSignals>
			break;
 80015b4:	e00d      	b.n	80015d2 <CenLocLockSequence+0x6e>
			CenLoc_BlinkState = STD_LOW;
 80015b6:	4b13      	ldr	r3, [pc, #76]	; (8001604 <CenLocLockSequence+0xa0>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
			CenLocToggleBuzzer(CenLoc_BlinkState);
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <CenLocLockSequence+0xa0>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 f87f 	bl	80016c4 <CenLocToggleBuzzer>
			CenLocBlinkSignals();
 80015c6:	f7ff ff45 	bl	8001454 <CenLocBlinkSignals>
			localPreviousState = STD_LOW;
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <CenLocLockSequence+0x94>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]
			break;
 80015d0:	bf00      	nop
		switch(CenLoc_Tim2IRQFlag)
 80015d2:	bf00      	nop
	else
	{
		/* do nothing */
	}

}
 80015d4:	e00a      	b.n	80015ec <CenLocLockSequence+0x88>
	else if(CenLoc_Tim2IRQFlag == 3)
 80015d6:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <CenLocLockSequence+0x90>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d106      	bne.n	80015ec <CenLocLockSequence+0x88>
		HAL_TIM_Base_Stop_IT(&htim2);
 80015de:	4808      	ldr	r0, [pc, #32]	; (8001600 <CenLocLockSequence+0x9c>)
 80015e0:	f008 f8c6 	bl	8009770 <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <CenLocLockSequence+0x9c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2200      	movs	r2, #0
 80015ea:	625a      	str	r2, [r3, #36]	; 0x24
}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000091 	.word	0x20000091
 80015f4:	20000097 	.word	0x20000097
 80015f8:	20000096 	.word	0x20000096
 80015fc:	20000648 	.word	0x20000648
 8001600:	2000042c 	.word	0x2000042c
 8001604:	20000093 	.word	0x20000093

08001608 <CenLocControlAlarmLed>:

void CenLocControlAlarmLed()
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	if(CenLoc_CurrentState == STD_HIGH)
 800160c:	4b17      	ldr	r3, [pc, #92]	; (800166c <CenLocControlAlarmLed+0x64>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d103      	bne.n	800161c <CenLocControlAlarmLed+0x14>
	{

		SecAlmToggleAlarmLed(STD_LOW);
 8001614:	2000      	movs	r0, #0
 8001616:	f001 f88b 	bl	8002730 <SecAlmToggleAlarmLed>
			/* do nothing */

		}

	}
}
 800161a:	e025      	b.n	8001668 <CenLocControlAlarmLed+0x60>
	else if(CenLoc_CurrentState == STD_LOW)
 800161c:	4b13      	ldr	r3, [pc, #76]	; (800166c <CenLocControlAlarmLed+0x64>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d121      	bne.n	8001668 <CenLocControlAlarmLed+0x60>
		HAL_TIM_Base_Start_IT(&htim3);
 8001624:	4812      	ldr	r0, [pc, #72]	; (8001670 <CenLocControlAlarmLed+0x68>)
 8001626:	f008 f811 	bl	800964c <HAL_TIM_Base_Start_IT>
		if(CenLoc_Tim3IRQFlag == 2)
 800162a:	4b12      	ldr	r3, [pc, #72]	; (8001674 <CenLocControlAlarmLed+0x6c>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b02      	cmp	r3, #2
 8001630:	d11a      	bne.n	8001668 <CenLocControlAlarmLed+0x60>
			HAL_TIM_Base_Start_IT(&htim11);
 8001632:	4811      	ldr	r0, [pc, #68]	; (8001678 <CenLocControlAlarmLed+0x70>)
 8001634:	f008 f80a 	bl	800964c <HAL_TIM_Base_Start_IT>
			if(CenLoc_Tim11IRQFlag == 1)
 8001638:	4b10      	ldr	r3, [pc, #64]	; (800167c <CenLocControlAlarmLed+0x74>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d103      	bne.n	8001648 <CenLocControlAlarmLed+0x40>
				SecAlmToggleAlarmLed(STD_HIGH);
 8001640:	2001      	movs	r0, #1
 8001642:	f001 f875 	bl	8002730 <SecAlmToggleAlarmLed>
}
 8001646:	e00f      	b.n	8001668 <CenLocControlAlarmLed+0x60>
			else if(CenLoc_Tim11IRQFlag > 1)
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <CenLocControlAlarmLed+0x74>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d90b      	bls.n	8001668 <CenLocControlAlarmLed+0x60>
				SecAlmToggleAlarmLed(STD_LOW);
 8001650:	2000      	movs	r0, #0
 8001652:	f001 f86d 	bl	8002730 <SecAlmToggleAlarmLed>
				CenLoc_Tim11IRQFlag = 0;
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <CenLocControlAlarmLed+0x74>)
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]
				CenLoc_Tim3IRQFlag = 1;
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <CenLocControlAlarmLed+0x6c>)
 800165e:	2201      	movs	r2, #1
 8001660:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim11);
 8001662:	4805      	ldr	r0, [pc, #20]	; (8001678 <CenLocControlAlarmLed+0x70>)
 8001664:	f008 f884 	bl	8009770 <HAL_TIM_Base_Stop_IT>
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000091 	.word	0x20000091
 8001670:	200004e0 	.word	0x200004e0
 8001674:	20000098 	.word	0x20000098
 8001678:	200007b0 	.word	0x200007b0
 800167c:	2000009a 	.word	0x2000009a

08001680 <CenLocLockUnlockStates>:

StdReturnType CenLocLockUnlockStates()
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0

	if(CenLoc_CurrentState == STD_HIGH && SecAlm_Trigger == STD_LOW)
 8001684:	4b0d      	ldr	r3, [pc, #52]	; (80016bc <CenLocLockUnlockStates+0x3c>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d108      	bne.n	800169e <CenLocLockUnlockStates+0x1e>
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <CenLocLockUnlockStates+0x40>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d104      	bne.n	800169e <CenLocLockUnlockStates+0x1e>
	{

		CenLocUnlockSequence();
 8001694:	f7ff feee 	bl	8001474 <CenLocUnlockSequence>
		CenLocControlAlarmLed();
 8001698:	f7ff ffb6 	bl	8001608 <CenLocControlAlarmLed>
 800169c:	e00b      	b.n	80016b6 <CenLocLockUnlockStates+0x36>

	}
	else if(CenLoc_CurrentState == STD_LOW && SecAlm_Trigger == STD_LOW)
 800169e:	4b07      	ldr	r3, [pc, #28]	; (80016bc <CenLocLockUnlockStates+0x3c>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d107      	bne.n	80016b6 <CenLocLockUnlockStates+0x36>
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <CenLocLockUnlockStates+0x40>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d103      	bne.n	80016b6 <CenLocLockUnlockStates+0x36>
	{

		CenLocLockSequence();
 80016ae:	f7ff ff59 	bl	8001564 <CenLocLockSequence>
		CenLocControlAlarmLed();
 80016b2:	f7ff ffa9 	bl	8001608 <CenLocControlAlarmLed>

	}

	return 1;
 80016b6:	2301      	movs	r3, #1

}
 80016b8:	4618      	mov	r0, r3
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000091 	.word	0x20000091
 80016c0:	200000f6 	.word	0x200000f6

080016c4 <CenLocToggleBuzzer>:

void CenLocToggleBuzzer(uint8 PinState)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CENLOC_BUZZER_PORT, CENLOC_BUZZER_PIN, PinState);
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	461a      	mov	r2, r3
 80016d2:	2110      	movs	r1, #16
 80016d4:	4803      	ldr	r0, [pc, #12]	; (80016e4 <CenLocToggleBuzzer+0x20>)
 80016d6:	f004 fe45 	bl	8006364 <HAL_GPIO_WritePin>

}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40020800 	.word	0x40020800

080016e8 <CenLocMainFunction>:

void CenLocMainFunction()
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0

	CenLocRxBtcState();
 80016ec:	f7ff fe58 	bl	80013a0 <CenLocRxBtcState>
	CenLocState();
 80016f0:	f7ff fe02 	bl	80012f8 <CenLocState>
	CenLocSecAlmStateToOff();
 80016f4:	f7ff fe42 	bl	800137c <CenLocSecAlmStateToOff>
	CenLocLockUnlockStates();
 80016f8:	f7ff ffc2 	bl	8001680 <CenLocLockUnlockStates>

}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}

08001700 <ExtLightsTurnSignalHazardLight>:
void ExtLightsLightSwitchMode();
StdReturnType ExtLightsInit();
uint32 ExtLightsLightReadSensorValue();

void ExtLightsTurnSignalHazardLight()
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
	if(ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 8001704:	4b55      	ldr	r3, [pc, #340]	; (800185c <ExtLightsTurnSignalHazardLight+0x15c>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d121      	bne.n	8001750 <ExtLightsTurnSignalHazardLight+0x50>
	{

		HAL_TIM_Base_Start_IT(&htim2);
 800170c:	4854      	ldr	r0, [pc, #336]	; (8001860 <ExtLightsTurnSignalHazardLight+0x160>)
 800170e:	f007 ff9d 	bl	800964c <HAL_TIM_Base_Start_IT>

		if(ExtLights_LTSFlag % 2 == 1)
 8001712:	4b54      	ldr	r3, [pc, #336]	; (8001864 <ExtLightsTurnSignalHazardLight+0x164>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b00      	cmp	r3, #0
 800171e:	d005      	beq.n	800172c <ExtLightsTurnSignalHazardLight+0x2c>
		{

			ExtLightsTurnSignalLeft(ExtLights_TurnSignalLeft_CurrentState);
 8001720:	4b4e      	ldr	r3, [pc, #312]	; (800185c <ExtLightsTurnSignalHazardLight+0x15c>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f000 fa71 	bl	8001c0c <ExtLightsTurnSignalLeft>
 800172a:	e01d      	b.n	8001768 <ExtLightsTurnSignalHazardLight+0x68>

		}
		else if(ExtLights_LTSFlag % 2 == 0)
 800172c:	4b4d      	ldr	r3, [pc, #308]	; (8001864 <ExtLightsTurnSignalHazardLight+0x164>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d116      	bne.n	8001768 <ExtLightsTurnSignalHazardLight+0x68>
		{

			ExtLightsTurnSignalLeft(!ExtLights_TurnSignalLeft_CurrentState);
 800173a:	4b48      	ldr	r3, [pc, #288]	; (800185c <ExtLightsTurnSignalHazardLight+0x15c>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	bf0c      	ite	eq
 8001742:	2301      	moveq	r3, #1
 8001744:	2300      	movne	r3, #0
 8001746:	b2db      	uxtb	r3, r3
 8001748:	4618      	mov	r0, r3
 800174a:	f000 fa5f 	bl	8001c0c <ExtLightsTurnSignalLeft>
 800174e:	e00b      	b.n	8001768 <ExtLightsTurnSignalHazardLight+0x68>
			/* do nothing */

		}

	}
	else if(ExtLights_TurnSignalLeft_CurrentState == STD_LOW)
 8001750:	4b42      	ldr	r3, [pc, #264]	; (800185c <ExtLightsTurnSignalHazardLight+0x15c>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d107      	bne.n	8001768 <ExtLightsTurnSignalHazardLight+0x68>
	{

		ExtLightsTurnSignalLeft(ExtLights_TurnSignalLeft_CurrentState);
 8001758:	4b40      	ldr	r3, [pc, #256]	; (800185c <ExtLightsTurnSignalHazardLight+0x15c>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f000 fa55 	bl	8001c0c <ExtLightsTurnSignalLeft>
		ExtLights_LTSFlag = STD_LOW;
 8001762:	4b40      	ldr	r3, [pc, #256]	; (8001864 <ExtLightsTurnSignalHazardLight+0x164>)
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 8001768:	4b3f      	ldr	r3, [pc, #252]	; (8001868 <ExtLightsTurnSignalHazardLight+0x168>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d121      	bne.n	80017b4 <ExtLightsTurnSignalHazardLight+0xb4>
	{

		HAL_TIM_Base_Start_IT(&htim2);
 8001770:	483b      	ldr	r0, [pc, #236]	; (8001860 <ExtLightsTurnSignalHazardLight+0x160>)
 8001772:	f007 ff6b 	bl	800964c <HAL_TIM_Base_Start_IT>

		if(ExtLights_RTSFlag % 2 == 1)
 8001776:	4b3d      	ldr	r3, [pc, #244]	; (800186c <ExtLightsTurnSignalHazardLight+0x16c>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2b00      	cmp	r3, #0
 8001782:	d005      	beq.n	8001790 <ExtLightsTurnSignalHazardLight+0x90>
		{

			ExtLightsTurnSignalRight(ExtLights_TurnSignalRight_CurrentState);
 8001784:	4b38      	ldr	r3, [pc, #224]	; (8001868 <ExtLightsTurnSignalHazardLight+0x168>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f000 fa51 	bl	8001c30 <ExtLightsTurnSignalRight>
 800178e:	e01d      	b.n	80017cc <ExtLightsTurnSignalHazardLight+0xcc>

		}
		else if(ExtLights_RTSFlag % 2 == 0)
 8001790:	4b36      	ldr	r3, [pc, #216]	; (800186c <ExtLightsTurnSignalHazardLight+0x16c>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d116      	bne.n	80017cc <ExtLightsTurnSignalHazardLight+0xcc>
		{

			ExtLightsTurnSignalRight(!ExtLights_TurnSignalRight_CurrentState);
 800179e:	4b32      	ldr	r3, [pc, #200]	; (8001868 <ExtLightsTurnSignalHazardLight+0x168>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	bf0c      	ite	eq
 80017a6:	2301      	moveq	r3, #1
 80017a8:	2300      	movne	r3, #0
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	4618      	mov	r0, r3
 80017ae:	f000 fa3f 	bl	8001c30 <ExtLightsTurnSignalRight>
 80017b2:	e00b      	b.n	80017cc <ExtLightsTurnSignalHazardLight+0xcc>
			/* do nothing */

		}

	}
	else if(ExtLights_TurnSignalRight_CurrentState == STD_LOW)
 80017b4:	4b2c      	ldr	r3, [pc, #176]	; (8001868 <ExtLightsTurnSignalHazardLight+0x168>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d107      	bne.n	80017cc <ExtLightsTurnSignalHazardLight+0xcc>
	{

		ExtLights_RTSFlag = STD_LOW;
 80017bc:	4b2b      	ldr	r3, [pc, #172]	; (800186c <ExtLightsTurnSignalHazardLight+0x16c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
		ExtLightsTurnSignalRight(ExtLights_TurnSignalRight_CurrentState);
 80017c2:	4b29      	ldr	r3, [pc, #164]	; (8001868 <ExtLightsTurnSignalHazardLight+0x168>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 fa32 	bl	8001c30 <ExtLightsTurnSignalRight>

		/* do nothing */

	}

	if(ExtLights_HazardLight_CurrentState == STD_HIGH)
 80017cc:	4b28      	ldr	r3, [pc, #160]	; (8001870 <ExtLightsTurnSignalHazardLight+0x170>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d130      	bne.n	8001836 <ExtLightsTurnSignalHazardLight+0x136>
	{

		HAL_TIM_Base_Start_IT(&htim2);
 80017d4:	4822      	ldr	r0, [pc, #136]	; (8001860 <ExtLightsTurnSignalHazardLight+0x160>)
 80017d6:	f007 ff39 	bl	800964c <HAL_TIM_Base_Start_IT>

		if(ExtLights_HLFlag % 2 == 1)
 80017da:	4b26      	ldr	r3, [pc, #152]	; (8001874 <ExtLightsTurnSignalHazardLight+0x174>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00a      	beq.n	80017fe <ExtLightsTurnSignalHazardLight+0xfe>
		{

			ExtLightsTurnSignalRight(ExtLights_HazardLight_CurrentState);
 80017e8:	4b21      	ldr	r3, [pc, #132]	; (8001870 <ExtLightsTurnSignalHazardLight+0x170>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 fa1f 	bl	8001c30 <ExtLightsTurnSignalRight>
			ExtLightsTurnSignalLeft(ExtLights_HazardLight_CurrentState);
 80017f2:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <ExtLightsTurnSignalHazardLight+0x170>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f000 fa08 	bl	8001c0c <ExtLightsTurnSignalLeft>
	{

		/* do nothing */

	}
}
 80017fc:	e02c      	b.n	8001858 <ExtLightsTurnSignalHazardLight+0x158>
		else if(ExtLights_HLFlag % 2 == 0)
 80017fe:	4b1d      	ldr	r3, [pc, #116]	; (8001874 <ExtLightsTurnSignalHazardLight+0x174>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	d125      	bne.n	8001858 <ExtLightsTurnSignalHazardLight+0x158>
			ExtLightsTurnSignalRight(!ExtLights_HazardLight_CurrentState);
 800180c:	4b18      	ldr	r3, [pc, #96]	; (8001870 <ExtLightsTurnSignalHazardLight+0x170>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	bf0c      	ite	eq
 8001814:	2301      	moveq	r3, #1
 8001816:	2300      	movne	r3, #0
 8001818:	b2db      	uxtb	r3, r3
 800181a:	4618      	mov	r0, r3
 800181c:	f000 fa08 	bl	8001c30 <ExtLightsTurnSignalRight>
			ExtLightsTurnSignalLeft(!ExtLights_HazardLight_CurrentState);
 8001820:	4b13      	ldr	r3, [pc, #76]	; (8001870 <ExtLightsTurnSignalHazardLight+0x170>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	bf0c      	ite	eq
 8001828:	2301      	moveq	r3, #1
 800182a:	2300      	movne	r3, #0
 800182c:	b2db      	uxtb	r3, r3
 800182e:	4618      	mov	r0, r3
 8001830:	f000 f9ec 	bl	8001c0c <ExtLightsTurnSignalLeft>
}
 8001834:	e010      	b.n	8001858 <ExtLightsTurnSignalHazardLight+0x158>
	else if(ExtLights_HazardLight_CurrentState == STD_LOW)
 8001836:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <ExtLightsTurnSignalHazardLight+0x170>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d10c      	bne.n	8001858 <ExtLightsTurnSignalHazardLight+0x158>
		ExtLightsTurnSignalRight(ExtLights_HazardLight_CurrentState);
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <ExtLightsTurnSignalHazardLight+0x170>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f000 f9f4 	bl	8001c30 <ExtLightsTurnSignalRight>
		ExtLightsTurnSignalLeft(ExtLights_HazardLight_CurrentState);
 8001848:	4b09      	ldr	r3, [pc, #36]	; (8001870 <ExtLightsTurnSignalHazardLight+0x170>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f000 f9dd 	bl	8001c0c <ExtLightsTurnSignalLeft>
		ExtLights_HLFlag = 0;
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <ExtLightsTurnSignalHazardLight+0x174>)
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}
 800185c:	200000a0 	.word	0x200000a0
 8001860:	2000042c 	.word	0x2000042c
 8001864:	200000af 	.word	0x200000af
 8001868:	200000a1 	.word	0x200000a1
 800186c:	200000ae 	.word	0x200000ae
 8001870:	200000a2 	.word	0x200000a2
 8001874:	200000b0 	.word	0x200000b0

08001878 <ExtLightsMainFunction>:

void ExtLightsMainFunction()
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0

	ExtLightsRxBtcState();
 800187c:	f000 f8ac 	bl	80019d8 <ExtLightsRxBtcState>
	ExtLightsLightState();
 8001880:	f000 f86c 	bl	800195c <ExtLightsLightState>

}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}

08001888 <ExtLightsLightSwitchMode>:
	return E_OK;

}

void ExtLightsLightSwitchMode()
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0

	switch(ExtLights_LightsSwitch_CurrentState)
 800188c:	4b31      	ldr	r3, [pc, #196]	; (8001954 <ExtLightsLightSwitchMode+0xcc>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	3b64      	subs	r3, #100	; 0x64
 8001892:	2b03      	cmp	r3, #3
 8001894:	d859      	bhi.n	800194a <ExtLightsLightSwitchMode+0xc2>
 8001896:	a201      	add	r2, pc, #4	; (adr r2, 800189c <ExtLightsLightSwitchMode+0x14>)
 8001898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800189c:	080018ad 	.word	0x080018ad
 80018a0:	080018c7 	.word	0x080018c7
 80018a4:	08001917 	.word	0x08001917
 80018a8:	08001931 	.word	0x08001931
	{
		case EXTLIGHTS_LIGHTSWITCH_STATEZERO:

			ExtLightsLowBeam(STD_LOW);
 80018ac:	2000      	movs	r0, #0
 80018ae:	f000 f965 	bl	8001b7c <ExtLightsLowBeam>
			ExtLightsDayTimeRunningLight(STD_LOW);
 80018b2:	2000      	movs	r0, #0
 80018b4:	f000 f986 	bl	8001bc4 <ExtLightsDayTimeRunningLight>
			ExtLightsRearPositionLight(STD_LOW);
 80018b8:	2000      	movs	r0, #0
 80018ba:	f000 f9cb 	bl	8001c54 <ExtLightsRearPositionLight>
			ExtLightsLicensePlateLight(STD_LOW);
 80018be:	2000      	movs	r0, #0
 80018c0:	f000 f9fe 	bl	8001cc0 <ExtLightsLicensePlateLight>

			break;
 80018c4:	e044      	b.n	8001950 <ExtLightsLightSwitchMode+0xc8>

		case EXTLIGHTS_LIGHTSWITCH_STATEONE:

			lightSensorState = ExtLightsLightReadSensorValue();
 80018c6:	f000 f947 	bl	8001b58 <ExtLightsLightReadSensorValue>
 80018ca:	4603      	mov	r3, r0
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	4b22      	ldr	r3, [pc, #136]	; (8001958 <ExtLightsLightSwitchMode+0xd0>)
 80018d0:	701a      	strb	r2, [r3, #0]

			if(lightSensorState < EXTLIGHTS_LIGHTSENSOR_DAYNIGHTVALUE)
 80018d2:	4b21      	ldr	r3, [pc, #132]	; (8001958 <ExtLightsLightSwitchMode+0xd0>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b95      	cmp	r3, #149	; 0x95
 80018d8:	d80c      	bhi.n	80018f4 <ExtLightsLightSwitchMode+0x6c>
			{

				ExtLightsLowBeam(STD_HIGH);
 80018da:	2001      	movs	r0, #1
 80018dc:	f000 f94e 	bl	8001b7c <ExtLightsLowBeam>
				ExtLightsDayTimeRunningLight(STD_HIGH);
 80018e0:	2001      	movs	r0, #1
 80018e2:	f000 f96f 	bl	8001bc4 <ExtLightsDayTimeRunningLight>
				ExtLightsRearPositionLight(STD_HIGH);
 80018e6:	2001      	movs	r0, #1
 80018e8:	f000 f9b4 	bl	8001c54 <ExtLightsRearPositionLight>
				ExtLightsLicensePlateLight(STD_HIGH);
 80018ec:	2001      	movs	r0, #1
 80018ee:	f000 f9e7 	bl	8001cc0 <ExtLightsLicensePlateLight>
				ExtLightsRearPositionLight(STD_LOW);
				ExtLightsLicensePlateLight(STD_LOW);

			}

			break;
 80018f2:	e02c      	b.n	800194e <ExtLightsLightSwitchMode+0xc6>
			else if(lightSensorState > EXTLIGHTS_LIGHTSENSOR_DAYNIGHTVALUE)
 80018f4:	4b18      	ldr	r3, [pc, #96]	; (8001958 <ExtLightsLightSwitchMode+0xd0>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b96      	cmp	r3, #150	; 0x96
 80018fa:	d928      	bls.n	800194e <ExtLightsLightSwitchMode+0xc6>
				ExtLightsLowBeam(STD_LOW);
 80018fc:	2000      	movs	r0, #0
 80018fe:	f000 f93d 	bl	8001b7c <ExtLightsLowBeam>
				ExtLightsDayTimeRunningLight(STD_HIGH);
 8001902:	2001      	movs	r0, #1
 8001904:	f000 f95e 	bl	8001bc4 <ExtLightsDayTimeRunningLight>
				ExtLightsRearPositionLight(STD_LOW);
 8001908:	2000      	movs	r0, #0
 800190a:	f000 f9a3 	bl	8001c54 <ExtLightsRearPositionLight>
				ExtLightsLicensePlateLight(STD_LOW);
 800190e:	2000      	movs	r0, #0
 8001910:	f000 f9d6 	bl	8001cc0 <ExtLightsLicensePlateLight>
			break;
 8001914:	e01b      	b.n	800194e <ExtLightsLightSwitchMode+0xc6>

		case EXTLIGHTS_LIGHTSWITCH_STATETWO:

			ExtLightsLowBeam(STD_LOW);
 8001916:	2000      	movs	r0, #0
 8001918:	f000 f930 	bl	8001b7c <ExtLightsLowBeam>
			ExtLightsDayTimeRunningLight(STD_HIGH);
 800191c:	2001      	movs	r0, #1
 800191e:	f000 f951 	bl	8001bc4 <ExtLightsDayTimeRunningLight>
			ExtLightsRearPositionLight(STD_HIGH);
 8001922:	2001      	movs	r0, #1
 8001924:	f000 f996 	bl	8001c54 <ExtLightsRearPositionLight>
			ExtLightsLicensePlateLight(STD_HIGH);
 8001928:	2001      	movs	r0, #1
 800192a:	f000 f9c9 	bl	8001cc0 <ExtLightsLicensePlateLight>

			break;
 800192e:	e00f      	b.n	8001950 <ExtLightsLightSwitchMode+0xc8>

		case EXTLIGHTS_LIGHTSWITCH_STATETHREE:

			ExtLightsLowBeam(STD_HIGH);
 8001930:	2001      	movs	r0, #1
 8001932:	f000 f923 	bl	8001b7c <ExtLightsLowBeam>
			ExtLightsDayTimeRunningLight(STD_HIGH);
 8001936:	2001      	movs	r0, #1
 8001938:	f000 f944 	bl	8001bc4 <ExtLightsDayTimeRunningLight>
			ExtLightsRearPositionLight(STD_HIGH);
 800193c:	2001      	movs	r0, #1
 800193e:	f000 f989 	bl	8001c54 <ExtLightsRearPositionLight>
			ExtLightsLicensePlateLight(STD_HIGH);
 8001942:	2001      	movs	r0, #1
 8001944:	f000 f9bc 	bl	8001cc0 <ExtLightsLicensePlateLight>

			break;
 8001948:	e002      	b.n	8001950 <ExtLightsLightSwitchMode+0xc8>

		default:

			break;
 800194a:	bf00      	nop
 800194c:	e000      	b.n	8001950 <ExtLightsLightSwitchMode+0xc8>
			break;
 800194e:	bf00      	nop

	}

}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}
 8001954:	2000009d 	.word	0x2000009d
 8001958:	200000b1 	.word	0x200000b1

0800195c <ExtLightsLightState>:

void ExtLightsLightState()
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0

	if(SecAlm_Trigger == STD_HIGH)
 8001960:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <ExtLightsLightState+0x64>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d105      	bne.n	8001974 <ExtLightsLightState+0x18>
	{

		ExtLightsReverseLight(STD_LOW);
 8001968:	2000      	movs	r0, #0
 800196a:	f000 f997 	bl	8001c9c <ExtLightsReverseLight>
		ExtLightsDayTimeRunningLight(STD_LOW);
 800196e:	2000      	movs	r0, #0
 8001970:	f000 f928 	bl	8001bc4 <ExtLightsDayTimeRunningLight>

		/* do nothing */

	}

	ExtLightsTurnSignalHazardLight();
 8001974:	f7ff fec4 	bl	8001700 <ExtLightsTurnSignalHazardLight>
	ExtLightsLightSwitchMode();
 8001978:	f7ff ff86 	bl	8001888 <ExtLightsLightSwitchMode>
	ExtLightsHighBeam(ExtLights_HighBeam_CurrentState);
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <ExtLightsLightState+0x68>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f000 f90d 	bl	8001ba0 <ExtLightsHighBeam>
	ExtLightsFrontFogLight(ExtLights_FrontFogLight_CurrentState);
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <ExtLightsLightState+0x6c>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f000 f92c 	bl	8001be8 <ExtLightsFrontFogLight>
	ExtLightsRearFogLight(ExtLights_RearFogLight_CurrentState);
 8001990:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <ExtLightsLightState+0x70>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f000 f96f 	bl	8001c78 <ExtLightsRearFogLight>


	if(Btc_ReverseLight == STD_HIGH)
 800199a:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <ExtLightsLightState+0x74>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d104      	bne.n	80019ac <ExtLightsLightState+0x50>
	{

		ExtLights_ReverseLight_CurrentState = Btc_ReverseLight;
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <ExtLightsLightState+0x74>)
 80019a4:	781a      	ldrb	r2, [r3, #0]
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <ExtLightsLightState+0x78>)
 80019a8:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 80019aa:	e007      	b.n	80019bc <ExtLightsLightState+0x60>
	else if(Btc_ReverseLight == STD_HIGH)
 80019ac:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <ExtLightsLightState+0x74>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d103      	bne.n	80019bc <ExtLightsLightState+0x60>
		ExtLights_ReverseLight_CurrentState = Btc_ReverseLight;
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <ExtLightsLightState+0x74>)
 80019b6:	781a      	ldrb	r2, [r3, #0]
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <ExtLightsLightState+0x78>)
 80019ba:	701a      	strb	r2, [r3, #0]
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	200000f6 	.word	0x200000f6
 80019c4:	2000009e 	.word	0x2000009e
 80019c8:	2000009f 	.word	0x2000009f
 80019cc:	200000a3 	.word	0x200000a3
 80019d0:	200000ad 	.word	0x200000ad
 80019d4:	2000009b 	.word	0x2000009b

080019d8 <ExtLightsRxBtcState>:

void ExtLightsRxBtcState()
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
	switch(Btc_LightSwitch)
 80019dc:	4b4e      	ldr	r3, [pc, #312]	; (8001b18 <ExtLightsRxBtcState+0x140>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	3b64      	subs	r3, #100	; 0x64
 80019e2:	2b03      	cmp	r3, #3
 80019e4:	d81a      	bhi.n	8001a1c <ExtLightsRxBtcState+0x44>
 80019e6:	a201      	add	r2, pc, #4	; (adr r2, 80019ec <ExtLightsRxBtcState+0x14>)
 80019e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ec:	080019fd 	.word	0x080019fd
 80019f0:	08001a05 	.word	0x08001a05
 80019f4:	08001a0d 	.word	0x08001a0d
 80019f8:	08001a15 	.word	0x08001a15
	{

		case EXTLIGHTS_LIGHTSWITCH_STATEZERO:

			ExtLights_LightsSwitch_CurrentState = EXTLIGHTS_LIGHTSWITCH_STATEZERO;
 80019fc:	4b47      	ldr	r3, [pc, #284]	; (8001b1c <ExtLightsRxBtcState+0x144>)
 80019fe:	2264      	movs	r2, #100	; 0x64
 8001a00:	701a      	strb	r2, [r3, #0]

			break;
 8001a02:	e00c      	b.n	8001a1e <ExtLightsRxBtcState+0x46>

		case EXTLIGHTS_LIGHTSWITCH_STATEONE:

			ExtLights_LightsSwitch_CurrentState = EXTLIGHTS_LIGHTSWITCH_STATEONE;
 8001a04:	4b45      	ldr	r3, [pc, #276]	; (8001b1c <ExtLightsRxBtcState+0x144>)
 8001a06:	2265      	movs	r2, #101	; 0x65
 8001a08:	701a      	strb	r2, [r3, #0]

			break;
 8001a0a:	e008      	b.n	8001a1e <ExtLightsRxBtcState+0x46>

		case EXTLIGHTS_LIGHTSWITCH_STATETWO:

			ExtLights_LightsSwitch_CurrentState = EXTLIGHTS_LIGHTSWITCH_STATETWO;
 8001a0c:	4b43      	ldr	r3, [pc, #268]	; (8001b1c <ExtLightsRxBtcState+0x144>)
 8001a0e:	2266      	movs	r2, #102	; 0x66
 8001a10:	701a      	strb	r2, [r3, #0]


			break;
 8001a12:	e004      	b.n	8001a1e <ExtLightsRxBtcState+0x46>

		case EXTLIGHTS_LIGHTSWITCH_STATETHREE:

			ExtLights_LightsSwitch_CurrentState = EXTLIGHTS_LIGHTSWITCH_STATETHREE;
 8001a14:	4b41      	ldr	r3, [pc, #260]	; (8001b1c <ExtLightsRxBtcState+0x144>)
 8001a16:	2267      	movs	r2, #103	; 0x67
 8001a18:	701a      	strb	r2, [r3, #0]

			break;
 8001a1a:	e000      	b.n	8001a1e <ExtLightsRxBtcState+0x46>

		default:

			break;
 8001a1c:	bf00      	nop

	}

	if(Btc_HighBeam == STD_HIGH)
 8001a1e:	4b40      	ldr	r3, [pc, #256]	; (8001b20 <ExtLightsRxBtcState+0x148>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d104      	bne.n	8001a30 <ExtLightsRxBtcState+0x58>
	{

		ExtLights_HighBeam_CurrentState = Btc_HighBeam;
 8001a26:	4b3e      	ldr	r3, [pc, #248]	; (8001b20 <ExtLightsRxBtcState+0x148>)
 8001a28:	781a      	ldrb	r2, [r3, #0]
 8001a2a:	4b3e      	ldr	r3, [pc, #248]	; (8001b24 <ExtLightsRxBtcState+0x14c>)
 8001a2c:	701a      	strb	r2, [r3, #0]
 8001a2e:	e007      	b.n	8001a40 <ExtLightsRxBtcState+0x68>

	}
	else if(Btc_HighBeam == STD_LOW)
 8001a30:	4b3b      	ldr	r3, [pc, #236]	; (8001b20 <ExtLightsRxBtcState+0x148>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d103      	bne.n	8001a40 <ExtLightsRxBtcState+0x68>
	{

		ExtLights_HighBeam_CurrentState = Btc_HighBeam;
 8001a38:	4b39      	ldr	r3, [pc, #228]	; (8001b20 <ExtLightsRxBtcState+0x148>)
 8001a3a:	781a      	ldrb	r2, [r3, #0]
 8001a3c:	4b39      	ldr	r3, [pc, #228]	; (8001b24 <ExtLightsRxBtcState+0x14c>)
 8001a3e:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_FrontFogLight == STD_HIGH)
 8001a40:	4b39      	ldr	r3, [pc, #228]	; (8001b28 <ExtLightsRxBtcState+0x150>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d104      	bne.n	8001a52 <ExtLightsRxBtcState+0x7a>
	{

		ExtLights_FrontFogLight_CurrentState = Btc_FrontFogLight;
 8001a48:	4b37      	ldr	r3, [pc, #220]	; (8001b28 <ExtLightsRxBtcState+0x150>)
 8001a4a:	781a      	ldrb	r2, [r3, #0]
 8001a4c:	4b37      	ldr	r3, [pc, #220]	; (8001b2c <ExtLightsRxBtcState+0x154>)
 8001a4e:	701a      	strb	r2, [r3, #0]
 8001a50:	e007      	b.n	8001a62 <ExtLightsRxBtcState+0x8a>

	}
	else if(Btc_FrontFogLight == STD_LOW)
 8001a52:	4b35      	ldr	r3, [pc, #212]	; (8001b28 <ExtLightsRxBtcState+0x150>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d103      	bne.n	8001a62 <ExtLightsRxBtcState+0x8a>
	{

		ExtLights_FrontFogLight_CurrentState = Btc_FrontFogLight;
 8001a5a:	4b33      	ldr	r3, [pc, #204]	; (8001b28 <ExtLightsRxBtcState+0x150>)
 8001a5c:	781a      	ldrb	r2, [r3, #0]
 8001a5e:	4b33      	ldr	r3, [pc, #204]	; (8001b2c <ExtLightsRxBtcState+0x154>)
 8001a60:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_RearFogLight == STD_HIGH)
 8001a62:	4b33      	ldr	r3, [pc, #204]	; (8001b30 <ExtLightsRxBtcState+0x158>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d104      	bne.n	8001a74 <ExtLightsRxBtcState+0x9c>
	{

		ExtLights_RearFogLight_CurrentState = Btc_RearFogLight;
 8001a6a:	4b31      	ldr	r3, [pc, #196]	; (8001b30 <ExtLightsRxBtcState+0x158>)
 8001a6c:	781a      	ldrb	r2, [r3, #0]
 8001a6e:	4b31      	ldr	r3, [pc, #196]	; (8001b34 <ExtLightsRxBtcState+0x15c>)
 8001a70:	701a      	strb	r2, [r3, #0]
 8001a72:	e007      	b.n	8001a84 <ExtLightsRxBtcState+0xac>

	}
	else if(Btc_RearFogLight == STD_LOW)
 8001a74:	4b2e      	ldr	r3, [pc, #184]	; (8001b30 <ExtLightsRxBtcState+0x158>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d103      	bne.n	8001a84 <ExtLightsRxBtcState+0xac>
	{

		ExtLights_RearFogLight_CurrentState = Btc_RearFogLight;
 8001a7c:	4b2c      	ldr	r3, [pc, #176]	; (8001b30 <ExtLightsRxBtcState+0x158>)
 8001a7e:	781a      	ldrb	r2, [r3, #0]
 8001a80:	4b2c      	ldr	r3, [pc, #176]	; (8001b34 <ExtLightsRxBtcState+0x15c>)
 8001a82:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_BrakeLight == STD_HIGH)
 8001a84:	4b2c      	ldr	r3, [pc, #176]	; (8001b38 <ExtLightsRxBtcState+0x160>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d104      	bne.n	8001a96 <ExtLightsRxBtcState+0xbe>
	{

		ExtLights_BrakeLight_CurrentState = Btc_BrakeLight;
 8001a8c:	4b2a      	ldr	r3, [pc, #168]	; (8001b38 <ExtLightsRxBtcState+0x160>)
 8001a8e:	781a      	ldrb	r2, [r3, #0]
 8001a90:	4b2a      	ldr	r3, [pc, #168]	; (8001b3c <ExtLightsRxBtcState+0x164>)
 8001a92:	701a      	strb	r2, [r3, #0]
 8001a94:	e007      	b.n	8001aa6 <ExtLightsRxBtcState+0xce>

	}
	else if(Btc_BrakeLight == STD_LOW)
 8001a96:	4b28      	ldr	r3, [pc, #160]	; (8001b38 <ExtLightsRxBtcState+0x160>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d103      	bne.n	8001aa6 <ExtLightsRxBtcState+0xce>
	{

		ExtLights_BrakeLight_CurrentState = Btc_BrakeLight;
 8001a9e:	4b26      	ldr	r3, [pc, #152]	; (8001b38 <ExtLightsRxBtcState+0x160>)
 8001aa0:	781a      	ldrb	r2, [r3, #0]
 8001aa2:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <ExtLightsRxBtcState+0x164>)
 8001aa4:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_TurnSignalLeft == STD_HIGH)
 8001aa6:	4b26      	ldr	r3, [pc, #152]	; (8001b40 <ExtLightsRxBtcState+0x168>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d104      	bne.n	8001ab8 <ExtLightsRxBtcState+0xe0>
	{

		ExtLights_TurnSignalLeft_CurrentState = Btc_TurnSignalLeft;
 8001aae:	4b24      	ldr	r3, [pc, #144]	; (8001b40 <ExtLightsRxBtcState+0x168>)
 8001ab0:	781a      	ldrb	r2, [r3, #0]
 8001ab2:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <ExtLightsRxBtcState+0x16c>)
 8001ab4:	701a      	strb	r2, [r3, #0]
 8001ab6:	e007      	b.n	8001ac8 <ExtLightsRxBtcState+0xf0>

	}
	else if(Btc_TurnSignalLeft == STD_LOW)
 8001ab8:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <ExtLightsRxBtcState+0x168>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d103      	bne.n	8001ac8 <ExtLightsRxBtcState+0xf0>
	{

		ExtLights_TurnSignalLeft_CurrentState = Btc_TurnSignalLeft;
 8001ac0:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <ExtLightsRxBtcState+0x168>)
 8001ac2:	781a      	ldrb	r2, [r3, #0]
 8001ac4:	4b1f      	ldr	r3, [pc, #124]	; (8001b44 <ExtLightsRxBtcState+0x16c>)
 8001ac6:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_TurnSignalRight == STD_HIGH)
 8001ac8:	4b1f      	ldr	r3, [pc, #124]	; (8001b48 <ExtLightsRxBtcState+0x170>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d104      	bne.n	8001ada <ExtLightsRxBtcState+0x102>
	{

		ExtLights_TurnSignalRight_CurrentState = Btc_TurnSignalRight;
 8001ad0:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <ExtLightsRxBtcState+0x170>)
 8001ad2:	781a      	ldrb	r2, [r3, #0]
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <ExtLightsRxBtcState+0x174>)
 8001ad6:	701a      	strb	r2, [r3, #0]
 8001ad8:	e007      	b.n	8001aea <ExtLightsRxBtcState+0x112>

	}
	else if(Btc_TurnSignalRight == STD_LOW)
 8001ada:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <ExtLightsRxBtcState+0x170>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d103      	bne.n	8001aea <ExtLightsRxBtcState+0x112>
	{

		ExtLights_TurnSignalRight_CurrentState = Btc_TurnSignalRight;
 8001ae2:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <ExtLightsRxBtcState+0x170>)
 8001ae4:	781a      	ldrb	r2, [r3, #0]
 8001ae6:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <ExtLightsRxBtcState+0x174>)
 8001ae8:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_HazardLight == STD_HIGH)
 8001aea:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <ExtLightsRxBtcState+0x178>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d104      	bne.n	8001afc <ExtLightsRxBtcState+0x124>
	{

		ExtLights_HazardLight_CurrentState = Btc_HazardLight;
 8001af2:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <ExtLightsRxBtcState+0x178>)
 8001af4:	781a      	ldrb	r2, [r3, #0]
 8001af6:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <ExtLightsRxBtcState+0x17c>)
 8001af8:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8001afa:	e007      	b.n	8001b0c <ExtLightsRxBtcState+0x134>
	else if(Btc_HazardLight == STD_LOW)
 8001afc:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <ExtLightsRxBtcState+0x178>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d103      	bne.n	8001b0c <ExtLightsRxBtcState+0x134>
		ExtLights_HazardLight_CurrentState = Btc_HazardLight;
 8001b04:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <ExtLightsRxBtcState+0x178>)
 8001b06:	781a      	ldrb	r2, [r3, #0]
 8001b08:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <ExtLightsRxBtcState+0x17c>)
 8001b0a:	701a      	strb	r2, [r3, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	200000a4 	.word	0x200000a4
 8001b1c:	2000009d 	.word	0x2000009d
 8001b20:	200000a5 	.word	0x200000a5
 8001b24:	2000009e 	.word	0x2000009e
 8001b28:	200000a7 	.word	0x200000a7
 8001b2c:	2000009f 	.word	0x2000009f
 8001b30:	200000ac 	.word	0x200000ac
 8001b34:	200000a3 	.word	0x200000a3
 8001b38:	200000ab 	.word	0x200000ab
 8001b3c:	2000009c 	.word	0x2000009c
 8001b40:	200000a8 	.word	0x200000a8
 8001b44:	200000a0 	.word	0x200000a0
 8001b48:	200000a9 	.word	0x200000a9
 8001b4c:	200000a1 	.word	0x200000a1
 8001b50:	200000aa 	.word	0x200000aa
 8001b54:	200000a2 	.word	0x200000a2

08001b58 <ExtLightsLightReadSensorValue>:

uint32 ExtLightsLightReadSensorValue()
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0

	uint8 sensorValue = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	71fb      	strb	r3, [r7, #7]

	sensorValue = ADC_BUFFER[2];
 8001b62:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <ExtLightsLightReadSensorValue+0x20>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	71fb      	strb	r3, [r7, #7]

	return sensorValue;
 8001b68:	79fb      	ldrb	r3, [r7, #7]

}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	200000cc 	.word	0x200000cc

08001b7c <ExtLightsLowBeam>:

void ExtLightsLowBeam(uint8 PinState)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_LOWBEAM_PORT, EXTLIGHTS_LOWBEAM_PIN, PinState);
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	2110      	movs	r1, #16
 8001b8c:	4803      	ldr	r0, [pc, #12]	; (8001b9c <ExtLightsLowBeam+0x20>)
 8001b8e:	f004 fbe9 	bl	8006364 <HAL_GPIO_WritePin>

}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40020000 	.word	0x40020000

08001ba0 <ExtLightsHighBeam>:

void ExtLightsHighBeam(uint8 PinState)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_HIGHBEAM_PORT, EXTLIGHTS_HIGHBEAM_PIN, PinState);
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	461a      	mov	r2, r3
 8001bae:	2101      	movs	r1, #1
 8001bb0:	4803      	ldr	r0, [pc, #12]	; (8001bc0 <ExtLightsHighBeam+0x20>)
 8001bb2:	f004 fbd7 	bl	8006364 <HAL_GPIO_WritePin>

}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40020400 	.word	0x40020400

08001bc4 <ExtLightsDayTimeRunningLight>:

void ExtLightsDayTimeRunningLight(uint8 PinState)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_DAYTIMERUNNINGLIGHT_PORT, EXTLIGHTS_DAYTIMERUNNINGLIGHT_PIN, PinState);
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	2102      	movs	r1, #2
 8001bd4:	4803      	ldr	r0, [pc, #12]	; (8001be4 <ExtLightsDayTimeRunningLight+0x20>)
 8001bd6:	f004 fbc5 	bl	8006364 <HAL_GPIO_WritePin>

}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40020000 	.word	0x40020000

08001be8 <ExtLightsFrontFogLight>:

void ExtLightsFrontFogLight(uint8 PinState)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_FRONTFOGLIGHT_PORT, EXTLIGHTS_FRONTFOGLIGHT_PIN, PinState);
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	2108      	movs	r1, #8
 8001bf8:	4803      	ldr	r0, [pc, #12]	; (8001c08 <ExtLightsFrontFogLight+0x20>)
 8001bfa:	f004 fbb3 	bl	8006364 <HAL_GPIO_WritePin>

}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40020800 	.word	0x40020800

08001c0c <ExtLightsTurnSignalLeft>:

void ExtLightsTurnSignalLeft(uint8 PinState)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_TURNSIGNALLEFT_PORT, EXTLIGHTS_TURNSIGNALLEFT_PIN, PinState);
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c1e:	4803      	ldr	r0, [pc, #12]	; (8001c2c <ExtLightsTurnSignalLeft+0x20>)
 8001c20:	f004 fba0 	bl	8006364 <HAL_GPIO_WritePin>

}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40020800 	.word	0x40020800

08001c30 <ExtLightsTurnSignalRight>:

void ExtLightsTurnSignalRight(uint8 PinState)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_TURNSIGNALRIGHT_PORT, EXTLIGHTS_TURNSIGNALRIGHT_PIN, PinState);
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c42:	4803      	ldr	r0, [pc, #12]	; (8001c50 <ExtLightsTurnSignalRight+0x20>)
 8001c44:	f004 fb8e 	bl	8006364 <HAL_GPIO_WritePin>

}
 8001c48:	bf00      	nop
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40020800 	.word	0x40020800

08001c54 <ExtLightsRearPositionLight>:

void ExtLightsRearPositionLight(uint8 PinState)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_REARPOSITIONLIGHT_PORT, EXTLIGHTS_REARPOSITIONLIGHT_PIN, PinState);
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	461a      	mov	r2, r3
 8001c62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c66:	4803      	ldr	r0, [pc, #12]	; (8001c74 <ExtLightsRearPositionLight+0x20>)
 8001c68:	f004 fb7c 	bl	8006364 <HAL_GPIO_WritePin>

}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40020800 	.word	0x40020800

08001c78 <ExtLightsRearFogLight>:

void ExtLightsRearFogLight(uint8 PinState)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_REARFOGLIGHT_PORT, EXTLIGHTS_REARFOGLIGHT_PIN, PinState);
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	461a      	mov	r2, r3
 8001c86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c8a:	4803      	ldr	r0, [pc, #12]	; (8001c98 <ExtLightsRearFogLight+0x20>)
 8001c8c:	f004 fb6a 	bl	8006364 <HAL_GPIO_WritePin>

}
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40020800 	.word	0x40020800

08001c9c <ExtLightsReverseLight>:
	HAL_GPIO_WritePin(EXTLIGHTS_BRAKELIGHT_PORT, EXTLIGHTS_BRAKELIGHT_PIN, PinState);

}

void ExtLightsReverseLight(uint8 PinState)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_REVERSELIGHT_PORT, EXTLIGHTS_REVERSELIGHT_PIN, PinState);
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cae:	4803      	ldr	r0, [pc, #12]	; (8001cbc <ExtLightsReverseLight+0x20>)
 8001cb0:	f004 fb58 	bl	8006364 <HAL_GPIO_WritePin>

}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40020800 	.word	0x40020800

08001cc0 <ExtLightsLicensePlateLight>:

void ExtLightsLicensePlateLight(uint8 PinState)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_LICENSEPLATELIGHT_PORT, EXTLIGHTS_LICENSEPLATELIGHT_PIN, PinState);
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	2101      	movs	r1, #1
 8001cd0:	4803      	ldr	r0, [pc, #12]	; (8001ce0 <ExtLightsLicensePlateLight+0x20>)
 8001cd2:	f004 fb47 	bl	8006364 <HAL_GPIO_WritePin>

}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40020000 	.word	0x40020000

08001ce4 <HVACTemSenReturnTemperatureValue>:
//	tempStatus = HVACTemSenAdcReceivedValues();

}

float HVACTemSenReturnTemperatureValue(float TemSenVal)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	ed87 0a01 	vstr	s0, [r7, #4]

	/* redo */

	return 1;
 8001cee:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001cf2:	ee07 3a90 	vmov	s15, r3

}
 8001cf6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <HVACTemSenAdcReceivedValues>:

float HVACTemSenAdcReceivedValues()
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0

	uint32 RxTem = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	607b      	str	r3, [r7, #4]

	HAL_ADC_Start_DMA(&hadc1, ADC_BUFFER, 6);
 8001d0e:	2206      	movs	r2, #6
 8001d10:	490f      	ldr	r1, [pc, #60]	; (8001d50 <HVACTemSenAdcReceivedValues+0x4c>)
 8001d12:	4810      	ldr	r0, [pc, #64]	; (8001d54 <HVACTemSenAdcReceivedValues+0x50>)
 8001d14:	f002 fb7a 	bl	800440c <HAL_ADC_Start_DMA>
	RxTem = HVACTemSenReturnTemperatureValue(ADC_BUFFER[0]);
 8001d18:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <HVACTemSenAdcReceivedValues+0x4c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	ee07 3a90 	vmov	s15, r3
 8001d20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d24:	eeb0 0a67 	vmov.f32	s0, s15
 8001d28:	f7ff ffdc 	bl	8001ce4 <HVACTemSenReturnTemperatureValue>
 8001d2c:	eef0 7a40 	vmov.f32	s15, s0
 8001d30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d34:	ee17 3a90 	vmov	r3, s15
 8001d38:	607b      	str	r3, [r7, #4]

	return RxTem;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	ee07 3a90 	vmov	s15, r3
 8001d40:	eef8 7a67 	vcvt.f32.u32	s15, s15

}
 8001d44:	eeb0 0a67 	vmov.f32	s0, s15
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200000cc 	.word	0x200000cc
 8001d54:	20000100 	.word	0x20000100

08001d58 <HVACMainFunction>:


}

void HVACMainFunction()
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0

	//HVACI2cTxToLcd();
	HVAC_TemSenRxTemperature = HVACTemSenAdcReceivedValues();
 8001d5c:	f7ff ffd2 	bl	8001d04 <HVACTemSenAdcReceivedValues>
 8001d60:	eef0 7a40 	vmov.f32	s15, s0
 8001d64:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <HVACMainFunction+0x1c>)
 8001d66:	edc3 7a00 	vstr	s15, [r3]
	HVACState();
 8001d6a:	f000 f805 	bl	8001d78 <HVACState>

}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200000c8 	.word	0x200000c8

08001d78 <HVACState>:

void HVACState()
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0

	HVAC_BackwindowDefrost_CurrentState 	= Btc_BackwindowDefrost;
 8001d7c:	4b72      	ldr	r3, [pc, #456]	; (8001f48 <HVACState+0x1d0>)
 8001d7e:	781a      	ldrb	r2, [r3, #0]
 8001d80:	4b72      	ldr	r3, [pc, #456]	; (8001f4c <HVACState+0x1d4>)
 8001d82:	701a      	strb	r2, [r3, #0]
	HVAC_AC_CurrentState 					= Btc_AC;
 8001d84:	4b72      	ldr	r3, [pc, #456]	; (8001f50 <HVACState+0x1d8>)
 8001d86:	781a      	ldrb	r2, [r3, #0]
 8001d88:	4b72      	ldr	r3, [pc, #456]	; (8001f54 <HVACState+0x1dc>)
 8001d8a:	701a      	strb	r2, [r3, #0]
	HVAC_FanValue 							= Btc_FanValue;
 8001d8c:	4b72      	ldr	r3, [pc, #456]	; (8001f58 <HVACState+0x1e0>)
 8001d8e:	781a      	ldrb	r2, [r3, #0]
 8001d90:	4b72      	ldr	r3, [pc, #456]	; (8001f5c <HVACState+0x1e4>)
 8001d92:	701a      	strb	r2, [r3, #0]
	HVAC_TemperatureValue 					= Btc_TemperatureValue;
 8001d94:	4b72      	ldr	r3, [pc, #456]	; (8001f60 <HVACState+0x1e8>)
 8001d96:	781a      	ldrb	r2, [r3, #0]
 8001d98:	4b72      	ldr	r3, [pc, #456]	; (8001f64 <HVACState+0x1ec>)
 8001d9a:	701a      	strb	r2, [r3, #0]

	if(Btc_NormalMode == STD_HIGH)
 8001d9c:	4b72      	ldr	r3, [pc, #456]	; (8001f68 <HVACState+0x1f0>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d106      	bne.n	8001db2 <HVACState+0x3a>
	{

		Btc_RecirculationMode = STD_LOW;
 8001da4:	4b71      	ldr	r3, [pc, #452]	; (8001f6c <HVACState+0x1f4>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]
		HVAC_RecirculationMode_CurrentState = STD_LOW;
 8001daa:	4b71      	ldr	r3, [pc, #452]	; (8001f70 <HVACState+0x1f8>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
 8001db0:	e007      	b.n	8001dc2 <HVACState+0x4a>

	}
	else if(Btc_NormalMode == STD_LOW)
 8001db2:	4b6d      	ldr	r3, [pc, #436]	; (8001f68 <HVACState+0x1f0>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d103      	bne.n	8001dc2 <HVACState+0x4a>
	{

		HVAC_RecirculationMode_CurrentState = Btc_RecirculationMode;
 8001dba:	4b6c      	ldr	r3, [pc, #432]	; (8001f6c <HVACState+0x1f4>)
 8001dbc:	781a      	ldrb	r2, [r3, #0]
 8001dbe:	4b6c      	ldr	r3, [pc, #432]	; (8001f70 <HVACState+0x1f8>)
 8001dc0:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_FanValue == 0 && Btc_TemperatureValue == 0 && HVAC_FanValue == 0 && HVAC_TemperatureValue == 0)
 8001dc2:	4b65      	ldr	r3, [pc, #404]	; (8001f58 <HVACState+0x1e0>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d119      	bne.n	8001dfe <HVACState+0x86>
 8001dca:	4b65      	ldr	r3, [pc, #404]	; (8001f60 <HVACState+0x1e8>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d115      	bne.n	8001dfe <HVACState+0x86>
 8001dd2:	4b62      	ldr	r3, [pc, #392]	; (8001f5c <HVACState+0x1e4>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d111      	bne.n	8001dfe <HVACState+0x86>
 8001dda:	4b62      	ldr	r3, [pc, #392]	; (8001f64 <HVACState+0x1ec>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10d      	bne.n	8001dfe <HVACState+0x86>
	{

		Btc_FanValue 							= 1;
 8001de2:	4b5d      	ldr	r3, [pc, #372]	; (8001f58 <HVACState+0x1e0>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	701a      	strb	r2, [r3, #0]
		Btc_TemperatureValue 					= 22;
 8001de8:	4b5d      	ldr	r3, [pc, #372]	; (8001f60 <HVACState+0x1e8>)
 8001dea:	2216      	movs	r2, #22
 8001dec:	701a      	strb	r2, [r3, #0]
		HVAC_FanValue 							= Btc_FanValue;
 8001dee:	4b5a      	ldr	r3, [pc, #360]	; (8001f58 <HVACState+0x1e0>)
 8001df0:	781a      	ldrb	r2, [r3, #0]
 8001df2:	4b5a      	ldr	r3, [pc, #360]	; (8001f5c <HVACState+0x1e4>)
 8001df4:	701a      	strb	r2, [r3, #0]
		HVAC_TemperatureValue 					= Btc_TemperatureValue;
 8001df6:	4b5a      	ldr	r3, [pc, #360]	; (8001f60 <HVACState+0x1e8>)
 8001df8:	781a      	ldrb	r2, [r3, #0]
 8001dfa:	4b5a      	ldr	r3, [pc, #360]	; (8001f64 <HVACState+0x1ec>)
 8001dfc:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(HVAC_FanValue == STD_LOW)
 8001dfe:	4b57      	ldr	r3, [pc, #348]	; (8001f5c <HVACState+0x1e4>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d103      	bne.n	8001e0e <HVACState+0x96>
	{

		HVAC_CurrentState = STD_LOW;
 8001e06:	4b5b      	ldr	r3, [pc, #364]	; (8001f74 <HVACState+0x1fc>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]
 8001e0c:	e006      	b.n	8001e1c <HVACState+0xa4>

	}
	else if(HVAC_FanValue != STD_LOW)
 8001e0e:	4b53      	ldr	r3, [pc, #332]	; (8001f5c <HVACState+0x1e4>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d002      	beq.n	8001e1c <HVACState+0xa4>
	{

		HVAC_CurrentState = STD_HIGH;
 8001e16:	4b57      	ldr	r3, [pc, #348]	; (8001f74 <HVACState+0x1fc>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_LegVents == STD_HIGH)
 8001e1c:	4b56      	ldr	r3, [pc, #344]	; (8001f78 <HVACState+0x200>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d107      	bne.n	8001e34 <HVACState+0xbc>
	{

		Btc_AutomaticMode 			= STD_LOW;
 8001e24:	4b55      	ldr	r3, [pc, #340]	; (8001f7c <HVACState+0x204>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 	= Btc_LegVents;
 8001e2a:	4b53      	ldr	r3, [pc, #332]	; (8001f78 <HVACState+0x200>)
 8001e2c:	781a      	ldrb	r2, [r3, #0]
 8001e2e:	4b54      	ldr	r3, [pc, #336]	; (8001f80 <HVACState+0x208>)
 8001e30:	701a      	strb	r2, [r3, #0]
 8001e32:	e007      	b.n	8001e44 <HVACState+0xcc>

	}
	else if(Btc_LegVents == STD_LOW)
 8001e34:	4b50      	ldr	r3, [pc, #320]	; (8001f78 <HVACState+0x200>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d103      	bne.n	8001e44 <HVACState+0xcc>
	{

		HVAC_LegVents_CurrentState 	= Btc_LegVents;
 8001e3c:	4b4e      	ldr	r3, [pc, #312]	; (8001f78 <HVACState+0x200>)
 8001e3e:	781a      	ldrb	r2, [r3, #0]
 8001e40:	4b4f      	ldr	r3, [pc, #316]	; (8001f80 <HVACState+0x208>)
 8001e42:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_MidVents == STD_HIGH)
 8001e44:	4b4f      	ldr	r3, [pc, #316]	; (8001f84 <HVACState+0x20c>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d107      	bne.n	8001e5c <HVACState+0xe4>
	{

		Btc_AutomaticMode 			= STD_LOW;
 8001e4c:	4b4b      	ldr	r3, [pc, #300]	; (8001f7c <HVACState+0x204>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 	= Btc_MidVents;
 8001e52:	4b4c      	ldr	r3, [pc, #304]	; (8001f84 <HVACState+0x20c>)
 8001e54:	781a      	ldrb	r2, [r3, #0]
 8001e56:	4b4c      	ldr	r3, [pc, #304]	; (8001f88 <HVACState+0x210>)
 8001e58:	701a      	strb	r2, [r3, #0]
 8001e5a:	e007      	b.n	8001e6c <HVACState+0xf4>

	}
	else if(Btc_MidVents == STD_LOW)
 8001e5c:	4b49      	ldr	r3, [pc, #292]	; (8001f84 <HVACState+0x20c>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d103      	bne.n	8001e6c <HVACState+0xf4>
	{

		HVAC_MidVents_CurrentState 	= Btc_MidVents;
 8001e64:	4b47      	ldr	r3, [pc, #284]	; (8001f84 <HVACState+0x20c>)
 8001e66:	781a      	ldrb	r2, [r3, #0]
 8001e68:	4b47      	ldr	r3, [pc, #284]	; (8001f88 <HVACState+0x210>)
 8001e6a:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_WindshieldVents == STD_HIGH)
 8001e6c:	4b47      	ldr	r3, [pc, #284]	; (8001f8c <HVACState+0x214>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d107      	bne.n	8001e84 <HVACState+0x10c>
	{

		Btc_AutomaticMode 					= STD_LOW;
 8001e74:	4b41      	ldr	r3, [pc, #260]	; (8001f7c <HVACState+0x204>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 	= Btc_WindshieldVents;
 8001e7a:	4b44      	ldr	r3, [pc, #272]	; (8001f8c <HVACState+0x214>)
 8001e7c:	781a      	ldrb	r2, [r3, #0]
 8001e7e:	4b44      	ldr	r3, [pc, #272]	; (8001f90 <HVACState+0x218>)
 8001e80:	701a      	strb	r2, [r3, #0]
 8001e82:	e007      	b.n	8001e94 <HVACState+0x11c>

	}
	else if(Btc_WindshieldVents == STD_LOW)
 8001e84:	4b41      	ldr	r3, [pc, #260]	; (8001f8c <HVACState+0x214>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d103      	bne.n	8001e94 <HVACState+0x11c>
	{

		HVAC_WindshieldVents_CurrentState 	= Btc_WindshieldVents;
 8001e8c:	4b3f      	ldr	r3, [pc, #252]	; (8001f8c <HVACState+0x214>)
 8001e8e:	781a      	ldrb	r2, [r3, #0]
 8001e90:	4b3f      	ldr	r3, [pc, #252]	; (8001f90 <HVACState+0x218>)
 8001e92:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_WindshieldDefrost == STD_HIGH)
 8001e94:	4b3f      	ldr	r3, [pc, #252]	; (8001f94 <HVACState+0x21c>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d110      	bne.n	8001ebe <HVACState+0x146>
	{

		Btc_AutomaticMode				 		= STD_LOW;
 8001e9c:	4b37      	ldr	r3, [pc, #220]	; (8001f7c <HVACState+0x204>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldDefrost_CurrentState 	= Btc_WindshieldDefrost;
 8001ea2:	4b3c      	ldr	r3, [pc, #240]	; (8001f94 <HVACState+0x21c>)
 8001ea4:	781a      	ldrb	r2, [r3, #0]
 8001ea6:	4b3c      	ldr	r3, [pc, #240]	; (8001f98 <HVACState+0x220>)
 8001ea8:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 				= STD_LOW;
 8001eaa:	4b35      	ldr	r3, [pc, #212]	; (8001f80 <HVACState+0x208>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 				= STD_LOW;
 8001eb0:	4b35      	ldr	r3, [pc, #212]	; (8001f88 <HVACState+0x210>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 		= STD_LOW;
 8001eb6:	4b36      	ldr	r3, [pc, #216]	; (8001f90 <HVACState+0x218>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]
 8001ebc:	e013      	b.n	8001ee6 <HVACState+0x16e>

	}
	else if(Btc_WindshieldDefrost == STD_LOW)
 8001ebe:	4b35      	ldr	r3, [pc, #212]	; (8001f94 <HVACState+0x21c>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10f      	bne.n	8001ee6 <HVACState+0x16e>
	{

		HVAC_WindshieldDefrost_CurrentState 	= Btc_WindshieldDefrost;
 8001ec6:	4b33      	ldr	r3, [pc, #204]	; (8001f94 <HVACState+0x21c>)
 8001ec8:	781a      	ldrb	r2, [r3, #0]
 8001eca:	4b33      	ldr	r3, [pc, #204]	; (8001f98 <HVACState+0x220>)
 8001ecc:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 				= Btc_LegVents;
 8001ece:	4b2a      	ldr	r3, [pc, #168]	; (8001f78 <HVACState+0x200>)
 8001ed0:	781a      	ldrb	r2, [r3, #0]
 8001ed2:	4b2b      	ldr	r3, [pc, #172]	; (8001f80 <HVACState+0x208>)
 8001ed4:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 				= Btc_MidVents;
 8001ed6:	4b2b      	ldr	r3, [pc, #172]	; (8001f84 <HVACState+0x20c>)
 8001ed8:	781a      	ldrb	r2, [r3, #0]
 8001eda:	4b2b      	ldr	r3, [pc, #172]	; (8001f88 <HVACState+0x210>)
 8001edc:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 		= Btc_WindshieldVents;
 8001ede:	4b2b      	ldr	r3, [pc, #172]	; (8001f8c <HVACState+0x214>)
 8001ee0:	781a      	ldrb	r2, [r3, #0]
 8001ee2:	4b2b      	ldr	r3, [pc, #172]	; (8001f90 <HVACState+0x218>)
 8001ee4:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_AutomaticMode == STD_HIGH)
 8001ee6:	4b25      	ldr	r3, [pc, #148]	; (8001f7c <HVACState+0x204>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d10f      	bne.n	8001f0e <HVACState+0x196>
	{

		HVAC_AutomaticMode_CurrentState 		= STD_HIGH;
 8001eee:	4b2b      	ldr	r3, [pc, #172]	; (8001f9c <HVACState+0x224>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldDefrost_CurrentState 	= STD_LOW;
 8001ef4:	4b28      	ldr	r3, [pc, #160]	; (8001f98 <HVACState+0x220>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 		= STD_LOW;
 8001efa:	4b25      	ldr	r3, [pc, #148]	; (8001f90 <HVACState+0x218>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 				= STD_LOW;
 8001f00:	4b21      	ldr	r3, [pc, #132]	; (8001f88 <HVACState+0x210>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 				= STD_LOW;
 8001f06:	4b1e      	ldr	r3, [pc, #120]	; (8001f80 <HVACState+0x208>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8001f0c:	e016      	b.n	8001f3c <HVACState+0x1c4>
	else if(Btc_NormalMode == STD_HIGH)
 8001f0e:	4b16      	ldr	r3, [pc, #88]	; (8001f68 <HVACState+0x1f0>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d112      	bne.n	8001f3c <HVACState+0x1c4>
		HVAC_AutomaticMode_CurrentState 		= STD_LOW;
 8001f16:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <HVACState+0x224>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldDefrost_CurrentState 	= Btc_WindshieldDefrost;
 8001f1c:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <HVACState+0x21c>)
 8001f1e:	781a      	ldrb	r2, [r3, #0]
 8001f20:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <HVACState+0x220>)
 8001f22:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 		= Btc_WindshieldVents;
 8001f24:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <HVACState+0x214>)
 8001f26:	781a      	ldrb	r2, [r3, #0]
 8001f28:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <HVACState+0x218>)
 8001f2a:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 				= Btc_MidVents;
 8001f2c:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <HVACState+0x20c>)
 8001f2e:	781a      	ldrb	r2, [r3, #0]
 8001f30:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <HVACState+0x210>)
 8001f32:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 				= Btc_LegVents;
 8001f34:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <HVACState+0x200>)
 8001f36:	781a      	ldrb	r2, [r3, #0]
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <HVACState+0x208>)
 8001f3a:	701a      	strb	r2, [r3, #0]
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	200000c3 	.word	0x200000c3
 8001f4c:	200000bc 	.word	0x200000bc
 8001f50:	200000c4 	.word	0x200000c4
 8001f54:	200000b9 	.word	0x200000b9
 8001f58:	200000be 	.word	0x200000be
 8001f5c:	200000b4 	.word	0x200000b4
 8001f60:	200000bd 	.word	0x200000bd
 8001f64:	200000b3 	.word	0x200000b3
 8001f68:	200000c7 	.word	0x200000c7
 8001f6c:	200000c6 	.word	0x200000c6
 8001f70:	200000bb 	.word	0x200000bb
 8001f74:	200000b2 	.word	0x200000b2
 8001f78:	200000bf 	.word	0x200000bf
 8001f7c:	200000c5 	.word	0x200000c5
 8001f80:	200000b5 	.word	0x200000b5
 8001f84:	200000c0 	.word	0x200000c0
 8001f88:	200000b6 	.word	0x200000b6
 8001f8c:	200000c1 	.word	0x200000c1
 8001f90:	200000b7 	.word	0x200000b7
 8001f94:	200000c2 	.word	0x200000c2
 8001f98:	200000b8 	.word	0x200000b8
 8001f9c:	200000ba 	.word	0x200000ba

08001fa0 <IntLightsRxBtcState>:
void IntLightsMainFunction();
void IntLightsToggleIntLights(uint8 PinState);
void IntLightsRxBtcState();

void IntLightsRxBtcState()
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0

	uint8 lightsStateFromBtcCommand = BtcReceivedDataOnBluetooth;
 8001fa6:	4b24      	ldr	r3, [pc, #144]	; (8002038 <IntLightsRxBtcState+0x98>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	71fb      	strb	r3, [r7, #7]

	switch(lightsStateFromBtcCommand)
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	2b13      	cmp	r3, #19
 8001fb2:	d83b      	bhi.n	800202c <IntLightsRxBtcState+0x8c>
 8001fb4:	a201      	add	r2, pc, #4	; (adr r2, 8001fbc <IntLightsRxBtcState+0x1c>)
 8001fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fba:	bf00      	nop
 8001fbc:	0800200d 	.word	0x0800200d
 8001fc0:	08002015 	.word	0x08002015
 8001fc4:	0800202d 	.word	0x0800202d
 8001fc8:	0800202d 	.word	0x0800202d
 8001fcc:	0800202d 	.word	0x0800202d
 8001fd0:	0800202d 	.word	0x0800202d
 8001fd4:	0800202d 	.word	0x0800202d
 8001fd8:	0800202d 	.word	0x0800202d
 8001fdc:	0800202d 	.word	0x0800202d
 8001fe0:	0800202d 	.word	0x0800202d
 8001fe4:	0800202d 	.word	0x0800202d
 8001fe8:	0800202d 	.word	0x0800202d
 8001fec:	0800202d 	.word	0x0800202d
 8001ff0:	0800202d 	.word	0x0800202d
 8001ff4:	0800202d 	.word	0x0800202d
 8001ff8:	0800202d 	.word	0x0800202d
 8001ffc:	0800202d 	.word	0x0800202d
 8002000:	0800202d 	.word	0x0800202d
 8002004:	0800201d 	.word	0x0800201d
 8002008:	08002025 	.word	0x08002025
	{
		case LIGHTSON_CENLOCON:

			IntLights_CurrentState = STD_HIGH;
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <IntLightsRxBtcState+0x9c>)
 800200e:	2201      	movs	r2, #1
 8002010:	701a      	strb	r2, [r3, #0]

			break;
 8002012:	e00b      	b.n	800202c <IntLightsRxBtcState+0x8c>

		case LIGHTSOFF_CENLOCOFF:

			IntLights_CurrentState = STD_LOW;
 8002014:	4b09      	ldr	r3, [pc, #36]	; (800203c <IntLightsRxBtcState+0x9c>)
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]

			break;
 800201a:	e007      	b.n	800202c <IntLightsRxBtcState+0x8c>

		case LIGHTSON_INTLIGHTSON:

			IntLights_CurrentState = STD_HIGH;
 800201c:	4b07      	ldr	r3, [pc, #28]	; (800203c <IntLightsRxBtcState+0x9c>)
 800201e:	2201      	movs	r2, #1
 8002020:	701a      	strb	r2, [r3, #0]

			break;
 8002022:	e003      	b.n	800202c <IntLightsRxBtcState+0x8c>

		case LIGHTSOFF_INTLIGHTSOFF:

			IntLights_CurrentState = STD_LOW;
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <IntLightsRxBtcState+0x9c>)
 8002026:	2200      	movs	r2, #0
 8002028:	701a      	strb	r2, [r3, #0]

			break;
 800202a:	bf00      	nop

	}

}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	20000090 	.word	0x20000090
 800203c:	200000e4 	.word	0x200000e4

08002040 <IntLightsMainFunction>:

void IntLightsMainFunction()
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0

	IntLightsRxBtcState();
 8002044:	f7ff ffac 	bl	8001fa0 <IntLightsRxBtcState>
	IntLightsToggleIntLights(IntLights_CurrentState);
 8002048:	4b03      	ldr	r3, [pc, #12]	; (8002058 <IntLightsMainFunction+0x18>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f000 f805 	bl	800205c <IntLightsToggleIntLights>

}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	200000e4 	.word	0x200000e4

0800205c <IntLightsToggleIntLights>:
	return E_OK;

}

void IntLightsToggleIntLights(uint8 PinState)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(INTERIOR_LIGHT_PORT, INTERIOR_LIGHT_PIN, PinState);
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	461a      	mov	r2, r3
 800206a:	2104      	movs	r1, #4
 800206c:	4803      	ldr	r0, [pc, #12]	; (800207c <IntLightsToggleIntLights+0x20>)
 800206e:	f004 f979 	bl	8006364 <HAL_GPIO_WritePin>

}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40020800 	.word	0x40020800

08002080 <PdcRearGenerateDelay>:
void PdcRearBuzzerControl();
void PdcFrontStatus();
void PdcRearStatus();

void PdcRearGenerateDelay()
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0

	Pdc_RearGenerateDelayFlag = STD_LOW;
 8002084:	4b14      	ldr	r3, [pc, #80]	; (80020d8 <PdcRearGenerateDelay+0x58>)
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
	Pdc_SecondRearGenerateDelayFlag = STD_LOW;
 800208a:	4b14      	ldr	r3, [pc, #80]	; (80020dc <PdcRearGenerateDelay+0x5c>)
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]

	if(Pdc_RearGenerateDelayFlag == STD_HIGH)
 8002090:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <PdcRearGenerateDelay+0x58>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d103      	bne.n	80020a0 <PdcRearGenerateDelay+0x20>
	{

		Pdc_RearDelayStatus = STD_HIGH;
 8002098:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <PdcRearGenerateDelay+0x60>)
 800209a:	2201      	movs	r2, #1
 800209c:	701a      	strb	r2, [r3, #0]
 800209e:	e006      	b.n	80020ae <PdcRearGenerateDelay+0x2e>

	}
	else if(Pdc_RearGenerateDelayFlag == STD_LOW)
 80020a0:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <PdcRearGenerateDelay+0x58>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d102      	bne.n	80020ae <PdcRearGenerateDelay+0x2e>
	{

		Pdc_RearDelayStatus = STD_LOW;
 80020a8:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <PdcRearGenerateDelay+0x60>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Pdc_SecondRearGenerateDelayFlag == STD_HIGH)
 80020ae:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <PdcRearGenerateDelay+0x5c>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d103      	bne.n	80020be <PdcRearGenerateDelay+0x3e>
	{

		Pdc_SecondRearDelayStatus = STD_HIGH;
 80020b6:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <PdcRearGenerateDelay+0x64>)
 80020b8:	2201      	movs	r2, #1
 80020ba:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 80020bc:	e006      	b.n	80020cc <PdcRearGenerateDelay+0x4c>
	else if(Pdc_SecondRearGenerateDelayFlag == STD_LOW)
 80020be:	4b07      	ldr	r3, [pc, #28]	; (80020dc <PdcRearGenerateDelay+0x5c>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d102      	bne.n	80020cc <PdcRearGenerateDelay+0x4c>
		Pdc_SecondRearDelayStatus = STD_LOW;
 80020c6:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <PdcRearGenerateDelay+0x64>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	701a      	strb	r2, [r3, #0]
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	200000ee 	.word	0x200000ee
 80020dc:	200000f2 	.word	0x200000f2
 80020e0:	200000f1 	.word	0x200000f1
 80020e4:	200000f5 	.word	0x200000f5

080020e8 <PdcFrontGenerateDelay>:

void PdcFrontGenerateDelay()
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0

	Pdc_FrontGenerateDelayFlag 			= STD_LOW;
 80020ec:	4b14      	ldr	r3, [pc, #80]	; (8002140 <PdcFrontGenerateDelay+0x58>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
	Pdc_SecondFrontGenerateDelayFlag 	= STD_LOW;
 80020f2:	4b14      	ldr	r3, [pc, #80]	; (8002144 <PdcFrontGenerateDelay+0x5c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]

	if(Pdc_FrontGenerateDelayFlag == STD_HIGH)
 80020f8:	4b11      	ldr	r3, [pc, #68]	; (8002140 <PdcFrontGenerateDelay+0x58>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d103      	bne.n	8002108 <PdcFrontGenerateDelay+0x20>
	{

		Pdc_FrontDelayStatus = STD_HIGH;
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <PdcFrontGenerateDelay+0x60>)
 8002102:	2201      	movs	r2, #1
 8002104:	701a      	strb	r2, [r3, #0]
 8002106:	e006      	b.n	8002116 <PdcFrontGenerateDelay+0x2e>

	}
	else if(Pdc_FrontGenerateDelayFlag == STD_LOW)
 8002108:	4b0d      	ldr	r3, [pc, #52]	; (8002140 <PdcFrontGenerateDelay+0x58>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d102      	bne.n	8002116 <PdcFrontGenerateDelay+0x2e>
	{

		Pdc_FrontDelayStatus = STD_LOW;
 8002110:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <PdcFrontGenerateDelay+0x60>)
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Pdc_SecondFrontGenerateDelayFlag == STD_HIGH)
 8002116:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <PdcFrontGenerateDelay+0x5c>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d103      	bne.n	8002126 <PdcFrontGenerateDelay+0x3e>
	{

		Pdc_SecondFrontDelayStatus = STD_HIGH;
 800211e:	4b0b      	ldr	r3, [pc, #44]	; (800214c <PdcFrontGenerateDelay+0x64>)
 8002120:	2201      	movs	r2, #1
 8002122:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8002124:	e006      	b.n	8002134 <PdcFrontGenerateDelay+0x4c>
	else if(Pdc_SecondFrontGenerateDelayFlag == STD_LOW)
 8002126:	4b07      	ldr	r3, [pc, #28]	; (8002144 <PdcFrontGenerateDelay+0x5c>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d102      	bne.n	8002134 <PdcFrontGenerateDelay+0x4c>
		Pdc_SecondFrontDelayStatus = STD_LOW;
 800212e:	4b07      	ldr	r3, [pc, #28]	; (800214c <PdcFrontGenerateDelay+0x64>)
 8002130:	2200      	movs	r2, #0
 8002132:	701a      	strb	r2, [r3, #0]
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	200000ef 	.word	0x200000ef
 8002144:	200000f3 	.word	0x200000f3
 8002148:	200000f0 	.word	0x200000f0
 800214c:	200000f4 	.word	0x200000f4

08002150 <PdcFrontStatus>:

void PdcFrontStatus()
{
 8002150:	b590      	push	{r4, r7, lr}
 8002152:	b085      	sub	sp, #20
 8002154:	af02      	add	r7, sp, #8

	TickType_t expiry_time 	= 0;
 8002156:	2300      	movs	r3, #0
 8002158:	607b      	str	r3, [r7, #4]
	uint8 echoValue 		= 0;
 800215a:	2300      	movs	r3, #0
 800215c:	70fb      	strb	r3, [r7, #3]

	osTimerStart(PdcFrontGlobalTimerHandle, 10000);
 800215e:	4b3f      	ldr	r3, [pc, #252]	; (800225c <PdcFrontStatus+0x10c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f242 7110 	movw	r1, #10000	; 0x2710
 8002166:	4618      	mov	r0, r3
 8002168:	f009 fcc8 	bl	800bafc <osTimerStart>
	xTimerStart(PdcFrontGlobalTimerHandle, 0);
 800216c:	4b3b      	ldr	r3, [pc, #236]	; (800225c <PdcFrontStatus+0x10c>)
 800216e:	681c      	ldr	r4, [r3, #0]
 8002170:	f00b fb7e 	bl	800d870 <xTaskGetTickCount>
 8002174:	4602      	mov	r2, r0
 8002176:	2300      	movs	r3, #0
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	2300      	movs	r3, #0
 800217c:	2101      	movs	r1, #1
 800217e:	4620      	mov	r0, r4
 8002180:	f00c f95e 	bl	800e440 <xTimerGenericCommand>
	PdcToggleFrontTriggerPin(STD_LOW);
 8002184:	2000      	movs	r0, #0
 8002186:	f000 f911 	bl	80023ac <PdcToggleFrontTriggerPin>
	PdcToggleFrontTriggerPin(STD_HIGH);
 800218a:	2001      	movs	r0, #1
 800218c:	f000 f90e 	bl	80023ac <PdcToggleFrontTriggerPin>
	osTimerStart(PdcFrontDelayTimerHandle, PDC_DELAY_VALUE_TEN);
 8002190:	4b33      	ldr	r3, [pc, #204]	; (8002260 <PdcFrontStatus+0x110>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	210a      	movs	r1, #10
 8002196:	4618      	mov	r0, r3
 8002198:	f009 fcb0 	bl	800bafc <osTimerStart>
	PdcFrontGenerateDelay();
 800219c:	f7ff ffa4 	bl	80020e8 <PdcFrontGenerateDelay>

	if(Pdc_FrontDelayStatus == STD_HIGH)
 80021a0:	4b30      	ldr	r3, [pc, #192]	; (8002264 <PdcFrontStatus+0x114>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d107      	bne.n	80021b8 <PdcFrontStatus+0x68>
	{

		PdcToggleFrontTriggerPin(STD_LOW);
 80021a8:	2000      	movs	r0, #0
 80021aa:	f000 f8ff 	bl	80023ac <PdcToggleFrontTriggerPin>
		osTimerStop(PdcFrontDelayTimerHandle);
 80021ae:	4b2c      	ldr	r3, [pc, #176]	; (8002260 <PdcFrontStatus+0x110>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f009 fcd0 	bl	800bb58 <osTimerStop>

		/* do nothing */

	}

	echoValue = PdcReadFrontEchoPin();
 80021b8:	f000 f91c 	bl	80023f4 <PdcReadFrontEchoPin>
 80021bc:	4603      	mov	r3, r0
 80021be:	70fb      	strb	r3, [r7, #3]

	if(echoValue == STD_HIGH)
 80021c0:	78fb      	ldrb	r3, [r7, #3]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d11e      	bne.n	8002204 <PdcFrontStatus+0xb4>
	{

		Pdc_FrontRxDelay = HAL_GetTick();
 80021c6:	f001 fe51 	bl	8003e6c <HAL_GetTick>
 80021ca:	4603      	mov	r3, r0
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	4b26      	ldr	r3, [pc, #152]	; (8002268 <PdcFrontStatus+0x118>)
 80021d0:	701a      	strb	r2, [r3, #0]
		osTimerStart(PdcSecondFrontDelayTimerHandle, Pdc_FrontRxDelay + 10);
 80021d2:	4b26      	ldr	r3, [pc, #152]	; (800226c <PdcFrontStatus+0x11c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a24      	ldr	r2, [pc, #144]	; (8002268 <PdcFrontStatus+0x118>)
 80021d8:	7812      	ldrb	r2, [r2, #0]
 80021da:	320a      	adds	r2, #10
 80021dc:	4611      	mov	r1, r2
 80021de:	4618      	mov	r0, r3
 80021e0:	f009 fc8c 	bl	800bafc <osTimerStart>
		PdcFrontGenerateDelay();
 80021e4:	f7ff ff80 	bl	80020e8 <PdcFrontGenerateDelay>

		if(Pdc_SecondFrontDelayStatus == STD_HIGH)
 80021e8:	4b21      	ldr	r3, [pc, #132]	; (8002270 <PdcFrontStatus+0x120>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d109      	bne.n	8002204 <PdcFrontStatus+0xb4>
		{

			expiry_time = xTimerGetExpiryTime(PdcFrontGlobalTimerHandle);
 80021f0:	4b1a      	ldr	r3, [pc, #104]	; (800225c <PdcFrontStatus+0x10c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f00c f971 	bl	800e4dc <xTimerGetExpiryTime>
 80021fa:	6078      	str	r0, [r7, #4]
			Pdc_FrontEchoFirstTimeStampValue = expiry_time;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	4b1c      	ldr	r3, [pc, #112]	; (8002274 <PdcFrontStatus+0x124>)
 8002202:	701a      	strb	r2, [r3, #0]

		}

	}

	echoValue = PdcReadFrontEchoPin();
 8002204:	f000 f8f6 	bl	80023f4 <PdcReadFrontEchoPin>
 8002208:	4603      	mov	r3, r0
 800220a:	70fb      	strb	r3, [r7, #3]

	if(echoValue == STD_HIGH)
 800220c:	78fb      	ldrb	r3, [r7, #3]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d11e      	bne.n	8002250 <PdcFrontStatus+0x100>
	{

		Pdc_FrontRxDelay = HAL_GetTick();
 8002212:	f001 fe2b 	bl	8003e6c <HAL_GetTick>
 8002216:	4603      	mov	r3, r0
 8002218:	b2da      	uxtb	r2, r3
 800221a:	4b13      	ldr	r3, [pc, #76]	; (8002268 <PdcFrontStatus+0x118>)
 800221c:	701a      	strb	r2, [r3, #0]
		osTimerStart(PdcSecondFrontDelayTimerHandle, Pdc_FrontRxDelay + 50);
 800221e:	4b13      	ldr	r3, [pc, #76]	; (800226c <PdcFrontStatus+0x11c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a11      	ldr	r2, [pc, #68]	; (8002268 <PdcFrontStatus+0x118>)
 8002224:	7812      	ldrb	r2, [r2, #0]
 8002226:	3232      	adds	r2, #50	; 0x32
 8002228:	4611      	mov	r1, r2
 800222a:	4618      	mov	r0, r3
 800222c:	f009 fc66 	bl	800bafc <osTimerStart>
		PdcFrontGenerateDelay();
 8002230:	f7ff ff5a 	bl	80020e8 <PdcFrontGenerateDelay>

		if(Pdc_SecondFrontDelayStatus == STD_HIGH)
 8002234:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <PdcFrontStatus+0x120>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d109      	bne.n	8002250 <PdcFrontStatus+0x100>
		{

			expiry_time = xTimerGetExpiryTime(PdcFrontGlobalTimerHandle);
 800223c:	4b07      	ldr	r3, [pc, #28]	; (800225c <PdcFrontStatus+0x10c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f00c f94b 	bl	800e4dc <xTimerGetExpiryTime>
 8002246:	6078      	str	r0, [r7, #4]
			Pdc_FrontEchoSecondTimeStampValue = expiry_time;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	b2da      	uxtb	r2, r3
 800224c:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <PdcFrontStatus+0x128>)
 800224e:	701a      	strb	r2, [r3, #0]

		}

	}

	PdcFrontDistance();
 8002250:	f000 f8fa 	bl	8002448 <PdcFrontDistance>

}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	bd90      	pop	{r4, r7, pc}
 800225c:	200001e0 	.word	0x200001e0
 8002260:	200001d8 	.word	0x200001d8
 8002264:	200000f0 	.word	0x200000f0
 8002268:	200000e6 	.word	0x200000e6
 800226c:	200001dc 	.word	0x200001dc
 8002270:	200000f4 	.word	0x200000f4
 8002274:	200000e7 	.word	0x200000e7
 8002278:	200000e8 	.word	0x200000e8

0800227c <PdcRearStatus>:

void PdcRearStatus()
{
 800227c:	b590      	push	{r4, r7, lr}
 800227e:	b085      	sub	sp, #20
 8002280:	af02      	add	r7, sp, #8

	TickType_t expiry_time 	= 0;
 8002282:	2300      	movs	r3, #0
 8002284:	607b      	str	r3, [r7, #4]
	uint8 echoValue 		= 0;
 8002286:	2300      	movs	r3, #0
 8002288:	70fb      	strb	r3, [r7, #3]

	osTimerStart(PdcRearGlobalTimerHandle, 10000);
 800228a:	4b3f      	ldr	r3, [pc, #252]	; (8002388 <PdcRearStatus+0x10c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f242 7110 	movw	r1, #10000	; 0x2710
 8002292:	4618      	mov	r0, r3
 8002294:	f009 fc32 	bl	800bafc <osTimerStart>
	xTimerStart(PdcRearGlobalTimerHandle, 0);
 8002298:	4b3b      	ldr	r3, [pc, #236]	; (8002388 <PdcRearStatus+0x10c>)
 800229a:	681c      	ldr	r4, [r3, #0]
 800229c:	f00b fae8 	bl	800d870 <xTaskGetTickCount>
 80022a0:	4602      	mov	r2, r0
 80022a2:	2300      	movs	r3, #0
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	2300      	movs	r3, #0
 80022a8:	2101      	movs	r1, #1
 80022aa:	4620      	mov	r0, r4
 80022ac:	f00c f8c8 	bl	800e440 <xTimerGenericCommand>
	PdcToggleRearTriggerPin(STD_LOW);
 80022b0:	2000      	movs	r0, #0
 80022b2:	f000 f88d 	bl	80023d0 <PdcToggleRearTriggerPin>
	PdcToggleRearTriggerPin(STD_HIGH);
 80022b6:	2001      	movs	r0, #1
 80022b8:	f000 f88a 	bl	80023d0 <PdcToggleRearTriggerPin>
	osTimerStart(PdcRearDelayTimerHandle, 10);
 80022bc:	4b33      	ldr	r3, [pc, #204]	; (800238c <PdcRearStatus+0x110>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	210a      	movs	r1, #10
 80022c2:	4618      	mov	r0, r3
 80022c4:	f009 fc1a 	bl	800bafc <osTimerStart>
	PdcRearGenerateDelay();
 80022c8:	f7ff feda 	bl	8002080 <PdcRearGenerateDelay>

	if(Pdc_RearDelayStatus == STD_HIGH)
 80022cc:	4b30      	ldr	r3, [pc, #192]	; (8002390 <PdcRearStatus+0x114>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d107      	bne.n	80022e4 <PdcRearStatus+0x68>
	{

		PdcToggleRearTriggerPin(STD_LOW);
 80022d4:	2000      	movs	r0, #0
 80022d6:	f000 f87b 	bl	80023d0 <PdcToggleRearTriggerPin>
		osTimerStop(PdcRearDelayTimerHandle);
 80022da:	4b2c      	ldr	r3, [pc, #176]	; (800238c <PdcRearStatus+0x110>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f009 fc3a 	bl	800bb58 <osTimerStop>

		/* do nothing */

	}

	echoValue = PdcReadRearEchoPin();
 80022e4:	f000 f89a 	bl	800241c <PdcReadRearEchoPin>
 80022e8:	4603      	mov	r3, r0
 80022ea:	70fb      	strb	r3, [r7, #3]

	if(echoValue == STD_HIGH)
 80022ec:	78fb      	ldrb	r3, [r7, #3]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d11e      	bne.n	8002330 <PdcRearStatus+0xb4>
	{

		Pdc_RearRxDelay = HAL_GetTick();
 80022f2:	f001 fdbb 	bl	8003e6c <HAL_GetTick>
 80022f6:	4603      	mov	r3, r0
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4b26      	ldr	r3, [pc, #152]	; (8002394 <PdcRearStatus+0x118>)
 80022fc:	701a      	strb	r2, [r3, #0]
		osTimerStart(PdcSecondRearDelayTimerHandle, Pdc_RearRxDelay + 10);
 80022fe:	4b26      	ldr	r3, [pc, #152]	; (8002398 <PdcRearStatus+0x11c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a24      	ldr	r2, [pc, #144]	; (8002394 <PdcRearStatus+0x118>)
 8002304:	7812      	ldrb	r2, [r2, #0]
 8002306:	320a      	adds	r2, #10
 8002308:	4611      	mov	r1, r2
 800230a:	4618      	mov	r0, r3
 800230c:	f009 fbf6 	bl	800bafc <osTimerStart>
		PdcRearGenerateDelay();
 8002310:	f7ff feb6 	bl	8002080 <PdcRearGenerateDelay>

		if(Pdc_SecondRearDelayStatus == STD_HIGH)
 8002314:	4b21      	ldr	r3, [pc, #132]	; (800239c <PdcRearStatus+0x120>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d109      	bne.n	8002330 <PdcRearStatus+0xb4>
		{

			expiry_time = xTimerGetExpiryTime(PdcRearGlobalTimerHandle);
 800231c:	4b1a      	ldr	r3, [pc, #104]	; (8002388 <PdcRearStatus+0x10c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f00c f8db 	bl	800e4dc <xTimerGetExpiryTime>
 8002326:	6078      	str	r0, [r7, #4]
			Pdc_RearEchoFirstTimeStampValue = expiry_time;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	b2da      	uxtb	r2, r3
 800232c:	4b1c      	ldr	r3, [pc, #112]	; (80023a0 <PdcRearStatus+0x124>)
 800232e:	701a      	strb	r2, [r3, #0]

		}

	}

	echoValue = PdcReadRearEchoPin();
 8002330:	f000 f874 	bl	800241c <PdcReadRearEchoPin>
 8002334:	4603      	mov	r3, r0
 8002336:	70fb      	strb	r3, [r7, #3]

	if(echoValue == STD_HIGH)
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d11e      	bne.n	800237c <PdcRearStatus+0x100>
	{

		Pdc_RearRxDelay = HAL_GetTick();
 800233e:	f001 fd95 	bl	8003e6c <HAL_GetTick>
 8002342:	4603      	mov	r3, r0
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4b13      	ldr	r3, [pc, #76]	; (8002394 <PdcRearStatus+0x118>)
 8002348:	701a      	strb	r2, [r3, #0]
		osTimerStart(PdcSecondRearDelayTimerHandle, Pdc_RearRxDelay + 50);
 800234a:	4b13      	ldr	r3, [pc, #76]	; (8002398 <PdcRearStatus+0x11c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a11      	ldr	r2, [pc, #68]	; (8002394 <PdcRearStatus+0x118>)
 8002350:	7812      	ldrb	r2, [r2, #0]
 8002352:	3232      	adds	r2, #50	; 0x32
 8002354:	4611      	mov	r1, r2
 8002356:	4618      	mov	r0, r3
 8002358:	f009 fbd0 	bl	800bafc <osTimerStart>
		PdcFrontGenerateDelay();
 800235c:	f7ff fec4 	bl	80020e8 <PdcFrontGenerateDelay>

		if(Pdc_SecondFrontDelayStatus == STD_HIGH)
 8002360:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <PdcRearStatus+0x128>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d109      	bne.n	800237c <PdcRearStatus+0x100>
		{

			expiry_time = xTimerGetExpiryTime(PdcRearGlobalTimerHandle);
 8002368:	4b07      	ldr	r3, [pc, #28]	; (8002388 <PdcRearStatus+0x10c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f00c f8b5 	bl	800e4dc <xTimerGetExpiryTime>
 8002372:	6078      	str	r0, [r7, #4]
			Pdc_RearEchoSecondTimeStampValue = expiry_time;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	b2da      	uxtb	r2, r3
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <PdcRearStatus+0x12c>)
 800237a:	701a      	strb	r2, [r3, #0]

		}

	}

	PdcRearDistance();
 800237c:	f000 f898 	bl	80024b0 <PdcRearDistance>

}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	bd90      	pop	{r4, r7, pc}
 8002388:	200001e4 	.word	0x200001e4
 800238c:	200001e8 	.word	0x200001e8
 8002390:	200000f1 	.word	0x200000f1
 8002394:	200000ea 	.word	0x200000ea
 8002398:	200001ec 	.word	0x200001ec
 800239c:	200000f5 	.word	0x200000f5
 80023a0:	200000eb 	.word	0x200000eb
 80023a4:	200000f4 	.word	0x200000f4
 80023a8:	200000ec 	.word	0x200000ec

080023ac <PdcToggleFrontTriggerPin>:

void PdcToggleFrontTriggerPin(uint8 PinState)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(PDC_FRONT_TRIGGER_PORT, PDC_FRONT_TRIGGER_PIN, PinState);
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	461a      	mov	r2, r3
 80023ba:	2102      	movs	r1, #2
 80023bc:	4803      	ldr	r0, [pc, #12]	; (80023cc <PdcToggleFrontTriggerPin+0x20>)
 80023be:	f003 ffd1 	bl	8006364 <HAL_GPIO_WritePin>

}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40020400 	.word	0x40020400

080023d0 <PdcToggleRearTriggerPin>:

void PdcToggleRearTriggerPin(uint8 PinState)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(PDC_FRONT_TRIGGER_PORT, PDC_FRONT_TRIGGER_PIN, PinState);
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	461a      	mov	r2, r3
 80023de:	2102      	movs	r1, #2
 80023e0:	4803      	ldr	r0, [pc, #12]	; (80023f0 <PdcToggleRearTriggerPin+0x20>)
 80023e2:	f003 ffbf 	bl	8006364 <HAL_GPIO_WritePin>

}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40020400 	.word	0x40020400

080023f4 <PdcReadFrontEchoPin>:

StdReturnType PdcReadFrontEchoPin()
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0

	uint8 pinValue = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	71fb      	strb	r3, [r7, #7]

	pinValue = HAL_GPIO_ReadPin(PDC_FRONT_ECHO_PORT, PDC_FRONT_ECHO_PIN);
 80023fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002402:	4805      	ldr	r0, [pc, #20]	; (8002418 <PdcReadFrontEchoPin+0x24>)
 8002404:	f003 ff88 	bl	8006318 <HAL_GPIO_ReadPin>
 8002408:	4603      	mov	r3, r0
 800240a:	71fb      	strb	r3, [r7, #7]

	return pinValue;
 800240c:	79fb      	ldrb	r3, [r7, #7]

}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40020400 	.word	0x40020400

0800241c <PdcReadRearEchoPin>:

StdReturnType PdcReadRearEchoPin()
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0

	uint8 pinValue = 0;
 8002422:	2300      	movs	r3, #0
 8002424:	71fb      	strb	r3, [r7, #7]

	pinValue = HAL_GPIO_ReadPin(PDC_REAR_ECHO_PORT, PDC_REAR_ECHO_PIN);
 8002426:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800242a:	4805      	ldr	r0, [pc, #20]	; (8002440 <PdcReadRearEchoPin+0x24>)
 800242c:	f003 ff74 	bl	8006318 <HAL_GPIO_ReadPin>
 8002430:	4603      	mov	r3, r0
 8002432:	71fb      	strb	r3, [r7, #7]

	return pinValue;
 8002434:	79fb      	ldrb	r3, [r7, #7]

}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40020000 	.word	0x40020000
 8002444:	00000000 	.word	0x00000000

08002448 <PdcFrontDistance>:

void PdcFrontDistance()
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0

	Pdc_FrontDistanceValue = (Pdc_FrontEchoFirstTimeStampValue + Pdc_FrontEchoSecondTimeStampValue) * 0.034 / 2;
 800244c:	4b14      	ldr	r3, [pc, #80]	; (80024a0 <PdcFrontDistance+0x58>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	4b14      	ldr	r3, [pc, #80]	; (80024a4 <PdcFrontDistance+0x5c>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	4413      	add	r3, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f7fe f813 	bl	8000484 <__aeabi_i2d>
 800245e:	a30e      	add	r3, pc, #56	; (adr r3, 8002498 <PdcFrontDistance+0x50>)
 8002460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002464:	f7fe f878 	bl	8000558 <__aeabi_dmul>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	4610      	mov	r0, r2
 800246e:	4619      	mov	r1, r3
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002478:	f7fe f998 	bl	80007ac <__aeabi_ddiv>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	f7fe fa7a 	bl	800097c <__aeabi_d2uiz>
 8002488:	4603      	mov	r3, r0
 800248a:	b2da      	uxtb	r2, r3
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <PdcFrontDistance+0x60>)
 800248e:	701a      	strb	r2, [r3, #0]

}
 8002490:	bf00      	nop
 8002492:	bd80      	pop	{r7, pc}
 8002494:	f3af 8000 	nop.w
 8002498:	b020c49c 	.word	0xb020c49c
 800249c:	3fa16872 	.word	0x3fa16872
 80024a0:	200000e7 	.word	0x200000e7
 80024a4:	200000e8 	.word	0x200000e8
 80024a8:	200000e9 	.word	0x200000e9
 80024ac:	00000000 	.word	0x00000000

080024b0 <PdcRearDistance>:


void PdcRearDistance()
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0

	Pdc_RearDistanceValue = (Pdc_RearEchoFirstTimeStampValue + Pdc_RearEchoSecondTimeStampValue) * 0.034 / 2;
 80024b4:	4b14      	ldr	r3, [pc, #80]	; (8002508 <PdcRearDistance+0x58>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	4b14      	ldr	r3, [pc, #80]	; (800250c <PdcRearDistance+0x5c>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	4413      	add	r3, r2
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fd ffdf 	bl	8000484 <__aeabi_i2d>
 80024c6:	a30e      	add	r3, pc, #56	; (adr r3, 8002500 <PdcRearDistance+0x50>)
 80024c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024cc:	f7fe f844 	bl	8000558 <__aeabi_dmul>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4610      	mov	r0, r2
 80024d6:	4619      	mov	r1, r3
 80024d8:	f04f 0200 	mov.w	r2, #0
 80024dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024e0:	f7fe f964 	bl	80007ac <__aeabi_ddiv>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	4610      	mov	r0, r2
 80024ea:	4619      	mov	r1, r3
 80024ec:	f7fe fa46 	bl	800097c <__aeabi_d2uiz>
 80024f0:	4603      	mov	r3, r0
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	4b06      	ldr	r3, [pc, #24]	; (8002510 <PdcRearDistance+0x60>)
 80024f6:	701a      	strb	r2, [r3, #0]

}
 80024f8:	bf00      	nop
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	f3af 8000 	nop.w
 8002500:	b020c49c 	.word	0xb020c49c
 8002504:	3fa16872 	.word	0x3fa16872
 8002508:	200000eb 	.word	0x200000eb
 800250c:	200000ec 	.word	0x200000ec
 8002510:	200000ed 	.word	0x200000ed

08002514 <PdcMainFunction>:
	}

}

void PdcMainFunction()
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0

	PdcFrontStatus();
 8002518:	f7ff fe1a 	bl	8002150 <PdcFrontStatus>
	PdcRearStatus();
 800251c:	f7ff feae 	bl	800227c <PdcRearStatus>

}
 8002520:	bf00      	nop
 8002522:	bd80      	pop	{r7, pc}

08002524 <SecAlmVibeSenReadPin>:
void SecAlmState();
void SecAlmLightsBuzzerControl();
void SecAlmTurnOnExtLights();

StdReturnType SecAlmVibeSenReadPin()
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0

	uint8 PinState = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	71fb      	strb	r3, [r7, #7]

	PinState = HAL_GPIO_ReadPin(SECALM_VIBSEN_PORT, SECALM_VIBSEN_PIN);
 800252e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002532:	4805      	ldr	r0, [pc, #20]	; (8002548 <SecAlmVibeSenReadPin+0x24>)
 8002534:	f003 fef0 	bl	8006318 <HAL_GPIO_ReadPin>
 8002538:	4603      	mov	r3, r0
 800253a:	71fb      	strb	r3, [r7, #7]

	return PinState;
 800253c:	79fb      	ldrb	r3, [r7, #7]

}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40020000 	.word	0x40020000

0800254c <SecAlmVibSenStatus>:

StdReturnType SecAlmVibSenStatus()
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0

	uint8 status = STD_LOW;
 8002552:	2300      	movs	r3, #0
 8002554:	71fb      	strb	r3, [r7, #7]

	SecAlm_VibSenStatusFlag = SecAlmVibeSenReadPin();
 8002556:	f7ff ffe5 	bl	8002524 <SecAlmVibeSenReadPin>
 800255a:	4603      	mov	r3, r0
 800255c:	461a      	mov	r2, r3
 800255e:	4b07      	ldr	r3, [pc, #28]	; (800257c <SecAlmVibSenStatus+0x30>)
 8002560:	601a      	str	r2, [r3, #0]

	if(SecAlm_VibSenStatusFlag >= 1000)
 8002562:	4b06      	ldr	r3, [pc, #24]	; (800257c <SecAlmVibSenStatus+0x30>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800256a:	d301      	bcc.n	8002570 <SecAlmVibSenStatus+0x24>
	{

		status = STD_HIGH;
 800256c:	2301      	movs	r3, #1
 800256e:	71fb      	strb	r3, [r7, #7]
	else
	{
		/* do nothing */
	}

	return status;
 8002570:	79fb      	ldrb	r3, [r7, #7]

}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	200000fc 	.word	0x200000fc

08002580 <SecAlmState>:

void SecAlmState()
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0

	if(SecAlmVibSenStatus() == STD_HIGH && CenLoc_CurrentState == STD_LOW)
 8002584:	f7ff ffe2 	bl	800254c <SecAlmVibSenStatus>
 8002588:	4603      	mov	r3, r0
 800258a:	2b01      	cmp	r3, #1
 800258c:	d109      	bne.n	80025a2 <SecAlmState+0x22>
 800258e:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <SecAlmState+0x28>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d105      	bne.n	80025a2 <SecAlmState+0x22>
	{

		SecAlm_Trigger = STD_HIGH;
 8002596:	4b05      	ldr	r3, [pc, #20]	; (80025ac <SecAlmState+0x2c>)
 8002598:	2201      	movs	r2, #1
 800259a:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Init(&htim4);
 800259c:	4804      	ldr	r0, [pc, #16]	; (80025b0 <SecAlmState+0x30>)
 800259e:	f006 ff83 	bl	80094a8 <HAL_TIM_Base_Init>

		/* do nothing */

	}

}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000091 	.word	0x20000091
 80025ac:	200000f6 	.word	0x200000f6
 80025b0:	20000594 	.word	0x20000594

080025b4 <SecAlmTurnOnExtLights>:

void SecAlmTurnOnExtLights()
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0

	ExtLightsLowBeam(SecAlm_PinStateChange);
 80025b8:	4b12      	ldr	r3, [pc, #72]	; (8002604 <SecAlmTurnOnExtLights+0x50>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff fadd 	bl	8001b7c <ExtLightsLowBeam>
	ExtLightsRearPositionLight(SecAlm_PinStateChange);
 80025c2:	4b10      	ldr	r3, [pc, #64]	; (8002604 <SecAlmTurnOnExtLights+0x50>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff fb44 	bl	8001c54 <ExtLightsRearPositionLight>
	ExtLightsFrontFogLight(SecAlm_PinStateChange);
 80025cc:	4b0d      	ldr	r3, [pc, #52]	; (8002604 <SecAlmTurnOnExtLights+0x50>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff fb09 	bl	8001be8 <ExtLightsFrontFogLight>
	ExtLightsRearFogLight(SecAlm_PinStateChange);
 80025d6:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <SecAlmTurnOnExtLights+0x50>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff fb4c 	bl	8001c78 <ExtLightsRearFogLight>
	ExtLightsTurnSignalRight(SecAlm_PinStateChange);
 80025e0:	4b08      	ldr	r3, [pc, #32]	; (8002604 <SecAlmTurnOnExtLights+0x50>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff fb23 	bl	8001c30 <ExtLightsTurnSignalRight>
	ExtLightsTurnSignalLeft(SecAlm_PinStateChange);
 80025ea:	4b06      	ldr	r3, [pc, #24]	; (8002604 <SecAlmTurnOnExtLights+0x50>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff fb0c 	bl	8001c0c <ExtLightsTurnSignalLeft>
	SecAlmToggleAlarmBuzzer(SecAlm_PinStateChange);
 80025f4:	4b03      	ldr	r3, [pc, #12]	; (8002604 <SecAlmTurnOnExtLights+0x50>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f000 f887 	bl	800270c <SecAlmToggleAlarmBuzzer>

}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	200000f7 	.word	0x200000f7

08002608 <SecAlmLightsBuzzerControl>:

void SecAlmLightsBuzzerControl()
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0

	if(SecAlm_Trigger == STD_LOW)
 800260c:	4b22      	ldr	r3, [pc, #136]	; (8002698 <SecAlmLightsBuzzerControl+0x90>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <SecAlmLightsBuzzerControl+0x10>
	{

		SecAlmInit();
 8002614:	f000 f856 	bl	80026c4 <SecAlmInit>

		/* do nothing */

	}

	if(SecAlm_Trigger == STD_HIGH)
 8002618:	4b1f      	ldr	r3, [pc, #124]	; (8002698 <SecAlmLightsBuzzerControl+0x90>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d11b      	bne.n	8002658 <SecAlmLightsBuzzerControl+0x50>
	{
		HAL_TIM_Base_Start_IT(&htim4);
 8002620:	481e      	ldr	r0, [pc, #120]	; (800269c <SecAlmLightsBuzzerControl+0x94>)
 8002622:	f007 f813 	bl	800964c <HAL_TIM_Base_Start_IT>

		if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 1)
 8002626:	4b1e      	ldr	r3, [pc, #120]	; (80026a0 <SecAlmLightsBuzzerControl+0x98>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b00      	cmp	r3, #0
 8002632:	d005      	beq.n	8002640 <SecAlmLightsBuzzerControl+0x38>
		{

			SecAlm_PinStateChange = STD_HIGH;
 8002634:	4b1b      	ldr	r3, [pc, #108]	; (80026a4 <SecAlmLightsBuzzerControl+0x9c>)
 8002636:	2201      	movs	r2, #1
 8002638:	701a      	strb	r2, [r3, #0]
			SecAlmTurnOnExtLights();
 800263a:	f7ff ffbb 	bl	80025b4 <SecAlmTurnOnExtLights>
 800263e:	e00b      	b.n	8002658 <SecAlmLightsBuzzerControl+0x50>

		}
		else if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 0)
 8002640:	4b17      	ldr	r3, [pc, #92]	; (80026a0 <SecAlmLightsBuzzerControl+0x98>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d104      	bne.n	8002658 <SecAlmLightsBuzzerControl+0x50>
		{

			SecAlm_PinStateChange = STD_LOW;
 800264e:	4b15      	ldr	r3, [pc, #84]	; (80026a4 <SecAlmLightsBuzzerControl+0x9c>)
 8002650:	2200      	movs	r2, #0
 8002652:	701a      	strb	r2, [r3, #0]
			SecAlmTurnOnExtLights();
 8002654:	f7ff ffae 	bl	80025b4 <SecAlmTurnOnExtLights>

		/* do nothing */

	}

	if(SecAlm_TriggerIRQCounterForTimer4 >= 20)
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <SecAlmLightsBuzzerControl+0x98>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b13      	cmp	r3, #19
 800265e:	d918      	bls.n	8002692 <SecAlmLightsBuzzerControl+0x8a>
	{

		HAL_TIM_Base_Stop_IT(&htim4);
 8002660:	480e      	ldr	r0, [pc, #56]	; (800269c <SecAlmLightsBuzzerControl+0x94>)
 8002662:	f007 f885 	bl	8009770 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim5);
 8002666:	4810      	ldr	r0, [pc, #64]	; (80026a8 <SecAlmLightsBuzzerControl+0xa0>)
 8002668:	f007 f882 	bl	8009770 <HAL_TIM_Base_Stop_IT>

		SecAlm_Trigger 						= STD_LOW;
 800266c:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <SecAlmLightsBuzzerControl+0x90>)
 800266e:	2200      	movs	r2, #0
 8002670:	701a      	strb	r2, [r3, #0]
		SecAlm_PinStateChange 				= STD_LOW;
 8002672:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <SecAlmLightsBuzzerControl+0x9c>)
 8002674:	2200      	movs	r2, #0
 8002676:	701a      	strb	r2, [r3, #0]
		SecAlm_TriggerIRQCounterForTimer4 	= STD_LOW;
 8002678:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <SecAlmLightsBuzzerControl+0x98>)
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim3IRQFlag 					= STD_HIGH;
 800267e:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <SecAlmLightsBuzzerControl+0xa4>)
 8002680:	2201      	movs	r2, #1
 8002682:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim11IRQFlag 				= STD_LOW;
 8002684:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <SecAlmLightsBuzzerControl+0xa8>)
 8002686:	2200      	movs	r2, #0
 8002688:	701a      	strb	r2, [r3, #0]

		SecAlmInit();
 800268a:	f000 f81b 	bl	80026c4 <SecAlmInit>
		SecAlmTurnOnExtLights();
 800268e:	f7ff ff91 	bl	80025b4 <SecAlmTurnOnExtLights>

		/* do nothing */

	}

}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	200000f6 	.word	0x200000f6
 800269c:	20000594 	.word	0x20000594
 80026a0:	200000f8 	.word	0x200000f8
 80026a4:	200000f7 	.word	0x200000f7
 80026a8:	20000648 	.word	0x20000648
 80026ac:	20000098 	.word	0x20000098
 80026b0:	2000009a 	.word	0x2000009a

080026b4 <SecAlmMainFunction>:

void SecAlmMainFunction()
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0

	SecAlmState();
 80026b8:	f7ff ff62 	bl	8002580 <SecAlmState>
	SecAlmLightsBuzzerControl();
 80026bc:	f7ff ffa4 	bl	8002608 <SecAlmLightsBuzzerControl>

}
 80026c0:	bf00      	nop
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <SecAlmInit>:

StdReturnType SecAlmInit()
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0

	SecAlm_Trigger					 	= STD_LOW;
 80026c8:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <SecAlmInit+0x30>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
	SecAlm_PinStateChange 				= STD_LOW;
 80026ce:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <SecAlmInit+0x34>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
	SecAlm_TriggerIRQCounterForTimer4 	= STD_LOW;
 80026d4:	4b09      	ldr	r3, [pc, #36]	; (80026fc <SecAlmInit+0x38>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	701a      	strb	r2, [r3, #0]
	SecAlm_IsAlmOnFlag 					= STD_LOW;
 80026da:	4b09      	ldr	r3, [pc, #36]	; (8002700 <SecAlmInit+0x3c>)
 80026dc:	2200      	movs	r2, #0
 80026de:	701a      	strb	r2, [r3, #0]
	SecAlm_VibSenStatusFlag 			= STD_LOW;
 80026e0:	4b08      	ldr	r3, [pc, #32]	; (8002704 <SecAlmInit+0x40>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Init(&htim4);
 80026e6:	4808      	ldr	r0, [pc, #32]	; (8002708 <SecAlmInit+0x44>)
 80026e8:	f006 fede 	bl	80094a8 <HAL_TIM_Base_Init>

	return E_OK;
 80026ec:	2300      	movs	r3, #0

}
 80026ee:	4618      	mov	r0, r3
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	200000f6 	.word	0x200000f6
 80026f8:	200000f7 	.word	0x200000f7
 80026fc:	200000f8 	.word	0x200000f8
 8002700:	200000f9 	.word	0x200000f9
 8002704:	200000fc 	.word	0x200000fc
 8002708:	20000594 	.word	0x20000594

0800270c <SecAlmToggleAlarmBuzzer>:

void SecAlmToggleAlarmBuzzer(uint8 PinState)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(SECALM_BUZZER_PORT, SECALM_BUZZER_PIN, PinState);
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	461a      	mov	r2, r3
 800271a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800271e:	4803      	ldr	r0, [pc, #12]	; (800272c <SecAlmToggleAlarmBuzzer+0x20>)
 8002720:	f003 fe20 	bl	8006364 <HAL_GPIO_WritePin>

}
 8002724:	bf00      	nop
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40020400 	.word	0x40020400

08002730 <SecAlmToggleAlarmLed>:

void SecAlmToggleAlarmLed(uint8 PinState)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(SECALM_LED_PORT, SECALM_LED_PIN, PinState);
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	461a      	mov	r2, r3
 800273e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002742:	4803      	ldr	r0, [pc, #12]	; (8002750 <SecAlmToggleAlarmLed+0x20>)
 8002744:	f003 fe0e 	bl	8006364 <HAL_GPIO_WritePin>

}
 8002748:	bf00      	nop
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40020000 	.word	0x40020000

08002754 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800275a:	463b      	mov	r3, r7
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002766:	4b36      	ldr	r3, [pc, #216]	; (8002840 <MX_ADC1_Init+0xec>)
 8002768:	4a36      	ldr	r2, [pc, #216]	; (8002844 <MX_ADC1_Init+0xf0>)
 800276a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800276c:	4b34      	ldr	r3, [pc, #208]	; (8002840 <MX_ADC1_Init+0xec>)
 800276e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002772:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002774:	4b32      	ldr	r3, [pc, #200]	; (8002840 <MX_ADC1_Init+0xec>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800277a:	4b31      	ldr	r3, [pc, #196]	; (8002840 <MX_ADC1_Init+0xec>)
 800277c:	2201      	movs	r2, #1
 800277e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002780:	4b2f      	ldr	r3, [pc, #188]	; (8002840 <MX_ADC1_Init+0xec>)
 8002782:	2201      	movs	r2, #1
 8002784:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002786:	4b2e      	ldr	r3, [pc, #184]	; (8002840 <MX_ADC1_Init+0xec>)
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800278e:	4b2c      	ldr	r3, [pc, #176]	; (8002840 <MX_ADC1_Init+0xec>)
 8002790:	2200      	movs	r2, #0
 8002792:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002794:	4b2a      	ldr	r3, [pc, #168]	; (8002840 <MX_ADC1_Init+0xec>)
 8002796:	4a2c      	ldr	r2, [pc, #176]	; (8002848 <MX_ADC1_Init+0xf4>)
 8002798:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800279a:	4b29      	ldr	r3, [pc, #164]	; (8002840 <MX_ADC1_Init+0xec>)
 800279c:	2200      	movs	r2, #0
 800279e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80027a0:	4b27      	ldr	r3, [pc, #156]	; (8002840 <MX_ADC1_Init+0xec>)
 80027a2:	2204      	movs	r2, #4
 80027a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80027a6:	4b26      	ldr	r3, [pc, #152]	; (8002840 <MX_ADC1_Init+0xec>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027ae:	4b24      	ldr	r3, [pc, #144]	; (8002840 <MX_ADC1_Init+0xec>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80027b4:	4822      	ldr	r0, [pc, #136]	; (8002840 <MX_ADC1_Init+0xec>)
 80027b6:	f001 fb65 	bl	8003e84 <HAL_ADC_Init>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80027c0:	f000 fcd6 	bl	8003170 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80027c4:	2302      	movs	r3, #2
 80027c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80027c8:	2301      	movs	r3, #1
 80027ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027d0:	463b      	mov	r3, r7
 80027d2:	4619      	mov	r1, r3
 80027d4:	481a      	ldr	r0, [pc, #104]	; (8002840 <MX_ADC1_Init+0xec>)
 80027d6:	f001 ff59 	bl	800468c <HAL_ADC_ConfigChannel>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80027e0:	f000 fcc6 	bl	8003170 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80027e4:	2303      	movs	r3, #3
 80027e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80027e8:	2302      	movs	r3, #2
 80027ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027ec:	463b      	mov	r3, r7
 80027ee:	4619      	mov	r1, r3
 80027f0:	4813      	ldr	r0, [pc, #76]	; (8002840 <MX_ADC1_Init+0xec>)
 80027f2:	f001 ff4b 	bl	800468c <HAL_ADC_ConfigChannel>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80027fc:	f000 fcb8 	bl	8003170 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002800:	2306      	movs	r3, #6
 8002802:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002804:	2303      	movs	r3, #3
 8002806:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002808:	463b      	mov	r3, r7
 800280a:	4619      	mov	r1, r3
 800280c:	480c      	ldr	r0, [pc, #48]	; (8002840 <MX_ADC1_Init+0xec>)
 800280e:	f001 ff3d 	bl	800468c <HAL_ADC_ConfigChannel>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002818:	f000 fcaa 	bl	8003170 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <MX_ADC1_Init+0xf8>)
 800281e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002820:	2304      	movs	r3, #4
 8002822:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002824:	463b      	mov	r3, r7
 8002826:	4619      	mov	r1, r3
 8002828:	4805      	ldr	r0, [pc, #20]	; (8002840 <MX_ADC1_Init+0xec>)
 800282a:	f001 ff2f 	bl	800468c <HAL_ADC_ConfigChannel>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002834:	f000 fc9c 	bl	8003170 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002838:	bf00      	nop
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	20000100 	.word	0x20000100
 8002844:	40012000 	.word	0x40012000
 8002848:	0f000001 	.word	0x0f000001
 800284c:	10000012 	.word	0x10000012

08002850 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b08a      	sub	sp, #40	; 0x28
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002858:	f107 0314 	add.w	r3, r7, #20
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]
 8002866:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a32      	ldr	r2, [pc, #200]	; (8002938 <HAL_ADC_MspInit+0xe8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d15e      	bne.n	8002930 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	4b31      	ldr	r3, [pc, #196]	; (800293c <HAL_ADC_MspInit+0xec>)
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	4a30      	ldr	r2, [pc, #192]	; (800293c <HAL_ADC_MspInit+0xec>)
 800287c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002880:	6453      	str	r3, [r2, #68]	; 0x44
 8002882:	4b2e      	ldr	r3, [pc, #184]	; (800293c <HAL_ADC_MspInit+0xec>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	4b2a      	ldr	r3, [pc, #168]	; (800293c <HAL_ADC_MspInit+0xec>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	4a29      	ldr	r2, [pc, #164]	; (800293c <HAL_ADC_MspInit+0xec>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	6313      	str	r3, [r2, #48]	; 0x30
 800289e:	4b27      	ldr	r3, [pc, #156]	; (800293c <HAL_ADC_MspInit+0xec>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6;
 80028aa:	234c      	movs	r3, #76	; 0x4c
 80028ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028ae:	2303      	movs	r3, #3
 80028b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b6:	f107 0314 	add.w	r3, r7, #20
 80028ba:	4619      	mov	r1, r3
 80028bc:	4820      	ldr	r0, [pc, #128]	; (8002940 <HAL_ADC_MspInit+0xf0>)
 80028be:	f003 fa91 	bl	8005de4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80028c2:	4b20      	ldr	r3, [pc, #128]	; (8002944 <HAL_ADC_MspInit+0xf4>)
 80028c4:	4a20      	ldr	r2, [pc, #128]	; (8002948 <HAL_ADC_MspInit+0xf8>)
 80028c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80028c8:	4b1e      	ldr	r3, [pc, #120]	; (8002944 <HAL_ADC_MspInit+0xf4>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028ce:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <HAL_ADC_MspInit+0xf4>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80028d4:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <HAL_ADC_MspInit+0xf4>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80028da:	4b1a      	ldr	r3, [pc, #104]	; (8002944 <HAL_ADC_MspInit+0xf4>)
 80028dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028e0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028e2:	4b18      	ldr	r3, [pc, #96]	; (8002944 <HAL_ADC_MspInit+0xf4>)
 80028e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028e8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80028ea:	4b16      	ldr	r3, [pc, #88]	; (8002944 <HAL_ADC_MspInit+0xf4>)
 80028ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80028f2:	4b14      	ldr	r3, [pc, #80]	; (8002944 <HAL_ADC_MspInit+0xf4>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80028f8:	4b12      	ldr	r3, [pc, #72]	; (8002944 <HAL_ADC_MspInit+0xf4>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028fe:	4b11      	ldr	r3, [pc, #68]	; (8002944 <HAL_ADC_MspInit+0xf4>)
 8002900:	2200      	movs	r2, #0
 8002902:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002904:	480f      	ldr	r0, [pc, #60]	; (8002944 <HAL_ADC_MspInit+0xf4>)
 8002906:	f002 fb0d 	bl	8004f24 <HAL_DMA_Init>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002910:	f000 fc2e 	bl	8003170 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a0b      	ldr	r2, [pc, #44]	; (8002944 <HAL_ADC_MspInit+0xf4>)
 8002918:	639a      	str	r2, [r3, #56]	; 0x38
 800291a:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <HAL_ADC_MspInit+0xf4>)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8002920:	2200      	movs	r2, #0
 8002922:	2105      	movs	r1, #5
 8002924:	2012      	movs	r0, #18
 8002926:	f002 fa8f 	bl	8004e48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800292a:	2012      	movs	r0, #18
 800292c:	f002 fab8 	bl	8004ea0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002930:	bf00      	nop
 8002932:	3728      	adds	r7, #40	; 0x28
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40012000 	.word	0x40012000
 800293c:	40023800 	.word	0x40023800
 8002940:	40020000 	.word	0x40020000
 8002944:	20000164 	.word	0x20000164
 8002948:	40026410 	.word	0x40026410

0800294c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002950:	4b06      	ldr	r3, [pc, #24]	; (800296c <MX_CRC_Init+0x20>)
 8002952:	4a07      	ldr	r2, [pc, #28]	; (8002970 <MX_CRC_Init+0x24>)
 8002954:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002956:	4805      	ldr	r0, [pc, #20]	; (800296c <MX_CRC_Init+0x20>)
 8002958:	f002 faba 	bl	8004ed0 <HAL_CRC_Init>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002962:	f000 fc05 	bl	8003170 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	200001c4 	.word	0x200001c4
 8002970:	40023000 	.word	0x40023000

08002974 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a0b      	ldr	r2, [pc, #44]	; (80029b0 <HAL_CRC_MspInit+0x3c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d10d      	bne.n	80029a2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <HAL_CRC_MspInit+0x40>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	4a09      	ldr	r2, [pc, #36]	; (80029b4 <HAL_CRC_MspInit+0x40>)
 8002990:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002994:	6313      	str	r3, [r2, #48]	; 0x30
 8002996:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <HAL_CRC_MspInit+0x40>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80029a2:	bf00      	nop
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40023000 	.word	0x40023000
 80029b4:	40023800 	.word	0x40023800

080029b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	607b      	str	r3, [r7, #4]
 80029c2:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <MX_DMA_Init+0x3c>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	4a0b      	ldr	r2, [pc, #44]	; (80029f4 <MX_DMA_Init+0x3c>)
 80029c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029cc:	6313      	str	r3, [r2, #48]	; 0x30
 80029ce:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <MX_DMA_Init+0x3c>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d6:	607b      	str	r3, [r7, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80029da:	2200      	movs	r2, #0
 80029dc:	2105      	movs	r1, #5
 80029de:	2038      	movs	r0, #56	; 0x38
 80029e0:	f002 fa32 	bl	8004e48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80029e4:	2038      	movs	r0, #56	; 0x38
 80029e6:	f002 fa5b 	bl	8004ea0 <HAL_NVIC_EnableIRQ>

}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40023800 	.word	0x40023800

080029f8 <configureTimerForRunTimeStats>:
void vApplicationDaemonTaskStartupHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0

}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8002a06:	b480      	push	{r7}
 8002a08:	af00      	add	r7, sp, #0
return 0;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8002a16:	b480      	push	{r7}
 8002a18:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8002a1a:	bf00      	nop
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8002a28:	bf00      	nop
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
 8002a3a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <vApplicationDaemonTaskStartupHook>:
/* USER CODE END 5 */

/* USER CODE BEGIN DAEMON_TASK_STARTUP_HOOK */
void vApplicationDaemonTaskStartupHook(void)
{
 8002a56:	b480      	push	{r7}
 8002a58:	af00      	add	r7, sp, #0
}
 8002a5a:	bf00      	nop
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <PreSleepProcessing>:
/* USER CODE END DAEMON_TASK_STARTUP_HOOK */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of PdcFrontDelayTimer */
  PdcFrontDelayTimerHandle = osTimerNew(PdcFrontDelayCallback, osTimerPeriodic, NULL, &PdcFrontDelayTimer_attributes);
 8002a90:	4b23      	ldr	r3, [pc, #140]	; (8002b20 <MX_FREERTOS_Init+0x94>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	2101      	movs	r1, #1
 8002a96:	4823      	ldr	r0, [pc, #140]	; (8002b24 <MX_FREERTOS_Init+0x98>)
 8002a98:	f008 ffb4 	bl	800ba04 <osTimerNew>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	4a22      	ldr	r2, [pc, #136]	; (8002b28 <MX_FREERTOS_Init+0x9c>)
 8002aa0:	6013      	str	r3, [r2, #0]

  /* creation of PdcSecondFrontDelayTimer */
  PdcSecondFrontDelayTimerHandle = osTimerNew(PdcSecondFrontDelayCallback, osTimerPeriodic, NULL, &PdcSecondFrontDelayTimer_attributes);
 8002aa2:	4b22      	ldr	r3, [pc, #136]	; (8002b2c <MX_FREERTOS_Init+0xa0>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	4821      	ldr	r0, [pc, #132]	; (8002b30 <MX_FREERTOS_Init+0xa4>)
 8002aaa:	f008 ffab 	bl	800ba04 <osTimerNew>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	4a20      	ldr	r2, [pc, #128]	; (8002b34 <MX_FREERTOS_Init+0xa8>)
 8002ab2:	6013      	str	r3, [r2, #0]

  /* creation of PdcFrontGlobalTimer */
  PdcFrontGlobalTimerHandle = osTimerNew(PdcFrontGlobalTimerCallback, osTimerPeriodic, NULL, &PdcFrontGlobalTimer_attributes);
 8002ab4:	4b20      	ldr	r3, [pc, #128]	; (8002b38 <MX_FREERTOS_Init+0xac>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2101      	movs	r1, #1
 8002aba:	4820      	ldr	r0, [pc, #128]	; (8002b3c <MX_FREERTOS_Init+0xb0>)
 8002abc:	f008 ffa2 	bl	800ba04 <osTimerNew>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	4a1f      	ldr	r2, [pc, #124]	; (8002b40 <MX_FREERTOS_Init+0xb4>)
 8002ac4:	6013      	str	r3, [r2, #0]

  /* creation of PdcRearGlobalTimer */
  PdcRearGlobalTimerHandle = osTimerNew(PdcRearGlobalCallback, osTimerPeriodic, NULL, &PdcRearGlobalTimer_attributes);
 8002ac6:	4b1f      	ldr	r3, [pc, #124]	; (8002b44 <MX_FREERTOS_Init+0xb8>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	2101      	movs	r1, #1
 8002acc:	481e      	ldr	r0, [pc, #120]	; (8002b48 <MX_FREERTOS_Init+0xbc>)
 8002ace:	f008 ff99 	bl	800ba04 <osTimerNew>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	4a1d      	ldr	r2, [pc, #116]	; (8002b4c <MX_FREERTOS_Init+0xc0>)
 8002ad6:	6013      	str	r3, [r2, #0]

  /* creation of PdcRearDelayTimer */
  PdcRearDelayTimerHandle = osTimerNew(PdcRearDelayCallback, osTimerPeriodic, NULL, &PdcRearDelayTimer_attributes);
 8002ad8:	4b1d      	ldr	r3, [pc, #116]	; (8002b50 <MX_FREERTOS_Init+0xc4>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	2101      	movs	r1, #1
 8002ade:	481d      	ldr	r0, [pc, #116]	; (8002b54 <MX_FREERTOS_Init+0xc8>)
 8002ae0:	f008 ff90 	bl	800ba04 <osTimerNew>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	4a1c      	ldr	r2, [pc, #112]	; (8002b58 <MX_FREERTOS_Init+0xcc>)
 8002ae8:	6013      	str	r3, [r2, #0]

  /* creation of PdcSecondRearDelayTimer */
  PdcSecondRearDelayTimerHandle = osTimerNew(PdcSecondRearDelayCallback, osTimerPeriodic, NULL, &PdcSecondRearDelayTimer_attributes);
 8002aea:	4b1c      	ldr	r3, [pc, #112]	; (8002b5c <MX_FREERTOS_Init+0xd0>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	2101      	movs	r1, #1
 8002af0:	481b      	ldr	r0, [pc, #108]	; (8002b60 <MX_FREERTOS_Init+0xd4>)
 8002af2:	f008 ff87 	bl	800ba04 <osTimerNew>
 8002af6:	4603      	mov	r3, r0
 8002af8:	4a1a      	ldr	r2, [pc, #104]	; (8002b64 <MX_FREERTOS_Init+0xd8>)
 8002afa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002afc:	4a1a      	ldr	r2, [pc, #104]	; (8002b68 <MX_FREERTOS_Init+0xdc>)
 8002afe:	2100      	movs	r1, #0
 8002b00:	481a      	ldr	r0, [pc, #104]	; (8002b6c <MX_FREERTOS_Init+0xe0>)
 8002b02:	f008 febb 	bl	800b87c <osThreadNew>
 8002b06:	4603      	mov	r3, r0
 8002b08:	4a19      	ldr	r2, [pc, #100]	; (8002b70 <MX_FREERTOS_Init+0xe4>)
 8002b0a:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8002b0c:	4a19      	ldr	r2, [pc, #100]	; (8002b74 <MX_FREERTOS_Init+0xe8>)
 8002b0e:	2100      	movs	r1, #0
 8002b10:	4819      	ldr	r0, [pc, #100]	; (8002b78 <MX_FREERTOS_Init+0xec>)
 8002b12:	f008 feb3 	bl	800b87c <osThreadNew>
 8002b16:	4603      	mov	r3, r0
 8002b18:	4a18      	ldr	r2, [pc, #96]	; (8002b7c <MX_FREERTOS_Init+0xf0>)
 8002b1a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002b1c:	bf00      	nop
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	0800f3d0 	.word	0x0800f3d0
 8002b24:	08002bcd 	.word	0x08002bcd
 8002b28:	200001d8 	.word	0x200001d8
 8002b2c:	0800f3e0 	.word	0x0800f3e0
 8002b30:	08002bed 	.word	0x08002bed
 8002b34:	200001dc 	.word	0x200001dc
 8002b38:	0800f3f0 	.word	0x0800f3f0
 8002b3c:	08002c0d 	.word	0x08002c0d
 8002b40:	200001e0 	.word	0x200001e0
 8002b44:	0800f400 	.word	0x0800f400
 8002b48:	08002c21 	.word	0x08002c21
 8002b4c:	200001e4 	.word	0x200001e4
 8002b50:	0800f410 	.word	0x0800f410
 8002b54:	08002c35 	.word	0x08002c35
 8002b58:	200001e8 	.word	0x200001e8
 8002b5c:	0800f420 	.word	0x0800f420
 8002b60:	08002c55 	.word	0x08002c55
 8002b64:	200001ec 	.word	0x200001ec
 8002b68:	0800f388 	.word	0x0800f388
 8002b6c:	08002b81 	.word	0x08002b81
 8002b70:	200001d0 	.word	0x200001d0
 8002b74:	0800f3ac 	.word	0x0800f3ac
 8002b78:	08002bad 	.word	0x08002bad
 8002b7c:	200001d4 	.word	0x200001d4

08002b80 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  for(;;)
  {

		BtcMainFunction();
 8002b88:	f7fe fbae 	bl	80012e8 <BtcMainFunction>
		CenLocMainFunction();
 8002b8c:	f7fe fdac 	bl	80016e8 <CenLocMainFunction>
		ExtLightsMainFunction();
 8002b90:	f7fe fe72 	bl	8001878 <ExtLightsMainFunction>
		IntLightsMainFunction();
 8002b94:	f7ff fa54 	bl	8002040 <IntLightsMainFunction>
		SecAlmMainFunction();
 8002b98:	f7ff fd8c 	bl	80026b4 <SecAlmMainFunction>
		HVACMainFunction();
 8002b9c:	f7ff f8dc 	bl	8001d58 <HVACMainFunction>
		PdcMainFunction();
 8002ba0:	f7ff fcb8 	bl	8002514 <PdcMainFunction>

		osDelay(1);
 8002ba4:	2001      	movs	r0, #1
 8002ba6:	f008 fefc 	bl	800b9a2 <osDelay>
		BtcMainFunction();
 8002baa:	e7ed      	b.n	8002b88 <StartDefaultTask+0x8>

08002bac <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  OS_Counter++;
 8002bb4:	4b04      	ldr	r3, [pc, #16]	; (8002bc8 <StartTask02+0x1c>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	4a03      	ldr	r2, [pc, #12]	; (8002bc8 <StartTask02+0x1c>)
 8002bbc:	6013      	str	r3, [r2, #0]
	  osDelay(1);
 8002bbe:	2001      	movs	r0, #1
 8002bc0:	f008 feef 	bl	800b9a2 <osDelay>
	  OS_Counter++;
 8002bc4:	e7f6      	b.n	8002bb4 <StartTask02+0x8>
 8002bc6:	bf00      	nop
 8002bc8:	200001cc 	.word	0x200001cc

08002bcc <PdcFrontDelayCallback>:
  /* USER CODE END StartTask02 */
}

/* PdcFrontDelayCallback function */
void PdcFrontDelayCallback(void *argument)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcFrontDelayCallback */
	Pdc_FrontGenerateDelayFlag = STD_HIGH;
 8002bd4:	4b04      	ldr	r3, [pc, #16]	; (8002be8 <PdcFrontDelayCallback+0x1c>)
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END PdcFrontDelayCallback */
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	200000ef 	.word	0x200000ef

08002bec <PdcSecondFrontDelayCallback>:

/* PdcSecondFrontDelayCallback function */
void PdcSecondFrontDelayCallback(void *argument)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcSecondFrontDelayCallback */
	Pdc_SecondFrontGenerateDelayFlag = STD_HIGH;
 8002bf4:	4b04      	ldr	r3, [pc, #16]	; (8002c08 <PdcSecondFrontDelayCallback+0x1c>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END PdcSecondFrontDelayCallback */
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	200000f3 	.word	0x200000f3

08002c0c <PdcFrontGlobalTimerCallback>:

/* PdcFrontGlobalTimerCallback function */
void PdcFrontGlobalTimerCallback(void *argument)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcFrontGlobalTimerCallback */

  /* USER CODE END PdcFrontGlobalTimerCallback */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <PdcRearGlobalCallback>:

/* PdcRearGlobalCallback function */
void PdcRearGlobalCallback(void *argument)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcRearGlobalCallback */

  /* USER CODE END PdcRearGlobalCallback */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <PdcRearDelayCallback>:

/* PdcRearDelayCallback function */
void PdcRearDelayCallback(void *argument)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcRearDelayCallback */
	Pdc_RearGenerateDelayFlag = STD_HIGH;
 8002c3c:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <PdcRearDelayCallback+0x1c>)
 8002c3e:	2201      	movs	r2, #1
 8002c40:	701a      	strb	r2, [r3, #0]
  /* USER CODE END PdcRearDelayCallback */
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	200000ee 	.word	0x200000ee

08002c54 <PdcSecondRearDelayCallback>:

/* PdcSecondRearDelayCallback function */
void PdcSecondRearDelayCallback(void *argument)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcSecondRearDelayCallback */
	Pdc_SecondRearGenerateDelayFlag = STD_HIGH;
 8002c5c:	4b04      	ldr	r3, [pc, #16]	; (8002c70 <PdcSecondRearDelayCallback+0x1c>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	701a      	strb	r2, [r3, #0]
  /* USER CODE END PdcSecondRearDelayCallback */
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	200000f2 	.word	0x200000f2

08002c74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08a      	sub	sp, #40	; 0x28
 8002c78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c7a:	f107 0314 	add.w	r3, r7, #20
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	605a      	str	r2, [r3, #4]
 8002c84:	609a      	str	r2, [r3, #8]
 8002c86:	60da      	str	r2, [r3, #12]
 8002c88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	4b43      	ldr	r3, [pc, #268]	; (8002d9c <MX_GPIO_Init+0x128>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	4a42      	ldr	r2, [pc, #264]	; (8002d9c <MX_GPIO_Init+0x128>)
 8002c94:	f043 0304 	orr.w	r3, r3, #4
 8002c98:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9a:	4b40      	ldr	r3, [pc, #256]	; (8002d9c <MX_GPIO_Init+0x128>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	613b      	str	r3, [r7, #16]
 8002ca4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	4b3c      	ldr	r3, [pc, #240]	; (8002d9c <MX_GPIO_Init+0x128>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	4a3b      	ldr	r2, [pc, #236]	; (8002d9c <MX_GPIO_Init+0x128>)
 8002cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb6:	4b39      	ldr	r3, [pc, #228]	; (8002d9c <MX_GPIO_Init+0x128>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60bb      	str	r3, [r7, #8]
 8002cc6:	4b35      	ldr	r3, [pc, #212]	; (8002d9c <MX_GPIO_Init+0x128>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	4a34      	ldr	r2, [pc, #208]	; (8002d9c <MX_GPIO_Init+0x128>)
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd2:	4b32      	ldr	r3, [pc, #200]	; (8002d9c <MX_GPIO_Init+0x128>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	60bb      	str	r3, [r7, #8]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	607b      	str	r3, [r7, #4]
 8002ce2:	4b2e      	ldr	r3, [pc, #184]	; (8002d9c <MX_GPIO_Init+0x128>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	4a2d      	ldr	r2, [pc, #180]	; (8002d9c <MX_GPIO_Init+0x128>)
 8002ce8:	f043 0302 	orr.w	r3, r3, #2
 8002cec:	6313      	str	r3, [r2, #48]	; 0x30
 8002cee:	4b2b      	ldr	r3, [pc, #172]	; (8002d9c <MX_GPIO_Init+0x128>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	607b      	str	r3, [r7, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|LTS_Pin|RTS_Pin|IL_Pin
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f64f 411c 	movw	r1, #64540	; 0xfc1c
 8002d00:	4827      	ldr	r0, [pc, #156]	; (8002da0 <MX_GPIO_Init+0x12c>)
 8002d02:	f003 fb2f 	bl	8006364 <HAL_GPIO_WritePin>
                          |FL_Pin|BUZZ1_Pin|RFL_Pin|BL_Pin
                          |PRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DRL_Pin|LB_Pin|SAL_Pin, GPIO_PIN_RESET);
 8002d06:	2200      	movs	r2, #0
 8002d08:	f248 0112 	movw	r1, #32786	; 0x8012
 8002d0c:	4825      	ldr	r0, [pc, #148]	; (8002da4 <MX_GPIO_Init+0x130>)
 8002d0e:	f003 fb29 	bl	8006364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HB_Pin|BUZZ2_Pin|BUZZ3_Pin|BUZZ4_Pin
 8002d12:	2200      	movs	r2, #0
 8002d14:	f24e 0181 	movw	r1, #57473	; 0xe081
 8002d18:	4823      	ldr	r0, [pc, #140]	; (8002da8 <MX_GPIO_Init+0x134>)
 8002d1a:	f003 fb23 	bl	8006364 <HAL_GPIO_WritePin>
                          |CLL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|LTS_Pin|RTS_Pin|IL_Pin
 8002d1e:	f64f 431c 	movw	r3, #64540	; 0xfc1c
 8002d22:	617b      	str	r3, [r7, #20]
                          |FL_Pin|BUZZ1_Pin|RFL_Pin|BL_Pin
                          |PRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d24:	2301      	movs	r3, #1
 8002d26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d30:	f107 0314 	add.w	r3, r7, #20
 8002d34:	4619      	mov	r1, r3
 8002d36:	481a      	ldr	r0, [pc, #104]	; (8002da0 <MX_GPIO_Init+0x12c>)
 8002d38:	f003 f854 	bl	8005de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LPN_Pin;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d40:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002d44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d46:	2300      	movs	r3, #0
 8002d48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LPN_GPIO_Port, &GPIO_InitStruct);
 8002d4a:	f107 0314 	add.w	r3, r7, #20
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4814      	ldr	r0, [pc, #80]	; (8002da4 <MX_GPIO_Init+0x130>)
 8002d52:	f003 f847 	bl	8005de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DRL_Pin|LB_Pin|SAL_Pin;
 8002d56:	f248 0312 	movw	r3, #32786	; 0x8012
 8002d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d64:	2300      	movs	r3, #0
 8002d66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d68:	f107 0314 	add.w	r3, r7, #20
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	480d      	ldr	r0, [pc, #52]	; (8002da4 <MX_GPIO_Init+0x130>)
 8002d70:	f003 f838 	bl	8005de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = HB_Pin|BUZZ2_Pin|BUZZ3_Pin|BUZZ4_Pin
 8002d74:	f24e 0381 	movw	r3, #57473	; 0xe081
 8002d78:	617b      	str	r3, [r7, #20]
                          |CLL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d82:	2300      	movs	r3, #0
 8002d84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d86:	f107 0314 	add.w	r3, r7, #20
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4806      	ldr	r0, [pc, #24]	; (8002da8 <MX_GPIO_Init+0x134>)
 8002d8e:	f003 f829 	bl	8005de4 <HAL_GPIO_Init>

}
 8002d92:	bf00      	nop
 8002d94:	3728      	adds	r7, #40	; 0x28
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	40020800 	.word	0x40020800
 8002da4:	40020000 	.word	0x40020000
 8002da8:	40020400 	.word	0x40020400

08002dac <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002db0:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <MX_I2C1_Init+0x50>)
 8002db2:	4a13      	ldr	r2, [pc, #76]	; (8002e00 <MX_I2C1_Init+0x54>)
 8002db4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002db6:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <MX_I2C1_Init+0x50>)
 8002db8:	4a12      	ldr	r2, [pc, #72]	; (8002e04 <MX_I2C1_Init+0x58>)
 8002dba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002dbc:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <MX_I2C1_Init+0x50>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <MX_I2C1_Init+0x50>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002dc8:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <MX_I2C1_Init+0x50>)
 8002dca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002dce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002dd0:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <MX_I2C1_Init+0x50>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002dd6:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <MX_I2C1_Init+0x50>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ddc:	4b07      	ldr	r3, [pc, #28]	; (8002dfc <MX_I2C1_Init+0x50>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002de2:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <MX_I2C1_Init+0x50>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002de8:	4804      	ldr	r0, [pc, #16]	; (8002dfc <MX_I2C1_Init+0x50>)
 8002dea:	f003 faed 	bl	80063c8 <HAL_I2C_Init>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002df4:	f000 f9bc 	bl	8003170 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002df8:	bf00      	nop
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	200001f0 	.word	0x200001f0
 8002e00:	40005400 	.word	0x40005400
 8002e04:	000186a0 	.word	0x000186a0

08002e08 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002e0c:	4b12      	ldr	r3, [pc, #72]	; (8002e58 <MX_I2C3_Init+0x50>)
 8002e0e:	4a13      	ldr	r2, [pc, #76]	; (8002e5c <MX_I2C3_Init+0x54>)
 8002e10:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002e12:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <MX_I2C3_Init+0x50>)
 8002e14:	4a12      	ldr	r2, [pc, #72]	; (8002e60 <MX_I2C3_Init+0x58>)
 8002e16:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e18:	4b0f      	ldr	r3, [pc, #60]	; (8002e58 <MX_I2C3_Init+0x50>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002e1e:	4b0e      	ldr	r3, [pc, #56]	; (8002e58 <MX_I2C3_Init+0x50>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e24:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <MX_I2C3_Init+0x50>)
 8002e26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e2a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e2c:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <MX_I2C3_Init+0x50>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002e32:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <MX_I2C3_Init+0x50>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e38:	4b07      	ldr	r3, [pc, #28]	; (8002e58 <MX_I2C3_Init+0x50>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e3e:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <MX_I2C3_Init+0x50>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002e44:	4804      	ldr	r0, [pc, #16]	; (8002e58 <MX_I2C3_Init+0x50>)
 8002e46:	f003 fabf 	bl	80063c8 <HAL_I2C_Init>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002e50:	f000 f98e 	bl	8003170 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002e54:	bf00      	nop
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20000274 	.word	0x20000274
 8002e5c:	40005c00 	.word	0x40005c00
 8002e60:	000186a0 	.word	0x000186a0

08002e64 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08c      	sub	sp, #48	; 0x30
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e6c:	f107 031c 	add.w	r3, r7, #28
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	605a      	str	r2, [r3, #4]
 8002e76:	609a      	str	r2, [r3, #8]
 8002e78:	60da      	str	r2, [r3, #12]
 8002e7a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a52      	ldr	r2, [pc, #328]	; (8002fcc <HAL_I2C_MspInit+0x168>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d13d      	bne.n	8002f02 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	61bb      	str	r3, [r7, #24]
 8002e8a:	4b51      	ldr	r3, [pc, #324]	; (8002fd0 <HAL_I2C_MspInit+0x16c>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	4a50      	ldr	r2, [pc, #320]	; (8002fd0 <HAL_I2C_MspInit+0x16c>)
 8002e90:	f043 0302 	orr.w	r3, r3, #2
 8002e94:	6313      	str	r3, [r2, #48]	; 0x30
 8002e96:	4b4e      	ldr	r3, [pc, #312]	; (8002fd0 <HAL_I2C_MspInit+0x16c>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	61bb      	str	r3, [r7, #24]
 8002ea0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ea2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ea6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ea8:	2312      	movs	r3, #18
 8002eaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002eb4:	2304      	movs	r3, #4
 8002eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eb8:	f107 031c 	add.w	r3, r7, #28
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4845      	ldr	r0, [pc, #276]	; (8002fd4 <HAL_I2C_MspInit+0x170>)
 8002ec0:	f002 ff90 	bl	8005de4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	4b41      	ldr	r3, [pc, #260]	; (8002fd0 <HAL_I2C_MspInit+0x16c>)
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	4a40      	ldr	r2, [pc, #256]	; (8002fd0 <HAL_I2C_MspInit+0x16c>)
 8002ece:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ed2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ed4:	4b3e      	ldr	r3, [pc, #248]	; (8002fd0 <HAL_I2C_MspInit+0x16c>)
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	2105      	movs	r1, #5
 8002ee4:	201f      	movs	r0, #31
 8002ee6:	f001 ffaf 	bl	8004e48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002eea:	201f      	movs	r0, #31
 8002eec:	f001 ffd8 	bl	8004ea0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	2105      	movs	r1, #5
 8002ef4:	2020      	movs	r0, #32
 8002ef6:	f001 ffa7 	bl	8004e48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002efa:	2020      	movs	r0, #32
 8002efc:	f001 ffd0 	bl	8004ea0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002f00:	e060      	b.n	8002fc4 <HAL_I2C_MspInit+0x160>
  else if(i2cHandle->Instance==I2C3)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a34      	ldr	r2, [pc, #208]	; (8002fd8 <HAL_I2C_MspInit+0x174>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d15b      	bne.n	8002fc4 <HAL_I2C_MspInit+0x160>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	4b2f      	ldr	r3, [pc, #188]	; (8002fd0 <HAL_I2C_MspInit+0x16c>)
 8002f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f14:	4a2e      	ldr	r2, [pc, #184]	; (8002fd0 <HAL_I2C_MspInit+0x16c>)
 8002f16:	f043 0304 	orr.w	r3, r3, #4
 8002f1a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f1c:	4b2c      	ldr	r3, [pc, #176]	; (8002fd0 <HAL_I2C_MspInit+0x16c>)
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	613b      	str	r3, [r7, #16]
 8002f26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	4b28      	ldr	r3, [pc, #160]	; (8002fd0 <HAL_I2C_MspInit+0x16c>)
 8002f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f30:	4a27      	ldr	r2, [pc, #156]	; (8002fd0 <HAL_I2C_MspInit+0x16c>)
 8002f32:	f043 0301 	orr.w	r3, r3, #1
 8002f36:	6313      	str	r3, [r2, #48]	; 0x30
 8002f38:	4b25      	ldr	r3, [pc, #148]	; (8002fd0 <HAL_I2C_MspInit+0x16c>)
 8002f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f4a:	2312      	movs	r3, #18
 8002f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f52:	2303      	movs	r3, #3
 8002f54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002f56:	2304      	movs	r3, #4
 8002f58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f5a:	f107 031c 	add.w	r3, r7, #28
 8002f5e:	4619      	mov	r1, r3
 8002f60:	481e      	ldr	r0, [pc, #120]	; (8002fdc <HAL_I2C_MspInit+0x178>)
 8002f62:	f002 ff3f 	bl	8005de4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f6c:	2312      	movs	r3, #18
 8002f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f74:	2303      	movs	r3, #3
 8002f76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002f78:	2304      	movs	r3, #4
 8002f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f7c:	f107 031c 	add.w	r3, r7, #28
 8002f80:	4619      	mov	r1, r3
 8002f82:	4817      	ldr	r0, [pc, #92]	; (8002fe0 <HAL_I2C_MspInit+0x17c>)
 8002f84:	f002 ff2e 	bl	8005de4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002f88:	2300      	movs	r3, #0
 8002f8a:	60bb      	str	r3, [r7, #8]
 8002f8c:	4b10      	ldr	r3, [pc, #64]	; (8002fd0 <HAL_I2C_MspInit+0x16c>)
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	4a0f      	ldr	r2, [pc, #60]	; (8002fd0 <HAL_I2C_MspInit+0x16c>)
 8002f92:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f96:	6413      	str	r3, [r2, #64]	; 0x40
 8002f98:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <HAL_I2C_MspInit+0x16c>)
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fa0:	60bb      	str	r3, [r7, #8]
 8002fa2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2105      	movs	r1, #5
 8002fa8:	2048      	movs	r0, #72	; 0x48
 8002faa:	f001 ff4d 	bl	8004e48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8002fae:	2048      	movs	r0, #72	; 0x48
 8002fb0:	f001 ff76 	bl	8004ea0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	2105      	movs	r1, #5
 8002fb8:	2049      	movs	r0, #73	; 0x49
 8002fba:	f001 ff45 	bl	8004e48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8002fbe:	2049      	movs	r0, #73	; 0x49
 8002fc0:	f001 ff6e 	bl	8004ea0 <HAL_NVIC_EnableIRQ>
}
 8002fc4:	bf00      	nop
 8002fc6:	3730      	adds	r7, #48	; 0x30
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40005400 	.word	0x40005400
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	40020400 	.word	0x40020400
 8002fd8:	40005c00 	.word	0x40005c00
 8002fdc:	40020800 	.word	0x40020800
 8002fe0:	40020000 	.word	0x40020000

08002fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fe8:	f000 ff0a 	bl	8003e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002fec:	f000 f82a 	bl	8003044 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ff0:	f7ff fe40 	bl	8002c74 <MX_GPIO_Init>
  MX_DMA_Init();
 8002ff4:	f7ff fce0 	bl	80029b8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002ff8:	f000 fdc4 	bl	8003b84 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002ffc:	f000 fb76 	bl	80036ec <MX_TIM2_Init>
  MX_TIM3_Init();
 8003000:	f000 fbc2 	bl	8003788 <MX_TIM3_Init>
  MX_TIM5_Init();
 8003004:	f000 fc5c 	bl	80038c0 <MX_TIM5_Init>
  MX_TIM4_Init();
 8003008:	f000 fc0c 	bl	8003824 <MX_TIM4_Init>
  MX_ADC1_Init();
 800300c:	f7ff fba2 	bl	8002754 <MX_ADC1_Init>
  MX_CRC_Init();
 8003010:	f7ff fc9c 	bl	800294c <MX_CRC_Init>
  MX_TIM9_Init();
 8003014:	f000 fca4 	bl	8003960 <MX_TIM9_Init>
  MX_I2C3_Init();
 8003018:	f7ff fef6 	bl	8002e08 <MX_I2C3_Init>
  MX_SPI1_Init();
 800301c:	f000 f8b8 	bl	8003190 <MX_SPI1_Init>
  MX_MBEDTLS_Init();
 8003020:	f008 fb96 	bl	800b750 <MX_MBEDTLS_Init>
  MX_TIM11_Init();
 8003024:	f000 fcd6 	bl	80039d4 <MX_TIM11_Init>
  MX_I2C1_Init();
 8003028:	f7ff fec0 	bl	8002dac <MX_I2C1_Init>
  /* Call PreOsInit function */
  MX_MBEDTLS_Init();
 800302c:	f008 fb90 	bl	800b750 <MX_MBEDTLS_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8003030:	f000 f870 	bl	8003114 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003034:	f008 fbd8 	bl	800b7e8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8003038:	f7ff fd28 	bl	8002a8c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800303c:	f008 fbf8 	bl	800b830 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003040:	e7fe      	b.n	8003040 <main+0x5c>
	...

08003044 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b094      	sub	sp, #80	; 0x50
 8003048:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800304a:	f107 0320 	add.w	r3, r7, #32
 800304e:	2230      	movs	r2, #48	; 0x30
 8003050:	2100      	movs	r1, #0
 8003052:	4618      	mov	r0, r3
 8003054:	f00b fd96 	bl	800eb84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003058:	f107 030c 	add.w	r3, r7, #12
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	605a      	str	r2, [r3, #4]
 8003062:	609a      	str	r2, [r3, #8]
 8003064:	60da      	str	r2, [r3, #12]
 8003066:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003068:	2300      	movs	r3, #0
 800306a:	60bb      	str	r3, [r7, #8]
 800306c:	4b27      	ldr	r3, [pc, #156]	; (800310c <SystemClock_Config+0xc8>)
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	4a26      	ldr	r2, [pc, #152]	; (800310c <SystemClock_Config+0xc8>)
 8003072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003076:	6413      	str	r3, [r2, #64]	; 0x40
 8003078:	4b24      	ldr	r3, [pc, #144]	; (800310c <SystemClock_Config+0xc8>)
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003080:	60bb      	str	r3, [r7, #8]
 8003082:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003084:	2300      	movs	r3, #0
 8003086:	607b      	str	r3, [r7, #4]
 8003088:	4b21      	ldr	r3, [pc, #132]	; (8003110 <SystemClock_Config+0xcc>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a20      	ldr	r2, [pc, #128]	; (8003110 <SystemClock_Config+0xcc>)
 800308e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003092:	6013      	str	r3, [r2, #0]
 8003094:	4b1e      	ldr	r3, [pc, #120]	; (8003110 <SystemClock_Config+0xcc>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800309c:	607b      	str	r3, [r7, #4]
 800309e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80030a0:	2301      	movs	r3, #1
 80030a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030aa:	2302      	movs	r3, #2
 80030ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80030b4:	2304      	movs	r3, #4
 80030b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80030b8:	2364      	movs	r3, #100	; 0x64
 80030ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80030bc:	2302      	movs	r3, #2
 80030be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80030c0:	2304      	movs	r3, #4
 80030c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030c4:	f107 0320 	add.w	r3, r7, #32
 80030c8:	4618      	mov	r0, r3
 80030ca:	f005 f897 	bl	80081fc <HAL_RCC_OscConfig>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80030d4:	f000 f84c 	bl	8003170 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030d8:	230f      	movs	r3, #15
 80030da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030dc:	2302      	movs	r3, #2
 80030de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030e0:	2300      	movs	r3, #0
 80030e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80030e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030ea:	2300      	movs	r3, #0
 80030ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80030ee:	f107 030c 	add.w	r3, r7, #12
 80030f2:	2103      	movs	r1, #3
 80030f4:	4618      	mov	r0, r3
 80030f6:	f005 fba9 	bl	800884c <HAL_RCC_ClockConfig>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003100:	f000 f836 	bl	8003170 <Error_Handler>
  }
}
 8003104:	bf00      	nop
 8003106:	3750      	adds	r7, #80	; 0x50
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40023800 	.word	0x40023800
 8003110:	40007000 	.word	0x40007000

08003114 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 8003118:	2200      	movs	r2, #0
 800311a:	2105      	movs	r1, #5
 800311c:	2004      	movs	r0, #4
 800311e:	f001 fe93 	bl	8004e48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8003122:	2004      	movs	r0, #4
 8003124:	f001 febc 	bl	8004ea0 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003128:	2200      	movs	r2, #0
 800312a:	2105      	movs	r1, #5
 800312c:	201c      	movs	r0, #28
 800312e:	f001 fe8b 	bl	8004e48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003132:	201c      	movs	r0, #28
 8003134:	f001 feb4 	bl	8004ea0 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 8003138:	2200      	movs	r2, #0
 800313a:	2105      	movs	r1, #5
 800313c:	2051      	movs	r0, #81	; 0x51
 800313e:	f001 fe83 	bl	8004e48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8003142:	2051      	movs	r0, #81	; 0x51
 8003144:	f001 feac 	bl	8004ea0 <HAL_NVIC_EnableIRQ>
}
 8003148:	bf00      	nop
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a04      	ldr	r2, [pc, #16]	; (800316c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d101      	bne.n	8003162 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800315e:	f000 fe71 	bl	8003e44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40010000 	.word	0x40010000

08003170 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003174:	b672      	cpsid	i
}
 8003176:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003178:	e7fe      	b.n	8003178 <Error_Handler+0x8>

0800317a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
 8003182:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003194:	4b17      	ldr	r3, [pc, #92]	; (80031f4 <MX_SPI1_Init+0x64>)
 8003196:	4a18      	ldr	r2, [pc, #96]	; (80031f8 <MX_SPI1_Init+0x68>)
 8003198:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800319a:	4b16      	ldr	r3, [pc, #88]	; (80031f4 <MX_SPI1_Init+0x64>)
 800319c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80031a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80031a2:	4b14      	ldr	r3, [pc, #80]	; (80031f4 <MX_SPI1_Init+0x64>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80031a8:	4b12      	ldr	r3, [pc, #72]	; (80031f4 <MX_SPI1_Init+0x64>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031ae:	4b11      	ldr	r3, [pc, #68]	; (80031f4 <MX_SPI1_Init+0x64>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031b4:	4b0f      	ldr	r3, [pc, #60]	; (80031f4 <MX_SPI1_Init+0x64>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80031ba:	4b0e      	ldr	r3, [pc, #56]	; (80031f4 <MX_SPI1_Init+0x64>)
 80031bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031c2:	4b0c      	ldr	r3, [pc, #48]	; (80031f4 <MX_SPI1_Init+0x64>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031c8:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <MX_SPI1_Init+0x64>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80031ce:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <MX_SPI1_Init+0x64>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031d4:	4b07      	ldr	r3, [pc, #28]	; (80031f4 <MX_SPI1_Init+0x64>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80031da:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <MX_SPI1_Init+0x64>)
 80031dc:	220a      	movs	r2, #10
 80031de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80031e0:	4804      	ldr	r0, [pc, #16]	; (80031f4 <MX_SPI1_Init+0x64>)
 80031e2:	f005 fe2d 	bl	8008e40 <HAL_SPI_Init>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80031ec:	f7ff ffc0 	bl	8003170 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80031f0:	bf00      	nop
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	200002f8 	.word	0x200002f8
 80031f8:	40013000 	.word	0x40013000

080031fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08a      	sub	sp, #40	; 0x28
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003204:	f107 0314 	add.w	r3, r7, #20
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	605a      	str	r2, [r3, #4]
 800320e:	609a      	str	r2, [r3, #8]
 8003210:	60da      	str	r2, [r3, #12]
 8003212:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a2c      	ldr	r2, [pc, #176]	; (80032cc <HAL_SPI_MspInit+0xd0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d151      	bne.n	80032c2 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800321e:	2300      	movs	r3, #0
 8003220:	613b      	str	r3, [r7, #16]
 8003222:	4b2b      	ldr	r3, [pc, #172]	; (80032d0 <HAL_SPI_MspInit+0xd4>)
 8003224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003226:	4a2a      	ldr	r2, [pc, #168]	; (80032d0 <HAL_SPI_MspInit+0xd4>)
 8003228:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800322c:	6453      	str	r3, [r2, #68]	; 0x44
 800322e:	4b28      	ldr	r3, [pc, #160]	; (80032d0 <HAL_SPI_MspInit+0xd4>)
 8003230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003232:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003236:	613b      	str	r3, [r7, #16]
 8003238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	4b24      	ldr	r3, [pc, #144]	; (80032d0 <HAL_SPI_MspInit+0xd4>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	4a23      	ldr	r2, [pc, #140]	; (80032d0 <HAL_SPI_MspInit+0xd4>)
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	6313      	str	r3, [r2, #48]	; 0x30
 800324a:	4b21      	ldr	r3, [pc, #132]	; (80032d0 <HAL_SPI_MspInit+0xd4>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	60bb      	str	r3, [r7, #8]
 800325a:	4b1d      	ldr	r3, [pc, #116]	; (80032d0 <HAL_SPI_MspInit+0xd4>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	4a1c      	ldr	r2, [pc, #112]	; (80032d0 <HAL_SPI_MspInit+0xd4>)
 8003260:	f043 0302 	orr.w	r3, r3, #2
 8003264:	6313      	str	r3, [r2, #48]	; 0x30
 8003266:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <HAL_SPI_MspInit+0xd4>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	60bb      	str	r3, [r7, #8]
 8003270:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003272:	23a0      	movs	r3, #160	; 0xa0
 8003274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003276:	2302      	movs	r3, #2
 8003278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327a:	2300      	movs	r3, #0
 800327c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800327e:	2303      	movs	r3, #3
 8003280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003282:	2305      	movs	r3, #5
 8003284:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003286:	f107 0314 	add.w	r3, r7, #20
 800328a:	4619      	mov	r1, r3
 800328c:	4811      	ldr	r0, [pc, #68]	; (80032d4 <HAL_SPI_MspInit+0xd8>)
 800328e:	f002 fda9 	bl	8005de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003292:	2310      	movs	r3, #16
 8003294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003296:	2302      	movs	r3, #2
 8003298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329a:	2300      	movs	r3, #0
 800329c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800329e:	2303      	movs	r3, #3
 80032a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032a2:	2305      	movs	r3, #5
 80032a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032a6:	f107 0314 	add.w	r3, r7, #20
 80032aa:	4619      	mov	r1, r3
 80032ac:	480a      	ldr	r0, [pc, #40]	; (80032d8 <HAL_SPI_MspInit+0xdc>)
 80032ae:	f002 fd99 	bl	8005de4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80032b2:	2200      	movs	r2, #0
 80032b4:	2105      	movs	r1, #5
 80032b6:	2023      	movs	r0, #35	; 0x23
 80032b8:	f001 fdc6 	bl	8004e48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80032bc:	2023      	movs	r0, #35	; 0x23
 80032be:	f001 fdef 	bl	8004ea0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80032c2:	bf00      	nop
 80032c4:	3728      	adds	r7, #40	; 0x28
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40013000 	.word	0x40013000
 80032d0:	40023800 	.word	0x40023800
 80032d4:	40020000 	.word	0x40020000
 80032d8:	40020400 	.word	0x40020400

080032dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e2:	2300      	movs	r3, #0
 80032e4:	607b      	str	r3, [r7, #4]
 80032e6:	4b1a      	ldr	r3, [pc, #104]	; (8003350 <HAL_MspInit+0x74>)
 80032e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ea:	4a19      	ldr	r2, [pc, #100]	; (8003350 <HAL_MspInit+0x74>)
 80032ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032f0:	6453      	str	r3, [r2, #68]	; 0x44
 80032f2:	4b17      	ldr	r3, [pc, #92]	; (8003350 <HAL_MspInit+0x74>)
 80032f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032fa:	607b      	str	r3, [r7, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032fe:	2300      	movs	r3, #0
 8003300:	603b      	str	r3, [r7, #0]
 8003302:	4b13      	ldr	r3, [pc, #76]	; (8003350 <HAL_MspInit+0x74>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	4a12      	ldr	r2, [pc, #72]	; (8003350 <HAL_MspInit+0x74>)
 8003308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800330c:	6413      	str	r3, [r2, #64]	; 0x40
 800330e:	4b10      	ldr	r3, [pc, #64]	; (8003350 <HAL_MspInit+0x74>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003316:	603b      	str	r3, [r7, #0]
 8003318:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800331a:	2200      	movs	r2, #0
 800331c:	210f      	movs	r1, #15
 800331e:	f06f 0001 	mvn.w	r0, #1
 8003322:	f001 fd91 	bl	8004e48 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8003326:	2200      	movs	r2, #0
 8003328:	2105      	movs	r1, #5
 800332a:	2001      	movs	r0, #1
 800332c:	f001 fd8c 	bl	8004e48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8003330:	2001      	movs	r0, #1
 8003332:	f001 fdb5 	bl	8004ea0 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8003336:	2200      	movs	r2, #0
 8003338:	2105      	movs	r1, #5
 800333a:	2005      	movs	r0, #5
 800333c:	f001 fd84 	bl	8004e48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003340:	2005      	movs	r0, #5
 8003342:	f001 fdad 	bl	8004ea0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003346:	bf00      	nop
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40023800 	.word	0x40023800

08003354 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08c      	sub	sp, #48	; 0x30
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003364:	2300      	movs	r3, #0
 8003366:	60bb      	str	r3, [r7, #8]
 8003368:	4b2e      	ldr	r3, [pc, #184]	; (8003424 <HAL_InitTick+0xd0>)
 800336a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336c:	4a2d      	ldr	r2, [pc, #180]	; (8003424 <HAL_InitTick+0xd0>)
 800336e:	f043 0301 	orr.w	r3, r3, #1
 8003372:	6453      	str	r3, [r2, #68]	; 0x44
 8003374:	4b2b      	ldr	r3, [pc, #172]	; (8003424 <HAL_InitTick+0xd0>)
 8003376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	60bb      	str	r3, [r7, #8]
 800337e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003380:	f107 020c 	add.w	r2, r7, #12
 8003384:	f107 0310 	add.w	r3, r7, #16
 8003388:	4611      	mov	r1, r2
 800338a:	4618      	mov	r0, r3
 800338c:	f005 fd26 	bl	8008ddc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003390:	f005 fd10 	bl	8008db4 <HAL_RCC_GetPCLK2Freq>
 8003394:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003398:	4a23      	ldr	r2, [pc, #140]	; (8003428 <HAL_InitTick+0xd4>)
 800339a:	fba2 2303 	umull	r2, r3, r2, r3
 800339e:	0c9b      	lsrs	r3, r3, #18
 80033a0:	3b01      	subs	r3, #1
 80033a2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80033a4:	4b21      	ldr	r3, [pc, #132]	; (800342c <HAL_InitTick+0xd8>)
 80033a6:	4a22      	ldr	r2, [pc, #136]	; (8003430 <HAL_InitTick+0xdc>)
 80033a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80033aa:	4b20      	ldr	r3, [pc, #128]	; (800342c <HAL_InitTick+0xd8>)
 80033ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80033b0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80033b2:	4a1e      	ldr	r2, [pc, #120]	; (800342c <HAL_InitTick+0xd8>)
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80033b8:	4b1c      	ldr	r3, [pc, #112]	; (800342c <HAL_InitTick+0xd8>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033be:	4b1b      	ldr	r3, [pc, #108]	; (800342c <HAL_InitTick+0xd8>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033c4:	4b19      	ldr	r3, [pc, #100]	; (800342c <HAL_InitTick+0xd8>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80033ca:	4818      	ldr	r0, [pc, #96]	; (800342c <HAL_InitTick+0xd8>)
 80033cc:	f006 f86c 	bl	80094a8 <HAL_TIM_Base_Init>
 80033d0:	4603      	mov	r3, r0
 80033d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80033d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d11b      	bne.n	8003416 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80033de:	4813      	ldr	r0, [pc, #76]	; (800342c <HAL_InitTick+0xd8>)
 80033e0:	f006 f934 	bl	800964c <HAL_TIM_Base_Start_IT>
 80033e4:	4603      	mov	r3, r0
 80033e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80033ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d111      	bne.n	8003416 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80033f2:	2019      	movs	r0, #25
 80033f4:	f001 fd54 	bl	8004ea0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b0f      	cmp	r3, #15
 80033fc:	d808      	bhi.n	8003410 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80033fe:	2200      	movs	r2, #0
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	2019      	movs	r0, #25
 8003404:	f001 fd20 	bl	8004e48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003408:	4a0a      	ldr	r2, [pc, #40]	; (8003434 <HAL_InitTick+0xe0>)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	e002      	b.n	8003416 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003416:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800341a:	4618      	mov	r0, r3
 800341c:	3730      	adds	r7, #48	; 0x30
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40023800 	.word	0x40023800
 8003428:	431bde83 	.word	0x431bde83
 800342c:	20000378 	.word	0x20000378
 8003430:	40010000 	.word	0x40010000
 8003434:	20000004 	.word	0x20000004

08003438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800343c:	e7fe      	b.n	800343c <NMI_Handler+0x4>

0800343e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800343e:	b480      	push	{r7}
 8003440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003442:	e7fe      	b.n	8003442 <HardFault_Handler+0x4>

08003444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003448:	e7fe      	b.n	8003448 <MemManage_Handler+0x4>

0800344a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800344a:	b480      	push	{r7}
 800344c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800344e:	e7fe      	b.n	800344e <BusFault_Handler+0x4>

08003450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003454:	e7fe      	b.n	8003454 <UsageFault_Handler+0x4>

08003456 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003456:	b480      	push	{r7}
 8003458:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800345a:	bf00      	nop
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8003468:	f004 feae 	bl	80081c8 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 800346c:	bf00      	nop
 800346e:	bd80      	pop	{r7, pc}

08003470 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8003474:	f002 fae0 	bl	8005a38 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8003478:	bf00      	nop
 800347a:	bd80      	pop	{r7, pc}

0800347c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003480:	bf00      	nop
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
	...

0800348c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003490:	4802      	ldr	r0, [pc, #8]	; (800349c <ADC_IRQHandler+0x10>)
 8003492:	f000 fe79 	bl	8004188 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003496:	bf00      	nop
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	20000100 	.word	0x20000100

080034a0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80034a4:	4802      	ldr	r0, [pc, #8]	; (80034b0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80034a6:	f006 f9cd 	bl	8009844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80034aa:	bf00      	nop
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	200006fc 	.word	0x200006fc

080034b4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80034b8:	4802      	ldr	r0, [pc, #8]	; (80034c4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80034ba:	f006 f9c3 	bl	8009844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80034be:	bf00      	nop
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	20000378 	.word	0x20000378

080034c8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */
	if(CenLoc_Tim3IRQFlag == 2)
 80034cc:	4b07      	ldr	r3, [pc, #28]	; (80034ec <TIM1_TRG_COM_TIM11_IRQHandler+0x24>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d105      	bne.n	80034e0 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>
	{

		CenLoc_Tim11IRQFlag++;
 80034d4:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <TIM1_TRG_COM_TIM11_IRQHandler+0x28>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	3301      	adds	r3, #1
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	4b04      	ldr	r3, [pc, #16]	; (80034f0 <TIM1_TRG_COM_TIM11_IRQHandler+0x28>)
 80034de:	701a      	strb	r2, [r3, #0]
		/* do nothing */

	}

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80034e0:	4804      	ldr	r0, [pc, #16]	; (80034f4 <TIM1_TRG_COM_TIM11_IRQHandler+0x2c>)
 80034e2:	f006 f9af 	bl	8009844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80034e6:	bf00      	nop
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	20000098 	.word	0x20000098
 80034f0:	2000009a 	.word	0x2000009a
 80034f4:	200007b0 	.word	0x200007b0

080034f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	if((CenLoc_CurrentState == STD_LOW && CenLoc_PreviousStateFlag == STD_HIGH) || (CenLoc_CurrentState == STD_HIGH && CenLoc_PreviousStateFlag == STD_LOW))
 80034fc:	4b26      	ldr	r3, [pc, #152]	; (8003598 <TIM2_IRQHandler+0xa0>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d103      	bne.n	800350c <TIM2_IRQHandler+0x14>
 8003504:	4b25      	ldr	r3, [pc, #148]	; (800359c <TIM2_IRQHandler+0xa4>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d007      	beq.n	800351c <TIM2_IRQHandler+0x24>
 800350c:	4b22      	ldr	r3, [pc, #136]	; (8003598 <TIM2_IRQHandler+0xa0>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d109      	bne.n	8003528 <TIM2_IRQHandler+0x30>
 8003514:	4b21      	ldr	r3, [pc, #132]	; (800359c <TIM2_IRQHandler+0xa4>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d105      	bne.n	8003528 <TIM2_IRQHandler+0x30>
	{
		CenLoc_Tim2IRQFlag = CenLoc_Tim2IRQFlag + 1;
 800351c:	4b20      	ldr	r3, [pc, #128]	; (80035a0 <TIM2_IRQHandler+0xa8>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	3301      	adds	r3, #1
 8003522:	b2da      	uxtb	r2, r3
 8003524:	4b1e      	ldr	r3, [pc, #120]	; (80035a0 <TIM2_IRQHandler+0xa8>)
 8003526:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 8003528:	4b1e      	ldr	r3, [pc, #120]	; (80035a4 <TIM2_IRQHandler+0xac>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d10c      	bne.n	800354a <TIM2_IRQHandler+0x52>
	{

		ExtLights_RTSFlag = STD_LOW;
 8003530:	4b1d      	ldr	r3, [pc, #116]	; (80035a8 <TIM2_IRQHandler+0xb0>)
 8003532:	2200      	movs	r2, #0
 8003534:	701a      	strb	r2, [r3, #0]
		ExtLights_LTSFlag++;
 8003536:	4b1d      	ldr	r3, [pc, #116]	; (80035ac <TIM2_IRQHandler+0xb4>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	3301      	adds	r3, #1
 800353c:	b2da      	uxtb	r2, r3
 800353e:	4b1b      	ldr	r3, [pc, #108]	; (80035ac <TIM2_IRQHandler+0xb4>)
 8003540:	701a      	strb	r2, [r3, #0]
		ExtLights_HLFlag = STD_LOW;
 8003542:	4b1b      	ldr	r3, [pc, #108]	; (80035b0 <TIM2_IRQHandler+0xb8>)
 8003544:	2200      	movs	r2, #0
 8003546:	701a      	strb	r2, [r3, #0]
 8003548:	e020      	b.n	800358c <TIM2_IRQHandler+0x94>

	}
	else if(ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 800354a:	4b1a      	ldr	r3, [pc, #104]	; (80035b4 <TIM2_IRQHandler+0xbc>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d10c      	bne.n	800356c <TIM2_IRQHandler+0x74>
	{

		ExtLights_RTSFlag++;
 8003552:	4b15      	ldr	r3, [pc, #84]	; (80035a8 <TIM2_IRQHandler+0xb0>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	3301      	adds	r3, #1
 8003558:	b2da      	uxtb	r2, r3
 800355a:	4b13      	ldr	r3, [pc, #76]	; (80035a8 <TIM2_IRQHandler+0xb0>)
 800355c:	701a      	strb	r2, [r3, #0]
		ExtLights_LTSFlag = STD_LOW;
 800355e:	4b13      	ldr	r3, [pc, #76]	; (80035ac <TIM2_IRQHandler+0xb4>)
 8003560:	2200      	movs	r2, #0
 8003562:	701a      	strb	r2, [r3, #0]
		ExtLights_HLFlag = STD_LOW;
 8003564:	4b12      	ldr	r3, [pc, #72]	; (80035b0 <TIM2_IRQHandler+0xb8>)
 8003566:	2200      	movs	r2, #0
 8003568:	701a      	strb	r2, [r3, #0]
 800356a:	e00f      	b.n	800358c <TIM2_IRQHandler+0x94>

	}
	else if(ExtLights_HazardLight_CurrentState == STD_HIGH)
 800356c:	4b12      	ldr	r3, [pc, #72]	; (80035b8 <TIM2_IRQHandler+0xc0>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d10b      	bne.n	800358c <TIM2_IRQHandler+0x94>
	{

		ExtLights_RTSFlag = STD_LOW;
 8003574:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <TIM2_IRQHandler+0xb0>)
 8003576:	2200      	movs	r2, #0
 8003578:	701a      	strb	r2, [r3, #0]
		ExtLights_LTSFlag = STD_LOW;
 800357a:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <TIM2_IRQHandler+0xb4>)
 800357c:	2200      	movs	r2, #0
 800357e:	701a      	strb	r2, [r3, #0]
		ExtLights_HLFlag++;
 8003580:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <TIM2_IRQHandler+0xb8>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	3301      	adds	r3, #1
 8003586:	b2da      	uxtb	r2, r3
 8003588:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <TIM2_IRQHandler+0xb8>)
 800358a:	701a      	strb	r2, [r3, #0]
		/* do nothing */

	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800358c:	480b      	ldr	r0, [pc, #44]	; (80035bc <TIM2_IRQHandler+0xc4>)
 800358e:	f006 f959 	bl	8009844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003592:	bf00      	nop
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	20000091 	.word	0x20000091
 800359c:	20000094 	.word	0x20000094
 80035a0:	20000097 	.word	0x20000097
 80035a4:	200000a0 	.word	0x200000a0
 80035a8:	200000ae 	.word	0x200000ae
 80035ac:	200000af 	.word	0x200000af
 80035b0:	200000b0 	.word	0x200000b0
 80035b4:	200000a1 	.word	0x200000a1
 80035b8:	200000a2 	.word	0x200000a2
 80035bc:	2000042c 	.word	0x2000042c

080035c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	CenLoc_Tim3IRQFlag++;
 80035c4:	4b05      	ldr	r3, [pc, #20]	; (80035dc <TIM3_IRQHandler+0x1c>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	3301      	adds	r3, #1
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	4b03      	ldr	r3, [pc, #12]	; (80035dc <TIM3_IRQHandler+0x1c>)
 80035ce:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80035d0:	4803      	ldr	r0, [pc, #12]	; (80035e0 <TIM3_IRQHandler+0x20>)
 80035d2:	f006 f937 	bl	8009844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80035d6:	bf00      	nop
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	20000098 	.word	0x20000098
 80035e0:	200004e0 	.word	0x200004e0

080035e4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	SecAlm_TriggerIRQCounterForTimer4++;
 80035e8:	4b05      	ldr	r3, [pc, #20]	; (8003600 <TIM4_IRQHandler+0x1c>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	3301      	adds	r3, #1
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	4b03      	ldr	r3, [pc, #12]	; (8003600 <TIM4_IRQHandler+0x1c>)
 80035f2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80035f4:	4803      	ldr	r0, [pc, #12]	; (8003604 <TIM4_IRQHandler+0x20>)
 80035f6:	f006 f925 	bl	8009844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80035fa:	bf00      	nop
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	200000f8 	.word	0x200000f8
 8003604:	20000594 	.word	0x20000594

08003608 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800360c:	4802      	ldr	r0, [pc, #8]	; (8003618 <I2C1_EV_IRQHandler+0x10>)
 800360e:	f003 f8e5 	bl	80067dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003612:	bf00      	nop
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	200001f0 	.word	0x200001f0

0800361c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003620:	4802      	ldr	r0, [pc, #8]	; (800362c <I2C1_ER_IRQHandler+0x10>)
 8003622:	f003 fa4c 	bl	8006abe <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003626:	bf00      	nop
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	200001f0 	.word	0x200001f0

08003630 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003634:	4802      	ldr	r0, [pc, #8]	; (8003640 <SPI1_IRQHandler+0x10>)
 8003636:	f005 fdd1 	bl	80091dc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800363a:	bf00      	nop
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	200002f8 	.word	0x200002f8

08003644 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003648:	4802      	ldr	r0, [pc, #8]	; (8003654 <USART1_IRQHandler+0x10>)
 800364a:	f007 f8cf 	bl	800a7ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800364e:	bf00      	nop
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	20000864 	.word	0x20000864

08003658 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	CenLoc_Tim5IRQFlag++;
 800365c:	4b05      	ldr	r3, [pc, #20]	; (8003674 <TIM5_IRQHandler+0x1c>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	3301      	adds	r3, #1
 8003662:	b2da      	uxtb	r2, r3
 8003664:	4b03      	ldr	r3, [pc, #12]	; (8003674 <TIM5_IRQHandler+0x1c>)
 8003666:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003668:	4803      	ldr	r0, [pc, #12]	; (8003678 <TIM5_IRQHandler+0x20>)
 800366a:	f006 f8eb 	bl	8009844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800366e:	bf00      	nop
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	20000099 	.word	0x20000099
 8003678:	20000648 	.word	0x20000648

0800367c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003680:	4802      	ldr	r0, [pc, #8]	; (800368c <DMA2_Stream0_IRQHandler+0x10>)
 8003682:	f001 ff61 	bl	8005548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003686:	bf00      	nop
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	20000164 	.word	0x20000164

08003690 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8003694:	4802      	ldr	r0, [pc, #8]	; (80036a0 <I2C3_EV_IRQHandler+0x10>)
 8003696:	f003 f8a1 	bl	80067dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800369a:	bf00      	nop
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	20000274 	.word	0x20000274

080036a4 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80036a8:	4802      	ldr	r0, [pc, #8]	; (80036b4 <I2C3_ER_IRQHandler+0x10>)
 80036aa:	f003 fa08 	bl	8006abe <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80036ae:	bf00      	nop
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	20000274 	.word	0x20000274

080036b8 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80036bc:	bf00      	nop
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
	...

080036c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036cc:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <SystemInit+0x20>)
 80036ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d2:	4a05      	ldr	r2, [pc, #20]	; (80036e8 <SystemInit+0x20>)
 80036d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036dc:	bf00      	nop
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	e000ed00 	.word	0xe000ed00

080036ec <MX_TIM2_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036f2:	f107 0308 	add.w	r3, r7, #8
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	605a      	str	r2, [r3, #4]
 80036fc:	609a      	str	r2, [r3, #8]
 80036fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003700:	463b      	mov	r3, r7
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003708:	4b1e      	ldr	r3, [pc, #120]	; (8003784 <MX_TIM2_Init+0x98>)
 800370a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800370e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 8003710:	4b1c      	ldr	r3, [pc, #112]	; (8003784 <MX_TIM2_Init+0x98>)
 8003712:	f242 720f 	movw	r2, #9999	; 0x270f
 8003716:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003718:	4b1a      	ldr	r3, [pc, #104]	; (8003784 <MX_TIM2_Init+0x98>)
 800371a:	2200      	movs	r2, #0
 800371c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2500-1;
 800371e:	4b19      	ldr	r3, [pc, #100]	; (8003784 <MX_TIM2_Init+0x98>)
 8003720:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8003724:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003726:	4b17      	ldr	r3, [pc, #92]	; (8003784 <MX_TIM2_Init+0x98>)
 8003728:	2200      	movs	r2, #0
 800372a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800372c:	4b15      	ldr	r3, [pc, #84]	; (8003784 <MX_TIM2_Init+0x98>)
 800372e:	2200      	movs	r2, #0
 8003730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003732:	4814      	ldr	r0, [pc, #80]	; (8003784 <MX_TIM2_Init+0x98>)
 8003734:	f005 feb8 	bl	80094a8 <HAL_TIM_Base_Init>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800373e:	f7ff fd17 	bl	8003170 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003746:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003748:	f107 0308 	add.w	r3, r7, #8
 800374c:	4619      	mov	r1, r3
 800374e:	480d      	ldr	r0, [pc, #52]	; (8003784 <MX_TIM2_Init+0x98>)
 8003750:	f006 f9a0 	bl	8009a94 <HAL_TIM_ConfigClockSource>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800375a:	f7ff fd09 	bl	8003170 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800375e:	2300      	movs	r3, #0
 8003760:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003762:	2300      	movs	r3, #0
 8003764:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003766:	463b      	mov	r3, r7
 8003768:	4619      	mov	r1, r3
 800376a:	4806      	ldr	r0, [pc, #24]	; (8003784 <MX_TIM2_Init+0x98>)
 800376c:	f006 fe6e 	bl	800a44c <HAL_TIMEx_MasterConfigSynchronization>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003776:	f7ff fcfb 	bl	8003170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800377a:	bf00      	nop
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	2000042c 	.word	0x2000042c

08003788 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800378e:	f107 0308 	add.w	r3, r7, #8
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	605a      	str	r2, [r3, #4]
 8003798:	609a      	str	r2, [r3, #8]
 800379a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800379c:	463b      	mov	r3, r7
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80037a4:	4b1d      	ldr	r3, [pc, #116]	; (800381c <MX_TIM3_Init+0x94>)
 80037a6:	4a1e      	ldr	r2, [pc, #120]	; (8003820 <MX_TIM3_Init+0x98>)
 80037a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 80037aa:	4b1c      	ldr	r3, [pc, #112]	; (800381c <MX_TIM3_Init+0x94>)
 80037ac:	f242 720f 	movw	r2, #9999	; 0x270f
 80037b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037b2:	4b1a      	ldr	r3, [pc, #104]	; (800381c <MX_TIM3_Init+0x94>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000-1;
 80037b8:	4b18      	ldr	r3, [pc, #96]	; (800381c <MX_TIM3_Init+0x94>)
 80037ba:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80037be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037c0:	4b16      	ldr	r3, [pc, #88]	; (800381c <MX_TIM3_Init+0x94>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037c6:	4b15      	ldr	r3, [pc, #84]	; (800381c <MX_TIM3_Init+0x94>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80037cc:	4813      	ldr	r0, [pc, #76]	; (800381c <MX_TIM3_Init+0x94>)
 80037ce:	f005 fe6b 	bl	80094a8 <HAL_TIM_Base_Init>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80037d8:	f7ff fcca 	bl	8003170 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80037e2:	f107 0308 	add.w	r3, r7, #8
 80037e6:	4619      	mov	r1, r3
 80037e8:	480c      	ldr	r0, [pc, #48]	; (800381c <MX_TIM3_Init+0x94>)
 80037ea:	f006 f953 	bl	8009a94 <HAL_TIM_ConfigClockSource>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80037f4:	f7ff fcbc 	bl	8003170 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037f8:	2300      	movs	r3, #0
 80037fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037fc:	2300      	movs	r3, #0
 80037fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003800:	463b      	mov	r3, r7
 8003802:	4619      	mov	r1, r3
 8003804:	4805      	ldr	r0, [pc, #20]	; (800381c <MX_TIM3_Init+0x94>)
 8003806:	f006 fe21 	bl	800a44c <HAL_TIMEx_MasterConfigSynchronization>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003810:	f7ff fcae 	bl	8003170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003814:	bf00      	nop
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	200004e0 	.word	0x200004e0
 8003820:	40000400 	.word	0x40000400

08003824 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800382a:	f107 0308 	add.w	r3, r7, #8
 800382e:	2200      	movs	r2, #0
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	605a      	str	r2, [r3, #4]
 8003834:	609a      	str	r2, [r3, #8]
 8003836:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003838:	463b      	mov	r3, r7
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003840:	4b1d      	ldr	r3, [pc, #116]	; (80038b8 <MX_TIM4_Init+0x94>)
 8003842:	4a1e      	ldr	r2, [pc, #120]	; (80038bc <MX_TIM4_Init+0x98>)
 8003844:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 8003846:	4b1c      	ldr	r3, [pc, #112]	; (80038b8 <MX_TIM4_Init+0x94>)
 8003848:	f242 720f 	movw	r2, #9999	; 0x270f
 800384c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800384e:	4b1a      	ldr	r3, [pc, #104]	; (80038b8 <MX_TIM4_Init+0x94>)
 8003850:	2200      	movs	r2, #0
 8003852:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000-1;
 8003854:	4b18      	ldr	r3, [pc, #96]	; (80038b8 <MX_TIM4_Init+0x94>)
 8003856:	f241 3287 	movw	r2, #4999	; 0x1387
 800385a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800385c:	4b16      	ldr	r3, [pc, #88]	; (80038b8 <MX_TIM4_Init+0x94>)
 800385e:	2200      	movs	r2, #0
 8003860:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003862:	4b15      	ldr	r3, [pc, #84]	; (80038b8 <MX_TIM4_Init+0x94>)
 8003864:	2200      	movs	r2, #0
 8003866:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003868:	4813      	ldr	r0, [pc, #76]	; (80038b8 <MX_TIM4_Init+0x94>)
 800386a:	f005 fe1d 	bl	80094a8 <HAL_TIM_Base_Init>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003874:	f7ff fc7c 	bl	8003170 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800387c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800387e:	f107 0308 	add.w	r3, r7, #8
 8003882:	4619      	mov	r1, r3
 8003884:	480c      	ldr	r0, [pc, #48]	; (80038b8 <MX_TIM4_Init+0x94>)
 8003886:	f006 f905 	bl	8009a94 <HAL_TIM_ConfigClockSource>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003890:	f7ff fc6e 	bl	8003170 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003894:	2300      	movs	r3, #0
 8003896:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003898:	2300      	movs	r3, #0
 800389a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800389c:	463b      	mov	r3, r7
 800389e:	4619      	mov	r1, r3
 80038a0:	4805      	ldr	r0, [pc, #20]	; (80038b8 <MX_TIM4_Init+0x94>)
 80038a2:	f006 fdd3 	bl	800a44c <HAL_TIMEx_MasterConfigSynchronization>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80038ac:	f7ff fc60 	bl	8003170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80038b0:	bf00      	nop
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	20000594 	.word	0x20000594
 80038bc:	40000800 	.word	0x40000800

080038c0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038c6:	f107 0308 	add.w	r3, r7, #8
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	605a      	str	r2, [r3, #4]
 80038d0:	609a      	str	r2, [r3, #8]
 80038d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038d4:	463b      	mov	r3, r7
 80038d6:	2200      	movs	r2, #0
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80038dc:	4b1d      	ldr	r3, [pc, #116]	; (8003954 <MX_TIM5_Init+0x94>)
 80038de:	4a1e      	ldr	r2, [pc, #120]	; (8003958 <MX_TIM5_Init+0x98>)
 80038e0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 10000-1;
 80038e2:	4b1c      	ldr	r3, [pc, #112]	; (8003954 <MX_TIM5_Init+0x94>)
 80038e4:	f242 720f 	movw	r2, #9999	; 0x270f
 80038e8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038ea:	4b1a      	ldr	r3, [pc, #104]	; (8003954 <MX_TIM5_Init+0x94>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100000-1;
 80038f0:	4b18      	ldr	r3, [pc, #96]	; (8003954 <MX_TIM5_Init+0x94>)
 80038f2:	4a1a      	ldr	r2, [pc, #104]	; (800395c <MX_TIM5_Init+0x9c>)
 80038f4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038f6:	4b17      	ldr	r3, [pc, #92]	; (8003954 <MX_TIM5_Init+0x94>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038fc:	4b15      	ldr	r3, [pc, #84]	; (8003954 <MX_TIM5_Init+0x94>)
 80038fe:	2200      	movs	r2, #0
 8003900:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003902:	4814      	ldr	r0, [pc, #80]	; (8003954 <MX_TIM5_Init+0x94>)
 8003904:	f005 fdd0 	bl	80094a8 <HAL_TIM_Base_Init>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800390e:	f7ff fc2f 	bl	8003170 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003916:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003918:	f107 0308 	add.w	r3, r7, #8
 800391c:	4619      	mov	r1, r3
 800391e:	480d      	ldr	r0, [pc, #52]	; (8003954 <MX_TIM5_Init+0x94>)
 8003920:	f006 f8b8 	bl	8009a94 <HAL_TIM_ConfigClockSource>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800392a:	f7ff fc21 	bl	8003170 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800392e:	2300      	movs	r3, #0
 8003930:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003932:	2300      	movs	r3, #0
 8003934:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003936:	463b      	mov	r3, r7
 8003938:	4619      	mov	r1, r3
 800393a:	4806      	ldr	r0, [pc, #24]	; (8003954 <MX_TIM5_Init+0x94>)
 800393c:	f006 fd86 	bl	800a44c <HAL_TIMEx_MasterConfigSynchronization>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8003946:	f7ff fc13 	bl	8003170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800394a:	bf00      	nop
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	20000648 	.word	0x20000648
 8003958:	40000c00 	.word	0x40000c00
 800395c:	0001869f 	.word	0x0001869f

08003960 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003966:	463b      	mov	r3, r7
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	605a      	str	r2, [r3, #4]
 800396e:	609a      	str	r2, [r3, #8]
 8003970:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003972:	4b16      	ldr	r3, [pc, #88]	; (80039cc <MX_TIM9_Init+0x6c>)
 8003974:	4a16      	ldr	r2, [pc, #88]	; (80039d0 <MX_TIM9_Init+0x70>)
 8003976:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 10000-1;
 8003978:	4b14      	ldr	r3, [pc, #80]	; (80039cc <MX_TIM9_Init+0x6c>)
 800397a:	f242 720f 	movw	r2, #9999	; 0x270f
 800397e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003980:	4b12      	ldr	r3, [pc, #72]	; (80039cc <MX_TIM9_Init+0x6c>)
 8003982:	2200      	movs	r2, #0
 8003984:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 10000-1;
 8003986:	4b11      	ldr	r3, [pc, #68]	; (80039cc <MX_TIM9_Init+0x6c>)
 8003988:	f242 720f 	movw	r2, #9999	; 0x270f
 800398c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800398e:	4b0f      	ldr	r3, [pc, #60]	; (80039cc <MX_TIM9_Init+0x6c>)
 8003990:	2200      	movs	r2, #0
 8003992:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003994:	4b0d      	ldr	r3, [pc, #52]	; (80039cc <MX_TIM9_Init+0x6c>)
 8003996:	2200      	movs	r2, #0
 8003998:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800399a:	480c      	ldr	r0, [pc, #48]	; (80039cc <MX_TIM9_Init+0x6c>)
 800399c:	f005 fd84 	bl	80094a8 <HAL_TIM_Base_Init>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 80039a6:	f7ff fbe3 	bl	8003170 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039ae:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80039b0:	463b      	mov	r3, r7
 80039b2:	4619      	mov	r1, r3
 80039b4:	4805      	ldr	r0, [pc, #20]	; (80039cc <MX_TIM9_Init+0x6c>)
 80039b6:	f006 f86d 	bl	8009a94 <HAL_TIM_ConfigClockSource>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 80039c0:	f7ff fbd6 	bl	8003170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80039c4:	bf00      	nop
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	200006fc 	.word	0x200006fc
 80039d0:	40014000 	.word	0x40014000

080039d4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80039d8:	4b0e      	ldr	r3, [pc, #56]	; (8003a14 <MX_TIM11_Init+0x40>)
 80039da:	4a0f      	ldr	r2, [pc, #60]	; (8003a18 <MX_TIM11_Init+0x44>)
 80039dc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 10000-1;
 80039de:	4b0d      	ldr	r3, [pc, #52]	; (8003a14 <MX_TIM11_Init+0x40>)
 80039e0:	f242 720f 	movw	r2, #9999	; 0x270f
 80039e4:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039e6:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <MX_TIM11_Init+0x40>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 5000-1;
 80039ec:	4b09      	ldr	r3, [pc, #36]	; (8003a14 <MX_TIM11_Init+0x40>)
 80039ee:	f241 3287 	movw	r2, #4999	; 0x1387
 80039f2:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039f4:	4b07      	ldr	r3, [pc, #28]	; (8003a14 <MX_TIM11_Init+0x40>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039fa:	4b06      	ldr	r3, [pc, #24]	; (8003a14 <MX_TIM11_Init+0x40>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003a00:	4804      	ldr	r0, [pc, #16]	; (8003a14 <MX_TIM11_Init+0x40>)
 8003a02:	f005 fd51 	bl	80094a8 <HAL_TIM_Base_Init>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8003a0c:	f7ff fbb0 	bl	8003170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003a10:	bf00      	nop
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	200007b0 	.word	0x200007b0
 8003a18:	40014800 	.word	0x40014800

08003a1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b088      	sub	sp, #32
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a2c:	d10e      	bne.n	8003a4c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61fb      	str	r3, [r7, #28]
 8003a32:	4b4e      	ldr	r3, [pc, #312]	; (8003b6c <HAL_TIM_Base_MspInit+0x150>)
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	4a4d      	ldr	r2, [pc, #308]	; (8003b6c <HAL_TIM_Base_MspInit+0x150>)
 8003a38:	f043 0301 	orr.w	r3, r3, #1
 8003a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a3e:	4b4b      	ldr	r3, [pc, #300]	; (8003b6c <HAL_TIM_Base_MspInit+0x150>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	61fb      	str	r3, [r7, #28]
 8003a48:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8003a4a:	e08a      	b.n	8003b62 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM3)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a47      	ldr	r2, [pc, #284]	; (8003b70 <HAL_TIM_Base_MspInit+0x154>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d116      	bne.n	8003a84 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a56:	2300      	movs	r3, #0
 8003a58:	61bb      	str	r3, [r7, #24]
 8003a5a:	4b44      	ldr	r3, [pc, #272]	; (8003b6c <HAL_TIM_Base_MspInit+0x150>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	4a43      	ldr	r2, [pc, #268]	; (8003b6c <HAL_TIM_Base_MspInit+0x150>)
 8003a60:	f043 0302 	orr.w	r3, r3, #2
 8003a64:	6413      	str	r3, [r2, #64]	; 0x40
 8003a66:	4b41      	ldr	r3, [pc, #260]	; (8003b6c <HAL_TIM_Base_MspInit+0x150>)
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	61bb      	str	r3, [r7, #24]
 8003a70:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003a72:	2200      	movs	r2, #0
 8003a74:	2105      	movs	r1, #5
 8003a76:	201d      	movs	r0, #29
 8003a78:	f001 f9e6 	bl	8004e48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003a7c:	201d      	movs	r0, #29
 8003a7e:	f001 fa0f 	bl	8004ea0 <HAL_NVIC_EnableIRQ>
}
 8003a82:	e06e      	b.n	8003b62 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM4)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a3a      	ldr	r2, [pc, #232]	; (8003b74 <HAL_TIM_Base_MspInit+0x158>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d116      	bne.n	8003abc <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003a8e:	2300      	movs	r3, #0
 8003a90:	617b      	str	r3, [r7, #20]
 8003a92:	4b36      	ldr	r3, [pc, #216]	; (8003b6c <HAL_TIM_Base_MspInit+0x150>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	4a35      	ldr	r2, [pc, #212]	; (8003b6c <HAL_TIM_Base_MspInit+0x150>)
 8003a98:	f043 0304 	orr.w	r3, r3, #4
 8003a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a9e:	4b33      	ldr	r3, [pc, #204]	; (8003b6c <HAL_TIM_Base_MspInit+0x150>)
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	f003 0304 	and.w	r3, r3, #4
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003aaa:	2200      	movs	r2, #0
 8003aac:	2105      	movs	r1, #5
 8003aae:	201e      	movs	r0, #30
 8003ab0:	f001 f9ca 	bl	8004e48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003ab4:	201e      	movs	r0, #30
 8003ab6:	f001 f9f3 	bl	8004ea0 <HAL_NVIC_EnableIRQ>
}
 8003aba:	e052      	b.n	8003b62 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM5)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a2d      	ldr	r2, [pc, #180]	; (8003b78 <HAL_TIM_Base_MspInit+0x15c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d116      	bne.n	8003af4 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	613b      	str	r3, [r7, #16]
 8003aca:	4b28      	ldr	r3, [pc, #160]	; (8003b6c <HAL_TIM_Base_MspInit+0x150>)
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	4a27      	ldr	r2, [pc, #156]	; (8003b6c <HAL_TIM_Base_MspInit+0x150>)
 8003ad0:	f043 0308 	orr.w	r3, r3, #8
 8003ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ad6:	4b25      	ldr	r3, [pc, #148]	; (8003b6c <HAL_TIM_Base_MspInit+0x150>)
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	2105      	movs	r1, #5
 8003ae6:	2032      	movs	r0, #50	; 0x32
 8003ae8:	f001 f9ae 	bl	8004e48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003aec:	2032      	movs	r0, #50	; 0x32
 8003aee:	f001 f9d7 	bl	8004ea0 <HAL_NVIC_EnableIRQ>
}
 8003af2:	e036      	b.n	8003b62 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM9)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a20      	ldr	r2, [pc, #128]	; (8003b7c <HAL_TIM_Base_MspInit+0x160>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d116      	bne.n	8003b2c <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003afe:	2300      	movs	r3, #0
 8003b00:	60fb      	str	r3, [r7, #12]
 8003b02:	4b1a      	ldr	r3, [pc, #104]	; (8003b6c <HAL_TIM_Base_MspInit+0x150>)
 8003b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b06:	4a19      	ldr	r2, [pc, #100]	; (8003b6c <HAL_TIM_Base_MspInit+0x150>)
 8003b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b0e:	4b17      	ldr	r3, [pc, #92]	; (8003b6c <HAL_TIM_Base_MspInit+0x150>)
 8003b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	2105      	movs	r1, #5
 8003b1e:	2018      	movs	r0, #24
 8003b20:	f001 f992 	bl	8004e48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003b24:	2018      	movs	r0, #24
 8003b26:	f001 f9bb 	bl	8004ea0 <HAL_NVIC_EnableIRQ>
}
 8003b2a:	e01a      	b.n	8003b62 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM11)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a13      	ldr	r2, [pc, #76]	; (8003b80 <HAL_TIM_Base_MspInit+0x164>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d115      	bne.n	8003b62 <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003b36:	2300      	movs	r3, #0
 8003b38:	60bb      	str	r3, [r7, #8]
 8003b3a:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <HAL_TIM_Base_MspInit+0x150>)
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3e:	4a0b      	ldr	r2, [pc, #44]	; (8003b6c <HAL_TIM_Base_MspInit+0x150>)
 8003b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b44:	6453      	str	r3, [r2, #68]	; 0x44
 8003b46:	4b09      	ldr	r3, [pc, #36]	; (8003b6c <HAL_TIM_Base_MspInit+0x150>)
 8003b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b4e:	60bb      	str	r3, [r7, #8]
 8003b50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8003b52:	2200      	movs	r2, #0
 8003b54:	2105      	movs	r1, #5
 8003b56:	201a      	movs	r0, #26
 8003b58:	f001 f976 	bl	8004e48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003b5c:	201a      	movs	r0, #26
 8003b5e:	f001 f99f 	bl	8004ea0 <HAL_NVIC_EnableIRQ>
}
 8003b62:	bf00      	nop
 8003b64:	3720      	adds	r7, #32
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	40000400 	.word	0x40000400
 8003b74:	40000800 	.word	0x40000800
 8003b78:	40000c00 	.word	0x40000c00
 8003b7c:	40014000 	.word	0x40014000
 8003b80:	40014800 	.word	0x40014800

08003b84 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003b88:	4b11      	ldr	r3, [pc, #68]	; (8003bd0 <MX_USART1_UART_Init+0x4c>)
 8003b8a:	4a12      	ldr	r2, [pc, #72]	; (8003bd4 <MX_USART1_UART_Init+0x50>)
 8003b8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003b8e:	4b10      	ldr	r3, [pc, #64]	; (8003bd0 <MX_USART1_UART_Init+0x4c>)
 8003b90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b96:	4b0e      	ldr	r3, [pc, #56]	; (8003bd0 <MX_USART1_UART_Init+0x4c>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b9c:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <MX_USART1_UART_Init+0x4c>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003ba2:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <MX_USART1_UART_Init+0x4c>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ba8:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <MX_USART1_UART_Init+0x4c>)
 8003baa:	220c      	movs	r2, #12
 8003bac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bae:	4b08      	ldr	r3, [pc, #32]	; (8003bd0 <MX_USART1_UART_Init+0x4c>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bb4:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <MX_USART1_UART_Init+0x4c>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003bba:	4805      	ldr	r0, [pc, #20]	; (8003bd0 <MX_USART1_UART_Init+0x4c>)
 8003bbc:	f006 fd22 	bl	800a604 <HAL_UART_Init>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003bc6:	f7ff fad3 	bl	8003170 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003bca:	bf00      	nop
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	20000864 	.word	0x20000864
 8003bd4:	40011000 	.word	0x40011000

08003bd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b08a      	sub	sp, #40	; 0x28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be0:	f107 0314 	add.w	r3, r7, #20
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	605a      	str	r2, [r3, #4]
 8003bea:	609a      	str	r2, [r3, #8]
 8003bec:	60da      	str	r2, [r3, #12]
 8003bee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a1d      	ldr	r2, [pc, #116]	; (8003c6c <HAL_UART_MspInit+0x94>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d133      	bne.n	8003c62 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	613b      	str	r3, [r7, #16]
 8003bfe:	4b1c      	ldr	r3, [pc, #112]	; (8003c70 <HAL_UART_MspInit+0x98>)
 8003c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c02:	4a1b      	ldr	r2, [pc, #108]	; (8003c70 <HAL_UART_MspInit+0x98>)
 8003c04:	f043 0310 	orr.w	r3, r3, #16
 8003c08:	6453      	str	r3, [r2, #68]	; 0x44
 8003c0a:	4b19      	ldr	r3, [pc, #100]	; (8003c70 <HAL_UART_MspInit+0x98>)
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0e:	f003 0310 	and.w	r3, r3, #16
 8003c12:	613b      	str	r3, [r7, #16]
 8003c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c16:	2300      	movs	r3, #0
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	4b15      	ldr	r3, [pc, #84]	; (8003c70 <HAL_UART_MspInit+0x98>)
 8003c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1e:	4a14      	ldr	r2, [pc, #80]	; (8003c70 <HAL_UART_MspInit+0x98>)
 8003c20:	f043 0302 	orr.w	r3, r3, #2
 8003c24:	6313      	str	r3, [r2, #48]	; 0x30
 8003c26:	4b12      	ldr	r3, [pc, #72]	; (8003c70 <HAL_UART_MspInit+0x98>)
 8003c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB3     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8003c32:	2348      	movs	r3, #72	; 0x48
 8003c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c36:	2302      	movs	r3, #2
 8003c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c42:	2307      	movs	r3, #7
 8003c44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c46:	f107 0314 	add.w	r3, r7, #20
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	4809      	ldr	r0, [pc, #36]	; (8003c74 <HAL_UART_MspInit+0x9c>)
 8003c4e:	f002 f8c9 	bl	8005de4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003c52:	2200      	movs	r2, #0
 8003c54:	2105      	movs	r1, #5
 8003c56:	2025      	movs	r0, #37	; 0x25
 8003c58:	f001 f8f6 	bl	8004e48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c5c:	2025      	movs	r0, #37	; 0x25
 8003c5e:	f001 f91f 	bl	8004ea0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003c62:	bf00      	nop
 8003c64:	3728      	adds	r7, #40	; 0x28
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40011000 	.word	0x40011000
 8003c70:	40023800 	.word	0x40023800
 8003c74:	40020400 	.word	0x40020400

08003c78 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a05      	ldr	r2, [pc, #20]	; (8003c9c <HAL_UART_RxCpltCallback+0x24>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d104      	bne.n	8003c94 <HAL_UART_RxCpltCallback+0x1c>
  {

	//BtcReceivedDataIRQ = STD_HIGH;
    HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1);
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	4904      	ldr	r1, [pc, #16]	; (8003ca0 <HAL_UART_RxCpltCallback+0x28>)
 8003c8e:	4805      	ldr	r0, [pc, #20]	; (8003ca4 <HAL_UART_RxCpltCallback+0x2c>)
 8003c90:	f006 fd7c 	bl	800a78c <HAL_UART_Receive_IT>

	  /* do nothing */

  }

}
 8003c94:	bf00      	nop
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40011000 	.word	0x40011000
 8003ca0:	20000090 	.word	0x20000090
 8003ca4:	20000864 	.word	0x20000864

08003ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003ca8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ce0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003cac:	480d      	ldr	r0, [pc, #52]	; (8003ce4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003cae:	490e      	ldr	r1, [pc, #56]	; (8003ce8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003cb0:	4a0e      	ldr	r2, [pc, #56]	; (8003cec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cb4:	e002      	b.n	8003cbc <LoopCopyDataInit>

08003cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cba:	3304      	adds	r3, #4

08003cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cc0:	d3f9      	bcc.n	8003cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cc2:	4a0b      	ldr	r2, [pc, #44]	; (8003cf0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003cc4:	4c0b      	ldr	r4, [pc, #44]	; (8003cf4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cc8:	e001      	b.n	8003cce <LoopFillZerobss>

08003cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ccc:	3204      	adds	r2, #4

08003cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cd0:	d3fb      	bcc.n	8003cca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003cd2:	f7ff fcf9 	bl	80036c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003cd6:	f00a ff23 	bl	800eb20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003cda:	f7ff f983 	bl	8002fe4 <main>
  bx  lr    
 8003cde:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003ce0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ce8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003cec:	0800f4c0 	.word	0x0800f4c0
  ldr r2, =_sbss
 8003cf0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8003cf4:	20005534 	.word	0x20005534

08003cf8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003cf8:	e7fe      	b.n	8003cf8 <DMA1_Stream0_IRQHandler>

08003cfa <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b084      	sub	sp, #16
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d104      	bne.n	8003d12 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003d08:	b672      	cpsid	i
}
 8003d0a:	bf00      	nop
 8003d0c:	f7ff fa30 	bl	8003170 <Error_Handler>
 8003d10:	e7fe      	b.n	8003d10 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	7a1b      	ldrb	r3, [r3, #8]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d904      	bls.n	8003d24 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8003d1a:	b672      	cpsid	i
}
 8003d1c:	bf00      	nop
 8003d1e:	f7ff fa27 	bl	8003170 <Error_Handler>
 8003d22:	e7fe      	b.n	8003d22 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	7a1b      	ldrb	r3, [r3, #8]
 8003d28:	1c5a      	adds	r2, r3, #1
 8003d2a:	b2d1      	uxtb	r1, r2
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	7211      	strb	r1, [r2, #8]
 8003d30:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003d32:	f3ef 8211 	mrs	r2, BASEPRI
 8003d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3a:	f383 8811 	msr	BASEPRI, r3
 8003d3e:	f3bf 8f6f 	isb	sy
 8003d42:	f3bf 8f4f 	dsb	sy
 8003d46:	60fa      	str	r2, [r7, #12]
 8003d48:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8003d52:	bf00      	nop
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b084      	sub	sp, #16
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d104      	bne.n	8003d72 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003d68:	b672      	cpsid	i
}
 8003d6a:	bf00      	nop
 8003d6c:	f7ff fa00 	bl	8003170 <Error_Handler>
 8003d70:	e7fe      	b.n	8003d70 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	7a1b      	ldrb	r3, [r3, #8]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	7a1b      	ldrb	r3, [r3, #8]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d904      	bls.n	8003d90 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8003d86:	b672      	cpsid	i
}
 8003d88:	bf00      	nop
 8003d8a:	f7ff f9f1 	bl	8003170 <Error_Handler>
 8003d8e:	e7fe      	b.n	8003d8e <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	7a1b      	ldrb	r3, [r3, #8]
 8003d94:	461a      	mov	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d9c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003da4:	bf00      	nop
}
 8003da6:	bf00      	nop
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b082      	sub	sp, #8
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d104      	bne.n	8003dc6 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003dbc:	b672      	cpsid	i
}
 8003dbe:	bf00      	nop
 8003dc0:	f7ff f9d6 	bl	8003170 <Error_Handler>
 8003dc4:	e7fe      	b.n	8003dc4 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff ff96 	bl	8003cfa <stm32_lock_acquire>
}
 8003dce:	bf00      	nop
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b082      	sub	sp, #8
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d104      	bne.n	8003dee <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003de4:	b672      	cpsid	i
}
 8003de6:	bf00      	nop
 8003de8:	f7ff f9c2 	bl	8003170 <Error_Handler>
 8003dec:	e7fe      	b.n	8003dec <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff ffb2 	bl	8003d5a <stm32_lock_release>
}
 8003df6:	bf00      	nop
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
	...

08003e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e04:	4b0e      	ldr	r3, [pc, #56]	; (8003e40 <HAL_Init+0x40>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a0d      	ldr	r2, [pc, #52]	; (8003e40 <HAL_Init+0x40>)
 8003e0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e10:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <HAL_Init+0x40>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a0a      	ldr	r2, [pc, #40]	; (8003e40 <HAL_Init+0x40>)
 8003e16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e1c:	4b08      	ldr	r3, [pc, #32]	; (8003e40 <HAL_Init+0x40>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a07      	ldr	r2, [pc, #28]	; (8003e40 <HAL_Init+0x40>)
 8003e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e28:	2003      	movs	r0, #3
 8003e2a:	f000 ffed 	bl	8004e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e2e:	2005      	movs	r0, #5
 8003e30:	f7ff fa90 	bl	8003354 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e34:	f7ff fa52 	bl	80032dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	40023c00 	.word	0x40023c00

08003e44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e48:	4b06      	ldr	r3, [pc, #24]	; (8003e64 <HAL_IncTick+0x20>)
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	4b06      	ldr	r3, [pc, #24]	; (8003e68 <HAL_IncTick+0x24>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4413      	add	r3, r2
 8003e54:	4a04      	ldr	r2, [pc, #16]	; (8003e68 <HAL_IncTick+0x24>)
 8003e56:	6013      	str	r3, [r2, #0]
}
 8003e58:	bf00      	nop
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	20000008 	.word	0x20000008
 8003e68:	200008e4 	.word	0x200008e4

08003e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8003e70:	4b03      	ldr	r3, [pc, #12]	; (8003e80 <HAL_GetTick+0x14>)
 8003e72:	681b      	ldr	r3, [r3, #0]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	200008e4 	.word	0x200008e4

08003e84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e16f      	b.n	800417a <HAL_ADC_Init+0x2f6>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a93      	ldr	r2, [pc, #588]	; (80040ec <HAL_ADC_Init+0x268>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d004      	beq.n	8003eae <HAL_ADC_Init+0x2a>
 8003ea4:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8003ea8:	4891      	ldr	r0, [pc, #580]	; (80040f0 <HAL_ADC_Init+0x26c>)
 8003eaa:	f7ff f966 	bl	800317a <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d013      	beq.n	8003ede <HAL_ADC_Init+0x5a>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ebe:	d00e      	beq.n	8003ede <HAL_ADC_Init+0x5a>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ec8:	d009      	beq.n	8003ede <HAL_ADC_Init+0x5a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ed2:	d004      	beq.n	8003ede <HAL_ADC_Init+0x5a>
 8003ed4:	f240 1143 	movw	r1, #323	; 0x143
 8003ed8:	4885      	ldr	r0, [pc, #532]	; (80040f0 <HAL_ADC_Init+0x26c>)
 8003eda:	f7ff f94e 	bl	800317a <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d013      	beq.n	8003f0e <HAL_ADC_Init+0x8a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003eee:	d00e      	beq.n	8003f0e <HAL_ADC_Init+0x8a>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ef8:	d009      	beq.n	8003f0e <HAL_ADC_Init+0x8a>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f02:	d004      	beq.n	8003f0e <HAL_ADC_Init+0x8a>
 8003f04:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8003f08:	4879      	ldr	r0, [pc, #484]	; (80040f0 <HAL_ADC_Init+0x26c>)
 8003f0a:	f7ff f936 	bl	800317a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d008      	beq.n	8003f28 <HAL_ADC_Init+0xa4>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d004      	beq.n	8003f28 <HAL_ADC_Init+0xa4>
 8003f1e:	f240 1145 	movw	r1, #325	; 0x145
 8003f22:	4873      	ldr	r0, [pc, #460]	; (80040f0 <HAL_ADC_Init+0x26c>)
 8003f24:	f7ff f929 	bl	800317a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	7e1b      	ldrb	r3, [r3, #24]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d008      	beq.n	8003f42 <HAL_ADC_Init+0xbe>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	7e1b      	ldrb	r3, [r3, #24]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d004      	beq.n	8003f42 <HAL_ADC_Init+0xbe>
 8003f38:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8003f3c:	486c      	ldr	r0, [pc, #432]	; (80040f0 <HAL_ADC_Init+0x26c>)
 8003f3e:	f7ff f91c 	bl	800317a <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d054      	beq.n	8003ff4 <HAL_ADC_Init+0x170>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f52:	d04f      	beq.n	8003ff4 <HAL_ADC_Init+0x170>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f5c:	d04a      	beq.n	8003ff4 <HAL_ADC_Init+0x170>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f66:	d045      	beq.n	8003ff4 <HAL_ADC_Init+0x170>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f70:	d040      	beq.n	8003ff4 <HAL_ADC_Init+0x170>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f76:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003f7a:	d03b      	beq.n	8003ff4 <HAL_ADC_Init+0x170>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f80:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003f84:	d036      	beq.n	8003ff4 <HAL_ADC_Init+0x170>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8a:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8003f8e:	d031      	beq.n	8003ff4 <HAL_ADC_Init+0x170>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f98:	d02c      	beq.n	8003ff4 <HAL_ADC_Init+0x170>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9e:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8003fa2:	d027      	beq.n	8003ff4 <HAL_ADC_Init+0x170>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa8:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8003fac:	d022      	beq.n	8003ff4 <HAL_ADC_Init+0x170>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb2:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8003fb6:	d01d      	beq.n	8003ff4 <HAL_ADC_Init+0x170>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003fc0:	d018      	beq.n	8003ff4 <HAL_ADC_Init+0x170>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc6:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8003fca:	d013      	beq.n	8003ff4 <HAL_ADC_Init+0x170>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd0:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8003fd4:	d00e      	beq.n	8003ff4 <HAL_ADC_Init+0x170>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fda:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003fde:	d009      	beq.n	8003ff4 <HAL_ADC_Init+0x170>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe4:	4a43      	ldr	r2, [pc, #268]	; (80040f4 <HAL_ADC_Init+0x270>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d004      	beq.n	8003ff4 <HAL_ADC_Init+0x170>
 8003fea:	f240 1147 	movw	r1, #327	; 0x147
 8003fee:	4840      	ldr	r0, [pc, #256]	; (80040f0 <HAL_ADC_Init+0x26c>)
 8003ff0:	f7ff f8c3 	bl	800317a <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d009      	beq.n	8004010 <HAL_ADC_Init+0x18c>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004004:	d004      	beq.n	8004010 <HAL_ADC_Init+0x18c>
 8004006:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800400a:	4839      	ldr	r0, [pc, #228]	; (80040f0 <HAL_ADC_Init+0x26c>)
 800400c:	f7ff f8b5 	bl	800317a <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d003      	beq.n	8004020 <HAL_ADC_Init+0x19c>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	2b10      	cmp	r3, #16
 800401e:	d904      	bls.n	800402a <HAL_ADC_Init+0x1a6>
 8004020:	f240 1149 	movw	r1, #329	; 0x149
 8004024:	4832      	ldr	r0, [pc, #200]	; (80040f0 <HAL_ADC_Init+0x26c>)
 8004026:	f7ff f8a8 	bl	800317a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004030:	2b00      	cmp	r3, #0
 8004032:	d009      	beq.n	8004048 <HAL_ADC_Init+0x1c4>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800403a:	2b01      	cmp	r3, #1
 800403c:	d004      	beq.n	8004048 <HAL_ADC_Init+0x1c4>
 800403e:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004042:	482b      	ldr	r0, [pc, #172]	; (80040f0 <HAL_ADC_Init+0x26c>)
 8004044:	f7ff f899 	bl	800317a <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d00c      	beq.n	800406a <HAL_ADC_Init+0x1e6>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d008      	beq.n	800406a <HAL_ADC_Init+0x1e6>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	2b02      	cmp	r3, #2
 800405e:	d004      	beq.n	800406a <HAL_ADC_Init+0x1e6>
 8004060:	f240 114b 	movw	r1, #331	; 0x14b
 8004064:	4822      	ldr	r0, [pc, #136]	; (80040f0 <HAL_ADC_Init+0x26c>)
 8004066:	f7ff f888 	bl	800317a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d009      	beq.n	8004088 <HAL_ADC_Init+0x204>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 3020 	ldrb.w	r3, [r3, #32]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d004      	beq.n	8004088 <HAL_ADC_Init+0x204>
 800407e:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8004082:	481b      	ldr	r0, [pc, #108]	; (80040f0 <HAL_ADC_Init+0x26c>)
 8004084:	f7ff f879 	bl	800317a <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408c:	4a19      	ldr	r2, [pc, #100]	; (80040f4 <HAL_ADC_Init+0x270>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d017      	beq.n	80040c2 <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004096:	2b00      	cmp	r3, #0
 8004098:	d013      	beq.n	80040c2 <HAL_ADC_Init+0x23e>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040a2:	d00e      	beq.n	80040c2 <HAL_ADC_Init+0x23e>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040ac:	d009      	beq.n	80040c2 <HAL_ADC_Init+0x23e>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040b6:	d004      	beq.n	80040c2 <HAL_ADC_Init+0x23e>
 80040b8:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80040bc:	480c      	ldr	r0, [pc, #48]	; (80040f0 <HAL_ADC_Init+0x26c>)
 80040be:	f7ff f85c 	bl	800317a <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d131      	bne.n	800412e <HAL_ADC_Init+0x2aa>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a0a      	ldr	r2, [pc, #40]	; (80040f8 <HAL_ADC_Init+0x274>)
 80040ce:	649a      	str	r2, [r3, #72]	; 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a0a      	ldr	r2, [pc, #40]	; (80040fc <HAL_ADC_Init+0x278>)
 80040d4:	64da      	str	r2, [r3, #76]	; 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a09      	ldr	r2, [pc, #36]	; (8004100 <HAL_ADC_Init+0x27c>)
 80040da:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a09      	ldr	r2, [pc, #36]	; (8004104 <HAL_ADC_Init+0x280>)
 80040e0:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a08      	ldr	r2, [pc, #32]	; (8004108 <HAL_ADC_Init+0x284>)
 80040e6:	659a      	str	r2, [r3, #88]	; 0x58
    if (hadc->MspInitCallback == NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	e00f      	b.n	800410c <HAL_ADC_Init+0x288>
 80040ec:	40012000 	.word	0x40012000
 80040f0:	0800edcc 	.word	0x0800edcc
 80040f4:	0f000001 	.word	0x0f000001
 80040f8:	0800463d 	.word	0x0800463d
 80040fc:	08004651 	.word	0x08004651
 8004100:	08004665 	.word	0x08004665
 8004104:	08004679 	.word	0x08004679
 8004108:	08004c99 	.word	0x08004c99
 800410c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800410e:	2b00      	cmp	r3, #0
 8004110:	d102      	bne.n	8004118 <HAL_ADC_Init+0x294>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a1b      	ldr	r2, [pc, #108]	; (8004184 <HAL_ADC_Init+0x300>)
 8004116:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	f003 0310 	and.w	r3, r3, #16
 8004136:	2b00      	cmp	r3, #0
 8004138:	d118      	bne.n	800416c <HAL_ADC_Init+0x2e8>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004142:	f023 0302 	bic.w	r3, r3, #2
 8004146:	f043 0202 	orr.w	r2, r3, #2
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 fc12 	bl	8004978 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	f023 0303 	bic.w	r3, r3, #3
 8004162:	f043 0201 	orr.w	r2, r3, #1
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	641a      	str	r2, [r3, #64]	; 0x40
 800416a:	e001      	b.n	8004170 <HAL_ADC_Init+0x2ec>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004178:	7bfb      	ldrb	r3, [r7, #15]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	08002851 	.word	0x08002851

08004188 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004190:	2300      	movs	r3, #0
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	2300      	movs	r3, #0
 8004196:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	7e1b      	ldrb	r3, [r3, #24]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d008      	beq.n	80041c2 <HAL_ADC_IRQHandler+0x3a>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	7e1b      	ldrb	r3, [r3, #24]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d004      	beq.n	80041c2 <HAL_ADC_IRQHandler+0x3a>
 80041b8:	f240 41b7 	movw	r1, #1207	; 0x4b7
 80041bc:	4892      	ldr	r0, [pc, #584]	; (8004408 <HAL_ADC_IRQHandler+0x280>)
 80041be:	f7fe ffdc 	bl	800317a <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <HAL_ADC_IRQHandler+0x4a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	2b10      	cmp	r3, #16
 80041d0:	d904      	bls.n	80041dc <HAL_ADC_IRQHandler+0x54>
 80041d2:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
 80041d6:	488c      	ldr	r0, [pc, #560]	; (8004408 <HAL_ADC_IRQHandler+0x280>)
 80041d8:	f7fe ffcf 	bl	800317a <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d00c      	beq.n	80041fe <HAL_ADC_IRQHandler+0x76>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d008      	beq.n	80041fe <HAL_ADC_IRQHandler+0x76>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d004      	beq.n	80041fe <HAL_ADC_IRQHandler+0x76>
 80041f4:	f240 41b9 	movw	r1, #1209	; 0x4b9
 80041f8:	4883      	ldr	r0, [pc, #524]	; (8004408 <HAL_ADC_IRQHandler+0x280>)
 80041fa:	f7fe ffbe 	bl	800317a <assert_failed>
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	f003 0320 	and.w	r3, r3, #32
 800420c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d04a      	beq.n	80042aa <HAL_ADC_IRQHandler+0x122>
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d047      	beq.n	80042aa <HAL_ADC_IRQHandler+0x122>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	f003 0310 	and.w	r3, r3, #16
 8004222:	2b00      	cmp	r3, #0
 8004224:	d105      	bne.n	8004232 <HAL_ADC_IRQHandler+0xaa>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d12b      	bne.n	8004298 <HAL_ADC_IRQHandler+0x110>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004244:	2b00      	cmp	r3, #0
 8004246:	d127      	bne.n	8004298 <HAL_ADC_IRQHandler+0x110>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004252:	2b00      	cmp	r3, #0
 8004254:	d006      	beq.n	8004264 <HAL_ADC_IRQHandler+0xdc>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004260:	2b00      	cmp	r3, #0
 8004262:	d119      	bne.n	8004298 <HAL_ADC_IRQHandler+0x110>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0220 	bic.w	r2, r2, #32
 8004272:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004284:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d105      	bne.n	8004298 <HAL_ADC_IRQHandler+0x110>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004290:	f043 0201 	orr.w	r2, r3, #1
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	4798      	blx	r3
#else
    HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f06f 0212 	mvn.w	r2, #18
 80042a8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d058      	beq.n	8004372 <HAL_ADC_IRQHandler+0x1ea>
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d055      	beq.n	8004372 <HAL_ADC_IRQHandler+0x1ea>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	f003 0310 	and.w	r3, r3, #16
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d105      	bne.n	80042de <HAL_ADC_IRQHandler+0x156>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d139      	bne.n	8004360 <HAL_ADC_IRQHandler+0x1d8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d006      	beq.n	8004308 <HAL_ADC_IRQHandler+0x180>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004304:	2b00      	cmp	r3, #0
 8004306:	d12b      	bne.n	8004360 <HAL_ADC_IRQHandler+0x1d8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004312:	2b00      	cmp	r3, #0
 8004314:	d124      	bne.n	8004360 <HAL_ADC_IRQHandler+0x1d8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004320:	2b00      	cmp	r3, #0
 8004322:	d11d      	bne.n	8004360 <HAL_ADC_IRQHandler+0x1d8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004328:	2b00      	cmp	r3, #0
 800432a:	d119      	bne.n	8004360 <HAL_ADC_IRQHandler+0x1d8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800433a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004340:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004350:	2b00      	cmp	r3, #0
 8004352:	d105      	bne.n	8004360 <HAL_ADC_IRQHandler+0x1d8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	f043 0201 	orr.w	r2, r3, #1
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f06f 020c 	mvn.w	r2, #12
 8004370:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004380:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d018      	beq.n	80043ba <HAL_ADC_IRQHandler+0x232>
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d015      	beq.n	80043ba <HAL_ADC_IRQHandler+0x232>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b01      	cmp	r3, #1
 800439a:	d10e      	bne.n	80043ba <HAL_ADC_IRQHandler+0x232>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f06f 0201 	mvn.w	r2, #1
 80043b8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f003 0320 	and.w	r3, r3, #32
 80043c0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043c8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d016      	beq.n	80043fe <HAL_ADC_IRQHandler+0x276>
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d013      	beq.n	80043fe <HAL_ADC_IRQHandler+0x276>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043da:	f043 0202 	orr.w	r2, r3, #2
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f06f 0220 	mvn.w	r2, #32
 80043ea:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	4798      	blx	r3
#else
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f06f 0220 	mvn.w	r2, #32
 80043fc:	601a      	str	r2, [r3, #0]
  }
}
 80043fe:	bf00      	nop
 8004400:	3718      	adds	r7, #24
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	0800edcc 	.word	0x0800edcc

0800440c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	7e1b      	ldrb	r3, [r3, #24]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d008      	beq.n	8004436 <HAL_ADC_Start_DMA+0x2a>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	7e1b      	ldrb	r3, [r3, #24]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d004      	beq.n	8004436 <HAL_ADC_Start_DMA+0x2a>
 800442c:	f240 515a 	movw	r1, #1370	; 0x55a
 8004430:	487a      	ldr	r0, [pc, #488]	; (800461c <HAL_ADC_Start_DMA+0x210>)
 8004432:	f7fe fea2 	bl	800317a <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443a:	2b00      	cmp	r3, #0
 800443c:	d013      	beq.n	8004466 <HAL_ADC_Start_DMA+0x5a>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004442:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004446:	d00e      	beq.n	8004466 <HAL_ADC_Start_DMA+0x5a>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004450:	d009      	beq.n	8004466 <HAL_ADC_Start_DMA+0x5a>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004456:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800445a:	d004      	beq.n	8004466 <HAL_ADC_Start_DMA+0x5a>
 800445c:	f240 515b 	movw	r1, #1371	; 0x55b
 8004460:	486e      	ldr	r0, [pc, #440]	; (800461c <HAL_ADC_Start_DMA+0x210>)
 8004462:	f7fe fe8a 	bl	800317a <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800446c:	2b01      	cmp	r3, #1
 800446e:	d101      	bne.n	8004474 <HAL_ADC_Start_DMA+0x68>
 8004470:	2302      	movs	r3, #2
 8004472:	e0ce      	b.n	8004612 <HAL_ADC_Start_DMA+0x206>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b01      	cmp	r3, #1
 8004488:	d018      	beq.n	80044bc <HAL_ADC_Start_DMA+0xb0>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f042 0201 	orr.w	r2, r2, #1
 8004498:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800449a:	4b61      	ldr	r3, [pc, #388]	; (8004620 <HAL_ADC_Start_DMA+0x214>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a61      	ldr	r2, [pc, #388]	; (8004624 <HAL_ADC_Start_DMA+0x218>)
 80044a0:	fba2 2303 	umull	r2, r3, r2, r3
 80044a4:	0c9a      	lsrs	r2, r3, #18
 80044a6:	4613      	mov	r3, r2
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	4413      	add	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80044ae:	e002      	b.n	80044b6 <HAL_ADC_Start_DMA+0xaa>
    {
      counter--;
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	3b01      	subs	r3, #1
 80044b4:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1f9      	bne.n	80044b0 <HAL_ADC_Start_DMA+0xa4>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ca:	d107      	bne.n	80044dc <HAL_ADC_Start_DMA+0xd0>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689a      	ldr	r2, [r3, #8]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044da:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	f040 8086 	bne.w	80045f8 <HAL_ADC_Start_DMA+0x1ec>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80044f4:	f023 0301 	bic.w	r3, r3, #1
 80044f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800450a:	2b00      	cmp	r3, #0
 800450c:	d007      	beq.n	800451e <HAL_ADC_Start_DMA+0x112>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004516:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800452a:	d106      	bne.n	800453a <HAL_ADC_Start_DMA+0x12e>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004530:	f023 0206 	bic.w	r2, r3, #6
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	645a      	str	r2, [r3, #68]	; 0x44
 8004538:	e002      	b.n	8004540 <HAL_ADC_Start_DMA+0x134>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004548:	4b37      	ldr	r3, [pc, #220]	; (8004628 <HAL_ADC_Start_DMA+0x21c>)
 800454a:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004550:	4a36      	ldr	r2, [pc, #216]	; (800462c <HAL_ADC_Start_DMA+0x220>)
 8004552:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004558:	4a35      	ldr	r2, [pc, #212]	; (8004630 <HAL_ADC_Start_DMA+0x224>)
 800455a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004560:	4a34      	ldr	r2, [pc, #208]	; (8004634 <HAL_ADC_Start_DMA+0x228>)
 8004562:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800456c:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800457c:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800458c:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	334c      	adds	r3, #76	; 0x4c
 8004598:	4619      	mov	r1, r3
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f000 fedb 	bl	8005358 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f003 031f 	and.w	r3, r3, #31
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10f      	bne.n	80045ce <HAL_ADC_Start_DMA+0x1c2>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d129      	bne.n	8004610 <HAL_ADC_Start_DMA+0x204>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80045ca:	609a      	str	r2, [r3, #8]
 80045cc:	e020      	b.n	8004610 <HAL_ADC_Start_DMA+0x204>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a19      	ldr	r2, [pc, #100]	; (8004638 <HAL_ADC_Start_DMA+0x22c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d11b      	bne.n	8004610 <HAL_ADC_Start_DMA+0x204>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d114      	bne.n	8004610 <HAL_ADC_Start_DMA+0x204>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80045f4:	609a      	str	r2, [r3, #8]
 80045f6:	e00b      	b.n	8004610 <HAL_ADC_Start_DMA+0x204>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fc:	f043 0210 	orr.w	r2, r3, #16
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004608:	f043 0201 	orr.w	r2, r3, #1
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3718      	adds	r7, #24
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	0800edcc 	.word	0x0800edcc
 8004620:	20000000 	.word	0x20000000
 8004624:	431bde83 	.word	0x431bde83
 8004628:	40012300 	.word	0x40012300
 800462c:	08004b8d 	.word	0x08004b8d
 8004630:	08004c4b 	.word	0x08004c4b
 8004634:	08004c69 	.word	0x08004c69
 8004638:	40012000 	.word	0x40012000

0800463c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b12      	cmp	r3, #18
 80046a0:	d909      	bls.n	80046b6 <HAL_ADC_ConfigChannel+0x2a>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a72      	ldr	r2, [pc, #456]	; (8004870 <HAL_ADC_ConfigChannel+0x1e4>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d004      	beq.n	80046b6 <HAL_ADC_ConfigChannel+0x2a>
 80046ac:	f240 618b 	movw	r1, #1675	; 0x68b
 80046b0:	4870      	ldr	r0, [pc, #448]	; (8004874 <HAL_ADC_ConfigChannel+0x1e8>)
 80046b2:	f7fe fd62 	bl	800317a <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_ADC_ConfigChannel+0x3a>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	2b10      	cmp	r3, #16
 80046c4:	d904      	bls.n	80046d0 <HAL_ADC_ConfigChannel+0x44>
 80046c6:	f240 618c 	movw	r1, #1676	; 0x68c
 80046ca:	486a      	ldr	r0, [pc, #424]	; (8004874 <HAL_ADC_ConfigChannel+0x1e8>)
 80046cc:	f7fe fd55 	bl	800317a <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d020      	beq.n	800471a <HAL_ADC_ConfigChannel+0x8e>
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d01c      	beq.n	800471a <HAL_ADC_ConfigChannel+0x8e>
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d018      	beq.n	800471a <HAL_ADC_ConfigChannel+0x8e>
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	d014      	beq.n	800471a <HAL_ADC_ConfigChannel+0x8e>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	2b04      	cmp	r3, #4
 80046f6:	d010      	beq.n	800471a <HAL_ADC_ConfigChannel+0x8e>
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	2b05      	cmp	r3, #5
 80046fe:	d00c      	beq.n	800471a <HAL_ADC_ConfigChannel+0x8e>
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	2b06      	cmp	r3, #6
 8004706:	d008      	beq.n	800471a <HAL_ADC_ConfigChannel+0x8e>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	2b07      	cmp	r3, #7
 800470e:	d004      	beq.n	800471a <HAL_ADC_ConfigChannel+0x8e>
 8004710:	f240 618d 	movw	r1, #1677	; 0x68d
 8004714:	4857      	ldr	r0, [pc, #348]	; (8004874 <HAL_ADC_ConfigChannel+0x1e8>)
 8004716:	f7fe fd30 	bl	800317a <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004720:	2b01      	cmp	r3, #1
 8004722:	d101      	bne.n	8004728 <HAL_ADC_ConfigChannel+0x9c>
 8004724:	2302      	movs	r3, #2
 8004726:	e118      	b.n	800495a <HAL_ADC_ConfigChannel+0x2ce>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b09      	cmp	r3, #9
 8004736:	d925      	bls.n	8004784 <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68d9      	ldr	r1, [r3, #12]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	b29b      	uxth	r3, r3
 8004744:	461a      	mov	r2, r3
 8004746:	4613      	mov	r3, r2
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	4413      	add	r3, r2
 800474c:	3b1e      	subs	r3, #30
 800474e:	2207      	movs	r2, #7
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	43da      	mvns	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	400a      	ands	r2, r1
 800475c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68d9      	ldr	r1, [r3, #12]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	b29b      	uxth	r3, r3
 800476e:	4618      	mov	r0, r3
 8004770:	4603      	mov	r3, r0
 8004772:	005b      	lsls	r3, r3, #1
 8004774:	4403      	add	r3, r0
 8004776:	3b1e      	subs	r3, #30
 8004778:	409a      	lsls	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	60da      	str	r2, [r3, #12]
 8004782:	e022      	b.n	80047ca <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6919      	ldr	r1, [r3, #16]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	b29b      	uxth	r3, r3
 8004790:	461a      	mov	r2, r3
 8004792:	4613      	mov	r3, r2
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	4413      	add	r3, r2
 8004798:	2207      	movs	r2, #7
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	43da      	mvns	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	400a      	ands	r2, r1
 80047a6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6919      	ldr	r1, [r3, #16]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	689a      	ldr	r2, [r3, #8]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	4618      	mov	r0, r3
 80047ba:	4603      	mov	r3, r0
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	4403      	add	r3, r0
 80047c0:	409a      	lsls	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2b06      	cmp	r3, #6
 80047d0:	d824      	bhi.n	800481c <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	4613      	mov	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	3b05      	subs	r3, #5
 80047e4:	221f      	movs	r2, #31
 80047e6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ea:	43da      	mvns	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	400a      	ands	r2, r1
 80047f2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	b29b      	uxth	r3, r3
 8004800:	4618      	mov	r0, r3
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	4613      	mov	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	3b05      	subs	r3, #5
 800480e:	fa00 f203 	lsl.w	r2, r0, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	635a      	str	r2, [r3, #52]	; 0x34
 800481a:	e051      	b.n	80048c0 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	2b0c      	cmp	r3, #12
 8004822:	d829      	bhi.n	8004878 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	4613      	mov	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4413      	add	r3, r2
 8004834:	3b23      	subs	r3, #35	; 0x23
 8004836:	221f      	movs	r2, #31
 8004838:	fa02 f303 	lsl.w	r3, r2, r3
 800483c:	43da      	mvns	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	400a      	ands	r2, r1
 8004844:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	b29b      	uxth	r3, r3
 8004852:	4618      	mov	r0, r3
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	4613      	mov	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	3b23      	subs	r3, #35	; 0x23
 8004860:	fa00 f203 	lsl.w	r2, r0, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	631a      	str	r2, [r3, #48]	; 0x30
 800486c:	e028      	b.n	80048c0 <HAL_ADC_ConfigChannel+0x234>
 800486e:	bf00      	nop
 8004870:	10000012 	.word	0x10000012
 8004874:	0800edcc 	.word	0x0800edcc
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	4613      	mov	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	3b41      	subs	r3, #65	; 0x41
 800488a:	221f      	movs	r2, #31
 800488c:	fa02 f303 	lsl.w	r3, r2, r3
 8004890:	43da      	mvns	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	400a      	ands	r2, r1
 8004898:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	4618      	mov	r0, r3
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	4613      	mov	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	3b41      	subs	r3, #65	; 0x41
 80048b4:	fa00 f203 	lsl.w	r2, r0, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048c0:	4b28      	ldr	r3, [pc, #160]	; (8004964 <HAL_ADC_ConfigChannel+0x2d8>)
 80048c2:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a27      	ldr	r2, [pc, #156]	; (8004968 <HAL_ADC_ConfigChannel+0x2dc>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d10f      	bne.n	80048ee <HAL_ADC_ConfigChannel+0x262>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b12      	cmp	r3, #18
 80048d4:	d10b      	bne.n	80048ee <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a1d      	ldr	r2, [pc, #116]	; (8004968 <HAL_ADC_ConfigChannel+0x2dc>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d12b      	bne.n	8004950 <HAL_ADC_ConfigChannel+0x2c4>
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a1b      	ldr	r2, [pc, #108]	; (800496c <HAL_ADC_ConfigChannel+0x2e0>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d003      	beq.n	800490a <HAL_ADC_ConfigChannel+0x27e>
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b11      	cmp	r3, #17
 8004908:	d122      	bne.n	8004950 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a11      	ldr	r2, [pc, #68]	; (800496c <HAL_ADC_ConfigChannel+0x2e0>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d111      	bne.n	8004950 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800492c:	4b10      	ldr	r3, [pc, #64]	; (8004970 <HAL_ADC_ConfigChannel+0x2e4>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a10      	ldr	r2, [pc, #64]	; (8004974 <HAL_ADC_ConfigChannel+0x2e8>)
 8004932:	fba2 2303 	umull	r2, r3, r2, r3
 8004936:	0c9a      	lsrs	r2, r3, #18
 8004938:	4613      	mov	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	005b      	lsls	r3, r3, #1
 8004940:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004942:	e002      	b.n	800494a <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	3b01      	subs	r3, #1
 8004948:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1f9      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	40012300 	.word	0x40012300
 8004968:	40012000 	.word	0x40012000
 800496c:	10000012 	.word	0x10000012
 8004970:	20000000 	.word	0x20000000
 8004974:	431bde83 	.word	0x431bde83

08004978 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004980:	4b7f      	ldr	r3, [pc, #508]	; (8004b80 <ADC_Init+0x208>)
 8004982:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	431a      	orrs	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6859      	ldr	r1, [r3, #4]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	021a      	lsls	r2, r3, #8
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	430a      	orrs	r2, r1
 80049c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80049d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6859      	ldr	r1, [r3, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6899      	ldr	r1, [r3, #8]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68da      	ldr	r2, [r3, #12]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0a:	4a5e      	ldr	r2, [pc, #376]	; (8004b84 <ADC_Init+0x20c>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d022      	beq.n	8004a56 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689a      	ldr	r2, [r3, #8]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6899      	ldr	r1, [r3, #8]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6899      	ldr	r1, [r3, #8]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	609a      	str	r2, [r3, #8]
 8004a54:	e00f      	b.n	8004a76 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a74:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 0202 	bic.w	r2, r2, #2
 8004a84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6899      	ldr	r1, [r3, #8]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	7e1b      	ldrb	r3, [r3, #24]
 8004a90:	005a      	lsls	r2, r3, #1
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d028      	beq.n	8004af6 <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <ADC_Init+0x13c>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	2b08      	cmp	r3, #8
 8004ab2:	d904      	bls.n	8004abe <ADC_Init+0x146>
 8004ab4:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8004ab8:	4833      	ldr	r0, [pc, #204]	; (8004b88 <ADC_Init+0x210>)
 8004aba:	f7fe fb5e 	bl	800317a <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004acc:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004adc:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6859      	ldr	r1, [r3, #4]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	035a      	lsls	r2, r3, #13
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	430a      	orrs	r2, r1
 8004af2:	605a      	str	r2, [r3, #4]
 8004af4:	e007      	b.n	8004b06 <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b04:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004b14:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	69db      	ldr	r3, [r3, #28]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	051a      	lsls	r2, r3, #20
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689a      	ldr	r2, [r3, #8]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004b3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6899      	ldr	r1, [r3, #8]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b48:	025a      	lsls	r2, r3, #9
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689a      	ldr	r2, [r3, #8]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6899      	ldr	r1, [r3, #8]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	029a      	lsls	r2, r3, #10
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	609a      	str	r2, [r3, #8]
}
 8004b76:	bf00      	nop
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	40012300 	.word	0x40012300
 8004b84:	0f000001 	.word	0x0f000001
 8004b88:	0800edcc 	.word	0x0800edcc

08004b8c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b98:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d13d      	bne.n	8004c22 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d12b      	bne.n	8004c18 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d127      	bne.n	8004c18 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d006      	beq.n	8004be4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d119      	bne.n	8004c18 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 0220 	bic.w	r2, r2, #32
 8004bf2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d105      	bne.n	8004c18 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c10:	f043 0201 	orr.w	r2, r3, #1
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	4798      	blx	r3
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004c20:	e00f      	b.n	8004c42 <ADC_DMAConvCplt+0xb6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c26:	f003 0310 	and.w	r3, r3, #16
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d004      	beq.n	8004c38 <ADC_DMAConvCplt+0xac>
      hadc->ErrorCallback(hadc);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	4798      	blx	r3
}
 8004c36:	e004      	b.n	8004c42 <ADC_DMAConvCplt+0xb6>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	4798      	blx	r3
}
 8004c42:	bf00      	nop
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b084      	sub	sp, #16
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c56:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c60:	bf00      	nop
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c74:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2240      	movs	r2, #64	; 0x40
 8004c7a:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c80:	f043 0204 	orr.w	r2, r3, #4
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c90:	bf00      	nop
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f003 0307 	and.w	r3, r3, #7
 8004cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004cbc:	4b0c      	ldr	r3, [pc, #48]	; (8004cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004cc8:	4013      	ands	r3, r2
 8004cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cde:	4a04      	ldr	r2, [pc, #16]	; (8004cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	60d3      	str	r3, [r2, #12]
}
 8004ce4:	bf00      	nop
 8004ce6:	3714      	adds	r7, #20
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr
 8004cf0:	e000ed00 	.word	0xe000ed00

08004cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004cf8:	4b04      	ldr	r3, [pc, #16]	; (8004d0c <__NVIC_GetPriorityGrouping+0x18>)
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	0a1b      	lsrs	r3, r3, #8
 8004cfe:	f003 0307 	and.w	r3, r3, #7
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	e000ed00 	.word	0xe000ed00

08004d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	4603      	mov	r3, r0
 8004d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	db0b      	blt.n	8004d3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d22:	79fb      	ldrb	r3, [r7, #7]
 8004d24:	f003 021f 	and.w	r2, r3, #31
 8004d28:	4907      	ldr	r1, [pc, #28]	; (8004d48 <__NVIC_EnableIRQ+0x38>)
 8004d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d2e:	095b      	lsrs	r3, r3, #5
 8004d30:	2001      	movs	r0, #1
 8004d32:	fa00 f202 	lsl.w	r2, r0, r2
 8004d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d3a:	bf00      	nop
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	e000e100 	.word	0xe000e100

08004d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	4603      	mov	r3, r0
 8004d54:	6039      	str	r1, [r7, #0]
 8004d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	db0a      	blt.n	8004d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	b2da      	uxtb	r2, r3
 8004d64:	490c      	ldr	r1, [pc, #48]	; (8004d98 <__NVIC_SetPriority+0x4c>)
 8004d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d6a:	0112      	lsls	r2, r2, #4
 8004d6c:	b2d2      	uxtb	r2, r2
 8004d6e:	440b      	add	r3, r1
 8004d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d74:	e00a      	b.n	8004d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	4908      	ldr	r1, [pc, #32]	; (8004d9c <__NVIC_SetPriority+0x50>)
 8004d7c:	79fb      	ldrb	r3, [r7, #7]
 8004d7e:	f003 030f 	and.w	r3, r3, #15
 8004d82:	3b04      	subs	r3, #4
 8004d84:	0112      	lsls	r2, r2, #4
 8004d86:	b2d2      	uxtb	r2, r2
 8004d88:	440b      	add	r3, r1
 8004d8a:	761a      	strb	r2, [r3, #24]
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	e000e100 	.word	0xe000e100
 8004d9c:	e000ed00 	.word	0xe000ed00

08004da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b089      	sub	sp, #36	; 0x24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f003 0307 	and.w	r3, r3, #7
 8004db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	f1c3 0307 	rsb	r3, r3, #7
 8004dba:	2b04      	cmp	r3, #4
 8004dbc:	bf28      	it	cs
 8004dbe:	2304      	movcs	r3, #4
 8004dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	3304      	adds	r3, #4
 8004dc6:	2b06      	cmp	r3, #6
 8004dc8:	d902      	bls.n	8004dd0 <NVIC_EncodePriority+0x30>
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	3b03      	subs	r3, #3
 8004dce:	e000      	b.n	8004dd2 <NVIC_EncodePriority+0x32>
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	fa02 f303 	lsl.w	r3, r2, r3
 8004dde:	43da      	mvns	r2, r3
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	401a      	ands	r2, r3
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004de8:	f04f 31ff 	mov.w	r1, #4294967295
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	fa01 f303 	lsl.w	r3, r1, r3
 8004df2:	43d9      	mvns	r1, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004df8:	4313      	orrs	r3, r2
         );
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3724      	adds	r7, #36	; 0x24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
	...

08004e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b07      	cmp	r3, #7
 8004e14:	d00f      	beq.n	8004e36 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b06      	cmp	r3, #6
 8004e1a:	d00c      	beq.n	8004e36 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b05      	cmp	r3, #5
 8004e20:	d009      	beq.n	8004e36 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b04      	cmp	r3, #4
 8004e26:	d006      	beq.n	8004e36 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b03      	cmp	r3, #3
 8004e2c:	d003      	beq.n	8004e36 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004e2e:	2190      	movs	r1, #144	; 0x90
 8004e30:	4804      	ldr	r0, [pc, #16]	; (8004e44 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8004e32:	f7fe f9a2 	bl	800317a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7ff ff38 	bl	8004cac <__NVIC_SetPriorityGrouping>
}
 8004e3c:	bf00      	nop
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	0800ee40 	.word	0x0800ee40

08004e48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	4603      	mov	r3, r0
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
 8004e54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b0f      	cmp	r3, #15
 8004e5e:	d903      	bls.n	8004e68 <HAL_NVIC_SetPriority+0x20>
 8004e60:	21a8      	movs	r1, #168	; 0xa8
 8004e62:	480e      	ldr	r0, [pc, #56]	; (8004e9c <HAL_NVIC_SetPriority+0x54>)
 8004e64:	f7fe f989 	bl	800317a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2b0f      	cmp	r3, #15
 8004e6c:	d903      	bls.n	8004e76 <HAL_NVIC_SetPriority+0x2e>
 8004e6e:	21a9      	movs	r1, #169	; 0xa9
 8004e70:	480a      	ldr	r0, [pc, #40]	; (8004e9c <HAL_NVIC_SetPriority+0x54>)
 8004e72:	f7fe f982 	bl	800317a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e76:	f7ff ff3d 	bl	8004cf4 <__NVIC_GetPriorityGrouping>
 8004e7a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	68b9      	ldr	r1, [r7, #8]
 8004e80:	6978      	ldr	r0, [r7, #20]
 8004e82:	f7ff ff8d 	bl	8004da0 <NVIC_EncodePriority>
 8004e86:	4602      	mov	r2, r0
 8004e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e8c:	4611      	mov	r1, r2
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7ff ff5c 	bl	8004d4c <__NVIC_SetPriority>
}
 8004e94:	bf00      	nop
 8004e96:	3718      	adds	r7, #24
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	0800ee40 	.word	0x0800ee40

08004ea0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8004eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	da03      	bge.n	8004eba <HAL_NVIC_EnableIRQ+0x1a>
 8004eb2:	21bc      	movs	r1, #188	; 0xbc
 8004eb4:	4805      	ldr	r0, [pc, #20]	; (8004ecc <HAL_NVIC_EnableIRQ+0x2c>)
 8004eb6:	f7fe f960 	bl	800317a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7ff ff26 	bl	8004d10 <__NVIC_EnableIRQ>
}
 8004ec4:	bf00      	nop
 8004ec6:	3708      	adds	r7, #8
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	0800ee40 	.word	0x0800ee40

08004ed0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e017      	b.n	8004f12 <HAL_CRC_Init+0x42>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a0d      	ldr	r2, [pc, #52]	; (8004f1c <HAL_CRC_Init+0x4c>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d003      	beq.n	8004ef4 <HAL_CRC_Init+0x24>
 8004eec:	2168      	movs	r1, #104	; 0x68
 8004eee:	480c      	ldr	r0, [pc, #48]	; (8004f20 <HAL_CRC_Init+0x50>)
 8004ef0:	f7fe f943 	bl	800317a <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	795b      	ldrb	r3, [r3, #5]
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d105      	bne.n	8004f0a <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f7fd fd35 	bl	8002974 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	40023000 	.word	0x40023000
 8004f20:	0800eeb8 	.word	0x0800eeb8

08004f24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004f30:	f7fe ff9c 	bl	8003e6c <HAL_GetTick>
 8004f34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d101      	bne.n	8004f40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e203      	b.n	8005348 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a8b      	ldr	r2, [pc, #556]	; (8005174 <HAL_DMA_Init+0x250>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d04e      	beq.n	8004fe8 <HAL_DMA_Init+0xc4>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a8a      	ldr	r2, [pc, #552]	; (8005178 <HAL_DMA_Init+0x254>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d049      	beq.n	8004fe8 <HAL_DMA_Init+0xc4>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a88      	ldr	r2, [pc, #544]	; (800517c <HAL_DMA_Init+0x258>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d044      	beq.n	8004fe8 <HAL_DMA_Init+0xc4>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a87      	ldr	r2, [pc, #540]	; (8005180 <HAL_DMA_Init+0x25c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d03f      	beq.n	8004fe8 <HAL_DMA_Init+0xc4>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a85      	ldr	r2, [pc, #532]	; (8005184 <HAL_DMA_Init+0x260>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d03a      	beq.n	8004fe8 <HAL_DMA_Init+0xc4>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a84      	ldr	r2, [pc, #528]	; (8005188 <HAL_DMA_Init+0x264>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d035      	beq.n	8004fe8 <HAL_DMA_Init+0xc4>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a82      	ldr	r2, [pc, #520]	; (800518c <HAL_DMA_Init+0x268>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d030      	beq.n	8004fe8 <HAL_DMA_Init+0xc4>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a81      	ldr	r2, [pc, #516]	; (8005190 <HAL_DMA_Init+0x26c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d02b      	beq.n	8004fe8 <HAL_DMA_Init+0xc4>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a7f      	ldr	r2, [pc, #508]	; (8005194 <HAL_DMA_Init+0x270>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d026      	beq.n	8004fe8 <HAL_DMA_Init+0xc4>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a7e      	ldr	r2, [pc, #504]	; (8005198 <HAL_DMA_Init+0x274>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d021      	beq.n	8004fe8 <HAL_DMA_Init+0xc4>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a7c      	ldr	r2, [pc, #496]	; (800519c <HAL_DMA_Init+0x278>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d01c      	beq.n	8004fe8 <HAL_DMA_Init+0xc4>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a7b      	ldr	r2, [pc, #492]	; (80051a0 <HAL_DMA_Init+0x27c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d017      	beq.n	8004fe8 <HAL_DMA_Init+0xc4>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a79      	ldr	r2, [pc, #484]	; (80051a4 <HAL_DMA_Init+0x280>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d012      	beq.n	8004fe8 <HAL_DMA_Init+0xc4>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a78      	ldr	r2, [pc, #480]	; (80051a8 <HAL_DMA_Init+0x284>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d00d      	beq.n	8004fe8 <HAL_DMA_Init+0xc4>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a76      	ldr	r2, [pc, #472]	; (80051ac <HAL_DMA_Init+0x288>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d008      	beq.n	8004fe8 <HAL_DMA_Init+0xc4>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a75      	ldr	r2, [pc, #468]	; (80051b0 <HAL_DMA_Init+0x28c>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d003      	beq.n	8004fe8 <HAL_DMA_Init+0xc4>
 8004fe0:	21b7      	movs	r1, #183	; 0xb7
 8004fe2:	4874      	ldr	r0, [pc, #464]	; (80051b4 <HAL_DMA_Init+0x290>)
 8004fe4:	f7fe f8c9 	bl	800317a <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d026      	beq.n	800503e <HAL_DMA_Init+0x11a>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ff8:	d021      	beq.n	800503e <HAL_DMA_Init+0x11a>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005002:	d01c      	beq.n	800503e <HAL_DMA_Init+0x11a>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800500c:	d017      	beq.n	800503e <HAL_DMA_Init+0x11a>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005016:	d012      	beq.n	800503e <HAL_DMA_Init+0x11a>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8005020:	d00d      	beq.n	800503e <HAL_DMA_Init+0x11a>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800502a:	d008      	beq.n	800503e <HAL_DMA_Init+0x11a>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8005034:	d003      	beq.n	800503e <HAL_DMA_Init+0x11a>
 8005036:	21b8      	movs	r1, #184	; 0xb8
 8005038:	485e      	ldr	r0, [pc, #376]	; (80051b4 <HAL_DMA_Init+0x290>)
 800503a:	f7fe f89e 	bl	800317a <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00b      	beq.n	800505e <HAL_DMA_Init+0x13a>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	2b40      	cmp	r3, #64	; 0x40
 800504c:	d007      	beq.n	800505e <HAL_DMA_Init+0x13a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	2b80      	cmp	r3, #128	; 0x80
 8005054:	d003      	beq.n	800505e <HAL_DMA_Init+0x13a>
 8005056:	21b9      	movs	r1, #185	; 0xb9
 8005058:	4856      	ldr	r0, [pc, #344]	; (80051b4 <HAL_DMA_Init+0x290>)
 800505a:	f7fe f88e 	bl	800317a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005066:	d007      	beq.n	8005078 <HAL_DMA_Init+0x154>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <HAL_DMA_Init+0x154>
 8005070:	21ba      	movs	r1, #186	; 0xba
 8005072:	4850      	ldr	r0, [pc, #320]	; (80051b4 <HAL_DMA_Init+0x290>)
 8005074:	f7fe f881 	bl	800317a <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005080:	d007      	beq.n	8005092 <HAL_DMA_Init+0x16e>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_DMA_Init+0x16e>
 800508a:	21bb      	movs	r1, #187	; 0xbb
 800508c:	4849      	ldr	r0, [pc, #292]	; (80051b4 <HAL_DMA_Init+0x290>)
 800508e:	f7fe f874 	bl	800317a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00d      	beq.n	80050b6 <HAL_DMA_Init+0x192>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050a2:	d008      	beq.n	80050b6 <HAL_DMA_Init+0x192>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ac:	d003      	beq.n	80050b6 <HAL_DMA_Init+0x192>
 80050ae:	21bc      	movs	r1, #188	; 0xbc
 80050b0:	4840      	ldr	r0, [pc, #256]	; (80051b4 <HAL_DMA_Init+0x290>)
 80050b2:	f7fe f862 	bl	800317a <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00d      	beq.n	80050da <HAL_DMA_Init+0x1b6>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050c6:	d008      	beq.n	80050da <HAL_DMA_Init+0x1b6>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050d0:	d003      	beq.n	80050da <HAL_DMA_Init+0x1b6>
 80050d2:	21bd      	movs	r1, #189	; 0xbd
 80050d4:	4837      	ldr	r0, [pc, #220]	; (80051b4 <HAL_DMA_Init+0x290>)
 80050d6:	f7fe f850 	bl	800317a <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00c      	beq.n	80050fc <HAL_DMA_Init+0x1d8>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ea:	d007      	beq.n	80050fc <HAL_DMA_Init+0x1d8>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	69db      	ldr	r3, [r3, #28]
 80050f0:	2b20      	cmp	r3, #32
 80050f2:	d003      	beq.n	80050fc <HAL_DMA_Init+0x1d8>
 80050f4:	21be      	movs	r1, #190	; 0xbe
 80050f6:	482f      	ldr	r0, [pc, #188]	; (80051b4 <HAL_DMA_Init+0x290>)
 80050f8:	f7fe f83f 	bl	800317a <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d012      	beq.n	800512a <HAL_DMA_Init+0x206>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a1b      	ldr	r3, [r3, #32]
 8005108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800510c:	d00d      	beq.n	800512a <HAL_DMA_Init+0x206>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005116:	d008      	beq.n	800512a <HAL_DMA_Init+0x206>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005120:	d003      	beq.n	800512a <HAL_DMA_Init+0x206>
 8005122:	21bf      	movs	r1, #191	; 0xbf
 8005124:	4823      	ldr	r0, [pc, #140]	; (80051b4 <HAL_DMA_Init+0x290>)
 8005126:	f7fe f828 	bl	800317a <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	2b00      	cmp	r3, #0
 8005130:	d007      	beq.n	8005142 <HAL_DMA_Init+0x21e>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005136:	2b04      	cmp	r3, #4
 8005138:	d003      	beq.n	8005142 <HAL_DMA_Init+0x21e>
 800513a:	21c0      	movs	r1, #192	; 0xc0
 800513c:	481d      	ldr	r0, [pc, #116]	; (80051b4 <HAL_DMA_Init+0x290>)
 800513e:	f7fe f81c 	bl	800317a <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005146:	2b00      	cmp	r3, #0
 8005148:	d064      	beq.n	8005214 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514e:	2b00      	cmp	r3, #0
 8005150:	d032      	beq.n	80051b8 <HAL_DMA_Init+0x294>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005156:	2b01      	cmp	r3, #1
 8005158:	d02e      	beq.n	80051b8 <HAL_DMA_Init+0x294>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515e:	2b02      	cmp	r3, #2
 8005160:	d02a      	beq.n	80051b8 <HAL_DMA_Init+0x294>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005166:	2b03      	cmp	r3, #3
 8005168:	d026      	beq.n	80051b8 <HAL_DMA_Init+0x294>
 800516a:	21c5      	movs	r1, #197	; 0xc5
 800516c:	4811      	ldr	r0, [pc, #68]	; (80051b4 <HAL_DMA_Init+0x290>)
 800516e:	f7fe f804 	bl	800317a <assert_failed>
 8005172:	e021      	b.n	80051b8 <HAL_DMA_Init+0x294>
 8005174:	40026010 	.word	0x40026010
 8005178:	40026028 	.word	0x40026028
 800517c:	40026040 	.word	0x40026040
 8005180:	40026058 	.word	0x40026058
 8005184:	40026070 	.word	0x40026070
 8005188:	40026088 	.word	0x40026088
 800518c:	400260a0 	.word	0x400260a0
 8005190:	400260b8 	.word	0x400260b8
 8005194:	40026410 	.word	0x40026410
 8005198:	40026428 	.word	0x40026428
 800519c:	40026440 	.word	0x40026440
 80051a0:	40026458 	.word	0x40026458
 80051a4:	40026470 	.word	0x40026470
 80051a8:	40026488 	.word	0x40026488
 80051ac:	400264a0 	.word	0x400264a0
 80051b0:	400264b8 	.word	0x400264b8
 80051b4:	0800ef2c 	.word	0x0800ef2c
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d012      	beq.n	80051e6 <HAL_DMA_Init+0x2c2>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051c8:	d00d      	beq.n	80051e6 <HAL_DMA_Init+0x2c2>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051d2:	d008      	beq.n	80051e6 <HAL_DMA_Init+0x2c2>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80051dc:	d003      	beq.n	80051e6 <HAL_DMA_Init+0x2c2>
 80051de:	21c6      	movs	r1, #198	; 0xc6
 80051e0:	485b      	ldr	r0, [pc, #364]	; (8005350 <HAL_DMA_Init+0x42c>)
 80051e2:	f7fd ffca 	bl	800317a <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d012      	beq.n	8005214 <HAL_DMA_Init+0x2f0>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051f6:	d00d      	beq.n	8005214 <HAL_DMA_Init+0x2f0>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005200:	d008      	beq.n	8005214 <HAL_DMA_Init+0x2f0>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005206:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800520a:	d003      	beq.n	8005214 <HAL_DMA_Init+0x2f0>
 800520c:	21c7      	movs	r1, #199	; 0xc7
 800520e:	4850      	ldr	r0, [pc, #320]	; (8005350 <HAL_DMA_Init+0x42c>)
 8005210:	f7fd ffb3 	bl	800317a <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2202      	movs	r2, #2
 8005218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0201 	bic.w	r2, r2, #1
 8005232:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005234:	e00f      	b.n	8005256 <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005236:	f7fe fe19 	bl	8003e6c <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b05      	cmp	r3, #5
 8005242:	d908      	bls.n	8005256 <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2220      	movs	r2, #32
 8005248:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2203      	movs	r2, #3
 800524e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e078      	b.n	8005348 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1e8      	bne.n	8005236 <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	4b39      	ldr	r3, [pc, #228]	; (8005354 <HAL_DMA_Init+0x430>)
 8005270:	4013      	ands	r3, r2
 8005272:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005282:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800528e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800529a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ac:	2b04      	cmp	r3, #4
 80052ae:	d107      	bne.n	80052c0 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b8:	4313      	orrs	r3, r2
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	4313      	orrs	r3, r2
 80052be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	f023 0307 	bic.w	r3, r3, #7
 80052d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	4313      	orrs	r3, r2
 80052e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e6:	2b04      	cmp	r3, #4
 80052e8:	d117      	bne.n	800531a <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00e      	beq.n	800531a <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 fb1f 	bl	8005940 <DMA_CheckFifoParam>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d008      	beq.n	800531a <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2240      	movs	r2, #64	; 0x40
 800530c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005316:	2301      	movs	r3, #1
 8005318:	e016      	b.n	8005348 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 fad6 	bl	80058d4 <DMA_CalcBaseAndBitshift>
 8005328:	4603      	mov	r3, r0
 800532a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005330:	223f      	movs	r2, #63	; 0x3f
 8005332:	409a      	lsls	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3718      	adds	r7, #24
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	0800ef2c 	.word	0x0800ef2c
 8005354:	f010803f 	.word	0xf010803f

08005358 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
 8005364:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005366:	2300      	movs	r3, #0
 8005368:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800536e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_DMA_Start_IT+0x26>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800537c:	d304      	bcc.n	8005388 <HAL_DMA_Start_IT+0x30>
 800537e:	f240 11cb 	movw	r1, #459	; 0x1cb
 8005382:	4827      	ldr	r0, [pc, #156]	; (8005420 <HAL_DMA_Start_IT+0xc8>)
 8005384:	f7fd fef9 	bl	800317a <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800538e:	2b01      	cmp	r3, #1
 8005390:	d101      	bne.n	8005396 <HAL_DMA_Start_IT+0x3e>
 8005392:	2302      	movs	r3, #2
 8005394:	e040      	b.n	8005418 <HAL_DMA_Start_IT+0xc0>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d12f      	bne.n	800540a <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2202      	movs	r2, #2
 80053ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	68b9      	ldr	r1, [r7, #8]
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 fa5a 	bl	8005878 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053c8:	223f      	movs	r2, #63	; 0x3f
 80053ca:	409a      	lsls	r2, r3
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f042 0216 	orr.w	r2, r2, #22
 80053de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d007      	beq.n	80053f8 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f042 0208 	orr.w	r2, r2, #8
 80053f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f042 0201 	orr.w	r2, r2, #1
 8005406:	601a      	str	r2, [r3, #0]
 8005408:	e005      	b.n	8005416 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005412:	2302      	movs	r3, #2
 8005414:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005416:	7dfb      	ldrb	r3, [r7, #23]
}
 8005418:	4618      	mov	r0, r3
 800541a:	3718      	adds	r7, #24
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	0800ef2c 	.word	0x0800ef2c

08005424 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005430:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005432:	f7fe fd1b 	bl	8003e6c <HAL_GetTick>
 8005436:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b02      	cmp	r3, #2
 8005442:	d008      	beq.n	8005456 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2280      	movs	r2, #128	; 0x80
 8005448:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e052      	b.n	80054fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 0216 	bic.w	r2, r2, #22
 8005464:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	695a      	ldr	r2, [r3, #20]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005474:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	2b00      	cmp	r3, #0
 800547c:	d103      	bne.n	8005486 <HAL_DMA_Abort+0x62>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005482:	2b00      	cmp	r3, #0
 8005484:	d007      	beq.n	8005496 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f022 0208 	bic.w	r2, r2, #8
 8005494:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f022 0201 	bic.w	r2, r2, #1
 80054a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054a6:	e013      	b.n	80054d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054a8:	f7fe fce0 	bl	8003e6c <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b05      	cmp	r3, #5
 80054b4:	d90c      	bls.n	80054d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2220      	movs	r2, #32
 80054ba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2203      	movs	r2, #3
 80054c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e015      	b.n	80054fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1e4      	bne.n	80054a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e2:	223f      	movs	r2, #63	; 0x3f
 80054e4:	409a      	lsls	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b02      	cmp	r3, #2
 8005516:	d004      	beq.n	8005522 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2280      	movs	r2, #128	; 0x80
 800551c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e00c      	b.n	800553c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2205      	movs	r2, #5
 8005526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f022 0201 	bic.w	r2, r2, #1
 8005538:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005550:	2300      	movs	r3, #0
 8005552:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005554:	4b8e      	ldr	r3, [pc, #568]	; (8005790 <HAL_DMA_IRQHandler+0x248>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a8e      	ldr	r2, [pc, #568]	; (8005794 <HAL_DMA_IRQHandler+0x24c>)
 800555a:	fba2 2303 	umull	r2, r3, r2, r3
 800555e:	0a9b      	lsrs	r3, r3, #10
 8005560:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005566:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005572:	2208      	movs	r2, #8
 8005574:	409a      	lsls	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4013      	ands	r3, r2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d01a      	beq.n	80055b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0304 	and.w	r3, r3, #4
 8005588:	2b00      	cmp	r3, #0
 800558a:	d013      	beq.n	80055b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 0204 	bic.w	r2, r2, #4
 800559a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a0:	2208      	movs	r2, #8
 80055a2:	409a      	lsls	r2, r3
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ac:	f043 0201 	orr.w	r2, r3, #1
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055b8:	2201      	movs	r2, #1
 80055ba:	409a      	lsls	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4013      	ands	r3, r2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d012      	beq.n	80055ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00b      	beq.n	80055ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055d6:	2201      	movs	r2, #1
 80055d8:	409a      	lsls	r2, r3
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e2:	f043 0202 	orr.w	r2, r3, #2
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ee:	2204      	movs	r2, #4
 80055f0:	409a      	lsls	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	4013      	ands	r3, r2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d012      	beq.n	8005620 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00b      	beq.n	8005620 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800560c:	2204      	movs	r2, #4
 800560e:	409a      	lsls	r2, r3
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005618:	f043 0204 	orr.w	r2, r3, #4
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005624:	2210      	movs	r2, #16
 8005626:	409a      	lsls	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4013      	ands	r3, r2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d043      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0308 	and.w	r3, r3, #8
 800563a:	2b00      	cmp	r3, #0
 800563c:	d03c      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005642:	2210      	movs	r2, #16
 8005644:	409a      	lsls	r2, r3
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d018      	beq.n	800568a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d108      	bne.n	8005678 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566a:	2b00      	cmp	r3, #0
 800566c:	d024      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	4798      	blx	r3
 8005676:	e01f      	b.n	80056b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800567c:	2b00      	cmp	r3, #0
 800567e:	d01b      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	4798      	blx	r3
 8005688:	e016      	b.n	80056b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005694:	2b00      	cmp	r3, #0
 8005696:	d107      	bne.n	80056a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 0208 	bic.w	r2, r2, #8
 80056a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056bc:	2220      	movs	r2, #32
 80056be:	409a      	lsls	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	4013      	ands	r3, r2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 808f 	beq.w	80057e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0310 	and.w	r3, r3, #16
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 8087 	beq.w	80057e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056de:	2220      	movs	r2, #32
 80056e0:	409a      	lsls	r2, r3
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b05      	cmp	r3, #5
 80056f0:	d136      	bne.n	8005760 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f022 0216 	bic.w	r2, r2, #22
 8005700:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	695a      	ldr	r2, [r3, #20]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005710:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005716:	2b00      	cmp	r3, #0
 8005718:	d103      	bne.n	8005722 <HAL_DMA_IRQHandler+0x1da>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800571e:	2b00      	cmp	r3, #0
 8005720:	d007      	beq.n	8005732 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 0208 	bic.w	r2, r2, #8
 8005730:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005736:	223f      	movs	r2, #63	; 0x3f
 8005738:	409a      	lsls	r2, r3
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005752:	2b00      	cmp	r3, #0
 8005754:	d07e      	beq.n	8005854 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	4798      	blx	r3
        }
        return;
 800575e:	e079      	b.n	8005854 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d01d      	beq.n	80057aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10d      	bne.n	8005798 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005780:	2b00      	cmp	r3, #0
 8005782:	d031      	beq.n	80057e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	4798      	blx	r3
 800578c:	e02c      	b.n	80057e8 <HAL_DMA_IRQHandler+0x2a0>
 800578e:	bf00      	nop
 8005790:	20000000 	.word	0x20000000
 8005794:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800579c:	2b00      	cmp	r3, #0
 800579e:	d023      	beq.n	80057e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	4798      	blx	r3
 80057a8:	e01e      	b.n	80057e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10f      	bne.n	80057d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f022 0210 	bic.w	r2, r2, #16
 80057c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d003      	beq.n	80057e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d032      	beq.n	8005856 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f4:	f003 0301 	and.w	r3, r3, #1
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d022      	beq.n	8005842 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2205      	movs	r2, #5
 8005800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 0201 	bic.w	r2, r2, #1
 8005812:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	3301      	adds	r3, #1
 8005818:	60bb      	str	r3, [r7, #8]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	429a      	cmp	r2, r3
 800581e:	d307      	bcc.n	8005830 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1f2      	bne.n	8005814 <HAL_DMA_IRQHandler+0x2cc>
 800582e:	e000      	b.n	8005832 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005830:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005846:	2b00      	cmp	r3, #0
 8005848:	d005      	beq.n	8005856 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	4798      	blx	r3
 8005852:	e000      	b.n	8005856 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005854:	bf00      	nop
    }
  }
}
 8005856:	3718      	adds	r7, #24
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800586a:	b2db      	uxtb	r3, r3
}
 800586c:	4618      	mov	r0, r3
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
 8005884:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005894:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	683a      	ldr	r2, [r7, #0]
 800589c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	2b40      	cmp	r3, #64	; 0x40
 80058a4:	d108      	bne.n	80058b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80058b6:	e007      	b.n	80058c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	60da      	str	r2, [r3, #12]
}
 80058c8:	bf00      	nop
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	3b10      	subs	r3, #16
 80058e4:	4a14      	ldr	r2, [pc, #80]	; (8005938 <DMA_CalcBaseAndBitshift+0x64>)
 80058e6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ea:	091b      	lsrs	r3, r3, #4
 80058ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80058ee:	4a13      	ldr	r2, [pc, #76]	; (800593c <DMA_CalcBaseAndBitshift+0x68>)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4413      	add	r3, r2
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2b03      	cmp	r3, #3
 8005900:	d909      	bls.n	8005916 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800590a:	f023 0303 	bic.w	r3, r3, #3
 800590e:	1d1a      	adds	r2, r3, #4
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	659a      	str	r2, [r3, #88]	; 0x58
 8005914:	e007      	b.n	8005926 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800591e:	f023 0303 	bic.w	r3, r3, #3
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800592a:	4618      	mov	r0, r3
 800592c:	3714      	adds	r7, #20
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	aaaaaaab 	.word	0xaaaaaaab
 800593c:	0800f448 	.word	0x0800f448

08005940 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005948:	2300      	movs	r3, #0
 800594a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005950:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d11f      	bne.n	800599a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	2b03      	cmp	r3, #3
 800595e:	d856      	bhi.n	8005a0e <DMA_CheckFifoParam+0xce>
 8005960:	a201      	add	r2, pc, #4	; (adr r2, 8005968 <DMA_CheckFifoParam+0x28>)
 8005962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005966:	bf00      	nop
 8005968:	08005979 	.word	0x08005979
 800596c:	0800598b 	.word	0x0800598b
 8005970:	08005979 	.word	0x08005979
 8005974:	08005a0f 	.word	0x08005a0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d046      	beq.n	8005a12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005988:	e043      	b.n	8005a12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005992:	d140      	bne.n	8005a16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005998:	e03d      	b.n	8005a16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059a2:	d121      	bne.n	80059e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	2b03      	cmp	r3, #3
 80059a8:	d837      	bhi.n	8005a1a <DMA_CheckFifoParam+0xda>
 80059aa:	a201      	add	r2, pc, #4	; (adr r2, 80059b0 <DMA_CheckFifoParam+0x70>)
 80059ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b0:	080059c1 	.word	0x080059c1
 80059b4:	080059c7 	.word	0x080059c7
 80059b8:	080059c1 	.word	0x080059c1
 80059bc:	080059d9 	.word	0x080059d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	73fb      	strb	r3, [r7, #15]
      break;
 80059c4:	e030      	b.n	8005a28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d025      	beq.n	8005a1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059d6:	e022      	b.n	8005a1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80059e0:	d11f      	bne.n	8005a22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80059e6:	e01c      	b.n	8005a22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d903      	bls.n	80059f6 <DMA_CheckFifoParam+0xb6>
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	2b03      	cmp	r3, #3
 80059f2:	d003      	beq.n	80059fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80059f4:	e018      	b.n	8005a28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	73fb      	strb	r3, [r7, #15]
      break;
 80059fa:	e015      	b.n	8005a28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00e      	beq.n	8005a26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a0c:	e00b      	b.n	8005a26 <DMA_CheckFifoParam+0xe6>
      break;
 8005a0e:	bf00      	nop
 8005a10:	e00a      	b.n	8005a28 <DMA_CheckFifoParam+0xe8>
      break;
 8005a12:	bf00      	nop
 8005a14:	e008      	b.n	8005a28 <DMA_CheckFifoParam+0xe8>
      break;
 8005a16:	bf00      	nop
 8005a18:	e006      	b.n	8005a28 <DMA_CheckFifoParam+0xe8>
      break;
 8005a1a:	bf00      	nop
 8005a1c:	e004      	b.n	8005a28 <DMA_CheckFifoParam+0xe8>
      break;
 8005a1e:	bf00      	nop
 8005a20:	e002      	b.n	8005a28 <DMA_CheckFifoParam+0xe8>
      break;   
 8005a22:	bf00      	nop
 8005a24:	e000      	b.n	8005a28 <DMA_CheckFifoParam+0xe8>
      break;
 8005a26:	bf00      	nop
    }
  } 
  
  return status; 
 8005a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop

08005a38 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005a42:	4b4b      	ldr	r3, [pc, #300]	; (8005b70 <HAL_FLASH_IRQHandler+0x138>)
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d020      	beq.n	8005a90 <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8005a4e:	4b49      	ldr	r3, [pc, #292]	; (8005b74 <HAL_FLASH_IRQHandler+0x13c>)
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d107      	bne.n	8005a68 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8005a58:	4b46      	ldr	r3, [pc, #280]	; (8005b74 <HAL_FLASH_IRQHandler+0x13c>)
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8005a5e:	4b45      	ldr	r3, [pc, #276]	; (8005b74 <HAL_FLASH_IRQHandler+0x13c>)
 8005a60:	f04f 32ff 	mov.w	r2, #4294967295
 8005a64:	60da      	str	r2, [r3, #12]
 8005a66:	e00b      	b.n	8005a80 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8005a68:	4b42      	ldr	r3, [pc, #264]	; (8005b74 <HAL_FLASH_IRQHandler+0x13c>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d103      	bne.n	8005a7a <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8005a72:	4b40      	ldr	r3, [pc, #256]	; (8005b74 <HAL_FLASH_IRQHandler+0x13c>)
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	607b      	str	r3, [r7, #4]
 8005a78:	e002      	b.n	8005a80 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8005a7a:	4b3e      	ldr	r3, [pc, #248]	; (8005b74 <HAL_FLASH_IRQHandler+0x13c>)
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8005a80:	f000 f88e 	bl	8005ba0 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 f881 	bl	8005b8c <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005a8a:	4b3a      	ldr	r3, [pc, #232]	; (8005b74 <HAL_FLASH_IRQHandler+0x13c>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005a90:	4b37      	ldr	r3, [pc, #220]	; (8005b70 <HAL_FLASH_IRQHandler+0x138>)
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d04a      	beq.n	8005b32 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005a9c:	4b34      	ldr	r3, [pc, #208]	; (8005b70 <HAL_FLASH_IRQHandler+0x138>)
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8005aa2:	4b34      	ldr	r3, [pc, #208]	; (8005b74 <HAL_FLASH_IRQHandler+0x13c>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d12d      	bne.n	8005b08 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8005aac:	4b31      	ldr	r3, [pc, #196]	; (8005b74 <HAL_FLASH_IRQHandler+0x13c>)
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	4a30      	ldr	r2, [pc, #192]	; (8005b74 <HAL_FLASH_IRQHandler+0x13c>)
 8005ab4:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8005ab6:	4b2f      	ldr	r3, [pc, #188]	; (8005b74 <HAL_FLASH_IRQHandler+0x13c>)
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d015      	beq.n	8005aea <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8005abe:	4b2d      	ldr	r3, [pc, #180]	; (8005b74 <HAL_FLASH_IRQHandler+0x13c>)
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 f857 	bl	8005b78 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8005aca:	4b2a      	ldr	r3, [pc, #168]	; (8005b74 <HAL_FLASH_IRQHandler+0x13c>)
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	4a28      	ldr	r2, [pc, #160]	; (8005b74 <HAL_FLASH_IRQHandler+0x13c>)
 8005ad2:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8005ad4:	4b27      	ldr	r3, [pc, #156]	; (8005b74 <HAL_FLASH_IRQHandler+0x13c>)
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8005ada:	4b26      	ldr	r3, [pc, #152]	; (8005b74 <HAL_FLASH_IRQHandler+0x13c>)
 8005adc:	7a1b      	ldrb	r3, [r3, #8]
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f8c2 	bl	8005c6c <FLASH_Erase_Sector>
 8005ae8:	e023      	b.n	8005b32 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8005aea:	f04f 33ff 	mov.w	r3, #4294967295
 8005aee:	607b      	str	r3, [r7, #4]
 8005af0:	4a20      	ldr	r2, [pc, #128]	; (8005b74 <HAL_FLASH_IRQHandler+0x13c>)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005af6:	4b1f      	ldr	r3, [pc, #124]	; (8005b74 <HAL_FLASH_IRQHandler+0x13c>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8005afc:	f000 f92c 	bl	8005d58 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 f839 	bl	8005b78 <HAL_FLASH_EndOfOperationCallback>
 8005b06:	e014      	b.n	8005b32 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8005b08:	4b1a      	ldr	r3, [pc, #104]	; (8005b74 <HAL_FLASH_IRQHandler+0x13c>)
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d107      	bne.n	8005b22 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8005b12:	f000 f921 	bl	8005d58 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8005b16:	4b17      	ldr	r3, [pc, #92]	; (8005b74 <HAL_FLASH_IRQHandler+0x13c>)
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 f82c 	bl	8005b78 <HAL_FLASH_EndOfOperationCallback>
 8005b20:	e004      	b.n	8005b2c <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8005b22:	4b14      	ldr	r3, [pc, #80]	; (8005b74 <HAL_FLASH_IRQHandler+0x13c>)
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 f826 	bl	8005b78 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005b2c:	4b11      	ldr	r3, [pc, #68]	; (8005b74 <HAL_FLASH_IRQHandler+0x13c>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8005b32:	4b10      	ldr	r3, [pc, #64]	; (8005b74 <HAL_FLASH_IRQHandler+0x13c>)
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d114      	bne.n	8005b66 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8005b3c:	4b0c      	ldr	r3, [pc, #48]	; (8005b70 <HAL_FLASH_IRQHandler+0x138>)
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	4a0b      	ldr	r2, [pc, #44]	; (8005b70 <HAL_FLASH_IRQHandler+0x138>)
 8005b42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b46:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8005b48:	4b09      	ldr	r3, [pc, #36]	; (8005b70 <HAL_FLASH_IRQHandler+0x138>)
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	4a08      	ldr	r2, [pc, #32]	; (8005b70 <HAL_FLASH_IRQHandler+0x138>)
 8005b4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b52:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8005b54:	4b06      	ldr	r3, [pc, #24]	; (8005b70 <HAL_FLASH_IRQHandler+0x138>)
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	4a05      	ldr	r2, [pc, #20]	; (8005b70 <HAL_FLASH_IRQHandler+0x138>)
 8005b5a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005b5e:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8005b60:	4b04      	ldr	r3, [pc, #16]	; (8005b74 <HAL_FLASH_IRQHandler+0x13c>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	761a      	strb	r2, [r3, #24]
  }
}
 8005b66:	bf00      	nop
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	40023c00 	.word	0x40023c00
 8005b74:	200008e8 	.word	0x200008e8

08005b78 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005ba0:	b480      	push	{r7}
 8005ba2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005ba4:	4b2f      	ldr	r3, [pc, #188]	; (8005c64 <FLASH_SetErrorCode+0xc4>)
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f003 0310 	and.w	r3, r3, #16
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d008      	beq.n	8005bc2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005bb0:	4b2d      	ldr	r3, [pc, #180]	; (8005c68 <FLASH_SetErrorCode+0xc8>)
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	f043 0310 	orr.w	r3, r3, #16
 8005bb8:	4a2b      	ldr	r2, [pc, #172]	; (8005c68 <FLASH_SetErrorCode+0xc8>)
 8005bba:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005bbc:	4b29      	ldr	r3, [pc, #164]	; (8005c64 <FLASH_SetErrorCode+0xc4>)
 8005bbe:	2210      	movs	r2, #16
 8005bc0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005bc2:	4b28      	ldr	r3, [pc, #160]	; (8005c64 <FLASH_SetErrorCode+0xc4>)
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	f003 0320 	and.w	r3, r3, #32
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d008      	beq.n	8005be0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005bce:	4b26      	ldr	r3, [pc, #152]	; (8005c68 <FLASH_SetErrorCode+0xc8>)
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	f043 0308 	orr.w	r3, r3, #8
 8005bd6:	4a24      	ldr	r2, [pc, #144]	; (8005c68 <FLASH_SetErrorCode+0xc8>)
 8005bd8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005bda:	4b22      	ldr	r3, [pc, #136]	; (8005c64 <FLASH_SetErrorCode+0xc4>)
 8005bdc:	2220      	movs	r2, #32
 8005bde:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005be0:	4b20      	ldr	r3, [pc, #128]	; (8005c64 <FLASH_SetErrorCode+0xc4>)
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d008      	beq.n	8005bfe <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005bec:	4b1e      	ldr	r3, [pc, #120]	; (8005c68 <FLASH_SetErrorCode+0xc8>)
 8005bee:	69db      	ldr	r3, [r3, #28]
 8005bf0:	f043 0304 	orr.w	r3, r3, #4
 8005bf4:	4a1c      	ldr	r2, [pc, #112]	; (8005c68 <FLASH_SetErrorCode+0xc8>)
 8005bf6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005bf8:	4b1a      	ldr	r3, [pc, #104]	; (8005c64 <FLASH_SetErrorCode+0xc4>)
 8005bfa:	2240      	movs	r2, #64	; 0x40
 8005bfc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005bfe:	4b19      	ldr	r3, [pc, #100]	; (8005c64 <FLASH_SetErrorCode+0xc4>)
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d008      	beq.n	8005c1c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005c0a:	4b17      	ldr	r3, [pc, #92]	; (8005c68 <FLASH_SetErrorCode+0xc8>)
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	f043 0302 	orr.w	r3, r3, #2
 8005c12:	4a15      	ldr	r2, [pc, #84]	; (8005c68 <FLASH_SetErrorCode+0xc8>)
 8005c14:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005c16:	4b13      	ldr	r3, [pc, #76]	; (8005c64 <FLASH_SetErrorCode+0xc4>)
 8005c18:	2280      	movs	r2, #128	; 0x80
 8005c1a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8005c1c:	4b11      	ldr	r3, [pc, #68]	; (8005c64 <FLASH_SetErrorCode+0xc4>)
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d009      	beq.n	8005c3c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005c28:	4b0f      	ldr	r3, [pc, #60]	; (8005c68 <FLASH_SetErrorCode+0xc8>)
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	f043 0301 	orr.w	r3, r3, #1
 8005c30:	4a0d      	ldr	r2, [pc, #52]	; (8005c68 <FLASH_SetErrorCode+0xc8>)
 8005c32:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005c34:	4b0b      	ldr	r3, [pc, #44]	; (8005c64 <FLASH_SetErrorCode+0xc4>)
 8005c36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c3a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005c3c:	4b09      	ldr	r3, [pc, #36]	; (8005c64 <FLASH_SetErrorCode+0xc4>)
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d008      	beq.n	8005c5a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005c48:	4b07      	ldr	r3, [pc, #28]	; (8005c68 <FLASH_SetErrorCode+0xc8>)
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	f043 0320 	orr.w	r3, r3, #32
 8005c50:	4a05      	ldr	r2, [pc, #20]	; (8005c68 <FLASH_SetErrorCode+0xc8>)
 8005c52:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005c54:	4b03      	ldr	r3, [pc, #12]	; (8005c64 <FLASH_SetErrorCode+0xc4>)
 8005c56:	2202      	movs	r2, #2
 8005c58:	60da      	str	r2, [r3, #12]
  }
}
 8005c5a:	bf00      	nop
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	40023c00 	.word	0x40023c00
 8005c68:	200008e8 	.word	0x200008e8

08005c6c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	460b      	mov	r3, r1
 8005c76:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d019      	beq.n	8005cb6 <FLASH_Erase_Sector+0x4a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d016      	beq.n	8005cb6 <FLASH_Erase_Sector+0x4a>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d013      	beq.n	8005cb6 <FLASH_Erase_Sector+0x4a>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2b03      	cmp	r3, #3
 8005c92:	d010      	beq.n	8005cb6 <FLASH_Erase_Sector+0x4a>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b04      	cmp	r3, #4
 8005c98:	d00d      	beq.n	8005cb6 <FLASH_Erase_Sector+0x4a>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b05      	cmp	r3, #5
 8005c9e:	d00a      	beq.n	8005cb6 <FLASH_Erase_Sector+0x4a>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b06      	cmp	r3, #6
 8005ca4:	d007      	beq.n	8005cb6 <FLASH_Erase_Sector+0x4a>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2b07      	cmp	r3, #7
 8005caa:	d004      	beq.n	8005cb6 <FLASH_Erase_Sector+0x4a>
 8005cac:	f240 31d9 	movw	r1, #985	; 0x3d9
 8005cb0:	4827      	ldr	r0, [pc, #156]	; (8005d50 <FLASH_Erase_Sector+0xe4>)
 8005cb2:	f7fd fa62 	bl	800317a <assert_failed>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 8005cb6:	78fb      	ldrb	r3, [r7, #3]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00d      	beq.n	8005cd8 <FLASH_Erase_Sector+0x6c>
 8005cbc:	78fb      	ldrb	r3, [r7, #3]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d00a      	beq.n	8005cd8 <FLASH_Erase_Sector+0x6c>
 8005cc2:	78fb      	ldrb	r3, [r7, #3]
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d007      	beq.n	8005cd8 <FLASH_Erase_Sector+0x6c>
 8005cc8:	78fb      	ldrb	r3, [r7, #3]
 8005cca:	2b03      	cmp	r3, #3
 8005ccc:	d004      	beq.n	8005cd8 <FLASH_Erase_Sector+0x6c>
 8005cce:	f240 31da 	movw	r1, #986	; 0x3da
 8005cd2:	481f      	ldr	r0, [pc, #124]	; (8005d50 <FLASH_Erase_Sector+0xe4>)
 8005cd4:	f7fd fa51 	bl	800317a <assert_failed>

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005cd8:	78fb      	ldrb	r3, [r7, #3]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d102      	bne.n	8005ce4 <FLASH_Erase_Sector+0x78>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60fb      	str	r3, [r7, #12]
 8005ce2:	e010      	b.n	8005d06 <FLASH_Erase_Sector+0x9a>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005ce4:	78fb      	ldrb	r3, [r7, #3]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d103      	bne.n	8005cf2 <FLASH_Erase_Sector+0x86>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005cea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	e009      	b.n	8005d06 <FLASH_Erase_Sector+0x9a>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005cf2:	78fb      	ldrb	r3, [r7, #3]
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d103      	bne.n	8005d00 <FLASH_Erase_Sector+0x94>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005cf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cfc:	60fb      	str	r3, [r7, #12]
 8005cfe:	e002      	b.n	8005d06 <FLASH_Erase_Sector+0x9a>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005d00:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005d04:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005d06:	4b13      	ldr	r3, [pc, #76]	; (8005d54 <FLASH_Erase_Sector+0xe8>)
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	4a12      	ldr	r2, [pc, #72]	; (8005d54 <FLASH_Erase_Sector+0xe8>)
 8005d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d10:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005d12:	4b10      	ldr	r3, [pc, #64]	; (8005d54 <FLASH_Erase_Sector+0xe8>)
 8005d14:	691a      	ldr	r2, [r3, #16]
 8005d16:	490f      	ldr	r1, [pc, #60]	; (8005d54 <FLASH_Erase_Sector+0xe8>)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005d1e:	4b0d      	ldr	r3, [pc, #52]	; (8005d54 <FLASH_Erase_Sector+0xe8>)
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	4a0c      	ldr	r2, [pc, #48]	; (8005d54 <FLASH_Erase_Sector+0xe8>)
 8005d24:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005d28:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005d2a:	4b0a      	ldr	r3, [pc, #40]	; (8005d54 <FLASH_Erase_Sector+0xe8>)
 8005d2c:	691a      	ldr	r2, [r3, #16]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	00db      	lsls	r3, r3, #3
 8005d32:	4313      	orrs	r3, r2
 8005d34:	4a07      	ldr	r2, [pc, #28]	; (8005d54 <FLASH_Erase_Sector+0xe8>)
 8005d36:	f043 0302 	orr.w	r3, r3, #2
 8005d3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005d3c:	4b05      	ldr	r3, [pc, #20]	; (8005d54 <FLASH_Erase_Sector+0xe8>)
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	4a04      	ldr	r2, [pc, #16]	; (8005d54 <FLASH_Erase_Sector+0xe8>)
 8005d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d46:	6113      	str	r3, [r2, #16]
}
 8005d48:	bf00      	nop
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	0800efa0 	.word	0x0800efa0
 8005d54:	40023c00 	.word	0x40023c00

08005d58 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005d5c:	4b20      	ldr	r3, [pc, #128]	; (8005de0 <FLASH_FlushCaches+0x88>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d017      	beq.n	8005d98 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005d68:	4b1d      	ldr	r3, [pc, #116]	; (8005de0 <FLASH_FlushCaches+0x88>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a1c      	ldr	r2, [pc, #112]	; (8005de0 <FLASH_FlushCaches+0x88>)
 8005d6e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d72:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005d74:	4b1a      	ldr	r3, [pc, #104]	; (8005de0 <FLASH_FlushCaches+0x88>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a19      	ldr	r2, [pc, #100]	; (8005de0 <FLASH_FlushCaches+0x88>)
 8005d7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005d7e:	6013      	str	r3, [r2, #0]
 8005d80:	4b17      	ldr	r3, [pc, #92]	; (8005de0 <FLASH_FlushCaches+0x88>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a16      	ldr	r2, [pc, #88]	; (8005de0 <FLASH_FlushCaches+0x88>)
 8005d86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d8a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005d8c:	4b14      	ldr	r3, [pc, #80]	; (8005de0 <FLASH_FlushCaches+0x88>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a13      	ldr	r2, [pc, #76]	; (8005de0 <FLASH_FlushCaches+0x88>)
 8005d92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d96:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005d98:	4b11      	ldr	r3, [pc, #68]	; (8005de0 <FLASH_FlushCaches+0x88>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d017      	beq.n	8005dd4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005da4:	4b0e      	ldr	r3, [pc, #56]	; (8005de0 <FLASH_FlushCaches+0x88>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a0d      	ldr	r2, [pc, #52]	; (8005de0 <FLASH_FlushCaches+0x88>)
 8005daa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dae:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005db0:	4b0b      	ldr	r3, [pc, #44]	; (8005de0 <FLASH_FlushCaches+0x88>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a0a      	ldr	r2, [pc, #40]	; (8005de0 <FLASH_FlushCaches+0x88>)
 8005db6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005dba:	6013      	str	r3, [r2, #0]
 8005dbc:	4b08      	ldr	r3, [pc, #32]	; (8005de0 <FLASH_FlushCaches+0x88>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a07      	ldr	r2, [pc, #28]	; (8005de0 <FLASH_FlushCaches+0x88>)
 8005dc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dc6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005dc8:	4b05      	ldr	r3, [pc, #20]	; (8005de0 <FLASH_FlushCaches+0x88>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a04      	ldr	r2, [pc, #16]	; (8005de0 <FLASH_FlushCaches+0x88>)
 8005dce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005dd2:	6013      	str	r3, [r2, #0]
  }
}
 8005dd4:	bf00      	nop
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	40023c00 	.word	0x40023c00

08005de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b088      	sub	sp, #32
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005dee:	2300      	movs	r3, #0
 8005df0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005df2:	2300      	movs	r3, #0
 8005df4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005df6:	2300      	movs	r3, #0
 8005df8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a33      	ldr	r2, [pc, #204]	; (8005ecc <HAL_GPIO_Init+0xe8>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d017      	beq.n	8005e32 <HAL_GPIO_Init+0x4e>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a32      	ldr	r2, [pc, #200]	; (8005ed0 <HAL_GPIO_Init+0xec>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d013      	beq.n	8005e32 <HAL_GPIO_Init+0x4e>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a31      	ldr	r2, [pc, #196]	; (8005ed4 <HAL_GPIO_Init+0xf0>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d00f      	beq.n	8005e32 <HAL_GPIO_Init+0x4e>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a30      	ldr	r2, [pc, #192]	; (8005ed8 <HAL_GPIO_Init+0xf4>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d00b      	beq.n	8005e32 <HAL_GPIO_Init+0x4e>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a2f      	ldr	r2, [pc, #188]	; (8005edc <HAL_GPIO_Init+0xf8>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d007      	beq.n	8005e32 <HAL_GPIO_Init+0x4e>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a2e      	ldr	r2, [pc, #184]	; (8005ee0 <HAL_GPIO_Init+0xfc>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d003      	beq.n	8005e32 <HAL_GPIO_Init+0x4e>
 8005e2a:	21ac      	movs	r1, #172	; 0xac
 8005e2c:	482d      	ldr	r0, [pc, #180]	; (8005ee4 <HAL_GPIO_Init+0x100>)
 8005e2e:	f7fd f9a4 	bl	800317a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d005      	beq.n	8005e48 <HAL_GPIO_Init+0x64>
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	0c1b      	lsrs	r3, r3, #16
 8005e42:	041b      	lsls	r3, r3, #16
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d003      	beq.n	8005e50 <HAL_GPIO_Init+0x6c>
 8005e48:	21ad      	movs	r1, #173	; 0xad
 8005e4a:	4826      	ldr	r0, [pc, #152]	; (8005ee4 <HAL_GPIO_Init+0x100>)
 8005e4c:	f7fd f995 	bl	800317a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d035      	beq.n	8005ec4 <HAL_GPIO_Init+0xe0>
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d031      	beq.n	8005ec4 <HAL_GPIO_Init+0xe0>
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	2b11      	cmp	r3, #17
 8005e66:	d02d      	beq.n	8005ec4 <HAL_GPIO_Init+0xe0>
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d029      	beq.n	8005ec4 <HAL_GPIO_Init+0xe0>
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	2b12      	cmp	r3, #18
 8005e76:	d025      	beq.n	8005ec4 <HAL_GPIO_Init+0xe0>
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8005e80:	d020      	beq.n	8005ec4 <HAL_GPIO_Init+0xe0>
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005e8a:	d01b      	beq.n	8005ec4 <HAL_GPIO_Init+0xe0>
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8005e94:	d016      	beq.n	8005ec4 <HAL_GPIO_Init+0xe0>
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8005e9e:	d011      	beq.n	8005ec4 <HAL_GPIO_Init+0xe0>
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8005ea8:	d00c      	beq.n	8005ec4 <HAL_GPIO_Init+0xe0>
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8005eb2:	d007      	beq.n	8005ec4 <HAL_GPIO_Init+0xe0>
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	2b03      	cmp	r3, #3
 8005eba:	d003      	beq.n	8005ec4 <HAL_GPIO_Init+0xe0>
 8005ebc:	21ae      	movs	r1, #174	; 0xae
 8005ebe:	4809      	ldr	r0, [pc, #36]	; (8005ee4 <HAL_GPIO_Init+0x100>)
 8005ec0:	f7fd f95b 	bl	800317a <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	61fb      	str	r3, [r7, #28]
 8005ec8:	e20c      	b.n	80062e4 <HAL_GPIO_Init+0x500>
 8005eca:	bf00      	nop
 8005ecc:	40020000 	.word	0x40020000
 8005ed0:	40020400 	.word	0x40020400
 8005ed4:	40020800 	.word	0x40020800
 8005ed8:	40020c00 	.word	0x40020c00
 8005edc:	40021000 	.word	0x40021000
 8005ee0:	40021c00 	.word	0x40021c00
 8005ee4:	0800f018 	.word	0x0800f018
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005ee8:	2201      	movs	r2, #1
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	4013      	ands	r3, r2
 8005efa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	f040 81ec 	bne.w	80062de <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f003 0303 	and.w	r3, r3, #3
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d005      	beq.n	8005f1e <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d144      	bne.n	8005fa8 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00f      	beq.n	8005f46 <HAL_GPIO_Init+0x162>
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d00b      	beq.n	8005f46 <HAL_GPIO_Init+0x162>
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d007      	beq.n	8005f46 <HAL_GPIO_Init+0x162>
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	2b03      	cmp	r3, #3
 8005f3c:	d003      	beq.n	8005f46 <HAL_GPIO_Init+0x162>
 8005f3e:	21c0      	movs	r1, #192	; 0xc0
 8005f40:	4884      	ldr	r0, [pc, #528]	; (8006154 <HAL_GPIO_Init+0x370>)
 8005f42:	f7fd f91a 	bl	800317a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	005b      	lsls	r3, r3, #1
 8005f50:	2203      	movs	r2, #3
 8005f52:	fa02 f303 	lsl.w	r3, r2, r3
 8005f56:	43db      	mvns	r3, r3
 8005f58:	69ba      	ldr	r2, [r7, #24]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	005b      	lsls	r3, r3, #1
 8005f66:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6a:	69ba      	ldr	r2, [r7, #24]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	69ba      	ldr	r2, [r7, #24]
 8005f74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	fa02 f303 	lsl.w	r3, r2, r3
 8005f84:	43db      	mvns	r3, r3
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	4013      	ands	r3, r2
 8005f8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	091b      	lsrs	r3, r3, #4
 8005f92:	f003 0201 	and.w	r2, r3, #1
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f003 0303 	and.w	r3, r3, #3
 8005fb0:	2b03      	cmp	r3, #3
 8005fb2:	d027      	beq.n	8006004 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00b      	beq.n	8005fd4 <HAL_GPIO_Init+0x1f0>
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d007      	beq.n	8005fd4 <HAL_GPIO_Init+0x1f0>
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d003      	beq.n	8005fd4 <HAL_GPIO_Init+0x1f0>
 8005fcc:	21d1      	movs	r1, #209	; 0xd1
 8005fce:	4861      	ldr	r0, [pc, #388]	; (8006154 <HAL_GPIO_Init+0x370>)
 8005fd0:	f7fd f8d3 	bl	800317a <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	005b      	lsls	r3, r3, #1
 8005fde:	2203      	movs	r2, #3
 8005fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe4:	43db      	mvns	r3, r3
 8005fe6:	69ba      	ldr	r2, [r7, #24]
 8005fe8:	4013      	ands	r3, r2
 8005fea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	689a      	ldr	r2, [r3, #8]
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	005b      	lsls	r3, r3, #1
 8005ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff8:	69ba      	ldr	r2, [r7, #24]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	69ba      	ldr	r2, [r7, #24]
 8006002:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f003 0303 	and.w	r3, r3, #3
 800600c:	2b02      	cmp	r3, #2
 800600e:	f040 80a3 	bne.w	8006158 <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d077      	beq.n	800610a <HAL_GPIO_Init+0x326>
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	2b09      	cmp	r3, #9
 8006020:	d073      	beq.n	800610a <HAL_GPIO_Init+0x326>
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d06f      	beq.n	800610a <HAL_GPIO_Init+0x326>
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d06b      	beq.n	800610a <HAL_GPIO_Init+0x326>
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d067      	beq.n	800610a <HAL_GPIO_Init+0x326>
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d063      	beq.n	800610a <HAL_GPIO_Init+0x326>
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d05f      	beq.n	800610a <HAL_GPIO_Init+0x326>
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d05b      	beq.n	800610a <HAL_GPIO_Init+0x326>
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	2b02      	cmp	r3, #2
 8006058:	d057      	beq.n	800610a <HAL_GPIO_Init+0x326>
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	2b02      	cmp	r3, #2
 8006060:	d053      	beq.n	800610a <HAL_GPIO_Init+0x326>
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	2b02      	cmp	r3, #2
 8006068:	d04f      	beq.n	800610a <HAL_GPIO_Init+0x326>
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	2b04      	cmp	r3, #4
 8006070:	d04b      	beq.n	800610a <HAL_GPIO_Init+0x326>
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	2b04      	cmp	r3, #4
 8006078:	d047      	beq.n	800610a <HAL_GPIO_Init+0x326>
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	2b04      	cmp	r3, #4
 8006080:	d043      	beq.n	800610a <HAL_GPIO_Init+0x326>
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	2b05      	cmp	r3, #5
 8006088:	d03f      	beq.n	800610a <HAL_GPIO_Init+0x326>
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	2b05      	cmp	r3, #5
 8006090:	d03b      	beq.n	800610a <HAL_GPIO_Init+0x326>
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	2b05      	cmp	r3, #5
 8006098:	d037      	beq.n	800610a <HAL_GPIO_Init+0x326>
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	2b06      	cmp	r3, #6
 80060a0:	d033      	beq.n	800610a <HAL_GPIO_Init+0x326>
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	2b06      	cmp	r3, #6
 80060a8:	d02f      	beq.n	800610a <HAL_GPIO_Init+0x326>
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	2b05      	cmp	r3, #5
 80060b0:	d02b      	beq.n	800610a <HAL_GPIO_Init+0x326>
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	2b06      	cmp	r3, #6
 80060b8:	d027      	beq.n	800610a <HAL_GPIO_Init+0x326>
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	2b07      	cmp	r3, #7
 80060c0:	d023      	beq.n	800610a <HAL_GPIO_Init+0x326>
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	2b07      	cmp	r3, #7
 80060c8:	d01f      	beq.n	800610a <HAL_GPIO_Init+0x326>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	2b07      	cmp	r3, #7
 80060d0:	d01b      	beq.n	800610a <HAL_GPIO_Init+0x326>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	2b08      	cmp	r3, #8
 80060d8:	d017      	beq.n	800610a <HAL_GPIO_Init+0x326>
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	2b0a      	cmp	r3, #10
 80060e0:	d013      	beq.n	800610a <HAL_GPIO_Init+0x326>
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	2b09      	cmp	r3, #9
 80060e8:	d00f      	beq.n	800610a <HAL_GPIO_Init+0x326>
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	2b09      	cmp	r3, #9
 80060f0:	d00b      	beq.n	800610a <HAL_GPIO_Init+0x326>
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	2b0c      	cmp	r3, #12
 80060f8:	d007      	beq.n	800610a <HAL_GPIO_Init+0x326>
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	2b0f      	cmp	r3, #15
 8006100:	d003      	beq.n	800610a <HAL_GPIO_Init+0x326>
 8006102:	21de      	movs	r1, #222	; 0xde
 8006104:	4813      	ldr	r0, [pc, #76]	; (8006154 <HAL_GPIO_Init+0x370>)
 8006106:	f7fd f838 	bl	800317a <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	08da      	lsrs	r2, r3, #3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	3208      	adds	r2, #8
 8006112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	f003 0307 	and.w	r3, r3, #7
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	220f      	movs	r2, #15
 8006122:	fa02 f303 	lsl.w	r3, r2, r3
 8006126:	43db      	mvns	r3, r3
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	4013      	ands	r3, r2
 800612c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	691a      	ldr	r2, [r3, #16]
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	f003 0307 	and.w	r3, r3, #7
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	fa02 f303 	lsl.w	r3, r2, r3
 800613e:	69ba      	ldr	r2, [r7, #24]
 8006140:	4313      	orrs	r3, r2
 8006142:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	08da      	lsrs	r2, r3, #3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	3208      	adds	r2, #8
 800614c:	69b9      	ldr	r1, [r7, #24]
 800614e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006152:	e001      	b.n	8006158 <HAL_GPIO_Init+0x374>
 8006154:	0800f018 	.word	0x0800f018
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	005b      	lsls	r3, r3, #1
 8006162:	2203      	movs	r2, #3
 8006164:	fa02 f303 	lsl.w	r3, r2, r3
 8006168:	43db      	mvns	r3, r3
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	4013      	ands	r3, r2
 800616e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f003 0203 	and.w	r2, r3, #3
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	005b      	lsls	r3, r3, #1
 800617c:	fa02 f303 	lsl.w	r3, r2, r3
 8006180:	69ba      	ldr	r2, [r7, #24]
 8006182:	4313      	orrs	r3, r2
 8006184:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	69ba      	ldr	r2, [r7, #24]
 800618a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 80a2 	beq.w	80062de <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800619a:	2300      	movs	r3, #0
 800619c:	60fb      	str	r3, [r7, #12]
 800619e:	4b56      	ldr	r3, [pc, #344]	; (80062f8 <HAL_GPIO_Init+0x514>)
 80061a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a2:	4a55      	ldr	r2, [pc, #340]	; (80062f8 <HAL_GPIO_Init+0x514>)
 80061a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061a8:	6453      	str	r3, [r2, #68]	; 0x44
 80061aa:	4b53      	ldr	r3, [pc, #332]	; (80062f8 <HAL_GPIO_Init+0x514>)
 80061ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061b2:	60fb      	str	r3, [r7, #12]
 80061b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061b6:	4a51      	ldr	r2, [pc, #324]	; (80062fc <HAL_GPIO_Init+0x518>)
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	089b      	lsrs	r3, r3, #2
 80061bc:	3302      	adds	r3, #2
 80061be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	f003 0303 	and.w	r3, r3, #3
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	220f      	movs	r2, #15
 80061ce:	fa02 f303 	lsl.w	r3, r2, r3
 80061d2:	43db      	mvns	r3, r3
 80061d4:	69ba      	ldr	r2, [r7, #24]
 80061d6:	4013      	ands	r3, r2
 80061d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a48      	ldr	r2, [pc, #288]	; (8006300 <HAL_GPIO_Init+0x51c>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d019      	beq.n	8006216 <HAL_GPIO_Init+0x432>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a47      	ldr	r2, [pc, #284]	; (8006304 <HAL_GPIO_Init+0x520>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d013      	beq.n	8006212 <HAL_GPIO_Init+0x42e>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a46      	ldr	r2, [pc, #280]	; (8006308 <HAL_GPIO_Init+0x524>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d00d      	beq.n	800620e <HAL_GPIO_Init+0x42a>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a45      	ldr	r2, [pc, #276]	; (800630c <HAL_GPIO_Init+0x528>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d007      	beq.n	800620a <HAL_GPIO_Init+0x426>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a44      	ldr	r2, [pc, #272]	; (8006310 <HAL_GPIO_Init+0x52c>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d101      	bne.n	8006206 <HAL_GPIO_Init+0x422>
 8006202:	2304      	movs	r3, #4
 8006204:	e008      	b.n	8006218 <HAL_GPIO_Init+0x434>
 8006206:	2307      	movs	r3, #7
 8006208:	e006      	b.n	8006218 <HAL_GPIO_Init+0x434>
 800620a:	2303      	movs	r3, #3
 800620c:	e004      	b.n	8006218 <HAL_GPIO_Init+0x434>
 800620e:	2302      	movs	r3, #2
 8006210:	e002      	b.n	8006218 <HAL_GPIO_Init+0x434>
 8006212:	2301      	movs	r3, #1
 8006214:	e000      	b.n	8006218 <HAL_GPIO_Init+0x434>
 8006216:	2300      	movs	r3, #0
 8006218:	69fa      	ldr	r2, [r7, #28]
 800621a:	f002 0203 	and.w	r2, r2, #3
 800621e:	0092      	lsls	r2, r2, #2
 8006220:	4093      	lsls	r3, r2
 8006222:	69ba      	ldr	r2, [r7, #24]
 8006224:	4313      	orrs	r3, r2
 8006226:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006228:	4934      	ldr	r1, [pc, #208]	; (80062fc <HAL_GPIO_Init+0x518>)
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	089b      	lsrs	r3, r3, #2
 800622e:	3302      	adds	r3, #2
 8006230:	69ba      	ldr	r2, [r7, #24]
 8006232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006236:	4b37      	ldr	r3, [pc, #220]	; (8006314 <HAL_GPIO_Init+0x530>)
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	43db      	mvns	r3, r3
 8006240:	69ba      	ldr	r2, [r7, #24]
 8006242:	4013      	ands	r3, r2
 8006244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 8006252:	69ba      	ldr	r2, [r7, #24]
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	4313      	orrs	r3, r2
 8006258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800625a:	4a2e      	ldr	r2, [pc, #184]	; (8006314 <HAL_GPIO_Init+0x530>)
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006260:	4b2c      	ldr	r3, [pc, #176]	; (8006314 <HAL_GPIO_Init+0x530>)
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	43db      	mvns	r3, r3
 800626a:	69ba      	ldr	r2, [r7, #24]
 800626c:	4013      	ands	r3, r2
 800626e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d003      	beq.n	8006284 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 800627c:	69ba      	ldr	r2, [r7, #24]
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	4313      	orrs	r3, r2
 8006282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006284:	4a23      	ldr	r2, [pc, #140]	; (8006314 <HAL_GPIO_Init+0x530>)
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800628a:	4b22      	ldr	r3, [pc, #136]	; (8006314 <HAL_GPIO_Init+0x530>)
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	43db      	mvns	r3, r3
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	4013      	ands	r3, r2
 8006298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 80062a6:	69ba      	ldr	r2, [r7, #24]
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80062ae:	4a19      	ldr	r2, [pc, #100]	; (8006314 <HAL_GPIO_Init+0x530>)
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80062b4:	4b17      	ldr	r3, [pc, #92]	; (8006314 <HAL_GPIO_Init+0x530>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	43db      	mvns	r3, r3
 80062be:	69ba      	ldr	r2, [r7, #24]
 80062c0:	4013      	ands	r3, r2
 80062c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d003      	beq.n	80062d8 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 80062d0:	69ba      	ldr	r2, [r7, #24]
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80062d8:	4a0e      	ldr	r2, [pc, #56]	; (8006314 <HAL_GPIO_Init+0x530>)
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	3301      	adds	r3, #1
 80062e2:	61fb      	str	r3, [r7, #28]
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	2b0f      	cmp	r3, #15
 80062e8:	f67f adfe 	bls.w	8005ee8 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 80062ec:	bf00      	nop
 80062ee:	bf00      	nop
 80062f0:	3720      	adds	r7, #32
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	40023800 	.word	0x40023800
 80062fc:	40013800 	.word	0x40013800
 8006300:	40020000 	.word	0x40020000
 8006304:	40020400 	.word	0x40020400
 8006308:	40020800 	.word	0x40020800
 800630c:	40020c00 	.word	0x40020c00
 8006310:	40021000 	.word	0x40021000
 8006314:	40013c00 	.word	0x40013c00

08006318 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	460b      	mov	r3, r1
 8006322:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006324:	887b      	ldrh	r3, [r7, #2]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d004      	beq.n	8006334 <HAL_GPIO_ReadPin+0x1c>
 800632a:	887b      	ldrh	r3, [r7, #2]
 800632c:	0c1b      	lsrs	r3, r3, #16
 800632e:	041b      	lsls	r3, r3, #16
 8006330:	2b00      	cmp	r3, #0
 8006332:	d004      	beq.n	800633e <HAL_GPIO_ReadPin+0x26>
 8006334:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8006338:	4809      	ldr	r0, [pc, #36]	; (8006360 <HAL_GPIO_ReadPin+0x48>)
 800633a:	f7fc ff1e 	bl	800317a <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	691a      	ldr	r2, [r3, #16]
 8006342:	887b      	ldrh	r3, [r7, #2]
 8006344:	4013      	ands	r3, r2
 8006346:	2b00      	cmp	r3, #0
 8006348:	d002      	beq.n	8006350 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 800634a:	2301      	movs	r3, #1
 800634c:	73fb      	strb	r3, [r7, #15]
 800634e:	e001      	b.n	8006354 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006350:	2300      	movs	r3, #0
 8006352:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006354:	7bfb      	ldrb	r3, [r7, #15]
}
 8006356:	4618      	mov	r0, r3
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	0800f018 	.word	0x0800f018

08006364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	460b      	mov	r3, r1
 800636e:	807b      	strh	r3, [r7, #2]
 8006370:	4613      	mov	r3, r2
 8006372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006374:	887b      	ldrh	r3, [r7, #2]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d004      	beq.n	8006384 <HAL_GPIO_WritePin+0x20>
 800637a:	887b      	ldrh	r3, [r7, #2]
 800637c:	0c1b      	lsrs	r3, r3, #16
 800637e:	041b      	lsls	r3, r3, #16
 8006380:	2b00      	cmp	r3, #0
 8006382:	d004      	beq.n	800638e <HAL_GPIO_WritePin+0x2a>
 8006384:	f240 119d 	movw	r1, #413	; 0x19d
 8006388:	480e      	ldr	r0, [pc, #56]	; (80063c4 <HAL_GPIO_WritePin+0x60>)
 800638a:	f7fc fef6 	bl	800317a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800638e:	787b      	ldrb	r3, [r7, #1]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d007      	beq.n	80063a4 <HAL_GPIO_WritePin+0x40>
 8006394:	787b      	ldrb	r3, [r7, #1]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d004      	beq.n	80063a4 <HAL_GPIO_WritePin+0x40>
 800639a:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800639e:	4809      	ldr	r0, [pc, #36]	; (80063c4 <HAL_GPIO_WritePin+0x60>)
 80063a0:	f7fc feeb 	bl	800317a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80063a4:	787b      	ldrb	r3, [r7, #1]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063aa:	887a      	ldrh	r2, [r7, #2]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80063b0:	e003      	b.n	80063ba <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80063b2:	887b      	ldrh	r3, [r7, #2]
 80063b4:	041a      	lsls	r2, r3, #16
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	619a      	str	r2, [r3, #24]
}
 80063ba:	bf00      	nop
 80063bc:	3708      	adds	r7, #8
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	0800f018 	.word	0x0800f018

080063c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e1f7      	b.n	80067ca <HAL_I2C_Init+0x402>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a81      	ldr	r2, [pc, #516]	; (80065e4 <HAL_I2C_Init+0x21c>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d00e      	beq.n	8006402 <HAL_I2C_Init+0x3a>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a7f      	ldr	r2, [pc, #508]	; (80065e8 <HAL_I2C_Init+0x220>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d009      	beq.n	8006402 <HAL_I2C_Init+0x3a>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a7e      	ldr	r2, [pc, #504]	; (80065ec <HAL_I2C_Init+0x224>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d004      	beq.n	8006402 <HAL_I2C_Init+0x3a>
 80063f8:	f44f 71df 	mov.w	r1, #446	; 0x1be
 80063fc:	487c      	ldr	r0, [pc, #496]	; (80065f0 <HAL_I2C_Init+0x228>)
 80063fe:	f7fc febc 	bl	800317a <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d004      	beq.n	8006414 <HAL_I2C_Init+0x4c>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	4a79      	ldr	r2, [pc, #484]	; (80065f4 <HAL_I2C_Init+0x22c>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d904      	bls.n	800641e <HAL_I2C_Init+0x56>
 8006414:	f240 11bf 	movw	r1, #447	; 0x1bf
 8006418:	4875      	ldr	r0, [pc, #468]	; (80065f0 <HAL_I2C_Init+0x228>)
 800641a:	f7fc feae 	bl	800317a <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d009      	beq.n	800643a <HAL_I2C_Init+0x72>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800642e:	d004      	beq.n	800643a <HAL_I2C_Init+0x72>
 8006430:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8006434:	486e      	ldr	r0, [pc, #440]	; (80065f0 <HAL_I2C_Init+0x228>)
 8006436:	f7fc fea0 	bl	800317a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006442:	f023 0303 	bic.w	r3, r3, #3
 8006446:	2b00      	cmp	r3, #0
 8006448:	d004      	beq.n	8006454 <HAL_I2C_Init+0x8c>
 800644a:	f240 11c1 	movw	r1, #449	; 0x1c1
 800644e:	4868      	ldr	r0, [pc, #416]	; (80065f0 <HAL_I2C_Init+0x228>)
 8006450:	f7fc fe93 	bl	800317a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800645c:	d009      	beq.n	8006472 <HAL_I2C_Init+0xaa>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006466:	d004      	beq.n	8006472 <HAL_I2C_Init+0xaa>
 8006468:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800646c:	4860      	ldr	r0, [pc, #384]	; (80065f0 <HAL_I2C_Init+0x228>)
 800646e:	f7fc fe84 	bl	800317a <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d008      	beq.n	800648c <HAL_I2C_Init+0xc4>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d004      	beq.n	800648c <HAL_I2C_Init+0xc4>
 8006482:	f240 11c3 	movw	r1, #451	; 0x1c3
 8006486:	485a      	ldr	r0, [pc, #360]	; (80065f0 <HAL_I2C_Init+0x228>)
 8006488:	f7fc fe77 	bl	800317a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8006494:	2b00      	cmp	r3, #0
 8006496:	d004      	beq.n	80064a2 <HAL_I2C_Init+0xda>
 8006498:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800649c:	4854      	ldr	r0, [pc, #336]	; (80065f0 <HAL_I2C_Init+0x228>)
 800649e:	f7fc fe6c 	bl	800317a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d008      	beq.n	80064bc <HAL_I2C_Init+0xf4>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	69db      	ldr	r3, [r3, #28]
 80064ae:	2b40      	cmp	r3, #64	; 0x40
 80064b0:	d004      	beq.n	80064bc <HAL_I2C_Init+0xf4>
 80064b2:	f240 11c5 	movw	r1, #453	; 0x1c5
 80064b6:	484e      	ldr	r0, [pc, #312]	; (80065f0 <HAL_I2C_Init+0x228>)
 80064b8:	f7fc fe5f 	bl	800317a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a1b      	ldr	r3, [r3, #32]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d008      	beq.n	80064d6 <HAL_I2C_Init+0x10e>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a1b      	ldr	r3, [r3, #32]
 80064c8:	2b80      	cmp	r3, #128	; 0x80
 80064ca:	d004      	beq.n	80064d6 <HAL_I2C_Init+0x10e>
 80064cc:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80064d0:	4847      	ldr	r0, [pc, #284]	; (80065f0 <HAL_I2C_Init+0x228>)
 80064d2:	f7fc fe52 	bl	800317a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d12c      	bne.n	800653c <HAL_I2C_Init+0x174>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a42      	ldr	r2, [pc, #264]	; (80065f8 <HAL_I2C_Init+0x230>)
 80064ee:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a42      	ldr	r2, [pc, #264]	; (80065fc <HAL_I2C_Init+0x234>)
 80064f4:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a41      	ldr	r2, [pc, #260]	; (8006600 <HAL_I2C_Init+0x238>)
 80064fa:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a41      	ldr	r2, [pc, #260]	; (8006604 <HAL_I2C_Init+0x23c>)
 8006500:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a40      	ldr	r2, [pc, #256]	; (8006608 <HAL_I2C_Init+0x240>)
 8006506:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a40      	ldr	r2, [pc, #256]	; (800660c <HAL_I2C_Init+0x244>)
 800650c:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a3f      	ldr	r2, [pc, #252]	; (8006610 <HAL_I2C_Init+0x248>)
 8006512:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a3f      	ldr	r2, [pc, #252]	; (8006614 <HAL_I2C_Init+0x24c>)
 8006518:	671a      	str	r2, [r3, #112]	; 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a3e      	ldr	r2, [pc, #248]	; (8006618 <HAL_I2C_Init+0x250>)
 800651e:	675a      	str	r2, [r3, #116]	; 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a3e      	ldr	r2, [pc, #248]	; (800661c <HAL_I2C_Init+0x254>)
 8006524:	679a      	str	r2, [r3, #120]	; 0x78

    if (hi2c->MspInitCallback == NULL)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800652a:	2b00      	cmp	r3, #0
 800652c:	d102      	bne.n	8006534 <HAL_I2C_Init+0x16c>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a3b      	ldr	r2, [pc, #236]	; (8006620 <HAL_I2C_Init+0x258>)
 8006532:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2224      	movs	r2, #36	; 0x24
 8006540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f022 0201 	bic.w	r2, r2, #1
 8006552:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006562:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006572:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006574:	f002 fc0a 	bl	8008d8c <HAL_RCC_GetPCLK1Freq>
 8006578:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	4a29      	ldr	r2, [pc, #164]	; (8006624 <HAL_I2C_Init+0x25c>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d807      	bhi.n	8006594 <HAL_I2C_Init+0x1cc>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	4a28      	ldr	r2, [pc, #160]	; (8006628 <HAL_I2C_Init+0x260>)
 8006588:	4293      	cmp	r3, r2
 800658a:	bf94      	ite	ls
 800658c:	2301      	movls	r3, #1
 800658e:	2300      	movhi	r3, #0
 8006590:	b2db      	uxtb	r3, r3
 8006592:	e006      	b.n	80065a2 <HAL_I2C_Init+0x1da>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	4a25      	ldr	r2, [pc, #148]	; (800662c <HAL_I2C_Init+0x264>)
 8006598:	4293      	cmp	r3, r2
 800659a:	bf94      	ite	ls
 800659c:	2301      	movls	r3, #1
 800659e:	2300      	movhi	r3, #0
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <HAL_I2C_Init+0x1e2>
  {
    return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e10f      	b.n	80067ca <HAL_I2C_Init+0x402>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	4a20      	ldr	r2, [pc, #128]	; (8006630 <HAL_I2C_Init+0x268>)
 80065ae:	fba2 2303 	umull	r2, r3, r2, r3
 80065b2:	0c9b      	lsrs	r3, r3, #18
 80065b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	6a1b      	ldr	r3, [r3, #32]
 80065d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	4a12      	ldr	r2, [pc, #72]	; (8006624 <HAL_I2C_Init+0x25c>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d82a      	bhi.n	8006634 <HAL_I2C_Init+0x26c>
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	3301      	adds	r3, #1
 80065e2:	e031      	b.n	8006648 <HAL_I2C_Init+0x280>
 80065e4:	40005400 	.word	0x40005400
 80065e8:	40005800 	.word	0x40005800
 80065ec:	40005c00 	.word	0x40005c00
 80065f0:	0800f08c 	.word	0x0800f08c
 80065f4:	00061a80 	.word	0x00061a80
 80065f8:	08006c0d 	.word	0x08006c0d
 80065fc:	08006c21 	.word	0x08006c21
 8006600:	08006c35 	.word	0x08006c35
 8006604:	08006c49 	.word	0x08006c49
 8006608:	08006c79 	.word	0x08006c79
 800660c:	08006c8d 	.word	0x08006c8d
 8006610:	08006ca1 	.word	0x08006ca1
 8006614:	08006cb5 	.word	0x08006cb5
 8006618:	08006cc9 	.word	0x08006cc9
 800661c:	08006c5d 	.word	0x08006c5d
 8006620:	08002e65 	.word	0x08002e65
 8006624:	000186a0 	.word	0x000186a0
 8006628:	001e847f 	.word	0x001e847f
 800662c:	003d08ff 	.word	0x003d08ff
 8006630:	431bde83 	.word	0x431bde83
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800663a:	fb02 f303 	mul.w	r3, r2, r3
 800663e:	4a65      	ldr	r2, [pc, #404]	; (80067d4 <HAL_I2C_Init+0x40c>)
 8006640:	fba2 2303 	umull	r2, r3, r2, r3
 8006644:	099b      	lsrs	r3, r3, #6
 8006646:	3301      	adds	r3, #1
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	6812      	ldr	r2, [r2, #0]
 800664c:	430b      	orrs	r3, r1
 800664e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800665a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	495d      	ldr	r1, [pc, #372]	; (80067d8 <HAL_I2C_Init+0x410>)
 8006664:	428b      	cmp	r3, r1
 8006666:	d819      	bhi.n	800669c <HAL_I2C_Init+0x2d4>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	1e59      	subs	r1, r3, #1
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	005b      	lsls	r3, r3, #1
 8006672:	fbb1 f3f3 	udiv	r3, r1, r3
 8006676:	1c59      	adds	r1, r3, #1
 8006678:	f640 73fc 	movw	r3, #4092	; 0xffc
 800667c:	400b      	ands	r3, r1
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00a      	beq.n	8006698 <HAL_I2C_Init+0x2d0>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	1e59      	subs	r1, r3, #1
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	005b      	lsls	r3, r3, #1
 800668c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006690:	3301      	adds	r3, #1
 8006692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006696:	e051      	b.n	800673c <HAL_I2C_Init+0x374>
 8006698:	2304      	movs	r3, #4
 800669a:	e04f      	b.n	800673c <HAL_I2C_Init+0x374>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d111      	bne.n	80066c8 <HAL_I2C_Init+0x300>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	1e58      	subs	r0, r3, #1
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6859      	ldr	r1, [r3, #4]
 80066ac:	460b      	mov	r3, r1
 80066ae:	005b      	lsls	r3, r3, #1
 80066b0:	440b      	add	r3, r1
 80066b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80066b6:	3301      	adds	r3, #1
 80066b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066bc:	2b00      	cmp	r3, #0
 80066be:	bf0c      	ite	eq
 80066c0:	2301      	moveq	r3, #1
 80066c2:	2300      	movne	r3, #0
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	e012      	b.n	80066ee <HAL_I2C_Init+0x326>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	1e58      	subs	r0, r3, #1
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6859      	ldr	r1, [r3, #4]
 80066d0:	460b      	mov	r3, r1
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	440b      	add	r3, r1
 80066d6:	0099      	lsls	r1, r3, #2
 80066d8:	440b      	add	r3, r1
 80066da:	fbb0 f3f3 	udiv	r3, r0, r3
 80066de:	3301      	adds	r3, #1
 80066e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	bf0c      	ite	eq
 80066e8:	2301      	moveq	r3, #1
 80066ea:	2300      	movne	r3, #0
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d001      	beq.n	80066f6 <HAL_I2C_Init+0x32e>
 80066f2:	2301      	movs	r3, #1
 80066f4:	e022      	b.n	800673c <HAL_I2C_Init+0x374>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10e      	bne.n	800671c <HAL_I2C_Init+0x354>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	1e58      	subs	r0, r3, #1
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6859      	ldr	r1, [r3, #4]
 8006706:	460b      	mov	r3, r1
 8006708:	005b      	lsls	r3, r3, #1
 800670a:	440b      	add	r3, r1
 800670c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006710:	3301      	adds	r3, #1
 8006712:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800671a:	e00f      	b.n	800673c <HAL_I2C_Init+0x374>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	1e58      	subs	r0, r3, #1
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6859      	ldr	r1, [r3, #4]
 8006724:	460b      	mov	r3, r1
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	440b      	add	r3, r1
 800672a:	0099      	lsls	r1, r3, #2
 800672c:	440b      	add	r3, r1
 800672e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006732:	3301      	adds	r3, #1
 8006734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006738:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800673c:	6879      	ldr	r1, [r7, #4]
 800673e:	6809      	ldr	r1, [r1, #0]
 8006740:	4313      	orrs	r3, r2
 8006742:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	69da      	ldr	r2, [r3, #28]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	431a      	orrs	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	430a      	orrs	r2, r1
 800675e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800676a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	6911      	ldr	r1, [r2, #16]
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	68d2      	ldr	r2, [r2, #12]
 8006776:	4311      	orrs	r1, r2
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	6812      	ldr	r2, [r2, #0]
 800677c:	430b      	orrs	r3, r1
 800677e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	695a      	ldr	r2, [r3, #20]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	431a      	orrs	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	430a      	orrs	r2, r1
 800679a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f042 0201 	orr.w	r2, r2, #1
 80067aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2220      	movs	r2, #32
 80067b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	10624dd3 	.word	0x10624dd3
 80067d8:	000186a0 	.word	0x000186a0

080067dc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b088      	sub	sp, #32
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80067e4:	2300      	movs	r3, #0
 80067e6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067fc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006804:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006806:	7bfb      	ldrb	r3, [r7, #15]
 8006808:	2b10      	cmp	r3, #16
 800680a:	d003      	beq.n	8006814 <HAL_I2C_EV_IRQHandler+0x38>
 800680c:	7bfb      	ldrb	r3, [r7, #15]
 800680e:	2b40      	cmp	r3, #64	; 0x40
 8006810:	f040 80c1 	bne.w	8006996 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10d      	bne.n	800684a <HAL_I2C_EV_IRQHandler+0x6e>
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006834:	d003      	beq.n	800683e <HAL_I2C_EV_IRQHandler+0x62>
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800683c:	d101      	bne.n	8006842 <HAL_I2C_EV_IRQHandler+0x66>
 800683e:	2301      	movs	r3, #1
 8006840:	e000      	b.n	8006844 <HAL_I2C_EV_IRQHandler+0x68>
 8006842:	2300      	movs	r3, #0
 8006844:	2b01      	cmp	r3, #1
 8006846:	f000 8132 	beq.w	8006aae <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00c      	beq.n	800686e <HAL_I2C_EV_IRQHandler+0x92>
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	0a5b      	lsrs	r3, r3, #9
 8006858:	f003 0301 	and.w	r3, r3, #1
 800685c:	2b00      	cmp	r3, #0
 800685e:	d006      	beq.n	800686e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f001 fc95 	bl	8008190 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fd8f 	bl	800738a <I2C_Master_SB>
 800686c:	e092      	b.n	8006994 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	08db      	lsrs	r3, r3, #3
 8006872:	f003 0301 	and.w	r3, r3, #1
 8006876:	2b00      	cmp	r3, #0
 8006878:	d009      	beq.n	800688e <HAL_I2C_EV_IRQHandler+0xb2>
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	0a5b      	lsrs	r3, r3, #9
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	2b00      	cmp	r3, #0
 8006884:	d003      	beq.n	800688e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fe05 	bl	8007496 <I2C_Master_ADD10>
 800688c:	e082      	b.n	8006994 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	085b      	lsrs	r3, r3, #1
 8006892:	f003 0301 	and.w	r3, r3, #1
 8006896:	2b00      	cmp	r3, #0
 8006898:	d009      	beq.n	80068ae <HAL_I2C_EV_IRQHandler+0xd2>
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	0a5b      	lsrs	r3, r3, #9
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d003      	beq.n	80068ae <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fe1f 	bl	80074ea <I2C_Master_ADDR>
 80068ac:	e072      	b.n	8006994 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	089b      	lsrs	r3, r3, #2
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d03b      	beq.n	8006932 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068c8:	f000 80f3 	beq.w	8006ab2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	09db      	lsrs	r3, r3, #7
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00f      	beq.n	80068f8 <HAL_I2C_EV_IRQHandler+0x11c>
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	0a9b      	lsrs	r3, r3, #10
 80068dc:	f003 0301 	and.w	r3, r3, #1
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d009      	beq.n	80068f8 <HAL_I2C_EV_IRQHandler+0x11c>
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	089b      	lsrs	r3, r3, #2
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d103      	bne.n	80068f8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 f9f3 	bl	8006cdc <I2C_MasterTransmit_TXE>
 80068f6:	e04d      	b.n	8006994 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	089b      	lsrs	r3, r3, #2
 80068fc:	f003 0301 	and.w	r3, r3, #1
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 80d6 	beq.w	8006ab2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	0a5b      	lsrs	r3, r3, #9
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	2b00      	cmp	r3, #0
 8006910:	f000 80cf 	beq.w	8006ab2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006914:	7bbb      	ldrb	r3, [r7, #14]
 8006916:	2b21      	cmp	r3, #33	; 0x21
 8006918:	d103      	bne.n	8006922 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 fa7d 	bl	8006e1a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006920:	e0c7      	b.n	8006ab2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006922:	7bfb      	ldrb	r3, [r7, #15]
 8006924:	2b40      	cmp	r3, #64	; 0x40
 8006926:	f040 80c4 	bne.w	8006ab2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 faee 	bl	8006f0c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006930:	e0bf      	b.n	8006ab2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800693c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006940:	f000 80b7 	beq.w	8006ab2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	099b      	lsrs	r3, r3, #6
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00f      	beq.n	8006970 <HAL_I2C_EV_IRQHandler+0x194>
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	0a9b      	lsrs	r3, r3, #10
 8006954:	f003 0301 	and.w	r3, r3, #1
 8006958:	2b00      	cmp	r3, #0
 800695a:	d009      	beq.n	8006970 <HAL_I2C_EV_IRQHandler+0x194>
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	089b      	lsrs	r3, r3, #2
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	2b00      	cmp	r3, #0
 8006966:	d103      	bne.n	8006970 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fb64 	bl	8007036 <I2C_MasterReceive_RXNE>
 800696e:	e011      	b.n	8006994 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	089b      	lsrs	r3, r3, #2
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	2b00      	cmp	r3, #0
 800697a:	f000 809a 	beq.w	8006ab2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	0a5b      	lsrs	r3, r3, #9
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	2b00      	cmp	r3, #0
 8006988:	f000 8093 	beq.w	8006ab2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 fc10 	bl	80071b2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006992:	e08e      	b.n	8006ab2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006994:	e08d      	b.n	8006ab2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699a:	2b00      	cmp	r3, #0
 800699c:	d004      	beq.n	80069a8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	695b      	ldr	r3, [r3, #20]
 80069a4:	61fb      	str	r3, [r7, #28]
 80069a6:	e007      	b.n	80069b8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	695b      	ldr	r3, [r3, #20]
 80069b6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	085b      	lsrs	r3, r3, #1
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d012      	beq.n	80069ea <HAL_I2C_EV_IRQHandler+0x20e>
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	0a5b      	lsrs	r3, r3, #9
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00c      	beq.n	80069ea <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d003      	beq.n	80069e0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80069e0:	69b9      	ldr	r1, [r7, #24]
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 ffd2 	bl	800798c <I2C_Slave_ADDR>
 80069e8:	e066      	b.n	8006ab8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	091b      	lsrs	r3, r3, #4
 80069ee:	f003 0301 	and.w	r3, r3, #1
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d009      	beq.n	8006a0a <HAL_I2C_EV_IRQHandler+0x22e>
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	0a5b      	lsrs	r3, r3, #9
 80069fa:	f003 0301 	and.w	r3, r3, #1
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d003      	beq.n	8006a0a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f001 f80c 	bl	8007a20 <I2C_Slave_STOPF>
 8006a08:	e056      	b.n	8006ab8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006a0a:	7bbb      	ldrb	r3, [r7, #14]
 8006a0c:	2b21      	cmp	r3, #33	; 0x21
 8006a0e:	d002      	beq.n	8006a16 <HAL_I2C_EV_IRQHandler+0x23a>
 8006a10:	7bbb      	ldrb	r3, [r7, #14]
 8006a12:	2b29      	cmp	r3, #41	; 0x29
 8006a14:	d125      	bne.n	8006a62 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	09db      	lsrs	r3, r3, #7
 8006a1a:	f003 0301 	and.w	r3, r3, #1
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00f      	beq.n	8006a42 <HAL_I2C_EV_IRQHandler+0x266>
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	0a9b      	lsrs	r3, r3, #10
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d009      	beq.n	8006a42 <HAL_I2C_EV_IRQHandler+0x266>
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	089b      	lsrs	r3, r3, #2
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d103      	bne.n	8006a42 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 fee6 	bl	800780c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a40:	e039      	b.n	8006ab6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	089b      	lsrs	r3, r3, #2
 8006a46:	f003 0301 	and.w	r3, r3, #1
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d033      	beq.n	8006ab6 <HAL_I2C_EV_IRQHandler+0x2da>
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	0a5b      	lsrs	r3, r3, #9
 8006a52:	f003 0301 	and.w	r3, r3, #1
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d02d      	beq.n	8006ab6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 ff14 	bl	8007888 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a60:	e029      	b.n	8006ab6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	099b      	lsrs	r3, r3, #6
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00f      	beq.n	8006a8e <HAL_I2C_EV_IRQHandler+0x2b2>
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	0a9b      	lsrs	r3, r3, #10
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d009      	beq.n	8006a8e <HAL_I2C_EV_IRQHandler+0x2b2>
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	089b      	lsrs	r3, r3, #2
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d103      	bne.n	8006a8e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 ff1f 	bl	80078ca <I2C_SlaveReceive_RXNE>
 8006a8c:	e014      	b.n	8006ab8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	089b      	lsrs	r3, r3, #2
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00e      	beq.n	8006ab8 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	0a5b      	lsrs	r3, r3, #9
 8006a9e:	f003 0301 	and.w	r3, r3, #1
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d008      	beq.n	8006ab8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 ff4e 	bl	8007948 <I2C_SlaveReceive_BTF>
 8006aac:	e004      	b.n	8006ab8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006aae:	bf00      	nop
 8006ab0:	e002      	b.n	8006ab8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ab2:	bf00      	nop
 8006ab4:	e000      	b.n	8006ab8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006ab6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006ab8:	3720      	adds	r7, #32
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b08a      	sub	sp, #40	; 0x28
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ae0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	0a1b      	lsrs	r3, r3, #8
 8006ae6:	f003 0301 	and.w	r3, r3, #1
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00e      	beq.n	8006b0c <HAL_I2C_ER_IRQHandler+0x4e>
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	0a1b      	lsrs	r3, r3, #8
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d008      	beq.n	8006b0c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	f043 0301 	orr.w	r3, r3, #1
 8006b00:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006b0a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006b0c:	6a3b      	ldr	r3, [r7, #32]
 8006b0e:	0a5b      	lsrs	r3, r3, #9
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d00e      	beq.n	8006b36 <HAL_I2C_ER_IRQHandler+0x78>
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	0a1b      	lsrs	r3, r3, #8
 8006b1c:	f003 0301 	and.w	r3, r3, #1
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d008      	beq.n	8006b36 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b26:	f043 0302 	orr.w	r3, r3, #2
 8006b2a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006b34:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	0a9b      	lsrs	r3, r3, #10
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d03f      	beq.n	8006bc2 <HAL_I2C_ER_IRQHandler+0x104>
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	0a1b      	lsrs	r3, r3, #8
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d039      	beq.n	8006bc2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006b4e:	7efb      	ldrb	r3, [r7, #27]
 8006b50:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b60:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b66:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006b68:	7ebb      	ldrb	r3, [r7, #26]
 8006b6a:	2b20      	cmp	r3, #32
 8006b6c:	d112      	bne.n	8006b94 <HAL_I2C_ER_IRQHandler+0xd6>
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10f      	bne.n	8006b94 <HAL_I2C_ER_IRQHandler+0xd6>
 8006b74:	7cfb      	ldrb	r3, [r7, #19]
 8006b76:	2b21      	cmp	r3, #33	; 0x21
 8006b78:	d008      	beq.n	8006b8c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006b7a:	7cfb      	ldrb	r3, [r7, #19]
 8006b7c:	2b29      	cmp	r3, #41	; 0x29
 8006b7e:	d005      	beq.n	8006b8c <HAL_I2C_ER_IRQHandler+0xce>
 8006b80:	7cfb      	ldrb	r3, [r7, #19]
 8006b82:	2b28      	cmp	r3, #40	; 0x28
 8006b84:	d106      	bne.n	8006b94 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2b21      	cmp	r3, #33	; 0x21
 8006b8a:	d103      	bne.n	8006b94 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f001 f87b 	bl	8007c88 <I2C_Slave_AF>
 8006b92:	e016      	b.n	8006bc2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b9c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba0:	f043 0304 	orr.w	r3, r3, #4
 8006ba4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006ba6:	7efb      	ldrb	r3, [r7, #27]
 8006ba8:	2b10      	cmp	r3, #16
 8006baa:	d002      	beq.n	8006bb2 <HAL_I2C_ER_IRQHandler+0xf4>
 8006bac:	7efb      	ldrb	r3, [r7, #27]
 8006bae:	2b40      	cmp	r3, #64	; 0x40
 8006bb0:	d107      	bne.n	8006bc2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bc0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	0adb      	lsrs	r3, r3, #11
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00e      	beq.n	8006bec <HAL_I2C_ER_IRQHandler+0x12e>
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	0a1b      	lsrs	r3, r3, #8
 8006bd2:	f003 0301 	and.w	r3, r3, #1
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d008      	beq.n	8006bec <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bdc:	f043 0308 	orr.w	r3, r3, #8
 8006be0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006bea:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d008      	beq.n	8006c04 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	431a      	orrs	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f001 f8b4 	bl	8007d6c <I2C_ITError>
  }
}
 8006c04:	bf00      	nop
 8006c06:	3728      	adds	r7, #40	; 0x28
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006c50:	bf00      	nop
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	460b      	mov	r3, r1
 8006c66:	70fb      	strb	r3, [r7, #3]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cf2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d153      	bne.n	8006daa <I2C_MasterTransmit_TXE+0xce>
 8006d02:	7bfb      	ldrb	r3, [r7, #15]
 8006d04:	2b21      	cmp	r3, #33	; 0x21
 8006d06:	d150      	bne.n	8006daa <I2C_MasterTransmit_TXE+0xce>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	2b08      	cmp	r3, #8
 8006d0c:	d01e      	beq.n	8006d4c <I2C_MasterTransmit_TXE+0x70>
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	2b20      	cmp	r3, #32
 8006d12:	d01b      	beq.n	8006d4c <I2C_MasterTransmit_TXE+0x70>
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d1a:	d017      	beq.n	8006d4c <I2C_MasterTransmit_TXE+0x70>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	685a      	ldr	r2, [r3, #4]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d2a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2211      	movs	r2, #17
 8006d30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2220      	movs	r2, #32
 8006d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006d4a:	e062      	b.n	8006e12 <I2C_MasterTransmit_TXE+0x136>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	685a      	ldr	r2, [r3, #4]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d5a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d6a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2220      	movs	r2, #32
 8006d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	2b40      	cmp	r3, #64	; 0x40
 8006d84:	d108      	bne.n	8006d98 <I2C_MasterTransmit_TXE+0xbc>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006d96:	e03c      	b.n	8006e12 <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MemTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006da8:	e033      	b.n	8006e12 <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MasterTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006daa:	7bfb      	ldrb	r3, [r7, #15]
 8006dac:	2b21      	cmp	r3, #33	; 0x21
 8006dae:	d005      	beq.n	8006dbc <I2C_MasterTransmit_TXE+0xe0>
 8006db0:	7bbb      	ldrb	r3, [r7, #14]
 8006db2:	2b40      	cmp	r3, #64	; 0x40
 8006db4:	d12d      	bne.n	8006e12 <I2C_MasterTransmit_TXE+0x136>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006db6:	7bfb      	ldrb	r3, [r7, #15]
 8006db8:	2b22      	cmp	r3, #34	; 0x22
 8006dba:	d12a      	bne.n	8006e12 <I2C_MasterTransmit_TXE+0x136>
  {
    if (hi2c->XferCount == 0U)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d108      	bne.n	8006dd8 <I2C_MasterTransmit_TXE+0xfc>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	685a      	ldr	r2, [r3, #4]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dd4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006dd6:	e01c      	b.n	8006e12 <I2C_MasterTransmit_TXE+0x136>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b40      	cmp	r3, #64	; 0x40
 8006de2:	d103      	bne.n	8006dec <I2C_MasterTransmit_TXE+0x110>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 f891 	bl	8006f0c <I2C_MemoryTransmit_TXE_BTF>
}
 8006dea:	e012      	b.n	8006e12 <I2C_MasterTransmit_TXE+0x136>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df0:	781a      	ldrb	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfc:	1c5a      	adds	r2, r3, #1
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006e10:	e7ff      	b.n	8006e12 <I2C_MasterTransmit_TXE+0x136>
 8006e12:	bf00      	nop
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b084      	sub	sp, #16
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e26:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b21      	cmp	r3, #33	; 0x21
 8006e32:	d167      	bne.n	8006f04 <I2C_MasterTransmit_BTF+0xea>
  {
    if (hi2c->XferCount != 0U)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d012      	beq.n	8006e64 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e42:	781a      	ldrb	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4e:	1c5a      	adds	r2, r3, #1
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006e62:	e04f      	b.n	8006f04 <I2C_MasterTransmit_BTF+0xea>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2b08      	cmp	r3, #8
 8006e68:	d01e      	beq.n	8006ea8 <I2C_MasterTransmit_BTF+0x8e>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2b20      	cmp	r3, #32
 8006e6e:	d01b      	beq.n	8006ea8 <I2C_MasterTransmit_BTF+0x8e>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e76:	d017      	beq.n	8006ea8 <I2C_MasterTransmit_BTF+0x8e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e86:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2211      	movs	r2, #17
 8006e8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2220      	movs	r2, #32
 8006e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->MasterTxCpltCallback(hi2c);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	4798      	blx	r3
}
 8006ea6:	e02d      	b.n	8006f04 <I2C_MasterTransmit_BTF+0xea>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	685a      	ldr	r2, [r3, #4]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006eb6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ec6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2220      	movs	r2, #32
 8006ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b40      	cmp	r3, #64	; 0x40
 8006ee0:	d108      	bne.n	8006ef4 <I2C_MasterTransmit_BTF+0xda>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MemTxCpltCallback(hi2c);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	4798      	blx	r3
}
 8006ef2:	e007      	b.n	8006f04 <I2C_MasterTransmit_BTF+0xea>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MasterTxCpltCallback(hi2c);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	4798      	blx	r3
}
 8006f04:	bf00      	nop
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f1a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d11d      	bne.n	8006f60 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d10b      	bne.n	8006f44 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f30:	b2da      	uxtb	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f3c:	1c9a      	adds	r2, r3, #2
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006f42:	e074      	b.n	800702e <I2C_MemoryTransmit_TXE_BTF+0x122>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	121b      	asrs	r3, r3, #8
 8006f4c:	b2da      	uxtb	r2, r3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f58:	1c5a      	adds	r2, r3, #1
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006f5e:	e066      	b.n	800702e <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 1U)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d10b      	bne.n	8006f80 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f6c:	b2da      	uxtb	r2, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f78:	1c5a      	adds	r2, r3, #1
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006f7e:	e056      	b.n	800702e <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 2U)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d152      	bne.n	800702e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006f88:	7bfb      	ldrb	r3, [r7, #15]
 8006f8a:	2b22      	cmp	r3, #34	; 0x22
 8006f8c:	d10d      	bne.n	8006faa <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f9c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fa2:	1c5a      	adds	r2, r3, #1
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006fa8:	e041      	b.n	800702e <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d015      	beq.n	8006fe0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006fb4:	7bfb      	ldrb	r3, [r7, #15]
 8006fb6:	2b21      	cmp	r3, #33	; 0x21
 8006fb8:	d112      	bne.n	8006fe0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbe:	781a      	ldrb	r2, [r3, #0]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fca:	1c5a      	adds	r2, r3, #1
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006fde:	e026      	b.n	800702e <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d121      	bne.n	800702e <I2C_MemoryTransmit_TXE_BTF+0x122>
 8006fea:	7bfb      	ldrb	r3, [r7, #15]
 8006fec:	2b21      	cmp	r3, #33	; 0x21
 8006fee:	d11e      	bne.n	800702e <I2C_MemoryTransmit_TXE_BTF+0x122>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	685a      	ldr	r2, [r3, #4]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ffe:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800700e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2220      	movs	r2, #32
 800701a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->MemTxCpltCallback(hi2c);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	4798      	blx	r3
}
 800702e:	bf00      	nop
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b084      	sub	sp, #16
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b22      	cmp	r3, #34	; 0x22
 8007048:	f040 80af 	bne.w	80071aa <I2C_MasterReceive_RXNE+0x174>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007050:	b29b      	uxth	r3, r3
 8007052:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2b03      	cmp	r3, #3
 8007058:	d921      	bls.n	800709e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	691a      	ldr	r2, [r3, #16]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007064:	b2d2      	uxtb	r2, r2
 8007066:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706c:	1c5a      	adds	r2, r3, #1
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007076:	b29b      	uxth	r3, r3
 8007078:	3b01      	subs	r3, #1
 800707a:	b29a      	uxth	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007084:	b29b      	uxth	r3, r3
 8007086:	2b03      	cmp	r3, #3
 8007088:	f040 808f 	bne.w	80071aa <I2C_MasterReceive_RXNE+0x174>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	685a      	ldr	r2, [r3, #4]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800709a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800709c:	e085      	b.n	80071aa <I2C_MasterReceive_RXNE+0x174>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d078      	beq.n	8007198 <I2C_MasterReceive_RXNE+0x162>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d002      	beq.n	80070b2 <I2C_MasterReceive_RXNE+0x7c>
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d172      	bne.n	8007198 <I2C_MasterReceive_RXNE+0x162>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f001 f83a 	bl	800812c <I2C_WaitOnSTOPRequestThroughIT>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d144      	bne.n	8007148 <I2C_MasterReceive_RXNE+0x112>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070cc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	685a      	ldr	r2, [r3, #4]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070dc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	691a      	ldr	r2, [r3, #16]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e8:	b2d2      	uxtb	r2, r2
 80070ea:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f0:	1c5a      	adds	r2, r3, #1
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	3b01      	subs	r3, #1
 80070fe:	b29a      	uxth	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2220      	movs	r2, #32
 8007108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b40      	cmp	r3, #64	; 0x40
 8007116:	d10b      	bne.n	8007130 <I2C_MasterReceive_RXNE+0xfa>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MemRxCpltCallback(hi2c);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800712e:	e03c      	b.n	80071aa <I2C_MasterReceive_RXNE+0x174>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2212      	movs	r2, #18
 800713c:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MasterRxCpltCallback(hi2c);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007146:	e030      	b.n	80071aa <I2C_MasterReceive_RXNE+0x174>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	685a      	ldr	r2, [r3, #4]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007156:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	691a      	ldr	r2, [r3, #16]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007162:	b2d2      	uxtb	r2, r2
 8007164:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716a:	1c5a      	adds	r2, r3, #1
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007174:	b29b      	uxth	r3, r3
 8007176:	3b01      	subs	r3, #1
 8007178:	b29a      	uxth	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2220      	movs	r2, #32
 8007182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCallback(hi2c);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007196:	e008      	b.n	80071aa <I2C_MasterReceive_RXNE+0x174>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071a6:	605a      	str	r2, [r3, #4]
}
 80071a8:	e7ff      	b.n	80071aa <I2C_MasterReceive_RXNE+0x174>
 80071aa:	bf00      	nop
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b084      	sub	sp, #16
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071be:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	2b04      	cmp	r3, #4
 80071c8:	d11b      	bne.n	8007202 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071d8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	691a      	ldr	r2, [r3, #16]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e4:	b2d2      	uxtb	r2, r2
 80071e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ec:	1c5a      	adds	r2, r3, #1
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	3b01      	subs	r3, #1
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007200:	e0bf      	b.n	8007382 <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 3U)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007206:	b29b      	uxth	r3, r3
 8007208:	2b03      	cmp	r3, #3
 800720a:	d129      	bne.n	8007260 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	685a      	ldr	r2, [r3, #4]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800721a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2b04      	cmp	r3, #4
 8007220:	d00a      	beq.n	8007238 <I2C_MasterReceive_BTF+0x86>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2b02      	cmp	r3, #2
 8007226:	d007      	beq.n	8007238 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007236:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	691a      	ldr	r2, [r3, #16]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007242:	b2d2      	uxtb	r2, r2
 8007244:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724a:	1c5a      	adds	r2, r3, #1
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007254:	b29b      	uxth	r3, r3
 8007256:	3b01      	subs	r3, #1
 8007258:	b29a      	uxth	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800725e:	e090      	b.n	8007382 <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 2U)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007264:	b29b      	uxth	r3, r3
 8007266:	2b02      	cmp	r3, #2
 8007268:	d178      	bne.n	800735c <I2C_MasterReceive_BTF+0x1aa>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d002      	beq.n	8007276 <I2C_MasterReceive_BTF+0xc4>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2b10      	cmp	r3, #16
 8007274:	d108      	bne.n	8007288 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007284:	601a      	str	r2, [r3, #0]
 8007286:	e019      	b.n	80072bc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2b04      	cmp	r3, #4
 800728c:	d002      	beq.n	8007294 <I2C_MasterReceive_BTF+0xe2>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2b02      	cmp	r3, #2
 8007292:	d108      	bne.n	80072a6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	e00a      	b.n	80072bc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2b10      	cmp	r3, #16
 80072aa:	d007      	beq.n	80072bc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072ba:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	691a      	ldr	r2, [r3, #16]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c6:	b2d2      	uxtb	r2, r2
 80072c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ce:	1c5a      	adds	r2, r3, #1
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072d8:	b29b      	uxth	r3, r3
 80072da:	3b01      	subs	r3, #1
 80072dc:	b29a      	uxth	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	691a      	ldr	r2, [r3, #16]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ec:	b2d2      	uxtb	r2, r2
 80072ee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f4:	1c5a      	adds	r2, r3, #1
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072fe:	b29b      	uxth	r3, r3
 8007300:	3b01      	subs	r3, #1
 8007302:	b29a      	uxth	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	685a      	ldr	r2, [r3, #4]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007316:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2220      	movs	r2, #32
 800731c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007326:	b2db      	uxtb	r3, r3
 8007328:	2b40      	cmp	r3, #64	; 0x40
 800732a:	d10b      	bne.n	8007344 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MemRxCpltCallback(hi2c);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	4798      	blx	r3
}
 8007342:	e01e      	b.n	8007382 <I2C_MasterReceive_BTF+0x1d0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2212      	movs	r2, #18
 8007350:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MasterRxCpltCallback(hi2c);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	4798      	blx	r3
}
 800735a:	e012      	b.n	8007382 <I2C_MasterReceive_BTF+0x1d0>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	691a      	ldr	r2, [r3, #16]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007366:	b2d2      	uxtb	r2, r2
 8007368:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736e:	1c5a      	adds	r2, r3, #1
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007378:	b29b      	uxth	r3, r3
 800737a:	3b01      	subs	r3, #1
 800737c:	b29a      	uxth	r2, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007382:	bf00      	nop
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800738a:	b480      	push	{r7}
 800738c:	b083      	sub	sp, #12
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007398:	b2db      	uxtb	r3, r3
 800739a:	2b40      	cmp	r3, #64	; 0x40
 800739c:	d117      	bne.n	80073ce <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d109      	bne.n	80073ba <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	461a      	mov	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80073b6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80073b8:	e067      	b.n	800748a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	f043 0301 	orr.w	r3, r3, #1
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	611a      	str	r2, [r3, #16]
}
 80073cc:	e05d      	b.n	800748a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073d6:	d133      	bne.n	8007440 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	2b21      	cmp	r3, #33	; 0x21
 80073e2:	d109      	bne.n	80073f8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	461a      	mov	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80073f4:	611a      	str	r2, [r3, #16]
 80073f6:	e008      	b.n	800740a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	f043 0301 	orr.w	r3, r3, #1
 8007402:	b2da      	uxtb	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800740e:	2b00      	cmp	r3, #0
 8007410:	d004      	beq.n	800741c <I2C_Master_SB+0x92>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007418:	2b00      	cmp	r3, #0
 800741a:	d108      	bne.n	800742e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007420:	2b00      	cmp	r3, #0
 8007422:	d032      	beq.n	800748a <I2C_Master_SB+0x100>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800742a:	2b00      	cmp	r3, #0
 800742c:	d02d      	beq.n	800748a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	685a      	ldr	r2, [r3, #4]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800743c:	605a      	str	r2, [r3, #4]
}
 800743e:	e024      	b.n	800748a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10e      	bne.n	8007466 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800744c:	b29b      	uxth	r3, r3
 800744e:	11db      	asrs	r3, r3, #7
 8007450:	b2db      	uxtb	r3, r3
 8007452:	f003 0306 	and.w	r3, r3, #6
 8007456:	b2db      	uxtb	r3, r3
 8007458:	f063 030f 	orn	r3, r3, #15
 800745c:	b2da      	uxtb	r2, r3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	611a      	str	r2, [r3, #16]
}
 8007464:	e011      	b.n	800748a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800746a:	2b01      	cmp	r3, #1
 800746c:	d10d      	bne.n	800748a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007472:	b29b      	uxth	r3, r3
 8007474:	11db      	asrs	r3, r3, #7
 8007476:	b2db      	uxtb	r3, r3
 8007478:	f003 0306 	and.w	r3, r3, #6
 800747c:	b2db      	uxtb	r3, r3
 800747e:	f063 030e 	orn	r3, r3, #14
 8007482:	b2da      	uxtb	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	611a      	str	r2, [r3, #16]
}
 800748a:	bf00      	nop
 800748c:	370c      	adds	r7, #12
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007496:	b480      	push	{r7}
 8007498:	b083      	sub	sp, #12
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a2:	b2da      	uxtb	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d004      	beq.n	80074bc <I2C_Master_ADD10+0x26>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d108      	bne.n	80074ce <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00c      	beq.n	80074de <I2C_Master_ADD10+0x48>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d007      	beq.n	80074de <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	685a      	ldr	r2, [r3, #4]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074dc:	605a      	str	r2, [r3, #4]
  }
}
 80074de:	bf00      	nop
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b091      	sub	sp, #68	; 0x44
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007500:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007506:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800750e:	b2db      	uxtb	r3, r3
 8007510:	2b22      	cmp	r3, #34	; 0x22
 8007512:	f040 8169 	bne.w	80077e8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10f      	bne.n	800753e <I2C_Master_ADDR+0x54>
 800751e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007522:	2b40      	cmp	r3, #64	; 0x40
 8007524:	d10b      	bne.n	800753e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007526:	2300      	movs	r3, #0
 8007528:	633b      	str	r3, [r7, #48]	; 0x30
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	695b      	ldr	r3, [r3, #20]
 8007530:	633b      	str	r3, [r7, #48]	; 0x30
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	633b      	str	r3, [r7, #48]	; 0x30
 800753a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753c:	e160      	b.n	8007800 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007542:	2b00      	cmp	r3, #0
 8007544:	d11d      	bne.n	8007582 <I2C_Master_ADDR+0x98>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800754e:	d118      	bne.n	8007582 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007550:	2300      	movs	r3, #0
 8007552:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	695b      	ldr	r3, [r3, #20]
 800755a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	699b      	ldr	r3, [r3, #24]
 8007562:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007564:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007574:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800757a:	1c5a      	adds	r2, r3, #1
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	651a      	str	r2, [r3, #80]	; 0x50
 8007580:	e13e      	b.n	8007800 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007586:	b29b      	uxth	r3, r3
 8007588:	2b00      	cmp	r3, #0
 800758a:	d113      	bne.n	80075b4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800758c:	2300      	movs	r3, #0
 800758e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	62bb      	str	r3, [r7, #40]	; 0x28
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	62bb      	str	r3, [r7, #40]	; 0x28
 80075a0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075b0:	601a      	str	r2, [r3, #0]
 80075b2:	e115      	b.n	80077e0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	f040 808a 	bne.w	80076d4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80075c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80075c6:	d137      	bne.n	8007638 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075d6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075e6:	d113      	bne.n	8007610 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075f6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075f8:	2300      	movs	r3, #0
 80075fa:	627b      	str	r3, [r7, #36]	; 0x24
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	627b      	str	r3, [r7, #36]	; 0x24
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	627b      	str	r3, [r7, #36]	; 0x24
 800760c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760e:	e0e7      	b.n	80077e0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007610:	2300      	movs	r3, #0
 8007612:	623b      	str	r3, [r7, #32]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	623b      	str	r3, [r7, #32]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	623b      	str	r3, [r7, #32]
 8007624:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007634:	601a      	str	r2, [r3, #0]
 8007636:	e0d3      	b.n	80077e0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763a:	2b08      	cmp	r3, #8
 800763c:	d02e      	beq.n	800769c <I2C_Master_ADDR+0x1b2>
 800763e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007640:	2b20      	cmp	r3, #32
 8007642:	d02b      	beq.n	800769c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007646:	2b12      	cmp	r3, #18
 8007648:	d102      	bne.n	8007650 <I2C_Master_ADDR+0x166>
 800764a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764c:	2b01      	cmp	r3, #1
 800764e:	d125      	bne.n	800769c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007652:	2b04      	cmp	r3, #4
 8007654:	d00e      	beq.n	8007674 <I2C_Master_ADDR+0x18a>
 8007656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007658:	2b02      	cmp	r3, #2
 800765a:	d00b      	beq.n	8007674 <I2C_Master_ADDR+0x18a>
 800765c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765e:	2b10      	cmp	r3, #16
 8007660:	d008      	beq.n	8007674 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007670:	601a      	str	r2, [r3, #0]
 8007672:	e007      	b.n	8007684 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007682:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007684:	2300      	movs	r3, #0
 8007686:	61fb      	str	r3, [r7, #28]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	61fb      	str	r3, [r7, #28]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	61fb      	str	r3, [r7, #28]
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	e0a1      	b.n	80077e0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076aa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076ac:	2300      	movs	r3, #0
 80076ae:	61bb      	str	r3, [r7, #24]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	695b      	ldr	r3, [r3, #20]
 80076b6:	61bb      	str	r3, [r7, #24]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	699b      	ldr	r3, [r3, #24]
 80076be:	61bb      	str	r3, [r7, #24]
 80076c0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076d0:	601a      	str	r2, [r3, #0]
 80076d2:	e085      	b.n	80077e0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076d8:	b29b      	uxth	r3, r3
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d14d      	bne.n	800777a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80076de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e0:	2b04      	cmp	r3, #4
 80076e2:	d016      	beq.n	8007712 <I2C_Master_ADDR+0x228>
 80076e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d013      	beq.n	8007712 <I2C_Master_ADDR+0x228>
 80076ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ec:	2b10      	cmp	r3, #16
 80076ee:	d010      	beq.n	8007712 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076fe:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800770e:	601a      	str	r2, [r3, #0]
 8007710:	e007      	b.n	8007722 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007720:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800772c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007730:	d117      	bne.n	8007762 <I2C_Master_ADDR+0x278>
 8007732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007734:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007738:	d00b      	beq.n	8007752 <I2C_Master_ADDR+0x268>
 800773a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773c:	2b01      	cmp	r3, #1
 800773e:	d008      	beq.n	8007752 <I2C_Master_ADDR+0x268>
 8007740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007742:	2b08      	cmp	r3, #8
 8007744:	d005      	beq.n	8007752 <I2C_Master_ADDR+0x268>
 8007746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007748:	2b10      	cmp	r3, #16
 800774a:	d002      	beq.n	8007752 <I2C_Master_ADDR+0x268>
 800774c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774e:	2b20      	cmp	r3, #32
 8007750:	d107      	bne.n	8007762 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	685a      	ldr	r2, [r3, #4]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007760:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007762:	2300      	movs	r3, #0
 8007764:	617b      	str	r3, [r7, #20]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	695b      	ldr	r3, [r3, #20]
 800776c:	617b      	str	r3, [r7, #20]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	699b      	ldr	r3, [r3, #24]
 8007774:	617b      	str	r3, [r7, #20]
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	e032      	b.n	80077e0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007788:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007794:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007798:	d117      	bne.n	80077ca <I2C_Master_ADDR+0x2e0>
 800779a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80077a0:	d00b      	beq.n	80077ba <I2C_Master_ADDR+0x2d0>
 80077a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d008      	beq.n	80077ba <I2C_Master_ADDR+0x2d0>
 80077a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077aa:	2b08      	cmp	r3, #8
 80077ac:	d005      	beq.n	80077ba <I2C_Master_ADDR+0x2d0>
 80077ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b0:	2b10      	cmp	r3, #16
 80077b2:	d002      	beq.n	80077ba <I2C_Master_ADDR+0x2d0>
 80077b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b6:	2b20      	cmp	r3, #32
 80077b8:	d107      	bne.n	80077ca <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80077c8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077ca:	2300      	movs	r3, #0
 80077cc:	613b      	str	r3, [r7, #16]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	695b      	ldr	r3, [r3, #20]
 80077d4:	613b      	str	r3, [r7, #16]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	613b      	str	r3, [r7, #16]
 80077de:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80077e6:	e00b      	b.n	8007800 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077e8:	2300      	movs	r3, #0
 80077ea:	60fb      	str	r3, [r7, #12]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	695b      	ldr	r3, [r3, #20]
 80077f2:	60fb      	str	r3, [r7, #12]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	699b      	ldr	r3, [r3, #24]
 80077fa:	60fb      	str	r3, [r7, #12]
 80077fc:	68fb      	ldr	r3, [r7, #12]
}
 80077fe:	e7ff      	b.n	8007800 <I2C_Master_ADDR+0x316>
 8007800:	bf00      	nop
 8007802:	3744      	adds	r7, #68	; 0x44
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800781a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007820:	b29b      	uxth	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d02c      	beq.n	8007880 <I2C_SlaveTransmit_TXE+0x74>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782a:	781a      	ldrb	r2, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007836:	1c5a      	adds	r2, r3, #1
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007840:	b29b      	uxth	r3, r3
 8007842:	3b01      	subs	r3, #1
 8007844:	b29a      	uxth	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800784e:	b29b      	uxth	r3, r3
 8007850:	2b00      	cmp	r3, #0
 8007852:	d115      	bne.n	8007880 <I2C_SlaveTransmit_TXE+0x74>
 8007854:	7bfb      	ldrb	r3, [r7, #15]
 8007856:	2b29      	cmp	r3, #41	; 0x29
 8007858:	d112      	bne.n	8007880 <I2C_SlaveTransmit_TXE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	685a      	ldr	r2, [r3, #4]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007868:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2221      	movs	r2, #33	; 0x21
 800786e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2228      	movs	r2, #40	; 0x28
 8007874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	4798      	blx	r3
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007880:	bf00      	nop
 8007882:	3710      	adds	r7, #16
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007894:	b29b      	uxth	r3, r3
 8007896:	2b00      	cmp	r3, #0
 8007898:	d011      	beq.n	80078be <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789e:	781a      	ldrb	r2, [r3, #0]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078aa:	1c5a      	adds	r2, r3, #1
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	3b01      	subs	r3, #1
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80078be:	bf00      	nop
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr

080078ca <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b084      	sub	sp, #16
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078d8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078de:	b29b      	uxth	r3, r3
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d02d      	beq.n	8007940 <I2C_SlaveReceive_RXNE+0x76>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	691a      	ldr	r2, [r3, #16]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ee:	b2d2      	uxtb	r2, r2
 80078f0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f6:	1c5a      	adds	r2, r3, #1
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007900:	b29b      	uxth	r3, r3
 8007902:	3b01      	subs	r3, #1
 8007904:	b29a      	uxth	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800790e:	b29b      	uxth	r3, r3
 8007910:	2b00      	cmp	r3, #0
 8007912:	d115      	bne.n	8007940 <I2C_SlaveReceive_RXNE+0x76>
 8007914:	7bfb      	ldrb	r3, [r7, #15]
 8007916:	2b2a      	cmp	r3, #42	; 0x2a
 8007918:	d112      	bne.n	8007940 <I2C_SlaveReceive_RXNE+0x76>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	685a      	ldr	r2, [r3, #4]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007928:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2222      	movs	r2, #34	; 0x22
 800792e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2228      	movs	r2, #40	; 0x28
 8007934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	4798      	blx	r3
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007940:	bf00      	nop
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007954:	b29b      	uxth	r3, r3
 8007956:	2b00      	cmp	r3, #0
 8007958:	d012      	beq.n	8007980 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	691a      	ldr	r2, [r3, #16]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007964:	b2d2      	uxtb	r2, r2
 8007966:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796c:	1c5a      	adds	r2, r3, #1
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007976:	b29b      	uxth	r3, r3
 8007978:	3b01      	subs	r3, #1
 800797a:	b29a      	uxth	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007980:	bf00      	nop
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007996:	2300      	movs	r3, #0
 8007998:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80079a6:	2b28      	cmp	r3, #40	; 0x28
 80079a8:	d127      	bne.n	80079fa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	685a      	ldr	r2, [r3, #4]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079b8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	089b      	lsrs	r3, r3, #2
 80079be:	f003 0301 	and.w	r3, r3, #1
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d101      	bne.n	80079ca <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80079c6:	2301      	movs	r3, #1
 80079c8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	09db      	lsrs	r3, r3, #7
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d103      	bne.n	80079de <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	81bb      	strh	r3, [r7, #12]
 80079dc:	e002      	b.n	80079e4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	699b      	ldr	r3, [r3, #24]
 80079e2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079f0:	89ba      	ldrh	r2, [r7, #12]
 80079f2:	7bf9      	ldrb	r1, [r7, #15]
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	4798      	blx	r3
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80079f8:	e00e      	b.n	8007a18 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079fa:	2300      	movs	r3, #0
 80079fc:	60bb      	str	r3, [r7, #8]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	695b      	ldr	r3, [r3, #20]
 8007a04:	60bb      	str	r3, [r7, #8]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	699b      	ldr	r3, [r3, #24]
 8007a0c:	60bb      	str	r3, [r7, #8]
 8007a0e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007a18:	bf00      	nop
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a2e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	685a      	ldr	r2, [r3, #4]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007a3e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007a40:	2300      	movs	r3, #0
 8007a42:	60bb      	str	r3, [r7, #8]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	60bb      	str	r3, [r7, #8]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f042 0201 	orr.w	r2, r2, #1
 8007a5a:	601a      	str	r2, [r3, #0]
 8007a5c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a6c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a7c:	d172      	bne.n	8007b64 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007a7e:	7bfb      	ldrb	r3, [r7, #15]
 8007a80:	2b22      	cmp	r3, #34	; 0x22
 8007a82:	d002      	beq.n	8007a8a <I2C_Slave_STOPF+0x6a>
 8007a84:	7bfb      	ldrb	r3, [r7, #15]
 8007a86:	2b2a      	cmp	r3, #42	; 0x2a
 8007a88:	d135      	bne.n	8007af6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d005      	beq.n	8007aae <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa6:	f043 0204 	orr.w	r2, r3, #4
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	685a      	ldr	r2, [r3, #4]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007abc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7fd feca 	bl	800585c <HAL_DMA_GetState>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d049      	beq.n	8007b62 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad2:	4a6b      	ldr	r2, [pc, #428]	; (8007c80 <I2C_Slave_STOPF+0x260>)
 8007ad4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fd fd12 	bl	8005504 <HAL_DMA_Abort_IT>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d03d      	beq.n	8007b62 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007af0:	4610      	mov	r0, r2
 8007af2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007af4:	e035      	b.n	8007b62 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d005      	beq.n	8007b1a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b12:	f043 0204 	orr.w	r2, r3, #4
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	685a      	ldr	r2, [r3, #4]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b28:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7fd fe94 	bl	800585c <HAL_DMA_GetState>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d014      	beq.n	8007b64 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b3e:	4a50      	ldr	r2, [pc, #320]	; (8007c80 <I2C_Slave_STOPF+0x260>)
 8007b40:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7fd fcdc 	bl	8005504 <HAL_DMA_Abort_IT>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d008      	beq.n	8007b64 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007b5c:	4610      	mov	r0, r2
 8007b5e:	4798      	blx	r3
 8007b60:	e000      	b.n	8007b64 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007b62:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d03e      	beq.n	8007bec <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	695b      	ldr	r3, [r3, #20]
 8007b74:	f003 0304 	and.w	r3, r3, #4
 8007b78:	2b04      	cmp	r3, #4
 8007b7a:	d112      	bne.n	8007ba2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	691a      	ldr	r2, [r3, #16]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b86:	b2d2      	uxtb	r2, r2
 8007b88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8e:	1c5a      	adds	r2, r3, #1
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	b29a      	uxth	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	695b      	ldr	r3, [r3, #20]
 8007ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bac:	2b40      	cmp	r3, #64	; 0x40
 8007bae:	d112      	bne.n	8007bd6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	691a      	ldr	r2, [r3, #16]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bba:	b2d2      	uxtb	r2, r2
 8007bbc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc2:	1c5a      	adds	r2, r3, #1
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d005      	beq.n	8007bec <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be4:	f043 0204 	orr.w	r2, r3, #4
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d003      	beq.n	8007bfc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f8b9 	bl	8007d6c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007bfa:	e03c      	b.n	8007c76 <I2C_Slave_STOPF+0x256>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007bfc:	7bfb      	ldrb	r3, [r7, #15]
 8007bfe:	2b2a      	cmp	r3, #42	; 0x2a
 8007c00:	d10a      	bne.n	8007c18 <I2C_Slave_STOPF+0x1f8>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2228      	movs	r2, #40	; 0x28
 8007c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->SlaveRxCpltCallback(hi2c);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	4798      	blx	r3
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	2b28      	cmp	r3, #40	; 0x28
 8007c22:	d112      	bne.n	8007c4a <I2C_Slave_STOPF+0x22a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a17      	ldr	r2, [pc, #92]	; (8007c84 <I2C_Slave_STOPF+0x264>)
 8007c28:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2220      	movs	r2, #32
 8007c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ListenCpltCallback(hi2c);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	4798      	blx	r3
}
 8007c48:	e015      	b.n	8007c76 <I2C_Slave_STOPF+0x256>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4e:	2b22      	cmp	r3, #34	; 0x22
 8007c50:	d002      	beq.n	8007c58 <I2C_Slave_STOPF+0x238>
 8007c52:	7bfb      	ldrb	r3, [r7, #15]
 8007c54:	2b22      	cmp	r3, #34	; 0x22
 8007c56:	d10e      	bne.n	8007c76 <I2C_Slave_STOPF+0x256>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2220      	movs	r2, #32
 8007c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->SlaveRxCpltCallback(hi2c);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	4798      	blx	r3
}
 8007c76:	bf00      	nop
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	08007fd9 	.word	0x08007fd9
 8007c84:	ffff0000 	.word	0xffff0000

08007c88 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c96:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c9c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	2b08      	cmp	r3, #8
 8007ca2:	d002      	beq.n	8007caa <I2C_Slave_AF+0x22>
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	2b20      	cmp	r3, #32
 8007ca8:	d12a      	bne.n	8007d00 <I2C_Slave_AF+0x78>
 8007caa:	7bfb      	ldrb	r3, [r7, #15]
 8007cac:	2b28      	cmp	r3, #40	; 0x28
 8007cae:	d127      	bne.n	8007d00 <I2C_Slave_AF+0x78>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a2d      	ldr	r2, [pc, #180]	; (8007d68 <I2C_Slave_AF+0xe0>)
 8007cb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	685a      	ldr	r2, [r3, #4]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007cc4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007cce:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cde:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2220      	movs	r2, #32
 8007cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	4798      	blx	r3
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007cfe:	e02f      	b.n	8007d60 <I2C_Slave_AF+0xd8>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007d00:	7bfb      	ldrb	r3, [r7, #15]
 8007d02:	2b21      	cmp	r3, #33	; 0x21
 8007d04:	d127      	bne.n	8007d56 <I2C_Slave_AF+0xce>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a17      	ldr	r2, [pc, #92]	; (8007d68 <I2C_Slave_AF+0xe0>)
 8007d0a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2221      	movs	r2, #33	; 0x21
 8007d10:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2220      	movs	r2, #32
 8007d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	685a      	ldr	r2, [r3, #4]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007d30:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007d3a:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d4a:	601a      	str	r2, [r3, #0]
    hi2c->SlaveTxCpltCallback(hi2c);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	4798      	blx	r3
}
 8007d54:	e004      	b.n	8007d60 <I2C_Slave_AF+0xd8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007d5e:	615a      	str	r2, [r3, #20]
}
 8007d60:	bf00      	nop
 8007d62:	3710      	adds	r7, #16
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	ffff0000 	.word	0xffff0000

08007d6c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d7a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d82:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007d84:	7bbb      	ldrb	r3, [r7, #14]
 8007d86:	2b10      	cmp	r3, #16
 8007d88:	d002      	beq.n	8007d90 <I2C_ITError+0x24>
 8007d8a:	7bbb      	ldrb	r3, [r7, #14]
 8007d8c:	2b40      	cmp	r3, #64	; 0x40
 8007d8e:	d10a      	bne.n	8007da6 <I2C_ITError+0x3a>
 8007d90:	7bfb      	ldrb	r3, [r7, #15]
 8007d92:	2b22      	cmp	r3, #34	; 0x22
 8007d94:	d107      	bne.n	8007da6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007da4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007da6:	7bfb      	ldrb	r3, [r7, #15]
 8007da8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007dac:	2b28      	cmp	r3, #40	; 0x28
 8007dae:	d107      	bne.n	8007dc0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2228      	movs	r2, #40	; 0x28
 8007dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007dbe:	e015      	b.n	8007dec <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dce:	d00a      	beq.n	8007de6 <I2C_ITError+0x7a>
 8007dd0:	7bfb      	ldrb	r3, [r7, #15]
 8007dd2:	2b60      	cmp	r3, #96	; 0x60
 8007dd4:	d007      	beq.n	8007de6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2220      	movs	r2, #32
 8007dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007df6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dfa:	d162      	bne.n	8007ec2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	685a      	ldr	r2, [r3, #4]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e0a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d020      	beq.n	8007e5c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e1e:	4a6c      	ldr	r2, [pc, #432]	; (8007fd0 <I2C_ITError+0x264>)
 8007e20:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7fd fb6c 	bl	8005504 <HAL_DMA_Abort_IT>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f000 808b 	beq.w	8007f4a <I2C_ITError+0x1de>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f022 0201 	bic.w	r2, r2, #1
 8007e42:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2220      	movs	r2, #32
 8007e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007e56:	4610      	mov	r0, r2
 8007e58:	4798      	blx	r3
 8007e5a:	e076      	b.n	8007f4a <I2C_ITError+0x1de>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e60:	4a5b      	ldr	r2, [pc, #364]	; (8007fd0 <I2C_ITError+0x264>)
 8007e62:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7fd fb4b 	bl	8005504 <HAL_DMA_Abort_IT>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d06a      	beq.n	8007f4a <I2C_ITError+0x1de>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	695b      	ldr	r3, [r3, #20]
 8007e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e7e:	2b40      	cmp	r3, #64	; 0x40
 8007e80:	d10b      	bne.n	8007e9a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	691a      	ldr	r2, [r3, #16]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8c:	b2d2      	uxtb	r2, r2
 8007e8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e94:	1c5a      	adds	r2, r3, #1
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f022 0201 	bic.w	r2, r2, #1
 8007ea8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2220      	movs	r2, #32
 8007eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007ebc:	4610      	mov	r0, r2
 8007ebe:	4798      	blx	r3
 8007ec0:	e043      	b.n	8007f4a <I2C_ITError+0x1de>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	2b60      	cmp	r3, #96	; 0x60
 8007ecc:	d126      	bne.n	8007f1c <I2C_ITError+0x1b0>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2220      	movs	r2, #32
 8007ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	695b      	ldr	r3, [r3, #20]
 8007ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee6:	2b40      	cmp	r3, #64	; 0x40
 8007ee8:	d10b      	bne.n	8007f02 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	691a      	ldr	r2, [r3, #16]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef4:	b2d2      	uxtb	r2, r2
 8007ef6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efc:	1c5a      	adds	r2, r3, #1
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f022 0201 	bic.w	r2, r2, #1
 8007f10:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	4798      	blx	r3
 8007f1a:	e016      	b.n	8007f4a <I2C_ITError+0x1de>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	695b      	ldr	r3, [r3, #20]
 8007f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f26:	2b40      	cmp	r3, #64	; 0x40
 8007f28:	d10b      	bne.n	8007f42 <I2C_ITError+0x1d6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	691a      	ldr	r2, [r3, #16]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f34:	b2d2      	uxtb	r2, r2
 8007f36:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3c:	1c5a      	adds	r2, r3, #1
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	4798      	blx	r3
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	f003 0301 	and.w	r3, r3, #1
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d10e      	bne.n	8007f78 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d109      	bne.n	8007f78 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d104      	bne.n	8007f78 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d007      	beq.n	8007f88 <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	685a      	ldr	r2, [r3, #4]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007f86:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f8e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f94:	f003 0304 	and.w	r3, r3, #4
 8007f98:	2b04      	cmp	r3, #4
 8007f9a:	d114      	bne.n	8007fc6 <I2C_ITError+0x25a>
 8007f9c:	7bfb      	ldrb	r3, [r7, #15]
 8007f9e:	2b28      	cmp	r3, #40	; 0x28
 8007fa0:	d111      	bne.n	8007fc6 <I2C_ITError+0x25a>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a0b      	ldr	r2, [pc, #44]	; (8007fd4 <I2C_ITError+0x268>)
 8007fa6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2220      	movs	r2, #32
 8007fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	4798      	blx	r3
#else
    HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007fc6:	bf00      	nop
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	08007fd9 	.word	0x08007fd9
 8007fd4:	ffff0000 	.word	0xffff0000

08007fd8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b086      	sub	sp, #24
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ff0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007ff2:	4b4c      	ldr	r3, [pc, #304]	; (8008124 <I2C_DMAAbort+0x14c>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	08db      	lsrs	r3, r3, #3
 8007ff8:	4a4b      	ldr	r2, [pc, #300]	; (8008128 <I2C_DMAAbort+0x150>)
 8007ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8007ffe:	0a1a      	lsrs	r2, r3, #8
 8008000:	4613      	mov	r3, r2
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	4413      	add	r3, r2
 8008006:	00da      	lsls	r2, r3, #3
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d106      	bne.n	8008020 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008016:	f043 0220 	orr.w	r2, r3, #32
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800801e:	e00a      	b.n	8008036 <I2C_DMAAbort+0x5e>
    }
    count--;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	3b01      	subs	r3, #1
 8008024:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008034:	d0ea      	beq.n	800800c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800803a:	2b00      	cmp	r3, #0
 800803c:	d003      	beq.n	8008046 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008042:	2200      	movs	r2, #0
 8008044:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804a:	2b00      	cmp	r3, #0
 800804c:	d003      	beq.n	8008056 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008052:	2200      	movs	r2, #0
 8008054:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008064:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	2200      	movs	r2, #0
 800806a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008070:	2b00      	cmp	r3, #0
 8008072:	d003      	beq.n	800807c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008078:	2200      	movs	r2, #0
 800807a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008080:	2b00      	cmp	r3, #0
 8008082:	d003      	beq.n	800808c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008088:	2200      	movs	r2, #0
 800808a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f022 0201 	bic.w	r2, r2, #1
 800809a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	2b60      	cmp	r3, #96	; 0x60
 80080a6:	d10f      	bne.n	80080c8 <I2C_DMAAbort+0xf0>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	2220      	movs	r2, #32
 80080ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	2200      	movs	r2, #0
 80080bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080c2:	6978      	ldr	r0, [r7, #20]
 80080c4:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80080c6:	e028      	b.n	800811a <I2C_DMAAbort+0x142>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80080c8:	7cfb      	ldrb	r3, [r7, #19]
 80080ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80080ce:	2b28      	cmp	r3, #40	; 0x28
 80080d0:	d117      	bne.n	8008102 <I2C_DMAAbort+0x12a>
      __HAL_I2C_ENABLE(hi2c);
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f042 0201 	orr.w	r2, r2, #1
 80080e0:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80080f0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	2200      	movs	r2, #0
 80080f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	2228      	movs	r2, #40	; 0x28
 80080fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008100:	e007      	b.n	8008112 <I2C_DMAAbort+0x13a>
      hi2c->State = HAL_I2C_STATE_READY;
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	2220      	movs	r2, #32
 8008106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	2200      	movs	r2, #0
 800810e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCallback(hi2c);
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008116:	6978      	ldr	r0, [r7, #20]
 8008118:	4798      	blx	r3
}
 800811a:	bf00      	nop
 800811c:	3718      	adds	r7, #24
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	20000000 	.word	0x20000000
 8008128:	14f8b589 	.word	0x14f8b589

0800812c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800812c:	b480      	push	{r7}
 800812e:	b085      	sub	sp, #20
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008134:	2300      	movs	r3, #0
 8008136:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008138:	4b13      	ldr	r3, [pc, #76]	; (8008188 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	08db      	lsrs	r3, r3, #3
 800813e:	4a13      	ldr	r2, [pc, #76]	; (800818c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008140:	fba2 2303 	umull	r2, r3, r2, r3
 8008144:	0a1a      	lsrs	r2, r3, #8
 8008146:	4613      	mov	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	4413      	add	r3, r2
 800814c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	3b01      	subs	r3, #1
 8008152:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d107      	bne.n	800816a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815e:	f043 0220 	orr.w	r2, r3, #32
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	e008      	b.n	800817c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008178:	d0e9      	beq.n	800814e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3714      	adds	r7, #20
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr
 8008188:	20000000 	.word	0x20000000
 800818c:	14f8b589 	.word	0x14f8b589

08008190 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008190:	b480      	push	{r7}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80081a0:	d103      	bne.n	80081aa <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2201      	movs	r2, #1
 80081a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80081a8:	e007      	b.n	80081ba <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ae:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80081b2:	d102      	bne.n	80081ba <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2208      	movs	r2, #8
 80081b8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80081ba:	bf00      	nop
 80081bc:	370c      	adds	r7, #12
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
	...

080081c8 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80081cc:	4b06      	ldr	r3, [pc, #24]	; (80081e8 <HAL_PWR_PVD_IRQHandler+0x20>)
 80081ce:	695b      	ldr	r3, [r3, #20]
 80081d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d005      	beq.n	80081e4 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80081d8:	f000 f808 	bl	80081ec <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80081dc:	4b02      	ldr	r3, [pc, #8]	; (80081e8 <HAL_PWR_PVD_IRQHandler+0x20>)
 80081de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80081e2:	615a      	str	r2, [r3, #20]
  }
}
 80081e4:	bf00      	nop
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	40013c00 	.word	0x40013c00

080081ec <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80081ec:	b480      	push	{r7}
 80081ee:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80081f0:	bf00      	nop
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
	...

080081fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b086      	sub	sp, #24
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d101      	bne.n	800820e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e314      	b.n	8008838 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2b0f      	cmp	r3, #15
 8008214:	d903      	bls.n	800821e <HAL_RCC_OscConfig+0x22>
 8008216:	21e6      	movs	r1, #230	; 0xe6
 8008218:	4897      	ldr	r0, [pc, #604]	; (8008478 <HAL_RCC_OscConfig+0x27c>)
 800821a:	f7fa ffae 	bl	800317a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f003 0301 	and.w	r3, r3, #1
 8008226:	2b00      	cmp	r3, #0
 8008228:	f000 8088 	beq.w	800833c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d00d      	beq.n	8008250 <HAL_RCC_OscConfig+0x54>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800823c:	d008      	beq.n	8008250 <HAL_RCC_OscConfig+0x54>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008246:	d003      	beq.n	8008250 <HAL_RCC_OscConfig+0x54>
 8008248:	21eb      	movs	r1, #235	; 0xeb
 800824a:	488b      	ldr	r0, [pc, #556]	; (8008478 <HAL_RCC_OscConfig+0x27c>)
 800824c:	f7fa ff95 	bl	800317a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008250:	4b8a      	ldr	r3, [pc, #552]	; (800847c <HAL_RCC_OscConfig+0x280>)
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	f003 030c 	and.w	r3, r3, #12
 8008258:	2b04      	cmp	r3, #4
 800825a:	d00c      	beq.n	8008276 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800825c:	4b87      	ldr	r3, [pc, #540]	; (800847c <HAL_RCC_OscConfig+0x280>)
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008264:	2b08      	cmp	r3, #8
 8008266:	d112      	bne.n	800828e <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008268:	4b84      	ldr	r3, [pc, #528]	; (800847c <HAL_RCC_OscConfig+0x280>)
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008270:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008274:	d10b      	bne.n	800828e <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008276:	4b81      	ldr	r3, [pc, #516]	; (800847c <HAL_RCC_OscConfig+0x280>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800827e:	2b00      	cmp	r3, #0
 8008280:	d05b      	beq.n	800833a <HAL_RCC_OscConfig+0x13e>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d157      	bne.n	800833a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e2d4      	b.n	8008838 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008296:	d106      	bne.n	80082a6 <HAL_RCC_OscConfig+0xaa>
 8008298:	4b78      	ldr	r3, [pc, #480]	; (800847c <HAL_RCC_OscConfig+0x280>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a77      	ldr	r2, [pc, #476]	; (800847c <HAL_RCC_OscConfig+0x280>)
 800829e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082a2:	6013      	str	r3, [r2, #0]
 80082a4:	e01d      	b.n	80082e2 <HAL_RCC_OscConfig+0xe6>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80082ae:	d10c      	bne.n	80082ca <HAL_RCC_OscConfig+0xce>
 80082b0:	4b72      	ldr	r3, [pc, #456]	; (800847c <HAL_RCC_OscConfig+0x280>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a71      	ldr	r2, [pc, #452]	; (800847c <HAL_RCC_OscConfig+0x280>)
 80082b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80082ba:	6013      	str	r3, [r2, #0]
 80082bc:	4b6f      	ldr	r3, [pc, #444]	; (800847c <HAL_RCC_OscConfig+0x280>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a6e      	ldr	r2, [pc, #440]	; (800847c <HAL_RCC_OscConfig+0x280>)
 80082c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082c6:	6013      	str	r3, [r2, #0]
 80082c8:	e00b      	b.n	80082e2 <HAL_RCC_OscConfig+0xe6>
 80082ca:	4b6c      	ldr	r3, [pc, #432]	; (800847c <HAL_RCC_OscConfig+0x280>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a6b      	ldr	r2, [pc, #428]	; (800847c <HAL_RCC_OscConfig+0x280>)
 80082d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082d4:	6013      	str	r3, [r2, #0]
 80082d6:	4b69      	ldr	r3, [pc, #420]	; (800847c <HAL_RCC_OscConfig+0x280>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a68      	ldr	r2, [pc, #416]	; (800847c <HAL_RCC_OscConfig+0x280>)
 80082dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082e0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d013      	beq.n	8008312 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082ea:	f7fb fdbf 	bl	8003e6c <HAL_GetTick>
 80082ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082f0:	e008      	b.n	8008304 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80082f2:	f7fb fdbb 	bl	8003e6c <HAL_GetTick>
 80082f6:	4602      	mov	r2, r0
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	1ad3      	subs	r3, r2, r3
 80082fc:	2b64      	cmp	r3, #100	; 0x64
 80082fe:	d901      	bls.n	8008304 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8008300:	2303      	movs	r3, #3
 8008302:	e299      	b.n	8008838 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008304:	4b5d      	ldr	r3, [pc, #372]	; (800847c <HAL_RCC_OscConfig+0x280>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800830c:	2b00      	cmp	r3, #0
 800830e:	d0f0      	beq.n	80082f2 <HAL_RCC_OscConfig+0xf6>
 8008310:	e014      	b.n	800833c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008312:	f7fb fdab 	bl	8003e6c <HAL_GetTick>
 8008316:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008318:	e008      	b.n	800832c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800831a:	f7fb fda7 	bl	8003e6c <HAL_GetTick>
 800831e:	4602      	mov	r2, r0
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	1ad3      	subs	r3, r2, r3
 8008324:	2b64      	cmp	r3, #100	; 0x64
 8008326:	d901      	bls.n	800832c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8008328:	2303      	movs	r3, #3
 800832a:	e285      	b.n	8008838 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800832c:	4b53      	ldr	r3, [pc, #332]	; (800847c <HAL_RCC_OscConfig+0x280>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008334:	2b00      	cmp	r3, #0
 8008336:	d1f0      	bne.n	800831a <HAL_RCC_OscConfig+0x11e>
 8008338:	e000      	b.n	800833c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800833a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f003 0302 	and.w	r3, r3, #2
 8008344:	2b00      	cmp	r3, #0
 8008346:	d079      	beq.n	800843c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d008      	beq.n	8008362 <HAL_RCC_OscConfig+0x166>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	2b01      	cmp	r3, #1
 8008356:	d004      	beq.n	8008362 <HAL_RCC_OscConfig+0x166>
 8008358:	f240 111d 	movw	r1, #285	; 0x11d
 800835c:	4846      	ldr	r0, [pc, #280]	; (8008478 <HAL_RCC_OscConfig+0x27c>)
 800835e:	f7fa ff0c 	bl	800317a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	2b1f      	cmp	r3, #31
 8008368:	d904      	bls.n	8008374 <HAL_RCC_OscConfig+0x178>
 800836a:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800836e:	4842      	ldr	r0, [pc, #264]	; (8008478 <HAL_RCC_OscConfig+0x27c>)
 8008370:	f7fa ff03 	bl	800317a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008374:	4b41      	ldr	r3, [pc, #260]	; (800847c <HAL_RCC_OscConfig+0x280>)
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	f003 030c 	and.w	r3, r3, #12
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00b      	beq.n	8008398 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008380:	4b3e      	ldr	r3, [pc, #248]	; (800847c <HAL_RCC_OscConfig+0x280>)
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008388:	2b08      	cmp	r3, #8
 800838a:	d11c      	bne.n	80083c6 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800838c:	4b3b      	ldr	r3, [pc, #236]	; (800847c <HAL_RCC_OscConfig+0x280>)
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008394:	2b00      	cmp	r3, #0
 8008396:	d116      	bne.n	80083c6 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008398:	4b38      	ldr	r3, [pc, #224]	; (800847c <HAL_RCC_OscConfig+0x280>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f003 0302 	and.w	r3, r3, #2
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d005      	beq.n	80083b0 <HAL_RCC_OscConfig+0x1b4>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d001      	beq.n	80083b0 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	e243      	b.n	8008838 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083b0:	4b32      	ldr	r3, [pc, #200]	; (800847c <HAL_RCC_OscConfig+0x280>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	00db      	lsls	r3, r3, #3
 80083be:	492f      	ldr	r1, [pc, #188]	; (800847c <HAL_RCC_OscConfig+0x280>)
 80083c0:	4313      	orrs	r3, r2
 80083c2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80083c4:	e03a      	b.n	800843c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d020      	beq.n	8008410 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80083ce:	4b2c      	ldr	r3, [pc, #176]	; (8008480 <HAL_RCC_OscConfig+0x284>)
 80083d0:	2201      	movs	r2, #1
 80083d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083d4:	f7fb fd4a 	bl	8003e6c <HAL_GetTick>
 80083d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083da:	e008      	b.n	80083ee <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80083dc:	f7fb fd46 	bl	8003e6c <HAL_GetTick>
 80083e0:	4602      	mov	r2, r0
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	2b02      	cmp	r3, #2
 80083e8:	d901      	bls.n	80083ee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80083ea:	2303      	movs	r3, #3
 80083ec:	e224      	b.n	8008838 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083ee:	4b23      	ldr	r3, [pc, #140]	; (800847c <HAL_RCC_OscConfig+0x280>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f003 0302 	and.w	r3, r3, #2
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d0f0      	beq.n	80083dc <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083fa:	4b20      	ldr	r3, [pc, #128]	; (800847c <HAL_RCC_OscConfig+0x280>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	00db      	lsls	r3, r3, #3
 8008408:	491c      	ldr	r1, [pc, #112]	; (800847c <HAL_RCC_OscConfig+0x280>)
 800840a:	4313      	orrs	r3, r2
 800840c:	600b      	str	r3, [r1, #0]
 800840e:	e015      	b.n	800843c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008410:	4b1b      	ldr	r3, [pc, #108]	; (8008480 <HAL_RCC_OscConfig+0x284>)
 8008412:	2200      	movs	r2, #0
 8008414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008416:	f7fb fd29 	bl	8003e6c <HAL_GetTick>
 800841a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800841c:	e008      	b.n	8008430 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800841e:	f7fb fd25 	bl	8003e6c <HAL_GetTick>
 8008422:	4602      	mov	r2, r0
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	1ad3      	subs	r3, r2, r3
 8008428:	2b02      	cmp	r3, #2
 800842a:	d901      	bls.n	8008430 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 800842c:	2303      	movs	r3, #3
 800842e:	e203      	b.n	8008838 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008430:	4b12      	ldr	r3, [pc, #72]	; (800847c <HAL_RCC_OscConfig+0x280>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f003 0302 	and.w	r3, r3, #2
 8008438:	2b00      	cmp	r3, #0
 800843a:	d1f0      	bne.n	800841e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 0308 	and.w	r3, r3, #8
 8008444:	2b00      	cmp	r3, #0
 8008446:	d045      	beq.n	80084d4 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	695b      	ldr	r3, [r3, #20]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d008      	beq.n	8008462 <HAL_RCC_OscConfig+0x266>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	695b      	ldr	r3, [r3, #20]
 8008454:	2b01      	cmp	r3, #1
 8008456:	d004      	beq.n	8008462 <HAL_RCC_OscConfig+0x266>
 8008458:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800845c:	4806      	ldr	r0, [pc, #24]	; (8008478 <HAL_RCC_OscConfig+0x27c>)
 800845e:	f7fa fe8c 	bl	800317a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	695b      	ldr	r3, [r3, #20]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d01e      	beq.n	80084a8 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800846a:	4b06      	ldr	r3, [pc, #24]	; (8008484 <HAL_RCC_OscConfig+0x288>)
 800846c:	2201      	movs	r2, #1
 800846e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008470:	f7fb fcfc 	bl	8003e6c <HAL_GetTick>
 8008474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008476:	e010      	b.n	800849a <HAL_RCC_OscConfig+0x29e>
 8008478:	0800f100 	.word	0x0800f100
 800847c:	40023800 	.word	0x40023800
 8008480:	42470000 	.word	0x42470000
 8008484:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008488:	f7fb fcf0 	bl	8003e6c <HAL_GetTick>
 800848c:	4602      	mov	r2, r0
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	1ad3      	subs	r3, r2, r3
 8008492:	2b02      	cmp	r3, #2
 8008494:	d901      	bls.n	800849a <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8008496:	2303      	movs	r3, #3
 8008498:	e1ce      	b.n	8008838 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800849a:	4b5e      	ldr	r3, [pc, #376]	; (8008614 <HAL_RCC_OscConfig+0x418>)
 800849c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800849e:	f003 0302 	and.w	r3, r3, #2
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d0f0      	beq.n	8008488 <HAL_RCC_OscConfig+0x28c>
 80084a6:	e015      	b.n	80084d4 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084a8:	4b5b      	ldr	r3, [pc, #364]	; (8008618 <HAL_RCC_OscConfig+0x41c>)
 80084aa:	2200      	movs	r2, #0
 80084ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80084ae:	f7fb fcdd 	bl	8003e6c <HAL_GetTick>
 80084b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80084b4:	e008      	b.n	80084c8 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80084b6:	f7fb fcd9 	bl	8003e6c <HAL_GetTick>
 80084ba:	4602      	mov	r2, r0
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	1ad3      	subs	r3, r2, r3
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	d901      	bls.n	80084c8 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 80084c4:	2303      	movs	r3, #3
 80084c6:	e1b7      	b.n	8008838 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80084c8:	4b52      	ldr	r3, [pc, #328]	; (8008614 <HAL_RCC_OscConfig+0x418>)
 80084ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084cc:	f003 0302 	and.w	r3, r3, #2
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d1f0      	bne.n	80084b6 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f003 0304 	and.w	r3, r3, #4
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f000 80b0 	beq.w	8008642 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 80084e2:	2300      	movs	r3, #0
 80084e4:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00c      	beq.n	8008508 <HAL_RCC_OscConfig+0x30c>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d008      	beq.n	8008508 <HAL_RCC_OscConfig+0x30c>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	2b05      	cmp	r3, #5
 80084fc:	d004      	beq.n	8008508 <HAL_RCC_OscConfig+0x30c>
 80084fe:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8008502:	4846      	ldr	r0, [pc, #280]	; (800861c <HAL_RCC_OscConfig+0x420>)
 8008504:	f7fa fe39 	bl	800317a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008508:	4b42      	ldr	r3, [pc, #264]	; (8008614 <HAL_RCC_OscConfig+0x418>)
 800850a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d10f      	bne.n	8008534 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008514:	2300      	movs	r3, #0
 8008516:	60bb      	str	r3, [r7, #8]
 8008518:	4b3e      	ldr	r3, [pc, #248]	; (8008614 <HAL_RCC_OscConfig+0x418>)
 800851a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851c:	4a3d      	ldr	r2, [pc, #244]	; (8008614 <HAL_RCC_OscConfig+0x418>)
 800851e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008522:	6413      	str	r3, [r2, #64]	; 0x40
 8008524:	4b3b      	ldr	r3, [pc, #236]	; (8008614 <HAL_RCC_OscConfig+0x418>)
 8008526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800852c:	60bb      	str	r3, [r7, #8]
 800852e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008530:	2301      	movs	r3, #1
 8008532:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008534:	4b3a      	ldr	r3, [pc, #232]	; (8008620 <HAL_RCC_OscConfig+0x424>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800853c:	2b00      	cmp	r3, #0
 800853e:	d118      	bne.n	8008572 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008540:	4b37      	ldr	r3, [pc, #220]	; (8008620 <HAL_RCC_OscConfig+0x424>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a36      	ldr	r2, [pc, #216]	; (8008620 <HAL_RCC_OscConfig+0x424>)
 8008546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800854a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800854c:	f7fb fc8e 	bl	8003e6c <HAL_GetTick>
 8008550:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008552:	e008      	b.n	8008566 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008554:	f7fb fc8a 	bl	8003e6c <HAL_GetTick>
 8008558:	4602      	mov	r2, r0
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	1ad3      	subs	r3, r2, r3
 800855e:	2b02      	cmp	r3, #2
 8008560:	d901      	bls.n	8008566 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8008562:	2303      	movs	r3, #3
 8008564:	e168      	b.n	8008838 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008566:	4b2e      	ldr	r3, [pc, #184]	; (8008620 <HAL_RCC_OscConfig+0x424>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800856e:	2b00      	cmp	r3, #0
 8008570:	d0f0      	beq.n	8008554 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	2b01      	cmp	r3, #1
 8008578:	d106      	bne.n	8008588 <HAL_RCC_OscConfig+0x38c>
 800857a:	4b26      	ldr	r3, [pc, #152]	; (8008614 <HAL_RCC_OscConfig+0x418>)
 800857c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800857e:	4a25      	ldr	r2, [pc, #148]	; (8008614 <HAL_RCC_OscConfig+0x418>)
 8008580:	f043 0301 	orr.w	r3, r3, #1
 8008584:	6713      	str	r3, [r2, #112]	; 0x70
 8008586:	e01c      	b.n	80085c2 <HAL_RCC_OscConfig+0x3c6>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	2b05      	cmp	r3, #5
 800858e:	d10c      	bne.n	80085aa <HAL_RCC_OscConfig+0x3ae>
 8008590:	4b20      	ldr	r3, [pc, #128]	; (8008614 <HAL_RCC_OscConfig+0x418>)
 8008592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008594:	4a1f      	ldr	r2, [pc, #124]	; (8008614 <HAL_RCC_OscConfig+0x418>)
 8008596:	f043 0304 	orr.w	r3, r3, #4
 800859a:	6713      	str	r3, [r2, #112]	; 0x70
 800859c:	4b1d      	ldr	r3, [pc, #116]	; (8008614 <HAL_RCC_OscConfig+0x418>)
 800859e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085a0:	4a1c      	ldr	r2, [pc, #112]	; (8008614 <HAL_RCC_OscConfig+0x418>)
 80085a2:	f043 0301 	orr.w	r3, r3, #1
 80085a6:	6713      	str	r3, [r2, #112]	; 0x70
 80085a8:	e00b      	b.n	80085c2 <HAL_RCC_OscConfig+0x3c6>
 80085aa:	4b1a      	ldr	r3, [pc, #104]	; (8008614 <HAL_RCC_OscConfig+0x418>)
 80085ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ae:	4a19      	ldr	r2, [pc, #100]	; (8008614 <HAL_RCC_OscConfig+0x418>)
 80085b0:	f023 0301 	bic.w	r3, r3, #1
 80085b4:	6713      	str	r3, [r2, #112]	; 0x70
 80085b6:	4b17      	ldr	r3, [pc, #92]	; (8008614 <HAL_RCC_OscConfig+0x418>)
 80085b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ba:	4a16      	ldr	r2, [pc, #88]	; (8008614 <HAL_RCC_OscConfig+0x418>)
 80085bc:	f023 0304 	bic.w	r3, r3, #4
 80085c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d015      	beq.n	80085f6 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085ca:	f7fb fc4f 	bl	8003e6c <HAL_GetTick>
 80085ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085d0:	e00a      	b.n	80085e8 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085d2:	f7fb fc4b 	bl	8003e6c <HAL_GetTick>
 80085d6:	4602      	mov	r2, r0
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	1ad3      	subs	r3, r2, r3
 80085dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d901      	bls.n	80085e8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80085e4:	2303      	movs	r3, #3
 80085e6:	e127      	b.n	8008838 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085e8:	4b0a      	ldr	r3, [pc, #40]	; (8008614 <HAL_RCC_OscConfig+0x418>)
 80085ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ec:	f003 0302 	and.w	r3, r3, #2
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d0ee      	beq.n	80085d2 <HAL_RCC_OscConfig+0x3d6>
 80085f4:	e01c      	b.n	8008630 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085f6:	f7fb fc39 	bl	8003e6c <HAL_GetTick>
 80085fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80085fc:	e012      	b.n	8008624 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085fe:	f7fb fc35 	bl	8003e6c <HAL_GetTick>
 8008602:	4602      	mov	r2, r0
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	1ad3      	subs	r3, r2, r3
 8008608:	f241 3288 	movw	r2, #5000	; 0x1388
 800860c:	4293      	cmp	r3, r2
 800860e:	d909      	bls.n	8008624 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	e111      	b.n	8008838 <HAL_RCC_OscConfig+0x63c>
 8008614:	40023800 	.word	0x40023800
 8008618:	42470e80 	.word	0x42470e80
 800861c:	0800f100 	.word	0x0800f100
 8008620:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008624:	4b86      	ldr	r3, [pc, #536]	; (8008840 <HAL_RCC_OscConfig+0x644>)
 8008626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008628:	f003 0302 	and.w	r3, r3, #2
 800862c:	2b00      	cmp	r3, #0
 800862e:	d1e6      	bne.n	80085fe <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008630:	7dfb      	ldrb	r3, [r7, #23]
 8008632:	2b01      	cmp	r3, #1
 8008634:	d105      	bne.n	8008642 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008636:	4b82      	ldr	r3, [pc, #520]	; (8008840 <HAL_RCC_OscConfig+0x644>)
 8008638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863a:	4a81      	ldr	r2, [pc, #516]	; (8008840 <HAL_RCC_OscConfig+0x644>)
 800863c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008640:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	699b      	ldr	r3, [r3, #24]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00c      	beq.n	8008664 <HAL_RCC_OscConfig+0x468>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	699b      	ldr	r3, [r3, #24]
 800864e:	2b01      	cmp	r3, #1
 8008650:	d008      	beq.n	8008664 <HAL_RCC_OscConfig+0x468>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	2b02      	cmp	r3, #2
 8008658:	d004      	beq.n	8008664 <HAL_RCC_OscConfig+0x468>
 800865a:	f240 11cd 	movw	r1, #461	; 0x1cd
 800865e:	4879      	ldr	r0, [pc, #484]	; (8008844 <HAL_RCC_OscConfig+0x648>)
 8008660:	f7fa fd8b 	bl	800317a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	699b      	ldr	r3, [r3, #24]
 8008668:	2b00      	cmp	r3, #0
 800866a:	f000 80e4 	beq.w	8008836 <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800866e:	4b74      	ldr	r3, [pc, #464]	; (8008840 <HAL_RCC_OscConfig+0x644>)
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	f003 030c 	and.w	r3, r3, #12
 8008676:	2b08      	cmp	r3, #8
 8008678:	f000 80a5 	beq.w	80087c6 <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	699b      	ldr	r3, [r3, #24]
 8008680:	2b02      	cmp	r3, #2
 8008682:	f040 8089 	bne.w	8008798 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	69db      	ldr	r3, [r3, #28]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d009      	beq.n	80086a2 <HAL_RCC_OscConfig+0x4a6>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	69db      	ldr	r3, [r3, #28]
 8008692:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008696:	d004      	beq.n	80086a2 <HAL_RCC_OscConfig+0x4a6>
 8008698:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 800869c:	4869      	ldr	r0, [pc, #420]	; (8008844 <HAL_RCC_OscConfig+0x648>)
 800869e:	f7fa fd6c 	bl	800317a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a1b      	ldr	r3, [r3, #32]
 80086a6:	2b3f      	cmp	r3, #63	; 0x3f
 80086a8:	d904      	bls.n	80086b4 <HAL_RCC_OscConfig+0x4b8>
 80086aa:	f240 11d7 	movw	r1, #471	; 0x1d7
 80086ae:	4865      	ldr	r0, [pc, #404]	; (8008844 <HAL_RCC_OscConfig+0x648>)
 80086b0:	f7fa fd63 	bl	800317a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b8:	2b31      	cmp	r3, #49	; 0x31
 80086ba:	d904      	bls.n	80086c6 <HAL_RCC_OscConfig+0x4ca>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c0:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80086c4:	d904      	bls.n	80086d0 <HAL_RCC_OscConfig+0x4d4>
 80086c6:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80086ca:	485e      	ldr	r0, [pc, #376]	; (8008844 <HAL_RCC_OscConfig+0x648>)
 80086cc:	f7fa fd55 	bl	800317a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d010      	beq.n	80086fa <HAL_RCC_OscConfig+0x4fe>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086dc:	2b04      	cmp	r3, #4
 80086de:	d00c      	beq.n	80086fa <HAL_RCC_OscConfig+0x4fe>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e4:	2b06      	cmp	r3, #6
 80086e6:	d008      	beq.n	80086fa <HAL_RCC_OscConfig+0x4fe>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ec:	2b08      	cmp	r3, #8
 80086ee:	d004      	beq.n	80086fa <HAL_RCC_OscConfig+0x4fe>
 80086f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80086f4:	4853      	ldr	r0, [pc, #332]	; (8008844 <HAL_RCC_OscConfig+0x648>)
 80086f6:	f7fa fd40 	bl	800317a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d903      	bls.n	800870a <HAL_RCC_OscConfig+0x50e>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008706:	2b0f      	cmp	r3, #15
 8008708:	d904      	bls.n	8008714 <HAL_RCC_OscConfig+0x518>
 800870a:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800870e:	484d      	ldr	r0, [pc, #308]	; (8008844 <HAL_RCC_OscConfig+0x648>)
 8008710:	f7fa fd33 	bl	800317a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008714:	4b4c      	ldr	r3, [pc, #304]	; (8008848 <HAL_RCC_OscConfig+0x64c>)
 8008716:	2200      	movs	r2, #0
 8008718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800871a:	f7fb fba7 	bl	8003e6c <HAL_GetTick>
 800871e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008720:	e008      	b.n	8008734 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008722:	f7fb fba3 	bl	8003e6c <HAL_GetTick>
 8008726:	4602      	mov	r2, r0
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	1ad3      	subs	r3, r2, r3
 800872c:	2b02      	cmp	r3, #2
 800872e:	d901      	bls.n	8008734 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8008730:	2303      	movs	r3, #3
 8008732:	e081      	b.n	8008838 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008734:	4b42      	ldr	r3, [pc, #264]	; (8008840 <HAL_RCC_OscConfig+0x644>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1f0      	bne.n	8008722 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	69da      	ldr	r2, [r3, #28]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a1b      	ldr	r3, [r3, #32]
 8008748:	431a      	orrs	r2, r3
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874e:	019b      	lsls	r3, r3, #6
 8008750:	431a      	orrs	r2, r3
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008756:	085b      	lsrs	r3, r3, #1
 8008758:	3b01      	subs	r3, #1
 800875a:	041b      	lsls	r3, r3, #16
 800875c:	431a      	orrs	r2, r3
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008762:	061b      	lsls	r3, r3, #24
 8008764:	4936      	ldr	r1, [pc, #216]	; (8008840 <HAL_RCC_OscConfig+0x644>)
 8008766:	4313      	orrs	r3, r2
 8008768:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800876a:	4b37      	ldr	r3, [pc, #220]	; (8008848 <HAL_RCC_OscConfig+0x64c>)
 800876c:	2201      	movs	r2, #1
 800876e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008770:	f7fb fb7c 	bl	8003e6c <HAL_GetTick>
 8008774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008776:	e008      	b.n	800878a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008778:	f7fb fb78 	bl	8003e6c <HAL_GetTick>
 800877c:	4602      	mov	r2, r0
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	1ad3      	subs	r3, r2, r3
 8008782:	2b02      	cmp	r3, #2
 8008784:	d901      	bls.n	800878a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8008786:	2303      	movs	r3, #3
 8008788:	e056      	b.n	8008838 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800878a:	4b2d      	ldr	r3, [pc, #180]	; (8008840 <HAL_RCC_OscConfig+0x644>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008792:	2b00      	cmp	r3, #0
 8008794:	d0f0      	beq.n	8008778 <HAL_RCC_OscConfig+0x57c>
 8008796:	e04e      	b.n	8008836 <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008798:	4b2b      	ldr	r3, [pc, #172]	; (8008848 <HAL_RCC_OscConfig+0x64c>)
 800879a:	2200      	movs	r2, #0
 800879c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800879e:	f7fb fb65 	bl	8003e6c <HAL_GetTick>
 80087a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087a4:	e008      	b.n	80087b8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087a6:	f7fb fb61 	bl	8003e6c <HAL_GetTick>
 80087aa:	4602      	mov	r2, r0
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	1ad3      	subs	r3, r2, r3
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d901      	bls.n	80087b8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80087b4:	2303      	movs	r3, #3
 80087b6:	e03f      	b.n	8008838 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087b8:	4b21      	ldr	r3, [pc, #132]	; (8008840 <HAL_RCC_OscConfig+0x644>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d1f0      	bne.n	80087a6 <HAL_RCC_OscConfig+0x5aa>
 80087c4:	e037      	b.n	8008836 <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	699b      	ldr	r3, [r3, #24]
 80087ca:	2b01      	cmp	r3, #1
 80087cc:	d101      	bne.n	80087d2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e032      	b.n	8008838 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80087d2:	4b1b      	ldr	r3, [pc, #108]	; (8008840 <HAL_RCC_OscConfig+0x644>)
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	699b      	ldr	r3, [r3, #24]
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d028      	beq.n	8008832 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d121      	bne.n	8008832 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d11a      	bne.n	8008832 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80087fc:	68fa      	ldr	r2, [r7, #12]
 80087fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008802:	4013      	ands	r3, r2
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008808:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800880a:	4293      	cmp	r3, r2
 800880c:	d111      	bne.n	8008832 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008818:	085b      	lsrs	r3, r3, #1
 800881a:	3b01      	subs	r3, #1
 800881c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800881e:	429a      	cmp	r2, r3
 8008820:	d107      	bne.n	8008832 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800882e:	429a      	cmp	r2, r3
 8008830:	d001      	beq.n	8008836 <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e000      	b.n	8008838 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3718      	adds	r7, #24
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	40023800 	.word	0x40023800
 8008844:	0800f100 	.word	0x0800f100
 8008848:	42470060 	.word	0x42470060

0800884c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d101      	bne.n	8008860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	e174      	b.n	8008b4a <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d003      	beq.n	8008870 <HAL_RCC_ClockConfig+0x24>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2b0f      	cmp	r3, #15
 800886e:	d904      	bls.n	800887a <HAL_RCC_ClockConfig+0x2e>
 8008870:	f240 215a 	movw	r1, #602	; 0x25a
 8008874:	487b      	ldr	r0, [pc, #492]	; (8008a64 <HAL_RCC_ClockConfig+0x218>)
 8008876:	f7fa fc80 	bl	800317a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d019      	beq.n	80088b4 <HAL_RCC_ClockConfig+0x68>
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	2b01      	cmp	r3, #1
 8008884:	d016      	beq.n	80088b4 <HAL_RCC_ClockConfig+0x68>
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	2b02      	cmp	r3, #2
 800888a:	d013      	beq.n	80088b4 <HAL_RCC_ClockConfig+0x68>
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	2b03      	cmp	r3, #3
 8008890:	d010      	beq.n	80088b4 <HAL_RCC_ClockConfig+0x68>
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	2b04      	cmp	r3, #4
 8008896:	d00d      	beq.n	80088b4 <HAL_RCC_ClockConfig+0x68>
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	2b05      	cmp	r3, #5
 800889c:	d00a      	beq.n	80088b4 <HAL_RCC_ClockConfig+0x68>
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	2b06      	cmp	r3, #6
 80088a2:	d007      	beq.n	80088b4 <HAL_RCC_ClockConfig+0x68>
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	2b07      	cmp	r3, #7
 80088a8:	d004      	beq.n	80088b4 <HAL_RCC_ClockConfig+0x68>
 80088aa:	f240 215b 	movw	r1, #603	; 0x25b
 80088ae:	486d      	ldr	r0, [pc, #436]	; (8008a64 <HAL_RCC_ClockConfig+0x218>)
 80088b0:	f7fa fc63 	bl	800317a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80088b4:	4b6c      	ldr	r3, [pc, #432]	; (8008a68 <HAL_RCC_ClockConfig+0x21c>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f003 0307 	and.w	r3, r3, #7
 80088bc:	683a      	ldr	r2, [r7, #0]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d90c      	bls.n	80088dc <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088c2:	4b69      	ldr	r3, [pc, #420]	; (8008a68 <HAL_RCC_ClockConfig+0x21c>)
 80088c4:	683a      	ldr	r2, [r7, #0]
 80088c6:	b2d2      	uxtb	r2, r2
 80088c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088ca:	4b67      	ldr	r3, [pc, #412]	; (8008a68 <HAL_RCC_ClockConfig+0x21c>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f003 0307 	and.w	r3, r3, #7
 80088d2:	683a      	ldr	r2, [r7, #0]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d001      	beq.n	80088dc <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	e136      	b.n	8008b4a <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 0302 	and.w	r3, r3, #2
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d049      	beq.n	800897c <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 0304 	and.w	r3, r3, #4
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d005      	beq.n	8008900 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80088f4:	4b5d      	ldr	r3, [pc, #372]	; (8008a6c <HAL_RCC_ClockConfig+0x220>)
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	4a5c      	ldr	r2, [pc, #368]	; (8008a6c <HAL_RCC_ClockConfig+0x220>)
 80088fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80088fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f003 0308 	and.w	r3, r3, #8
 8008908:	2b00      	cmp	r3, #0
 800890a:	d005      	beq.n	8008918 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800890c:	4b57      	ldr	r3, [pc, #348]	; (8008a6c <HAL_RCC_ClockConfig+0x220>)
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	4a56      	ldr	r2, [pc, #344]	; (8008a6c <HAL_RCC_ClockConfig+0x220>)
 8008912:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008916:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d024      	beq.n	800896a <HAL_RCC_ClockConfig+0x11e>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	2b80      	cmp	r3, #128	; 0x80
 8008926:	d020      	beq.n	800896a <HAL_RCC_ClockConfig+0x11e>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	2b90      	cmp	r3, #144	; 0x90
 800892e:	d01c      	beq.n	800896a <HAL_RCC_ClockConfig+0x11e>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	2ba0      	cmp	r3, #160	; 0xa0
 8008936:	d018      	beq.n	800896a <HAL_RCC_ClockConfig+0x11e>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	2bb0      	cmp	r3, #176	; 0xb0
 800893e:	d014      	beq.n	800896a <HAL_RCC_ClockConfig+0x11e>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	2bc0      	cmp	r3, #192	; 0xc0
 8008946:	d010      	beq.n	800896a <HAL_RCC_ClockConfig+0x11e>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	2bd0      	cmp	r3, #208	; 0xd0
 800894e:	d00c      	beq.n	800896a <HAL_RCC_ClockConfig+0x11e>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	2be0      	cmp	r3, #224	; 0xe0
 8008956:	d008      	beq.n	800896a <HAL_RCC_ClockConfig+0x11e>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	2bf0      	cmp	r3, #240	; 0xf0
 800895e:	d004      	beq.n	800896a <HAL_RCC_ClockConfig+0x11e>
 8008960:	f240 217e 	movw	r1, #638	; 0x27e
 8008964:	483f      	ldr	r0, [pc, #252]	; (8008a64 <HAL_RCC_ClockConfig+0x218>)
 8008966:	f7fa fc08 	bl	800317a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800896a:	4b40      	ldr	r3, [pc, #256]	; (8008a6c <HAL_RCC_ClockConfig+0x220>)
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	493d      	ldr	r1, [pc, #244]	; (8008a6c <HAL_RCC_ClockConfig+0x220>)
 8008978:	4313      	orrs	r3, r2
 800897a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 0301 	and.w	r3, r3, #1
 8008984:	2b00      	cmp	r3, #0
 8008986:	d059      	beq.n	8008a3c <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d010      	beq.n	80089b2 <HAL_RCC_ClockConfig+0x166>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	2b01      	cmp	r3, #1
 8008996:	d00c      	beq.n	80089b2 <HAL_RCC_ClockConfig+0x166>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	2b02      	cmp	r3, #2
 800899e:	d008      	beq.n	80089b2 <HAL_RCC_ClockConfig+0x166>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	2b03      	cmp	r3, #3
 80089a6:	d004      	beq.n	80089b2 <HAL_RCC_ClockConfig+0x166>
 80089a8:	f240 2185 	movw	r1, #645	; 0x285
 80089ac:	482d      	ldr	r0, [pc, #180]	; (8008a64 <HAL_RCC_ClockConfig+0x218>)
 80089ae:	f7fa fbe4 	bl	800317a <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d107      	bne.n	80089ca <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089ba:	4b2c      	ldr	r3, [pc, #176]	; (8008a6c <HAL_RCC_ClockConfig+0x220>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d119      	bne.n	80089fa <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80089c6:	2301      	movs	r3, #1
 80089c8:	e0bf      	b.n	8008b4a <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d003      	beq.n	80089da <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80089d6:	2b03      	cmp	r3, #3
 80089d8:	d107      	bne.n	80089ea <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089da:	4b24      	ldr	r3, [pc, #144]	; (8008a6c <HAL_RCC_ClockConfig+0x220>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d109      	bne.n	80089fa <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e0af      	b.n	8008b4a <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089ea:	4b20      	ldr	r3, [pc, #128]	; (8008a6c <HAL_RCC_ClockConfig+0x220>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f003 0302 	and.w	r3, r3, #2
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d101      	bne.n	80089fa <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80089f6:	2301      	movs	r3, #1
 80089f8:	e0a7      	b.n	8008b4a <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80089fa:	4b1c      	ldr	r3, [pc, #112]	; (8008a6c <HAL_RCC_ClockConfig+0x220>)
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	f023 0203 	bic.w	r2, r3, #3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	4919      	ldr	r1, [pc, #100]	; (8008a6c <HAL_RCC_ClockConfig+0x220>)
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008a0c:	f7fb fa2e 	bl	8003e6c <HAL_GetTick>
 8008a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a12:	e00a      	b.n	8008a2a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a14:	f7fb fa2a 	bl	8003e6c <HAL_GetTick>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	1ad3      	subs	r3, r2, r3
 8008a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d901      	bls.n	8008a2a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008a26:	2303      	movs	r3, #3
 8008a28:	e08f      	b.n	8008b4a <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a2a:	4b10      	ldr	r3, [pc, #64]	; (8008a6c <HAL_RCC_ClockConfig+0x220>)
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	f003 020c 	and.w	r2, r3, #12
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d1eb      	bne.n	8008a14 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008a3c:	4b0a      	ldr	r3, [pc, #40]	; (8008a68 <HAL_RCC_ClockConfig+0x21c>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f003 0307 	and.w	r3, r3, #7
 8008a44:	683a      	ldr	r2, [r7, #0]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d212      	bcs.n	8008a70 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a4a:	4b07      	ldr	r3, [pc, #28]	; (8008a68 <HAL_RCC_ClockConfig+0x21c>)
 8008a4c:	683a      	ldr	r2, [r7, #0]
 8008a4e:	b2d2      	uxtb	r2, r2
 8008a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a52:	4b05      	ldr	r3, [pc, #20]	; (8008a68 <HAL_RCC_ClockConfig+0x21c>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f003 0307 	and.w	r3, r3, #7
 8008a5a:	683a      	ldr	r2, [r7, #0]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d007      	beq.n	8008a70 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	e072      	b.n	8008b4a <HAL_RCC_ClockConfig+0x2fe>
 8008a64:	0800f100 	.word	0x0800f100
 8008a68:	40023c00 	.word	0x40023c00
 8008a6c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f003 0304 	and.w	r3, r3, #4
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d025      	beq.n	8008ac8 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d018      	beq.n	8008ab6 <HAL_RCC_ClockConfig+0x26a>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a8c:	d013      	beq.n	8008ab6 <HAL_RCC_ClockConfig+0x26a>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008a96:	d00e      	beq.n	8008ab6 <HAL_RCC_ClockConfig+0x26a>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8008aa0:	d009      	beq.n	8008ab6 <HAL_RCC_ClockConfig+0x26a>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8008aaa:	d004      	beq.n	8008ab6 <HAL_RCC_ClockConfig+0x26a>
 8008aac:	f240 21c3 	movw	r1, #707	; 0x2c3
 8008ab0:	4828      	ldr	r0, [pc, #160]	; (8008b54 <HAL_RCC_ClockConfig+0x308>)
 8008ab2:	f7fa fb62 	bl	800317a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008ab6:	4b28      	ldr	r3, [pc, #160]	; (8008b58 <HAL_RCC_ClockConfig+0x30c>)
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	4925      	ldr	r1, [pc, #148]	; (8008b58 <HAL_RCC_ClockConfig+0x30c>)
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f003 0308 	and.w	r3, r3, #8
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d026      	beq.n	8008b22 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	691b      	ldr	r3, [r3, #16]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d018      	beq.n	8008b0e <HAL_RCC_ClockConfig+0x2c2>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	691b      	ldr	r3, [r3, #16]
 8008ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ae4:	d013      	beq.n	8008b0e <HAL_RCC_ClockConfig+0x2c2>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	691b      	ldr	r3, [r3, #16]
 8008aea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008aee:	d00e      	beq.n	8008b0e <HAL_RCC_ClockConfig+0x2c2>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8008af8:	d009      	beq.n	8008b0e <HAL_RCC_ClockConfig+0x2c2>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8008b02:	d004      	beq.n	8008b0e <HAL_RCC_ClockConfig+0x2c2>
 8008b04:	f240 21ca 	movw	r1, #714	; 0x2ca
 8008b08:	4812      	ldr	r0, [pc, #72]	; (8008b54 <HAL_RCC_ClockConfig+0x308>)
 8008b0a:	f7fa fb36 	bl	800317a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b0e:	4b12      	ldr	r3, [pc, #72]	; (8008b58 <HAL_RCC_ClockConfig+0x30c>)
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	00db      	lsls	r3, r3, #3
 8008b1c:	490e      	ldr	r1, [pc, #56]	; (8008b58 <HAL_RCC_ClockConfig+0x30c>)
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008b22:	f000 f821 	bl	8008b68 <HAL_RCC_GetSysClockFreq>
 8008b26:	4602      	mov	r2, r0
 8008b28:	4b0b      	ldr	r3, [pc, #44]	; (8008b58 <HAL_RCC_ClockConfig+0x30c>)
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	091b      	lsrs	r3, r3, #4
 8008b2e:	f003 030f 	and.w	r3, r3, #15
 8008b32:	490a      	ldr	r1, [pc, #40]	; (8008b5c <HAL_RCC_ClockConfig+0x310>)
 8008b34:	5ccb      	ldrb	r3, [r1, r3]
 8008b36:	fa22 f303 	lsr.w	r3, r2, r3
 8008b3a:	4a09      	ldr	r2, [pc, #36]	; (8008b60 <HAL_RCC_ClockConfig+0x314>)
 8008b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008b3e:	4b09      	ldr	r3, [pc, #36]	; (8008b64 <HAL_RCC_ClockConfig+0x318>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7fa fc06 	bl	8003354 <HAL_InitTick>

  return HAL_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	0800f100 	.word	0x0800f100
 8008b58:	40023800 	.word	0x40023800
 8008b5c:	0800f430 	.word	0x0800f430
 8008b60:	20000000 	.word	0x20000000
 8008b64:	20000004 	.word	0x20000004

08008b68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b6c:	b094      	sub	sp, #80	; 0x50
 8008b6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008b70:	2300      	movs	r3, #0
 8008b72:	647b      	str	r3, [r7, #68]	; 0x44
 8008b74:	2300      	movs	r3, #0
 8008b76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b78:	2300      	movs	r3, #0
 8008b7a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b80:	4b79      	ldr	r3, [pc, #484]	; (8008d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	f003 030c 	and.w	r3, r3, #12
 8008b88:	2b08      	cmp	r3, #8
 8008b8a:	d00d      	beq.n	8008ba8 <HAL_RCC_GetSysClockFreq+0x40>
 8008b8c:	2b08      	cmp	r3, #8
 8008b8e:	f200 80e1 	bhi.w	8008d54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d002      	beq.n	8008b9c <HAL_RCC_GetSysClockFreq+0x34>
 8008b96:	2b04      	cmp	r3, #4
 8008b98:	d003      	beq.n	8008ba2 <HAL_RCC_GetSysClockFreq+0x3a>
 8008b9a:	e0db      	b.n	8008d54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008b9c:	4b73      	ldr	r3, [pc, #460]	; (8008d6c <HAL_RCC_GetSysClockFreq+0x204>)
 8008b9e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008ba0:	e0db      	b.n	8008d5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008ba2:	4b73      	ldr	r3, [pc, #460]	; (8008d70 <HAL_RCC_GetSysClockFreq+0x208>)
 8008ba4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008ba6:	e0d8      	b.n	8008d5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008ba8:	4b6f      	ldr	r3, [pc, #444]	; (8008d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bb0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008bb2:	4b6d      	ldr	r3, [pc, #436]	; (8008d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d063      	beq.n	8008c86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008bbe:	4b6a      	ldr	r3, [pc, #424]	; (8008d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	099b      	lsrs	r3, r3, #6
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008bc8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bd0:	633b      	str	r3, [r7, #48]	; 0x30
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	637b      	str	r3, [r7, #52]	; 0x34
 8008bd6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008bda:	4622      	mov	r2, r4
 8008bdc:	462b      	mov	r3, r5
 8008bde:	f04f 0000 	mov.w	r0, #0
 8008be2:	f04f 0100 	mov.w	r1, #0
 8008be6:	0159      	lsls	r1, r3, #5
 8008be8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008bec:	0150      	lsls	r0, r2, #5
 8008bee:	4602      	mov	r2, r0
 8008bf0:	460b      	mov	r3, r1
 8008bf2:	4621      	mov	r1, r4
 8008bf4:	1a51      	subs	r1, r2, r1
 8008bf6:	6139      	str	r1, [r7, #16]
 8008bf8:	4629      	mov	r1, r5
 8008bfa:	eb63 0301 	sbc.w	r3, r3, r1
 8008bfe:	617b      	str	r3, [r7, #20]
 8008c00:	f04f 0200 	mov.w	r2, #0
 8008c04:	f04f 0300 	mov.w	r3, #0
 8008c08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008c0c:	4659      	mov	r1, fp
 8008c0e:	018b      	lsls	r3, r1, #6
 8008c10:	4651      	mov	r1, sl
 8008c12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008c16:	4651      	mov	r1, sl
 8008c18:	018a      	lsls	r2, r1, #6
 8008c1a:	4651      	mov	r1, sl
 8008c1c:	ebb2 0801 	subs.w	r8, r2, r1
 8008c20:	4659      	mov	r1, fp
 8008c22:	eb63 0901 	sbc.w	r9, r3, r1
 8008c26:	f04f 0200 	mov.w	r2, #0
 8008c2a:	f04f 0300 	mov.w	r3, #0
 8008c2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c3a:	4690      	mov	r8, r2
 8008c3c:	4699      	mov	r9, r3
 8008c3e:	4623      	mov	r3, r4
 8008c40:	eb18 0303 	adds.w	r3, r8, r3
 8008c44:	60bb      	str	r3, [r7, #8]
 8008c46:	462b      	mov	r3, r5
 8008c48:	eb49 0303 	adc.w	r3, r9, r3
 8008c4c:	60fb      	str	r3, [r7, #12]
 8008c4e:	f04f 0200 	mov.w	r2, #0
 8008c52:	f04f 0300 	mov.w	r3, #0
 8008c56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008c5a:	4629      	mov	r1, r5
 8008c5c:	024b      	lsls	r3, r1, #9
 8008c5e:	4621      	mov	r1, r4
 8008c60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008c64:	4621      	mov	r1, r4
 8008c66:	024a      	lsls	r2, r1, #9
 8008c68:	4610      	mov	r0, r2
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c6e:	2200      	movs	r2, #0
 8008c70:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c78:	f7f7 fea0 	bl	80009bc <__aeabi_uldivmod>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	460b      	mov	r3, r1
 8008c80:	4613      	mov	r3, r2
 8008c82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c84:	e058      	b.n	8008d38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c86:	4b38      	ldr	r3, [pc, #224]	; (8008d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	099b      	lsrs	r3, r3, #6
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	4618      	mov	r0, r3
 8008c90:	4611      	mov	r1, r2
 8008c92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008c96:	623b      	str	r3, [r7, #32]
 8008c98:	2300      	movs	r3, #0
 8008c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8008c9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008ca0:	4642      	mov	r2, r8
 8008ca2:	464b      	mov	r3, r9
 8008ca4:	f04f 0000 	mov.w	r0, #0
 8008ca8:	f04f 0100 	mov.w	r1, #0
 8008cac:	0159      	lsls	r1, r3, #5
 8008cae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008cb2:	0150      	lsls	r0, r2, #5
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	4641      	mov	r1, r8
 8008cba:	ebb2 0a01 	subs.w	sl, r2, r1
 8008cbe:	4649      	mov	r1, r9
 8008cc0:	eb63 0b01 	sbc.w	fp, r3, r1
 8008cc4:	f04f 0200 	mov.w	r2, #0
 8008cc8:	f04f 0300 	mov.w	r3, #0
 8008ccc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008cd0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008cd4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008cd8:	ebb2 040a 	subs.w	r4, r2, sl
 8008cdc:	eb63 050b 	sbc.w	r5, r3, fp
 8008ce0:	f04f 0200 	mov.w	r2, #0
 8008ce4:	f04f 0300 	mov.w	r3, #0
 8008ce8:	00eb      	lsls	r3, r5, #3
 8008cea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008cee:	00e2      	lsls	r2, r4, #3
 8008cf0:	4614      	mov	r4, r2
 8008cf2:	461d      	mov	r5, r3
 8008cf4:	4643      	mov	r3, r8
 8008cf6:	18e3      	adds	r3, r4, r3
 8008cf8:	603b      	str	r3, [r7, #0]
 8008cfa:	464b      	mov	r3, r9
 8008cfc:	eb45 0303 	adc.w	r3, r5, r3
 8008d00:	607b      	str	r3, [r7, #4]
 8008d02:	f04f 0200 	mov.w	r2, #0
 8008d06:	f04f 0300 	mov.w	r3, #0
 8008d0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008d0e:	4629      	mov	r1, r5
 8008d10:	028b      	lsls	r3, r1, #10
 8008d12:	4621      	mov	r1, r4
 8008d14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008d18:	4621      	mov	r1, r4
 8008d1a:	028a      	lsls	r2, r1, #10
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d22:	2200      	movs	r2, #0
 8008d24:	61bb      	str	r3, [r7, #24]
 8008d26:	61fa      	str	r2, [r7, #28]
 8008d28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d2c:	f7f7 fe46 	bl	80009bc <__aeabi_uldivmod>
 8008d30:	4602      	mov	r2, r0
 8008d32:	460b      	mov	r3, r1
 8008d34:	4613      	mov	r3, r2
 8008d36:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008d38:	4b0b      	ldr	r3, [pc, #44]	; (8008d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	0c1b      	lsrs	r3, r3, #16
 8008d3e:	f003 0303 	and.w	r3, r3, #3
 8008d42:	3301      	adds	r3, #1
 8008d44:	005b      	lsls	r3, r3, #1
 8008d46:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008d48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008d52:	e002      	b.n	8008d5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008d54:	4b05      	ldr	r3, [pc, #20]	; (8008d6c <HAL_RCC_GetSysClockFreq+0x204>)
 8008d56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008d58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3750      	adds	r7, #80	; 0x50
 8008d60:	46bd      	mov	sp, r7
 8008d62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d66:	bf00      	nop
 8008d68:	40023800 	.word	0x40023800
 8008d6c:	00f42400 	.word	0x00f42400
 8008d70:	007a1200 	.word	0x007a1200

08008d74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d74:	b480      	push	{r7}
 8008d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d78:	4b03      	ldr	r3, [pc, #12]	; (8008d88 <HAL_RCC_GetHCLKFreq+0x14>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop
 8008d88:	20000000 	.word	0x20000000

08008d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008d90:	f7ff fff0 	bl	8008d74 <HAL_RCC_GetHCLKFreq>
 8008d94:	4602      	mov	r2, r0
 8008d96:	4b05      	ldr	r3, [pc, #20]	; (8008dac <HAL_RCC_GetPCLK1Freq+0x20>)
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	0a9b      	lsrs	r3, r3, #10
 8008d9c:	f003 0307 	and.w	r3, r3, #7
 8008da0:	4903      	ldr	r1, [pc, #12]	; (8008db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008da2:	5ccb      	ldrb	r3, [r1, r3]
 8008da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	40023800 	.word	0x40023800
 8008db0:	0800f440 	.word	0x0800f440

08008db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008db8:	f7ff ffdc 	bl	8008d74 <HAL_RCC_GetHCLKFreq>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	4b05      	ldr	r3, [pc, #20]	; (8008dd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	0b5b      	lsrs	r3, r3, #13
 8008dc4:	f003 0307 	and.w	r3, r3, #7
 8008dc8:	4903      	ldr	r1, [pc, #12]	; (8008dd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008dca:	5ccb      	ldrb	r3, [r1, r3]
 8008dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	40023800 	.word	0x40023800
 8008dd8:	0800f440 	.word	0x0800f440

08008ddc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	220f      	movs	r2, #15
 8008dea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008dec:	4b12      	ldr	r3, [pc, #72]	; (8008e38 <HAL_RCC_GetClockConfig+0x5c>)
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	f003 0203 	and.w	r2, r3, #3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008df8:	4b0f      	ldr	r3, [pc, #60]	; (8008e38 <HAL_RCC_GetClockConfig+0x5c>)
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008e04:	4b0c      	ldr	r3, [pc, #48]	; (8008e38 <HAL_RCC_GetClockConfig+0x5c>)
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008e10:	4b09      	ldr	r3, [pc, #36]	; (8008e38 <HAL_RCC_GetClockConfig+0x5c>)
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	08db      	lsrs	r3, r3, #3
 8008e16:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008e1e:	4b07      	ldr	r3, [pc, #28]	; (8008e3c <HAL_RCC_GetClockConfig+0x60>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 0207 	and.w	r2, r3, #7
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	601a      	str	r2, [r3, #0]
}
 8008e2a:	bf00      	nop
 8008e2c:	370c      	adds	r7, #12
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr
 8008e36:	bf00      	nop
 8008e38:	40023800 	.word	0x40023800
 8008e3c:	40023c00 	.word	0x40023c00

08008e40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d101      	bne.n	8008e52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e1ac      	b.n	80091ac <HAL_SPI_Init+0x36c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a75      	ldr	r2, [pc, #468]	; (800902c <HAL_SPI_Init+0x1ec>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d018      	beq.n	8008e8e <HAL_SPI_Init+0x4e>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a73      	ldr	r2, [pc, #460]	; (8009030 <HAL_SPI_Init+0x1f0>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d013      	beq.n	8008e8e <HAL_SPI_Init+0x4e>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a72      	ldr	r2, [pc, #456]	; (8009034 <HAL_SPI_Init+0x1f4>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d00e      	beq.n	8008e8e <HAL_SPI_Init+0x4e>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a70      	ldr	r2, [pc, #448]	; (8009038 <HAL_SPI_Init+0x1f8>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d009      	beq.n	8008e8e <HAL_SPI_Init+0x4e>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a6f      	ldr	r2, [pc, #444]	; (800903c <HAL_SPI_Init+0x1fc>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d004      	beq.n	8008e8e <HAL_SPI_Init+0x4e>
 8008e84:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008e88:	486d      	ldr	r0, [pc, #436]	; (8009040 <HAL_SPI_Init+0x200>)
 8008e8a:	f7fa f976 	bl	800317a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d009      	beq.n	8008eaa <HAL_SPI_Init+0x6a>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e9e:	d004      	beq.n	8008eaa <HAL_SPI_Init+0x6a>
 8008ea0:	f240 1141 	movw	r1, #321	; 0x141
 8008ea4:	4866      	ldr	r0, [pc, #408]	; (8009040 <HAL_SPI_Init+0x200>)
 8008ea6:	f7fa f968 	bl	800317a <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00e      	beq.n	8008ed0 <HAL_SPI_Init+0x90>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eba:	d009      	beq.n	8008ed0 <HAL_SPI_Init+0x90>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ec4:	d004      	beq.n	8008ed0 <HAL_SPI_Init+0x90>
 8008ec6:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8008eca:	485d      	ldr	r0, [pc, #372]	; (8009040 <HAL_SPI_Init+0x200>)
 8008ecc:	f7fa f955 	bl	800317a <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ed8:	d008      	beq.n	8008eec <HAL_SPI_Init+0xac>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d004      	beq.n	8008eec <HAL_SPI_Init+0xac>
 8008ee2:	f240 1143 	movw	r1, #323	; 0x143
 8008ee6:	4856      	ldr	r0, [pc, #344]	; (8009040 <HAL_SPI_Init+0x200>)
 8008ee8:	f7fa f947 	bl	800317a <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	699b      	ldr	r3, [r3, #24]
 8008ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ef4:	d00d      	beq.n	8008f12 <HAL_SPI_Init+0xd2>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	699b      	ldr	r3, [r3, #24]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d009      	beq.n	8008f12 <HAL_SPI_Init+0xd2>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	699b      	ldr	r3, [r3, #24]
 8008f02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008f06:	d004      	beq.n	8008f12 <HAL_SPI_Init+0xd2>
 8008f08:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8008f0c:	484c      	ldr	r0, [pc, #304]	; (8009040 <HAL_SPI_Init+0x200>)
 8008f0e:	f7fa f934 	bl	800317a <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	69db      	ldr	r3, [r3, #28]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d020      	beq.n	8008f5c <HAL_SPI_Init+0x11c>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	69db      	ldr	r3, [r3, #28]
 8008f1e:	2b08      	cmp	r3, #8
 8008f20:	d01c      	beq.n	8008f5c <HAL_SPI_Init+0x11c>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	69db      	ldr	r3, [r3, #28]
 8008f26:	2b10      	cmp	r3, #16
 8008f28:	d018      	beq.n	8008f5c <HAL_SPI_Init+0x11c>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	69db      	ldr	r3, [r3, #28]
 8008f2e:	2b18      	cmp	r3, #24
 8008f30:	d014      	beq.n	8008f5c <HAL_SPI_Init+0x11c>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	69db      	ldr	r3, [r3, #28]
 8008f36:	2b20      	cmp	r3, #32
 8008f38:	d010      	beq.n	8008f5c <HAL_SPI_Init+0x11c>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	69db      	ldr	r3, [r3, #28]
 8008f3e:	2b28      	cmp	r3, #40	; 0x28
 8008f40:	d00c      	beq.n	8008f5c <HAL_SPI_Init+0x11c>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	69db      	ldr	r3, [r3, #28]
 8008f46:	2b30      	cmp	r3, #48	; 0x30
 8008f48:	d008      	beq.n	8008f5c <HAL_SPI_Init+0x11c>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	69db      	ldr	r3, [r3, #28]
 8008f4e:	2b38      	cmp	r3, #56	; 0x38
 8008f50:	d004      	beq.n	8008f5c <HAL_SPI_Init+0x11c>
 8008f52:	f240 1145 	movw	r1, #325	; 0x145
 8008f56:	483a      	ldr	r0, [pc, #232]	; (8009040 <HAL_SPI_Init+0x200>)
 8008f58:	f7fa f90f 	bl	800317a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6a1b      	ldr	r3, [r3, #32]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d008      	beq.n	8008f76 <HAL_SPI_Init+0x136>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6a1b      	ldr	r3, [r3, #32]
 8008f68:	2b80      	cmp	r3, #128	; 0x80
 8008f6a:	d004      	beq.n	8008f76 <HAL_SPI_Init+0x136>
 8008f6c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8008f70:	4833      	ldr	r0, [pc, #204]	; (8009040 <HAL_SPI_Init+0x200>)
 8008f72:	f7fa f902 	bl	800317a <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d008      	beq.n	8008f90 <HAL_SPI_Init+0x150>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f82:	2b10      	cmp	r3, #16
 8008f84:	d004      	beq.n	8008f90 <HAL_SPI_Init+0x150>
 8008f86:	f240 1147 	movw	r1, #327	; 0x147
 8008f8a:	482d      	ldr	r0, [pc, #180]	; (8009040 <HAL_SPI_Init+0x200>)
 8008f8c:	f7fa f8f5 	bl	800317a <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d155      	bne.n	8009044 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	691b      	ldr	r3, [r3, #16]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d008      	beq.n	8008fb2 <HAL_SPI_Init+0x172>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	691b      	ldr	r3, [r3, #16]
 8008fa4:	2b02      	cmp	r3, #2
 8008fa6:	d004      	beq.n	8008fb2 <HAL_SPI_Init+0x172>
 8008fa8:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8008fac:	4824      	ldr	r0, [pc, #144]	; (8009040 <HAL_SPI_Init+0x200>)
 8008fae:	f7fa f8e4 	bl	800317a <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	695b      	ldr	r3, [r3, #20]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d008      	beq.n	8008fcc <HAL_SPI_Init+0x18c>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	695b      	ldr	r3, [r3, #20]
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d004      	beq.n	8008fcc <HAL_SPI_Init+0x18c>
 8008fc2:	f240 114b 	movw	r1, #331	; 0x14b
 8008fc6:	481e      	ldr	r0, [pc, #120]	; (8009040 <HAL_SPI_Init+0x200>)
 8008fc8:	f7fa f8d7 	bl	800317a <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008fd4:	d125      	bne.n	8009022 <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	69db      	ldr	r3, [r3, #28]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d05d      	beq.n	800909a <HAL_SPI_Init+0x25a>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	69db      	ldr	r3, [r3, #28]
 8008fe2:	2b08      	cmp	r3, #8
 8008fe4:	d059      	beq.n	800909a <HAL_SPI_Init+0x25a>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	69db      	ldr	r3, [r3, #28]
 8008fea:	2b10      	cmp	r3, #16
 8008fec:	d055      	beq.n	800909a <HAL_SPI_Init+0x25a>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	69db      	ldr	r3, [r3, #28]
 8008ff2:	2b18      	cmp	r3, #24
 8008ff4:	d051      	beq.n	800909a <HAL_SPI_Init+0x25a>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	69db      	ldr	r3, [r3, #28]
 8008ffa:	2b20      	cmp	r3, #32
 8008ffc:	d04d      	beq.n	800909a <HAL_SPI_Init+0x25a>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	69db      	ldr	r3, [r3, #28]
 8009002:	2b28      	cmp	r3, #40	; 0x28
 8009004:	d049      	beq.n	800909a <HAL_SPI_Init+0x25a>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	69db      	ldr	r3, [r3, #28]
 800900a:	2b30      	cmp	r3, #48	; 0x30
 800900c:	d045      	beq.n	800909a <HAL_SPI_Init+0x25a>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	69db      	ldr	r3, [r3, #28]
 8009012:	2b38      	cmp	r3, #56	; 0x38
 8009014:	d041      	beq.n	800909a <HAL_SPI_Init+0x25a>
 8009016:	f240 114f 	movw	r1, #335	; 0x14f
 800901a:	4809      	ldr	r0, [pc, #36]	; (8009040 <HAL_SPI_Init+0x200>)
 800901c:	f7fa f8ad 	bl	800317a <assert_failed>
 8009020:	e03b      	b.n	800909a <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	61da      	str	r2, [r3, #28]
 8009028:	e037      	b.n	800909a <HAL_SPI_Init+0x25a>
 800902a:	bf00      	nop
 800902c:	40013000 	.word	0x40013000
 8009030:	40003800 	.word	0x40003800
 8009034:	40003c00 	.word	0x40003c00
 8009038:	40013400 	.word	0x40013400
 800903c:	40015000 	.word	0x40015000
 8009040:	0800f174 	.word	0x0800f174
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	69db      	ldr	r3, [r3, #28]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d020      	beq.n	800908e <HAL_SPI_Init+0x24e>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	69db      	ldr	r3, [r3, #28]
 8009050:	2b08      	cmp	r3, #8
 8009052:	d01c      	beq.n	800908e <HAL_SPI_Init+0x24e>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	69db      	ldr	r3, [r3, #28]
 8009058:	2b10      	cmp	r3, #16
 800905a:	d018      	beq.n	800908e <HAL_SPI_Init+0x24e>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	69db      	ldr	r3, [r3, #28]
 8009060:	2b18      	cmp	r3, #24
 8009062:	d014      	beq.n	800908e <HAL_SPI_Init+0x24e>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	69db      	ldr	r3, [r3, #28]
 8009068:	2b20      	cmp	r3, #32
 800906a:	d010      	beq.n	800908e <HAL_SPI_Init+0x24e>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	69db      	ldr	r3, [r3, #28]
 8009070:	2b28      	cmp	r3, #40	; 0x28
 8009072:	d00c      	beq.n	800908e <HAL_SPI_Init+0x24e>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	69db      	ldr	r3, [r3, #28]
 8009078:	2b30      	cmp	r3, #48	; 0x30
 800907a:	d008      	beq.n	800908e <HAL_SPI_Init+0x24e>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	69db      	ldr	r3, [r3, #28]
 8009080:	2b38      	cmp	r3, #56	; 0x38
 8009082:	d004      	beq.n	800908e <HAL_SPI_Init+0x24e>
 8009084:	f240 1159 	movw	r1, #345	; 0x159
 8009088:	484a      	ldr	r0, [pc, #296]	; (80091b4 <HAL_SPI_Init+0x374>)
 800908a:	f7fa f876 	bl	800317a <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d126      	bne.n	80090fa <HAL_SPI_Init+0x2ba>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	4a40      	ldr	r2, [pc, #256]	; (80091b8 <HAL_SPI_Init+0x378>)
 80090b8:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4a3f      	ldr	r2, [pc, #252]	; (80091bc <HAL_SPI_Init+0x37c>)
 80090be:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4a3f      	ldr	r2, [pc, #252]	; (80091c0 <HAL_SPI_Init+0x380>)
 80090c4:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	4a3e      	ldr	r2, [pc, #248]	; (80091c4 <HAL_SPI_Init+0x384>)
 80090ca:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	4a3e      	ldr	r2, [pc, #248]	; (80091c8 <HAL_SPI_Init+0x388>)
 80090d0:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4a3d      	ldr	r2, [pc, #244]	; (80091cc <HAL_SPI_Init+0x38c>)
 80090d6:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4a3d      	ldr	r2, [pc, #244]	; (80091d0 <HAL_SPI_Init+0x390>)
 80090dc:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	4a3c      	ldr	r2, [pc, #240]	; (80091d4 <HAL_SPI_Init+0x394>)
 80090e2:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d102      	bne.n	80090f2 <HAL_SPI_Init+0x2b2>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	4a3a      	ldr	r2, [pc, #232]	; (80091d8 <HAL_SPI_Init+0x398>)
 80090f0:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2202      	movs	r2, #2
 80090fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009110:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009122:	431a      	orrs	r2, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800912c:	431a      	orrs	r2, r3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	691b      	ldr	r3, [r3, #16]
 8009132:	f003 0302 	and.w	r3, r3, #2
 8009136:	431a      	orrs	r2, r3
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	695b      	ldr	r3, [r3, #20]
 800913c:	f003 0301 	and.w	r3, r3, #1
 8009140:	431a      	orrs	r2, r3
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	699b      	ldr	r3, [r3, #24]
 8009146:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800914a:	431a      	orrs	r2, r3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	69db      	ldr	r3, [r3, #28]
 8009150:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009154:	431a      	orrs	r2, r3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a1b      	ldr	r3, [r3, #32]
 800915a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800915e:	ea42 0103 	orr.w	r1, r2, r3
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009166:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	430a      	orrs	r2, r1
 8009170:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	699b      	ldr	r3, [r3, #24]
 8009176:	0c1b      	lsrs	r3, r3, #16
 8009178:	f003 0104 	and.w	r1, r3, #4
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009180:	f003 0210 	and.w	r2, r3, #16
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	430a      	orrs	r2, r1
 800918a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	69da      	ldr	r2, [r3, #28]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800919a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2201      	movs	r2, #1
 80091a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80091aa:	2300      	movs	r3, #0
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3708      	adds	r7, #8
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	0800f174 	.word	0x0800f174
 80091b8:	080093dd 	.word	0x080093dd
 80091bc:	080093f1 	.word	0x080093f1
 80091c0:	08009405 	.word	0x08009405
 80091c4:	08009419 	.word	0x08009419
 80091c8:	0800942d 	.word	0x0800942d
 80091cc:	08009441 	.word	0x08009441
 80091d0:	08009455 	.word	0x08009455
 80091d4:	08009469 	.word	0x08009469
 80091d8:	080031fd 	.word	0x080031fd

080091dc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b088      	sub	sp, #32
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80091f4:	69bb      	ldr	r3, [r7, #24]
 80091f6:	099b      	lsrs	r3, r3, #6
 80091f8:	f003 0301 	and.w	r3, r3, #1
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d10f      	bne.n	8009220 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00a      	beq.n	8009220 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	099b      	lsrs	r3, r3, #6
 800920e:	f003 0301 	and.w	r3, r3, #1
 8009212:	2b00      	cmp	r3, #0
 8009214:	d004      	beq.n	8009220 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	4798      	blx	r3
    return;
 800921e:	e0d8      	b.n	80093d2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	085b      	lsrs	r3, r3, #1
 8009224:	f003 0301 	and.w	r3, r3, #1
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00a      	beq.n	8009242 <HAL_SPI_IRQHandler+0x66>
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	09db      	lsrs	r3, r3, #7
 8009230:	f003 0301 	and.w	r3, r3, #1
 8009234:	2b00      	cmp	r3, #0
 8009236:	d004      	beq.n	8009242 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	4798      	blx	r3
    return;
 8009240:	e0c7      	b.n	80093d2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	095b      	lsrs	r3, r3, #5
 8009246:	f003 0301 	and.w	r3, r3, #1
 800924a:	2b00      	cmp	r3, #0
 800924c:	d10c      	bne.n	8009268 <HAL_SPI_IRQHandler+0x8c>
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	099b      	lsrs	r3, r3, #6
 8009252:	f003 0301 	and.w	r3, r3, #1
 8009256:	2b00      	cmp	r3, #0
 8009258:	d106      	bne.n	8009268 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	0a1b      	lsrs	r3, r3, #8
 800925e:	f003 0301 	and.w	r3, r3, #1
 8009262:	2b00      	cmp	r3, #0
 8009264:	f000 80b5 	beq.w	80093d2 <HAL_SPI_IRQHandler+0x1f6>
 8009268:	69fb      	ldr	r3, [r7, #28]
 800926a:	095b      	lsrs	r3, r3, #5
 800926c:	f003 0301 	and.w	r3, r3, #1
 8009270:	2b00      	cmp	r3, #0
 8009272:	f000 80ae 	beq.w	80093d2 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	099b      	lsrs	r3, r3, #6
 800927a:	f003 0301 	and.w	r3, r3, #1
 800927e:	2b00      	cmp	r3, #0
 8009280:	d023      	beq.n	80092ca <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009288:	b2db      	uxtb	r3, r3
 800928a:	2b03      	cmp	r3, #3
 800928c:	d011      	beq.n	80092b2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009292:	f043 0204 	orr.w	r2, r3, #4
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800929a:	2300      	movs	r3, #0
 800929c:	617b      	str	r3, [r7, #20]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	68db      	ldr	r3, [r3, #12]
 80092a4:	617b      	str	r3, [r7, #20]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	617b      	str	r3, [r7, #20]
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	e00b      	b.n	80092ca <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80092b2:	2300      	movs	r3, #0
 80092b4:	613b      	str	r3, [r7, #16]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	613b      	str	r3, [r7, #16]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	613b      	str	r3, [r7, #16]
 80092c6:	693b      	ldr	r3, [r7, #16]
        return;
 80092c8:	e083      	b.n	80093d2 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80092ca:	69bb      	ldr	r3, [r7, #24]
 80092cc:	095b      	lsrs	r3, r3, #5
 80092ce:	f003 0301 	and.w	r3, r3, #1
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d014      	beq.n	8009300 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092da:	f043 0201 	orr.w	r2, r3, #1
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80092e2:	2300      	movs	r3, #0
 80092e4:	60fb      	str	r3, [r7, #12]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	60fb      	str	r3, [r7, #12]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092fc:	601a      	str	r2, [r3, #0]
 80092fe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009300:	69bb      	ldr	r3, [r7, #24]
 8009302:	0a1b      	lsrs	r3, r3, #8
 8009304:	f003 0301 	and.w	r3, r3, #1
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00c      	beq.n	8009326 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009310:	f043 0208 	orr.w	r2, r3, #8
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009318:	2300      	movs	r3, #0
 800931a:	60bb      	str	r3, [r7, #8]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	60bb      	str	r3, [r7, #8]
 8009324:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800932a:	2b00      	cmp	r3, #0
 800932c:	d050      	beq.n	80093d0 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	685a      	ldr	r2, [r3, #4]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800933c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2201      	movs	r2, #1
 8009342:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	f003 0302 	and.w	r3, r3, #2
 800934c:	2b00      	cmp	r3, #0
 800934e:	d104      	bne.n	800935a <HAL_SPI_IRQHandler+0x17e>
 8009350:	69fb      	ldr	r3, [r7, #28]
 8009352:	f003 0301 	and.w	r3, r3, #1
 8009356:	2b00      	cmp	r3, #0
 8009358:	d034      	beq.n	80093c4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	685a      	ldr	r2, [r3, #4]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f022 0203 	bic.w	r2, r2, #3
 8009368:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800936e:	2b00      	cmp	r3, #0
 8009370:	d011      	beq.n	8009396 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009376:	4a18      	ldr	r2, [pc, #96]	; (80093d8 <HAL_SPI_IRQHandler+0x1fc>)
 8009378:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800937e:	4618      	mov	r0, r3
 8009380:	f7fc f8c0 	bl	8005504 <HAL_DMA_Abort_IT>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d005      	beq.n	8009396 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800938e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800939a:	2b00      	cmp	r3, #0
 800939c:	d017      	beq.n	80093ce <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093a2:	4a0d      	ldr	r2, [pc, #52]	; (80093d8 <HAL_SPI_IRQHandler+0x1fc>)
 80093a4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7fc f8aa 	bl	8005504 <HAL_DMA_Abort_IT>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00b      	beq.n	80093ce <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80093c2:	e004      	b.n	80093ce <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80093cc:	e000      	b.n	80093d0 <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 80093ce:	bf00      	nop
    return;
 80093d0:	bf00      	nop
  }
}
 80093d2:	3720      	adds	r7, #32
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	0800947d 	.word	0x0800947d

080093dc <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80093e4:	bf00      	nop
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80093f8:	bf00      	nop
 80093fa:	370c      	adds	r7, #12
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr

08009404 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800940c:	bf00      	nop
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009420:	bf00      	nop
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8009434:	bf00      	nop
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009448:	bf00      	nop
 800944a:	370c      	adds	r7, #12
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr

08009454 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800945c:	bf00      	nop
 800945e:	370c      	adds	r7, #12
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8009470:	bf00      	nop
 8009472:	370c      	adds	r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr

0800947c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009488:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2200      	movs	r2, #0
 8009494:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800949e:	bf00      	nop
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
	...

080094a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b082      	sub	sp, #8
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d101      	bne.n	80094ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80094b6:	2301      	movs	r3, #1
 80094b8:	e0b2      	b.n	8009620 <HAL_TIM_Base_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a5a      	ldr	r2, [pc, #360]	; (8009628 <HAL_TIM_Base_Init+0x180>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d027      	beq.n	8009514 <HAL_TIM_Base_Init+0x6c>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094cc:	d022      	beq.n	8009514 <HAL_TIM_Base_Init+0x6c>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a56      	ldr	r2, [pc, #344]	; (800962c <HAL_TIM_Base_Init+0x184>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d01d      	beq.n	8009514 <HAL_TIM_Base_Init+0x6c>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a54      	ldr	r2, [pc, #336]	; (8009630 <HAL_TIM_Base_Init+0x188>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d018      	beq.n	8009514 <HAL_TIM_Base_Init+0x6c>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a53      	ldr	r2, [pc, #332]	; (8009634 <HAL_TIM_Base_Init+0x18c>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d013      	beq.n	8009514 <HAL_TIM_Base_Init+0x6c>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a51      	ldr	r2, [pc, #324]	; (8009638 <HAL_TIM_Base_Init+0x190>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d00e      	beq.n	8009514 <HAL_TIM_Base_Init+0x6c>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a50      	ldr	r2, [pc, #320]	; (800963c <HAL_TIM_Base_Init+0x194>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d009      	beq.n	8009514 <HAL_TIM_Base_Init+0x6c>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a4e      	ldr	r2, [pc, #312]	; (8009640 <HAL_TIM_Base_Init+0x198>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d004      	beq.n	8009514 <HAL_TIM_Base_Init+0x6c>
 800950a:	f240 1113 	movw	r1, #275	; 0x113
 800950e:	484d      	ldr	r0, [pc, #308]	; (8009644 <HAL_TIM_Base_Init+0x19c>)
 8009510:	f7f9 fe33 	bl	800317a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d014      	beq.n	8009546 <HAL_TIM_Base_Init+0x9e>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	2b10      	cmp	r3, #16
 8009522:	d010      	beq.n	8009546 <HAL_TIM_Base_Init+0x9e>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	689b      	ldr	r3, [r3, #8]
 8009528:	2b20      	cmp	r3, #32
 800952a:	d00c      	beq.n	8009546 <HAL_TIM_Base_Init+0x9e>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	2b40      	cmp	r3, #64	; 0x40
 8009532:	d008      	beq.n	8009546 <HAL_TIM_Base_Init+0x9e>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	2b60      	cmp	r3, #96	; 0x60
 800953a:	d004      	beq.n	8009546 <HAL_TIM_Base_Init+0x9e>
 800953c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8009540:	4840      	ldr	r0, [pc, #256]	; (8009644 <HAL_TIM_Base_Init+0x19c>)
 8009542:	f7f9 fe1a 	bl	800317a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00e      	beq.n	800956c <HAL_TIM_Base_Init+0xc4>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	691b      	ldr	r3, [r3, #16]
 8009552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009556:	d009      	beq.n	800956c <HAL_TIM_Base_Init+0xc4>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	691b      	ldr	r3, [r3, #16]
 800955c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009560:	d004      	beq.n	800956c <HAL_TIM_Base_Init+0xc4>
 8009562:	f240 1115 	movw	r1, #277	; 0x115
 8009566:	4837      	ldr	r0, [pc, #220]	; (8009644 <HAL_TIM_Base_Init+0x19c>)
 8009568:	f7f9 fe07 	bl	800317a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	699b      	ldr	r3, [r3, #24]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d008      	beq.n	8009586 <HAL_TIM_Base_Init+0xde>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	699b      	ldr	r3, [r3, #24]
 8009578:	2b80      	cmp	r3, #128	; 0x80
 800957a:	d004      	beq.n	8009586 <HAL_TIM_Base_Init+0xde>
 800957c:	f44f 718b 	mov.w	r1, #278	; 0x116
 8009580:	4830      	ldr	r0, [pc, #192]	; (8009644 <HAL_TIM_Base_Init+0x19c>)
 8009582:	f7f9 fdfa 	bl	800317a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800958c:	b2db      	uxtb	r3, r3
 800958e:	2b00      	cmp	r3, #0
 8009590:	d111      	bne.n	80095b6 <HAL_TIM_Base_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2200      	movs	r2, #0
 8009596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 fefe 	bl	800a39c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d102      	bne.n	80095ae <HAL_TIM_Base_Init+0x106>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a27      	ldr	r2, [pc, #156]	; (8009648 <HAL_TIM_Base_Init+0x1a0>)
 80095ac:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2202      	movs	r2, #2
 80095ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	3304      	adds	r3, #4
 80095c6:	4619      	mov	r1, r3
 80095c8:	4610      	mov	r0, r2
 80095ca:	f000 fdcd 	bl	800a168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2201      	movs	r2, #1
 80095d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2201      	movs	r2, #1
 80095da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2201      	movs	r2, #1
 80095e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2201      	movs	r2, #1
 80095ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2201      	movs	r2, #1
 80095f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2201      	movs	r2, #1
 80095fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2201      	movs	r2, #1
 8009602:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2201      	movs	r2, #1
 800960a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2201      	movs	r2, #1
 8009612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2201      	movs	r2, #1
 800961a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800961e:	2300      	movs	r3, #0
}
 8009620:	4618      	mov	r0, r3
 8009622:	3708      	adds	r7, #8
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}
 8009628:	40010000 	.word	0x40010000
 800962c:	40000400 	.word	0x40000400
 8009630:	40000800 	.word	0x40000800
 8009634:	40000c00 	.word	0x40000c00
 8009638:	40014000 	.word	0x40014000
 800963c:	40014400 	.word	0x40014400
 8009640:	40014800 	.word	0x40014800
 8009644:	0800f1e8 	.word	0x0800f1e8
 8009648:	08003a1d 	.word	0x08003a1d

0800964c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a3d      	ldr	r2, [pc, #244]	; (8009750 <HAL_TIM_Base_Start_IT+0x104>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d027      	beq.n	80096ae <HAL_TIM_Base_Start_IT+0x62>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009666:	d022      	beq.n	80096ae <HAL_TIM_Base_Start_IT+0x62>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a39      	ldr	r2, [pc, #228]	; (8009754 <HAL_TIM_Base_Start_IT+0x108>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d01d      	beq.n	80096ae <HAL_TIM_Base_Start_IT+0x62>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a38      	ldr	r2, [pc, #224]	; (8009758 <HAL_TIM_Base_Start_IT+0x10c>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d018      	beq.n	80096ae <HAL_TIM_Base_Start_IT+0x62>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a36      	ldr	r2, [pc, #216]	; (800975c <HAL_TIM_Base_Start_IT+0x110>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d013      	beq.n	80096ae <HAL_TIM_Base_Start_IT+0x62>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a35      	ldr	r2, [pc, #212]	; (8009760 <HAL_TIM_Base_Start_IT+0x114>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d00e      	beq.n	80096ae <HAL_TIM_Base_Start_IT+0x62>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a33      	ldr	r2, [pc, #204]	; (8009764 <HAL_TIM_Base_Start_IT+0x118>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d009      	beq.n	80096ae <HAL_TIM_Base_Start_IT+0x62>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a32      	ldr	r2, [pc, #200]	; (8009768 <HAL_TIM_Base_Start_IT+0x11c>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d004      	beq.n	80096ae <HAL_TIM_Base_Start_IT+0x62>
 80096a4:	f240 11cf 	movw	r1, #463	; 0x1cf
 80096a8:	4830      	ldr	r0, [pc, #192]	; (800976c <HAL_TIM_Base_Start_IT+0x120>)
 80096aa:	f7f9 fd66 	bl	800317a <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d001      	beq.n	80096be <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	e044      	b.n	8009748 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2202      	movs	r2, #2
 80096c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	68da      	ldr	r2, [r3, #12]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f042 0201 	orr.w	r2, r2, #1
 80096d4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a1d      	ldr	r2, [pc, #116]	; (8009750 <HAL_TIM_Base_Start_IT+0x104>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d018      	beq.n	8009712 <HAL_TIM_Base_Start_IT+0xc6>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096e8:	d013      	beq.n	8009712 <HAL_TIM_Base_Start_IT+0xc6>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a19      	ldr	r2, [pc, #100]	; (8009754 <HAL_TIM_Base_Start_IT+0x108>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d00e      	beq.n	8009712 <HAL_TIM_Base_Start_IT+0xc6>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a17      	ldr	r2, [pc, #92]	; (8009758 <HAL_TIM_Base_Start_IT+0x10c>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d009      	beq.n	8009712 <HAL_TIM_Base_Start_IT+0xc6>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a16      	ldr	r2, [pc, #88]	; (800975c <HAL_TIM_Base_Start_IT+0x110>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d004      	beq.n	8009712 <HAL_TIM_Base_Start_IT+0xc6>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a14      	ldr	r2, [pc, #80]	; (8009760 <HAL_TIM_Base_Start_IT+0x114>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d111      	bne.n	8009736 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	689b      	ldr	r3, [r3, #8]
 8009718:	f003 0307 	and.w	r3, r3, #7
 800971c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2b06      	cmp	r3, #6
 8009722:	d010      	beq.n	8009746 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f042 0201 	orr.w	r2, r2, #1
 8009732:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009734:	e007      	b.n	8009746 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f042 0201 	orr.w	r2, r2, #1
 8009744:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009746:	2300      	movs	r3, #0
}
 8009748:	4618      	mov	r0, r3
 800974a:	3710      	adds	r7, #16
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}
 8009750:	40010000 	.word	0x40010000
 8009754:	40000400 	.word	0x40000400
 8009758:	40000800 	.word	0x40000800
 800975c:	40000c00 	.word	0x40000c00
 8009760:	40014000 	.word	0x40014000
 8009764:	40014400 	.word	0x40014400
 8009768:	40014800 	.word	0x40014800
 800976c:	0800f1e8 	.word	0x0800f1e8

08009770 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a29      	ldr	r2, [pc, #164]	; (8009824 <HAL_TIM_Base_Stop_IT+0xb4>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d027      	beq.n	80097d2 <HAL_TIM_Base_Stop_IT+0x62>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800978a:	d022      	beq.n	80097d2 <HAL_TIM_Base_Stop_IT+0x62>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a25      	ldr	r2, [pc, #148]	; (8009828 <HAL_TIM_Base_Stop_IT+0xb8>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d01d      	beq.n	80097d2 <HAL_TIM_Base_Stop_IT+0x62>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a24      	ldr	r2, [pc, #144]	; (800982c <HAL_TIM_Base_Stop_IT+0xbc>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d018      	beq.n	80097d2 <HAL_TIM_Base_Stop_IT+0x62>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a22      	ldr	r2, [pc, #136]	; (8009830 <HAL_TIM_Base_Stop_IT+0xc0>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d013      	beq.n	80097d2 <HAL_TIM_Base_Stop_IT+0x62>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a21      	ldr	r2, [pc, #132]	; (8009834 <HAL_TIM_Base_Stop_IT+0xc4>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d00e      	beq.n	80097d2 <HAL_TIM_Base_Stop_IT+0x62>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a1f      	ldr	r2, [pc, #124]	; (8009838 <HAL_TIM_Base_Stop_IT+0xc8>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d009      	beq.n	80097d2 <HAL_TIM_Base_Stop_IT+0x62>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a1e      	ldr	r2, [pc, #120]	; (800983c <HAL_TIM_Base_Stop_IT+0xcc>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d004      	beq.n	80097d2 <HAL_TIM_Base_Stop_IT+0x62>
 80097c8:	f240 11f7 	movw	r1, #503	; 0x1f7
 80097cc:	481c      	ldr	r0, [pc, #112]	; (8009840 <HAL_TIM_Base_Stop_IT+0xd0>)
 80097ce:	f7f9 fcd4 	bl	800317a <assert_failed>

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	68da      	ldr	r2, [r3, #12]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f022 0201 	bic.w	r2, r2, #1
 80097e0:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	6a1a      	ldr	r2, [r3, #32]
 80097e8:	f241 1311 	movw	r3, #4369	; 0x1111
 80097ec:	4013      	ands	r3, r2
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d10f      	bne.n	8009812 <HAL_TIM_Base_Stop_IT+0xa2>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	6a1a      	ldr	r2, [r3, #32]
 80097f8:	f240 4344 	movw	r3, #1092	; 0x444
 80097fc:	4013      	ands	r3, r2
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d107      	bne.n	8009812 <HAL_TIM_Base_Stop_IT+0xa2>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f022 0201 	bic.w	r2, r2, #1
 8009810:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2201      	movs	r2, #1
 8009816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800981a:	2300      	movs	r3, #0
}
 800981c:	4618      	mov	r0, r3
 800981e:	3708      	adds	r7, #8
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	40010000 	.word	0x40010000
 8009828:	40000400 	.word	0x40000400
 800982c:	40000800 	.word	0x40000800
 8009830:	40000c00 	.word	0x40000c00
 8009834:	40014000 	.word	0x40014000
 8009838:	40014400 	.word	0x40014400
 800983c:	40014800 	.word	0x40014800
 8009840:	0800f1e8 	.word	0x0800f1e8

08009844 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	691b      	ldr	r3, [r3, #16]
 8009852:	f003 0302 	and.w	r3, r3, #2
 8009856:	2b02      	cmp	r3, #2
 8009858:	d128      	bne.n	80098ac <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	f003 0302 	and.w	r3, r3, #2
 8009864:	2b02      	cmp	r3, #2
 8009866:	d121      	bne.n	80098ac <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f06f 0202 	mvn.w	r2, #2
 8009870:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2201      	movs	r2, #1
 8009876:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	699b      	ldr	r3, [r3, #24]
 800987e:	f003 0303 	and.w	r3, r3, #3
 8009882:	2b00      	cmp	r3, #0
 8009884:	d005      	beq.n	8009892 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	4798      	blx	r3
 8009890:	e009      	b.n	80098a6 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2200      	movs	r2, #0
 80098aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	691b      	ldr	r3, [r3, #16]
 80098b2:	f003 0304 	and.w	r3, r3, #4
 80098b6:	2b04      	cmp	r3, #4
 80098b8:	d128      	bne.n	800990c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	f003 0304 	and.w	r3, r3, #4
 80098c4:	2b04      	cmp	r3, #4
 80098c6:	d121      	bne.n	800990c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f06f 0204 	mvn.w	r2, #4
 80098d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2202      	movs	r2, #2
 80098d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	699b      	ldr	r3, [r3, #24]
 80098de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d005      	beq.n	80098f2 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	4798      	blx	r3
 80098f0:	e009      	b.n	8009906 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2200      	movs	r2, #0
 800990a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	691b      	ldr	r3, [r3, #16]
 8009912:	f003 0308 	and.w	r3, r3, #8
 8009916:	2b08      	cmp	r3, #8
 8009918:	d128      	bne.n	800996c <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	68db      	ldr	r3, [r3, #12]
 8009920:	f003 0308 	and.w	r3, r3, #8
 8009924:	2b08      	cmp	r3, #8
 8009926:	d121      	bne.n	800996c <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f06f 0208 	mvn.w	r2, #8
 8009930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2204      	movs	r2, #4
 8009936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	69db      	ldr	r3, [r3, #28]
 800993e:	f003 0303 	and.w	r3, r3, #3
 8009942:	2b00      	cmp	r3, #0
 8009944:	d005      	beq.n	8009952 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	4798      	blx	r3
 8009950:	e009      	b.n	8009966 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2200      	movs	r2, #0
 800996a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	691b      	ldr	r3, [r3, #16]
 8009972:	f003 0310 	and.w	r3, r3, #16
 8009976:	2b10      	cmp	r3, #16
 8009978:	d128      	bne.n	80099cc <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	f003 0310 	and.w	r3, r3, #16
 8009984:	2b10      	cmp	r3, #16
 8009986:	d121      	bne.n	80099cc <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f06f 0210 	mvn.w	r2, #16
 8009990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2208      	movs	r2, #8
 8009996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	69db      	ldr	r3, [r3, #28]
 800999e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d005      	beq.n	80099b2 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	4798      	blx	r3
 80099b0:	e009      	b.n	80099c6 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	f003 0301 	and.w	r3, r3, #1
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d110      	bne.n	80099fc <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	f003 0301 	and.w	r3, r3, #1
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d109      	bne.n	80099fc <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f06f 0201 	mvn.w	r2, #1
 80099f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	691b      	ldr	r3, [r3, #16]
 8009a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a06:	2b80      	cmp	r3, #128	; 0x80
 8009a08:	d110      	bne.n	8009a2c <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a14:	2b80      	cmp	r3, #128	; 0x80
 8009a16:	d109      	bne.n	8009a2c <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	691b      	ldr	r3, [r3, #16]
 8009a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a36:	2b40      	cmp	r3, #64	; 0x40
 8009a38:	d110      	bne.n	8009a5c <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a44:	2b40      	cmp	r3, #64	; 0x40
 8009a46:	d109      	bne.n	8009a5c <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	691b      	ldr	r3, [r3, #16]
 8009a62:	f003 0320 	and.w	r3, r3, #32
 8009a66:	2b20      	cmp	r3, #32
 8009a68:	d110      	bne.n	8009a8c <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	f003 0320 	and.w	r3, r3, #32
 8009a74:	2b20      	cmp	r3, #32
 8009a76:	d109      	bne.n	8009a8c <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f06f 0220 	mvn.w	r2, #32
 8009a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a8c:	bf00      	nop
 8009a8e:	3708      	adds	r7, #8
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b084      	sub	sp, #16
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d101      	bne.n	8009ab0 <HAL_TIM_ConfigClockSource+0x1c>
 8009aac:	2302      	movs	r3, #2
 8009aae:	e2f0      	b.n	800a092 <HAL_TIM_ConfigClockSource+0x5fe>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2202      	movs	r2, #2
 8009abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ac8:	d029      	beq.n	8009b1e <HAL_TIM_ConfigClockSource+0x8a>
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	2b70      	cmp	r3, #112	; 0x70
 8009ad0:	d025      	beq.n	8009b1e <HAL_TIM_ConfigClockSource+0x8a>
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ada:	d020      	beq.n	8009b1e <HAL_TIM_ConfigClockSource+0x8a>
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2b40      	cmp	r3, #64	; 0x40
 8009ae2:	d01c      	beq.n	8009b1e <HAL_TIM_ConfigClockSource+0x8a>
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2b50      	cmp	r3, #80	; 0x50
 8009aea:	d018      	beq.n	8009b1e <HAL_TIM_ConfigClockSource+0x8a>
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2b60      	cmp	r3, #96	; 0x60
 8009af2:	d014      	beq.n	8009b1e <HAL_TIM_ConfigClockSource+0x8a>
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d010      	beq.n	8009b1e <HAL_TIM_ConfigClockSource+0x8a>
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2b10      	cmp	r3, #16
 8009b02:	d00c      	beq.n	8009b1e <HAL_TIM_ConfigClockSource+0x8a>
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2b20      	cmp	r3, #32
 8009b0a:	d008      	beq.n	8009b1e <HAL_TIM_ConfigClockSource+0x8a>
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2b30      	cmp	r3, #48	; 0x30
 8009b12:	d004      	beq.n	8009b1e <HAL_TIM_ConfigClockSource+0x8a>
 8009b14:	f241 41b7 	movw	r1, #5303	; 0x14b7
 8009b18:	487c      	ldr	r0, [pc, #496]	; (8009d0c <HAL_TIM_ConfigClockSource+0x278>)
 8009b1a:	f7f9 fb2e 	bl	800317a <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009b2c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b34:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	68ba      	ldr	r2, [r7, #8]
 8009b3c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b46:	f000 80f1 	beq.w	8009d2c <HAL_TIM_ConfigClockSource+0x298>
 8009b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b4e:	f200 8293 	bhi.w	800a078 <HAL_TIM_ConfigClockSource+0x5e4>
 8009b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b56:	d02d      	beq.n	8009bb4 <HAL_TIM_ConfigClockSource+0x120>
 8009b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b5c:	f200 828c 	bhi.w	800a078 <HAL_TIM_ConfigClockSource+0x5e4>
 8009b60:	2b70      	cmp	r3, #112	; 0x70
 8009b62:	d05d      	beq.n	8009c20 <HAL_TIM_ConfigClockSource+0x18c>
 8009b64:	2b70      	cmp	r3, #112	; 0x70
 8009b66:	f200 8287 	bhi.w	800a078 <HAL_TIM_ConfigClockSource+0x5e4>
 8009b6a:	2b60      	cmp	r3, #96	; 0x60
 8009b6c:	f000 81a0 	beq.w	8009eb0 <HAL_TIM_ConfigClockSource+0x41c>
 8009b70:	2b60      	cmp	r3, #96	; 0x60
 8009b72:	f200 8281 	bhi.w	800a078 <HAL_TIM_ConfigClockSource+0x5e4>
 8009b76:	2b50      	cmp	r3, #80	; 0x50
 8009b78:	f000 8144 	beq.w	8009e04 <HAL_TIM_ConfigClockSource+0x370>
 8009b7c:	2b50      	cmp	r3, #80	; 0x50
 8009b7e:	f200 827b 	bhi.w	800a078 <HAL_TIM_ConfigClockSource+0x5e4>
 8009b82:	2b40      	cmp	r3, #64	; 0x40
 8009b84:	f000 81f6 	beq.w	8009f74 <HAL_TIM_ConfigClockSource+0x4e0>
 8009b88:	2b40      	cmp	r3, #64	; 0x40
 8009b8a:	f200 8275 	bhi.w	800a078 <HAL_TIM_ConfigClockSource+0x5e4>
 8009b8e:	2b30      	cmp	r3, #48	; 0x30
 8009b90:	f000 8246 	beq.w	800a020 <HAL_TIM_ConfigClockSource+0x58c>
 8009b94:	2b30      	cmp	r3, #48	; 0x30
 8009b96:	f200 826f 	bhi.w	800a078 <HAL_TIM_ConfigClockSource+0x5e4>
 8009b9a:	2b20      	cmp	r3, #32
 8009b9c:	f000 8240 	beq.w	800a020 <HAL_TIM_ConfigClockSource+0x58c>
 8009ba0:	2b20      	cmp	r3, #32
 8009ba2:	f200 8269 	bhi.w	800a078 <HAL_TIM_ConfigClockSource+0x5e4>
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	f000 823a 	beq.w	800a020 <HAL_TIM_ConfigClockSource+0x58c>
 8009bac:	2b10      	cmp	r3, #16
 8009bae:	f000 8237 	beq.w	800a020 <HAL_TIM_ConfigClockSource+0x58c>
 8009bb2:	e261      	b.n	800a078 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a55      	ldr	r2, [pc, #340]	; (8009d10 <HAL_TIM_ConfigClockSource+0x27c>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	f000 825f 	beq.w	800a07e <HAL_TIM_ConfigClockSource+0x5ea>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bc8:	f000 8259 	beq.w	800a07e <HAL_TIM_ConfigClockSource+0x5ea>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a50      	ldr	r2, [pc, #320]	; (8009d14 <HAL_TIM_ConfigClockSource+0x280>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	f000 8253 	beq.w	800a07e <HAL_TIM_ConfigClockSource+0x5ea>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a4e      	ldr	r2, [pc, #312]	; (8009d18 <HAL_TIM_ConfigClockSource+0x284>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	f000 824d 	beq.w	800a07e <HAL_TIM_ConfigClockSource+0x5ea>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a4c      	ldr	r2, [pc, #304]	; (8009d1c <HAL_TIM_ConfigClockSource+0x288>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	f000 8247 	beq.w	800a07e <HAL_TIM_ConfigClockSource+0x5ea>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a4a      	ldr	r2, [pc, #296]	; (8009d20 <HAL_TIM_ConfigClockSource+0x28c>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	f000 8241 	beq.w	800a07e <HAL_TIM_ConfigClockSource+0x5ea>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a48      	ldr	r2, [pc, #288]	; (8009d24 <HAL_TIM_ConfigClockSource+0x290>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	f000 823b 	beq.w	800a07e <HAL_TIM_ConfigClockSource+0x5ea>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a46      	ldr	r2, [pc, #280]	; (8009d28 <HAL_TIM_ConfigClockSource+0x294>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	f000 8235 	beq.w	800a07e <HAL_TIM_ConfigClockSource+0x5ea>
 8009c14:	f241 41c3 	movw	r1, #5315	; 0x14c3
 8009c18:	483c      	ldr	r0, [pc, #240]	; (8009d0c <HAL_TIM_ConfigClockSource+0x278>)
 8009c1a:	f7f9 faae 	bl	800317a <assert_failed>
      break;
 8009c1e:	e22e      	b.n	800a07e <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a3a      	ldr	r2, [pc, #232]	; (8009d10 <HAL_TIM_ConfigClockSource+0x27c>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d01d      	beq.n	8009c66 <HAL_TIM_ConfigClockSource+0x1d2>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c32:	d018      	beq.n	8009c66 <HAL_TIM_ConfigClockSource+0x1d2>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a36      	ldr	r2, [pc, #216]	; (8009d14 <HAL_TIM_ConfigClockSource+0x280>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d013      	beq.n	8009c66 <HAL_TIM_ConfigClockSource+0x1d2>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a35      	ldr	r2, [pc, #212]	; (8009d18 <HAL_TIM_ConfigClockSource+0x284>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d00e      	beq.n	8009c66 <HAL_TIM_ConfigClockSource+0x1d2>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4a33      	ldr	r2, [pc, #204]	; (8009d1c <HAL_TIM_ConfigClockSource+0x288>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d009      	beq.n	8009c66 <HAL_TIM_ConfigClockSource+0x1d2>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4a32      	ldr	r2, [pc, #200]	; (8009d20 <HAL_TIM_ConfigClockSource+0x28c>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d004      	beq.n	8009c66 <HAL_TIM_ConfigClockSource+0x1d2>
 8009c5c:	f241 41ca 	movw	r1, #5322	; 0x14ca
 8009c60:	482a      	ldr	r0, [pc, #168]	; (8009d0c <HAL_TIM_ConfigClockSource+0x278>)
 8009c62:	f7f9 fa8a 	bl	800317a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	689b      	ldr	r3, [r3, #8]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d013      	beq.n	8009c96 <HAL_TIM_ConfigClockSource+0x202>
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	689b      	ldr	r3, [r3, #8]
 8009c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c76:	d00e      	beq.n	8009c96 <HAL_TIM_ConfigClockSource+0x202>
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c80:	d009      	beq.n	8009c96 <HAL_TIM_ConfigClockSource+0x202>
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	689b      	ldr	r3, [r3, #8]
 8009c86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c8a:	d004      	beq.n	8009c96 <HAL_TIM_ConfigClockSource+0x202>
 8009c8c:	f241 41cd 	movw	r1, #5325	; 0x14cd
 8009c90:	481e      	ldr	r0, [pc, #120]	; (8009d0c <HAL_TIM_ConfigClockSource+0x278>)
 8009c92:	f7f9 fa72 	bl	800317a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c9e:	d014      	beq.n	8009cca <HAL_TIM_ConfigClockSource+0x236>
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d010      	beq.n	8009cca <HAL_TIM_ConfigClockSource+0x236>
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d00c      	beq.n	8009cca <HAL_TIM_ConfigClockSource+0x236>
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	2b02      	cmp	r3, #2
 8009cb6:	d008      	beq.n	8009cca <HAL_TIM_ConfigClockSource+0x236>
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	2b0a      	cmp	r3, #10
 8009cbe:	d004      	beq.n	8009cca <HAL_TIM_ConfigClockSource+0x236>
 8009cc0:	f241 41ce 	movw	r1, #5326	; 0x14ce
 8009cc4:	4811      	ldr	r0, [pc, #68]	; (8009d0c <HAL_TIM_ConfigClockSource+0x278>)
 8009cc6:	f7f9 fa58 	bl	800317a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	2b0f      	cmp	r3, #15
 8009cd0:	d904      	bls.n	8009cdc <HAL_TIM_ConfigClockSource+0x248>
 8009cd2:	f241 41cf 	movw	r1, #5327	; 0x14cf
 8009cd6:	480d      	ldr	r0, [pc, #52]	; (8009d0c <HAL_TIM_ConfigClockSource+0x278>)
 8009cd8:	f7f9 fa4f 	bl	800317a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6818      	ldr	r0, [r3, #0]
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	6899      	ldr	r1, [r3, #8]
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	685a      	ldr	r2, [r3, #4]
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	68db      	ldr	r3, [r3, #12]
 8009cec:	f000 fb36 	bl	800a35c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009cfe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	68ba      	ldr	r2, [r7, #8]
 8009d06:	609a      	str	r2, [r3, #8]
      break;
 8009d08:	e1ba      	b.n	800a080 <HAL_TIM_ConfigClockSource+0x5ec>
 8009d0a:	bf00      	nop
 8009d0c:	0800f1e8 	.word	0x0800f1e8
 8009d10:	40010000 	.word	0x40010000
 8009d14:	40000400 	.word	0x40000400
 8009d18:	40000800 	.word	0x40000800
 8009d1c:	40000c00 	.word	0x40000c00
 8009d20:	40014000 	.word	0x40014000
 8009d24:	40014400 	.word	0x40014400
 8009d28:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a8a      	ldr	r2, [pc, #552]	; (8009f5c <HAL_TIM_ConfigClockSource+0x4c8>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d018      	beq.n	8009d68 <HAL_TIM_ConfigClockSource+0x2d4>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d3e:	d013      	beq.n	8009d68 <HAL_TIM_ConfigClockSource+0x2d4>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a86      	ldr	r2, [pc, #536]	; (8009f60 <HAL_TIM_ConfigClockSource+0x4cc>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d00e      	beq.n	8009d68 <HAL_TIM_ConfigClockSource+0x2d4>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a85      	ldr	r2, [pc, #532]	; (8009f64 <HAL_TIM_ConfigClockSource+0x4d0>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d009      	beq.n	8009d68 <HAL_TIM_ConfigClockSource+0x2d4>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a83      	ldr	r2, [pc, #524]	; (8009f68 <HAL_TIM_ConfigClockSource+0x4d4>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d004      	beq.n	8009d68 <HAL_TIM_ConfigClockSource+0x2d4>
 8009d5e:	f241 41e2 	movw	r1, #5346	; 0x14e2
 8009d62:	4882      	ldr	r0, [pc, #520]	; (8009f6c <HAL_TIM_ConfigClockSource+0x4d8>)
 8009d64:	f7f9 fa09 	bl	800317a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d013      	beq.n	8009d98 <HAL_TIM_ConfigClockSource+0x304>
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d78:	d00e      	beq.n	8009d98 <HAL_TIM_ConfigClockSource+0x304>
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	689b      	ldr	r3, [r3, #8]
 8009d7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d82:	d009      	beq.n	8009d98 <HAL_TIM_ConfigClockSource+0x304>
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009d8c:	d004      	beq.n	8009d98 <HAL_TIM_ConfigClockSource+0x304>
 8009d8e:	f241 41e5 	movw	r1, #5349	; 0x14e5
 8009d92:	4876      	ldr	r0, [pc, #472]	; (8009f6c <HAL_TIM_ConfigClockSource+0x4d8>)
 8009d94:	f7f9 f9f1 	bl	800317a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009da0:	d014      	beq.n	8009dcc <HAL_TIM_ConfigClockSource+0x338>
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d010      	beq.n	8009dcc <HAL_TIM_ConfigClockSource+0x338>
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d00c      	beq.n	8009dcc <HAL_TIM_ConfigClockSource+0x338>
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	2b02      	cmp	r3, #2
 8009db8:	d008      	beq.n	8009dcc <HAL_TIM_ConfigClockSource+0x338>
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	2b0a      	cmp	r3, #10
 8009dc0:	d004      	beq.n	8009dcc <HAL_TIM_ConfigClockSource+0x338>
 8009dc2:	f241 41e6 	movw	r1, #5350	; 0x14e6
 8009dc6:	4869      	ldr	r0, [pc, #420]	; (8009f6c <HAL_TIM_ConfigClockSource+0x4d8>)
 8009dc8:	f7f9 f9d7 	bl	800317a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	68db      	ldr	r3, [r3, #12]
 8009dd0:	2b0f      	cmp	r3, #15
 8009dd2:	d904      	bls.n	8009dde <HAL_TIM_ConfigClockSource+0x34a>
 8009dd4:	f241 41e7 	movw	r1, #5351	; 0x14e7
 8009dd8:	4864      	ldr	r0, [pc, #400]	; (8009f6c <HAL_TIM_ConfigClockSource+0x4d8>)
 8009dda:	f7f9 f9ce 	bl	800317a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6818      	ldr	r0, [r3, #0]
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	6899      	ldr	r1, [r3, #8]
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	685a      	ldr	r2, [r3, #4]
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	f000 fab5 	bl	800a35c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	689a      	ldr	r2, [r3, #8]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e00:	609a      	str	r2, [r3, #8]
      break;
 8009e02:	e13d      	b.n	800a080 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a54      	ldr	r2, [pc, #336]	; (8009f5c <HAL_TIM_ConfigClockSource+0x4c8>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d01d      	beq.n	8009e4a <HAL_TIM_ConfigClockSource+0x3b6>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e16:	d018      	beq.n	8009e4a <HAL_TIM_ConfigClockSource+0x3b6>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a50      	ldr	r2, [pc, #320]	; (8009f60 <HAL_TIM_ConfigClockSource+0x4cc>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d013      	beq.n	8009e4a <HAL_TIM_ConfigClockSource+0x3b6>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a4f      	ldr	r2, [pc, #316]	; (8009f64 <HAL_TIM_ConfigClockSource+0x4d0>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d00e      	beq.n	8009e4a <HAL_TIM_ConfigClockSource+0x3b6>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a4d      	ldr	r2, [pc, #308]	; (8009f68 <HAL_TIM_ConfigClockSource+0x4d4>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d009      	beq.n	8009e4a <HAL_TIM_ConfigClockSource+0x3b6>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a4d      	ldr	r2, [pc, #308]	; (8009f70 <HAL_TIM_ConfigClockSource+0x4dc>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d004      	beq.n	8009e4a <HAL_TIM_ConfigClockSource+0x3b6>
 8009e40:	f241 41f6 	movw	r1, #5366	; 0x14f6
 8009e44:	4849      	ldr	r0, [pc, #292]	; (8009f6c <HAL_TIM_ConfigClockSource+0x4d8>)
 8009e46:	f7f9 f998 	bl	800317a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e52:	d014      	beq.n	8009e7e <HAL_TIM_ConfigClockSource+0x3ea>
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d010      	beq.n	8009e7e <HAL_TIM_ConfigClockSource+0x3ea>
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d00c      	beq.n	8009e7e <HAL_TIM_ConfigClockSource+0x3ea>
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	2b02      	cmp	r3, #2
 8009e6a:	d008      	beq.n	8009e7e <HAL_TIM_ConfigClockSource+0x3ea>
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	2b0a      	cmp	r3, #10
 8009e72:	d004      	beq.n	8009e7e <HAL_TIM_ConfigClockSource+0x3ea>
 8009e74:	f241 41f9 	movw	r1, #5369	; 0x14f9
 8009e78:	483c      	ldr	r0, [pc, #240]	; (8009f6c <HAL_TIM_ConfigClockSource+0x4d8>)
 8009e7a:	f7f9 f97e 	bl	800317a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	2b0f      	cmp	r3, #15
 8009e84:	d904      	bls.n	8009e90 <HAL_TIM_ConfigClockSource+0x3fc>
 8009e86:	f241 41fa 	movw	r1, #5370	; 0x14fa
 8009e8a:	4838      	ldr	r0, [pc, #224]	; (8009f6c <HAL_TIM_ConfigClockSource+0x4d8>)
 8009e8c:	f7f9 f975 	bl	800317a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6818      	ldr	r0, [r3, #0]
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	6859      	ldr	r1, [r3, #4]
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	f000 f9e3 	bl	800a268 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	2150      	movs	r1, #80	; 0x50
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f000 fa3c 	bl	800a326 <TIM_ITRx_SetConfig>
      break;
 8009eae:	e0e7      	b.n	800a080 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a29      	ldr	r2, [pc, #164]	; (8009f5c <HAL_TIM_ConfigClockSource+0x4c8>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d01d      	beq.n	8009ef6 <HAL_TIM_ConfigClockSource+0x462>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ec2:	d018      	beq.n	8009ef6 <HAL_TIM_ConfigClockSource+0x462>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a25      	ldr	r2, [pc, #148]	; (8009f60 <HAL_TIM_ConfigClockSource+0x4cc>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d013      	beq.n	8009ef6 <HAL_TIM_ConfigClockSource+0x462>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4a24      	ldr	r2, [pc, #144]	; (8009f64 <HAL_TIM_ConfigClockSource+0x4d0>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d00e      	beq.n	8009ef6 <HAL_TIM_ConfigClockSource+0x462>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a22      	ldr	r2, [pc, #136]	; (8009f68 <HAL_TIM_ConfigClockSource+0x4d4>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d009      	beq.n	8009ef6 <HAL_TIM_ConfigClockSource+0x462>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4a22      	ldr	r2, [pc, #136]	; (8009f70 <HAL_TIM_ConfigClockSource+0x4dc>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d004      	beq.n	8009ef6 <HAL_TIM_ConfigClockSource+0x462>
 8009eec:	f241 5106 	movw	r1, #5382	; 0x1506
 8009ef0:	481e      	ldr	r0, [pc, #120]	; (8009f6c <HAL_TIM_ConfigClockSource+0x4d8>)
 8009ef2:	f7f9 f942 	bl	800317a <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009efe:	d014      	beq.n	8009f2a <HAL_TIM_ConfigClockSource+0x496>
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d010      	beq.n	8009f2a <HAL_TIM_ConfigClockSource+0x496>
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00c      	beq.n	8009f2a <HAL_TIM_ConfigClockSource+0x496>
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	2b02      	cmp	r3, #2
 8009f16:	d008      	beq.n	8009f2a <HAL_TIM_ConfigClockSource+0x496>
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	2b0a      	cmp	r3, #10
 8009f1e:	d004      	beq.n	8009f2a <HAL_TIM_ConfigClockSource+0x496>
 8009f20:	f241 5109 	movw	r1, #5385	; 0x1509
 8009f24:	4811      	ldr	r0, [pc, #68]	; (8009f6c <HAL_TIM_ConfigClockSource+0x4d8>)
 8009f26:	f7f9 f928 	bl	800317a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	2b0f      	cmp	r3, #15
 8009f30:	d904      	bls.n	8009f3c <HAL_TIM_ConfigClockSource+0x4a8>
 8009f32:	f241 510a 	movw	r1, #5386	; 0x150a
 8009f36:	480d      	ldr	r0, [pc, #52]	; (8009f6c <HAL_TIM_ConfigClockSource+0x4d8>)
 8009f38:	f7f9 f91f 	bl	800317a <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6818      	ldr	r0, [r3, #0]
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	6859      	ldr	r1, [r3, #4]
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	461a      	mov	r2, r3
 8009f4a:	f000 f9bc 	bl	800a2c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	2160      	movs	r1, #96	; 0x60
 8009f54:	4618      	mov	r0, r3
 8009f56:	f000 f9e6 	bl	800a326 <TIM_ITRx_SetConfig>
      break;
 8009f5a:	e091      	b.n	800a080 <HAL_TIM_ConfigClockSource+0x5ec>
 8009f5c:	40010000 	.word	0x40010000
 8009f60:	40000400 	.word	0x40000400
 8009f64:	40000800 	.word	0x40000800
 8009f68:	40000c00 	.word	0x40000c00
 8009f6c:	0800f1e8 	.word	0x0800f1e8
 8009f70:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a48      	ldr	r2, [pc, #288]	; (800a09c <HAL_TIM_ConfigClockSource+0x608>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d01d      	beq.n	8009fba <HAL_TIM_ConfigClockSource+0x526>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f86:	d018      	beq.n	8009fba <HAL_TIM_ConfigClockSource+0x526>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a44      	ldr	r2, [pc, #272]	; (800a0a0 <HAL_TIM_ConfigClockSource+0x60c>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d013      	beq.n	8009fba <HAL_TIM_ConfigClockSource+0x526>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4a43      	ldr	r2, [pc, #268]	; (800a0a4 <HAL_TIM_ConfigClockSource+0x610>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d00e      	beq.n	8009fba <HAL_TIM_ConfigClockSource+0x526>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a41      	ldr	r2, [pc, #260]	; (800a0a8 <HAL_TIM_ConfigClockSource+0x614>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d009      	beq.n	8009fba <HAL_TIM_ConfigClockSource+0x526>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a40      	ldr	r2, [pc, #256]	; (800a0ac <HAL_TIM_ConfigClockSource+0x618>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d004      	beq.n	8009fba <HAL_TIM_ConfigClockSource+0x526>
 8009fb0:	f241 5116 	movw	r1, #5398	; 0x1516
 8009fb4:	483e      	ldr	r0, [pc, #248]	; (800a0b0 <HAL_TIM_ConfigClockSource+0x61c>)
 8009fb6:	f7f9 f8e0 	bl	800317a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fc2:	d014      	beq.n	8009fee <HAL_TIM_ConfigClockSource+0x55a>
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d010      	beq.n	8009fee <HAL_TIM_ConfigClockSource+0x55a>
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d00c      	beq.n	8009fee <HAL_TIM_ConfigClockSource+0x55a>
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	2b02      	cmp	r3, #2
 8009fda:	d008      	beq.n	8009fee <HAL_TIM_ConfigClockSource+0x55a>
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	2b0a      	cmp	r3, #10
 8009fe2:	d004      	beq.n	8009fee <HAL_TIM_ConfigClockSource+0x55a>
 8009fe4:	f241 5119 	movw	r1, #5401	; 0x1519
 8009fe8:	4831      	ldr	r0, [pc, #196]	; (800a0b0 <HAL_TIM_ConfigClockSource+0x61c>)
 8009fea:	f7f9 f8c6 	bl	800317a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	2b0f      	cmp	r3, #15
 8009ff4:	d904      	bls.n	800a000 <HAL_TIM_ConfigClockSource+0x56c>
 8009ff6:	f241 511a 	movw	r1, #5402	; 0x151a
 8009ffa:	482d      	ldr	r0, [pc, #180]	; (800a0b0 <HAL_TIM_ConfigClockSource+0x61c>)
 8009ffc:	f7f9 f8bd 	bl	800317a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6818      	ldr	r0, [r3, #0]
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	6859      	ldr	r1, [r3, #4]
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	461a      	mov	r2, r3
 800a00e:	f000 f92b 	bl	800a268 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	2140      	movs	r1, #64	; 0x40
 800a018:	4618      	mov	r0, r3
 800a01a:	f000 f984 	bl	800a326 <TIM_ITRx_SetConfig>
      break;
 800a01e:	e02f      	b.n	800a080 <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4a1d      	ldr	r2, [pc, #116]	; (800a09c <HAL_TIM_ConfigClockSource+0x608>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d01d      	beq.n	800a066 <HAL_TIM_ConfigClockSource+0x5d2>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a032:	d018      	beq.n	800a066 <HAL_TIM_ConfigClockSource+0x5d2>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a19      	ldr	r2, [pc, #100]	; (800a0a0 <HAL_TIM_ConfigClockSource+0x60c>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d013      	beq.n	800a066 <HAL_TIM_ConfigClockSource+0x5d2>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4a18      	ldr	r2, [pc, #96]	; (800a0a4 <HAL_TIM_ConfigClockSource+0x610>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d00e      	beq.n	800a066 <HAL_TIM_ConfigClockSource+0x5d2>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a16      	ldr	r2, [pc, #88]	; (800a0a8 <HAL_TIM_ConfigClockSource+0x614>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d009      	beq.n	800a066 <HAL_TIM_ConfigClockSource+0x5d2>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4a15      	ldr	r2, [pc, #84]	; (800a0ac <HAL_TIM_ConfigClockSource+0x618>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d004      	beq.n	800a066 <HAL_TIM_ConfigClockSource+0x5d2>
 800a05c:	f241 5129 	movw	r1, #5417	; 0x1529
 800a060:	4813      	ldr	r0, [pc, #76]	; (800a0b0 <HAL_TIM_ConfigClockSource+0x61c>)
 800a062:	f7f9 f88a 	bl	800317a <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4619      	mov	r1, r3
 800a070:	4610      	mov	r0, r2
 800a072:	f000 f958 	bl	800a326 <TIM_ITRx_SetConfig>
      break;
 800a076:	e003      	b.n	800a080 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 800a078:	2301      	movs	r3, #1
 800a07a:	73fb      	strb	r3, [r7, #15]
      break;
 800a07c:	e000      	b.n	800a080 <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 800a07e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2201      	movs	r2, #1
 800a084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a090:	7bfb      	ldrb	r3, [r7, #15]
}
 800a092:	4618      	mov	r0, r3
 800a094:	3710      	adds	r7, #16
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop
 800a09c:	40010000 	.word	0x40010000
 800a0a0:	40000400 	.word	0x40000400
 800a0a4:	40000800 	.word	0x40000800
 800a0a8:	40000c00 	.word	0x40000c00
 800a0ac:	40014000 	.word	0x40014000
 800a0b0:	0800f1e8 	.word	0x0800f1e8

0800a0b4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800a0bc:	bf00      	nop
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a0d0:	bf00      	nop
 800a0d2:	370c      	adds	r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr

0800a0dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a0e4:	bf00      	nop
 800a0e6:	370c      	adds	r7, #12
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800a0f8:	bf00      	nop
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a10c:	bf00      	nop
 800a10e:	370c      	adds	r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a120:	bf00      	nop
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr

0800a12c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b083      	sub	sp, #12
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a134:	bf00      	nop
 800a136:	370c      	adds	r7, #12
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a140:	b480      	push	{r7}
 800a142:	b083      	sub	sp, #12
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800a148:	bf00      	nop
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a15c:	bf00      	nop
 800a15e:	370c      	adds	r7, #12
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a168:	b480      	push	{r7}
 800a16a:	b085      	sub	sp, #20
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4a34      	ldr	r2, [pc, #208]	; (800a24c <TIM_Base_SetConfig+0xe4>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d00f      	beq.n	800a1a0 <TIM_Base_SetConfig+0x38>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a186:	d00b      	beq.n	800a1a0 <TIM_Base_SetConfig+0x38>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	4a31      	ldr	r2, [pc, #196]	; (800a250 <TIM_Base_SetConfig+0xe8>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d007      	beq.n	800a1a0 <TIM_Base_SetConfig+0x38>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4a30      	ldr	r2, [pc, #192]	; (800a254 <TIM_Base_SetConfig+0xec>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d003      	beq.n	800a1a0 <TIM_Base_SetConfig+0x38>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	4a2f      	ldr	r2, [pc, #188]	; (800a258 <TIM_Base_SetConfig+0xf0>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d108      	bne.n	800a1b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	68fa      	ldr	r2, [r7, #12]
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	4a25      	ldr	r2, [pc, #148]	; (800a24c <TIM_Base_SetConfig+0xe4>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d01b      	beq.n	800a1f2 <TIM_Base_SetConfig+0x8a>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1c0:	d017      	beq.n	800a1f2 <TIM_Base_SetConfig+0x8a>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4a22      	ldr	r2, [pc, #136]	; (800a250 <TIM_Base_SetConfig+0xe8>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d013      	beq.n	800a1f2 <TIM_Base_SetConfig+0x8a>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4a21      	ldr	r2, [pc, #132]	; (800a254 <TIM_Base_SetConfig+0xec>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d00f      	beq.n	800a1f2 <TIM_Base_SetConfig+0x8a>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	4a20      	ldr	r2, [pc, #128]	; (800a258 <TIM_Base_SetConfig+0xf0>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d00b      	beq.n	800a1f2 <TIM_Base_SetConfig+0x8a>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4a1f      	ldr	r2, [pc, #124]	; (800a25c <TIM_Base_SetConfig+0xf4>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d007      	beq.n	800a1f2 <TIM_Base_SetConfig+0x8a>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	4a1e      	ldr	r2, [pc, #120]	; (800a260 <TIM_Base_SetConfig+0xf8>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d003      	beq.n	800a1f2 <TIM_Base_SetConfig+0x8a>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	4a1d      	ldr	r2, [pc, #116]	; (800a264 <TIM_Base_SetConfig+0xfc>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d108      	bne.n	800a204 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	68db      	ldr	r3, [r3, #12]
 800a1fe:	68fa      	ldr	r2, [r7, #12]
 800a200:	4313      	orrs	r3, r2
 800a202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	695b      	ldr	r3, [r3, #20]
 800a20e:	4313      	orrs	r3, r2
 800a210:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	68fa      	ldr	r2, [r7, #12]
 800a216:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	689a      	ldr	r2, [r3, #8]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	4a08      	ldr	r2, [pc, #32]	; (800a24c <TIM_Base_SetConfig+0xe4>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d103      	bne.n	800a238 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	691a      	ldr	r2, [r3, #16]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2201      	movs	r2, #1
 800a23c:	615a      	str	r2, [r3, #20]
}
 800a23e:	bf00      	nop
 800a240:	3714      	adds	r7, #20
 800a242:	46bd      	mov	sp, r7
 800a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a248:	4770      	bx	lr
 800a24a:	bf00      	nop
 800a24c:	40010000 	.word	0x40010000
 800a250:	40000400 	.word	0x40000400
 800a254:	40000800 	.word	0x40000800
 800a258:	40000c00 	.word	0x40000c00
 800a25c:	40014000 	.word	0x40014000
 800a260:	40014400 	.word	0x40014400
 800a264:	40014800 	.word	0x40014800

0800a268 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a268:	b480      	push	{r7}
 800a26a:	b087      	sub	sp, #28
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	6a1b      	ldr	r3, [r3, #32]
 800a278:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	6a1b      	ldr	r3, [r3, #32]
 800a27e:	f023 0201 	bic.w	r2, r3, #1
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	699b      	ldr	r3, [r3, #24]
 800a28a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a292:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	011b      	lsls	r3, r3, #4
 800a298:	693a      	ldr	r2, [r7, #16]
 800a29a:	4313      	orrs	r3, r2
 800a29c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	f023 030a 	bic.w	r3, r3, #10
 800a2a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a2a6:	697a      	ldr	r2, [r7, #20]
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	693a      	ldr	r2, [r7, #16]
 800a2b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	697a      	ldr	r2, [r7, #20]
 800a2b8:	621a      	str	r2, [r3, #32]
}
 800a2ba:	bf00      	nop
 800a2bc:	371c      	adds	r7, #28
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c4:	4770      	bx	lr

0800a2c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a2c6:	b480      	push	{r7}
 800a2c8:	b087      	sub	sp, #28
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	60f8      	str	r0, [r7, #12]
 800a2ce:	60b9      	str	r1, [r7, #8]
 800a2d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	6a1b      	ldr	r3, [r3, #32]
 800a2d6:	f023 0210 	bic.w	r2, r3, #16
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	699b      	ldr	r3, [r3, #24]
 800a2e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	6a1b      	ldr	r3, [r3, #32]
 800a2e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a2f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	031b      	lsls	r3, r3, #12
 800a2f6:	697a      	ldr	r2, [r7, #20]
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a302:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	011b      	lsls	r3, r3, #4
 800a308:	693a      	ldr	r2, [r7, #16]
 800a30a:	4313      	orrs	r3, r2
 800a30c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	697a      	ldr	r2, [r7, #20]
 800a312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	693a      	ldr	r2, [r7, #16]
 800a318:	621a      	str	r2, [r3, #32]
}
 800a31a:	bf00      	nop
 800a31c:	371c      	adds	r7, #28
 800a31e:	46bd      	mov	sp, r7
 800a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a324:	4770      	bx	lr

0800a326 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a326:	b480      	push	{r7}
 800a328:	b085      	sub	sp, #20
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
 800a32e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a33c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a33e:	683a      	ldr	r2, [r7, #0]
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	4313      	orrs	r3, r2
 800a344:	f043 0307 	orr.w	r3, r3, #7
 800a348:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	68fa      	ldr	r2, [r7, #12]
 800a34e:	609a      	str	r2, [r3, #8]
}
 800a350:	bf00      	nop
 800a352:	3714      	adds	r7, #20
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b087      	sub	sp, #28
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	607a      	str	r2, [r7, #4]
 800a368:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	689b      	ldr	r3, [r3, #8]
 800a36e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a376:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	021a      	lsls	r2, r3, #8
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	431a      	orrs	r2, r3
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	4313      	orrs	r3, r2
 800a384:	697a      	ldr	r2, [r7, #20]
 800a386:	4313      	orrs	r3, r2
 800a388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	697a      	ldr	r2, [r7, #20]
 800a38e:	609a      	str	r2, [r3, #8]
}
 800a390:	bf00      	nop
 800a392:	371c      	adds	r7, #28
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	4a1c      	ldr	r2, [pc, #112]	; (800a418 <TIM_ResetCallback+0x7c>)
 800a3a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	4a1b      	ldr	r2, [pc, #108]	; (800a41c <TIM_ResetCallback+0x80>)
 800a3b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	4a1a      	ldr	r2, [pc, #104]	; (800a420 <TIM_ResetCallback+0x84>)
 800a3b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4a19      	ldr	r2, [pc, #100]	; (800a424 <TIM_ResetCallback+0x88>)
 800a3c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	4a18      	ldr	r2, [pc, #96]	; (800a428 <TIM_ResetCallback+0x8c>)
 800a3c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	4a17      	ldr	r2, [pc, #92]	; (800a42c <TIM_ResetCallback+0x90>)
 800a3d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	4a16      	ldr	r2, [pc, #88]	; (800a430 <TIM_ResetCallback+0x94>)
 800a3d8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	4a15      	ldr	r2, [pc, #84]	; (800a434 <TIM_ResetCallback+0x98>)
 800a3e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	4a14      	ldr	r2, [pc, #80]	; (800a438 <TIM_ResetCallback+0x9c>)
 800a3e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4a13      	ldr	r2, [pc, #76]	; (800a43c <TIM_ResetCallback+0xa0>)
 800a3f0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	4a12      	ldr	r2, [pc, #72]	; (800a440 <TIM_ResetCallback+0xa4>)
 800a3f8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	4a11      	ldr	r2, [pc, #68]	; (800a444 <TIM_ResetCallback+0xa8>)
 800a400:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	4a10      	ldr	r2, [pc, #64]	; (800a448 <TIM_ResetCallback+0xac>)
 800a408:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800a40c:	bf00      	nop
 800a40e:	370c      	adds	r7, #12
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr
 800a418:	0800314d 	.word	0x0800314d
 800a41c:	0800a0b5 	.word	0x0800a0b5
 800a420:	0800a12d 	.word	0x0800a12d
 800a424:	0800a141 	.word	0x0800a141
 800a428:	0800a0dd 	.word	0x0800a0dd
 800a42c:	0800a0f1 	.word	0x0800a0f1
 800a430:	0800a0c9 	.word	0x0800a0c9
 800a434:	0800a105 	.word	0x0800a105
 800a438:	0800a119 	.word	0x0800a119
 800a43c:	0800a155 	.word	0x0800a155
 800a440:	0800a5c9 	.word	0x0800a5c9
 800a444:	0800a5dd 	.word	0x0800a5dd
 800a448:	0800a5f1 	.word	0x0800a5f1

0800a44c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a55      	ldr	r2, [pc, #340]	; (800a5b0 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d018      	beq.n	800a492 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a468:	d013      	beq.n	800a492 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a51      	ldr	r2, [pc, #324]	; (800a5b4 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d00e      	beq.n	800a492 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a4f      	ldr	r2, [pc, #316]	; (800a5b8 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d009      	beq.n	800a492 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a4e      	ldr	r2, [pc, #312]	; (800a5bc <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d004      	beq.n	800a492 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800a488:	f240 71b1 	movw	r1, #1969	; 0x7b1
 800a48c:	484c      	ldr	r0, [pc, #304]	; (800a5c0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a48e:	f7f8 fe74 	bl	800317a <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d020      	beq.n	800a4dc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	2b10      	cmp	r3, #16
 800a4a0:	d01c      	beq.n	800a4dc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	2b20      	cmp	r3, #32
 800a4a8:	d018      	beq.n	800a4dc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	2b30      	cmp	r3, #48	; 0x30
 800a4b0:	d014      	beq.n	800a4dc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	2b40      	cmp	r3, #64	; 0x40
 800a4b8:	d010      	beq.n	800a4dc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	2b50      	cmp	r3, #80	; 0x50
 800a4c0:	d00c      	beq.n	800a4dc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	2b60      	cmp	r3, #96	; 0x60
 800a4c8:	d008      	beq.n	800a4dc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	2b70      	cmp	r3, #112	; 0x70
 800a4d0:	d004      	beq.n	800a4dc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a4d2:	f240 71b2 	movw	r1, #1970	; 0x7b2
 800a4d6:	483a      	ldr	r0, [pc, #232]	; (800a5c0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a4d8:	f7f8 fe4f 	bl	800317a <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	2b80      	cmp	r3, #128	; 0x80
 800a4e2:	d008      	beq.n	800a4f6 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d004      	beq.n	800a4f6 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800a4ec:	f240 71b3 	movw	r1, #1971	; 0x7b3
 800a4f0:	4833      	ldr	r0, [pc, #204]	; (800a5c0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a4f2:	f7f8 fe42 	bl	800317a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d101      	bne.n	800a504 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a500:	2302      	movs	r3, #2
 800a502:	e050      	b.n	800a5a6 <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2201      	movs	r2, #1
 800a508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2202      	movs	r2, #2
 800a510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	689b      	ldr	r3, [r3, #8]
 800a522:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a52a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	68fa      	ldr	r2, [r7, #12]
 800a532:	4313      	orrs	r3, r2
 800a534:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	68fa      	ldr	r2, [r7, #12]
 800a53c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4a1b      	ldr	r2, [pc, #108]	; (800a5b0 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d018      	beq.n	800a57a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a550:	d013      	beq.n	800a57a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a17      	ldr	r2, [pc, #92]	; (800a5b4 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d00e      	beq.n	800a57a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a15      	ldr	r2, [pc, #84]	; (800a5b8 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d009      	beq.n	800a57a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a14      	ldr	r2, [pc, #80]	; (800a5bc <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d004      	beq.n	800a57a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a13      	ldr	r2, [pc, #76]	; (800a5c4 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d10c      	bne.n	800a594 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a580:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	68ba      	ldr	r2, [r7, #8]
 800a588:	4313      	orrs	r3, r2
 800a58a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	68ba      	ldr	r2, [r7, #8]
 800a592:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2201      	movs	r2, #1
 800a598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3710      	adds	r7, #16
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	40010000 	.word	0x40010000
 800a5b4:	40000400 	.word	0x40000400
 800a5b8:	40000800 	.word	0x40000800
 800a5bc:	40000c00 	.word	0x40000c00
 800a5c0:	0800f25c 	.word	0x0800f25c
 800a5c4:	40014000 	.word	0x40014000

0800a5c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a5d0:	bf00      	nop
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a5e4:	bf00      	nop
 800a5e6:	370c      	adds	r7, #12
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a5f8:	bf00      	nop
 800a5fa:	370c      	adds	r7, #12
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d101      	bne.n	800a616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a612:	2301      	movs	r3, #1
 800a614:	e0ab      	b.n	800a76e <HAL_UART_Init+0x16a>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	699b      	ldr	r3, [r3, #24]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d02c      	beq.n	800a678 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4a55      	ldr	r2, [pc, #340]	; (800a778 <HAL_UART_Init+0x174>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d00e      	beq.n	800a646 <HAL_UART_Init+0x42>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a53      	ldr	r2, [pc, #332]	; (800a77c <HAL_UART_Init+0x178>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d009      	beq.n	800a646 <HAL_UART_Init+0x42>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	4a52      	ldr	r2, [pc, #328]	; (800a780 <HAL_UART_Init+0x17c>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d004      	beq.n	800a646 <HAL_UART_Init+0x42>
 800a63c:	f240 1173 	movw	r1, #371	; 0x173
 800a640:	4850      	ldr	r0, [pc, #320]	; (800a784 <HAL_UART_Init+0x180>)
 800a642:	f7f8 fd9a 	bl	800317a <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	699b      	ldr	r3, [r3, #24]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d028      	beq.n	800a6a0 <HAL_UART_Init+0x9c>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	699b      	ldr	r3, [r3, #24]
 800a652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a656:	d023      	beq.n	800a6a0 <HAL_UART_Init+0x9c>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	699b      	ldr	r3, [r3, #24]
 800a65c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a660:	d01e      	beq.n	800a6a0 <HAL_UART_Init+0x9c>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	699b      	ldr	r3, [r3, #24]
 800a666:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a66a:	d019      	beq.n	800a6a0 <HAL_UART_Init+0x9c>
 800a66c:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800a670:	4844      	ldr	r0, [pc, #272]	; (800a784 <HAL_UART_Init+0x180>)
 800a672:	f7f8 fd82 	bl	800317a <assert_failed>
 800a676:	e013      	b.n	800a6a0 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4a3e      	ldr	r2, [pc, #248]	; (800a778 <HAL_UART_Init+0x174>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d00e      	beq.n	800a6a0 <HAL_UART_Init+0x9c>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a3d      	ldr	r2, [pc, #244]	; (800a77c <HAL_UART_Init+0x178>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d009      	beq.n	800a6a0 <HAL_UART_Init+0x9c>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a3b      	ldr	r2, [pc, #236]	; (800a780 <HAL_UART_Init+0x17c>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d004      	beq.n	800a6a0 <HAL_UART_Init+0x9c>
 800a696:	f44f 71bc 	mov.w	r1, #376	; 0x178
 800a69a:	483a      	ldr	r0, [pc, #232]	; (800a784 <HAL_UART_Init+0x180>)
 800a69c:	f7f8 fd6d 	bl	800317a <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d009      	beq.n	800a6bc <HAL_UART_Init+0xb8>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	689b      	ldr	r3, [r3, #8]
 800a6ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6b0:	d004      	beq.n	800a6bc <HAL_UART_Init+0xb8>
 800a6b2:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800a6b6:	4833      	ldr	r0, [pc, #204]	; (800a784 <HAL_UART_Init+0x180>)
 800a6b8:	f7f8 fd5f 	bl	800317a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	69db      	ldr	r3, [r3, #28]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d009      	beq.n	800a6d8 <HAL_UART_Init+0xd4>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	69db      	ldr	r3, [r3, #28]
 800a6c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6cc:	d004      	beq.n	800a6d8 <HAL_UART_Init+0xd4>
 800a6ce:	f240 117b 	movw	r1, #379	; 0x17b
 800a6d2:	482c      	ldr	r0, [pc, #176]	; (800a784 <HAL_UART_Init+0x180>)
 800a6d4:	f7f8 fd51 	bl	800317a <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d111      	bne.n	800a708 <HAL_UART_Init+0x104>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 fb61 	bl	800adb4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d102      	bne.n	800a700 <HAL_UART_Init+0xfc>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	4a22      	ldr	r2, [pc, #136]	; (800a788 <HAL_UART_Init+0x184>)
 800a6fe:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2224      	movs	r2, #36	; 0x24
 800a70c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	68da      	ldr	r2, [r3, #12]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a71e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f000 fd5b 	bl	800b1dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	691a      	ldr	r2, [r3, #16]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a734:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	695a      	ldr	r2, [r3, #20]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a744:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	68da      	ldr	r2, [r3, #12]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a754:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2200      	movs	r2, #0
 800a75a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2220      	movs	r2, #32
 800a760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2220      	movs	r2, #32
 800a768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a76c:	2300      	movs	r3, #0
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3708      	adds	r7, #8
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	40011000 	.word	0x40011000
 800a77c:	40004400 	.word	0x40004400
 800a780:	40011400 	.word	0x40011400
 800a784:	0800f2d4 	.word	0x0800f2d4
 800a788:	08003bd9 	.word	0x08003bd9

0800a78c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b084      	sub	sp, #16
 800a790:	af00      	add	r7, sp, #0
 800a792:	60f8      	str	r0, [r7, #12]
 800a794:	60b9      	str	r1, [r7, #8]
 800a796:	4613      	mov	r3, r2
 800a798:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a7a0:	b2db      	uxtb	r3, r3
 800a7a2:	2b20      	cmp	r3, #32
 800a7a4:	d11d      	bne.n	800a7e2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d002      	beq.n	800a7b2 <HAL_UART_Receive_IT+0x26>
 800a7ac:	88fb      	ldrh	r3, [r7, #6]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d101      	bne.n	800a7b6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	e016      	b.n	800a7e4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d101      	bne.n	800a7c4 <HAL_UART_Receive_IT+0x38>
 800a7c0:	2302      	movs	r3, #2
 800a7c2:	e00f      	b.n	800a7e4 <HAL_UART_Receive_IT+0x58>
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a7d2:	88fb      	ldrh	r3, [r7, #6]
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	68b9      	ldr	r1, [r7, #8]
 800a7d8:	68f8      	ldr	r0, [r7, #12]
 800a7da:	f000 fb23 	bl	800ae24 <UART_Start_Receive_IT>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	e000      	b.n	800a7e4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a7e2:	2302      	movs	r3, #2
  }
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3710      	adds	r7, #16
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b0ba      	sub	sp, #232	; 0xe8
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	68db      	ldr	r3, [r3, #12]
 800a804:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	695b      	ldr	r3, [r3, #20]
 800a80e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a812:	2300      	movs	r3, #0
 800a814:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a818:	2300      	movs	r3, #0
 800a81a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a81e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a822:	f003 030f 	and.w	r3, r3, #15
 800a826:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a82a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d10f      	bne.n	800a852 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a836:	f003 0320 	and.w	r3, r3, #32
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d009      	beq.n	800a852 <HAL_UART_IRQHandler+0x66>
 800a83e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a842:	f003 0320 	and.w	r3, r3, #32
 800a846:	2b00      	cmp	r3, #0
 800a848:	d003      	beq.n	800a852 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 fc09 	bl	800b062 <UART_Receive_IT>
      return;
 800a850:	e25b      	b.n	800ad0a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a852:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a856:	2b00      	cmp	r3, #0
 800a858:	f000 80e1 	beq.w	800aa1e <HAL_UART_IRQHandler+0x232>
 800a85c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a860:	f003 0301 	and.w	r3, r3, #1
 800a864:	2b00      	cmp	r3, #0
 800a866:	d106      	bne.n	800a876 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a86c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a870:	2b00      	cmp	r3, #0
 800a872:	f000 80d4 	beq.w	800aa1e <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a87a:	f003 0301 	and.w	r3, r3, #1
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d00b      	beq.n	800a89a <HAL_UART_IRQHandler+0xae>
 800a882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d005      	beq.n	800a89a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a892:	f043 0201 	orr.w	r2, r3, #1
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a89a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a89e:	f003 0304 	and.w	r3, r3, #4
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d00b      	beq.n	800a8be <HAL_UART_IRQHandler+0xd2>
 800a8a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8aa:	f003 0301 	and.w	r3, r3, #1
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d005      	beq.n	800a8be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8b6:	f043 0202 	orr.w	r2, r3, #2
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a8be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8c2:	f003 0302 	and.w	r3, r3, #2
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d00b      	beq.n	800a8e2 <HAL_UART_IRQHandler+0xf6>
 800a8ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8ce:	f003 0301 	and.w	r3, r3, #1
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d005      	beq.n	800a8e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8da:	f043 0204 	orr.w	r2, r3, #4
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a8e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8e6:	f003 0308 	and.w	r3, r3, #8
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d011      	beq.n	800a912 <HAL_UART_IRQHandler+0x126>
 800a8ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8f2:	f003 0320 	and.w	r3, r3, #32
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d105      	bne.n	800a906 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a8fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8fe:	f003 0301 	and.w	r3, r3, #1
 800a902:	2b00      	cmp	r3, #0
 800a904:	d005      	beq.n	800a912 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a90a:	f043 0208 	orr.w	r2, r3, #8
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a916:	2b00      	cmp	r3, #0
 800a918:	f000 81f2 	beq.w	800ad00 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a91c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a920:	f003 0320 	and.w	r3, r3, #32
 800a924:	2b00      	cmp	r3, #0
 800a926:	d008      	beq.n	800a93a <HAL_UART_IRQHandler+0x14e>
 800a928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a92c:	f003 0320 	and.w	r3, r3, #32
 800a930:	2b00      	cmp	r3, #0
 800a932:	d002      	beq.n	800a93a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 fb94 	bl	800b062 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	695b      	ldr	r3, [r3, #20]
 800a940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a944:	2b40      	cmp	r3, #64	; 0x40
 800a946:	bf0c      	ite	eq
 800a948:	2301      	moveq	r3, #1
 800a94a:	2300      	movne	r3, #0
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a956:	f003 0308 	and.w	r3, r3, #8
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d103      	bne.n	800a966 <HAL_UART_IRQHandler+0x17a>
 800a95e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a962:	2b00      	cmp	r3, #0
 800a964:	d051      	beq.n	800aa0a <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 fa9a 	bl	800aea0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	695b      	ldr	r3, [r3, #20]
 800a972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a976:	2b40      	cmp	r3, #64	; 0x40
 800a978:	d142      	bne.n	800aa00 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	3314      	adds	r3, #20
 800a980:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a984:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a988:	e853 3f00 	ldrex	r3, [r3]
 800a98c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a990:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a998:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	3314      	adds	r3, #20
 800a9a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a9a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a9aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a9b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a9b6:	e841 2300 	strex	r3, r2, [r1]
 800a9ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a9be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d1d9      	bne.n	800a97a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d013      	beq.n	800a9f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d2:	4a7f      	ldr	r2, [pc, #508]	; (800abd0 <HAL_UART_IRQHandler+0x3e4>)
 800a9d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7fa fd92 	bl	8005504 <HAL_DMA_Abort_IT>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d019      	beq.n	800aa1a <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9ec:	687a      	ldr	r2, [r7, #4]
 800a9ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a9f0:	4610      	mov	r0, r2
 800a9f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9f4:	e011      	b.n	800aa1a <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9fe:	e00c      	b.n	800aa1a <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa08:	e007      	b.n	800aa1a <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2200      	movs	r2, #0
 800aa16:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800aa18:	e172      	b.n	800ad00 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa1a:	bf00      	nop
    return;
 800aa1c:	e170      	b.n	800ad00 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa22:	2b01      	cmp	r3, #1
 800aa24:	f040 814c 	bne.w	800acc0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800aa28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa2c:	f003 0310 	and.w	r3, r3, #16
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	f000 8145 	beq.w	800acc0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800aa36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa3a:	f003 0310 	and.w	r3, r3, #16
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	f000 813e 	beq.w	800acc0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aa44:	2300      	movs	r3, #0
 800aa46:	60bb      	str	r3, [r7, #8]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	60bb      	str	r3, [r7, #8]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	60bb      	str	r3, [r7, #8]
 800aa58:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	695b      	ldr	r3, [r3, #20]
 800aa60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa64:	2b40      	cmp	r3, #64	; 0x40
 800aa66:	f040 80b5 	bne.w	800abd4 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aa76:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	f000 8142 	beq.w	800ad04 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aa84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	f080 813b 	bcs.w	800ad04 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aa94:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa9a:	69db      	ldr	r3, [r3, #28]
 800aa9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aaa0:	f000 8088 	beq.w	800abb4 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	330c      	adds	r3, #12
 800aaaa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aab2:	e853 3f00 	ldrex	r3, [r3]
 800aab6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800aaba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aabe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aac2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	330c      	adds	r3, #12
 800aacc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800aad0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800aad4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800aadc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800aae0:	e841 2300 	strex	r3, r2, [r1]
 800aae4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800aae8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d1d9      	bne.n	800aaa4 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	3314      	adds	r3, #20
 800aaf6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aafa:	e853 3f00 	ldrex	r3, [r3]
 800aafe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ab00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ab02:	f023 0301 	bic.w	r3, r3, #1
 800ab06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	3314      	adds	r3, #20
 800ab10:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ab14:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ab18:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab1a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ab1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ab20:	e841 2300 	strex	r3, r2, [r1]
 800ab24:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ab26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d1e1      	bne.n	800aaf0 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	3314      	adds	r3, #20
 800ab32:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab36:	e853 3f00 	ldrex	r3, [r3]
 800ab3a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ab3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	3314      	adds	r3, #20
 800ab4c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ab50:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ab52:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab54:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ab56:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ab58:	e841 2300 	strex	r3, r2, [r1]
 800ab5c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ab5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d1e3      	bne.n	800ab2c <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2220      	movs	r2, #32
 800ab68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	330c      	adds	r3, #12
 800ab78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab7c:	e853 3f00 	ldrex	r3, [r3]
 800ab80:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ab82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab84:	f023 0310 	bic.w	r3, r3, #16
 800ab88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	330c      	adds	r3, #12
 800ab92:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ab96:	65ba      	str	r2, [r7, #88]	; 0x58
 800ab98:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ab9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab9e:	e841 2300 	strex	r3, r2, [r1]
 800aba2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d1e3      	bne.n	800ab72 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abae:	4618      	mov	r0, r3
 800abb0:	f7fa fc38 	bl	8005424 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abb8:	687a      	ldr	r2, [r7, #4]
 800abba:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800abc0:	b292      	uxth	r2, r2
 800abc2:	1a8a      	subs	r2, r1, r2
 800abc4:	b292      	uxth	r2, r2
 800abc6:	4611      	mov	r1, r2
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800abcc:	e09a      	b.n	800ad04 <HAL_UART_IRQHandler+0x518>
 800abce:	bf00      	nop
 800abd0:	0800af67 	.word	0x0800af67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800abdc:	b29b      	uxth	r3, r3
 800abde:	1ad3      	subs	r3, r2, r3
 800abe0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800abe8:	b29b      	uxth	r3, r3
 800abea:	2b00      	cmp	r3, #0
 800abec:	f000 808c 	beq.w	800ad08 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800abf0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	f000 8087 	beq.w	800ad08 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	330c      	adds	r3, #12
 800ac00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac04:	e853 3f00 	ldrex	r3, [r3]
 800ac08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ac0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ac10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	330c      	adds	r3, #12
 800ac1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ac1e:	647a      	str	r2, [r7, #68]	; 0x44
 800ac20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ac24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac26:	e841 2300 	strex	r3, r2, [r1]
 800ac2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ac2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d1e3      	bne.n	800abfa <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	3314      	adds	r3, #20
 800ac38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3c:	e853 3f00 	ldrex	r3, [r3]
 800ac40:	623b      	str	r3, [r7, #32]
   return(result);
 800ac42:	6a3b      	ldr	r3, [r7, #32]
 800ac44:	f023 0301 	bic.w	r3, r3, #1
 800ac48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	3314      	adds	r3, #20
 800ac52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ac56:	633a      	str	r2, [r7, #48]	; 0x30
 800ac58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac5e:	e841 2300 	strex	r3, r2, [r1]
 800ac62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ac64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d1e3      	bne.n	800ac32 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2220      	movs	r2, #32
 800ac6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2200      	movs	r2, #0
 800ac76:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	330c      	adds	r3, #12
 800ac7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	e853 3f00 	ldrex	r3, [r3]
 800ac86:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f023 0310 	bic.w	r3, r3, #16
 800ac8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	330c      	adds	r3, #12
 800ac98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ac9c:	61fa      	str	r2, [r7, #28]
 800ac9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca0:	69b9      	ldr	r1, [r7, #24]
 800aca2:	69fa      	ldr	r2, [r7, #28]
 800aca4:	e841 2300 	strex	r3, r2, [r1]
 800aca8:	617b      	str	r3, [r7, #20]
   return(result);
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d1e3      	bne.n	800ac78 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800acb4:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800acb8:	4611      	mov	r1, r2
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800acbe:	e023      	b.n	800ad08 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800acc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d009      	beq.n	800ace0 <HAL_UART_IRQHandler+0x4f4>
 800accc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d003      	beq.n	800ace0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f000 f959 	bl	800af90 <UART_Transmit_IT>
    return;
 800acde:	e014      	b.n	800ad0a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ace0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ace4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d00e      	beq.n	800ad0a <HAL_UART_IRQHandler+0x51e>
 800acec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d008      	beq.n	800ad0a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f000 f999 	bl	800b030 <UART_EndTransmit_IT>
    return;
 800acfe:	e004      	b.n	800ad0a <HAL_UART_IRQHandler+0x51e>
    return;
 800ad00:	bf00      	nop
 800ad02:	e002      	b.n	800ad0a <HAL_UART_IRQHandler+0x51e>
      return;
 800ad04:	bf00      	nop
 800ad06:	e000      	b.n	800ad0a <HAL_UART_IRQHandler+0x51e>
      return;
 800ad08:	bf00      	nop
  }
}
 800ad0a:	37e8      	adds	r7, #232	; 0xe8
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b083      	sub	sp, #12
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ad18:	bf00      	nop
 800ad1a:	370c      	adds	r7, #12
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr

0800ad24 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ad2c:	bf00      	nop
 800ad2e:	370c      	adds	r7, #12
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800ad40:	bf00      	nop
 800ad42:	370c      	adds	r7, #12
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr

0800ad4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b083      	sub	sp, #12
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ad54:	bf00      	nop
 800ad56:	370c      	adds	r7, #12
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr

0800ad60 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b083      	sub	sp, #12
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800ad68:	bf00      	nop
 800ad6a:	370c      	adds	r7, #12
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr

0800ad74 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b083      	sub	sp, #12
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800ad7c:	bf00      	nop
 800ad7e:	370c      	adds	r7, #12
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr

0800ad88 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800ad90:	bf00      	nop
 800ad92:	370c      	adds	r7, #12
 800ad94:	46bd      	mov	sp, r7
 800ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9a:	4770      	bx	lr

0800ad9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b083      	sub	sp, #12
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	460b      	mov	r3, r1
 800ada6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ada8:	bf00      	nop
 800adaa:	370c      	adds	r7, #12
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr

0800adb4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b083      	sub	sp, #12
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4a10      	ldr	r2, [pc, #64]	; (800ae00 <UART_InitCallbacksToDefault+0x4c>)
 800adc0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	4a0f      	ldr	r2, [pc, #60]	; (800ae04 <UART_InitCallbacksToDefault+0x50>)
 800adc6:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	4a0f      	ldr	r2, [pc, #60]	; (800ae08 <UART_InitCallbacksToDefault+0x54>)
 800adcc:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	4a0e      	ldr	r2, [pc, #56]	; (800ae0c <UART_InitCallbacksToDefault+0x58>)
 800add2:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	4a0e      	ldr	r2, [pc, #56]	; (800ae10 <UART_InitCallbacksToDefault+0x5c>)
 800add8:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	4a0d      	ldr	r2, [pc, #52]	; (800ae14 <UART_InitCallbacksToDefault+0x60>)
 800adde:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	4a0d      	ldr	r2, [pc, #52]	; (800ae18 <UART_InitCallbacksToDefault+0x64>)
 800ade4:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	4a0c      	ldr	r2, [pc, #48]	; (800ae1c <UART_InitCallbacksToDefault+0x68>)
 800adea:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	4a0c      	ldr	r2, [pc, #48]	; (800ae20 <UART_InitCallbacksToDefault+0x6c>)
 800adf0:	669a      	str	r2, [r3, #104]	; 0x68

}
 800adf2:	bf00      	nop
 800adf4:	370c      	adds	r7, #12
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr
 800adfe:	bf00      	nop
 800ae00:	0800ad25 	.word	0x0800ad25
 800ae04:	0800ad11 	.word	0x0800ad11
 800ae08:	0800ad39 	.word	0x0800ad39
 800ae0c:	08003c79 	.word	0x08003c79
 800ae10:	0800ad4d 	.word	0x0800ad4d
 800ae14:	0800ad61 	.word	0x0800ad61
 800ae18:	0800ad75 	.word	0x0800ad75
 800ae1c:	0800ad89 	.word	0x0800ad89
 800ae20:	0800ad9d 	.word	0x0800ad9d

0800ae24 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b085      	sub	sp, #20
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	60b9      	str	r1, [r7, #8]
 800ae2e:	4613      	mov	r3, r2
 800ae30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	68ba      	ldr	r2, [r7, #8]
 800ae36:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	88fa      	ldrh	r2, [r7, #6]
 800ae3c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	88fa      	ldrh	r2, [r7, #6]
 800ae42:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2200      	movs	r2, #0
 800ae48:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2222      	movs	r2, #34	; 0x22
 800ae4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2200      	movs	r2, #0
 800ae56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	691b      	ldr	r3, [r3, #16]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d007      	beq.n	800ae72 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	68da      	ldr	r2, [r3, #12]
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ae70:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	695a      	ldr	r2, [r3, #20]
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f042 0201 	orr.w	r2, r2, #1
 800ae80:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	68da      	ldr	r2, [r3, #12]
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f042 0220 	orr.w	r2, r2, #32
 800ae90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ae92:	2300      	movs	r3, #0
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3714      	adds	r7, #20
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b095      	sub	sp, #84	; 0x54
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	330c      	adds	r3, #12
 800aeae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeb2:	e853 3f00 	ldrex	r3, [r3]
 800aeb6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aeb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	330c      	adds	r3, #12
 800aec6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aec8:	643a      	str	r2, [r7, #64]	; 0x40
 800aeca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aecc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aece:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aed0:	e841 2300 	strex	r3, r2, [r1]
 800aed4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d1e5      	bne.n	800aea8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	3314      	adds	r3, #20
 800aee2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aee4:	6a3b      	ldr	r3, [r7, #32]
 800aee6:	e853 3f00 	ldrex	r3, [r3]
 800aeea:	61fb      	str	r3, [r7, #28]
   return(result);
 800aeec:	69fb      	ldr	r3, [r7, #28]
 800aeee:	f023 0301 	bic.w	r3, r3, #1
 800aef2:	64bb      	str	r3, [r7, #72]	; 0x48
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	3314      	adds	r3, #20
 800aefa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aefc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aefe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af04:	e841 2300 	strex	r3, r2, [r1]
 800af08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800af0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d1e5      	bne.n	800aedc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af14:	2b01      	cmp	r3, #1
 800af16:	d119      	bne.n	800af4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	330c      	adds	r3, #12
 800af1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	e853 3f00 	ldrex	r3, [r3]
 800af26:	60bb      	str	r3, [r7, #8]
   return(result);
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	f023 0310 	bic.w	r3, r3, #16
 800af2e:	647b      	str	r3, [r7, #68]	; 0x44
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	330c      	adds	r3, #12
 800af36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af38:	61ba      	str	r2, [r7, #24]
 800af3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af3c:	6979      	ldr	r1, [r7, #20]
 800af3e:	69ba      	ldr	r2, [r7, #24]
 800af40:	e841 2300 	strex	r3, r2, [r1]
 800af44:	613b      	str	r3, [r7, #16]
   return(result);
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d1e5      	bne.n	800af18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2220      	movs	r2, #32
 800af50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	631a      	str	r2, [r3, #48]	; 0x30
}
 800af5a:	bf00      	nop
 800af5c:	3754      	adds	r7, #84	; 0x54
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr

0800af66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af66:	b580      	push	{r7, lr}
 800af68:	b084      	sub	sp, #16
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2200      	movs	r2, #0
 800af78:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2200      	movs	r2, #0
 800af7e:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af84:	68f8      	ldr	r0, [r7, #12]
 800af86:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af88:	bf00      	nop
 800af8a:	3710      	adds	r7, #16
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800af90:	b480      	push	{r7}
 800af92:	b085      	sub	sp, #20
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af9e:	b2db      	uxtb	r3, r3
 800afa0:	2b21      	cmp	r3, #33	; 0x21
 800afa2:	d13e      	bne.n	800b022 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	689b      	ldr	r3, [r3, #8]
 800afa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afac:	d114      	bne.n	800afd8 <UART_Transmit_IT+0x48>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	691b      	ldr	r3, [r3, #16]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d110      	bne.n	800afd8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6a1b      	ldr	r3, [r3, #32]
 800afba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	881b      	ldrh	r3, [r3, #0]
 800afc0:	461a      	mov	r2, r3
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800afca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6a1b      	ldr	r3, [r3, #32]
 800afd0:	1c9a      	adds	r2, r3, #2
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	621a      	str	r2, [r3, #32]
 800afd6:	e008      	b.n	800afea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6a1b      	ldr	r3, [r3, #32]
 800afdc:	1c59      	adds	r1, r3, #1
 800afde:	687a      	ldr	r2, [r7, #4]
 800afe0:	6211      	str	r1, [r2, #32]
 800afe2:	781a      	ldrb	r2, [r3, #0]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800afee:	b29b      	uxth	r3, r3
 800aff0:	3b01      	subs	r3, #1
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	687a      	ldr	r2, [r7, #4]
 800aff6:	4619      	mov	r1, r3
 800aff8:	84d1      	strh	r1, [r2, #38]	; 0x26
 800affa:	2b00      	cmp	r3, #0
 800affc:	d10f      	bne.n	800b01e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	68da      	ldr	r2, [r3, #12]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b00c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	68da      	ldr	r2, [r3, #12]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b01c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b01e:	2300      	movs	r3, #0
 800b020:	e000      	b.n	800b024 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b022:	2302      	movs	r3, #2
  }
}
 800b024:	4618      	mov	r0, r3
 800b026:	3714      	adds	r7, #20
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr

0800b030 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b082      	sub	sp, #8
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	68da      	ldr	r2, [r3, #12]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b046:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2220      	movs	r2, #32
 800b04c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b058:	2300      	movs	r3, #0
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3708      	adds	r7, #8
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}

0800b062 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b062:	b580      	push	{r7, lr}
 800b064:	b08c      	sub	sp, #48	; 0x30
 800b066:	af00      	add	r7, sp, #0
 800b068:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b070:	b2db      	uxtb	r3, r3
 800b072:	2b22      	cmp	r3, #34	; 0x22
 800b074:	f040 80ad 	bne.w	800b1d2 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	689b      	ldr	r3, [r3, #8]
 800b07c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b080:	d117      	bne.n	800b0b2 <UART_Receive_IT+0x50>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	691b      	ldr	r3, [r3, #16]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d113      	bne.n	800b0b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b08a:	2300      	movs	r3, #0
 800b08c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b092:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	685b      	ldr	r3, [r3, #4]
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0a0:	b29a      	uxth	r2, r3
 800b0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0aa:	1c9a      	adds	r2, r3, #2
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	629a      	str	r2, [r3, #40]	; 0x28
 800b0b0:	e026      	b.n	800b100 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	689b      	ldr	r3, [r3, #8]
 800b0c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0c4:	d007      	beq.n	800b0d6 <UART_Receive_IT+0x74>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	689b      	ldr	r3, [r3, #8]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d10a      	bne.n	800b0e4 <UART_Receive_IT+0x82>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	691b      	ldr	r3, [r3, #16]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d106      	bne.n	800b0e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	b2da      	uxtb	r2, r3
 800b0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e0:	701a      	strb	r2, [r3, #0]
 800b0e2:	e008      	b.n	800b0f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0f0:	b2da      	uxtb	r2, r3
 800b0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0fa:	1c5a      	adds	r2, r3, #1
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b104:	b29b      	uxth	r3, r3
 800b106:	3b01      	subs	r3, #1
 800b108:	b29b      	uxth	r3, r3
 800b10a:	687a      	ldr	r2, [r7, #4]
 800b10c:	4619      	mov	r1, r3
 800b10e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b110:	2b00      	cmp	r3, #0
 800b112:	d15c      	bne.n	800b1ce <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	68da      	ldr	r2, [r3, #12]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f022 0220 	bic.w	r2, r2, #32
 800b122:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	68da      	ldr	r2, [r3, #12]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b132:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	695a      	ldr	r2, [r3, #20]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f022 0201 	bic.w	r2, r2, #1
 800b142:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2220      	movs	r2, #32
 800b148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b150:	2b01      	cmp	r3, #1
 800b152:	d136      	bne.n	800b1c2 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2200      	movs	r2, #0
 800b158:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	330c      	adds	r3, #12
 800b160:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	e853 3f00 	ldrex	r3, [r3]
 800b168:	613b      	str	r3, [r7, #16]
   return(result);
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	f023 0310 	bic.w	r3, r3, #16
 800b170:	627b      	str	r3, [r7, #36]	; 0x24
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	330c      	adds	r3, #12
 800b178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b17a:	623a      	str	r2, [r7, #32]
 800b17c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b17e:	69f9      	ldr	r1, [r7, #28]
 800b180:	6a3a      	ldr	r2, [r7, #32]
 800b182:	e841 2300 	strex	r3, r2, [r1]
 800b186:	61bb      	str	r3, [r7, #24]
   return(result);
 800b188:	69bb      	ldr	r3, [r7, #24]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d1e5      	bne.n	800b15a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f003 0310 	and.w	r3, r3, #16
 800b198:	2b10      	cmp	r3, #16
 800b19a:	d10a      	bne.n	800b1b2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b19c:	2300      	movs	r3, #0
 800b19e:	60fb      	str	r3, [r7, #12]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	60fb      	str	r3, [r7, #12]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	60fb      	str	r3, [r7, #12]
 800b1b0:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1b6:	687a      	ldr	r2, [r7, #4]
 800b1b8:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800b1ba:	4611      	mov	r1, r2
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	4798      	blx	r3
 800b1c0:	e003      	b.n	800b1ca <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	e002      	b.n	800b1d4 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	e000      	b.n	800b1d4 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800b1d2:	2302      	movs	r3, #2
  }
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3730      	adds	r7, #48	; 0x30
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b1dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b1e0:	b0c0      	sub	sp, #256	; 0x100
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800b1e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1ec:	685a      	ldr	r2, [r3, #4]
 800b1ee:	4bcf      	ldr	r3, [pc, #828]	; (800b52c <UART_SetConfig+0x350>)
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d904      	bls.n	800b1fe <UART_SetConfig+0x22>
 800b1f4:	f640 6161 	movw	r1, #3681	; 0xe61
 800b1f8:	48cd      	ldr	r0, [pc, #820]	; (800b530 <UART_SetConfig+0x354>)
 800b1fa:	f7f7 ffbe 	bl	800317a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800b1fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b202:	68db      	ldr	r3, [r3, #12]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d00a      	beq.n	800b21e <UART_SetConfig+0x42>
 800b208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b20c:	68db      	ldr	r3, [r3, #12]
 800b20e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b212:	d004      	beq.n	800b21e <UART_SetConfig+0x42>
 800b214:	f640 6162 	movw	r1, #3682	; 0xe62
 800b218:	48c5      	ldr	r0, [pc, #788]	; (800b530 <UART_SetConfig+0x354>)
 800b21a:	f7f7 ffae 	bl	800317a <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800b21e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b222:	691b      	ldr	r3, [r3, #16]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d010      	beq.n	800b24a <UART_SetConfig+0x6e>
 800b228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b22c:	691b      	ldr	r3, [r3, #16]
 800b22e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b232:	d00a      	beq.n	800b24a <UART_SetConfig+0x6e>
 800b234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b238:	691b      	ldr	r3, [r3, #16]
 800b23a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b23e:	d004      	beq.n	800b24a <UART_SetConfig+0x6e>
 800b240:	f640 6163 	movw	r1, #3683	; 0xe63
 800b244:	48ba      	ldr	r0, [pc, #744]	; (800b530 <UART_SetConfig+0x354>)
 800b246:	f7f7 ff98 	bl	800317a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800b24a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b24e:	695a      	ldr	r2, [r3, #20]
 800b250:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800b254:	4013      	ands	r3, r2
 800b256:	2b00      	cmp	r3, #0
 800b258:	d104      	bne.n	800b264 <UART_SetConfig+0x88>
 800b25a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b25e:	695b      	ldr	r3, [r3, #20]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d104      	bne.n	800b26e <UART_SetConfig+0x92>
 800b264:	f640 6164 	movw	r1, #3684	; 0xe64
 800b268:	48b1      	ldr	r0, [pc, #708]	; (800b530 <UART_SetConfig+0x354>)
 800b26a:	f7f7 ff86 	bl	800317a <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b26e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	691b      	ldr	r3, [r3, #16]
 800b276:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b27a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b27e:	68d9      	ldr	r1, [r3, #12]
 800b280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	ea40 0301 	orr.w	r3, r0, r1
 800b28a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b28c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b290:	689a      	ldr	r2, [r3, #8]
 800b292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b296:	691b      	ldr	r3, [r3, #16]
 800b298:	431a      	orrs	r2, r3
 800b29a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b29e:	695b      	ldr	r3, [r3, #20]
 800b2a0:	431a      	orrs	r2, r3
 800b2a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2a6:	69db      	ldr	r3, [r3, #28]
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b2ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	68db      	ldr	r3, [r3, #12]
 800b2b6:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b2ba:	f021 010c 	bic.w	r1, r1, #12
 800b2be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2c2:	681a      	ldr	r2, [r3, #0]
 800b2c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b2c8:	430b      	orrs	r3, r1
 800b2ca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b2cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	695b      	ldr	r3, [r3, #20]
 800b2d4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b2d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2dc:	6999      	ldr	r1, [r3, #24]
 800b2de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	ea40 0301 	orr.w	r3, r0, r1
 800b2e8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b2ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	4b90      	ldr	r3, [pc, #576]	; (800b534 <UART_SetConfig+0x358>)
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d005      	beq.n	800b302 <UART_SetConfig+0x126>
 800b2f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2fa:	681a      	ldr	r2, [r3, #0]
 800b2fc:	4b8e      	ldr	r3, [pc, #568]	; (800b538 <UART_SetConfig+0x35c>)
 800b2fe:	429a      	cmp	r2, r3
 800b300:	d104      	bne.n	800b30c <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b302:	f7fd fd57 	bl	8008db4 <HAL_RCC_GetPCLK2Freq>
 800b306:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b30a:	e003      	b.n	800b314 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b30c:	f7fd fd3e 	bl	8008d8c <HAL_RCC_GetPCLK1Freq>
 800b310:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b318:	69db      	ldr	r3, [r3, #28]
 800b31a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b31e:	f040 810f 	bne.w	800b540 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b322:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b326:	2200      	movs	r2, #0
 800b328:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b32c:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b330:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b334:	4622      	mov	r2, r4
 800b336:	462b      	mov	r3, r5
 800b338:	1891      	adds	r1, r2, r2
 800b33a:	65b9      	str	r1, [r7, #88]	; 0x58
 800b33c:	415b      	adcs	r3, r3
 800b33e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b340:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b344:	4621      	mov	r1, r4
 800b346:	eb12 0801 	adds.w	r8, r2, r1
 800b34a:	4629      	mov	r1, r5
 800b34c:	eb43 0901 	adc.w	r9, r3, r1
 800b350:	f04f 0200 	mov.w	r2, #0
 800b354:	f04f 0300 	mov.w	r3, #0
 800b358:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b35c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b360:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b364:	4690      	mov	r8, r2
 800b366:	4699      	mov	r9, r3
 800b368:	4623      	mov	r3, r4
 800b36a:	eb18 0303 	adds.w	r3, r8, r3
 800b36e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b372:	462b      	mov	r3, r5
 800b374:	eb49 0303 	adc.w	r3, r9, r3
 800b378:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b37c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b380:	685b      	ldr	r3, [r3, #4]
 800b382:	2200      	movs	r2, #0
 800b384:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b388:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b38c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b390:	460b      	mov	r3, r1
 800b392:	18db      	adds	r3, r3, r3
 800b394:	653b      	str	r3, [r7, #80]	; 0x50
 800b396:	4613      	mov	r3, r2
 800b398:	eb42 0303 	adc.w	r3, r2, r3
 800b39c:	657b      	str	r3, [r7, #84]	; 0x54
 800b39e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b3a2:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b3a6:	f7f5 fb09 	bl	80009bc <__aeabi_uldivmod>
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	460b      	mov	r3, r1
 800b3ae:	4b63      	ldr	r3, [pc, #396]	; (800b53c <UART_SetConfig+0x360>)
 800b3b0:	fba3 2302 	umull	r2, r3, r3, r2
 800b3b4:	095b      	lsrs	r3, r3, #5
 800b3b6:	011c      	lsls	r4, r3, #4
 800b3b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b3bc:	2200      	movs	r2, #0
 800b3be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b3c2:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b3c6:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b3ca:	4642      	mov	r2, r8
 800b3cc:	464b      	mov	r3, r9
 800b3ce:	1891      	adds	r1, r2, r2
 800b3d0:	64b9      	str	r1, [r7, #72]	; 0x48
 800b3d2:	415b      	adcs	r3, r3
 800b3d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b3d6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b3da:	4641      	mov	r1, r8
 800b3dc:	eb12 0a01 	adds.w	sl, r2, r1
 800b3e0:	4649      	mov	r1, r9
 800b3e2:	eb43 0b01 	adc.w	fp, r3, r1
 800b3e6:	f04f 0200 	mov.w	r2, #0
 800b3ea:	f04f 0300 	mov.w	r3, #0
 800b3ee:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b3f2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b3f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b3fa:	4692      	mov	sl, r2
 800b3fc:	469b      	mov	fp, r3
 800b3fe:	4643      	mov	r3, r8
 800b400:	eb1a 0303 	adds.w	r3, sl, r3
 800b404:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b408:	464b      	mov	r3, r9
 800b40a:	eb4b 0303 	adc.w	r3, fp, r3
 800b40e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	2200      	movs	r2, #0
 800b41a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b41e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b422:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b426:	460b      	mov	r3, r1
 800b428:	18db      	adds	r3, r3, r3
 800b42a:	643b      	str	r3, [r7, #64]	; 0x40
 800b42c:	4613      	mov	r3, r2
 800b42e:	eb42 0303 	adc.w	r3, r2, r3
 800b432:	647b      	str	r3, [r7, #68]	; 0x44
 800b434:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b438:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b43c:	f7f5 fabe 	bl	80009bc <__aeabi_uldivmod>
 800b440:	4602      	mov	r2, r0
 800b442:	460b      	mov	r3, r1
 800b444:	4611      	mov	r1, r2
 800b446:	4b3d      	ldr	r3, [pc, #244]	; (800b53c <UART_SetConfig+0x360>)
 800b448:	fba3 2301 	umull	r2, r3, r3, r1
 800b44c:	095b      	lsrs	r3, r3, #5
 800b44e:	2264      	movs	r2, #100	; 0x64
 800b450:	fb02 f303 	mul.w	r3, r2, r3
 800b454:	1acb      	subs	r3, r1, r3
 800b456:	00db      	lsls	r3, r3, #3
 800b458:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b45c:	4b37      	ldr	r3, [pc, #220]	; (800b53c <UART_SetConfig+0x360>)
 800b45e:	fba3 2302 	umull	r2, r3, r3, r2
 800b462:	095b      	lsrs	r3, r3, #5
 800b464:	005b      	lsls	r3, r3, #1
 800b466:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b46a:	441c      	add	r4, r3
 800b46c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b470:	2200      	movs	r2, #0
 800b472:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b476:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b47a:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b47e:	4642      	mov	r2, r8
 800b480:	464b      	mov	r3, r9
 800b482:	1891      	adds	r1, r2, r2
 800b484:	63b9      	str	r1, [r7, #56]	; 0x38
 800b486:	415b      	adcs	r3, r3
 800b488:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b48a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b48e:	4641      	mov	r1, r8
 800b490:	1851      	adds	r1, r2, r1
 800b492:	6339      	str	r1, [r7, #48]	; 0x30
 800b494:	4649      	mov	r1, r9
 800b496:	414b      	adcs	r3, r1
 800b498:	637b      	str	r3, [r7, #52]	; 0x34
 800b49a:	f04f 0200 	mov.w	r2, #0
 800b49e:	f04f 0300 	mov.w	r3, #0
 800b4a2:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b4a6:	4659      	mov	r1, fp
 800b4a8:	00cb      	lsls	r3, r1, #3
 800b4aa:	4651      	mov	r1, sl
 800b4ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b4b0:	4651      	mov	r1, sl
 800b4b2:	00ca      	lsls	r2, r1, #3
 800b4b4:	4610      	mov	r0, r2
 800b4b6:	4619      	mov	r1, r3
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	4642      	mov	r2, r8
 800b4bc:	189b      	adds	r3, r3, r2
 800b4be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b4c2:	464b      	mov	r3, r9
 800b4c4:	460a      	mov	r2, r1
 800b4c6:	eb42 0303 	adc.w	r3, r2, r3
 800b4ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b4ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b4da:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b4de:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b4e2:	460b      	mov	r3, r1
 800b4e4:	18db      	adds	r3, r3, r3
 800b4e6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4e8:	4613      	mov	r3, r2
 800b4ea:	eb42 0303 	adc.w	r3, r2, r3
 800b4ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b4f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b4f4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b4f8:	f7f5 fa60 	bl	80009bc <__aeabi_uldivmod>
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	460b      	mov	r3, r1
 800b500:	4b0e      	ldr	r3, [pc, #56]	; (800b53c <UART_SetConfig+0x360>)
 800b502:	fba3 1302 	umull	r1, r3, r3, r2
 800b506:	095b      	lsrs	r3, r3, #5
 800b508:	2164      	movs	r1, #100	; 0x64
 800b50a:	fb01 f303 	mul.w	r3, r1, r3
 800b50e:	1ad3      	subs	r3, r2, r3
 800b510:	00db      	lsls	r3, r3, #3
 800b512:	3332      	adds	r3, #50	; 0x32
 800b514:	4a09      	ldr	r2, [pc, #36]	; (800b53c <UART_SetConfig+0x360>)
 800b516:	fba2 2303 	umull	r2, r3, r2, r3
 800b51a:	095b      	lsrs	r3, r3, #5
 800b51c:	f003 0207 	and.w	r2, r3, #7
 800b520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	4422      	add	r2, r4
 800b528:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b52a:	e108      	b.n	800b73e <UART_SetConfig+0x562>
 800b52c:	00a037a0 	.word	0x00a037a0
 800b530:	0800f2d4 	.word	0x0800f2d4
 800b534:	40011000 	.word	0x40011000
 800b538:	40011400 	.word	0x40011400
 800b53c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b540:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b544:	2200      	movs	r2, #0
 800b546:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b54a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b54e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b552:	4642      	mov	r2, r8
 800b554:	464b      	mov	r3, r9
 800b556:	1891      	adds	r1, r2, r2
 800b558:	6239      	str	r1, [r7, #32]
 800b55a:	415b      	adcs	r3, r3
 800b55c:	627b      	str	r3, [r7, #36]	; 0x24
 800b55e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b562:	4641      	mov	r1, r8
 800b564:	1854      	adds	r4, r2, r1
 800b566:	4649      	mov	r1, r9
 800b568:	eb43 0501 	adc.w	r5, r3, r1
 800b56c:	f04f 0200 	mov.w	r2, #0
 800b570:	f04f 0300 	mov.w	r3, #0
 800b574:	00eb      	lsls	r3, r5, #3
 800b576:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b57a:	00e2      	lsls	r2, r4, #3
 800b57c:	4614      	mov	r4, r2
 800b57e:	461d      	mov	r5, r3
 800b580:	4643      	mov	r3, r8
 800b582:	18e3      	adds	r3, r4, r3
 800b584:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b588:	464b      	mov	r3, r9
 800b58a:	eb45 0303 	adc.w	r3, r5, r3
 800b58e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	2200      	movs	r2, #0
 800b59a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b59e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b5a2:	f04f 0200 	mov.w	r2, #0
 800b5a6:	f04f 0300 	mov.w	r3, #0
 800b5aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b5ae:	4629      	mov	r1, r5
 800b5b0:	008b      	lsls	r3, r1, #2
 800b5b2:	4621      	mov	r1, r4
 800b5b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b5b8:	4621      	mov	r1, r4
 800b5ba:	008a      	lsls	r2, r1, #2
 800b5bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b5c0:	f7f5 f9fc 	bl	80009bc <__aeabi_uldivmod>
 800b5c4:	4602      	mov	r2, r0
 800b5c6:	460b      	mov	r3, r1
 800b5c8:	4b60      	ldr	r3, [pc, #384]	; (800b74c <UART_SetConfig+0x570>)
 800b5ca:	fba3 2302 	umull	r2, r3, r3, r2
 800b5ce:	095b      	lsrs	r3, r3, #5
 800b5d0:	011c      	lsls	r4, r3, #4
 800b5d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b5dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b5e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b5e4:	4642      	mov	r2, r8
 800b5e6:	464b      	mov	r3, r9
 800b5e8:	1891      	adds	r1, r2, r2
 800b5ea:	61b9      	str	r1, [r7, #24]
 800b5ec:	415b      	adcs	r3, r3
 800b5ee:	61fb      	str	r3, [r7, #28]
 800b5f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b5f4:	4641      	mov	r1, r8
 800b5f6:	1851      	adds	r1, r2, r1
 800b5f8:	6139      	str	r1, [r7, #16]
 800b5fa:	4649      	mov	r1, r9
 800b5fc:	414b      	adcs	r3, r1
 800b5fe:	617b      	str	r3, [r7, #20]
 800b600:	f04f 0200 	mov.w	r2, #0
 800b604:	f04f 0300 	mov.w	r3, #0
 800b608:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b60c:	4659      	mov	r1, fp
 800b60e:	00cb      	lsls	r3, r1, #3
 800b610:	4651      	mov	r1, sl
 800b612:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b616:	4651      	mov	r1, sl
 800b618:	00ca      	lsls	r2, r1, #3
 800b61a:	4610      	mov	r0, r2
 800b61c:	4619      	mov	r1, r3
 800b61e:	4603      	mov	r3, r0
 800b620:	4642      	mov	r2, r8
 800b622:	189b      	adds	r3, r3, r2
 800b624:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b628:	464b      	mov	r3, r9
 800b62a:	460a      	mov	r2, r1
 800b62c:	eb42 0303 	adc.w	r3, r2, r3
 800b630:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	2200      	movs	r2, #0
 800b63c:	67bb      	str	r3, [r7, #120]	; 0x78
 800b63e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b640:	f04f 0200 	mov.w	r2, #0
 800b644:	f04f 0300 	mov.w	r3, #0
 800b648:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b64c:	4649      	mov	r1, r9
 800b64e:	008b      	lsls	r3, r1, #2
 800b650:	4641      	mov	r1, r8
 800b652:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b656:	4641      	mov	r1, r8
 800b658:	008a      	lsls	r2, r1, #2
 800b65a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b65e:	f7f5 f9ad 	bl	80009bc <__aeabi_uldivmod>
 800b662:	4602      	mov	r2, r0
 800b664:	460b      	mov	r3, r1
 800b666:	4b39      	ldr	r3, [pc, #228]	; (800b74c <UART_SetConfig+0x570>)
 800b668:	fba3 1302 	umull	r1, r3, r3, r2
 800b66c:	095b      	lsrs	r3, r3, #5
 800b66e:	2164      	movs	r1, #100	; 0x64
 800b670:	fb01 f303 	mul.w	r3, r1, r3
 800b674:	1ad3      	subs	r3, r2, r3
 800b676:	011b      	lsls	r3, r3, #4
 800b678:	3332      	adds	r3, #50	; 0x32
 800b67a:	4a34      	ldr	r2, [pc, #208]	; (800b74c <UART_SetConfig+0x570>)
 800b67c:	fba2 2303 	umull	r2, r3, r2, r3
 800b680:	095b      	lsrs	r3, r3, #5
 800b682:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b686:	441c      	add	r4, r3
 800b688:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b68c:	2200      	movs	r2, #0
 800b68e:	673b      	str	r3, [r7, #112]	; 0x70
 800b690:	677a      	str	r2, [r7, #116]	; 0x74
 800b692:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b696:	4642      	mov	r2, r8
 800b698:	464b      	mov	r3, r9
 800b69a:	1891      	adds	r1, r2, r2
 800b69c:	60b9      	str	r1, [r7, #8]
 800b69e:	415b      	adcs	r3, r3
 800b6a0:	60fb      	str	r3, [r7, #12]
 800b6a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b6a6:	4641      	mov	r1, r8
 800b6a8:	1851      	adds	r1, r2, r1
 800b6aa:	6039      	str	r1, [r7, #0]
 800b6ac:	4649      	mov	r1, r9
 800b6ae:	414b      	adcs	r3, r1
 800b6b0:	607b      	str	r3, [r7, #4]
 800b6b2:	f04f 0200 	mov.w	r2, #0
 800b6b6:	f04f 0300 	mov.w	r3, #0
 800b6ba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b6be:	4659      	mov	r1, fp
 800b6c0:	00cb      	lsls	r3, r1, #3
 800b6c2:	4651      	mov	r1, sl
 800b6c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b6c8:	4651      	mov	r1, sl
 800b6ca:	00ca      	lsls	r2, r1, #3
 800b6cc:	4610      	mov	r0, r2
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	4642      	mov	r2, r8
 800b6d4:	189b      	adds	r3, r3, r2
 800b6d6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b6d8:	464b      	mov	r3, r9
 800b6da:	460a      	mov	r2, r1
 800b6dc:	eb42 0303 	adc.w	r3, r2, r3
 800b6e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b6e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	663b      	str	r3, [r7, #96]	; 0x60
 800b6ec:	667a      	str	r2, [r7, #100]	; 0x64
 800b6ee:	f04f 0200 	mov.w	r2, #0
 800b6f2:	f04f 0300 	mov.w	r3, #0
 800b6f6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b6fa:	4649      	mov	r1, r9
 800b6fc:	008b      	lsls	r3, r1, #2
 800b6fe:	4641      	mov	r1, r8
 800b700:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b704:	4641      	mov	r1, r8
 800b706:	008a      	lsls	r2, r1, #2
 800b708:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b70c:	f7f5 f956 	bl	80009bc <__aeabi_uldivmod>
 800b710:	4602      	mov	r2, r0
 800b712:	460b      	mov	r3, r1
 800b714:	4b0d      	ldr	r3, [pc, #52]	; (800b74c <UART_SetConfig+0x570>)
 800b716:	fba3 1302 	umull	r1, r3, r3, r2
 800b71a:	095b      	lsrs	r3, r3, #5
 800b71c:	2164      	movs	r1, #100	; 0x64
 800b71e:	fb01 f303 	mul.w	r3, r1, r3
 800b722:	1ad3      	subs	r3, r2, r3
 800b724:	011b      	lsls	r3, r3, #4
 800b726:	3332      	adds	r3, #50	; 0x32
 800b728:	4a08      	ldr	r2, [pc, #32]	; (800b74c <UART_SetConfig+0x570>)
 800b72a:	fba2 2303 	umull	r2, r3, r2, r3
 800b72e:	095b      	lsrs	r3, r3, #5
 800b730:	f003 020f 	and.w	r2, r3, #15
 800b734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	4422      	add	r2, r4
 800b73c:	609a      	str	r2, [r3, #8]
}
 800b73e:	bf00      	nop
 800b740:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b744:	46bd      	mov	sp, r7
 800b746:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b74a:	bf00      	nop
 800b74c:	51eb851f 	.word	0x51eb851f

0800b750 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 800b750:	b480      	push	{r7}
 800b752:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 800b754:	bf00      	nop
 800b756:	46bd      	mov	sp, r7
 800b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75c:	4770      	bx	lr
	...

0800b760 <__NVIC_SetPriority>:
{
 800b760:	b480      	push	{r7}
 800b762:	b083      	sub	sp, #12
 800b764:	af00      	add	r7, sp, #0
 800b766:	4603      	mov	r3, r0
 800b768:	6039      	str	r1, [r7, #0]
 800b76a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b76c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b770:	2b00      	cmp	r3, #0
 800b772:	db0a      	blt.n	800b78a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	b2da      	uxtb	r2, r3
 800b778:	490c      	ldr	r1, [pc, #48]	; (800b7ac <__NVIC_SetPriority+0x4c>)
 800b77a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b77e:	0112      	lsls	r2, r2, #4
 800b780:	b2d2      	uxtb	r2, r2
 800b782:	440b      	add	r3, r1
 800b784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b788:	e00a      	b.n	800b7a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	b2da      	uxtb	r2, r3
 800b78e:	4908      	ldr	r1, [pc, #32]	; (800b7b0 <__NVIC_SetPriority+0x50>)
 800b790:	79fb      	ldrb	r3, [r7, #7]
 800b792:	f003 030f 	and.w	r3, r3, #15
 800b796:	3b04      	subs	r3, #4
 800b798:	0112      	lsls	r2, r2, #4
 800b79a:	b2d2      	uxtb	r2, r2
 800b79c:	440b      	add	r3, r1
 800b79e:	761a      	strb	r2, [r3, #24]
}
 800b7a0:	bf00      	nop
 800b7a2:	370c      	adds	r7, #12
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr
 800b7ac:	e000e100 	.word	0xe000e100
 800b7b0:	e000ed00 	.word	0xe000ed00

0800b7b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b7b8:	4b05      	ldr	r3, [pc, #20]	; (800b7d0 <SysTick_Handler+0x1c>)
 800b7ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b7bc:	f002 fc72 	bl	800e0a4 <xTaskGetSchedulerState>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	2b01      	cmp	r3, #1
 800b7c4:	d001      	beq.n	800b7ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b7c6:	f000 fe97 	bl	800c4f8 <xPortSysTickHandler>
  }
}
 800b7ca:	bf00      	nop
 800b7cc:	bd80      	pop	{r7, pc}
 800b7ce:	bf00      	nop
 800b7d0:	e000e010 	.word	0xe000e010

0800b7d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b7d8:	2100      	movs	r1, #0
 800b7da:	f06f 0004 	mvn.w	r0, #4
 800b7de:	f7ff ffbf 	bl	800b760 <__NVIC_SetPriority>
#endif
}
 800b7e2:	bf00      	nop
 800b7e4:	bd80      	pop	{r7, pc}
	...

0800b7e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b7e8:	b480      	push	{r7}
 800b7ea:	b083      	sub	sp, #12
 800b7ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7ee:	f3ef 8305 	mrs	r3, IPSR
 800b7f2:	603b      	str	r3, [r7, #0]
  return(result);
 800b7f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d003      	beq.n	800b802 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b7fa:	f06f 0305 	mvn.w	r3, #5
 800b7fe:	607b      	str	r3, [r7, #4]
 800b800:	e00c      	b.n	800b81c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b802:	4b0a      	ldr	r3, [pc, #40]	; (800b82c <osKernelInitialize+0x44>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d105      	bne.n	800b816 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b80a:	4b08      	ldr	r3, [pc, #32]	; (800b82c <osKernelInitialize+0x44>)
 800b80c:	2201      	movs	r2, #1
 800b80e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b810:	2300      	movs	r3, #0
 800b812:	607b      	str	r3, [r7, #4]
 800b814:	e002      	b.n	800b81c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b816:	f04f 33ff 	mov.w	r3, #4294967295
 800b81a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b81c:	687b      	ldr	r3, [r7, #4]
}
 800b81e:	4618      	mov	r0, r3
 800b820:	370c      	adds	r7, #12
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr
 800b82a:	bf00      	nop
 800b82c:	20000908 	.word	0x20000908

0800b830 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b830:	b580      	push	{r7, lr}
 800b832:	b082      	sub	sp, #8
 800b834:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b836:	f3ef 8305 	mrs	r3, IPSR
 800b83a:	603b      	str	r3, [r7, #0]
  return(result);
 800b83c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d003      	beq.n	800b84a <osKernelStart+0x1a>
    stat = osErrorISR;
 800b842:	f06f 0305 	mvn.w	r3, #5
 800b846:	607b      	str	r3, [r7, #4]
 800b848:	e010      	b.n	800b86c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b84a:	4b0b      	ldr	r3, [pc, #44]	; (800b878 <osKernelStart+0x48>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	2b01      	cmp	r3, #1
 800b850:	d109      	bne.n	800b866 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b852:	f7ff ffbf 	bl	800b7d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b856:	4b08      	ldr	r3, [pc, #32]	; (800b878 <osKernelStart+0x48>)
 800b858:	2202      	movs	r2, #2
 800b85a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b85c:	f001 feb2 	bl	800d5c4 <vTaskStartScheduler>
      stat = osOK;
 800b860:	2300      	movs	r3, #0
 800b862:	607b      	str	r3, [r7, #4]
 800b864:	e002      	b.n	800b86c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b866:	f04f 33ff 	mov.w	r3, #4294967295
 800b86a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b86c:	687b      	ldr	r3, [r7, #4]
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3708      	adds	r7, #8
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	20000908 	.word	0x20000908

0800b87c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b08e      	sub	sp, #56	; 0x38
 800b880:	af04      	add	r7, sp, #16
 800b882:	60f8      	str	r0, [r7, #12]
 800b884:	60b9      	str	r1, [r7, #8]
 800b886:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b888:	2300      	movs	r3, #0
 800b88a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b88c:	f3ef 8305 	mrs	r3, IPSR
 800b890:	617b      	str	r3, [r7, #20]
  return(result);
 800b892:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b894:	2b00      	cmp	r3, #0
 800b896:	d17f      	bne.n	800b998 <osThreadNew+0x11c>
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d07c      	beq.n	800b998 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800b89e:	2380      	movs	r3, #128	; 0x80
 800b8a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b8a2:	2318      	movs	r3, #24
 800b8a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b8aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b8ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d046      	beq.n	800b944 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d002      	beq.n	800b8c4 <osThreadNew+0x48>
        name = attr->name;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	699b      	ldr	r3, [r3, #24]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d002      	beq.n	800b8d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	699b      	ldr	r3, [r3, #24]
 800b8d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b8d2:	69fb      	ldr	r3, [r7, #28]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d008      	beq.n	800b8ea <osThreadNew+0x6e>
 800b8d8:	69fb      	ldr	r3, [r7, #28]
 800b8da:	2b38      	cmp	r3, #56	; 0x38
 800b8dc:	d805      	bhi.n	800b8ea <osThreadNew+0x6e>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	685b      	ldr	r3, [r3, #4]
 800b8e2:	f003 0301 	and.w	r3, r3, #1
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d001      	beq.n	800b8ee <osThreadNew+0x72>
        return (NULL);
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	e055      	b.n	800b99a <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	695b      	ldr	r3, [r3, #20]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d003      	beq.n	800b8fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	695b      	ldr	r3, [r3, #20]
 800b8fa:	089b      	lsrs	r3, r3, #2
 800b8fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	689b      	ldr	r3, [r3, #8]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d00f      	beq.n	800b926 <osThreadNew+0xaa>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	68db      	ldr	r3, [r3, #12]
 800b90a:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 800b90e:	d30a      	bcc.n	800b926 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b914:	2b00      	cmp	r3, #0
 800b916:	d006      	beq.n	800b926 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	695b      	ldr	r3, [r3, #20]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d002      	beq.n	800b926 <osThreadNew+0xaa>
        mem = 1;
 800b920:	2301      	movs	r3, #1
 800b922:	61bb      	str	r3, [r7, #24]
 800b924:	e010      	b.n	800b948 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	689b      	ldr	r3, [r3, #8]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d10c      	bne.n	800b948 <osThreadNew+0xcc>
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	68db      	ldr	r3, [r3, #12]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d108      	bne.n	800b948 <osThreadNew+0xcc>
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	691b      	ldr	r3, [r3, #16]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d104      	bne.n	800b948 <osThreadNew+0xcc>
          mem = 0;
 800b93e:	2300      	movs	r3, #0
 800b940:	61bb      	str	r3, [r7, #24]
 800b942:	e001      	b.n	800b948 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800b944:	2300      	movs	r3, #0
 800b946:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b948:	69bb      	ldr	r3, [r7, #24]
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	d110      	bne.n	800b970 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b956:	9202      	str	r2, [sp, #8]
 800b958:	9301      	str	r3, [sp, #4]
 800b95a:	69fb      	ldr	r3, [r7, #28]
 800b95c:	9300      	str	r3, [sp, #0]
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	6a3a      	ldr	r2, [r7, #32]
 800b962:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b964:	68f8      	ldr	r0, [r7, #12]
 800b966:	f001 fc27 	bl	800d1b8 <xTaskCreateStatic>
 800b96a:	4603      	mov	r3, r0
 800b96c:	613b      	str	r3, [r7, #16]
 800b96e:	e013      	b.n	800b998 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800b970:	69bb      	ldr	r3, [r7, #24]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d110      	bne.n	800b998 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b976:	6a3b      	ldr	r3, [r7, #32]
 800b978:	b29a      	uxth	r2, r3
 800b97a:	f107 0310 	add.w	r3, r7, #16
 800b97e:	9301      	str	r3, [sp, #4]
 800b980:	69fb      	ldr	r3, [r7, #28]
 800b982:	9300      	str	r3, [sp, #0]
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b988:	68f8      	ldr	r0, [r7, #12]
 800b98a:	f001 fc74 	bl	800d276 <xTaskCreate>
 800b98e:	4603      	mov	r3, r0
 800b990:	2b01      	cmp	r3, #1
 800b992:	d001      	beq.n	800b998 <osThreadNew+0x11c>
            hTask = NULL;
 800b994:	2300      	movs	r3, #0
 800b996:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b998:	693b      	ldr	r3, [r7, #16]
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3728      	adds	r7, #40	; 0x28
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}

0800b9a2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b9a2:	b580      	push	{r7, lr}
 800b9a4:	b084      	sub	sp, #16
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9aa:	f3ef 8305 	mrs	r3, IPSR
 800b9ae:	60bb      	str	r3, [r7, #8]
  return(result);
 800b9b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d003      	beq.n	800b9be <osDelay+0x1c>
    stat = osErrorISR;
 800b9b6:	f06f 0305 	mvn.w	r3, #5
 800b9ba:	60fb      	str	r3, [r7, #12]
 800b9bc:	e007      	b.n	800b9ce <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d002      	beq.n	800b9ce <osDelay+0x2c>
      vTaskDelay(ticks);
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f001 fdc7 	bl	800d55c <vTaskDelay>
    }
  }

  return (stat);
 800b9ce:	68fb      	ldr	r3, [r7, #12]
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3710      	adds	r7, #16
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f003 f87c 	bl	800eade <pvTimerGetTimerID>
 800b9e6:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d005      	beq.n	800b9fa <TimerCallback+0x22>
    callb->func (callb->arg);
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	68fa      	ldr	r2, [r7, #12]
 800b9f4:	6852      	ldr	r2, [r2, #4]
 800b9f6:	4610      	mov	r0, r2
 800b9f8:	4798      	blx	r3
  }
}
 800b9fa:	bf00      	nop
 800b9fc:	3710      	adds	r7, #16
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}
	...

0800ba04 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b08c      	sub	sp, #48	; 0x30
 800ba08:	af02      	add	r7, sp, #8
 800ba0a:	60f8      	str	r0, [r7, #12]
 800ba0c:	607a      	str	r2, [r7, #4]
 800ba0e:	603b      	str	r3, [r7, #0]
 800ba10:	460b      	mov	r3, r1
 800ba12:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800ba14:	2300      	movs	r3, #0
 800ba16:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba18:	f3ef 8305 	mrs	r3, IPSR
 800ba1c:	613b      	str	r3, [r7, #16]
  return(result);
 800ba1e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d163      	bne.n	800baec <osTimerNew+0xe8>
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d060      	beq.n	800baec <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800ba2a:	2008      	movs	r0, #8
 800ba2c:	f000 f900 	bl	800bc30 <pvPortMalloc>
 800ba30:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d059      	beq.n	800baec <osTimerNew+0xe8>
      callb->func = func;
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	68fa      	ldr	r2, [r7, #12]
 800ba3c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	687a      	ldr	r2, [r7, #4]
 800ba42:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800ba44:	7afb      	ldrb	r3, [r7, #11]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d102      	bne.n	800ba50 <osTimerNew+0x4c>
        reload = pdFALSE;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	61fb      	str	r3, [r7, #28]
 800ba4e:	e001      	b.n	800ba54 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800ba50:	2301      	movs	r3, #1
 800ba52:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800ba54:	f04f 33ff 	mov.w	r3, #4294967295
 800ba58:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d01c      	beq.n	800ba9e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d002      	beq.n	800ba72 <osTimerNew+0x6e>
          name = attr->name;
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	689b      	ldr	r3, [r3, #8]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d006      	beq.n	800ba88 <osTimerNew+0x84>
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	68db      	ldr	r3, [r3, #12]
 800ba7e:	2b2b      	cmp	r3, #43	; 0x2b
 800ba80:	d902      	bls.n	800ba88 <osTimerNew+0x84>
          mem = 1;
 800ba82:	2301      	movs	r3, #1
 800ba84:	61bb      	str	r3, [r7, #24]
 800ba86:	e00c      	b.n	800baa2 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	689b      	ldr	r3, [r3, #8]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d108      	bne.n	800baa2 <osTimerNew+0x9e>
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	68db      	ldr	r3, [r3, #12]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d104      	bne.n	800baa2 <osTimerNew+0x9e>
            mem = 0;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	61bb      	str	r3, [r7, #24]
 800ba9c:	e001      	b.n	800baa2 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800baa2:	69bb      	ldr	r3, [r7, #24]
 800baa4:	2b01      	cmp	r3, #1
 800baa6:	d10c      	bne.n	800bac2 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	689b      	ldr	r3, [r3, #8]
 800baac:	9301      	str	r3, [sp, #4]
 800baae:	4b12      	ldr	r3, [pc, #72]	; (800baf8 <osTimerNew+0xf4>)
 800bab0:	9300      	str	r3, [sp, #0]
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	69fa      	ldr	r2, [r7, #28]
 800bab6:	2101      	movs	r1, #1
 800bab8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800baba:	f002 fc48 	bl	800e34e <xTimerCreateStatic>
 800babe:	6238      	str	r0, [r7, #32]
 800bac0:	e00b      	b.n	800bada <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800bac2:	69bb      	ldr	r3, [r7, #24]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d108      	bne.n	800bada <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800bac8:	4b0b      	ldr	r3, [pc, #44]	; (800baf8 <osTimerNew+0xf4>)
 800baca:	9300      	str	r3, [sp, #0]
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	69fa      	ldr	r2, [r7, #28]
 800bad0:	2101      	movs	r1, #1
 800bad2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bad4:	f002 fc1a 	bl	800e30c <xTimerCreate>
 800bad8:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800bada:	6a3b      	ldr	r3, [r7, #32]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d105      	bne.n	800baec <osTimerNew+0xe8>
 800bae0:	697b      	ldr	r3, [r7, #20]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d002      	beq.n	800baec <osTimerNew+0xe8>
        vPortFree (callb);
 800bae6:	6978      	ldr	r0, [r7, #20]
 800bae8:	f000 f972 	bl	800bdd0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800baec:	6a3b      	ldr	r3, [r7, #32]
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3728      	adds	r7, #40	; 0x28
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}
 800baf6:	bf00      	nop
 800baf8:	0800b9d9 	.word	0x0800b9d9

0800bafc <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b088      	sub	sp, #32
 800bb00:	af02      	add	r7, sp, #8
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb0a:	f3ef 8305 	mrs	r3, IPSR
 800bb0e:	60fb      	str	r3, [r7, #12]
  return(result);
 800bb10:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d003      	beq.n	800bb1e <osTimerStart+0x22>
    stat = osErrorISR;
 800bb16:	f06f 0305 	mvn.w	r3, #5
 800bb1a:	617b      	str	r3, [r7, #20]
 800bb1c:	e017      	b.n	800bb4e <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d103      	bne.n	800bb2c <osTimerStart+0x30>
    stat = osErrorParameter;
 800bb24:	f06f 0303 	mvn.w	r3, #3
 800bb28:	617b      	str	r3, [r7, #20]
 800bb2a:	e010      	b.n	800bb4e <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	9300      	str	r3, [sp, #0]
 800bb30:	2300      	movs	r3, #0
 800bb32:	683a      	ldr	r2, [r7, #0]
 800bb34:	2104      	movs	r1, #4
 800bb36:	6938      	ldr	r0, [r7, #16]
 800bb38:	f002 fc82 	bl	800e440 <xTimerGenericCommand>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	d102      	bne.n	800bb48 <osTimerStart+0x4c>
      stat = osOK;
 800bb42:	2300      	movs	r3, #0
 800bb44:	617b      	str	r3, [r7, #20]
 800bb46:	e002      	b.n	800bb4e <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800bb48:	f06f 0302 	mvn.w	r3, #2
 800bb4c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800bb4e:	697b      	ldr	r3, [r7, #20]
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3718      	adds	r7, #24
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b088      	sub	sp, #32
 800bb5c:	af02      	add	r7, sp, #8
 800bb5e:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb64:	f3ef 8305 	mrs	r3, IPSR
 800bb68:	60fb      	str	r3, [r7, #12]
  return(result);
 800bb6a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d003      	beq.n	800bb78 <osTimerStop+0x20>
    stat = osErrorISR;
 800bb70:	f06f 0305 	mvn.w	r3, #5
 800bb74:	617b      	str	r3, [r7, #20]
 800bb76:	e021      	b.n	800bbbc <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d103      	bne.n	800bb86 <osTimerStop+0x2e>
    stat = osErrorParameter;
 800bb7e:	f06f 0303 	mvn.w	r3, #3
 800bb82:	617b      	str	r3, [r7, #20]
 800bb84:	e01a      	b.n	800bbbc <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800bb86:	6938      	ldr	r0, [r7, #16]
 800bb88:	f002 ff80 	bl	800ea8c <xTimerIsTimerActive>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d103      	bne.n	800bb9a <osTimerStop+0x42>
      stat = osErrorResource;
 800bb92:	f06f 0302 	mvn.w	r3, #2
 800bb96:	617b      	str	r3, [r7, #20]
 800bb98:	e010      	b.n	800bbbc <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	9300      	str	r3, [sp, #0]
 800bb9e:	2300      	movs	r3, #0
 800bba0:	2200      	movs	r2, #0
 800bba2:	2103      	movs	r1, #3
 800bba4:	6938      	ldr	r0, [r7, #16]
 800bba6:	f002 fc4b 	bl	800e440 <xTimerGenericCommand>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	2b01      	cmp	r3, #1
 800bbae:	d102      	bne.n	800bbb6 <osTimerStop+0x5e>
        stat = osOK;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	617b      	str	r3, [r7, #20]
 800bbb4:	e002      	b.n	800bbbc <osTimerStop+0x64>
      } else {
        stat = osError;
 800bbb6:	f04f 33ff 	mov.w	r3, #4294967295
 800bbba:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800bbbc:	697b      	ldr	r3, [r7, #20]
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3718      	adds	r7, #24
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
	...

0800bbc8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bbc8:	b480      	push	{r7}
 800bbca:	b085      	sub	sp, #20
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	60b9      	str	r1, [r7, #8]
 800bbd2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	4a07      	ldr	r2, [pc, #28]	; (800bbf4 <vApplicationGetIdleTaskMemory+0x2c>)
 800bbd8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	4a06      	ldr	r2, [pc, #24]	; (800bbf8 <vApplicationGetIdleTaskMemory+0x30>)
 800bbde:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2280      	movs	r2, #128	; 0x80
 800bbe4:	601a      	str	r2, [r3, #0]
}
 800bbe6:	bf00      	nop
 800bbe8:	3714      	adds	r7, #20
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr
 800bbf2:	bf00      	nop
 800bbf4:	2000090c 	.word	0x2000090c
 800bbf8:	20000ac8 	.word	0x20000ac8

0800bbfc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bbfc:	b480      	push	{r7}
 800bbfe:	b085      	sub	sp, #20
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	60f8      	str	r0, [r7, #12]
 800bc04:	60b9      	str	r1, [r7, #8]
 800bc06:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	4a07      	ldr	r2, [pc, #28]	; (800bc28 <vApplicationGetTimerTaskMemory+0x2c>)
 800bc0c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	4a06      	ldr	r2, [pc, #24]	; (800bc2c <vApplicationGetTimerTaskMemory+0x30>)
 800bc12:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bc1a:	601a      	str	r2, [r3, #0]
}
 800bc1c:	bf00      	nop
 800bc1e:	3714      	adds	r7, #20
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr
 800bc28:	20000cc8 	.word	0x20000cc8
 800bc2c:	20000e84 	.word	0x20000e84

0800bc30 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b08a      	sub	sp, #40	; 0x28
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bc3c:	f001 fd34 	bl	800d6a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bc40:	4b5d      	ldr	r3, [pc, #372]	; (800bdb8 <pvPortMalloc+0x188>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d101      	bne.n	800bc4c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bc48:	f000 f924 	bl	800be94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bc4c:	4b5b      	ldr	r3, [pc, #364]	; (800bdbc <pvPortMalloc+0x18c>)
 800bc4e:	681a      	ldr	r2, [r3, #0]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	4013      	ands	r3, r2
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	f040 8093 	bne.w	800bd80 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d01d      	beq.n	800bc9c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bc60:	2208      	movs	r2, #8
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	4413      	add	r3, r2
 800bc66:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f003 0307 	and.w	r3, r3, #7
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d014      	beq.n	800bc9c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f023 0307 	bic.w	r3, r3, #7
 800bc78:	3308      	adds	r3, #8
 800bc7a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f003 0307 	and.w	r3, r3, #7
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d00a      	beq.n	800bc9c <pvPortMalloc+0x6c>
	__asm volatile
 800bc86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc8a:	f383 8811 	msr	BASEPRI, r3
 800bc8e:	f3bf 8f6f 	isb	sy
 800bc92:	f3bf 8f4f 	dsb	sy
 800bc96:	617b      	str	r3, [r7, #20]
}
 800bc98:	bf00      	nop
 800bc9a:	e7fe      	b.n	800bc9a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d06e      	beq.n	800bd80 <pvPortMalloc+0x150>
 800bca2:	4b47      	ldr	r3, [pc, #284]	; (800bdc0 <pvPortMalloc+0x190>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	687a      	ldr	r2, [r7, #4]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d869      	bhi.n	800bd80 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bcac:	4b45      	ldr	r3, [pc, #276]	; (800bdc4 <pvPortMalloc+0x194>)
 800bcae:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bcb0:	4b44      	ldr	r3, [pc, #272]	; (800bdc4 <pvPortMalloc+0x194>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bcb6:	e004      	b.n	800bcc2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bcb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcba:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bcc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	687a      	ldr	r2, [r7, #4]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	d903      	bls.n	800bcd4 <pvPortMalloc+0xa4>
 800bccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d1f1      	bne.n	800bcb8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bcd4:	4b38      	ldr	r3, [pc, #224]	; (800bdb8 <pvPortMalloc+0x188>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d050      	beq.n	800bd80 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bcde:	6a3b      	ldr	r3, [r7, #32]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	2208      	movs	r2, #8
 800bce4:	4413      	add	r3, r2
 800bce6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcea:	681a      	ldr	r2, [r3, #0]
 800bcec:	6a3b      	ldr	r3, [r7, #32]
 800bcee:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bcf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf2:	685a      	ldr	r2, [r3, #4]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	1ad2      	subs	r2, r2, r3
 800bcf8:	2308      	movs	r3, #8
 800bcfa:	005b      	lsls	r3, r3, #1
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	d91f      	bls.n	800bd40 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bd00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	4413      	add	r3, r2
 800bd06:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd08:	69bb      	ldr	r3, [r7, #24]
 800bd0a:	f003 0307 	and.w	r3, r3, #7
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d00a      	beq.n	800bd28 <pvPortMalloc+0xf8>
	__asm volatile
 800bd12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd16:	f383 8811 	msr	BASEPRI, r3
 800bd1a:	f3bf 8f6f 	isb	sy
 800bd1e:	f3bf 8f4f 	dsb	sy
 800bd22:	613b      	str	r3, [r7, #16]
}
 800bd24:	bf00      	nop
 800bd26:	e7fe      	b.n	800bd26 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd2a:	685a      	ldr	r2, [r3, #4]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	1ad2      	subs	r2, r2, r3
 800bd30:	69bb      	ldr	r3, [r7, #24]
 800bd32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd36:	687a      	ldr	r2, [r7, #4]
 800bd38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bd3a:	69b8      	ldr	r0, [r7, #24]
 800bd3c:	f000 f90c 	bl	800bf58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bd40:	4b1f      	ldr	r3, [pc, #124]	; (800bdc0 <pvPortMalloc+0x190>)
 800bd42:	681a      	ldr	r2, [r3, #0]
 800bd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd46:	685b      	ldr	r3, [r3, #4]
 800bd48:	1ad3      	subs	r3, r2, r3
 800bd4a:	4a1d      	ldr	r2, [pc, #116]	; (800bdc0 <pvPortMalloc+0x190>)
 800bd4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bd4e:	4b1c      	ldr	r3, [pc, #112]	; (800bdc0 <pvPortMalloc+0x190>)
 800bd50:	681a      	ldr	r2, [r3, #0]
 800bd52:	4b1d      	ldr	r3, [pc, #116]	; (800bdc8 <pvPortMalloc+0x198>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	429a      	cmp	r2, r3
 800bd58:	d203      	bcs.n	800bd62 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bd5a:	4b19      	ldr	r3, [pc, #100]	; (800bdc0 <pvPortMalloc+0x190>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	4a1a      	ldr	r2, [pc, #104]	; (800bdc8 <pvPortMalloc+0x198>)
 800bd60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd64:	685a      	ldr	r2, [r3, #4]
 800bd66:	4b15      	ldr	r3, [pc, #84]	; (800bdbc <pvPortMalloc+0x18c>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	431a      	orrs	r2, r3
 800bd6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd72:	2200      	movs	r2, #0
 800bd74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bd76:	4b15      	ldr	r3, [pc, #84]	; (800bdcc <pvPortMalloc+0x19c>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	3301      	adds	r3, #1
 800bd7c:	4a13      	ldr	r2, [pc, #76]	; (800bdcc <pvPortMalloc+0x19c>)
 800bd7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bd80:	f001 fcd8 	bl	800d734 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800bd84:	69fb      	ldr	r3, [r7, #28]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d101      	bne.n	800bd8e <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800bd8a:	f7f6 fe5d 	bl	8002a48 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd8e:	69fb      	ldr	r3, [r7, #28]
 800bd90:	f003 0307 	and.w	r3, r3, #7
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d00a      	beq.n	800bdae <pvPortMalloc+0x17e>
	__asm volatile
 800bd98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd9c:	f383 8811 	msr	BASEPRI, r3
 800bda0:	f3bf 8f6f 	isb	sy
 800bda4:	f3bf 8f4f 	dsb	sy
 800bda8:	60fb      	str	r3, [r7, #12]
}
 800bdaa:	bf00      	nop
 800bdac:	e7fe      	b.n	800bdac <pvPortMalloc+0x17c>
	return pvReturn;
 800bdae:	69fb      	ldr	r3, [r7, #28]
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	3728      	adds	r7, #40	; 0x28
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}
 800bdb8:	20004e8c 	.word	0x20004e8c
 800bdbc:	20004ea0 	.word	0x20004ea0
 800bdc0:	20004e90 	.word	0x20004e90
 800bdc4:	20004e84 	.word	0x20004e84
 800bdc8:	20004e94 	.word	0x20004e94
 800bdcc:	20004e98 	.word	0x20004e98

0800bdd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b086      	sub	sp, #24
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d04d      	beq.n	800be7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bde2:	2308      	movs	r3, #8
 800bde4:	425b      	negs	r3, r3
 800bde6:	697a      	ldr	r2, [r7, #20]
 800bde8:	4413      	add	r3, r2
 800bdea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	685a      	ldr	r2, [r3, #4]
 800bdf4:	4b24      	ldr	r3, [pc, #144]	; (800be88 <vPortFree+0xb8>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	4013      	ands	r3, r2
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d10a      	bne.n	800be14 <vPortFree+0x44>
	__asm volatile
 800bdfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be02:	f383 8811 	msr	BASEPRI, r3
 800be06:	f3bf 8f6f 	isb	sy
 800be0a:	f3bf 8f4f 	dsb	sy
 800be0e:	60fb      	str	r3, [r7, #12]
}
 800be10:	bf00      	nop
 800be12:	e7fe      	b.n	800be12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d00a      	beq.n	800be32 <vPortFree+0x62>
	__asm volatile
 800be1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be20:	f383 8811 	msr	BASEPRI, r3
 800be24:	f3bf 8f6f 	isb	sy
 800be28:	f3bf 8f4f 	dsb	sy
 800be2c:	60bb      	str	r3, [r7, #8]
}
 800be2e:	bf00      	nop
 800be30:	e7fe      	b.n	800be30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	685a      	ldr	r2, [r3, #4]
 800be36:	4b14      	ldr	r3, [pc, #80]	; (800be88 <vPortFree+0xb8>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	4013      	ands	r3, r2
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d01e      	beq.n	800be7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d11a      	bne.n	800be7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	685a      	ldr	r2, [r3, #4]
 800be4c:	4b0e      	ldr	r3, [pc, #56]	; (800be88 <vPortFree+0xb8>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	43db      	mvns	r3, r3
 800be52:	401a      	ands	r2, r3
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800be58:	f001 fc26 	bl	800d6a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	685a      	ldr	r2, [r3, #4]
 800be60:	4b0a      	ldr	r3, [pc, #40]	; (800be8c <vPortFree+0xbc>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	4413      	add	r3, r2
 800be66:	4a09      	ldr	r2, [pc, #36]	; (800be8c <vPortFree+0xbc>)
 800be68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800be6a:	6938      	ldr	r0, [r7, #16]
 800be6c:	f000 f874 	bl	800bf58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800be70:	4b07      	ldr	r3, [pc, #28]	; (800be90 <vPortFree+0xc0>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	3301      	adds	r3, #1
 800be76:	4a06      	ldr	r2, [pc, #24]	; (800be90 <vPortFree+0xc0>)
 800be78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800be7a:	f001 fc5b 	bl	800d734 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800be7e:	bf00      	nop
 800be80:	3718      	adds	r7, #24
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
 800be86:	bf00      	nop
 800be88:	20004ea0 	.word	0x20004ea0
 800be8c:	20004e90 	.word	0x20004e90
 800be90:	20004e9c 	.word	0x20004e9c

0800be94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800be94:	b480      	push	{r7}
 800be96:	b085      	sub	sp, #20
 800be98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800be9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800be9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bea0:	4b27      	ldr	r3, [pc, #156]	; (800bf40 <prvHeapInit+0xac>)
 800bea2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	f003 0307 	and.w	r3, r3, #7
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d00c      	beq.n	800bec8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	3307      	adds	r3, #7
 800beb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f023 0307 	bic.w	r3, r3, #7
 800beba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bebc:	68ba      	ldr	r2, [r7, #8]
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	1ad3      	subs	r3, r2, r3
 800bec2:	4a1f      	ldr	r2, [pc, #124]	; (800bf40 <prvHeapInit+0xac>)
 800bec4:	4413      	add	r3, r2
 800bec6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800becc:	4a1d      	ldr	r2, [pc, #116]	; (800bf44 <prvHeapInit+0xb0>)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bed2:	4b1c      	ldr	r3, [pc, #112]	; (800bf44 <prvHeapInit+0xb0>)
 800bed4:	2200      	movs	r2, #0
 800bed6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	68ba      	ldr	r2, [r7, #8]
 800bedc:	4413      	add	r3, r2
 800bede:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bee0:	2208      	movs	r2, #8
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	1a9b      	subs	r3, r3, r2
 800bee6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f023 0307 	bic.w	r3, r3, #7
 800beee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	4a15      	ldr	r2, [pc, #84]	; (800bf48 <prvHeapInit+0xb4>)
 800bef4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bef6:	4b14      	ldr	r3, [pc, #80]	; (800bf48 <prvHeapInit+0xb4>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	2200      	movs	r2, #0
 800befc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800befe:	4b12      	ldr	r3, [pc, #72]	; (800bf48 <prvHeapInit+0xb4>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	2200      	movs	r2, #0
 800bf04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	68fa      	ldr	r2, [r7, #12]
 800bf0e:	1ad2      	subs	r2, r2, r3
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bf14:	4b0c      	ldr	r3, [pc, #48]	; (800bf48 <prvHeapInit+0xb4>)
 800bf16:	681a      	ldr	r2, [r3, #0]
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	685b      	ldr	r3, [r3, #4]
 800bf20:	4a0a      	ldr	r2, [pc, #40]	; (800bf4c <prvHeapInit+0xb8>)
 800bf22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	685b      	ldr	r3, [r3, #4]
 800bf28:	4a09      	ldr	r2, [pc, #36]	; (800bf50 <prvHeapInit+0xbc>)
 800bf2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bf2c:	4b09      	ldr	r3, [pc, #36]	; (800bf54 <prvHeapInit+0xc0>)
 800bf2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bf32:	601a      	str	r2, [r3, #0]
}
 800bf34:	bf00      	nop
 800bf36:	3714      	adds	r7, #20
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr
 800bf40:	20001284 	.word	0x20001284
 800bf44:	20004e84 	.word	0x20004e84
 800bf48:	20004e8c 	.word	0x20004e8c
 800bf4c:	20004e94 	.word	0x20004e94
 800bf50:	20004e90 	.word	0x20004e90
 800bf54:	20004ea0 	.word	0x20004ea0

0800bf58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b085      	sub	sp, #20
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bf60:	4b28      	ldr	r3, [pc, #160]	; (800c004 <prvInsertBlockIntoFreeList+0xac>)
 800bf62:	60fb      	str	r3, [r7, #12]
 800bf64:	e002      	b.n	800bf6c <prvInsertBlockIntoFreeList+0x14>
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	60fb      	str	r3, [r7, #12]
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	687a      	ldr	r2, [r7, #4]
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d8f7      	bhi.n	800bf66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	68ba      	ldr	r2, [r7, #8]
 800bf80:	4413      	add	r3, r2
 800bf82:	687a      	ldr	r2, [r7, #4]
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d108      	bne.n	800bf9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	685a      	ldr	r2, [r3, #4]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	685b      	ldr	r3, [r3, #4]
 800bf90:	441a      	add	r2, r3
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	68ba      	ldr	r2, [r7, #8]
 800bfa4:	441a      	add	r2, r3
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d118      	bne.n	800bfe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681a      	ldr	r2, [r3, #0]
 800bfb2:	4b15      	ldr	r3, [pc, #84]	; (800c008 <prvInsertBlockIntoFreeList+0xb0>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	429a      	cmp	r2, r3
 800bfb8:	d00d      	beq.n	800bfd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	685a      	ldr	r2, [r3, #4]
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	685b      	ldr	r3, [r3, #4]
 800bfc4:	441a      	add	r2, r3
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	681a      	ldr	r2, [r3, #0]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	601a      	str	r2, [r3, #0]
 800bfd4:	e008      	b.n	800bfe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bfd6:	4b0c      	ldr	r3, [pc, #48]	; (800c008 <prvInsertBlockIntoFreeList+0xb0>)
 800bfd8:	681a      	ldr	r2, [r3, #0]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	601a      	str	r2, [r3, #0]
 800bfde:	e003      	b.n	800bfe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681a      	ldr	r2, [r3, #0]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bfe8:	68fa      	ldr	r2, [r7, #12]
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d002      	beq.n	800bff6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	687a      	ldr	r2, [r7, #4]
 800bff4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bff6:	bf00      	nop
 800bff8:	3714      	adds	r7, #20
 800bffa:	46bd      	mov	sp, r7
 800bffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c000:	4770      	bx	lr
 800c002:	bf00      	nop
 800c004:	20004e84 	.word	0x20004e84
 800c008:	20004e8c 	.word	0x20004e8c

0800c00c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c00c:	b480      	push	{r7}
 800c00e:	b083      	sub	sp, #12
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f103 0208 	add.w	r2, r3, #8
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f04f 32ff 	mov.w	r2, #4294967295
 800c024:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f103 0208 	add.w	r2, r3, #8
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f103 0208 	add.w	r2, r3, #8
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2200      	movs	r2, #0
 800c03e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c040:	bf00      	nop
 800c042:	370c      	adds	r7, #12
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr

0800c04c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2200      	movs	r2, #0
 800c058:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c05a:	bf00      	nop
 800c05c:	370c      	adds	r7, #12
 800c05e:	46bd      	mov	sp, r7
 800c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c064:	4770      	bx	lr

0800c066 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c066:	b480      	push	{r7}
 800c068:	b085      	sub	sp, #20
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
 800c06e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	685b      	ldr	r3, [r3, #4]
 800c074:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	68fa      	ldr	r2, [r7, #12]
 800c07a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	689a      	ldr	r2, [r3, #8]
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	689b      	ldr	r3, [r3, #8]
 800c088:	683a      	ldr	r2, [r7, #0]
 800c08a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	683a      	ldr	r2, [r7, #0]
 800c090:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	687a      	ldr	r2, [r7, #4]
 800c096:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	1c5a      	adds	r2, r3, #1
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	601a      	str	r2, [r3, #0]
}
 800c0a2:	bf00      	nop
 800c0a4:	3714      	adds	r7, #20
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr

0800c0ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c0ae:	b480      	push	{r7}
 800c0b0:	b085      	sub	sp, #20
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
 800c0b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0c4:	d103      	bne.n	800c0ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	691b      	ldr	r3, [r3, #16]
 800c0ca:	60fb      	str	r3, [r7, #12]
 800c0cc:	e00c      	b.n	800c0e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	3308      	adds	r3, #8
 800c0d2:	60fb      	str	r3, [r7, #12]
 800c0d4:	e002      	b.n	800c0dc <vListInsert+0x2e>
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	685b      	ldr	r3, [r3, #4]
 800c0da:	60fb      	str	r3, [r7, #12]
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	68ba      	ldr	r2, [r7, #8]
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d2f6      	bcs.n	800c0d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	685a      	ldr	r2, [r3, #4]
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	683a      	ldr	r2, [r7, #0]
 800c0f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	68fa      	ldr	r2, [r7, #12]
 800c0fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	683a      	ldr	r2, [r7, #0]
 800c102:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	687a      	ldr	r2, [r7, #4]
 800c108:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	1c5a      	adds	r2, r3, #1
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	601a      	str	r2, [r3, #0]
}
 800c114:	bf00      	nop
 800c116:	3714      	adds	r7, #20
 800c118:	46bd      	mov	sp, r7
 800c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11e:	4770      	bx	lr

0800c120 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c120:	b480      	push	{r7}
 800c122:	b085      	sub	sp, #20
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	691b      	ldr	r3, [r3, #16]
 800c12c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	685b      	ldr	r3, [r3, #4]
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	6892      	ldr	r2, [r2, #8]
 800c136:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	689b      	ldr	r3, [r3, #8]
 800c13c:	687a      	ldr	r2, [r7, #4]
 800c13e:	6852      	ldr	r2, [r2, #4]
 800c140:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	685b      	ldr	r3, [r3, #4]
 800c146:	687a      	ldr	r2, [r7, #4]
 800c148:	429a      	cmp	r2, r3
 800c14a:	d103      	bne.n	800c154 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	689a      	ldr	r2, [r3, #8]
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2200      	movs	r2, #0
 800c158:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	1e5a      	subs	r2, r3, #1
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
}
 800c168:	4618      	mov	r0, r3
 800c16a:	3714      	adds	r7, #20
 800c16c:	46bd      	mov	sp, r7
 800c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c172:	4770      	bx	lr

0800c174 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c174:	b480      	push	{r7}
 800c176:	b085      	sub	sp, #20
 800c178:	af00      	add	r7, sp, #0
 800c17a:	60f8      	str	r0, [r7, #12]
 800c17c:	60b9      	str	r1, [r7, #8]
 800c17e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	3b04      	subs	r3, #4
 800c184:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c18c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	3b04      	subs	r3, #4
 800c192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	f023 0201 	bic.w	r2, r3, #1
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	3b04      	subs	r3, #4
 800c1a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c1a4:	4a0c      	ldr	r2, [pc, #48]	; (800c1d8 <pxPortInitialiseStack+0x64>)
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	3b14      	subs	r3, #20
 800c1ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c1b0:	687a      	ldr	r2, [r7, #4]
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	3b04      	subs	r3, #4
 800c1ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	f06f 0202 	mvn.w	r2, #2
 800c1c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	3b20      	subs	r3, #32
 800c1c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	3714      	adds	r7, #20
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d6:	4770      	bx	lr
 800c1d8:	0800c1dd 	.word	0x0800c1dd

0800c1dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b085      	sub	sp, #20
 800c1e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c1e6:	4b12      	ldr	r3, [pc, #72]	; (800c230 <prvTaskExitError+0x54>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ee:	d00a      	beq.n	800c206 <prvTaskExitError+0x2a>
	__asm volatile
 800c1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f4:	f383 8811 	msr	BASEPRI, r3
 800c1f8:	f3bf 8f6f 	isb	sy
 800c1fc:	f3bf 8f4f 	dsb	sy
 800c200:	60fb      	str	r3, [r7, #12]
}
 800c202:	bf00      	nop
 800c204:	e7fe      	b.n	800c204 <prvTaskExitError+0x28>
	__asm volatile
 800c206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c20a:	f383 8811 	msr	BASEPRI, r3
 800c20e:	f3bf 8f6f 	isb	sy
 800c212:	f3bf 8f4f 	dsb	sy
 800c216:	60bb      	str	r3, [r7, #8]
}
 800c218:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c21a:	bf00      	nop
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d0fc      	beq.n	800c21c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c222:	bf00      	nop
 800c224:	bf00      	nop
 800c226:	3714      	adds	r7, #20
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr
 800c230:	2000000c 	.word	0x2000000c
	...

0800c240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c240:	4b07      	ldr	r3, [pc, #28]	; (800c260 <pxCurrentTCBConst2>)
 800c242:	6819      	ldr	r1, [r3, #0]
 800c244:	6808      	ldr	r0, [r1, #0]
 800c246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c24a:	f380 8809 	msr	PSP, r0
 800c24e:	f3bf 8f6f 	isb	sy
 800c252:	f04f 0000 	mov.w	r0, #0
 800c256:	f380 8811 	msr	BASEPRI, r0
 800c25a:	4770      	bx	lr
 800c25c:	f3af 8000 	nop.w

0800c260 <pxCurrentTCBConst2>:
 800c260:	20004ef8 	.word	0x20004ef8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c264:	bf00      	nop
 800c266:	bf00      	nop

0800c268 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c268:	4808      	ldr	r0, [pc, #32]	; (800c28c <prvPortStartFirstTask+0x24>)
 800c26a:	6800      	ldr	r0, [r0, #0]
 800c26c:	6800      	ldr	r0, [r0, #0]
 800c26e:	f380 8808 	msr	MSP, r0
 800c272:	f04f 0000 	mov.w	r0, #0
 800c276:	f380 8814 	msr	CONTROL, r0
 800c27a:	b662      	cpsie	i
 800c27c:	b661      	cpsie	f
 800c27e:	f3bf 8f4f 	dsb	sy
 800c282:	f3bf 8f6f 	isb	sy
 800c286:	df00      	svc	0
 800c288:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c28a:	bf00      	nop
 800c28c:	e000ed08 	.word	0xe000ed08

0800c290 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b086      	sub	sp, #24
 800c294:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c296:	4b46      	ldr	r3, [pc, #280]	; (800c3b0 <xPortStartScheduler+0x120>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	4a46      	ldr	r2, [pc, #280]	; (800c3b4 <xPortStartScheduler+0x124>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d10a      	bne.n	800c2b6 <xPortStartScheduler+0x26>
	__asm volatile
 800c2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a4:	f383 8811 	msr	BASEPRI, r3
 800c2a8:	f3bf 8f6f 	isb	sy
 800c2ac:	f3bf 8f4f 	dsb	sy
 800c2b0:	613b      	str	r3, [r7, #16]
}
 800c2b2:	bf00      	nop
 800c2b4:	e7fe      	b.n	800c2b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c2b6:	4b3e      	ldr	r3, [pc, #248]	; (800c3b0 <xPortStartScheduler+0x120>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4a3f      	ldr	r2, [pc, #252]	; (800c3b8 <xPortStartScheduler+0x128>)
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d10a      	bne.n	800c2d6 <xPortStartScheduler+0x46>
	__asm volatile
 800c2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c4:	f383 8811 	msr	BASEPRI, r3
 800c2c8:	f3bf 8f6f 	isb	sy
 800c2cc:	f3bf 8f4f 	dsb	sy
 800c2d0:	60fb      	str	r3, [r7, #12]
}
 800c2d2:	bf00      	nop
 800c2d4:	e7fe      	b.n	800c2d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c2d6:	4b39      	ldr	r3, [pc, #228]	; (800c3bc <xPortStartScheduler+0x12c>)
 800c2d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	b2db      	uxtb	r3, r3
 800c2e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	22ff      	movs	r2, #255	; 0xff
 800c2e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	b2db      	uxtb	r3, r3
 800c2ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c2f0:	78fb      	ldrb	r3, [r7, #3]
 800c2f2:	b2db      	uxtb	r3, r3
 800c2f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c2f8:	b2da      	uxtb	r2, r3
 800c2fa:	4b31      	ldr	r3, [pc, #196]	; (800c3c0 <xPortStartScheduler+0x130>)
 800c2fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c2fe:	4b31      	ldr	r3, [pc, #196]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c300:	2207      	movs	r2, #7
 800c302:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c304:	e009      	b.n	800c31a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c306:	4b2f      	ldr	r3, [pc, #188]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	3b01      	subs	r3, #1
 800c30c:	4a2d      	ldr	r2, [pc, #180]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c30e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c310:	78fb      	ldrb	r3, [r7, #3]
 800c312:	b2db      	uxtb	r3, r3
 800c314:	005b      	lsls	r3, r3, #1
 800c316:	b2db      	uxtb	r3, r3
 800c318:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c31a:	78fb      	ldrb	r3, [r7, #3]
 800c31c:	b2db      	uxtb	r3, r3
 800c31e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c322:	2b80      	cmp	r3, #128	; 0x80
 800c324:	d0ef      	beq.n	800c306 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c326:	4b27      	ldr	r3, [pc, #156]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f1c3 0307 	rsb	r3, r3, #7
 800c32e:	2b04      	cmp	r3, #4
 800c330:	d00a      	beq.n	800c348 <xPortStartScheduler+0xb8>
	__asm volatile
 800c332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c336:	f383 8811 	msr	BASEPRI, r3
 800c33a:	f3bf 8f6f 	isb	sy
 800c33e:	f3bf 8f4f 	dsb	sy
 800c342:	60bb      	str	r3, [r7, #8]
}
 800c344:	bf00      	nop
 800c346:	e7fe      	b.n	800c346 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c348:	4b1e      	ldr	r3, [pc, #120]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	021b      	lsls	r3, r3, #8
 800c34e:	4a1d      	ldr	r2, [pc, #116]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c350:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c352:	4b1c      	ldr	r3, [pc, #112]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c35a:	4a1a      	ldr	r2, [pc, #104]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c35c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	b2da      	uxtb	r2, r3
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c366:	4b18      	ldr	r3, [pc, #96]	; (800c3c8 <xPortStartScheduler+0x138>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	4a17      	ldr	r2, [pc, #92]	; (800c3c8 <xPortStartScheduler+0x138>)
 800c36c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c370:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c372:	4b15      	ldr	r3, [pc, #84]	; (800c3c8 <xPortStartScheduler+0x138>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4a14      	ldr	r2, [pc, #80]	; (800c3c8 <xPortStartScheduler+0x138>)
 800c378:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c37c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c37e:	f000 f9a9 	bl	800c6d4 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c382:	4b12      	ldr	r3, [pc, #72]	; (800c3cc <xPortStartScheduler+0x13c>)
 800c384:	2200      	movs	r2, #0
 800c386:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c388:	f000 f9e0 	bl	800c74c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c38c:	4b10      	ldr	r3, [pc, #64]	; (800c3d0 <xPortStartScheduler+0x140>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4a0f      	ldr	r2, [pc, #60]	; (800c3d0 <xPortStartScheduler+0x140>)
 800c392:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c396:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c398:	f7ff ff66 	bl	800c268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c39c:	f001 fb62 	bl	800da64 <vTaskSwitchContext>
	prvTaskExitError();
 800c3a0:	f7ff ff1c 	bl	800c1dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c3a4:	2300      	movs	r3, #0
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3718      	adds	r7, #24
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}
 800c3ae:	bf00      	nop
 800c3b0:	e000ed00 	.word	0xe000ed00
 800c3b4:	410fc271 	.word	0x410fc271
 800c3b8:	410fc270 	.word	0x410fc270
 800c3bc:	e000e400 	.word	0xe000e400
 800c3c0:	20004eb0 	.word	0x20004eb0
 800c3c4:	20004eb4 	.word	0x20004eb4
 800c3c8:	e000ed20 	.word	0xe000ed20
 800c3cc:	2000000c 	.word	0x2000000c
 800c3d0:	e000ef34 	.word	0xe000ef34

0800c3d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b083      	sub	sp, #12
 800c3d8:	af00      	add	r7, sp, #0
	__asm volatile
 800c3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3de:	f383 8811 	msr	BASEPRI, r3
 800c3e2:	f3bf 8f6f 	isb	sy
 800c3e6:	f3bf 8f4f 	dsb	sy
 800c3ea:	607b      	str	r3, [r7, #4]
}
 800c3ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c3ee:	4b0f      	ldr	r3, [pc, #60]	; (800c42c <vPortEnterCritical+0x58>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	4a0d      	ldr	r2, [pc, #52]	; (800c42c <vPortEnterCritical+0x58>)
 800c3f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c3f8:	4b0c      	ldr	r3, [pc, #48]	; (800c42c <vPortEnterCritical+0x58>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	d10f      	bne.n	800c420 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c400:	4b0b      	ldr	r3, [pc, #44]	; (800c430 <vPortEnterCritical+0x5c>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	b2db      	uxtb	r3, r3
 800c406:	2b00      	cmp	r3, #0
 800c408:	d00a      	beq.n	800c420 <vPortEnterCritical+0x4c>
	__asm volatile
 800c40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c40e:	f383 8811 	msr	BASEPRI, r3
 800c412:	f3bf 8f6f 	isb	sy
 800c416:	f3bf 8f4f 	dsb	sy
 800c41a:	603b      	str	r3, [r7, #0]
}
 800c41c:	bf00      	nop
 800c41e:	e7fe      	b.n	800c41e <vPortEnterCritical+0x4a>
	}
}
 800c420:	bf00      	nop
 800c422:	370c      	adds	r7, #12
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr
 800c42c:	2000000c 	.word	0x2000000c
 800c430:	e000ed04 	.word	0xe000ed04

0800c434 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c434:	b480      	push	{r7}
 800c436:	b083      	sub	sp, #12
 800c438:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c43a:	4b12      	ldr	r3, [pc, #72]	; (800c484 <vPortExitCritical+0x50>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d10a      	bne.n	800c458 <vPortExitCritical+0x24>
	__asm volatile
 800c442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c446:	f383 8811 	msr	BASEPRI, r3
 800c44a:	f3bf 8f6f 	isb	sy
 800c44e:	f3bf 8f4f 	dsb	sy
 800c452:	607b      	str	r3, [r7, #4]
}
 800c454:	bf00      	nop
 800c456:	e7fe      	b.n	800c456 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c458:	4b0a      	ldr	r3, [pc, #40]	; (800c484 <vPortExitCritical+0x50>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	3b01      	subs	r3, #1
 800c45e:	4a09      	ldr	r2, [pc, #36]	; (800c484 <vPortExitCritical+0x50>)
 800c460:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c462:	4b08      	ldr	r3, [pc, #32]	; (800c484 <vPortExitCritical+0x50>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d105      	bne.n	800c476 <vPortExitCritical+0x42>
 800c46a:	2300      	movs	r3, #0
 800c46c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	f383 8811 	msr	BASEPRI, r3
}
 800c474:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c476:	bf00      	nop
 800c478:	370c      	adds	r7, #12
 800c47a:	46bd      	mov	sp, r7
 800c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c480:	4770      	bx	lr
 800c482:	bf00      	nop
 800c484:	2000000c 	.word	0x2000000c
	...

0800c490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c490:	f3ef 8009 	mrs	r0, PSP
 800c494:	f3bf 8f6f 	isb	sy
 800c498:	4b15      	ldr	r3, [pc, #84]	; (800c4f0 <pxCurrentTCBConst>)
 800c49a:	681a      	ldr	r2, [r3, #0]
 800c49c:	f01e 0f10 	tst.w	lr, #16
 800c4a0:	bf08      	it	eq
 800c4a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c4a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4aa:	6010      	str	r0, [r2, #0]
 800c4ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c4b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c4b4:	f380 8811 	msr	BASEPRI, r0
 800c4b8:	f3bf 8f4f 	dsb	sy
 800c4bc:	f3bf 8f6f 	isb	sy
 800c4c0:	f001 fad0 	bl	800da64 <vTaskSwitchContext>
 800c4c4:	f04f 0000 	mov.w	r0, #0
 800c4c8:	f380 8811 	msr	BASEPRI, r0
 800c4cc:	bc09      	pop	{r0, r3}
 800c4ce:	6819      	ldr	r1, [r3, #0]
 800c4d0:	6808      	ldr	r0, [r1, #0]
 800c4d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4d6:	f01e 0f10 	tst.w	lr, #16
 800c4da:	bf08      	it	eq
 800c4dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c4e0:	f380 8809 	msr	PSP, r0
 800c4e4:	f3bf 8f6f 	isb	sy
 800c4e8:	4770      	bx	lr
 800c4ea:	bf00      	nop
 800c4ec:	f3af 8000 	nop.w

0800c4f0 <pxCurrentTCBConst>:
 800c4f0:	20004ef8 	.word	0x20004ef8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c4f4:	bf00      	nop
 800c4f6:	bf00      	nop

0800c4f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b082      	sub	sp, #8
 800c4fc:	af00      	add	r7, sp, #0
	__asm volatile
 800c4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c502:	f383 8811 	msr	BASEPRI, r3
 800c506:	f3bf 8f6f 	isb	sy
 800c50a:	f3bf 8f4f 	dsb	sy
 800c50e:	607b      	str	r3, [r7, #4]
}
 800c510:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c512:	f001 f9e5 	bl	800d8e0 <xTaskIncrementTick>
 800c516:	4603      	mov	r3, r0
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d003      	beq.n	800c524 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c51c:	4b06      	ldr	r3, [pc, #24]	; (800c538 <xPortSysTickHandler+0x40>)
 800c51e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c522:	601a      	str	r2, [r3, #0]
 800c524:	2300      	movs	r3, #0
 800c526:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	f383 8811 	msr	BASEPRI, r3
}
 800c52e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c530:	bf00      	nop
 800c532:	3708      	adds	r7, #8
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}
 800c538:	e000ed04 	.word	0xe000ed04

0800c53c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b088      	sub	sp, #32
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800c544:	4b5d      	ldr	r3, [pc, #372]	; (800c6bc <vPortSuppressTicksAndSleep+0x180>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	687a      	ldr	r2, [r7, #4]
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d902      	bls.n	800c554 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800c54e:	4b5b      	ldr	r3, [pc, #364]	; (800c6bc <vPortSuppressTicksAndSleep+0x180>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800c554:	4b5a      	ldr	r3, [pc, #360]	; (800c6c0 <vPortSuppressTicksAndSleep+0x184>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4a59      	ldr	r2, [pc, #356]	; (800c6c0 <vPortSuppressTicksAndSleep+0x184>)
 800c55a:	f023 0301 	bic.w	r3, r3, #1
 800c55e:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800c560:	4b58      	ldr	r3, [pc, #352]	; (800c6c4 <vPortSuppressTicksAndSleep+0x188>)
 800c562:	681a      	ldr	r2, [r3, #0]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	3b01      	subs	r3, #1
 800c568:	4957      	ldr	r1, [pc, #348]	; (800c6c8 <vPortSuppressTicksAndSleep+0x18c>)
 800c56a:	6809      	ldr	r1, [r1, #0]
 800c56c:	fb01 f303 	mul.w	r3, r1, r3
 800c570:	4413      	add	r3, r2
 800c572:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800c574:	4b55      	ldr	r3, [pc, #340]	; (800c6cc <vPortSuppressTicksAndSleep+0x190>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	69fa      	ldr	r2, [r7, #28]
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d904      	bls.n	800c588 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800c57e:	4b53      	ldr	r3, [pc, #332]	; (800c6cc <vPortSuppressTicksAndSleep+0x190>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	69fa      	ldr	r2, [r7, #28]
 800c584:	1ad3      	subs	r3, r2, r3
 800c586:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800c588:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800c58a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800c58e:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800c592:	f001 fc95 	bl	800dec0 <eTaskConfirmSleepModeStatus>
 800c596:	4603      	mov	r3, r0
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d110      	bne.n	800c5be <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800c59c:	4b49      	ldr	r3, [pc, #292]	; (800c6c4 <vPortSuppressTicksAndSleep+0x188>)
 800c59e:	4a4c      	ldr	r2, [pc, #304]	; (800c6d0 <vPortSuppressTicksAndSleep+0x194>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800c5a4:	4b46      	ldr	r3, [pc, #280]	; (800c6c0 <vPortSuppressTicksAndSleep+0x184>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	4a45      	ldr	r2, [pc, #276]	; (800c6c0 <vPortSuppressTicksAndSleep+0x184>)
 800c5aa:	f043 0301 	orr.w	r3, r3, #1
 800c5ae:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800c5b0:	4b45      	ldr	r3, [pc, #276]	; (800c6c8 <vPortSuppressTicksAndSleep+0x18c>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4a46      	ldr	r2, [pc, #280]	; (800c6d0 <vPortSuppressTicksAndSleep+0x194>)
 800c5b6:	3b01      	subs	r3, #1
 800c5b8:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800c5ba:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800c5bc:	e079      	b.n	800c6b2 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800c5be:	4a44      	ldr	r2, [pc, #272]	; (800c6d0 <vPortSuppressTicksAndSleep+0x194>)
 800c5c0:	69fb      	ldr	r3, [r7, #28]
 800c5c2:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c5c4:	4b3f      	ldr	r3, [pc, #252]	; (800c6c4 <vPortSuppressTicksAndSleep+0x188>)
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800c5ca:	4b3d      	ldr	r3, [pc, #244]	; (800c6c0 <vPortSuppressTicksAndSleep+0x184>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	4a3c      	ldr	r2, [pc, #240]	; (800c6c0 <vPortSuppressTicksAndSleep+0x184>)
 800c5d0:	f043 0301 	orr.w	r3, r3, #1
 800c5d4:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800c5da:	2300      	movs	r3, #0
 800c5dc:	613b      	str	r3, [r7, #16]
 800c5de:	6938      	ldr	r0, [r7, #16]
 800c5e0:	f7f6 fa40 	bl	8002a64 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d004      	beq.n	800c5f4 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800c5ea:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800c5ee:	bf30      	wfi
				__asm volatile( "isb" );
 800c5f0:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f7f6 fa3f 	bl	8002a78 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800c5fa:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800c5fc:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800c600:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800c604:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800c606:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800c60a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800c60e:	4b2c      	ldr	r3, [pc, #176]	; (800c6c0 <vPortSuppressTicksAndSleep+0x184>)
 800c610:	2206      	movs	r2, #6
 800c612:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800c614:	4b2a      	ldr	r3, [pc, #168]	; (800c6c0 <vPortSuppressTicksAndSleep+0x184>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d01d      	beq.n	800c65c <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800c620:	4b29      	ldr	r3, [pc, #164]	; (800c6c8 <vPortSuppressTicksAndSleep+0x18c>)
 800c622:	681a      	ldr	r2, [r3, #0]
 800c624:	4b27      	ldr	r3, [pc, #156]	; (800c6c4 <vPortSuppressTicksAndSleep+0x188>)
 800c626:	6819      	ldr	r1, [r3, #0]
 800c628:	69fb      	ldr	r3, [r7, #28]
 800c62a:	1acb      	subs	r3, r1, r3
 800c62c:	4413      	add	r3, r2
 800c62e:	3b01      	subs	r3, #1
 800c630:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800c632:	4b26      	ldr	r3, [pc, #152]	; (800c6cc <vPortSuppressTicksAndSleep+0x190>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	697a      	ldr	r2, [r7, #20]
 800c638:	429a      	cmp	r2, r3
 800c63a:	d304      	bcc.n	800c646 <vPortSuppressTicksAndSleep+0x10a>
 800c63c:	4b22      	ldr	r3, [pc, #136]	; (800c6c8 <vPortSuppressTicksAndSleep+0x18c>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	697a      	ldr	r2, [r7, #20]
 800c642:	429a      	cmp	r2, r3
 800c644:	d903      	bls.n	800c64e <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800c646:	4b20      	ldr	r3, [pc, #128]	; (800c6c8 <vPortSuppressTicksAndSleep+0x18c>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	3b01      	subs	r3, #1
 800c64c:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800c64e:	4a20      	ldr	r2, [pc, #128]	; (800c6d0 <vPortSuppressTicksAndSleep+0x194>)
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	3b01      	subs	r3, #1
 800c658:	61bb      	str	r3, [r7, #24]
 800c65a:	e018      	b.n	800c68e <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800c65c:	4b1a      	ldr	r3, [pc, #104]	; (800c6c8 <vPortSuppressTicksAndSleep+0x18c>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	687a      	ldr	r2, [r7, #4]
 800c662:	fb03 f202 	mul.w	r2, r3, r2
 800c666:	4b17      	ldr	r3, [pc, #92]	; (800c6c4 <vPortSuppressTicksAndSleep+0x188>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	1ad3      	subs	r3, r2, r3
 800c66c:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800c66e:	4b16      	ldr	r3, [pc, #88]	; (800c6c8 <vPortSuppressTicksAndSleep+0x18c>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	68fa      	ldr	r2, [r7, #12]
 800c674:	fbb2 f3f3 	udiv	r3, r2, r3
 800c678:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800c67a:	69bb      	ldr	r3, [r7, #24]
 800c67c:	3301      	adds	r3, #1
 800c67e:	4a12      	ldr	r2, [pc, #72]	; (800c6c8 <vPortSuppressTicksAndSleep+0x18c>)
 800c680:	6812      	ldr	r2, [r2, #0]
 800c682:	fb03 f202 	mul.w	r2, r3, r2
 800c686:	4912      	ldr	r1, [pc, #72]	; (800c6d0 <vPortSuppressTicksAndSleep+0x194>)
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	1ad3      	subs	r3, r2, r3
 800c68c:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c68e:	4b0d      	ldr	r3, [pc, #52]	; (800c6c4 <vPortSuppressTicksAndSleep+0x188>)
 800c690:	2200      	movs	r2, #0
 800c692:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800c694:	4b0a      	ldr	r3, [pc, #40]	; (800c6c0 <vPortSuppressTicksAndSleep+0x184>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4a09      	ldr	r2, [pc, #36]	; (800c6c0 <vPortSuppressTicksAndSleep+0x184>)
 800c69a:	f043 0301 	orr.w	r3, r3, #1
 800c69e:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800c6a0:	69b8      	ldr	r0, [r7, #24]
 800c6a2:	f001 f8f5 	bl	800d890 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800c6a6:	4b08      	ldr	r3, [pc, #32]	; (800c6c8 <vPortSuppressTicksAndSleep+0x18c>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4a09      	ldr	r2, [pc, #36]	; (800c6d0 <vPortSuppressTicksAndSleep+0x194>)
 800c6ac:	3b01      	subs	r3, #1
 800c6ae:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800c6b0:	b662      	cpsie	i
	}
 800c6b2:	bf00      	nop
 800c6b4:	3720      	adds	r7, #32
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}
 800c6ba:	bf00      	nop
 800c6bc:	20004ea8 	.word	0x20004ea8
 800c6c0:	e000e010 	.word	0xe000e010
 800c6c4:	e000e018 	.word	0xe000e018
 800c6c8:	20004ea4 	.word	0x20004ea4
 800c6cc:	20004eac 	.word	0x20004eac
 800c6d0:	e000e014 	.word	0xe000e014

0800c6d4 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800c6d8:	4b14      	ldr	r3, [pc, #80]	; (800c72c <vPortSetupTimerInterrupt+0x58>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	4a14      	ldr	r2, [pc, #80]	; (800c730 <vPortSetupTimerInterrupt+0x5c>)
 800c6de:	fba2 2303 	umull	r2, r3, r2, r3
 800c6e2:	099b      	lsrs	r3, r3, #6
 800c6e4:	4a13      	ldr	r2, [pc, #76]	; (800c734 <vPortSetupTimerInterrupt+0x60>)
 800c6e6:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800c6e8:	4b12      	ldr	r3, [pc, #72]	; (800c734 <vPortSetupTimerInterrupt+0x60>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800c6f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6f4:	4a10      	ldr	r2, [pc, #64]	; (800c738 <vPortSetupTimerInterrupt+0x64>)
 800c6f6:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800c6f8:	4b10      	ldr	r3, [pc, #64]	; (800c73c <vPortSetupTimerInterrupt+0x68>)
 800c6fa:	222d      	movs	r2, #45	; 0x2d
 800c6fc:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c6fe:	4b10      	ldr	r3, [pc, #64]	; (800c740 <vPortSetupTimerInterrupt+0x6c>)
 800c700:	2200      	movs	r2, #0
 800c702:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c704:	4b0f      	ldr	r3, [pc, #60]	; (800c744 <vPortSetupTimerInterrupt+0x70>)
 800c706:	2200      	movs	r2, #0
 800c708:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c70a:	4b08      	ldr	r3, [pc, #32]	; (800c72c <vPortSetupTimerInterrupt+0x58>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	4a08      	ldr	r2, [pc, #32]	; (800c730 <vPortSetupTimerInterrupt+0x5c>)
 800c710:	fba2 2303 	umull	r2, r3, r2, r3
 800c714:	099b      	lsrs	r3, r3, #6
 800c716:	4a0c      	ldr	r2, [pc, #48]	; (800c748 <vPortSetupTimerInterrupt+0x74>)
 800c718:	3b01      	subs	r3, #1
 800c71a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c71c:	4b08      	ldr	r3, [pc, #32]	; (800c740 <vPortSetupTimerInterrupt+0x6c>)
 800c71e:	2207      	movs	r2, #7
 800c720:	601a      	str	r2, [r3, #0]
}
 800c722:	bf00      	nop
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr
 800c72c:	20000000 	.word	0x20000000
 800c730:	10624dd3 	.word	0x10624dd3
 800c734:	20004ea4 	.word	0x20004ea4
 800c738:	20004ea8 	.word	0x20004ea8
 800c73c:	20004eac 	.word	0x20004eac
 800c740:	e000e010 	.word	0xe000e010
 800c744:	e000e018 	.word	0xe000e018
 800c748:	e000e014 	.word	0xe000e014

0800c74c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c74c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c75c <vPortEnableVFP+0x10>
 800c750:	6801      	ldr	r1, [r0, #0]
 800c752:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c756:	6001      	str	r1, [r0, #0]
 800c758:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c75a:	bf00      	nop
 800c75c:	e000ed88 	.word	0xe000ed88

0800c760 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c760:	b480      	push	{r7}
 800c762:	b085      	sub	sp, #20
 800c764:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c766:	f3ef 8305 	mrs	r3, IPSR
 800c76a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	2b0f      	cmp	r3, #15
 800c770:	d914      	bls.n	800c79c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c772:	4a17      	ldr	r2, [pc, #92]	; (800c7d0 <vPortValidateInterruptPriority+0x70>)
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	4413      	add	r3, r2
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c77c:	4b15      	ldr	r3, [pc, #84]	; (800c7d4 <vPortValidateInterruptPriority+0x74>)
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	7afa      	ldrb	r2, [r7, #11]
 800c782:	429a      	cmp	r2, r3
 800c784:	d20a      	bcs.n	800c79c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c78a:	f383 8811 	msr	BASEPRI, r3
 800c78e:	f3bf 8f6f 	isb	sy
 800c792:	f3bf 8f4f 	dsb	sy
 800c796:	607b      	str	r3, [r7, #4]
}
 800c798:	bf00      	nop
 800c79a:	e7fe      	b.n	800c79a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c79c:	4b0e      	ldr	r3, [pc, #56]	; (800c7d8 <vPortValidateInterruptPriority+0x78>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c7a4:	4b0d      	ldr	r3, [pc, #52]	; (800c7dc <vPortValidateInterruptPriority+0x7c>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d90a      	bls.n	800c7c2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b0:	f383 8811 	msr	BASEPRI, r3
 800c7b4:	f3bf 8f6f 	isb	sy
 800c7b8:	f3bf 8f4f 	dsb	sy
 800c7bc:	603b      	str	r3, [r7, #0]
}
 800c7be:	bf00      	nop
 800c7c0:	e7fe      	b.n	800c7c0 <vPortValidateInterruptPriority+0x60>
	}
 800c7c2:	bf00      	nop
 800c7c4:	3714      	adds	r7, #20
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7cc:	4770      	bx	lr
 800c7ce:	bf00      	nop
 800c7d0:	e000e3f0 	.word	0xe000e3f0
 800c7d4:	20004eb0 	.word	0x20004eb0
 800c7d8:	e000ed0c 	.word	0xe000ed0c
 800c7dc:	20004eb4 	.word	0x20004eb4

0800c7e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b084      	sub	sp, #16
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
 800c7e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d10a      	bne.n	800c80a <xQueueGenericReset+0x2a>
	__asm volatile
 800c7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f8:	f383 8811 	msr	BASEPRI, r3
 800c7fc:	f3bf 8f6f 	isb	sy
 800c800:	f3bf 8f4f 	dsb	sy
 800c804:	60bb      	str	r3, [r7, #8]
}
 800c806:	bf00      	nop
 800c808:	e7fe      	b.n	800c808 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c80a:	f7ff fde3 	bl	800c3d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c816:	68f9      	ldr	r1, [r7, #12]
 800c818:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c81a:	fb01 f303 	mul.w	r3, r1, r3
 800c81e:	441a      	add	r2, r3
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	2200      	movs	r2, #0
 800c828:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681a      	ldr	r2, [r3, #0]
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	681a      	ldr	r2, [r3, #0]
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c83a:	3b01      	subs	r3, #1
 800c83c:	68f9      	ldr	r1, [r7, #12]
 800c83e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c840:	fb01 f303 	mul.w	r3, r1, r3
 800c844:	441a      	add	r2, r3
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	22ff      	movs	r2, #255	; 0xff
 800c84e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	22ff      	movs	r2, #255	; 0xff
 800c856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d114      	bne.n	800c88a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	691b      	ldr	r3, [r3, #16]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d01a      	beq.n	800c89e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	3310      	adds	r3, #16
 800c86c:	4618      	mov	r0, r3
 800c86e:	f001 f9eb 	bl	800dc48 <xTaskRemoveFromEventList>
 800c872:	4603      	mov	r3, r0
 800c874:	2b00      	cmp	r3, #0
 800c876:	d012      	beq.n	800c89e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c878:	4b0c      	ldr	r3, [pc, #48]	; (800c8ac <xQueueGenericReset+0xcc>)
 800c87a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c87e:	601a      	str	r2, [r3, #0]
 800c880:	f3bf 8f4f 	dsb	sy
 800c884:	f3bf 8f6f 	isb	sy
 800c888:	e009      	b.n	800c89e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	3310      	adds	r3, #16
 800c88e:	4618      	mov	r0, r3
 800c890:	f7ff fbbc 	bl	800c00c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	3324      	adds	r3, #36	; 0x24
 800c898:	4618      	mov	r0, r3
 800c89a:	f7ff fbb7 	bl	800c00c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c89e:	f7ff fdc9 	bl	800c434 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c8a2:	2301      	movs	r3, #1
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3710      	adds	r7, #16
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}
 800c8ac:	e000ed04 	.word	0xe000ed04

0800c8b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b08e      	sub	sp, #56	; 0x38
 800c8b4:	af02      	add	r7, sp, #8
 800c8b6:	60f8      	str	r0, [r7, #12]
 800c8b8:	60b9      	str	r1, [r7, #8]
 800c8ba:	607a      	str	r2, [r7, #4]
 800c8bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d10a      	bne.n	800c8da <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c8:	f383 8811 	msr	BASEPRI, r3
 800c8cc:	f3bf 8f6f 	isb	sy
 800c8d0:	f3bf 8f4f 	dsb	sy
 800c8d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c8d6:	bf00      	nop
 800c8d8:	e7fe      	b.n	800c8d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d10a      	bne.n	800c8f6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e4:	f383 8811 	msr	BASEPRI, r3
 800c8e8:	f3bf 8f6f 	isb	sy
 800c8ec:	f3bf 8f4f 	dsb	sy
 800c8f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c8f2:	bf00      	nop
 800c8f4:	e7fe      	b.n	800c8f4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d002      	beq.n	800c902 <xQueueGenericCreateStatic+0x52>
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d001      	beq.n	800c906 <xQueueGenericCreateStatic+0x56>
 800c902:	2301      	movs	r3, #1
 800c904:	e000      	b.n	800c908 <xQueueGenericCreateStatic+0x58>
 800c906:	2300      	movs	r3, #0
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d10a      	bne.n	800c922 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c910:	f383 8811 	msr	BASEPRI, r3
 800c914:	f3bf 8f6f 	isb	sy
 800c918:	f3bf 8f4f 	dsb	sy
 800c91c:	623b      	str	r3, [r7, #32]
}
 800c91e:	bf00      	nop
 800c920:	e7fe      	b.n	800c920 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d102      	bne.n	800c92e <xQueueGenericCreateStatic+0x7e>
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d101      	bne.n	800c932 <xQueueGenericCreateStatic+0x82>
 800c92e:	2301      	movs	r3, #1
 800c930:	e000      	b.n	800c934 <xQueueGenericCreateStatic+0x84>
 800c932:	2300      	movs	r3, #0
 800c934:	2b00      	cmp	r3, #0
 800c936:	d10a      	bne.n	800c94e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c93c:	f383 8811 	msr	BASEPRI, r3
 800c940:	f3bf 8f6f 	isb	sy
 800c944:	f3bf 8f4f 	dsb	sy
 800c948:	61fb      	str	r3, [r7, #28]
}
 800c94a:	bf00      	nop
 800c94c:	e7fe      	b.n	800c94c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c94e:	2350      	movs	r3, #80	; 0x50
 800c950:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	2b50      	cmp	r3, #80	; 0x50
 800c956:	d00a      	beq.n	800c96e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c95c:	f383 8811 	msr	BASEPRI, r3
 800c960:	f3bf 8f6f 	isb	sy
 800c964:	f3bf 8f4f 	dsb	sy
 800c968:	61bb      	str	r3, [r7, #24]
}
 800c96a:	bf00      	nop
 800c96c:	e7fe      	b.n	800c96c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c96e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c976:	2b00      	cmp	r3, #0
 800c978:	d00d      	beq.n	800c996 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c97c:	2201      	movs	r2, #1
 800c97e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c982:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c988:	9300      	str	r3, [sp, #0]
 800c98a:	4613      	mov	r3, r2
 800c98c:	687a      	ldr	r2, [r7, #4]
 800c98e:	68b9      	ldr	r1, [r7, #8]
 800c990:	68f8      	ldr	r0, [r7, #12]
 800c992:	f000 f805 	bl	800c9a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c998:	4618      	mov	r0, r3
 800c99a:	3730      	adds	r7, #48	; 0x30
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}

0800c9a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b084      	sub	sp, #16
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	60f8      	str	r0, [r7, #12]
 800c9a8:	60b9      	str	r1, [r7, #8]
 800c9aa:	607a      	str	r2, [r7, #4]
 800c9ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d103      	bne.n	800c9bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c9b4:	69bb      	ldr	r3, [r7, #24]
 800c9b6:	69ba      	ldr	r2, [r7, #24]
 800c9b8:	601a      	str	r2, [r3, #0]
 800c9ba:	e002      	b.n	800c9c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c9bc:	69bb      	ldr	r3, [r7, #24]
 800c9be:	687a      	ldr	r2, [r7, #4]
 800c9c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c9c2:	69bb      	ldr	r3, [r7, #24]
 800c9c4:	68fa      	ldr	r2, [r7, #12]
 800c9c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c9c8:	69bb      	ldr	r3, [r7, #24]
 800c9ca:	68ba      	ldr	r2, [r7, #8]
 800c9cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c9ce:	2101      	movs	r1, #1
 800c9d0:	69b8      	ldr	r0, [r7, #24]
 800c9d2:	f7ff ff05 	bl	800c7e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c9d6:	69bb      	ldr	r3, [r7, #24]
 800c9d8:	78fa      	ldrb	r2, [r7, #3]
 800c9da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c9de:	bf00      	nop
 800c9e0:	3710      	adds	r7, #16
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
	...

0800c9e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b08e      	sub	sp, #56	; 0x38
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	60f8      	str	r0, [r7, #12]
 800c9f0:	60b9      	str	r1, [r7, #8]
 800c9f2:	607a      	str	r2, [r7, #4]
 800c9f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d10a      	bne.n	800ca1a <xQueueGenericSend+0x32>
	__asm volatile
 800ca04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca08:	f383 8811 	msr	BASEPRI, r3
 800ca0c:	f3bf 8f6f 	isb	sy
 800ca10:	f3bf 8f4f 	dsb	sy
 800ca14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ca16:	bf00      	nop
 800ca18:	e7fe      	b.n	800ca18 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d103      	bne.n	800ca28 <xQueueGenericSend+0x40>
 800ca20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d101      	bne.n	800ca2c <xQueueGenericSend+0x44>
 800ca28:	2301      	movs	r3, #1
 800ca2a:	e000      	b.n	800ca2e <xQueueGenericSend+0x46>
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d10a      	bne.n	800ca48 <xQueueGenericSend+0x60>
	__asm volatile
 800ca32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca36:	f383 8811 	msr	BASEPRI, r3
 800ca3a:	f3bf 8f6f 	isb	sy
 800ca3e:	f3bf 8f4f 	dsb	sy
 800ca42:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ca44:	bf00      	nop
 800ca46:	e7fe      	b.n	800ca46 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	2b02      	cmp	r3, #2
 800ca4c:	d103      	bne.n	800ca56 <xQueueGenericSend+0x6e>
 800ca4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca52:	2b01      	cmp	r3, #1
 800ca54:	d101      	bne.n	800ca5a <xQueueGenericSend+0x72>
 800ca56:	2301      	movs	r3, #1
 800ca58:	e000      	b.n	800ca5c <xQueueGenericSend+0x74>
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d10a      	bne.n	800ca76 <xQueueGenericSend+0x8e>
	__asm volatile
 800ca60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca64:	f383 8811 	msr	BASEPRI, r3
 800ca68:	f3bf 8f6f 	isb	sy
 800ca6c:	f3bf 8f4f 	dsb	sy
 800ca70:	623b      	str	r3, [r7, #32]
}
 800ca72:	bf00      	nop
 800ca74:	e7fe      	b.n	800ca74 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ca76:	f001 fb15 	bl	800e0a4 <xTaskGetSchedulerState>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d102      	bne.n	800ca86 <xQueueGenericSend+0x9e>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d101      	bne.n	800ca8a <xQueueGenericSend+0xa2>
 800ca86:	2301      	movs	r3, #1
 800ca88:	e000      	b.n	800ca8c <xQueueGenericSend+0xa4>
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d10a      	bne.n	800caa6 <xQueueGenericSend+0xbe>
	__asm volatile
 800ca90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca94:	f383 8811 	msr	BASEPRI, r3
 800ca98:	f3bf 8f6f 	isb	sy
 800ca9c:	f3bf 8f4f 	dsb	sy
 800caa0:	61fb      	str	r3, [r7, #28]
}
 800caa2:	bf00      	nop
 800caa4:	e7fe      	b.n	800caa4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800caa6:	f7ff fc95 	bl	800c3d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800caaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800caae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d302      	bcc.n	800cabc <xQueueGenericSend+0xd4>
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	2b02      	cmp	r3, #2
 800caba:	d129      	bne.n	800cb10 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cabc:	683a      	ldr	r2, [r7, #0]
 800cabe:	68b9      	ldr	r1, [r7, #8]
 800cac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cac2:	f000 fa0b 	bl	800cedc <prvCopyDataToQueue>
 800cac6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d010      	beq.n	800caf2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad2:	3324      	adds	r3, #36	; 0x24
 800cad4:	4618      	mov	r0, r3
 800cad6:	f001 f8b7 	bl	800dc48 <xTaskRemoveFromEventList>
 800cada:	4603      	mov	r3, r0
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d013      	beq.n	800cb08 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cae0:	4b3f      	ldr	r3, [pc, #252]	; (800cbe0 <xQueueGenericSend+0x1f8>)
 800cae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cae6:	601a      	str	r2, [r3, #0]
 800cae8:	f3bf 8f4f 	dsb	sy
 800caec:	f3bf 8f6f 	isb	sy
 800caf0:	e00a      	b.n	800cb08 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800caf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d007      	beq.n	800cb08 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800caf8:	4b39      	ldr	r3, [pc, #228]	; (800cbe0 <xQueueGenericSend+0x1f8>)
 800cafa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cafe:	601a      	str	r2, [r3, #0]
 800cb00:	f3bf 8f4f 	dsb	sy
 800cb04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cb08:	f7ff fc94 	bl	800c434 <vPortExitCritical>
				return pdPASS;
 800cb0c:	2301      	movs	r3, #1
 800cb0e:	e063      	b.n	800cbd8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d103      	bne.n	800cb1e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cb16:	f7ff fc8d 	bl	800c434 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	e05c      	b.n	800cbd8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cb1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d106      	bne.n	800cb32 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cb24:	f107 0314 	add.w	r3, r7, #20
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f001 f8f3 	bl	800dd14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cb2e:	2301      	movs	r3, #1
 800cb30:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cb32:	f7ff fc7f 	bl	800c434 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cb36:	f000 fdb7 	bl	800d6a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cb3a:	f7ff fc4b 	bl	800c3d4 <vPortEnterCritical>
 800cb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb44:	b25b      	sxtb	r3, r3
 800cb46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb4a:	d103      	bne.n	800cb54 <xQueueGenericSend+0x16c>
 800cb4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb4e:	2200      	movs	r2, #0
 800cb50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb5a:	b25b      	sxtb	r3, r3
 800cb5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb60:	d103      	bne.n	800cb6a <xQueueGenericSend+0x182>
 800cb62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb64:	2200      	movs	r2, #0
 800cb66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb6a:	f7ff fc63 	bl	800c434 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cb6e:	1d3a      	adds	r2, r7, #4
 800cb70:	f107 0314 	add.w	r3, r7, #20
 800cb74:	4611      	mov	r1, r2
 800cb76:	4618      	mov	r0, r3
 800cb78:	f001 f8e2 	bl	800dd40 <xTaskCheckForTimeOut>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d124      	bne.n	800cbcc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cb82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb84:	f000 faa2 	bl	800d0cc <prvIsQueueFull>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d018      	beq.n	800cbc0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cb8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb90:	3310      	adds	r3, #16
 800cb92:	687a      	ldr	r2, [r7, #4]
 800cb94:	4611      	mov	r1, r2
 800cb96:	4618      	mov	r0, r3
 800cb98:	f001 f806 	bl	800dba8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cb9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb9e:	f000 fa2d 	bl	800cffc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cba2:	f000 fdc7 	bl	800d734 <xTaskResumeAll>
 800cba6:	4603      	mov	r3, r0
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	f47f af7c 	bne.w	800caa6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cbae:	4b0c      	ldr	r3, [pc, #48]	; (800cbe0 <xQueueGenericSend+0x1f8>)
 800cbb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbb4:	601a      	str	r2, [r3, #0]
 800cbb6:	f3bf 8f4f 	dsb	sy
 800cbba:	f3bf 8f6f 	isb	sy
 800cbbe:	e772      	b.n	800caa6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cbc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cbc2:	f000 fa1b 	bl	800cffc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cbc6:	f000 fdb5 	bl	800d734 <xTaskResumeAll>
 800cbca:	e76c      	b.n	800caa6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cbcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cbce:	f000 fa15 	bl	800cffc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cbd2:	f000 fdaf 	bl	800d734 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cbd6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3738      	adds	r7, #56	; 0x38
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}
 800cbe0:	e000ed04 	.word	0xe000ed04

0800cbe4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b090      	sub	sp, #64	; 0x40
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	60f8      	str	r0, [r7, #12]
 800cbec:	60b9      	str	r1, [r7, #8]
 800cbee:	607a      	str	r2, [r7, #4]
 800cbf0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cbf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d10a      	bne.n	800cc12 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc00:	f383 8811 	msr	BASEPRI, r3
 800cc04:	f3bf 8f6f 	isb	sy
 800cc08:	f3bf 8f4f 	dsb	sy
 800cc0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cc0e:	bf00      	nop
 800cc10:	e7fe      	b.n	800cc10 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d103      	bne.n	800cc20 <xQueueGenericSendFromISR+0x3c>
 800cc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d101      	bne.n	800cc24 <xQueueGenericSendFromISR+0x40>
 800cc20:	2301      	movs	r3, #1
 800cc22:	e000      	b.n	800cc26 <xQueueGenericSendFromISR+0x42>
 800cc24:	2300      	movs	r3, #0
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d10a      	bne.n	800cc40 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cc2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc2e:	f383 8811 	msr	BASEPRI, r3
 800cc32:	f3bf 8f6f 	isb	sy
 800cc36:	f3bf 8f4f 	dsb	sy
 800cc3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cc3c:	bf00      	nop
 800cc3e:	e7fe      	b.n	800cc3e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	2b02      	cmp	r3, #2
 800cc44:	d103      	bne.n	800cc4e <xQueueGenericSendFromISR+0x6a>
 800cc46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc4a:	2b01      	cmp	r3, #1
 800cc4c:	d101      	bne.n	800cc52 <xQueueGenericSendFromISR+0x6e>
 800cc4e:	2301      	movs	r3, #1
 800cc50:	e000      	b.n	800cc54 <xQueueGenericSendFromISR+0x70>
 800cc52:	2300      	movs	r3, #0
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d10a      	bne.n	800cc6e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cc58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc5c:	f383 8811 	msr	BASEPRI, r3
 800cc60:	f3bf 8f6f 	isb	sy
 800cc64:	f3bf 8f4f 	dsb	sy
 800cc68:	623b      	str	r3, [r7, #32]
}
 800cc6a:	bf00      	nop
 800cc6c:	e7fe      	b.n	800cc6c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cc6e:	f7ff fd77 	bl	800c760 <vPortValidateInterruptPriority>
	__asm volatile
 800cc72:	f3ef 8211 	mrs	r2, BASEPRI
 800cc76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc7a:	f383 8811 	msr	BASEPRI, r3
 800cc7e:	f3bf 8f6f 	isb	sy
 800cc82:	f3bf 8f4f 	dsb	sy
 800cc86:	61fa      	str	r2, [r7, #28]
 800cc88:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800cc8a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cc8c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d302      	bcc.n	800cca0 <xQueueGenericSendFromISR+0xbc>
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	2b02      	cmp	r3, #2
 800cc9e:	d12f      	bne.n	800cd00 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ccaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ccb0:	683a      	ldr	r2, [r7, #0]
 800ccb2:	68b9      	ldr	r1, [r7, #8]
 800ccb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ccb6:	f000 f911 	bl	800cedc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ccba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ccbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccc2:	d112      	bne.n	800ccea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ccc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d016      	beq.n	800ccfa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccce:	3324      	adds	r3, #36	; 0x24
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f000 ffb9 	bl	800dc48 <xTaskRemoveFromEventList>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d00e      	beq.n	800ccfa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d00b      	beq.n	800ccfa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	2201      	movs	r2, #1
 800cce6:	601a      	str	r2, [r3, #0]
 800cce8:	e007      	b.n	800ccfa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ccea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ccee:	3301      	adds	r3, #1
 800ccf0:	b2db      	uxtb	r3, r3
 800ccf2:	b25a      	sxtb	r2, r3
 800ccf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ccfe:	e001      	b.n	800cd04 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cd00:	2300      	movs	r3, #0
 800cd02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd06:	617b      	str	r3, [r7, #20]
	__asm volatile
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	f383 8811 	msr	BASEPRI, r3
}
 800cd0e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cd10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3740      	adds	r7, #64	; 0x40
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}
	...

0800cd1c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b08c      	sub	sp, #48	; 0x30
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	60f8      	str	r0, [r7, #12]
 800cd24:	60b9      	str	r1, [r7, #8]
 800cd26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cd30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d10a      	bne.n	800cd4c <xQueueReceive+0x30>
	__asm volatile
 800cd36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd3a:	f383 8811 	msr	BASEPRI, r3
 800cd3e:	f3bf 8f6f 	isb	sy
 800cd42:	f3bf 8f4f 	dsb	sy
 800cd46:	623b      	str	r3, [r7, #32]
}
 800cd48:	bf00      	nop
 800cd4a:	e7fe      	b.n	800cd4a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd4c:	68bb      	ldr	r3, [r7, #8]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d103      	bne.n	800cd5a <xQueueReceive+0x3e>
 800cd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d101      	bne.n	800cd5e <xQueueReceive+0x42>
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	e000      	b.n	800cd60 <xQueueReceive+0x44>
 800cd5e:	2300      	movs	r3, #0
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d10a      	bne.n	800cd7a <xQueueReceive+0x5e>
	__asm volatile
 800cd64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd68:	f383 8811 	msr	BASEPRI, r3
 800cd6c:	f3bf 8f6f 	isb	sy
 800cd70:	f3bf 8f4f 	dsb	sy
 800cd74:	61fb      	str	r3, [r7, #28]
}
 800cd76:	bf00      	nop
 800cd78:	e7fe      	b.n	800cd78 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd7a:	f001 f993 	bl	800e0a4 <xTaskGetSchedulerState>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d102      	bne.n	800cd8a <xQueueReceive+0x6e>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d101      	bne.n	800cd8e <xQueueReceive+0x72>
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	e000      	b.n	800cd90 <xQueueReceive+0x74>
 800cd8e:	2300      	movs	r3, #0
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d10a      	bne.n	800cdaa <xQueueReceive+0x8e>
	__asm volatile
 800cd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd98:	f383 8811 	msr	BASEPRI, r3
 800cd9c:	f3bf 8f6f 	isb	sy
 800cda0:	f3bf 8f4f 	dsb	sy
 800cda4:	61bb      	str	r3, [r7, #24]
}
 800cda6:	bf00      	nop
 800cda8:	e7fe      	b.n	800cda8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cdaa:	f7ff fb13 	bl	800c3d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cdae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdb2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cdb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d01f      	beq.n	800cdfa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cdba:	68b9      	ldr	r1, [r7, #8]
 800cdbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cdbe:	f000 f8f7 	bl	800cfb0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cdc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc4:	1e5a      	subs	r2, r3, #1
 800cdc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cdca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdcc:	691b      	ldr	r3, [r3, #16]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d00f      	beq.n	800cdf2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cdd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd4:	3310      	adds	r3, #16
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f000 ff36 	bl	800dc48 <xTaskRemoveFromEventList>
 800cddc:	4603      	mov	r3, r0
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d007      	beq.n	800cdf2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cde2:	4b3d      	ldr	r3, [pc, #244]	; (800ced8 <xQueueReceive+0x1bc>)
 800cde4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cde8:	601a      	str	r2, [r3, #0]
 800cdea:	f3bf 8f4f 	dsb	sy
 800cdee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cdf2:	f7ff fb1f 	bl	800c434 <vPortExitCritical>
				return pdPASS;
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	e069      	b.n	800cece <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d103      	bne.n	800ce08 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ce00:	f7ff fb18 	bl	800c434 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ce04:	2300      	movs	r3, #0
 800ce06:	e062      	b.n	800cece <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ce08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d106      	bne.n	800ce1c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ce0e:	f107 0310 	add.w	r3, r7, #16
 800ce12:	4618      	mov	r0, r3
 800ce14:	f000 ff7e 	bl	800dd14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ce18:	2301      	movs	r3, #1
 800ce1a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ce1c:	f7ff fb0a 	bl	800c434 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ce20:	f000 fc42 	bl	800d6a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ce24:	f7ff fad6 	bl	800c3d4 <vPortEnterCritical>
 800ce28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce2e:	b25b      	sxtb	r3, r3
 800ce30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce34:	d103      	bne.n	800ce3e <xQueueReceive+0x122>
 800ce36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce38:	2200      	movs	r2, #0
 800ce3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce44:	b25b      	sxtb	r3, r3
 800ce46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce4a:	d103      	bne.n	800ce54 <xQueueReceive+0x138>
 800ce4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce4e:	2200      	movs	r2, #0
 800ce50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce54:	f7ff faee 	bl	800c434 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce58:	1d3a      	adds	r2, r7, #4
 800ce5a:	f107 0310 	add.w	r3, r7, #16
 800ce5e:	4611      	mov	r1, r2
 800ce60:	4618      	mov	r0, r3
 800ce62:	f000 ff6d 	bl	800dd40 <xTaskCheckForTimeOut>
 800ce66:	4603      	mov	r3, r0
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d123      	bne.n	800ceb4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce6e:	f000 f917 	bl	800d0a0 <prvIsQueueEmpty>
 800ce72:	4603      	mov	r3, r0
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d017      	beq.n	800cea8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ce78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce7a:	3324      	adds	r3, #36	; 0x24
 800ce7c:	687a      	ldr	r2, [r7, #4]
 800ce7e:	4611      	mov	r1, r2
 800ce80:	4618      	mov	r0, r3
 800ce82:	f000 fe91 	bl	800dba8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ce86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce88:	f000 f8b8 	bl	800cffc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ce8c:	f000 fc52 	bl	800d734 <xTaskResumeAll>
 800ce90:	4603      	mov	r3, r0
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d189      	bne.n	800cdaa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ce96:	4b10      	ldr	r3, [pc, #64]	; (800ced8 <xQueueReceive+0x1bc>)
 800ce98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce9c:	601a      	str	r2, [r3, #0]
 800ce9e:	f3bf 8f4f 	dsb	sy
 800cea2:	f3bf 8f6f 	isb	sy
 800cea6:	e780      	b.n	800cdaa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cea8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ceaa:	f000 f8a7 	bl	800cffc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ceae:	f000 fc41 	bl	800d734 <xTaskResumeAll>
 800ceb2:	e77a      	b.n	800cdaa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ceb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ceb6:	f000 f8a1 	bl	800cffc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ceba:	f000 fc3b 	bl	800d734 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cec0:	f000 f8ee 	bl	800d0a0 <prvIsQueueEmpty>
 800cec4:	4603      	mov	r3, r0
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	f43f af6f 	beq.w	800cdaa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cecc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3730      	adds	r7, #48	; 0x30
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}
 800ced6:	bf00      	nop
 800ced8:	e000ed04 	.word	0xe000ed04

0800cedc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b086      	sub	sp, #24
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	60f8      	str	r0, [r7, #12]
 800cee4:	60b9      	str	r1, [r7, #8]
 800cee6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cee8:	2300      	movs	r3, #0
 800ceea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cef0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d10d      	bne.n	800cf16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d14d      	bne.n	800cf9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	689b      	ldr	r3, [r3, #8]
 800cf06:	4618      	mov	r0, r3
 800cf08:	f001 f8ea 	bl	800e0e0 <xTaskPriorityDisinherit>
 800cf0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	2200      	movs	r2, #0
 800cf12:	609a      	str	r2, [r3, #8]
 800cf14:	e043      	b.n	800cf9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d119      	bne.n	800cf50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	6858      	ldr	r0, [r3, #4]
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf24:	461a      	mov	r2, r3
 800cf26:	68b9      	ldr	r1, [r7, #8]
 800cf28:	f001 fe1e 	bl	800eb68 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	685a      	ldr	r2, [r3, #4]
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf34:	441a      	add	r2, r3
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	685a      	ldr	r2, [r3, #4]
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	689b      	ldr	r3, [r3, #8]
 800cf42:	429a      	cmp	r2, r3
 800cf44:	d32b      	bcc.n	800cf9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681a      	ldr	r2, [r3, #0]
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	605a      	str	r2, [r3, #4]
 800cf4e:	e026      	b.n	800cf9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	68d8      	ldr	r0, [r3, #12]
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf58:	461a      	mov	r2, r3
 800cf5a:	68b9      	ldr	r1, [r7, #8]
 800cf5c:	f001 fe04 	bl	800eb68 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	68da      	ldr	r2, [r3, #12]
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf68:	425b      	negs	r3, r3
 800cf6a:	441a      	add	r2, r3
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	68da      	ldr	r2, [r3, #12]
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d207      	bcs.n	800cf8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	689a      	ldr	r2, [r3, #8]
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf84:	425b      	negs	r3, r3
 800cf86:	441a      	add	r2, r3
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2b02      	cmp	r3, #2
 800cf90:	d105      	bne.n	800cf9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf92:	693b      	ldr	r3, [r7, #16]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d002      	beq.n	800cf9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cf98:	693b      	ldr	r3, [r7, #16]
 800cf9a:	3b01      	subs	r3, #1
 800cf9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	1c5a      	adds	r2, r3, #1
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cfa6:	697b      	ldr	r3, [r7, #20]
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3718      	adds	r7, #24
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}

0800cfb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b082      	sub	sp, #8
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d018      	beq.n	800cff4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	68da      	ldr	r2, [r3, #12]
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfca:	441a      	add	r2, r3
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	68da      	ldr	r2, [r3, #12]
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	689b      	ldr	r3, [r3, #8]
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d303      	bcc.n	800cfe4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681a      	ldr	r2, [r3, #0]
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	68d9      	ldr	r1, [r3, #12]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfec:	461a      	mov	r2, r3
 800cfee:	6838      	ldr	r0, [r7, #0]
 800cff0:	f001 fdba 	bl	800eb68 <memcpy>
	}
}
 800cff4:	bf00      	nop
 800cff6:	3708      	adds	r7, #8
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}

0800cffc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b084      	sub	sp, #16
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d004:	f7ff f9e6 	bl	800c3d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d00e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d010:	e011      	b.n	800d036 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d016:	2b00      	cmp	r3, #0
 800d018:	d012      	beq.n	800d040 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	3324      	adds	r3, #36	; 0x24
 800d01e:	4618      	mov	r0, r3
 800d020:	f000 fe12 	bl	800dc48 <xTaskRemoveFromEventList>
 800d024:	4603      	mov	r3, r0
 800d026:	2b00      	cmp	r3, #0
 800d028:	d001      	beq.n	800d02e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d02a:	f000 fefb 	bl	800de24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d02e:	7bfb      	ldrb	r3, [r7, #15]
 800d030:	3b01      	subs	r3, #1
 800d032:	b2db      	uxtb	r3, r3
 800d034:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	dce9      	bgt.n	800d012 <prvUnlockQueue+0x16>
 800d03e:	e000      	b.n	800d042 <prvUnlockQueue+0x46>
					break;
 800d040:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	22ff      	movs	r2, #255	; 0xff
 800d046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d04a:	f7ff f9f3 	bl	800c434 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d04e:	f7ff f9c1 	bl	800c3d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d058:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d05a:	e011      	b.n	800d080 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	691b      	ldr	r3, [r3, #16]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d012      	beq.n	800d08a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	3310      	adds	r3, #16
 800d068:	4618      	mov	r0, r3
 800d06a:	f000 fded 	bl	800dc48 <xTaskRemoveFromEventList>
 800d06e:	4603      	mov	r3, r0
 800d070:	2b00      	cmp	r3, #0
 800d072:	d001      	beq.n	800d078 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d074:	f000 fed6 	bl	800de24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d078:	7bbb      	ldrb	r3, [r7, #14]
 800d07a:	3b01      	subs	r3, #1
 800d07c:	b2db      	uxtb	r3, r3
 800d07e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d080:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d084:	2b00      	cmp	r3, #0
 800d086:	dce9      	bgt.n	800d05c <prvUnlockQueue+0x60>
 800d088:	e000      	b.n	800d08c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d08a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	22ff      	movs	r2, #255	; 0xff
 800d090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d094:	f7ff f9ce 	bl	800c434 <vPortExitCritical>
}
 800d098:	bf00      	nop
 800d09a:	3710      	adds	r7, #16
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}

0800d0a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b084      	sub	sp, #16
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d0a8:	f7ff f994 	bl	800c3d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d102      	bne.n	800d0ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	60fb      	str	r3, [r7, #12]
 800d0b8:	e001      	b.n	800d0be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d0be:	f7ff f9b9 	bl	800c434 <vPortExitCritical>

	return xReturn;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	3710      	adds	r7, #16
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}

0800d0cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b084      	sub	sp, #16
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d0d4:	f7ff f97e 	bl	800c3d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d102      	bne.n	800d0ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	60fb      	str	r3, [r7, #12]
 800d0e8:	e001      	b.n	800d0ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d0ee:	f7ff f9a1 	bl	800c434 <vPortExitCritical>

	return xReturn;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3710      	adds	r7, #16
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}

0800d0fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b085      	sub	sp, #20
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
 800d104:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d106:	2300      	movs	r3, #0
 800d108:	60fb      	str	r3, [r7, #12]
 800d10a:	e014      	b.n	800d136 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d10c:	4a0f      	ldr	r2, [pc, #60]	; (800d14c <vQueueAddToRegistry+0x50>)
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d10b      	bne.n	800d130 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d118:	490c      	ldr	r1, [pc, #48]	; (800d14c <vQueueAddToRegistry+0x50>)
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	683a      	ldr	r2, [r7, #0]
 800d11e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d122:	4a0a      	ldr	r2, [pc, #40]	; (800d14c <vQueueAddToRegistry+0x50>)
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	00db      	lsls	r3, r3, #3
 800d128:	4413      	add	r3, r2
 800d12a:	687a      	ldr	r2, [r7, #4]
 800d12c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d12e:	e006      	b.n	800d13e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	3301      	adds	r3, #1
 800d134:	60fb      	str	r3, [r7, #12]
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	2b07      	cmp	r3, #7
 800d13a:	d9e7      	bls.n	800d10c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d13c:	bf00      	nop
 800d13e:	bf00      	nop
 800d140:	3714      	adds	r7, #20
 800d142:	46bd      	mov	sp, r7
 800d144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d148:	4770      	bx	lr
 800d14a:	bf00      	nop
 800d14c:	20004eb8 	.word	0x20004eb8

0800d150 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d150:	b580      	push	{r7, lr}
 800d152:	b086      	sub	sp, #24
 800d154:	af00      	add	r7, sp, #0
 800d156:	60f8      	str	r0, [r7, #12]
 800d158:	60b9      	str	r1, [r7, #8]
 800d15a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d160:	f7ff f938 	bl	800c3d4 <vPortEnterCritical>
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d16a:	b25b      	sxtb	r3, r3
 800d16c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d170:	d103      	bne.n	800d17a <vQueueWaitForMessageRestricted+0x2a>
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	2200      	movs	r2, #0
 800d176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d180:	b25b      	sxtb	r3, r3
 800d182:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d186:	d103      	bne.n	800d190 <vQueueWaitForMessageRestricted+0x40>
 800d188:	697b      	ldr	r3, [r7, #20]
 800d18a:	2200      	movs	r2, #0
 800d18c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d190:	f7ff f950 	bl	800c434 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d106      	bne.n	800d1aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	3324      	adds	r3, #36	; 0x24
 800d1a0:	687a      	ldr	r2, [r7, #4]
 800d1a2:	68b9      	ldr	r1, [r7, #8]
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f000 fd23 	bl	800dbf0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d1aa:	6978      	ldr	r0, [r7, #20]
 800d1ac:	f7ff ff26 	bl	800cffc <prvUnlockQueue>
	}
 800d1b0:	bf00      	nop
 800d1b2:	3718      	adds	r7, #24
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}

0800d1b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b08e      	sub	sp, #56	; 0x38
 800d1bc:	af04      	add	r7, sp, #16
 800d1be:	60f8      	str	r0, [r7, #12]
 800d1c0:	60b9      	str	r1, [r7, #8]
 800d1c2:	607a      	str	r2, [r7, #4]
 800d1c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d10a      	bne.n	800d1e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d0:	f383 8811 	msr	BASEPRI, r3
 800d1d4:	f3bf 8f6f 	isb	sy
 800d1d8:	f3bf 8f4f 	dsb	sy
 800d1dc:	623b      	str	r3, [r7, #32]
}
 800d1de:	bf00      	nop
 800d1e0:	e7fe      	b.n	800d1e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d10a      	bne.n	800d1fe <xTaskCreateStatic+0x46>
	__asm volatile
 800d1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ec:	f383 8811 	msr	BASEPRI, r3
 800d1f0:	f3bf 8f6f 	isb	sy
 800d1f4:	f3bf 8f4f 	dsb	sy
 800d1f8:	61fb      	str	r3, [r7, #28]
}
 800d1fa:	bf00      	nop
 800d1fc:	e7fe      	b.n	800d1fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d1fe:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 800d202:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 800d20a:	d00a      	beq.n	800d222 <xTaskCreateStatic+0x6a>
	__asm volatile
 800d20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d210:	f383 8811 	msr	BASEPRI, r3
 800d214:	f3bf 8f6f 	isb	sy
 800d218:	f3bf 8f4f 	dsb	sy
 800d21c:	61bb      	str	r3, [r7, #24]
}
 800d21e:	bf00      	nop
 800d220:	e7fe      	b.n	800d220 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d222:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d226:	2b00      	cmp	r3, #0
 800d228:	d01e      	beq.n	800d268 <xTaskCreateStatic+0xb0>
 800d22a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d01b      	beq.n	800d268 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d232:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d236:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d238:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d23c:	2202      	movs	r2, #2
 800d23e:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d242:	2300      	movs	r3, #0
 800d244:	9303      	str	r3, [sp, #12]
 800d246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d248:	9302      	str	r3, [sp, #8]
 800d24a:	f107 0314 	add.w	r3, r7, #20
 800d24e:	9301      	str	r3, [sp, #4]
 800d250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d252:	9300      	str	r3, [sp, #0]
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	687a      	ldr	r2, [r7, #4]
 800d258:	68b9      	ldr	r1, [r7, #8]
 800d25a:	68f8      	ldr	r0, [r7, #12]
 800d25c:	f000 f852 	bl	800d304 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d260:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d262:	f000 f90b 	bl	800d47c <prvAddNewTaskToReadyList>
 800d266:	e001      	b.n	800d26c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800d268:	2300      	movs	r3, #0
 800d26a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d26c:	697b      	ldr	r3, [r7, #20]
	}
 800d26e:	4618      	mov	r0, r3
 800d270:	3728      	adds	r7, #40	; 0x28
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}

0800d276 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d276:	b580      	push	{r7, lr}
 800d278:	b08c      	sub	sp, #48	; 0x30
 800d27a:	af04      	add	r7, sp, #16
 800d27c:	60f8      	str	r0, [r7, #12]
 800d27e:	60b9      	str	r1, [r7, #8]
 800d280:	603b      	str	r3, [r7, #0]
 800d282:	4613      	mov	r3, r2
 800d284:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d286:	88fb      	ldrh	r3, [r7, #6]
 800d288:	009b      	lsls	r3, r3, #2
 800d28a:	4618      	mov	r0, r3
 800d28c:	f7fe fcd0 	bl	800bc30 <pvPortMalloc>
 800d290:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d00f      	beq.n	800d2b8 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d298:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 800d29c:	f7fe fcc8 	bl	800bc30 <pvPortMalloc>
 800d2a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d2a2:	69fb      	ldr	r3, [r7, #28]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d003      	beq.n	800d2b0 <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d2a8:	69fb      	ldr	r3, [r7, #28]
 800d2aa:	697a      	ldr	r2, [r7, #20]
 800d2ac:	631a      	str	r2, [r3, #48]	; 0x30
 800d2ae:	e005      	b.n	800d2bc <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d2b0:	6978      	ldr	r0, [r7, #20]
 800d2b2:	f7fe fd8d 	bl	800bdd0 <vPortFree>
 800d2b6:	e001      	b.n	800d2bc <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d2bc:	69fb      	ldr	r3, [r7, #28]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d017      	beq.n	800d2f2 <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d2c2:	69fb      	ldr	r3, [r7, #28]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d2ca:	88fa      	ldrh	r2, [r7, #6]
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	9303      	str	r3, [sp, #12]
 800d2d0:	69fb      	ldr	r3, [r7, #28]
 800d2d2:	9302      	str	r3, [sp, #8]
 800d2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d6:	9301      	str	r3, [sp, #4]
 800d2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2da:	9300      	str	r3, [sp, #0]
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	68b9      	ldr	r1, [r7, #8]
 800d2e0:	68f8      	ldr	r0, [r7, #12]
 800d2e2:	f000 f80f 	bl	800d304 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d2e6:	69f8      	ldr	r0, [r7, #28]
 800d2e8:	f000 f8c8 	bl	800d47c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	61bb      	str	r3, [r7, #24]
 800d2f0:	e002      	b.n	800d2f8 <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d2f2:	f04f 33ff 	mov.w	r3, #4294967295
 800d2f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d2f8:	69bb      	ldr	r3, [r7, #24]
	}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3720      	adds	r7, #32
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}
	...

0800d304 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b088      	sub	sp, #32
 800d308:	af00      	add	r7, sp, #0
 800d30a:	60f8      	str	r0, [r7, #12]
 800d30c:	60b9      	str	r1, [r7, #8]
 800d30e:	607a      	str	r2, [r7, #4]
 800d310:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d314:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	009b      	lsls	r3, r3, #2
 800d31a:	461a      	mov	r2, r3
 800d31c:	21a5      	movs	r1, #165	; 0xa5
 800d31e:	f001 fc31 	bl	800eb84 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d32c:	3b01      	subs	r3, #1
 800d32e:	009b      	lsls	r3, r3, #2
 800d330:	4413      	add	r3, r2
 800d332:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d334:	69bb      	ldr	r3, [r7, #24]
 800d336:	f023 0307 	bic.w	r3, r3, #7
 800d33a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d33c:	69bb      	ldr	r3, [r7, #24]
 800d33e:	f003 0307 	and.w	r3, r3, #7
 800d342:	2b00      	cmp	r3, #0
 800d344:	d00a      	beq.n	800d35c <prvInitialiseNewTask+0x58>
	__asm volatile
 800d346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d34a:	f383 8811 	msr	BASEPRI, r3
 800d34e:	f3bf 8f6f 	isb	sy
 800d352:	f3bf 8f4f 	dsb	sy
 800d356:	617b      	str	r3, [r7, #20]
}
 800d358:	bf00      	nop
 800d35a:	e7fe      	b.n	800d35a <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800d35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d35e:	69ba      	ldr	r2, [r7, #24]
 800d360:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d364:	68bb      	ldr	r3, [r7, #8]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d01f      	beq.n	800d3aa <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d36a:	2300      	movs	r3, #0
 800d36c:	61fb      	str	r3, [r7, #28]
 800d36e:	e012      	b.n	800d396 <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d370:	68ba      	ldr	r2, [r7, #8]
 800d372:	69fb      	ldr	r3, [r7, #28]
 800d374:	4413      	add	r3, r2
 800d376:	7819      	ldrb	r1, [r3, #0]
 800d378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d37a:	69fb      	ldr	r3, [r7, #28]
 800d37c:	4413      	add	r3, r2
 800d37e:	3334      	adds	r3, #52	; 0x34
 800d380:	460a      	mov	r2, r1
 800d382:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d384:	68ba      	ldr	r2, [r7, #8]
 800d386:	69fb      	ldr	r3, [r7, #28]
 800d388:	4413      	add	r3, r2
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d006      	beq.n	800d39e <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d390:	69fb      	ldr	r3, [r7, #28]
 800d392:	3301      	adds	r3, #1
 800d394:	61fb      	str	r3, [r7, #28]
 800d396:	69fb      	ldr	r3, [r7, #28]
 800d398:	2bfe      	cmp	r3, #254	; 0xfe
 800d39a:	d9e9      	bls.n	800d370 <prvInitialiseNewTask+0x6c>
 800d39c:	e000      	b.n	800d3a0 <prvInitialiseNewTask+0x9c>
			{
				break;
 800d39e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 800d3a8:	e003      	b.n	800d3b2 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b4:	2b37      	cmp	r3, #55	; 0x37
 800d3b6:	d901      	bls.n	800d3bc <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d3b8:	2337      	movs	r3, #55	; 0x37
 800d3ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3c6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		pxNewTCB->uxMutexesHeld = 0;
 800d3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d4:	3304      	adds	r3, #4
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f7fe fe38 	bl	800c04c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3de:	3318      	adds	r3, #24
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f7fe fe33 	bl	800c04c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800d3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3fe:	2200      	movs	r2, #0
 800d400:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800d404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d406:	2200      	movs	r2, #0
 800d408:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d40e:	2200      	movs	r2, #0
 800d410:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d416:	2200      	movs	r2, #0
 800d418:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d41e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d422:	2260      	movs	r2, #96	; 0x60
 800d424:	2100      	movs	r1, #0
 800d426:	4618      	mov	r0, r3
 800d428:	f001 fbac 	bl	800eb84 <memset>
 800d42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d42e:	4a10      	ldr	r2, [pc, #64]	; (800d470 <prvInitialiseNewTask+0x16c>)
 800d430:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 800d434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d436:	4a0f      	ldr	r2, [pc, #60]	; (800d474 <prvInitialiseNewTask+0x170>)
 800d438:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800d43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d43e:	4a0e      	ldr	r2, [pc, #56]	; (800d478 <prvInitialiseNewTask+0x174>)
 800d440:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 800d444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d446:	2200      	movs	r2, #0
 800d448:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d44c:	683a      	ldr	r2, [r7, #0]
 800d44e:	68f9      	ldr	r1, [r7, #12]
 800d450:	69b8      	ldr	r0, [r7, #24]
 800d452:	f7fe fe8f 	bl	800c174 <pxPortInitialiseStack>
 800d456:	4602      	mov	r2, r0
 800d458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d45a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d002      	beq.n	800d468 <prvInitialiseNewTask+0x164>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d466:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d468:	bf00      	nop
 800d46a:	3720      	adds	r7, #32
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}
 800d470:	0800f470 	.word	0x0800f470
 800d474:	0800f490 	.word	0x0800f490
 800d478:	0800f450 	.word	0x0800f450

0800d47c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b082      	sub	sp, #8
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d484:	f7fe ffa6 	bl	800c3d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d488:	4b2d      	ldr	r3, [pc, #180]	; (800d540 <prvAddNewTaskToReadyList+0xc4>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	3301      	adds	r3, #1
 800d48e:	4a2c      	ldr	r2, [pc, #176]	; (800d540 <prvAddNewTaskToReadyList+0xc4>)
 800d490:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d492:	4b2c      	ldr	r3, [pc, #176]	; (800d544 <prvAddNewTaskToReadyList+0xc8>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d109      	bne.n	800d4ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d49a:	4a2a      	ldr	r2, [pc, #168]	; (800d544 <prvAddNewTaskToReadyList+0xc8>)
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d4a0:	4b27      	ldr	r3, [pc, #156]	; (800d540 <prvAddNewTaskToReadyList+0xc4>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	2b01      	cmp	r3, #1
 800d4a6:	d110      	bne.n	800d4ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d4a8:	f000 fd38 	bl	800df1c <prvInitialiseTaskLists>
 800d4ac:	e00d      	b.n	800d4ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d4ae:	4b26      	ldr	r3, [pc, #152]	; (800d548 <prvAddNewTaskToReadyList+0xcc>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d109      	bne.n	800d4ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d4b6:	4b23      	ldr	r3, [pc, #140]	; (800d544 <prvAddNewTaskToReadyList+0xc8>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4c0:	429a      	cmp	r2, r3
 800d4c2:	d802      	bhi.n	800d4ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d4c4:	4a1f      	ldr	r2, [pc, #124]	; (800d544 <prvAddNewTaskToReadyList+0xc8>)
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d4ca:	4b20      	ldr	r3, [pc, #128]	; (800d54c <prvAddNewTaskToReadyList+0xd0>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	3301      	adds	r3, #1
 800d4d0:	4a1e      	ldr	r2, [pc, #120]	; (800d54c <prvAddNewTaskToReadyList+0xd0>)
 800d4d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d4d4:	4b1d      	ldr	r3, [pc, #116]	; (800d54c <prvAddNewTaskToReadyList+0xd0>)
 800d4d6:	681a      	ldr	r2, [r3, #0]
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4e2:	4b1b      	ldr	r3, [pc, #108]	; (800d550 <prvAddNewTaskToReadyList+0xd4>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	d903      	bls.n	800d4f2 <prvAddNewTaskToReadyList+0x76>
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ee:	4a18      	ldr	r2, [pc, #96]	; (800d550 <prvAddNewTaskToReadyList+0xd4>)
 800d4f0:	6013      	str	r3, [r2, #0]
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4f6:	4613      	mov	r3, r2
 800d4f8:	009b      	lsls	r3, r3, #2
 800d4fa:	4413      	add	r3, r2
 800d4fc:	009b      	lsls	r3, r3, #2
 800d4fe:	4a15      	ldr	r2, [pc, #84]	; (800d554 <prvAddNewTaskToReadyList+0xd8>)
 800d500:	441a      	add	r2, r3
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	3304      	adds	r3, #4
 800d506:	4619      	mov	r1, r3
 800d508:	4610      	mov	r0, r2
 800d50a:	f7fe fdac 	bl	800c066 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d50e:	f7fe ff91 	bl	800c434 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d512:	4b0d      	ldr	r3, [pc, #52]	; (800d548 <prvAddNewTaskToReadyList+0xcc>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d00e      	beq.n	800d538 <prvAddNewTaskToReadyList+0xbc>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d51a:	4b0a      	ldr	r3, [pc, #40]	; (800d544 <prvAddNewTaskToReadyList+0xc8>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d524:	429a      	cmp	r2, r3
 800d526:	d207      	bcs.n	800d538 <prvAddNewTaskToReadyList+0xbc>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d528:	4b0b      	ldr	r3, [pc, #44]	; (800d558 <prvAddNewTaskToReadyList+0xdc>)
 800d52a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d52e:	601a      	str	r2, [r3, #0]
 800d530:	f3bf 8f4f 	dsb	sy
 800d534:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d538:	bf00      	nop
 800d53a:	3708      	adds	r7, #8
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}
 800d540:	200053d0 	.word	0x200053d0
 800d544:	20004ef8 	.word	0x20004ef8
 800d548:	200053dc 	.word	0x200053dc
 800d54c:	200053ec 	.word	0x200053ec
 800d550:	200053d8 	.word	0x200053d8
 800d554:	20004efc 	.word	0x20004efc
 800d558:	e000ed04 	.word	0xe000ed04

0800d55c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b084      	sub	sp, #16
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d564:	2300      	movs	r3, #0
 800d566:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d017      	beq.n	800d59e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d56e:	4b13      	ldr	r3, [pc, #76]	; (800d5bc <vTaskDelay+0x60>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d00a      	beq.n	800d58c <vTaskDelay+0x30>
	__asm volatile
 800d576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d57a:	f383 8811 	msr	BASEPRI, r3
 800d57e:	f3bf 8f6f 	isb	sy
 800d582:	f3bf 8f4f 	dsb	sy
 800d586:	60bb      	str	r3, [r7, #8]
}
 800d588:	bf00      	nop
 800d58a:	e7fe      	b.n	800d58a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d58c:	f000 f88c 	bl	800d6a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d590:	2100      	movs	r1, #0
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f000 fe18 	bl	800e1c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d598:	f000 f8cc 	bl	800d734 <xTaskResumeAll>
 800d59c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d107      	bne.n	800d5b4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d5a4:	4b06      	ldr	r3, [pc, #24]	; (800d5c0 <vTaskDelay+0x64>)
 800d5a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5aa:	601a      	str	r2, [r3, #0]
 800d5ac:	f3bf 8f4f 	dsb	sy
 800d5b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d5b4:	bf00      	nop
 800d5b6:	3710      	adds	r7, #16
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}
 800d5bc:	200053f8 	.word	0x200053f8
 800d5c0:	e000ed04 	.word	0xe000ed04

0800d5c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b08a      	sub	sp, #40	; 0x28
 800d5c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d5d2:	463a      	mov	r2, r7
 800d5d4:	1d39      	adds	r1, r7, #4
 800d5d6:	f107 0308 	add.w	r3, r7, #8
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f7fe faf4 	bl	800bbc8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d5e0:	6839      	ldr	r1, [r7, #0]
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	68ba      	ldr	r2, [r7, #8]
 800d5e6:	9202      	str	r2, [sp, #8]
 800d5e8:	9301      	str	r3, [sp, #4]
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	9300      	str	r3, [sp, #0]
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	460a      	mov	r2, r1
 800d5f2:	4925      	ldr	r1, [pc, #148]	; (800d688 <vTaskStartScheduler+0xc4>)
 800d5f4:	4825      	ldr	r0, [pc, #148]	; (800d68c <vTaskStartScheduler+0xc8>)
 800d5f6:	f7ff fddf 	bl	800d1b8 <xTaskCreateStatic>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	4a24      	ldr	r2, [pc, #144]	; (800d690 <vTaskStartScheduler+0xcc>)
 800d5fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d600:	4b23      	ldr	r3, [pc, #140]	; (800d690 <vTaskStartScheduler+0xcc>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d002      	beq.n	800d60e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d608:	2301      	movs	r3, #1
 800d60a:	617b      	str	r3, [r7, #20]
 800d60c:	e001      	b.n	800d612 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d60e:	2300      	movs	r3, #0
 800d610:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	2b01      	cmp	r3, #1
 800d616:	d102      	bne.n	800d61e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d618:	f000 fe30 	bl	800e27c <xTimerCreateTimerTask>
 800d61c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	2b01      	cmp	r3, #1
 800d622:	d11e      	bne.n	800d662 <vTaskStartScheduler+0x9e>
	__asm volatile
 800d624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d628:	f383 8811 	msr	BASEPRI, r3
 800d62c:	f3bf 8f6f 	isb	sy
 800d630:	f3bf 8f4f 	dsb	sy
 800d634:	613b      	str	r3, [r7, #16]
}
 800d636:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d638:	4b16      	ldr	r3, [pc, #88]	; (800d694 <vTaskStartScheduler+0xd0>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d640:	4a15      	ldr	r2, [pc, #84]	; (800d698 <vTaskStartScheduler+0xd4>)
 800d642:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d644:	4b15      	ldr	r3, [pc, #84]	; (800d69c <vTaskStartScheduler+0xd8>)
 800d646:	f04f 32ff 	mov.w	r2, #4294967295
 800d64a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d64c:	4b14      	ldr	r3, [pc, #80]	; (800d6a0 <vTaskStartScheduler+0xdc>)
 800d64e:	2201      	movs	r2, #1
 800d650:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d652:	4b14      	ldr	r3, [pc, #80]	; (800d6a4 <vTaskStartScheduler+0xe0>)
 800d654:	2200      	movs	r2, #0
 800d656:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800d658:	f7f5 f9ce 	bl	80029f8 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d65c:	f7fe fe18 	bl	800c290 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d660:	e00e      	b.n	800d680 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d668:	d10a      	bne.n	800d680 <vTaskStartScheduler+0xbc>
	__asm volatile
 800d66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d66e:	f383 8811 	msr	BASEPRI, r3
 800d672:	f3bf 8f6f 	isb	sy
 800d676:	f3bf 8f4f 	dsb	sy
 800d67a:	60fb      	str	r3, [r7, #12]
}
 800d67c:	bf00      	nop
 800d67e:	e7fe      	b.n	800d67e <vTaskStartScheduler+0xba>
}
 800d680:	bf00      	nop
 800d682:	3718      	adds	r7, #24
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}
 800d688:	0800f348 	.word	0x0800f348
 800d68c:	0800de3d 	.word	0x0800de3d
 800d690:	200053f4 	.word	0x200053f4
 800d694:	20004ef8 	.word	0x20004ef8
 800d698:	20000010 	.word	0x20000010
 800d69c:	200053f0 	.word	0x200053f0
 800d6a0:	200053dc 	.word	0x200053dc
 800d6a4:	200053d4 	.word	0x200053d4

0800d6a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d6ac:	4b04      	ldr	r3, [pc, #16]	; (800d6c0 <vTaskSuspendAll+0x18>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	3301      	adds	r3, #1
 800d6b2:	4a03      	ldr	r2, [pc, #12]	; (800d6c0 <vTaskSuspendAll+0x18>)
 800d6b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d6b6:	bf00      	nop
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6be:	4770      	bx	lr
 800d6c0:	200053f8 	.word	0x200053f8

0800d6c4 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800d6c4:	b480      	push	{r7}
 800d6c6:	b083      	sub	sp, #12
 800d6c8:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800d6ce:	4b14      	ldr	r3, [pc, #80]	; (800d720 <prvGetExpectedIdleTime+0x5c>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d001      	beq.n	800d6da <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800d6d6:	2301      	movs	r3, #1
 800d6d8:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800d6da:	4b12      	ldr	r3, [pc, #72]	; (800d724 <prvGetExpectedIdleTime+0x60>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d002      	beq.n	800d6ea <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	607b      	str	r3, [r7, #4]
 800d6e8:	e012      	b.n	800d710 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800d6ea:	4b0f      	ldr	r3, [pc, #60]	; (800d728 <prvGetExpectedIdleTime+0x64>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	2b01      	cmp	r3, #1
 800d6f0:	d902      	bls.n	800d6f8 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	607b      	str	r3, [r7, #4]
 800d6f6:	e00b      	b.n	800d710 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d002      	beq.n	800d704 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800d6fe:	2300      	movs	r3, #0
 800d700:	607b      	str	r3, [r7, #4]
 800d702:	e005      	b.n	800d710 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800d704:	4b09      	ldr	r3, [pc, #36]	; (800d72c <prvGetExpectedIdleTime+0x68>)
 800d706:	681a      	ldr	r2, [r3, #0]
 800d708:	4b09      	ldr	r3, [pc, #36]	; (800d730 <prvGetExpectedIdleTime+0x6c>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	1ad3      	subs	r3, r2, r3
 800d70e:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800d710:	687b      	ldr	r3, [r7, #4]
	}
 800d712:	4618      	mov	r0, r3
 800d714:	370c      	adds	r7, #12
 800d716:	46bd      	mov	sp, r7
 800d718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71c:	4770      	bx	lr
 800d71e:	bf00      	nop
 800d720:	200053d8 	.word	0x200053d8
 800d724:	20004ef8 	.word	0x20004ef8
 800d728:	20004efc 	.word	0x20004efc
 800d72c:	200053f0 	.word	0x200053f0
 800d730:	200053d4 	.word	0x200053d4

0800d734 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b084      	sub	sp, #16
 800d738:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d73a:	2300      	movs	r3, #0
 800d73c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d73e:	2300      	movs	r3, #0
 800d740:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d742:	4b42      	ldr	r3, [pc, #264]	; (800d84c <xTaskResumeAll+0x118>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d10a      	bne.n	800d760 <xTaskResumeAll+0x2c>
	__asm volatile
 800d74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d74e:	f383 8811 	msr	BASEPRI, r3
 800d752:	f3bf 8f6f 	isb	sy
 800d756:	f3bf 8f4f 	dsb	sy
 800d75a:	603b      	str	r3, [r7, #0]
}
 800d75c:	bf00      	nop
 800d75e:	e7fe      	b.n	800d75e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d760:	f7fe fe38 	bl	800c3d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d764:	4b39      	ldr	r3, [pc, #228]	; (800d84c <xTaskResumeAll+0x118>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	3b01      	subs	r3, #1
 800d76a:	4a38      	ldr	r2, [pc, #224]	; (800d84c <xTaskResumeAll+0x118>)
 800d76c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d76e:	4b37      	ldr	r3, [pc, #220]	; (800d84c <xTaskResumeAll+0x118>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d162      	bne.n	800d83c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d776:	4b36      	ldr	r3, [pc, #216]	; (800d850 <xTaskResumeAll+0x11c>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d05e      	beq.n	800d83c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d77e:	e02f      	b.n	800d7e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d780:	4b34      	ldr	r3, [pc, #208]	; (800d854 <xTaskResumeAll+0x120>)
 800d782:	68db      	ldr	r3, [r3, #12]
 800d784:	68db      	ldr	r3, [r3, #12]
 800d786:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	3318      	adds	r3, #24
 800d78c:	4618      	mov	r0, r3
 800d78e:	f7fe fcc7 	bl	800c120 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	3304      	adds	r3, #4
 800d796:	4618      	mov	r0, r3
 800d798:	f7fe fcc2 	bl	800c120 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7a0:	4b2d      	ldr	r3, [pc, #180]	; (800d858 <xTaskResumeAll+0x124>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d903      	bls.n	800d7b0 <xTaskResumeAll+0x7c>
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ac:	4a2a      	ldr	r2, [pc, #168]	; (800d858 <xTaskResumeAll+0x124>)
 800d7ae:	6013      	str	r3, [r2, #0]
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7b4:	4613      	mov	r3, r2
 800d7b6:	009b      	lsls	r3, r3, #2
 800d7b8:	4413      	add	r3, r2
 800d7ba:	009b      	lsls	r3, r3, #2
 800d7bc:	4a27      	ldr	r2, [pc, #156]	; (800d85c <xTaskResumeAll+0x128>)
 800d7be:	441a      	add	r2, r3
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	3304      	adds	r3, #4
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	4610      	mov	r0, r2
 800d7c8:	f7fe fc4d 	bl	800c066 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7d0:	4b23      	ldr	r3, [pc, #140]	; (800d860 <xTaskResumeAll+0x12c>)
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7d6:	429a      	cmp	r2, r3
 800d7d8:	d302      	bcc.n	800d7e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d7da:	4b22      	ldr	r3, [pc, #136]	; (800d864 <xTaskResumeAll+0x130>)
 800d7dc:	2201      	movs	r2, #1
 800d7de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d7e0:	4b1c      	ldr	r3, [pc, #112]	; (800d854 <xTaskResumeAll+0x120>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d1cb      	bne.n	800d780 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d001      	beq.n	800d7f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d7ee:	f000 fc39 	bl	800e064 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d7f2:	4b1d      	ldr	r3, [pc, #116]	; (800d868 <xTaskResumeAll+0x134>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d010      	beq.n	800d820 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d7fe:	f000 f86f 	bl	800d8e0 <xTaskIncrementTick>
 800d802:	4603      	mov	r3, r0
 800d804:	2b00      	cmp	r3, #0
 800d806:	d002      	beq.n	800d80e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d808:	4b16      	ldr	r3, [pc, #88]	; (800d864 <xTaskResumeAll+0x130>)
 800d80a:	2201      	movs	r2, #1
 800d80c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	3b01      	subs	r3, #1
 800d812:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d1f1      	bne.n	800d7fe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d81a:	4b13      	ldr	r3, [pc, #76]	; (800d868 <xTaskResumeAll+0x134>)
 800d81c:	2200      	movs	r2, #0
 800d81e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d820:	4b10      	ldr	r3, [pc, #64]	; (800d864 <xTaskResumeAll+0x130>)
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d009      	beq.n	800d83c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d828:	2301      	movs	r3, #1
 800d82a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d82c:	4b0f      	ldr	r3, [pc, #60]	; (800d86c <xTaskResumeAll+0x138>)
 800d82e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d832:	601a      	str	r2, [r3, #0]
 800d834:	f3bf 8f4f 	dsb	sy
 800d838:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d83c:	f7fe fdfa 	bl	800c434 <vPortExitCritical>

	return xAlreadyYielded;
 800d840:	68bb      	ldr	r3, [r7, #8]
}
 800d842:	4618      	mov	r0, r3
 800d844:	3710      	adds	r7, #16
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}
 800d84a:	bf00      	nop
 800d84c:	200053f8 	.word	0x200053f8
 800d850:	200053d0 	.word	0x200053d0
 800d854:	2000538c 	.word	0x2000538c
 800d858:	200053d8 	.word	0x200053d8
 800d85c:	20004efc 	.word	0x20004efc
 800d860:	20004ef8 	.word	0x20004ef8
 800d864:	200053e4 	.word	0x200053e4
 800d868:	200053e0 	.word	0x200053e0
 800d86c:	e000ed04 	.word	0xe000ed04

0800d870 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d870:	b480      	push	{r7}
 800d872:	b083      	sub	sp, #12
 800d874:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d876:	4b05      	ldr	r3, [pc, #20]	; (800d88c <xTaskGetTickCount+0x1c>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d87c:	687b      	ldr	r3, [r7, #4]
}
 800d87e:	4618      	mov	r0, r3
 800d880:	370c      	adds	r7, #12
 800d882:	46bd      	mov	sp, r7
 800d884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d888:	4770      	bx	lr
 800d88a:	bf00      	nop
 800d88c:	200053d4 	.word	0x200053d4

0800d890 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800d890:	b480      	push	{r7}
 800d892:	b085      	sub	sp, #20
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800d898:	4b0f      	ldr	r3, [pc, #60]	; (800d8d8 <vTaskStepTick+0x48>)
 800d89a:	681a      	ldr	r2, [r3, #0]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	441a      	add	r2, r3
 800d8a0:	4b0e      	ldr	r3, [pc, #56]	; (800d8dc <vTaskStepTick+0x4c>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	429a      	cmp	r2, r3
 800d8a6:	d90a      	bls.n	800d8be <vTaskStepTick+0x2e>
	__asm volatile
 800d8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ac:	f383 8811 	msr	BASEPRI, r3
 800d8b0:	f3bf 8f6f 	isb	sy
 800d8b4:	f3bf 8f4f 	dsb	sy
 800d8b8:	60fb      	str	r3, [r7, #12]
}
 800d8ba:	bf00      	nop
 800d8bc:	e7fe      	b.n	800d8bc <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800d8be:	4b06      	ldr	r3, [pc, #24]	; (800d8d8 <vTaskStepTick+0x48>)
 800d8c0:	681a      	ldr	r2, [r3, #0]
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	4413      	add	r3, r2
 800d8c6:	4a04      	ldr	r2, [pc, #16]	; (800d8d8 <vTaskStepTick+0x48>)
 800d8c8:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800d8ca:	bf00      	nop
 800d8cc:	3714      	adds	r7, #20
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d4:	4770      	bx	lr
 800d8d6:	bf00      	nop
 800d8d8:	200053d4 	.word	0x200053d4
 800d8dc:	200053f0 	.word	0x200053f0

0800d8e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b086      	sub	sp, #24
 800d8e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d8ea:	4b53      	ldr	r3, [pc, #332]	; (800da38 <xTaskIncrementTick+0x158>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	f040 8095 	bne.w	800da1e <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d8f4:	4b51      	ldr	r3, [pc, #324]	; (800da3c <xTaskIncrementTick+0x15c>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	3301      	adds	r3, #1
 800d8fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d8fc:	4a4f      	ldr	r2, [pc, #316]	; (800da3c <xTaskIncrementTick+0x15c>)
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d120      	bne.n	800d94a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d908:	4b4d      	ldr	r3, [pc, #308]	; (800da40 <xTaskIncrementTick+0x160>)
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d00a      	beq.n	800d928 <xTaskIncrementTick+0x48>
	__asm volatile
 800d912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d916:	f383 8811 	msr	BASEPRI, r3
 800d91a:	f3bf 8f6f 	isb	sy
 800d91e:	f3bf 8f4f 	dsb	sy
 800d922:	603b      	str	r3, [r7, #0]
}
 800d924:	bf00      	nop
 800d926:	e7fe      	b.n	800d926 <xTaskIncrementTick+0x46>
 800d928:	4b45      	ldr	r3, [pc, #276]	; (800da40 <xTaskIncrementTick+0x160>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	60fb      	str	r3, [r7, #12]
 800d92e:	4b45      	ldr	r3, [pc, #276]	; (800da44 <xTaskIncrementTick+0x164>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	4a43      	ldr	r2, [pc, #268]	; (800da40 <xTaskIncrementTick+0x160>)
 800d934:	6013      	str	r3, [r2, #0]
 800d936:	4a43      	ldr	r2, [pc, #268]	; (800da44 <xTaskIncrementTick+0x164>)
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	6013      	str	r3, [r2, #0]
 800d93c:	4b42      	ldr	r3, [pc, #264]	; (800da48 <xTaskIncrementTick+0x168>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	3301      	adds	r3, #1
 800d942:	4a41      	ldr	r2, [pc, #260]	; (800da48 <xTaskIncrementTick+0x168>)
 800d944:	6013      	str	r3, [r2, #0]
 800d946:	f000 fb8d 	bl	800e064 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d94a:	4b40      	ldr	r3, [pc, #256]	; (800da4c <xTaskIncrementTick+0x16c>)
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	693a      	ldr	r2, [r7, #16]
 800d950:	429a      	cmp	r2, r3
 800d952:	d349      	bcc.n	800d9e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d954:	4b3a      	ldr	r3, [pc, #232]	; (800da40 <xTaskIncrementTick+0x160>)
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d104      	bne.n	800d968 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d95e:	4b3b      	ldr	r3, [pc, #236]	; (800da4c <xTaskIncrementTick+0x16c>)
 800d960:	f04f 32ff 	mov.w	r2, #4294967295
 800d964:	601a      	str	r2, [r3, #0]
					break;
 800d966:	e03f      	b.n	800d9e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d968:	4b35      	ldr	r3, [pc, #212]	; (800da40 <xTaskIncrementTick+0x160>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	68db      	ldr	r3, [r3, #12]
 800d96e:	68db      	ldr	r3, [r3, #12]
 800d970:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	685b      	ldr	r3, [r3, #4]
 800d976:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d978:	693a      	ldr	r2, [r7, #16]
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	429a      	cmp	r2, r3
 800d97e:	d203      	bcs.n	800d988 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d980:	4a32      	ldr	r2, [pc, #200]	; (800da4c <xTaskIncrementTick+0x16c>)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d986:	e02f      	b.n	800d9e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	3304      	adds	r3, #4
 800d98c:	4618      	mov	r0, r3
 800d98e:	f7fe fbc7 	bl	800c120 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d996:	2b00      	cmp	r3, #0
 800d998:	d004      	beq.n	800d9a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	3318      	adds	r3, #24
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7fe fbbe 	bl	800c120 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9a8:	4b29      	ldr	r3, [pc, #164]	; (800da50 <xTaskIncrementTick+0x170>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	429a      	cmp	r2, r3
 800d9ae:	d903      	bls.n	800d9b8 <xTaskIncrementTick+0xd8>
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9b4:	4a26      	ldr	r2, [pc, #152]	; (800da50 <xTaskIncrementTick+0x170>)
 800d9b6:	6013      	str	r3, [r2, #0]
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9bc:	4613      	mov	r3, r2
 800d9be:	009b      	lsls	r3, r3, #2
 800d9c0:	4413      	add	r3, r2
 800d9c2:	009b      	lsls	r3, r3, #2
 800d9c4:	4a23      	ldr	r2, [pc, #140]	; (800da54 <xTaskIncrementTick+0x174>)
 800d9c6:	441a      	add	r2, r3
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	3304      	adds	r3, #4
 800d9cc:	4619      	mov	r1, r3
 800d9ce:	4610      	mov	r0, r2
 800d9d0:	f7fe fb49 	bl	800c066 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9d8:	4b1f      	ldr	r3, [pc, #124]	; (800da58 <xTaskIncrementTick+0x178>)
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9de:	429a      	cmp	r2, r3
 800d9e0:	d3b8      	bcc.n	800d954 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d9e6:	e7b5      	b.n	800d954 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d9e8:	4b1b      	ldr	r3, [pc, #108]	; (800da58 <xTaskIncrementTick+0x178>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9ee:	4919      	ldr	r1, [pc, #100]	; (800da54 <xTaskIncrementTick+0x174>)
 800d9f0:	4613      	mov	r3, r2
 800d9f2:	009b      	lsls	r3, r3, #2
 800d9f4:	4413      	add	r3, r2
 800d9f6:	009b      	lsls	r3, r3, #2
 800d9f8:	440b      	add	r3, r1
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	2b01      	cmp	r3, #1
 800d9fe:	d901      	bls.n	800da04 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800da00:	2301      	movs	r3, #1
 800da02:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 800da04:	4b15      	ldr	r3, [pc, #84]	; (800da5c <xTaskIncrementTick+0x17c>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d101      	bne.n	800da10 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 800da0c:	f7f5 f80a 	bl	8002a24 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800da10:	4b13      	ldr	r3, [pc, #76]	; (800da60 <xTaskIncrementTick+0x180>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d009      	beq.n	800da2c <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 800da18:	2301      	movs	r3, #1
 800da1a:	617b      	str	r3, [r7, #20]
 800da1c:	e006      	b.n	800da2c <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800da1e:	4b0f      	ldr	r3, [pc, #60]	; (800da5c <xTaskIncrementTick+0x17c>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	3301      	adds	r3, #1
 800da24:	4a0d      	ldr	r2, [pc, #52]	; (800da5c <xTaskIncrementTick+0x17c>)
 800da26:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800da28:	f7f4 fffc 	bl	8002a24 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 800da2c:	697b      	ldr	r3, [r7, #20]
}
 800da2e:	4618      	mov	r0, r3
 800da30:	3718      	adds	r7, #24
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}
 800da36:	bf00      	nop
 800da38:	200053f8 	.word	0x200053f8
 800da3c:	200053d4 	.word	0x200053d4
 800da40:	20005384 	.word	0x20005384
 800da44:	20005388 	.word	0x20005388
 800da48:	200053e8 	.word	0x200053e8
 800da4c:	200053f0 	.word	0x200053f0
 800da50:	200053d8 	.word	0x200053d8
 800da54:	20004efc 	.word	0x20004efc
 800da58:	20004ef8 	.word	0x20004ef8
 800da5c:	200053e0 	.word	0x200053e0
 800da60:	200053e4 	.word	0x200053e4

0800da64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b084      	sub	sp, #16
 800da68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800da6a:	4b46      	ldr	r3, [pc, #280]	; (800db84 <vTaskSwitchContext+0x120>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d003      	beq.n	800da7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800da72:	4b45      	ldr	r3, [pc, #276]	; (800db88 <vTaskSwitchContext+0x124>)
 800da74:	2201      	movs	r2, #1
 800da76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800da78:	e07f      	b.n	800db7a <vTaskSwitchContext+0x116>
		xYieldPending = pdFALSE;
 800da7a:	4b43      	ldr	r3, [pc, #268]	; (800db88 <vTaskSwitchContext+0x124>)
 800da7c:	2200      	movs	r2, #0
 800da7e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800da80:	f7f4 ffc1 	bl	8002a06 <getRunTimeCounterValue>
 800da84:	4603      	mov	r3, r0
 800da86:	4a41      	ldr	r2, [pc, #260]	; (800db8c <vTaskSwitchContext+0x128>)
 800da88:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800da8a:	4b40      	ldr	r3, [pc, #256]	; (800db8c <vTaskSwitchContext+0x128>)
 800da8c:	681a      	ldr	r2, [r3, #0]
 800da8e:	4b40      	ldr	r3, [pc, #256]	; (800db90 <vTaskSwitchContext+0x12c>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	429a      	cmp	r2, r3
 800da94:	d90b      	bls.n	800daae <vTaskSwitchContext+0x4a>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800da96:	4b3f      	ldr	r3, [pc, #252]	; (800db94 <vTaskSwitchContext+0x130>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
 800da9e:	4a3b      	ldr	r2, [pc, #236]	; (800db8c <vTaskSwitchContext+0x128>)
 800daa0:	6810      	ldr	r0, [r2, #0]
 800daa2:	4a3b      	ldr	r2, [pc, #236]	; (800db90 <vTaskSwitchContext+0x12c>)
 800daa4:	6812      	ldr	r2, [r2, #0]
 800daa6:	1a82      	subs	r2, r0, r2
 800daa8:	440a      	add	r2, r1
 800daaa:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			ulTaskSwitchedInTime = ulTotalRunTime;
 800daae:	4b37      	ldr	r3, [pc, #220]	; (800db8c <vTaskSwitchContext+0x128>)
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	4a37      	ldr	r2, [pc, #220]	; (800db90 <vTaskSwitchContext+0x12c>)
 800dab4:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800dab6:	4b37      	ldr	r3, [pc, #220]	; (800db94 <vTaskSwitchContext+0x130>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	681a      	ldr	r2, [r3, #0]
 800dabc:	4b35      	ldr	r3, [pc, #212]	; (800db94 <vTaskSwitchContext+0x130>)
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dac2:	429a      	cmp	r2, r3
 800dac4:	d808      	bhi.n	800dad8 <vTaskSwitchContext+0x74>
 800dac6:	4b33      	ldr	r3, [pc, #204]	; (800db94 <vTaskSwitchContext+0x130>)
 800dac8:	681a      	ldr	r2, [r3, #0]
 800daca:	4b32      	ldr	r3, [pc, #200]	; (800db94 <vTaskSwitchContext+0x130>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	3334      	adds	r3, #52	; 0x34
 800dad0:	4619      	mov	r1, r3
 800dad2:	4610      	mov	r0, r2
 800dad4:	f7f4 ffad 	bl	8002a32 <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 800dad8:	4b2e      	ldr	r3, [pc, #184]	; (800db94 <vTaskSwitchContext+0x130>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	4a2e      	ldr	r2, [pc, #184]	; (800db98 <vTaskSwitchContext+0x134>)
 800dade:	6812      	ldr	r2, [r2, #0]
 800dae0:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dae4:	4b2d      	ldr	r3, [pc, #180]	; (800db9c <vTaskSwitchContext+0x138>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	60fb      	str	r3, [r7, #12]
 800daea:	e010      	b.n	800db0e <vTaskSwitchContext+0xaa>
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d10a      	bne.n	800db08 <vTaskSwitchContext+0xa4>
	__asm volatile
 800daf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daf6:	f383 8811 	msr	BASEPRI, r3
 800dafa:	f3bf 8f6f 	isb	sy
 800dafe:	f3bf 8f4f 	dsb	sy
 800db02:	607b      	str	r3, [r7, #4]
}
 800db04:	bf00      	nop
 800db06:	e7fe      	b.n	800db06 <vTaskSwitchContext+0xa2>
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	3b01      	subs	r3, #1
 800db0c:	60fb      	str	r3, [r7, #12]
 800db0e:	4924      	ldr	r1, [pc, #144]	; (800dba0 <vTaskSwitchContext+0x13c>)
 800db10:	68fa      	ldr	r2, [r7, #12]
 800db12:	4613      	mov	r3, r2
 800db14:	009b      	lsls	r3, r3, #2
 800db16:	4413      	add	r3, r2
 800db18:	009b      	lsls	r3, r3, #2
 800db1a:	440b      	add	r3, r1
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d0e4      	beq.n	800daec <vTaskSwitchContext+0x88>
 800db22:	68fa      	ldr	r2, [r7, #12]
 800db24:	4613      	mov	r3, r2
 800db26:	009b      	lsls	r3, r3, #2
 800db28:	4413      	add	r3, r2
 800db2a:	009b      	lsls	r3, r3, #2
 800db2c:	4a1c      	ldr	r2, [pc, #112]	; (800dba0 <vTaskSwitchContext+0x13c>)
 800db2e:	4413      	add	r3, r2
 800db30:	60bb      	str	r3, [r7, #8]
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	685b      	ldr	r3, [r3, #4]
 800db36:	685a      	ldr	r2, [r3, #4]
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	605a      	str	r2, [r3, #4]
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	685a      	ldr	r2, [r3, #4]
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	3308      	adds	r3, #8
 800db44:	429a      	cmp	r2, r3
 800db46:	d104      	bne.n	800db52 <vTaskSwitchContext+0xee>
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	685b      	ldr	r3, [r3, #4]
 800db4c:	685a      	ldr	r2, [r3, #4]
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	605a      	str	r2, [r3, #4]
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	685b      	ldr	r3, [r3, #4]
 800db56:	68db      	ldr	r3, [r3, #12]
 800db58:	4a0e      	ldr	r2, [pc, #56]	; (800db94 <vTaskSwitchContext+0x130>)
 800db5a:	6013      	str	r3, [r2, #0]
 800db5c:	4a0f      	ldr	r2, [pc, #60]	; (800db9c <vTaskSwitchContext+0x138>)
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 800db62:	4b0c      	ldr	r3, [pc, #48]	; (800db94 <vTaskSwitchContext+0x130>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800db6a:	4a0b      	ldr	r2, [pc, #44]	; (800db98 <vTaskSwitchContext+0x134>)
 800db6c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800db6e:	4b09      	ldr	r3, [pc, #36]	; (800db94 <vTaskSwitchContext+0x130>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800db76:	4a0b      	ldr	r2, [pc, #44]	; (800dba4 <vTaskSwitchContext+0x140>)
 800db78:	6013      	str	r3, [r2, #0]
}
 800db7a:	bf00      	nop
 800db7c:	3710      	adds	r7, #16
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
 800db82:	bf00      	nop
 800db84:	200053f8 	.word	0x200053f8
 800db88:	200053e4 	.word	0x200053e4
 800db8c:	20005400 	.word	0x20005400
 800db90:	200053fc 	.word	0x200053fc
 800db94:	20004ef8 	.word	0x20004ef8
 800db98:	200053cc 	.word	0x200053cc
 800db9c:	200053d8 	.word	0x200053d8
 800dba0:	20004efc 	.word	0x20004efc
 800dba4:	20000010 	.word	0x20000010

0800dba8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b084      	sub	sp, #16
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
 800dbb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d10a      	bne.n	800dbce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800dbb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbbc:	f383 8811 	msr	BASEPRI, r3
 800dbc0:	f3bf 8f6f 	isb	sy
 800dbc4:	f3bf 8f4f 	dsb	sy
 800dbc8:	60fb      	str	r3, [r7, #12]
}
 800dbca:	bf00      	nop
 800dbcc:	e7fe      	b.n	800dbcc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dbce:	4b07      	ldr	r3, [pc, #28]	; (800dbec <vTaskPlaceOnEventList+0x44>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	3318      	adds	r3, #24
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f7fe fa69 	bl	800c0ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dbdc:	2101      	movs	r1, #1
 800dbde:	6838      	ldr	r0, [r7, #0]
 800dbe0:	f000 faf2 	bl	800e1c8 <prvAddCurrentTaskToDelayedList>
}
 800dbe4:	bf00      	nop
 800dbe6:	3710      	adds	r7, #16
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}
 800dbec:	20004ef8 	.word	0x20004ef8

0800dbf0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b086      	sub	sp, #24
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	60f8      	str	r0, [r7, #12]
 800dbf8:	60b9      	str	r1, [r7, #8]
 800dbfa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d10a      	bne.n	800dc18 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800dc02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc06:	f383 8811 	msr	BASEPRI, r3
 800dc0a:	f3bf 8f6f 	isb	sy
 800dc0e:	f3bf 8f4f 	dsb	sy
 800dc12:	617b      	str	r3, [r7, #20]
}
 800dc14:	bf00      	nop
 800dc16:	e7fe      	b.n	800dc16 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dc18:	4b0a      	ldr	r3, [pc, #40]	; (800dc44 <vTaskPlaceOnEventListRestricted+0x54>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	3318      	adds	r3, #24
 800dc1e:	4619      	mov	r1, r3
 800dc20:	68f8      	ldr	r0, [r7, #12]
 800dc22:	f7fe fa20 	bl	800c066 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d002      	beq.n	800dc32 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800dc2c:	f04f 33ff 	mov.w	r3, #4294967295
 800dc30:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800dc32:	6879      	ldr	r1, [r7, #4]
 800dc34:	68b8      	ldr	r0, [r7, #8]
 800dc36:	f000 fac7 	bl	800e1c8 <prvAddCurrentTaskToDelayedList>
	}
 800dc3a:	bf00      	nop
 800dc3c:	3718      	adds	r7, #24
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}
 800dc42:	bf00      	nop
 800dc44:	20004ef8 	.word	0x20004ef8

0800dc48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b086      	sub	sp, #24
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	68db      	ldr	r3, [r3, #12]
 800dc54:	68db      	ldr	r3, [r3, #12]
 800dc56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d10a      	bne.n	800dc74 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800dc5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc62:	f383 8811 	msr	BASEPRI, r3
 800dc66:	f3bf 8f6f 	isb	sy
 800dc6a:	f3bf 8f4f 	dsb	sy
 800dc6e:	60fb      	str	r3, [r7, #12]
}
 800dc70:	bf00      	nop
 800dc72:	e7fe      	b.n	800dc72 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dc74:	693b      	ldr	r3, [r7, #16]
 800dc76:	3318      	adds	r3, #24
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f7fe fa51 	bl	800c120 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc7e:	4b1f      	ldr	r3, [pc, #124]	; (800dcfc <xTaskRemoveFromEventList+0xb4>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d11f      	bne.n	800dcc6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dc86:	693b      	ldr	r3, [r7, #16]
 800dc88:	3304      	adds	r3, #4
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f7fe fa48 	bl	800c120 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dc90:	693b      	ldr	r3, [r7, #16]
 800dc92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc94:	4b1a      	ldr	r3, [pc, #104]	; (800dd00 <xTaskRemoveFromEventList+0xb8>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	429a      	cmp	r2, r3
 800dc9a:	d903      	bls.n	800dca4 <xTaskRemoveFromEventList+0x5c>
 800dc9c:	693b      	ldr	r3, [r7, #16]
 800dc9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dca0:	4a17      	ldr	r2, [pc, #92]	; (800dd00 <xTaskRemoveFromEventList+0xb8>)
 800dca2:	6013      	str	r3, [r2, #0]
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dca8:	4613      	mov	r3, r2
 800dcaa:	009b      	lsls	r3, r3, #2
 800dcac:	4413      	add	r3, r2
 800dcae:	009b      	lsls	r3, r3, #2
 800dcb0:	4a14      	ldr	r2, [pc, #80]	; (800dd04 <xTaskRemoveFromEventList+0xbc>)
 800dcb2:	441a      	add	r2, r3
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	3304      	adds	r3, #4
 800dcb8:	4619      	mov	r1, r3
 800dcba:	4610      	mov	r0, r2
 800dcbc:	f7fe f9d3 	bl	800c066 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800dcc0:	f000 f9d0 	bl	800e064 <prvResetNextTaskUnblockTime>
 800dcc4:	e005      	b.n	800dcd2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	3318      	adds	r3, #24
 800dcca:	4619      	mov	r1, r3
 800dccc:	480e      	ldr	r0, [pc, #56]	; (800dd08 <xTaskRemoveFromEventList+0xc0>)
 800dcce:	f7fe f9ca 	bl	800c066 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcd6:	4b0d      	ldr	r3, [pc, #52]	; (800dd0c <xTaskRemoveFromEventList+0xc4>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcdc:	429a      	cmp	r2, r3
 800dcde:	d905      	bls.n	800dcec <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dce0:	2301      	movs	r3, #1
 800dce2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dce4:	4b0a      	ldr	r3, [pc, #40]	; (800dd10 <xTaskRemoveFromEventList+0xc8>)
 800dce6:	2201      	movs	r2, #1
 800dce8:	601a      	str	r2, [r3, #0]
 800dcea:	e001      	b.n	800dcf0 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800dcec:	2300      	movs	r3, #0
 800dcee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dcf0:	697b      	ldr	r3, [r7, #20]
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3718      	adds	r7, #24
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	200053f8 	.word	0x200053f8
 800dd00:	200053d8 	.word	0x200053d8
 800dd04:	20004efc 	.word	0x20004efc
 800dd08:	2000538c 	.word	0x2000538c
 800dd0c:	20004ef8 	.word	0x20004ef8
 800dd10:	200053e4 	.word	0x200053e4

0800dd14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dd14:	b480      	push	{r7}
 800dd16:	b083      	sub	sp, #12
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dd1c:	4b06      	ldr	r3, [pc, #24]	; (800dd38 <vTaskInternalSetTimeOutState+0x24>)
 800dd1e:	681a      	ldr	r2, [r3, #0]
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dd24:	4b05      	ldr	r3, [pc, #20]	; (800dd3c <vTaskInternalSetTimeOutState+0x28>)
 800dd26:	681a      	ldr	r2, [r3, #0]
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	605a      	str	r2, [r3, #4]
}
 800dd2c:	bf00      	nop
 800dd2e:	370c      	adds	r7, #12
 800dd30:	46bd      	mov	sp, r7
 800dd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd36:	4770      	bx	lr
 800dd38:	200053e8 	.word	0x200053e8
 800dd3c:	200053d4 	.word	0x200053d4

0800dd40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b088      	sub	sp, #32
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
 800dd48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d10a      	bne.n	800dd66 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800dd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd54:	f383 8811 	msr	BASEPRI, r3
 800dd58:	f3bf 8f6f 	isb	sy
 800dd5c:	f3bf 8f4f 	dsb	sy
 800dd60:	613b      	str	r3, [r7, #16]
}
 800dd62:	bf00      	nop
 800dd64:	e7fe      	b.n	800dd64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d10a      	bne.n	800dd82 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800dd6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd70:	f383 8811 	msr	BASEPRI, r3
 800dd74:	f3bf 8f6f 	isb	sy
 800dd78:	f3bf 8f4f 	dsb	sy
 800dd7c:	60fb      	str	r3, [r7, #12]
}
 800dd7e:	bf00      	nop
 800dd80:	e7fe      	b.n	800dd80 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800dd82:	f7fe fb27 	bl	800c3d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dd86:	4b24      	ldr	r3, [pc, #144]	; (800de18 <xTaskCheckForTimeOut+0xd8>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	685b      	ldr	r3, [r3, #4]
 800dd90:	69ba      	ldr	r2, [r7, #24]
 800dd92:	1ad3      	subs	r3, r2, r3
 800dd94:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800dd96:	4b21      	ldr	r3, [pc, #132]	; (800de1c <xTaskCheckForTimeOut+0xdc>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	f893 31b6 	ldrb.w	r3, [r3, #438]	; 0x1b6
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d007      	beq.n	800ddb2 <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800dda2:	4b1e      	ldr	r3, [pc, #120]	; (800de1c <xTaskCheckForTimeOut+0xdc>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	2200      	movs	r2, #0
 800dda8:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
				xReturn = pdTRUE;
 800ddac:	2301      	movs	r3, #1
 800ddae:	61fb      	str	r3, [r7, #28]
 800ddb0:	e02b      	b.n	800de0a <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddba:	d102      	bne.n	800ddc2 <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	61fb      	str	r3, [r7, #28]
 800ddc0:	e023      	b.n	800de0a <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681a      	ldr	r2, [r3, #0]
 800ddc6:	4b16      	ldr	r3, [pc, #88]	; (800de20 <xTaskCheckForTimeOut+0xe0>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d007      	beq.n	800ddde <xTaskCheckForTimeOut+0x9e>
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	685b      	ldr	r3, [r3, #4]
 800ddd2:	69ba      	ldr	r2, [r7, #24]
 800ddd4:	429a      	cmp	r2, r3
 800ddd6:	d302      	bcc.n	800ddde <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ddd8:	2301      	movs	r3, #1
 800ddda:	61fb      	str	r3, [r7, #28]
 800dddc:	e015      	b.n	800de0a <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	697a      	ldr	r2, [r7, #20]
 800dde4:	429a      	cmp	r2, r3
 800dde6:	d20b      	bcs.n	800de00 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	681a      	ldr	r2, [r3, #0]
 800ddec:	697b      	ldr	r3, [r7, #20]
 800ddee:	1ad2      	subs	r2, r2, r3
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f7ff ff8d 	bl	800dd14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	61fb      	str	r3, [r7, #28]
 800ddfe:	e004      	b.n	800de0a <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	2200      	movs	r2, #0
 800de04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800de06:	2301      	movs	r3, #1
 800de08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800de0a:	f7fe fb13 	bl	800c434 <vPortExitCritical>

	return xReturn;
 800de0e:	69fb      	ldr	r3, [r7, #28]
}
 800de10:	4618      	mov	r0, r3
 800de12:	3720      	adds	r7, #32
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}
 800de18:	200053d4 	.word	0x200053d4
 800de1c:	20004ef8 	.word	0x20004ef8
 800de20:	200053e8 	.word	0x200053e8

0800de24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800de24:	b480      	push	{r7}
 800de26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800de28:	4b03      	ldr	r3, [pc, #12]	; (800de38 <vTaskMissedYield+0x14>)
 800de2a:	2201      	movs	r2, #1
 800de2c:	601a      	str	r2, [r3, #0]
}
 800de2e:	bf00      	nop
 800de30:	46bd      	mov	sp, r7
 800de32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de36:	4770      	bx	lr
 800de38:	200053e4 	.word	0x200053e4

0800de3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b084      	sub	sp, #16
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800de44:	f000 f8aa 	bl	800df9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800de48:	4b19      	ldr	r3, [pc, #100]	; (800deb0 <prvIdleTask+0x74>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	2b01      	cmp	r3, #1
 800de4e:	d907      	bls.n	800de60 <prvIdleTask+0x24>
			{
				taskYIELD();
 800de50:	4b18      	ldr	r3, [pc, #96]	; (800deb4 <prvIdleTask+0x78>)
 800de52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de56:	601a      	str	r2, [r3, #0]
 800de58:	f3bf 8f4f 	dsb	sy
 800de5c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800de60:	f7f4 fdd9 	bl	8002a16 <vApplicationIdleHook>
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800de64:	f7ff fc2e 	bl	800d6c4 <prvGetExpectedIdleTime>
 800de68:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	2b01      	cmp	r3, #1
 800de6e:	d9e9      	bls.n	800de44 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800de70:	f7ff fc1a 	bl	800d6a8 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800de74:	4b10      	ldr	r3, [pc, #64]	; (800deb8 <prvIdleTask+0x7c>)
 800de76:	681a      	ldr	r2, [r3, #0]
 800de78:	4b10      	ldr	r3, [pc, #64]	; (800debc <prvIdleTask+0x80>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d20a      	bcs.n	800de96 <prvIdleTask+0x5a>
	__asm volatile
 800de80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de84:	f383 8811 	msr	BASEPRI, r3
 800de88:	f3bf 8f6f 	isb	sy
 800de8c:	f3bf 8f4f 	dsb	sy
 800de90:	60bb      	str	r3, [r7, #8]
}
 800de92:	bf00      	nop
 800de94:	e7fe      	b.n	800de94 <prvIdleTask+0x58>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800de96:	f7ff fc15 	bl	800d6c4 <prvGetExpectedIdleTime>
 800de9a:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	2b01      	cmp	r3, #1
 800dea0:	d902      	bls.n	800dea8 <prvIdleTask+0x6c>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800dea2:	68f8      	ldr	r0, [r7, #12]
 800dea4:	f7fe fb4a 	bl	800c53c <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800dea8:	f7ff fc44 	bl	800d734 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800deac:	e7ca      	b.n	800de44 <prvIdleTask+0x8>
 800deae:	bf00      	nop
 800deb0:	20004efc 	.word	0x20004efc
 800deb4:	e000ed04 	.word	0xe000ed04
 800deb8:	200053f0 	.word	0x200053f0
 800debc:	200053d4 	.word	0x200053d4

0800dec0 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800dec0:	b480      	push	{r7}
 800dec2:	b083      	sub	sp, #12
 800dec4:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800dec6:	2301      	movs	r3, #1
 800dec8:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800deca:	2301      	movs	r3, #1
 800decc:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800dece:	4b0f      	ldr	r3, [pc, #60]	; (800df0c <eTaskConfirmSleepModeStatus+0x4c>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d002      	beq.n	800dedc <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800ded6:	2300      	movs	r3, #0
 800ded8:	71fb      	strb	r3, [r7, #7]
 800deda:	e010      	b.n	800defe <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800dedc:	4b0c      	ldr	r3, [pc, #48]	; (800df10 <eTaskConfirmSleepModeStatus+0x50>)
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d002      	beq.n	800deea <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800dee4:	2300      	movs	r3, #0
 800dee6:	71fb      	strb	r3, [r7, #7]
 800dee8:	e009      	b.n	800defe <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800deea:	4b0a      	ldr	r3, [pc, #40]	; (800df14 <eTaskConfirmSleepModeStatus+0x54>)
 800deec:	681a      	ldr	r2, [r3, #0]
 800deee:	4b0a      	ldr	r3, [pc, #40]	; (800df18 <eTaskConfirmSleepModeStatus+0x58>)
 800def0:	6819      	ldr	r1, [r3, #0]
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	1acb      	subs	r3, r1, r3
 800def6:	429a      	cmp	r2, r3
 800def8:	d101      	bne.n	800defe <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800defa:	2302      	movs	r3, #2
 800defc:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800defe:	79fb      	ldrb	r3, [r7, #7]
	}
 800df00:	4618      	mov	r0, r3
 800df02:	370c      	adds	r7, #12
 800df04:	46bd      	mov	sp, r7
 800df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0a:	4770      	bx	lr
 800df0c:	2000538c 	.word	0x2000538c
 800df10:	200053e4 	.word	0x200053e4
 800df14:	200053b8 	.word	0x200053b8
 800df18:	200053d0 	.word	0x200053d0

0800df1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b082      	sub	sp, #8
 800df20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800df22:	2300      	movs	r3, #0
 800df24:	607b      	str	r3, [r7, #4]
 800df26:	e00c      	b.n	800df42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800df28:	687a      	ldr	r2, [r7, #4]
 800df2a:	4613      	mov	r3, r2
 800df2c:	009b      	lsls	r3, r3, #2
 800df2e:	4413      	add	r3, r2
 800df30:	009b      	lsls	r3, r3, #2
 800df32:	4a12      	ldr	r2, [pc, #72]	; (800df7c <prvInitialiseTaskLists+0x60>)
 800df34:	4413      	add	r3, r2
 800df36:	4618      	mov	r0, r3
 800df38:	f7fe f868 	bl	800c00c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	3301      	adds	r3, #1
 800df40:	607b      	str	r3, [r7, #4]
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2b37      	cmp	r3, #55	; 0x37
 800df46:	d9ef      	bls.n	800df28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800df48:	480d      	ldr	r0, [pc, #52]	; (800df80 <prvInitialiseTaskLists+0x64>)
 800df4a:	f7fe f85f 	bl	800c00c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800df4e:	480d      	ldr	r0, [pc, #52]	; (800df84 <prvInitialiseTaskLists+0x68>)
 800df50:	f7fe f85c 	bl	800c00c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800df54:	480c      	ldr	r0, [pc, #48]	; (800df88 <prvInitialiseTaskLists+0x6c>)
 800df56:	f7fe f859 	bl	800c00c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800df5a:	480c      	ldr	r0, [pc, #48]	; (800df8c <prvInitialiseTaskLists+0x70>)
 800df5c:	f7fe f856 	bl	800c00c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800df60:	480b      	ldr	r0, [pc, #44]	; (800df90 <prvInitialiseTaskLists+0x74>)
 800df62:	f7fe f853 	bl	800c00c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800df66:	4b0b      	ldr	r3, [pc, #44]	; (800df94 <prvInitialiseTaskLists+0x78>)
 800df68:	4a05      	ldr	r2, [pc, #20]	; (800df80 <prvInitialiseTaskLists+0x64>)
 800df6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800df6c:	4b0a      	ldr	r3, [pc, #40]	; (800df98 <prvInitialiseTaskLists+0x7c>)
 800df6e:	4a05      	ldr	r2, [pc, #20]	; (800df84 <prvInitialiseTaskLists+0x68>)
 800df70:	601a      	str	r2, [r3, #0]
}
 800df72:	bf00      	nop
 800df74:	3708      	adds	r7, #8
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}
 800df7a:	bf00      	nop
 800df7c:	20004efc 	.word	0x20004efc
 800df80:	2000535c 	.word	0x2000535c
 800df84:	20005370 	.word	0x20005370
 800df88:	2000538c 	.word	0x2000538c
 800df8c:	200053a0 	.word	0x200053a0
 800df90:	200053b8 	.word	0x200053b8
 800df94:	20005384 	.word	0x20005384
 800df98:	20005388 	.word	0x20005388

0800df9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b082      	sub	sp, #8
 800dfa0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dfa2:	e019      	b.n	800dfd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dfa4:	f7fe fa16 	bl	800c3d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfa8:	4b10      	ldr	r3, [pc, #64]	; (800dfec <prvCheckTasksWaitingTermination+0x50>)
 800dfaa:	68db      	ldr	r3, [r3, #12]
 800dfac:	68db      	ldr	r3, [r3, #12]
 800dfae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	3304      	adds	r3, #4
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f7fe f8b3 	bl	800c120 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dfba:	4b0d      	ldr	r3, [pc, #52]	; (800dff0 <prvCheckTasksWaitingTermination+0x54>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	3b01      	subs	r3, #1
 800dfc0:	4a0b      	ldr	r2, [pc, #44]	; (800dff0 <prvCheckTasksWaitingTermination+0x54>)
 800dfc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dfc4:	4b0b      	ldr	r3, [pc, #44]	; (800dff4 <prvCheckTasksWaitingTermination+0x58>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	3b01      	subs	r3, #1
 800dfca:	4a0a      	ldr	r2, [pc, #40]	; (800dff4 <prvCheckTasksWaitingTermination+0x58>)
 800dfcc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dfce:	f7fe fa31 	bl	800c434 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f000 f810 	bl	800dff8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dfd8:	4b06      	ldr	r3, [pc, #24]	; (800dff4 <prvCheckTasksWaitingTermination+0x58>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d1e1      	bne.n	800dfa4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dfe0:	bf00      	nop
 800dfe2:	bf00      	nop
 800dfe4:	3708      	adds	r7, #8
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd80      	pop	{r7, pc}
 800dfea:	bf00      	nop
 800dfec:	200053a0 	.word	0x200053a0
 800dff0:	200053d0 	.word	0x200053d0
 800dff4:	200053b4 	.word	0x200053b4

0800dff8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b084      	sub	sp, #16
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e006:	4618      	mov	r0, r3
 800e008:	f000 fe1e 	bl	800ec48 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800e012:	2b00      	cmp	r3, #0
 800e014:	d108      	bne.n	800e028 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e01a:	4618      	mov	r0, r3
 800e01c:	f7fd fed8 	bl	800bdd0 <vPortFree>
				vPortFree( pxTCB );
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f7fd fed5 	bl	800bdd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e026:	e018      	b.n	800e05a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800e02e:	2b01      	cmp	r3, #1
 800e030:	d103      	bne.n	800e03a <prvDeleteTCB+0x42>
				vPortFree( pxTCB );
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f7fd fecc 	bl	800bdd0 <vPortFree>
	}
 800e038:	e00f      	b.n	800e05a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800e040:	2b02      	cmp	r3, #2
 800e042:	d00a      	beq.n	800e05a <prvDeleteTCB+0x62>
	__asm volatile
 800e044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e048:	f383 8811 	msr	BASEPRI, r3
 800e04c:	f3bf 8f6f 	isb	sy
 800e050:	f3bf 8f4f 	dsb	sy
 800e054:	60fb      	str	r3, [r7, #12]
}
 800e056:	bf00      	nop
 800e058:	e7fe      	b.n	800e058 <prvDeleteTCB+0x60>
	}
 800e05a:	bf00      	nop
 800e05c:	3710      	adds	r7, #16
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}
	...

0800e064 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e064:	b480      	push	{r7}
 800e066:	b083      	sub	sp, #12
 800e068:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e06a:	4b0c      	ldr	r3, [pc, #48]	; (800e09c <prvResetNextTaskUnblockTime+0x38>)
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d104      	bne.n	800e07e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e074:	4b0a      	ldr	r3, [pc, #40]	; (800e0a0 <prvResetNextTaskUnblockTime+0x3c>)
 800e076:	f04f 32ff 	mov.w	r2, #4294967295
 800e07a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e07c:	e008      	b.n	800e090 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e07e:	4b07      	ldr	r3, [pc, #28]	; (800e09c <prvResetNextTaskUnblockTime+0x38>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	68db      	ldr	r3, [r3, #12]
 800e084:	68db      	ldr	r3, [r3, #12]
 800e086:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	685b      	ldr	r3, [r3, #4]
 800e08c:	4a04      	ldr	r2, [pc, #16]	; (800e0a0 <prvResetNextTaskUnblockTime+0x3c>)
 800e08e:	6013      	str	r3, [r2, #0]
}
 800e090:	bf00      	nop
 800e092:	370c      	adds	r7, #12
 800e094:	46bd      	mov	sp, r7
 800e096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09a:	4770      	bx	lr
 800e09c:	20005384 	.word	0x20005384
 800e0a0:	200053f0 	.word	0x200053f0

0800e0a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e0a4:	b480      	push	{r7}
 800e0a6:	b083      	sub	sp, #12
 800e0a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e0aa:	4b0b      	ldr	r3, [pc, #44]	; (800e0d8 <xTaskGetSchedulerState+0x34>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d102      	bne.n	800e0b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e0b2:	2301      	movs	r3, #1
 800e0b4:	607b      	str	r3, [r7, #4]
 800e0b6:	e008      	b.n	800e0ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e0b8:	4b08      	ldr	r3, [pc, #32]	; (800e0dc <xTaskGetSchedulerState+0x38>)
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d102      	bne.n	800e0c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e0c0:	2302      	movs	r3, #2
 800e0c2:	607b      	str	r3, [r7, #4]
 800e0c4:	e001      	b.n	800e0ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e0ca:	687b      	ldr	r3, [r7, #4]
	}
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	370c      	adds	r7, #12
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d6:	4770      	bx	lr
 800e0d8:	200053dc 	.word	0x200053dc
 800e0dc:	200053f8 	.word	0x200053f8

0800e0e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b086      	sub	sp, #24
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d05c      	beq.n	800e1b0 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e0f6:	4b31      	ldr	r3, [pc, #196]	; (800e1bc <xTaskPriorityDisinherit+0xdc>)
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	693a      	ldr	r2, [r7, #16]
 800e0fc:	429a      	cmp	r2, r3
 800e0fe:	d00a      	beq.n	800e116 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e104:	f383 8811 	msr	BASEPRI, r3
 800e108:	f3bf 8f6f 	isb	sy
 800e10c:	f3bf 8f4f 	dsb	sy
 800e110:	60fb      	str	r3, [r7, #12]
}
 800e112:	bf00      	nop
 800e114:	e7fe      	b.n	800e114 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e116:	693b      	ldr	r3, [r7, #16]
 800e118:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d10a      	bne.n	800e136 <xTaskPriorityDisinherit+0x56>
	__asm volatile
 800e120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e124:	f383 8811 	msr	BASEPRI, r3
 800e128:	f3bf 8f6f 	isb	sy
 800e12c:	f3bf 8f4f 	dsb	sy
 800e130:	60bb      	str	r3, [r7, #8]
}
 800e132:	bf00      	nop
 800e134:	e7fe      	b.n	800e134 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800e13c:	1e5a      	subs	r2, r3, #1
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e148:	693b      	ldr	r3, [r7, #16]
 800e14a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800e14e:	429a      	cmp	r2, r3
 800e150:	d02e      	beq.n	800e1b0 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e152:	693b      	ldr	r3, [r7, #16]
 800e154:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d129      	bne.n	800e1b0 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e15c:	693b      	ldr	r3, [r7, #16]
 800e15e:	3304      	adds	r3, #4
 800e160:	4618      	mov	r0, r3
 800e162:	f7fd ffdd 	bl	800c120 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e166:	693b      	ldr	r3, [r7, #16]
 800e168:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800e16c:	693b      	ldr	r3, [r7, #16]
 800e16e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e174:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e178:	693b      	ldr	r3, [r7, #16]
 800e17a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e17c:	693b      	ldr	r3, [r7, #16]
 800e17e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e180:	4b0f      	ldr	r3, [pc, #60]	; (800e1c0 <xTaskPriorityDisinherit+0xe0>)
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	429a      	cmp	r2, r3
 800e186:	d903      	bls.n	800e190 <xTaskPriorityDisinherit+0xb0>
 800e188:	693b      	ldr	r3, [r7, #16]
 800e18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e18c:	4a0c      	ldr	r2, [pc, #48]	; (800e1c0 <xTaskPriorityDisinherit+0xe0>)
 800e18e:	6013      	str	r3, [r2, #0]
 800e190:	693b      	ldr	r3, [r7, #16]
 800e192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e194:	4613      	mov	r3, r2
 800e196:	009b      	lsls	r3, r3, #2
 800e198:	4413      	add	r3, r2
 800e19a:	009b      	lsls	r3, r3, #2
 800e19c:	4a09      	ldr	r2, [pc, #36]	; (800e1c4 <xTaskPriorityDisinherit+0xe4>)
 800e19e:	441a      	add	r2, r3
 800e1a0:	693b      	ldr	r3, [r7, #16]
 800e1a2:	3304      	adds	r3, #4
 800e1a4:	4619      	mov	r1, r3
 800e1a6:	4610      	mov	r0, r2
 800e1a8:	f7fd ff5d 	bl	800c066 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e1b0:	697b      	ldr	r3, [r7, #20]
	}
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	3718      	adds	r7, #24
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd80      	pop	{r7, pc}
 800e1ba:	bf00      	nop
 800e1bc:	20004ef8 	.word	0x20004ef8
 800e1c0:	200053d8 	.word	0x200053d8
 800e1c4:	20004efc 	.word	0x20004efc

0800e1c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b084      	sub	sp, #16
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e1d2:	4b24      	ldr	r3, [pc, #144]	; (800e264 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800e1d8:	4b23      	ldr	r3, [pc, #140]	; (800e268 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	2200      	movs	r2, #0
 800e1de:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e1e2:	4b21      	ldr	r3, [pc, #132]	; (800e268 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	3304      	adds	r3, #4
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	f7fd ff99 	bl	800c120 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1f4:	d10a      	bne.n	800e20c <prvAddCurrentTaskToDelayedList+0x44>
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d007      	beq.n	800e20c <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e1fc:	4b1a      	ldr	r3, [pc, #104]	; (800e268 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	3304      	adds	r3, #4
 800e202:	4619      	mov	r1, r3
 800e204:	4819      	ldr	r0, [pc, #100]	; (800e26c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e206:	f7fd ff2e 	bl	800c066 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e20a:	e026      	b.n	800e25a <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e20c:	68fa      	ldr	r2, [r7, #12]
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	4413      	add	r3, r2
 800e212:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e214:	4b14      	ldr	r3, [pc, #80]	; (800e268 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	68ba      	ldr	r2, [r7, #8]
 800e21a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e21c:	68ba      	ldr	r2, [r7, #8]
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	429a      	cmp	r2, r3
 800e222:	d209      	bcs.n	800e238 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e224:	4b12      	ldr	r3, [pc, #72]	; (800e270 <prvAddCurrentTaskToDelayedList+0xa8>)
 800e226:	681a      	ldr	r2, [r3, #0]
 800e228:	4b0f      	ldr	r3, [pc, #60]	; (800e268 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	3304      	adds	r3, #4
 800e22e:	4619      	mov	r1, r3
 800e230:	4610      	mov	r0, r2
 800e232:	f7fd ff3c 	bl	800c0ae <vListInsert>
}
 800e236:	e010      	b.n	800e25a <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e238:	4b0e      	ldr	r3, [pc, #56]	; (800e274 <prvAddCurrentTaskToDelayedList+0xac>)
 800e23a:	681a      	ldr	r2, [r3, #0]
 800e23c:	4b0a      	ldr	r3, [pc, #40]	; (800e268 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	3304      	adds	r3, #4
 800e242:	4619      	mov	r1, r3
 800e244:	4610      	mov	r0, r2
 800e246:	f7fd ff32 	bl	800c0ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e24a:	4b0b      	ldr	r3, [pc, #44]	; (800e278 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	68ba      	ldr	r2, [r7, #8]
 800e250:	429a      	cmp	r2, r3
 800e252:	d202      	bcs.n	800e25a <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 800e254:	4a08      	ldr	r2, [pc, #32]	; (800e278 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	6013      	str	r3, [r2, #0]
}
 800e25a:	bf00      	nop
 800e25c:	3710      	adds	r7, #16
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}
 800e262:	bf00      	nop
 800e264:	200053d4 	.word	0x200053d4
 800e268:	20004ef8 	.word	0x20004ef8
 800e26c:	200053b8 	.word	0x200053b8
 800e270:	20005388 	.word	0x20005388
 800e274:	20005384 	.word	0x20005384
 800e278:	200053f0 	.word	0x200053f0

0800e27c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b08a      	sub	sp, #40	; 0x28
 800e280:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e282:	2300      	movs	r3, #0
 800e284:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e286:	f000 fbc1 	bl	800ea0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e28a:	4b1c      	ldr	r3, [pc, #112]	; (800e2fc <xTimerCreateTimerTask+0x80>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d021      	beq.n	800e2d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e292:	2300      	movs	r3, #0
 800e294:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e296:	2300      	movs	r3, #0
 800e298:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e29a:	1d3a      	adds	r2, r7, #4
 800e29c:	f107 0108 	add.w	r1, r7, #8
 800e2a0:	f107 030c 	add.w	r3, r7, #12
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	f7fd fca9 	bl	800bbfc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e2aa:	6879      	ldr	r1, [r7, #4]
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	68fa      	ldr	r2, [r7, #12]
 800e2b0:	9202      	str	r2, [sp, #8]
 800e2b2:	9301      	str	r3, [sp, #4]
 800e2b4:	2302      	movs	r3, #2
 800e2b6:	9300      	str	r3, [sp, #0]
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	460a      	mov	r2, r1
 800e2bc:	4910      	ldr	r1, [pc, #64]	; (800e300 <xTimerCreateTimerTask+0x84>)
 800e2be:	4811      	ldr	r0, [pc, #68]	; (800e304 <xTimerCreateTimerTask+0x88>)
 800e2c0:	f7fe ff7a 	bl	800d1b8 <xTaskCreateStatic>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	4a10      	ldr	r2, [pc, #64]	; (800e308 <xTimerCreateTimerTask+0x8c>)
 800e2c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e2ca:	4b0f      	ldr	r3, [pc, #60]	; (800e308 <xTimerCreateTimerTask+0x8c>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d001      	beq.n	800e2d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e2d6:	697b      	ldr	r3, [r7, #20]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d10a      	bne.n	800e2f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2e0:	f383 8811 	msr	BASEPRI, r3
 800e2e4:	f3bf 8f6f 	isb	sy
 800e2e8:	f3bf 8f4f 	dsb	sy
 800e2ec:	613b      	str	r3, [r7, #16]
}
 800e2ee:	bf00      	nop
 800e2f0:	e7fe      	b.n	800e2f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e2f2:	697b      	ldr	r3, [r7, #20]
}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3718      	adds	r7, #24
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}
 800e2fc:	20005434 	.word	0x20005434
 800e300:	0800f378 	.word	0x0800f378
 800e304:	0800e5b1 	.word	0x0800e5b1
 800e308:	20005438 	.word	0x20005438

0800e30c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b088      	sub	sp, #32
 800e310:	af02      	add	r7, sp, #8
 800e312:	60f8      	str	r0, [r7, #12]
 800e314:	60b9      	str	r1, [r7, #8]
 800e316:	607a      	str	r2, [r7, #4]
 800e318:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800e31a:	202c      	movs	r0, #44	; 0x2c
 800e31c:	f7fd fc88 	bl	800bc30 <pvPortMalloc>
 800e320:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d00d      	beq.n	800e344 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800e328:	697b      	ldr	r3, [r7, #20]
 800e32a:	2200      	movs	r2, #0
 800e32c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800e330:	697b      	ldr	r3, [r7, #20]
 800e332:	9301      	str	r3, [sp, #4]
 800e334:	6a3b      	ldr	r3, [r7, #32]
 800e336:	9300      	str	r3, [sp, #0]
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	687a      	ldr	r2, [r7, #4]
 800e33c:	68b9      	ldr	r1, [r7, #8]
 800e33e:	68f8      	ldr	r0, [r7, #12]
 800e340:	f000 f843 	bl	800e3ca <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800e344:	697b      	ldr	r3, [r7, #20]
	}
 800e346:	4618      	mov	r0, r3
 800e348:	3718      	adds	r7, #24
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}

0800e34e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800e34e:	b580      	push	{r7, lr}
 800e350:	b08a      	sub	sp, #40	; 0x28
 800e352:	af02      	add	r7, sp, #8
 800e354:	60f8      	str	r0, [r7, #12]
 800e356:	60b9      	str	r1, [r7, #8]
 800e358:	607a      	str	r2, [r7, #4]
 800e35a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800e35c:	232c      	movs	r3, #44	; 0x2c
 800e35e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800e360:	693b      	ldr	r3, [r7, #16]
 800e362:	2b2c      	cmp	r3, #44	; 0x2c
 800e364:	d00a      	beq.n	800e37c <xTimerCreateStatic+0x2e>
	__asm volatile
 800e366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e36a:	f383 8811 	msr	BASEPRI, r3
 800e36e:	f3bf 8f6f 	isb	sy
 800e372:	f3bf 8f4f 	dsb	sy
 800e376:	61bb      	str	r3, [r7, #24]
}
 800e378:	bf00      	nop
 800e37a:	e7fe      	b.n	800e37a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e37c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800e37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e380:	2b00      	cmp	r3, #0
 800e382:	d10a      	bne.n	800e39a <xTimerCreateStatic+0x4c>
	__asm volatile
 800e384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e388:	f383 8811 	msr	BASEPRI, r3
 800e38c:	f3bf 8f6f 	isb	sy
 800e390:	f3bf 8f4f 	dsb	sy
 800e394:	617b      	str	r3, [r7, #20]
}
 800e396:	bf00      	nop
 800e398:	e7fe      	b.n	800e398 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800e39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e39c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800e39e:	69fb      	ldr	r3, [r7, #28]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d00d      	beq.n	800e3c0 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800e3a4:	69fb      	ldr	r3, [r7, #28]
 800e3a6:	2202      	movs	r2, #2
 800e3a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800e3ac:	69fb      	ldr	r3, [r7, #28]
 800e3ae:	9301      	str	r3, [sp, #4]
 800e3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3b2:	9300      	str	r3, [sp, #0]
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	687a      	ldr	r2, [r7, #4]
 800e3b8:	68b9      	ldr	r1, [r7, #8]
 800e3ba:	68f8      	ldr	r0, [r7, #12]
 800e3bc:	f000 f805 	bl	800e3ca <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800e3c0:	69fb      	ldr	r3, [r7, #28]
	}
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	3720      	adds	r7, #32
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}

0800e3ca <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800e3ca:	b580      	push	{r7, lr}
 800e3cc:	b086      	sub	sp, #24
 800e3ce:	af00      	add	r7, sp, #0
 800e3d0:	60f8      	str	r0, [r7, #12]
 800e3d2:	60b9      	str	r1, [r7, #8]
 800e3d4:	607a      	str	r2, [r7, #4]
 800e3d6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d10a      	bne.n	800e3f4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800e3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3e2:	f383 8811 	msr	BASEPRI, r3
 800e3e6:	f3bf 8f6f 	isb	sy
 800e3ea:	f3bf 8f4f 	dsb	sy
 800e3ee:	617b      	str	r3, [r7, #20]
}
 800e3f0:	bf00      	nop
 800e3f2:	e7fe      	b.n	800e3f2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800e3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d01e      	beq.n	800e438 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800e3fa:	f000 fb07 	bl	800ea0c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800e3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e400:	68fa      	ldr	r2, [r7, #12]
 800e402:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800e404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e406:	68ba      	ldr	r2, [r7, #8]
 800e408:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800e40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e40c:	683a      	ldr	r2, [r7, #0]
 800e40e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800e410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e412:	6a3a      	ldr	r2, [r7, #32]
 800e414:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800e416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e418:	3304      	adds	r3, #4
 800e41a:	4618      	mov	r0, r3
 800e41c:	f7fd fe16 	bl	800c04c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d008      	beq.n	800e438 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800e426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e428:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e42c:	f043 0304 	orr.w	r3, r3, #4
 800e430:	b2da      	uxtb	r2, r3
 800e432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e434:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800e438:	bf00      	nop
 800e43a:	3718      	adds	r7, #24
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd80      	pop	{r7, pc}

0800e440 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b08a      	sub	sp, #40	; 0x28
 800e444:	af00      	add	r7, sp, #0
 800e446:	60f8      	str	r0, [r7, #12]
 800e448:	60b9      	str	r1, [r7, #8]
 800e44a:	607a      	str	r2, [r7, #4]
 800e44c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e44e:	2300      	movs	r3, #0
 800e450:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d10a      	bne.n	800e46e <xTimerGenericCommand+0x2e>
	__asm volatile
 800e458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e45c:	f383 8811 	msr	BASEPRI, r3
 800e460:	f3bf 8f6f 	isb	sy
 800e464:	f3bf 8f4f 	dsb	sy
 800e468:	623b      	str	r3, [r7, #32]
}
 800e46a:	bf00      	nop
 800e46c:	e7fe      	b.n	800e46c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e46e:	4b1a      	ldr	r3, [pc, #104]	; (800e4d8 <xTimerGenericCommand+0x98>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d02a      	beq.n	800e4cc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	2b05      	cmp	r3, #5
 800e486:	dc18      	bgt.n	800e4ba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e488:	f7ff fe0c 	bl	800e0a4 <xTaskGetSchedulerState>
 800e48c:	4603      	mov	r3, r0
 800e48e:	2b02      	cmp	r3, #2
 800e490:	d109      	bne.n	800e4a6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e492:	4b11      	ldr	r3, [pc, #68]	; (800e4d8 <xTimerGenericCommand+0x98>)
 800e494:	6818      	ldr	r0, [r3, #0]
 800e496:	f107 0110 	add.w	r1, r7, #16
 800e49a:	2300      	movs	r3, #0
 800e49c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e49e:	f7fe faa3 	bl	800c9e8 <xQueueGenericSend>
 800e4a2:	6278      	str	r0, [r7, #36]	; 0x24
 800e4a4:	e012      	b.n	800e4cc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e4a6:	4b0c      	ldr	r3, [pc, #48]	; (800e4d8 <xTimerGenericCommand+0x98>)
 800e4a8:	6818      	ldr	r0, [r3, #0]
 800e4aa:	f107 0110 	add.w	r1, r7, #16
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	f7fe fa99 	bl	800c9e8 <xQueueGenericSend>
 800e4b6:	6278      	str	r0, [r7, #36]	; 0x24
 800e4b8:	e008      	b.n	800e4cc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e4ba:	4b07      	ldr	r3, [pc, #28]	; (800e4d8 <xTimerGenericCommand+0x98>)
 800e4bc:	6818      	ldr	r0, [r3, #0]
 800e4be:	f107 0110 	add.w	r1, r7, #16
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	683a      	ldr	r2, [r7, #0]
 800e4c6:	f7fe fb8d 	bl	800cbe4 <xQueueGenericSendFromISR>
 800e4ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	3728      	adds	r7, #40	; 0x28
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	bd80      	pop	{r7, pc}
 800e4d6:	bf00      	nop
 800e4d8:	20005434 	.word	0x20005434

0800e4dc <xTimerGetExpiryTime>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
{
 800e4dc:	b480      	push	{r7}
 800e4de:	b087      	sub	sp, #28
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
Timer_t * pxTimer =  xTimer;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	617b      	str	r3, [r7, #20]
TickType_t xReturn;

	configASSERT( xTimer );
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d10a      	bne.n	800e504 <xTimerGetExpiryTime+0x28>
	__asm volatile
 800e4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f2:	f383 8811 	msr	BASEPRI, r3
 800e4f6:	f3bf 8f6f 	isb	sy
 800e4fa:	f3bf 8f4f 	dsb	sy
 800e4fe:	60fb      	str	r3, [r7, #12]
}
 800e500:	bf00      	nop
 800e502:	e7fe      	b.n	800e502 <xTimerGetExpiryTime+0x26>
	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 800e504:	697b      	ldr	r3, [r7, #20]
 800e506:	685b      	ldr	r3, [r3, #4]
 800e508:	613b      	str	r3, [r7, #16]
	return xReturn;
 800e50a:	693b      	ldr	r3, [r7, #16]
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	371c      	adds	r7, #28
 800e510:	46bd      	mov	sp, r7
 800e512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e516:	4770      	bx	lr

0800e518 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b088      	sub	sp, #32
 800e51c:	af02      	add	r7, sp, #8
 800e51e:	6078      	str	r0, [r7, #4]
 800e520:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e522:	4b22      	ldr	r3, [pc, #136]	; (800e5ac <prvProcessExpiredTimer+0x94>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	68db      	ldr	r3, [r3, #12]
 800e528:	68db      	ldr	r3, [r3, #12]
 800e52a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e52c:	697b      	ldr	r3, [r7, #20]
 800e52e:	3304      	adds	r3, #4
 800e530:	4618      	mov	r0, r3
 800e532:	f7fd fdf5 	bl	800c120 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e53c:	f003 0304 	and.w	r3, r3, #4
 800e540:	2b00      	cmp	r3, #0
 800e542:	d022      	beq.n	800e58a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e544:	697b      	ldr	r3, [r7, #20]
 800e546:	699a      	ldr	r2, [r3, #24]
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	18d1      	adds	r1, r2, r3
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	683a      	ldr	r2, [r7, #0]
 800e550:	6978      	ldr	r0, [r7, #20]
 800e552:	f000 f8d3 	bl	800e6fc <prvInsertTimerInActiveList>
 800e556:	4603      	mov	r3, r0
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d01f      	beq.n	800e59c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e55c:	2300      	movs	r3, #0
 800e55e:	9300      	str	r3, [sp, #0]
 800e560:	2300      	movs	r3, #0
 800e562:	687a      	ldr	r2, [r7, #4]
 800e564:	2100      	movs	r1, #0
 800e566:	6978      	ldr	r0, [r7, #20]
 800e568:	f7ff ff6a 	bl	800e440 <xTimerGenericCommand>
 800e56c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d113      	bne.n	800e59c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e578:	f383 8811 	msr	BASEPRI, r3
 800e57c:	f3bf 8f6f 	isb	sy
 800e580:	f3bf 8f4f 	dsb	sy
 800e584:	60fb      	str	r3, [r7, #12]
}
 800e586:	bf00      	nop
 800e588:	e7fe      	b.n	800e588 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e58a:	697b      	ldr	r3, [r7, #20]
 800e58c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e590:	f023 0301 	bic.w	r3, r3, #1
 800e594:	b2da      	uxtb	r2, r3
 800e596:	697b      	ldr	r3, [r7, #20]
 800e598:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	6a1b      	ldr	r3, [r3, #32]
 800e5a0:	6978      	ldr	r0, [r7, #20]
 800e5a2:	4798      	blx	r3
}
 800e5a4:	bf00      	nop
 800e5a6:	3718      	adds	r7, #24
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}
 800e5ac:	2000542c 	.word	0x2000542c

0800e5b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b084      	sub	sp, #16
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
 800e5b8:	f7f4 fa4d 	bl	8002a56 <vApplicationDaemonTaskStartupHook>

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e5bc:	f107 0308 	add.w	r3, r7, #8
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f000 f857 	bl	800e674 <prvGetNextExpireTime>
 800e5c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	4619      	mov	r1, r3
 800e5cc:	68f8      	ldr	r0, [r7, #12]
 800e5ce:	f000 f803 	bl	800e5d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e5d2:	f000 f8d5 	bl	800e780 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e5d6:	e7f1      	b.n	800e5bc <prvTimerTask+0xc>

0800e5d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b084      	sub	sp, #16
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
 800e5e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e5e2:	f7ff f861 	bl	800d6a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e5e6:	f107 0308 	add.w	r3, r7, #8
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f000 f866 	bl	800e6bc <prvSampleTimeNow>
 800e5f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e5f2:	68bb      	ldr	r3, [r7, #8]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d130      	bne.n	800e65a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d10a      	bne.n	800e614 <prvProcessTimerOrBlockTask+0x3c>
 800e5fe:	687a      	ldr	r2, [r7, #4]
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	429a      	cmp	r2, r3
 800e604:	d806      	bhi.n	800e614 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e606:	f7ff f895 	bl	800d734 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e60a:	68f9      	ldr	r1, [r7, #12]
 800e60c:	6878      	ldr	r0, [r7, #4]
 800e60e:	f7ff ff83 	bl	800e518 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e612:	e024      	b.n	800e65e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d008      	beq.n	800e62c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e61a:	4b13      	ldr	r3, [pc, #76]	; (800e668 <prvProcessTimerOrBlockTask+0x90>)
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d101      	bne.n	800e628 <prvProcessTimerOrBlockTask+0x50>
 800e624:	2301      	movs	r3, #1
 800e626:	e000      	b.n	800e62a <prvProcessTimerOrBlockTask+0x52>
 800e628:	2300      	movs	r3, #0
 800e62a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e62c:	4b0f      	ldr	r3, [pc, #60]	; (800e66c <prvProcessTimerOrBlockTask+0x94>)
 800e62e:	6818      	ldr	r0, [r3, #0]
 800e630:	687a      	ldr	r2, [r7, #4]
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	1ad3      	subs	r3, r2, r3
 800e636:	683a      	ldr	r2, [r7, #0]
 800e638:	4619      	mov	r1, r3
 800e63a:	f7fe fd89 	bl	800d150 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e63e:	f7ff f879 	bl	800d734 <xTaskResumeAll>
 800e642:	4603      	mov	r3, r0
 800e644:	2b00      	cmp	r3, #0
 800e646:	d10a      	bne.n	800e65e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e648:	4b09      	ldr	r3, [pc, #36]	; (800e670 <prvProcessTimerOrBlockTask+0x98>)
 800e64a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e64e:	601a      	str	r2, [r3, #0]
 800e650:	f3bf 8f4f 	dsb	sy
 800e654:	f3bf 8f6f 	isb	sy
}
 800e658:	e001      	b.n	800e65e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e65a:	f7ff f86b 	bl	800d734 <xTaskResumeAll>
}
 800e65e:	bf00      	nop
 800e660:	3710      	adds	r7, #16
 800e662:	46bd      	mov	sp, r7
 800e664:	bd80      	pop	{r7, pc}
 800e666:	bf00      	nop
 800e668:	20005430 	.word	0x20005430
 800e66c:	20005434 	.word	0x20005434
 800e670:	e000ed04 	.word	0xe000ed04

0800e674 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e674:	b480      	push	{r7}
 800e676:	b085      	sub	sp, #20
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e67c:	4b0e      	ldr	r3, [pc, #56]	; (800e6b8 <prvGetNextExpireTime+0x44>)
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d101      	bne.n	800e68a <prvGetNextExpireTime+0x16>
 800e686:	2201      	movs	r2, #1
 800e688:	e000      	b.n	800e68c <prvGetNextExpireTime+0x18>
 800e68a:	2200      	movs	r2, #0
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d105      	bne.n	800e6a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e698:	4b07      	ldr	r3, [pc, #28]	; (800e6b8 <prvGetNextExpireTime+0x44>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	68db      	ldr	r3, [r3, #12]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	60fb      	str	r3, [r7, #12]
 800e6a2:	e001      	b.n	800e6a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
}
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	3714      	adds	r7, #20
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b4:	4770      	bx	lr
 800e6b6:	bf00      	nop
 800e6b8:	2000542c 	.word	0x2000542c

0800e6bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b084      	sub	sp, #16
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e6c4:	f7ff f8d4 	bl	800d870 <xTaskGetTickCount>
 800e6c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e6ca:	4b0b      	ldr	r3, [pc, #44]	; (800e6f8 <prvSampleTimeNow+0x3c>)
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	68fa      	ldr	r2, [r7, #12]
 800e6d0:	429a      	cmp	r2, r3
 800e6d2:	d205      	bcs.n	800e6e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e6d4:	f000 f936 	bl	800e944 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	2201      	movs	r2, #1
 800e6dc:	601a      	str	r2, [r3, #0]
 800e6de:	e002      	b.n	800e6e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e6e6:	4a04      	ldr	r2, [pc, #16]	; (800e6f8 <prvSampleTimeNow+0x3c>)
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	3710      	adds	r7, #16
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}
 800e6f6:	bf00      	nop
 800e6f8:	2000543c 	.word	0x2000543c

0800e6fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b086      	sub	sp, #24
 800e700:	af00      	add	r7, sp, #0
 800e702:	60f8      	str	r0, [r7, #12]
 800e704:	60b9      	str	r1, [r7, #8]
 800e706:	607a      	str	r2, [r7, #4]
 800e708:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e70a:	2300      	movs	r3, #0
 800e70c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	68ba      	ldr	r2, [r7, #8]
 800e712:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	68fa      	ldr	r2, [r7, #12]
 800e718:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e71a:	68ba      	ldr	r2, [r7, #8]
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	429a      	cmp	r2, r3
 800e720:	d812      	bhi.n	800e748 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e722:	687a      	ldr	r2, [r7, #4]
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	1ad2      	subs	r2, r2, r3
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	699b      	ldr	r3, [r3, #24]
 800e72c:	429a      	cmp	r2, r3
 800e72e:	d302      	bcc.n	800e736 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e730:	2301      	movs	r3, #1
 800e732:	617b      	str	r3, [r7, #20]
 800e734:	e01b      	b.n	800e76e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e736:	4b10      	ldr	r3, [pc, #64]	; (800e778 <prvInsertTimerInActiveList+0x7c>)
 800e738:	681a      	ldr	r2, [r3, #0]
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	3304      	adds	r3, #4
 800e73e:	4619      	mov	r1, r3
 800e740:	4610      	mov	r0, r2
 800e742:	f7fd fcb4 	bl	800c0ae <vListInsert>
 800e746:	e012      	b.n	800e76e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e748:	687a      	ldr	r2, [r7, #4]
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	429a      	cmp	r2, r3
 800e74e:	d206      	bcs.n	800e75e <prvInsertTimerInActiveList+0x62>
 800e750:	68ba      	ldr	r2, [r7, #8]
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	429a      	cmp	r2, r3
 800e756:	d302      	bcc.n	800e75e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e758:	2301      	movs	r3, #1
 800e75a:	617b      	str	r3, [r7, #20]
 800e75c:	e007      	b.n	800e76e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e75e:	4b07      	ldr	r3, [pc, #28]	; (800e77c <prvInsertTimerInActiveList+0x80>)
 800e760:	681a      	ldr	r2, [r3, #0]
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	3304      	adds	r3, #4
 800e766:	4619      	mov	r1, r3
 800e768:	4610      	mov	r0, r2
 800e76a:	f7fd fca0 	bl	800c0ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e76e:	697b      	ldr	r3, [r7, #20]
}
 800e770:	4618      	mov	r0, r3
 800e772:	3718      	adds	r7, #24
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}
 800e778:	20005430 	.word	0x20005430
 800e77c:	2000542c 	.word	0x2000542c

0800e780 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b08e      	sub	sp, #56	; 0x38
 800e784:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e786:	e0ca      	b.n	800e91e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	da18      	bge.n	800e7c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e78e:	1d3b      	adds	r3, r7, #4
 800e790:	3304      	adds	r3, #4
 800e792:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e796:	2b00      	cmp	r3, #0
 800e798:	d10a      	bne.n	800e7b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e79e:	f383 8811 	msr	BASEPRI, r3
 800e7a2:	f3bf 8f6f 	isb	sy
 800e7a6:	f3bf 8f4f 	dsb	sy
 800e7aa:	61fb      	str	r3, [r7, #28]
}
 800e7ac:	bf00      	nop
 800e7ae:	e7fe      	b.n	800e7ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7b6:	6850      	ldr	r0, [r2, #4]
 800e7b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7ba:	6892      	ldr	r2, [r2, #8]
 800e7bc:	4611      	mov	r1, r2
 800e7be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	f2c0 80aa 	blt.w	800e91c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ce:	695b      	ldr	r3, [r3, #20]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d004      	beq.n	800e7de <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d6:	3304      	adds	r3, #4
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f7fd fca1 	bl	800c120 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e7de:	463b      	mov	r3, r7
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f7ff ff6b 	bl	800e6bc <prvSampleTimeNow>
 800e7e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2b09      	cmp	r3, #9
 800e7ec:	f200 8097 	bhi.w	800e91e <prvProcessReceivedCommands+0x19e>
 800e7f0:	a201      	add	r2, pc, #4	; (adr r2, 800e7f8 <prvProcessReceivedCommands+0x78>)
 800e7f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7f6:	bf00      	nop
 800e7f8:	0800e821 	.word	0x0800e821
 800e7fc:	0800e821 	.word	0x0800e821
 800e800:	0800e821 	.word	0x0800e821
 800e804:	0800e895 	.word	0x0800e895
 800e808:	0800e8a9 	.word	0x0800e8a9
 800e80c:	0800e8f3 	.word	0x0800e8f3
 800e810:	0800e821 	.word	0x0800e821
 800e814:	0800e821 	.word	0x0800e821
 800e818:	0800e895 	.word	0x0800e895
 800e81c:	0800e8a9 	.word	0x0800e8a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e822:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e826:	f043 0301 	orr.w	r3, r3, #1
 800e82a:	b2da      	uxtb	r2, r3
 800e82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e82e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e832:	68ba      	ldr	r2, [r7, #8]
 800e834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e836:	699b      	ldr	r3, [r3, #24]
 800e838:	18d1      	adds	r1, r2, r3
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e83e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e840:	f7ff ff5c 	bl	800e6fc <prvInsertTimerInActiveList>
 800e844:	4603      	mov	r3, r0
 800e846:	2b00      	cmp	r3, #0
 800e848:	d069      	beq.n	800e91e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e84c:	6a1b      	ldr	r3, [r3, #32]
 800e84e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e850:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e854:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e858:	f003 0304 	and.w	r3, r3, #4
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d05e      	beq.n	800e91e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e860:	68ba      	ldr	r2, [r7, #8]
 800e862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e864:	699b      	ldr	r3, [r3, #24]
 800e866:	441a      	add	r2, r3
 800e868:	2300      	movs	r3, #0
 800e86a:	9300      	str	r3, [sp, #0]
 800e86c:	2300      	movs	r3, #0
 800e86e:	2100      	movs	r1, #0
 800e870:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e872:	f7ff fde5 	bl	800e440 <xTimerGenericCommand>
 800e876:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e878:	6a3b      	ldr	r3, [r7, #32]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d14f      	bne.n	800e91e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e882:	f383 8811 	msr	BASEPRI, r3
 800e886:	f3bf 8f6f 	isb	sy
 800e88a:	f3bf 8f4f 	dsb	sy
 800e88e:	61bb      	str	r3, [r7, #24]
}
 800e890:	bf00      	nop
 800e892:	e7fe      	b.n	800e892 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e896:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e89a:	f023 0301 	bic.w	r3, r3, #1
 800e89e:	b2da      	uxtb	r2, r3
 800e8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e8a6:	e03a      	b.n	800e91e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8ae:	f043 0301 	orr.w	r3, r3, #1
 800e8b2:	b2da      	uxtb	r2, r3
 800e8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e8ba:	68ba      	ldr	r2, [r7, #8]
 800e8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c2:	699b      	ldr	r3, [r3, #24]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d10a      	bne.n	800e8de <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8cc:	f383 8811 	msr	BASEPRI, r3
 800e8d0:	f3bf 8f6f 	isb	sy
 800e8d4:	f3bf 8f4f 	dsb	sy
 800e8d8:	617b      	str	r3, [r7, #20]
}
 800e8da:	bf00      	nop
 800e8dc:	e7fe      	b.n	800e8dc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e0:	699a      	ldr	r2, [r3, #24]
 800e8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e4:	18d1      	adds	r1, r2, r3
 800e8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8ec:	f7ff ff06 	bl	800e6fc <prvInsertTimerInActiveList>
					break;
 800e8f0:	e015      	b.n	800e91e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8f8:	f003 0302 	and.w	r3, r3, #2
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d103      	bne.n	800e908 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e900:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e902:	f7fd fa65 	bl	800bdd0 <vPortFree>
 800e906:	e00a      	b.n	800e91e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e90a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e90e:	f023 0301 	bic.w	r3, r3, #1
 800e912:	b2da      	uxtb	r2, r3
 800e914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e916:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e91a:	e000      	b.n	800e91e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e91c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e91e:	4b08      	ldr	r3, [pc, #32]	; (800e940 <prvProcessReceivedCommands+0x1c0>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	1d39      	adds	r1, r7, #4
 800e924:	2200      	movs	r2, #0
 800e926:	4618      	mov	r0, r3
 800e928:	f7fe f9f8 	bl	800cd1c <xQueueReceive>
 800e92c:	4603      	mov	r3, r0
 800e92e:	2b00      	cmp	r3, #0
 800e930:	f47f af2a 	bne.w	800e788 <prvProcessReceivedCommands+0x8>
	}
}
 800e934:	bf00      	nop
 800e936:	bf00      	nop
 800e938:	3730      	adds	r7, #48	; 0x30
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bd80      	pop	{r7, pc}
 800e93e:	bf00      	nop
 800e940:	20005434 	.word	0x20005434

0800e944 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b088      	sub	sp, #32
 800e948:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e94a:	e048      	b.n	800e9de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e94c:	4b2d      	ldr	r3, [pc, #180]	; (800ea04 <prvSwitchTimerLists+0xc0>)
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	68db      	ldr	r3, [r3, #12]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e956:	4b2b      	ldr	r3, [pc, #172]	; (800ea04 <prvSwitchTimerLists+0xc0>)
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	68db      	ldr	r3, [r3, #12]
 800e95c:	68db      	ldr	r3, [r3, #12]
 800e95e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	3304      	adds	r3, #4
 800e964:	4618      	mov	r0, r3
 800e966:	f7fd fbdb 	bl	800c120 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	6a1b      	ldr	r3, [r3, #32]
 800e96e:	68f8      	ldr	r0, [r7, #12]
 800e970:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e978:	f003 0304 	and.w	r3, r3, #4
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d02e      	beq.n	800e9de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	699b      	ldr	r3, [r3, #24]
 800e984:	693a      	ldr	r2, [r7, #16]
 800e986:	4413      	add	r3, r2
 800e988:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e98a:	68ba      	ldr	r2, [r7, #8]
 800e98c:	693b      	ldr	r3, [r7, #16]
 800e98e:	429a      	cmp	r2, r3
 800e990:	d90e      	bls.n	800e9b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	68ba      	ldr	r2, [r7, #8]
 800e996:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	68fa      	ldr	r2, [r7, #12]
 800e99c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e99e:	4b19      	ldr	r3, [pc, #100]	; (800ea04 <prvSwitchTimerLists+0xc0>)
 800e9a0:	681a      	ldr	r2, [r3, #0]
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	3304      	adds	r3, #4
 800e9a6:	4619      	mov	r1, r3
 800e9a8:	4610      	mov	r0, r2
 800e9aa:	f7fd fb80 	bl	800c0ae <vListInsert>
 800e9ae:	e016      	b.n	800e9de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	9300      	str	r3, [sp, #0]
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	693a      	ldr	r2, [r7, #16]
 800e9b8:	2100      	movs	r1, #0
 800e9ba:	68f8      	ldr	r0, [r7, #12]
 800e9bc:	f7ff fd40 	bl	800e440 <xTimerGenericCommand>
 800e9c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d10a      	bne.n	800e9de <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9cc:	f383 8811 	msr	BASEPRI, r3
 800e9d0:	f3bf 8f6f 	isb	sy
 800e9d4:	f3bf 8f4f 	dsb	sy
 800e9d8:	603b      	str	r3, [r7, #0]
}
 800e9da:	bf00      	nop
 800e9dc:	e7fe      	b.n	800e9dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e9de:	4b09      	ldr	r3, [pc, #36]	; (800ea04 <prvSwitchTimerLists+0xc0>)
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d1b1      	bne.n	800e94c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e9e8:	4b06      	ldr	r3, [pc, #24]	; (800ea04 <prvSwitchTimerLists+0xc0>)
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e9ee:	4b06      	ldr	r3, [pc, #24]	; (800ea08 <prvSwitchTimerLists+0xc4>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	4a04      	ldr	r2, [pc, #16]	; (800ea04 <prvSwitchTimerLists+0xc0>)
 800e9f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e9f6:	4a04      	ldr	r2, [pc, #16]	; (800ea08 <prvSwitchTimerLists+0xc4>)
 800e9f8:	697b      	ldr	r3, [r7, #20]
 800e9fa:	6013      	str	r3, [r2, #0]
}
 800e9fc:	bf00      	nop
 800e9fe:	3718      	adds	r7, #24
 800ea00:	46bd      	mov	sp, r7
 800ea02:	bd80      	pop	{r7, pc}
 800ea04:	2000542c 	.word	0x2000542c
 800ea08:	20005430 	.word	0x20005430

0800ea0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b082      	sub	sp, #8
 800ea10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ea12:	f7fd fcdf 	bl	800c3d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ea16:	4b15      	ldr	r3, [pc, #84]	; (800ea6c <prvCheckForValidListAndQueue+0x60>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d120      	bne.n	800ea60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ea1e:	4814      	ldr	r0, [pc, #80]	; (800ea70 <prvCheckForValidListAndQueue+0x64>)
 800ea20:	f7fd faf4 	bl	800c00c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ea24:	4813      	ldr	r0, [pc, #76]	; (800ea74 <prvCheckForValidListAndQueue+0x68>)
 800ea26:	f7fd faf1 	bl	800c00c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ea2a:	4b13      	ldr	r3, [pc, #76]	; (800ea78 <prvCheckForValidListAndQueue+0x6c>)
 800ea2c:	4a10      	ldr	r2, [pc, #64]	; (800ea70 <prvCheckForValidListAndQueue+0x64>)
 800ea2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ea30:	4b12      	ldr	r3, [pc, #72]	; (800ea7c <prvCheckForValidListAndQueue+0x70>)
 800ea32:	4a10      	ldr	r2, [pc, #64]	; (800ea74 <prvCheckForValidListAndQueue+0x68>)
 800ea34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ea36:	2300      	movs	r3, #0
 800ea38:	9300      	str	r3, [sp, #0]
 800ea3a:	4b11      	ldr	r3, [pc, #68]	; (800ea80 <prvCheckForValidListAndQueue+0x74>)
 800ea3c:	4a11      	ldr	r2, [pc, #68]	; (800ea84 <prvCheckForValidListAndQueue+0x78>)
 800ea3e:	2110      	movs	r1, #16
 800ea40:	200a      	movs	r0, #10
 800ea42:	f7fd ff35 	bl	800c8b0 <xQueueGenericCreateStatic>
 800ea46:	4603      	mov	r3, r0
 800ea48:	4a08      	ldr	r2, [pc, #32]	; (800ea6c <prvCheckForValidListAndQueue+0x60>)
 800ea4a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ea4c:	4b07      	ldr	r3, [pc, #28]	; (800ea6c <prvCheckForValidListAndQueue+0x60>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d005      	beq.n	800ea60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ea54:	4b05      	ldr	r3, [pc, #20]	; (800ea6c <prvCheckForValidListAndQueue+0x60>)
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	490b      	ldr	r1, [pc, #44]	; (800ea88 <prvCheckForValidListAndQueue+0x7c>)
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f7fe fb4e 	bl	800d0fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ea60:	f7fd fce8 	bl	800c434 <vPortExitCritical>
}
 800ea64:	bf00      	nop
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}
 800ea6a:	bf00      	nop
 800ea6c:	20005434 	.word	0x20005434
 800ea70:	20005404 	.word	0x20005404
 800ea74:	20005418 	.word	0x20005418
 800ea78:	2000542c 	.word	0x2000542c
 800ea7c:	20005430 	.word	0x20005430
 800ea80:	200054e0 	.word	0x200054e0
 800ea84:	20005440 	.word	0x20005440
 800ea88:	0800f380 	.word	0x0800f380

0800ea8c <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b086      	sub	sp, #24
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d10a      	bne.n	800eab4 <xTimerIsTimerActive+0x28>
	__asm volatile
 800ea9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaa2:	f383 8811 	msr	BASEPRI, r3
 800eaa6:	f3bf 8f6f 	isb	sy
 800eaaa:	f3bf 8f4f 	dsb	sy
 800eaae:	60fb      	str	r3, [r7, #12]
}
 800eab0:	bf00      	nop
 800eab2:	e7fe      	b.n	800eab2 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800eab4:	f7fd fc8e 	bl	800c3d4 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800eab8:	693b      	ldr	r3, [r7, #16]
 800eaba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eabe:	f003 0301 	and.w	r3, r3, #1
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d102      	bne.n	800eacc <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800eac6:	2300      	movs	r3, #0
 800eac8:	617b      	str	r3, [r7, #20]
 800eaca:	e001      	b.n	800ead0 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800eacc:	2301      	movs	r3, #1
 800eace:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800ead0:	f7fd fcb0 	bl	800c434 <vPortExitCritical>

	return xReturn;
 800ead4:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800ead6:	4618      	mov	r0, r3
 800ead8:	3718      	adds	r7, #24
 800eada:	46bd      	mov	sp, r7
 800eadc:	bd80      	pop	{r7, pc}

0800eade <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800eade:	b580      	push	{r7, lr}
 800eae0:	b086      	sub	sp, #24
 800eae2:	af00      	add	r7, sp, #0
 800eae4:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d10a      	bne.n	800eb06 <pvTimerGetTimerID+0x28>
	__asm volatile
 800eaf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaf4:	f383 8811 	msr	BASEPRI, r3
 800eaf8:	f3bf 8f6f 	isb	sy
 800eafc:	f3bf 8f4f 	dsb	sy
 800eb00:	60fb      	str	r3, [r7, #12]
}
 800eb02:	bf00      	nop
 800eb04:	e7fe      	b.n	800eb04 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800eb06:	f7fd fc65 	bl	800c3d4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800eb0a:	697b      	ldr	r3, [r7, #20]
 800eb0c:	69db      	ldr	r3, [r3, #28]
 800eb0e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800eb10:	f7fd fc90 	bl	800c434 <vPortExitCritical>

	return pvReturn;
 800eb14:	693b      	ldr	r3, [r7, #16]
}
 800eb16:	4618      	mov	r0, r3
 800eb18:	3718      	adds	r7, #24
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}
	...

0800eb20 <__libc_init_array>:
 800eb20:	b570      	push	{r4, r5, r6, lr}
 800eb22:	4d0d      	ldr	r5, [pc, #52]	; (800eb58 <__libc_init_array+0x38>)
 800eb24:	4c0d      	ldr	r4, [pc, #52]	; (800eb5c <__libc_init_array+0x3c>)
 800eb26:	1b64      	subs	r4, r4, r5
 800eb28:	10a4      	asrs	r4, r4, #2
 800eb2a:	2600      	movs	r6, #0
 800eb2c:	42a6      	cmp	r6, r4
 800eb2e:	d109      	bne.n	800eb44 <__libc_init_array+0x24>
 800eb30:	4d0b      	ldr	r5, [pc, #44]	; (800eb60 <__libc_init_array+0x40>)
 800eb32:	4c0c      	ldr	r4, [pc, #48]	; (800eb64 <__libc_init_array+0x44>)
 800eb34:	f000 f8f0 	bl	800ed18 <_init>
 800eb38:	1b64      	subs	r4, r4, r5
 800eb3a:	10a4      	asrs	r4, r4, #2
 800eb3c:	2600      	movs	r6, #0
 800eb3e:	42a6      	cmp	r6, r4
 800eb40:	d105      	bne.n	800eb4e <__libc_init_array+0x2e>
 800eb42:	bd70      	pop	{r4, r5, r6, pc}
 800eb44:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb48:	4798      	blx	r3
 800eb4a:	3601      	adds	r6, #1
 800eb4c:	e7ee      	b.n	800eb2c <__libc_init_array+0xc>
 800eb4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb52:	4798      	blx	r3
 800eb54:	3601      	adds	r6, #1
 800eb56:	e7f2      	b.n	800eb3e <__libc_init_array+0x1e>
 800eb58:	0800f4b8 	.word	0x0800f4b8
 800eb5c:	0800f4b8 	.word	0x0800f4b8
 800eb60:	0800f4b8 	.word	0x0800f4b8
 800eb64:	0800f4bc 	.word	0x0800f4bc

0800eb68 <memcpy>:
 800eb68:	440a      	add	r2, r1
 800eb6a:	4291      	cmp	r1, r2
 800eb6c:	f100 33ff 	add.w	r3, r0, #4294967295
 800eb70:	d100      	bne.n	800eb74 <memcpy+0xc>
 800eb72:	4770      	bx	lr
 800eb74:	b510      	push	{r4, lr}
 800eb76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb7e:	4291      	cmp	r1, r2
 800eb80:	d1f9      	bne.n	800eb76 <memcpy+0xe>
 800eb82:	bd10      	pop	{r4, pc}

0800eb84 <memset>:
 800eb84:	4402      	add	r2, r0
 800eb86:	4603      	mov	r3, r0
 800eb88:	4293      	cmp	r3, r2
 800eb8a:	d100      	bne.n	800eb8e <memset+0xa>
 800eb8c:	4770      	bx	lr
 800eb8e:	f803 1b01 	strb.w	r1, [r3], #1
 800eb92:	e7f9      	b.n	800eb88 <memset+0x4>

0800eb94 <_free_r>:
 800eb94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb96:	2900      	cmp	r1, #0
 800eb98:	d044      	beq.n	800ec24 <_free_r+0x90>
 800eb9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb9e:	9001      	str	r0, [sp, #4]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	f1a1 0404 	sub.w	r4, r1, #4
 800eba6:	bfb8      	it	lt
 800eba8:	18e4      	addlt	r4, r4, r3
 800ebaa:	f000 f8a9 	bl	800ed00 <__malloc_lock>
 800ebae:	4a1e      	ldr	r2, [pc, #120]	; (800ec28 <_free_r+0x94>)
 800ebb0:	9801      	ldr	r0, [sp, #4]
 800ebb2:	6813      	ldr	r3, [r2, #0]
 800ebb4:	b933      	cbnz	r3, 800ebc4 <_free_r+0x30>
 800ebb6:	6063      	str	r3, [r4, #4]
 800ebb8:	6014      	str	r4, [r2, #0]
 800ebba:	b003      	add	sp, #12
 800ebbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ebc0:	f000 b8a4 	b.w	800ed0c <__malloc_unlock>
 800ebc4:	42a3      	cmp	r3, r4
 800ebc6:	d908      	bls.n	800ebda <_free_r+0x46>
 800ebc8:	6825      	ldr	r5, [r4, #0]
 800ebca:	1961      	adds	r1, r4, r5
 800ebcc:	428b      	cmp	r3, r1
 800ebce:	bf01      	itttt	eq
 800ebd0:	6819      	ldreq	r1, [r3, #0]
 800ebd2:	685b      	ldreq	r3, [r3, #4]
 800ebd4:	1949      	addeq	r1, r1, r5
 800ebd6:	6021      	streq	r1, [r4, #0]
 800ebd8:	e7ed      	b.n	800ebb6 <_free_r+0x22>
 800ebda:	461a      	mov	r2, r3
 800ebdc:	685b      	ldr	r3, [r3, #4]
 800ebde:	b10b      	cbz	r3, 800ebe4 <_free_r+0x50>
 800ebe0:	42a3      	cmp	r3, r4
 800ebe2:	d9fa      	bls.n	800ebda <_free_r+0x46>
 800ebe4:	6811      	ldr	r1, [r2, #0]
 800ebe6:	1855      	adds	r5, r2, r1
 800ebe8:	42a5      	cmp	r5, r4
 800ebea:	d10b      	bne.n	800ec04 <_free_r+0x70>
 800ebec:	6824      	ldr	r4, [r4, #0]
 800ebee:	4421      	add	r1, r4
 800ebf0:	1854      	adds	r4, r2, r1
 800ebf2:	42a3      	cmp	r3, r4
 800ebf4:	6011      	str	r1, [r2, #0]
 800ebf6:	d1e0      	bne.n	800ebba <_free_r+0x26>
 800ebf8:	681c      	ldr	r4, [r3, #0]
 800ebfa:	685b      	ldr	r3, [r3, #4]
 800ebfc:	6053      	str	r3, [r2, #4]
 800ebfe:	4421      	add	r1, r4
 800ec00:	6011      	str	r1, [r2, #0]
 800ec02:	e7da      	b.n	800ebba <_free_r+0x26>
 800ec04:	d902      	bls.n	800ec0c <_free_r+0x78>
 800ec06:	230c      	movs	r3, #12
 800ec08:	6003      	str	r3, [r0, #0]
 800ec0a:	e7d6      	b.n	800ebba <_free_r+0x26>
 800ec0c:	6825      	ldr	r5, [r4, #0]
 800ec0e:	1961      	adds	r1, r4, r5
 800ec10:	428b      	cmp	r3, r1
 800ec12:	bf04      	itt	eq
 800ec14:	6819      	ldreq	r1, [r3, #0]
 800ec16:	685b      	ldreq	r3, [r3, #4]
 800ec18:	6063      	str	r3, [r4, #4]
 800ec1a:	bf04      	itt	eq
 800ec1c:	1949      	addeq	r1, r1, r5
 800ec1e:	6021      	streq	r1, [r4, #0]
 800ec20:	6054      	str	r4, [r2, #4]
 800ec22:	e7ca      	b.n	800ebba <_free_r+0x26>
 800ec24:	b003      	add	sp, #12
 800ec26:	bd30      	pop	{r4, r5, pc}
 800ec28:	20005530 	.word	0x20005530

0800ec2c <cleanup_glue>:
 800ec2c:	b538      	push	{r3, r4, r5, lr}
 800ec2e:	460c      	mov	r4, r1
 800ec30:	6809      	ldr	r1, [r1, #0]
 800ec32:	4605      	mov	r5, r0
 800ec34:	b109      	cbz	r1, 800ec3a <cleanup_glue+0xe>
 800ec36:	f7ff fff9 	bl	800ec2c <cleanup_glue>
 800ec3a:	4621      	mov	r1, r4
 800ec3c:	4628      	mov	r0, r5
 800ec3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec42:	f7ff bfa7 	b.w	800eb94 <_free_r>
	...

0800ec48 <_reclaim_reent>:
 800ec48:	4b2c      	ldr	r3, [pc, #176]	; (800ecfc <_reclaim_reent+0xb4>)
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	4283      	cmp	r3, r0
 800ec4e:	b570      	push	{r4, r5, r6, lr}
 800ec50:	4604      	mov	r4, r0
 800ec52:	d051      	beq.n	800ecf8 <_reclaim_reent+0xb0>
 800ec54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ec56:	b143      	cbz	r3, 800ec6a <_reclaim_reent+0x22>
 800ec58:	68db      	ldr	r3, [r3, #12]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d14a      	bne.n	800ecf4 <_reclaim_reent+0xac>
 800ec5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec60:	6819      	ldr	r1, [r3, #0]
 800ec62:	b111      	cbz	r1, 800ec6a <_reclaim_reent+0x22>
 800ec64:	4620      	mov	r0, r4
 800ec66:	f7ff ff95 	bl	800eb94 <_free_r>
 800ec6a:	6961      	ldr	r1, [r4, #20]
 800ec6c:	b111      	cbz	r1, 800ec74 <_reclaim_reent+0x2c>
 800ec6e:	4620      	mov	r0, r4
 800ec70:	f7ff ff90 	bl	800eb94 <_free_r>
 800ec74:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ec76:	b111      	cbz	r1, 800ec7e <_reclaim_reent+0x36>
 800ec78:	4620      	mov	r0, r4
 800ec7a:	f7ff ff8b 	bl	800eb94 <_free_r>
 800ec7e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ec80:	b111      	cbz	r1, 800ec88 <_reclaim_reent+0x40>
 800ec82:	4620      	mov	r0, r4
 800ec84:	f7ff ff86 	bl	800eb94 <_free_r>
 800ec88:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ec8a:	b111      	cbz	r1, 800ec92 <_reclaim_reent+0x4a>
 800ec8c:	4620      	mov	r0, r4
 800ec8e:	f7ff ff81 	bl	800eb94 <_free_r>
 800ec92:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ec94:	b111      	cbz	r1, 800ec9c <_reclaim_reent+0x54>
 800ec96:	4620      	mov	r0, r4
 800ec98:	f7ff ff7c 	bl	800eb94 <_free_r>
 800ec9c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ec9e:	b111      	cbz	r1, 800eca6 <_reclaim_reent+0x5e>
 800eca0:	4620      	mov	r0, r4
 800eca2:	f7ff ff77 	bl	800eb94 <_free_r>
 800eca6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800eca8:	b111      	cbz	r1, 800ecb0 <_reclaim_reent+0x68>
 800ecaa:	4620      	mov	r0, r4
 800ecac:	f7ff ff72 	bl	800eb94 <_free_r>
 800ecb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ecb2:	b111      	cbz	r1, 800ecba <_reclaim_reent+0x72>
 800ecb4:	4620      	mov	r0, r4
 800ecb6:	f7ff ff6d 	bl	800eb94 <_free_r>
 800ecba:	69a3      	ldr	r3, [r4, #24]
 800ecbc:	b1e3      	cbz	r3, 800ecf8 <_reclaim_reent+0xb0>
 800ecbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ecc0:	4620      	mov	r0, r4
 800ecc2:	4798      	blx	r3
 800ecc4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ecc6:	b1b9      	cbz	r1, 800ecf8 <_reclaim_reent+0xb0>
 800ecc8:	4620      	mov	r0, r4
 800ecca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ecce:	f7ff bfad 	b.w	800ec2c <cleanup_glue>
 800ecd2:	5949      	ldr	r1, [r1, r5]
 800ecd4:	b941      	cbnz	r1, 800ece8 <_reclaim_reent+0xa0>
 800ecd6:	3504      	adds	r5, #4
 800ecd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ecda:	2d80      	cmp	r5, #128	; 0x80
 800ecdc:	68d9      	ldr	r1, [r3, #12]
 800ecde:	d1f8      	bne.n	800ecd2 <_reclaim_reent+0x8a>
 800ece0:	4620      	mov	r0, r4
 800ece2:	f7ff ff57 	bl	800eb94 <_free_r>
 800ece6:	e7ba      	b.n	800ec5e <_reclaim_reent+0x16>
 800ece8:	680e      	ldr	r6, [r1, #0]
 800ecea:	4620      	mov	r0, r4
 800ecec:	f7ff ff52 	bl	800eb94 <_free_r>
 800ecf0:	4631      	mov	r1, r6
 800ecf2:	e7ef      	b.n	800ecd4 <_reclaim_reent+0x8c>
 800ecf4:	2500      	movs	r5, #0
 800ecf6:	e7ef      	b.n	800ecd8 <_reclaim_reent+0x90>
 800ecf8:	bd70      	pop	{r4, r5, r6, pc}
 800ecfa:	bf00      	nop
 800ecfc:	20000010 	.word	0x20000010

0800ed00 <__malloc_lock>:
 800ed00:	4801      	ldr	r0, [pc, #4]	; (800ed08 <__malloc_lock+0x8>)
 800ed02:	f7f5 b854 	b.w	8003dae <__retarget_lock_acquire_recursive>
 800ed06:	bf00      	nop
 800ed08:	200008d8 	.word	0x200008d8

0800ed0c <__malloc_unlock>:
 800ed0c:	4801      	ldr	r0, [pc, #4]	; (800ed14 <__malloc_unlock+0x8>)
 800ed0e:	f7f5 b862 	b.w	8003dd6 <__retarget_lock_release_recursive>
 800ed12:	bf00      	nop
 800ed14:	200008d8 	.word	0x200008d8

0800ed18 <_init>:
 800ed18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed1a:	bf00      	nop
 800ed1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed1e:	bc08      	pop	{r3}
 800ed20:	469e      	mov	lr, r3
 800ed22:	4770      	bx	lr

0800ed24 <_fini>:
 800ed24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed26:	bf00      	nop
 800ed28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed2a:	bc08      	pop	{r3}
 800ed2c:	469e      	mov	lr, r3
 800ed2e:	4770      	bx	lr
