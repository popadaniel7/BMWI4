
I4_BCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004150  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080042e8  080042e8  000142e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004300  08004300  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004300  08004300  00014300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004308  08004308  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004308  08004308  00014308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800430c  0800430c  0001430c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004310  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000000c  0800431c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  0800431c  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c17  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027f9  00000000  00000000  00030c53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00033450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c90  00000000  00000000  000341f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017cf9  00000000  00000000  00034e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013aab  00000000  00000000  0004cb81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e8b0  00000000  00000000  0006062c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eeedc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003708  00000000  00000000  000eef2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080042d0 	.word	0x080042d0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080042d0 	.word	0x080042d0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <CenLoc_MainFunction>:
uint8_t BTCenLoc;
uint8_t BTCenLoc_IrqFlag;
uint8_t CenLoc_PrevState;

void CenLoc_MainFunction()
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
	uint16_t TimeStampAlarm = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	80fb      	strh	r3, [r7, #6]
	uint16_t TimeStampExtLights = 0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	80bb      	strh	r3, [r7, #4]
	uint16_t TimeStampAlarmLed = 0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	807b      	strh	r3, [r7, #2]

	if(CenLoc_PrevState != BTCenLoc)
 80004ee:	4b84      	ldr	r3, [pc, #528]	; (8000700 <CenLoc_MainFunction+0x224>)
 80004f0:	781a      	ldrb	r2, [r3, #0]
 80004f2:	4b84      	ldr	r3, [pc, #528]	; (8000704 <CenLoc_MainFunction+0x228>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	429a      	cmp	r2, r3
 80004f8:	d005      	beq.n	8000506 <CenLoc_MainFunction+0x2a>
	{
		AlarmCount1 = 0;
 80004fa:	4b83      	ldr	r3, [pc, #524]	; (8000708 <CenLoc_MainFunction+0x22c>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	701a      	strb	r2, [r3, #0]
		AlarmCount2 = 0;
 8000500:	4b82      	ldr	r3, [pc, #520]	; (800070c <CenLoc_MainFunction+0x230>)
 8000502:	2200      	movs	r2, #0
 8000504:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	CenLoc_PrevState = BTCenLoc;
 8000506:	4b7f      	ldr	r3, [pc, #508]	; (8000704 <CenLoc_MainFunction+0x228>)
 8000508:	781a      	ldrb	r2, [r3, #0]
 800050a:	4b7d      	ldr	r3, [pc, #500]	; (8000700 <CenLoc_MainFunction+0x224>)
 800050c:	701a      	strb	r2, [r3, #0]

	if(BTCenLoc == STD_HIGH)
 800050e:	4b7d      	ldr	r3, [pc, #500]	; (8000704 <CenLoc_MainFunction+0x228>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b01      	cmp	r3, #1
 8000514:	f040 8170 	bne.w	80007f8 <CenLoc_MainFunction+0x31c>
	{
		TimeStampAlarm = __HAL_TIM_GET_COUNTER(&htim11);
 8000518:	4b7d      	ldr	r3, [pc, #500]	; (8000710 <CenLoc_MainFunction+0x234>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800051e:	80fb      	strh	r3, [r7, #6]
		TimeStampExtLights = __HAL_TIM_GET_COUNTER(&htim11);
 8000520:	4b7b      	ldr	r3, [pc, #492]	; (8000710 <CenLoc_MainFunction+0x234>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000526:	80bb      	strh	r3, [r7, #4]
		CurrentState_CenLoc = STD_HIGH;
 8000528:	4b7a      	ldr	r3, [pc, #488]	; (8000714 <CenLoc_MainFunction+0x238>)
 800052a:	2201      	movs	r2, #1
 800052c:	701a      	strb	r2, [r3, #0]

		CenLoc_Toggle_Door_LED(CurrentState_CenLoc);
 800052e:	4b79      	ldr	r3, [pc, #484]	; (8000714 <CenLoc_MainFunction+0x238>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	4618      	mov	r0, r3
 8000534:	f000 fae8 	bl	8000b08 <CenLoc_Toggle_Door_LED>
		SecAlm_ToggleAlarmLed(!CurrentState_CenLoc);
 8000538:	4b76      	ldr	r3, [pc, #472]	; (8000714 <CenLoc_MainFunction+0x238>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2b00      	cmp	r3, #0
 800053e:	bf0c      	ite	eq
 8000540:	2301      	moveq	r3, #1
 8000542:	2300      	movne	r3, #0
 8000544:	b2db      	uxtb	r3, r3
 8000546:	4618      	mov	r0, r3
 8000548:	f001 f8ba 	bl	80016c0 <SecAlm_ToggleAlarmLed>
		IntLights_Toggle_IntLights(CurrentState_CenLoc);
 800054c:	4b71      	ldr	r3, [pc, #452]	; (8000714 <CenLoc_MainFunction+0x238>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	4618      	mov	r0, r3
 8000552:	f000 fee5 	bl	8001320 <IntLights_Toggle_IntLights>

		if(AlarmCount1 < 5)
 8000556:	4b6c      	ldr	r3, [pc, #432]	; (8000708 <CenLoc_MainFunction+0x22c>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	2b04      	cmp	r3, #4
 800055c:	d878      	bhi.n	8000650 <CenLoc_MainFunction+0x174>
		{
			if(__HAL_TIM_GET_COUNTER(&htim11) - TimeStampAlarm < 5000)
 800055e:	4b6c      	ldr	r3, [pc, #432]	; (8000710 <CenLoc_MainFunction+0x234>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000564:	88fb      	ldrh	r3, [r7, #6]
 8000566:	1ad3      	subs	r3, r2, r3
 8000568:	f241 3287 	movw	r2, #4999	; 0x1387
 800056c:	4293      	cmp	r3, r2
 800056e:	d809      	bhi.n	8000584 <CenLoc_MainFunction+0xa8>
			{
				SecAlm_ToggleAlarmBuzzer(STD_HIGH);
 8000570:	2001      	movs	r0, #1
 8000572:	f001 f893 	bl	800169c <SecAlm_ToggleAlarmBuzzer>
				AlarmCount1 = AlarmCount1 + 1;
 8000576:	4b64      	ldr	r3, [pc, #400]	; (8000708 <CenLoc_MainFunction+0x22c>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	3301      	adds	r3, #1
 800057c:	b2da      	uxtb	r2, r3
 800057e:	4b62      	ldr	r3, [pc, #392]	; (8000708 <CenLoc_MainFunction+0x22c>)
 8000580:	701a      	strb	r2, [r3, #0]
 8000582:	e065      	b.n	8000650 <CenLoc_MainFunction+0x174>
			}
			else if((5000 < (__HAL_TIM_GET_COUNTER(&htim11) - TimeStampAlarm)) && ((__HAL_TIM_GET_COUNTER(&htim11) - TimeStampAlarm) < 10000))
 8000584:	4b62      	ldr	r3, [pc, #392]	; (8000710 <CenLoc_MainFunction+0x234>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800058a:	88fb      	ldrh	r3, [r7, #6]
 800058c:	1ad3      	subs	r3, r2, r3
 800058e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000592:	4293      	cmp	r3, r2
 8000594:	d912      	bls.n	80005bc <CenLoc_MainFunction+0xe0>
 8000596:	4b5e      	ldr	r3, [pc, #376]	; (8000710 <CenLoc_MainFunction+0x234>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800059c:	88fb      	ldrh	r3, [r7, #6]
 800059e:	1ad3      	subs	r3, r2, r3
 80005a0:	f242 720f 	movw	r2, #9999	; 0x270f
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d809      	bhi.n	80005bc <CenLoc_MainFunction+0xe0>
			{
				SecAlm_ToggleAlarmBuzzer(STD_LOW);
 80005a8:	2000      	movs	r0, #0
 80005aa:	f001 f877 	bl	800169c <SecAlm_ToggleAlarmBuzzer>
				AlarmCount1 = AlarmCount1 + 1;
 80005ae:	4b56      	ldr	r3, [pc, #344]	; (8000708 <CenLoc_MainFunction+0x22c>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	3301      	adds	r3, #1
 80005b4:	b2da      	uxtb	r2, r3
 80005b6:	4b54      	ldr	r3, [pc, #336]	; (8000708 <CenLoc_MainFunction+0x22c>)
 80005b8:	701a      	strb	r2, [r3, #0]
 80005ba:	e049      	b.n	8000650 <CenLoc_MainFunction+0x174>
			}
			else if((10000 < (__HAL_TIM_GET_COUNTER(&htim11) - TimeStampAlarm)) && ((__HAL_TIM_GET_COUNTER(&htim11) - TimeStampAlarm) < 15000))
 80005bc:	4b54      	ldr	r3, [pc, #336]	; (8000710 <CenLoc_MainFunction+0x234>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005c2:	88fb      	ldrh	r3, [r7, #6]
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d912      	bls.n	80005f4 <CenLoc_MainFunction+0x118>
 80005ce:	4b50      	ldr	r3, [pc, #320]	; (8000710 <CenLoc_MainFunction+0x234>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005d4:	88fb      	ldrh	r3, [r7, #6]
 80005d6:	1ad3      	subs	r3, r2, r3
 80005d8:	f643 2297 	movw	r2, #14999	; 0x3a97
 80005dc:	4293      	cmp	r3, r2
 80005de:	d809      	bhi.n	80005f4 <CenLoc_MainFunction+0x118>
			{
				SecAlm_ToggleAlarmBuzzer(STD_HIGH);
 80005e0:	2001      	movs	r0, #1
 80005e2:	f001 f85b 	bl	800169c <SecAlm_ToggleAlarmBuzzer>
				AlarmCount1 = AlarmCount1 + 1;
 80005e6:	4b48      	ldr	r3, [pc, #288]	; (8000708 <CenLoc_MainFunction+0x22c>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	3301      	adds	r3, #1
 80005ec:	b2da      	uxtb	r2, r3
 80005ee:	4b46      	ldr	r3, [pc, #280]	; (8000708 <CenLoc_MainFunction+0x22c>)
 80005f0:	701a      	strb	r2, [r3, #0]
 80005f2:	e02d      	b.n	8000650 <CenLoc_MainFunction+0x174>
			}
			else if((15000 < (__HAL_TIM_GET_COUNTER(&htim11) - TimeStampAlarm)) && ((__HAL_TIM_GET_COUNTER(&htim11) - TimeStampAlarm) < 20000))
 80005f4:	4b46      	ldr	r3, [pc, #280]	; (8000710 <CenLoc_MainFunction+0x234>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000602:	4293      	cmp	r3, r2
 8000604:	d912      	bls.n	800062c <CenLoc_MainFunction+0x150>
 8000606:	4b42      	ldr	r3, [pc, #264]	; (8000710 <CenLoc_MainFunction+0x234>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800060c:	88fb      	ldrh	r3, [r7, #6]
 800060e:	1ad3      	subs	r3, r2, r3
 8000610:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000614:	4293      	cmp	r3, r2
 8000616:	d809      	bhi.n	800062c <CenLoc_MainFunction+0x150>
			{
				SecAlm_ToggleAlarmBuzzer(STD_LOW);
 8000618:	2000      	movs	r0, #0
 800061a:	f001 f83f 	bl	800169c <SecAlm_ToggleAlarmBuzzer>
				AlarmCount1 = AlarmCount1 + 1;
 800061e:	4b3a      	ldr	r3, [pc, #232]	; (8000708 <CenLoc_MainFunction+0x22c>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	3301      	adds	r3, #1
 8000624:	b2da      	uxtb	r2, r3
 8000626:	4b38      	ldr	r3, [pc, #224]	; (8000708 <CenLoc_MainFunction+0x22c>)
 8000628:	701a      	strb	r2, [r3, #0]
 800062a:	e011      	b.n	8000650 <CenLoc_MainFunction+0x174>
			}
			else if((__HAL_TIM_GET_COUNTER(&htim11) - TimeStampAlarm) > 20000)
 800062c:	4b38      	ldr	r3, [pc, #224]	; (8000710 <CenLoc_MainFunction+0x234>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000632:	88fb      	ldrh	r3, [r7, #6]
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	f644 6220 	movw	r2, #20000	; 0x4e20
 800063a:	4293      	cmp	r3, r2
 800063c:	d908      	bls.n	8000650 <CenLoc_MainFunction+0x174>
			{
				SecAlm_ToggleAlarmBuzzer(STD_LOW);
 800063e:	2000      	movs	r0, #0
 8000640:	f001 f82c 	bl	800169c <SecAlm_ToggleAlarmBuzzer>
				AlarmCount1 = AlarmCount1 + 1;
 8000644:	4b30      	ldr	r3, [pc, #192]	; (8000708 <CenLoc_MainFunction+0x22c>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	3301      	adds	r3, #1
 800064a:	b2da      	uxtb	r2, r3
 800064c:	4b2e      	ldr	r3, [pc, #184]	; (8000708 <CenLoc_MainFunction+0x22c>)
 800064e:	701a      	strb	r2, [r3, #0]
		else
		{
			/* do nothing */
		}

		if(AlarmCount2 < 4)
 8000650:	4b2e      	ldr	r3, [pc, #184]	; (800070c <CenLoc_MainFunction+0x230>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b03      	cmp	r3, #3
 8000656:	d87d      	bhi.n	8000754 <CenLoc_MainFunction+0x278>
		{
			if(__HAL_TIM_GET_COUNTER(&htim11) - TimeStampAlarm < 5000)
 8000658:	4b2d      	ldr	r3, [pc, #180]	; (8000710 <CenLoc_MainFunction+0x234>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800065e:	88fb      	ldrh	r3, [r7, #6]
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	f241 3287 	movw	r2, #4999	; 0x1387
 8000666:	4293      	cmp	r3, r2
 8000668:	d80c      	bhi.n	8000684 <CenLoc_MainFunction+0x1a8>
			{
				ExtLights_TurnSignalLeft(STD_HIGH);
 800066a:	2001      	movs	r0, #1
 800066c:	f000 fdd0 	bl	8001210 <ExtLights_TurnSignalLeft>
				ExtLights_TurnSignalRight(STD_HIGH);
 8000670:	2001      	movs	r0, #1
 8000672:	f000 fddf 	bl	8001234 <ExtLights_TurnSignalRight>
				AlarmCount2 = AlarmCount2 + 1;
 8000676:	4b25      	ldr	r3, [pc, #148]	; (800070c <CenLoc_MainFunction+0x230>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	3301      	adds	r3, #1
 800067c:	b2da      	uxtb	r2, r3
 800067e:	4b23      	ldr	r3, [pc, #140]	; (800070c <CenLoc_MainFunction+0x230>)
 8000680:	701a      	strb	r2, [r3, #0]
 8000682:	e067      	b.n	8000754 <CenLoc_MainFunction+0x278>
			}
			else if((5000 < (__HAL_TIM_GET_COUNTER(&htim11) - TimeStampAlarm)) && ((__HAL_TIM_GET_COUNTER(&htim11) - TimeStampAlarm) < 10000))
 8000684:	4b22      	ldr	r3, [pc, #136]	; (8000710 <CenLoc_MainFunction+0x234>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800068a:	88fb      	ldrh	r3, [r7, #6]
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000692:	4293      	cmp	r3, r2
 8000694:	d915      	bls.n	80006c2 <CenLoc_MainFunction+0x1e6>
 8000696:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <CenLoc_MainFunction+0x234>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800069c:	88fb      	ldrh	r3, [r7, #6]
 800069e:	1ad3      	subs	r3, r2, r3
 80006a0:	f242 720f 	movw	r2, #9999	; 0x270f
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d80c      	bhi.n	80006c2 <CenLoc_MainFunction+0x1e6>
			{
				ExtLights_TurnSignalLeft(STD_LOW);
 80006a8:	2000      	movs	r0, #0
 80006aa:	f000 fdb1 	bl	8001210 <ExtLights_TurnSignalLeft>
				ExtLights_TurnSignalRight(STD_LOW);
 80006ae:	2000      	movs	r0, #0
 80006b0:	f000 fdc0 	bl	8001234 <ExtLights_TurnSignalRight>
				AlarmCount2 = AlarmCount2 + 1;
 80006b4:	4b15      	ldr	r3, [pc, #84]	; (800070c <CenLoc_MainFunction+0x230>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	3301      	adds	r3, #1
 80006ba:	b2da      	uxtb	r2, r3
 80006bc:	4b13      	ldr	r3, [pc, #76]	; (800070c <CenLoc_MainFunction+0x230>)
 80006be:	701a      	strb	r2, [r3, #0]
 80006c0:	e048      	b.n	8000754 <CenLoc_MainFunction+0x278>
			}
			else if((10000 < (__HAL_TIM_GET_COUNTER(&htim11) - TimeStampAlarm)) && ((__HAL_TIM_GET_COUNTER(&htim11) - TimeStampAlarm) < 15000))
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <CenLoc_MainFunction+0x234>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006c8:	88fb      	ldrh	r3, [r7, #6]
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	f242 7210 	movw	r2, #10000	; 0x2710
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d921      	bls.n	8000718 <CenLoc_MainFunction+0x23c>
 80006d4:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <CenLoc_MainFunction+0x234>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006da:	88fb      	ldrh	r3, [r7, #6]
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	f643 2297 	movw	r2, #14999	; 0x3a97
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d818      	bhi.n	8000718 <CenLoc_MainFunction+0x23c>
			{
				ExtLights_TurnSignalLeft(STD_HIGH);
 80006e6:	2001      	movs	r0, #1
 80006e8:	f000 fd92 	bl	8001210 <ExtLights_TurnSignalLeft>
				ExtLights_TurnSignalRight(STD_HIGH);
 80006ec:	2001      	movs	r0, #1
 80006ee:	f000 fda1 	bl	8001234 <ExtLights_TurnSignalRight>
				AlarmCount2 = AlarmCount2 + 1;
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <CenLoc_MainFunction+0x230>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	3301      	adds	r3, #1
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4b04      	ldr	r3, [pc, #16]	; (800070c <CenLoc_MainFunction+0x230>)
 80006fc:	701a      	strb	r2, [r3, #0]
 80006fe:	e029      	b.n	8000754 <CenLoc_MainFunction+0x278>
 8000700:	2000002b 	.word	0x2000002b
 8000704:	2000002a 	.word	0x2000002a
 8000708:	20000048 	.word	0x20000048
 800070c:	20000049 	.word	0x20000049
 8000710:	20000094 	.word	0x20000094
 8000714:	20000029 	.word	0x20000029
			}
			else if((15000 < (__HAL_TIM_GET_COUNTER(&htim11) - TimeStampAlarm)) && ((__HAL_TIM_GET_COUNTER(&htim11) - TimeStampAlarm) < 20000))
 8000718:	4b8e      	ldr	r3, [pc, #568]	; (8000954 <CenLoc_MainFunction+0x478>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000726:	4293      	cmp	r3, r2
 8000728:	d914      	bls.n	8000754 <CenLoc_MainFunction+0x278>
 800072a:	4b8a      	ldr	r3, [pc, #552]	; (8000954 <CenLoc_MainFunction+0x478>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000730:	88fb      	ldrh	r3, [r7, #6]
 8000732:	1ad3      	subs	r3, r2, r3
 8000734:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000738:	4293      	cmp	r3, r2
 800073a:	d80b      	bhi.n	8000754 <CenLoc_MainFunction+0x278>
			{
				ExtLights_TurnSignalLeft(STD_LOW);
 800073c:	2000      	movs	r0, #0
 800073e:	f000 fd67 	bl	8001210 <ExtLights_TurnSignalLeft>
				ExtLights_TurnSignalRight(STD_LOW);
 8000742:	2000      	movs	r0, #0
 8000744:	f000 fd76 	bl	8001234 <ExtLights_TurnSignalRight>
				AlarmCount2 = AlarmCount2 + 1;
 8000748:	4b83      	ldr	r3, [pc, #524]	; (8000958 <CenLoc_MainFunction+0x47c>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	3301      	adds	r3, #1
 800074e:	b2da      	uxtb	r2, r3
 8000750:	4b81      	ldr	r3, [pc, #516]	; (8000958 <CenLoc_MainFunction+0x47c>)
 8000752:	701a      	strb	r2, [r3, #0]
		else
		{
			/* do nothing */
		}

		if((__HAL_TIM_GET_COUNTER(&htim11) - TimeStampExtLights) < 100000 && BTLowBeam == 0 && BTFogLightFront == 0 && BTPositionLightRear == 0)
 8000754:	4b7f      	ldr	r3, [pc, #508]	; (8000954 <CenLoc_MainFunction+0x478>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800075a:	88bb      	ldrh	r3, [r7, #4]
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	4a7f      	ldr	r2, [pc, #508]	; (800095c <CenLoc_MainFunction+0x480>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d81e      	bhi.n	80007a2 <CenLoc_MainFunction+0x2c6>
 8000764:	4b7e      	ldr	r3, [pc, #504]	; (8000960 <CenLoc_MainFunction+0x484>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d11a      	bne.n	80007a2 <CenLoc_MainFunction+0x2c6>
 800076c:	4b7d      	ldr	r3, [pc, #500]	; (8000964 <CenLoc_MainFunction+0x488>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d116      	bne.n	80007a2 <CenLoc_MainFunction+0x2c6>
 8000774:	4b7c      	ldr	r3, [pc, #496]	; (8000968 <CenLoc_MainFunction+0x48c>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d112      	bne.n	80007a2 <CenLoc_MainFunction+0x2c6>
		{
			ExtLights_LowBeam(STD_HIGH);
 800077c:	2001      	movs	r0, #1
 800077e:	f000 fcff 	bl	8001180 <ExtLights_LowBeam>
			ExtLights_FogLightFront(STD_HIGH);
 8000782:	2001      	movs	r0, #1
 8000784:	f000 fd20 	bl	80011c8 <ExtLights_FogLightFront>
			ExtLights_PositionLightRear(STD_HIGH);
 8000788:	2001      	movs	r0, #1
 800078a:	f000 fd65 	bl	8001258 <ExtLights_PositionLightRear>
			BTLowBeam = STD_HIGH;
 800078e:	4b74      	ldr	r3, [pc, #464]	; (8000960 <CenLoc_MainFunction+0x484>)
 8000790:	2201      	movs	r2, #1
 8000792:	701a      	strb	r2, [r3, #0]
			BTFogLightFront = STD_HIGH;
 8000794:	4b73      	ldr	r3, [pc, #460]	; (8000964 <CenLoc_MainFunction+0x488>)
 8000796:	2201      	movs	r2, #1
 8000798:	701a      	strb	r2, [r3, #0]
			BTPositionLightRear = STD_HIGH;
 800079a:	4b73      	ldr	r3, [pc, #460]	; (8000968 <CenLoc_MainFunction+0x48c>)
 800079c:	2201      	movs	r2, #1
 800079e:	701a      	strb	r2, [r3, #0]
 80007a0:	e186      	b.n	8000ab0 <CenLoc_MainFunction+0x5d4>
		}
		else if((__HAL_TIM_GET_COUNTER(&htim11) - TimeStampExtLights) > 100000 && BTLowBeam == 1 && BTFogLightFront == 1 && BTPositionLightRear == 1)
 80007a2:	4b6c      	ldr	r3, [pc, #432]	; (8000954 <CenLoc_MainFunction+0x478>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007a8:	88bb      	ldrh	r3, [r7, #4]
 80007aa:	1ad3      	subs	r3, r2, r3
 80007ac:	4a6f      	ldr	r2, [pc, #444]	; (800096c <CenLoc_MainFunction+0x490>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	f240 817e 	bls.w	8000ab0 <CenLoc_MainFunction+0x5d4>
 80007b4:	4b6a      	ldr	r3, [pc, #424]	; (8000960 <CenLoc_MainFunction+0x484>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	f040 8179 	bne.w	8000ab0 <CenLoc_MainFunction+0x5d4>
 80007be:	4b69      	ldr	r3, [pc, #420]	; (8000964 <CenLoc_MainFunction+0x488>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	f040 8174 	bne.w	8000ab0 <CenLoc_MainFunction+0x5d4>
 80007c8:	4b67      	ldr	r3, [pc, #412]	; (8000968 <CenLoc_MainFunction+0x48c>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	f040 816f 	bne.w	8000ab0 <CenLoc_MainFunction+0x5d4>
		{
			ExtLights_LowBeam(STD_LOW);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f000 fcd4 	bl	8001180 <ExtLights_LowBeam>
			ExtLights_FogLightFront(STD_LOW);
 80007d8:	2000      	movs	r0, #0
 80007da:	f000 fcf5 	bl	80011c8 <ExtLights_FogLightFront>
			ExtLights_PositionLightRear(STD_LOW);
 80007de:	2000      	movs	r0, #0
 80007e0:	f000 fd3a 	bl	8001258 <ExtLights_PositionLightRear>
			BTLowBeam = STD_LOW;
 80007e4:	4b5e      	ldr	r3, [pc, #376]	; (8000960 <CenLoc_MainFunction+0x484>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	701a      	strb	r2, [r3, #0]
			BTFogLightFront = STD_LOW;
 80007ea:	4b5e      	ldr	r3, [pc, #376]	; (8000964 <CenLoc_MainFunction+0x488>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	701a      	strb	r2, [r3, #0]
			BTPositionLightRear = STD_LOW;
 80007f0:	4b5d      	ldr	r3, [pc, #372]	; (8000968 <CenLoc_MainFunction+0x48c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 80007f6:	e15b      	b.n	8000ab0 <CenLoc_MainFunction+0x5d4>
	else if(BTCenLoc == STD_LOW)
 80007f8:	4b5d      	ldr	r3, [pc, #372]	; (8000970 <CenLoc_MainFunction+0x494>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	f040 8157 	bne.w	8000ab0 <CenLoc_MainFunction+0x5d4>
		TimeStampAlarm = __HAL_TIM_GET_COUNTER(&htim11);
 8000802:	4b54      	ldr	r3, [pc, #336]	; (8000954 <CenLoc_MainFunction+0x478>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000808:	80fb      	strh	r3, [r7, #6]
		TimeStampExtLights = __HAL_TIM_GET_COUNTER(&htim11);
 800080a:	4b52      	ldr	r3, [pc, #328]	; (8000954 <CenLoc_MainFunction+0x478>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000810:	80bb      	strh	r3, [r7, #4]
		CurrentState_CenLoc = STD_LOW;
 8000812:	4b58      	ldr	r3, [pc, #352]	; (8000974 <CenLoc_MainFunction+0x498>)
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]
		CenLoc_Toggle_Door_LED(CurrentState_CenLoc);
 8000818:	4b56      	ldr	r3, [pc, #344]	; (8000974 <CenLoc_MainFunction+0x498>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	4618      	mov	r0, r3
 800081e:	f000 f973 	bl	8000b08 <CenLoc_Toggle_Door_LED>
		IntLights_Toggle_IntLights(CurrentState_CenLoc);
 8000822:	4b54      	ldr	r3, [pc, #336]	; (8000974 <CenLoc_MainFunction+0x498>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	4618      	mov	r0, r3
 8000828:	f000 fd7a 	bl	8001320 <IntLights_Toggle_IntLights>
		if(__HAL_TIM_GET_COUNTER(&htim11) % 50000 == 0)
 800082c:	4b49      	ldr	r3, [pc, #292]	; (8000954 <CenLoc_MainFunction+0x478>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000832:	0913      	lsrs	r3, r2, #4
 8000834:	4950      	ldr	r1, [pc, #320]	; (8000978 <CenLoc_MainFunction+0x49c>)
 8000836:	fba1 1303 	umull	r1, r3, r1, r3
 800083a:	09db      	lsrs	r3, r3, #7
 800083c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8000840:	fb01 f303 	mul.w	r3, r1, r3
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	2b00      	cmp	r3, #0
 8000848:	d151      	bne.n	80008ee <CenLoc_MainFunction+0x412>
			TimeStampAlarmLed = __HAL_TIM_GET_COUNTER(&htim11);
 800084a:	4b42      	ldr	r3, [pc, #264]	; (8000954 <CenLoc_MainFunction+0x478>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000850:	807b      	strh	r3, [r7, #2]
			if(__HAL_TIM_GET_COUNTER(&htim11) - TimeStampAlarmLed < 2500)
 8000852:	4b40      	ldr	r3, [pc, #256]	; (8000954 <CenLoc_MainFunction+0x478>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000858:	887b      	ldrh	r3, [r7, #2]
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000860:	4293      	cmp	r3, r2
 8000862:	d803      	bhi.n	800086c <CenLoc_MainFunction+0x390>
				SecAlm_ToggleAlarmLed(STD_HIGH);
 8000864:	2001      	movs	r0, #1
 8000866:	f000 ff2b 	bl	80016c0 <SecAlm_ToggleAlarmLed>
 800086a:	e040      	b.n	80008ee <CenLoc_MainFunction+0x412>
			else if((2500 < (__HAL_TIM_GET_COUNTER(&htim11) - TimeStampAlarmLed)) && ((__HAL_TIM_GET_COUNTER(&htim11) - TimeStampAlarmLed) < 5000))
 800086c:	4b39      	ldr	r3, [pc, #228]	; (8000954 <CenLoc_MainFunction+0x478>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000872:	887b      	ldrh	r3, [r7, #2]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800087a:	4293      	cmp	r3, r2
 800087c:	d90c      	bls.n	8000898 <CenLoc_MainFunction+0x3bc>
 800087e:	4b35      	ldr	r3, [pc, #212]	; (8000954 <CenLoc_MainFunction+0x478>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000884:	887b      	ldrh	r3, [r7, #2]
 8000886:	1ad3      	subs	r3, r2, r3
 8000888:	f241 3287 	movw	r2, #4999	; 0x1387
 800088c:	4293      	cmp	r3, r2
 800088e:	d803      	bhi.n	8000898 <CenLoc_MainFunction+0x3bc>
				SecAlm_ToggleAlarmLed(STD_LOW);
 8000890:	2000      	movs	r0, #0
 8000892:	f000 ff15 	bl	80016c0 <SecAlm_ToggleAlarmLed>
 8000896:	e02a      	b.n	80008ee <CenLoc_MainFunction+0x412>
			else if((5000 < (__HAL_TIM_GET_COUNTER(&htim11) - TimeStampAlarmLed)) && ((__HAL_TIM_GET_COUNTER(&htim11) - TimeStampAlarmLed) < 7500))
 8000898:	4b2e      	ldr	r3, [pc, #184]	; (8000954 <CenLoc_MainFunction+0x478>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800089e:	887b      	ldrh	r3, [r7, #2]
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d90c      	bls.n	80008c4 <CenLoc_MainFunction+0x3e8>
 80008aa:	4b2a      	ldr	r3, [pc, #168]	; (8000954 <CenLoc_MainFunction+0x478>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008b0:	887b      	ldrh	r3, [r7, #2]
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	f641 524b 	movw	r2, #7499	; 0x1d4b
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d803      	bhi.n	80008c4 <CenLoc_MainFunction+0x3e8>
				SecAlm_ToggleAlarmLed(STD_HIGH);
 80008bc:	2001      	movs	r0, #1
 80008be:	f000 feff 	bl	80016c0 <SecAlm_ToggleAlarmLed>
 80008c2:	e014      	b.n	80008ee <CenLoc_MainFunction+0x412>
			else if((7500 < (__HAL_TIM_GET_COUNTER(&htim11) - TimeStampAlarmLed)) && ((__HAL_TIM_GET_COUNTER(&htim11) - TimeStampAlarmLed) < 10000))
 80008c4:	4b23      	ldr	r3, [pc, #140]	; (8000954 <CenLoc_MainFunction+0x478>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008ca:	887b      	ldrh	r3, [r7, #2]
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d90b      	bls.n	80008ee <CenLoc_MainFunction+0x412>
 80008d6:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <CenLoc_MainFunction+0x478>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008dc:	887b      	ldrh	r3, [r7, #2]
 80008de:	1ad3      	subs	r3, r2, r3
 80008e0:	f242 720f 	movw	r2, #9999	; 0x270f
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d802      	bhi.n	80008ee <CenLoc_MainFunction+0x412>
				SecAlm_ToggleAlarmLed(STD_LOW);
 80008e8:	2000      	movs	r0, #0
 80008ea:	f000 fee9 	bl	80016c0 <SecAlm_ToggleAlarmLed>
		if(AlarmCount1 < 3)
 80008ee:	4b23      	ldr	r3, [pc, #140]	; (800097c <CenLoc_MainFunction+0x4a0>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b02      	cmp	r3, #2
 80008f4:	d856      	bhi.n	80009a4 <CenLoc_MainFunction+0x4c8>
			if(__HAL_TIM_GET_COUNTER(&htim11) - TimeStampAlarm < 5000)
 80008f6:	4b17      	ldr	r3, [pc, #92]	; (8000954 <CenLoc_MainFunction+0x478>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008fc:	88fb      	ldrh	r3, [r7, #6]
 80008fe:	1ad3      	subs	r3, r2, r3
 8000900:	f241 3287 	movw	r2, #4999	; 0x1387
 8000904:	4293      	cmp	r3, r2
 8000906:	d809      	bhi.n	800091c <CenLoc_MainFunction+0x440>
				SecAlm_ToggleAlarmBuzzer(STD_HIGH);
 8000908:	2001      	movs	r0, #1
 800090a:	f000 fec7 	bl	800169c <SecAlm_ToggleAlarmBuzzer>
				AlarmCount1 = AlarmCount1 + 1;
 800090e:	4b1b      	ldr	r3, [pc, #108]	; (800097c <CenLoc_MainFunction+0x4a0>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	3301      	adds	r3, #1
 8000914:	b2da      	uxtb	r2, r3
 8000916:	4b19      	ldr	r3, [pc, #100]	; (800097c <CenLoc_MainFunction+0x4a0>)
 8000918:	701a      	strb	r2, [r3, #0]
 800091a:	e043      	b.n	80009a4 <CenLoc_MainFunction+0x4c8>
			else if((5000 < (__HAL_TIM_GET_COUNTER(&htim11) - TimeStampAlarm)) && ((__HAL_TIM_GET_COUNTER(&htim11) - TimeStampAlarm) < 10000))
 800091c:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <CenLoc_MainFunction+0x478>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	f241 3288 	movw	r2, #5000	; 0x1388
 800092a:	4293      	cmp	r3, r2
 800092c:	d928      	bls.n	8000980 <CenLoc_MainFunction+0x4a4>
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <CenLoc_MainFunction+0x478>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000934:	88fb      	ldrh	r3, [r7, #6]
 8000936:	1ad3      	subs	r3, r2, r3
 8000938:	f242 720f 	movw	r2, #9999	; 0x270f
 800093c:	4293      	cmp	r3, r2
 800093e:	d81f      	bhi.n	8000980 <CenLoc_MainFunction+0x4a4>
				SecAlm_ToggleAlarmBuzzer(STD_LOW);
 8000940:	2000      	movs	r0, #0
 8000942:	f000 feab 	bl	800169c <SecAlm_ToggleAlarmBuzzer>
				AlarmCount1 = AlarmCount1 + 1;
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <CenLoc_MainFunction+0x4a0>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	3301      	adds	r3, #1
 800094c:	b2da      	uxtb	r2, r3
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <CenLoc_MainFunction+0x4a0>)
 8000950:	701a      	strb	r2, [r3, #0]
 8000952:	e027      	b.n	80009a4 <CenLoc_MainFunction+0x4c8>
 8000954:	20000094 	.word	0x20000094
 8000958:	20000049 	.word	0x20000049
 800095c:	0001869f 	.word	0x0001869f
 8000960:	20000036 	.word	0x20000036
 8000964:	20000038 	.word	0x20000038
 8000968:	2000003a 	.word	0x2000003a
 800096c:	000186a0 	.word	0x000186a0
 8000970:	2000002a 	.word	0x2000002a
 8000974:	20000029 	.word	0x20000029
 8000978:	0a7c5ac5 	.word	0x0a7c5ac5
 800097c:	20000048 	.word	0x20000048
			else if((__HAL_TIM_GET_COUNTER(&htim11) - TimeStampAlarm) > 10000)
 8000980:	4b4d      	ldr	r3, [pc, #308]	; (8000ab8 <CenLoc_MainFunction+0x5dc>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000986:	88fb      	ldrh	r3, [r7, #6]
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	f242 7210 	movw	r2, #10000	; 0x2710
 800098e:	4293      	cmp	r3, r2
 8000990:	d908      	bls.n	80009a4 <CenLoc_MainFunction+0x4c8>
				SecAlm_ToggleAlarmBuzzer(STD_LOW);
 8000992:	2000      	movs	r0, #0
 8000994:	f000 fe82 	bl	800169c <SecAlm_ToggleAlarmBuzzer>
				AlarmCount1 = AlarmCount1 + 1;
 8000998:	4b48      	ldr	r3, [pc, #288]	; (8000abc <CenLoc_MainFunction+0x5e0>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	3301      	adds	r3, #1
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	4b46      	ldr	r3, [pc, #280]	; (8000abc <CenLoc_MainFunction+0x5e0>)
 80009a2:	701a      	strb	r2, [r3, #0]
		if(AlarmCount2 < 2)
 80009a4:	4b46      	ldr	r3, [pc, #280]	; (8000ac0 <CenLoc_MainFunction+0x5e4>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d833      	bhi.n	8000a14 <CenLoc_MainFunction+0x538>
			if(__HAL_TIM_GET_COUNTER(&htim11) - TimeStampAlarm < 5000)
 80009ac:	4b42      	ldr	r3, [pc, #264]	; (8000ab8 <CenLoc_MainFunction+0x5dc>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	f241 3287 	movw	r2, #4999	; 0x1387
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d80c      	bhi.n	80009d8 <CenLoc_MainFunction+0x4fc>
				ExtLights_TurnSignalLeft(STD_HIGH);
 80009be:	2001      	movs	r0, #1
 80009c0:	f000 fc26 	bl	8001210 <ExtLights_TurnSignalLeft>
				ExtLights_TurnSignalRight(STD_HIGH);
 80009c4:	2001      	movs	r0, #1
 80009c6:	f000 fc35 	bl	8001234 <ExtLights_TurnSignalRight>
				AlarmCount2 = AlarmCount2 + 1;
 80009ca:	4b3d      	ldr	r3, [pc, #244]	; (8000ac0 <CenLoc_MainFunction+0x5e4>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	3301      	adds	r3, #1
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	4b3b      	ldr	r3, [pc, #236]	; (8000ac0 <CenLoc_MainFunction+0x5e4>)
 80009d4:	701a      	strb	r2, [r3, #0]
 80009d6:	e01d      	b.n	8000a14 <CenLoc_MainFunction+0x538>
			else if((5000 < (__HAL_TIM_GET_COUNTER(&htim11) - TimeStampAlarm)) && ((__HAL_TIM_GET_COUNTER(&htim11) - TimeStampAlarm) < 10000))
 80009d8:	4b37      	ldr	r3, [pc, #220]	; (8000ab8 <CenLoc_MainFunction+0x5dc>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009de:	88fb      	ldrh	r3, [r7, #6]
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d914      	bls.n	8000a14 <CenLoc_MainFunction+0x538>
 80009ea:	4b33      	ldr	r3, [pc, #204]	; (8000ab8 <CenLoc_MainFunction+0x5dc>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009f0:	88fb      	ldrh	r3, [r7, #6]
 80009f2:	1ad3      	subs	r3, r2, r3
 80009f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d80b      	bhi.n	8000a14 <CenLoc_MainFunction+0x538>
				ExtLights_TurnSignalLeft(STD_LOW);
 80009fc:	2000      	movs	r0, #0
 80009fe:	f000 fc07 	bl	8001210 <ExtLights_TurnSignalLeft>
				ExtLights_TurnSignalRight(STD_LOW);
 8000a02:	2000      	movs	r0, #0
 8000a04:	f000 fc16 	bl	8001234 <ExtLights_TurnSignalRight>
				AlarmCount2 = AlarmCount2 + 1;
 8000a08:	4b2d      	ldr	r3, [pc, #180]	; (8000ac0 <CenLoc_MainFunction+0x5e4>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	4b2b      	ldr	r3, [pc, #172]	; (8000ac0 <CenLoc_MainFunction+0x5e4>)
 8000a12:	701a      	strb	r2, [r3, #0]
		if((__HAL_TIM_GET_COUNTER(&htim11) - TimeStampExtLights) < 100000 && BTLowBeam == 0 && BTFogLightFront == 0 && BTPositionLightRear == 0)
 8000a14:	4b28      	ldr	r3, [pc, #160]	; (8000ab8 <CenLoc_MainFunction+0x5dc>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a1a:	88bb      	ldrh	r3, [r7, #4]
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	4a29      	ldr	r2, [pc, #164]	; (8000ac4 <CenLoc_MainFunction+0x5e8>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d81e      	bhi.n	8000a62 <CenLoc_MainFunction+0x586>
 8000a24:	4b28      	ldr	r3, [pc, #160]	; (8000ac8 <CenLoc_MainFunction+0x5ec>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d11a      	bne.n	8000a62 <CenLoc_MainFunction+0x586>
 8000a2c:	4b27      	ldr	r3, [pc, #156]	; (8000acc <CenLoc_MainFunction+0x5f0>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d116      	bne.n	8000a62 <CenLoc_MainFunction+0x586>
 8000a34:	4b26      	ldr	r3, [pc, #152]	; (8000ad0 <CenLoc_MainFunction+0x5f4>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d112      	bne.n	8000a62 <CenLoc_MainFunction+0x586>
			ExtLights_LowBeam(STD_HIGH);
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	f000 fb9f 	bl	8001180 <ExtLights_LowBeam>
			ExtLights_FogLightFront(STD_HIGH);
 8000a42:	2001      	movs	r0, #1
 8000a44:	f000 fbc0 	bl	80011c8 <ExtLights_FogLightFront>
			ExtLights_PositionLightRear(STD_HIGH);
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f000 fc05 	bl	8001258 <ExtLights_PositionLightRear>
			BTLowBeam = STD_HIGH;
 8000a4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <CenLoc_MainFunction+0x5ec>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	701a      	strb	r2, [r3, #0]
			BTFogLightFront = STD_HIGH;
 8000a54:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <CenLoc_MainFunction+0x5f0>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	701a      	strb	r2, [r3, #0]
			BTPositionLightRear = STD_HIGH;
 8000a5a:	4b1d      	ldr	r3, [pc, #116]	; (8000ad0 <CenLoc_MainFunction+0x5f4>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	701a      	strb	r2, [r3, #0]
 8000a60:	e026      	b.n	8000ab0 <CenLoc_MainFunction+0x5d4>
		else if((__HAL_TIM_GET_COUNTER(&htim11) - TimeStampExtLights) > 100000 && BTLowBeam == 1 && BTFogLightFront == 1 && BTPositionLightRear == 1)
 8000a62:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <CenLoc_MainFunction+0x5dc>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a68:	88bb      	ldrh	r3, [r7, #4]
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	4a19      	ldr	r2, [pc, #100]	; (8000ad4 <CenLoc_MainFunction+0x5f8>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d91e      	bls.n	8000ab0 <CenLoc_MainFunction+0x5d4>
 8000a72:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <CenLoc_MainFunction+0x5ec>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d11a      	bne.n	8000ab0 <CenLoc_MainFunction+0x5d4>
 8000a7a:	4b14      	ldr	r3, [pc, #80]	; (8000acc <CenLoc_MainFunction+0x5f0>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d116      	bne.n	8000ab0 <CenLoc_MainFunction+0x5d4>
 8000a82:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <CenLoc_MainFunction+0x5f4>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d112      	bne.n	8000ab0 <CenLoc_MainFunction+0x5d4>
			ExtLights_LowBeam(STD_LOW);
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f000 fb78 	bl	8001180 <ExtLights_LowBeam>
			ExtLights_FogLightFront(STD_LOW);
 8000a90:	2000      	movs	r0, #0
 8000a92:	f000 fb99 	bl	80011c8 <ExtLights_FogLightFront>
			ExtLights_PositionLightRear(STD_LOW);
 8000a96:	2000      	movs	r0, #0
 8000a98:	f000 fbde 	bl	8001258 <ExtLights_PositionLightRear>
			BTLowBeam = STD_LOW;
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <CenLoc_MainFunction+0x5ec>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
			BTFogLightFront = STD_LOW;
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <CenLoc_MainFunction+0x5f0>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	701a      	strb	r2, [r3, #0]
			BTPositionLightRear = STD_LOW;
 8000aa8:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <CenLoc_MainFunction+0x5f4>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
}
 8000aae:	e7ff      	b.n	8000ab0 <CenLoc_MainFunction+0x5d4>
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000094 	.word	0x20000094
 8000abc:	20000048 	.word	0x20000048
 8000ac0:	20000049 	.word	0x20000049
 8000ac4:	0001869f 	.word	0x0001869f
 8000ac8:	20000036 	.word	0x20000036
 8000acc:	20000038 	.word	0x20000038
 8000ad0:	2000003a 	.word	0x2000003a
 8000ad4:	000186a0 	.word	0x000186a0

08000ad8 <CenLoc_Init>:

uint8_t CenLoc_Init()
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
	CurrentState_Door = STD_LOW;
 8000adc:	4b07      	ldr	r3, [pc, #28]	; (8000afc <CenLoc_Init+0x24>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]
	CurrentState_CenLoc = STD_LOW;
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <CenLoc_Init+0x28>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
	BTCenLoc = STD_LOW;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <CenLoc_Init+0x2c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	701a      	strb	r2, [r3, #0]

	return E_OK;
 8000aee:	2300      	movs	r3, #0
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20000028 	.word	0x20000028
 8000b00:	20000029 	.word	0x20000029
 8000b04:	2000002a 	.word	0x2000002a

08000b08 <CenLoc_Toggle_Door_LED>:

void CenLoc_Toggle_Door_LED(uint8_t PinState)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, PinState);
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	461a      	mov	r2, r3
 8000b16:	2140      	movs	r1, #64	; 0x40
 8000b18:	4803      	ldr	r0, [pc, #12]	; (8000b28 <CenLoc_Toggle_Door_LED+0x20>)
 8000b1a:	f001 fce5 	bl	80024e8 <HAL_GPIO_WritePin>
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40020400 	.word	0x40020400

08000b2c <ExtLights_MainFunction>:
uint8_t BTHazardLight;
uint8_t BTExtLight_IrqFlag;


void ExtLights_MainFunction()
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
	uint16_t TimeStampTurnSignals = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	80fb      	strh	r3, [r7, #6]

	if(BTLowBeam == STD_HIGH)
 8000b36:	4b80      	ldr	r3, [pc, #512]	; (8000d38 <ExtLights_MainFunction+0x20c>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d104      	bne.n	8000b48 <ExtLights_MainFunction+0x1c>
	{
		CurrentState_LowBeam = BTLowBeam;
 8000b3e:	4b7e      	ldr	r3, [pc, #504]	; (8000d38 <ExtLights_MainFunction+0x20c>)
 8000b40:	781a      	ldrb	r2, [r3, #0]
 8000b42:	4b7e      	ldr	r3, [pc, #504]	; (8000d3c <ExtLights_MainFunction+0x210>)
 8000b44:	701a      	strb	r2, [r3, #0]
 8000b46:	e007      	b.n	8000b58 <ExtLights_MainFunction+0x2c>
	}
	else if(BTLowBeam == STD_LOW)
 8000b48:	4b7b      	ldr	r3, [pc, #492]	; (8000d38 <ExtLights_MainFunction+0x20c>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d103      	bne.n	8000b58 <ExtLights_MainFunction+0x2c>
	{
		CurrentState_LowBeam = BTLowBeam;
 8000b50:	4b79      	ldr	r3, [pc, #484]	; (8000d38 <ExtLights_MainFunction+0x20c>)
 8000b52:	781a      	ldrb	r2, [r3, #0]
 8000b54:	4b79      	ldr	r3, [pc, #484]	; (8000d3c <ExtLights_MainFunction+0x210>)
 8000b56:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTHighBeam == STD_HIGH)
 8000b58:	4b79      	ldr	r3, [pc, #484]	; (8000d40 <ExtLights_MainFunction+0x214>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d104      	bne.n	8000b6a <ExtLights_MainFunction+0x3e>
	{
		CurrentState_HighBeam = BTLowBeam;
 8000b60:	4b75      	ldr	r3, [pc, #468]	; (8000d38 <ExtLights_MainFunction+0x20c>)
 8000b62:	781a      	ldrb	r2, [r3, #0]
 8000b64:	4b77      	ldr	r3, [pc, #476]	; (8000d44 <ExtLights_MainFunction+0x218>)
 8000b66:	701a      	strb	r2, [r3, #0]
 8000b68:	e007      	b.n	8000b7a <ExtLights_MainFunction+0x4e>
	}
	else if(BTHighBeam == STD_LOW)
 8000b6a:	4b75      	ldr	r3, [pc, #468]	; (8000d40 <ExtLights_MainFunction+0x214>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d103      	bne.n	8000b7a <ExtLights_MainFunction+0x4e>
	{
		CurrentState_HighBeam = BTLowBeam;
 8000b72:	4b71      	ldr	r3, [pc, #452]	; (8000d38 <ExtLights_MainFunction+0x20c>)
 8000b74:	781a      	ldrb	r2, [r3, #0]
 8000b76:	4b73      	ldr	r3, [pc, #460]	; (8000d44 <ExtLights_MainFunction+0x218>)
 8000b78:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTHighBeam == STD_HIGH)
 8000b7a:	4b71      	ldr	r3, [pc, #452]	; (8000d40 <ExtLights_MainFunction+0x214>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d104      	bne.n	8000b8c <ExtLights_MainFunction+0x60>
	{
		CurrentState_HighBeam = BTHighBeam;
 8000b82:	4b6f      	ldr	r3, [pc, #444]	; (8000d40 <ExtLights_MainFunction+0x214>)
 8000b84:	781a      	ldrb	r2, [r3, #0]
 8000b86:	4b6f      	ldr	r3, [pc, #444]	; (8000d44 <ExtLights_MainFunction+0x218>)
 8000b88:	701a      	strb	r2, [r3, #0]
 8000b8a:	e007      	b.n	8000b9c <ExtLights_MainFunction+0x70>
	}
	else if(BTHighBeam == STD_LOW)
 8000b8c:	4b6c      	ldr	r3, [pc, #432]	; (8000d40 <ExtLights_MainFunction+0x214>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d103      	bne.n	8000b9c <ExtLights_MainFunction+0x70>
	{
		CurrentState_HighBeam = BTHighBeam;
 8000b94:	4b6a      	ldr	r3, [pc, #424]	; (8000d40 <ExtLights_MainFunction+0x214>)
 8000b96:	781a      	ldrb	r2, [r3, #0]
 8000b98:	4b6a      	ldr	r3, [pc, #424]	; (8000d44 <ExtLights_MainFunction+0x218>)
 8000b9a:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTFogLightFront == STD_HIGH)
 8000b9c:	4b6a      	ldr	r3, [pc, #424]	; (8000d48 <ExtLights_MainFunction+0x21c>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d104      	bne.n	8000bae <ExtLights_MainFunction+0x82>
	{
		CurrentState_FogLightFront = BTFogLightFront;
 8000ba4:	4b68      	ldr	r3, [pc, #416]	; (8000d48 <ExtLights_MainFunction+0x21c>)
 8000ba6:	781a      	ldrb	r2, [r3, #0]
 8000ba8:	4b68      	ldr	r3, [pc, #416]	; (8000d4c <ExtLights_MainFunction+0x220>)
 8000baa:	701a      	strb	r2, [r3, #0]
 8000bac:	e007      	b.n	8000bbe <ExtLights_MainFunction+0x92>
	}
	else if(BTFogLightFront == STD_LOW)
 8000bae:	4b66      	ldr	r3, [pc, #408]	; (8000d48 <ExtLights_MainFunction+0x21c>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d103      	bne.n	8000bbe <ExtLights_MainFunction+0x92>
	{
		CurrentState_FogLightFront = BTFogLightFront;
 8000bb6:	4b64      	ldr	r3, [pc, #400]	; (8000d48 <ExtLights_MainFunction+0x21c>)
 8000bb8:	781a      	ldrb	r2, [r3, #0]
 8000bba:	4b64      	ldr	r3, [pc, #400]	; (8000d4c <ExtLights_MainFunction+0x220>)
 8000bbc:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTFogLightRear == STD_HIGH)
 8000bbe:	4b64      	ldr	r3, [pc, #400]	; (8000d50 <ExtLights_MainFunction+0x224>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d104      	bne.n	8000bd0 <ExtLights_MainFunction+0xa4>
	{
		CurrentState_FogLightRear = BTFogLightRear;
 8000bc6:	4b62      	ldr	r3, [pc, #392]	; (8000d50 <ExtLights_MainFunction+0x224>)
 8000bc8:	781a      	ldrb	r2, [r3, #0]
 8000bca:	4b62      	ldr	r3, [pc, #392]	; (8000d54 <ExtLights_MainFunction+0x228>)
 8000bcc:	701a      	strb	r2, [r3, #0]
 8000bce:	e007      	b.n	8000be0 <ExtLights_MainFunction+0xb4>
	}
	else if(BTFogLightRear == STD_LOW)
 8000bd0:	4b5f      	ldr	r3, [pc, #380]	; (8000d50 <ExtLights_MainFunction+0x224>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d103      	bne.n	8000be0 <ExtLights_MainFunction+0xb4>
	{
		CurrentState_FogLightRear = BTFogLightRear;
 8000bd8:	4b5d      	ldr	r3, [pc, #372]	; (8000d50 <ExtLights_MainFunction+0x224>)
 8000bda:	781a      	ldrb	r2, [r3, #0]
 8000bdc:	4b5d      	ldr	r3, [pc, #372]	; (8000d54 <ExtLights_MainFunction+0x228>)
 8000bde:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTPositionLightRear == STD_HIGH)
 8000be0:	4b5d      	ldr	r3, [pc, #372]	; (8000d58 <ExtLights_MainFunction+0x22c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d104      	bne.n	8000bf2 <ExtLights_MainFunction+0xc6>
	{
		CurrentState_PositionLightRear = BTPositionLightRear;
 8000be8:	4b5b      	ldr	r3, [pc, #364]	; (8000d58 <ExtLights_MainFunction+0x22c>)
 8000bea:	781a      	ldrb	r2, [r3, #0]
 8000bec:	4b5b      	ldr	r3, [pc, #364]	; (8000d5c <ExtLights_MainFunction+0x230>)
 8000bee:	701a      	strb	r2, [r3, #0]
 8000bf0:	e007      	b.n	8000c02 <ExtLights_MainFunction+0xd6>
	}
	else if(BTPositionLightRear == STD_LOW)
 8000bf2:	4b59      	ldr	r3, [pc, #356]	; (8000d58 <ExtLights_MainFunction+0x22c>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d103      	bne.n	8000c02 <ExtLights_MainFunction+0xd6>
	{
		CurrentState_PositionLightRear = BTPositionLightRear;
 8000bfa:	4b57      	ldr	r3, [pc, #348]	; (8000d58 <ExtLights_MainFunction+0x22c>)
 8000bfc:	781a      	ldrb	r2, [r3, #0]
 8000bfe:	4b57      	ldr	r3, [pc, #348]	; (8000d5c <ExtLights_MainFunction+0x230>)
 8000c00:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTPositionLightRear == STD_HIGH)
 8000c02:	4b55      	ldr	r3, [pc, #340]	; (8000d58 <ExtLights_MainFunction+0x22c>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d104      	bne.n	8000c14 <ExtLights_MainFunction+0xe8>
	{
		CurrentState_PositionLightRear = BTPositionLightRear;
 8000c0a:	4b53      	ldr	r3, [pc, #332]	; (8000d58 <ExtLights_MainFunction+0x22c>)
 8000c0c:	781a      	ldrb	r2, [r3, #0]
 8000c0e:	4b53      	ldr	r3, [pc, #332]	; (8000d5c <ExtLights_MainFunction+0x230>)
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	e007      	b.n	8000c24 <ExtLights_MainFunction+0xf8>
	}
	else if(BTPositionLightRear == STD_LOW)
 8000c14:	4b50      	ldr	r3, [pc, #320]	; (8000d58 <ExtLights_MainFunction+0x22c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d103      	bne.n	8000c24 <ExtLights_MainFunction+0xf8>
	{
		CurrentState_PositionLightRear = BTPositionLightRear;
 8000c1c:	4b4e      	ldr	r3, [pc, #312]	; (8000d58 <ExtLights_MainFunction+0x22c>)
 8000c1e:	781a      	ldrb	r2, [r3, #0]
 8000c20:	4b4e      	ldr	r3, [pc, #312]	; (8000d5c <ExtLights_MainFunction+0x230>)
 8000c22:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTBrakeLight == STD_HIGH)
 8000c24:	4b4e      	ldr	r3, [pc, #312]	; (8000d60 <ExtLights_MainFunction+0x234>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d104      	bne.n	8000c36 <ExtLights_MainFunction+0x10a>
	{
		CurrentState_BrakeLight = BTBrakeLight;
 8000c2c:	4b4c      	ldr	r3, [pc, #304]	; (8000d60 <ExtLights_MainFunction+0x234>)
 8000c2e:	781a      	ldrb	r2, [r3, #0]
 8000c30:	4b4c      	ldr	r3, [pc, #304]	; (8000d64 <ExtLights_MainFunction+0x238>)
 8000c32:	701a      	strb	r2, [r3, #0]
 8000c34:	e007      	b.n	8000c46 <ExtLights_MainFunction+0x11a>
	}
	else if(BTBrakeLight == STD_LOW)
 8000c36:	4b4a      	ldr	r3, [pc, #296]	; (8000d60 <ExtLights_MainFunction+0x234>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d103      	bne.n	8000c46 <ExtLights_MainFunction+0x11a>
	{
		CurrentState_BrakeLight = BTBrakeLight;
 8000c3e:	4b48      	ldr	r3, [pc, #288]	; (8000d60 <ExtLights_MainFunction+0x234>)
 8000c40:	781a      	ldrb	r2, [r3, #0]
 8000c42:	4b48      	ldr	r3, [pc, #288]	; (8000d64 <ExtLights_MainFunction+0x238>)
 8000c44:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTReverseLight == STD_HIGH)
 8000c46:	4b48      	ldr	r3, [pc, #288]	; (8000d68 <ExtLights_MainFunction+0x23c>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d104      	bne.n	8000c58 <ExtLights_MainFunction+0x12c>
	{
		CurrentState_ReverseLight = BTReverseLight;
 8000c4e:	4b46      	ldr	r3, [pc, #280]	; (8000d68 <ExtLights_MainFunction+0x23c>)
 8000c50:	781a      	ldrb	r2, [r3, #0]
 8000c52:	4b46      	ldr	r3, [pc, #280]	; (8000d6c <ExtLights_MainFunction+0x240>)
 8000c54:	701a      	strb	r2, [r3, #0]
 8000c56:	e007      	b.n	8000c68 <ExtLights_MainFunction+0x13c>
	}
	else if(BTReverseLight == STD_LOW)
 8000c58:	4b43      	ldr	r3, [pc, #268]	; (8000d68 <ExtLights_MainFunction+0x23c>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d103      	bne.n	8000c68 <ExtLights_MainFunction+0x13c>
	{
		CurrentState_ReverseLight = BTReverseLight;
 8000c60:	4b41      	ldr	r3, [pc, #260]	; (8000d68 <ExtLights_MainFunction+0x23c>)
 8000c62:	781a      	ldrb	r2, [r3, #0]
 8000c64:	4b41      	ldr	r3, [pc, #260]	; (8000d6c <ExtLights_MainFunction+0x240>)
 8000c66:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTTurnSignalLeft == STD_HIGH)
 8000c68:	4b41      	ldr	r3, [pc, #260]	; (8000d70 <ExtLights_MainFunction+0x244>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d104      	bne.n	8000c7a <ExtLights_MainFunction+0x14e>
	{
		CurrentState_TurnSignalLeft = BTTurnSignalLeft;
 8000c70:	4b3f      	ldr	r3, [pc, #252]	; (8000d70 <ExtLights_MainFunction+0x244>)
 8000c72:	781a      	ldrb	r2, [r3, #0]
 8000c74:	4b3f      	ldr	r3, [pc, #252]	; (8000d74 <ExtLights_MainFunction+0x248>)
 8000c76:	701a      	strb	r2, [r3, #0]
 8000c78:	e007      	b.n	8000c8a <ExtLights_MainFunction+0x15e>
	}
	else if(BTTurnSignalLeft == STD_LOW)
 8000c7a:	4b3d      	ldr	r3, [pc, #244]	; (8000d70 <ExtLights_MainFunction+0x244>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d103      	bne.n	8000c8a <ExtLights_MainFunction+0x15e>
	{
		CurrentState_TurnSignalLeft = BTTurnSignalLeft;
 8000c82:	4b3b      	ldr	r3, [pc, #236]	; (8000d70 <ExtLights_MainFunction+0x244>)
 8000c84:	781a      	ldrb	r2, [r3, #0]
 8000c86:	4b3b      	ldr	r3, [pc, #236]	; (8000d74 <ExtLights_MainFunction+0x248>)
 8000c88:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTTurnSignalRight == STD_HIGH)
 8000c8a:	4b3b      	ldr	r3, [pc, #236]	; (8000d78 <ExtLights_MainFunction+0x24c>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d104      	bne.n	8000c9c <ExtLights_MainFunction+0x170>
	{
		CurrentState_TurnSignalRight = BTTurnSignalRight;
 8000c92:	4b39      	ldr	r3, [pc, #228]	; (8000d78 <ExtLights_MainFunction+0x24c>)
 8000c94:	781a      	ldrb	r2, [r3, #0]
 8000c96:	4b39      	ldr	r3, [pc, #228]	; (8000d7c <ExtLights_MainFunction+0x250>)
 8000c98:	701a      	strb	r2, [r3, #0]
 8000c9a:	e007      	b.n	8000cac <ExtLights_MainFunction+0x180>
	}
	else if(BTTurnSignalRight == STD_LOW)
 8000c9c:	4b36      	ldr	r3, [pc, #216]	; (8000d78 <ExtLights_MainFunction+0x24c>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d103      	bne.n	8000cac <ExtLights_MainFunction+0x180>
	{
		CurrentState_TurnSignalRight = BTTurnSignalRight;
 8000ca4:	4b34      	ldr	r3, [pc, #208]	; (8000d78 <ExtLights_MainFunction+0x24c>)
 8000ca6:	781a      	ldrb	r2, [r3, #0]
 8000ca8:	4b34      	ldr	r3, [pc, #208]	; (8000d7c <ExtLights_MainFunction+0x250>)
 8000caa:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTHazardLight == STD_HIGH)
 8000cac:	4b34      	ldr	r3, [pc, #208]	; (8000d80 <ExtLights_MainFunction+0x254>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d104      	bne.n	8000cbe <ExtLights_MainFunction+0x192>
	{
		CurrentState_HazardLight = BTHazardLight;
 8000cb4:	4b32      	ldr	r3, [pc, #200]	; (8000d80 <ExtLights_MainFunction+0x254>)
 8000cb6:	781a      	ldrb	r2, [r3, #0]
 8000cb8:	4b32      	ldr	r3, [pc, #200]	; (8000d84 <ExtLights_MainFunction+0x258>)
 8000cba:	701a      	strb	r2, [r3, #0]
 8000cbc:	e007      	b.n	8000cce <ExtLights_MainFunction+0x1a2>
	}
	else if(BTHazardLight == STD_LOW)
 8000cbe:	4b30      	ldr	r3, [pc, #192]	; (8000d80 <ExtLights_MainFunction+0x254>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d103      	bne.n	8000cce <ExtLights_MainFunction+0x1a2>
	{
		CurrentState_HazardLight = BTHazardLight;
 8000cc6:	4b2e      	ldr	r3, [pc, #184]	; (8000d80 <ExtLights_MainFunction+0x254>)
 8000cc8:	781a      	ldrb	r2, [r3, #0]
 8000cca:	4b2e      	ldr	r3, [pc, #184]	; (8000d84 <ExtLights_MainFunction+0x258>)
 8000ccc:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(CurrentState_TurnSignalLeft == STD_HIGH)
 8000cce:	4b29      	ldr	r3, [pc, #164]	; (8000d74 <ExtLights_MainFunction+0x248>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	f040 808f 	bne.w	8000df6 <ExtLights_MainFunction+0x2ca>
	{
		TimeStampTurnSignals = __HAL_TIM_GET_COUNTER(&htim11);
 8000cd8:	4b2b      	ldr	r3, [pc, #172]	; (8000d88 <ExtLights_MainFunction+0x25c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cde:	80fb      	strh	r3, [r7, #6]
		if(__HAL_TIM_GET_COUNTER(&htim11) - TimeStampTurnSignals < 2500)
 8000ce0:	4b29      	ldr	r3, [pc, #164]	; (8000d88 <ExtLights_MainFunction+0x25c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ce6:	88fb      	ldrh	r3, [r7, #6]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d805      	bhi.n	8000cfe <ExtLights_MainFunction+0x1d2>
		{
			ExtLights_TurnSignalLeft(CurrentState_TurnSignalLeft);
 8000cf2:	4b20      	ldr	r3, [pc, #128]	; (8000d74 <ExtLights_MainFunction+0x248>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 fa8a 	bl	8001210 <ExtLights_TurnSignalLeft>
 8000cfc:	e084      	b.n	8000e08 <ExtLights_MainFunction+0x2dc>
		}
		else if((2500 < (__HAL_TIM_GET_COUNTER(&htim11) - TimeStampTurnSignals)) && ((__HAL_TIM_GET_COUNTER(&htim11) - TimeStampTurnSignals) < 5000))
 8000cfe:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <ExtLights_MainFunction+0x25c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d04:	88fb      	ldrh	r3, [r7, #6]
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d93d      	bls.n	8000d8c <ExtLights_MainFunction+0x260>
 8000d10:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <ExtLights_MainFunction+0x25c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d16:	88fb      	ldrh	r3, [r7, #6]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	f241 3287 	movw	r2, #4999	; 0x1387
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d834      	bhi.n	8000d8c <ExtLights_MainFunction+0x260>
		{
			ExtLights_TurnSignalLeft(!CurrentState_TurnSignalLeft);
 8000d22:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <ExtLights_MainFunction+0x248>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	bf0c      	ite	eq
 8000d2a:	2301      	moveq	r3, #1
 8000d2c:	2300      	movne	r3, #0
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 fa6d 	bl	8001210 <ExtLights_TurnSignalLeft>
 8000d36:	e067      	b.n	8000e08 <ExtLights_MainFunction+0x2dc>
 8000d38:	20000036 	.word	0x20000036
 8000d3c:	2000002c 	.word	0x2000002c
 8000d40:	20000037 	.word	0x20000037
 8000d44:	2000002d 	.word	0x2000002d
 8000d48:	20000038 	.word	0x20000038
 8000d4c:	2000002e 	.word	0x2000002e
 8000d50:	20000039 	.word	0x20000039
 8000d54:	2000002f 	.word	0x2000002f
 8000d58:	2000003a 	.word	0x2000003a
 8000d5c:	20000032 	.word	0x20000032
 8000d60:	2000003b 	.word	0x2000003b
 8000d64:	20000033 	.word	0x20000033
 8000d68:	2000003c 	.word	0x2000003c
 8000d6c:	20000034 	.word	0x20000034
 8000d70:	2000003e 	.word	0x2000003e
 8000d74:	20000031 	.word	0x20000031
 8000d78:	2000003d 	.word	0x2000003d
 8000d7c:	20000030 	.word	0x20000030
 8000d80:	2000003f 	.word	0x2000003f
 8000d84:	20000035 	.word	0x20000035
 8000d88:	20000094 	.word	0x20000094
		}
		else if((5000 < (__HAL_TIM_GET_COUNTER(&htim11) - TimeStampTurnSignals)) && ((__HAL_TIM_GET_COUNTER(&htim11) - TimeStampTurnSignals) < 7500))
 8000d8c:	4b88      	ldr	r3, [pc, #544]	; (8000fb0 <ExtLights_MainFunction+0x484>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d92:	88fb      	ldrh	r3, [r7, #6]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d90e      	bls.n	8000dbc <ExtLights_MainFunction+0x290>
 8000d9e:	4b84      	ldr	r3, [pc, #528]	; (8000fb0 <ExtLights_MainFunction+0x484>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000da4:	88fb      	ldrh	r3, [r7, #6]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d805      	bhi.n	8000dbc <ExtLights_MainFunction+0x290>
		{
			ExtLights_TurnSignalLeft(CurrentState_TurnSignalLeft);
 8000db0:	4b80      	ldr	r3, [pc, #512]	; (8000fb4 <ExtLights_MainFunction+0x488>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f000 fa2b 	bl	8001210 <ExtLights_TurnSignalLeft>
 8000dba:	e025      	b.n	8000e08 <ExtLights_MainFunction+0x2dc>
		}
		else if((7500 < (__HAL_TIM_GET_COUNTER(&htim11) - TimeStampTurnSignals)) && ((__HAL_TIM_GET_COUNTER(&htim11) - TimeStampTurnSignals) < 10000))
 8000dbc:	4b7c      	ldr	r3, [pc, #496]	; (8000fb0 <ExtLights_MainFunction+0x484>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dc2:	88fb      	ldrh	r3, [r7, #6]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d91c      	bls.n	8000e08 <ExtLights_MainFunction+0x2dc>
 8000dce:	4b78      	ldr	r3, [pc, #480]	; (8000fb0 <ExtLights_MainFunction+0x484>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dd4:	88fb      	ldrh	r3, [r7, #6]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d813      	bhi.n	8000e08 <ExtLights_MainFunction+0x2dc>
		{
			ExtLights_TurnSignalLeft(!CurrentState_TurnSignalLeft);
 8000de0:	4b74      	ldr	r3, [pc, #464]	; (8000fb4 <ExtLights_MainFunction+0x488>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	bf0c      	ite	eq
 8000de8:	2301      	moveq	r3, #1
 8000dea:	2300      	movne	r3, #0
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 fa0e 	bl	8001210 <ExtLights_TurnSignalLeft>
 8000df4:	e008      	b.n	8000e08 <ExtLights_MainFunction+0x2dc>
		else
		{
			/* do nothing */
		}
	}
	else if(CurrentState_TurnSignalLeft == STD_LOW)
 8000df6:	4b6f      	ldr	r3, [pc, #444]	; (8000fb4 <ExtLights_MainFunction+0x488>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d104      	bne.n	8000e08 <ExtLights_MainFunction+0x2dc>
	{
		ExtLights_TurnSignalLeft(CurrentState_TurnSignalLeft);
 8000dfe:	4b6d      	ldr	r3, [pc, #436]	; (8000fb4 <ExtLights_MainFunction+0x488>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 fa04 	bl	8001210 <ExtLights_TurnSignalLeft>
	else
	{
		/* do nothing */
	}

	if(CurrentState_TurnSignalRight == STD_HIGH)
 8000e08:	4b6b      	ldr	r3, [pc, #428]	; (8000fb8 <ExtLights_MainFunction+0x48c>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d164      	bne.n	8000eda <ExtLights_MainFunction+0x3ae>
	{
		TimeStampTurnSignals = __HAL_TIM_GET_COUNTER(&htim11);
 8000e10:	4b67      	ldr	r3, [pc, #412]	; (8000fb0 <ExtLights_MainFunction+0x484>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e16:	80fb      	strh	r3, [r7, #6]
		if(__HAL_TIM_GET_COUNTER(&htim11) - TimeStampTurnSignals < 2500)
 8000e18:	4b65      	ldr	r3, [pc, #404]	; (8000fb0 <ExtLights_MainFunction+0x484>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e1e:	88fb      	ldrh	r3, [r7, #6]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d805      	bhi.n	8000e36 <ExtLights_MainFunction+0x30a>
		{
			ExtLights_TurnSignalRight(CurrentState_TurnSignalRight);
 8000e2a:	4b63      	ldr	r3, [pc, #396]	; (8000fb8 <ExtLights_MainFunction+0x48c>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 fa00 	bl	8001234 <ExtLights_TurnSignalRight>
 8000e34:	e05a      	b.n	8000eec <ExtLights_MainFunction+0x3c0>
		}
		else if((2500 < (__HAL_TIM_GET_COUNTER(&htim11) - TimeStampTurnSignals)) && ((__HAL_TIM_GET_COUNTER(&htim11) - TimeStampTurnSignals) < 5000))
 8000e36:	4b5e      	ldr	r3, [pc, #376]	; (8000fb0 <ExtLights_MainFunction+0x484>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e3c:	88fb      	ldrh	r3, [r7, #6]
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d913      	bls.n	8000e70 <ExtLights_MainFunction+0x344>
 8000e48:	4b59      	ldr	r3, [pc, #356]	; (8000fb0 <ExtLights_MainFunction+0x484>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	f241 3287 	movw	r2, #4999	; 0x1387
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d80a      	bhi.n	8000e70 <ExtLights_MainFunction+0x344>
		{
			ExtLights_TurnSignalRight(!CurrentState_TurnSignalRight);
 8000e5a:	4b57      	ldr	r3, [pc, #348]	; (8000fb8 <ExtLights_MainFunction+0x48c>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	bf0c      	ite	eq
 8000e62:	2301      	moveq	r3, #1
 8000e64:	2300      	movne	r3, #0
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f000 f9e3 	bl	8001234 <ExtLights_TurnSignalRight>
 8000e6e:	e03d      	b.n	8000eec <ExtLights_MainFunction+0x3c0>
		}
		else if((5000 < (__HAL_TIM_GET_COUNTER(&htim11) - TimeStampTurnSignals)) && ((__HAL_TIM_GET_COUNTER(&htim11) - TimeStampTurnSignals) < 7500))
 8000e70:	4b4f      	ldr	r3, [pc, #316]	; (8000fb0 <ExtLights_MainFunction+0x484>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d90e      	bls.n	8000ea0 <ExtLights_MainFunction+0x374>
 8000e82:	4b4b      	ldr	r3, [pc, #300]	; (8000fb0 <ExtLights_MainFunction+0x484>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e88:	88fb      	ldrh	r3, [r7, #6]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d805      	bhi.n	8000ea0 <ExtLights_MainFunction+0x374>
		{
			ExtLights_TurnSignalRight(CurrentState_TurnSignalRight);
 8000e94:	4b48      	ldr	r3, [pc, #288]	; (8000fb8 <ExtLights_MainFunction+0x48c>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f000 f9cb 	bl	8001234 <ExtLights_TurnSignalRight>
 8000e9e:	e025      	b.n	8000eec <ExtLights_MainFunction+0x3c0>
		}
		else if((7500 < (__HAL_TIM_GET_COUNTER(&htim11) - TimeStampTurnSignals)) && ((__HAL_TIM_GET_COUNTER(&htim11) - TimeStampTurnSignals) < 10000))
 8000ea0:	4b43      	ldr	r3, [pc, #268]	; (8000fb0 <ExtLights_MainFunction+0x484>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ea6:	88fb      	ldrh	r3, [r7, #6]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d91c      	bls.n	8000eec <ExtLights_MainFunction+0x3c0>
 8000eb2:	4b3f      	ldr	r3, [pc, #252]	; (8000fb0 <ExtLights_MainFunction+0x484>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000eb8:	88fb      	ldrh	r3, [r7, #6]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d813      	bhi.n	8000eec <ExtLights_MainFunction+0x3c0>
		{
			ExtLights_TurnSignalRight(!CurrentState_TurnSignalRight);
 8000ec4:	4b3c      	ldr	r3, [pc, #240]	; (8000fb8 <ExtLights_MainFunction+0x48c>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	bf0c      	ite	eq
 8000ecc:	2301      	moveq	r3, #1
 8000ece:	2300      	movne	r3, #0
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 f9ae 	bl	8001234 <ExtLights_TurnSignalRight>
 8000ed8:	e008      	b.n	8000eec <ExtLights_MainFunction+0x3c0>
		else
		{
			/* do nothing */
		}
	}
	else if(CurrentState_TurnSignalRight == STD_LOW)
 8000eda:	4b37      	ldr	r3, [pc, #220]	; (8000fb8 <ExtLights_MainFunction+0x48c>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d104      	bne.n	8000eec <ExtLights_MainFunction+0x3c0>
	{
		ExtLights_TurnSignalRight(CurrentState_TurnSignalRight);
 8000ee2:	4b35      	ldr	r3, [pc, #212]	; (8000fb8 <ExtLights_MainFunction+0x48c>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 f9a4 	bl	8001234 <ExtLights_TurnSignalRight>
	else
	{
		/* do nothing */
	}

	if(CurrentState_HazardLight == STD_HIGH)
 8000eec:	4b33      	ldr	r3, [pc, #204]	; (8000fbc <ExtLights_MainFunction+0x490>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	f040 808c 	bne.w	800100e <ExtLights_MainFunction+0x4e2>
	{
		TimeStampTurnSignals = __HAL_TIM_GET_COUNTER(&htim11);
 8000ef6:	4b2e      	ldr	r3, [pc, #184]	; (8000fb0 <ExtLights_MainFunction+0x484>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efc:	80fb      	strh	r3, [r7, #6]
		if(__HAL_TIM_GET_COUNTER(&htim11) - TimeStampTurnSignals < 2500)
 8000efe:	4b2c      	ldr	r3, [pc, #176]	; (8000fb0 <ExtLights_MainFunction+0x484>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f04:	88fb      	ldrh	r3, [r7, #6]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d80a      	bhi.n	8000f26 <ExtLights_MainFunction+0x3fa>
		{
			ExtLights_TurnSignalRight(CurrentState_HazardLight);
 8000f10:	4b2a      	ldr	r3, [pc, #168]	; (8000fbc <ExtLights_MainFunction+0x490>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 f98d 	bl	8001234 <ExtLights_TurnSignalRight>
			ExtLights_TurnSignalLeft(CurrentState_HazardLight);
 8000f1a:	4b28      	ldr	r3, [pc, #160]	; (8000fbc <ExtLights_MainFunction+0x490>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f976 	bl	8001210 <ExtLights_TurnSignalLeft>
 8000f24:	e081      	b.n	800102a <ExtLights_MainFunction+0x4fe>
		}
		else if((2500 < (__HAL_TIM_GET_COUNTER(&htim11) - TimeStampTurnSignals)) && ((__HAL_TIM_GET_COUNTER(&htim11) - TimeStampTurnSignals) < 5000))
 8000f26:	4b22      	ldr	r3, [pc, #136]	; (8000fb0 <ExtLights_MainFunction+0x484>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f2c:	88fb      	ldrh	r3, [r7, #6]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d91d      	bls.n	8000f74 <ExtLights_MainFunction+0x448>
 8000f38:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <ExtLights_MainFunction+0x484>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	f241 3287 	movw	r2, #4999	; 0x1387
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d814      	bhi.n	8000f74 <ExtLights_MainFunction+0x448>
		{
			ExtLights_TurnSignalRight(!CurrentState_HazardLight);
 8000f4a:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <ExtLights_MainFunction+0x490>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	bf0c      	ite	eq
 8000f52:	2301      	moveq	r3, #1
 8000f54:	2300      	movne	r3, #0
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f000 f96b 	bl	8001234 <ExtLights_TurnSignalRight>
			ExtLights_TurnSignalLeft(!CurrentState_HazardLight);
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <ExtLights_MainFunction+0x490>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	bf0c      	ite	eq
 8000f66:	2301      	moveq	r3, #1
 8000f68:	2300      	movne	r3, #0
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 f94f 	bl	8001210 <ExtLights_TurnSignalLeft>
 8000f72:	e05a      	b.n	800102a <ExtLights_MainFunction+0x4fe>
		}
		else if((5000 < (__HAL_TIM_GET_COUNTER(&htim11) - TimeStampTurnSignals)) && ((__HAL_TIM_GET_COUNTER(&htim11) - TimeStampTurnSignals) < 7500))
 8000f74:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <ExtLights_MainFunction+0x484>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f7a:	88fb      	ldrh	r3, [r7, #6]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d91c      	bls.n	8000fc0 <ExtLights_MainFunction+0x494>
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <ExtLights_MainFunction+0x484>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f8c:	88fb      	ldrh	r3, [r7, #6]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d813      	bhi.n	8000fc0 <ExtLights_MainFunction+0x494>
		{
			ExtLights_TurnSignalRight(CurrentState_HazardLight);
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <ExtLights_MainFunction+0x490>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f000 f949 	bl	8001234 <ExtLights_TurnSignalRight>
			ExtLights_TurnSignalLeft(CurrentState_HazardLight);
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <ExtLights_MainFunction+0x490>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 f932 	bl	8001210 <ExtLights_TurnSignalLeft>
 8000fac:	e03d      	b.n	800102a <ExtLights_MainFunction+0x4fe>
 8000fae:	bf00      	nop
 8000fb0:	20000094 	.word	0x20000094
 8000fb4:	20000031 	.word	0x20000031
 8000fb8:	20000030 	.word	0x20000030
 8000fbc:	20000035 	.word	0x20000035
		}
		else if((7500 < (__HAL_TIM_GET_COUNTER(&htim11) - TimeStampTurnSignals)) && ((__HAL_TIM_GET_COUNTER(&htim11) - TimeStampTurnSignals) < 10000))
 8000fc0:	4b2d      	ldr	r3, [pc, #180]	; (8001078 <ExtLights_MainFunction+0x54c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d92b      	bls.n	800102a <ExtLights_MainFunction+0x4fe>
 8000fd2:	4b29      	ldr	r3, [pc, #164]	; (8001078 <ExtLights_MainFunction+0x54c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	f242 720f 	movw	r2, #9999	; 0x270f
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d822      	bhi.n	800102a <ExtLights_MainFunction+0x4fe>
		{
			ExtLights_TurnSignalRight(!CurrentState_HazardLight);
 8000fe4:	4b25      	ldr	r3, [pc, #148]	; (800107c <ExtLights_MainFunction+0x550>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	bf0c      	ite	eq
 8000fec:	2301      	moveq	r3, #1
 8000fee:	2300      	movne	r3, #0
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f91e 	bl	8001234 <ExtLights_TurnSignalRight>
			ExtLights_TurnSignalLeft(!CurrentState_HazardLight);
 8000ff8:	4b20      	ldr	r3, [pc, #128]	; (800107c <ExtLights_MainFunction+0x550>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	bf0c      	ite	eq
 8001000:	2301      	moveq	r3, #1
 8001002:	2300      	movne	r3, #0
 8001004:	b2db      	uxtb	r3, r3
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f902 	bl	8001210 <ExtLights_TurnSignalLeft>
 800100c:	e00d      	b.n	800102a <ExtLights_MainFunction+0x4fe>
		else
		{
			/* do nothing */
		}
	}
	else if(CurrentState_HazardLight == STD_LOW)
 800100e:	4b1b      	ldr	r3, [pc, #108]	; (800107c <ExtLights_MainFunction+0x550>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d109      	bne.n	800102a <ExtLights_MainFunction+0x4fe>
	{
		ExtLights_TurnSignalRight(CurrentState_HazardLight);
 8001016:	4b19      	ldr	r3, [pc, #100]	; (800107c <ExtLights_MainFunction+0x550>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f000 f90a 	bl	8001234 <ExtLights_TurnSignalRight>
		ExtLights_TurnSignalLeft(CurrentState_HazardLight);
 8001020:	4b16      	ldr	r3, [pc, #88]	; (800107c <ExtLights_MainFunction+0x550>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f000 f8f3 	bl	8001210 <ExtLights_TurnSignalLeft>
	else
	{
		/* do nothing */
	}

	ExtLights_LowBeam(CurrentState_LowBeam);
 800102a:	4b15      	ldr	r3, [pc, #84]	; (8001080 <ExtLights_MainFunction+0x554>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f8a6 	bl	8001180 <ExtLights_LowBeam>
	ExtLights_HighBeam(CurrentState_HighBeam);
 8001034:	4b13      	ldr	r3, [pc, #76]	; (8001084 <ExtLights_MainFunction+0x558>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f000 f8b3 	bl	80011a4 <ExtLights_HighBeam>
	ExtLights_FogLightFront(CurrentState_FogLightFront);
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <ExtLights_MainFunction+0x55c>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	4618      	mov	r0, r3
 8001044:	f000 f8c0 	bl	80011c8 <ExtLights_FogLightFront>
	ExtLights_FogLightRear(CurrentState_FogLightRear);
 8001048:	4b10      	ldr	r3, [pc, #64]	; (800108c <ExtLights_MainFunction+0x560>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f000 f8cd 	bl	80011ec <ExtLights_FogLightRear>
	ExtLights_PositionLightRear(CurrentState_PositionLightRear);
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <ExtLights_MainFunction+0x564>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f8fe 	bl	8001258 <ExtLights_PositionLightRear>
	ExtLights_BrakeLight(CurrentState_BrakeLight);
 800105c:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <ExtLights_MainFunction+0x568>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f000 f90b 	bl	800127c <ExtLights_BrakeLight>
	ExtLights_ReverseLight(CurrentState_ReverseLight);
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <ExtLights_MainFunction+0x56c>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f000 f918 	bl	80012a0 <ExtLights_ReverseLight>
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000094 	.word	0x20000094
 800107c:	20000035 	.word	0x20000035
 8001080:	2000002c 	.word	0x2000002c
 8001084:	2000002d 	.word	0x2000002d
 8001088:	2000002e 	.word	0x2000002e
 800108c:	2000002f 	.word	0x2000002f
 8001090:	20000032 	.word	0x20000032
 8001094:	20000033 	.word	0x20000033
 8001098:	20000034 	.word	0x20000034

0800109c <ExtLights_Init>:

uint8_t ExtLights_Init()
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
	CurrentState_LowBeam = STD_LOW;
 80010a0:	4b22      	ldr	r3, [pc, #136]	; (800112c <ExtLights_Init+0x90>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
	CurrentState_HighBeam = STD_LOW;
 80010a6:	4b22      	ldr	r3, [pc, #136]	; (8001130 <ExtLights_Init+0x94>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
	CurrentState_FogLightFront = STD_LOW;
 80010ac:	4b21      	ldr	r3, [pc, #132]	; (8001134 <ExtLights_Init+0x98>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	701a      	strb	r2, [r3, #0]
	CurrentState_FogLightRear = STD_LOW;
 80010b2:	4b21      	ldr	r3, [pc, #132]	; (8001138 <ExtLights_Init+0x9c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]
	CurrentState_TurnSignalLeft = STD_LOW;
 80010b8:	4b20      	ldr	r3, [pc, #128]	; (800113c <ExtLights_Init+0xa0>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]
	CurrentState_TurnSignalRight = STD_LOW;
 80010be:	4b20      	ldr	r3, [pc, #128]	; (8001140 <ExtLights_Init+0xa4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
	CurrentState_PositionLightRear = STD_LOW;
 80010c4:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <ExtLights_Init+0xa8>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
	CurrentState_BrakeLight = STD_LOW;
 80010ca:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <ExtLights_Init+0xac>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]
	CurrentState_ReverseLight = STD_LOW;
 80010d0:	4b1e      	ldr	r3, [pc, #120]	; (800114c <ExtLights_Init+0xb0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
	CurrentState_HazardLight = STD_LOW;
 80010d6:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <ExtLights_Init+0xb4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
	BTLowBeam = STD_LOW;
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <ExtLights_Init+0xb8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
	BTHighBeam = STD_LOW;
 80010e2:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <ExtLights_Init+0xbc>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]
	BTFogLightFront = STD_LOW;
 80010e8:	4b1c      	ldr	r3, [pc, #112]	; (800115c <ExtLights_Init+0xc0>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
	BTFogLightRear = STD_LOW;
 80010ee:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <ExtLights_Init+0xc4>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
	BTPositionLightRear = STD_LOW;
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <ExtLights_Init+0xc8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
	BTBrakeLight = STD_LOW;
 80010fa:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <ExtLights_Init+0xcc>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
	BTReverseLight = STD_LOW;
 8001100:	4b1a      	ldr	r3, [pc, #104]	; (800116c <ExtLights_Init+0xd0>)
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
	BTTurnSignalRight = STD_LOW;
 8001106:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <ExtLights_Init+0xd4>)
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
	BTTurnSignalLeft = STD_LOW;
 800110c:	4b19      	ldr	r3, [pc, #100]	; (8001174 <ExtLights_Init+0xd8>)
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
	BTHazardLight = STD_LOW;
 8001112:	4b19      	ldr	r3, [pc, #100]	; (8001178 <ExtLights_Init+0xdc>)
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
	BTExtLight_IrqFlag = STD_LOW;
 8001118:	4b18      	ldr	r3, [pc, #96]	; (800117c <ExtLights_Init+0xe0>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]

	return E_OK;
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	2000002c 	.word	0x2000002c
 8001130:	2000002d 	.word	0x2000002d
 8001134:	2000002e 	.word	0x2000002e
 8001138:	2000002f 	.word	0x2000002f
 800113c:	20000031 	.word	0x20000031
 8001140:	20000030 	.word	0x20000030
 8001144:	20000032 	.word	0x20000032
 8001148:	20000033 	.word	0x20000033
 800114c:	20000034 	.word	0x20000034
 8001150:	20000035 	.word	0x20000035
 8001154:	20000036 	.word	0x20000036
 8001158:	20000037 	.word	0x20000037
 800115c:	20000038 	.word	0x20000038
 8001160:	20000039 	.word	0x20000039
 8001164:	2000003a 	.word	0x2000003a
 8001168:	2000003b 	.word	0x2000003b
 800116c:	2000003c 	.word	0x2000003c
 8001170:	2000003d 	.word	0x2000003d
 8001174:	2000003e 	.word	0x2000003e
 8001178:	2000003f 	.word	0x2000003f
 800117c:	20000040 	.word	0x20000040

08001180 <ExtLights_LowBeam>:


void ExtLights_LowBeam(uint8_t PinState)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, PinState);
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	461a      	mov	r2, r3
 800118e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001192:	4803      	ldr	r0, [pc, #12]	; (80011a0 <ExtLights_LowBeam+0x20>)
 8001194:	f001 f9a8 	bl	80024e8 <HAL_GPIO_WritePin>
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40020000 	.word	0x40020000

080011a4 <ExtLights_HighBeam>:

void ExtLights_HighBeam(uint8_t PinState)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, PinState);
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	461a      	mov	r2, r3
 80011b2:	2120      	movs	r1, #32
 80011b4:	4803      	ldr	r0, [pc, #12]	; (80011c4 <ExtLights_HighBeam+0x20>)
 80011b6:	f001 f997 	bl	80024e8 <HAL_GPIO_WritePin>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40020400 	.word	0x40020400

080011c8 <ExtLights_FogLightFront>:

void ExtLights_FogLightFront(uint8_t PinState)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, PinState);
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	461a      	mov	r2, r3
 80011d6:	2110      	movs	r1, #16
 80011d8:	4803      	ldr	r0, [pc, #12]	; (80011e8 <ExtLights_FogLightFront+0x20>)
 80011da:	f001 f985 	bl	80024e8 <HAL_GPIO_WritePin>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40020400 	.word	0x40020400

080011ec <ExtLights_FogLightRear>:

void ExtLights_FogLightRear(uint8_t PinState)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, PinState);
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	461a      	mov	r2, r3
 80011fa:	2120      	movs	r1, #32
 80011fc:	4803      	ldr	r0, [pc, #12]	; (800120c <ExtLights_FogLightRear+0x20>)
 80011fe:	f001 f973 	bl	80024e8 <HAL_GPIO_WritePin>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40020000 	.word	0x40020000

08001210 <ExtLights_TurnSignalLeft>:

void ExtLights_TurnSignalLeft(uint8_t PinState)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, PinState);
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	461a      	mov	r2, r3
 800121e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001222:	4803      	ldr	r0, [pc, #12]	; (8001230 <ExtLights_TurnSignalLeft+0x20>)
 8001224:	f001 f960 	bl	80024e8 <HAL_GPIO_WritePin>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40020000 	.word	0x40020000

08001234 <ExtLights_TurnSignalRight>:

void ExtLights_TurnSignalRight(uint8_t PinState)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, PinState);
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	461a      	mov	r2, r3
 8001242:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001246:	4803      	ldr	r0, [pc, #12]	; (8001254 <ExtLights_TurnSignalRight+0x20>)
 8001248:	f001 f94e 	bl	80024e8 <HAL_GPIO_WritePin>
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40020000 	.word	0x40020000

08001258 <ExtLights_PositionLightRear>:

void ExtLights_PositionLightRear(uint8_t PinState)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, PinState);
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	461a      	mov	r2, r3
 8001266:	2140      	movs	r1, #64	; 0x40
 8001268:	4803      	ldr	r0, [pc, #12]	; (8001278 <ExtLights_PositionLightRear+0x20>)
 800126a:	f001 f93d 	bl	80024e8 <HAL_GPIO_WritePin>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40020000 	.word	0x40020000

0800127c <ExtLights_BrakeLight>:

void ExtLights_BrakeLight(uint8_t PinState)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, PinState);
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	461a      	mov	r2, r3
 800128a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800128e:	4803      	ldr	r0, [pc, #12]	; (800129c <ExtLights_BrakeLight+0x20>)
 8001290:	f001 f92a 	bl	80024e8 <HAL_GPIO_WritePin>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40020400 	.word	0x40020400

080012a0 <ExtLights_ReverseLight>:

void ExtLights_ReverseLight(uint8_t PinState)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, PinState);
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	461a      	mov	r2, r3
 80012ae:	2180      	movs	r1, #128	; 0x80
 80012b0:	4803      	ldr	r0, [pc, #12]	; (80012c0 <ExtLights_ReverseLight+0x20>)
 80012b2:	f001 f919 	bl	80024e8 <HAL_GPIO_WritePin>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40020800 	.word	0x40020800

080012c4 <IntLights_MainFunction>:

uint8_t CurrentState_IntLights;
uint8_t BTIntLights;

void IntLights_MainFunction()
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	if(BTIntLights == STD_HIGH)
 80012c8:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <IntLights_MainFunction+0x30>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d103      	bne.n	80012d8 <IntLights_MainFunction+0x14>
	{
		CurrentState_IntLights = STD_HIGH;
 80012d0:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <IntLights_MainFunction+0x34>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	701a      	strb	r2, [r3, #0]
 80012d6:	e006      	b.n	80012e6 <IntLights_MainFunction+0x22>
	}
	else if(BTIntLights == STD_LOW)
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <IntLights_MainFunction+0x30>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d102      	bne.n	80012e6 <IntLights_MainFunction+0x22>
	{
		CurrentState_IntLights = STD_LOW;
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <IntLights_MainFunction+0x34>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	IntLights_Toggle_IntLights(CurrentState_IntLights);
 80012e6:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <IntLights_MainFunction+0x34>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 f818 	bl	8001320 <IntLights_Toggle_IntLights>
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000042 	.word	0x20000042
 80012f8:	20000041 	.word	0x20000041

080012fc <IntLights_Init>:

uint8_t IntLights_Init()
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
	CurrentState_IntLights = STD_LOW;
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <IntLights_Init+0x1c>)
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]
	BTIntLights = STD_LOW;
 8001306:	4b05      	ldr	r3, [pc, #20]	; (800131c <IntLights_Init+0x20>)
 8001308:	2200      	movs	r2, #0
 800130a:	701a      	strb	r2, [r3, #0]

	return E_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	20000041 	.word	0x20000041
 800131c:	20000042 	.word	0x20000042

08001320 <IntLights_Toggle_IntLights>:

void IntLights_Toggle_IntLights(uint8_t PinState)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, PinState);
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	461a      	mov	r2, r3
 800132e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001332:	4803      	ldr	r0, [pc, #12]	; (8001340 <IntLights_Toggle_IntLights+0x20>)
 8001334:	f001 f8d8 	bl	80024e8 <HAL_GPIO_WritePin>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40020400 	.word	0x40020400

08001344 <SecAlm_MainFunction>:
uint8_t AlarmCount1;
uint8_t AlarmCount2;
uint8_t SecAlmTrigger;

void SecAlm_MainFunction()
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
	uint16_t TimeStampSecAlm = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	80fb      	strh	r3, [r7, #6]

	if(SecAlmTrigger == STD_HIGH)
 800134e:	4b9f      	ldr	r3, [pc, #636]	; (80015cc <SecAlm_MainFunction+0x288>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b01      	cmp	r3, #1
 8001354:	f040 813e 	bne.w	80015d4 <SecAlm_MainFunction+0x290>
	{
		TimeStampSecAlm = __HAL_TIM_GET_COUNTER(&htim11);
 8001358:	4b9d      	ldr	r3, [pc, #628]	; (80015d0 <SecAlm_MainFunction+0x28c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135e:	80fb      	strh	r3, [r7, #6]

		if(__HAL_TIM_GET_COUNTER(&htim11) - TimeStampSecAlm < 5000)
 8001360:	4b9b      	ldr	r3, [pc, #620]	; (80015d0 <SecAlm_MainFunction+0x28c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001366:	88fb      	ldrh	r3, [r7, #6]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	f241 3287 	movw	r2, #4999	; 0x1387
 800136e:	4293      	cmp	r3, r2
 8001370:	d828      	bhi.n	80013c4 <SecAlm_MainFunction+0x80>
		{
			SecAlm_ToggleAlarmBuzzer(SecAlmTrigger);
 8001372:	4b96      	ldr	r3, [pc, #600]	; (80015cc <SecAlm_MainFunction+0x288>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f000 f990 	bl	800169c <SecAlm_ToggleAlarmBuzzer>
			SecAlm_ToggleAlarmLed(SecAlmTrigger);
 800137c:	4b93      	ldr	r3, [pc, #588]	; (80015cc <SecAlm_MainFunction+0x288>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f000 f99d 	bl	80016c0 <SecAlm_ToggleAlarmLed>
			ExtLights_LowBeam(SecAlmTrigger);
 8001386:	4b91      	ldr	r3, [pc, #580]	; (80015cc <SecAlm_MainFunction+0x288>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fef8 	bl	8001180 <ExtLights_LowBeam>
			ExtLights_PositionLightRear(SecAlmTrigger);
 8001390:	4b8e      	ldr	r3, [pc, #568]	; (80015cc <SecAlm_MainFunction+0x288>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff5f 	bl	8001258 <ExtLights_PositionLightRear>
			ExtLights_FogLightFront(SecAlmTrigger);
 800139a:	4b8c      	ldr	r3, [pc, #560]	; (80015cc <SecAlm_MainFunction+0x288>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ff12 	bl	80011c8 <ExtLights_FogLightFront>
			ExtLights_FogLightRear(SecAlmTrigger);
 80013a4:	4b89      	ldr	r3, [pc, #548]	; (80015cc <SecAlm_MainFunction+0x288>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff1f 	bl	80011ec <ExtLights_FogLightRear>
			ExtLights_TurnSignalRight(SecAlmTrigger);
 80013ae:	4b87      	ldr	r3, [pc, #540]	; (80015cc <SecAlm_MainFunction+0x288>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff ff3e 	bl	8001234 <ExtLights_TurnSignalRight>
			ExtLights_TurnSignalLeft(SecAlmTrigger);
 80013b8:	4b84      	ldr	r3, [pc, #528]	; (80015cc <SecAlm_MainFunction+0x288>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff27 	bl	8001210 <ExtLights_TurnSignalLeft>
		ExtLights_FogLightFront(SecAlmTrigger);
		ExtLights_FogLightRear(SecAlmTrigger);
		ExtLights_TurnSignalRight(SecAlmTrigger);
		ExtLights_TurnSignalLeft(SecAlmTrigger);
	}
}
 80013c2:	e134      	b.n	800162e <SecAlm_MainFunction+0x2ea>
		else if((5000 < (__HAL_TIM_GET_COUNTER(&htim11) - TimeStampSecAlm)) && ((__HAL_TIM_GET_COUNTER(&htim11) - TimeStampSecAlm) < 10000))
 80013c4:	4b82      	ldr	r3, [pc, #520]	; (80015d0 <SecAlm_MainFunction+0x28c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d959      	bls.n	800148a <SecAlm_MainFunction+0x146>
 80013d6:	4b7e      	ldr	r3, [pc, #504]	; (80015d0 <SecAlm_MainFunction+0x28c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	f242 720f 	movw	r2, #9999	; 0x270f
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d850      	bhi.n	800148a <SecAlm_MainFunction+0x146>
			SecAlm_ToggleAlarmBuzzer(!SecAlmTrigger);
 80013e8:	4b78      	ldr	r3, [pc, #480]	; (80015cc <SecAlm_MainFunction+0x288>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	bf0c      	ite	eq
 80013f0:	2301      	moveq	r3, #1
 80013f2:	2300      	movne	r3, #0
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 f950 	bl	800169c <SecAlm_ToggleAlarmBuzzer>
			SecAlm_ToggleAlarmLed(!SecAlmTrigger);
 80013fc:	4b73      	ldr	r3, [pc, #460]	; (80015cc <SecAlm_MainFunction+0x288>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	bf0c      	ite	eq
 8001404:	2301      	moveq	r3, #1
 8001406:	2300      	movne	r3, #0
 8001408:	b2db      	uxtb	r3, r3
 800140a:	4618      	mov	r0, r3
 800140c:	f000 f958 	bl	80016c0 <SecAlm_ToggleAlarmLed>
			ExtLights_LowBeam(!SecAlmTrigger);
 8001410:	4b6e      	ldr	r3, [pc, #440]	; (80015cc <SecAlm_MainFunction+0x288>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	bf0c      	ite	eq
 8001418:	2301      	moveq	r3, #1
 800141a:	2300      	movne	r3, #0
 800141c:	b2db      	uxtb	r3, r3
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff feae 	bl	8001180 <ExtLights_LowBeam>
			ExtLights_PositionLightRear(!SecAlmTrigger);
 8001424:	4b69      	ldr	r3, [pc, #420]	; (80015cc <SecAlm_MainFunction+0x288>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	bf0c      	ite	eq
 800142c:	2301      	moveq	r3, #1
 800142e:	2300      	movne	r3, #0
 8001430:	b2db      	uxtb	r3, r3
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff ff10 	bl	8001258 <ExtLights_PositionLightRear>
			ExtLights_FogLightFront(!SecAlmTrigger);
 8001438:	4b64      	ldr	r3, [pc, #400]	; (80015cc <SecAlm_MainFunction+0x288>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	bf0c      	ite	eq
 8001440:	2301      	moveq	r3, #1
 8001442:	2300      	movne	r3, #0
 8001444:	b2db      	uxtb	r3, r3
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff febe 	bl	80011c8 <ExtLights_FogLightFront>
			ExtLights_FogLightRear(!SecAlmTrigger);
 800144c:	4b5f      	ldr	r3, [pc, #380]	; (80015cc <SecAlm_MainFunction+0x288>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	bf0c      	ite	eq
 8001454:	2301      	moveq	r3, #1
 8001456:	2300      	movne	r3, #0
 8001458:	b2db      	uxtb	r3, r3
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fec6 	bl	80011ec <ExtLights_FogLightRear>
			ExtLights_TurnSignalRight(!SecAlmTrigger);
 8001460:	4b5a      	ldr	r3, [pc, #360]	; (80015cc <SecAlm_MainFunction+0x288>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	bf0c      	ite	eq
 8001468:	2301      	moveq	r3, #1
 800146a:	2300      	movne	r3, #0
 800146c:	b2db      	uxtb	r3, r3
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fee0 	bl	8001234 <ExtLights_TurnSignalRight>
			ExtLights_TurnSignalLeft(!SecAlmTrigger);
 8001474:	4b55      	ldr	r3, [pc, #340]	; (80015cc <SecAlm_MainFunction+0x288>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	bf0c      	ite	eq
 800147c:	2301      	moveq	r3, #1
 800147e:	2300      	movne	r3, #0
 8001480:	b2db      	uxtb	r3, r3
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fec4 	bl	8001210 <ExtLights_TurnSignalLeft>
 8001488:	e0d1      	b.n	800162e <SecAlm_MainFunction+0x2ea>
		else if((10000 < (__HAL_TIM_GET_COUNTER(&htim11) - TimeStampSecAlm)) && ((__HAL_TIM_GET_COUNTER(&htim11) - TimeStampSecAlm) < 15000))
 800148a:	4b51      	ldr	r3, [pc, #324]	; (80015d0 <SecAlm_MainFunction+0x28c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	f242 7210 	movw	r2, #10000	; 0x2710
 8001498:	4293      	cmp	r3, r2
 800149a:	d931      	bls.n	8001500 <SecAlm_MainFunction+0x1bc>
 800149c:	4b4c      	ldr	r3, [pc, #304]	; (80015d0 <SecAlm_MainFunction+0x28c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014a2:	88fb      	ldrh	r3, [r7, #6]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	f643 2297 	movw	r2, #14999	; 0x3a97
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d828      	bhi.n	8001500 <SecAlm_MainFunction+0x1bc>
			SecAlm_ToggleAlarmBuzzer(SecAlmTrigger);
 80014ae:	4b47      	ldr	r3, [pc, #284]	; (80015cc <SecAlm_MainFunction+0x288>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 f8f2 	bl	800169c <SecAlm_ToggleAlarmBuzzer>
			SecAlm_ToggleAlarmLed(SecAlmTrigger);
 80014b8:	4b44      	ldr	r3, [pc, #272]	; (80015cc <SecAlm_MainFunction+0x288>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 f8ff 	bl	80016c0 <SecAlm_ToggleAlarmLed>
			ExtLights_LowBeam(SecAlmTrigger);
 80014c2:	4b42      	ldr	r3, [pc, #264]	; (80015cc <SecAlm_MainFunction+0x288>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fe5a 	bl	8001180 <ExtLights_LowBeam>
			ExtLights_PositionLightRear(SecAlmTrigger);
 80014cc:	4b3f      	ldr	r3, [pc, #252]	; (80015cc <SecAlm_MainFunction+0x288>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fec1 	bl	8001258 <ExtLights_PositionLightRear>
			ExtLights_FogLightFront(SecAlmTrigger);
 80014d6:	4b3d      	ldr	r3, [pc, #244]	; (80015cc <SecAlm_MainFunction+0x288>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fe74 	bl	80011c8 <ExtLights_FogLightFront>
			ExtLights_FogLightRear(SecAlmTrigger);
 80014e0:	4b3a      	ldr	r3, [pc, #232]	; (80015cc <SecAlm_MainFunction+0x288>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fe81 	bl	80011ec <ExtLights_FogLightRear>
			ExtLights_TurnSignalRight(SecAlmTrigger);
 80014ea:	4b38      	ldr	r3, [pc, #224]	; (80015cc <SecAlm_MainFunction+0x288>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fea0 	bl	8001234 <ExtLights_TurnSignalRight>
			ExtLights_TurnSignalLeft(SecAlmTrigger);
 80014f4:	4b35      	ldr	r3, [pc, #212]	; (80015cc <SecAlm_MainFunction+0x288>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fe89 	bl	8001210 <ExtLights_TurnSignalLeft>
 80014fe:	e096      	b.n	800162e <SecAlm_MainFunction+0x2ea>
		else if((15000 < (__HAL_TIM_GET_COUNTER(&htim11) - TimeStampSecAlm)) && ((__HAL_TIM_GET_COUNTER(&htim11) - TimeStampSecAlm) < 20000))
 8001500:	4b33      	ldr	r3, [pc, #204]	; (80015d0 <SecAlm_MainFunction+0x28c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001506:	88fb      	ldrh	r3, [r7, #6]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	f643 2298 	movw	r2, #15000	; 0x3a98
 800150e:	4293      	cmp	r3, r2
 8001510:	f240 808d 	bls.w	800162e <SecAlm_MainFunction+0x2ea>
 8001514:	4b2e      	ldr	r3, [pc, #184]	; (80015d0 <SecAlm_MainFunction+0x28c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800151a:	88fb      	ldrh	r3, [r7, #6]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001522:	4293      	cmp	r3, r2
 8001524:	f200 8083 	bhi.w	800162e <SecAlm_MainFunction+0x2ea>
			SecAlm_ToggleAlarmBuzzer(!SecAlmTrigger);
 8001528:	4b28      	ldr	r3, [pc, #160]	; (80015cc <SecAlm_MainFunction+0x288>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	bf0c      	ite	eq
 8001530:	2301      	moveq	r3, #1
 8001532:	2300      	movne	r3, #0
 8001534:	b2db      	uxtb	r3, r3
 8001536:	4618      	mov	r0, r3
 8001538:	f000 f8b0 	bl	800169c <SecAlm_ToggleAlarmBuzzer>
			SecAlm_ToggleAlarmLed(!SecAlmTrigger);
 800153c:	4b23      	ldr	r3, [pc, #140]	; (80015cc <SecAlm_MainFunction+0x288>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	bf0c      	ite	eq
 8001544:	2301      	moveq	r3, #1
 8001546:	2300      	movne	r3, #0
 8001548:	b2db      	uxtb	r3, r3
 800154a:	4618      	mov	r0, r3
 800154c:	f000 f8b8 	bl	80016c0 <SecAlm_ToggleAlarmLed>
			ExtLights_LowBeam(!SecAlmTrigger);
 8001550:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <SecAlm_MainFunction+0x288>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	bf0c      	ite	eq
 8001558:	2301      	moveq	r3, #1
 800155a:	2300      	movne	r3, #0
 800155c:	b2db      	uxtb	r3, r3
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fe0e 	bl	8001180 <ExtLights_LowBeam>
			ExtLights_PositionLightRear(!SecAlmTrigger);
 8001564:	4b19      	ldr	r3, [pc, #100]	; (80015cc <SecAlm_MainFunction+0x288>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	bf0c      	ite	eq
 800156c:	2301      	moveq	r3, #1
 800156e:	2300      	movne	r3, #0
 8001570:	b2db      	uxtb	r3, r3
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fe70 	bl	8001258 <ExtLights_PositionLightRear>
			ExtLights_FogLightFront(!SecAlmTrigger);
 8001578:	4b14      	ldr	r3, [pc, #80]	; (80015cc <SecAlm_MainFunction+0x288>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	bf0c      	ite	eq
 8001580:	2301      	moveq	r3, #1
 8001582:	2300      	movne	r3, #0
 8001584:	b2db      	uxtb	r3, r3
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fe1e 	bl	80011c8 <ExtLights_FogLightFront>
			ExtLights_FogLightRear(!SecAlmTrigger);
 800158c:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <SecAlm_MainFunction+0x288>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	bf0c      	ite	eq
 8001594:	2301      	moveq	r3, #1
 8001596:	2300      	movne	r3, #0
 8001598:	b2db      	uxtb	r3, r3
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff fe26 	bl	80011ec <ExtLights_FogLightRear>
			ExtLights_TurnSignalRight(!SecAlmTrigger);
 80015a0:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <SecAlm_MainFunction+0x288>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	bf0c      	ite	eq
 80015a8:	2301      	moveq	r3, #1
 80015aa:	2300      	movne	r3, #0
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fe40 	bl	8001234 <ExtLights_TurnSignalRight>
			ExtLights_TurnSignalLeft(!SecAlmTrigger);
 80015b4:	4b05      	ldr	r3, [pc, #20]	; (80015cc <SecAlm_MainFunction+0x288>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	bf0c      	ite	eq
 80015bc:	2301      	moveq	r3, #1
 80015be:	2300      	movne	r3, #0
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fe24 	bl	8001210 <ExtLights_TurnSignalLeft>
}
 80015c8:	e031      	b.n	800162e <SecAlm_MainFunction+0x2ea>
 80015ca:	bf00      	nop
 80015cc:	2000004a 	.word	0x2000004a
 80015d0:	20000094 	.word	0x20000094
	else if(SecAlmTrigger == STD_LOW)
 80015d4:	4b18      	ldr	r3, [pc, #96]	; (8001638 <SecAlm_MainFunction+0x2f4>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d128      	bne.n	800162e <SecAlm_MainFunction+0x2ea>
		SecAlm_ToggleAlarmBuzzer(SecAlmTrigger);
 80015dc:	4b16      	ldr	r3, [pc, #88]	; (8001638 <SecAlm_MainFunction+0x2f4>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 f85b 	bl	800169c <SecAlm_ToggleAlarmBuzzer>
		SecAlm_ToggleAlarmLed(SecAlmTrigger);
 80015e6:	4b14      	ldr	r3, [pc, #80]	; (8001638 <SecAlm_MainFunction+0x2f4>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f868 	bl	80016c0 <SecAlm_ToggleAlarmLed>
		ExtLights_LowBeam(SecAlmTrigger);
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <SecAlm_MainFunction+0x2f4>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fdc3 	bl	8001180 <ExtLights_LowBeam>
		ExtLights_PositionLightRear(SecAlmTrigger);
 80015fa:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <SecAlm_MainFunction+0x2f4>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fe2a 	bl	8001258 <ExtLights_PositionLightRear>
		ExtLights_FogLightFront(SecAlmTrigger);
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <SecAlm_MainFunction+0x2f4>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fddd 	bl	80011c8 <ExtLights_FogLightFront>
		ExtLights_FogLightRear(SecAlmTrigger);
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <SecAlm_MainFunction+0x2f4>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fdea 	bl	80011ec <ExtLights_FogLightRear>
		ExtLights_TurnSignalRight(SecAlmTrigger);
 8001618:	4b07      	ldr	r3, [pc, #28]	; (8001638 <SecAlm_MainFunction+0x2f4>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fe09 	bl	8001234 <ExtLights_TurnSignalRight>
		ExtLights_TurnSignalLeft(SecAlmTrigger);
 8001622:	4b05      	ldr	r3, [pc, #20]	; (8001638 <SecAlm_MainFunction+0x2f4>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff fdf2 	bl	8001210 <ExtLights_TurnSignalLeft>
}
 800162c:	e7ff      	b.n	800162e <SecAlm_MainFunction+0x2ea>
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	2000004a 	.word	0x2000004a

0800163c <SecAlm_Init>:

uint8_t SecAlm_Init()
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
	PrevState_UserButton = STD_LOW;
 8001640:	4b0e      	ldr	r3, [pc, #56]	; (800167c <SecAlm_Init+0x40>)
 8001642:	2200      	movs	r2, #0
 8001644:	701a      	strb	r2, [r3, #0]
	NextState_UserButton = STD_LOW;
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <SecAlm_Init+0x44>)
 8001648:	2200      	movs	r2, #0
 800164a:	701a      	strb	r2, [r3, #0]
	CurrentState_UserButton = STD_LOW;
 800164c:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <SecAlm_Init+0x48>)
 800164e:	2200      	movs	r2, #0
 8001650:	701a      	strb	r2, [r3, #0]
	CurrentState_Alarm_Buzzer = STD_LOW;
 8001652:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <SecAlm_Init+0x4c>)
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
	CurrentState_Alarm_LED = STD_LOW;
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <SecAlm_Init+0x50>)
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
	AlarmCount1 = STD_LOW;
 800165e:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <SecAlm_Init+0x54>)
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
	AlarmCount2 = STD_LOW;
 8001664:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <SecAlm_Init+0x58>)
 8001666:	2200      	movs	r2, #0
 8001668:	701a      	strb	r2, [r3, #0]
	SecAlmTrigger = STD_LOW;
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <SecAlm_Init+0x5c>)
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]

	return E_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	20000043 	.word	0x20000043
 8001680:	20000044 	.word	0x20000044
 8001684:	20000045 	.word	0x20000045
 8001688:	20000046 	.word	0x20000046
 800168c:	20000047 	.word	0x20000047
 8001690:	20000048 	.word	0x20000048
 8001694:	20000049 	.word	0x20000049
 8001698:	2000004a 	.word	0x2000004a

0800169c <SecAlm_ToggleAlarmBuzzer>:

void SecAlm_ToggleAlarmBuzzer(uint8_t PinState)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, PinState);
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	461a      	mov	r2, r3
 80016aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016ae:	4803      	ldr	r0, [pc, #12]	; (80016bc <SecAlm_ToggleAlarmBuzzer+0x20>)
 80016b0:	f000 ff1a 	bl	80024e8 <HAL_GPIO_WritePin>
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40020400 	.word	0x40020400

080016c0 <SecAlm_ToggleAlarmLed>:

void SecAlm_ToggleAlarmLed(uint8_t PinState)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, PinState);
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	461a      	mov	r2, r3
 80016ce:	2180      	movs	r1, #128	; 0x80
 80016d0:	4803      	ldr	r0, [pc, #12]	; (80016e0 <SecAlm_ToggleAlarmLed+0x20>)
 80016d2:	f000 ff09 	bl	80024e8 <HAL_GPIO_WritePin>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40020000 	.word	0x40020000

080016e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	; 0x28
 80016e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]
 80016f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	4b42      	ldr	r3, [pc, #264]	; (8001808 <MX_GPIO_Init+0x124>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4a41      	ldr	r2, [pc, #260]	; (8001808 <MX_GPIO_Init+0x124>)
 8001704:	f043 0304 	orr.w	r3, r3, #4
 8001708:	6313      	str	r3, [r2, #48]	; 0x30
 800170a:	4b3f      	ldr	r3, [pc, #252]	; (8001808 <MX_GPIO_Init+0x124>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f003 0304 	and.w	r3, r3, #4
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	4b3b      	ldr	r3, [pc, #236]	; (8001808 <MX_GPIO_Init+0x124>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a3a      	ldr	r2, [pc, #232]	; (8001808 <MX_GPIO_Init+0x124>)
 8001720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b38      	ldr	r3, [pc, #224]	; (8001808 <MX_GPIO_Init+0x124>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	4b34      	ldr	r3, [pc, #208]	; (8001808 <MX_GPIO_Init+0x124>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a33      	ldr	r2, [pc, #204]	; (8001808 <MX_GPIO_Init+0x124>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b31      	ldr	r3, [pc, #196]	; (8001808 <MX_GPIO_Init+0x124>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	4b2d      	ldr	r3, [pc, #180]	; (8001808 <MX_GPIO_Init+0x124>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a2c      	ldr	r2, [pc, #176]	; (8001808 <MX_GPIO_Init+0x124>)
 8001758:	f043 0302 	orr.w	r3, r3, #2
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b2a      	ldr	r3, [pc, #168]	; (8001808 <MX_GPIO_Init+0x124>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin
 800176a:	2200      	movs	r2, #0
 800176c:	f240 71f3 	movw	r1, #2035	; 0x7f3
 8001770:	4826      	ldr	r0, [pc, #152]	; (800180c <MX_GPIO_Init+0x128>)
 8001772:	f000 feb9 	bl	80024e8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5
 8001776:	2200      	movs	r2, #0
 8001778:	f240 7171 	movw	r1, #1905	; 0x771
 800177c:	4824      	ldr	r0, [pc, #144]	; (8001810 <MX_GPIO_Init+0x12c>)
 800177e:	f000 feb3 	bl	80024e8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001782:	2200      	movs	r2, #0
 8001784:	2180      	movs	r1, #128	; 0x80
 8001786:	4823      	ldr	r0, [pc, #140]	; (8001814 <MX_GPIO_Init+0x130>)
 8001788:	f000 feae 	bl	80024e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800178c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001792:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	4619      	mov	r1, r3
 80017a2:	481c      	ldr	r0, [pc, #112]	; (8001814 <MX_GPIO_Init+0x130>)
 80017a4:	f000 fd1c 	bl	80021e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PAPin
                           PA6 PA7 PA8 PA9
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin
 80017a8:	f240 73f3 	movw	r3, #2035	; 0x7f3
 80017ac:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ae:	2301      	movs	r3, #1
 80017b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	2300      	movs	r3, #0
 80017b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4619      	mov	r1, r3
 80017c0:	4812      	ldr	r0, [pc, #72]	; (800180c <MX_GPIO_Init+0x128>)
 80017c2:	f000 fd0d 	bl	80021e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB4 PB5
                           PB6 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5
 80017c6:	f240 7371 	movw	r3, #1905	; 0x771
 80017ca:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017cc:	2301      	movs	r3, #1
 80017ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d4:	2300      	movs	r3, #0
 80017d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4619      	mov	r1, r3
 80017de:	480c      	ldr	r0, [pc, #48]	; (8001810 <MX_GPIO_Init+0x12c>)
 80017e0:	f000 fcfe 	bl	80021e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017e4:	2380      	movs	r3, #128	; 0x80
 80017e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e8:	2301      	movs	r3, #1
 80017ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f0:	2300      	movs	r3, #0
 80017f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	4619      	mov	r1, r3
 80017fa:	4806      	ldr	r0, [pc, #24]	; (8001814 <MX_GPIO_Init+0x130>)
 80017fc:	f000 fcf0 	bl	80021e0 <HAL_GPIO_Init>

}
 8001800:	bf00      	nop
 8001802:	3728      	adds	r7, #40	; 0x28
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40023800 	.word	0x40023800
 800180c:	40020000 	.word	0x40020000
 8001810:	40020400 	.word	0x40020400
 8001814:	40020800 	.word	0x40020800

08001818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800181c:	f000 fb2a 	bl	8001e74 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_TIM_Base_Start(&htim11);
 8001820:	480f      	ldr	r0, [pc, #60]	; (8001860 <main+0x48>)
 8001822:	f001 fb95 	bl	8002f50 <HAL_TIM_Base_Start>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001826:	f000 f81d 	bl	8001864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800182a:	f7ff ff5b 	bl	80016e4 <MX_GPIO_Init>
  MX_TIM11_Init();
 800182e:	f000 f9bb 	bl	8001ba8 <MX_TIM11_Init>
  MX_USART1_UART_Init();
 8001832:	f000 fa05 	bl	8001c40 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001836:	f000 fa2d 	bl	8001c94 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800183a:	f000 f87b 	bl	8001934 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  CenLoc_Init();
 800183e:	f7ff f94b 	bl	8000ad8 <CenLoc_Init>
  SecAlm_Init();
 8001842:	f7ff fefb 	bl	800163c <SecAlm_Init>
  ExtLights_Init();
 8001846:	f7ff fc29 	bl	800109c <ExtLights_Init>
  IntLights_Init();
 800184a:	f7ff fd57 	bl	80012fc <IntLights_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  CenLoc_MainFunction();
 800184e:	f7fe fe45 	bl	80004dc <CenLoc_MainFunction>
	  SecAlm_MainFunction();
 8001852:	f7ff fd77 	bl	8001344 <SecAlm_MainFunction>
	  ExtLights_MainFunction();
 8001856:	f7ff f969 	bl	8000b2c <ExtLights_MainFunction>
	  IntLights_MainFunction();
 800185a:	f7ff fd33 	bl	80012c4 <IntLights_MainFunction>
	  CenLoc_MainFunction();
 800185e:	e7f6      	b.n	800184e <main+0x36>
 8001860:	20000094 	.word	0x20000094

08001864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b094      	sub	sp, #80	; 0x50
 8001868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800186a:	f107 0320 	add.w	r3, r7, #32
 800186e:	2230      	movs	r2, #48	; 0x30
 8001870:	2100      	movs	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f002 fd24 	bl	80042c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001878:	f107 030c 	add.w	r3, r7, #12
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001888:	2300      	movs	r3, #0
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	4b27      	ldr	r3, [pc, #156]	; (800192c <SystemClock_Config+0xc8>)
 800188e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001890:	4a26      	ldr	r2, [pc, #152]	; (800192c <SystemClock_Config+0xc8>)
 8001892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001896:	6413      	str	r3, [r2, #64]	; 0x40
 8001898:	4b24      	ldr	r3, [pc, #144]	; (800192c <SystemClock_Config+0xc8>)
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018a4:	2300      	movs	r3, #0
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	4b21      	ldr	r3, [pc, #132]	; (8001930 <SystemClock_Config+0xcc>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a20      	ldr	r2, [pc, #128]	; (8001930 <SystemClock_Config+0xcc>)
 80018ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <SystemClock_Config+0xcc>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018c0:	2301      	movs	r3, #1
 80018c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ca:	2302      	movs	r3, #2
 80018cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018d4:	2304      	movs	r3, #4
 80018d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80018d8:	2364      	movs	r3, #100	; 0x64
 80018da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018dc:	2302      	movs	r3, #2
 80018de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018e0:	2304      	movs	r3, #4
 80018e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018e4:	f107 0320 	add.w	r3, r7, #32
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 fe17 	bl	800251c <HAL_RCC_OscConfig>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018f4:	f000 f84c 	bl	8001990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018f8:	230f      	movs	r3, #15
 80018fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018fc:	2302      	movs	r3, #2
 80018fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001908:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800190e:	f107 030c 	add.w	r3, r7, #12
 8001912:	2103      	movs	r1, #3
 8001914:	4618      	mov	r0, r3
 8001916:	f001 f879 	bl	8002a0c <HAL_RCC_ClockConfig>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001920:	f000 f836 	bl	8001990 <Error_Handler>
  }
}
 8001924:	bf00      	nop
 8001926:	3750      	adds	r7, #80	; 0x50
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40023800 	.word	0x40023800
 8001930:	40007000 	.word	0x40007000

08001934 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001938:	2200      	movs	r2, #0
 800193a:	2100      	movs	r1, #0
 800193c:	2005      	movs	r0, #5
 800193e:	f000 fb93 	bl	8002068 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001942:	2005      	movs	r0, #5
 8001944:	f000 fbac 	bl	80020a0 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001948:	2200      	movs	r2, #0
 800194a:	2100      	movs	r1, #0
 800194c:	2025      	movs	r0, #37	; 0x25
 800194e:	f000 fb8b 	bl	8002068 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001952:	2025      	movs	r0, #37	; 0x25
 8001954:	f000 fba4 	bl	80020a0 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001958:	2200      	movs	r2, #0
 800195a:	2100      	movs	r1, #0
 800195c:	2026      	movs	r0, #38	; 0x26
 800195e:	f000 fb83 	bl	8002068 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001962:	2026      	movs	r0, #38	; 0x26
 8001964:	f000 fb9c 	bl	80020a0 <HAL_NVIC_EnableIRQ>
}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a04      	ldr	r2, [pc, #16]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d101      	bne.n	8001982 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800197e:	f000 fa9b 	bl	8001eb8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40010000 	.word	0x40010000

08001990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001994:	b672      	cpsid	i
}
 8001996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001998:	e7fe      	b.n	8001998 <Error_Handler+0x8>
	...

0800199c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <HAL_MspInit+0x4c>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019aa:	4a0f      	ldr	r2, [pc, #60]	; (80019e8 <HAL_MspInit+0x4c>)
 80019ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b0:	6453      	str	r3, [r2, #68]	; 0x44
 80019b2:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <HAL_MspInit+0x4c>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	603b      	str	r3, [r7, #0]
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <HAL_MspInit+0x4c>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	4a08      	ldr	r2, [pc, #32]	; (80019e8 <HAL_MspInit+0x4c>)
 80019c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019cc:	6413      	str	r3, [r2, #64]	; 0x40
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_MspInit+0x4c>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019da:	2007      	movs	r0, #7
 80019dc:	f000 fb39 	bl	8002052 <HAL_NVIC_SetPriorityGrouping>
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40023800 	.word	0x40023800

080019ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08c      	sub	sp, #48	; 0x30
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80019fc:	2300      	movs	r3, #0
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	4b2e      	ldr	r3, [pc, #184]	; (8001abc <HAL_InitTick+0xd0>)
 8001a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a04:	4a2d      	ldr	r2, [pc, #180]	; (8001abc <HAL_InitTick+0xd0>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0c:	4b2b      	ldr	r3, [pc, #172]	; (8001abc <HAL_InitTick+0xd0>)
 8001a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a18:	f107 020c 	add.w	r2, r7, #12
 8001a1c:	f107 0310 	add.w	r3, r7, #16
 8001a20:	4611      	mov	r1, r2
 8001a22:	4618      	mov	r0, r3
 8001a24:	f001 fa12 	bl	8002e4c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001a28:	f001 f9fc 	bl	8002e24 <HAL_RCC_GetPCLK2Freq>
 8001a2c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a30:	4a23      	ldr	r2, [pc, #140]	; (8001ac0 <HAL_InitTick+0xd4>)
 8001a32:	fba2 2303 	umull	r2, r3, r2, r3
 8001a36:	0c9b      	lsrs	r3, r3, #18
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001a3c:	4b21      	ldr	r3, [pc, #132]	; (8001ac4 <HAL_InitTick+0xd8>)
 8001a3e:	4a22      	ldr	r2, [pc, #136]	; (8001ac8 <HAL_InitTick+0xdc>)
 8001a40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001a42:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <HAL_InitTick+0xd8>)
 8001a44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a48:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001a4a:	4a1e      	ldr	r2, [pc, #120]	; (8001ac4 <HAL_InitTick+0xd8>)
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001a50:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <HAL_InitTick+0xd8>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a56:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <HAL_InitTick+0xd8>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a5c:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <HAL_InitTick+0xd8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001a62:	4818      	ldr	r0, [pc, #96]	; (8001ac4 <HAL_InitTick+0xd8>)
 8001a64:	f001 fa24 	bl	8002eb0 <HAL_TIM_Base_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001a6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d11b      	bne.n	8001aae <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001a76:	4813      	ldr	r0, [pc, #76]	; (8001ac4 <HAL_InitTick+0xd8>)
 8001a78:	f001 fac4 	bl	8003004 <HAL_TIM_Base_Start_IT>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001a82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d111      	bne.n	8001aae <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001a8a:	2019      	movs	r0, #25
 8001a8c:	f000 fb08 	bl	80020a0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b0f      	cmp	r3, #15
 8001a94:	d808      	bhi.n	8001aa8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001a96:	2200      	movs	r2, #0
 8001a98:	6879      	ldr	r1, [r7, #4]
 8001a9a:	2019      	movs	r0, #25
 8001a9c:	f000 fae4 	bl	8002068 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001aa0:	4a0a      	ldr	r2, [pc, #40]	; (8001acc <HAL_InitTick+0xe0>)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	e002      	b.n	8001aae <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001aae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3730      	adds	r7, #48	; 0x30
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	431bde83 	.word	0x431bde83
 8001ac4:	2000004c 	.word	0x2000004c
 8001ac8:	40010000 	.word	0x40010000
 8001acc:	20000004 	.word	0x20000004

08001ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <NMI_Handler+0x4>

08001ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ada:	e7fe      	b.n	8001ada <HardFault_Handler+0x4>

08001adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <MemManage_Handler+0x4>

08001ae2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ae6:	e7fe      	b.n	8001ae6 <BusFault_Handler+0x4>

08001ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aec:	e7fe      	b.n	8001aec <UsageFault_Handler+0x4>

08001aee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b38:	4802      	ldr	r0, [pc, #8]	; (8001b44 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001b3a:	f001 fac5 	bl	80030c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	2000004c 	.word	0x2000004c

08001b48 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001b4c:	4802      	ldr	r0, [pc, #8]	; (8001b58 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001b4e:	f001 fabb 	bl	80030c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000094 	.word	0x20000094

08001b5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b60:	4802      	ldr	r0, [pc, #8]	; (8001b6c <USART1_IRQHandler+0x10>)
 8001b62:	f001 fcc3 	bl	80034ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	200000dc 	.word	0x200000dc

08001b70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b74:	4802      	ldr	r0, [pc, #8]	; (8001b80 <USART2_IRQHandler+0x10>)
 8001b76:	f001 fcb9 	bl	80034ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000120 	.word	0x20000120

08001b84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <SystemInit+0x20>)
 8001b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b8e:	4a05      	ldr	r2, [pc, #20]	; (8001ba4 <SystemInit+0x20>)
 8001b90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <MX_TIM11_Init>:

TIM_HandleTypeDef htim11;

/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001bac:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <MX_TIM11_Init+0x40>)
 8001bae:	4a0f      	ldr	r2, [pc, #60]	; (8001bec <MX_TIM11_Init+0x44>)
 8001bb0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 10000-1;
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <MX_TIM11_Init+0x40>)
 8001bb4:	f242 720f 	movw	r2, #9999	; 0x270f
 8001bb8:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bba:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <MX_TIM11_Init+0x40>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001bc0:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <MX_TIM11_Init+0x40>)
 8001bc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bc6:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc8:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <MX_TIM11_Init+0x40>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bce:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <MX_TIM11_Init+0x40>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001bd4:	4804      	ldr	r0, [pc, #16]	; (8001be8 <MX_TIM11_Init+0x40>)
 8001bd6:	f001 f96b 	bl	8002eb0 <HAL_TIM_Base_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8001be0:	f7ff fed6 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000094 	.word	0x20000094
 8001bec:	40014800 	.word	0x40014800

08001bf0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a0e      	ldr	r2, [pc, #56]	; (8001c38 <HAL_TIM_Base_MspInit+0x48>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d115      	bne.n	8001c2e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <HAL_TIM_Base_MspInit+0x4c>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	4a0c      	ldr	r2, [pc, #48]	; (8001c3c <HAL_TIM_Base_MspInit+0x4c>)
 8001c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c10:	6453      	str	r3, [r2, #68]	; 0x44
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <HAL_TIM_Base_MspInit+0x4c>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2100      	movs	r1, #0
 8001c22:	201a      	movs	r0, #26
 8001c24:	f000 fa20 	bl	8002068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001c28:	201a      	movs	r0, #26
 8001c2a:	f000 fa39 	bl	80020a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001c2e:	bf00      	nop
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40014800 	.word	0x40014800
 8001c3c:	40023800 	.word	0x40023800

08001c40 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c44:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <MX_USART1_UART_Init+0x4c>)
 8001c46:	4a12      	ldr	r2, [pc, #72]	; (8001c90 <MX_USART1_UART_Init+0x50>)
 8001c48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <MX_USART1_UART_Init+0x4c>)
 8001c4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c52:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <MX_USART1_UART_Init+0x4c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <MX_USART1_UART_Init+0x4c>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <MX_USART1_UART_Init+0x4c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <MX_USART1_UART_Init+0x4c>)
 8001c66:	220c      	movs	r2, #12
 8001c68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <MX_USART1_UART_Init+0x4c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <MX_USART1_UART_Init+0x4c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c76:	4805      	ldr	r0, [pc, #20]	; (8001c8c <MX_USART1_UART_Init+0x4c>)
 8001c78:	f001 fbea 	bl	8003450 <HAL_UART_Init>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c82:	f7ff fe85 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200000dc 	.word	0x200000dc
 8001c90:	40011000 	.word	0x40011000

08001c94 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c98:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <MX_USART2_UART_Init+0x4c>)
 8001c9a:	4a12      	ldr	r2, [pc, #72]	; (8001ce4 <MX_USART2_UART_Init+0x50>)
 8001c9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001c9e:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <MX_USART2_UART_Init+0x4c>)
 8001ca0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ca4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <MX_USART2_UART_Init+0x4c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <MX_USART2_UART_Init+0x4c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <MX_USART2_UART_Init+0x4c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cb8:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <MX_USART2_UART_Init+0x4c>)
 8001cba:	220c      	movs	r2, #12
 8001cbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cbe:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <MX_USART2_UART_Init+0x4c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <MX_USART2_UART_Init+0x4c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cca:	4805      	ldr	r0, [pc, #20]	; (8001ce0 <MX_USART2_UART_Init+0x4c>)
 8001ccc:	f001 fbc0 	bl	8003450 <HAL_UART_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cd6:	f7ff fe5b 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000120 	.word	0x20000120
 8001ce4:	40004400 	.word	0x40004400

08001ce8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08c      	sub	sp, #48	; 0x30
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 031c 	add.w	r3, r7, #28
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a41      	ldr	r2, [pc, #260]	; (8001e0c <HAL_UART_MspInit+0x124>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d14b      	bne.n	8001da2 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61bb      	str	r3, [r7, #24]
 8001d0e:	4b40      	ldr	r3, [pc, #256]	; (8001e10 <HAL_UART_MspInit+0x128>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d12:	4a3f      	ldr	r2, [pc, #252]	; (8001e10 <HAL_UART_MspInit+0x128>)
 8001d14:	f043 0310 	orr.w	r3, r3, #16
 8001d18:	6453      	str	r3, [r2, #68]	; 0x44
 8001d1a:	4b3d      	ldr	r3, [pc, #244]	; (8001e10 <HAL_UART_MspInit+0x128>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	f003 0310 	and.w	r3, r3, #16
 8001d22:	61bb      	str	r3, [r7, #24]
 8001d24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	4b39      	ldr	r3, [pc, #228]	; (8001e10 <HAL_UART_MspInit+0x128>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a38      	ldr	r2, [pc, #224]	; (8001e10 <HAL_UART_MspInit+0x128>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4b36      	ldr	r3, [pc, #216]	; (8001e10 <HAL_UART_MspInit+0x128>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	4b32      	ldr	r3, [pc, #200]	; (8001e10 <HAL_UART_MspInit+0x128>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a31      	ldr	r2, [pc, #196]	; (8001e10 <HAL_UART_MspInit+0x128>)
 8001d4c:	f043 0302 	orr.w	r3, r3, #2
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b2f      	ldr	r3, [pc, #188]	; (8001e10 <HAL_UART_MspInit+0x128>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d70:	2307      	movs	r3, #7
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d74:	f107 031c 	add.w	r3, r7, #28
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4826      	ldr	r0, [pc, #152]	; (8001e14 <HAL_UART_MspInit+0x12c>)
 8001d7c:	f000 fa30 	bl	80021e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d80:	2380      	movs	r3, #128	; 0x80
 8001d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d90:	2307      	movs	r3, #7
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d94:	f107 031c 	add.w	r3, r7, #28
 8001d98:	4619      	mov	r1, r3
 8001d9a:	481f      	ldr	r0, [pc, #124]	; (8001e18 <HAL_UART_MspInit+0x130>)
 8001d9c:	f000 fa20 	bl	80021e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001da0:	e030      	b.n	8001e04 <HAL_UART_MspInit+0x11c>
  else if(uartHandle->Instance==USART2)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a1d      	ldr	r2, [pc, #116]	; (8001e1c <HAL_UART_MspInit+0x134>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d12b      	bne.n	8001e04 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dac:	2300      	movs	r3, #0
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <HAL_UART_MspInit+0x128>)
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	4a16      	ldr	r2, [pc, #88]	; (8001e10 <HAL_UART_MspInit+0x128>)
 8001db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dba:	6413      	str	r3, [r2, #64]	; 0x40
 8001dbc:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <HAL_UART_MspInit+0x128>)
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	4b10      	ldr	r3, [pc, #64]	; (8001e10 <HAL_UART_MspInit+0x128>)
 8001dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd0:	4a0f      	ldr	r2, [pc, #60]	; (8001e10 <HAL_UART_MspInit+0x128>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd8:	4b0d      	ldr	r3, [pc, #52]	; (8001e10 <HAL_UART_MspInit+0x128>)
 8001dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001de4:	230c      	movs	r3, #12
 8001de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df0:	2303      	movs	r3, #3
 8001df2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001df4:	2307      	movs	r3, #7
 8001df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df8:	f107 031c 	add.w	r3, r7, #28
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4805      	ldr	r0, [pc, #20]	; (8001e14 <HAL_UART_MspInit+0x12c>)
 8001e00:	f000 f9ee 	bl	80021e0 <HAL_GPIO_Init>
}
 8001e04:	bf00      	nop
 8001e06:	3730      	adds	r7, #48	; 0x30
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40011000 	.word	0x40011000
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40020000 	.word	0x40020000
 8001e18:	40020400 	.word	0x40020400
 8001e1c:	40004400 	.word	0x40004400

08001e20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e24:	480d      	ldr	r0, [pc, #52]	; (8001e5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e26:	490e      	ldr	r1, [pc, #56]	; (8001e60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e28:	4a0e      	ldr	r2, [pc, #56]	; (8001e64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e2c:	e002      	b.n	8001e34 <LoopCopyDataInit>

08001e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e32:	3304      	adds	r3, #4

08001e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e38:	d3f9      	bcc.n	8001e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e3a:	4a0b      	ldr	r2, [pc, #44]	; (8001e68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e3c:	4c0b      	ldr	r4, [pc, #44]	; (8001e6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e40:	e001      	b.n	8001e46 <LoopFillZerobss>

08001e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e44:	3204      	adds	r2, #4

08001e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e48:	d3fb      	bcc.n	8001e42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e4a:	f7ff fe9b 	bl	8001b84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e4e:	f002 fa13 	bl	8004278 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e52:	f7ff fce1 	bl	8001818 <main>
  bx  lr    
 8001e56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001e64:	08004310 	.word	0x08004310
  ldr r2, =_sbss
 8001e68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001e6c:	20000168 	.word	0x20000168

08001e70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e70:	e7fe      	b.n	8001e70 <ADC_IRQHandler>
	...

08001e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e78:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <HAL_Init+0x40>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a0d      	ldr	r2, [pc, #52]	; (8001eb4 <HAL_Init+0x40>)
 8001e7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_Init+0x40>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <HAL_Init+0x40>)
 8001e8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e90:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <HAL_Init+0x40>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a07      	ldr	r2, [pc, #28]	; (8001eb4 <HAL_Init+0x40>)
 8001e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e9c:	2003      	movs	r0, #3
 8001e9e:	f000 f8d8 	bl	8002052 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f7ff fda2 	bl	80019ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ea8:	f7ff fd78 	bl	800199c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40023c00 	.word	0x40023c00

08001eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ebc:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <HAL_IncTick+0x20>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_IncTick+0x24>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	4a04      	ldr	r2, [pc, #16]	; (8001edc <HAL_IncTick+0x24>)
 8001eca:	6013      	str	r3, [r2, #0]
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	20000008 	.word	0x20000008
 8001edc:	20000164 	.word	0x20000164

08001ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ee4:	4b03      	ldr	r3, [pc, #12]	; (8001ef4 <HAL_GetTick+0x14>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	20000164 	.word	0x20000164

08001ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <__NVIC_SetPriorityGrouping+0x44>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f14:	4013      	ands	r3, r2
 8001f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f2a:	4a04      	ldr	r2, [pc, #16]	; (8001f3c <__NVIC_SetPriorityGrouping+0x44>)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	60d3      	str	r3, [r2, #12]
}
 8001f30:	bf00      	nop
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__NVIC_GetPriorityGrouping+0x18>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	f003 0307 	and.w	r3, r3, #7
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	db0b      	blt.n	8001f86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	f003 021f 	and.w	r2, r3, #31
 8001f74:	4907      	ldr	r1, [pc, #28]	; (8001f94 <__NVIC_EnableIRQ+0x38>)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	095b      	lsrs	r3, r3, #5
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	e000e100 	.word	0xe000e100

08001f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	6039      	str	r1, [r7, #0]
 8001fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	db0a      	blt.n	8001fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	490c      	ldr	r1, [pc, #48]	; (8001fe4 <__NVIC_SetPriority+0x4c>)
 8001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb6:	0112      	lsls	r2, r2, #4
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	440b      	add	r3, r1
 8001fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc0:	e00a      	b.n	8001fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4908      	ldr	r1, [pc, #32]	; (8001fe8 <__NVIC_SetPriority+0x50>)
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	3b04      	subs	r3, #4
 8001fd0:	0112      	lsls	r2, r2, #4
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	761a      	strb	r2, [r3, #24]
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000e100 	.word	0xe000e100
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b089      	sub	sp, #36	; 0x24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f1c3 0307 	rsb	r3, r3, #7
 8002006:	2b04      	cmp	r3, #4
 8002008:	bf28      	it	cs
 800200a:	2304      	movcs	r3, #4
 800200c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3304      	adds	r3, #4
 8002012:	2b06      	cmp	r3, #6
 8002014:	d902      	bls.n	800201c <NVIC_EncodePriority+0x30>
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3b03      	subs	r3, #3
 800201a:	e000      	b.n	800201e <NVIC_EncodePriority+0x32>
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002020:	f04f 32ff 	mov.w	r2, #4294967295
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43da      	mvns	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	401a      	ands	r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002034:	f04f 31ff 	mov.w	r1, #4294967295
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	fa01 f303 	lsl.w	r3, r1, r3
 800203e:	43d9      	mvns	r1, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002044:	4313      	orrs	r3, r2
         );
}
 8002046:	4618      	mov	r0, r3
 8002048:	3724      	adds	r7, #36	; 0x24
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b082      	sub	sp, #8
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff ff4c 	bl	8001ef8 <__NVIC_SetPriorityGrouping>
}
 8002060:	bf00      	nop
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
 8002074:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800207a:	f7ff ff61 	bl	8001f40 <__NVIC_GetPriorityGrouping>
 800207e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	68b9      	ldr	r1, [r7, #8]
 8002084:	6978      	ldr	r0, [r7, #20]
 8002086:	f7ff ffb1 	bl	8001fec <NVIC_EncodePriority>
 800208a:	4602      	mov	r2, r0
 800208c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002090:	4611      	mov	r1, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff ff80 	bl	8001f98 <__NVIC_SetPriority>
}
 8002098:	bf00      	nop
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff ff54 	bl	8001f5c <__NVIC_EnableIRQ>
}
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020ca:	f7ff ff09 	bl	8001ee0 <HAL_GetTick>
 80020ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d008      	beq.n	80020ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2280      	movs	r2, #128	; 0x80
 80020e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e052      	b.n	8002194 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0216 	bic.w	r2, r2, #22
 80020fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	695a      	ldr	r2, [r3, #20]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800210c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	2b00      	cmp	r3, #0
 8002114:	d103      	bne.n	800211e <HAL_DMA_Abort+0x62>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800211a:	2b00      	cmp	r3, #0
 800211c:	d007      	beq.n	800212e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0208 	bic.w	r2, r2, #8
 800212c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0201 	bic.w	r2, r2, #1
 800213c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800213e:	e013      	b.n	8002168 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002140:	f7ff fece 	bl	8001ee0 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b05      	cmp	r3, #5
 800214c:	d90c      	bls.n	8002168 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2220      	movs	r2, #32
 8002152:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2203      	movs	r2, #3
 8002158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e015      	b.n	8002194 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1e4      	bne.n	8002140 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217a:	223f      	movs	r2, #63	; 0x3f
 800217c:	409a      	lsls	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d004      	beq.n	80021ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2280      	movs	r2, #128	; 0x80
 80021b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e00c      	b.n	80021d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2205      	movs	r2, #5
 80021be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 0201 	bic.w	r2, r2, #1
 80021d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b089      	sub	sp, #36	; 0x24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
 80021fa:	e159      	b.n	80024b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021fc:	2201      	movs	r2, #1
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	4013      	ands	r3, r2
 800220e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	429a      	cmp	r2, r3
 8002216:	f040 8148 	bne.w	80024aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	2b01      	cmp	r3, #1
 8002224:	d005      	beq.n	8002232 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800222e:	2b02      	cmp	r3, #2
 8002230:	d130      	bne.n	8002294 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	2203      	movs	r2, #3
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4313      	orrs	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002268:	2201      	movs	r2, #1
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	f003 0201 	and.w	r2, r3, #1
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	2b03      	cmp	r3, #3
 800229e:	d017      	beq.n	80022d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	2203      	movs	r2, #3
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d123      	bne.n	8002324 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	08da      	lsrs	r2, r3, #3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3208      	adds	r2, #8
 80022e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	220f      	movs	r2, #15
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	691a      	ldr	r2, [r3, #16]
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	08da      	lsrs	r2, r3, #3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3208      	adds	r2, #8
 800231e:	69b9      	ldr	r1, [r7, #24]
 8002320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	2203      	movs	r2, #3
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 0203 	and.w	r2, r3, #3
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 80a2 	beq.w	80024aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	4b57      	ldr	r3, [pc, #348]	; (80024c8 <HAL_GPIO_Init+0x2e8>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	4a56      	ldr	r2, [pc, #344]	; (80024c8 <HAL_GPIO_Init+0x2e8>)
 8002370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002374:	6453      	str	r3, [r2, #68]	; 0x44
 8002376:	4b54      	ldr	r3, [pc, #336]	; (80024c8 <HAL_GPIO_Init+0x2e8>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002382:	4a52      	ldr	r2, [pc, #328]	; (80024cc <HAL_GPIO_Init+0x2ec>)
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	089b      	lsrs	r3, r3, #2
 8002388:	3302      	adds	r3, #2
 800238a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	220f      	movs	r2, #15
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43db      	mvns	r3, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4013      	ands	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a49      	ldr	r2, [pc, #292]	; (80024d0 <HAL_GPIO_Init+0x2f0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d019      	beq.n	80023e2 <HAL_GPIO_Init+0x202>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a48      	ldr	r2, [pc, #288]	; (80024d4 <HAL_GPIO_Init+0x2f4>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d013      	beq.n	80023de <HAL_GPIO_Init+0x1fe>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a47      	ldr	r2, [pc, #284]	; (80024d8 <HAL_GPIO_Init+0x2f8>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d00d      	beq.n	80023da <HAL_GPIO_Init+0x1fa>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a46      	ldr	r2, [pc, #280]	; (80024dc <HAL_GPIO_Init+0x2fc>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d007      	beq.n	80023d6 <HAL_GPIO_Init+0x1f6>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a45      	ldr	r2, [pc, #276]	; (80024e0 <HAL_GPIO_Init+0x300>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d101      	bne.n	80023d2 <HAL_GPIO_Init+0x1f2>
 80023ce:	2304      	movs	r3, #4
 80023d0:	e008      	b.n	80023e4 <HAL_GPIO_Init+0x204>
 80023d2:	2307      	movs	r3, #7
 80023d4:	e006      	b.n	80023e4 <HAL_GPIO_Init+0x204>
 80023d6:	2303      	movs	r3, #3
 80023d8:	e004      	b.n	80023e4 <HAL_GPIO_Init+0x204>
 80023da:	2302      	movs	r3, #2
 80023dc:	e002      	b.n	80023e4 <HAL_GPIO_Init+0x204>
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <HAL_GPIO_Init+0x204>
 80023e2:	2300      	movs	r3, #0
 80023e4:	69fa      	ldr	r2, [r7, #28]
 80023e6:	f002 0203 	and.w	r2, r2, #3
 80023ea:	0092      	lsls	r2, r2, #2
 80023ec:	4093      	lsls	r3, r2
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023f4:	4935      	ldr	r1, [pc, #212]	; (80024cc <HAL_GPIO_Init+0x2ec>)
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	089b      	lsrs	r3, r3, #2
 80023fa:	3302      	adds	r3, #2
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002402:	4b38      	ldr	r3, [pc, #224]	; (80024e4 <HAL_GPIO_Init+0x304>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	43db      	mvns	r3, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4013      	ands	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002426:	4a2f      	ldr	r2, [pc, #188]	; (80024e4 <HAL_GPIO_Init+0x304>)
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800242c:	4b2d      	ldr	r3, [pc, #180]	; (80024e4 <HAL_GPIO_Init+0x304>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002450:	4a24      	ldr	r2, [pc, #144]	; (80024e4 <HAL_GPIO_Init+0x304>)
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002456:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <HAL_GPIO_Init+0x304>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	43db      	mvns	r3, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4013      	ands	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	4313      	orrs	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800247a:	4a1a      	ldr	r2, [pc, #104]	; (80024e4 <HAL_GPIO_Init+0x304>)
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002480:	4b18      	ldr	r3, [pc, #96]	; (80024e4 <HAL_GPIO_Init+0x304>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024a4:	4a0f      	ldr	r2, [pc, #60]	; (80024e4 <HAL_GPIO_Init+0x304>)
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3301      	adds	r3, #1
 80024ae:	61fb      	str	r3, [r7, #28]
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	2b0f      	cmp	r3, #15
 80024b4:	f67f aea2 	bls.w	80021fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024b8:	bf00      	nop
 80024ba:	bf00      	nop
 80024bc:	3724      	adds	r7, #36	; 0x24
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	40023800 	.word	0x40023800
 80024cc:	40013800 	.word	0x40013800
 80024d0:	40020000 	.word	0x40020000
 80024d4:	40020400 	.word	0x40020400
 80024d8:	40020800 	.word	0x40020800
 80024dc:	40020c00 	.word	0x40020c00
 80024e0:	40021000 	.word	0x40021000
 80024e4:	40013c00 	.word	0x40013c00

080024e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	807b      	strh	r3, [r7, #2]
 80024f4:	4613      	mov	r3, r2
 80024f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024f8:	787b      	ldrb	r3, [r7, #1]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024fe:	887a      	ldrh	r2, [r7, #2]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002504:	e003      	b.n	800250e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002506:	887b      	ldrh	r3, [r7, #2]
 8002508:	041a      	lsls	r2, r3, #16
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	619a      	str	r2, [r3, #24]
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
	...

0800251c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e267      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d075      	beq.n	8002626 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800253a:	4b88      	ldr	r3, [pc, #544]	; (800275c <HAL_RCC_OscConfig+0x240>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	2b04      	cmp	r3, #4
 8002544:	d00c      	beq.n	8002560 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002546:	4b85      	ldr	r3, [pc, #532]	; (800275c <HAL_RCC_OscConfig+0x240>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800254e:	2b08      	cmp	r3, #8
 8002550:	d112      	bne.n	8002578 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002552:	4b82      	ldr	r3, [pc, #520]	; (800275c <HAL_RCC_OscConfig+0x240>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800255a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800255e:	d10b      	bne.n	8002578 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002560:	4b7e      	ldr	r3, [pc, #504]	; (800275c <HAL_RCC_OscConfig+0x240>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d05b      	beq.n	8002624 <HAL_RCC_OscConfig+0x108>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d157      	bne.n	8002624 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e242      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002580:	d106      	bne.n	8002590 <HAL_RCC_OscConfig+0x74>
 8002582:	4b76      	ldr	r3, [pc, #472]	; (800275c <HAL_RCC_OscConfig+0x240>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a75      	ldr	r2, [pc, #468]	; (800275c <HAL_RCC_OscConfig+0x240>)
 8002588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	e01d      	b.n	80025cc <HAL_RCC_OscConfig+0xb0>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002598:	d10c      	bne.n	80025b4 <HAL_RCC_OscConfig+0x98>
 800259a:	4b70      	ldr	r3, [pc, #448]	; (800275c <HAL_RCC_OscConfig+0x240>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a6f      	ldr	r2, [pc, #444]	; (800275c <HAL_RCC_OscConfig+0x240>)
 80025a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	4b6d      	ldr	r3, [pc, #436]	; (800275c <HAL_RCC_OscConfig+0x240>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a6c      	ldr	r2, [pc, #432]	; (800275c <HAL_RCC_OscConfig+0x240>)
 80025ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	e00b      	b.n	80025cc <HAL_RCC_OscConfig+0xb0>
 80025b4:	4b69      	ldr	r3, [pc, #420]	; (800275c <HAL_RCC_OscConfig+0x240>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a68      	ldr	r2, [pc, #416]	; (800275c <HAL_RCC_OscConfig+0x240>)
 80025ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025be:	6013      	str	r3, [r2, #0]
 80025c0:	4b66      	ldr	r3, [pc, #408]	; (800275c <HAL_RCC_OscConfig+0x240>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a65      	ldr	r2, [pc, #404]	; (800275c <HAL_RCC_OscConfig+0x240>)
 80025c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d013      	beq.n	80025fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d4:	f7ff fc84 	bl	8001ee0 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025dc:	f7ff fc80 	bl	8001ee0 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b64      	cmp	r3, #100	; 0x64
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e207      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ee:	4b5b      	ldr	r3, [pc, #364]	; (800275c <HAL_RCC_OscConfig+0x240>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f0      	beq.n	80025dc <HAL_RCC_OscConfig+0xc0>
 80025fa:	e014      	b.n	8002626 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fc:	f7ff fc70 	bl	8001ee0 <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002604:	f7ff fc6c 	bl	8001ee0 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b64      	cmp	r3, #100	; 0x64
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e1f3      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002616:	4b51      	ldr	r3, [pc, #324]	; (800275c <HAL_RCC_OscConfig+0x240>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f0      	bne.n	8002604 <HAL_RCC_OscConfig+0xe8>
 8002622:	e000      	b.n	8002626 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d063      	beq.n	80026fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002632:	4b4a      	ldr	r3, [pc, #296]	; (800275c <HAL_RCC_OscConfig+0x240>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00b      	beq.n	8002656 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800263e:	4b47      	ldr	r3, [pc, #284]	; (800275c <HAL_RCC_OscConfig+0x240>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002646:	2b08      	cmp	r3, #8
 8002648:	d11c      	bne.n	8002684 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800264a:	4b44      	ldr	r3, [pc, #272]	; (800275c <HAL_RCC_OscConfig+0x240>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d116      	bne.n	8002684 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002656:	4b41      	ldr	r3, [pc, #260]	; (800275c <HAL_RCC_OscConfig+0x240>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d005      	beq.n	800266e <HAL_RCC_OscConfig+0x152>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d001      	beq.n	800266e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e1c7      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266e:	4b3b      	ldr	r3, [pc, #236]	; (800275c <HAL_RCC_OscConfig+0x240>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4937      	ldr	r1, [pc, #220]	; (800275c <HAL_RCC_OscConfig+0x240>)
 800267e:	4313      	orrs	r3, r2
 8002680:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002682:	e03a      	b.n	80026fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d020      	beq.n	80026ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800268c:	4b34      	ldr	r3, [pc, #208]	; (8002760 <HAL_RCC_OscConfig+0x244>)
 800268e:	2201      	movs	r2, #1
 8002690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002692:	f7ff fc25 	bl	8001ee0 <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800269a:	f7ff fc21 	bl	8001ee0 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e1a8      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ac:	4b2b      	ldr	r3, [pc, #172]	; (800275c <HAL_RCC_OscConfig+0x240>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0f0      	beq.n	800269a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b8:	4b28      	ldr	r3, [pc, #160]	; (800275c <HAL_RCC_OscConfig+0x240>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	4925      	ldr	r1, [pc, #148]	; (800275c <HAL_RCC_OscConfig+0x240>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	600b      	str	r3, [r1, #0]
 80026cc:	e015      	b.n	80026fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ce:	4b24      	ldr	r3, [pc, #144]	; (8002760 <HAL_RCC_OscConfig+0x244>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d4:	f7ff fc04 	bl	8001ee0 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026dc:	f7ff fc00 	bl	8001ee0 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e187      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ee:	4b1b      	ldr	r3, [pc, #108]	; (800275c <HAL_RCC_OscConfig+0x240>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0308 	and.w	r3, r3, #8
 8002702:	2b00      	cmp	r3, #0
 8002704:	d036      	beq.n	8002774 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d016      	beq.n	800273c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800270e:	4b15      	ldr	r3, [pc, #84]	; (8002764 <HAL_RCC_OscConfig+0x248>)
 8002710:	2201      	movs	r2, #1
 8002712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002714:	f7ff fbe4 	bl	8001ee0 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800271c:	f7ff fbe0 	bl	8001ee0 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e167      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800272e:	4b0b      	ldr	r3, [pc, #44]	; (800275c <HAL_RCC_OscConfig+0x240>)
 8002730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0x200>
 800273a:	e01b      	b.n	8002774 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800273c:	4b09      	ldr	r3, [pc, #36]	; (8002764 <HAL_RCC_OscConfig+0x248>)
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002742:	f7ff fbcd 	bl	8001ee0 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002748:	e00e      	b.n	8002768 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800274a:	f7ff fbc9 	bl	8001ee0 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d907      	bls.n	8002768 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e150      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
 800275c:	40023800 	.word	0x40023800
 8002760:	42470000 	.word	0x42470000
 8002764:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002768:	4b88      	ldr	r3, [pc, #544]	; (800298c <HAL_RCC_OscConfig+0x470>)
 800276a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1ea      	bne.n	800274a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 8097 	beq.w	80028b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002782:	2300      	movs	r3, #0
 8002784:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002786:	4b81      	ldr	r3, [pc, #516]	; (800298c <HAL_RCC_OscConfig+0x470>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10f      	bne.n	80027b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	4b7d      	ldr	r3, [pc, #500]	; (800298c <HAL_RCC_OscConfig+0x470>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	4a7c      	ldr	r2, [pc, #496]	; (800298c <HAL_RCC_OscConfig+0x470>)
 800279c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a0:	6413      	str	r3, [r2, #64]	; 0x40
 80027a2:	4b7a      	ldr	r3, [pc, #488]	; (800298c <HAL_RCC_OscConfig+0x470>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ae:	2301      	movs	r3, #1
 80027b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b2:	4b77      	ldr	r3, [pc, #476]	; (8002990 <HAL_RCC_OscConfig+0x474>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d118      	bne.n	80027f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027be:	4b74      	ldr	r3, [pc, #464]	; (8002990 <HAL_RCC_OscConfig+0x474>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a73      	ldr	r2, [pc, #460]	; (8002990 <HAL_RCC_OscConfig+0x474>)
 80027c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ca:	f7ff fb89 	bl	8001ee0 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d2:	f7ff fb85 	bl	8001ee0 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e10c      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e4:	4b6a      	ldr	r3, [pc, #424]	; (8002990 <HAL_RCC_OscConfig+0x474>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0f0      	beq.n	80027d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d106      	bne.n	8002806 <HAL_RCC_OscConfig+0x2ea>
 80027f8:	4b64      	ldr	r3, [pc, #400]	; (800298c <HAL_RCC_OscConfig+0x470>)
 80027fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fc:	4a63      	ldr	r2, [pc, #396]	; (800298c <HAL_RCC_OscConfig+0x470>)
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	6713      	str	r3, [r2, #112]	; 0x70
 8002804:	e01c      	b.n	8002840 <HAL_RCC_OscConfig+0x324>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2b05      	cmp	r3, #5
 800280c:	d10c      	bne.n	8002828 <HAL_RCC_OscConfig+0x30c>
 800280e:	4b5f      	ldr	r3, [pc, #380]	; (800298c <HAL_RCC_OscConfig+0x470>)
 8002810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002812:	4a5e      	ldr	r2, [pc, #376]	; (800298c <HAL_RCC_OscConfig+0x470>)
 8002814:	f043 0304 	orr.w	r3, r3, #4
 8002818:	6713      	str	r3, [r2, #112]	; 0x70
 800281a:	4b5c      	ldr	r3, [pc, #368]	; (800298c <HAL_RCC_OscConfig+0x470>)
 800281c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281e:	4a5b      	ldr	r2, [pc, #364]	; (800298c <HAL_RCC_OscConfig+0x470>)
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	6713      	str	r3, [r2, #112]	; 0x70
 8002826:	e00b      	b.n	8002840 <HAL_RCC_OscConfig+0x324>
 8002828:	4b58      	ldr	r3, [pc, #352]	; (800298c <HAL_RCC_OscConfig+0x470>)
 800282a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282c:	4a57      	ldr	r2, [pc, #348]	; (800298c <HAL_RCC_OscConfig+0x470>)
 800282e:	f023 0301 	bic.w	r3, r3, #1
 8002832:	6713      	str	r3, [r2, #112]	; 0x70
 8002834:	4b55      	ldr	r3, [pc, #340]	; (800298c <HAL_RCC_OscConfig+0x470>)
 8002836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002838:	4a54      	ldr	r2, [pc, #336]	; (800298c <HAL_RCC_OscConfig+0x470>)
 800283a:	f023 0304 	bic.w	r3, r3, #4
 800283e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d015      	beq.n	8002874 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002848:	f7ff fb4a 	bl	8001ee0 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800284e:	e00a      	b.n	8002866 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002850:	f7ff fb46 	bl	8001ee0 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	f241 3288 	movw	r2, #5000	; 0x1388
 800285e:	4293      	cmp	r3, r2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e0cb      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002866:	4b49      	ldr	r3, [pc, #292]	; (800298c <HAL_RCC_OscConfig+0x470>)
 8002868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0ee      	beq.n	8002850 <HAL_RCC_OscConfig+0x334>
 8002872:	e014      	b.n	800289e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002874:	f7ff fb34 	bl	8001ee0 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800287a:	e00a      	b.n	8002892 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800287c:	f7ff fb30 	bl	8001ee0 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	f241 3288 	movw	r2, #5000	; 0x1388
 800288a:	4293      	cmp	r3, r2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e0b5      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002892:	4b3e      	ldr	r3, [pc, #248]	; (800298c <HAL_RCC_OscConfig+0x470>)
 8002894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1ee      	bne.n	800287c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800289e:	7dfb      	ldrb	r3, [r7, #23]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d105      	bne.n	80028b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a4:	4b39      	ldr	r3, [pc, #228]	; (800298c <HAL_RCC_OscConfig+0x470>)
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	4a38      	ldr	r2, [pc, #224]	; (800298c <HAL_RCC_OscConfig+0x470>)
 80028aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 80a1 	beq.w	80029fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028ba:	4b34      	ldr	r3, [pc, #208]	; (800298c <HAL_RCC_OscConfig+0x470>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 030c 	and.w	r3, r3, #12
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d05c      	beq.n	8002980 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d141      	bne.n	8002952 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ce:	4b31      	ldr	r3, [pc, #196]	; (8002994 <HAL_RCC_OscConfig+0x478>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d4:	f7ff fb04 	bl	8001ee0 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028dc:	f7ff fb00 	bl	8001ee0 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e087      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ee:	4b27      	ldr	r3, [pc, #156]	; (800298c <HAL_RCC_OscConfig+0x470>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f0      	bne.n	80028dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69da      	ldr	r2, [r3, #28]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	431a      	orrs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	019b      	lsls	r3, r3, #6
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002910:	085b      	lsrs	r3, r3, #1
 8002912:	3b01      	subs	r3, #1
 8002914:	041b      	lsls	r3, r3, #16
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291c:	061b      	lsls	r3, r3, #24
 800291e:	491b      	ldr	r1, [pc, #108]	; (800298c <HAL_RCC_OscConfig+0x470>)
 8002920:	4313      	orrs	r3, r2
 8002922:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002924:	4b1b      	ldr	r3, [pc, #108]	; (8002994 <HAL_RCC_OscConfig+0x478>)
 8002926:	2201      	movs	r2, #1
 8002928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292a:	f7ff fad9 	bl	8001ee0 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002932:	f7ff fad5 	bl	8001ee0 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e05c      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002944:	4b11      	ldr	r3, [pc, #68]	; (800298c <HAL_RCC_OscConfig+0x470>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0f0      	beq.n	8002932 <HAL_RCC_OscConfig+0x416>
 8002950:	e054      	b.n	80029fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002952:	4b10      	ldr	r3, [pc, #64]	; (8002994 <HAL_RCC_OscConfig+0x478>)
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002958:	f7ff fac2 	bl	8001ee0 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002960:	f7ff fabe 	bl	8001ee0 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e045      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002972:	4b06      	ldr	r3, [pc, #24]	; (800298c <HAL_RCC_OscConfig+0x470>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x444>
 800297e:	e03d      	b.n	80029fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d107      	bne.n	8002998 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e038      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
 800298c:	40023800 	.word	0x40023800
 8002990:	40007000 	.word	0x40007000
 8002994:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002998:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <HAL_RCC_OscConfig+0x4ec>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d028      	beq.n	80029f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d121      	bne.n	80029f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029be:	429a      	cmp	r2, r3
 80029c0:	d11a      	bne.n	80029f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029c8:	4013      	ands	r3, r2
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d111      	bne.n	80029f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029de:	085b      	lsrs	r3, r3, #1
 80029e0:	3b01      	subs	r3, #1
 80029e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d107      	bne.n	80029f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d001      	beq.n	80029fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e000      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40023800 	.word	0x40023800

08002a0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e0cc      	b.n	8002bba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a20:	4b68      	ldr	r3, [pc, #416]	; (8002bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d90c      	bls.n	8002a48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2e:	4b65      	ldr	r3, [pc, #404]	; (8002bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a36:	4b63      	ldr	r3, [pc, #396]	; (8002bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e0b8      	b.n	8002bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d020      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d005      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a60:	4b59      	ldr	r3, [pc, #356]	; (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	4a58      	ldr	r2, [pc, #352]	; (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0308 	and.w	r3, r3, #8
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d005      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a78:	4b53      	ldr	r3, [pc, #332]	; (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	4a52      	ldr	r2, [pc, #328]	; (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a84:	4b50      	ldr	r3, [pc, #320]	; (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	494d      	ldr	r1, [pc, #308]	; (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d044      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d107      	bne.n	8002aba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aaa:	4b47      	ldr	r3, [pc, #284]	; (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d119      	bne.n	8002aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e07f      	b.n	8002bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d003      	beq.n	8002aca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	d107      	bne.n	8002ada <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aca:	4b3f      	ldr	r3, [pc, #252]	; (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d109      	bne.n	8002aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e06f      	b.n	8002bba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ada:	4b3b      	ldr	r3, [pc, #236]	; (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e067      	b.n	8002bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aea:	4b37      	ldr	r3, [pc, #220]	; (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f023 0203 	bic.w	r2, r3, #3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	4934      	ldr	r1, [pc, #208]	; (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002afc:	f7ff f9f0 	bl	8001ee0 <HAL_GetTick>
 8002b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b02:	e00a      	b.n	8002b1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b04:	f7ff f9ec 	bl	8001ee0 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e04f      	b.n	8002bba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1a:	4b2b      	ldr	r3, [pc, #172]	; (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 020c 	and.w	r2, r3, #12
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d1eb      	bne.n	8002b04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b2c:	4b25      	ldr	r3, [pc, #148]	; (8002bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d20c      	bcs.n	8002b54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3a:	4b22      	ldr	r3, [pc, #136]	; (8002bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b42:	4b20      	ldr	r3, [pc, #128]	; (8002bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d001      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e032      	b.n	8002bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b60:	4b19      	ldr	r3, [pc, #100]	; (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	4916      	ldr	r1, [pc, #88]	; (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d009      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b7e:	4b12      	ldr	r3, [pc, #72]	; (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	490e      	ldr	r1, [pc, #56]	; (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b92:	f000 f821 	bl	8002bd8 <HAL_RCC_GetSysClockFreq>
 8002b96:	4602      	mov	r2, r0
 8002b98:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	091b      	lsrs	r3, r3, #4
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	490a      	ldr	r1, [pc, #40]	; (8002bcc <HAL_RCC_ClockConfig+0x1c0>)
 8002ba4:	5ccb      	ldrb	r3, [r1, r3]
 8002ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8002baa:	4a09      	ldr	r2, [pc, #36]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bae:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fe ff1a 	bl	80019ec <HAL_InitTick>

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40023c00 	.word	0x40023c00
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	080042e8 	.word	0x080042e8
 8002bd0:	20000000 	.word	0x20000000
 8002bd4:	20000004 	.word	0x20000004

08002bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bdc:	b094      	sub	sp, #80	; 0x50
 8002bde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	647b      	str	r3, [r7, #68]	; 0x44
 8002be4:	2300      	movs	r3, #0
 8002be6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002be8:	2300      	movs	r3, #0
 8002bea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bf0:	4b79      	ldr	r3, [pc, #484]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 030c 	and.w	r3, r3, #12
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d00d      	beq.n	8002c18 <HAL_RCC_GetSysClockFreq+0x40>
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	f200 80e1 	bhi.w	8002dc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d002      	beq.n	8002c0c <HAL_RCC_GetSysClockFreq+0x34>
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d003      	beq.n	8002c12 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c0a:	e0db      	b.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c0c:	4b73      	ldr	r3, [pc, #460]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x204>)
 8002c0e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c10:	e0db      	b.n	8002dca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c12:	4b73      	ldr	r3, [pc, #460]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c16:	e0d8      	b.n	8002dca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c18:	4b6f      	ldr	r3, [pc, #444]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c20:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c22:	4b6d      	ldr	r3, [pc, #436]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d063      	beq.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c2e:	4b6a      	ldr	r3, [pc, #424]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	099b      	lsrs	r3, r3, #6
 8002c34:	2200      	movs	r2, #0
 8002c36:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c40:	633b      	str	r3, [r7, #48]	; 0x30
 8002c42:	2300      	movs	r3, #0
 8002c44:	637b      	str	r3, [r7, #52]	; 0x34
 8002c46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c4a:	4622      	mov	r2, r4
 8002c4c:	462b      	mov	r3, r5
 8002c4e:	f04f 0000 	mov.w	r0, #0
 8002c52:	f04f 0100 	mov.w	r1, #0
 8002c56:	0159      	lsls	r1, r3, #5
 8002c58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c5c:	0150      	lsls	r0, r2, #5
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	4621      	mov	r1, r4
 8002c64:	1a51      	subs	r1, r2, r1
 8002c66:	6139      	str	r1, [r7, #16]
 8002c68:	4629      	mov	r1, r5
 8002c6a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c7c:	4659      	mov	r1, fp
 8002c7e:	018b      	lsls	r3, r1, #6
 8002c80:	4651      	mov	r1, sl
 8002c82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c86:	4651      	mov	r1, sl
 8002c88:	018a      	lsls	r2, r1, #6
 8002c8a:	4651      	mov	r1, sl
 8002c8c:	ebb2 0801 	subs.w	r8, r2, r1
 8002c90:	4659      	mov	r1, fp
 8002c92:	eb63 0901 	sbc.w	r9, r3, r1
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ca2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ca6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002caa:	4690      	mov	r8, r2
 8002cac:	4699      	mov	r9, r3
 8002cae:	4623      	mov	r3, r4
 8002cb0:	eb18 0303 	adds.w	r3, r8, r3
 8002cb4:	60bb      	str	r3, [r7, #8]
 8002cb6:	462b      	mov	r3, r5
 8002cb8:	eb49 0303 	adc.w	r3, r9, r3
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	f04f 0300 	mov.w	r3, #0
 8002cc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cca:	4629      	mov	r1, r5
 8002ccc:	024b      	lsls	r3, r1, #9
 8002cce:	4621      	mov	r1, r4
 8002cd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cd4:	4621      	mov	r1, r4
 8002cd6:	024a      	lsls	r2, r1, #9
 8002cd8:	4610      	mov	r0, r2
 8002cda:	4619      	mov	r1, r3
 8002cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cde:	2200      	movs	r2, #0
 8002ce0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ce2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ce4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ce8:	f7fd fa76 	bl	80001d8 <__aeabi_uldivmod>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cf4:	e058      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cf6:	4b38      	ldr	r3, [pc, #224]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	099b      	lsrs	r3, r3, #6
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	4618      	mov	r0, r3
 8002d00:	4611      	mov	r1, r2
 8002d02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d06:	623b      	str	r3, [r7, #32]
 8002d08:	2300      	movs	r3, #0
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d10:	4642      	mov	r2, r8
 8002d12:	464b      	mov	r3, r9
 8002d14:	f04f 0000 	mov.w	r0, #0
 8002d18:	f04f 0100 	mov.w	r1, #0
 8002d1c:	0159      	lsls	r1, r3, #5
 8002d1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d22:	0150      	lsls	r0, r2, #5
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4641      	mov	r1, r8
 8002d2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d2e:	4649      	mov	r1, r9
 8002d30:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	f04f 0300 	mov.w	r3, #0
 8002d3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d48:	ebb2 040a 	subs.w	r4, r2, sl
 8002d4c:	eb63 050b 	sbc.w	r5, r3, fp
 8002d50:	f04f 0200 	mov.w	r2, #0
 8002d54:	f04f 0300 	mov.w	r3, #0
 8002d58:	00eb      	lsls	r3, r5, #3
 8002d5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d5e:	00e2      	lsls	r2, r4, #3
 8002d60:	4614      	mov	r4, r2
 8002d62:	461d      	mov	r5, r3
 8002d64:	4643      	mov	r3, r8
 8002d66:	18e3      	adds	r3, r4, r3
 8002d68:	603b      	str	r3, [r7, #0]
 8002d6a:	464b      	mov	r3, r9
 8002d6c:	eb45 0303 	adc.w	r3, r5, r3
 8002d70:	607b      	str	r3, [r7, #4]
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d7e:	4629      	mov	r1, r5
 8002d80:	028b      	lsls	r3, r1, #10
 8002d82:	4621      	mov	r1, r4
 8002d84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d88:	4621      	mov	r1, r4
 8002d8a:	028a      	lsls	r2, r1, #10
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	4619      	mov	r1, r3
 8002d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d92:	2200      	movs	r2, #0
 8002d94:	61bb      	str	r3, [r7, #24]
 8002d96:	61fa      	str	r2, [r7, #28]
 8002d98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d9c:	f7fd fa1c 	bl	80001d8 <__aeabi_uldivmod>
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	4613      	mov	r3, r2
 8002da6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002da8:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	0c1b      	lsrs	r3, r3, #16
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	3301      	adds	r3, #1
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002db8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dc2:	e002      	b.n	8002dca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dc4:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x204>)
 8002dc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3750      	adds	r7, #80	; 0x50
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	00f42400 	.word	0x00f42400
 8002de0:	007a1200 	.word	0x007a1200

08002de4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002de8:	4b03      	ldr	r3, [pc, #12]	; (8002df8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dea:	681b      	ldr	r3, [r3, #0]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	20000000 	.word	0x20000000

08002dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e00:	f7ff fff0 	bl	8002de4 <HAL_RCC_GetHCLKFreq>
 8002e04:	4602      	mov	r2, r0
 8002e06:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	0a9b      	lsrs	r3, r3, #10
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	4903      	ldr	r1, [pc, #12]	; (8002e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e12:	5ccb      	ldrb	r3, [r1, r3]
 8002e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	080042f8 	.word	0x080042f8

08002e24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e28:	f7ff ffdc 	bl	8002de4 <HAL_RCC_GetHCLKFreq>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	0b5b      	lsrs	r3, r3, #13
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	4903      	ldr	r1, [pc, #12]	; (8002e48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e3a:	5ccb      	ldrb	r3, [r1, r3]
 8002e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40023800 	.word	0x40023800
 8002e48:	080042f8 	.word	0x080042f8

08002e4c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	220f      	movs	r2, #15
 8002e5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e5c:	4b12      	ldr	r3, [pc, #72]	; (8002ea8 <HAL_RCC_GetClockConfig+0x5c>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 0203 	and.w	r2, r3, #3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e68:	4b0f      	ldr	r3, [pc, #60]	; (8002ea8 <HAL_RCC_GetClockConfig+0x5c>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e74:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <HAL_RCC_GetClockConfig+0x5c>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e80:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <HAL_RCC_GetClockConfig+0x5c>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	08db      	lsrs	r3, r3, #3
 8002e86:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e8e:	4b07      	ldr	r3, [pc, #28]	; (8002eac <HAL_RCC_GetClockConfig+0x60>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0207 	and.w	r2, r3, #7
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	601a      	str	r2, [r3, #0]
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	40023c00 	.word	0x40023c00

08002eb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e041      	b.n	8002f46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d106      	bne.n	8002edc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7fe fe8a 	bl	8001bf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3304      	adds	r3, #4
 8002eec:	4619      	mov	r1, r3
 8002eee:	4610      	mov	r0, r2
 8002ef0:	f000 fa1a 	bl	8003328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d001      	beq.n	8002f68 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e03c      	b.n	8002fe2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a1e      	ldr	r2, [pc, #120]	; (8002ff0 <HAL_TIM_Base_Start+0xa0>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d018      	beq.n	8002fac <HAL_TIM_Base_Start+0x5c>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f82:	d013      	beq.n	8002fac <HAL_TIM_Base_Start+0x5c>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a1a      	ldr	r2, [pc, #104]	; (8002ff4 <HAL_TIM_Base_Start+0xa4>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d00e      	beq.n	8002fac <HAL_TIM_Base_Start+0x5c>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a19      	ldr	r2, [pc, #100]	; (8002ff8 <HAL_TIM_Base_Start+0xa8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d009      	beq.n	8002fac <HAL_TIM_Base_Start+0x5c>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a17      	ldr	r2, [pc, #92]	; (8002ffc <HAL_TIM_Base_Start+0xac>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d004      	beq.n	8002fac <HAL_TIM_Base_Start+0x5c>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a16      	ldr	r2, [pc, #88]	; (8003000 <HAL_TIM_Base_Start+0xb0>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d111      	bne.n	8002fd0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2b06      	cmp	r3, #6
 8002fbc:	d010      	beq.n	8002fe0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 0201 	orr.w	r2, r2, #1
 8002fcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fce:	e007      	b.n	8002fe0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0201 	orr.w	r2, r2, #1
 8002fde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	40010000 	.word	0x40010000
 8002ff4:	40000400 	.word	0x40000400
 8002ff8:	40000800 	.word	0x40000800
 8002ffc:	40000c00 	.word	0x40000c00
 8003000:	40014000 	.word	0x40014000

08003004 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b01      	cmp	r3, #1
 8003016:	d001      	beq.n	800301c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e044      	b.n	80030a6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0201 	orr.w	r2, r2, #1
 8003032:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a1e      	ldr	r2, [pc, #120]	; (80030b4 <HAL_TIM_Base_Start_IT+0xb0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d018      	beq.n	8003070 <HAL_TIM_Base_Start_IT+0x6c>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003046:	d013      	beq.n	8003070 <HAL_TIM_Base_Start_IT+0x6c>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a1a      	ldr	r2, [pc, #104]	; (80030b8 <HAL_TIM_Base_Start_IT+0xb4>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d00e      	beq.n	8003070 <HAL_TIM_Base_Start_IT+0x6c>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a19      	ldr	r2, [pc, #100]	; (80030bc <HAL_TIM_Base_Start_IT+0xb8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d009      	beq.n	8003070 <HAL_TIM_Base_Start_IT+0x6c>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a17      	ldr	r2, [pc, #92]	; (80030c0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d004      	beq.n	8003070 <HAL_TIM_Base_Start_IT+0x6c>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a16      	ldr	r2, [pc, #88]	; (80030c4 <HAL_TIM_Base_Start_IT+0xc0>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d111      	bne.n	8003094 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2b06      	cmp	r3, #6
 8003080:	d010      	beq.n	80030a4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f042 0201 	orr.w	r2, r2, #1
 8003090:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003092:	e007      	b.n	80030a4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0201 	orr.w	r2, r2, #1
 80030a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	40010000 	.word	0x40010000
 80030b8:	40000400 	.word	0x40000400
 80030bc:	40000800 	.word	0x40000800
 80030c0:	40000c00 	.word	0x40000c00
 80030c4:	40014000 	.word	0x40014000

080030c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d122      	bne.n	8003124 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d11b      	bne.n	8003124 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f06f 0202 	mvn.w	r2, #2
 80030f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f8ee 	bl	80032ec <HAL_TIM_IC_CaptureCallback>
 8003110:	e005      	b.n	800311e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f8e0 	bl	80032d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f8f1 	bl	8003300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	2b04      	cmp	r3, #4
 8003130:	d122      	bne.n	8003178 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b04      	cmp	r3, #4
 800313e:	d11b      	bne.n	8003178 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f06f 0204 	mvn.w	r2, #4
 8003148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2202      	movs	r2, #2
 800314e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f8c4 	bl	80032ec <HAL_TIM_IC_CaptureCallback>
 8003164:	e005      	b.n	8003172 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f8b6 	bl	80032d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f8c7 	bl	8003300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b08      	cmp	r3, #8
 8003184:	d122      	bne.n	80031cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f003 0308 	and.w	r3, r3, #8
 8003190:	2b08      	cmp	r3, #8
 8003192:	d11b      	bne.n	80031cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f06f 0208 	mvn.w	r2, #8
 800319c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2204      	movs	r2, #4
 80031a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f89a 	bl	80032ec <HAL_TIM_IC_CaptureCallback>
 80031b8:	e005      	b.n	80031c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f88c 	bl	80032d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f89d 	bl	8003300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f003 0310 	and.w	r3, r3, #16
 80031d6:	2b10      	cmp	r3, #16
 80031d8:	d122      	bne.n	8003220 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f003 0310 	and.w	r3, r3, #16
 80031e4:	2b10      	cmp	r3, #16
 80031e6:	d11b      	bne.n	8003220 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0210 	mvn.w	r2, #16
 80031f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2208      	movs	r2, #8
 80031f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f870 	bl	80032ec <HAL_TIM_IC_CaptureCallback>
 800320c:	e005      	b.n	800321a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f862 	bl	80032d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f873 	bl	8003300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b01      	cmp	r3, #1
 800322c:	d10e      	bne.n	800324c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b01      	cmp	r3, #1
 800323a:	d107      	bne.n	800324c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f06f 0201 	mvn.w	r2, #1
 8003244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7fe fb90 	bl	800196c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003256:	2b80      	cmp	r3, #128	; 0x80
 8003258:	d10e      	bne.n	8003278 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003264:	2b80      	cmp	r3, #128	; 0x80
 8003266:	d107      	bne.n	8003278 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f8e2 	bl	800343c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003282:	2b40      	cmp	r3, #64	; 0x40
 8003284:	d10e      	bne.n	80032a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003290:	2b40      	cmp	r3, #64	; 0x40
 8003292:	d107      	bne.n	80032a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800329c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f838 	bl	8003314 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	f003 0320 	and.w	r3, r3, #32
 80032ae:	2b20      	cmp	r3, #32
 80032b0:	d10e      	bne.n	80032d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f003 0320 	and.w	r3, r3, #32
 80032bc:	2b20      	cmp	r3, #32
 80032be:	d107      	bne.n	80032d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f06f 0220 	mvn.w	r2, #32
 80032c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f8ac 	bl	8003428 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032d0:	bf00      	nop
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a34      	ldr	r2, [pc, #208]	; (800340c <TIM_Base_SetConfig+0xe4>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d00f      	beq.n	8003360 <TIM_Base_SetConfig+0x38>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003346:	d00b      	beq.n	8003360 <TIM_Base_SetConfig+0x38>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a31      	ldr	r2, [pc, #196]	; (8003410 <TIM_Base_SetConfig+0xe8>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d007      	beq.n	8003360 <TIM_Base_SetConfig+0x38>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a30      	ldr	r2, [pc, #192]	; (8003414 <TIM_Base_SetConfig+0xec>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d003      	beq.n	8003360 <TIM_Base_SetConfig+0x38>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a2f      	ldr	r2, [pc, #188]	; (8003418 <TIM_Base_SetConfig+0xf0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d108      	bne.n	8003372 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003366:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	4313      	orrs	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a25      	ldr	r2, [pc, #148]	; (800340c <TIM_Base_SetConfig+0xe4>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d01b      	beq.n	80033b2 <TIM_Base_SetConfig+0x8a>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003380:	d017      	beq.n	80033b2 <TIM_Base_SetConfig+0x8a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a22      	ldr	r2, [pc, #136]	; (8003410 <TIM_Base_SetConfig+0xe8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d013      	beq.n	80033b2 <TIM_Base_SetConfig+0x8a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a21      	ldr	r2, [pc, #132]	; (8003414 <TIM_Base_SetConfig+0xec>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d00f      	beq.n	80033b2 <TIM_Base_SetConfig+0x8a>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a20      	ldr	r2, [pc, #128]	; (8003418 <TIM_Base_SetConfig+0xf0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d00b      	beq.n	80033b2 <TIM_Base_SetConfig+0x8a>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a1f      	ldr	r2, [pc, #124]	; (800341c <TIM_Base_SetConfig+0xf4>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d007      	beq.n	80033b2 <TIM_Base_SetConfig+0x8a>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a1e      	ldr	r2, [pc, #120]	; (8003420 <TIM_Base_SetConfig+0xf8>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d003      	beq.n	80033b2 <TIM_Base_SetConfig+0x8a>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a1d      	ldr	r2, [pc, #116]	; (8003424 <TIM_Base_SetConfig+0xfc>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d108      	bne.n	80033c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a08      	ldr	r2, [pc, #32]	; (800340c <TIM_Base_SetConfig+0xe4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d103      	bne.n	80033f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	691a      	ldr	r2, [r3, #16]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	615a      	str	r2, [r3, #20]
}
 80033fe:	bf00      	nop
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40010000 	.word	0x40010000
 8003410:	40000400 	.word	0x40000400
 8003414:	40000800 	.word	0x40000800
 8003418:	40000c00 	.word	0x40000c00
 800341c:	40014000 	.word	0x40014000
 8003420:	40014400 	.word	0x40014400
 8003424:	40014800 	.word	0x40014800

08003428 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e03f      	b.n	80034e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d106      	bne.n	800347c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7fe fc36 	bl	8001ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2224      	movs	r2, #36	; 0x24
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003492:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 fc7b 	bl	8003d90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695a      	ldr	r2, [r3, #20]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
	...

080034ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b0ba      	sub	sp, #232	; 0xe8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003512:	2300      	movs	r3, #0
 8003514:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003518:	2300      	movs	r3, #0
 800351a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800351e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800352a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10f      	bne.n	8003552 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003536:	f003 0320 	and.w	r3, r3, #32
 800353a:	2b00      	cmp	r3, #0
 800353c:	d009      	beq.n	8003552 <HAL_UART_IRQHandler+0x66>
 800353e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003542:	f003 0320 	and.w	r3, r3, #32
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fb65 	bl	8003c1a <UART_Receive_IT>
      return;
 8003550:	e256      	b.n	8003a00 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003552:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 80de 	beq.w	8003718 <HAL_UART_IRQHandler+0x22c>
 800355c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b00      	cmp	r3, #0
 8003566:	d106      	bne.n	8003576 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800356c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 80d1 	beq.w	8003718 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00b      	beq.n	800359a <HAL_UART_IRQHandler+0xae>
 8003582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358a:	2b00      	cmp	r3, #0
 800358c:	d005      	beq.n	800359a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f043 0201 	orr.w	r2, r3, #1
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800359a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800359e:	f003 0304 	and.w	r3, r3, #4
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00b      	beq.n	80035be <HAL_UART_IRQHandler+0xd2>
 80035a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d005      	beq.n	80035be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	f043 0202 	orr.w	r2, r3, #2
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00b      	beq.n	80035e2 <HAL_UART_IRQHandler+0xf6>
 80035ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d005      	beq.n	80035e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	f043 0204 	orr.w	r2, r3, #4
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80035e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d011      	beq.n	8003612 <HAL_UART_IRQHandler+0x126>
 80035ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035f2:	f003 0320 	and.w	r3, r3, #32
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d105      	bne.n	8003606 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80035fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d005      	beq.n	8003612 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	f043 0208 	orr.w	r2, r3, #8
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 81ed 	beq.w	80039f6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800361c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003620:	f003 0320 	and.w	r3, r3, #32
 8003624:	2b00      	cmp	r3, #0
 8003626:	d008      	beq.n	800363a <HAL_UART_IRQHandler+0x14e>
 8003628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800362c:	f003 0320 	and.w	r3, r3, #32
 8003630:	2b00      	cmp	r3, #0
 8003632:	d002      	beq.n	800363a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 faf0 	bl	8003c1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003644:	2b40      	cmp	r3, #64	; 0x40
 8003646:	bf0c      	ite	eq
 8003648:	2301      	moveq	r3, #1
 800364a:	2300      	movne	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b00      	cmp	r3, #0
 800365c:	d103      	bne.n	8003666 <HAL_UART_IRQHandler+0x17a>
 800365e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003662:	2b00      	cmp	r3, #0
 8003664:	d04f      	beq.n	8003706 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f9f8 	bl	8003a5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003676:	2b40      	cmp	r3, #64	; 0x40
 8003678:	d141      	bne.n	80036fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	3314      	adds	r3, #20
 8003680:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003684:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003688:	e853 3f00 	ldrex	r3, [r3]
 800368c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003690:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003698:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	3314      	adds	r3, #20
 80036a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80036a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80036aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80036b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80036b6:	e841 2300 	strex	r3, r2, [r1]
 80036ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80036be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1d9      	bne.n	800367a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d013      	beq.n	80036f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d2:	4a7d      	ldr	r2, [pc, #500]	; (80038c8 <HAL_UART_IRQHandler+0x3dc>)
 80036d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036da:	4618      	mov	r0, r3
 80036dc:	f7fe fd5e 	bl	800219c <HAL_DMA_Abort_IT>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d016      	beq.n	8003714 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036f0:	4610      	mov	r0, r2
 80036f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f4:	e00e      	b.n	8003714 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f99a 	bl	8003a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036fc:	e00a      	b.n	8003714 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f996 	bl	8003a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003704:	e006      	b.n	8003714 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f992 	bl	8003a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003712:	e170      	b.n	80039f6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003714:	bf00      	nop
    return;
 8003716:	e16e      	b.n	80039f6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371c:	2b01      	cmp	r3, #1
 800371e:	f040 814a 	bne.w	80039b6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003726:	f003 0310 	and.w	r3, r3, #16
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 8143 	beq.w	80039b6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003734:	f003 0310 	and.w	r3, r3, #16
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 813c 	beq.w	80039b6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800373e:	2300      	movs	r3, #0
 8003740:	60bb      	str	r3, [r7, #8]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	60bb      	str	r3, [r7, #8]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375e:	2b40      	cmp	r3, #64	; 0x40
 8003760:	f040 80b4 	bne.w	80038cc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003770:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 8140 	beq.w	80039fa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800377e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003782:	429a      	cmp	r2, r3
 8003784:	f080 8139 	bcs.w	80039fa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800378e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800379a:	f000 8088 	beq.w	80038ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	330c      	adds	r3, #12
 80037a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037ac:	e853 3f00 	ldrex	r3, [r3]
 80037b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80037b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	330c      	adds	r3, #12
 80037c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80037ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80037d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80037da:	e841 2300 	strex	r3, r2, [r1]
 80037de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80037e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1d9      	bne.n	800379e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	3314      	adds	r3, #20
 80037f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037f4:	e853 3f00 	ldrex	r3, [r3]
 80037f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80037fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037fc:	f023 0301 	bic.w	r3, r3, #1
 8003800:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	3314      	adds	r3, #20
 800380a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800380e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003812:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003814:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003816:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800381a:	e841 2300 	strex	r3, r2, [r1]
 800381e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003820:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1e1      	bne.n	80037ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	3314      	adds	r3, #20
 800382c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003830:	e853 3f00 	ldrex	r3, [r3]
 8003834:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800383c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3314      	adds	r3, #20
 8003846:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800384a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800384c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003850:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003852:	e841 2300 	strex	r3, r2, [r1]
 8003856:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003858:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1e3      	bne.n	8003826 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2220      	movs	r2, #32
 8003862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	330c      	adds	r3, #12
 8003872:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003876:	e853 3f00 	ldrex	r3, [r3]
 800387a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800387c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800387e:	f023 0310 	bic.w	r3, r3, #16
 8003882:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	330c      	adds	r3, #12
 800388c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003890:	65ba      	str	r2, [r7, #88]	; 0x58
 8003892:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003894:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003896:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003898:	e841 2300 	strex	r3, r2, [r1]
 800389c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800389e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1e3      	bne.n	800386c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fe fc07 	bl	80020bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	4619      	mov	r1, r3
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f8c0 	bl	8003a44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038c4:	e099      	b.n	80039fa <HAL_UART_IRQHandler+0x50e>
 80038c6:	bf00      	nop
 80038c8:	08003b23 	.word	0x08003b23
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 808b 	beq.w	80039fe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80038e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 8086 	beq.w	80039fe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	330c      	adds	r3, #12
 80038f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fc:	e853 3f00 	ldrex	r3, [r3]
 8003900:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003904:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003908:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	330c      	adds	r3, #12
 8003912:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003916:	647a      	str	r2, [r7, #68]	; 0x44
 8003918:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800391c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800391e:	e841 2300 	strex	r3, r2, [r1]
 8003922:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1e3      	bne.n	80038f2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	3314      	adds	r3, #20
 8003930:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	e853 3f00 	ldrex	r3, [r3]
 8003938:	623b      	str	r3, [r7, #32]
   return(result);
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	f023 0301 	bic.w	r3, r3, #1
 8003940:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	3314      	adds	r3, #20
 800394a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800394e:	633a      	str	r2, [r7, #48]	; 0x30
 8003950:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003952:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003956:	e841 2300 	strex	r3, r2, [r1]
 800395a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800395c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1e3      	bne.n	800392a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2220      	movs	r2, #32
 8003966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	330c      	adds	r3, #12
 8003976:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	e853 3f00 	ldrex	r3, [r3]
 800397e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f023 0310 	bic.w	r3, r3, #16
 8003986:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	330c      	adds	r3, #12
 8003990:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003994:	61fa      	str	r2, [r7, #28]
 8003996:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003998:	69b9      	ldr	r1, [r7, #24]
 800399a:	69fa      	ldr	r2, [r7, #28]
 800399c:	e841 2300 	strex	r3, r2, [r1]
 80039a0:	617b      	str	r3, [r7, #20]
   return(result);
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1e3      	bne.n	8003970 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039ac:	4619      	mov	r1, r3
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f848 	bl	8003a44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039b4:	e023      	b.n	80039fe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d009      	beq.n	80039d6 <HAL_UART_IRQHandler+0x4ea>
 80039c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f8bb 	bl	8003b4a <UART_Transmit_IT>
    return;
 80039d4:	e014      	b.n	8003a00 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00e      	beq.n	8003a00 <HAL_UART_IRQHandler+0x514>
 80039e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d008      	beq.n	8003a00 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f8fb 	bl	8003bea <UART_EndTransmit_IT>
    return;
 80039f4:	e004      	b.n	8003a00 <HAL_UART_IRQHandler+0x514>
    return;
 80039f6:	bf00      	nop
 80039f8:	e002      	b.n	8003a00 <HAL_UART_IRQHandler+0x514>
      return;
 80039fa:	bf00      	nop
 80039fc:	e000      	b.n	8003a00 <HAL_UART_IRQHandler+0x514>
      return;
 80039fe:	bf00      	nop
  }
}
 8003a00:	37e8      	adds	r7, #232	; 0xe8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop

08003a08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b095      	sub	sp, #84	; 0x54
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	330c      	adds	r3, #12
 8003a6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a6e:	e853 3f00 	ldrex	r3, [r3]
 8003a72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	330c      	adds	r3, #12
 8003a82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a84:	643a      	str	r2, [r7, #64]	; 0x40
 8003a86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a8c:	e841 2300 	strex	r3, r2, [r1]
 8003a90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1e5      	bne.n	8003a64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3314      	adds	r3, #20
 8003a9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	e853 3f00 	ldrex	r3, [r3]
 8003aa6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	f023 0301 	bic.w	r3, r3, #1
 8003aae:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	3314      	adds	r3, #20
 8003ab6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ab8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003aba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003abe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ac0:	e841 2300 	strex	r3, r2, [r1]
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1e5      	bne.n	8003a98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d119      	bne.n	8003b08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	330c      	adds	r3, #12
 8003ada:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	e853 3f00 	ldrex	r3, [r3]
 8003ae2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	f023 0310 	bic.w	r3, r3, #16
 8003aea:	647b      	str	r3, [r7, #68]	; 0x44
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	330c      	adds	r3, #12
 8003af2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003af4:	61ba      	str	r2, [r7, #24]
 8003af6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af8:	6979      	ldr	r1, [r7, #20]
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	e841 2300 	strex	r3, r2, [r1]
 8003b00:	613b      	str	r3, [r7, #16]
   return(result);
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1e5      	bne.n	8003ad4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b16:	bf00      	nop
 8003b18:	3754      	adds	r7, #84	; 0x54
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b084      	sub	sp, #16
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f7ff ff77 	bl	8003a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b42:	bf00      	nop
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b085      	sub	sp, #20
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b21      	cmp	r3, #33	; 0x21
 8003b5c:	d13e      	bne.n	8003bdc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b66:	d114      	bne.n	8003b92 <UART_Transmit_IT+0x48>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d110      	bne.n	8003b92 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b84:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	1c9a      	adds	r2, r3, #2
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	621a      	str	r2, [r3, #32]
 8003b90:	e008      	b.n	8003ba4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	1c59      	adds	r1, r3, #1
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6211      	str	r1, [r2, #32]
 8003b9c:	781a      	ldrb	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10f      	bne.n	8003bd8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bc6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bd6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	e000      	b.n	8003bde <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003bdc:	2302      	movs	r3, #2
  }
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b082      	sub	sp, #8
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2220      	movs	r2, #32
 8003c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7ff fefc 	bl	8003a08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b08c      	sub	sp, #48	; 0x30
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b22      	cmp	r3, #34	; 0x22
 8003c2c:	f040 80ab 	bne.w	8003d86 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c38:	d117      	bne.n	8003c6a <UART_Receive_IT+0x50>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d113      	bne.n	8003c6a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c42:	2300      	movs	r3, #0
 8003c44:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c62:	1c9a      	adds	r2, r3, #2
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	629a      	str	r2, [r3, #40]	; 0x28
 8003c68:	e026      	b.n	8003cb8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003c70:	2300      	movs	r3, #0
 8003c72:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c7c:	d007      	beq.n	8003c8e <UART_Receive_IT+0x74>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10a      	bne.n	8003c9c <UART_Receive_IT+0x82>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d106      	bne.n	8003c9c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c98:	701a      	strb	r2, [r3, #0]
 8003c9a:	e008      	b.n	8003cae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb2:	1c5a      	adds	r2, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d15a      	bne.n	8003d82 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0220 	bic.w	r2, r2, #32
 8003cda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	695a      	ldr	r2, [r3, #20]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 0201 	bic.w	r2, r2, #1
 8003cfa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d135      	bne.n	8003d78 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	330c      	adds	r3, #12
 8003d18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	e853 3f00 	ldrex	r3, [r3]
 8003d20:	613b      	str	r3, [r7, #16]
   return(result);
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f023 0310 	bic.w	r3, r3, #16
 8003d28:	627b      	str	r3, [r7, #36]	; 0x24
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	330c      	adds	r3, #12
 8003d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d32:	623a      	str	r2, [r7, #32]
 8003d34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d36:	69f9      	ldr	r1, [r7, #28]
 8003d38:	6a3a      	ldr	r2, [r7, #32]
 8003d3a:	e841 2300 	strex	r3, r2, [r1]
 8003d3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1e5      	bne.n	8003d12 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0310 	and.w	r3, r3, #16
 8003d50:	2b10      	cmp	r3, #16
 8003d52:	d10a      	bne.n	8003d6a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d54:	2300      	movs	r3, #0
 8003d56:	60fb      	str	r3, [r7, #12]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d6e:	4619      	mov	r1, r3
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7ff fe67 	bl	8003a44 <HAL_UARTEx_RxEventCallback>
 8003d76:	e002      	b.n	8003d7e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7ff fe4f 	bl	8003a1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	e002      	b.n	8003d88 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	e000      	b.n	8003d88 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003d86:	2302      	movs	r3, #2
  }
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3730      	adds	r7, #48	; 0x30
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d94:	b0c0      	sub	sp, #256	; 0x100
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dac:	68d9      	ldr	r1, [r3, #12]
 8003dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	ea40 0301 	orr.w	r3, r0, r1
 8003db8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003de8:	f021 010c 	bic.w	r1, r1, #12
 8003dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003df6:	430b      	orrs	r3, r1
 8003df8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e0a:	6999      	ldr	r1, [r3, #24]
 8003e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	ea40 0301 	orr.w	r3, r0, r1
 8003e16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	4b8f      	ldr	r3, [pc, #572]	; (800405c <UART_SetConfig+0x2cc>)
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d005      	beq.n	8003e30 <UART_SetConfig+0xa0>
 8003e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	4b8d      	ldr	r3, [pc, #564]	; (8004060 <UART_SetConfig+0x2d0>)
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d104      	bne.n	8003e3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e30:	f7fe fff8 	bl	8002e24 <HAL_RCC_GetPCLK2Freq>
 8003e34:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003e38:	e003      	b.n	8003e42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e3a:	f7fe ffdf 	bl	8002dfc <HAL_RCC_GetPCLK1Freq>
 8003e3e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e4c:	f040 810c 	bne.w	8004068 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e54:	2200      	movs	r2, #0
 8003e56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e5a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e62:	4622      	mov	r2, r4
 8003e64:	462b      	mov	r3, r5
 8003e66:	1891      	adds	r1, r2, r2
 8003e68:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e6a:	415b      	adcs	r3, r3
 8003e6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e72:	4621      	mov	r1, r4
 8003e74:	eb12 0801 	adds.w	r8, r2, r1
 8003e78:	4629      	mov	r1, r5
 8003e7a:	eb43 0901 	adc.w	r9, r3, r1
 8003e7e:	f04f 0200 	mov.w	r2, #0
 8003e82:	f04f 0300 	mov.w	r3, #0
 8003e86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e92:	4690      	mov	r8, r2
 8003e94:	4699      	mov	r9, r3
 8003e96:	4623      	mov	r3, r4
 8003e98:	eb18 0303 	adds.w	r3, r8, r3
 8003e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ea0:	462b      	mov	r3, r5
 8003ea2:	eb49 0303 	adc.w	r3, r9, r3
 8003ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003eb6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003eba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	18db      	adds	r3, r3, r3
 8003ec2:	653b      	str	r3, [r7, #80]	; 0x50
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	eb42 0303 	adc.w	r3, r2, r3
 8003eca:	657b      	str	r3, [r7, #84]	; 0x54
 8003ecc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ed0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ed4:	f7fc f980 	bl	80001d8 <__aeabi_uldivmod>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	460b      	mov	r3, r1
 8003edc:	4b61      	ldr	r3, [pc, #388]	; (8004064 <UART_SetConfig+0x2d4>)
 8003ede:	fba3 2302 	umull	r2, r3, r3, r2
 8003ee2:	095b      	lsrs	r3, r3, #5
 8003ee4:	011c      	lsls	r4, r3, #4
 8003ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eea:	2200      	movs	r2, #0
 8003eec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ef0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ef4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ef8:	4642      	mov	r2, r8
 8003efa:	464b      	mov	r3, r9
 8003efc:	1891      	adds	r1, r2, r2
 8003efe:	64b9      	str	r1, [r7, #72]	; 0x48
 8003f00:	415b      	adcs	r3, r3
 8003f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f08:	4641      	mov	r1, r8
 8003f0a:	eb12 0a01 	adds.w	sl, r2, r1
 8003f0e:	4649      	mov	r1, r9
 8003f10:	eb43 0b01 	adc.w	fp, r3, r1
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	f04f 0300 	mov.w	r3, #0
 8003f1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f28:	4692      	mov	sl, r2
 8003f2a:	469b      	mov	fp, r3
 8003f2c:	4643      	mov	r3, r8
 8003f2e:	eb1a 0303 	adds.w	r3, sl, r3
 8003f32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f36:	464b      	mov	r3, r9
 8003f38:	eb4b 0303 	adc.w	r3, fp, r3
 8003f3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f4c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f54:	460b      	mov	r3, r1
 8003f56:	18db      	adds	r3, r3, r3
 8003f58:	643b      	str	r3, [r7, #64]	; 0x40
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	eb42 0303 	adc.w	r3, r2, r3
 8003f60:	647b      	str	r3, [r7, #68]	; 0x44
 8003f62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f6a:	f7fc f935 	bl	80001d8 <__aeabi_uldivmod>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	4611      	mov	r1, r2
 8003f74:	4b3b      	ldr	r3, [pc, #236]	; (8004064 <UART_SetConfig+0x2d4>)
 8003f76:	fba3 2301 	umull	r2, r3, r3, r1
 8003f7a:	095b      	lsrs	r3, r3, #5
 8003f7c:	2264      	movs	r2, #100	; 0x64
 8003f7e:	fb02 f303 	mul.w	r3, r2, r3
 8003f82:	1acb      	subs	r3, r1, r3
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f8a:	4b36      	ldr	r3, [pc, #216]	; (8004064 <UART_SetConfig+0x2d4>)
 8003f8c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f90:	095b      	lsrs	r3, r3, #5
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f98:	441c      	add	r4, r3
 8003f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fa4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003fa8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003fac:	4642      	mov	r2, r8
 8003fae:	464b      	mov	r3, r9
 8003fb0:	1891      	adds	r1, r2, r2
 8003fb2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003fb4:	415b      	adcs	r3, r3
 8003fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003fbc:	4641      	mov	r1, r8
 8003fbe:	1851      	adds	r1, r2, r1
 8003fc0:	6339      	str	r1, [r7, #48]	; 0x30
 8003fc2:	4649      	mov	r1, r9
 8003fc4:	414b      	adcs	r3, r1
 8003fc6:	637b      	str	r3, [r7, #52]	; 0x34
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003fd4:	4659      	mov	r1, fp
 8003fd6:	00cb      	lsls	r3, r1, #3
 8003fd8:	4651      	mov	r1, sl
 8003fda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fde:	4651      	mov	r1, sl
 8003fe0:	00ca      	lsls	r2, r1, #3
 8003fe2:	4610      	mov	r0, r2
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	4642      	mov	r2, r8
 8003fea:	189b      	adds	r3, r3, r2
 8003fec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ff0:	464b      	mov	r3, r9
 8003ff2:	460a      	mov	r2, r1
 8003ff4:	eb42 0303 	adc.w	r3, r2, r3
 8003ff8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004008:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800400c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004010:	460b      	mov	r3, r1
 8004012:	18db      	adds	r3, r3, r3
 8004014:	62bb      	str	r3, [r7, #40]	; 0x28
 8004016:	4613      	mov	r3, r2
 8004018:	eb42 0303 	adc.w	r3, r2, r3
 800401c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800401e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004022:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004026:	f7fc f8d7 	bl	80001d8 <__aeabi_uldivmod>
 800402a:	4602      	mov	r2, r0
 800402c:	460b      	mov	r3, r1
 800402e:	4b0d      	ldr	r3, [pc, #52]	; (8004064 <UART_SetConfig+0x2d4>)
 8004030:	fba3 1302 	umull	r1, r3, r3, r2
 8004034:	095b      	lsrs	r3, r3, #5
 8004036:	2164      	movs	r1, #100	; 0x64
 8004038:	fb01 f303 	mul.w	r3, r1, r3
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	3332      	adds	r3, #50	; 0x32
 8004042:	4a08      	ldr	r2, [pc, #32]	; (8004064 <UART_SetConfig+0x2d4>)
 8004044:	fba2 2303 	umull	r2, r3, r2, r3
 8004048:	095b      	lsrs	r3, r3, #5
 800404a:	f003 0207 	and.w	r2, r3, #7
 800404e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4422      	add	r2, r4
 8004056:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004058:	e105      	b.n	8004266 <UART_SetConfig+0x4d6>
 800405a:	bf00      	nop
 800405c:	40011000 	.word	0x40011000
 8004060:	40011400 	.word	0x40011400
 8004064:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800406c:	2200      	movs	r2, #0
 800406e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004072:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004076:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800407a:	4642      	mov	r2, r8
 800407c:	464b      	mov	r3, r9
 800407e:	1891      	adds	r1, r2, r2
 8004080:	6239      	str	r1, [r7, #32]
 8004082:	415b      	adcs	r3, r3
 8004084:	627b      	str	r3, [r7, #36]	; 0x24
 8004086:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800408a:	4641      	mov	r1, r8
 800408c:	1854      	adds	r4, r2, r1
 800408e:	4649      	mov	r1, r9
 8004090:	eb43 0501 	adc.w	r5, r3, r1
 8004094:	f04f 0200 	mov.w	r2, #0
 8004098:	f04f 0300 	mov.w	r3, #0
 800409c:	00eb      	lsls	r3, r5, #3
 800409e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040a2:	00e2      	lsls	r2, r4, #3
 80040a4:	4614      	mov	r4, r2
 80040a6:	461d      	mov	r5, r3
 80040a8:	4643      	mov	r3, r8
 80040aa:	18e3      	adds	r3, r4, r3
 80040ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040b0:	464b      	mov	r3, r9
 80040b2:	eb45 0303 	adc.w	r3, r5, r3
 80040b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	f04f 0300 	mov.w	r3, #0
 80040d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80040d6:	4629      	mov	r1, r5
 80040d8:	008b      	lsls	r3, r1, #2
 80040da:	4621      	mov	r1, r4
 80040dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040e0:	4621      	mov	r1, r4
 80040e2:	008a      	lsls	r2, r1, #2
 80040e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80040e8:	f7fc f876 	bl	80001d8 <__aeabi_uldivmod>
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4b60      	ldr	r3, [pc, #384]	; (8004274 <UART_SetConfig+0x4e4>)
 80040f2:	fba3 2302 	umull	r2, r3, r3, r2
 80040f6:	095b      	lsrs	r3, r3, #5
 80040f8:	011c      	lsls	r4, r3, #4
 80040fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040fe:	2200      	movs	r2, #0
 8004100:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004104:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004108:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800410c:	4642      	mov	r2, r8
 800410e:	464b      	mov	r3, r9
 8004110:	1891      	adds	r1, r2, r2
 8004112:	61b9      	str	r1, [r7, #24]
 8004114:	415b      	adcs	r3, r3
 8004116:	61fb      	str	r3, [r7, #28]
 8004118:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800411c:	4641      	mov	r1, r8
 800411e:	1851      	adds	r1, r2, r1
 8004120:	6139      	str	r1, [r7, #16]
 8004122:	4649      	mov	r1, r9
 8004124:	414b      	adcs	r3, r1
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	f04f 0300 	mov.w	r3, #0
 8004130:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004134:	4659      	mov	r1, fp
 8004136:	00cb      	lsls	r3, r1, #3
 8004138:	4651      	mov	r1, sl
 800413a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800413e:	4651      	mov	r1, sl
 8004140:	00ca      	lsls	r2, r1, #3
 8004142:	4610      	mov	r0, r2
 8004144:	4619      	mov	r1, r3
 8004146:	4603      	mov	r3, r0
 8004148:	4642      	mov	r2, r8
 800414a:	189b      	adds	r3, r3, r2
 800414c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004150:	464b      	mov	r3, r9
 8004152:	460a      	mov	r2, r1
 8004154:	eb42 0303 	adc.w	r3, r2, r3
 8004158:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800415c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	67bb      	str	r3, [r7, #120]	; 0x78
 8004166:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004168:	f04f 0200 	mov.w	r2, #0
 800416c:	f04f 0300 	mov.w	r3, #0
 8004170:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004174:	4649      	mov	r1, r9
 8004176:	008b      	lsls	r3, r1, #2
 8004178:	4641      	mov	r1, r8
 800417a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800417e:	4641      	mov	r1, r8
 8004180:	008a      	lsls	r2, r1, #2
 8004182:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004186:	f7fc f827 	bl	80001d8 <__aeabi_uldivmod>
 800418a:	4602      	mov	r2, r0
 800418c:	460b      	mov	r3, r1
 800418e:	4b39      	ldr	r3, [pc, #228]	; (8004274 <UART_SetConfig+0x4e4>)
 8004190:	fba3 1302 	umull	r1, r3, r3, r2
 8004194:	095b      	lsrs	r3, r3, #5
 8004196:	2164      	movs	r1, #100	; 0x64
 8004198:	fb01 f303 	mul.w	r3, r1, r3
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	3332      	adds	r3, #50	; 0x32
 80041a2:	4a34      	ldr	r2, [pc, #208]	; (8004274 <UART_SetConfig+0x4e4>)
 80041a4:	fba2 2303 	umull	r2, r3, r2, r3
 80041a8:	095b      	lsrs	r3, r3, #5
 80041aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041ae:	441c      	add	r4, r3
 80041b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041b4:	2200      	movs	r2, #0
 80041b6:	673b      	str	r3, [r7, #112]	; 0x70
 80041b8:	677a      	str	r2, [r7, #116]	; 0x74
 80041ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80041be:	4642      	mov	r2, r8
 80041c0:	464b      	mov	r3, r9
 80041c2:	1891      	adds	r1, r2, r2
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	415b      	adcs	r3, r3
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041ce:	4641      	mov	r1, r8
 80041d0:	1851      	adds	r1, r2, r1
 80041d2:	6039      	str	r1, [r7, #0]
 80041d4:	4649      	mov	r1, r9
 80041d6:	414b      	adcs	r3, r1
 80041d8:	607b      	str	r3, [r7, #4]
 80041da:	f04f 0200 	mov.w	r2, #0
 80041de:	f04f 0300 	mov.w	r3, #0
 80041e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041e6:	4659      	mov	r1, fp
 80041e8:	00cb      	lsls	r3, r1, #3
 80041ea:	4651      	mov	r1, sl
 80041ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041f0:	4651      	mov	r1, sl
 80041f2:	00ca      	lsls	r2, r1, #3
 80041f4:	4610      	mov	r0, r2
 80041f6:	4619      	mov	r1, r3
 80041f8:	4603      	mov	r3, r0
 80041fa:	4642      	mov	r2, r8
 80041fc:	189b      	adds	r3, r3, r2
 80041fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004200:	464b      	mov	r3, r9
 8004202:	460a      	mov	r2, r1
 8004204:	eb42 0303 	adc.w	r3, r2, r3
 8004208:	66fb      	str	r3, [r7, #108]	; 0x6c
 800420a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	663b      	str	r3, [r7, #96]	; 0x60
 8004214:	667a      	str	r2, [r7, #100]	; 0x64
 8004216:	f04f 0200 	mov.w	r2, #0
 800421a:	f04f 0300 	mov.w	r3, #0
 800421e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004222:	4649      	mov	r1, r9
 8004224:	008b      	lsls	r3, r1, #2
 8004226:	4641      	mov	r1, r8
 8004228:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800422c:	4641      	mov	r1, r8
 800422e:	008a      	lsls	r2, r1, #2
 8004230:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004234:	f7fb ffd0 	bl	80001d8 <__aeabi_uldivmod>
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
 800423c:	4b0d      	ldr	r3, [pc, #52]	; (8004274 <UART_SetConfig+0x4e4>)
 800423e:	fba3 1302 	umull	r1, r3, r3, r2
 8004242:	095b      	lsrs	r3, r3, #5
 8004244:	2164      	movs	r1, #100	; 0x64
 8004246:	fb01 f303 	mul.w	r3, r1, r3
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	3332      	adds	r3, #50	; 0x32
 8004250:	4a08      	ldr	r2, [pc, #32]	; (8004274 <UART_SetConfig+0x4e4>)
 8004252:	fba2 2303 	umull	r2, r3, r2, r3
 8004256:	095b      	lsrs	r3, r3, #5
 8004258:	f003 020f 	and.w	r2, r3, #15
 800425c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4422      	add	r2, r4
 8004264:	609a      	str	r2, [r3, #8]
}
 8004266:	bf00      	nop
 8004268:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800426c:	46bd      	mov	sp, r7
 800426e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004272:	bf00      	nop
 8004274:	51eb851f 	.word	0x51eb851f

08004278 <__libc_init_array>:
 8004278:	b570      	push	{r4, r5, r6, lr}
 800427a:	4d0d      	ldr	r5, [pc, #52]	; (80042b0 <__libc_init_array+0x38>)
 800427c:	4c0d      	ldr	r4, [pc, #52]	; (80042b4 <__libc_init_array+0x3c>)
 800427e:	1b64      	subs	r4, r4, r5
 8004280:	10a4      	asrs	r4, r4, #2
 8004282:	2600      	movs	r6, #0
 8004284:	42a6      	cmp	r6, r4
 8004286:	d109      	bne.n	800429c <__libc_init_array+0x24>
 8004288:	4d0b      	ldr	r5, [pc, #44]	; (80042b8 <__libc_init_array+0x40>)
 800428a:	4c0c      	ldr	r4, [pc, #48]	; (80042bc <__libc_init_array+0x44>)
 800428c:	f000 f820 	bl	80042d0 <_init>
 8004290:	1b64      	subs	r4, r4, r5
 8004292:	10a4      	asrs	r4, r4, #2
 8004294:	2600      	movs	r6, #0
 8004296:	42a6      	cmp	r6, r4
 8004298:	d105      	bne.n	80042a6 <__libc_init_array+0x2e>
 800429a:	bd70      	pop	{r4, r5, r6, pc}
 800429c:	f855 3b04 	ldr.w	r3, [r5], #4
 80042a0:	4798      	blx	r3
 80042a2:	3601      	adds	r6, #1
 80042a4:	e7ee      	b.n	8004284 <__libc_init_array+0xc>
 80042a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80042aa:	4798      	blx	r3
 80042ac:	3601      	adds	r6, #1
 80042ae:	e7f2      	b.n	8004296 <__libc_init_array+0x1e>
 80042b0:	08004308 	.word	0x08004308
 80042b4:	08004308 	.word	0x08004308
 80042b8:	08004308 	.word	0x08004308
 80042bc:	0800430c 	.word	0x0800430c

080042c0 <memset>:
 80042c0:	4402      	add	r2, r0
 80042c2:	4603      	mov	r3, r0
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d100      	bne.n	80042ca <memset+0xa>
 80042c8:	4770      	bx	lr
 80042ca:	f803 1b01 	strb.w	r1, [r3], #1
 80042ce:	e7f9      	b.n	80042c4 <memset+0x4>

080042d0 <_init>:
 80042d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042d2:	bf00      	nop
 80042d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042d6:	bc08      	pop	{r3}
 80042d8:	469e      	mov	lr, r3
 80042da:	4770      	bx	lr

080042dc <_fini>:
 80042dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042de:	bf00      	nop
 80042e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042e2:	bc08      	pop	{r3}
 80042e4:	469e      	mov	lr, r3
 80042e6:	4770      	bx	lr
