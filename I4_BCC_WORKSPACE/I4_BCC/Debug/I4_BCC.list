
I4_BCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb94  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000668  0800ed34  0800ed34  0001ed34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f39c  0800f39c  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f39c  0800f39c  0001f39c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f3a4  0800f3a4  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f3a4  0800f3a4  0001f3a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f3a8  0800f3a8  0001f3a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800f3ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a6d4  200000a0  0800f44c  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a774  0800f44c  0002a774  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c2ae  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006d30  00000000  00000000  0004c37e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024b0  00000000  00000000  000530b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002178  00000000  00000000  00055560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000227be  00000000  00000000  000576d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003c2fe  00000000  00000000  00079e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b0b1a  00000000  00000000  000b6194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166cae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000097b8  00000000  00000000  00166d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a0 	.word	0x200000a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ed1c 	.word	0x0800ed1c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a4 	.word	0x200000a4
 80001dc:	0800ed1c 	.word	0x0800ed1c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2uiz>:
 800098c:	004a      	lsls	r2, r1, #1
 800098e:	d211      	bcs.n	80009b4 <__aeabi_d2uiz+0x28>
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000994:	d211      	bcs.n	80009ba <__aeabi_d2uiz+0x2e>
 8000996:	d50d      	bpl.n	80009b4 <__aeabi_d2uiz+0x28>
 8000998:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d40e      	bmi.n	80009c0 <__aeabi_d2uiz+0x34>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	fa23 f002 	lsr.w	r0, r3, r2
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009be:	d102      	bne.n	80009c6 <__aeabi_d2uiz+0x3a>
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	4770      	bx	lr
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	4770      	bx	lr

080009cc <__aeabi_uldivmod>:
 80009cc:	b953      	cbnz	r3, 80009e4 <__aeabi_uldivmod+0x18>
 80009ce:	b94a      	cbnz	r2, 80009e4 <__aeabi_uldivmod+0x18>
 80009d0:	2900      	cmp	r1, #0
 80009d2:	bf08      	it	eq
 80009d4:	2800      	cmpeq	r0, #0
 80009d6:	bf1c      	itt	ne
 80009d8:	f04f 31ff 	movne.w	r1, #4294967295
 80009dc:	f04f 30ff 	movne.w	r0, #4294967295
 80009e0:	f000 b974 	b.w	8000ccc <__aeabi_idiv0>
 80009e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009ec:	f000 f806 	bl	80009fc <__udivmoddi4>
 80009f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f8:	b004      	add	sp, #16
 80009fa:	4770      	bx	lr

080009fc <__udivmoddi4>:
 80009fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a00:	9d08      	ldr	r5, [sp, #32]
 8000a02:	4604      	mov	r4, r0
 8000a04:	468e      	mov	lr, r1
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d14d      	bne.n	8000aa6 <__udivmoddi4+0xaa>
 8000a0a:	428a      	cmp	r2, r1
 8000a0c:	4694      	mov	ip, r2
 8000a0e:	d969      	bls.n	8000ae4 <__udivmoddi4+0xe8>
 8000a10:	fab2 f282 	clz	r2, r2
 8000a14:	b152      	cbz	r2, 8000a2c <__udivmoddi4+0x30>
 8000a16:	fa01 f302 	lsl.w	r3, r1, r2
 8000a1a:	f1c2 0120 	rsb	r1, r2, #32
 8000a1e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a22:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a26:	ea41 0e03 	orr.w	lr, r1, r3
 8000a2a:	4094      	lsls	r4, r2
 8000a2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a30:	0c21      	lsrs	r1, r4, #16
 8000a32:	fbbe f6f8 	udiv	r6, lr, r8
 8000a36:	fa1f f78c 	uxth.w	r7, ip
 8000a3a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a42:	fb06 f107 	mul.w	r1, r6, r7
 8000a46:	4299      	cmp	r1, r3
 8000a48:	d90a      	bls.n	8000a60 <__udivmoddi4+0x64>
 8000a4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a4e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a52:	f080 811f 	bcs.w	8000c94 <__udivmoddi4+0x298>
 8000a56:	4299      	cmp	r1, r3
 8000a58:	f240 811c 	bls.w	8000c94 <__udivmoddi4+0x298>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	1a5b      	subs	r3, r3, r1
 8000a62:	b2a4      	uxth	r4, r4
 8000a64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a68:	fb08 3310 	mls	r3, r8, r0, r3
 8000a6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a70:	fb00 f707 	mul.w	r7, r0, r7
 8000a74:	42a7      	cmp	r7, r4
 8000a76:	d90a      	bls.n	8000a8e <__udivmoddi4+0x92>
 8000a78:	eb1c 0404 	adds.w	r4, ip, r4
 8000a7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a80:	f080 810a 	bcs.w	8000c98 <__udivmoddi4+0x29c>
 8000a84:	42a7      	cmp	r7, r4
 8000a86:	f240 8107 	bls.w	8000c98 <__udivmoddi4+0x29c>
 8000a8a:	4464      	add	r4, ip
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a92:	1be4      	subs	r4, r4, r7
 8000a94:	2600      	movs	r6, #0
 8000a96:	b11d      	cbz	r5, 8000aa0 <__udivmoddi4+0xa4>
 8000a98:	40d4      	lsrs	r4, r2
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000aa0:	4631      	mov	r1, r6
 8000aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa6:	428b      	cmp	r3, r1
 8000aa8:	d909      	bls.n	8000abe <__udivmoddi4+0xc2>
 8000aaa:	2d00      	cmp	r5, #0
 8000aac:	f000 80ef 	beq.w	8000c8e <__udivmoddi4+0x292>
 8000ab0:	2600      	movs	r6, #0
 8000ab2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ab6:	4630      	mov	r0, r6
 8000ab8:	4631      	mov	r1, r6
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abe:	fab3 f683 	clz	r6, r3
 8000ac2:	2e00      	cmp	r6, #0
 8000ac4:	d14a      	bne.n	8000b5c <__udivmoddi4+0x160>
 8000ac6:	428b      	cmp	r3, r1
 8000ac8:	d302      	bcc.n	8000ad0 <__udivmoddi4+0xd4>
 8000aca:	4282      	cmp	r2, r0
 8000acc:	f200 80f9 	bhi.w	8000cc2 <__udivmoddi4+0x2c6>
 8000ad0:	1a84      	subs	r4, r0, r2
 8000ad2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	469e      	mov	lr, r3
 8000ada:	2d00      	cmp	r5, #0
 8000adc:	d0e0      	beq.n	8000aa0 <__udivmoddi4+0xa4>
 8000ade:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ae2:	e7dd      	b.n	8000aa0 <__udivmoddi4+0xa4>
 8000ae4:	b902      	cbnz	r2, 8000ae8 <__udivmoddi4+0xec>
 8000ae6:	deff      	udf	#255	; 0xff
 8000ae8:	fab2 f282 	clz	r2, r2
 8000aec:	2a00      	cmp	r2, #0
 8000aee:	f040 8092 	bne.w	8000c16 <__udivmoddi4+0x21a>
 8000af2:	eba1 010c 	sub.w	r1, r1, ip
 8000af6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afa:	fa1f fe8c 	uxth.w	lr, ip
 8000afe:	2601      	movs	r6, #1
 8000b00:	0c20      	lsrs	r0, r4, #16
 8000b02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b06:	fb07 1113 	mls	r1, r7, r3, r1
 8000b0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b0e:	fb0e f003 	mul.w	r0, lr, r3
 8000b12:	4288      	cmp	r0, r1
 8000b14:	d908      	bls.n	8000b28 <__udivmoddi4+0x12c>
 8000b16:	eb1c 0101 	adds.w	r1, ip, r1
 8000b1a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b1e:	d202      	bcs.n	8000b26 <__udivmoddi4+0x12a>
 8000b20:	4288      	cmp	r0, r1
 8000b22:	f200 80cb 	bhi.w	8000cbc <__udivmoddi4+0x2c0>
 8000b26:	4643      	mov	r3, r8
 8000b28:	1a09      	subs	r1, r1, r0
 8000b2a:	b2a4      	uxth	r4, r4
 8000b2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b30:	fb07 1110 	mls	r1, r7, r0, r1
 8000b34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b38:	fb0e fe00 	mul.w	lr, lr, r0
 8000b3c:	45a6      	cmp	lr, r4
 8000b3e:	d908      	bls.n	8000b52 <__udivmoddi4+0x156>
 8000b40:	eb1c 0404 	adds.w	r4, ip, r4
 8000b44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b48:	d202      	bcs.n	8000b50 <__udivmoddi4+0x154>
 8000b4a:	45a6      	cmp	lr, r4
 8000b4c:	f200 80bb 	bhi.w	8000cc6 <__udivmoddi4+0x2ca>
 8000b50:	4608      	mov	r0, r1
 8000b52:	eba4 040e 	sub.w	r4, r4, lr
 8000b56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b5a:	e79c      	b.n	8000a96 <__udivmoddi4+0x9a>
 8000b5c:	f1c6 0720 	rsb	r7, r6, #32
 8000b60:	40b3      	lsls	r3, r6
 8000b62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b72:	431c      	orrs	r4, r3
 8000b74:	40f9      	lsrs	r1, r7
 8000b76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b82:	0c20      	lsrs	r0, r4, #16
 8000b84:	fa1f fe8c 	uxth.w	lr, ip
 8000b88:	fb09 1118 	mls	r1, r9, r8, r1
 8000b8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b90:	fb08 f00e 	mul.w	r0, r8, lr
 8000b94:	4288      	cmp	r0, r1
 8000b96:	fa02 f206 	lsl.w	r2, r2, r6
 8000b9a:	d90b      	bls.n	8000bb4 <__udivmoddi4+0x1b8>
 8000b9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ba4:	f080 8088 	bcs.w	8000cb8 <__udivmoddi4+0x2bc>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f240 8085 	bls.w	8000cb8 <__udivmoddi4+0x2bc>
 8000bae:	f1a8 0802 	sub.w	r8, r8, #2
 8000bb2:	4461      	add	r1, ip
 8000bb4:	1a09      	subs	r1, r1, r0
 8000bb6:	b2a4      	uxth	r4, r4
 8000bb8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bbc:	fb09 1110 	mls	r1, r9, r0, r1
 8000bc0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bc8:	458e      	cmp	lr, r1
 8000bca:	d908      	bls.n	8000bde <__udivmoddi4+0x1e2>
 8000bcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bd4:	d26c      	bcs.n	8000cb0 <__udivmoddi4+0x2b4>
 8000bd6:	458e      	cmp	lr, r1
 8000bd8:	d96a      	bls.n	8000cb0 <__udivmoddi4+0x2b4>
 8000bda:	3802      	subs	r0, #2
 8000bdc:	4461      	add	r1, ip
 8000bde:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000be2:	fba0 9402 	umull	r9, r4, r0, r2
 8000be6:	eba1 010e 	sub.w	r1, r1, lr
 8000bea:	42a1      	cmp	r1, r4
 8000bec:	46c8      	mov	r8, r9
 8000bee:	46a6      	mov	lr, r4
 8000bf0:	d356      	bcc.n	8000ca0 <__udivmoddi4+0x2a4>
 8000bf2:	d053      	beq.n	8000c9c <__udivmoddi4+0x2a0>
 8000bf4:	b15d      	cbz	r5, 8000c0e <__udivmoddi4+0x212>
 8000bf6:	ebb3 0208 	subs.w	r2, r3, r8
 8000bfa:	eb61 010e 	sbc.w	r1, r1, lr
 8000bfe:	fa01 f707 	lsl.w	r7, r1, r7
 8000c02:	fa22 f306 	lsr.w	r3, r2, r6
 8000c06:	40f1      	lsrs	r1, r6
 8000c08:	431f      	orrs	r7, r3
 8000c0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c0e:	2600      	movs	r6, #0
 8000c10:	4631      	mov	r1, r6
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	f1c2 0320 	rsb	r3, r2, #32
 8000c1a:	40d8      	lsrs	r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	fa21 f303 	lsr.w	r3, r1, r3
 8000c24:	4091      	lsls	r1, r2
 8000c26:	4301      	orrs	r1, r0
 8000c28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2c:	fa1f fe8c 	uxth.w	lr, ip
 8000c30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c34:	fb07 3610 	mls	r6, r7, r0, r3
 8000c38:	0c0b      	lsrs	r3, r1, #16
 8000c3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c42:	429e      	cmp	r6, r3
 8000c44:	fa04 f402 	lsl.w	r4, r4, r2
 8000c48:	d908      	bls.n	8000c5c <__udivmoddi4+0x260>
 8000c4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c52:	d22f      	bcs.n	8000cb4 <__udivmoddi4+0x2b8>
 8000c54:	429e      	cmp	r6, r3
 8000c56:	d92d      	bls.n	8000cb4 <__udivmoddi4+0x2b8>
 8000c58:	3802      	subs	r0, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1b9b      	subs	r3, r3, r6
 8000c5e:	b289      	uxth	r1, r1
 8000c60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c64:	fb07 3316 	mls	r3, r7, r6, r3
 8000c68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c70:	428b      	cmp	r3, r1
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x28a>
 8000c74:	eb1c 0101 	adds.w	r1, ip, r1
 8000c78:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c7c:	d216      	bcs.n	8000cac <__udivmoddi4+0x2b0>
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d914      	bls.n	8000cac <__udivmoddi4+0x2b0>
 8000c82:	3e02      	subs	r6, #2
 8000c84:	4461      	add	r1, ip
 8000c86:	1ac9      	subs	r1, r1, r3
 8000c88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c8c:	e738      	b.n	8000b00 <__udivmoddi4+0x104>
 8000c8e:	462e      	mov	r6, r5
 8000c90:	4628      	mov	r0, r5
 8000c92:	e705      	b.n	8000aa0 <__udivmoddi4+0xa4>
 8000c94:	4606      	mov	r6, r0
 8000c96:	e6e3      	b.n	8000a60 <__udivmoddi4+0x64>
 8000c98:	4618      	mov	r0, r3
 8000c9a:	e6f8      	b.n	8000a8e <__udivmoddi4+0x92>
 8000c9c:	454b      	cmp	r3, r9
 8000c9e:	d2a9      	bcs.n	8000bf4 <__udivmoddi4+0x1f8>
 8000ca0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ca4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ca8:	3801      	subs	r0, #1
 8000caa:	e7a3      	b.n	8000bf4 <__udivmoddi4+0x1f8>
 8000cac:	4646      	mov	r6, r8
 8000cae:	e7ea      	b.n	8000c86 <__udivmoddi4+0x28a>
 8000cb0:	4620      	mov	r0, r4
 8000cb2:	e794      	b.n	8000bde <__udivmoddi4+0x1e2>
 8000cb4:	4640      	mov	r0, r8
 8000cb6:	e7d1      	b.n	8000c5c <__udivmoddi4+0x260>
 8000cb8:	46d0      	mov	r8, sl
 8000cba:	e77b      	b.n	8000bb4 <__udivmoddi4+0x1b8>
 8000cbc:	3b02      	subs	r3, #2
 8000cbe:	4461      	add	r1, ip
 8000cc0:	e732      	b.n	8000b28 <__udivmoddi4+0x12c>
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	e709      	b.n	8000ada <__udivmoddi4+0xde>
 8000cc6:	4464      	add	r4, ip
 8000cc8:	3802      	subs	r0, #2
 8000cca:	e742      	b.n	8000b52 <__udivmoddi4+0x156>

08000ccc <__aeabi_idiv0>:
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <main>:
/***********************************************************************************
* Function: main														   		   *
* Description: Defined in the linker file as the start of the application.         *
************************************************************************************/
int main()
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	/* Calls for system initialization. */
	SystemManager_Init();
 8000cd4:	f00d fd62 	bl	800e79c <SystemManager_Init>
	/* Initialize the kernel of FreeRTOS. */
	osKernelInitialize();
 8000cd8:	f009 fa80 	bl	800a1dc <osKernelInitialize>
	/* Initialize the FreeRTOS with all its objects.*/
	MX_FREERTOS_Init();
 8000cdc:	f001 fef8 	bl	8002ad0 <MX_FREERTOS_Init>
	/* Start the kernel and the scheduler and FreeRTOS takes
	 * control of the application execution. */
	osKernelStart();
 8000ce0:	f009 faa2 	bl	800a228 <osKernelStart>
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <Btc_RequestState>:
/***********************************************************************************
* Function: Btc_RequestState													   *
* Description: Process bluetooth command for request state 					       *
************************************************************************************/
VOID Btc_RequestState()
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
	if(Btc_ReceivedDataOnBluetooth == 99)
 8000cf0:	4b66      	ldr	r3, [pc, #408]	; (8000e8c <Btc_RequestState+0x1a0>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b63      	cmp	r3, #99	; 0x63
 8000cf6:	d101      	bne.n	8000cfc <Btc_RequestState+0x10>
	{
		SystemManager_PerformReset();
 8000cf8:	f00d fd86 	bl	800e808 <SystemManager_PerformReset>
	}
	else
	{
		/* do nothing */
	}
	if(Btc_ReceivedDataOnBluetooth == 90)
 8000cfc:	4b63      	ldr	r3, [pc, #396]	; (8000e8c <Btc_RequestState+0x1a0>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b5a      	cmp	r3, #90	; 0x5a
 8000d02:	f040 80c0 	bne.w	8000e86 <Btc_RequestState+0x19a>
	{
		Btc_DtcMessageLength = strlen(Btc_DtcMessage);
 8000d06:	4b62      	ldr	r3, [pc, #392]	; (8000e90 <Btc_RequestState+0x1a4>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fa68 	bl	80001e0 <strlen>
 8000d10:	4603      	mov	r3, r0
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	4b5f      	ldr	r3, [pc, #380]	; (8000e94 <Btc_RequestState+0x1a8>)
 8000d16:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcMessage, Btc_DtcMessageLength);
 8000d18:	4b5d      	ldr	r3, [pc, #372]	; (8000e90 <Btc_RequestState+0x1a4>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a5d      	ldr	r2, [pc, #372]	; (8000e94 <Btc_RequestState+0x1a8>)
 8000d1e:	8812      	ldrh	r2, [r2, #0]
 8000d20:	4619      	mov	r1, r3
 8000d22:	485d      	ldr	r0, [pc, #372]	; (8000e98 <Btc_RequestState+0x1ac>)
 8000d24:	f007 fb7a 	bl	800841c <HAL_UART_Transmit_IT>
		Btc_DtcDescriptionLength1 = strlen(Btc_DtcLightSensor);
 8000d28:	4b5c      	ldr	r3, [pc, #368]	; (8000e9c <Btc_RequestState+0x1b0>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fa57 	bl	80001e0 <strlen>
 8000d32:	4603      	mov	r3, r0
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	4b5a      	ldr	r3, [pc, #360]	; (8000ea0 <Btc_RequestState+0x1b4>)
 8000d38:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength2 = strlen(Btc_DtcVibrationSensor);
 8000d3a:	4b5a      	ldr	r3, [pc, #360]	; (8000ea4 <Btc_RequestState+0x1b8>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fa4e 	bl	80001e0 <strlen>
 8000d44:	4603      	mov	r3, r0
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	4b57      	ldr	r3, [pc, #348]	; (8000ea8 <Btc_RequestState+0x1bc>)
 8000d4a:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength3 = strlen(Btc_DtcRearParkingSensor);
 8000d4c:	4b57      	ldr	r3, [pc, #348]	; (8000eac <Btc_RequestState+0x1c0>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fa45 	bl	80001e0 <strlen>
 8000d56:	4603      	mov	r3, r0
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	4b55      	ldr	r3, [pc, #340]	; (8000eb0 <Btc_RequestState+0x1c4>)
 8000d5c:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength4 = strlen(Btc_DtcFrontParkingSensor);
 8000d5e:	4b55      	ldr	r3, [pc, #340]	; (8000eb4 <Btc_RequestState+0x1c8>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fa3c 	bl	80001e0 <strlen>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	4b52      	ldr	r3, [pc, #328]	; (8000eb8 <Btc_RequestState+0x1cc>)
 8000d6e:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength5 = strlen(Btc_DtcHardware);
 8000d70:	4b52      	ldr	r3, [pc, #328]	; (8000ebc <Btc_RequestState+0x1d0>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fa33 	bl	80001e0 <strlen>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	4b50      	ldr	r3, [pc, #320]	; (8000ec0 <Btc_RequestState+0x1d4>)
 8000d80:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength6 = strlen(Btc_DtcBtc);
 8000d82:	4b50      	ldr	r3, [pc, #320]	; (8000ec4 <Btc_RequestState+0x1d8>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fa2a 	bl	80001e0 <strlen>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	4b4d      	ldr	r3, [pc, #308]	; (8000ec8 <Btc_RequestState+0x1dc>)
 8000d92:	801a      	strh	r2, [r3, #0]
		if(Dem_DtcArray[4] != 0)
 8000d94:	4b4d      	ldr	r3, [pc, #308]	; (8000ecc <Btc_RequestState+0x1e0>)
 8000d96:	791b      	ldrb	r3, [r3, #4]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d00d      	beq.n	8000db8 <Btc_RequestState+0xcc>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcBtc, Btc_DtcDescriptionLength6) == HAL_BUSY);
 8000d9c:	bf00      	nop
 8000d9e:	4b49      	ldr	r3, [pc, #292]	; (8000ec4 <Btc_RequestState+0x1d8>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a49      	ldr	r2, [pc, #292]	; (8000ec8 <Btc_RequestState+0x1dc>)
 8000da4:	8812      	ldrh	r2, [r2, #0]
 8000da6:	4619      	mov	r1, r3
 8000da8:	483b      	ldr	r0, [pc, #236]	; (8000e98 <Btc_RequestState+0x1ac>)
 8000daa:	f007 fb37 	bl	800841c <HAL_UART_Transmit_IT>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d0f4      	beq.n	8000d9e <Btc_RequestState+0xb2>
			Rte_Runnable_Wdg_MainFunction();
 8000db4:	f00c fdfe 	bl	800d9b4 <Rte_Runnable_Wdg_MainFunction>
		{
			/* do nothing */
		}


		if(Dem_DtcArray[0] != 0)
 8000db8:	4b44      	ldr	r3, [pc, #272]	; (8000ecc <Btc_RequestState+0x1e0>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d00d      	beq.n	8000ddc <Btc_RequestState+0xf0>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcLightSensor, Btc_DtcDescriptionLength1) == HAL_BUSY);
 8000dc0:	bf00      	nop
 8000dc2:	4b36      	ldr	r3, [pc, #216]	; (8000e9c <Btc_RequestState+0x1b0>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a36      	ldr	r2, [pc, #216]	; (8000ea0 <Btc_RequestState+0x1b4>)
 8000dc8:	8812      	ldrh	r2, [r2, #0]
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4832      	ldr	r0, [pc, #200]	; (8000e98 <Btc_RequestState+0x1ac>)
 8000dce:	f007 fb25 	bl	800841c <HAL_UART_Transmit_IT>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d0f4      	beq.n	8000dc2 <Btc_RequestState+0xd6>
			Rte_Runnable_Wdg_MainFunction();
 8000dd8:	f00c fdec 	bl	800d9b4 <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[1] != 0)
 8000ddc:	4b3b      	ldr	r3, [pc, #236]	; (8000ecc <Btc_RequestState+0x1e0>)
 8000dde:	785b      	ldrb	r3, [r3, #1]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d00d      	beq.n	8000e00 <Btc_RequestState+0x114>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcVibrationSensor, Btc_DtcDescriptionLength2) == HAL_BUSY);
 8000de4:	bf00      	nop
 8000de6:	4b2f      	ldr	r3, [pc, #188]	; (8000ea4 <Btc_RequestState+0x1b8>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a2f      	ldr	r2, [pc, #188]	; (8000ea8 <Btc_RequestState+0x1bc>)
 8000dec:	8812      	ldrh	r2, [r2, #0]
 8000dee:	4619      	mov	r1, r3
 8000df0:	4829      	ldr	r0, [pc, #164]	; (8000e98 <Btc_RequestState+0x1ac>)
 8000df2:	f007 fb13 	bl	800841c <HAL_UART_Transmit_IT>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d0f4      	beq.n	8000de6 <Btc_RequestState+0xfa>
			Rte_Runnable_Wdg_MainFunction();
 8000dfc:	f00c fdda 	bl	800d9b4 <Rte_Runnable_Wdg_MainFunction>
		else
		{
			/* do nothing */
		}

		if(Dem_DtcArray[2] != 0)
 8000e00:	4b32      	ldr	r3, [pc, #200]	; (8000ecc <Btc_RequestState+0x1e0>)
 8000e02:	789b      	ldrb	r3, [r3, #2]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d00d      	beq.n	8000e24 <Btc_RequestState+0x138>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcRearParkingSensor, Btc_DtcDescriptionLength3) == HAL_BUSY);
 8000e08:	bf00      	nop
 8000e0a:	4b28      	ldr	r3, [pc, #160]	; (8000eac <Btc_RequestState+0x1c0>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a28      	ldr	r2, [pc, #160]	; (8000eb0 <Btc_RequestState+0x1c4>)
 8000e10:	8812      	ldrh	r2, [r2, #0]
 8000e12:	4619      	mov	r1, r3
 8000e14:	4820      	ldr	r0, [pc, #128]	; (8000e98 <Btc_RequestState+0x1ac>)
 8000e16:	f007 fb01 	bl	800841c <HAL_UART_Transmit_IT>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d0f4      	beq.n	8000e0a <Btc_RequestState+0x11e>
			Rte_Runnable_Wdg_MainFunction();
 8000e20:	f00c fdc8 	bl	800d9b4 <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[3] != 0)
 8000e24:	4b29      	ldr	r3, [pc, #164]	; (8000ecc <Btc_RequestState+0x1e0>)
 8000e26:	78db      	ldrb	r3, [r3, #3]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d00d      	beq.n	8000e48 <Btc_RequestState+0x15c>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcFrontParkingSensor, Btc_DtcDescriptionLength4) == HAL_BUSY);
 8000e2c:	bf00      	nop
 8000e2e:	4b21      	ldr	r3, [pc, #132]	; (8000eb4 <Btc_RequestState+0x1c8>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a21      	ldr	r2, [pc, #132]	; (8000eb8 <Btc_RequestState+0x1cc>)
 8000e34:	8812      	ldrh	r2, [r2, #0]
 8000e36:	4619      	mov	r1, r3
 8000e38:	4817      	ldr	r0, [pc, #92]	; (8000e98 <Btc_RequestState+0x1ac>)
 8000e3a:	f007 faef 	bl	800841c <HAL_UART_Transmit_IT>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d0f4      	beq.n	8000e2e <Btc_RequestState+0x142>
			Rte_Runnable_Wdg_MainFunction();
 8000e44:	f00c fdb6 	bl	800d9b4 <Rte_Runnable_Wdg_MainFunction>
		else
		{
			/* do nothing */
		}

		if(Dem_DtcArray[5] != 0 || Dem_DtcArray[6] != 0 || Dem_DtcArray[7] != 0)
 8000e48:	4b20      	ldr	r3, [pc, #128]	; (8000ecc <Btc_RequestState+0x1e0>)
 8000e4a:	795b      	ldrb	r3, [r3, #5]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d107      	bne.n	8000e60 <Btc_RequestState+0x174>
 8000e50:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <Btc_RequestState+0x1e0>)
 8000e52:	799b      	ldrb	r3, [r3, #6]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d103      	bne.n	8000e60 <Btc_RequestState+0x174>
 8000e58:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <Btc_RequestState+0x1e0>)
 8000e5a:	79db      	ldrb	r3, [r3, #7]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d00d      	beq.n	8000e7c <Btc_RequestState+0x190>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcHardware, Btc_DtcDescriptionLength5) == HAL_BUSY);
 8000e60:	bf00      	nop
 8000e62:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <Btc_RequestState+0x1d0>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a16      	ldr	r2, [pc, #88]	; (8000ec0 <Btc_RequestState+0x1d4>)
 8000e68:	8812      	ldrh	r2, [r2, #0]
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	480a      	ldr	r0, [pc, #40]	; (8000e98 <Btc_RequestState+0x1ac>)
 8000e6e:	f007 fad5 	bl	800841c <HAL_UART_Transmit_IT>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d0f4      	beq.n	8000e62 <Btc_RequestState+0x176>
			Rte_Runnable_Wdg_MainFunction();
 8000e78:	f00c fd9c 	bl	800d9b4 <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		Rte_Runnable_Wdg_MainFunction();
 8000e7c:	f00c fd9a 	bl	800d9b4 <Rte_Runnable_Wdg_MainFunction>
		Btc_ReceivedDataOnBluetooth = 0;
 8000e80:	4b02      	ldr	r3, [pc, #8]	; (8000e8c <Btc_RequestState+0x1a0>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200000c2 	.word	0x200000c2
 8000e90:	20000000 	.word	0x20000000
 8000e94:	200000d0 	.word	0x200000d0
 8000e98:	20000630 	.word	0x20000630
 8000e9c:	20000004 	.word	0x20000004
 8000ea0:	200000d2 	.word	0x200000d2
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	200000d4 	.word	0x200000d4
 8000eac:	2000000c 	.word	0x2000000c
 8000eb0:	200000d6 	.word	0x200000d6
 8000eb4:	20000010 	.word	0x20000010
 8000eb8:	200000d8 	.word	0x200000d8
 8000ebc:	20000014 	.word	0x20000014
 8000ec0:	200000da 	.word	0x200000da
 8000ec4:	20000018 	.word	0x20000018
 8000ec8:	200000dc 	.word	0x200000dc
 8000ecc:	200006a8 	.word	0x200006a8

08000ed0 <Btc_RxVal>:
/***********************************************************************************
* Function: Btc_RxVal													   		   *
* Description: Process bluetooth commands.	 		   							   *
************************************************************************************/
VOID Btc_RxVal()
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	if(Rte_Call_Crc_R_CrcPort_Crc_VerifyUartData() == E_OK)
 8000ed4:	f00c ff72 	bl	800ddbc <Crc_VerifyUartData>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f040 81a7 	bne.w	800122e <Btc_RxVal+0x35e>
	{

		/* Process the command on each case and update the respective variable. */
		switch(Btc_ReceivedDataOnBluetooth)
 8000ee0:	4bb0      	ldr	r3, [pc, #704]	; (80011a4 <Btc_RxVal+0x2d4>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	2b19      	cmp	r3, #25
 8000ee8:	f200 8157 	bhi.w	800119a <Btc_RxVal+0x2ca>
 8000eec:	a201      	add	r2, pc, #4	; (adr r2, 8000ef4 <Btc_RxVal+0x24>)
 8000eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef2:	bf00      	nop
 8000ef4:	08000fed 	.word	0x08000fed
 8000ef8:	08000ffb 	.word	0x08000ffb
 8000efc:	08001009 	.word	0x08001009
 8000f00:	08001027 	.word	0x08001027
 8000f04:	0800119b 	.word	0x0800119b
 8000f08:	0800119b 	.word	0x0800119b
 8000f0c:	0800103f 	.word	0x0800103f
 8000f10:	08001063 	.word	0x08001063
 8000f14:	0800107b 	.word	0x0800107b
 8000f18:	0800109f 	.word	0x0800109f
 8000f1c:	080010b7 	.word	0x080010b7
 8000f20:	080010cf 	.word	0x080010cf
 8000f24:	080010e7 	.word	0x080010e7
 8000f28:	080010ff 	.word	0x080010ff
 8000f2c:	08001117 	.word	0x08001117
 8000f30:	0800112d 	.word	0x0800112d
 8000f34:	08001143 	.word	0x08001143
 8000f38:	08001159 	.word	0x08001159
 8000f3c:	0800116f 	.word	0x0800116f
 8000f40:	08001185 	.word	0x08001185
 8000f44:	08000f5d 	.word	0x08000f5d
 8000f48:	08000f75 	.word	0x08000f75
 8000f4c:	08000f8d 	.word	0x08000f8d
 8000f50:	08000fa5 	.word	0x08000fa5
 8000f54:	08000fbd 	.word	0x08000fbd
 8000f58:	08000fd5 	.word	0x08000fd5
		{
			case BTC_RX_EXTLIGHTS_REVERSELIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000f5c:	4b92      	ldr	r3, [pc, #584]	; (80011a8 <Btc_RxVal+0x2d8>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	f040 811c 	bne.w	800119e <Btc_RxVal+0x2ce>
				{
					Btc_ReverseLight = STD_HIGH;
 8000f66:	4b91      	ldr	r3, [pc, #580]	; (80011ac <Btc_RxVal+0x2dc>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(&Btc_ReverseLight);
 8000f6c:	488f      	ldr	r0, [pc, #572]	; (80011ac <Btc_RxVal+0x2dc>)
 8000f6e:	f00c fdcb 	bl	800db08 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000f72:	e114      	b.n	800119e <Btc_RxVal+0x2ce>
			case BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000f74:	4b8c      	ldr	r3, [pc, #560]	; (80011a8 <Btc_RxVal+0x2d8>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	f040 812f 	bne.w	80011dc <Btc_RxVal+0x30c>
				{
					Btc_ReverseLight = STD_LOW;
 8000f7e:	4b8b      	ldr	r3, [pc, #556]	; (80011ac <Btc_RxVal+0x2dc>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(&Btc_ReverseLight);
 8000f84:	4889      	ldr	r0, [pc, #548]	; (80011ac <Btc_RxVal+0x2dc>)
 8000f86:	f00c fdbf 	bl	800db08 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000f8a:	e127      	b.n	80011dc <Btc_RxVal+0x30c>
			case BTC_RX_EXTLIGHTS_POSITIONZERO:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000f8c:	4b86      	ldr	r3, [pc, #536]	; (80011a8 <Btc_RxVal+0x2d8>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	f040 8125 	bne.w	80011e0 <Btc_RxVal+0x310>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONZERO;
 8000f96:	4b86      	ldr	r3, [pc, #536]	; (80011b0 <Btc_RxVal+0x2e0>)
 8000f98:	2217      	movs	r2, #23
 8000f9a:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 8000f9c:	4884      	ldr	r0, [pc, #528]	; (80011b0 <Btc_RxVal+0x2e0>)
 8000f9e:	f00c fdd3 	bl	800db48 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000fa2:	e11d      	b.n	80011e0 <Btc_RxVal+0x310>
			case BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000fa4:	4b80      	ldr	r3, [pc, #512]	; (80011a8 <Btc_RxVal+0x2d8>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	f040 811b 	bne.w	80011e4 <Btc_RxVal+0x314>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
 8000fae:	4b80      	ldr	r3, [pc, #512]	; (80011b0 <Btc_RxVal+0x2e0>)
 8000fb0:	2218      	movs	r2, #24
 8000fb2:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 8000fb4:	487e      	ldr	r0, [pc, #504]	; (80011b0 <Btc_RxVal+0x2e0>)
 8000fb6:	f00c fdc7 	bl	800db48 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000fba:	e113      	b.n	80011e4 <Btc_RxVal+0x314>
			case BTC_RX_EXTLIGHTS_POSITIONLIGHTS:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000fbc:	4b7a      	ldr	r3, [pc, #488]	; (80011a8 <Btc_RxVal+0x2d8>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	f040 8111 	bne.w	80011e8 <Btc_RxVal+0x318>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
 8000fc6:	4b7a      	ldr	r3, [pc, #488]	; (80011b0 <Btc_RxVal+0x2e0>)
 8000fc8:	2219      	movs	r2, #25
 8000fca:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 8000fcc:	4878      	ldr	r0, [pc, #480]	; (80011b0 <Btc_RxVal+0x2e0>)
 8000fce:	f00c fdbb 	bl	800db48 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000fd2:	e109      	b.n	80011e8 <Btc_RxVal+0x318>
			case BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000fd4:	4b74      	ldr	r3, [pc, #464]	; (80011a8 <Btc_RxVal+0x2d8>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	f040 8107 	bne.w	80011ec <Btc_RxVal+0x31c>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
 8000fde:	4b74      	ldr	r3, [pc, #464]	; (80011b0 <Btc_RxVal+0x2e0>)
 8000fe0:	221a      	movs	r2, #26
 8000fe2:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 8000fe4:	4872      	ldr	r0, [pc, #456]	; (80011b0 <Btc_RxVal+0x2e0>)
 8000fe6:	f00c fdaf 	bl	800db48 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000fea:	e0ff      	b.n	80011ec <Btc_RxVal+0x31c>
			case BTC_RX_CENLOC_ON:
				Btc_CenLoc = STD_HIGH;
 8000fec:	4b71      	ldr	r3, [pc, #452]	; (80011b4 <Btc_RxVal+0x2e4>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]
				Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(&Btc_CenLoc);
 8000ff2:	4870      	ldr	r0, [pc, #448]	; (80011b4 <Btc_RxVal+0x2e4>)
 8000ff4:	f00c fd68 	bl	800dac8 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>
				break;
 8000ff8:	e119      	b.n	800122e <Btc_RxVal+0x35e>
			case BTC_RX_CENLOC_OFF:
				Btc_CenLoc = STD_LOW;
 8000ffa:	4b6e      	ldr	r3, [pc, #440]	; (80011b4 <Btc_RxVal+0x2e4>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
				Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(&Btc_CenLoc);
 8001000:	486c      	ldr	r0, [pc, #432]	; (80011b4 <Btc_RxVal+0x2e4>)
 8001002:	f00c fd61 	bl	800dac8 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>
				break;
 8001006:	e112      	b.n	800122e <Btc_RxVal+0x35e>
			case BTC_RX_EXTLIGHTS_HIGHBEAM_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001008:	4b67      	ldr	r3, [pc, #412]	; (80011a8 <Btc_RxVal+0x2d8>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b01      	cmp	r3, #1
 800100e:	f040 80ef 	bne.w	80011f0 <Btc_RxVal+0x320>
				{
					Btc_HighBeam = STD_HIGH;
 8001012:	4b69      	ldr	r3, [pc, #420]	; (80011b8 <Btc_RxVal+0x2e8>)
 8001014:	2201      	movs	r2, #1
 8001016:	701a      	strb	r2, [r3, #0]
					Btc_FlashHighBeam = STD_LOW;
 8001018:	4b68      	ldr	r3, [pc, #416]	; (80011bc <Btc_RxVal+0x2ec>)
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(&Btc_HighBeam);
 800101e:	4866      	ldr	r0, [pc, #408]	; (80011b8 <Btc_RxVal+0x2e8>)
 8001020:	f00c fda2 	bl	800db68 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001024:	e0e4      	b.n	80011f0 <Btc_RxVal+0x320>
			case BTC_RX_EXTLIGHTS_HIGHBEAM_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001026:	4b60      	ldr	r3, [pc, #384]	; (80011a8 <Btc_RxVal+0x2d8>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b01      	cmp	r3, #1
 800102c:	f040 80e2 	bne.w	80011f4 <Btc_RxVal+0x324>
				{
					Btc_HighBeam = STD_LOW;
 8001030:	4b61      	ldr	r3, [pc, #388]	; (80011b8 <Btc_RxVal+0x2e8>)
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(&Btc_HighBeam);
 8001036:	4860      	ldr	r0, [pc, #384]	; (80011b8 <Btc_RxVal+0x2e8>)
 8001038:	f00c fd96 	bl	800db68 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 800103c:	e0da      	b.n	80011f4 <Btc_RxVal+0x324>
			case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800103e:	4b5a      	ldr	r3, [pc, #360]	; (80011a8 <Btc_RxVal+0x2d8>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b01      	cmp	r3, #1
 8001044:	f040 80d8 	bne.w	80011f8 <Btc_RxVal+0x328>
				{
					Btc_TurnSignalLeft = STD_HIGH;
 8001048:	4b5d      	ldr	r3, [pc, #372]	; (80011c0 <Btc_RxVal+0x2f0>)
 800104a:	2201      	movs	r2, #1
 800104c:	701a      	strb	r2, [r3, #0]
					Btc_TurnSignalRight = STD_LOW;
 800104e:	4b5d      	ldr	r3, [pc, #372]	; (80011c4 <Btc_RxVal+0x2f4>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 8001054:	485a      	ldr	r0, [pc, #360]	; (80011c0 <Btc_RxVal+0x2f0>)
 8001056:	f00c fda7 	bl	800dba8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 800105a:	485a      	ldr	r0, [pc, #360]	; (80011c4 <Btc_RxVal+0x2f4>)
 800105c:	f00c fdb4 	bl	800dbc8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001060:	e0ca      	b.n	80011f8 <Btc_RxVal+0x328>
			case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001062:	4b51      	ldr	r3, [pc, #324]	; (80011a8 <Btc_RxVal+0x2d8>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b01      	cmp	r3, #1
 8001068:	f040 80c8 	bne.w	80011fc <Btc_RxVal+0x32c>
				{
					Btc_TurnSignalLeft = STD_LOW;
 800106c:	4b54      	ldr	r3, [pc, #336]	; (80011c0 <Btc_RxVal+0x2f0>)
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 8001072:	4853      	ldr	r0, [pc, #332]	; (80011c0 <Btc_RxVal+0x2f0>)
 8001074:	f00c fd98 	bl	800dba8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001078:	e0c0      	b.n	80011fc <Btc_RxVal+0x32c>
			case BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800107a:	4b4b      	ldr	r3, [pc, #300]	; (80011a8 <Btc_RxVal+0x2d8>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b01      	cmp	r3, #1
 8001080:	f040 80be 	bne.w	8001200 <Btc_RxVal+0x330>
				{
					Btc_TurnSignalRight = STD_HIGH;
 8001084:	4b4f      	ldr	r3, [pc, #316]	; (80011c4 <Btc_RxVal+0x2f4>)
 8001086:	2201      	movs	r2, #1
 8001088:	701a      	strb	r2, [r3, #0]
					Btc_TurnSignalLeft = STD_LOW;
 800108a:	4b4d      	ldr	r3, [pc, #308]	; (80011c0 <Btc_RxVal+0x2f0>)
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 8001090:	484b      	ldr	r0, [pc, #300]	; (80011c0 <Btc_RxVal+0x2f0>)
 8001092:	f00c fd89 	bl	800dba8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 8001096:	484b      	ldr	r0, [pc, #300]	; (80011c4 <Btc_RxVal+0x2f4>)
 8001098:	f00c fd96 	bl	800dbc8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 800109c:	e0b0      	b.n	8001200 <Btc_RxVal+0x330>
			case BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800109e:	4b42      	ldr	r3, [pc, #264]	; (80011a8 <Btc_RxVal+0x2d8>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	f040 80ae 	bne.w	8001204 <Btc_RxVal+0x334>
				{
					Btc_TurnSignalRight = STD_LOW;
 80010a8:	4b46      	ldr	r3, [pc, #280]	; (80011c4 <Btc_RxVal+0x2f4>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 80010ae:	4845      	ldr	r0, [pc, #276]	; (80011c4 <Btc_RxVal+0x2f4>)
 80010b0:	f00c fd8a 	bl	800dbc8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80010b4:	e0a6      	b.n	8001204 <Btc_RxVal+0x334>
			case BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80010b6:	4b3c      	ldr	r3, [pc, #240]	; (80011a8 <Btc_RxVal+0x2d8>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	f040 80a4 	bne.w	8001208 <Btc_RxVal+0x338>
				{
					Btc_HazardLight = STD_HIGH;
 80010c0:	4b41      	ldr	r3, [pc, #260]	; (80011c8 <Btc_RxVal+0x2f8>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(&Btc_HazardLight);
 80010c6:	4840      	ldr	r0, [pc, #256]	; (80011c8 <Btc_RxVal+0x2f8>)
 80010c8:	f00c fd8e 	bl	800dbe8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80010cc:	e09c      	b.n	8001208 <Btc_RxVal+0x338>
			case BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80010ce:	4b36      	ldr	r3, [pc, #216]	; (80011a8 <Btc_RxVal+0x2d8>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	f040 809a 	bne.w	800120c <Btc_RxVal+0x33c>
				{
					Btc_HazardLight = STD_LOW;
 80010d8:	4b3b      	ldr	r3, [pc, #236]	; (80011c8 <Btc_RxVal+0x2f8>)
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(&Btc_HazardLight);
 80010de:	483a      	ldr	r0, [pc, #232]	; (80011c8 <Btc_RxVal+0x2f8>)
 80010e0:	f00c fd82 	bl	800dbe8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80010e4:	e092      	b.n	800120c <Btc_RxVal+0x33c>
			case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80010e6:	4b30      	ldr	r3, [pc, #192]	; (80011a8 <Btc_RxVal+0x2d8>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	f040 8090 	bne.w	8001210 <Btc_RxVal+0x340>
				{
					Btc_FrontFogLight = STD_HIGH;
 80010f0:	4b36      	ldr	r3, [pc, #216]	; (80011cc <Btc_RxVal+0x2fc>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(&Btc_FrontFogLight);
 80010f6:	4835      	ldr	r0, [pc, #212]	; (80011cc <Btc_RxVal+0x2fc>)
 80010f8:	f00c fd46 	bl	800db88 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80010fc:	e088      	b.n	8001210 <Btc_RxVal+0x340>
			case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80010fe:	4b2a      	ldr	r3, [pc, #168]	; (80011a8 <Btc_RxVal+0x2d8>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b01      	cmp	r3, #1
 8001104:	f040 8086 	bne.w	8001214 <Btc_RxVal+0x344>
				{
					Btc_FrontFogLight = STD_LOW;
 8001108:	4b30      	ldr	r3, [pc, #192]	; (80011cc <Btc_RxVal+0x2fc>)
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(&Btc_FrontFogLight);
 800110e:	482f      	ldr	r0, [pc, #188]	; (80011cc <Btc_RxVal+0x2fc>)
 8001110:	f00c fd3a 	bl	800db88 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001114:	e07e      	b.n	8001214 <Btc_RxVal+0x344>
			case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001116:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <Btc_RxVal+0x2d8>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d17c      	bne.n	8001218 <Btc_RxVal+0x348>
				{
					Btc_RearFogLight = STD_HIGH;
 800111e:	4b2c      	ldr	r3, [pc, #176]	; (80011d0 <Btc_RxVal+0x300>)
 8001120:	2201      	movs	r2, #1
 8001122:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(&Btc_RearFogLight);
 8001124:	482a      	ldr	r0, [pc, #168]	; (80011d0 <Btc_RxVal+0x300>)
 8001126:	f00c fd6f 	bl	800dc08 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 800112a:	e075      	b.n	8001218 <Btc_RxVal+0x348>
			case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800112c:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <Btc_RxVal+0x2d8>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d173      	bne.n	800121c <Btc_RxVal+0x34c>
				{
					Btc_RearFogLight = STD_LOW;
 8001134:	4b26      	ldr	r3, [pc, #152]	; (80011d0 <Btc_RxVal+0x300>)
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(&Btc_RearFogLight);
 800113a:	4825      	ldr	r0, [pc, #148]	; (80011d0 <Btc_RxVal+0x300>)
 800113c:	f00c fd64 	bl	800dc08 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001140:	e06c      	b.n	800121c <Btc_RxVal+0x34c>
			case BTC_RX_EXTLIGHTS_BRAKELIGHTON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <Btc_RxVal+0x2d8>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d16a      	bne.n	8001220 <Btc_RxVal+0x350>
				{
					Btc_BrakeLight = STD_HIGH;
 800114a:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <Btc_RxVal+0x304>)
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(&Btc_BrakeLight);
 8001150:	4820      	ldr	r0, [pc, #128]	; (80011d4 <Btc_RxVal+0x304>)
 8001152:	f00c fce9 	bl	800db28 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001156:	e063      	b.n	8001220 <Btc_RxVal+0x350>
			case BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <Btc_RxVal+0x2d8>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d161      	bne.n	8001224 <Btc_RxVal+0x354>
				{
					Btc_BrakeLight = STD_LOW;
 8001160:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <Btc_RxVal+0x304>)
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(&Btc_BrakeLight);
 8001166:	481b      	ldr	r0, [pc, #108]	; (80011d4 <Btc_RxVal+0x304>)
 8001168:	f00c fcde 	bl	800db28 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 800116c:	e05a      	b.n	8001224 <Btc_RxVal+0x354>
			case BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <Btc_RxVal+0x2d8>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d158      	bne.n	8001228 <Btc_RxVal+0x358>
				{
					Btc_IntLights = STD_HIGH;
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <Btc_RxVal+0x308>)
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]
					Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(&Btc_IntLights);
 800117c:	4816      	ldr	r0, [pc, #88]	; (80011d8 <Btc_RxVal+0x308>)
 800117e:	f00c fd83 	bl	800dc88 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001182:	e051      	b.n	8001228 <Btc_RxVal+0x358>
			case BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <Btc_RxVal+0x2d8>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d14f      	bne.n	800122c <Btc_RxVal+0x35c>
				{
					Btc_IntLights = STD_LOW;
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <Btc_RxVal+0x308>)
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]
					Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(&Btc_IntLights);
 8001192:	4811      	ldr	r0, [pc, #68]	; (80011d8 <Btc_RxVal+0x308>)
 8001194:	f00c fd78 	bl	800dc88 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001198:	e048      	b.n	800122c <Btc_RxVal+0x35c>
			default:
				break;
 800119a:	bf00      	nop
 800119c:	e047      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 800119e:	bf00      	nop
 80011a0:	e045      	b.n	800122e <Btc_RxVal+0x35e>
 80011a2:	bf00      	nop
 80011a4:	200000c2 	.word	0x200000c2
 80011a8:	200000de 	.word	0x200000de
 80011ac:	200000cd 	.word	0x200000cd
 80011b0:	200000c4 	.word	0x200000c4
 80011b4:	200000c3 	.word	0x200000c3
 80011b8:	200000c5 	.word	0x200000c5
 80011bc:	200000c6 	.word	0x200000c6
 80011c0:	200000c8 	.word	0x200000c8
 80011c4:	200000c9 	.word	0x200000c9
 80011c8:	200000ca 	.word	0x200000ca
 80011cc:	200000c7 	.word	0x200000c7
 80011d0:	200000cc 	.word	0x200000cc
 80011d4:	200000cb 	.word	0x200000cb
 80011d8:	200000ce 	.word	0x200000ce
				break;
 80011dc:	bf00      	nop
 80011de:	e026      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 80011e0:	bf00      	nop
 80011e2:	e024      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 80011e4:	bf00      	nop
 80011e6:	e022      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 80011e8:	bf00      	nop
 80011ea:	e020      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 80011ec:	bf00      	nop
 80011ee:	e01e      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 80011f0:	bf00      	nop
 80011f2:	e01c      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 80011f4:	bf00      	nop
 80011f6:	e01a      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 80011f8:	bf00      	nop
 80011fa:	e018      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 80011fc:	bf00      	nop
 80011fe:	e016      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 8001200:	bf00      	nop
 8001202:	e014      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 8001204:	bf00      	nop
 8001206:	e012      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 8001208:	bf00      	nop
 800120a:	e010      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 800120c:	bf00      	nop
 800120e:	e00e      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 8001210:	bf00      	nop
 8001212:	e00c      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 8001214:	bf00      	nop
 8001216:	e00a      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 8001218:	bf00      	nop
 800121a:	e008      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 800121c:	bf00      	nop
 800121e:	e006      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 8001220:	bf00      	nop
 8001222:	e004      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 8001224:	bf00      	nop
 8001226:	e002      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 8001228:	bf00      	nop
 800122a:	e000      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 800122c:	bf00      	nop
	}
	else
	{
		/* do nothing */
	}
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop

08001234 <Btc_MainFunction>:
/***********************************************************************************
* Function: Btc_MainFunction											 		   *
* Description: Process bluetooth communication states.					           *
************************************************************************************/
VOID Btc_MainFunction()
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	Btc_RxVal();
 8001238:	f7ff fe4a 	bl	8000ed0 <Btc_RxVal>
	Btc_RequestState();
 800123c:	f7ff fd56 	bl	8000cec <Btc_RequestState>
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}

08001244 <CenLoc_State>:
/***********************************************************************************
* Function: CenLoc_State													   	   *
* Description: Process the current and previous state of the central lock.		   *
************************************************************************************/
VOID CenLoc_State()
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
	/* Every time the state of the central lock changes
	 * set the alarm to off. */
	CenLoc_SecAlmStateToOff();
 8001248:	f000 f840 	bl	80012cc <CenLoc_SecAlmStateToOff>
	/* If the current state is different than the previous state
	 * update the variables respectively.
	 * Initialize the security alarm application.
	 * Calls for start of OS timer for lock unlock sequence.*/
	if(CenLoc_PreviousState != CenLoc_CurrentState)
 800124c:	4b17      	ldr	r3, [pc, #92]	; (80012ac <CenLoc_State+0x68>)
 800124e:	781a      	ldrb	r2, [r3, #0]
 8001250:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <CenLoc_State+0x6c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	429a      	cmp	r2, r3
 8001256:	d027      	beq.n	80012a8 <CenLoc_State+0x64>
	{
		CenLoc_PreviousStateFlag 	= CenLoc_PreviousState;
 8001258:	4b14      	ldr	r3, [pc, #80]	; (80012ac <CenLoc_State+0x68>)
 800125a:	781a      	ldrb	r2, [r3, #0]
 800125c:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <CenLoc_State+0x70>)
 800125e:	701a      	strb	r2, [r3, #0]
		CenLoc_PreviousState 		= CenLoc_CurrentState;
 8001260:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <CenLoc_State+0x6c>)
 8001262:	781a      	ldrb	r2, [r3, #0]
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <CenLoc_State+0x68>)
 8001266:	701a      	strb	r2, [r3, #0]
		CenLoc_BlinkCounter 		= STD_LOW;
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <CenLoc_State+0x74>)
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]
		CenLoc_FollowMeHomeCounter 	= STD_LOW;
 800126e:	4b13      	ldr	r3, [pc, #76]	; (80012bc <CenLoc_State+0x78>)
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
		CenLoc_CyclicAlarmCounter	= STD_LOW;
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <CenLoc_State+0x7c>)
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
		CenLoc_TurnOnLedCounter		= STD_LOW;
 800127a:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <CenLoc_State+0x80>)
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_Init();
 8001280:	f001 f8bc 	bl	80023fc <SecAlm_Init>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_CenLoc_LockUnlockSequence_TimerHandle, 250);
 8001284:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <CenLoc_State+0x84>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	21fa      	movs	r1, #250	; 0xfa
 800128a:	4618      	mov	r0, r3
 800128c:	f00c fd6c 	bl	800dd68 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter(&CenLoc_BlinkCounter);
 8001290:	4809      	ldr	r0, [pc, #36]	; (80012b8 <CenLoc_State+0x74>)
 8001292:	f00c fb0d 	bl	800d8b0 <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter>
		Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter(&CenLoc_CyclicAlarmCounter);
 8001296:	480a      	ldr	r0, [pc, #40]	; (80012c0 <CenLoc_State+0x7c>)
 8001298:	f00c fb1a 	bl	800d8d0 <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter>
		Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter(&CenLoc_TurnOnLedCounter);
 800129c:	4809      	ldr	r0, [pc, #36]	; (80012c4 <CenLoc_State+0x80>)
 800129e:	f00c fb27 	bl	800d8f0 <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter>
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(&CenLoc_FollowMeHomeCounter);
 80012a2:	4806      	ldr	r0, [pc, #24]	; (80012bc <CenLoc_State+0x78>)
 80012a4:	f00c fb34 	bl	800d910 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
	}
	else
	{
		/* do nothing */
	}
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	200000df 	.word	0x200000df
 80012b0:	200000de 	.word	0x200000de
 80012b4:	200000e6 	.word	0x200000e6
 80012b8:	200000e2 	.word	0x200000e2
 80012bc:	200000e4 	.word	0x200000e4
 80012c0:	200000e3 	.word	0x200000e3
 80012c4:	200000e5 	.word	0x200000e5
 80012c8:	20000280 	.word	0x20000280

080012cc <CenLoc_SecAlmStateToOff>:
/***********************************************************************************
* Function: CenLoc_SecAlmStateToOff												   *
* Description: Turn off the security alarm.										   *
************************************************************************************/
VOID CenLoc_SecAlmStateToOff()
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	/* The central lock is on, the security alarm goes off. */
	if(CenLoc_CurrentState == STD_HIGH)
 80012d0:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <CenLoc_SecAlmStateToOff+0x14>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d101      	bne.n	80012dc <CenLoc_SecAlmStateToOff+0x10>
	{
		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_Init();
 80012d8:	f001 f890 	bl	80023fc <SecAlm_Init>
	}
	else
	{
		/* do nothing */
	}
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200000de 	.word	0x200000de

080012e4 <CenLoc_FollowMeHome>:
/***********************************************************************************
* Function: CenLoc_FollowMeHome												       *
* Description: Process the state of the follow me home.					 		   *
************************************************************************************/
VOID CenLoc_FollowMeHome()
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	/* Follow me home is on as long as the timer is on. */
	if(CenLoc_FollowMeHomeCounter == 1)
 80012e8:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <CenLoc_FollowMeHome+0x3c>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d103      	bne.n	80012f8 <CenLoc_FollowMeHome+0x14>
	{
		CenLoc_FollowMeHomeState = STD_HIGH;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <CenLoc_FollowMeHome+0x40>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 80012f6:	e011      	b.n	800131c <CenLoc_FollowMeHome+0x38>
	else if(CenLoc_FollowMeHomeCounter == 2)
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <CenLoc_FollowMeHome+0x3c>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d10d      	bne.n	800131c <CenLoc_FollowMeHome+0x38>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_FollowMeHome_TimerHandle);
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <CenLoc_FollowMeHome+0x44>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f00c fd3c 	bl	800dd82 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		CenLoc_FollowMeHomeState = STD_LOW;
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <CenLoc_FollowMeHome+0x40>)
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]
		CenLoc_FollowMeHomeCounter = 2;
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <CenLoc_FollowMeHome+0x3c>)
 8001312:	2202      	movs	r2, #2
 8001314:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(&CenLoc_FollowMeHomeCounter);
 8001316:	4802      	ldr	r0, [pc, #8]	; (8001320 <CenLoc_FollowMeHome+0x3c>)
 8001318:	f00c fafa 	bl	800d910 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}
 8001320:	200000e4 	.word	0x200000e4
 8001324:	200000e0 	.word	0x200000e0
 8001328:	2000028c 	.word	0x2000028c

0800132c <CenLoc_UnlockSequence>:
/***********************************************************************************
* Function: CenLoc_UnlockSequence												   *
* Description: Process the unlock sequence. 		   							   *
************************************************************************************/
VOID CenLoc_UnlockSequence()
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	/* Stop the timer used for the security alarm LED. */
	Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLed_TurnOnCyclic_TimerHandle);
 8001330:	4b4c      	ldr	r3, [pc, #304]	; (8001464 <CenLoc_UnlockSequence+0x138>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f00c fd24 	bl	800dd82 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
	/* Turn on the door LEDs. */
	if(CenLoc_PreviousStateFlag == STD_LOW)
 800133a:	4b4b      	ldr	r3, [pc, #300]	; (8001468 <CenLoc_UnlockSequence+0x13c>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d103      	bne.n	800134a <CenLoc_UnlockSequence+0x1e>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel1);
 8001342:	2100      	movs	r1, #0
 8001344:	4849      	ldr	r0, [pc, #292]	; (800146c <CenLoc_UnlockSequence+0x140>)
 8001346:	f00c fb4d 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
	else
	{
		/* do nothing */
	}
	/* Process follow me home state. */
	CenLoc_FollowMeHome();
 800134a:	f7ff ffcb 	bl	80012e4 <CenLoc_FollowMeHome>
	/* Sets previous state to high so that on locking it is taken into consideration. */
	localPreviousState = STD_HIGH;
 800134e:	4b48      	ldr	r3, [pc, #288]	; (8001470 <CenLoc_UnlockSequence+0x144>)
 8001350:	2201      	movs	r2, #1
 8001352:	701a      	strb	r2, [r3, #0]
	/* Unlocking sequence consists of triggering the hazard lights twice on and twice off.*/
	if(CenLoc_BlinkCounter <= 3)
 8001354:	4b47      	ldr	r3, [pc, #284]	; (8001474 <CenLoc_UnlockSequence+0x148>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b03      	cmp	r3, #3
 800135a:	d86f      	bhi.n	800143c <CenLoc_UnlockSequence+0x110>
	{
		/* On and off period for the hazard lights and buzzer is defined in the OS timer start call. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 800135c:	4b46      	ldr	r3, [pc, #280]	; (8001478 <CenLoc_UnlockSequence+0x14c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001364:	4618      	mov	r0, r3
 8001366:	f00c fcff 	bl	800dd68 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		/* Start the OS timer for the follow me home. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_FollowMeHome_TimerHandle) == 0)
 800136a:	4b44      	ldr	r3, [pc, #272]	; (800147c <CenLoc_UnlockSequence+0x150>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f009 f90b 	bl	800a58a <osTimerIsRunning>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d106      	bne.n	8001388 <CenLoc_UnlockSequence+0x5c>
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_FollowMeHome_TimerHandle, 10000);
 800137a:	4b40      	ldr	r3, [pc, #256]	; (800147c <CenLoc_UnlockSequence+0x150>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f242 7110 	movw	r1, #10000	; 0x2710
 8001382:	4618      	mov	r0, r3
 8001384:	f00c fcf0 	bl	800dd68 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		{
			/* do nothing */
		}
		/* Set the follow me home timer state variable to one to prevent activation of the follow me home
		 * when it is not requested. Upon expiration, the timer callback increments this variable. */
		CenLoc_FollowMeHomeCounter = 1;
 8001388:	4b3d      	ldr	r3, [pc, #244]	; (8001480 <CenLoc_UnlockSequence+0x154>)
 800138a:	2201      	movs	r2, #1
 800138c:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(&CenLoc_FollowMeHomeCounter);
 800138e:	483c      	ldr	r0, [pc, #240]	; (8001480 <CenLoc_UnlockSequence+0x154>)
 8001390:	f00c fabe 	bl	800d910 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
		/* Process the on off states of the hazard lights and the buzzer. */
		switch(CenLoc_BlinkCounter)
 8001394:	4b37      	ldr	r3, [pc, #220]	; (8001474 <CenLoc_UnlockSequence+0x148>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b03      	cmp	r3, #3
 800139a:	d85f      	bhi.n	800145c <CenLoc_UnlockSequence+0x130>
 800139c:	a201      	add	r2, pc, #4	; (adr r2, 80013a4 <CenLoc_UnlockSequence+0x78>)
 800139e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a2:	bf00      	nop
 80013a4:	080013b5 	.word	0x080013b5
 80013a8:	080013d7 	.word	0x080013d7
 80013ac:	080013f9 	.word	0x080013f9
 80013b0:	0800141b 	.word	0x0800141b
		{
			case 0:
				CenLoc_BlinkState = STD_HIGH;
 80013b4:	4b33      	ldr	r3, [pc, #204]	; (8001484 <CenLoc_UnlockSequence+0x158>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80013ba:	2108      	movs	r1, #8
 80013bc:	4832      	ldr	r0, [pc, #200]	; (8001488 <CenLoc_UnlockSequence+0x15c>)
 80013be:	f00c fb11 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 80013c2:	210c      	movs	r1, #12
 80013c4:	4830      	ldr	r0, [pc, #192]	; (8001488 <CenLoc_UnlockSequence+0x15c>)
 80013c6:	f00c fb0d 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 80013ca:	4b2e      	ldr	r3, [pc, #184]	; (8001484 <CenLoc_UnlockSequence+0x158>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 f972 	bl	80016b8 <CenLoc_ToggleBuzzer>
				break;
 80013d4:	e043      	b.n	800145e <CenLoc_UnlockSequence+0x132>
			case 1:
				CenLoc_BlinkState = STD_LOW;
 80013d6:	4b2b      	ldr	r3, [pc, #172]	; (8001484 <CenLoc_UnlockSequence+0x158>)
 80013d8:	2200      	movs	r2, #0
 80013da:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80013dc:	2108      	movs	r1, #8
 80013de:	482a      	ldr	r0, [pc, #168]	; (8001488 <CenLoc_UnlockSequence+0x15c>)
 80013e0:	f00c fb00 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 80013e4:	210c      	movs	r1, #12
 80013e6:	4828      	ldr	r0, [pc, #160]	; (8001488 <CenLoc_UnlockSequence+0x15c>)
 80013e8:	f00c fafc 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 80013ec:	4b25      	ldr	r3, [pc, #148]	; (8001484 <CenLoc_UnlockSequence+0x158>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f000 f961 	bl	80016b8 <CenLoc_ToggleBuzzer>
				break;
 80013f6:	e032      	b.n	800145e <CenLoc_UnlockSequence+0x132>
			case 2:
				CenLoc_BlinkState = STD_HIGH;
 80013f8:	4b22      	ldr	r3, [pc, #136]	; (8001484 <CenLoc_UnlockSequence+0x158>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80013fe:	2108      	movs	r1, #8
 8001400:	4821      	ldr	r0, [pc, #132]	; (8001488 <CenLoc_UnlockSequence+0x15c>)
 8001402:	f00c faef 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001406:	210c      	movs	r1, #12
 8001408:	481f      	ldr	r0, [pc, #124]	; (8001488 <CenLoc_UnlockSequence+0x15c>)
 800140a:	f00c faeb 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 800140e:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <CenLoc_UnlockSequence+0x158>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f000 f950 	bl	80016b8 <CenLoc_ToggleBuzzer>
				break;
 8001418:	e021      	b.n	800145e <CenLoc_UnlockSequence+0x132>
			case 3:
				CenLoc_BlinkState = STD_LOW;
 800141a:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <CenLoc_UnlockSequence+0x158>)
 800141c:	2200      	movs	r2, #0
 800141e:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001420:	2108      	movs	r1, #8
 8001422:	4819      	ldr	r0, [pc, #100]	; (8001488 <CenLoc_UnlockSequence+0x15c>)
 8001424:	f00c fade 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001428:	210c      	movs	r1, #12
 800142a:	4817      	ldr	r0, [pc, #92]	; (8001488 <CenLoc_UnlockSequence+0x15c>)
 800142c:	f00c fada 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001430:	4b14      	ldr	r3, [pc, #80]	; (8001484 <CenLoc_UnlockSequence+0x158>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f000 f93f 	bl	80016b8 <CenLoc_ToggleBuzzer>
				break;
 800143a:	e010      	b.n	800145e <CenLoc_UnlockSequence+0x132>
			default:
				break;
		}
	}/* After the sequence is completed, stop the timers and set the variables related to this sequence to out of bounds values to prevent triggering when not requested. */
	else if(CenLoc_BlinkCounter >= 3)
 800143c:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <CenLoc_UnlockSequence+0x148>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b02      	cmp	r3, #2
 8001442:	d90c      	bls.n	800145e <CenLoc_UnlockSequence+0x132>
	{
		CenLoc_BlinkState = 2;
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <CenLoc_UnlockSequence+0x158>)
 8001446:	2202      	movs	r2, #2
 8001448:	701a      	strb	r2, [r3, #0]
		CenLoc_BlinkCounter = 6;
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <CenLoc_UnlockSequence+0x148>)
 800144c:	2206      	movs	r2, #6
 800144e:	701a      	strb	r2, [r3, #0]
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_CenLoc_LockUnlockSequence_TimerHandle);
 8001450:	4b0e      	ldr	r3, [pc, #56]	; (800148c <CenLoc_UnlockSequence+0x160>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f00c fc94 	bl	800dd82 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
	}
	else
	{
		/* do nothing */
	}
}
 800145a:	e000      	b.n	800145e <CenLoc_UnlockSequence+0x132>
				break;
 800145c:	bf00      	nop
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000284 	.word	0x20000284
 8001468:	200000e6 	.word	0x200000e6
 800146c:	20000414 	.word	0x20000414
 8001470:	200000e7 	.word	0x200000e7
 8001474:	200000e2 	.word	0x200000e2
 8001478:	20000290 	.word	0x20000290
 800147c:	2000028c 	.word	0x2000028c
 8001480:	200000e4 	.word	0x200000e4
 8001484:	200000e1 	.word	0x200000e1
 8001488:	200004c8 	.word	0x200004c8
 800148c:	20000280 	.word	0x20000280

08001490 <CenLoc_LockSequence>:
/***********************************************************************************
* Function: CenLoc_LockSequence													   *
* Description: Process the lock sequence.								 		   *
************************************************************************************/
VOID CenLoc_LockSequence()
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	/* Turn off the door LEDs. */
	if(CenLoc_PreviousStateFlag == STD_HIGH)
 8001494:	4b37      	ldr	r3, [pc, #220]	; (8001574 <CenLoc_LockSequence+0xe4>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d103      	bne.n	80014a4 <CenLoc_LockSequence+0x14>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel1);
 800149c:	2100      	movs	r1, #0
 800149e:	4836      	ldr	r0, [pc, #216]	; (8001578 <CenLoc_LockSequence+0xe8>)
 80014a0:	f00c faad 	bl	800d9fe <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Process follow me home state.*/
	CenLoc_FollowMeHome();
 80014a4:	f7ff ff1e 	bl	80012e4 <CenLoc_FollowMeHome>
	/* If the central lock has been on previously
	 * and the variable related to the state of the timer is less than the value of
	 * how many times the hazard lights should turn on on locking, proceed with the processing. */
	if(CenLoc_BlinkCounter <= 1 && localPreviousState == STD_HIGH)
 80014a8:	4b34      	ldr	r3, [pc, #208]	; (800157c <CenLoc_LockSequence+0xec>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d84d      	bhi.n	800154c <CenLoc_LockSequence+0xbc>
 80014b0:	4b33      	ldr	r3, [pc, #204]	; (8001580 <CenLoc_LockSequence+0xf0>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d149      	bne.n	800154c <CenLoc_LockSequence+0xbc>
	{
		/* On and off period for the hazard lights and buzzer is defined in the OS timer start call. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 80014b8:	4b32      	ldr	r3, [pc, #200]	; (8001584 <CenLoc_LockSequence+0xf4>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80014c0:	4618      	mov	r0, r3
 80014c2:	f00c fc51 	bl	800dd68 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		/* Start the OS timer for the follow me home. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_FollowMeHome_TimerHandle) == 0)
 80014c6:	4b30      	ldr	r3, [pc, #192]	; (8001588 <CenLoc_LockSequence+0xf8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f009 f85d 	bl	800a58a <osTimerIsRunning>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d106      	bne.n	80014e4 <CenLoc_LockSequence+0x54>
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_FollowMeHome_TimerHandle, 10000);
 80014d6:	4b2c      	ldr	r3, [pc, #176]	; (8001588 <CenLoc_LockSequence+0xf8>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f242 7110 	movw	r1, #10000	; 0x2710
 80014de:	4618      	mov	r0, r3
 80014e0:	f00c fc42 	bl	800dd68 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		{
			/* do nothing */
		}
		/* Set the follow me home timer state variable to one to prevent activation of the follow me home
		 * when it is not requested. Upon expiration, the timer callback increments this variable. */
		CenLoc_FollowMeHomeCounter = 1;
 80014e4:	4b29      	ldr	r3, [pc, #164]	; (800158c <CenLoc_LockSequence+0xfc>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(&CenLoc_FollowMeHomeCounter);
 80014ea:	4828      	ldr	r0, [pc, #160]	; (800158c <CenLoc_LockSequence+0xfc>)
 80014ec:	f00c fa10 	bl	800d910 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
		/* Process the on off states of the hazard lights and buzzer. */
		switch(CenLoc_BlinkCounter)
 80014f0:	4b22      	ldr	r3, [pc, #136]	; (800157c <CenLoc_LockSequence+0xec>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d002      	beq.n	80014fe <CenLoc_LockSequence+0x6e>
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d011      	beq.n	8001520 <CenLoc_LockSequence+0x90>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
				localPreviousState = STD_LOW;
				break;
			default:
				break;
 80014fc:	e024      	b.n	8001548 <CenLoc_LockSequence+0xb8>
				CenLoc_BlinkState = STD_HIGH;
 80014fe:	4b24      	ldr	r3, [pc, #144]	; (8001590 <CenLoc_LockSequence+0x100>)
 8001500:	2201      	movs	r2, #1
 8001502:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001504:	2108      	movs	r1, #8
 8001506:	4823      	ldr	r0, [pc, #140]	; (8001594 <CenLoc_LockSequence+0x104>)
 8001508:	f00c fa6c 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 800150c:	210c      	movs	r1, #12
 800150e:	4821      	ldr	r0, [pc, #132]	; (8001594 <CenLoc_LockSequence+0x104>)
 8001510:	f00c fa68 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001514:	4b1e      	ldr	r3, [pc, #120]	; (8001590 <CenLoc_LockSequence+0x100>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f000 f8cd 	bl	80016b8 <CenLoc_ToggleBuzzer>
				break;
 800151e:	e013      	b.n	8001548 <CenLoc_LockSequence+0xb8>
				CenLoc_BlinkState = STD_LOW;
 8001520:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <CenLoc_LockSequence+0x100>)
 8001522:	2200      	movs	r2, #0
 8001524:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001526:	2108      	movs	r1, #8
 8001528:	481a      	ldr	r0, [pc, #104]	; (8001594 <CenLoc_LockSequence+0x104>)
 800152a:	f00c fa5b 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 800152e:	210c      	movs	r1, #12
 8001530:	4818      	ldr	r0, [pc, #96]	; (8001594 <CenLoc_LockSequence+0x104>)
 8001532:	f00c fa57 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001536:	4b16      	ldr	r3, [pc, #88]	; (8001590 <CenLoc_LockSequence+0x100>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f000 f8bc 	bl	80016b8 <CenLoc_ToggleBuzzer>
				localPreviousState = STD_LOW;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <CenLoc_LockSequence+0xf0>)
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]
				break;
 8001546:	bf00      	nop
		switch(CenLoc_BlinkCounter)
 8001548:	bf00      	nop
	}
	else
	{
		/* do nothing */
	}
}
 800154a:	e011      	b.n	8001570 <CenLoc_LockSequence+0xe0>
	else if(CenLoc_BlinkCounter == 2)
 800154c:	4b0b      	ldr	r3, [pc, #44]	; (800157c <CenLoc_LockSequence+0xec>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d10d      	bne.n	8001570 <CenLoc_LockSequence+0xe0>
		CenLoc_BlinkState = 2;
 8001554:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <CenLoc_LockSequence+0x100>)
 8001556:	2202      	movs	r2, #2
 8001558:	701a      	strb	r2, [r3, #0]
		CenLoc_BlinkCounter = 4;
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <CenLoc_LockSequence+0xec>)
 800155c:	2204      	movs	r2, #4
 800155e:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter(&CenLoc_BlinkCounter);
 8001560:	4806      	ldr	r0, [pc, #24]	; (800157c <CenLoc_LockSequence+0xec>)
 8001562:	f00c f9a5 	bl	800d8b0 <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_CenLoc_LockUnlockSequence_TimerHandle);
 8001566:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <CenLoc_LockSequence+0x108>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f00c fc09 	bl	800dd82 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}
 8001574:	200000e6 	.word	0x200000e6
 8001578:	20000414 	.word	0x20000414
 800157c:	200000e2 	.word	0x200000e2
 8001580:	200000e7 	.word	0x200000e7
 8001584:	20000290 	.word	0x20000290
 8001588:	2000028c 	.word	0x2000028c
 800158c:	200000e4 	.word	0x200000e4
 8001590:	200000e1 	.word	0x200000e1
 8001594:	200004c8 	.word	0x200004c8
 8001598:	20000280 	.word	0x20000280

0800159c <CenLoc_ControlAlarmLed>:
/***********************************************************************************
* Function: CenLoc_ControlAlarmLed												   *
* Description: Controls the security alarm LED 		   							   *
************************************************************************************/
VOID CenLoc_ControlAlarmLed()
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
	/* Check if the central lock state is set to high. */
	if(CenLoc_CurrentState == STD_HIGH)
 80015a0:	4b2f      	ldr	r3, [pc, #188]	; (8001660 <CenLoc_ControlAlarmLed+0xc4>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d10b      	bne.n	80015c0 <CenLoc_ControlAlarmLed+0x24>
	{
		/* Set the security alarm LED to off. */
		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_LOW);
 80015a8:	2000      	movs	r0, #0
 80015aa:	f000 ff5f 	bl	800246c <SecAlm_ToggleAlarmLed>
		/* Set the timer flag to 0. */
		CenLoc_TurnOnLedCounter = STD_LOW;
 80015ae:	4b2d      	ldr	r3, [pc, #180]	; (8001664 <CenLoc_ControlAlarmLed+0xc8>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	701a      	strb	r2, [r3, #0]
		/* Stop the timer related to the LED cyclic trigger. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLedTurnOn_TimerHandle);
 80015b4:	4b2c      	ldr	r3, [pc, #176]	; (8001668 <CenLoc_ControlAlarmLed+0xcc>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f00c fbe2 	bl	800dd82 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		else
		{
			/* do nothing */
		}
	}
}
 80015be:	e04c      	b.n	800165a <CenLoc_ControlAlarmLed+0xbe>
	else if(CenLoc_CurrentState == STD_LOW)
 80015c0:	4b27      	ldr	r3, [pc, #156]	; (8001660 <CenLoc_ControlAlarmLed+0xc4>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d148      	bne.n	800165a <CenLoc_ControlAlarmLed+0xbe>
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmLed_TurnOnCyclic_TimerHandle) == 0 && Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmLedTurnOn_TimerHandle) == 0)
 80015c8:	4b28      	ldr	r3, [pc, #160]	; (800166c <CenLoc_ControlAlarmLed+0xd0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f008 ffdc 	bl	800a58a <osTimerIsRunning>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d10e      	bne.n	80015f6 <CenLoc_ControlAlarmLed+0x5a>
 80015d8:	4b23      	ldr	r3, [pc, #140]	; (8001668 <CenLoc_ControlAlarmLed+0xcc>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f008 ffd4 	bl	800a58a <osTimerIsRunning>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d106      	bne.n	80015f6 <CenLoc_ControlAlarmLed+0x5a>
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlmLed_TurnOnCyclic_TimerHandle, 3750);
 80015e8:	4b20      	ldr	r3, [pc, #128]	; (800166c <CenLoc_ControlAlarmLed+0xd0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f640 61a6 	movw	r1, #3750	; 0xea6
 80015f0:	4618      	mov	r0, r3
 80015f2:	f00c fbb9 	bl	800dd68 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		if(CenLoc_CyclicAlarmCounter == 1)
 80015f6:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <CenLoc_ControlAlarmLed+0xd4>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d12d      	bne.n	800165a <CenLoc_ControlAlarmLed+0xbe>
			if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmLedTurnOn_TimerHandle) == 0)
 80015fe:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <CenLoc_ControlAlarmLed+0xcc>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f008 ffc1 	bl	800a58a <osTimerIsRunning>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d105      	bne.n	800161a <CenLoc_ControlAlarmLed+0x7e>
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlmLedTurnOn_TimerHandle, 250);
 800160e:	4b16      	ldr	r3, [pc, #88]	; (8001668 <CenLoc_ControlAlarmLed+0xcc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	21fa      	movs	r1, #250	; 0xfa
 8001614:	4618      	mov	r0, r3
 8001616:	f00c fba7 	bl	800dd68 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
			if(CenLoc_TurnOnLedCounter < 1)
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <CenLoc_ControlAlarmLed+0xc8>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d103      	bne.n	800162a <CenLoc_ControlAlarmLed+0x8e>
				Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_HIGH);
 8001622:	2001      	movs	r0, #1
 8001624:	f000 ff22 	bl	800246c <SecAlm_ToggleAlarmLed>
}
 8001628:	e017      	b.n	800165a <CenLoc_ControlAlarmLed+0xbe>
			else if(CenLoc_TurnOnLedCounter == 1)
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <CenLoc_ControlAlarmLed+0xc8>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d113      	bne.n	800165a <CenLoc_ControlAlarmLed+0xbe>
				Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_LOW);
 8001632:	2000      	movs	r0, #0
 8001634:	f000 ff1a 	bl	800246c <SecAlm_ToggleAlarmLed>
				CenLoc_TurnOnLedCounter = 0;
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <CenLoc_ControlAlarmLed+0xc8>)
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
				CenLoc_CyclicAlarmCounter = 0;
 800163e:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <CenLoc_ControlAlarmLed+0xd4>)
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
				Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter(&CenLoc_CyclicAlarmCounter);
 8001644:	480a      	ldr	r0, [pc, #40]	; (8001670 <CenLoc_ControlAlarmLed+0xd4>)
 8001646:	f00c f943 	bl	800d8d0 <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter>
				Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter(&CenLoc_TurnOnLedCounter);
 800164a:	4806      	ldr	r0, [pc, #24]	; (8001664 <CenLoc_ControlAlarmLed+0xc8>)
 800164c:	f00c f950 	bl	800d8f0 <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter>
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLedTurnOn_TimerHandle);
 8001650:	4b05      	ldr	r3, [pc, #20]	; (8001668 <CenLoc_ControlAlarmLed+0xcc>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f00c fb94 	bl	800dd82 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	200000de 	.word	0x200000de
 8001664:	200000e5 	.word	0x200000e5
 8001668:	20000288 	.word	0x20000288
 800166c:	20000284 	.word	0x20000284
 8001670:	200000e3 	.word	0x200000e3

08001674 <CenLoc_LockUnlockStates>:
/***********************************************************************************
* Function: CenLoc_LockUnlockStates												   *
* Description: Check for the state of the central lock.					 		   *
************************************************************************************/
VOID CenLoc_LockUnlockStates()
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	/* If the central lock state is set to high and the security alarm is set to off. */
	if(CenLoc_CurrentState == STD_HIGH && Rte_P_SecAlm_SecAlmPort_SecAlm_Trigger == STD_LOW)
 8001678:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <CenLoc_LockUnlockStates+0x3c>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d108      	bne.n	8001692 <CenLoc_LockUnlockStates+0x1e>
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <CenLoc_LockUnlockStates+0x40>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d104      	bne.n	8001692 <CenLoc_LockUnlockStates+0x1e>
	{
		/* Perform the related activities. */
		CenLoc_UnlockSequence();
 8001688:	f7ff fe50 	bl	800132c <CenLoc_UnlockSequence>
		CenLoc_ControlAlarmLed();
 800168c:	f7ff ff86 	bl	800159c <CenLoc_ControlAlarmLed>
	}
	else
	{
		/* do nothing */
	}
}
 8001690:	e00b      	b.n	80016aa <CenLoc_LockUnlockStates+0x36>
	else if(CenLoc_CurrentState == STD_LOW && Rte_P_SecAlm_SecAlmPort_SecAlm_Trigger == STD_LOW)
 8001692:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <CenLoc_LockUnlockStates+0x3c>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d107      	bne.n	80016aa <CenLoc_LockUnlockStates+0x36>
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <CenLoc_LockUnlockStates+0x40>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d103      	bne.n	80016aa <CenLoc_LockUnlockStates+0x36>
		CenLoc_LockSequence();
 80016a2:	f7ff fef5 	bl	8001490 <CenLoc_LockSequence>
		CenLoc_ControlAlarmLed();
 80016a6:	f7ff ff79 	bl	800159c <CenLoc_ControlAlarmLed>
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200000de 	.word	0x200000de
 80016b4:	20000124 	.word	0x20000124

080016b8 <CenLoc_ToggleBuzzer>:
/***********************************************************************************
* Function: CenLoc_ToggleBuzzer													   *
* Description: Trigger central lock buzzer. 		   							   *
************************************************************************************/
VOID CenLoc_ToggleBuzzer(uint8 PinState)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(CENLOC_BUZZER_PORT, CENLOC_BUZZER_PIN, PinState);
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	461a      	mov	r2, r3
 80016c6:	2104      	movs	r1, #4
 80016c8:	4803      	ldr	r0, [pc, #12]	; (80016d8 <CenLoc_ToggleBuzzer+0x20>)
 80016ca:	f00c fb3b 	bl	800dd44 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40020400 	.word	0x40020400

080016dc <CenLoc_MainFunction>:
/***********************************************************************************
* Function: CenLoc_MainFunction													   *
* Description: Central lock main function. Process the states of the application.  *
************************************************************************************/
VOID CenLoc_MainFunction()
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
	CenLoc_State();
 80016e0:	f7ff fdb0 	bl	8001244 <CenLoc_State>
	CenLoc_LockUnlockStates();
 80016e4:	f7ff ffc6 	bl	8001674 <CenLoc_LockUnlockStates>
}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}

080016ec <DiagCtrl_MainFunction>:
/***********************************************************************************
* Function: DiagCtrl_MainFunction										   		   *
* Description: Application main function.		 		   						   *
************************************************************************************/
VOID DiagCtrl_MainFunction()
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
	DiagCtrl_ProcessRequestedData();
 80016f0:	f000 f802 	bl	80016f8 <DiagCtrl_ProcessRequestedData>
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <DiagCtrl_ProcessRequestedData>:
/***********************************************************************************
* Function: DiagCtrl_ProcessRequestedData										   *
* Description: Process the measured requested data.		 		   				   *
************************************************************************************/
VOID DiagCtrl_ProcessRequestedData()
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	static uint32 VibrationSensor_RequestedValue = 0;
	static uint8 BtcUart_FaultValue_One = 0;
	static uint8 BtcUart_FaultValue_Two = 0;
	static uint8 BtcUart_FaultValue_Three = 0;
	static uint8 BtcUart_FaultValue_Four = 0;
	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&LightSensor_RequestedValue, 0);
 80016fc:	2100      	movs	r1, #0
 80016fe:	4824      	ldr	r0, [pc, #144]	; (8001790 <DiagCtrl_ProcessRequestedData+0x98>)
 8001700:	f00c f9be 	bl	800da80 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>
	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&VibrationSensor_RequestedValue, 1);
 8001704:	2101      	movs	r1, #1
 8001706:	4823      	ldr	r0, [pc, #140]	; (8001794 <DiagCtrl_ProcessRequestedData+0x9c>)
 8001708:	f00c f9ba 	bl	800da80 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_One, 17);
 800170c:	2111      	movs	r1, #17
 800170e:	4822      	ldr	r0, [pc, #136]	; (8001798 <DiagCtrl_ProcessRequestedData+0xa0>)
 8001710:	f00c f842 	bl	800d798 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_Two, 18);
 8001714:	2112      	movs	r1, #18
 8001716:	4821      	ldr	r0, [pc, #132]	; (800179c <DiagCtrl_ProcessRequestedData+0xa4>)
 8001718:	f00c f83e 	bl	800d798 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_Three, 19);
 800171c:	2113      	movs	r1, #19
 800171e:	4820      	ldr	r0, [pc, #128]	; (80017a0 <DiagCtrl_ProcessRequestedData+0xa8>)
 8001720:	f00c f83a 	bl	800d798 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_Four, 20);
 8001724:	2114      	movs	r1, #20
 8001726:	481f      	ldr	r0, [pc, #124]	; (80017a4 <DiagCtrl_ProcessRequestedData+0xac>)
 8001728:	f00c f836 	bl	800d798 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	if(BtcUart_FaultValue_One != 0 ||
 800172c:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <DiagCtrl_ProcessRequestedData+0xa0>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d10b      	bne.n	800174c <DiagCtrl_ProcessRequestedData+0x54>
			BtcUart_FaultValue_Two != 0 ||
 8001734:	4b19      	ldr	r3, [pc, #100]	; (800179c <DiagCtrl_ProcessRequestedData+0xa4>)
 8001736:	781b      	ldrb	r3, [r3, #0]
	if(BtcUart_FaultValue_One != 0 ||
 8001738:	2b00      	cmp	r3, #0
 800173a:	d107      	bne.n	800174c <DiagCtrl_ProcessRequestedData+0x54>
			BtcUart_FaultValue_Three != 0 ||
 800173c:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <DiagCtrl_ProcessRequestedData+0xa8>)
 800173e:	781b      	ldrb	r3, [r3, #0]
			BtcUart_FaultValue_Two != 0 ||
 8001740:	2b00      	cmp	r3, #0
 8001742:	d103      	bne.n	800174c <DiagCtrl_ProcessRequestedData+0x54>
			BtcUart_FaultValue_Four != 0)
 8001744:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <DiagCtrl_ProcessRequestedData+0xac>)
 8001746:	781b      	ldrb	r3, [r3, #0]
			BtcUart_FaultValue_Three != 0 ||
 8001748:	2b00      	cmp	r3, #0
 800174a:	d002      	beq.n	8001752 <DiagCtrl_ProcessRequestedData+0x5a>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_BLUETOOTH_MODULE_MALFUNCTION);
 800174c:	2022      	movs	r0, #34	; 0x22
 800174e:	f002 fa47 	bl	8003be0 <Dem_ReceiveFault>
	}
	else
	{
		/* do nothing */
	}
	if(LightSensor_RequestedValue < 100)
 8001752:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <DiagCtrl_ProcessRequestedData+0x98>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2b63      	cmp	r3, #99	; 0x63
 8001758:	d802      	bhi.n	8001760 <DiagCtrl_ProcessRequestedData+0x68>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_LIGHT_SENSOR_MALFUNCTION);
 800175a:	2003      	movs	r0, #3
 800175c:	f002 fa40 	bl	8003be0 <Dem_ReceiveFault>
	}
	else
	{
		/* do nothing */
	}
	if(VibrationSensor_RequestedValue < 100)
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <DiagCtrl_ProcessRequestedData+0x9c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b63      	cmp	r3, #99	; 0x63
 8001766:	d802      	bhi.n	800176e <DiagCtrl_ProcessRequestedData+0x76>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_VIBRATION_SENSOR_MALFUNCTION);
 8001768:	2013      	movs	r0, #19
 800176a:	f002 fa39 	bl	8003be0 <Dem_ReceiveFault>
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelThree == 0)
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <DiagCtrl_ProcessRequestedData+0xb0>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d102      	bne.n	800177c <DiagCtrl_ProcessRequestedData+0x84>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION);
 8001776:	2012      	movs	r0, #18
 8001778:	f002 fa32 	bl	8003be0 <Dem_ReceiveFault>
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelFour == 0)
 800177c:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <DiagCtrl_ProcessRequestedData+0xb4>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d102      	bne.n	800178a <DiagCtrl_ProcessRequestedData+0x92>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION);
 8001784:	2002      	movs	r0, #2
 8001786:	f002 fa2b 	bl	8003be0 <Dem_ReceiveFault>
	}
	else
	{
		/* do nothing */
	}
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	200000e8 	.word	0x200000e8
 8001794:	200000ec 	.word	0x200000ec
 8001798:	200000f0 	.word	0x200000f0
 800179c:	200000f1 	.word	0x200000f1
 80017a0:	200000f2 	.word	0x200000f2
 80017a4:	200000f3 	.word	0x200000f3
 80017a8:	200006f5 	.word	0x200006f5
 80017ac:	20000705 	.word	0x20000705

080017b0 <ExtLights_TurnSignalHazardLight>:
/***********************************************************************************
* Function: ExtLights_TurnSignalHazardLight										   *
* Description: Process the turn signals and hazard lights states. 		   		   *
************************************************************************************/
VOID ExtLights_TurnSignalHazardLight()
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
	/* If the turn signal left is set on. */
	if(ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 80017b4:	4b4c      	ldr	r3, [pc, #304]	; (80018e8 <ExtLights_TurnSignalHazardLight+0x138>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d123      	bne.n	8001804 <ExtLights_TurnSignalHazardLight+0x54>
	{
		/* Check if the timer related to the turn signals is off. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_TurnSignals_TimerHandle) == 0)
 80017bc:	4b4b      	ldr	r3, [pc, #300]	; (80018ec <ExtLights_TurnSignalHazardLight+0x13c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f008 fee2 	bl	800a58a <osTimerIsRunning>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d106      	bne.n	80017da <ExtLights_TurnSignalHazardLight+0x2a>
		{
			/* Start the timer with the designated period counter value. */
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 80017cc:	4b47      	ldr	r3, [pc, #284]	; (80018ec <ExtLights_TurnSignalHazardLight+0x13c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80017d4:	4618      	mov	r0, r3
 80017d6:	f00c fac7 	bl	800dd68 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Turn on and off the turn signal. */
		if(ExtLights_LTSFlag % 2 == 1)
 80017da:	4b45      	ldr	r3, [pc, #276]	; (80018f0 <ExtLights_TurnSignalHazardLight+0x140>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d004      	beq.n	80017f0 <ExtLights_TurnSignalHazardLight+0x40>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80017e6:	2108      	movs	r1, #8
 80017e8:	4842      	ldr	r0, [pc, #264]	; (80018f4 <ExtLights_TurnSignalHazardLight+0x144>)
 80017ea:	f00c f8fb 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 80017ee:	e009      	b.n	8001804 <ExtLights_TurnSignalHazardLight+0x54>
		}
		else if(ExtLights_LTSFlag % 2 == 0)
 80017f0:	4b3f      	ldr	r3, [pc, #252]	; (80018f0 <ExtLights_TurnSignalHazardLight+0x140>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d103      	bne.n	8001804 <ExtLights_TurnSignalHazardLight+0x54>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80017fc:	2108      	movs	r1, #8
 80017fe:	483d      	ldr	r0, [pc, #244]	; (80018f4 <ExtLights_TurnSignalHazardLight+0x144>)
 8001800:	f00c f8fd 	bl	800d9fe <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* If the turn signal right is set on. */
	if(ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 8001804:	4b3c      	ldr	r3, [pc, #240]	; (80018f8 <ExtLights_TurnSignalHazardLight+0x148>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d123      	bne.n	8001854 <ExtLights_TurnSignalHazardLight+0xa4>
	{
		/* Check if the timer related to the turn signals is off. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_TurnSignals_TimerHandle) == 0)
 800180c:	4b37      	ldr	r3, [pc, #220]	; (80018ec <ExtLights_TurnSignalHazardLight+0x13c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f008 feba 	bl	800a58a <osTimerIsRunning>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d106      	bne.n	800182a <ExtLights_TurnSignalHazardLight+0x7a>
		{
			/* Start the timer with the designated period counter value. */
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 800181c:	4b33      	ldr	r3, [pc, #204]	; (80018ec <ExtLights_TurnSignalHazardLight+0x13c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001824:	4618      	mov	r0, r3
 8001826:	f00c fa9f 	bl	800dd68 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Turn on and off the turn signal. */
		if(ExtLights_RTSFlag % 2 == 1)
 800182a:	4b34      	ldr	r3, [pc, #208]	; (80018fc <ExtLights_TurnSignalHazardLight+0x14c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	d004      	beq.n	8001840 <ExtLights_TurnSignalHazardLight+0x90>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001836:	210c      	movs	r1, #12
 8001838:	482e      	ldr	r0, [pc, #184]	; (80018f4 <ExtLights_TurnSignalHazardLight+0x144>)
 800183a:	f00c f8d3 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 800183e:	e009      	b.n	8001854 <ExtLights_TurnSignalHazardLight+0xa4>
		}
		else if(ExtLights_RTSFlag % 2 == 0)
 8001840:	4b2e      	ldr	r3, [pc, #184]	; (80018fc <ExtLights_TurnSignalHazardLight+0x14c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	2b00      	cmp	r3, #0
 800184a:	d103      	bne.n	8001854 <ExtLights_TurnSignalHazardLight+0xa4>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 800184c:	210c      	movs	r1, #12
 800184e:	4829      	ldr	r0, [pc, #164]	; (80018f4 <ExtLights_TurnSignalHazardLight+0x144>)
 8001850:	f00c f8d5 	bl	800d9fe <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* If the hazard light is set on. */
	if(ExtLights_HazardLight_CurrentState == STD_HIGH)
 8001854:	4b2a      	ldr	r3, [pc, #168]	; (8001900 <ExtLights_TurnSignalHazardLight+0x150>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d12b      	bne.n	80018b4 <ExtLights_TurnSignalHazardLight+0x104>
	{
		/* Check if the timer related to the turn signals is off. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_TurnSignals_TimerHandle) == 0)
 800185c:	4b23      	ldr	r3, [pc, #140]	; (80018ec <ExtLights_TurnSignalHazardLight+0x13c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f008 fe92 	bl	800a58a <osTimerIsRunning>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d106      	bne.n	800187a <ExtLights_TurnSignalHazardLight+0xca>
		{
			/* Start the timer with the designated period counter value. */
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 800186c:	4b1f      	ldr	r3, [pc, #124]	; (80018ec <ExtLights_TurnSignalHazardLight+0x13c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001874:	4618      	mov	r0, r3
 8001876:	f00c fa77 	bl	800dd68 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Turn on and off the turn signal. */
		if(ExtLights_HLFlag % 2 == 1)
 800187a:	4b22      	ldr	r3, [pc, #136]	; (8001904 <ExtLights_TurnSignalHazardLight+0x154>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b00      	cmp	r3, #0
 8001884:	d008      	beq.n	8001898 <ExtLights_TurnSignalHazardLight+0xe8>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001886:	2108      	movs	r1, #8
 8001888:	481a      	ldr	r0, [pc, #104]	; (80018f4 <ExtLights_TurnSignalHazardLight+0x144>)
 800188a:	f00c f8ab 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 800188e:	210c      	movs	r1, #12
 8001890:	4818      	ldr	r0, [pc, #96]	; (80018f4 <ExtLights_TurnSignalHazardLight+0x144>)
 8001892:	f00c f8a7 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8001896:	e00d      	b.n	80018b4 <ExtLights_TurnSignalHazardLight+0x104>
		}
		else if(ExtLights_HLFlag % 2 == 0)
 8001898:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <ExtLights_TurnSignalHazardLight+0x154>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d107      	bne.n	80018b4 <ExtLights_TurnSignalHazardLight+0x104>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80018a4:	2108      	movs	r1, #8
 80018a6:	4813      	ldr	r0, [pc, #76]	; (80018f4 <ExtLights_TurnSignalHazardLight+0x144>)
 80018a8:	f00c f8a9 	bl	800d9fe <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 80018ac:	210c      	movs	r1, #12
 80018ae:	4811      	ldr	r0, [pc, #68]	; (80018f4 <ExtLights_TurnSignalHazardLight+0x144>)
 80018b0:	f00c f8a5 	bl	800d9fe <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Only one pair of turn signals can be on at a time. Set on one pair and the other off. */
	if(ExtLights_TurnSignalRight_CurrentState == STD_LOW && ExtLights_HazardLight_CurrentState == STD_LOW)
 80018b4:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <ExtLights_TurnSignalHazardLight+0x148>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d107      	bne.n	80018cc <ExtLights_TurnSignalHazardLight+0x11c>
 80018bc:	4b10      	ldr	r3, [pc, #64]	; (8001900 <ExtLights_TurnSignalHazardLight+0x150>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d103      	bne.n	80018cc <ExtLights_TurnSignalHazardLight+0x11c>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 80018c4:	210c      	movs	r1, #12
 80018c6:	480b      	ldr	r0, [pc, #44]	; (80018f4 <ExtLights_TurnSignalHazardLight+0x144>)
 80018c8:	f00c f899 	bl	800d9fe <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Only one pair of turn signals can be on at a time. Set on one pair and the other off. */
	if(ExtLights_TurnSignalLeft_CurrentState == STD_LOW && ExtLights_HazardLight_CurrentState == STD_LOW)
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <ExtLights_TurnSignalHazardLight+0x138>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d107      	bne.n	80018e4 <ExtLights_TurnSignalHazardLight+0x134>
 80018d4:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <ExtLights_TurnSignalHazardLight+0x150>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d103      	bne.n	80018e4 <ExtLights_TurnSignalHazardLight+0x134>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80018dc:	2108      	movs	r1, #8
 80018de:	4805      	ldr	r0, [pc, #20]	; (80018f4 <ExtLights_TurnSignalHazardLight+0x144>)
 80018e0:	f00c f88d 	bl	800d9fe <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	}
	else
	{
		/* do nothing */
	}
}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	200000fa 	.word	0x200000fa
 80018ec:	20000290 	.word	0x20000290
 80018f0:	20000108 	.word	0x20000108
 80018f4:	200004c8 	.word	0x200004c8
 80018f8:	200000fb 	.word	0x200000fb
 80018fc:	20000104 	.word	0x20000104
 8001900:	200000fe 	.word	0x200000fe
 8001904:	2000010c 	.word	0x2000010c

08001908 <ExtLights_PrevStateTSHL>:
* Function: ExtLights_PrevStateTSHL										           *
* Description: Checks the current state and previous state of turn signals and     *
* 			   hazard lights. 		   											   *
************************************************************************************/
VOID ExtLights_PrevStateTSHL()
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
	/* Change the variables related to states. */
	if(ExtLights_TurnSignalLeft_CurrentState != ExtLights_LTS_PrevState)
 800190c:	4b18      	ldr	r3, [pc, #96]	; (8001970 <ExtLights_PrevStateTSHL+0x68>)
 800190e:	781a      	ldrb	r2, [r3, #0]
 8001910:	4b18      	ldr	r3, [pc, #96]	; (8001974 <ExtLights_PrevStateTSHL+0x6c>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d009      	beq.n	800192c <ExtLights_PrevStateTSHL+0x24>
	{
		ExtLights_LTS_PrevState = ExtLights_TurnSignalLeft_CurrentState;
 8001918:	4b15      	ldr	r3, [pc, #84]	; (8001970 <ExtLights_PrevStateTSHL+0x68>)
 800191a:	781a      	ldrb	r2, [r3, #0]
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <ExtLights_PrevStateTSHL+0x6c>)
 800191e:	701a      	strb	r2, [r3, #0]
		ExtLights_LTSFlag = 0;
 8001920:	4b15      	ldr	r3, [pc, #84]	; (8001978 <ExtLights_PrevStateTSHL+0x70>)
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_Lts_Counter(&ExtLights_LTSFlag);
 8001926:	4814      	ldr	r0, [pc, #80]	; (8001978 <ExtLights_PrevStateTSHL+0x70>)
 8001928:	f00c f802 	bl	800d930 <Rte_Write_Os_R_OsPort_Os_Lts_Counter>
	else
	{
		/* do nothing */
	}
	/* Change the variables related to states. */
	if(ExtLights_TurnSignalRight_CurrentState != ExtLights_RTS_PrevState)
 800192c:	4b13      	ldr	r3, [pc, #76]	; (800197c <ExtLights_PrevStateTSHL+0x74>)
 800192e:	781a      	ldrb	r2, [r3, #0]
 8001930:	4b13      	ldr	r3, [pc, #76]	; (8001980 <ExtLights_PrevStateTSHL+0x78>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	d009      	beq.n	800194c <ExtLights_PrevStateTSHL+0x44>
	{
		ExtLights_RTS_PrevState = ExtLights_TurnSignalRight_CurrentState;
 8001938:	4b10      	ldr	r3, [pc, #64]	; (800197c <ExtLights_PrevStateTSHL+0x74>)
 800193a:	781a      	ldrb	r2, [r3, #0]
 800193c:	4b10      	ldr	r3, [pc, #64]	; (8001980 <ExtLights_PrevStateTSHL+0x78>)
 800193e:	701a      	strb	r2, [r3, #0]
		ExtLights_RTSFlag = 0;
 8001940:	4b10      	ldr	r3, [pc, #64]	; (8001984 <ExtLights_PrevStateTSHL+0x7c>)
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_Rts_Counter(&ExtLights_RTSFlag);
 8001946:	480f      	ldr	r0, [pc, #60]	; (8001984 <ExtLights_PrevStateTSHL+0x7c>)
 8001948:	f00c f802 	bl	800d950 <Rte_Write_Os_R_OsPort_Os_Rts_Counter>
	else
	{
		/* do nothing */
	}
	/* Change the variables related to states. */
	if(ExtLights_HazardLight_CurrentState != ExtLights_HL_PrevState)
 800194c:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <ExtLights_PrevStateTSHL+0x80>)
 800194e:	781a      	ldrb	r2, [r3, #0]
 8001950:	4b0e      	ldr	r3, [pc, #56]	; (800198c <ExtLights_PrevStateTSHL+0x84>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d009      	beq.n	800196c <ExtLights_PrevStateTSHL+0x64>
	{
		ExtLights_HL_PrevState = ExtLights_HazardLight_CurrentState;
 8001958:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <ExtLights_PrevStateTSHL+0x80>)
 800195a:	781a      	ldrb	r2, [r3, #0]
 800195c:	4b0b      	ldr	r3, [pc, #44]	; (800198c <ExtLights_PrevStateTSHL+0x84>)
 800195e:	701a      	strb	r2, [r3, #0]
		ExtLights_HLFlag = 0;
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <ExtLights_PrevStateTSHL+0x88>)
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_HL_Counter(&ExtLights_HLFlag);
 8001966:	480a      	ldr	r0, [pc, #40]	; (8001990 <ExtLights_PrevStateTSHL+0x88>)
 8001968:	f00c f802 	bl	800d970 <Rte_Write_Os_R_OsPort_Os_HL_Counter>
	}
	else
	{
		/* do nothing */
	}
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}
 8001970:	200000fa 	.word	0x200000fa
 8001974:	20000101 	.word	0x20000101
 8001978:	20000108 	.word	0x20000108
 800197c:	200000fb 	.word	0x200000fb
 8001980:	20000100 	.word	0x20000100
 8001984:	20000104 	.word	0x20000104
 8001988:	200000fe 	.word	0x200000fe
 800198c:	20000102 	.word	0x20000102
 8001990:	2000010c 	.word	0x2000010c

08001994 <ExtLights_LightState>:
/***********************************************************************************
* Function: ExtLights_LightState										   		   *
* Description: Controls the lights states.								 		   *
************************************************************************************/
VOID ExtLights_LightState()
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
	/* Process turn signals state. */
	ExtLights_PrevStateTSHL();
 8001998:	f7ff ffb6 	bl	8001908 <ExtLights_PrevStateTSHL>
	/* Follow me home is on, then turn on the respective lights. */
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_HIGH)
 800199c:	4b9d      	ldr	r3, [pc, #628]	; (8001c14 <ExtLights_LightState+0x280>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d110      	bne.n	80019c6 <ExtLights_LightState+0x32>
	{
		ExtLights_LightSwitchMode();
 80019a4:	f000 f966 	bl	8001c74 <ExtLights_LightSwitchMode>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 80019a8:	2100      	movs	r1, #0
 80019aa:	489b      	ldr	r0, [pc, #620]	; (8001c18 <ExtLights_LightState+0x284>)
 80019ac:	f00c f81a 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 80019b0:	2104      	movs	r1, #4
 80019b2:	4899      	ldr	r0, [pc, #612]	; (8001c18 <ExtLights_LightState+0x284>)
 80019b4:	f00c f816 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		ExtLights_LowBeam_CurrentState = STD_HIGH;
 80019b8:	4b98      	ldr	r3, [pc, #608]	; (8001c1c <ExtLights_LightState+0x288>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	701a      	strb	r2, [r3, #0]
		ExtLights_RearPositionLights_CurrentState = STD_HIGH;
 80019be:	4b98      	ldr	r3, [pc, #608]	; (8001c20 <ExtLights_LightState+0x28c>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	701a      	strb	r2, [r3, #0]
 80019c4:	e017      	b.n	80019f6 <ExtLights_LightState+0x62>
	}/* Follow me home is off, turn off the lights.*/
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW)
 80019c6:	4b93      	ldr	r3, [pc, #588]	; (8001c14 <ExtLights_LightState+0x280>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d113      	bne.n	80019f6 <ExtLights_LightState+0x62>
	{
		ExtLights_LightSwitchMode();
 80019ce:	f000 f951 	bl	8001c74 <ExtLights_LightSwitchMode>
		if(ExtLights_LightsSwitch_CurrentState == STD_LOW)
 80019d2:	4b94      	ldr	r3, [pc, #592]	; (8001c24 <ExtLights_LightState+0x290>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10d      	bne.n	80019f6 <ExtLights_LightState+0x62>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 80019da:	2100      	movs	r1, #0
 80019dc:	488e      	ldr	r0, [pc, #568]	; (8001c18 <ExtLights_LightState+0x284>)
 80019de:	f00c f80e 	bl	800d9fe <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 80019e2:	2104      	movs	r1, #4
 80019e4:	488c      	ldr	r0, [pc, #560]	; (8001c18 <ExtLights_LightState+0x284>)
 80019e6:	f00c f80a 	bl	800d9fe <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			ExtLights_LowBeam_CurrentState = STD_LOW;
 80019ea:	4b8c      	ldr	r3, [pc, #560]	; (8001c1c <ExtLights_LightState+0x288>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_LOW;
 80019f0:	4b8b      	ldr	r3, [pc, #556]	; (8001c20 <ExtLights_LightState+0x28c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If any light state is set to on, then stop the follow me home. */
	if(ExtLights_BrakeLight_CurrentState == STD_HIGH ||
 80019f6:	4b8c      	ldr	r3, [pc, #560]	; (8001c28 <ExtLights_LightState+0x294>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d017      	beq.n	8001a2e <ExtLights_LightState+0x9a>
		ExtLights_FlashHighBeam_CurrentState == STD_HIGH ||
 80019fe:	4b8b      	ldr	r3, [pc, #556]	; (8001c2c <ExtLights_LightState+0x298>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
	if(ExtLights_BrakeLight_CurrentState == STD_HIGH ||
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d013      	beq.n	8001a2e <ExtLights_LightState+0x9a>
		ExtLights_LightsSwitch_CurrentState != STD_LOW ||
 8001a06:	4b87      	ldr	r3, [pc, #540]	; (8001c24 <ExtLights_LightState+0x290>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
		ExtLights_FlashHighBeam_CurrentState == STD_HIGH ||
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10f      	bne.n	8001a2e <ExtLights_LightState+0x9a>
		ExtLights_HighBeam_CurrentState == STD_HIGH ||
 8001a0e:	4b88      	ldr	r3, [pc, #544]	; (8001c30 <ExtLights_LightState+0x29c>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
		ExtLights_LightsSwitch_CurrentState != STD_LOW ||
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d00b      	beq.n	8001a2e <ExtLights_LightState+0x9a>
		ExtLights_TurnSignalLeft_CurrentState == STD_HIGH ||
 8001a16:	4b87      	ldr	r3, [pc, #540]	; (8001c34 <ExtLights_LightState+0x2a0>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
		ExtLights_HighBeam_CurrentState == STD_HIGH ||
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d007      	beq.n	8001a2e <ExtLights_LightState+0x9a>
		ExtLights_TurnSignalRight_CurrentState == STD_HIGH ||
 8001a1e:	4b86      	ldr	r3, [pc, #536]	; (8001c38 <ExtLights_LightState+0x2a4>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
		ExtLights_TurnSignalLeft_CurrentState == STD_HIGH ||
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d003      	beq.n	8001a2e <ExtLights_LightState+0x9a>
		ExtLights_HazardLight_CurrentState == STD_HIGH)
 8001a26:	4b85      	ldr	r3, [pc, #532]	; (8001c3c <ExtLights_LightState+0x2a8>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
		ExtLights_TurnSignalRight_CurrentState == STD_HIGH ||
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d11a      	bne.n	8001a64 <ExtLights_LightState+0xd0>
	{
		if(ExtLights_LightsSwitch_CurrentState == STD_LOW)
 8001a2e:	4b7d      	ldr	r3, [pc, #500]	; (8001c24 <ExtLights_LightState+0x290>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d116      	bne.n	8001a64 <ExtLights_LightState+0xd0>
		{
			Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState(STD_LOW);
 8001a36:	2000      	movs	r0, #0
 8001a38:	f00c f856 	bl	800dae8 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState>
			Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter((uint8*)2);
 8001a3c:	2002      	movs	r0, #2
 8001a3e:	f00b fef7 	bl	800d830 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter>
			Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter((uint8*)2);
 8001a42:	2002      	movs	r0, #2
 8001a44:	f00b ff64 	bl	800d910 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4873      	ldr	r0, [pc, #460]	; (8001c18 <ExtLights_LightState+0x284>)
 8001a4c:	f00b ffd7 	bl	800d9fe <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8001a50:	2104      	movs	r1, #4
 8001a52:	4871      	ldr	r0, [pc, #452]	; (8001c18 <ExtLights_LightState+0x284>)
 8001a54:	f00b ffd3 	bl	800d9fe <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			ExtLights_LowBeam_CurrentState = STD_LOW;
 8001a58:	4b70      	ldr	r3, [pc, #448]	; (8001c1c <ExtLights_LightState+0x288>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001a5e:	4b70      	ldr	r3, [pc, #448]	; (8001c20 <ExtLights_LightState+0x28c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* Control the turn signals for the central lock lock unlock sequence when requested. */
	if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == STD_HIGH)
 8001a64:	4b76      	ldr	r3, [pc, #472]	; (8001c40 <ExtLights_LightState+0x2ac>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d108      	bne.n	8001a7e <ExtLights_LightState+0xea>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001a6c:	2108      	movs	r1, #8
 8001a6e:	4875      	ldr	r0, [pc, #468]	; (8001c44 <ExtLights_LightState+0x2b0>)
 8001a70:	f00b ffb8 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001a74:	210c      	movs	r1, #12
 8001a76:	4873      	ldr	r0, [pc, #460]	; (8001c44 <ExtLights_LightState+0x2b0>)
 8001a78:	f00b ffb4 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8001a7c:	e016      	b.n	8001aac <ExtLights_LightState+0x118>
	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == STD_LOW)
 8001a7e:	4b70      	ldr	r3, [pc, #448]	; (8001c40 <ExtLights_LightState+0x2ac>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d108      	bne.n	8001a98 <ExtLights_LightState+0x104>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001a86:	2108      	movs	r1, #8
 8001a88:	486e      	ldr	r0, [pc, #440]	; (8001c44 <ExtLights_LightState+0x2b0>)
 8001a8a:	f00b ffb8 	bl	800d9fe <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001a8e:	210c      	movs	r1, #12
 8001a90:	486c      	ldr	r0, [pc, #432]	; (8001c44 <ExtLights_LightState+0x2b0>)
 8001a92:	f00b ffb4 	bl	800d9fe <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
 8001a96:	e009      	b.n	8001aac <ExtLights_LightState+0x118>
	}/* Allows for turning on the hazard lights or turn signals independently of other states in the system. */
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == 2 || Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == 4)
 8001a98:	4b69      	ldr	r3, [pc, #420]	; (8001c40 <ExtLights_LightState+0x2ac>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d003      	beq.n	8001aa8 <ExtLights_LightState+0x114>
 8001aa0:	4b67      	ldr	r3, [pc, #412]	; (8001c40 <ExtLights_LightState+0x2ac>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	d101      	bne.n	8001aac <ExtLights_LightState+0x118>
	{
		ExtLights_TurnSignalHazardLight();
 8001aa8:	f7ff fe82 	bl	80017b0 <ExtLights_TurnSignalHazardLight>
	else
	{
		/* do nothing */
	}
	/* Turn on/off high beam. */
	if(ExtLights_FlashHighBeam_CurrentState == STD_HIGH)
 8001aac:	4b5f      	ldr	r3, [pc, #380]	; (8001c2c <ExtLights_LightState+0x298>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d103      	bne.n	8001abc <ExtLights_LightState+0x128>
	{
		ExtLights_HighBeam(STD_HIGH);
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	f000 f9cd 	bl	8001e54 <ExtLights_HighBeam>
 8001aba:	e006      	b.n	8001aca <ExtLights_LightState+0x136>
	}
	else if(ExtLights_FlashHighBeam_CurrentState == STD_LOW)
 8001abc:	4b5b      	ldr	r3, [pc, #364]	; (8001c2c <ExtLights_LightState+0x298>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d102      	bne.n	8001aca <ExtLights_LightState+0x136>
	{
		ExtLights_HighBeam(STD_LOW);
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f000 f9c5 	bl	8001e54 <ExtLights_HighBeam>
	else
	{
		/* do nothing */
	}
	/* Turn on/off high beam. */
	if(ExtLights_HighBeam_CurrentState == STD_HIGH)
 8001aca:	4b59      	ldr	r3, [pc, #356]	; (8001c30 <ExtLights_LightState+0x29c>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d103      	bne.n	8001ada <ExtLights_LightState+0x146>
	{
		ExtLights_HighBeam(STD_HIGH);
 8001ad2:	2001      	movs	r0, #1
 8001ad4:	f000 f9be 	bl	8001e54 <ExtLights_HighBeam>
 8001ad8:	e006      	b.n	8001ae8 <ExtLights_LightState+0x154>
	}
	else if(ExtLights_HighBeam_CurrentState == STD_LOW)
 8001ada:	4b55      	ldr	r3, [pc, #340]	; (8001c30 <ExtLights_LightState+0x29c>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d102      	bne.n	8001ae8 <ExtLights_LightState+0x154>
	{
		ExtLights_HighBeam(STD_LOW);
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f000 f9b6 	bl	8001e54 <ExtLights_HighBeam>
	else
	{
		/* do nothing */
	}
	/* Turn on or off the brake lights. */
	if(ExtLights_BrakeLight_CurrentState == STD_HIGH)
 8001ae8:	4b4f      	ldr	r3, [pc, #316]	; (8001c28 <ExtLights_LightState+0x294>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d111      	bne.n	8001b14 <ExtLights_LightState+0x180>
	{
		if(ExtLights_BrakeLight_CurrentState != ExtLights_Previous_BrakeLight_CurrentState)
 8001af0:	4b4d      	ldr	r3, [pc, #308]	; (8001c28 <ExtLights_LightState+0x294>)
 8001af2:	781a      	ldrb	r2, [r3, #0]
 8001af4:	4b54      	ldr	r3, [pc, #336]	; (8001c48 <ExtLights_LightState+0x2b4>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d006      	beq.n	8001b0a <ExtLights_LightState+0x176>
		{
			ExtLights_Previous_BrakeLight_CurrentState = ExtLights_BrakeLight_CurrentState;
 8001afc:	4b4a      	ldr	r3, [pc, #296]	; (8001c28 <ExtLights_LightState+0x294>)
 8001afe:	781a      	ldrb	r2, [r3, #0]
 8001b00:	4b51      	ldr	r3, [pc, #324]	; (8001c48 <ExtLights_LightState+0x2b4>)
 8001b02:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr2(0);
 8001b04:	2000      	movs	r0, #0
 8001b06:	f00b fdf9 	bl	800d6fc <Rte_Write_TimH_TimHPort_Tim3Ccr2>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel2);
 8001b0a:	2104      	movs	r1, #4
 8001b0c:	484f      	ldr	r0, [pc, #316]	; (8001c4c <ExtLights_LightState+0x2b8>)
 8001b0e:	f00b ff69 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8001b12:	e014      	b.n	8001b3e <ExtLights_LightState+0x1aa>
	}
	else if(ExtLights_BrakeLight_CurrentState == STD_LOW)
 8001b14:	4b44      	ldr	r3, [pc, #272]	; (8001c28 <ExtLights_LightState+0x294>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d110      	bne.n	8001b3e <ExtLights_LightState+0x1aa>
	{
		if(ExtLights_BrakeLight_CurrentState != ExtLights_Previous_BrakeLight_CurrentState)
 8001b1c:	4b42      	ldr	r3, [pc, #264]	; (8001c28 <ExtLights_LightState+0x294>)
 8001b1e:	781a      	ldrb	r2, [r3, #0]
 8001b20:	4b49      	ldr	r3, [pc, #292]	; (8001c48 <ExtLights_LightState+0x2b4>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d006      	beq.n	8001b36 <ExtLights_LightState+0x1a2>
		{
			ExtLights_Previous_BrakeLight_CurrentState = ExtLights_BrakeLight_CurrentState;
 8001b28:	4b3f      	ldr	r3, [pc, #252]	; (8001c28 <ExtLights_LightState+0x294>)
 8001b2a:	781a      	ldrb	r2, [r3, #0]
 8001b2c:	4b46      	ldr	r3, [pc, #280]	; (8001c48 <ExtLights_LightState+0x2b4>)
 8001b2e:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr2(0);
 8001b30:	2000      	movs	r0, #0
 8001b32:	f00b fde3 	bl	800d6fc <Rte_Write_TimH_TimHPort_Tim3Ccr2>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel2);
 8001b36:	2104      	movs	r1, #4
 8001b38:	4844      	ldr	r0, [pc, #272]	; (8001c4c <ExtLights_LightState+0x2b8>)
 8001b3a:	f00b ff60 	bl	800d9fe <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Turn on or off the rear fog lights. */
	if(ExtLights_RearFogLight_CurrentState == STD_HIGH)
 8001b3e:	4b44      	ldr	r3, [pc, #272]	; (8001c50 <ExtLights_LightState+0x2bc>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d111      	bne.n	8001b6a <ExtLights_LightState+0x1d6>
	{
		if(ExtLights_RearFogLight_CurrentState != ExtLights_Previous_RearFogLight_CurrentState)
 8001b46:	4b42      	ldr	r3, [pc, #264]	; (8001c50 <ExtLights_LightState+0x2bc>)
 8001b48:	781a      	ldrb	r2, [r3, #0]
 8001b4a:	4b42      	ldr	r3, [pc, #264]	; (8001c54 <ExtLights_LightState+0x2c0>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d006      	beq.n	8001b60 <ExtLights_LightState+0x1cc>
		{
			ExtLights_Previous_RearFogLight_CurrentState = ExtLights_RearFogLight_CurrentState;
 8001b52:	4b3f      	ldr	r3, [pc, #252]	; (8001c50 <ExtLights_LightState+0x2bc>)
 8001b54:	781a      	ldrb	r2, [r3, #0]
 8001b56:	4b3f      	ldr	r3, [pc, #252]	; (8001c54 <ExtLights_LightState+0x2c0>)
 8001b58:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr4(0);
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f00b fdee 	bl	800d73c <Rte_Write_TimH_TimHPort_Tim3Ccr4>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 8001b60:	210c      	movs	r1, #12
 8001b62:	483a      	ldr	r0, [pc, #232]	; (8001c4c <ExtLights_LightState+0x2b8>)
 8001b64:	f00b ff3e 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8001b68:	e014      	b.n	8001b94 <ExtLights_LightState+0x200>
	}
	else if(ExtLights_RearFogLight_CurrentState == STD_LOW)
 8001b6a:	4b39      	ldr	r3, [pc, #228]	; (8001c50 <ExtLights_LightState+0x2bc>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d110      	bne.n	8001b94 <ExtLights_LightState+0x200>
	{
		if(ExtLights_RearFogLight_CurrentState != ExtLights_Previous_RearFogLight_CurrentState)
 8001b72:	4b37      	ldr	r3, [pc, #220]	; (8001c50 <ExtLights_LightState+0x2bc>)
 8001b74:	781a      	ldrb	r2, [r3, #0]
 8001b76:	4b37      	ldr	r3, [pc, #220]	; (8001c54 <ExtLights_LightState+0x2c0>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d006      	beq.n	8001b8c <ExtLights_LightState+0x1f8>
		{
			ExtLights_Previous_RearFogLight_CurrentState = ExtLights_RearFogLight_CurrentState;
 8001b7e:	4b34      	ldr	r3, [pc, #208]	; (8001c50 <ExtLights_LightState+0x2bc>)
 8001b80:	781a      	ldrb	r2, [r3, #0]
 8001b82:	4b34      	ldr	r3, [pc, #208]	; (8001c54 <ExtLights_LightState+0x2c0>)
 8001b84:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr4(0);
 8001b86:	2000      	movs	r0, #0
 8001b88:	f00b fdd8 	bl	800d73c <Rte_Write_TimH_TimHPort_Tim3Ccr4>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 8001b8c:	210c      	movs	r1, #12
 8001b8e:	482f      	ldr	r0, [pc, #188]	; (8001c4c <ExtLights_LightState+0x2b8>)
 8001b90:	f00b ff35 	bl	800d9fe <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Turn on or off the front fog lights. */
	if(ExtLights_FrontFogLight_CurrentState == STD_HIGH)
 8001b94:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <ExtLights_LightState+0x2c4>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d111      	bne.n	8001bc0 <ExtLights_LightState+0x22c>
	{
		if(ExtLights_FrontFogLight_CurrentState != ExtLights_Previous_FrontFogLight_CurrentState)
 8001b9c:	4b2e      	ldr	r3, [pc, #184]	; (8001c58 <ExtLights_LightState+0x2c4>)
 8001b9e:	781a      	ldrb	r2, [r3, #0]
 8001ba0:	4b2e      	ldr	r3, [pc, #184]	; (8001c5c <ExtLights_LightState+0x2c8>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d006      	beq.n	8001bb6 <ExtLights_LightState+0x222>
		{
			ExtLights_Previous_FrontFogLight_CurrentState = ExtLights_FrontFogLight_CurrentState;
 8001ba8:	4b2b      	ldr	r3, [pc, #172]	; (8001c58 <ExtLights_LightState+0x2c4>)
 8001baa:	781a      	ldrb	r2, [r3, #0]
 8001bac:	4b2b      	ldr	r3, [pc, #172]	; (8001c5c <ExtLights_LightState+0x2c8>)
 8001bae:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr3(0);
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	f00b fdb3 	bl	800d71c <Rte_Write_TimH_TimHPort_Tim3Ccr3>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 8001bb6:	2108      	movs	r1, #8
 8001bb8:	4824      	ldr	r0, [pc, #144]	; (8001c4c <ExtLights_LightState+0x2b8>)
 8001bba:	f00b ff13 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8001bbe:	e014      	b.n	8001bea <ExtLights_LightState+0x256>
	}
	else if(ExtLights_FrontFogLight_CurrentState == STD_LOW)
 8001bc0:	4b25      	ldr	r3, [pc, #148]	; (8001c58 <ExtLights_LightState+0x2c4>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d110      	bne.n	8001bea <ExtLights_LightState+0x256>
	{
		if(ExtLights_FrontFogLight_CurrentState != ExtLights_Previous_FrontFogLight_CurrentState)
 8001bc8:	4b23      	ldr	r3, [pc, #140]	; (8001c58 <ExtLights_LightState+0x2c4>)
 8001bca:	781a      	ldrb	r2, [r3, #0]
 8001bcc:	4b23      	ldr	r3, [pc, #140]	; (8001c5c <ExtLights_LightState+0x2c8>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d006      	beq.n	8001be2 <ExtLights_LightState+0x24e>
		{
			ExtLights_Previous_FrontFogLight_CurrentState = ExtLights_FrontFogLight_CurrentState;
 8001bd4:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <ExtLights_LightState+0x2c4>)
 8001bd6:	781a      	ldrb	r2, [r3, #0]
 8001bd8:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <ExtLights_LightState+0x2c8>)
 8001bda:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr3(0);
 8001bdc:	2000      	movs	r0, #0
 8001bde:	f00b fd9d 	bl	800d71c <Rte_Write_TimH_TimHPort_Tim3Ccr3>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 8001be2:	2108      	movs	r1, #8
 8001be4:	4819      	ldr	r0, [pc, #100]	; (8001c4c <ExtLights_LightState+0x2b8>)
 8001be6:	f00b ff0a 	bl	800d9fe <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Turn on the reverse light. */
	ExtLights_ReverseLight(ExtLights_ReverseLight_CurrentState);
 8001bea:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <ExtLights_LightState+0x2cc>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 f942 	bl	8001e78 <ExtLights_ReverseLight>

	if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_LOW)
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <ExtLights_LightState+0x2d0>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d108      	bne.n	8001c0e <ExtLights_LightState+0x27a>
	{
		ExtLights_ReverseLight_CurrentState = STD_LOW;
 8001bfc:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <ExtLights_LightState+0x2cc>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	701a      	strb	r2, [r3, #0]
		ExtLights_RearFogLight_CurrentState = STD_LOW;
 8001c02:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <ExtLights_LightState+0x2bc>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	701a      	strb	r2, [r3, #0]
		ExtLights_FrontFogLight_CurrentState = STD_LOW;
 8001c08:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <ExtLights_LightState+0x2c4>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200000e0 	.word	0x200000e0
 8001c18:	20000360 	.word	0x20000360
 8001c1c:	200000fc 	.word	0x200000fc
 8001c20:	200000fd 	.word	0x200000fd
 8001c24:	200000f7 	.word	0x200000f7
 8001c28:	200000f6 	.word	0x200000f6
 8001c2c:	200000f5 	.word	0x200000f5
 8001c30:	200000f8 	.word	0x200000f8
 8001c34:	200000fa 	.word	0x200000fa
 8001c38:	200000fb 	.word	0x200000fb
 8001c3c:	200000fe 	.word	0x200000fe
 8001c40:	200000e1 	.word	0x200000e1
 8001c44:	200004c8 	.word	0x200004c8
 8001c48:	20000116 	.word	0x20000116
 8001c4c:	20000414 	.word	0x20000414
 8001c50:	200000ff 	.word	0x200000ff
 8001c54:	20000114 	.word	0x20000114
 8001c58:	200000f9 	.word	0x200000f9
 8001c5c:	20000115 	.word	0x20000115
 8001c60:	200000f4 	.word	0x200000f4
 8001c64:	200000de 	.word	0x200000de

08001c68 <ExtLights_MainFunction>:
* Function: ExtLights_MainFunction										   		   *
* Description: Exterior lights application main function. Controls application	   *
* 			   states. 		   													   *
************************************************************************************/
VOID ExtLights_MainFunction()
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
	ExtLights_LightState();
 8001c6c:	f7ff fe92 	bl	8001994 <ExtLights_LightState>
}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <ExtLights_LightSwitchMode>:
/***********************************************************************************
* Function: ExtLights_LightSwitchMode										   	   *
* Description: Control the light switch.								 		   *
************************************************************************************/
VOID ExtLights_LightSwitchMode()
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
	/* Switch through the light switch states. */
	switch(ExtLights_LightsSwitch_CurrentState)
 8001c78:	4b6e      	ldr	r3, [pc, #440]	; (8001e34 <ExtLights_LightSwitchMode+0x1c0>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	3b17      	subs	r3, #23
 8001c7e:	2b03      	cmp	r3, #3
 8001c80:	f200 80d2 	bhi.w	8001e28 <ExtLights_LightSwitchMode+0x1b4>
 8001c84:	a201      	add	r2, pc, #4	; (adr r2, 8001c8c <ExtLights_LightSwitchMode+0x18>)
 8001c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c8a:	bf00      	nop
 8001c8c:	08001c9d 	.word	0x08001c9d
 8001c90:	08001ce7 	.word	0x08001ce7
 8001c94:	08001d87 	.word	0x08001d87
 8001c98:	08001ddf 	.word	0x08001ddf
	{
		/* Switch is on position zero, turn off the lights. */
		case EXTLIGHTS_LIGHTSWITCH_STATEZERO:
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 8001c9c:	4b66      	ldr	r3, [pc, #408]	; (8001e38 <ExtLights_LightSwitchMode+0x1c4>)
 8001c9e:	781a      	ldrb	r2, [r3, #0]
 8001ca0:	4b64      	ldr	r3, [pc, #400]	; (8001e34 <ExtLights_LightSwitchMode+0x1c0>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d00f      	beq.n	8001cc8 <ExtLights_LightSwitchMode+0x54>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 8001ca8:	4b62      	ldr	r3, [pc, #392]	; (8001e34 <ExtLights_LightSwitchMode+0x1c0>)
 8001caa:	781a      	ldrb	r2, [r3, #0]
 8001cac:	4b62      	ldr	r3, [pc, #392]	; (8001e38 <ExtLights_LightSwitchMode+0x1c4>)
 8001cae:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	f00b fd53 	bl	800d75c <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	f00b fd5f 	bl	800d77a <Rte_Write_TimH_TimHPort_Tim2Ccr2>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 8001cbc:	4b5f      	ldr	r3, [pc, #380]	; (8001e3c <ExtLights_LightSwitchMode+0x1c8>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001cc2:	4b5f      	ldr	r3, [pc, #380]	; (8001e40 <ExtLights_LightSwitchMode+0x1cc>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001cc8:	2100      	movs	r1, #0
 8001cca:	485e      	ldr	r0, [pc, #376]	; (8001e44 <ExtLights_LightSwitchMode+0x1d0>)
 8001ccc:	f00b fe97 	bl	800d9fe <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8001cd0:	2104      	movs	r1, #4
 8001cd2:	485c      	ldr	r0, [pc, #368]	; (8001e44 <ExtLights_LightSwitchMode+0x1d0>)
 8001cd4:	f00b fe93 	bl	800d9fe <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			ExtLights_LowBeam_CurrentState = STD_LOW;
 8001cd8:	4b58      	ldr	r3, [pc, #352]	; (8001e3c <ExtLights_LightSwitchMode+0x1c8>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001cde:	4b58      	ldr	r3, [pc, #352]	; (8001e40 <ExtLights_LightSwitchMode+0x1cc>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
			break;
 8001ce4:	e0a3      	b.n	8001e2e <ExtLights_LightSwitchMode+0x1ba>
		/* Switch is on position one, turn automatic lights controlled by sensor's input. */
		case EXTLIGHTS_LIGHTSWITCH_STATEONE:
			/* Read the sensor status. */
			if(Rte_P_Os_OsPort_Os_Counter % 39 == 0)
 8001ce6:	4b58      	ldr	r3, [pc, #352]	; (8001e48 <ExtLights_LightSwitchMode+0x1d4>)
 8001ce8:	6819      	ldr	r1, [r3, #0]
 8001cea:	4b58      	ldr	r3, [pc, #352]	; (8001e4c <ExtLights_LightSwitchMode+0x1d8>)
 8001cec:	fba3 2301 	umull	r2, r3, r3, r1
 8001cf0:	1aca      	subs	r2, r1, r3
 8001cf2:	0852      	lsrs	r2, r2, #1
 8001cf4:	4413      	add	r3, r2
 8001cf6:	095a      	lsrs	r2, r3, #5
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	1a9b      	subs	r3, r3, r2
 8001d02:	1aca      	subs	r2, r1, r3
 8001d04:	2a00      	cmp	r2, #0
 8001d06:	d102      	bne.n	8001d0e <ExtLights_LightSwitchMode+0x9a>
			{
				Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(EXTLIGHTS_LS_REQUEST);
 8001d08:	2000      	movs	r0, #0
 8001d0a:	f000 fbc1 	bl	8002490 <SenCtrl_ProcessSensorValue>
			}
			else
			{
				/* do nothing */
			}
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 8001d0e:	4b4a      	ldr	r3, [pc, #296]	; (8001e38 <ExtLights_LightSwitchMode+0x1c4>)
 8001d10:	781a      	ldrb	r2, [r3, #0]
 8001d12:	4b48      	ldr	r3, [pc, #288]	; (8001e34 <ExtLights_LightSwitchMode+0x1c0>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d00f      	beq.n	8001d3a <ExtLights_LightSwitchMode+0xc6>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 8001d1a:	4b46      	ldr	r3, [pc, #280]	; (8001e34 <ExtLights_LightSwitchMode+0x1c0>)
 8001d1c:	781a      	ldrb	r2, [r3, #0]
 8001d1e:	4b46      	ldr	r3, [pc, #280]	; (8001e38 <ExtLights_LightSwitchMode+0x1c4>)
 8001d20:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 8001d22:	2000      	movs	r0, #0
 8001d24:	f00b fd1a 	bl	800d75c <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f00b fd26 	bl	800d77a <Rte_Write_TimH_TimHPort_Tim2Ccr2>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 8001d2e:	4b43      	ldr	r3, [pc, #268]	; (8001e3c <ExtLights_LightSwitchMode+0x1c8>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001d34:	4b42      	ldr	r3, [pc, #264]	; (8001e40 <ExtLights_LightSwitchMode+0x1cc>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	701a      	strb	r2, [r3, #0]
			else
			{
				/* do nothing */
			}
			/* If the sensor status is on, turn on the lights to on. */
			if(ExtLights_LightSensorState == 1)
 8001d3a:	4b45      	ldr	r3, [pc, #276]	; (8001e50 <ExtLights_LightSwitchMode+0x1dc>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d10e      	bne.n	8001d60 <ExtLights_LightSwitchMode+0xec>
			{
				ExtLights_LowBeam_CurrentState = STD_HIGH;
 8001d42:	4b3e      	ldr	r3, [pc, #248]	; (8001e3c <ExtLights_LightSwitchMode+0x1c8>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_HIGH;
 8001d48:	4b3d      	ldr	r3, [pc, #244]	; (8001e40 <ExtLights_LightSwitchMode+0x1cc>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001d4e:	2100      	movs	r1, #0
 8001d50:	483c      	ldr	r0, [pc, #240]	; (8001e44 <ExtLights_LightSwitchMode+0x1d0>)
 8001d52:	f00b fe47 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8001d56:	2104      	movs	r1, #4
 8001d58:	483a      	ldr	r0, [pc, #232]	; (8001e44 <ExtLights_LightSwitchMode+0x1d0>)
 8001d5a:	f00b fe43 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				ExtLights_LowBeam_CurrentState = STD_LOW;
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
			}
			break;
 8001d5e:	e065      	b.n	8001e2c <ExtLights_LightSwitchMode+0x1b8>
			else if(ExtLights_LightSensorState != 1)
 8001d60:	4b3b      	ldr	r3, [pc, #236]	; (8001e50 <ExtLights_LightSwitchMode+0x1dc>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d061      	beq.n	8001e2c <ExtLights_LightSwitchMode+0x1b8>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 8001d68:	4b34      	ldr	r3, [pc, #208]	; (8001e3c <ExtLights_LightSwitchMode+0x1c8>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001d6e:	4b34      	ldr	r3, [pc, #208]	; (8001e40 <ExtLights_LightSwitchMode+0x1cc>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001d74:	2100      	movs	r1, #0
 8001d76:	4833      	ldr	r0, [pc, #204]	; (8001e44 <ExtLights_LightSwitchMode+0x1d0>)
 8001d78:	f00b fe41 	bl	800d9fe <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8001d7c:	2104      	movs	r1, #4
 8001d7e:	4831      	ldr	r0, [pc, #196]	; (8001e44 <ExtLights_LightSwitchMode+0x1d0>)
 8001d80:	f00b fe3d 	bl	800d9fe <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			break;
 8001d84:	e052      	b.n	8001e2c <ExtLights_LightSwitchMode+0x1b8>
		/* Switch is on position three, turn on position lights. */
		case EXTLIGHTS_LIGHTSWITCH_STATETWO:
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 8001d86:	4b2c      	ldr	r3, [pc, #176]	; (8001e38 <ExtLights_LightSwitchMode+0x1c4>)
 8001d88:	781a      	ldrb	r2, [r3, #0]
 8001d8a:	4b2a      	ldr	r3, [pc, #168]	; (8001e34 <ExtLights_LightSwitchMode+0x1c0>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d00f      	beq.n	8001db2 <ExtLights_LightSwitchMode+0x13e>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 8001d92:	4b28      	ldr	r3, [pc, #160]	; (8001e34 <ExtLights_LightSwitchMode+0x1c0>)
 8001d94:	781a      	ldrb	r2, [r3, #0]
 8001d96:	4b28      	ldr	r3, [pc, #160]	; (8001e38 <ExtLights_LightSwitchMode+0x1c4>)
 8001d98:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	f00b fcde 	bl	800d75c <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 8001da0:	2000      	movs	r0, #0
 8001da2:	f00b fcea 	bl	800d77a <Rte_Write_TimH_TimHPort_Tim2Ccr2>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 8001da6:	4b25      	ldr	r3, [pc, #148]	; (8001e3c <ExtLights_LightSwitchMode+0x1c8>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001dac:	4b24      	ldr	r3, [pc, #144]	; (8001e40 <ExtLights_LightSwitchMode+0x1cc>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001db2:	2100      	movs	r1, #0
 8001db4:	4823      	ldr	r0, [pc, #140]	; (8001e44 <ExtLights_LightSwitchMode+0x1d0>)
 8001db6:	f00b fe15 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8001dba:	2104      	movs	r1, #4
 8001dbc:	4821      	ldr	r0, [pc, #132]	; (8001e44 <ExtLights_LightSwitchMode+0x1d0>)
 8001dbe:	f00b fe11 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	f00b fcca 	bl	800d75c <Rte_Write_TimH_TimHPort_Tim2Ccr1>
			Rte_Write_TimH_TimHPort_Tim2Ccr2(1999);
 8001dc8:	f240 70cf 	movw	r0, #1999	; 0x7cf
 8001dcc:	f00b fcd5 	bl	800d77a <Rte_Write_TimH_TimHPort_Tim2Ccr2>
			ExtLights_LowBeam_CurrentState = STD_LOW;
 8001dd0:	4b1a      	ldr	r3, [pc, #104]	; (8001e3c <ExtLights_LightSwitchMode+0x1c8>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <ExtLights_LightSwitchMode+0x1cc>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]
			break;
 8001ddc:	e027      	b.n	8001e2e <ExtLights_LightSwitchMode+0x1ba>
		/* Switch is on position four, turn on night time lights. */
		case EXTLIGHTS_LIGHTSWITCH_STATETHREE:
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 8001dde:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <ExtLights_LightSwitchMode+0x1c4>)
 8001de0:	781a      	ldrb	r2, [r3, #0]
 8001de2:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <ExtLights_LightSwitchMode+0x1c0>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d00f      	beq.n	8001e0a <ExtLights_LightSwitchMode+0x196>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 8001dea:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <ExtLights_LightSwitchMode+0x1c0>)
 8001dec:	781a      	ldrb	r2, [r3, #0]
 8001dee:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <ExtLights_LightSwitchMode+0x1c4>)
 8001df0:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 8001df2:	2000      	movs	r0, #0
 8001df4:	f00b fcb2 	bl	800d75c <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f00b fcbe 	bl	800d77a <Rte_Write_TimH_TimHPort_Tim2Ccr2>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 8001dfe:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <ExtLights_LightSwitchMode+0x1c8>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001e04:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <ExtLights_LightSwitchMode+0x1cc>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	480d      	ldr	r0, [pc, #52]	; (8001e44 <ExtLights_LightSwitchMode+0x1d0>)
 8001e0e:	f00b fde9 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8001e12:	2104      	movs	r1, #4
 8001e14:	480b      	ldr	r0, [pc, #44]	; (8001e44 <ExtLights_LightSwitchMode+0x1d0>)
 8001e16:	f00b fde5 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			ExtLights_LowBeam_CurrentState = STD_HIGH;
 8001e1a:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <ExtLights_LightSwitchMode+0x1c8>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_HIGH;
 8001e20:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <ExtLights_LightSwitchMode+0x1cc>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	701a      	strb	r2, [r3, #0]
			break;
 8001e26:	e002      	b.n	8001e2e <ExtLights_LightSwitchMode+0x1ba>
		default:
			break;
 8001e28:	bf00      	nop
 8001e2a:	e000      	b.n	8001e2e <ExtLights_LightSwitchMode+0x1ba>
			break;
 8001e2c:	bf00      	nop
	}
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	200000f7 	.word	0x200000f7
 8001e38:	20000117 	.word	0x20000117
 8001e3c:	200000fc 	.word	0x200000fc
 8001e40:	200000fd 	.word	0x200000fd
 8001e44:	20000360 	.word	0x20000360
 8001e48:	2000020c 	.word	0x2000020c
 8001e4c:	a41a41a5 	.word	0xa41a41a5
 8001e50:	20000110 	.word	0x20000110

08001e54 <ExtLights_HighBeam>:
/***********************************************************************************
* Function: ExtLights_HighBeam										   			   *
* Description: High beam trigger. 		  										   *
************************************************************************************/
VOID ExtLights_HighBeam(uint8 PinState)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_HIGHBEAM_PORT, EXTLIGHTS_HIGHBEAM_PIN, PinState);
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	461a      	mov	r2, r3
 8001e62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e66:	4803      	ldr	r0, [pc, #12]	; (8001e74 <ExtLights_HighBeam+0x20>)
 8001e68:	f00b ff6c 	bl	800dd44 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40020000 	.word	0x40020000

08001e78 <ExtLights_ReverseLight>:
/***********************************************************************************
* Function: ExtLights_ReverseLight										   		   *
* Description: Reverse light trigger. 		   									   *
************************************************************************************/
VOID ExtLights_ReverseLight(uint8 PinState)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_REVERSELIGHT_PORT, EXTLIGHTS_REVERSELIGHT_PIN, PinState);
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	461a      	mov	r2, r3
 8001e86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e8a:	4803      	ldr	r0, [pc, #12]	; (8001e98 <ExtLights_ReverseLight+0x20>)
 8001e8c:	f00b ff5a 	bl	800dd44 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 8001e90:	bf00      	nop
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40020400 	.word	0x40020400

08001e9c <IntLights_RxBtcState>:
/***********************************************************************************
* Function: IntLights_RxBtcState										   		   *
* Description: Process command. 		   		   						           *
************************************************************************************/
VOID IntLights_RxBtcState()
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
	/* Process the state of the interior lights according to system state. */
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_HIGH)
 8001ea0:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <IntLights_RxBtcState+0x4c>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d102      	bne.n	8001eae <IntLights_RxBtcState+0x12>
	{
		IntLights_CurrentState = STD_HIGH;
 8001ea8:	4b10      	ldr	r3, [pc, #64]	; (8001eec <IntLights_RxBtcState+0x50>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW && Rte_P_Btc_BtcPort_Btc_IntLights == STD_LOW)
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <IntLights_RxBtcState+0x4c>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d106      	bne.n	8001ec4 <IntLights_RxBtcState+0x28>
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <IntLights_RxBtcState+0x54>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d102      	bne.n	8001ec4 <IntLights_RxBtcState+0x28>
	{
		IntLights_CurrentState = STD_LOW;
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <IntLights_RxBtcState+0x50>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW && Rte_P_Btc_BtcPort_Btc_IntLights == STD_HIGH)
 8001ec4:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <IntLights_RxBtcState+0x4c>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d106      	bne.n	8001eda <IntLights_RxBtcState+0x3e>
 8001ecc:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <IntLights_RxBtcState+0x54>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d102      	bne.n	8001eda <IntLights_RxBtcState+0x3e>
	{
		IntLights_CurrentState = STD_HIGH;
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <IntLights_RxBtcState+0x50>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel3);
 8001eda:	2108      	movs	r1, #8
 8001edc:	4805      	ldr	r0, [pc, #20]	; (8001ef4 <IntLights_RxBtcState+0x58>)
 8001ede:	f00b fd81 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	200000e0 	.word	0x200000e0
 8001eec:	20000118 	.word	0x20000118
 8001ef0:	200000ce 	.word	0x200000ce
 8001ef4:	20000360 	.word	0x20000360

08001ef8 <IntLights_MainFunction>:
/***********************************************************************************
* Function: IntLights_MainFunction										           *
* Description: Interior lights main function for the application and state process.*
************************************************************************************/
VOID IntLights_MainFunction()
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
	IntLights_RxBtcState();
 8001efc:	f7ff ffce 	bl	8001e9c <IntLights_RxBtcState>
}
 8001f00:	bf00      	nop
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <Pdc_MainFunction>:
/***********************************************************************************
* Function: Pdc_MainFunction													   *
* Description: Main function application. 		   			                       *
************************************************************************************/
VOID Pdc_MainFunction()
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
	if(Btc_ReverseLight == STD_HIGH)
 8001f08:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <Pdc_MainFunction+0x18>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d103      	bne.n	8001f18 <Pdc_MainFunction+0x14>
	{
		Pdc_Front_ProcessData();
 8001f10:	f000 f838 	bl	8001f84 <Pdc_Front_ProcessData>
		Pdc_Rear_ProcessData();
 8001f14:	f000 f804 	bl	8001f20 <Pdc_Rear_ProcessData>
	}
	else
	{
		/* do nothing */
	}
}
 8001f18:	bf00      	nop
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	200000cd 	.word	0x200000cd

08001f20 <Pdc_Rear_ProcessData>:
/***********************************************************************************
* Function: Pdc_Rear_ProcessData												   *
* Description: Process distance data.		   			                           *
************************************************************************************/
VOID Pdc_Rear_ProcessData()
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
	/* Store the distance measured. */
	Pdc_Rear_Distance = (3 * Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelFour) / 4;
 8001f24:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <Pdc_Rear_ProcessData+0x50>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	4413      	add	r3, r2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	da00      	bge.n	8001f36 <Pdc_Rear_ProcessData+0x16>
 8001f34:	3303      	adds	r3, #3
 8001f36:	109b      	asrs	r3, r3, #2
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <Pdc_Rear_ProcessData+0x54>)
 8001f3c:	701a      	strb	r2, [r3, #0]
	/* Trigger the buzzer according to the distance measured. */
	if(Pdc_Rear_Distance <= PDC_MAX_DISTANCE)
 8001f3e:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <Pdc_Rear_ProcessData+0x54>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b14      	cmp	r3, #20
 8001f44:	d801      	bhi.n	8001f4a <Pdc_Rear_ProcessData+0x2a>
	{
		Pdc_Rear_TriggerBuzzer();
 8001f46:	f000 f851 	bl	8001fec <Pdc_Rear_TriggerBuzzer>
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance >= PDC_MAX_DISTANCE)
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <Pdc_Rear_ProcessData+0x54>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b13      	cmp	r3, #19
 8001f50:	d90c      	bls.n	8001f6c <Pdc_Rear_ProcessData+0x4c>
	{
		Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(PDCR_BUZZER_PORT, PDCR_BUZZER_PIN, STD_LOW);
 8001f52:	2200      	movs	r2, #0
 8001f54:	2120      	movs	r1, #32
 8001f56:	4808      	ldr	r0, [pc, #32]	; (8001f78 <Pdc_Rear_ProcessData+0x58>)
 8001f58:	f00b fef4 	bl	800dd44 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_PdcR_Buzzer_TimerHandle);
 8001f5c:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <Pdc_Rear_ProcessData+0x5c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f00b ff0e 	bl	800dd82 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		PdcR_DistanceRange = 0;
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <Pdc_Rear_ProcessData+0x60>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20000705 	.word	0x20000705
 8001f74:	20000119 	.word	0x20000119
 8001f78:	40020400 	.word	0x40020400
 8001f7c:	20000298 	.word	0x20000298
 8001f80:	2000011c 	.word	0x2000011c

08001f84 <Pdc_Front_ProcessData>:
/***********************************************************************************
* Function: Pdc_Front_ProcessData												   *
* Description: Process distance data. 		   			                           *
************************************************************************************/
VOID Pdc_Front_ProcessData()
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
	/* Store the distance measured. */
	Pdc_Front_Distance = (3 * Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelThree) / 4;
 8001f88:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <Pdc_Front_ProcessData+0x54>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4613      	mov	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	4413      	add	r3, r2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	da00      	bge.n	8001f9a <Pdc_Front_ProcessData+0x16>
 8001f98:	3303      	adds	r3, #3
 8001f9a:	109b      	asrs	r3, r3, #2
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <Pdc_Front_ProcessData+0x58>)
 8001fa0:	701a      	strb	r2, [r3, #0]
	/* Trigger the buzzer according to the distance measured. */
	if(Pdc_Front_Distance <= PDC_MAX_DISTANCE)
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <Pdc_Front_ProcessData+0x58>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b14      	cmp	r3, #20
 8001fa8:	d801      	bhi.n	8001fae <Pdc_Front_ProcessData+0x2a>
	{
		Pdc_Front_TriggerBuzzer();
 8001faa:	f000 f893 	bl	80020d4 <Pdc_Front_TriggerBuzzer>
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance >= PDC_MAX_DISTANCE)
 8001fae:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <Pdc_Front_ProcessData+0x58>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b13      	cmp	r3, #19
 8001fb4:	d90d      	bls.n	8001fd2 <Pdc_Front_ProcessData+0x4e>
	{
		Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(PDCF_BUZZER_PORT, PDCF_BUZZER_PIN, STD_LOW);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fbc:	4808      	ldr	r0, [pc, #32]	; (8001fe0 <Pdc_Front_ProcessData+0x5c>)
 8001fbe:	f00b fec1 	bl	800dd44 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_PdcF_Buzzer_TimerHandle);
 8001fc2:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <Pdc_Front_ProcessData+0x60>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f00b fedb 	bl	800dd82 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		PdcF_DistanceRange = 0;
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <Pdc_Front_ProcessData+0x64>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200006f5 	.word	0x200006f5
 8001fdc:	2000011a 	.word	0x2000011a
 8001fe0:	40020800 	.word	0x40020800
 8001fe4:	2000029c 	.word	0x2000029c
 8001fe8:	20000120 	.word	0x20000120

08001fec <Pdc_Rear_TriggerBuzzer>:
/***********************************************************************************
* Function: Pdc_Rear_TriggerBuzzer												   *
* Description: Control buzzer.		   			                                   *
************************************************************************************/
VOID Pdc_Rear_TriggerBuzzer()
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
	if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_PdcR_Buzzer_TimerHandle) == 0)
 8001ff0:	4b35      	ldr	r3, [pc, #212]	; (80020c8 <Pdc_Rear_TriggerBuzzer+0xdc>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f008 fac8 	bl	800a58a <osTimerIsRunning>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d139      	bne.n	8002074 <Pdc_Rear_TriggerBuzzer+0x88>
	{
		switch(PdcR_DistanceRange)
 8002000:	4b32      	ldr	r3, [pc, #200]	; (80020cc <Pdc_Rear_TriggerBuzzer+0xe0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	3b01      	subs	r3, #1
 8002006:	2b03      	cmp	r3, #3
 8002008:	d833      	bhi.n	8002072 <Pdc_Rear_TriggerBuzzer+0x86>
 800200a:	a201      	add	r2, pc, #4	; (adr r2, 8002010 <Pdc_Rear_TriggerBuzzer+0x24>)
 800200c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002010:	08002021 	.word	0x08002021
 8002014:	08002037 	.word	0x08002037
 8002018:	0800204b 	.word	0x0800204b
 800201c:	0800205f 	.word	0x0800205f
		{
			case 1:
				PdcR_DistanceRange = 0;
 8002020:	4b2a      	ldr	r3, [pc, #168]	; (80020cc <Pdc_Rear_TriggerBuzzer+0xe0>)
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_ONE);
 8002026:	4b28      	ldr	r3, [pc, #160]	; (80020c8 <Pdc_Rear_TriggerBuzzer+0xdc>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800202e:	4618      	mov	r0, r3
 8002030:	f00b fe9a 	bl	800dd68 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8002034:	e01e      	b.n	8002074 <Pdc_Rear_TriggerBuzzer+0x88>
			case 2:
				PdcR_DistanceRange = 0;
 8002036:	4b25      	ldr	r3, [pc, #148]	; (80020cc <Pdc_Rear_TriggerBuzzer+0xe0>)
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_TWO);
 800203c:	4b22      	ldr	r3, [pc, #136]	; (80020c8 <Pdc_Rear_TriggerBuzzer+0xdc>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	21fa      	movs	r1, #250	; 0xfa
 8002042:	4618      	mov	r0, r3
 8002044:	f00b fe90 	bl	800dd68 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8002048:	e014      	b.n	8002074 <Pdc_Rear_TriggerBuzzer+0x88>
			case 3:
				PdcR_DistanceRange = 0;
 800204a:	4b20      	ldr	r3, [pc, #128]	; (80020cc <Pdc_Rear_TriggerBuzzer+0xe0>)
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_THREE);
 8002050:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <Pdc_Rear_TriggerBuzzer+0xdc>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	217d      	movs	r1, #125	; 0x7d
 8002056:	4618      	mov	r0, r3
 8002058:	f00b fe86 	bl	800dd68 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 800205c:	e00a      	b.n	8002074 <Pdc_Rear_TriggerBuzzer+0x88>
			case 4:
				PdcR_DistanceRange = 0;
 800205e:	4b1b      	ldr	r3, [pc, #108]	; (80020cc <Pdc_Rear_TriggerBuzzer+0xe0>)
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_FOUR);
 8002064:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <Pdc_Rear_TriggerBuzzer+0xdc>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	214b      	movs	r1, #75	; 0x4b
 800206a:	4618      	mov	r0, r3
 800206c:	f00b fe7c 	bl	800dd68 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8002070:	e000      	b.n	8002074 <Pdc_Rear_TriggerBuzzer+0x88>
			default:
				break;
 8002072:	bf00      	nop
	else
	{
		/* do nothing */
	}
	/* Trigger the buzzer for each case and type of safety distance. */
	if(Pdc_Rear_Distance <= PDC_MAX_DISTANCE && Pdc_Rear_Distance >= PDC_FIRST_SAFE_DISTANCE)
 8002074:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <Pdc_Rear_TriggerBuzzer+0xe4>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b14      	cmp	r3, #20
 800207a:	d806      	bhi.n	800208a <Pdc_Rear_TriggerBuzzer+0x9e>
 800207c:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <Pdc_Rear_TriggerBuzzer+0xe4>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b10      	cmp	r3, #16
 8002082:	d902      	bls.n	800208a <Pdc_Rear_TriggerBuzzer+0x9e>
	{
		PdcR_DistanceRange = 1;
 8002084:	4b11      	ldr	r3, [pc, #68]	; (80020cc <Pdc_Rear_TriggerBuzzer+0xe0>)
 8002086:	2201      	movs	r2, #1
 8002088:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance <= PDC_FIRST_SAFE_DISTANCE && Pdc_Rear_Distance >= PDC_SECOND_SAFE_DISTANCE)
 800208a:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <Pdc_Rear_TriggerBuzzer+0xe4>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b11      	cmp	r3, #17
 8002090:	d806      	bhi.n	80020a0 <Pdc_Rear_TriggerBuzzer+0xb4>
 8002092:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <Pdc_Rear_TriggerBuzzer+0xe4>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	2b0d      	cmp	r3, #13
 8002098:	d902      	bls.n	80020a0 <Pdc_Rear_TriggerBuzzer+0xb4>
	{
		PdcR_DistanceRange = 2;
 800209a:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <Pdc_Rear_TriggerBuzzer+0xe0>)
 800209c:	2202      	movs	r2, #2
 800209e:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance <= PDC_SECOND_SAFE_DISTANCE && Pdc_Rear_Distance >= PDC_THIRD_SAFE_DISTANCE)
 80020a0:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <Pdc_Rear_TriggerBuzzer+0xe4>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b0e      	cmp	r3, #14
 80020a6:	d806      	bhi.n	80020b6 <Pdc_Rear_TriggerBuzzer+0xca>
 80020a8:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <Pdc_Rear_TriggerBuzzer+0xe4>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b0a      	cmp	r3, #10
 80020ae:	d902      	bls.n	80020b6 <Pdc_Rear_TriggerBuzzer+0xca>
	{
		PdcR_DistanceRange = 3;
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <Pdc_Rear_TriggerBuzzer+0xe0>)
 80020b2:	2203      	movs	r2, #3
 80020b4:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance <= PDC_THIRD_SAFE_DISTANCE)
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <Pdc_Rear_TriggerBuzzer+0xe4>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b0b      	cmp	r3, #11
 80020bc:	d802      	bhi.n	80020c4 <Pdc_Rear_TriggerBuzzer+0xd8>
	{
		PdcR_DistanceRange = 4;
 80020be:	4b03      	ldr	r3, [pc, #12]	; (80020cc <Pdc_Rear_TriggerBuzzer+0xe0>)
 80020c0:	2204      	movs	r2, #4
 80020c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20000298 	.word	0x20000298
 80020cc:	2000011c 	.word	0x2000011c
 80020d0:	20000119 	.word	0x20000119

080020d4 <Pdc_Front_TriggerBuzzer>:
/***********************************************************************************
* Function: Pdc_Front_TriggerBuzzer												   *
* Description: Control buzzer		   			   								   *
************************************************************************************/
VOID Pdc_Front_TriggerBuzzer()
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
	if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_PdcF_Buzzer_TimerHandle) == 0)
 80020d8:	4b35      	ldr	r3, [pc, #212]	; (80021b0 <Pdc_Front_TriggerBuzzer+0xdc>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f008 fa54 	bl	800a58a <osTimerIsRunning>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d139      	bne.n	800215c <Pdc_Front_TriggerBuzzer+0x88>
	{
		switch(PdcF_DistanceRange)
 80020e8:	4b32      	ldr	r3, [pc, #200]	; (80021b4 <Pdc_Front_TriggerBuzzer+0xe0>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	3b01      	subs	r3, #1
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d833      	bhi.n	800215a <Pdc_Front_TriggerBuzzer+0x86>
 80020f2:	a201      	add	r2, pc, #4	; (adr r2, 80020f8 <Pdc_Front_TriggerBuzzer+0x24>)
 80020f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f8:	08002109 	.word	0x08002109
 80020fc:	0800211f 	.word	0x0800211f
 8002100:	08002133 	.word	0x08002133
 8002104:	08002147 	.word	0x08002147
		{
			case 1:
				PdcF_DistanceRange = 0;
 8002108:	4b2a      	ldr	r3, [pc, #168]	; (80021b4 <Pdc_Front_TriggerBuzzer+0xe0>)
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_ONE);
 800210e:	4b28      	ldr	r3, [pc, #160]	; (80021b0 <Pdc_Front_TriggerBuzzer+0xdc>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002116:	4618      	mov	r0, r3
 8002118:	f00b fe26 	bl	800dd68 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 800211c:	e01e      	b.n	800215c <Pdc_Front_TriggerBuzzer+0x88>
			case 2:
				PdcF_DistanceRange = 0;
 800211e:	4b25      	ldr	r3, [pc, #148]	; (80021b4 <Pdc_Front_TriggerBuzzer+0xe0>)
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_TWO);
 8002124:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <Pdc_Front_TriggerBuzzer+0xdc>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	21fa      	movs	r1, #250	; 0xfa
 800212a:	4618      	mov	r0, r3
 800212c:	f00b fe1c 	bl	800dd68 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8002130:	e014      	b.n	800215c <Pdc_Front_TriggerBuzzer+0x88>
			case 3:
				PdcF_DistanceRange = 0;
 8002132:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <Pdc_Front_TriggerBuzzer+0xe0>)
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_THREE);
 8002138:	4b1d      	ldr	r3, [pc, #116]	; (80021b0 <Pdc_Front_TriggerBuzzer+0xdc>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	217d      	movs	r1, #125	; 0x7d
 800213e:	4618      	mov	r0, r3
 8002140:	f00b fe12 	bl	800dd68 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8002144:	e00a      	b.n	800215c <Pdc_Front_TriggerBuzzer+0x88>
			case 4:
				PdcF_DistanceRange = 0;
 8002146:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <Pdc_Front_TriggerBuzzer+0xe0>)
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_FOUR);
 800214c:	4b18      	ldr	r3, [pc, #96]	; (80021b0 <Pdc_Front_TriggerBuzzer+0xdc>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	214b      	movs	r1, #75	; 0x4b
 8002152:	4618      	mov	r0, r3
 8002154:	f00b fe08 	bl	800dd68 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8002158:	e000      	b.n	800215c <Pdc_Front_TriggerBuzzer+0x88>
			default:
				break;
 800215a:	bf00      	nop
	else
	{
		/* do nothing */
	}
	/* Trigger the buzzer for each case and type of safety distance. */
	if(Pdc_Front_Distance <= PDC_MAX_DISTANCE && Pdc_Front_Distance >= PDC_FIRST_SAFE_DISTANCE)
 800215c:	4b16      	ldr	r3, [pc, #88]	; (80021b8 <Pdc_Front_TriggerBuzzer+0xe4>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b14      	cmp	r3, #20
 8002162:	d806      	bhi.n	8002172 <Pdc_Front_TriggerBuzzer+0x9e>
 8002164:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <Pdc_Front_TriggerBuzzer+0xe4>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b10      	cmp	r3, #16
 800216a:	d902      	bls.n	8002172 <Pdc_Front_TriggerBuzzer+0x9e>
	{
		PdcF_DistanceRange = 1;
 800216c:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <Pdc_Front_TriggerBuzzer+0xe0>)
 800216e:	2201      	movs	r2, #1
 8002170:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance <= PDC_FIRST_SAFE_DISTANCE && Pdc_Front_Distance >= PDC_SECOND_SAFE_DISTANCE)
 8002172:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <Pdc_Front_TriggerBuzzer+0xe4>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b11      	cmp	r3, #17
 8002178:	d806      	bhi.n	8002188 <Pdc_Front_TriggerBuzzer+0xb4>
 800217a:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <Pdc_Front_TriggerBuzzer+0xe4>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b0d      	cmp	r3, #13
 8002180:	d902      	bls.n	8002188 <Pdc_Front_TriggerBuzzer+0xb4>
	{
		PdcF_DistanceRange = 2;
 8002182:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <Pdc_Front_TriggerBuzzer+0xe0>)
 8002184:	2202      	movs	r2, #2
 8002186:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance <= PDC_SECOND_SAFE_DISTANCE && Pdc_Front_Distance >= PDC_THIRD_SAFE_DISTANCE)
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <Pdc_Front_TriggerBuzzer+0xe4>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b0e      	cmp	r3, #14
 800218e:	d806      	bhi.n	800219e <Pdc_Front_TriggerBuzzer+0xca>
 8002190:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <Pdc_Front_TriggerBuzzer+0xe4>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b0a      	cmp	r3, #10
 8002196:	d902      	bls.n	800219e <Pdc_Front_TriggerBuzzer+0xca>
	{
		PdcF_DistanceRange = 3;
 8002198:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <Pdc_Front_TriggerBuzzer+0xe0>)
 800219a:	2203      	movs	r2, #3
 800219c:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance <= PDC_THIRD_SAFE_DISTANCE)
 800219e:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <Pdc_Front_TriggerBuzzer+0xe4>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b0b      	cmp	r3, #11
 80021a4:	d802      	bhi.n	80021ac <Pdc_Front_TriggerBuzzer+0xd8>
	{
		PdcF_DistanceRange = 4;
 80021a6:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <Pdc_Front_TriggerBuzzer+0xe0>)
 80021a8:	2204      	movs	r2, #4
 80021aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 80021ac:	bf00      	nop
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	2000029c 	.word	0x2000029c
 80021b4:	20000120 	.word	0x20000120
 80021b8:	2000011a 	.word	0x2000011a

080021bc <SecAlm_LightsBuzzerControl>:
/***********************************************************************************
* Function: SecAlm_LightsBuzzerControl										       *
* Description: Controls the lights and buzzer in case of alarm trigger. 		   *
************************************************************************************/
VOID SecAlm_LightsBuzzerControl()
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
	/* Local variable for sensor status. */
	uint32 sensorStatus = STD_LOW;
 80021c2:	2300      	movs	r3, #0
 80021c4:	607b      	str	r3, [r7, #4]
	/* Get the sensor status. */
	sensorStatus = SecAlm_VibSenStatus();
 80021c6:	f000 f895 	bl	80022f4 <SecAlm_VibSenStatus>
 80021ca:	4603      	mov	r3, r0
 80021cc:	607b      	str	r3, [r7, #4]
	/* If the trigger was previously on and now it is off. */
	if(SecAlm_TriggerPreviousState != SecAlm_Trigger && !SecAlm_Trigger)
 80021ce:	4b40      	ldr	r3, [pc, #256]	; (80022d0 <SecAlm_LightsBuzzerControl+0x114>)
 80021d0:	781a      	ldrb	r2, [r3, #0]
 80021d2:	4b40      	ldr	r3, [pc, #256]	; (80022d4 <SecAlm_LightsBuzzerControl+0x118>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d006      	beq.n	80021e8 <SecAlm_LightsBuzzerControl+0x2c>
 80021da:	4b3e      	ldr	r3, [pc, #248]	; (80022d4 <SecAlm_LightsBuzzerControl+0x118>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d102      	bne.n	80021e8 <SecAlm_LightsBuzzerControl+0x2c>
	{
		/* Reset the counter. */
		SecAlm_TriggerIRQCounterForTimer4 = STD_LOW;
 80021e2:	4b3d      	ldr	r3, [pc, #244]	; (80022d8 <SecAlm_LightsBuzzerControl+0x11c>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If the counter exceeded the maximum value, reset the variables. */
	if(SecAlm_TriggerIRQCounterForTimer4 >= 20)
 80021e8:	4b3b      	ldr	r3, [pc, #236]	; (80022d8 <SecAlm_LightsBuzzerControl+0x11c>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b13      	cmp	r3, #19
 80021ee:	d922      	bls.n	8002236 <SecAlm_LightsBuzzerControl+0x7a>
	{
		SecAlm_TriggerPreviousState 						= SecAlm_Trigger;
 80021f0:	4b38      	ldr	r3, [pc, #224]	; (80022d4 <SecAlm_LightsBuzzerControl+0x118>)
 80021f2:	781a      	ldrb	r2, [r3, #0]
 80021f4:	4b36      	ldr	r3, [pc, #216]	; (80022d0 <SecAlm_LightsBuzzerControl+0x114>)
 80021f6:	701a      	strb	r2, [r3, #0]
		Rte_P_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter	= STD_HIGH;
 80021f8:	4b38      	ldr	r3, [pc, #224]	; (80022dc <SecAlm_LightsBuzzerControl+0x120>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	701a      	strb	r2, [r3, #0]
		Rte_P_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter 	= STD_LOW;
 80021fe:	4b38      	ldr	r3, [pc, #224]	; (80022e0 <SecAlm_LightsBuzzerControl+0x124>)
 8002200:	2200      	movs	r2, #0
 8002202:	701a      	strb	r2, [r3, #0]
		SecAlm_Trigger 										= STD_LOW;
 8002204:	4b33      	ldr	r3, [pc, #204]	; (80022d4 <SecAlm_LightsBuzzerControl+0x118>)
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]
		SecAlm_PinStateChange 								= STD_LOW;
 800220a:	4b36      	ldr	r3, [pc, #216]	; (80022e4 <SecAlm_LightsBuzzerControl+0x128>)
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
		SecAlm_TriggerIRQCounterForTimer4 					= STD_LOW;
 8002210:	4b31      	ldr	r3, [pc, #196]	; (80022d8 <SecAlm_LightsBuzzerControl+0x11c>)
 8002212:	2200      	movs	r2, #0
 8002214:	701a      	strb	r2, [r3, #0]
		SecAlm_SensorStatusCounter 							= STD_LOW;
 8002216:	4b34      	ldr	r3, [pc, #208]	; (80022e8 <SecAlm_LightsBuzzerControl+0x12c>)
 8002218:	2200      	movs	r2, #0
 800221a:	801a      	strh	r2, [r3, #0]
		SecAlm_SensorStatus 								= STD_LOW;
 800221c:	4b33      	ldr	r3, [pc, #204]	; (80022ec <SecAlm_LightsBuzzerControl+0x130>)
 800221e:	2200      	movs	r2, #0
 8002220:	801a      	strh	r2, [r3, #0]
		SecAlm_SensorStatusCounter 							= STD_LOW;
 8002222:	4b31      	ldr	r3, [pc, #196]	; (80022e8 <SecAlm_LightsBuzzerControl+0x12c>)
 8002224:	2200      	movs	r2, #0
 8002226:	801a      	strh	r2, [r3, #0]
		/* Stop the os timer assigned to security alarm trigger. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmAlarm_TimerHandle);
 8002228:	4b31      	ldr	r3, [pc, #196]	; (80022f0 <SecAlm_LightsBuzzerControl+0x134>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f00b fda8 	bl	800dd82 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		/* Turn off the lights to make sure their state is off before any other action. */
		SecAlm_TurnOnExtLights();
 8002232:	f000 f893 	bl	800235c <SecAlm_TurnOnExtLights>
		/* do nothing */
	}
	/* The counter resets every 10 seconds, if a reset of the timer
	 * occurs, then reset the variables related to the security
	 * alarm trigger. */
	if(SecAlm_SensorStatusCounter == STD_LOW)
 8002236:	4b2c      	ldr	r3, [pc, #176]	; (80022e8 <SecAlm_LightsBuzzerControl+0x12c>)
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d107      	bne.n	800224e <SecAlm_LightsBuzzerControl+0x92>
	{
		sensorStatus 	= STD_LOW;
 800223e:	2300      	movs	r3, #0
 8002240:	607b      	str	r3, [r7, #4]
		SecAlm_Trigger 	= STD_LOW;
 8002242:	4b24      	ldr	r3, [pc, #144]	; (80022d4 <SecAlm_LightsBuzzerControl+0x118>)
 8002244:	2200      	movs	r2, #0
 8002246:	701a      	strb	r2, [r3, #0]
		SecAlm_PinStateChange = STD_LOW;
 8002248:	4b26      	ldr	r3, [pc, #152]	; (80022e4 <SecAlm_LightsBuzzerControl+0x128>)
 800224a:	2200      	movs	r2, #0
 800224c:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If the sensor status is high, trigger the alarm. */
	if(sensorStatus == STD_HIGH)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d102      	bne.n	800225a <SecAlm_LightsBuzzerControl+0x9e>
	{
		SecAlm_Trigger = STD_HIGH;
 8002254:	4b1f      	ldr	r3, [pc, #124]	; (80022d4 <SecAlm_LightsBuzzerControl+0x118>)
 8002256:	2201      	movs	r2, #1
 8002258:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If the trigger is set to high, perform alarm triggering. */
	if(SecAlm_Trigger == STD_HIGH)
 800225a:	4b1e      	ldr	r3, [pc, #120]	; (80022d4 <SecAlm_LightsBuzzerControl+0x118>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d12b      	bne.n	80022ba <SecAlm_LightsBuzzerControl+0xfe>
	{
		SecAlm_ToggleAlarmLed(STD_LOW);
 8002262:	2000      	movs	r0, #0
 8002264:	f000 f902 	bl	800246c <SecAlm_ToggleAlarmLed>
		/* One alarm cycle is performed consisting of 10 seconds. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmAlarm_TimerHandle) == 0)
 8002268:	4b21      	ldr	r3, [pc, #132]	; (80022f0 <SecAlm_LightsBuzzerControl+0x134>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f008 f98c 	bl	800a58a <osTimerIsRunning>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d106      	bne.n	8002286 <SecAlm_LightsBuzzerControl+0xca>
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlmAlarm_TimerHandle, 500);
 8002278:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <SecAlm_LightsBuzzerControl+0x134>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002280:	4618      	mov	r0, r3
 8002282:	f00b fd71 	bl	800dd68 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Cycle between on and off states of buzzer and lights. */
		if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 1)
 8002286:	4b14      	ldr	r3, [pc, #80]	; (80022d8 <SecAlm_LightsBuzzerControl+0x11c>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d005      	beq.n	80022a0 <SecAlm_LightsBuzzerControl+0xe4>
		{
			SecAlm_PinStateChange = STD_HIGH;
 8002294:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <SecAlm_LightsBuzzerControl+0x128>)
 8002296:	2201      	movs	r2, #1
 8002298:	701a      	strb	r2, [r3, #0]
			SecAlm_TurnOnExtLights();
 800229a:	f000 f85f 	bl	800235c <SecAlm_TurnOnExtLights>
	}
	else
	{
		/* do nothing */
	}
}
 800229e:	e013      	b.n	80022c8 <SecAlm_LightsBuzzerControl+0x10c>
		else if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 0)
 80022a0:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <SecAlm_LightsBuzzerControl+0x11c>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10c      	bne.n	80022c8 <SecAlm_LightsBuzzerControl+0x10c>
			SecAlm_PinStateChange = STD_LOW;
 80022ae:	4b0d      	ldr	r3, [pc, #52]	; (80022e4 <SecAlm_LightsBuzzerControl+0x128>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]
			SecAlm_TurnOnExtLights();
 80022b4:	f000 f852 	bl	800235c <SecAlm_TurnOnExtLights>
}
 80022b8:	e006      	b.n	80022c8 <SecAlm_LightsBuzzerControl+0x10c>
	else if(SecAlm_Trigger == STD_LOW)
 80022ba:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <SecAlm_LightsBuzzerControl+0x118>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d102      	bne.n	80022c8 <SecAlm_LightsBuzzerControl+0x10c>
		SecAlm_ToggleAlarmBuzzer(STD_LOW);
 80022c2:	2000      	movs	r0, #0
 80022c4:	f000 f8c0 	bl	8002448 <SecAlm_ToggleAlarmBuzzer>
}
 80022c8:	bf00      	nop
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	2000012d 	.word	0x2000012d
 80022d4:	20000124 	.word	0x20000124
 80022d8:	20000126 	.word	0x20000126
 80022dc:	200000e3 	.word	0x200000e3
 80022e0:	200000e5 	.word	0x200000e5
 80022e4:	20000125 	.word	0x20000125
 80022e8:	20000128 	.word	0x20000128
 80022ec:	2000012a 	.word	0x2000012a
 80022f0:	20000294 	.word	0x20000294

080022f4 <SecAlm_VibSenStatus>:
/***********************************************************************************
* Function: SecAlm_VibSenStatus										               *
* Description: Updates the vibration sensor status based on measurements.		   *
************************************************************************************/
StdReturnType SecAlm_VibSenStatus()
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
	/* Local variable for sensor status. */
	uint16 sensorStatus = STD_LOW;
 80022fa:	2300      	movs	r3, #0
 80022fc:	80fb      	strh	r3, [r7, #6]
	/* Read the sensor value. */
	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(SECALM_VS_REQUEST);
 80022fe:	2001      	movs	r0, #1
 8002300:	f000 f8c6 	bl	8002490 <SenCtrl_ProcessSensorValue>
	/* If the sensor was triggered. */
	if(SecAlm_SensorState == STD_HIGH)
 8002304:	4b12      	ldr	r3, [pc, #72]	; (8002350 <SecAlm_VibSenStatus+0x5c>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d10c      	bne.n	8002326 <SecAlm_VibSenStatus+0x32>
	{
		/* Count for how long it has been triggered. */
		SecAlm_SensorStatusCounter = SecAlm_SensorStatusCounter + 1;
 800230c:	4b11      	ldr	r3, [pc, #68]	; (8002354 <SecAlm_VibSenStatus+0x60>)
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	3301      	adds	r3, #1
 8002312:	b29a      	uxth	r2, r3
 8002314:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <SecAlm_VibSenStatus+0x60>)
 8002316:	801a      	strh	r2, [r3, #0]
		/* Start the reset timer for the counter variable. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlm_AlarmResetHandle, 10000);
 8002318:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <SecAlm_VibSenStatus+0x64>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f242 7110 	movw	r1, #10000	; 0x2710
 8002320:	4618      	mov	r0, r3
 8002322:	f00b fd21 	bl	800dd68 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
	else
	{
		/* do nothing */
	}
	/* If the sensor was triggered enough times. */
	if(SecAlm_SensorStatusCounter >= 300)
 8002326:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <SecAlm_VibSenStatus+0x60>)
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800232e:	d302      	bcc.n	8002336 <SecAlm_VibSenStatus+0x42>
	{
		/* Set the sensor status to high. */
		sensorStatus = STD_HIGH;
 8002330:	2301      	movs	r3, #1
 8002332:	80fb      	strh	r3, [r7, #6]
 8002334:	e006      	b.n	8002344 <SecAlm_VibSenStatus+0x50>
	}
	else if(SecAlm_SensorStatusCounter < 300)
 8002336:	4b07      	ldr	r3, [pc, #28]	; (8002354 <SecAlm_VibSenStatus+0x60>)
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800233e:	d201      	bcs.n	8002344 <SecAlm_VibSenStatus+0x50>
	{
		/* Set the sensor status to low. */
		sensorStatus = STD_LOW;
 8002340:	2300      	movs	r3, #0
 8002342:	80fb      	strh	r3, [r7, #6]
	else
	{
		/* do nothing */
	}
	/* Return sensor status. */
	return sensorStatus;
 8002344:	88fb      	ldrh	r3, [r7, #6]
 8002346:	b2db      	uxtb	r3, r3
}
 8002348:	4618      	mov	r0, r3
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	2000012c 	.word	0x2000012c
 8002354:	20000128 	.word	0x20000128
 8002358:	2000027c 	.word	0x2000027c

0800235c <SecAlm_TurnOnExtLights>:
/***********************************************************************************
* Function: SecAlm_TurnOnExtLights										           *
* Description: Trigger the exterior lights and buzzer.							   *
************************************************************************************/
VOID SecAlm_TurnOnExtLights()
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
	/* Turn on the lights and the buzzer. */
	if(SecAlm_PinStateChange == STD_HIGH)
 8002360:	4b1f      	ldr	r3, [pc, #124]	; (80023e0 <SecAlm_TurnOnExtLights+0x84>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d118      	bne.n	800239a <SecAlm_TurnOnExtLights+0x3e>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8002368:	2100      	movs	r1, #0
 800236a:	481e      	ldr	r0, [pc, #120]	; (80023e4 <SecAlm_TurnOnExtLights+0x88>)
 800236c:	f00b fb3a 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8002370:	2104      	movs	r1, #4
 8002372:	481c      	ldr	r0, [pc, #112]	; (80023e4 <SecAlm_TurnOnExtLights+0x88>)
 8002374:	f00b fb36 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 8002378:	2108      	movs	r1, #8
 800237a:	481b      	ldr	r0, [pc, #108]	; (80023e8 <SecAlm_TurnOnExtLights+0x8c>)
 800237c:	f00b fb32 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 8002380:	210c      	movs	r1, #12
 8002382:	4819      	ldr	r0, [pc, #100]	; (80023e8 <SecAlm_TurnOnExtLights+0x8c>)
 8002384:	f00b fb2e 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8002388:	2108      	movs	r1, #8
 800238a:	4818      	ldr	r0, [pc, #96]	; (80023ec <SecAlm_TurnOnExtLights+0x90>)
 800238c:	f00b fb2a 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8002390:	210c      	movs	r1, #12
 8002392:	4816      	ldr	r0, [pc, #88]	; (80023ec <SecAlm_TurnOnExtLights+0x90>)
 8002394:	f00b fb26 	bl	800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8002398:	e01b      	b.n	80023d2 <SecAlm_TurnOnExtLights+0x76>
	}
	else if(SecAlm_PinStateChange == STD_LOW)
 800239a:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <SecAlm_TurnOnExtLights+0x84>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d117      	bne.n	80023d2 <SecAlm_TurnOnExtLights+0x76>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 80023a2:	2100      	movs	r1, #0
 80023a4:	480f      	ldr	r0, [pc, #60]	; (80023e4 <SecAlm_TurnOnExtLights+0x88>)
 80023a6:	f00b fb2a 	bl	800d9fe <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 80023aa:	2104      	movs	r1, #4
 80023ac:	480d      	ldr	r0, [pc, #52]	; (80023e4 <SecAlm_TurnOnExtLights+0x88>)
 80023ae:	f00b fb26 	bl	800d9fe <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 80023b2:	2108      	movs	r1, #8
 80023b4:	480c      	ldr	r0, [pc, #48]	; (80023e8 <SecAlm_TurnOnExtLights+0x8c>)
 80023b6:	f00b fb22 	bl	800d9fe <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 80023ba:	210c      	movs	r1, #12
 80023bc:	480a      	ldr	r0, [pc, #40]	; (80023e8 <SecAlm_TurnOnExtLights+0x8c>)
 80023be:	f00b fb1e 	bl	800d9fe <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80023c2:	2108      	movs	r1, #8
 80023c4:	4809      	ldr	r0, [pc, #36]	; (80023ec <SecAlm_TurnOnExtLights+0x90>)
 80023c6:	f00b fb1a 	bl	800d9fe <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 80023ca:	210c      	movs	r1, #12
 80023cc:	4807      	ldr	r0, [pc, #28]	; (80023ec <SecAlm_TurnOnExtLights+0x90>)
 80023ce:	f00b fb16 	bl	800d9fe <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	}
	SecAlm_ToggleAlarmBuzzer(SecAlm_PinStateChange);
 80023d2:	4b03      	ldr	r3, [pc, #12]	; (80023e0 <SecAlm_TurnOnExtLights+0x84>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 f836 	bl	8002448 <SecAlm_ToggleAlarmBuzzer>
}
 80023dc:	bf00      	nop
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20000125 	.word	0x20000125
 80023e4:	20000360 	.word	0x20000360
 80023e8:	20000414 	.word	0x20000414
 80023ec:	200004c8 	.word	0x200004c8

080023f0 <SecAlm_MainFunction>:
/***********************************************************************************
* Function: SecAlm_MainFunction										           	   *
* Description: Process application states.										   *
************************************************************************************/
VOID SecAlm_MainFunction()
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
	SecAlm_LightsBuzzerControl();
 80023f4:	f7ff fee2 	bl	80021bc <SecAlm_LightsBuzzerControl>
}
 80023f8:	bf00      	nop
 80023fa:	bd80      	pop	{r7, pc}

080023fc <SecAlm_Init>:
/***********************************************************************************
* Function: SecAlm_Init										                       *
* Description: Initialize the application.										   *
************************************************************************************/
StdReturnType SecAlm_Init()
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
	/* Set the variables to 0. */
	SecAlm_Trigger 						= STD_LOW;
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <SecAlm_Init+0x34>)
 8002402:	2200      	movs	r2, #0
 8002404:	701a      	strb	r2, [r3, #0]
	SecAlm_PinStateChange 				= STD_LOW;
 8002406:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <SecAlm_Init+0x38>)
 8002408:	2200      	movs	r2, #0
 800240a:	701a      	strb	r2, [r3, #0]
	SecAlm_TriggerIRQCounterForTimer4 	= STD_LOW;
 800240c:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <SecAlm_Init+0x3c>)
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
	SecAlm_SensorStatusCounter 			= STD_LOW;
 8002412:	4b0a      	ldr	r3, [pc, #40]	; (800243c <SecAlm_Init+0x40>)
 8002414:	2200      	movs	r2, #0
 8002416:	801a      	strh	r2, [r3, #0]
	SecAlm_SensorStatus 				= STD_LOW;
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <SecAlm_Init+0x44>)
 800241a:	2200      	movs	r2, #0
 800241c:	801a      	strh	r2, [r3, #0]
	SecAlm_TriggerPreviousState 		= STD_LOW;
 800241e:	4b09      	ldr	r3, [pc, #36]	; (8002444 <SecAlm_Init+0x48>)
 8002420:	2200      	movs	r2, #0
 8002422:	701a      	strb	r2, [r3, #0]
	return E_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	20000124 	.word	0x20000124
 8002434:	20000125 	.word	0x20000125
 8002438:	20000126 	.word	0x20000126
 800243c:	20000128 	.word	0x20000128
 8002440:	2000012a 	.word	0x2000012a
 8002444:	2000012d 	.word	0x2000012d

08002448 <SecAlm_ToggleAlarmBuzzer>:
/***********************************************************************************
* Function: SecAlm_ToggleAlarmBuzzer										       *
* Description: Alarm buzzer trigger.                                               *
************************************************************************************/
VOID SecAlm_ToggleAlarmBuzzer(uint8 PinState)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(SECALM_BUZZER_PORT, SECALM_BUZZER_PIN, PinState);
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	461a      	mov	r2, r3
 8002456:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800245a:	4803      	ldr	r0, [pc, #12]	; (8002468 <SecAlm_ToggleAlarmBuzzer+0x20>)
 800245c:	f00b fc72 	bl	800dd44 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40020400 	.word	0x40020400

0800246c <SecAlm_ToggleAlarmLed>:
/***********************************************************************************
* Function: SecAlm_ToggleAlarmLed										           *
* Description: Alarm LED trigger.												   *
************************************************************************************/
VOID SecAlm_ToggleAlarmLed(uint8 PinState)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(SECALM_LED_PORT, SECALM_LED_PIN, PinState);
 8002476:	79fb      	ldrb	r3, [r7, #7]
 8002478:	461a      	mov	r2, r3
 800247a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800247e:	4803      	ldr	r0, [pc, #12]	; (800248c <SecAlm_ToggleAlarmLed+0x20>)
 8002480:	f00b fc60 	bl	800dd44 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 8002484:	bf00      	nop
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40020400 	.word	0x40020400

08002490 <SenCtrl_ProcessSensorValue>:
/***********************************************************************************
* Function: SenCtrl_ProcessSensorValue									   	       *
* Description: Process the request for the sensor value. 	                       *
************************************************************************************/
VOID SenCtrl_ProcessSensorValue(uint8 request)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
	/* Store request into local variable. */
	uint8 localRequest = request;
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	77fb      	strb	r3, [r7, #31]
	/* Process sensor request. */
	switch(localRequest)
 800249e:	7ffb      	ldrb	r3, [r7, #31]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d002      	beq.n	80024aa <SenCtrl_ProcessSensorValue+0x1a>
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d01a      	beq.n	80024de <SenCtrl_ProcessSensorValue+0x4e>
			{
				/* do nothing */
			}
			break;
		default:
			break;
 80024a8:	e038      	b.n	800251c <SenCtrl_ProcessSensorValue+0x8c>
			if(SenCtrl_MeasuredValues[SENCTRL_EXTLIGHTS_LS_POSITION] >= 4000)
 80024aa:	4b1e      	ldr	r3, [pc, #120]	; (8002524 <SenCtrl_ProcessSensorValue+0x94>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80024b2:	d307      	bcc.n	80024c4 <SenCtrl_ProcessSensorValue+0x34>
				uint32 localls = 1;
 80024b4:	2301      	movs	r3, #1
 80024b6:	61bb      	str	r3, [r7, #24]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState(&localls);
 80024b8:	f107 0318 	add.w	r3, r7, #24
 80024bc:	4618      	mov	r0, r3
 80024be:	f00b f991 	bl	800d7e4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState>
			break;
 80024c2:	e028      	b.n	8002516 <SenCtrl_ProcessSensorValue+0x86>
			else if(SenCtrl_MeasuredValues[SENCTRL_EXTLIGHTS_LS_POSITION] < 4000)
 80024c4:	4b17      	ldr	r3, [pc, #92]	; (8002524 <SenCtrl_ProcessSensorValue+0x94>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80024cc:	d223      	bcs.n	8002516 <SenCtrl_ProcessSensorValue+0x86>
				uint32 localls = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState(&localls);
 80024d2:	f107 0314 	add.w	r3, r7, #20
 80024d6:	4618      	mov	r0, r3
 80024d8:	f00b f984 	bl	800d7e4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState>
			break;
 80024dc:	e01b      	b.n	8002516 <SenCtrl_ProcessSensorValue+0x86>
			if(SenCtrl_MeasuredValues[SENCTRL_SECALM_VS_REQUEST] == 4095)
 80024de:	4b11      	ldr	r3, [pc, #68]	; (8002524 <SenCtrl_ProcessSensorValue+0x94>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d107      	bne.n	80024fa <SenCtrl_ProcessSensorValue+0x6a>
				uint32 localvs = STD_HIGH;
 80024ea:	2301      	movs	r3, #1
 80024ec:	613b      	str	r3, [r7, #16]
				Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState(&localvs);
 80024ee:	f107 0310 	add.w	r3, r7, #16
 80024f2:	4618      	mov	r0, r3
 80024f4:	f00b f964 	bl	800d7c0 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState>
			break;
 80024f8:	e00f      	b.n	800251a <SenCtrl_ProcessSensorValue+0x8a>
			else if(SenCtrl_MeasuredValues[SENCTRL_SECALM_VS_REQUEST] < 4095)
 80024fa:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <SenCtrl_ProcessSensorValue+0x94>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002502:	4293      	cmp	r3, r2
 8002504:	d809      	bhi.n	800251a <SenCtrl_ProcessSensorValue+0x8a>
				uint32 localvs = STD_LOW;
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
				Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState(&localvs);
 800250a:	f107 030c 	add.w	r3, r7, #12
 800250e:	4618      	mov	r0, r3
 8002510:	f00b f956 	bl	800d7c0 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState>
			break;
 8002514:	e001      	b.n	800251a <SenCtrl_ProcessSensorValue+0x8a>
			break;
 8002516:	bf00      	nop
 8002518:	e000      	b.n	800251c <SenCtrl_ProcessSensorValue+0x8c>
			break;
 800251a:	bf00      	nop
	}
}
 800251c:	bf00      	nop
 800251e:	3720      	adds	r7, #32
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	20000130 	.word	0x20000130

08002528 <Uart_Init>:
/***********************************************************************************
* Function: Uart_Init										       				   *
* Description: Initialize the protocol.									 		   *
************************************************************************************/
StdReturnType Uart_Init()
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
	/* Set the instance. */
	huart1.Instance = USART1;
 800252c:	4b12      	ldr	r3, [pc, #72]	; (8002578 <Uart_Init+0x50>)
 800252e:	4a13      	ldr	r2, [pc, #76]	; (800257c <Uart_Init+0x54>)
 8002530:	601a      	str	r2, [r3, #0]
	/* Set the baud rate for the protocol. */
	huart1.Init.BaudRate = 9600;
 8002532:	4b11      	ldr	r3, [pc, #68]	; (8002578 <Uart_Init+0x50>)
 8002534:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002538:	605a      	str	r2, [r3, #4]
	/* Set the number of data bits transmitted or received. */
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800253a:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <Uart_Init+0x50>)
 800253c:	2200      	movs	r2, #0
 800253e:	609a      	str	r2, [r3, #8]
	/* Set the number of stop bits transmitted. */
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002540:	4b0d      	ldr	r3, [pc, #52]	; (8002578 <Uart_Init+0x50>)
 8002542:	2200      	movs	r2, #0
 8002544:	60da      	str	r2, [r3, #12]
	/* Set the parity mode. */
	huart1.Init.Parity = UART_PARITY_NONE;
 8002546:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <Uart_Init+0x50>)
 8002548:	2200      	movs	r2, #0
 800254a:	611a      	str	r2, [r3, #16]
	/* Set the protocol mode. */
	huart1.Init.Mode = UART_MODE_TX_RX;
 800254c:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <Uart_Init+0x50>)
 800254e:	220c      	movs	r2, #12
 8002550:	615a      	str	r2, [r3, #20]
	/* Set the hardware flow control. */
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002552:	4b09      	ldr	r3, [pc, #36]	; (8002578 <Uart_Init+0x50>)
 8002554:	2200      	movs	r2, #0
 8002556:	619a      	str	r2, [r3, #24]
	/* Set the over sampling value. */
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002558:	4b07      	ldr	r3, [pc, #28]	; (8002578 <Uart_Init+0x50>)
 800255a:	2200      	movs	r2, #0
 800255c:	61da      	str	r2, [r3, #28]
	/* Call for error callback if the initialization is not performed accordingly. */
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800255e:	4806      	ldr	r0, [pc, #24]	; (8002578 <Uart_Init+0x50>)
 8002560:	f005 fec8 	bl	80082f4 <HAL_UART_Init>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d002      	beq.n	8002570 <Uart_Init+0x48>
	{
		HAL_UART_ErrorCallback(&huart1);
 800256a:	4803      	ldr	r0, [pc, #12]	; (8002578 <Uart_Init+0x50>)
 800256c:	f000 f8ae 	bl	80026cc <HAL_UART_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	return E_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000630 	.word	0x20000630
 800257c:	40011000 	.word	0x40011000

08002580 <Uart_DeInit>:
/***********************************************************************************
* Function: Uart_DeInit										   					   *
* Description: De-initialize the protocol.									       *
************************************************************************************/
StdReturnType Uart_DeInit()
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
	/* Call for protocol de-init function. */
	HAL_UART_DeInit(&huart1);
 8002584:	4802      	ldr	r0, [pc, #8]	; (8002590 <Uart_DeInit+0x10>)
 8002586:	f005 ff0f 	bl	80083a8 <HAL_UART_DeInit>
	return E_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	bd80      	pop	{r7, pc}
 8002590:	20000630 	.word	0x20000630

08002594 <Uart_MainFunction>:
/***********************************************************************************
* Function: Uart_MainFunction										   			   *
* Description: Protocol main function.									           *
************************************************************************************/
VOID Uart_MainFunction()
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
	/* Get the error status in local variable. */
	uint32 localState = HAL_UART_GetState(&huart1);
 800259a:	4849      	ldr	r0, [pc, #292]	; (80026c0 <Uart_MainFunction+0x12c>)
 800259c:	f006 fa8e 	bl	8008abc <HAL_UART_GetState>
 80025a0:	4603      	mov	r3, r0
 80025a2:	607b      	str	r3, [r7, #4]
	switch(localState)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2be0      	cmp	r3, #224	; 0xe0
 80025a8:	d07e      	beq.n	80026a8 <Uart_MainFunction+0x114>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2be0      	cmp	r3, #224	; 0xe0
 80025ae:	f200 8082 	bhi.w	80026b6 <Uart_MainFunction+0x122>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b24      	cmp	r3, #36	; 0x24
 80025b6:	d84f      	bhi.n	8002658 <Uart_MainFunction+0xc4>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b24      	cmp	r3, #36	; 0x24
 80025bc:	d87b      	bhi.n	80026b6 <Uart_MainFunction+0x122>
 80025be:	a201      	add	r2, pc, #4	; (adr r2, 80025c4 <Uart_MainFunction+0x30>)
 80025c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c4:	08002661 	.word	0x08002661
 80025c8:	080026b7 	.word	0x080026b7
 80025cc:	080026b7 	.word	0x080026b7
 80025d0:	080026b7 	.word	0x080026b7
 80025d4:	080026b7 	.word	0x080026b7
 80025d8:	080026b7 	.word	0x080026b7
 80025dc:	080026b7 	.word	0x080026b7
 80025e0:	080026b7 	.word	0x080026b7
 80025e4:	080026b7 	.word	0x080026b7
 80025e8:	080026b7 	.word	0x080026b7
 80025ec:	080026b7 	.word	0x080026b7
 80025f0:	080026b7 	.word	0x080026b7
 80025f4:	080026b7 	.word	0x080026b7
 80025f8:	080026b7 	.word	0x080026b7
 80025fc:	080026b7 	.word	0x080026b7
 8002600:	080026b7 	.word	0x080026b7
 8002604:	080026b7 	.word	0x080026b7
 8002608:	080026b7 	.word	0x080026b7
 800260c:	080026b7 	.word	0x080026b7
 8002610:	080026b7 	.word	0x080026b7
 8002614:	080026b7 	.word	0x080026b7
 8002618:	080026b7 	.word	0x080026b7
 800261c:	080026b7 	.word	0x080026b7
 8002620:	080026b7 	.word	0x080026b7
 8002624:	080026b7 	.word	0x080026b7
 8002628:	080026b7 	.word	0x080026b7
 800262c:	080026b7 	.word	0x080026b7
 8002630:	080026b7 	.word	0x080026b7
 8002634:	080026b7 	.word	0x080026b7
 8002638:	080026b7 	.word	0x080026b7
 800263c:	080026b7 	.word	0x080026b7
 8002640:	080026b7 	.word	0x080026b7
 8002644:	08002669 	.word	0x08002669
 8002648:	08002683 	.word	0x08002683
 800264c:	0800268b 	.word	0x0800268b
 8002650:	08002693 	.word	0x08002693
 8002654:	0800267b 	.word	0x0800267b
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2ba0      	cmp	r3, #160	; 0xa0
 800265c:	d01d      	beq.n	800269a <Uart_MainFunction+0x106>
		case HAL_UART_STATE_ERROR:
			Uart_BswState = localState;
			HAL_UART_ErrorCallback(&huart1);
			break;
		default:
			break;
 800265e:	e02a      	b.n	80026b6 <Uart_MainFunction+0x122>
			Uart_BswState = localState;
 8002660:	4a18      	ldr	r2, [pc, #96]	; (80026c4 <Uart_MainFunction+0x130>)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6013      	str	r3, [r2, #0]
			break;
 8002666:	e027      	b.n	80026b8 <Uart_MainFunction+0x124>
			HAL_UART_Receive_IT(&huart1, &Rte_P_Btc_BtcPort_Btc_RxData, 1);
 8002668:	2201      	movs	r2, #1
 800266a:	4917      	ldr	r1, [pc, #92]	; (80026c8 <Uart_MainFunction+0x134>)
 800266c:	4814      	ldr	r0, [pc, #80]	; (80026c0 <Uart_MainFunction+0x12c>)
 800266e:	f005 ff1a 	bl	80084a6 <HAL_UART_Receive_IT>
			Uart_BswState = localState;
 8002672:	4a14      	ldr	r2, [pc, #80]	; (80026c4 <Uart_MainFunction+0x130>)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6013      	str	r3, [r2, #0]
			break;
 8002678:	e01e      	b.n	80026b8 <Uart_MainFunction+0x124>
			Uart_BswState = localState;
 800267a:	4a12      	ldr	r2, [pc, #72]	; (80026c4 <Uart_MainFunction+0x130>)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6013      	str	r3, [r2, #0]
			break;
 8002680:	e01a      	b.n	80026b8 <Uart_MainFunction+0x124>
			Uart_BswState = localState;
 8002682:	4a10      	ldr	r2, [pc, #64]	; (80026c4 <Uart_MainFunction+0x130>)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6013      	str	r3, [r2, #0]
			break;
 8002688:	e016      	b.n	80026b8 <Uart_MainFunction+0x124>
			Uart_BswState = localState;
 800268a:	4a0e      	ldr	r2, [pc, #56]	; (80026c4 <Uart_MainFunction+0x130>)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6013      	str	r3, [r2, #0]
			break;
 8002690:	e012      	b.n	80026b8 <Uart_MainFunction+0x124>
			Uart_BswState = localState;
 8002692:	4a0c      	ldr	r2, [pc, #48]	; (80026c4 <Uart_MainFunction+0x130>)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6013      	str	r3, [r2, #0]
			break;
 8002698:	e00e      	b.n	80026b8 <Uart_MainFunction+0x124>
			Uart_BswState = localState;
 800269a:	4a0a      	ldr	r2, [pc, #40]	; (80026c4 <Uart_MainFunction+0x130>)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6013      	str	r3, [r2, #0]
			HAL_UART_ErrorCallback(&huart1);
 80026a0:	4807      	ldr	r0, [pc, #28]	; (80026c0 <Uart_MainFunction+0x12c>)
 80026a2:	f000 f813 	bl	80026cc <HAL_UART_ErrorCallback>
			break;
 80026a6:	e007      	b.n	80026b8 <Uart_MainFunction+0x124>
			Uart_BswState = localState;
 80026a8:	4a06      	ldr	r2, [pc, #24]	; (80026c4 <Uart_MainFunction+0x130>)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6013      	str	r3, [r2, #0]
			HAL_UART_ErrorCallback(&huart1);
 80026ae:	4804      	ldr	r0, [pc, #16]	; (80026c0 <Uart_MainFunction+0x12c>)
 80026b0:	f000 f80c 	bl	80026cc <HAL_UART_ErrorCallback>
			break;
 80026b4:	e000      	b.n	80026b8 <Uart_MainFunction+0x124>
			break;
 80026b6:	bf00      	nop
	}
}
 80026b8:	bf00      	nop
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	20000630 	.word	0x20000630
 80026c4:	20000138 	.word	0x20000138
 80026c8:	200000c0 	.word	0x200000c0

080026cc <HAL_UART_ErrorCallback>:
/***********************************************************************************
* Function: HAL_UART_ErrorCallback										   		   *
* Description: Process error callback.								               *
************************************************************************************/
VOID HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
	/* Get error status in local variable. */
	uint32 receivedValue = HAL_UART_GetError(huart);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f006 fa0f 	bl	8008af8 <HAL_UART_GetError>
 80026da:	60f8      	str	r0, [r7, #12]
	/* Process each error.
	 * Store each in error in the system manager fault array.
	 * In case of DMA error re-initialize the protocol. */
	switch(receivedValue)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2b10      	cmp	r3, #16
 80026e0:	d847      	bhi.n	8002772 <HAL_UART_ErrorCallback+0xa6>
 80026e2:	a201      	add	r2, pc, #4	; (adr r2, 80026e8 <HAL_UART_ErrorCallback+0x1c>)
 80026e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e8:	08002773 	.word	0x08002773
 80026ec:	0800272d 	.word	0x0800272d
 80026f0:	0800273b 	.word	0x0800273b
 80026f4:	08002773 	.word	0x08002773
 80026f8:	08002749 	.word	0x08002749
 80026fc:	08002773 	.word	0x08002773
 8002700:	08002773 	.word	0x08002773
 8002704:	08002773 	.word	0x08002773
 8002708:	08002757 	.word	0x08002757
 800270c:	08002773 	.word	0x08002773
 8002710:	08002773 	.word	0x08002773
 8002714:	08002773 	.word	0x08002773
 8002718:	08002773 	.word	0x08002773
 800271c:	08002773 	.word	0x08002773
 8002720:	08002773 	.word	0x08002773
 8002724:	08002773 	.word	0x08002773
 8002728:	08002765 	.word	0x08002765
	{
		case HAL_UART_ERROR_NONE:
			/* do nothing */
			break;
		case HAL_UART_ERROR_PE:
			SystemManager_Fault[UART_ERROR_PE]++;
 800272c:	4b13      	ldr	r3, [pc, #76]	; (800277c <HAL_UART_ErrorCallback+0xb0>)
 800272e:	7c5b      	ldrb	r3, [r3, #17]
 8002730:	3301      	adds	r3, #1
 8002732:	b2da      	uxtb	r2, r3
 8002734:	4b11      	ldr	r3, [pc, #68]	; (800277c <HAL_UART_ErrorCallback+0xb0>)
 8002736:	745a      	strb	r2, [r3, #17]
			break;
 8002738:	e01c      	b.n	8002774 <HAL_UART_ErrorCallback+0xa8>
		case HAL_UART_ERROR_NE:
			SystemManager_Fault[UART_ERROR_NE]++;
 800273a:	4b10      	ldr	r3, [pc, #64]	; (800277c <HAL_UART_ErrorCallback+0xb0>)
 800273c:	7c9b      	ldrb	r3, [r3, #18]
 800273e:	3301      	adds	r3, #1
 8002740:	b2da      	uxtb	r2, r3
 8002742:	4b0e      	ldr	r3, [pc, #56]	; (800277c <HAL_UART_ErrorCallback+0xb0>)
 8002744:	749a      	strb	r2, [r3, #18]
			break;
 8002746:	e015      	b.n	8002774 <HAL_UART_ErrorCallback+0xa8>
		case HAL_UART_ERROR_FE:
			SystemManager_Fault[UART_ERROR_FE]++;
 8002748:	4b0c      	ldr	r3, [pc, #48]	; (800277c <HAL_UART_ErrorCallback+0xb0>)
 800274a:	7cdb      	ldrb	r3, [r3, #19]
 800274c:	3301      	adds	r3, #1
 800274e:	b2da      	uxtb	r2, r3
 8002750:	4b0a      	ldr	r3, [pc, #40]	; (800277c <HAL_UART_ErrorCallback+0xb0>)
 8002752:	74da      	strb	r2, [r3, #19]
			break;
 8002754:	e00e      	b.n	8002774 <HAL_UART_ErrorCallback+0xa8>
		case HAL_UART_ERROR_ORE:
			SystemManager_Fault[UART_ERROR_ORE]++;
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <HAL_UART_ErrorCallback+0xb0>)
 8002758:	7d1b      	ldrb	r3, [r3, #20]
 800275a:	3301      	adds	r3, #1
 800275c:	b2da      	uxtb	r2, r3
 800275e:	4b07      	ldr	r3, [pc, #28]	; (800277c <HAL_UART_ErrorCallback+0xb0>)
 8002760:	751a      	strb	r2, [r3, #20]
			break;
 8002762:	e007      	b.n	8002774 <HAL_UART_ErrorCallback+0xa8>
		case HAL_UART_ERROR_DMA:
			SystemManager_Fault[UART_ERROR_ORE]++;
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <HAL_UART_ErrorCallback+0xb0>)
 8002766:	7d1b      	ldrb	r3, [r3, #20]
 8002768:	3301      	adds	r3, #1
 800276a:	b2da      	uxtb	r2, r3
 800276c:	4b03      	ldr	r3, [pc, #12]	; (800277c <HAL_UART_ErrorCallback+0xb0>)
 800276e:	751a      	strb	r2, [r3, #20]
			break;
 8002770:	e000      	b.n	8002774 <HAL_UART_ErrorCallback+0xa8>
		default:
			break;
 8002772:	bf00      	nop
	}
}
 8002774:	bf00      	nop
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	2000a754 	.word	0x2000a754

08002780 <HAL_UART_RxCpltCallback>:
/***********************************************************************************
* Function: HAL_UART_RxCpltCallback										           *
* Description: Process received data.									   		   *
************************************************************************************/
VOID HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
	/* If the UART 1 is calling the callback. */
	if(huart->Instance == USART1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a23      	ldr	r2, [pc, #140]	; (800281c <HAL_UART_RxCpltCallback+0x9c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d140      	bne.n	8002814 <HAL_UART_RxCpltCallback+0x94>
	{
		/* If the data received is not nullptr. */
		if(Rte_P_Btc_BtcPort_Btc_RxData == '\n')
 8002792:	4b23      	ldr	r3, [pc, #140]	; (8002820 <HAL_UART_RxCpltCallback+0xa0>)
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b0a      	cmp	r3, #10
 8002798:	d11c      	bne.n	80027d4 <HAL_UART_RxCpltCallback+0x54>
		{
			/* If the buffer length counter is less than maximum value. */
			if(Rte_P_Btc_BtcPort_Btc_RxCount <= 3)
 800279a:	4b22      	ldr	r3, [pc, #136]	; (8002824 <HAL_UART_RxCpltCallback+0xa4>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b03      	cmp	r3, #3
 80027a0:	d80f      	bhi.n	80027c2 <HAL_UART_RxCpltCallback+0x42>
			{
				/* Convert the data received to uint8.*/
				uint8 asciiToUint = 0;
 80027a2:	2300      	movs	r3, #0
 80027a4:	73fb      	strb	r3, [r7, #15]
				asciiToUint = atoi((char*)Rte_P_Btc_BtcPort_Btc_DataBuffer);
 80027a6:	4820      	ldr	r0, [pc, #128]	; (8002828 <HAL_UART_RxCpltCallback+0xa8>)
 80027a8:	f00c f926 	bl	800e9f8 <atoi>
 80027ac:	4603      	mov	r3, r0
 80027ae:	73fb      	strb	r3, [r7, #15]
				Rte_Write_Btc_BtcPort_Btc_RxData(asciiToUint);
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f00b f930 	bl	800da18 <Rte_Write_Btc_BtcPort_Btc_RxData>
				Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(Rte_P_Btc_BtcPort_Btc_RxData);
 80027b8:	4b19      	ldr	r3, [pc, #100]	; (8002820 <HAL_UART_RxCpltCallback+0xa0>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f00b f973 	bl	800daa8 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>
			else
			{
				/* do nothing */
			}
			/* Set the counter to 0 if it is more than maximum value. */
			UartCounter_Btc_RxCount = 0;
 80027c2:	4b1a      	ldr	r3, [pc, #104]	; (800282c <HAL_UART_RxCpltCallback+0xac>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	701a      	strb	r2, [r3, #0]
			Rte_Write_Btc_BtcPort_Btc_RxCount(UartCounter_Btc_RxCount);
 80027c8:	4b18      	ldr	r3, [pc, #96]	; (800282c <HAL_UART_RxCpltCallback+0xac>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f00b f933 	bl	800da38 <Rte_Write_Btc_BtcPort_Btc_RxCount>
 80027d2:	e01a      	b.n	800280a <HAL_UART_RxCpltCallback+0x8a>
		}/* If the message was not fully processed, continue with the processing into the buffer. */
		else if(Rte_P_Btc_BtcPort_Btc_RxCount < 3)
 80027d4:	4b13      	ldr	r3, [pc, #76]	; (8002824 <HAL_UART_RxCpltCallback+0xa4>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d80e      	bhi.n	80027fa <HAL_UART_RxCpltCallback+0x7a>
		{
			Rte_Write_Btc_BtcPort_Btc_DataBuffer(Rte_P_Btc_BtcPort_Btc_RxData, UartCounter_Btc_RxCount);
 80027dc:	4b10      	ldr	r3, [pc, #64]	; (8002820 <HAL_UART_RxCpltCallback+0xa0>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	4a12      	ldr	r2, [pc, #72]	; (800282c <HAL_UART_RxCpltCallback+0xac>)
 80027e2:	7812      	ldrb	r2, [r2, #0]
 80027e4:	4611      	mov	r1, r2
 80027e6:	4618      	mov	r0, r3
 80027e8:	f00b f936 	bl	800da58 <Rte_Write_Btc_BtcPort_Btc_DataBuffer>
			UartCounter_Btc_RxCount++;
 80027ec:	4b0f      	ldr	r3, [pc, #60]	; (800282c <HAL_UART_RxCpltCallback+0xac>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	3301      	adds	r3, #1
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	4b0d      	ldr	r3, [pc, #52]	; (800282c <HAL_UART_RxCpltCallback+0xac>)
 80027f6:	701a      	strb	r2, [r3, #0]
 80027f8:	e007      	b.n	800280a <HAL_UART_RxCpltCallback+0x8a>
		}
		else
		{
			/* Set the counter to 0 otherwise. */
			UartCounter_Btc_RxCount = 0;
 80027fa:	4b0c      	ldr	r3, [pc, #48]	; (800282c <HAL_UART_RxCpltCallback+0xac>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	701a      	strb	r2, [r3, #0]
			Rte_Write_Btc_BtcPort_Btc_RxCount(UartCounter_Btc_RxCount);
 8002800:	4b0a      	ldr	r3, [pc, #40]	; (800282c <HAL_UART_RxCpltCallback+0xac>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f00b f917 	bl	800da38 <Rte_Write_Btc_BtcPort_Btc_RxCount>
		}
		/* Re-enable data transmission throuhg the protocol in interrupt mode. */
		HAL_UART_Receive_IT(&huart1, &Btc_RxData, 1);
 800280a:	2201      	movs	r2, #1
 800280c:	4904      	ldr	r1, [pc, #16]	; (8002820 <HAL_UART_RxCpltCallback+0xa0>)
 800280e:	4808      	ldr	r0, [pc, #32]	; (8002830 <HAL_UART_RxCpltCallback+0xb0>)
 8002810:	f005 fe49 	bl	80084a6 <HAL_UART_Receive_IT>
	}
	else
	{
		/* do nothing */
	}
}
 8002814:	bf00      	nop
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40011000 	.word	0x40011000
 8002820:	200000c0 	.word	0x200000c0
 8002824:	200000c1 	.word	0x200000c1
 8002828:	200000bc 	.word	0x200000bc
 800282c:	2000013c 	.word	0x2000013c
 8002830:	20000630 	.word	0x20000630

08002834 <HAL_ADC_MspInit>:
  /* USER CODE END ADC1_Init 2 */

}

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08a      	sub	sp, #40	; 0x28
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283c:	f107 0314 	add.w	r3, r7, #20
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]
 800284a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a34      	ldr	r2, [pc, #208]	; (8002924 <HAL_ADC_MspInit+0xf0>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d161      	bne.n	800291a <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	4b33      	ldr	r3, [pc, #204]	; (8002928 <HAL_ADC_MspInit+0xf4>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285e:	4a32      	ldr	r2, [pc, #200]	; (8002928 <HAL_ADC_MspInit+0xf4>)
 8002860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002864:	6453      	str	r3, [r2, #68]	; 0x44
 8002866:	4b30      	ldr	r3, [pc, #192]	; (8002928 <HAL_ADC_MspInit+0xf4>)
 8002868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	4b2c      	ldr	r3, [pc, #176]	; (8002928 <HAL_ADC_MspInit+0xf4>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	4a2b      	ldr	r2, [pc, #172]	; (8002928 <HAL_ADC_MspInit+0xf4>)
 800287c:	f043 0304 	orr.w	r3, r3, #4
 8002880:	6313      	str	r3, [r2, #48]	; 0x30
 8002882:	4b29      	ldr	r3, [pc, #164]	; (8002928 <HAL_ADC_MspInit+0xf4>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = VS_Pin|LS_Pin;
 800288e:	230c      	movs	r3, #12
 8002890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002892:	2303      	movs	r3, #3
 8002894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800289a:	f107 0314 	add.w	r3, r7, #20
 800289e:	4619      	mov	r1, r3
 80028a0:	4822      	ldr	r0, [pc, #136]	; (800292c <HAL_ADC_MspInit+0xf8>)
 80028a2:	f003 f84d 	bl	8005940 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80028a6:	4b22      	ldr	r3, [pc, #136]	; (8002930 <HAL_ADC_MspInit+0xfc>)
 80028a8:	4a22      	ldr	r2, [pc, #136]	; (8002934 <HAL_ADC_MspInit+0x100>)
 80028aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80028ac:	4b20      	ldr	r3, [pc, #128]	; (8002930 <HAL_ADC_MspInit+0xfc>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028b2:	4b1f      	ldr	r3, [pc, #124]	; (8002930 <HAL_ADC_MspInit+0xfc>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80028b8:	4b1d      	ldr	r3, [pc, #116]	; (8002930 <HAL_ADC_MspInit+0xfc>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80028be:	4b1c      	ldr	r3, [pc, #112]	; (8002930 <HAL_ADC_MspInit+0xfc>)
 80028c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028c4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028c6:	4b1a      	ldr	r3, [pc, #104]	; (8002930 <HAL_ADC_MspInit+0xfc>)
 80028c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028cc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80028ce:	4b18      	ldr	r3, [pc, #96]	; (8002930 <HAL_ADC_MspInit+0xfc>)
 80028d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80028d6:	4b16      	ldr	r3, [pc, #88]	; (8002930 <HAL_ADC_MspInit+0xfc>)
 80028d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028dc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80028de:	4b14      	ldr	r3, [pc, #80]	; (8002930 <HAL_ADC_MspInit+0xfc>)
 80028e0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80028e4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80028e6:	4b12      	ldr	r3, [pc, #72]	; (8002930 <HAL_ADC_MspInit+0xfc>)
 80028e8:	2204      	movs	r2, #4
 80028ea:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80028ec:	4b10      	ldr	r3, [pc, #64]	; (8002930 <HAL_ADC_MspInit+0xfc>)
 80028ee:	2203      	movs	r2, #3
 80028f0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 80028f2:	4b0f      	ldr	r3, [pc, #60]	; (8002930 <HAL_ADC_MspInit+0xfc>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80028f8:	4b0d      	ldr	r3, [pc, #52]	; (8002930 <HAL_ADC_MspInit+0xfc>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80028fe:	480c      	ldr	r0, [pc, #48]	; (8002930 <HAL_ADC_MspInit+0xfc>)
 8002900:	f002 fa16 	bl	8004d30 <HAL_DMA_Init>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <HAL_ADC_MspInit+0xda>
    {
      Error_Handler();
 800290a:	f00c f849 	bl	800e9a0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a07      	ldr	r2, [pc, #28]	; (8002930 <HAL_ADC_MspInit+0xfc>)
 8002912:	639a      	str	r2, [r3, #56]	; 0x38
 8002914:	4a06      	ldr	r2, [pc, #24]	; (8002930 <HAL_ADC_MspInit+0xfc>)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800291a:	bf00      	nop
 800291c:	3728      	adds	r7, #40	; 0x28
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40012000 	.word	0x40012000
 8002928:	40023800 	.word	0x40023800
 800292c:	40020800 	.word	0x40020800
 8002930:	200001a4 	.word	0x200001a4
 8002934:	40026410 	.word	0x40026410

08002938 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a0c      	ldr	r2, [pc, #48]	; (8002978 <HAL_ADC_MspDeInit+0x40>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d111      	bne.n	800296e <HAL_ADC_MspDeInit+0x36>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 800294a:	4b0c      	ldr	r3, [pc, #48]	; (800297c <HAL_ADC_MspDeInit+0x44>)
 800294c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294e:	4a0b      	ldr	r2, [pc, #44]	; (800297c <HAL_ADC_MspDeInit+0x44>)
 8002950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002954:	6453      	str	r3, [r2, #68]	; 0x44

    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    HAL_GPIO_DeInit(GPIOC, VS_Pin|LS_Pin);
 8002956:	210c      	movs	r1, #12
 8002958:	4809      	ldr	r0, [pc, #36]	; (8002980 <HAL_ADC_MspDeInit+0x48>)
 800295a:	f003 f975 	bl	8005c48 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002962:	4618      	mov	r0, r3
 8002964:	f002 fa92 	bl	8004e8c <HAL_DMA_DeInit>

    /* ADC1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(ADC_IRQn);
 8002968:	2012      	movs	r0, #18
 800296a:	f002 f942 	bl	8004bf2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40012000 	.word	0x40012000
 800297c:	40023800 	.word	0x40023800
 8002980:	40020800 	.word	0x40020800

08002984 <HAL_CRC_MspInit>:
  /* USER CODE END CRC_Init 2 */

}

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a0b      	ldr	r2, [pc, #44]	; (80029c0 <HAL_CRC_MspInit+0x3c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d10d      	bne.n	80029b2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <HAL_CRC_MspInit+0x40>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	4a09      	ldr	r2, [pc, #36]	; (80029c4 <HAL_CRC_MspInit+0x40>)
 80029a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029a4:	6313      	str	r3, [r2, #48]	; 0x30
 80029a6:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <HAL_CRC_MspInit+0x40>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80029b2:	bf00      	nop
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	40023000 	.word	0x40023000
 80029c4:	40023800 	.word	0x40023800

080029c8 <HAL_CRC_MspDeInit>:

void HAL_CRC_MspDeInit(CRC_HandleTypeDef* crcHandle)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a07      	ldr	r2, [pc, #28]	; (80029f4 <HAL_CRC_MspDeInit+0x2c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d105      	bne.n	80029e6 <HAL_CRC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN CRC_MspDeInit 0 */

  /* USER CODE END CRC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
 80029da:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <HAL_CRC_MspDeInit+0x30>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	4a06      	ldr	r2, [pc, #24]	; (80029f8 <HAL_CRC_MspDeInit+0x30>)
 80029e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029e4:	6313      	str	r3, [r2, #48]	; 0x30
  /* USER CODE BEGIN CRC_MspDeInit 1 */

  /* USER CODE END CRC_MspDeInit 1 */
  }
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	40023000 	.word	0x40023000
 80029f8:	40023800 	.word	0x40023800

080029fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	607b      	str	r3, [r7, #4]
 8002a06:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <MX_DMA_Init+0x30>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	4a08      	ldr	r2, [pc, #32]	; (8002a2c <MX_DMA_Init+0x30>)
 8002a0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a10:	6313      	str	r3, [r2, #48]	; 0x30
 8002a12:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <MX_DMA_Init+0x30>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a1a:	607b      	str	r3, [r7, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]

}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	40023800 	.word	0x40023800

08002a30 <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0

}
 8002a34:	bf00      	nop
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	af00      	add	r7, sp, #0
return 0;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8002a4e:	b480      	push	{r7}
 8002a50:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8002a52:	bf00      	nop
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
void vApplicationTickHook(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
	Os_Counter++;
 8002a60:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <vApplicationTickHook+0x18>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	3301      	adds	r3, #1
 8002a66:	4a03      	ldr	r2, [pc, #12]	; (8002a74 <vApplicationTickHook+0x18>)
 8002a68:	6013      	str	r3, [r2, #0]
}
 8002a6a:	bf00      	nop
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	2000020c 	.word	0x2000020c

08002a78 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
   SystemManager_SetFault(STACK_OVERFLOW_RESET);
 8002a82:	200c      	movs	r0, #12
 8002a84:	f00b fe98 	bl	800e7b8 <SystemManager_SetFault>
   SystemManager_PerformReset();
 8002a88:	f00b febe 	bl	800e808 <SystemManager_PerformReset>
}
 8002a8c:	bf00      	nop
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
	SystemManager_SetFault(MALLOC_FAILED_RESET);
 8002a98:	200d      	movs	r0, #13
 8002a9a:	f00b fe8d 	bl	800e7b8 <SystemManager_SetFault>
	SystemManager_PerformReset();
 8002a9e:	f00b feb3 	bl	800e808 <SystemManager_PerformReset>
}
 8002aa2:	bf00      	nop
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <PreSleepProcessing>:
/* USER CODE END 5 */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
	...

08002ad0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Os_SecAlm_AlarmReset */
  Os_SecAlm_AlarmResetHandle = osTimerNew(Os_SecAlm_AlarmReset_Callback, osTimerPeriodic, NULL, &Os_SecAlm_AlarmReset_attributes);
 8002ad4:	4b59      	ldr	r3, [pc, #356]	; (8002c3c <MX_FREERTOS_Init+0x16c>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2101      	movs	r1, #1
 8002ada:	4859      	ldr	r0, [pc, #356]	; (8002c40 <MX_FREERTOS_Init+0x170>)
 8002adc:	f007 fc74 	bl	800a3c8 <osTimerNew>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	4a58      	ldr	r2, [pc, #352]	; (8002c44 <MX_FREERTOS_Init+0x174>)
 8002ae4:	6013      	str	r3, [r2, #0]

  /* creation of Os_CenLoc_LockUnlockSequence_Timer */
  Os_CenLoc_LockUnlockSequence_TimerHandle = osTimerNew(Os_CenLoc_LockUnlockSequence_Timer_Callback, osTimerPeriodic, NULL, &Os_CenLoc_LockUnlockSequence_Timer_attributes);
 8002ae6:	4b58      	ldr	r3, [pc, #352]	; (8002c48 <MX_FREERTOS_Init+0x178>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	2101      	movs	r1, #1
 8002aec:	4857      	ldr	r0, [pc, #348]	; (8002c4c <MX_FREERTOS_Init+0x17c>)
 8002aee:	f007 fc6b 	bl	800a3c8 <osTimerNew>
 8002af2:	4603      	mov	r3, r0
 8002af4:	4a56      	ldr	r2, [pc, #344]	; (8002c50 <MX_FREERTOS_Init+0x180>)
 8002af6:	6013      	str	r3, [r2, #0]

  /* creation of Os_SecAlmLed_TurnOnCyclic_Timer */
  Os_SecAlmLed_TurnOnCyclic_TimerHandle = osTimerNew(Os_SecAlmLed_TurnOnCyclic_Timer_Callback, osTimerPeriodic, NULL, &Os_SecAlmLed_TurnOnCyclic_Timer_attributes);
 8002af8:	4b56      	ldr	r3, [pc, #344]	; (8002c54 <MX_FREERTOS_Init+0x184>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	2101      	movs	r1, #1
 8002afe:	4856      	ldr	r0, [pc, #344]	; (8002c58 <MX_FREERTOS_Init+0x188>)
 8002b00:	f007 fc62 	bl	800a3c8 <osTimerNew>
 8002b04:	4603      	mov	r3, r0
 8002b06:	4a55      	ldr	r2, [pc, #340]	; (8002c5c <MX_FREERTOS_Init+0x18c>)
 8002b08:	6013      	str	r3, [r2, #0]

  /* creation of Os_SecAlmLedTurnOn_Timer */
  Os_SecAlmLedTurnOn_TimerHandle = osTimerNew(Os_SecAlmLedTurnOn_Timer_Callback, osTimerPeriodic, NULL, &Os_SecAlmLedTurnOn_Timer_attributes);
 8002b0a:	4b55      	ldr	r3, [pc, #340]	; (8002c60 <MX_FREERTOS_Init+0x190>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2101      	movs	r1, #1
 8002b10:	4854      	ldr	r0, [pc, #336]	; (8002c64 <MX_FREERTOS_Init+0x194>)
 8002b12:	f007 fc59 	bl	800a3c8 <osTimerNew>
 8002b16:	4603      	mov	r3, r0
 8002b18:	4a53      	ldr	r2, [pc, #332]	; (8002c68 <MX_FREERTOS_Init+0x198>)
 8002b1a:	6013      	str	r3, [r2, #0]

  /* creation of Os_FollowMeHome_Timer */
  Os_FollowMeHome_TimerHandle = osTimerNew(Os_FollowMeHome_Timer_Callback, osTimerPeriodic, NULL, &Os_FollowMeHome_Timer_attributes);
 8002b1c:	4b53      	ldr	r3, [pc, #332]	; (8002c6c <MX_FREERTOS_Init+0x19c>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2101      	movs	r1, #1
 8002b22:	4853      	ldr	r0, [pc, #332]	; (8002c70 <MX_FREERTOS_Init+0x1a0>)
 8002b24:	f007 fc50 	bl	800a3c8 <osTimerNew>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	4a52      	ldr	r2, [pc, #328]	; (8002c74 <MX_FREERTOS_Init+0x1a4>)
 8002b2c:	6013      	str	r3, [r2, #0]

  /* creation of Os_TurnSignals_Timer */
  Os_TurnSignals_TimerHandle = osTimerNew(Os_TurnSignals_Timer_Callback, osTimerPeriodic, NULL, &Os_TurnSignals_Timer_attributes);
 8002b2e:	4b52      	ldr	r3, [pc, #328]	; (8002c78 <MX_FREERTOS_Init+0x1a8>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	2101      	movs	r1, #1
 8002b34:	4851      	ldr	r0, [pc, #324]	; (8002c7c <MX_FREERTOS_Init+0x1ac>)
 8002b36:	f007 fc47 	bl	800a3c8 <osTimerNew>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	4a50      	ldr	r2, [pc, #320]	; (8002c80 <MX_FREERTOS_Init+0x1b0>)
 8002b3e:	6013      	str	r3, [r2, #0]

  /* creation of Os_SecAlmAlarm_Timer */
  Os_SecAlmAlarm_TimerHandle = osTimerNew(Os_SecAlmAlarm_Timer_Callback, osTimerPeriodic, NULL, &Os_SecAlmAlarm_Timer_attributes);
 8002b40:	4b50      	ldr	r3, [pc, #320]	; (8002c84 <MX_FREERTOS_Init+0x1b4>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	2101      	movs	r1, #1
 8002b46:	4850      	ldr	r0, [pc, #320]	; (8002c88 <MX_FREERTOS_Init+0x1b8>)
 8002b48:	f007 fc3e 	bl	800a3c8 <osTimerNew>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	4a4f      	ldr	r2, [pc, #316]	; (8002c8c <MX_FREERTOS_Init+0x1bc>)
 8002b50:	6013      	str	r3, [r2, #0]

  /* creation of Os_PdcR_Buzzer_Timer */
  Os_PdcR_Buzzer_TimerHandle = osTimerNew(Os_PdcR_Buzzer_Timer_Callback, osTimerOnce, NULL, &Os_PdcR_Buzzer_Timer_attributes);
 8002b52:	4b4f      	ldr	r3, [pc, #316]	; (8002c90 <MX_FREERTOS_Init+0x1c0>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	2100      	movs	r1, #0
 8002b58:	484e      	ldr	r0, [pc, #312]	; (8002c94 <MX_FREERTOS_Init+0x1c4>)
 8002b5a:	f007 fc35 	bl	800a3c8 <osTimerNew>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	4a4d      	ldr	r2, [pc, #308]	; (8002c98 <MX_FREERTOS_Init+0x1c8>)
 8002b62:	6013      	str	r3, [r2, #0]

  /* creation of Os_PdcF_Buzzer_Timer */
  Os_PdcF_Buzzer_TimerHandle = osTimerNew(Os_PdcF_Buzzer_Timer_Callback, osTimerOnce, NULL, &Os_PdcF_Buzzer_Timer_attributes);
 8002b64:	4b4d      	ldr	r3, [pc, #308]	; (8002c9c <MX_FREERTOS_Init+0x1cc>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	2100      	movs	r1, #0
 8002b6a:	484d      	ldr	r0, [pc, #308]	; (8002ca0 <MX_FREERTOS_Init+0x1d0>)
 8002b6c:	f007 fc2c 	bl	800a3c8 <osTimerNew>
 8002b70:	4603      	mov	r3, r0
 8002b72:	4a4c      	ldr	r2, [pc, #304]	; (8002ca4 <MX_FREERTOS_Init+0x1d4>)
 8002b74:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_QUEUES */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of OS_Init */
  OS_InitHandle = osThreadNew(OS_TASK_OS_INIT, NULL, &OS_Init_attributes);
 8002b76:	4a4c      	ldr	r2, [pc, #304]	; (8002ca8 <MX_FREERTOS_Init+0x1d8>)
 8002b78:	2100      	movs	r1, #0
 8002b7a:	484c      	ldr	r0, [pc, #304]	; (8002cac <MX_FREERTOS_Init+0x1dc>)
 8002b7c:	f007 fb7a 	bl	800a274 <osThreadNew>
 8002b80:	4603      	mov	r3, r0
 8002b82:	4a4b      	ldr	r2, [pc, #300]	; (8002cb0 <MX_FREERTOS_Init+0x1e0>)
 8002b84:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_APPL_Main */
  ASIL_APPL_MainHandle = osThreadNew(OS_TASK_ASIL_APPL_Main, NULL, &ASIL_APPL_Main_attributes);
 8002b86:	4a4b      	ldr	r2, [pc, #300]	; (8002cb4 <MX_FREERTOS_Init+0x1e4>)
 8002b88:	2100      	movs	r1, #0
 8002b8a:	484b      	ldr	r0, [pc, #300]	; (8002cb8 <MX_FREERTOS_Init+0x1e8>)
 8002b8c:	f007 fb72 	bl	800a274 <osThreadNew>
 8002b90:	4603      	mov	r3, r0
 8002b92:	4a4a      	ldr	r2, [pc, #296]	; (8002cbc <MX_FREERTOS_Init+0x1ec>)
 8002b94:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_APPL_PostMain */
  ASIL_APPL_PostMainHandle = osThreadNew(OS_TASK_ASIL_APPL_PostMain, NULL, &ASIL_APPL_PostMain_attributes);
 8002b96:	4a4a      	ldr	r2, [pc, #296]	; (8002cc0 <MX_FREERTOS_Init+0x1f0>)
 8002b98:	2100      	movs	r1, #0
 8002b9a:	484a      	ldr	r0, [pc, #296]	; (8002cc4 <MX_FREERTOS_Init+0x1f4>)
 8002b9c:	f007 fb6a 	bl	800a274 <osThreadNew>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	4a49      	ldr	r2, [pc, #292]	; (8002cc8 <MX_FREERTOS_Init+0x1f8>)
 8002ba4:	6013      	str	r3, [r2, #0]

  /* creation of QM_APPL_PreMain */
  QM_APPL_PreMainHandle = osThreadNew(OS_TASK_QM_APPL_PreMain, NULL, &QM_APPL_PreMain_attributes);
 8002ba6:	4a49      	ldr	r2, [pc, #292]	; (8002ccc <MX_FREERTOS_Init+0x1fc>)
 8002ba8:	2100      	movs	r1, #0
 8002baa:	4849      	ldr	r0, [pc, #292]	; (8002cd0 <MX_FREERTOS_Init+0x200>)
 8002bac:	f007 fb62 	bl	800a274 <osThreadNew>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	4a48      	ldr	r2, [pc, #288]	; (8002cd4 <MX_FREERTOS_Init+0x204>)
 8002bb4:	6013      	str	r3, [r2, #0]

  /* creation of QM_APPL_Main */
  QM_APPL_MainHandle = osThreadNew(OS_TASK_QM_APPL_Main, NULL, &QM_APPL_Main_attributes);
 8002bb6:	4a48      	ldr	r2, [pc, #288]	; (8002cd8 <MX_FREERTOS_Init+0x208>)
 8002bb8:	2100      	movs	r1, #0
 8002bba:	4848      	ldr	r0, [pc, #288]	; (8002cdc <MX_FREERTOS_Init+0x20c>)
 8002bbc:	f007 fb5a 	bl	800a274 <osThreadNew>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	4a47      	ldr	r2, [pc, #284]	; (8002ce0 <MX_FREERTOS_Init+0x210>)
 8002bc4:	6013      	str	r3, [r2, #0]

  /* creation of QM_APPL_PostMain */
  QM_APPL_PostMainHandle = osThreadNew(OS_TASK_QM_APPL_PostMain, NULL, &QM_APPL_PostMain_attributes);
 8002bc6:	4a47      	ldr	r2, [pc, #284]	; (8002ce4 <MX_FREERTOS_Init+0x214>)
 8002bc8:	2100      	movs	r1, #0
 8002bca:	4847      	ldr	r0, [pc, #284]	; (8002ce8 <MX_FREERTOS_Init+0x218>)
 8002bcc:	f007 fb52 	bl	800a274 <osThreadNew>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	4a46      	ldr	r2, [pc, #280]	; (8002cec <MX_FREERTOS_Init+0x21c>)
 8002bd4:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_BSW_PreMain */
  ASIL_BSW_PreMainHandle = osThreadNew(OS_TASK_ASIL_BSW_PreMain, NULL, &ASIL_BSW_PreMain_attributes);
 8002bd6:	4a46      	ldr	r2, [pc, #280]	; (8002cf0 <MX_FREERTOS_Init+0x220>)
 8002bd8:	2100      	movs	r1, #0
 8002bda:	4846      	ldr	r0, [pc, #280]	; (8002cf4 <MX_FREERTOS_Init+0x224>)
 8002bdc:	f007 fb4a 	bl	800a274 <osThreadNew>
 8002be0:	4603      	mov	r3, r0
 8002be2:	4a45      	ldr	r2, [pc, #276]	; (8002cf8 <MX_FREERTOS_Init+0x228>)
 8002be4:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_BSW_Main */
  ASIL_BSW_MainHandle = osThreadNew(OS_TASK_ASIL_BSW_Main, NULL, &ASIL_BSW_Main_attributes);
 8002be6:	4a45      	ldr	r2, [pc, #276]	; (8002cfc <MX_FREERTOS_Init+0x22c>)
 8002be8:	2100      	movs	r1, #0
 8002bea:	4845      	ldr	r0, [pc, #276]	; (8002d00 <MX_FREERTOS_Init+0x230>)
 8002bec:	f007 fb42 	bl	800a274 <osThreadNew>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	4a44      	ldr	r2, [pc, #272]	; (8002d04 <MX_FREERTOS_Init+0x234>)
 8002bf4:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_BSW_PostMain */
  ASIL_BSW_PostMainHandle = osThreadNew(OS_TASK_ASIL_BSW_PostMain, NULL, &ASIL_BSW_PostMain_attributes);
 8002bf6:	4a44      	ldr	r2, [pc, #272]	; (8002d08 <MX_FREERTOS_Init+0x238>)
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	4844      	ldr	r0, [pc, #272]	; (8002d0c <MX_FREERTOS_Init+0x23c>)
 8002bfc:	f007 fb3a 	bl	800a274 <osThreadNew>
 8002c00:	4603      	mov	r3, r0
 8002c02:	4a43      	ldr	r2, [pc, #268]	; (8002d10 <MX_FREERTOS_Init+0x240>)
 8002c04:	6013      	str	r3, [r2, #0]

  /* creation of QM_BSW_PreMain */
  QM_BSW_PreMainHandle = osThreadNew(OS_TASK_QM_BSW_PreMain, NULL, &QM_BSW_PreMain_attributes);
 8002c06:	4a43      	ldr	r2, [pc, #268]	; (8002d14 <MX_FREERTOS_Init+0x244>)
 8002c08:	2100      	movs	r1, #0
 8002c0a:	4843      	ldr	r0, [pc, #268]	; (8002d18 <MX_FREERTOS_Init+0x248>)
 8002c0c:	f007 fb32 	bl	800a274 <osThreadNew>
 8002c10:	4603      	mov	r3, r0
 8002c12:	4a42      	ldr	r2, [pc, #264]	; (8002d1c <MX_FREERTOS_Init+0x24c>)
 8002c14:	6013      	str	r3, [r2, #0]

  /* creation of QM_BSW_Main */
  QM_BSW_MainHandle = osThreadNew(OS_TASK_QM_BSW_Main, NULL, &QM_BSW_Main_attributes);
 8002c16:	4a42      	ldr	r2, [pc, #264]	; (8002d20 <MX_FREERTOS_Init+0x250>)
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4842      	ldr	r0, [pc, #264]	; (8002d24 <MX_FREERTOS_Init+0x254>)
 8002c1c:	f007 fb2a 	bl	800a274 <osThreadNew>
 8002c20:	4603      	mov	r3, r0
 8002c22:	4a41      	ldr	r2, [pc, #260]	; (8002d28 <MX_FREERTOS_Init+0x258>)
 8002c24:	6013      	str	r3, [r2, #0]

  /* creation of QM_BSW_PostMain */
  QM_BSW_PostMainHandle = osThreadNew(OS_TASK_QM_BSW_PostMain, NULL, &QM_BSW_PostMain_attributes);
 8002c26:	4a41      	ldr	r2, [pc, #260]	; (8002d2c <MX_FREERTOS_Init+0x25c>)
 8002c28:	2100      	movs	r1, #0
 8002c2a:	4841      	ldr	r0, [pc, #260]	; (8002d30 <MX_FREERTOS_Init+0x260>)
 8002c2c:	f007 fb22 	bl	800a274 <osThreadNew>
 8002c30:	4603      	mov	r3, r0
 8002c32:	4a40      	ldr	r2, [pc, #256]	; (8002d34 <MX_FREERTOS_Init+0x264>)
 8002c34:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	0800f188 	.word	0x0800f188
 8002c40:	08002e91 	.word	0x08002e91
 8002c44:	2000027c 	.word	0x2000027c
 8002c48:	0800f198 	.word	0x0800f198
 8002c4c:	08002eb1 	.word	0x08002eb1
 8002c50:	20000280 	.word	0x20000280
 8002c54:	0800f1a8 	.word	0x0800f1a8
 8002c58:	08002f19 	.word	0x08002f19
 8002c5c:	20000284 	.word	0x20000284
 8002c60:	0800f1b8 	.word	0x0800f1b8
 8002c64:	08002f41 	.word	0x08002f41
 8002c68:	20000288 	.word	0x20000288
 8002c6c:	0800f1c8 	.word	0x0800f1c8
 8002c70:	08002f69 	.word	0x08002f69
 8002c74:	2000028c 	.word	0x2000028c
 8002c78:	0800f1d8 	.word	0x0800f1d8
 8002c7c:	08002f91 	.word	0x08002f91
 8002c80:	20000290 	.word	0x20000290
 8002c84:	0800f1e8 	.word	0x0800f1e8
 8002c88:	08003001 	.word	0x08003001
 8002c8c:	20000294 	.word	0x20000294
 8002c90:	0800f1f8 	.word	0x0800f1f8
 8002c94:	08003039 	.word	0x08003039
 8002c98:	20000298 	.word	0x20000298
 8002c9c:	0800f208 	.word	0x0800f208
 8002ca0:	08003055 	.word	0x08003055
 8002ca4:	2000029c 	.word	0x2000029c
 8002ca8:	0800efd8 	.word	0x0800efd8
 8002cac:	08002d39 	.word	0x08002d39
 8002cb0:	2000024c 	.word	0x2000024c
 8002cb4:	0800effc 	.word	0x0800effc
 8002cb8:	08002d4d 	.word	0x08002d4d
 8002cbc:	20000250 	.word	0x20000250
 8002cc0:	0800f020 	.word	0x0800f020
 8002cc4:	08002d69 	.word	0x08002d69
 8002cc8:	20000254 	.word	0x20000254
 8002ccc:	0800f044 	.word	0x0800f044
 8002cd0:	08002d8d 	.word	0x08002d8d
 8002cd4:	20000258 	.word	0x20000258
 8002cd8:	0800f068 	.word	0x0800f068
 8002cdc:	08002da9 	.word	0x08002da9
 8002ce0:	2000025c 	.word	0x2000025c
 8002ce4:	0800f08c 	.word	0x0800f08c
 8002ce8:	08002dc5 	.word	0x08002dc5
 8002cec:	20000260 	.word	0x20000260
 8002cf0:	0800f0b0 	.word	0x0800f0b0
 8002cf4:	08002de1 	.word	0x08002de1
 8002cf8:	20000264 	.word	0x20000264
 8002cfc:	0800f0d4 	.word	0x0800f0d4
 8002d00:	08002dfd 	.word	0x08002dfd
 8002d04:	20000268 	.word	0x20000268
 8002d08:	0800f0f8 	.word	0x0800f0f8
 8002d0c:	08002e1d 	.word	0x08002e1d
 8002d10:	2000026c 	.word	0x2000026c
 8002d14:	0800f11c 	.word	0x0800f11c
 8002d18:	08002e39 	.word	0x08002e39
 8002d1c:	20000270 	.word	0x20000270
 8002d20:	0800f140 	.word	0x0800f140
 8002d24:	08002e55 	.word	0x08002e55
 8002d28:	20000274 	.word	0x20000274
 8002d2c:	0800f164 	.word	0x0800f164
 8002d30:	08002e75 	.word	0x08002e75
 8002d34:	20000278 	.word	0x20000278

08002d38 <OS_TASK_OS_INIT>:

/* USER CODE BEGIN Header_OS_TASK_OS_INIT */
/* USER CODE END Header_OS_TASK_OS_INIT */
void OS_TASK_OS_INIT(void *argument)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_OS_INIT */
	for(;;)
	{
		EcuM_DriverInit();
 8002d40:	f00b fc46 	bl	800e5d0 <EcuM_DriverInit>
		vTaskSuspend(NULL);
 8002d44:	2000      	movs	r0, #0
 8002d46:	f009 f9bf 	bl	800c0c8 <vTaskSuspend>
		EcuM_DriverInit();
 8002d4a:	e7f9      	b.n	8002d40 <OS_TASK_OS_INIT+0x8>

08002d4c <OS_TASK_ASIL_APPL_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_APPL_Main */
/* USER CODE END Header_OS_TASK_ASIL_APPL_Main */
void OS_TASK_ASIL_APPL_Main(void *argument)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_APPL_Main */
	for(;;)
	{
		Rte_Runnable_Btc_MainFunction();
 8002d54:	f00a ffc8 	bl	800dce8 <Rte_Runnable_Btc_MainFunction>
		vTaskDelayUntil(&ASIL_APPL_Main, pdMS_TO_TICKS(10));
 8002d58:	210a      	movs	r1, #10
 8002d5a:	4802      	ldr	r0, [pc, #8]	; (8002d64 <OS_TASK_ASIL_APPL_Main+0x18>)
 8002d5c:	f009 f936 	bl	800bfcc <vTaskDelayUntil>
		Rte_Runnable_Btc_MainFunction();
 8002d60:	e7f8      	b.n	8002d54 <OS_TASK_ASIL_APPL_Main+0x8>
 8002d62:	bf00      	nop
 8002d64:	20000224 	.word	0x20000224

08002d68 <OS_TASK_ASIL_APPL_PostMain>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_APPL_PostMain */
/* USER CODE END Header_OS_TASK_ASIL_APPL_PostMain */
void OS_TASK_ASIL_APPL_PostMain(void *argument)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_APPL_PostMain */
	for(;;)
	{
		Rte_Runnable_CenLoc_MainFunction();
 8002d70:	f00a ffc0 	bl	800dcf4 <Rte_Runnable_CenLoc_MainFunction>
		Rte_Runnable_ExtLights_MainFunction();
 8002d74:	f00a ffc4 	bl	800dd00 <Rte_Runnable_ExtLights_MainFunction>
		Rte_Runnable_IntLights_MainFunction();
 8002d78:	f00a ffc8 	bl	800dd0c <Rte_Runnable_IntLights_MainFunction>
		vTaskDelayUntil(&ASIL_APPL_PostMain, pdMS_TO_TICKS(15));
 8002d7c:	210f      	movs	r1, #15
 8002d7e:	4802      	ldr	r0, [pc, #8]	; (8002d88 <OS_TASK_ASIL_APPL_PostMain+0x20>)
 8002d80:	f009 f924 	bl	800bfcc <vTaskDelayUntil>
		Rte_Runnable_CenLoc_MainFunction();
 8002d84:	e7f4      	b.n	8002d70 <OS_TASK_ASIL_APPL_PostMain+0x8>
 8002d86:	bf00      	nop
 8002d88:	20000228 	.word	0x20000228

08002d8c <OS_TASK_QM_APPL_PreMain>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_APPL_PreMain */
/* USER CODE END Header_OS_TASK_QM_APPL_PreMain */
void OS_TASK_QM_APPL_PreMain(void *argument)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_APPL_PreMain */
	for(;;)
	{
		Rte_Runnable_SecAlm_MainFunction();
 8002d94:	f00a ffc0 	bl	800dd18 <Rte_Runnable_SecAlm_MainFunction>
		vTaskDelayUntil(&QM_APPL_PreMain, pdMS_TO_TICKS(5));
 8002d98:	2105      	movs	r1, #5
 8002d9a:	4802      	ldr	r0, [pc, #8]	; (8002da4 <OS_TASK_QM_APPL_PreMain+0x18>)
 8002d9c:	f009 f916 	bl	800bfcc <vTaskDelayUntil>
		Rte_Runnable_SecAlm_MainFunction();
 8002da0:	e7f8      	b.n	8002d94 <OS_TASK_QM_APPL_PreMain+0x8>
 8002da2:	bf00      	nop
 8002da4:	2000022c 	.word	0x2000022c

08002da8 <OS_TASK_QM_APPL_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_APPL_Main */
/* USER CODE END Header_OS_TASK_QM_APPL_Main */
void OS_TASK_QM_APPL_Main(void *argument)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_APPL_Main */
	for(;;)
	{
		Rte_Runnable_Pdc_MainFunction();
 8002db0:	f00a fff8 	bl	800dda4 <Rte_Runnable_Pdc_MainFunction>
		vTaskDelayUntil(&QM_APPL_Main, pdMS_TO_TICKS(20));
 8002db4:	2114      	movs	r1, #20
 8002db6:	4802      	ldr	r0, [pc, #8]	; (8002dc0 <OS_TASK_QM_APPL_Main+0x18>)
 8002db8:	f009 f908 	bl	800bfcc <vTaskDelayUntil>
		Rte_Runnable_Pdc_MainFunction();
 8002dbc:	e7f8      	b.n	8002db0 <OS_TASK_QM_APPL_Main+0x8>
 8002dbe:	bf00      	nop
 8002dc0:	20000230 	.word	0x20000230

08002dc4 <OS_TASK_QM_APPL_PostMain>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_APPL_PostMain */
/* USER CODE END Header_OS_TASK_QM_APPL_PostMain */
void OS_TASK_QM_APPL_PostMain(void *argument)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_APPL_PostMain */
	for(;;)
	{
		Rte_Runnable_DiagCtrl_MainFunction();
 8002dcc:	f00a ffe4 	bl	800dd98 <Rte_Runnable_DiagCtrl_MainFunction>
		vTaskDelayUntil(&QM_APPL_PostMain, pdMS_TO_TICKS(25));
 8002dd0:	2119      	movs	r1, #25
 8002dd2:	4802      	ldr	r0, [pc, #8]	; (8002ddc <OS_TASK_QM_APPL_PostMain+0x18>)
 8002dd4:	f009 f8fa 	bl	800bfcc <vTaskDelayUntil>
		Rte_Runnable_DiagCtrl_MainFunction();
 8002dd8:	e7f8      	b.n	8002dcc <OS_TASK_QM_APPL_PostMain+0x8>
 8002dda:	bf00      	nop
 8002ddc:	20000234 	.word	0x20000234

08002de0 <OS_TASK_ASIL_BSW_PreMain>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_BSW_PreMain */
/* USER CODE END Header_OS_TASK_ASIL_BSW_PreMain */
void OS_TASK_ASIL_BSW_PreMain(void *argument)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_BSW_PreMain */
	for(;;)
	{
		Rte_Runnable_Wdg_MainFunction();
 8002de8:	f00a fde4 	bl	800d9b4 <Rte_Runnable_Wdg_MainFunction>
		vTaskDelayUntil(&ASIL_BSW_PreMain, pdMS_TO_TICKS(5));
 8002dec:	2105      	movs	r1, #5
 8002dee:	4802      	ldr	r0, [pc, #8]	; (8002df8 <OS_TASK_ASIL_BSW_PreMain+0x18>)
 8002df0:	f009 f8ec 	bl	800bfcc <vTaskDelayUntil>
		Rte_Runnable_Wdg_MainFunction();
 8002df4:	e7f8      	b.n	8002de8 <OS_TASK_ASIL_BSW_PreMain+0x8>
 8002df6:	bf00      	nop
 8002df8:	20000238 	.word	0x20000238

08002dfc <OS_TASK_ASIL_BSW_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_BSW_Main */
/* USER CODE END Header_OS_TASK_ASIL_BSW_Main */
void OS_TASK_ASIL_BSW_Main(void *argument)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_BSW_Main */
	for(;;)
	{
		Rte_Runnable_Uart_MainFunction();
 8002e04:	f00a fde8 	bl	800d9d8 <Rte_Runnable_Uart_MainFunction>
		Rte_Runnable_Crc_MainFunction();
 8002e08:	f00a fdce 	bl	800d9a8 <Rte_Runnable_Crc_MainFunction>
		vTaskDelayUntil(&ASIL_BSW_Main, pdMS_TO_TICKS(10));
 8002e0c:	210a      	movs	r1, #10
 8002e0e:	4802      	ldr	r0, [pc, #8]	; (8002e18 <OS_TASK_ASIL_BSW_Main+0x1c>)
 8002e10:	f009 f8dc 	bl	800bfcc <vTaskDelayUntil>
		Rte_Runnable_Uart_MainFunction();
 8002e14:	e7f6      	b.n	8002e04 <OS_TASK_ASIL_BSW_Main+0x8>
 8002e16:	bf00      	nop
 8002e18:	2000023c 	.word	0x2000023c

08002e1c <OS_TASK_ASIL_BSW_PostMain>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_BSW_PostMain */
/* USER CODE END Header_OS_TASK_ASIL_BSW_PostMain */
void OS_TASK_ASIL_BSW_PostMain(void *argument)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_BSW_PostMain */
	for(;;)
	{
		Rte_Runnable_Tim_MainFunction();
 8002e24:	f00a fdd2 	bl	800d9cc <Rte_Runnable_Tim_MainFunction>
		vTaskDelayUntil(&ASIL_BSW_PostMain, pdMS_TO_TICKS(15));
 8002e28:	210f      	movs	r1, #15
 8002e2a:	4802      	ldr	r0, [pc, #8]	; (8002e34 <OS_TASK_ASIL_BSW_PostMain+0x18>)
 8002e2c:	f009 f8ce 	bl	800bfcc <vTaskDelayUntil>
		Rte_Runnable_Tim_MainFunction();
 8002e30:	e7f8      	b.n	8002e24 <OS_TASK_ASIL_BSW_PostMain+0x8>
 8002e32:	bf00      	nop
 8002e34:	20000240 	.word	0x20000240

08002e38 <OS_TASK_QM_BSW_PreMain>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_BSW_PreMain */
/* USER CODE END Header_OS_TASK_QM_BSW_PreMain */
void OS_TASK_QM_BSW_PreMain(void *argument)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_BSW_PreMain */
	for(;;)
	{
		Rte_Runnable_Adc_MainFunction();
 8002e40:	f00a fdbe 	bl	800d9c0 <Rte_Runnable_Adc_MainFunction>
		vTaskDelayUntil(&QM_BSW_PreMain, pdMS_TO_TICKS(15));
 8002e44:	210f      	movs	r1, #15
 8002e46:	4802      	ldr	r0, [pc, #8]	; (8002e50 <OS_TASK_QM_BSW_PreMain+0x18>)
 8002e48:	f009 f8c0 	bl	800bfcc <vTaskDelayUntil>
		Rte_Runnable_Adc_MainFunction();
 8002e4c:	e7f8      	b.n	8002e40 <OS_TASK_QM_BSW_PreMain+0x8>
 8002e4e:	bf00      	nop
 8002e50:	20000244 	.word	0x20000244

08002e54 <OS_TASK_QM_BSW_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_BSW_Main */
/* USER CODE END Header_OS_TASK_QM_BSW_Main */
void OS_TASK_QM_BSW_Main(void *argument)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_BSW_Main */
	for(;;)
	{
		Rte_Runnable_EcuM_MainFunction();
 8002e5c:	f00a fd98 	bl	800d990 <Rte_Runnable_EcuM_MainFunction>
		Rte_Runnable_SystemManager_MainFunction();
 8002e60:	f00a fd9c 	bl	800d99c <Rte_Runnable_SystemManager_MainFunction>
		vTaskDelayUntil(&QM_BSW_PreMain, pdMS_TO_TICKS(20));
 8002e64:	2114      	movs	r1, #20
 8002e66:	4802      	ldr	r0, [pc, #8]	; (8002e70 <OS_TASK_QM_BSW_Main+0x1c>)
 8002e68:	f009 f8b0 	bl	800bfcc <vTaskDelayUntil>
		Rte_Runnable_EcuM_MainFunction();
 8002e6c:	e7f6      	b.n	8002e5c <OS_TASK_QM_BSW_Main+0x8>
 8002e6e:	bf00      	nop
 8002e70:	20000244 	.word	0x20000244

08002e74 <OS_TASK_QM_BSW_PostMain>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_BSW_PostMain */
/* USER CODE END Header_OS_TASK_QM_BSW_PostMain */
void OS_TASK_QM_BSW_PostMain(void *argument)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_BSW_PostMain */
  for(;;)
  {
	  Rte_Runnable_Dem_MainFunction();
 8002e7c:	f00a ff98 	bl	800ddb0 <Rte_Runnable_Dem_MainFunction>
	  vTaskDelayUntil(&QM_BSW_PostMain, pdMS_TO_TICKS(20));
 8002e80:	2114      	movs	r1, #20
 8002e82:	4802      	ldr	r0, [pc, #8]	; (8002e8c <OS_TASK_QM_BSW_PostMain+0x18>)
 8002e84:	f009 f8a2 	bl	800bfcc <vTaskDelayUntil>
	  Rte_Runnable_Dem_MainFunction();
 8002e88:	e7f8      	b.n	8002e7c <OS_TASK_QM_BSW_PostMain+0x8>
 8002e8a:	bf00      	nop
 8002e8c:	20000248 	.word	0x20000248

08002e90 <Os_SecAlm_AlarmReset_Callback>:
  /* USER CODE END OS_TASK_QM_BSW_PostMain */
}

/* Os_SecAlm_AlarmReset_Callback function */
void Os_SecAlm_AlarmReset_Callback(void *argument)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlm_AlarmReset_Callback */
	/* Reset the security alarm counter trigger. */
	uint16 local = 0;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	81fb      	strh	r3, [r7, #14]
	Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter(&local);
 8002e9c:	f107 030e 	add.w	r3, r7, #14
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f00a ff11 	bl	800dcc8 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter>
  /* USER CODE END Os_SecAlm_AlarmReset_Callback */
}
 8002ea6:	bf00      	nop
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
	...

08002eb0 <Os_CenLoc_LockUnlockSequence_Timer_Callback>:

/* Os_CenLoc_LockUnlockSequence_Timer_Callback function */
void Os_CenLoc_LockUnlockSequence_Timer_Callback(void *argument)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_CenLoc_LockUnlockSequence_Timer_Callback */
	/* If the counter variable for the lock unlock turn signals sequence is less than or equal to 6
	 * Then if there is either a lock or an unlock sequence increase the counter to process the states
	 * in the application. */
	if(Os_LockUnlockSequence_Counter <= 6
 8002eb8:	4b14      	ldr	r3, [pc, #80]	; (8002f0c <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b06      	cmp	r3, #6
 8002ebe:	d819      	bhi.n	8002ef4 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
		&& ((Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_LOW && Rte_P_CenLoc_CenLocPort_CenLoc_PreviousStateFlag == STD_HIGH)
 8002ec0:	4b13      	ldr	r3, [pc, #76]	; (8002f10 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x60>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d103      	bne.n	8002ed0 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x20>
 8002ec8:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x64>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d007      	beq.n	8002ee0 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x30>
		|| (Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH && Rte_P_CenLoc_CenLocPort_CenLoc_PreviousStateFlag == STD_LOW)))
 8002ed0:	4b0f      	ldr	r3, [pc, #60]	; (8002f10 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x60>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d10d      	bne.n	8002ef4 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
 8002ed8:	4b0e      	ldr	r3, [pc, #56]	; (8002f14 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x64>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d109      	bne.n	8002ef4 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
	{
		Os_LockUnlockSequence_Counter = Os_LockUnlockSequence_Counter + 1;
 8002ee0:	4b0a      	ldr	r3, [pc, #40]	; (8002f0c <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	4b08      	ldr	r3, [pc, #32]	; (8002f0c <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8002eea:	701a      	strb	r2, [r3, #0]
		Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter(&Os_LockUnlockSequence_Counter);
 8002eec:	4807      	ldr	r0, [pc, #28]	; (8002f0c <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8002eee:	f00a fccf 	bl	800d890 <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter>
 8002ef2:	e006      	b.n	8002f02 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x52>
	}
	else
	{
		/* Update the counter with out of bounds value to prevent unexpected triggering. */
		Os_LockUnlockSequence_Counter = 7;
 8002ef4:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8002ef6:	2207      	movs	r2, #7
 8002ef8:	701a      	strb	r2, [r3, #0]
		Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter(&Os_LockUnlockSequence_Counter);
 8002efa:	4804      	ldr	r0, [pc, #16]	; (8002f0c <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8002efc:	f00a fcc8 	bl	800d890 <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter>
	}

  /* USER CODE END Os_CenLoc_LockUnlockSequence_Timer_Callback */
}
 8002f00:	bf00      	nop
 8002f02:	bf00      	nop
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20000210 	.word	0x20000210
 8002f10:	200000de 	.word	0x200000de
 8002f14:	200000e6 	.word	0x200000e6

08002f18 <Os_SecAlmLed_TurnOnCyclic_Timer_Callback>:

/* Os_SecAlmLed_TurnOnCyclic_Timer_Callback function */
void Os_SecAlmLed_TurnOnCyclic_Timer_Callback(void *argument)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlmLed_TurnOnCyclic_Timer_Callback */
	/* Increase the counter variable used in the timer for the alarm LED
	 * that expires every 3,75 seconds. */
	Os_TurnOnCyclic_Counter = Os_TurnOnCyclic_Counter + 1;
 8002f20:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <Os_SecAlmLed_TurnOnCyclic_Timer_Callback+0x24>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	3301      	adds	r3, #1
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	4b04      	ldr	r3, [pc, #16]	; (8002f3c <Os_SecAlmLed_TurnOnCyclic_Timer_Callback+0x24>)
 8002f2a:	701a      	strb	r2, [r3, #0]
	Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter(&Os_TurnOnCyclic_Counter);
 8002f2c:	4803      	ldr	r0, [pc, #12]	; (8002f3c <Os_SecAlmLed_TurnOnCyclic_Timer_Callback+0x24>)
 8002f2e:	f00a fc9f 	bl	800d870 <Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter>
  /* USER CODE END Os_SecAlmLed_TurnOnCyclic_Timer_Callback */
}
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	20000211 	.word	0x20000211

08002f40 <Os_SecAlmLedTurnOn_Timer_Callback>:

/* Os_SecAlmLedTurnOn_Timer_Callback function */
void Os_SecAlmLedTurnOn_Timer_Callback(void *argument)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlmLedTurnOn_Timer_Callback */
	/* Increase the counter variable used in the turning on the alarm LED for 0,25 seconds. */
	Os_TurnOnLed_Counter = Os_TurnOnLed_Counter + 1;
 8002f48:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <Os_SecAlmLedTurnOn_Timer_Callback+0x24>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <Os_SecAlmLedTurnOn_Timer_Callback+0x24>)
 8002f52:	701a      	strb	r2, [r3, #0]
	Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter(&Os_TurnOnLed_Counter);
 8002f54:	4803      	ldr	r0, [pc, #12]	; (8002f64 <Os_SecAlmLedTurnOn_Timer_Callback+0x24>)
 8002f56:	f00a fc7b 	bl	800d850 <Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter>
  /* USER CODE END Os_SecAlmLedTurnOn_Timer_Callback */
}
 8002f5a:	bf00      	nop
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20000212 	.word	0x20000212

08002f68 <Os_FollowMeHome_Timer_Callback>:

/* Os_FollowMeHome_Timer_Callback function */
void Os_FollowMeHome_Timer_Callback(void *argument)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_FollowMeHome_Timer_Callback */
	/* Increase the counter variable used in the follow me home concept when the timer
	 * period expires for the lights to go off. */
	Os_FollowMeHome_Counter = Os_FollowMeHome_Counter + 1;
 8002f70:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <Os_FollowMeHome_Timer_Callback+0x24>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	3301      	adds	r3, #1
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <Os_FollowMeHome_Timer_Callback+0x24>)
 8002f7a:	701a      	strb	r2, [r3, #0]
	Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter(&Os_FollowMeHome_Counter);
 8002f7c:	4803      	ldr	r0, [pc, #12]	; (8002f8c <Os_FollowMeHome_Timer_Callback+0x24>)
 8002f7e:	f00a fc57 	bl	800d830 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter>
  /* USER CODE END Os_FollowMeHome_Timer_Callback */
}
 8002f82:	bf00      	nop
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000213 	.word	0x20000213

08002f90 <Os_TurnSignals_Timer_Callback>:

/* Os_TurnSignals_Timer_Callback function */
void Os_TurnSignals_Timer_Callback(void *argument)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_TurnSignals_Timer_Callback */
	/* Increase the respective counter on request from the specific light in turn signals. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 8002f98:	4b13      	ldr	r3, [pc, #76]	; (8002fe8 <Os_TurnSignals_Timer_Callback+0x58>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d107      	bne.n	8002fb0 <Os_TurnSignals_Timer_Callback+0x20>
	{
		Os_Lts_Counter = Os_Lts_Counter + 1;
 8002fa0:	4b12      	ldr	r3, [pc, #72]	; (8002fec <Os_TurnSignals_Timer_Callback+0x5c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	4a11      	ldr	r2, [pc, #68]	; (8002fec <Os_TurnSignals_Timer_Callback+0x5c>)
 8002fa8:	6013      	str	r3, [r2, #0]
		Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag(&Os_Lts_Counter);
 8002faa:	4810      	ldr	r0, [pc, #64]	; (8002fec <Os_TurnSignals_Timer_Callback+0x5c>)
 8002fac:	f00a fe4c 	bl	800dc48 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag>
	else
	{
		/* do nothing */
	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 8002fb0:	4b0f      	ldr	r3, [pc, #60]	; (8002ff0 <Os_TurnSignals_Timer_Callback+0x60>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d107      	bne.n	8002fc8 <Os_TurnSignals_Timer_Callback+0x38>
	{
		Os_Rts_Counter = Os_Rts_Counter + 1;
 8002fb8:	4b0e      	ldr	r3, [pc, #56]	; (8002ff4 <Os_TurnSignals_Timer_Callback+0x64>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	4a0d      	ldr	r2, [pc, #52]	; (8002ff4 <Os_TurnSignals_Timer_Callback+0x64>)
 8002fc0:	6013      	str	r3, [r2, #0]
		Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag(&Os_Rts_Counter);
 8002fc2:	480c      	ldr	r0, [pc, #48]	; (8002ff4 <Os_TurnSignals_Timer_Callback+0x64>)
 8002fc4:	f00a fe30 	bl	800dc28 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag>
	else
	{
		/* do nothing */
	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState == STD_HIGH)
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <Os_TurnSignals_Timer_Callback+0x68>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d107      	bne.n	8002fe0 <Os_TurnSignals_Timer_Callback+0x50>
	{
		Os_HL_Counter = Os_HL_Counter + 1;
 8002fd0:	4b0a      	ldr	r3, [pc, #40]	; (8002ffc <Os_TurnSignals_Timer_Callback+0x6c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	4a09      	ldr	r2, [pc, #36]	; (8002ffc <Os_TurnSignals_Timer_Callback+0x6c>)
 8002fd8:	6013      	str	r3, [r2, #0]
		Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag(&Os_HL_Counter);
 8002fda:	4808      	ldr	r0, [pc, #32]	; (8002ffc <Os_TurnSignals_Timer_Callback+0x6c>)
 8002fdc:	f00a fe44 	bl	800dc68 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag>
	else
	{
		/* do nothing */
	}
  /* USER CODE END Os_TurnSignals_Timer_Callback */
}
 8002fe0:	bf00      	nop
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	200000fa 	.word	0x200000fa
 8002fec:	20000214 	.word	0x20000214
 8002ff0:	200000fb 	.word	0x200000fb
 8002ff4:	20000218 	.word	0x20000218
 8002ff8:	200000fe 	.word	0x200000fe
 8002ffc:	2000021c 	.word	0x2000021c

08003000 <Os_SecAlmAlarm_Timer_Callback>:

/* Os_SecAlmAlarm_Timer_Callback function */
void Os_SecAlmAlarm_Timer_Callback(void *argument)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlmAlarm_Timer_Callback */
	/* Increase the security alarm trigger counter when the alarm is on. */
	if(Rte_P_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4 == STD_LOW)
 8003008:	4b09      	ldr	r3, [pc, #36]	; (8003030 <Os_SecAlmAlarm_Timer_Callback+0x30>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d102      	bne.n	8003016 <Os_SecAlmAlarm_Timer_Callback+0x16>
	{
		Os_Alarm_Counter = STD_LOW;
 8003010:	4b08      	ldr	r3, [pc, #32]	; (8003034 <Os_SecAlmAlarm_Timer_Callback+0x34>)
 8003012:	2200      	movs	r2, #0
 8003014:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	Os_Alarm_Counter = Os_Alarm_Counter + 1;
 8003016:	4b07      	ldr	r3, [pc, #28]	; (8003034 <Os_SecAlmAlarm_Timer_Callback+0x34>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	3301      	adds	r3, #1
 800301c:	b2da      	uxtb	r2, r3
 800301e:	4b05      	ldr	r3, [pc, #20]	; (8003034 <Os_SecAlmAlarm_Timer_Callback+0x34>)
 8003020:	701a      	strb	r2, [r3, #0]
	Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4(&Os_Alarm_Counter);
 8003022:	4804      	ldr	r0, [pc, #16]	; (8003034 <Os_SecAlmAlarm_Timer_Callback+0x34>)
 8003024:	f00a fe40 	bl	800dca8 <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4>
  /* USER CODE END Os_SecAlmAlarm_Timer_Callback */
}
 8003028:	bf00      	nop
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	20000126 	.word	0x20000126
 8003034:	20000220 	.word	0x20000220

08003038 <Os_PdcR_Buzzer_Timer_Callback>:

/* Os_PdcR_Buzzer_Timer_Callback function */
void Os_PdcR_Buzzer_Timer_Callback(void *argument)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_PdcR_Buzzer_Timer_Callback */
	HAL_GPIO_TogglePin(PDCR_BUZZER_PORT, PDCR_BUZZER_PIN);
 8003040:	2120      	movs	r1, #32
 8003042:	4803      	ldr	r0, [pc, #12]	; (8003050 <Os_PdcR_Buzzer_Timer_Callback+0x18>)
 8003044:	f002 fefd 	bl	8005e42 <HAL_GPIO_TogglePin>
  /* USER CODE END Os_PdcR_Buzzer_Timer_Callback */
}
 8003048:	bf00      	nop
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40020400 	.word	0x40020400

08003054 <Os_PdcF_Buzzer_Timer_Callback>:

/* Os_PdcF_Buzzer_Timer_Callback function */
void Os_PdcF_Buzzer_Timer_Callback(void *argument)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_PdcF_Buzzer_Timer_Callback */
	HAL_GPIO_TogglePin(PDCF_BUZZER_PORT, PDCF_BUZZER_PIN);
 800305c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003060:	4803      	ldr	r0, [pc, #12]	; (8003070 <Os_PdcF_Buzzer_Timer_Callback+0x1c>)
 8003062:	f002 feee 	bl	8005e42 <HAL_GPIO_TogglePin>
  /* USER CODE END Os_PdcF_Buzzer_Timer_Callback */
}
 8003066:	bf00      	nop
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40020800 	.word	0x40020800

08003074 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b08a      	sub	sp, #40	; 0x28
 8003078:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800307a:	f107 0314 	add.w	r3, r7, #20
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	605a      	str	r2, [r3, #4]
 8003084:	609a      	str	r2, [r3, #8]
 8003086:	60da      	str	r2, [r3, #12]
 8003088:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800308a:	2300      	movs	r3, #0
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	4b4d      	ldr	r3, [pc, #308]	; (80031c4 <MX_GPIO_Init+0x150>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	4a4c      	ldr	r2, [pc, #304]	; (80031c4 <MX_GPIO_Init+0x150>)
 8003094:	f043 0304 	orr.w	r3, r3, #4
 8003098:	6313      	str	r3, [r2, #48]	; 0x30
 800309a:	4b4a      	ldr	r3, [pc, #296]	; (80031c4 <MX_GPIO_Init+0x150>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030a6:	2300      	movs	r3, #0
 80030a8:	60fb      	str	r3, [r7, #12]
 80030aa:	4b46      	ldr	r3, [pc, #280]	; (80031c4 <MX_GPIO_Init+0x150>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	4a45      	ldr	r2, [pc, #276]	; (80031c4 <MX_GPIO_Init+0x150>)
 80030b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030b4:	6313      	str	r3, [r2, #48]	; 0x30
 80030b6:	4b43      	ldr	r3, [pc, #268]	; (80031c4 <MX_GPIO_Init+0x150>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	4b3f      	ldr	r3, [pc, #252]	; (80031c4 <MX_GPIO_Init+0x150>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	4a3e      	ldr	r2, [pc, #248]	; (80031c4 <MX_GPIO_Init+0x150>)
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	6313      	str	r3, [r2, #48]	; 0x30
 80030d2:	4b3c      	ldr	r3, [pc, #240]	; (80031c4 <MX_GPIO_Init+0x150>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	60bb      	str	r3, [r7, #8]
 80030dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	607b      	str	r3, [r7, #4]
 80030e2:	4b38      	ldr	r3, [pc, #224]	; (80031c4 <MX_GPIO_Init+0x150>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	4a37      	ldr	r2, [pc, #220]	; (80031c4 <MX_GPIO_Init+0x150>)
 80030e8:	f043 0302 	orr.w	r3, r3, #2
 80030ec:	6313      	str	r3, [r2, #48]	; 0x30
 80030ee:	4b35      	ldr	r3, [pc, #212]	; (80031c4 <MX_GPIO_Init+0x150>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	607b      	str	r3, [r7, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	603b      	str	r3, [r7, #0]
 80030fe:	4b31      	ldr	r3, [pc, #196]	; (80031c4 <MX_GPIO_Init+0x150>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	4a30      	ldr	r2, [pc, #192]	; (80031c4 <MX_GPIO_Init+0x150>)
 8003104:	f043 0308 	orr.w	r3, r3, #8
 8003108:	6313      	str	r3, [r2, #48]	; 0x30
 800310a:	4b2e      	ldr	r3, [pc, #184]	; (80031c4 <MX_GPIO_Init+0x150>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	603b      	str	r3, [r7, #0]
 8003114:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PDCF_BUZZER_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8003116:	2200      	movs	r2, #0
 8003118:	f64f 4173 	movw	r1, #64627	; 0xfc73
 800311c:	482a      	ldr	r0, [pc, #168]	; (80031c8 <MX_GPIO_Init+0x154>)
 800311e:	f002 fe77 	bl	8005e10 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8003122:	2200      	movs	r2, #0
 8003124:	f641 11fc 	movw	r1, #6652	; 0x19fc
 8003128:	4828      	ldr	r0, [pc, #160]	; (80031cc <MX_GPIO_Init+0x158>)
 800312a:	f002 fe71 	bl	8005e10 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|PDCF_TRIG_Pin
                          |HB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|CENLOC_BUZZER_Pin|SECALM_BUZZER_Pin
 800312e:	2200      	movs	r2, #0
 8003130:	f24f 01f7 	movw	r1, #61687	; 0xf0f7
 8003134:	4826      	ldr	r0, [pc, #152]	; (80031d0 <MX_GPIO_Init+0x15c>)
 8003136:	f002 fe6b 	bl	8005e10 <HAL_GPIO_WritePin>
                          |PDCR_TRIG_Pin|AL_Pin|RL_Pin|GPIO_PIN_4
                          |PDCR_BUZZER_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800313a:	2200      	movs	r2, #0
 800313c:	2104      	movs	r1, #4
 800313e:	4825      	ldr	r0, [pc, #148]	; (80031d4 <MX_GPIO_Init+0x160>)
 8003140:	f002 fe66 	bl	8005e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PC14 PC15 PC0
                           PC1 PC4 PC5 PC6
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = PDCF_BUZZER_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8003144:	f64f 4373 	movw	r3, #64627	; 0xfc73
 8003148:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800314a:	2301      	movs	r3, #1
 800314c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314e:	2300      	movs	r3, #0
 8003150:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003152:	2300      	movs	r3, #0
 8003154:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003156:	f107 0314 	add.w	r3, r7, #20
 800315a:	4619      	mov	r1, r3
 800315c:	481a      	ldr	r0, [pc, #104]	; (80031c8 <MX_GPIO_Init+0x154>)
 800315e:	f002 fbef 	bl	8005940 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA6 PA7 PA8 PAPin
                           PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8003162:	f641 13fc 	movw	r3, #6652	; 0x19fc
 8003166:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|PDCF_TRIG_Pin
                          |HB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003168:	2301      	movs	r3, #1
 800316a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316c:	2300      	movs	r3, #0
 800316e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003170:	2300      	movs	r3, #0
 8003172:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003174:	f107 0314 	add.w	r3, r7, #20
 8003178:	4619      	mov	r1, r3
 800317a:	4814      	ldr	r0, [pc, #80]	; (80031cc <MX_GPIO_Init+0x158>)
 800317c:	f002 fbe0 	bl	8005940 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PBPin PBPin
                           PBPin PBPin PBPin PB4
                           PBPin PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|CENLOC_BUZZER_Pin|SECALM_BUZZER_Pin
 8003180:	f24f 03f7 	movw	r3, #61687	; 0xf0f7
 8003184:	617b      	str	r3, [r7, #20]
                          |PDCR_TRIG_Pin|AL_Pin|RL_Pin|GPIO_PIN_4
                          |PDCR_BUZZER_Pin|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003186:	2301      	movs	r3, #1
 8003188:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318a:	2300      	movs	r3, #0
 800318c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800318e:	2300      	movs	r3, #0
 8003190:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003192:	f107 0314 	add.w	r3, r7, #20
 8003196:	4619      	mov	r1, r3
 8003198:	480d      	ldr	r0, [pc, #52]	; (80031d0 <MX_GPIO_Init+0x15c>)
 800319a:	f002 fbd1 	bl	8005940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800319e:	2304      	movs	r3, #4
 80031a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031a2:	2301      	movs	r3, #1
 80031a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a6:	2300      	movs	r3, #0
 80031a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031aa:	2300      	movs	r3, #0
 80031ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031ae:	f107 0314 	add.w	r3, r7, #20
 80031b2:	4619      	mov	r1, r3
 80031b4:	4807      	ldr	r0, [pc, #28]	; (80031d4 <MX_GPIO_Init+0x160>)
 80031b6:	f002 fbc3 	bl	8005940 <HAL_GPIO_Init>

}
 80031ba:	bf00      	nop
 80031bc:	3728      	adds	r7, #40	; 0x28
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40023800 	.word	0x40023800
 80031c8:	40020800 	.word	0x40020800
 80031cc:	40020000 	.word	0x40020000
 80031d0:	40020400 	.word	0x40020400
 80031d4:	40020c00 	.word	0x40020c00

080031d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031de:	2300      	movs	r3, #0
 80031e0:	607b      	str	r3, [r7, #4]
 80031e2:	4b21      	ldr	r3, [pc, #132]	; (8003268 <HAL_MspInit+0x90>)
 80031e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e6:	4a20      	ldr	r2, [pc, #128]	; (8003268 <HAL_MspInit+0x90>)
 80031e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031ec:	6453      	str	r3, [r2, #68]	; 0x44
 80031ee:	4b1e      	ldr	r3, [pc, #120]	; (8003268 <HAL_MspInit+0x90>)
 80031f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f6:	607b      	str	r3, [r7, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	603b      	str	r3, [r7, #0]
 80031fe:	4b1a      	ldr	r3, [pc, #104]	; (8003268 <HAL_MspInit+0x90>)
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	4a19      	ldr	r2, [pc, #100]	; (8003268 <HAL_MspInit+0x90>)
 8003204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003208:	6413      	str	r3, [r2, #64]	; 0x40
 800320a:	4b17      	ldr	r3, [pc, #92]	; (8003268 <HAL_MspInit+0x90>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003212:	603b      	str	r3, [r7, #0]
 8003214:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 15, 0);
 8003216:	2200      	movs	r2, #0
 8003218:	210f      	movs	r1, #15
 800321a:	f06f 000b 	mvn.w	r0, #11
 800321e:	f001 fcbe 	bl	8004b9e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 15, 0);
 8003222:	2200      	movs	r2, #0
 8003224:	210f      	movs	r1, #15
 8003226:	f06f 000a 	mvn.w	r0, #10
 800322a:	f001 fcb8 	bl	8004b9e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 15, 0);
 800322e:	2200      	movs	r2, #0
 8003230:	210f      	movs	r1, #15
 8003232:	f06f 0009 	mvn.w	r0, #9
 8003236:	f001 fcb2 	bl	8004b9e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 15, 0);
 800323a:	2200      	movs	r2, #0
 800323c:	210f      	movs	r1, #15
 800323e:	f06f 0004 	mvn.w	r0, #4
 8003242:	f001 fcac 	bl	8004b9e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 8003246:	2200      	movs	r2, #0
 8003248:	210f      	movs	r1, #15
 800324a:	f06f 0003 	mvn.w	r0, #3
 800324e:	f001 fca6 	bl	8004b9e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003252:	2200      	movs	r2, #0
 8003254:	210f      	movs	r1, #15
 8003256:	f06f 0001 	mvn.w	r0, #1
 800325a:	f001 fca0 	bl	8004b9e <HAL_NVIC_SetPriority>
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800325e:	bf00      	nop
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40023800 	.word	0x40023800

0800326c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08c      	sub	sp, #48	; 0x30
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800327c:	2300      	movs	r3, #0
 800327e:	60bb      	str	r3, [r7, #8]
 8003280:	4b2e      	ldr	r3, [pc, #184]	; (800333c <HAL_InitTick+0xd0>)
 8003282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003284:	4a2d      	ldr	r2, [pc, #180]	; (800333c <HAL_InitTick+0xd0>)
 8003286:	f043 0301 	orr.w	r3, r3, #1
 800328a:	6453      	str	r3, [r2, #68]	; 0x44
 800328c:	4b2b      	ldr	r3, [pc, #172]	; (800333c <HAL_InitTick+0xd0>)
 800328e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	60bb      	str	r3, [r7, #8]
 8003296:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003298:	f107 020c 	add.w	r2, r7, #12
 800329c:	f107 0310 	add.w	r3, r7, #16
 80032a0:	4611      	mov	r1, r2
 80032a2:	4618      	mov	r0, r3
 80032a4:	f003 faec 	bl	8006880 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80032a8:	f003 fad6 	bl	8006858 <HAL_RCC_GetPCLK2Freq>
 80032ac:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80032ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b0:	4a23      	ldr	r2, [pc, #140]	; (8003340 <HAL_InitTick+0xd4>)
 80032b2:	fba2 2303 	umull	r2, r3, r2, r3
 80032b6:	0c9b      	lsrs	r3, r3, #18
 80032b8:	3b01      	subs	r3, #1
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80032bc:	4b21      	ldr	r3, [pc, #132]	; (8003344 <HAL_InitTick+0xd8>)
 80032be:	4a22      	ldr	r2, [pc, #136]	; (8003348 <HAL_InitTick+0xdc>)
 80032c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80032c2:	4b20      	ldr	r3, [pc, #128]	; (8003344 <HAL_InitTick+0xd8>)
 80032c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80032c8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80032ca:	4a1e      	ldr	r2, [pc, #120]	; (8003344 <HAL_InitTick+0xd8>)
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80032d0:	4b1c      	ldr	r3, [pc, #112]	; (8003344 <HAL_InitTick+0xd8>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032d6:	4b1b      	ldr	r3, [pc, #108]	; (8003344 <HAL_InitTick+0xd8>)
 80032d8:	2200      	movs	r2, #0
 80032da:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032dc:	4b19      	ldr	r3, [pc, #100]	; (8003344 <HAL_InitTick+0xd8>)
 80032de:	2200      	movs	r2, #0
 80032e0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80032e2:	4818      	ldr	r0, [pc, #96]	; (8003344 <HAL_InitTick+0xd8>)
 80032e4:	f003 fafe 	bl	80068e4 <HAL_TIM_Base_Init>
 80032e8:	4603      	mov	r3, r0
 80032ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80032ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d11b      	bne.n	800332e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80032f6:	4813      	ldr	r0, [pc, #76]	; (8003344 <HAL_InitTick+0xd8>)
 80032f8:	f003 fb50 	bl	800699c <HAL_TIM_Base_Start_IT>
 80032fc:	4603      	mov	r3, r0
 80032fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003302:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003306:	2b00      	cmp	r3, #0
 8003308:	d111      	bne.n	800332e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800330a:	2019      	movs	r0, #25
 800330c:	f001 fc63 	bl	8004bd6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b0f      	cmp	r3, #15
 8003314:	d808      	bhi.n	8003328 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8003316:	2200      	movs	r2, #0
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	2019      	movs	r0, #25
 800331c:	f001 fc3f 	bl	8004b9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003320:	4a0a      	ldr	r2, [pc, #40]	; (800334c <HAL_InitTick+0xe0>)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	e002      	b.n	800332e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800332e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003332:	4618      	mov	r0, r3
 8003334:	3730      	adds	r7, #48	; 0x30
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40023800 	.word	0x40023800
 8003340:	431bde83 	.word	0x431bde83
 8003344:	200002ac 	.word	0x200002ac
 8003348:	40010000 	.word	0x40010000
 800334c:	20000020 	.word	0x20000020

08003350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	SystemManager_SetFault(NMI_RESET);
 8003354:	2008      	movs	r0, #8
 8003356:	f00b fa2f 	bl	800e7b8 <SystemManager_SetFault>
	SystemManager_PerformReset();
 800335a:	f00b fa55 	bl	800e808 <SystemManager_PerformReset>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800335e:	e7fe      	b.n	800335e <NMI_Handler+0xe>

08003360 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	SystemManager_SetFault(HARDWARE_RESET);
 8003364:	2006      	movs	r0, #6
 8003366:	f00b fa27 	bl	800e7b8 <SystemManager_SetFault>
	SystemManager_PerformReset();
 800336a:	f00b fa4d 	bl	800e808 <SystemManager_PerformReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800336e:	e7fe      	b.n	800336e <HardFault_Handler+0xe>

08003370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	SystemManager_SetFault(MEMORY_FAULT_RESET);
 8003374:	2009      	movs	r0, #9
 8003376:	f00b fa1f 	bl	800e7b8 <SystemManager_SetFault>
	SystemManager_PerformReset();
 800337a:	f00b fa45 	bl	800e808 <SystemManager_PerformReset>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800337e:	e7fe      	b.n	800337e <MemManage_Handler+0xe>

08003380 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	SystemManager_SetFault(BUS_FAULT_RESET);
 8003384:	200b      	movs	r0, #11
 8003386:	f00b fa17 	bl	800e7b8 <SystemManager_SetFault>
	SystemManager_PerformReset();
 800338a:	f00b fa3d 	bl	800e808 <SystemManager_PerformReset>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800338e:	e7fe      	b.n	800338e <BusFault_Handler+0xe>

08003390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	SystemManager_SetFault(USAGE_FAULT_RESET);
 8003394:	200a      	movs	r0, #10
 8003396:	f00b fa0f 	bl	800e7b8 <SystemManager_SetFault>
	SystemManager_PerformReset();
 800339a:	f00b fa35 	bl	800e808 <SystemManager_PerformReset>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800339e:	e7fe      	b.n	800339e <UsageFault_Handler+0xe>

080033a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033a4:	bf00      	nop
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80033b2:	f002 fdb3 	bl	8005f1c <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 80033b6:	bf00      	nop
 80033b8:	bd80      	pop	{r7, pc}

080033ba <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80033be:	f002 f917 	bl	80055f0 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80033c2:	bf00      	nop
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80033c6:	b480      	push	{r7}
 80033c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_IRQn 0 */
  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */
  /* USER CODE END RCC_IRQn 1 */
}
 80033ca:	bf00      	nop
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */
  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80033d8:	4802      	ldr	r0, [pc, #8]	; (80033e4 <ADC_IRQHandler+0x10>)
 80033da:	f000 fd9f 	bl	8003f1c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */
  /* USER CODE END ADC_IRQn 1 */
}
 80033de:	bf00      	nop
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20000140 	.word	0x20000140

080033e8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80033ec:	4802      	ldr	r0, [pc, #8]	; (80033f8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80033ee:	f003 fecd 	bl	800718c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80033f2:	bf00      	nop
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	200002ac 	.word	0x200002ac

080033fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	/* When alarm is on turn on the LEDs at full duty cycle for the designated time. */
	if(Rte_P_SecAlm_SecAlmPort_SecAlm_PinStateChange == STD_HIGH)
 8003400:	4b44      	ldr	r3, [pc, #272]	; (8003514 <TIM2_IRQHandler+0x118>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d10b      	bne.n	8003420 <TIM2_IRQHandler+0x24>
	{
		TIM2->CCR1 = TIM2->ARR;
 8003408:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800340c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003412:	6353      	str	r3, [r2, #52]	; 0x34
		TIM2->CCR2 = TIM2->ARR;
 8003414:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003418:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341e:	6393      	str	r3, [r2, #56]	; 0x38
		/* do nothing */
	}
	/* Upon timer interrupt generation
	 * proceed to increase the PWM duty cycle
	 * for the low beam light until 75%. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_LowBeam_CurrentState == STD_HIGH)
 8003420:	4b3d      	ldr	r3, [pc, #244]	; (8003518 <TIM2_IRQHandler+0x11c>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d119      	bne.n	800345c <TIM2_IRQHandler+0x60>
	{
		if(TIM2->CCR1 < 1250)
 8003428:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800342c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800342e:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8003432:	4293      	cmp	r3, r2
 8003434:	d807      	bhi.n	8003446 <TIM2_IRQHandler+0x4a>
		{
			TIM2->CCR1 = TIM2->CCR1 + 20;
 8003436:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800343a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800343c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003440:	3314      	adds	r3, #20
 8003442:	6353      	str	r3, [r2, #52]	; 0x34
 8003444:	e00a      	b.n	800345c <TIM2_IRQHandler+0x60>
		}
		else if(TIM2->CCR1 >= 1000)
 8003446:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800344a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800344c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003450:	d304      	bcc.n	800345c <TIM2_IRQHandler+0x60>
		{
			TIM2->CCR1 = 1250;
 8003452:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003456:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800345a:	635a      	str	r2, [r3, #52]	; 0x34
		/* do nothing */
	}
	/* Upon timer interrupt generation
	 * proceed to increase the PWM duty cycle
	 * for the rear position light until 75%. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearPositionLights_CurrentState == STD_HIGH)
 800345c:	4b2f      	ldr	r3, [pc, #188]	; (800351c <TIM2_IRQHandler+0x120>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d118      	bne.n	8003496 <TIM2_IRQHandler+0x9a>
	{
		if(TIM2->CCR2 < 1000)
 8003464:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800346e:	d207      	bcs.n	8003480 <TIM2_IRQHandler+0x84>
		{
			TIM2->CCR2 = TIM2->CCR2 + 1;
 8003470:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003476:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800347a:	3301      	adds	r3, #1
 800347c:	6393      	str	r3, [r2, #56]	; 0x38
 800347e:	e00a      	b.n	8003496 <TIM2_IRQHandler+0x9a>
		}
		else if(TIM2->CCR2 >= 1000)
 8003480:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003486:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800348a:	d304      	bcc.n	8003496 <TIM2_IRQHandler+0x9a>
		{
			TIM2->CCR2 = 1000;
 800348c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003490:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003494:	639a      	str	r2, [r3, #56]	; 0x38
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_IntLights_IntLightsPort_IntLights_CurrentState == STD_HIGH)
 8003496:	4b22      	ldr	r3, [pc, #136]	; (8003520 <TIM2_IRQHandler+0x124>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d11b      	bne.n	80034d6 <TIM2_IRQHandler+0xda>
	{
		if(TIM2->CCR3 < 1999)
 800349e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a4:	f240 72ce 	movw	r2, #1998	; 0x7ce
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d807      	bhi.n	80034bc <TIM2_IRQHandler+0xc0>
		{
			TIM2->CCR3 = TIM2->CCR3 + 20;
 80034ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034b6:	3314      	adds	r3, #20
 80034b8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80034ba:	e026      	b.n	800350a <TIM2_IRQHandler+0x10e>
		}
		else if(TIM2->CCR3 >= 1999)
 80034bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c2:	f240 72ce 	movw	r2, #1998	; 0x7ce
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d91f      	bls.n	800350a <TIM2_IRQHandler+0x10e>
		{
			TIM2->CCR3 = 1999;
 80034ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034ce:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80034d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80034d4:	e019      	b.n	800350a <TIM2_IRQHandler+0x10e>
		else
		{
			/* do nothing */
		}
	}
	else if(Rte_P_IntLights_IntLightsPort_IntLights_CurrentState == STD_LOW)
 80034d6:	4b12      	ldr	r3, [pc, #72]	; (8003520 <TIM2_IRQHandler+0x124>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d115      	bne.n	800350a <TIM2_IRQHandler+0x10e>
	{
		if(TIM2->CCR3 > 20)
 80034de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e4:	2b14      	cmp	r3, #20
 80034e6:	d907      	bls.n	80034f8 <TIM2_IRQHandler+0xfc>
		{
			TIM2->CCR3 = TIM2->CCR3 - 20;
 80034e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034f2:	3b14      	subs	r3, #20
 80034f4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80034f6:	e008      	b.n	800350a <TIM2_IRQHandler+0x10e>
		}
		else if(TIM2->CCR3 <= 20)
 80034f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fe:	2b14      	cmp	r3, #20
 8003500:	d803      	bhi.n	800350a <TIM2_IRQHandler+0x10e>
		{
			TIM2->CCR3 = 0;
 8003502:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003506:	2200      	movs	r2, #0
 8003508:	63da      	str	r2, [r3, #60]	; 0x3c
	else
	{
		/* do nothing */
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800350a:	4806      	ldr	r0, [pc, #24]	; (8003524 <TIM2_IRQHandler+0x128>)
 800350c:	f003 fe3e 	bl	800718c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  /* USER CODE END TIM2_IRQn 1 */
}
 8003510:	bf00      	nop
 8003512:	bd80      	pop	{r7, pc}
 8003514:	20000125 	.word	0x20000125
 8003518:	200000fc 	.word	0x200000fc
 800351c:	200000fd 	.word	0x200000fd
 8003520:	20000118 	.word	0x20000118
 8003524:	20000360 	.word	0x20000360

08003528 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
	/* On central lock set to high
	 * increase the PWM duty cycle of the
	 * door led's brightness up to 100% gradually.
	 * Set it to 100% upon reaching maximum value.
	 * If the central lock is set to low, set duty cycle to 0. */
	if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800352c:	4b32      	ldr	r3, [pc, #200]	; (80035f8 <TIM3_IRQHandler+0xd0>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d104      	bne.n	800353e <TIM3_IRQHandler+0x16>
	{
		TIM3->CCR1 = TIM3->ARR;
 8003534:	4b31      	ldr	r3, [pc, #196]	; (80035fc <TIM3_IRQHandler+0xd4>)
 8003536:	4a31      	ldr	r2, [pc, #196]	; (80035fc <TIM3_IRQHandler+0xd4>)
 8003538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353a:	6353      	str	r3, [r2, #52]	; 0x34
 800353c:	e006      	b.n	800354c <TIM3_IRQHandler+0x24>
	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_LOW)
 800353e:	4b2e      	ldr	r3, [pc, #184]	; (80035f8 <TIM3_IRQHandler+0xd0>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d102      	bne.n	800354c <TIM3_IRQHandler+0x24>
	{
		TIM3->CCR1 = 0;
 8003546:	4b2d      	ldr	r3, [pc, #180]	; (80035fc <TIM3_IRQHandler+0xd4>)
 8003548:	2200      	movs	r2, #0
 800354a:	635a      	str	r2, [r3, #52]	; 0x34
	/* On brake lights set to high
	 * increase the PWM duty cycle of the
	 * door led's brightness up to 100% gradually.
	 * Set it to 100% upon reaching maximum value.
	 * If the brake lights are set to low, set duty cycle to 0. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState == STD_HIGH)
 800354c:	4b2c      	ldr	r3, [pc, #176]	; (8003600 <TIM3_IRQHandler+0xd8>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d104      	bne.n	800355e <TIM3_IRQHandler+0x36>
	{
		TIM3->CCR2 = TIM3->ARR;
 8003554:	4b29      	ldr	r3, [pc, #164]	; (80035fc <TIM3_IRQHandler+0xd4>)
 8003556:	4a29      	ldr	r2, [pc, #164]	; (80035fc <TIM3_IRQHandler+0xd4>)
 8003558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355a:	6393      	str	r3, [r2, #56]	; 0x38
 800355c:	e006      	b.n	800356c <TIM3_IRQHandler+0x44>
	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState == STD_LOW)
 800355e:	4b28      	ldr	r3, [pc, #160]	; (8003600 <TIM3_IRQHandler+0xd8>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d102      	bne.n	800356c <TIM3_IRQHandler+0x44>
	{
		TIM3->CCR2 = 0;
 8003566:	4b25      	ldr	r3, [pc, #148]	; (80035fc <TIM3_IRQHandler+0xd4>)
 8003568:	2200      	movs	r2, #0
 800356a:	639a      	str	r2, [r3, #56]	; 0x38
	/* On front fog lights set to high
	 * increase the PWM duty cycle of the
	 * door led's brightness up to 100% gradually.
	 * Set it to 100% upon reaching maximum value.
	 * If the front fog lights are set to low, set duty cycle to 0. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState == STD_HIGH)
 800356c:	4b25      	ldr	r3, [pc, #148]	; (8003604 <TIM3_IRQHandler+0xdc>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d114      	bne.n	800359e <TIM3_IRQHandler+0x76>
	{
		if(TIM3->CCR3 < 1000)
 8003574:	4b21      	ldr	r3, [pc, #132]	; (80035fc <TIM3_IRQHandler+0xd4>)
 8003576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003578:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800357c:	d205      	bcs.n	800358a <TIM3_IRQHandler+0x62>
		{
			TIM3->CCR3 = TIM3->CCR3 + 20;
 800357e:	4b1f      	ldr	r3, [pc, #124]	; (80035fc <TIM3_IRQHandler+0xd4>)
 8003580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003582:	4a1e      	ldr	r2, [pc, #120]	; (80035fc <TIM3_IRQHandler+0xd4>)
 8003584:	3314      	adds	r3, #20
 8003586:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003588:	e010      	b.n	80035ac <TIM3_IRQHandler+0x84>
		}
		else if(TIM3->CCR3 >= 1000)
 800358a:	4b1c      	ldr	r3, [pc, #112]	; (80035fc <TIM3_IRQHandler+0xd4>)
 800358c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003592:	d30b      	bcc.n	80035ac <TIM3_IRQHandler+0x84>
		{
			TIM3->CCR3 = 1000;
 8003594:	4b19      	ldr	r3, [pc, #100]	; (80035fc <TIM3_IRQHandler+0xd4>)
 8003596:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800359a:	63da      	str	r2, [r3, #60]	; 0x3c
 800359c:	e006      	b.n	80035ac <TIM3_IRQHandler+0x84>
		else
		{
			/* do nothing */
		}
	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState == STD_LOW)
 800359e:	4b19      	ldr	r3, [pc, #100]	; (8003604 <TIM3_IRQHandler+0xdc>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d102      	bne.n	80035ac <TIM3_IRQHandler+0x84>
	{
		TIM3->CCR3 = 0;
 80035a6:	4b15      	ldr	r3, [pc, #84]	; (80035fc <TIM3_IRQHandler+0xd4>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	63da      	str	r2, [r3, #60]	; 0x3c
	/* On rear fog lights set to high
	 * increase the PWM duty cycle of the
	 * door led's brightness up to 100% gradually.
	 * Set it to 100% upon reaching maximum value.
	 * If the rear fog lights are set to low, set duty cycle to 0. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState == STD_HIGH)
 80035ac:	4b16      	ldr	r3, [pc, #88]	; (8003608 <TIM3_IRQHandler+0xe0>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d114      	bne.n	80035de <TIM3_IRQHandler+0xb6>
	{
		if(TIM3->CCR4 < 1000)
 80035b4:	4b11      	ldr	r3, [pc, #68]	; (80035fc <TIM3_IRQHandler+0xd4>)
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035bc:	d205      	bcs.n	80035ca <TIM3_IRQHandler+0xa2>
		{
			TIM3->CCR4 = TIM3->CCR4 + 20;
 80035be:	4b0f      	ldr	r3, [pc, #60]	; (80035fc <TIM3_IRQHandler+0xd4>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	4a0e      	ldr	r2, [pc, #56]	; (80035fc <TIM3_IRQHandler+0xd4>)
 80035c4:	3314      	adds	r3, #20
 80035c6:	6413      	str	r3, [r2, #64]	; 0x40
 80035c8:	e010      	b.n	80035ec <TIM3_IRQHandler+0xc4>
		}
		else if(TIM3->CCR4 >= 1000)
 80035ca:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <TIM3_IRQHandler+0xd4>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035d2:	d30b      	bcc.n	80035ec <TIM3_IRQHandler+0xc4>
		{
			TIM3->CCR4 = 1000;
 80035d4:	4b09      	ldr	r3, [pc, #36]	; (80035fc <TIM3_IRQHandler+0xd4>)
 80035d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035da:	641a      	str	r2, [r3, #64]	; 0x40
 80035dc:	e006      	b.n	80035ec <TIM3_IRQHandler+0xc4>
		else
		{
			/* do nothing */
		}
	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState == STD_LOW)
 80035de:	4b0a      	ldr	r3, [pc, #40]	; (8003608 <TIM3_IRQHandler+0xe0>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d102      	bne.n	80035ec <TIM3_IRQHandler+0xc4>
	{
		TIM3->CCR4 = 0;
 80035e6:	4b05      	ldr	r3, [pc, #20]	; (80035fc <TIM3_IRQHandler+0xd4>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	641a      	str	r2, [r3, #64]	; 0x40
	else
	{
		/* do nothing */
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80035ec:	4807      	ldr	r0, [pc, #28]	; (800360c <TIM3_IRQHandler+0xe4>)
 80035ee:	f003 fdcd 	bl	800718c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  /* USER CODE END TIM3_IRQn 1 */
}
 80035f2:	bf00      	nop
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	200000de 	.word	0x200000de
 80035fc:	40000400 	.word	0x40000400
 8003600:	200000f6 	.word	0x200000f6
 8003604:	200000f9 	.word	0x200000f9
 8003608:	200000ff 	.word	0x200000ff
 800360c:	20000414 	.word	0x20000414

08003610 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003614:	4802      	ldr	r0, [pc, #8]	; (8003620 <TIM4_IRQHandler+0x10>)
 8003616:	f003 fdb9 	bl	800718c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  /* USER CODE END TIM4_IRQn 1 */
}
 800361a:	bf00      	nop
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	200004c8 	.word	0x200004c8

08003624 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003628:	4802      	ldr	r0, [pc, #8]	; (8003634 <USART1_IRQHandler+0x10>)
 800362a:	f004 ff6d 	bl	8008508 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  /* USER CODE END USART1_IRQn 1 */
}
 800362e:	bf00      	nop
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	20000630 	.word	0x20000630

08003638 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800363c:	4802      	ldr	r0, [pc, #8]	; (8003648 <TIM5_IRQHandler+0x10>)
 800363e:	f003 fda5 	bl	800718c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */
  /* USER CODE END TIM5_IRQn 1 */
}
 8003642:	bf00      	nop
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	2000057c 	.word	0x2000057c

0800364c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003650:	4802      	ldr	r0, [pc, #8]	; (800365c <DMA2_Stream0_IRQHandler+0x10>)
 8003652:	f001 fd63 	bl	800511c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003656:	bf00      	nop
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	200001a4 	.word	0x200001a4

08003660 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8003664:	bf00      	nop
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
	...

08003670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003674:	4b06      	ldr	r3, [pc, #24]	; (8003690 <SystemInit+0x20>)
 8003676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367a:	4a05      	ldr	r2, [pc, #20]	; (8003690 <SystemInit+0x20>)
 800367c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003684:	bf00      	nop
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	e000ed00 	.word	0xe000ed00

08003694 <HAL_TIM_Base_MspInit>:
  /* USER CODE END TIM5_Init 2 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b08c      	sub	sp, #48	; 0x30
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800369c:	f107 031c 	add.w	r3, r7, #28
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	605a      	str	r2, [r3, #4]
 80036a6:	609a      	str	r2, [r3, #8]
 80036a8:	60da      	str	r2, [r3, #12]
 80036aa:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b4:	d10e      	bne.n	80036d4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036b6:	2300      	movs	r3, #0
 80036b8:	61bb      	str	r3, [r7, #24]
 80036ba:	4b35      	ldr	r3, [pc, #212]	; (8003790 <HAL_TIM_Base_MspInit+0xfc>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	4a34      	ldr	r2, [pc, #208]	; (8003790 <HAL_TIM_Base_MspInit+0xfc>)
 80036c0:	f043 0301 	orr.w	r3, r3, #1
 80036c4:	6413      	str	r3, [r2, #64]	; 0x40
 80036c6:	4b32      	ldr	r3, [pc, #200]	; (8003790 <HAL_TIM_Base_MspInit+0xfc>)
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	61bb      	str	r3, [r7, #24]
 80036d0:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80036d2:	e058      	b.n	8003786 <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM3)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a2e      	ldr	r2, [pc, #184]	; (8003794 <HAL_TIM_Base_MspInit+0x100>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d10e      	bne.n	80036fc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	4b2b      	ldr	r3, [pc, #172]	; (8003790 <HAL_TIM_Base_MspInit+0xfc>)
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	4a2a      	ldr	r2, [pc, #168]	; (8003790 <HAL_TIM_Base_MspInit+0xfc>)
 80036e8:	f043 0302 	orr.w	r3, r3, #2
 80036ec:	6413      	str	r3, [r2, #64]	; 0x40
 80036ee:	4b28      	ldr	r3, [pc, #160]	; (8003790 <HAL_TIM_Base_MspInit+0xfc>)
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	697b      	ldr	r3, [r7, #20]
}
 80036fa:	e044      	b.n	8003786 <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM4)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a25      	ldr	r2, [pc, #148]	; (8003798 <HAL_TIM_Base_MspInit+0x104>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d10e      	bne.n	8003724 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003706:	2300      	movs	r3, #0
 8003708:	613b      	str	r3, [r7, #16]
 800370a:	4b21      	ldr	r3, [pc, #132]	; (8003790 <HAL_TIM_Base_MspInit+0xfc>)
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	4a20      	ldr	r2, [pc, #128]	; (8003790 <HAL_TIM_Base_MspInit+0xfc>)
 8003710:	f043 0304 	orr.w	r3, r3, #4
 8003714:	6413      	str	r3, [r2, #64]	; 0x40
 8003716:	4b1e      	ldr	r3, [pc, #120]	; (8003790 <HAL_TIM_Base_MspInit+0xfc>)
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	613b      	str	r3, [r7, #16]
 8003720:	693b      	ldr	r3, [r7, #16]
}
 8003722:	e030      	b.n	8003786 <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM5)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a1c      	ldr	r2, [pc, #112]	; (800379c <HAL_TIM_Base_MspInit+0x108>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d12b      	bne.n	8003786 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800372e:	2300      	movs	r3, #0
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	4b17      	ldr	r3, [pc, #92]	; (8003790 <HAL_TIM_Base_MspInit+0xfc>)
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	4a16      	ldr	r2, [pc, #88]	; (8003790 <HAL_TIM_Base_MspInit+0xfc>)
 8003738:	f043 0308 	orr.w	r3, r3, #8
 800373c:	6413      	str	r3, [r2, #64]	; 0x40
 800373e:	4b14      	ldr	r3, [pc, #80]	; (8003790 <HAL_TIM_Base_MspInit+0xfc>)
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800374a:	2300      	movs	r3, #0
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	4b10      	ldr	r3, [pc, #64]	; (8003790 <HAL_TIM_Base_MspInit+0xfc>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	4a0f      	ldr	r2, [pc, #60]	; (8003790 <HAL_TIM_Base_MspInit+0xfc>)
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	6313      	str	r3, [r2, #48]	; 0x30
 800375a:	4b0d      	ldr	r3, [pc, #52]	; (8003790 <HAL_TIM_Base_MspInit+0xfc>)
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	60bb      	str	r3, [r7, #8]
 8003764:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PDCF_IC_Pin|PDCR_IC_Pin;
 8003766:	2303      	movs	r3, #3
 8003768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800376a:	2302      	movs	r3, #2
 800376c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376e:	2300      	movs	r3, #0
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003772:	2300      	movs	r3, #0
 8003774:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003776:	2302      	movs	r3, #2
 8003778:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800377a:	f107 031c 	add.w	r3, r7, #28
 800377e:	4619      	mov	r1, r3
 8003780:	4807      	ldr	r0, [pc, #28]	; (80037a0 <HAL_TIM_Base_MspInit+0x10c>)
 8003782:	f002 f8dd 	bl	8005940 <HAL_GPIO_Init>
}
 8003786:	bf00      	nop
 8003788:	3730      	adds	r7, #48	; 0x30
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40023800 	.word	0x40023800
 8003794:	40000400 	.word	0x40000400
 8003798:	40000800 	.word	0x40000800
 800379c:	40000c00 	.word	0x40000c00
 80037a0:	40020000 	.word	0x40020000

080037a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b08c      	sub	sp, #48	; 0x30
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037ac:	f107 031c 	add.w	r3, r7, #28
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	605a      	str	r2, [r3, #4]
 80037b6:	609a      	str	r2, [r3, #8]
 80037b8:	60da      	str	r2, [r3, #12]
 80037ba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c4:	d13e      	bne.n	8003844 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037c6:	2300      	movs	r3, #0
 80037c8:	61bb      	str	r3, [r7, #24]
 80037ca:	4b45      	ldr	r3, [pc, #276]	; (80038e0 <HAL_TIM_MspPostInit+0x13c>)
 80037cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ce:	4a44      	ldr	r2, [pc, #272]	; (80038e0 <HAL_TIM_MspPostInit+0x13c>)
 80037d0:	f043 0302 	orr.w	r3, r3, #2
 80037d4:	6313      	str	r3, [r2, #48]	; 0x30
 80037d6:	4b42      	ldr	r3, [pc, #264]	; (80038e0 <HAL_TIM_MspPostInit+0x13c>)
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	61bb      	str	r3, [r7, #24]
 80037e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	4b3e      	ldr	r3, [pc, #248]	; (80038e0 <HAL_TIM_MspPostInit+0x13c>)
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	4a3d      	ldr	r2, [pc, #244]	; (80038e0 <HAL_TIM_MspPostInit+0x13c>)
 80037ec:	f043 0301 	orr.w	r3, r3, #1
 80037f0:	6313      	str	r3, [r2, #48]	; 0x30
 80037f2:	4b3b      	ldr	r3, [pc, #236]	; (80038e0 <HAL_TIM_MspPostInit+0x13c>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	617b      	str	r3, [r7, #20]
 80037fc:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = IL_PWM_Pin|RPL_PWM_Pin;
 80037fe:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8003802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003804:	2302      	movs	r3, #2
 8003806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003808:	2300      	movs	r3, #0
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800380c:	2300      	movs	r3, #0
 800380e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003810:	2301      	movs	r3, #1
 8003812:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003814:	f107 031c 	add.w	r3, r7, #28
 8003818:	4619      	mov	r1, r3
 800381a:	4832      	ldr	r0, [pc, #200]	; (80038e4 <HAL_TIM_MspPostInit+0x140>)
 800381c:	f002 f890 	bl	8005940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LB_PWM_Pin;
 8003820:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003826:	2302      	movs	r3, #2
 8003828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382a:	2300      	movs	r3, #0
 800382c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800382e:	2300      	movs	r3, #0
 8003830:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003832:	2301      	movs	r3, #1
 8003834:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LB_PWM_GPIO_Port, &GPIO_InitStruct);
 8003836:	f107 031c 	add.w	r3, r7, #28
 800383a:	4619      	mov	r1, r3
 800383c:	482a      	ldr	r0, [pc, #168]	; (80038e8 <HAL_TIM_MspPostInit+0x144>)
 800383e:	f002 f87f 	bl	8005940 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003842:	e048      	b.n	80038d6 <HAL_TIM_MspPostInit+0x132>
  else if(timHandle->Instance==TIM3)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a28      	ldr	r2, [pc, #160]	; (80038ec <HAL_TIM_MspPostInit+0x148>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d11f      	bne.n	800388e <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800384e:	2300      	movs	r3, #0
 8003850:	613b      	str	r3, [r7, #16]
 8003852:	4b23      	ldr	r3, [pc, #140]	; (80038e0 <HAL_TIM_MspPostInit+0x13c>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	4a22      	ldr	r2, [pc, #136]	; (80038e0 <HAL_TIM_MspPostInit+0x13c>)
 8003858:	f043 0304 	orr.w	r3, r3, #4
 800385c:	6313      	str	r3, [r2, #48]	; 0x30
 800385e:	4b20      	ldr	r3, [pc, #128]	; (80038e0 <HAL_TIM_MspPostInit+0x13c>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	f003 0304 	and.w	r3, r3, #4
 8003866:	613b      	str	r3, [r7, #16]
 8003868:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BL_PWM_Pin|FFL_PWM_Pin|RFL_PWM_Pin;
 800386a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800386e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003870:	2302      	movs	r3, #2
 8003872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003874:	2300      	movs	r3, #0
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003878:	2300      	movs	r3, #0
 800387a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800387c:	2302      	movs	r3, #2
 800387e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003880:	f107 031c 	add.w	r3, r7, #28
 8003884:	4619      	mov	r1, r3
 8003886:	481a      	ldr	r0, [pc, #104]	; (80038f0 <HAL_TIM_MspPostInit+0x14c>)
 8003888:	f002 f85a 	bl	8005940 <HAL_GPIO_Init>
}
 800388c:	e023      	b.n	80038d6 <HAL_TIM_MspPostInit+0x132>
  else if(timHandle->Instance==TIM4)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a18      	ldr	r2, [pc, #96]	; (80038f4 <HAL_TIM_MspPostInit+0x150>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d11e      	bne.n	80038d6 <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003898:	2300      	movs	r3, #0
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	4b10      	ldr	r3, [pc, #64]	; (80038e0 <HAL_TIM_MspPostInit+0x13c>)
 800389e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a0:	4a0f      	ldr	r2, [pc, #60]	; (80038e0 <HAL_TIM_MspPostInit+0x13c>)
 80038a2:	f043 0302 	orr.w	r3, r3, #2
 80038a6:	6313      	str	r3, [r2, #48]	; 0x30
 80038a8:	4b0d      	ldr	r3, [pc, #52]	; (80038e0 <HAL_TIM_MspPostInit+0x13c>)
 80038aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LTS_PWM_Pin|RTS_PWM_Pin;
 80038b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ba:	2302      	movs	r3, #2
 80038bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038be:	2300      	movs	r3, #0
 80038c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038c2:	2300      	movs	r3, #0
 80038c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80038c6:	2302      	movs	r3, #2
 80038c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ca:	f107 031c 	add.w	r3, r7, #28
 80038ce:	4619      	mov	r1, r3
 80038d0:	4804      	ldr	r0, [pc, #16]	; (80038e4 <HAL_TIM_MspPostInit+0x140>)
 80038d2:	f002 f835 	bl	8005940 <HAL_GPIO_Init>
}
 80038d6:	bf00      	nop
 80038d8:	3730      	adds	r7, #48	; 0x30
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40023800 	.word	0x40023800
 80038e4:	40020400 	.word	0x40020400
 80038e8:	40020000 	.word	0x40020000
 80038ec:	40000400 	.word	0x40000400
 80038f0:	40020800 	.word	0x40020800
 80038f4:	40000800 	.word	0x40000800

080038f8 <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003908:	d109      	bne.n	800391e <HAL_TIM_Base_MspDeInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */

  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 800390a:	4b1f      	ldr	r3, [pc, #124]	; (8003988 <HAL_TIM_Base_MspDeInit+0x90>)
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	4a1e      	ldr	r2, [pc, #120]	; (8003988 <HAL_TIM_Base_MspDeInit+0x90>)
 8003910:	f023 0301 	bic.w	r3, r3, #1
 8003914:	6413      	str	r3, [r2, #64]	; 0x40

    /* TIM2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8003916:	201c      	movs	r0, #28
 8003918:	f001 f96b 	bl	8004bf2 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspDeInit 1 */

  /* USER CODE END TIM5_MspDeInit 1 */
  }
}
 800391c:	e02f      	b.n	800397e <HAL_TIM_Base_MspDeInit+0x86>
  else if(tim_baseHandle->Instance==TIM3)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a1a      	ldr	r2, [pc, #104]	; (800398c <HAL_TIM_Base_MspDeInit+0x94>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d109      	bne.n	800393c <HAL_TIM_Base_MspDeInit+0x44>
    __HAL_RCC_TIM3_CLK_DISABLE();
 8003928:	4b17      	ldr	r3, [pc, #92]	; (8003988 <HAL_TIM_Base_MspDeInit+0x90>)
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	4a16      	ldr	r2, [pc, #88]	; (8003988 <HAL_TIM_Base_MspDeInit+0x90>)
 800392e:	f023 0302 	bic.w	r3, r3, #2
 8003932:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8003934:	201d      	movs	r0, #29
 8003936:	f001 f95c 	bl	8004bf2 <HAL_NVIC_DisableIRQ>
}
 800393a:	e020      	b.n	800397e <HAL_TIM_Base_MspDeInit+0x86>
  else if(tim_baseHandle->Instance==TIM4)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a13      	ldr	r2, [pc, #76]	; (8003990 <HAL_TIM_Base_MspDeInit+0x98>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d109      	bne.n	800395a <HAL_TIM_Base_MspDeInit+0x62>
    __HAL_RCC_TIM4_CLK_DISABLE();
 8003946:	4b10      	ldr	r3, [pc, #64]	; (8003988 <HAL_TIM_Base_MspDeInit+0x90>)
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	4a0f      	ldr	r2, [pc, #60]	; (8003988 <HAL_TIM_Base_MspDeInit+0x90>)
 800394c:	f023 0304 	bic.w	r3, r3, #4
 8003950:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM4_IRQn);
 8003952:	201e      	movs	r0, #30
 8003954:	f001 f94d 	bl	8004bf2 <HAL_NVIC_DisableIRQ>
}
 8003958:	e011      	b.n	800397e <HAL_TIM_Base_MspDeInit+0x86>
  else if(tim_baseHandle->Instance==TIM5)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a0d      	ldr	r2, [pc, #52]	; (8003994 <HAL_TIM_Base_MspDeInit+0x9c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d10c      	bne.n	800397e <HAL_TIM_Base_MspDeInit+0x86>
    __HAL_RCC_TIM5_CLK_DISABLE();
 8003964:	4b08      	ldr	r3, [pc, #32]	; (8003988 <HAL_TIM_Base_MspDeInit+0x90>)
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	4a07      	ldr	r2, [pc, #28]	; (8003988 <HAL_TIM_Base_MspDeInit+0x90>)
 800396a:	f023 0308 	bic.w	r3, r3, #8
 800396e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, PDCF_IC_Pin|PDCR_IC_Pin);
 8003970:	2103      	movs	r1, #3
 8003972:	4809      	ldr	r0, [pc, #36]	; (8003998 <HAL_TIM_Base_MspDeInit+0xa0>)
 8003974:	f002 f968 	bl	8005c48 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(TIM5_IRQn);
 8003978:	2032      	movs	r0, #50	; 0x32
 800397a:	f001 f93a 	bl	8004bf2 <HAL_NVIC_DisableIRQ>
}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	40023800 	.word	0x40023800
 800398c:	40000400 	.word	0x40000400
 8003990:	40000800 	.word	0x40000800
 8003994:	40000c00 	.word	0x40000c00
 8003998:	40020000 	.word	0x40020000

0800399c <HAL_UART_MspInit>:
  /* USER CODE END USART1_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08a      	sub	sp, #40	; 0x28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a4:	f107 0314 	add.w	r3, r7, #20
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	605a      	str	r2, [r3, #4]
 80039ae:	609a      	str	r2, [r3, #8]
 80039b0:	60da      	str	r2, [r3, #12]
 80039b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a19      	ldr	r2, [pc, #100]	; (8003a20 <HAL_UART_MspInit+0x84>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d12c      	bne.n	8003a18 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80039be:	2300      	movs	r3, #0
 80039c0:	613b      	str	r3, [r7, #16]
 80039c2:	4b18      	ldr	r3, [pc, #96]	; (8003a24 <HAL_UART_MspInit+0x88>)
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	4a17      	ldr	r2, [pc, #92]	; (8003a24 <HAL_UART_MspInit+0x88>)
 80039c8:	f043 0310 	orr.w	r3, r3, #16
 80039cc:	6453      	str	r3, [r2, #68]	; 0x44
 80039ce:	4b15      	ldr	r3, [pc, #84]	; (8003a24 <HAL_UART_MspInit+0x88>)
 80039d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d2:	f003 0310 	and.w	r3, r3, #16
 80039d6:	613b      	str	r3, [r7, #16]
 80039d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039da:	2300      	movs	r3, #0
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	4b11      	ldr	r3, [pc, #68]	; (8003a24 <HAL_UART_MspInit+0x88>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	4a10      	ldr	r2, [pc, #64]	; (8003a24 <HAL_UART_MspInit+0x88>)
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ea:	4b0e      	ldr	r3, [pc, #56]	; (8003a24 <HAL_UART_MspInit+0x88>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80039f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80039fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fc:	2302      	movs	r3, #2
 80039fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a00:	2300      	movs	r3, #0
 8003a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a04:	2303      	movs	r3, #3
 8003a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a08:	2307      	movs	r3, #7
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a0c:	f107 0314 	add.w	r3, r7, #20
 8003a10:	4619      	mov	r1, r3
 8003a12:	4805      	ldr	r0, [pc, #20]	; (8003a28 <HAL_UART_MspInit+0x8c>)
 8003a14:	f001 ff94 	bl	8005940 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003a18:	bf00      	nop
 8003a1a:	3728      	adds	r7, #40	; 0x28
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40011000 	.word	0x40011000
 8003a24:	40023800 	.word	0x40023800
 8003a28:	40020000 	.word	0x40020000

08003a2c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a0a      	ldr	r2, [pc, #40]	; (8003a64 <HAL_UART_MspDeInit+0x38>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d10d      	bne.n	8003a5a <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003a3e:	4b0a      	ldr	r3, [pc, #40]	; (8003a68 <HAL_UART_MspDeInit+0x3c>)
 8003a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a42:	4a09      	ldr	r2, [pc, #36]	; (8003a68 <HAL_UART_MspDeInit+0x3c>)
 8003a44:	f023 0310 	bic.w	r3, r3, #16
 8003a48:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8003a4a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003a4e:	4807      	ldr	r0, [pc, #28]	; (8003a6c <HAL_UART_MspDeInit+0x40>)
 8003a50:	f002 f8fa 	bl	8005c48 <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003a54:	2025      	movs	r0, #37	; 0x25
 8003a56:	f001 f8cc 	bl	8004bf2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8003a5a:	bf00      	nop
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40011000 	.word	0x40011000
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	40020000 	.word	0x40020000

08003a70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003a70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003aa8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a74:	480d      	ldr	r0, [pc, #52]	; (8003aac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003a76:	490e      	ldr	r1, [pc, #56]	; (8003ab0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003a78:	4a0e      	ldr	r2, [pc, #56]	; (8003ab4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a7c:	e002      	b.n	8003a84 <LoopCopyDataInit>

08003a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a82:	3304      	adds	r3, #4

08003a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a88:	d3f9      	bcc.n	8003a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a8a:	4a0b      	ldr	r2, [pc, #44]	; (8003ab8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003a8c:	4c0b      	ldr	r4, [pc, #44]	; (8003abc <LoopFillZerobss+0x26>)
  movs r3, #0
 8003a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a90:	e001      	b.n	8003a96 <LoopFillZerobss>

08003a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a94:	3204      	adds	r2, #4

08003a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a98:	d3fb      	bcc.n	8003a92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a9a:	f7ff fde9 	bl	8003670 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a9e:	f00a ffb5 	bl	800ea0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003aa2:	f7fd f915 	bl	8000cd0 <main>
  bx  lr    
 8003aa6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003aa8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ab0:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8003ab4:	0800f3ac 	.word	0x0800f3ac
  ldr r2, =_sbss
 8003ab8:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8003abc:	2000a774 	.word	0x2000a774

08003ac0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ac0:	e7fe      	b.n	8003ac0 <DMA1_Stream0_IRQHandler>

08003ac2 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b084      	sub	sp, #16
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d104      	bne.n	8003ada <stm32_lock_acquire+0x18>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ad0:	b672      	cpsid	i
}
 8003ad2:	bf00      	nop
 8003ad4:	f00a ff64 	bl	800e9a0 <Error_Handler>
 8003ad8:	e7fe      	b.n	8003ad8 <stm32_lock_acquire+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ada:	f3ef 8305 	mrs	r3, IPSR
 8003ade:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
  STM32_LOCK_BLOCK_IF_INTERRUPT_CONTEXT();
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d004      	beq.n	8003af0 <stm32_lock_acquire+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8003ae6:	b672      	cpsid	i
}
 8003ae8:	bf00      	nop
 8003aea:	f00a ff59 	bl	800e9a0 <Error_Handler>
 8003aee:	e7fe      	b.n	8003aee <stm32_lock_acquire+0x2c>
  vTaskSuspendAll();
 8003af0:	f008 fbd2 	bl	800c298 <vTaskSuspendAll>
}
 8003af4:	bf00      	nop
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d104      	bne.n	8003b14 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003b0a:	b672      	cpsid	i
}
 8003b0c:	bf00      	nop
 8003b0e:	f00a ff47 	bl	800e9a0 <Error_Handler>
 8003b12:	e7fe      	b.n	8003b12 <stm32_lock_release+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b14:	f3ef 8305 	mrs	r3, IPSR
 8003b18:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
  STM32_LOCK_BLOCK_IF_INTERRUPT_CONTEXT();
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d004      	beq.n	8003b2a <stm32_lock_release+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8003b20:	b672      	cpsid	i
}
 8003b22:	bf00      	nop
 8003b24:	f00a ff3c 	bl	800e9a0 <Error_Handler>
 8003b28:	e7fe      	b.n	8003b28 <stm32_lock_release+0x2c>
  xTaskResumeAll();
 8003b2a:	f008 fbfb 	bl	800c324 <xTaskResumeAll>
}
 8003b2e:	bf00      	nop
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b082      	sub	sp, #8
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d104      	bne.n	8003b4e <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003b44:	b672      	cpsid	i
}
 8003b46:	bf00      	nop
 8003b48:	f00a ff2a 	bl	800e9a0 <Error_Handler>
 8003b4c:	e7fe      	b.n	8003b4c <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff ffb6 	bl	8003ac2 <stm32_lock_acquire>
}
 8003b56:	bf00      	nop
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b082      	sub	sp, #8
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d104      	bne.n	8003b76 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003b6c:	b672      	cpsid	i
}
 8003b6e:	bf00      	nop
 8003b70:	f00a ff16 	bl	800e9a0 <Error_Handler>
 8003b74:	e7fe      	b.n	8003b74 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff ffbf 	bl	8003afc <stm32_lock_release>
}
 8003b7e:	bf00      	nop
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <Dem_MainFunction>:
/***********************************************************************************
* Function: Dem_MainFunction													   *
* Description: Module main function.									 		   *
************************************************************************************/
VOID Dem_MainFunction()
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	af00      	add	r7, sp, #0
	Dem_ProcessFault();
 8003b8a:	f000 f803 	bl	8003b94 <Dem_ProcessFault>
}
 8003b8e:	bf00      	nop
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <Dem_ProcessFault>:
/***********************************************************************************
* Function: Dem_ProcessFault													   *
* Description: Process fault from application.							 		   *
************************************************************************************/
VOID Dem_ProcessFault()
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelFour != STD_LOW || Rte_P_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState == STD_LOW)
 8003b98:	4b0d      	ldr	r3, [pc, #52]	; (8003bd0 <Dem_ProcessFault+0x3c>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d103      	bne.n	8003ba8 <Dem_ProcessFault+0x14>
 8003ba0:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <Dem_ProcessFault+0x40>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d102      	bne.n	8003bae <Dem_ProcessFault+0x1a>
	{
		Dem_DtcArray[POSITION_DTC_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION] = STD_LOW;
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <Dem_ProcessFault+0x44>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	709a      	strb	r2, [r3, #2]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelThree != STD_LOW || Rte_P_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState == STD_LOW)
 8003bae:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <Dem_ProcessFault+0x48>)
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d103      	bne.n	8003bbe <Dem_ProcessFault+0x2a>
 8003bb6:	4b07      	ldr	r3, [pc, #28]	; (8003bd4 <Dem_ProcessFault+0x40>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d102      	bne.n	8003bc4 <Dem_ProcessFault+0x30>
	{
		Dem_DtcArray[POSITION_DTC_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION] = STD_LOW;
 8003bbe:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <Dem_ProcessFault+0x44>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	70da      	strb	r2, [r3, #3]
	}
	else
	{
		/* do nothing */
	}
}
 8003bc4:	bf00      	nop
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	20000705 	.word	0x20000705
 8003bd4:	200000f4 	.word	0x200000f4
 8003bd8:	200006a8 	.word	0x200006a8
 8003bdc:	200006f5 	.word	0x200006f5

08003be0 <Dem_ReceiveFault>:
/***********************************************************************************
* Function: Dem_ReceiveFault													   *
* Description: Receives fault from application.							 		   *
************************************************************************************/
VOID Dem_ReceiveFault(uint8 faultValue)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	4603      	mov	r3, r0
 8003be8:	71fb      	strb	r3, [r7, #7]
	switch(faultValue)
 8003bea:	79fb      	ldrb	r3, [r7, #7]
 8003bec:	2b99      	cmp	r3, #153	; 0x99
 8003bee:	d070      	beq.n	8003cd2 <Dem_ReceiveFault+0xf2>
 8003bf0:	2b99      	cmp	r3, #153	; 0x99
 8003bf2:	dc72      	bgt.n	8003cda <Dem_ReceiveFault+0xfa>
 8003bf4:	2b56      	cmp	r3, #86	; 0x56
 8003bf6:	d068      	beq.n	8003cca <Dem_ReceiveFault+0xea>
 8003bf8:	2b56      	cmp	r3, #86	; 0x56
 8003bfa:	dc6e      	bgt.n	8003cda <Dem_ReceiveFault+0xfa>
 8003bfc:	2b22      	cmp	r3, #34	; 0x22
 8003bfe:	dc49      	bgt.n	8003c94 <Dem_ReceiveFault+0xb4>
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	db6a      	blt.n	8003cda <Dem_ReceiveFault+0xfa>
 8003c04:	3b02      	subs	r3, #2
 8003c06:	2b20      	cmp	r3, #32
 8003c08:	d867      	bhi.n	8003cda <Dem_ReceiveFault+0xfa>
 8003c0a:	a201      	add	r2, pc, #4	; (adr r2, 8003c10 <Dem_ReceiveFault+0x30>)
 8003c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c10:	08003cab 	.word	0x08003cab
 8003c14:	08003c9b 	.word	0x08003c9b
 8003c18:	08003cdb 	.word	0x08003cdb
 8003c1c:	08003cdb 	.word	0x08003cdb
 8003c20:	08003cdb 	.word	0x08003cdb
 8003c24:	08003cdb 	.word	0x08003cdb
 8003c28:	08003cdb 	.word	0x08003cdb
 8003c2c:	08003cdb 	.word	0x08003cdb
 8003c30:	08003cdb 	.word	0x08003cdb
 8003c34:	08003cdb 	.word	0x08003cdb
 8003c38:	08003cdb 	.word	0x08003cdb
 8003c3c:	08003cdb 	.word	0x08003cdb
 8003c40:	08003cdb 	.word	0x08003cdb
 8003c44:	08003cdb 	.word	0x08003cdb
 8003c48:	08003cdb 	.word	0x08003cdb
 8003c4c:	08003cdb 	.word	0x08003cdb
 8003c50:	08003cb3 	.word	0x08003cb3
 8003c54:	08003ca3 	.word	0x08003ca3
 8003c58:	08003cdb 	.word	0x08003cdb
 8003c5c:	08003cdb 	.word	0x08003cdb
 8003c60:	08003cdb 	.word	0x08003cdb
 8003c64:	08003cdb 	.word	0x08003cdb
 8003c68:	08003cdb 	.word	0x08003cdb
 8003c6c:	08003cdb 	.word	0x08003cdb
 8003c70:	08003cdb 	.word	0x08003cdb
 8003c74:	08003cdb 	.word	0x08003cdb
 8003c78:	08003cdb 	.word	0x08003cdb
 8003c7c:	08003cdb 	.word	0x08003cdb
 8003c80:	08003cdb 	.word	0x08003cdb
 8003c84:	08003cdb 	.word	0x08003cdb
 8003c88:	08003cdb 	.word	0x08003cdb
 8003c8c:	08003cdb 	.word	0x08003cdb
 8003c90:	08003cbb 	.word	0x08003cbb
 8003c94:	2b35      	cmp	r3, #53	; 0x35
 8003c96:	d014      	beq.n	8003cc2 <Dem_ReceiveFault+0xe2>
			break;
		case DTC_PERIPHERAL_ERROR:
			Dem_DtcArray[POSITION_DTC_PERIPHERAL_ERROR] = DTC_PERIPHERAL_ERROR;
			break;
		default:
			break;
 8003c98:	e01f      	b.n	8003cda <Dem_ReceiveFault+0xfa>
			Dem_DtcArray[POSITION_DTC_LIGHT_SENSOR_MALFUNCTION] = DTC_LIGHT_SENSOR_MALFUNCTION;
 8003c9a:	4b13      	ldr	r3, [pc, #76]	; (8003ce8 <Dem_ReceiveFault+0x108>)
 8003c9c:	2203      	movs	r2, #3
 8003c9e:	701a      	strb	r2, [r3, #0]
			break;
 8003ca0:	e01c      	b.n	8003cdc <Dem_ReceiveFault+0xfc>
			Dem_DtcArray[POSITION_DTC_VIBRATION_SENSOR_MALFUNCTION] = DTC_VIBRATION_SENSOR_MALFUNCTION;
 8003ca2:	4b11      	ldr	r3, [pc, #68]	; (8003ce8 <Dem_ReceiveFault+0x108>)
 8003ca4:	2213      	movs	r2, #19
 8003ca6:	705a      	strb	r2, [r3, #1]
			break;
 8003ca8:	e018      	b.n	8003cdc <Dem_ReceiveFault+0xfc>
			Dem_DtcArray[POSITION_DTC_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION] = DTC_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION;
 8003caa:	4b0f      	ldr	r3, [pc, #60]	; (8003ce8 <Dem_ReceiveFault+0x108>)
 8003cac:	2202      	movs	r2, #2
 8003cae:	709a      	strb	r2, [r3, #2]
			break;
 8003cb0:	e014      	b.n	8003cdc <Dem_ReceiveFault+0xfc>
			Dem_DtcArray[POSITION_DTC_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION] = DTC_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION;
 8003cb2:	4b0d      	ldr	r3, [pc, #52]	; (8003ce8 <Dem_ReceiveFault+0x108>)
 8003cb4:	2212      	movs	r2, #18
 8003cb6:	70da      	strb	r2, [r3, #3]
			break;
 8003cb8:	e010      	b.n	8003cdc <Dem_ReceiveFault+0xfc>
			Dem_DtcArray[POSITION_DTC_BLUETOOTH_MODULE_MALFUNCTION] = DTC_BLUETOOTH_MODULE_MALFUNCTION;
 8003cba:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <Dem_ReceiveFault+0x108>)
 8003cbc:	2222      	movs	r2, #34	; 0x22
 8003cbe:	711a      	strb	r2, [r3, #4]
			break;
 8003cc0:	e00c      	b.n	8003cdc <Dem_ReceiveFault+0xfc>
			Dem_DtcArray[POSITION_DTC_SOFTWARE_RESET] = DTC_SOFTWARE_RESET;
 8003cc2:	4b09      	ldr	r3, [pc, #36]	; (8003ce8 <Dem_ReceiveFault+0x108>)
 8003cc4:	2235      	movs	r2, #53	; 0x35
 8003cc6:	715a      	strb	r2, [r3, #5]
			break;
 8003cc8:	e008      	b.n	8003cdc <Dem_ReceiveFault+0xfc>
			Dem_DtcArray[POSITION_DTC_HARDWARE_RESET] = DTC_HARDWARE_RESET;
 8003cca:	4b07      	ldr	r3, [pc, #28]	; (8003ce8 <Dem_ReceiveFault+0x108>)
 8003ccc:	2256      	movs	r2, #86	; 0x56
 8003cce:	719a      	strb	r2, [r3, #6]
			break;
 8003cd0:	e004      	b.n	8003cdc <Dem_ReceiveFault+0xfc>
			Dem_DtcArray[POSITION_DTC_PERIPHERAL_ERROR] = DTC_PERIPHERAL_ERROR;
 8003cd2:	4b05      	ldr	r3, [pc, #20]	; (8003ce8 <Dem_ReceiveFault+0x108>)
 8003cd4:	2299      	movs	r2, #153	; 0x99
 8003cd6:	71da      	strb	r2, [r3, #7]
			break;
 8003cd8:	e000      	b.n	8003cdc <Dem_ReceiveFault+0xfc>
			break;
 8003cda:	bf00      	nop
	}
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	200006a8 	.word	0x200006a8

08003cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003cf0:	4b0e      	ldr	r3, [pc, #56]	; (8003d2c <HAL_Init+0x40>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a0d      	ldr	r2, [pc, #52]	; (8003d2c <HAL_Init+0x40>)
 8003cf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003cfc:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <HAL_Init+0x40>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a0a      	ldr	r2, [pc, #40]	; (8003d2c <HAL_Init+0x40>)
 8003d02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d08:	4b08      	ldr	r3, [pc, #32]	; (8003d2c <HAL_Init+0x40>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a07      	ldr	r2, [pc, #28]	; (8003d2c <HAL_Init+0x40>)
 8003d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d14:	2003      	movs	r0, #3
 8003d16:	f000 ff37 	bl	8004b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d1a:	200f      	movs	r0, #15
 8003d1c:	f7ff faa6 	bl	800326c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d20:	f7ff fa5a 	bl	80031d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40023c00 	.word	0x40023c00

08003d30 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8003d34:	4b13      	ldr	r3, [pc, #76]	; (8003d84 <HAL_DeInit+0x54>)
 8003d36:	f04f 32ff 	mov.w	r2, #4294967295
 8003d3a:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8003d3c:	4b11      	ldr	r3, [pc, #68]	; (8003d84 <HAL_DeInit+0x54>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8003d42:	4b10      	ldr	r3, [pc, #64]	; (8003d84 <HAL_DeInit+0x54>)
 8003d44:	f04f 32ff 	mov.w	r2, #4294967295
 8003d48:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8003d4a:	4b0e      	ldr	r3, [pc, #56]	; (8003d84 <HAL_DeInit+0x54>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8003d50:	4b0c      	ldr	r3, [pc, #48]	; (8003d84 <HAL_DeInit+0x54>)
 8003d52:	f04f 32ff 	mov.w	r2, #4294967295
 8003d56:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8003d58:	4b0a      	ldr	r3, [pc, #40]	; (8003d84 <HAL_DeInit+0x54>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8003d5e:	4b09      	ldr	r3, [pc, #36]	; (8003d84 <HAL_DeInit+0x54>)
 8003d60:	f04f 32ff 	mov.w	r2, #4294967295
 8003d64:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8003d66:	4b07      	ldr	r3, [pc, #28]	; (8003d84 <HAL_DeInit+0x54>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8003d6c:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <HAL_DeInit+0x54>)
 8003d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d72:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8003d74:	4b03      	ldr	r3, [pc, #12]	; (8003d84 <HAL_DeInit+0x54>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8003d7a:	f000 f805 	bl	8003d88 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40023800 	.word	0x40023800

08003d88 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8003d8c:	bf00      	nop
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
	...

08003d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d9c:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <HAL_IncTick+0x20>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	461a      	mov	r2, r3
 8003da2:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <HAL_IncTick+0x24>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4413      	add	r3, r2
 8003da8:	4a04      	ldr	r2, [pc, #16]	; (8003dbc <HAL_IncTick+0x24>)
 8003daa:	6013      	str	r3, [r2, #0]
}
 8003dac:	bf00      	nop
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	20000024 	.word	0x20000024
 8003dbc:	200006b0 	.word	0x200006b0

08003dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8003dc4:	4b03      	ldr	r3, [pc, #12]	; (8003dd4 <HAL_GetTick+0x14>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	200006b0 	.word	0x200006b0

08003dd8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003de0:	2300      	movs	r3, #0
 8003de2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e04a      	b.n	8003e84 <HAL_ADC_Init+0xac>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d120      	bne.n	8003e38 <HAL_ADC_Init+0x60>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a24      	ldr	r2, [pc, #144]	; (8003e8c <HAL_ADC_Init+0xb4>)
 8003dfa:	649a      	str	r2, [r3, #72]	; 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a24      	ldr	r2, [pc, #144]	; (8003e90 <HAL_ADC_Init+0xb8>)
 8003e00:	64da      	str	r2, [r3, #76]	; 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a23      	ldr	r2, [pc, #140]	; (8003e94 <HAL_ADC_Init+0xbc>)
 8003e06:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a23      	ldr	r2, [pc, #140]	; (8003e98 <HAL_ADC_Init+0xc0>)
 8003e0c:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a22      	ldr	r2, [pc, #136]	; (8003e9c <HAL_ADC_Init+0xc4>)
 8003e12:	659a      	str	r2, [r3, #88]	; 0x58
    if (hadc->MspInitCallback == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d102      	bne.n	8003e22 <HAL_ADC_Init+0x4a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a20      	ldr	r2, [pc, #128]	; (8003ea0 <HAL_ADC_Init+0xc8>)
 8003e20:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3c:	f003 0310 	and.w	r3, r3, #16
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d118      	bne.n	8003e76 <HAL_ADC_Init+0x9e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003e4c:	f023 0302 	bic.w	r3, r3, #2
 8003e50:	f043 0202 	orr.w	r2, r3, #2
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 fc21 	bl	80046a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e68:	f023 0303 	bic.w	r3, r3, #3
 8003e6c:	f043 0201 	orr.w	r2, r3, #1
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	641a      	str	r2, [r3, #64]	; 0x40
 8003e74:	e001      	b.n	8003e7a <HAL_ADC_Init+0xa2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	08009421 	.word	0x08009421
 8003e90:	08004325 	.word	0x08004325
 8003e94:	08004339 	.word	0x08004339
 8003e98:	0800945d 	.word	0x0800945d
 8003e9c:	080049a5 	.word	0x080049a5
 8003ea0:	08002835 	.word	0x08002835

08003ea4 <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e02a      	b.n	8003f10 <HAL_ADC_DeInit+0x6c>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	f043 0202 	orr.w	r2, r3, #2
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0201 	bic.w	r2, r2, #1
 8003ed4:	609a      	str	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d110      	bne.n	8003f06 <HAL_ADC_DeInit+0x62>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  if (hadc->MspDeInitCallback == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d102      	bne.n	8003ef2 <HAL_ADC_DeInit+0x4e>
  {
    hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit  */
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a0a      	ldr	r2, [pc, #40]	; (8003f18 <HAL_ADC_DeInit+0x74>)
 8003ef0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	4798      	blx	r3
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	08002939 	.word	0x08002939

08003f1c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	2300      	movs	r3, #0
 8003f2a:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	f003 0320 	and.w	r3, r3, #32
 8003f4a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d04a      	beq.n	8003fe8 <HAL_ADC_IRQHandler+0xcc>
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d047      	beq.n	8003fe8 <HAL_ADC_IRQHandler+0xcc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5c:	f003 0310 	and.w	r3, r3, #16
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d105      	bne.n	8003f70 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f68:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d12b      	bne.n	8003fd6 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d127      	bne.n	8003fd6 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d006      	beq.n	8003fa2 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d119      	bne.n	8003fd6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0220 	bic.w	r2, r2, #32
 8003fb0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d105      	bne.n	8003fd6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f043 0201 	orr.w	r2, r3, #1
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	4798      	blx	r3
#else
    HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f06f 0212 	mvn.w	r2, #18
 8003fe6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d058      	beq.n	80040b0 <HAL_ADC_IRQHandler+0x194>
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d055      	beq.n	80040b0 <HAL_ADC_IRQHandler+0x194>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004008:	f003 0310 	and.w	r3, r3, #16
 800400c:	2b00      	cmp	r3, #0
 800400e:	d105      	bne.n	800401c <HAL_ADC_IRQHandler+0x100>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004014:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d139      	bne.n	800409e <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004030:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004034:	2b00      	cmp	r3, #0
 8004036:	d006      	beq.n	8004046 <HAL_ADC_IRQHandler+0x12a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004042:	2b00      	cmp	r3, #0
 8004044:	d12b      	bne.n	800409e <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004050:	2b00      	cmp	r3, #0
 8004052:	d124      	bne.n	800409e <HAL_ADC_IRQHandler+0x182>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800405e:	2b00      	cmp	r3, #0
 8004060:	d11d      	bne.n	800409e <HAL_ADC_IRQHandler+0x182>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004066:	2b00      	cmp	r3, #0
 8004068:	d119      	bne.n	800409e <HAL_ADC_IRQHandler+0x182>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004078:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408e:	2b00      	cmp	r3, #0
 8004090:	d105      	bne.n	800409e <HAL_ADC_IRQHandler+0x182>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	f043 0201 	orr.w	r2, r3, #1
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f06f 020c 	mvn.w	r2, #12
 80040ae:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040be:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d018      	beq.n	80040f8 <HAL_ADC_IRQHandler+0x1dc>
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d015      	beq.n	80040f8 <HAL_ADC_IRQHandler+0x1dc>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d10e      	bne.n	80040f8 <HAL_ADC_IRQHandler+0x1dc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f06f 0201 	mvn.w	r2, #1
 80040f6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004106:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d016      	beq.n	800413c <HAL_ADC_IRQHandler+0x220>
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d013      	beq.n	800413c <HAL_ADC_IRQHandler+0x220>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004118:	f043 0202 	orr.w	r2, r3, #2
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f06f 0220 	mvn.w	r2, #32
 8004128:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	4798      	blx	r3
#else
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f06f 0220 	mvn.w	r2, #32
 800413a:	601a      	str	r2, [r3, #0]
  }
}
 800413c:	bf00      	nop
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800415a:	2b01      	cmp	r3, #1
 800415c:	d101      	bne.n	8004162 <HAL_ADC_Start_DMA+0x1e>
 800415e:	2302      	movs	r3, #2
 8004160:	e0ce      	b.n	8004300 <HAL_ADC_Start_DMA+0x1bc>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	2b01      	cmp	r3, #1
 8004176:	d018      	beq.n	80041aa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689a      	ldr	r2, [r3, #8]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f042 0201 	orr.w	r2, r2, #1
 8004186:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004188:	4b5f      	ldr	r3, [pc, #380]	; (8004308 <HAL_ADC_Start_DMA+0x1c4>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a5f      	ldr	r2, [pc, #380]	; (800430c <HAL_ADC_Start_DMA+0x1c8>)
 800418e:	fba2 2303 	umull	r2, r3, r2, r3
 8004192:	0c9a      	lsrs	r2, r3, #18
 8004194:	4613      	mov	r3, r2
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	4413      	add	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800419c:	e002      	b.n	80041a4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	3b01      	subs	r3, #1
 80041a2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1f9      	bne.n	800419e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041b8:	d107      	bne.n	80041ca <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	f040 8086 	bne.w	80042e6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80041e2:	f023 0301 	bic.w	r3, r3, #1
 80041e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d007      	beq.n	800420c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004200:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004204:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004210:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004218:	d106      	bne.n	8004228 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421e:	f023 0206 	bic.w	r2, r3, #6
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	645a      	str	r2, [r3, #68]	; 0x44
 8004226:	e002      	b.n	800422e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004236:	4b36      	ldr	r3, [pc, #216]	; (8004310 <HAL_ADC_Start_DMA+0x1cc>)
 8004238:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423e:	4a35      	ldr	r2, [pc, #212]	; (8004314 <HAL_ADC_Start_DMA+0x1d0>)
 8004240:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004246:	4a34      	ldr	r2, [pc, #208]	; (8004318 <HAL_ADC_Start_DMA+0x1d4>)
 8004248:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424e:	4a33      	ldr	r2, [pc, #204]	; (800431c <HAL_ADC_Start_DMA+0x1d8>)
 8004250:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800425a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800426a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689a      	ldr	r2, [r3, #8]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800427a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	334c      	adds	r3, #76	; 0x4c
 8004286:	4619      	mov	r1, r3
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f000 fe5c 	bl	8004f48 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f003 031f 	and.w	r3, r3, #31
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10f      	bne.n	80042bc <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d129      	bne.n	80042fe <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689a      	ldr	r2, [r3, #8]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80042b8:	609a      	str	r2, [r3, #8]
 80042ba:	e020      	b.n	80042fe <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a17      	ldr	r2, [pc, #92]	; (8004320 <HAL_ADC_Start_DMA+0x1dc>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d11b      	bne.n	80042fe <HAL_ADC_Start_DMA+0x1ba>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d114      	bne.n	80042fe <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689a      	ldr	r2, [r3, #8]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80042e2:	609a      	str	r2, [r3, #8]
 80042e4:	e00b      	b.n	80042fe <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	f043 0210 	orr.w	r2, r3, #16
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f6:	f043 0201 	orr.w	r2, r3, #1
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3718      	adds	r7, #24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	2000001c 	.word	0x2000001c
 800430c:	431bde83 	.word	0x431bde83
 8004310:	40012300 	.word	0x40012300
 8004314:	08004899 	.word	0x08004899
 8004318:	08004957 	.word	0x08004957
 800431c:	08004975 	.word	0x08004975
 8004320:	40012000 	.word	0x40012000

08004324 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004356:	2300      	movs	r3, #0
 8004358:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004360:	2b01      	cmp	r3, #1
 8004362:	d101      	bne.n	8004368 <HAL_ADC_ConfigChannel+0x1c>
 8004364:	2302      	movs	r3, #2
 8004366:	e113      	b.n	8004590 <HAL_ADC_ConfigChannel+0x244>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b09      	cmp	r3, #9
 8004376:	d925      	bls.n	80043c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68d9      	ldr	r1, [r3, #12]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	b29b      	uxth	r3, r3
 8004384:	461a      	mov	r2, r3
 8004386:	4613      	mov	r3, r2
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	4413      	add	r3, r2
 800438c:	3b1e      	subs	r3, #30
 800438e:	2207      	movs	r2, #7
 8004390:	fa02 f303 	lsl.w	r3, r2, r3
 8004394:	43da      	mvns	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	400a      	ands	r2, r1
 800439c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68d9      	ldr	r1, [r3, #12]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	4618      	mov	r0, r3
 80043b0:	4603      	mov	r3, r0
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	4403      	add	r3, r0
 80043b6:	3b1e      	subs	r3, #30
 80043b8:	409a      	lsls	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	60da      	str	r2, [r3, #12]
 80043c2:	e022      	b.n	800440a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6919      	ldr	r1, [r3, #16]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	461a      	mov	r2, r3
 80043d2:	4613      	mov	r3, r2
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	4413      	add	r3, r2
 80043d8:	2207      	movs	r2, #7
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	43da      	mvns	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	400a      	ands	r2, r1
 80043e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6919      	ldr	r1, [r3, #16]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	689a      	ldr	r2, [r3, #8]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	4618      	mov	r0, r3
 80043fa:	4603      	mov	r3, r0
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	4403      	add	r3, r0
 8004400:	409a      	lsls	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	2b06      	cmp	r3, #6
 8004410:	d824      	bhi.n	800445c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	4613      	mov	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	3b05      	subs	r3, #5
 8004424:	221f      	movs	r2, #31
 8004426:	fa02 f303 	lsl.w	r3, r2, r3
 800442a:	43da      	mvns	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	400a      	ands	r2, r1
 8004432:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	b29b      	uxth	r3, r3
 8004440:	4618      	mov	r0, r3
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	4613      	mov	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4413      	add	r3, r2
 800444c:	3b05      	subs	r3, #5
 800444e:	fa00 f203 	lsl.w	r2, r0, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	635a      	str	r2, [r3, #52]	; 0x34
 800445a:	e04c      	b.n	80044f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2b0c      	cmp	r3, #12
 8004462:	d824      	bhi.n	80044ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	4613      	mov	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4413      	add	r3, r2
 8004474:	3b23      	subs	r3, #35	; 0x23
 8004476:	221f      	movs	r2, #31
 8004478:	fa02 f303 	lsl.w	r3, r2, r3
 800447c:	43da      	mvns	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	400a      	ands	r2, r1
 8004484:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	b29b      	uxth	r3, r3
 8004492:	4618      	mov	r0, r3
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	4613      	mov	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	3b23      	subs	r3, #35	; 0x23
 80044a0:	fa00 f203 	lsl.w	r2, r0, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	631a      	str	r2, [r3, #48]	; 0x30
 80044ac:	e023      	b.n	80044f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	4613      	mov	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	3b41      	subs	r3, #65	; 0x41
 80044c0:	221f      	movs	r2, #31
 80044c2:	fa02 f303 	lsl.w	r3, r2, r3
 80044c6:	43da      	mvns	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	400a      	ands	r2, r1
 80044ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	b29b      	uxth	r3, r3
 80044dc:	4618      	mov	r0, r3
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	4613      	mov	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	3b41      	subs	r3, #65	; 0x41
 80044ea:	fa00 f203 	lsl.w	r2, r0, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044f6:	4b29      	ldr	r3, [pc, #164]	; (800459c <HAL_ADC_ConfigChannel+0x250>)
 80044f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a28      	ldr	r2, [pc, #160]	; (80045a0 <HAL_ADC_ConfigChannel+0x254>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d10f      	bne.n	8004524 <HAL_ADC_ConfigChannel+0x1d8>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b12      	cmp	r3, #18
 800450a:	d10b      	bne.n	8004524 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a1d      	ldr	r2, [pc, #116]	; (80045a0 <HAL_ADC_ConfigChannel+0x254>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d12b      	bne.n	8004586 <HAL_ADC_ConfigChannel+0x23a>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a1c      	ldr	r2, [pc, #112]	; (80045a4 <HAL_ADC_ConfigChannel+0x258>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d003      	beq.n	8004540 <HAL_ADC_ConfigChannel+0x1f4>
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b11      	cmp	r3, #17
 800453e:	d122      	bne.n	8004586 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a11      	ldr	r2, [pc, #68]	; (80045a4 <HAL_ADC_ConfigChannel+0x258>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d111      	bne.n	8004586 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004562:	4b11      	ldr	r3, [pc, #68]	; (80045a8 <HAL_ADC_ConfigChannel+0x25c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a11      	ldr	r2, [pc, #68]	; (80045ac <HAL_ADC_ConfigChannel+0x260>)
 8004568:	fba2 2303 	umull	r2, r3, r2, r3
 800456c:	0c9a      	lsrs	r2, r3, #18
 800456e:	4613      	mov	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004578:	e002      	b.n	8004580 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	3b01      	subs	r3, #1
 800457e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1f9      	bne.n	800457a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3714      	adds	r7, #20
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	40012300 	.word	0x40012300
 80045a0:	40012000 	.word	0x40012000
 80045a4:	10000012 	.word	0x10000012
 80045a8:	2000001c 	.word	0x2000001c
 80045ac:	431bde83 	.word	0x431bde83

080045b0 <HAL_ADC_AnalogWDGConfig>:
  * @param  AnalogWDGConfig  pointer to an ADC_AnalogWDGConfTypeDef structure 
  *         that contains the configuration information of ADC analog watchdog.
  * @retval HAL status	  
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
#endif /* USE_FULL_ASSERT  */
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d101      	bne.n	80045c8 <HAL_ADC_AnalogWDGConfig+0x18>
 80045c4:	2302      	movs	r3, #2
 80045c6:	e04d      	b.n	8004664 <HAL_ADC_AnalogWDGConfig+0xb4>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  if(AnalogWDGConfig->ITMode == ENABLE)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	7c1b      	ldrb	r3, [r3, #16]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d108      	bne.n	80045ea <HAL_ADC_AnalogWDGConfig+0x3a>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045e6:	605a      	str	r2, [r3, #4]
 80045e8:	e007      	b.n	80045fa <HAL_ADC_AnalogWDGConfig+0x4a>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045f8:	605a      	str	r2, [r3, #4]
  }
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	6812      	ldr	r2, [r2, #0]
 8004604:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004608:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800460c:	6053      	str	r3, [r2, #4]
  
  /* Set the analog watchdog enable mode */
  hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6859      	ldr	r1, [r3, #4]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	605a      	str	r2, [r3, #4]
  
  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	6852      	ldr	r2, [r2, #4]
 8004628:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	6892      	ldr	r2, [r2, #8]
 8004632:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Clear the Analog watchdog channel select bits */
  hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 021f 	bic.w	r2, r2, #31
 8004642:	605a      	str	r2, [r3, #4]
  
  /* Set the Analog watchdog channel */
  hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	b29b      	uxth	r3, r3
 8004650:	4619      	mov	r1, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <HAL_ADC_GetState>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800467c:	4618      	mov	r0, r3
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_ADC_GetError>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval ADC Error Code
  */
uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  return hadc->ErrorCode;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8004694:	4618      	mov	r0, r3
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046a8:	4b79      	ldr	r3, [pc, #484]	; (8004890 <ADC_Init+0x1f0>)
 80046aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	431a      	orrs	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6859      	ldr	r1, [r3, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	021a      	lsls	r2, r3, #8
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80046f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6859      	ldr	r1, [r3, #4]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	430a      	orrs	r2, r1
 800470a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800471a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6899      	ldr	r1, [r3, #8]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004732:	4a58      	ldr	r2, [pc, #352]	; (8004894 <ADC_Init+0x1f4>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d022      	beq.n	800477e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689a      	ldr	r2, [r3, #8]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004746:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6899      	ldr	r1, [r3, #8]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004768:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6899      	ldr	r1, [r3, #8]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	609a      	str	r2, [r3, #8]
 800477c:	e00f      	b.n	800479e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800478c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800479c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0202 	bic.w	r2, r2, #2
 80047ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6899      	ldr	r1, [r3, #8]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	7e1b      	ldrb	r3, [r3, #24]
 80047b8:	005a      	lsls	r2, r3, #1
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d01b      	beq.n	8004804 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80047ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6859      	ldr	r1, [r3, #4]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	3b01      	subs	r3, #1
 80047f8:	035a      	lsls	r2, r3, #13
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	605a      	str	r2, [r3, #4]
 8004802:	e007      	b.n	8004814 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685a      	ldr	r2, [r3, #4]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004812:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004822:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	3b01      	subs	r3, #1
 8004830:	051a      	lsls	r2, r3, #20
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004848:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6899      	ldr	r1, [r3, #8]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004856:	025a      	lsls	r2, r3, #9
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689a      	ldr	r2, [r3, #8]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800486e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6899      	ldr	r1, [r3, #8]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	029a      	lsls	r2, r3, #10
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	609a      	str	r2, [r3, #8]
}
 8004884:	bf00      	nop
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	40012300 	.word	0x40012300
 8004894:	0f000001 	.word	0x0f000001

08004898 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d13d      	bne.n	800492e <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d12b      	bne.n	8004924 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d127      	bne.n	8004924 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048da:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d006      	beq.n	80048f0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d119      	bne.n	8004924 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 0220 	bic.w	r2, r2, #32
 80048fe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004904:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004910:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d105      	bne.n	8004924 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491c:	f043 0201 	orr.w	r2, r3, #1
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	4798      	blx	r3
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800492c:	e00f      	b.n	800494e <ADC_DMAConvCplt+0xb6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	f003 0310 	and.w	r3, r3, #16
 8004936:	2b00      	cmp	r3, #0
 8004938:	d004      	beq.n	8004944 <ADC_DMAConvCplt+0xac>
      hadc->ErrorCallback(hadc);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	4798      	blx	r3
}
 8004942:	e004      	b.n	800494e <ADC_DMAConvCplt+0xb6>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	4798      	blx	r3
}
 800494e:	bf00      	nop
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b084      	sub	sp, #16
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004962:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800496c:	bf00      	nop
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004980:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2240      	movs	r2, #64	; 0x40
 8004986:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498c:	f043 0204 	orr.w	r2, r3, #4
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800499c:	bf00      	nop
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049c8:	4b0c      	ldr	r3, [pc, #48]	; (80049fc <__NVIC_SetPriorityGrouping+0x44>)
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049d4:	4013      	ands	r3, r2
 80049d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80049e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049ea:	4a04      	ldr	r2, [pc, #16]	; (80049fc <__NVIC_SetPriorityGrouping+0x44>)
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	60d3      	str	r3, [r2, #12]
}
 80049f0:	bf00      	nop
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	e000ed00 	.word	0xe000ed00

08004a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a00:	b480      	push	{r7}
 8004a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a04:	4b04      	ldr	r3, [pc, #16]	; (8004a18 <__NVIC_GetPriorityGrouping+0x18>)
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	0a1b      	lsrs	r3, r3, #8
 8004a0a:	f003 0307 	and.w	r3, r3, #7
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	e000ed00 	.word	0xe000ed00

08004a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	4603      	mov	r3, r0
 8004a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	db0b      	blt.n	8004a46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a2e:	79fb      	ldrb	r3, [r7, #7]
 8004a30:	f003 021f 	and.w	r2, r3, #31
 8004a34:	4907      	ldr	r1, [pc, #28]	; (8004a54 <__NVIC_EnableIRQ+0x38>)
 8004a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a3a:	095b      	lsrs	r3, r3, #5
 8004a3c:	2001      	movs	r0, #1
 8004a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8004a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a46:	bf00      	nop
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	e000e100 	.word	0xe000e100

08004a58 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	4603      	mov	r3, r0
 8004a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	db12      	blt.n	8004a90 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	f003 021f 	and.w	r2, r3, #31
 8004a70:	490a      	ldr	r1, [pc, #40]	; (8004a9c <__NVIC_DisableIRQ+0x44>)
 8004a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a76:	095b      	lsrs	r3, r3, #5
 8004a78:	2001      	movs	r0, #1
 8004a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a7e:	3320      	adds	r3, #32
 8004a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004a84:	f3bf 8f4f 	dsb	sy
}
 8004a88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004a8a:	f3bf 8f6f 	isb	sy
}
 8004a8e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	e000e100 	.word	0xe000e100

08004aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	6039      	str	r1, [r7, #0]
 8004aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	db0a      	blt.n	8004aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	490c      	ldr	r1, [pc, #48]	; (8004aec <__NVIC_SetPriority+0x4c>)
 8004aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004abe:	0112      	lsls	r2, r2, #4
 8004ac0:	b2d2      	uxtb	r2, r2
 8004ac2:	440b      	add	r3, r1
 8004ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ac8:	e00a      	b.n	8004ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	4908      	ldr	r1, [pc, #32]	; (8004af0 <__NVIC_SetPriority+0x50>)
 8004ad0:	79fb      	ldrb	r3, [r7, #7]
 8004ad2:	f003 030f 	and.w	r3, r3, #15
 8004ad6:	3b04      	subs	r3, #4
 8004ad8:	0112      	lsls	r2, r2, #4
 8004ada:	b2d2      	uxtb	r2, r2
 8004adc:	440b      	add	r3, r1
 8004ade:	761a      	strb	r2, [r3, #24]
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	e000e100 	.word	0xe000e100
 8004af0:	e000ed00 	.word	0xe000ed00

08004af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b089      	sub	sp, #36	; 0x24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	f1c3 0307 	rsb	r3, r3, #7
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	bf28      	it	cs
 8004b12:	2304      	movcs	r3, #4
 8004b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	3304      	adds	r3, #4
 8004b1a:	2b06      	cmp	r3, #6
 8004b1c:	d902      	bls.n	8004b24 <NVIC_EncodePriority+0x30>
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	3b03      	subs	r3, #3
 8004b22:	e000      	b.n	8004b26 <NVIC_EncodePriority+0x32>
 8004b24:	2300      	movs	r3, #0
 8004b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b28:	f04f 32ff 	mov.w	r2, #4294967295
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b32:	43da      	mvns	r2, r3
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	401a      	ands	r2, r3
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	fa01 f303 	lsl.w	r3, r1, r3
 8004b46:	43d9      	mvns	r1, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b4c:	4313      	orrs	r3, r2
         );
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3724      	adds	r7, #36	; 0x24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
	...

08004b5c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004b60:	f3bf 8f4f 	dsb	sy
}
 8004b64:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004b66:	4b06      	ldr	r3, [pc, #24]	; (8004b80 <__NVIC_SystemReset+0x24>)
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004b6e:	4904      	ldr	r1, [pc, #16]	; (8004b80 <__NVIC_SystemReset+0x24>)
 8004b70:	4b04      	ldr	r3, [pc, #16]	; (8004b84 <__NVIC_SystemReset+0x28>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b76:	f3bf 8f4f 	dsb	sy
}
 8004b7a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004b7c:	bf00      	nop
 8004b7e:	e7fd      	b.n	8004b7c <__NVIC_SystemReset+0x20>
 8004b80:	e000ed00 	.word	0xe000ed00
 8004b84:	05fa0004 	.word	0x05fa0004

08004b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7ff ff11 	bl	80049b8 <__NVIC_SetPriorityGrouping>
}
 8004b96:	bf00      	nop
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b086      	sub	sp, #24
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	60b9      	str	r1, [r7, #8]
 8004ba8:	607a      	str	r2, [r7, #4]
 8004baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004bac:	2300      	movs	r3, #0
 8004bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004bb0:	f7ff ff26 	bl	8004a00 <__NVIC_GetPriorityGrouping>
 8004bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	68b9      	ldr	r1, [r7, #8]
 8004bba:	6978      	ldr	r0, [r7, #20]
 8004bbc:	f7ff ff9a 	bl	8004af4 <NVIC_EncodePriority>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bc6:	4611      	mov	r1, r2
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7ff ff69 	bl	8004aa0 <__NVIC_SetPriority>
}
 8004bce:	bf00      	nop
 8004bd0:	3718      	adds	r7, #24
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b082      	sub	sp, #8
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	4603      	mov	r3, r0
 8004bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7ff ff19 	bl	8004a1c <__NVIC_EnableIRQ>
}
 8004bea:	bf00      	nop
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b082      	sub	sp, #8
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7ff ff29 	bl	8004a58 <__NVIC_DisableIRQ>
}
 8004c06:	bf00      	nop
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004c12:	f7ff ffa3 	bl	8004b5c <__NVIC_SystemReset>

08004c16 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b082      	sub	sp, #8
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e00e      	b.n	8004c46 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	795b      	ldrb	r3, [r3, #5]
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d105      	bne.n	8004c3e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f7fd fea3 	bl	8002984 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <HAL_CRC_DeInit>:
  * @brief  DeInitialize the CRC peripheral.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b082      	sub	sp, #8
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_CRC_DeInit+0x12>
  {
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e022      	b.n	8004ca6 <HAL_CRC_DeInit+0x58>

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  /* Check the CRC peripheral state */
  if (hcrc->State == HAL_CRC_STATE_BUSY)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	795b      	ldrb	r3, [r3, #5]
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d101      	bne.n	8004c6e <HAL_CRC_DeInit+0x20>
  {
    return HAL_BUSY;
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	e01b      	b.n	8004ca6 <HAL_CRC_DeInit+0x58>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2202      	movs	r2, #2
 8004c72:	715a      	strb	r2, [r3, #5]

  /* Reset CRC calculation unit */
  __HAL_CRC_DR_RESET(hcrc);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689a      	ldr	r2, [r3, #8]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f042 0201 	orr.w	r2, r2, #1
 8004c82:	609a      	str	r2, [r3, #8]

  /* Reset IDR register content */
  CLEAR_BIT(hcrc->Instance->IDR, CRC_IDR_IDR);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	791b      	ldrb	r3, [r3, #4]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	711a      	strb	r2, [r3, #4]

  /* DeInit the low level hardware */
  HAL_CRC_MspDeInit(hcrc);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fd fe98 	bl	80029c8 <HAL_CRC_MspDeInit>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_RESET;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	715a      	strb	r2, [r3, #5]

  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3708      	adds	r7, #8
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b087      	sub	sp, #28
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	60f8      	str	r0, [r7, #12]
 8004cb6:	60b9      	str	r1, [r7, #8]
 8004cb8:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8004cba:	2300      	movs	r3, #0
 8004cbc:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2202      	movs	r2, #2
 8004cc2:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f042 0201 	orr.w	r2, r2, #1
 8004cd2:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	e00a      	b.n	8004cf0 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	441a      	add	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6812      	ldr	r2, [r2, #0]
 8004ce8:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	3301      	adds	r3, #1
 8004cee:	617b      	str	r3, [r7, #20]
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d3f0      	bcc.n	8004cda <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2201      	movs	r2, #1
 8004d04:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8004d06:	693b      	ldr	r3, [r7, #16]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	371c      	adds	r7, #28
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <HAL_CRC_GetState>:
  * @brief  Return the CRC handle state.
  * @param  hcrc CRC handle
  * @retval HAL state
  */
HAL_CRC_StateTypeDef HAL_CRC_GetState(CRC_HandleTypeDef *hcrc)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Return CRC handle state */
  return hcrc->State;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	795b      	ldrb	r3, [r3, #5]
 8004d20:	b2db      	uxtb	r3, r3
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
	...

08004d30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d3c:	f7ff f840 	bl	8003dc0 <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d101      	bne.n	8004d4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e099      	b.n	8004e80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 0201 	bic.w	r2, r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d6c:	e00f      	b.n	8004d8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d6e:	f7ff f827 	bl	8003dc0 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b05      	cmp	r3, #5
 8004d7a:	d908      	bls.n	8004d8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2203      	movs	r2, #3
 8004d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e078      	b.n	8004e80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1e8      	bne.n	8004d6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	4b38      	ldr	r3, [pc, #224]	; (8004e88 <HAL_DMA_Init+0x158>)
 8004da8:	4013      	ands	r3, r2
 8004daa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	2b04      	cmp	r3, #4
 8004de6:	d107      	bne.n	8004df8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df0:	4313      	orrs	r3, r2
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f023 0307 	bic.w	r3, r3, #7
 8004e0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d117      	bne.n	8004e52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00e      	beq.n	8004e52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 fb5f 	bl	80054f8 <DMA_CheckFifoParam>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d008      	beq.n	8004e52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2240      	movs	r2, #64	; 0x40
 8004e44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e016      	b.n	8004e80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 fb16 	bl	800548c <DMA_CalcBaseAndBitshift>
 8004e60:	4603      	mov	r3, r0
 8004e62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e68:	223f      	movs	r2, #63	; 0x3f
 8004e6a:	409a      	lsls	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3718      	adds	r7, #24
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	f010803f 	.word	0xf010803f

08004e8c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e050      	b.n	8004f40 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d101      	bne.n	8004eae <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004eaa:	2302      	movs	r3, #2
 8004eac:	e048      	b.n	8004f40 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 0201 	bic.w	r2, r2, #1
 8004ebc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2200      	movs	r2, #0
 8004edc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2221      	movs	r2, #33	; 0x21
 8004eec:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 facc 	bl	800548c <DMA_CalcBaseAndBitshift>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f20:	223f      	movs	r2, #63	; 0x3f
 8004f22:	409a      	lsls	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f5e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d101      	bne.n	8004f6e <HAL_DMA_Start_IT+0x26>
 8004f6a:	2302      	movs	r3, #2
 8004f6c:	e040      	b.n	8004ff0 <HAL_DMA_Start_IT+0xa8>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d12f      	bne.n	8004fe2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2202      	movs	r2, #2
 8004f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	68b9      	ldr	r1, [r7, #8]
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f000 fa4a 	bl	8005430 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fa0:	223f      	movs	r2, #63	; 0x3f
 8004fa2:	409a      	lsls	r2, r3
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f042 0216 	orr.w	r2, r2, #22
 8004fb6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d007      	beq.n	8004fd0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f042 0208 	orr.w	r2, r2, #8
 8004fce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f042 0201 	orr.w	r2, r2, #1
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	e005      	b.n	8004fee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004fea:	2302      	movs	r3, #2
 8004fec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3718      	adds	r7, #24
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005004:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005006:	f7fe fedb 	bl	8003dc0 <HAL_GetTick>
 800500a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b02      	cmp	r3, #2
 8005016:	d008      	beq.n	800502a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2280      	movs	r2, #128	; 0x80
 800501c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e052      	b.n	80050d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 0216 	bic.w	r2, r2, #22
 8005038:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	695a      	ldr	r2, [r3, #20]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005048:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504e:	2b00      	cmp	r3, #0
 8005050:	d103      	bne.n	800505a <HAL_DMA_Abort+0x62>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005056:	2b00      	cmp	r3, #0
 8005058:	d007      	beq.n	800506a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 0208 	bic.w	r2, r2, #8
 8005068:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 0201 	bic.w	r2, r2, #1
 8005078:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800507a:	e013      	b.n	80050a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800507c:	f7fe fea0 	bl	8003dc0 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b05      	cmp	r3, #5
 8005088:	d90c      	bls.n	80050a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2220      	movs	r2, #32
 800508e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2203      	movs	r2, #3
 8005094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e015      	b.n	80050d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1e4      	bne.n	800507c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050b6:	223f      	movs	r2, #63	; 0x3f
 80050b8:	409a      	lsls	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d004      	beq.n	80050f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2280      	movs	r2, #128	; 0x80
 80050f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e00c      	b.n	8005110 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2205      	movs	r2, #5
 80050fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 0201 	bic.w	r2, r2, #1
 800510c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005128:	4b8e      	ldr	r3, [pc, #568]	; (8005364 <HAL_DMA_IRQHandler+0x248>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a8e      	ldr	r2, [pc, #568]	; (8005368 <HAL_DMA_IRQHandler+0x24c>)
 800512e:	fba2 2303 	umull	r2, r3, r2, r3
 8005132:	0a9b      	lsrs	r3, r3, #10
 8005134:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005146:	2208      	movs	r2, #8
 8005148:	409a      	lsls	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	4013      	ands	r3, r2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d01a      	beq.n	8005188 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d013      	beq.n	8005188 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 0204 	bic.w	r2, r2, #4
 800516e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005174:	2208      	movs	r2, #8
 8005176:	409a      	lsls	r2, r3
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005180:	f043 0201 	orr.w	r2, r3, #1
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800518c:	2201      	movs	r2, #1
 800518e:	409a      	lsls	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4013      	ands	r3, r2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d012      	beq.n	80051be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00b      	beq.n	80051be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051aa:	2201      	movs	r2, #1
 80051ac:	409a      	lsls	r2, r3
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b6:	f043 0202 	orr.w	r2, r3, #2
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c2:	2204      	movs	r2, #4
 80051c4:	409a      	lsls	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	4013      	ands	r3, r2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d012      	beq.n	80051f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00b      	beq.n	80051f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e0:	2204      	movs	r2, #4
 80051e2:	409a      	lsls	r2, r3
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ec:	f043 0204 	orr.w	r2, r3, #4
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f8:	2210      	movs	r2, #16
 80051fa:	409a      	lsls	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4013      	ands	r3, r2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d043      	beq.n	800528c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0308 	and.w	r3, r3, #8
 800520e:	2b00      	cmp	r3, #0
 8005210:	d03c      	beq.n	800528c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005216:	2210      	movs	r2, #16
 8005218:	409a      	lsls	r2, r3
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d018      	beq.n	800525e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d108      	bne.n	800524c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	2b00      	cmp	r3, #0
 8005240:	d024      	beq.n	800528c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	4798      	blx	r3
 800524a:	e01f      	b.n	800528c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005250:	2b00      	cmp	r3, #0
 8005252:	d01b      	beq.n	800528c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	4798      	blx	r3
 800525c:	e016      	b.n	800528c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005268:	2b00      	cmp	r3, #0
 800526a:	d107      	bne.n	800527c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 0208 	bic.w	r2, r2, #8
 800527a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005280:	2b00      	cmp	r3, #0
 8005282:	d003      	beq.n	800528c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005290:	2220      	movs	r2, #32
 8005292:	409a      	lsls	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4013      	ands	r3, r2
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 808f 	beq.w	80053bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0310 	and.w	r3, r3, #16
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 8087 	beq.w	80053bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b2:	2220      	movs	r2, #32
 80052b4:	409a      	lsls	r2, r3
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b05      	cmp	r3, #5
 80052c4:	d136      	bne.n	8005334 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 0216 	bic.w	r2, r2, #22
 80052d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	695a      	ldr	r2, [r3, #20]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d103      	bne.n	80052f6 <HAL_DMA_IRQHandler+0x1da>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d007      	beq.n	8005306 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f022 0208 	bic.w	r2, r2, #8
 8005304:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800530a:	223f      	movs	r2, #63	; 0x3f
 800530c:	409a      	lsls	r2, r3
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005326:	2b00      	cmp	r3, #0
 8005328:	d07e      	beq.n	8005428 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	4798      	blx	r3
        }
        return;
 8005332:	e079      	b.n	8005428 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d01d      	beq.n	800537e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10d      	bne.n	800536c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005354:	2b00      	cmp	r3, #0
 8005356:	d031      	beq.n	80053bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	4798      	blx	r3
 8005360:	e02c      	b.n	80053bc <HAL_DMA_IRQHandler+0x2a0>
 8005362:	bf00      	nop
 8005364:	2000001c 	.word	0x2000001c
 8005368:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005370:	2b00      	cmp	r3, #0
 8005372:	d023      	beq.n	80053bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	4798      	blx	r3
 800537c:	e01e      	b.n	80053bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10f      	bne.n	80053ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 0210 	bic.w	r2, r2, #16
 800539a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d032      	beq.n	800542a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d022      	beq.n	8005416 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2205      	movs	r2, #5
 80053d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 0201 	bic.w	r2, r2, #1
 80053e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	3301      	adds	r3, #1
 80053ec:	60bb      	str	r3, [r7, #8]
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d307      	bcc.n	8005404 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1f2      	bne.n	80053e8 <HAL_DMA_IRQHandler+0x2cc>
 8005402:	e000      	b.n	8005406 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005404:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800541a:	2b00      	cmp	r3, #0
 800541c:	d005      	beq.n	800542a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	4798      	blx	r3
 8005426:	e000      	b.n	800542a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005428:	bf00      	nop
    }
  }
}
 800542a:	3718      	adds	r7, #24
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
 800543c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800544c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	2b40      	cmp	r3, #64	; 0x40
 800545c:	d108      	bne.n	8005470 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800546e:	e007      	b.n	8005480 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	60da      	str	r2, [r3, #12]
}
 8005480:	bf00      	nop
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	b2db      	uxtb	r3, r3
 800549a:	3b10      	subs	r3, #16
 800549c:	4a14      	ldr	r2, [pc, #80]	; (80054f0 <DMA_CalcBaseAndBitshift+0x64>)
 800549e:	fba2 2303 	umull	r2, r3, r2, r3
 80054a2:	091b      	lsrs	r3, r3, #4
 80054a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80054a6:	4a13      	ldr	r2, [pc, #76]	; (80054f4 <DMA_CalcBaseAndBitshift+0x68>)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	4413      	add	r3, r2
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	461a      	mov	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2b03      	cmp	r3, #3
 80054b8:	d909      	bls.n	80054ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80054c2:	f023 0303 	bic.w	r3, r3, #3
 80054c6:	1d1a      	adds	r2, r3, #4
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	659a      	str	r2, [r3, #88]	; 0x58
 80054cc:	e007      	b.n	80054de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80054d6:	f023 0303 	bic.w	r3, r3, #3
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	aaaaaaab 	.word	0xaaaaaaab
 80054f4:	0800f230 	.word	0x0800f230

080054f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005500:	2300      	movs	r3, #0
 8005502:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005508:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d11f      	bne.n	8005552 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	2b03      	cmp	r3, #3
 8005516:	d856      	bhi.n	80055c6 <DMA_CheckFifoParam+0xce>
 8005518:	a201      	add	r2, pc, #4	; (adr r2, 8005520 <DMA_CheckFifoParam+0x28>)
 800551a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551e:	bf00      	nop
 8005520:	08005531 	.word	0x08005531
 8005524:	08005543 	.word	0x08005543
 8005528:	08005531 	.word	0x08005531
 800552c:	080055c7 	.word	0x080055c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005534:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d046      	beq.n	80055ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005540:	e043      	b.n	80055ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005546:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800554a:	d140      	bne.n	80055ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005550:	e03d      	b.n	80055ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800555a:	d121      	bne.n	80055a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	2b03      	cmp	r3, #3
 8005560:	d837      	bhi.n	80055d2 <DMA_CheckFifoParam+0xda>
 8005562:	a201      	add	r2, pc, #4	; (adr r2, 8005568 <DMA_CheckFifoParam+0x70>)
 8005564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005568:	08005579 	.word	0x08005579
 800556c:	0800557f 	.word	0x0800557f
 8005570:	08005579 	.word	0x08005579
 8005574:	08005591 	.word	0x08005591
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	73fb      	strb	r3, [r7, #15]
      break;
 800557c:	e030      	b.n	80055e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005582:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d025      	beq.n	80055d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800558e:	e022      	b.n	80055d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005594:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005598:	d11f      	bne.n	80055da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800559e:	e01c      	b.n	80055da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d903      	bls.n	80055ae <DMA_CheckFifoParam+0xb6>
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	2b03      	cmp	r3, #3
 80055aa:	d003      	beq.n	80055b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80055ac:	e018      	b.n	80055e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	73fb      	strb	r3, [r7, #15]
      break;
 80055b2:	e015      	b.n	80055e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00e      	beq.n	80055de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	73fb      	strb	r3, [r7, #15]
      break;
 80055c4:	e00b      	b.n	80055de <DMA_CheckFifoParam+0xe6>
      break;
 80055c6:	bf00      	nop
 80055c8:	e00a      	b.n	80055e0 <DMA_CheckFifoParam+0xe8>
      break;
 80055ca:	bf00      	nop
 80055cc:	e008      	b.n	80055e0 <DMA_CheckFifoParam+0xe8>
      break;
 80055ce:	bf00      	nop
 80055d0:	e006      	b.n	80055e0 <DMA_CheckFifoParam+0xe8>
      break;
 80055d2:	bf00      	nop
 80055d4:	e004      	b.n	80055e0 <DMA_CheckFifoParam+0xe8>
      break;
 80055d6:	bf00      	nop
 80055d8:	e002      	b.n	80055e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80055da:	bf00      	nop
 80055dc:	e000      	b.n	80055e0 <DMA_CheckFifoParam+0xe8>
      break;
 80055de:	bf00      	nop
    }
  } 
  
  return status; 
 80055e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop

080055f0 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 80055f6:	2300      	movs	r3, #0
 80055f8:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80055fa:	4b4b      	ldr	r3, [pc, #300]	; (8005728 <HAL_FLASH_IRQHandler+0x138>)
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d020      	beq.n	8005648 <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8005606:	4b49      	ldr	r3, [pc, #292]	; (800572c <HAL_FLASH_IRQHandler+0x13c>)
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b01      	cmp	r3, #1
 800560e:	d107      	bne.n	8005620 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8005610:	4b46      	ldr	r3, [pc, #280]	; (800572c <HAL_FLASH_IRQHandler+0x13c>)
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8005616:	4b45      	ldr	r3, [pc, #276]	; (800572c <HAL_FLASH_IRQHandler+0x13c>)
 8005618:	f04f 32ff 	mov.w	r2, #4294967295
 800561c:	60da      	str	r2, [r3, #12]
 800561e:	e00b      	b.n	8005638 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8005620:	4b42      	ldr	r3, [pc, #264]	; (800572c <HAL_FLASH_IRQHandler+0x13c>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b02      	cmp	r3, #2
 8005628:	d103      	bne.n	8005632 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 800562a:	4b40      	ldr	r3, [pc, #256]	; (800572c <HAL_FLASH_IRQHandler+0x13c>)
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	607b      	str	r3, [r7, #4]
 8005630:	e002      	b.n	8005638 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8005632:	4b3e      	ldr	r3, [pc, #248]	; (800572c <HAL_FLASH_IRQHandler+0x13c>)
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8005638:	f000 f88e 	bl	8005758 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 f881 	bl	8005744 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005642:	4b3a      	ldr	r3, [pc, #232]	; (800572c <HAL_FLASH_IRQHandler+0x13c>)
 8005644:	2200      	movs	r2, #0
 8005646:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005648:	4b37      	ldr	r3, [pc, #220]	; (8005728 <HAL_FLASH_IRQHandler+0x138>)
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b00      	cmp	r3, #0
 8005652:	d04a      	beq.n	80056ea <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005654:	4b34      	ldr	r3, [pc, #208]	; (8005728 <HAL_FLASH_IRQHandler+0x138>)
 8005656:	2201      	movs	r2, #1
 8005658:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800565a:	4b34      	ldr	r3, [pc, #208]	; (800572c <HAL_FLASH_IRQHandler+0x13c>)
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	b2db      	uxtb	r3, r3
 8005660:	2b01      	cmp	r3, #1
 8005662:	d12d      	bne.n	80056c0 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8005664:	4b31      	ldr	r3, [pc, #196]	; (800572c <HAL_FLASH_IRQHandler+0x13c>)
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	3b01      	subs	r3, #1
 800566a:	4a30      	ldr	r2, [pc, #192]	; (800572c <HAL_FLASH_IRQHandler+0x13c>)
 800566c:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 800566e:	4b2f      	ldr	r3, [pc, #188]	; (800572c <HAL_FLASH_IRQHandler+0x13c>)
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d015      	beq.n	80056a2 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8005676:	4b2d      	ldr	r3, [pc, #180]	; (800572c <HAL_FLASH_IRQHandler+0x13c>)
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f857 	bl	8005730 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8005682:	4b2a      	ldr	r3, [pc, #168]	; (800572c <HAL_FLASH_IRQHandler+0x13c>)
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	3301      	adds	r3, #1
 8005688:	4a28      	ldr	r2, [pc, #160]	; (800572c <HAL_FLASH_IRQHandler+0x13c>)
 800568a:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 800568c:	4b27      	ldr	r3, [pc, #156]	; (800572c <HAL_FLASH_IRQHandler+0x13c>)
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8005692:	4b26      	ldr	r3, [pc, #152]	; (800572c <HAL_FLASH_IRQHandler+0x13c>)
 8005694:	7a1b      	ldrb	r3, [r3, #8]
 8005696:	b2db      	uxtb	r3, r3
 8005698:	4619      	mov	r1, r3
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f8c2 	bl	8005824 <FLASH_Erase_Sector>
 80056a0:	e023      	b.n	80056ea <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 80056a2:	f04f 33ff 	mov.w	r3, #4294967295
 80056a6:	607b      	str	r3, [r7, #4]
 80056a8:	4a20      	ldr	r2, [pc, #128]	; (800572c <HAL_FLASH_IRQHandler+0x13c>)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80056ae:	4b1f      	ldr	r3, [pc, #124]	; (800572c <HAL_FLASH_IRQHandler+0x13c>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 80056b4:	f000 f8fe 	bl	80058b4 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f839 	bl	8005730 <HAL_FLASH_EndOfOperationCallback>
 80056be:	e014      	b.n	80056ea <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 80056c0:	4b1a      	ldr	r3, [pc, #104]	; (800572c <HAL_FLASH_IRQHandler+0x13c>)
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d107      	bne.n	80056da <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 80056ca:	f000 f8f3 	bl	80058b4 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 80056ce:	4b17      	ldr	r3, [pc, #92]	; (800572c <HAL_FLASH_IRQHandler+0x13c>)
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 f82c 	bl	8005730 <HAL_FLASH_EndOfOperationCallback>
 80056d8:	e004      	b.n	80056e4 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80056da:	4b14      	ldr	r3, [pc, #80]	; (800572c <HAL_FLASH_IRQHandler+0x13c>)
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 f826 	bl	8005730 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80056e4:	4b11      	ldr	r3, [pc, #68]	; (800572c <HAL_FLASH_IRQHandler+0x13c>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80056ea:	4b10      	ldr	r3, [pc, #64]	; (800572c <HAL_FLASH_IRQHandler+0x13c>)
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d114      	bne.n	800571e <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 80056f4:	4b0c      	ldr	r3, [pc, #48]	; (8005728 <HAL_FLASH_IRQHandler+0x138>)
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	4a0b      	ldr	r2, [pc, #44]	; (8005728 <HAL_FLASH_IRQHandler+0x138>)
 80056fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80056fe:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8005700:	4b09      	ldr	r3, [pc, #36]	; (8005728 <HAL_FLASH_IRQHandler+0x138>)
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	4a08      	ldr	r2, [pc, #32]	; (8005728 <HAL_FLASH_IRQHandler+0x138>)
 8005706:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800570a:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 800570c:	4b06      	ldr	r3, [pc, #24]	; (8005728 <HAL_FLASH_IRQHandler+0x138>)
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	4a05      	ldr	r2, [pc, #20]	; (8005728 <HAL_FLASH_IRQHandler+0x138>)
 8005712:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005716:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8005718:	4b04      	ldr	r3, [pc, #16]	; (800572c <HAL_FLASH_IRQHandler+0x13c>)
 800571a:	2200      	movs	r2, #0
 800571c:	761a      	strb	r2, [r3, #24]
  }
}
 800571e:	bf00      	nop
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	40023c00 	.word	0x40023c00
 800572c:	200006b4 	.word	0x200006b4

08005730 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8005738:	bf00      	nop
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005758:	b480      	push	{r7}
 800575a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800575c:	4b2f      	ldr	r3, [pc, #188]	; (800581c <FLASH_SetErrorCode+0xc4>)
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f003 0310 	and.w	r3, r3, #16
 8005764:	2b00      	cmp	r3, #0
 8005766:	d008      	beq.n	800577a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005768:	4b2d      	ldr	r3, [pc, #180]	; (8005820 <FLASH_SetErrorCode+0xc8>)
 800576a:	69db      	ldr	r3, [r3, #28]
 800576c:	f043 0310 	orr.w	r3, r3, #16
 8005770:	4a2b      	ldr	r2, [pc, #172]	; (8005820 <FLASH_SetErrorCode+0xc8>)
 8005772:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005774:	4b29      	ldr	r3, [pc, #164]	; (800581c <FLASH_SetErrorCode+0xc4>)
 8005776:	2210      	movs	r2, #16
 8005778:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800577a:	4b28      	ldr	r3, [pc, #160]	; (800581c <FLASH_SetErrorCode+0xc4>)
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	f003 0320 	and.w	r3, r3, #32
 8005782:	2b00      	cmp	r3, #0
 8005784:	d008      	beq.n	8005798 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005786:	4b26      	ldr	r3, [pc, #152]	; (8005820 <FLASH_SetErrorCode+0xc8>)
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	f043 0308 	orr.w	r3, r3, #8
 800578e:	4a24      	ldr	r2, [pc, #144]	; (8005820 <FLASH_SetErrorCode+0xc8>)
 8005790:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005792:	4b22      	ldr	r3, [pc, #136]	; (800581c <FLASH_SetErrorCode+0xc4>)
 8005794:	2220      	movs	r2, #32
 8005796:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005798:	4b20      	ldr	r3, [pc, #128]	; (800581c <FLASH_SetErrorCode+0xc4>)
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d008      	beq.n	80057b6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80057a4:	4b1e      	ldr	r3, [pc, #120]	; (8005820 <FLASH_SetErrorCode+0xc8>)
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	f043 0304 	orr.w	r3, r3, #4
 80057ac:	4a1c      	ldr	r2, [pc, #112]	; (8005820 <FLASH_SetErrorCode+0xc8>)
 80057ae:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80057b0:	4b1a      	ldr	r3, [pc, #104]	; (800581c <FLASH_SetErrorCode+0xc4>)
 80057b2:	2240      	movs	r2, #64	; 0x40
 80057b4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80057b6:	4b19      	ldr	r3, [pc, #100]	; (800581c <FLASH_SetErrorCode+0xc4>)
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d008      	beq.n	80057d4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80057c2:	4b17      	ldr	r3, [pc, #92]	; (8005820 <FLASH_SetErrorCode+0xc8>)
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	f043 0302 	orr.w	r3, r3, #2
 80057ca:	4a15      	ldr	r2, [pc, #84]	; (8005820 <FLASH_SetErrorCode+0xc8>)
 80057cc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80057ce:	4b13      	ldr	r3, [pc, #76]	; (800581c <FLASH_SetErrorCode+0xc4>)
 80057d0:	2280      	movs	r2, #128	; 0x80
 80057d2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80057d4:	4b11      	ldr	r3, [pc, #68]	; (800581c <FLASH_SetErrorCode+0xc4>)
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d009      	beq.n	80057f4 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80057e0:	4b0f      	ldr	r3, [pc, #60]	; (8005820 <FLASH_SetErrorCode+0xc8>)
 80057e2:	69db      	ldr	r3, [r3, #28]
 80057e4:	f043 0301 	orr.w	r3, r3, #1
 80057e8:	4a0d      	ldr	r2, [pc, #52]	; (8005820 <FLASH_SetErrorCode+0xc8>)
 80057ea:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80057ec:	4b0b      	ldr	r3, [pc, #44]	; (800581c <FLASH_SetErrorCode+0xc4>)
 80057ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057f2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80057f4:	4b09      	ldr	r3, [pc, #36]	; (800581c <FLASH_SetErrorCode+0xc4>)
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d008      	beq.n	8005812 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005800:	4b07      	ldr	r3, [pc, #28]	; (8005820 <FLASH_SetErrorCode+0xc8>)
 8005802:	69db      	ldr	r3, [r3, #28]
 8005804:	f043 0320 	orr.w	r3, r3, #32
 8005808:	4a05      	ldr	r2, [pc, #20]	; (8005820 <FLASH_SetErrorCode+0xc8>)
 800580a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800580c:	4b03      	ldr	r3, [pc, #12]	; (800581c <FLASH_SetErrorCode+0xc4>)
 800580e:	2202      	movs	r2, #2
 8005810:	60da      	str	r2, [r3, #12]
  }
}
 8005812:	bf00      	nop
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	40023c00 	.word	0x40023c00
 8005820:	200006b4 	.word	0x200006b4

08005824 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	460b      	mov	r3, r1
 800582e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005834:	78fb      	ldrb	r3, [r7, #3]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d102      	bne.n	8005840 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800583a:	2300      	movs	r3, #0
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	e010      	b.n	8005862 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005840:	78fb      	ldrb	r3, [r7, #3]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d103      	bne.n	800584e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005846:	f44f 7380 	mov.w	r3, #256	; 0x100
 800584a:	60fb      	str	r3, [r7, #12]
 800584c:	e009      	b.n	8005862 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800584e:	78fb      	ldrb	r3, [r7, #3]
 8005850:	2b02      	cmp	r3, #2
 8005852:	d103      	bne.n	800585c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005854:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005858:	60fb      	str	r3, [r7, #12]
 800585a:	e002      	b.n	8005862 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800585c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005860:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005862:	4b13      	ldr	r3, [pc, #76]	; (80058b0 <FLASH_Erase_Sector+0x8c>)
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	4a12      	ldr	r2, [pc, #72]	; (80058b0 <FLASH_Erase_Sector+0x8c>)
 8005868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800586c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800586e:	4b10      	ldr	r3, [pc, #64]	; (80058b0 <FLASH_Erase_Sector+0x8c>)
 8005870:	691a      	ldr	r2, [r3, #16]
 8005872:	490f      	ldr	r1, [pc, #60]	; (80058b0 <FLASH_Erase_Sector+0x8c>)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4313      	orrs	r3, r2
 8005878:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800587a:	4b0d      	ldr	r3, [pc, #52]	; (80058b0 <FLASH_Erase_Sector+0x8c>)
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	4a0c      	ldr	r2, [pc, #48]	; (80058b0 <FLASH_Erase_Sector+0x8c>)
 8005880:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005884:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005886:	4b0a      	ldr	r3, [pc, #40]	; (80058b0 <FLASH_Erase_Sector+0x8c>)
 8005888:	691a      	ldr	r2, [r3, #16]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	00db      	lsls	r3, r3, #3
 800588e:	4313      	orrs	r3, r2
 8005890:	4a07      	ldr	r2, [pc, #28]	; (80058b0 <FLASH_Erase_Sector+0x8c>)
 8005892:	f043 0302 	orr.w	r3, r3, #2
 8005896:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005898:	4b05      	ldr	r3, [pc, #20]	; (80058b0 <FLASH_Erase_Sector+0x8c>)
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	4a04      	ldr	r2, [pc, #16]	; (80058b0 <FLASH_Erase_Sector+0x8c>)
 800589e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058a2:	6113      	str	r3, [r2, #16]
}
 80058a4:	bf00      	nop
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	40023c00 	.word	0x40023c00

080058b4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80058b4:	b480      	push	{r7}
 80058b6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80058b8:	4b20      	ldr	r3, [pc, #128]	; (800593c <FLASH_FlushCaches+0x88>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d017      	beq.n	80058f4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80058c4:	4b1d      	ldr	r3, [pc, #116]	; (800593c <FLASH_FlushCaches+0x88>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a1c      	ldr	r2, [pc, #112]	; (800593c <FLASH_FlushCaches+0x88>)
 80058ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058ce:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80058d0:	4b1a      	ldr	r3, [pc, #104]	; (800593c <FLASH_FlushCaches+0x88>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a19      	ldr	r2, [pc, #100]	; (800593c <FLASH_FlushCaches+0x88>)
 80058d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80058da:	6013      	str	r3, [r2, #0]
 80058dc:	4b17      	ldr	r3, [pc, #92]	; (800593c <FLASH_FlushCaches+0x88>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a16      	ldr	r2, [pc, #88]	; (800593c <FLASH_FlushCaches+0x88>)
 80058e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058e6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80058e8:	4b14      	ldr	r3, [pc, #80]	; (800593c <FLASH_FlushCaches+0x88>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a13      	ldr	r2, [pc, #76]	; (800593c <FLASH_FlushCaches+0x88>)
 80058ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058f2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80058f4:	4b11      	ldr	r3, [pc, #68]	; (800593c <FLASH_FlushCaches+0x88>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d017      	beq.n	8005930 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005900:	4b0e      	ldr	r3, [pc, #56]	; (800593c <FLASH_FlushCaches+0x88>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a0d      	ldr	r2, [pc, #52]	; (800593c <FLASH_FlushCaches+0x88>)
 8005906:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800590a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800590c:	4b0b      	ldr	r3, [pc, #44]	; (800593c <FLASH_FlushCaches+0x88>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a0a      	ldr	r2, [pc, #40]	; (800593c <FLASH_FlushCaches+0x88>)
 8005912:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005916:	6013      	str	r3, [r2, #0]
 8005918:	4b08      	ldr	r3, [pc, #32]	; (800593c <FLASH_FlushCaches+0x88>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a07      	ldr	r2, [pc, #28]	; (800593c <FLASH_FlushCaches+0x88>)
 800591e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005922:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005924:	4b05      	ldr	r3, [pc, #20]	; (800593c <FLASH_FlushCaches+0x88>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a04      	ldr	r2, [pc, #16]	; (800593c <FLASH_FlushCaches+0x88>)
 800592a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800592e:	6013      	str	r3, [r2, #0]
  }
}
 8005930:	bf00      	nop
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	40023c00 	.word	0x40023c00

08005940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005940:	b480      	push	{r7}
 8005942:	b089      	sub	sp, #36	; 0x24
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800594a:	2300      	movs	r3, #0
 800594c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800594e:	2300      	movs	r3, #0
 8005950:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005952:	2300      	movs	r3, #0
 8005954:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005956:	2300      	movs	r3, #0
 8005958:	61fb      	str	r3, [r7, #28]
 800595a:	e159      	b.n	8005c10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800595c:	2201      	movs	r2, #1
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	fa02 f303 	lsl.w	r3, r2, r3
 8005964:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	4013      	ands	r3, r2
 800596e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	429a      	cmp	r2, r3
 8005976:	f040 8148 	bne.w	8005c0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f003 0303 	and.w	r3, r3, #3
 8005982:	2b01      	cmp	r3, #1
 8005984:	d005      	beq.n	8005992 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800598e:	2b02      	cmp	r3, #2
 8005990:	d130      	bne.n	80059f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	2203      	movs	r2, #3
 800599e:	fa02 f303 	lsl.w	r3, r2, r3
 80059a2:	43db      	mvns	r3, r3
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	4013      	ands	r3, r2
 80059a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	68da      	ldr	r2, [r3, #12]
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	005b      	lsls	r3, r3, #1
 80059b2:	fa02 f303 	lsl.w	r3, r2, r3
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80059c8:	2201      	movs	r2, #1
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	fa02 f303 	lsl.w	r3, r2, r3
 80059d0:	43db      	mvns	r3, r3
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	4013      	ands	r3, r2
 80059d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	091b      	lsrs	r3, r3, #4
 80059de:	f003 0201 	and.w	r2, r3, #1
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	fa02 f303 	lsl.w	r3, r2, r3
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f003 0303 	and.w	r3, r3, #3
 80059fc:	2b03      	cmp	r3, #3
 80059fe:	d017      	beq.n	8005a30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	2203      	movs	r2, #3
 8005a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a10:	43db      	mvns	r3, r3
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	4013      	ands	r3, r2
 8005a16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	005b      	lsls	r3, r3, #1
 8005a20:	fa02 f303 	lsl.w	r3, r2, r3
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f003 0303 	and.w	r3, r3, #3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d123      	bne.n	8005a84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	08da      	lsrs	r2, r3, #3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3208      	adds	r2, #8
 8005a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	f003 0307 	and.w	r3, r3, #7
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	220f      	movs	r2, #15
 8005a54:	fa02 f303 	lsl.w	r3, r2, r3
 8005a58:	43db      	mvns	r3, r3
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	691a      	ldr	r2, [r3, #16]
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	f003 0307 	and.w	r3, r3, #7
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	08da      	lsrs	r2, r3, #3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	3208      	adds	r2, #8
 8005a7e:	69b9      	ldr	r1, [r7, #24]
 8005a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	005b      	lsls	r3, r3, #1
 8005a8e:	2203      	movs	r2, #3
 8005a90:	fa02 f303 	lsl.w	r3, r2, r3
 8005a94:	43db      	mvns	r3, r3
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	4013      	ands	r3, r2
 8005a9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f003 0203 	and.w	r2, r3, #3
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	005b      	lsls	r3, r3, #1
 8005aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 80a2 	beq.w	8005c0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	60fb      	str	r3, [r7, #12]
 8005aca:	4b57      	ldr	r3, [pc, #348]	; (8005c28 <HAL_GPIO_Init+0x2e8>)
 8005acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ace:	4a56      	ldr	r2, [pc, #344]	; (8005c28 <HAL_GPIO_Init+0x2e8>)
 8005ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8005ad6:	4b54      	ldr	r3, [pc, #336]	; (8005c28 <HAL_GPIO_Init+0x2e8>)
 8005ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ade:	60fb      	str	r3, [r7, #12]
 8005ae0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ae2:	4a52      	ldr	r2, [pc, #328]	; (8005c2c <HAL_GPIO_Init+0x2ec>)
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	089b      	lsrs	r3, r3, #2
 8005ae8:	3302      	adds	r3, #2
 8005aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	f003 0303 	and.w	r3, r3, #3
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	220f      	movs	r2, #15
 8005afa:	fa02 f303 	lsl.w	r3, r2, r3
 8005afe:	43db      	mvns	r3, r3
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	4013      	ands	r3, r2
 8005b04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a49      	ldr	r2, [pc, #292]	; (8005c30 <HAL_GPIO_Init+0x2f0>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d019      	beq.n	8005b42 <HAL_GPIO_Init+0x202>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a48      	ldr	r2, [pc, #288]	; (8005c34 <HAL_GPIO_Init+0x2f4>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d013      	beq.n	8005b3e <HAL_GPIO_Init+0x1fe>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a47      	ldr	r2, [pc, #284]	; (8005c38 <HAL_GPIO_Init+0x2f8>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d00d      	beq.n	8005b3a <HAL_GPIO_Init+0x1fa>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a46      	ldr	r2, [pc, #280]	; (8005c3c <HAL_GPIO_Init+0x2fc>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d007      	beq.n	8005b36 <HAL_GPIO_Init+0x1f6>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a45      	ldr	r2, [pc, #276]	; (8005c40 <HAL_GPIO_Init+0x300>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d101      	bne.n	8005b32 <HAL_GPIO_Init+0x1f2>
 8005b2e:	2304      	movs	r3, #4
 8005b30:	e008      	b.n	8005b44 <HAL_GPIO_Init+0x204>
 8005b32:	2307      	movs	r3, #7
 8005b34:	e006      	b.n	8005b44 <HAL_GPIO_Init+0x204>
 8005b36:	2303      	movs	r3, #3
 8005b38:	e004      	b.n	8005b44 <HAL_GPIO_Init+0x204>
 8005b3a:	2302      	movs	r3, #2
 8005b3c:	e002      	b.n	8005b44 <HAL_GPIO_Init+0x204>
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e000      	b.n	8005b44 <HAL_GPIO_Init+0x204>
 8005b42:	2300      	movs	r3, #0
 8005b44:	69fa      	ldr	r2, [r7, #28]
 8005b46:	f002 0203 	and.w	r2, r2, #3
 8005b4a:	0092      	lsls	r2, r2, #2
 8005b4c:	4093      	lsls	r3, r2
 8005b4e:	69ba      	ldr	r2, [r7, #24]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b54:	4935      	ldr	r1, [pc, #212]	; (8005c2c <HAL_GPIO_Init+0x2ec>)
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	089b      	lsrs	r3, r3, #2
 8005b5a:	3302      	adds	r3, #2
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b62:	4b38      	ldr	r3, [pc, #224]	; (8005c44 <HAL_GPIO_Init+0x304>)
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	43db      	mvns	r3, r3
 8005b6c:	69ba      	ldr	r2, [r7, #24]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005b86:	4a2f      	ldr	r2, [pc, #188]	; (8005c44 <HAL_GPIO_Init+0x304>)
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b8c:	4b2d      	ldr	r3, [pc, #180]	; (8005c44 <HAL_GPIO_Init+0x304>)
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	43db      	mvns	r3, r3
 8005b96:	69ba      	ldr	r2, [r7, #24]
 8005b98:	4013      	ands	r3, r2
 8005b9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d003      	beq.n	8005bb0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005bb0:	4a24      	ldr	r2, [pc, #144]	; (8005c44 <HAL_GPIO_Init+0x304>)
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005bb6:	4b23      	ldr	r3, [pc, #140]	; (8005c44 <HAL_GPIO_Init+0x304>)
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	43db      	mvns	r3, r3
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005bda:	4a1a      	ldr	r2, [pc, #104]	; (8005c44 <HAL_GPIO_Init+0x304>)
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005be0:	4b18      	ldr	r3, [pc, #96]	; (8005c44 <HAL_GPIO_Init+0x304>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	43db      	mvns	r3, r3
 8005bea:	69ba      	ldr	r2, [r7, #24]
 8005bec:	4013      	ands	r3, r2
 8005bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d003      	beq.n	8005c04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c04:	4a0f      	ldr	r2, [pc, #60]	; (8005c44 <HAL_GPIO_Init+0x304>)
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	61fb      	str	r3, [r7, #28]
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	2b0f      	cmp	r3, #15
 8005c14:	f67f aea2 	bls.w	800595c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005c18:	bf00      	nop
 8005c1a:	bf00      	nop
 8005c1c:	3724      	adds	r7, #36	; 0x24
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	40023800 	.word	0x40023800
 8005c2c:	40013800 	.word	0x40013800
 8005c30:	40020000 	.word	0x40020000
 8005c34:	40020400 	.word	0x40020400
 8005c38:	40020800 	.word	0x40020800
 8005c3c:	40020c00 	.word	0x40020c00
 8005c40:	40021000 	.word	0x40021000
 8005c44:	40013c00 	.word	0x40013c00

08005c48 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b087      	sub	sp, #28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005c56:	2300      	movs	r3, #0
 8005c58:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c5e:	2300      	movs	r3, #0
 8005c60:	617b      	str	r3, [r7, #20]
 8005c62:	e0bb      	b.n	8005ddc <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c64:	2201      	movs	r2, #1
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	4013      	ands	r3, r2
 8005c74:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	f040 80ab 	bne.w	8005dd6 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005c80:	4a5c      	ldr	r2, [pc, #368]	; (8005df4 <HAL_GPIO_DeInit+0x1ac>)
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	089b      	lsrs	r3, r3, #2
 8005c86:	3302      	adds	r3, #2
 8005c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c8c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f003 0303 	and.w	r3, r3, #3
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	220f      	movs	r2, #15
 8005c98:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a54      	ldr	r2, [pc, #336]	; (8005df8 <HAL_GPIO_DeInit+0x1b0>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d019      	beq.n	8005cde <HAL_GPIO_DeInit+0x96>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a53      	ldr	r2, [pc, #332]	; (8005dfc <HAL_GPIO_DeInit+0x1b4>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d013      	beq.n	8005cda <HAL_GPIO_DeInit+0x92>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a52      	ldr	r2, [pc, #328]	; (8005e00 <HAL_GPIO_DeInit+0x1b8>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d00d      	beq.n	8005cd6 <HAL_GPIO_DeInit+0x8e>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a51      	ldr	r2, [pc, #324]	; (8005e04 <HAL_GPIO_DeInit+0x1bc>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d007      	beq.n	8005cd2 <HAL_GPIO_DeInit+0x8a>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a50      	ldr	r2, [pc, #320]	; (8005e08 <HAL_GPIO_DeInit+0x1c0>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d101      	bne.n	8005cce <HAL_GPIO_DeInit+0x86>
 8005cca:	2304      	movs	r3, #4
 8005ccc:	e008      	b.n	8005ce0 <HAL_GPIO_DeInit+0x98>
 8005cce:	2307      	movs	r3, #7
 8005cd0:	e006      	b.n	8005ce0 <HAL_GPIO_DeInit+0x98>
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e004      	b.n	8005ce0 <HAL_GPIO_DeInit+0x98>
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	e002      	b.n	8005ce0 <HAL_GPIO_DeInit+0x98>
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e000      	b.n	8005ce0 <HAL_GPIO_DeInit+0x98>
 8005cde:	2300      	movs	r3, #0
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	f002 0203 	and.w	r2, r2, #3
 8005ce6:	0092      	lsls	r2, r2, #2
 8005ce8:	4093      	lsls	r3, r2
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d132      	bne.n	8005d56 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005cf0:	4b46      	ldr	r3, [pc, #280]	; (8005e0c <HAL_GPIO_DeInit+0x1c4>)
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	43db      	mvns	r3, r3
 8005cf8:	4944      	ldr	r1, [pc, #272]	; (8005e0c <HAL_GPIO_DeInit+0x1c4>)
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005cfe:	4b43      	ldr	r3, [pc, #268]	; (8005e0c <HAL_GPIO_DeInit+0x1c4>)
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	43db      	mvns	r3, r3
 8005d06:	4941      	ldr	r1, [pc, #260]	; (8005e0c <HAL_GPIO_DeInit+0x1c4>)
 8005d08:	4013      	ands	r3, r2
 8005d0a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005d0c:	4b3f      	ldr	r3, [pc, #252]	; (8005e0c <HAL_GPIO_DeInit+0x1c4>)
 8005d0e:	68da      	ldr	r2, [r3, #12]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	43db      	mvns	r3, r3
 8005d14:	493d      	ldr	r1, [pc, #244]	; (8005e0c <HAL_GPIO_DeInit+0x1c4>)
 8005d16:	4013      	ands	r3, r2
 8005d18:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005d1a:	4b3c      	ldr	r3, [pc, #240]	; (8005e0c <HAL_GPIO_DeInit+0x1c4>)
 8005d1c:	689a      	ldr	r2, [r3, #8]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	43db      	mvns	r3, r3
 8005d22:	493a      	ldr	r1, [pc, #232]	; (8005e0c <HAL_GPIO_DeInit+0x1c4>)
 8005d24:	4013      	ands	r3, r2
 8005d26:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f003 0303 	and.w	r3, r3, #3
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	220f      	movs	r2, #15
 8005d32:	fa02 f303 	lsl.w	r3, r2, r3
 8005d36:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005d38:	4a2e      	ldr	r2, [pc, #184]	; (8005df4 <HAL_GPIO_DeInit+0x1ac>)
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	089b      	lsrs	r3, r3, #2
 8005d3e:	3302      	adds	r3, #2
 8005d40:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	43da      	mvns	r2, r3
 8005d48:	482a      	ldr	r0, [pc, #168]	; (8005df4 <HAL_GPIO_DeInit+0x1ac>)
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	089b      	lsrs	r3, r3, #2
 8005d4e:	400a      	ands	r2, r1
 8005d50:	3302      	adds	r3, #2
 8005d52:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	2103      	movs	r1, #3
 8005d60:	fa01 f303 	lsl.w	r3, r1, r3
 8005d64:	43db      	mvns	r3, r3
 8005d66:	401a      	ands	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	08da      	lsrs	r2, r3, #3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	3208      	adds	r2, #8
 8005d74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	f003 0307 	and.w	r3, r3, #7
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	220f      	movs	r2, #15
 8005d82:	fa02 f303 	lsl.w	r3, r2, r3
 8005d86:	43db      	mvns	r3, r3
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	08d2      	lsrs	r2, r2, #3
 8005d8c:	4019      	ands	r1, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	3208      	adds	r2, #8
 8005d92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68da      	ldr	r2, [r3, #12]
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	005b      	lsls	r3, r3, #1
 8005d9e:	2103      	movs	r1, #3
 8005da0:	fa01 f303 	lsl.w	r3, r1, r3
 8005da4:	43db      	mvns	r3, r3
 8005da6:	401a      	ands	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685a      	ldr	r2, [r3, #4]
 8005db0:	2101      	movs	r1, #1
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	fa01 f303 	lsl.w	r3, r1, r3
 8005db8:	43db      	mvns	r3, r3
 8005dba:	401a      	ands	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	689a      	ldr	r2, [r3, #8]
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	005b      	lsls	r3, r3, #1
 8005dc8:	2103      	movs	r1, #3
 8005dca:	fa01 f303 	lsl.w	r3, r1, r3
 8005dce:	43db      	mvns	r3, r3
 8005dd0:	401a      	ands	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	617b      	str	r3, [r7, #20]
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	2b0f      	cmp	r3, #15
 8005de0:	f67f af40 	bls.w	8005c64 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005de4:	bf00      	nop
 8005de6:	bf00      	nop
 8005de8:	371c      	adds	r7, #28
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	40013800 	.word	0x40013800
 8005df8:	40020000 	.word	0x40020000
 8005dfc:	40020400 	.word	0x40020400
 8005e00:	40020800 	.word	0x40020800
 8005e04:	40020c00 	.word	0x40020c00
 8005e08:	40021000 	.word	0x40021000
 8005e0c:	40013c00 	.word	0x40013c00

08005e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	460b      	mov	r3, r1
 8005e1a:	807b      	strh	r3, [r7, #2]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e20:	787b      	ldrb	r3, [r7, #1]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d003      	beq.n	8005e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e26:	887a      	ldrh	r2, [r7, #2]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005e2c:	e003      	b.n	8005e36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005e2e:	887b      	ldrh	r3, [r7, #2]
 8005e30:	041a      	lsls	r2, r3, #16
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	619a      	str	r2, [r3, #24]
}
 8005e36:	bf00      	nop
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr

08005e42 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e42:	b480      	push	{r7}
 8005e44:	b085      	sub	sp, #20
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005e54:	887a      	ldrh	r2, [r7, #2]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	4013      	ands	r3, r2
 8005e5a:	041a      	lsls	r2, r3, #16
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	43d9      	mvns	r1, r3
 8005e60:	887b      	ldrh	r3, [r7, #2]
 8005e62:	400b      	ands	r3, r1
 8005e64:	431a      	orrs	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	619a      	str	r2, [r3, #24]
}
 8005e6a:	bf00      	nop
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b084      	sub	sp, #16
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d101      	bne.n	8005e88 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e034      	b.n	8005ef2 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8005e90:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f245 5255 	movw	r2, #21845	; 0x5555
 8005e9a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	6852      	ldr	r2, [r2, #4]
 8005ea4:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	6892      	ldr	r2, [r2, #8]
 8005eae:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8005eb0:	f7fd ff86 	bl	8003dc0 <HAL_GetTick>
 8005eb4:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005eb6:	e00f      	b.n	8005ed8 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8005eb8:	f7fd ff82 	bl	8003dc0 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	2b31      	cmp	r3, #49	; 0x31
 8005ec4:	d908      	bls.n	8005ed8 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	f003 0303 	and.w	r3, r3, #3
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d001      	beq.n	8005ed8 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e00c      	b.n	8005ef2 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	f003 0303 	and.w	r3, r3, #3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1e8      	bne.n	8005eb8 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005eee:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8005efa:	b480      	push	{r7}
 8005efc:	b083      	sub	sp, #12
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005f0a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
	...

08005f1c <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8005f20:	4b06      	ldr	r3, [pc, #24]	; (8005f3c <HAL_PWR_PVD_IRQHandler+0x20>)
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d005      	beq.n	8005f38 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8005f2c:	f000 f808 	bl	8005f40 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8005f30:	4b02      	ldr	r3, [pc, #8]	; (8005f3c <HAL_PWR_PVD_IRQHandler+0x20>)
 8005f32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005f36:	615a      	str	r2, [r3, #20]
  }
}
 8005f38:	bf00      	nop
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	40013c00 	.word	0x40013c00

08005f40 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8005f40:	b480      	push	{r7}
 8005f42:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8005f44:	bf00      	nop
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
	...

08005f50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e267      	b.n	8006432 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d075      	beq.n	800605a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f6e:	4b88      	ldr	r3, [pc, #544]	; (8006190 <HAL_RCC_OscConfig+0x240>)
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f003 030c 	and.w	r3, r3, #12
 8005f76:	2b04      	cmp	r3, #4
 8005f78:	d00c      	beq.n	8005f94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f7a:	4b85      	ldr	r3, [pc, #532]	; (8006190 <HAL_RCC_OscConfig+0x240>)
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f82:	2b08      	cmp	r3, #8
 8005f84:	d112      	bne.n	8005fac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f86:	4b82      	ldr	r3, [pc, #520]	; (8006190 <HAL_RCC_OscConfig+0x240>)
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f92:	d10b      	bne.n	8005fac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f94:	4b7e      	ldr	r3, [pc, #504]	; (8006190 <HAL_RCC_OscConfig+0x240>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d05b      	beq.n	8006058 <HAL_RCC_OscConfig+0x108>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d157      	bne.n	8006058 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e242      	b.n	8006432 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fb4:	d106      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x74>
 8005fb6:	4b76      	ldr	r3, [pc, #472]	; (8006190 <HAL_RCC_OscConfig+0x240>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a75      	ldr	r2, [pc, #468]	; (8006190 <HAL_RCC_OscConfig+0x240>)
 8005fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fc0:	6013      	str	r3, [r2, #0]
 8005fc2:	e01d      	b.n	8006000 <HAL_RCC_OscConfig+0xb0>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fcc:	d10c      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x98>
 8005fce:	4b70      	ldr	r3, [pc, #448]	; (8006190 <HAL_RCC_OscConfig+0x240>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a6f      	ldr	r2, [pc, #444]	; (8006190 <HAL_RCC_OscConfig+0x240>)
 8005fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	4b6d      	ldr	r3, [pc, #436]	; (8006190 <HAL_RCC_OscConfig+0x240>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a6c      	ldr	r2, [pc, #432]	; (8006190 <HAL_RCC_OscConfig+0x240>)
 8005fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fe4:	6013      	str	r3, [r2, #0]
 8005fe6:	e00b      	b.n	8006000 <HAL_RCC_OscConfig+0xb0>
 8005fe8:	4b69      	ldr	r3, [pc, #420]	; (8006190 <HAL_RCC_OscConfig+0x240>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a68      	ldr	r2, [pc, #416]	; (8006190 <HAL_RCC_OscConfig+0x240>)
 8005fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ff2:	6013      	str	r3, [r2, #0]
 8005ff4:	4b66      	ldr	r3, [pc, #408]	; (8006190 <HAL_RCC_OscConfig+0x240>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a65      	ldr	r2, [pc, #404]	; (8006190 <HAL_RCC_OscConfig+0x240>)
 8005ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ffe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d013      	beq.n	8006030 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006008:	f7fd feda 	bl	8003dc0 <HAL_GetTick>
 800600c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800600e:	e008      	b.n	8006022 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006010:	f7fd fed6 	bl	8003dc0 <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	2b64      	cmp	r3, #100	; 0x64
 800601c:	d901      	bls.n	8006022 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e207      	b.n	8006432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006022:	4b5b      	ldr	r3, [pc, #364]	; (8006190 <HAL_RCC_OscConfig+0x240>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d0f0      	beq.n	8006010 <HAL_RCC_OscConfig+0xc0>
 800602e:	e014      	b.n	800605a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006030:	f7fd fec6 	bl	8003dc0 <HAL_GetTick>
 8006034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006036:	e008      	b.n	800604a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006038:	f7fd fec2 	bl	8003dc0 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	2b64      	cmp	r3, #100	; 0x64
 8006044:	d901      	bls.n	800604a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e1f3      	b.n	8006432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800604a:	4b51      	ldr	r3, [pc, #324]	; (8006190 <HAL_RCC_OscConfig+0x240>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1f0      	bne.n	8006038 <HAL_RCC_OscConfig+0xe8>
 8006056:	e000      	b.n	800605a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0302 	and.w	r3, r3, #2
 8006062:	2b00      	cmp	r3, #0
 8006064:	d063      	beq.n	800612e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006066:	4b4a      	ldr	r3, [pc, #296]	; (8006190 <HAL_RCC_OscConfig+0x240>)
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f003 030c 	and.w	r3, r3, #12
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00b      	beq.n	800608a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006072:	4b47      	ldr	r3, [pc, #284]	; (8006190 <HAL_RCC_OscConfig+0x240>)
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800607a:	2b08      	cmp	r3, #8
 800607c:	d11c      	bne.n	80060b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800607e:	4b44      	ldr	r3, [pc, #272]	; (8006190 <HAL_RCC_OscConfig+0x240>)
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006086:	2b00      	cmp	r3, #0
 8006088:	d116      	bne.n	80060b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800608a:	4b41      	ldr	r3, [pc, #260]	; (8006190 <HAL_RCC_OscConfig+0x240>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0302 	and.w	r3, r3, #2
 8006092:	2b00      	cmp	r3, #0
 8006094:	d005      	beq.n	80060a2 <HAL_RCC_OscConfig+0x152>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d001      	beq.n	80060a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e1c7      	b.n	8006432 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060a2:	4b3b      	ldr	r3, [pc, #236]	; (8006190 <HAL_RCC_OscConfig+0x240>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	00db      	lsls	r3, r3, #3
 80060b0:	4937      	ldr	r1, [pc, #220]	; (8006190 <HAL_RCC_OscConfig+0x240>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060b6:	e03a      	b.n	800612e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d020      	beq.n	8006102 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060c0:	4b34      	ldr	r3, [pc, #208]	; (8006194 <HAL_RCC_OscConfig+0x244>)
 80060c2:	2201      	movs	r2, #1
 80060c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060c6:	f7fd fe7b 	bl	8003dc0 <HAL_GetTick>
 80060ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060cc:	e008      	b.n	80060e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060ce:	f7fd fe77 	bl	8003dc0 <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d901      	bls.n	80060e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e1a8      	b.n	8006432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060e0:	4b2b      	ldr	r3, [pc, #172]	; (8006190 <HAL_RCC_OscConfig+0x240>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0302 	and.w	r3, r3, #2
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d0f0      	beq.n	80060ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060ec:	4b28      	ldr	r3, [pc, #160]	; (8006190 <HAL_RCC_OscConfig+0x240>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	00db      	lsls	r3, r3, #3
 80060fa:	4925      	ldr	r1, [pc, #148]	; (8006190 <HAL_RCC_OscConfig+0x240>)
 80060fc:	4313      	orrs	r3, r2
 80060fe:	600b      	str	r3, [r1, #0]
 8006100:	e015      	b.n	800612e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006102:	4b24      	ldr	r3, [pc, #144]	; (8006194 <HAL_RCC_OscConfig+0x244>)
 8006104:	2200      	movs	r2, #0
 8006106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006108:	f7fd fe5a 	bl	8003dc0 <HAL_GetTick>
 800610c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800610e:	e008      	b.n	8006122 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006110:	f7fd fe56 	bl	8003dc0 <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	2b02      	cmp	r3, #2
 800611c:	d901      	bls.n	8006122 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e187      	b.n	8006432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006122:	4b1b      	ldr	r3, [pc, #108]	; (8006190 <HAL_RCC_OscConfig+0x240>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0302 	and.w	r3, r3, #2
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1f0      	bne.n	8006110 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0308 	and.w	r3, r3, #8
 8006136:	2b00      	cmp	r3, #0
 8006138:	d036      	beq.n	80061a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d016      	beq.n	8006170 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006142:	4b15      	ldr	r3, [pc, #84]	; (8006198 <HAL_RCC_OscConfig+0x248>)
 8006144:	2201      	movs	r2, #1
 8006146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006148:	f7fd fe3a 	bl	8003dc0 <HAL_GetTick>
 800614c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800614e:	e008      	b.n	8006162 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006150:	f7fd fe36 	bl	8003dc0 <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	2b02      	cmp	r3, #2
 800615c:	d901      	bls.n	8006162 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e167      	b.n	8006432 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006162:	4b0b      	ldr	r3, [pc, #44]	; (8006190 <HAL_RCC_OscConfig+0x240>)
 8006164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006166:	f003 0302 	and.w	r3, r3, #2
 800616a:	2b00      	cmp	r3, #0
 800616c:	d0f0      	beq.n	8006150 <HAL_RCC_OscConfig+0x200>
 800616e:	e01b      	b.n	80061a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006170:	4b09      	ldr	r3, [pc, #36]	; (8006198 <HAL_RCC_OscConfig+0x248>)
 8006172:	2200      	movs	r2, #0
 8006174:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006176:	f7fd fe23 	bl	8003dc0 <HAL_GetTick>
 800617a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800617c:	e00e      	b.n	800619c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800617e:	f7fd fe1f 	bl	8003dc0 <HAL_GetTick>
 8006182:	4602      	mov	r2, r0
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	2b02      	cmp	r3, #2
 800618a:	d907      	bls.n	800619c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e150      	b.n	8006432 <HAL_RCC_OscConfig+0x4e2>
 8006190:	40023800 	.word	0x40023800
 8006194:	42470000 	.word	0x42470000
 8006198:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800619c:	4b88      	ldr	r3, [pc, #544]	; (80063c0 <HAL_RCC_OscConfig+0x470>)
 800619e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061a0:	f003 0302 	and.w	r3, r3, #2
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1ea      	bne.n	800617e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 0304 	and.w	r3, r3, #4
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f000 8097 	beq.w	80062e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061b6:	2300      	movs	r3, #0
 80061b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061ba:	4b81      	ldr	r3, [pc, #516]	; (80063c0 <HAL_RCC_OscConfig+0x470>)
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10f      	bne.n	80061e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061c6:	2300      	movs	r3, #0
 80061c8:	60bb      	str	r3, [r7, #8]
 80061ca:	4b7d      	ldr	r3, [pc, #500]	; (80063c0 <HAL_RCC_OscConfig+0x470>)
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	4a7c      	ldr	r2, [pc, #496]	; (80063c0 <HAL_RCC_OscConfig+0x470>)
 80061d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061d4:	6413      	str	r3, [r2, #64]	; 0x40
 80061d6:	4b7a      	ldr	r3, [pc, #488]	; (80063c0 <HAL_RCC_OscConfig+0x470>)
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061de:	60bb      	str	r3, [r7, #8]
 80061e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061e2:	2301      	movs	r3, #1
 80061e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061e6:	4b77      	ldr	r3, [pc, #476]	; (80063c4 <HAL_RCC_OscConfig+0x474>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d118      	bne.n	8006224 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061f2:	4b74      	ldr	r3, [pc, #464]	; (80063c4 <HAL_RCC_OscConfig+0x474>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a73      	ldr	r2, [pc, #460]	; (80063c4 <HAL_RCC_OscConfig+0x474>)
 80061f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061fe:	f7fd fddf 	bl	8003dc0 <HAL_GetTick>
 8006202:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006204:	e008      	b.n	8006218 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006206:	f7fd fddb 	bl	8003dc0 <HAL_GetTick>
 800620a:	4602      	mov	r2, r0
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	2b02      	cmp	r3, #2
 8006212:	d901      	bls.n	8006218 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e10c      	b.n	8006432 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006218:	4b6a      	ldr	r3, [pc, #424]	; (80063c4 <HAL_RCC_OscConfig+0x474>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006220:	2b00      	cmp	r3, #0
 8006222:	d0f0      	beq.n	8006206 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d106      	bne.n	800623a <HAL_RCC_OscConfig+0x2ea>
 800622c:	4b64      	ldr	r3, [pc, #400]	; (80063c0 <HAL_RCC_OscConfig+0x470>)
 800622e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006230:	4a63      	ldr	r2, [pc, #396]	; (80063c0 <HAL_RCC_OscConfig+0x470>)
 8006232:	f043 0301 	orr.w	r3, r3, #1
 8006236:	6713      	str	r3, [r2, #112]	; 0x70
 8006238:	e01c      	b.n	8006274 <HAL_RCC_OscConfig+0x324>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	2b05      	cmp	r3, #5
 8006240:	d10c      	bne.n	800625c <HAL_RCC_OscConfig+0x30c>
 8006242:	4b5f      	ldr	r3, [pc, #380]	; (80063c0 <HAL_RCC_OscConfig+0x470>)
 8006244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006246:	4a5e      	ldr	r2, [pc, #376]	; (80063c0 <HAL_RCC_OscConfig+0x470>)
 8006248:	f043 0304 	orr.w	r3, r3, #4
 800624c:	6713      	str	r3, [r2, #112]	; 0x70
 800624e:	4b5c      	ldr	r3, [pc, #368]	; (80063c0 <HAL_RCC_OscConfig+0x470>)
 8006250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006252:	4a5b      	ldr	r2, [pc, #364]	; (80063c0 <HAL_RCC_OscConfig+0x470>)
 8006254:	f043 0301 	orr.w	r3, r3, #1
 8006258:	6713      	str	r3, [r2, #112]	; 0x70
 800625a:	e00b      	b.n	8006274 <HAL_RCC_OscConfig+0x324>
 800625c:	4b58      	ldr	r3, [pc, #352]	; (80063c0 <HAL_RCC_OscConfig+0x470>)
 800625e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006260:	4a57      	ldr	r2, [pc, #348]	; (80063c0 <HAL_RCC_OscConfig+0x470>)
 8006262:	f023 0301 	bic.w	r3, r3, #1
 8006266:	6713      	str	r3, [r2, #112]	; 0x70
 8006268:	4b55      	ldr	r3, [pc, #340]	; (80063c0 <HAL_RCC_OscConfig+0x470>)
 800626a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800626c:	4a54      	ldr	r2, [pc, #336]	; (80063c0 <HAL_RCC_OscConfig+0x470>)
 800626e:	f023 0304 	bic.w	r3, r3, #4
 8006272:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d015      	beq.n	80062a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800627c:	f7fd fda0 	bl	8003dc0 <HAL_GetTick>
 8006280:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006282:	e00a      	b.n	800629a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006284:	f7fd fd9c 	bl	8003dc0 <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006292:	4293      	cmp	r3, r2
 8006294:	d901      	bls.n	800629a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e0cb      	b.n	8006432 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800629a:	4b49      	ldr	r3, [pc, #292]	; (80063c0 <HAL_RCC_OscConfig+0x470>)
 800629c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629e:	f003 0302 	and.w	r3, r3, #2
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d0ee      	beq.n	8006284 <HAL_RCC_OscConfig+0x334>
 80062a6:	e014      	b.n	80062d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062a8:	f7fd fd8a 	bl	8003dc0 <HAL_GetTick>
 80062ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062ae:	e00a      	b.n	80062c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062b0:	f7fd fd86 	bl	8003dc0 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80062be:	4293      	cmp	r3, r2
 80062c0:	d901      	bls.n	80062c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e0b5      	b.n	8006432 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062c6:	4b3e      	ldr	r3, [pc, #248]	; (80063c0 <HAL_RCC_OscConfig+0x470>)
 80062c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1ee      	bne.n	80062b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062d2:	7dfb      	ldrb	r3, [r7, #23]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d105      	bne.n	80062e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062d8:	4b39      	ldr	r3, [pc, #228]	; (80063c0 <HAL_RCC_OscConfig+0x470>)
 80062da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062dc:	4a38      	ldr	r2, [pc, #224]	; (80063c0 <HAL_RCC_OscConfig+0x470>)
 80062de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 80a1 	beq.w	8006430 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062ee:	4b34      	ldr	r3, [pc, #208]	; (80063c0 <HAL_RCC_OscConfig+0x470>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f003 030c 	and.w	r3, r3, #12
 80062f6:	2b08      	cmp	r3, #8
 80062f8:	d05c      	beq.n	80063b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d141      	bne.n	8006386 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006302:	4b31      	ldr	r3, [pc, #196]	; (80063c8 <HAL_RCC_OscConfig+0x478>)
 8006304:	2200      	movs	r2, #0
 8006306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006308:	f7fd fd5a 	bl	8003dc0 <HAL_GetTick>
 800630c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800630e:	e008      	b.n	8006322 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006310:	f7fd fd56 	bl	8003dc0 <HAL_GetTick>
 8006314:	4602      	mov	r2, r0
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	2b02      	cmp	r3, #2
 800631c:	d901      	bls.n	8006322 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e087      	b.n	8006432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006322:	4b27      	ldr	r3, [pc, #156]	; (80063c0 <HAL_RCC_OscConfig+0x470>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1f0      	bne.n	8006310 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	69da      	ldr	r2, [r3, #28]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	431a      	orrs	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633c:	019b      	lsls	r3, r3, #6
 800633e:	431a      	orrs	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006344:	085b      	lsrs	r3, r3, #1
 8006346:	3b01      	subs	r3, #1
 8006348:	041b      	lsls	r3, r3, #16
 800634a:	431a      	orrs	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006350:	061b      	lsls	r3, r3, #24
 8006352:	491b      	ldr	r1, [pc, #108]	; (80063c0 <HAL_RCC_OscConfig+0x470>)
 8006354:	4313      	orrs	r3, r2
 8006356:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006358:	4b1b      	ldr	r3, [pc, #108]	; (80063c8 <HAL_RCC_OscConfig+0x478>)
 800635a:	2201      	movs	r2, #1
 800635c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800635e:	f7fd fd2f 	bl	8003dc0 <HAL_GetTick>
 8006362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006364:	e008      	b.n	8006378 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006366:	f7fd fd2b 	bl	8003dc0 <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	2b02      	cmp	r3, #2
 8006372:	d901      	bls.n	8006378 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e05c      	b.n	8006432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006378:	4b11      	ldr	r3, [pc, #68]	; (80063c0 <HAL_RCC_OscConfig+0x470>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d0f0      	beq.n	8006366 <HAL_RCC_OscConfig+0x416>
 8006384:	e054      	b.n	8006430 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006386:	4b10      	ldr	r3, [pc, #64]	; (80063c8 <HAL_RCC_OscConfig+0x478>)
 8006388:	2200      	movs	r2, #0
 800638a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800638c:	f7fd fd18 	bl	8003dc0 <HAL_GetTick>
 8006390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006392:	e008      	b.n	80063a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006394:	f7fd fd14 	bl	8003dc0 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d901      	bls.n	80063a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e045      	b.n	8006432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063a6:	4b06      	ldr	r3, [pc, #24]	; (80063c0 <HAL_RCC_OscConfig+0x470>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1f0      	bne.n	8006394 <HAL_RCC_OscConfig+0x444>
 80063b2:	e03d      	b.n	8006430 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d107      	bne.n	80063cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e038      	b.n	8006432 <HAL_RCC_OscConfig+0x4e2>
 80063c0:	40023800 	.word	0x40023800
 80063c4:	40007000 	.word	0x40007000
 80063c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80063cc:	4b1b      	ldr	r3, [pc, #108]	; (800643c <HAL_RCC_OscConfig+0x4ec>)
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d028      	beq.n	800642c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d121      	bne.n	800642c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d11a      	bne.n	800642c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80063fc:	4013      	ands	r3, r2
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006402:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006404:	4293      	cmp	r3, r2
 8006406:	d111      	bne.n	800642c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006412:	085b      	lsrs	r3, r3, #1
 8006414:	3b01      	subs	r3, #1
 8006416:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006418:	429a      	cmp	r2, r3
 800641a:	d107      	bne.n	800642c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006426:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006428:	429a      	cmp	r2, r3
 800642a:	d001      	beq.n	8006430 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e000      	b.n	8006432 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3718      	adds	r7, #24
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	40023800 	.word	0x40023800

08006440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e0cc      	b.n	80065ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006454:	4b68      	ldr	r3, [pc, #416]	; (80065f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0307 	and.w	r3, r3, #7
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	429a      	cmp	r2, r3
 8006460:	d90c      	bls.n	800647c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006462:	4b65      	ldr	r3, [pc, #404]	; (80065f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006464:	683a      	ldr	r2, [r7, #0]
 8006466:	b2d2      	uxtb	r2, r2
 8006468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800646a:	4b63      	ldr	r3, [pc, #396]	; (80065f8 <HAL_RCC_ClockConfig+0x1b8>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0307 	and.w	r3, r3, #7
 8006472:	683a      	ldr	r2, [r7, #0]
 8006474:	429a      	cmp	r2, r3
 8006476:	d001      	beq.n	800647c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e0b8      	b.n	80065ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0302 	and.w	r3, r3, #2
 8006484:	2b00      	cmp	r3, #0
 8006486:	d020      	beq.n	80064ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0304 	and.w	r3, r3, #4
 8006490:	2b00      	cmp	r3, #0
 8006492:	d005      	beq.n	80064a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006494:	4b59      	ldr	r3, [pc, #356]	; (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	4a58      	ldr	r2, [pc, #352]	; (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 800649a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800649e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0308 	and.w	r3, r3, #8
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d005      	beq.n	80064b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064ac:	4b53      	ldr	r3, [pc, #332]	; (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	4a52      	ldr	r2, [pc, #328]	; (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 80064b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80064b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064b8:	4b50      	ldr	r3, [pc, #320]	; (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	494d      	ldr	r1, [pc, #308]	; (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d044      	beq.n	8006560 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d107      	bne.n	80064ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064de:	4b47      	ldr	r3, [pc, #284]	; (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d119      	bne.n	800651e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e07f      	b.n	80065ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d003      	beq.n	80064fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064fa:	2b03      	cmp	r3, #3
 80064fc:	d107      	bne.n	800650e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064fe:	4b3f      	ldr	r3, [pc, #252]	; (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d109      	bne.n	800651e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e06f      	b.n	80065ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800650e:	4b3b      	ldr	r3, [pc, #236]	; (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e067      	b.n	80065ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800651e:	4b37      	ldr	r3, [pc, #220]	; (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f023 0203 	bic.w	r2, r3, #3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	4934      	ldr	r1, [pc, #208]	; (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 800652c:	4313      	orrs	r3, r2
 800652e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006530:	f7fd fc46 	bl	8003dc0 <HAL_GetTick>
 8006534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006536:	e00a      	b.n	800654e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006538:	f7fd fc42 	bl	8003dc0 <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	f241 3288 	movw	r2, #5000	; 0x1388
 8006546:	4293      	cmp	r3, r2
 8006548:	d901      	bls.n	800654e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e04f      	b.n	80065ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800654e:	4b2b      	ldr	r3, [pc, #172]	; (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f003 020c 	and.w	r2, r3, #12
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	429a      	cmp	r2, r3
 800655e:	d1eb      	bne.n	8006538 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006560:	4b25      	ldr	r3, [pc, #148]	; (80065f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0307 	and.w	r3, r3, #7
 8006568:	683a      	ldr	r2, [r7, #0]
 800656a:	429a      	cmp	r2, r3
 800656c:	d20c      	bcs.n	8006588 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800656e:	4b22      	ldr	r3, [pc, #136]	; (80065f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	b2d2      	uxtb	r2, r2
 8006574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006576:	4b20      	ldr	r3, [pc, #128]	; (80065f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 0307 	and.w	r3, r3, #7
 800657e:	683a      	ldr	r2, [r7, #0]
 8006580:	429a      	cmp	r2, r3
 8006582:	d001      	beq.n	8006588 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e032      	b.n	80065ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0304 	and.w	r3, r3, #4
 8006590:	2b00      	cmp	r3, #0
 8006592:	d008      	beq.n	80065a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006594:	4b19      	ldr	r3, [pc, #100]	; (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	4916      	ldr	r1, [pc, #88]	; (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0308 	and.w	r3, r3, #8
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d009      	beq.n	80065c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065b2:	4b12      	ldr	r3, [pc, #72]	; (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	00db      	lsls	r3, r3, #3
 80065c0:	490e      	ldr	r1, [pc, #56]	; (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80065c6:	f000 f821 	bl	800660c <HAL_RCC_GetSysClockFreq>
 80065ca:	4602      	mov	r2, r0
 80065cc:	4b0b      	ldr	r3, [pc, #44]	; (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	091b      	lsrs	r3, r3, #4
 80065d2:	f003 030f 	and.w	r3, r3, #15
 80065d6:	490a      	ldr	r1, [pc, #40]	; (8006600 <HAL_RCC_ClockConfig+0x1c0>)
 80065d8:	5ccb      	ldrb	r3, [r1, r3]
 80065da:	fa22 f303 	lsr.w	r3, r2, r3
 80065de:	4a09      	ldr	r2, [pc, #36]	; (8006604 <HAL_RCC_ClockConfig+0x1c4>)
 80065e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80065e2:	4b09      	ldr	r3, [pc, #36]	; (8006608 <HAL_RCC_ClockConfig+0x1c8>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7fc fe40 	bl	800326c <HAL_InitTick>

  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	40023c00 	.word	0x40023c00
 80065fc:	40023800 	.word	0x40023800
 8006600:	0800f218 	.word	0x0800f218
 8006604:	2000001c 	.word	0x2000001c
 8006608:	20000020 	.word	0x20000020

0800660c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800660c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006610:	b094      	sub	sp, #80	; 0x50
 8006612:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006614:	2300      	movs	r3, #0
 8006616:	647b      	str	r3, [r7, #68]	; 0x44
 8006618:	2300      	movs	r3, #0
 800661a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800661c:	2300      	movs	r3, #0
 800661e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006620:	2300      	movs	r3, #0
 8006622:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006624:	4b79      	ldr	r3, [pc, #484]	; (800680c <HAL_RCC_GetSysClockFreq+0x200>)
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f003 030c 	and.w	r3, r3, #12
 800662c:	2b08      	cmp	r3, #8
 800662e:	d00d      	beq.n	800664c <HAL_RCC_GetSysClockFreq+0x40>
 8006630:	2b08      	cmp	r3, #8
 8006632:	f200 80e1 	bhi.w	80067f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006636:	2b00      	cmp	r3, #0
 8006638:	d002      	beq.n	8006640 <HAL_RCC_GetSysClockFreq+0x34>
 800663a:	2b04      	cmp	r3, #4
 800663c:	d003      	beq.n	8006646 <HAL_RCC_GetSysClockFreq+0x3a>
 800663e:	e0db      	b.n	80067f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006640:	4b73      	ldr	r3, [pc, #460]	; (8006810 <HAL_RCC_GetSysClockFreq+0x204>)
 8006642:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006644:	e0db      	b.n	80067fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006646:	4b73      	ldr	r3, [pc, #460]	; (8006814 <HAL_RCC_GetSysClockFreq+0x208>)
 8006648:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800664a:	e0d8      	b.n	80067fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800664c:	4b6f      	ldr	r3, [pc, #444]	; (800680c <HAL_RCC_GetSysClockFreq+0x200>)
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006654:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006656:	4b6d      	ldr	r3, [pc, #436]	; (800680c <HAL_RCC_GetSysClockFreq+0x200>)
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d063      	beq.n	800672a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006662:	4b6a      	ldr	r3, [pc, #424]	; (800680c <HAL_RCC_GetSysClockFreq+0x200>)
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	099b      	lsrs	r3, r3, #6
 8006668:	2200      	movs	r2, #0
 800666a:	63bb      	str	r3, [r7, #56]	; 0x38
 800666c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800666e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006674:	633b      	str	r3, [r7, #48]	; 0x30
 8006676:	2300      	movs	r3, #0
 8006678:	637b      	str	r3, [r7, #52]	; 0x34
 800667a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800667e:	4622      	mov	r2, r4
 8006680:	462b      	mov	r3, r5
 8006682:	f04f 0000 	mov.w	r0, #0
 8006686:	f04f 0100 	mov.w	r1, #0
 800668a:	0159      	lsls	r1, r3, #5
 800668c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006690:	0150      	lsls	r0, r2, #5
 8006692:	4602      	mov	r2, r0
 8006694:	460b      	mov	r3, r1
 8006696:	4621      	mov	r1, r4
 8006698:	1a51      	subs	r1, r2, r1
 800669a:	6139      	str	r1, [r7, #16]
 800669c:	4629      	mov	r1, r5
 800669e:	eb63 0301 	sbc.w	r3, r3, r1
 80066a2:	617b      	str	r3, [r7, #20]
 80066a4:	f04f 0200 	mov.w	r2, #0
 80066a8:	f04f 0300 	mov.w	r3, #0
 80066ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066b0:	4659      	mov	r1, fp
 80066b2:	018b      	lsls	r3, r1, #6
 80066b4:	4651      	mov	r1, sl
 80066b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80066ba:	4651      	mov	r1, sl
 80066bc:	018a      	lsls	r2, r1, #6
 80066be:	4651      	mov	r1, sl
 80066c0:	ebb2 0801 	subs.w	r8, r2, r1
 80066c4:	4659      	mov	r1, fp
 80066c6:	eb63 0901 	sbc.w	r9, r3, r1
 80066ca:	f04f 0200 	mov.w	r2, #0
 80066ce:	f04f 0300 	mov.w	r3, #0
 80066d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066de:	4690      	mov	r8, r2
 80066e0:	4699      	mov	r9, r3
 80066e2:	4623      	mov	r3, r4
 80066e4:	eb18 0303 	adds.w	r3, r8, r3
 80066e8:	60bb      	str	r3, [r7, #8]
 80066ea:	462b      	mov	r3, r5
 80066ec:	eb49 0303 	adc.w	r3, r9, r3
 80066f0:	60fb      	str	r3, [r7, #12]
 80066f2:	f04f 0200 	mov.w	r2, #0
 80066f6:	f04f 0300 	mov.w	r3, #0
 80066fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80066fe:	4629      	mov	r1, r5
 8006700:	024b      	lsls	r3, r1, #9
 8006702:	4621      	mov	r1, r4
 8006704:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006708:	4621      	mov	r1, r4
 800670a:	024a      	lsls	r2, r1, #9
 800670c:	4610      	mov	r0, r2
 800670e:	4619      	mov	r1, r3
 8006710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006712:	2200      	movs	r2, #0
 8006714:	62bb      	str	r3, [r7, #40]	; 0x28
 8006716:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006718:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800671c:	f7fa f956 	bl	80009cc <__aeabi_uldivmod>
 8006720:	4602      	mov	r2, r0
 8006722:	460b      	mov	r3, r1
 8006724:	4613      	mov	r3, r2
 8006726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006728:	e058      	b.n	80067dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800672a:	4b38      	ldr	r3, [pc, #224]	; (800680c <HAL_RCC_GetSysClockFreq+0x200>)
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	099b      	lsrs	r3, r3, #6
 8006730:	2200      	movs	r2, #0
 8006732:	4618      	mov	r0, r3
 8006734:	4611      	mov	r1, r2
 8006736:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800673a:	623b      	str	r3, [r7, #32]
 800673c:	2300      	movs	r3, #0
 800673e:	627b      	str	r3, [r7, #36]	; 0x24
 8006740:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006744:	4642      	mov	r2, r8
 8006746:	464b      	mov	r3, r9
 8006748:	f04f 0000 	mov.w	r0, #0
 800674c:	f04f 0100 	mov.w	r1, #0
 8006750:	0159      	lsls	r1, r3, #5
 8006752:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006756:	0150      	lsls	r0, r2, #5
 8006758:	4602      	mov	r2, r0
 800675a:	460b      	mov	r3, r1
 800675c:	4641      	mov	r1, r8
 800675e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006762:	4649      	mov	r1, r9
 8006764:	eb63 0b01 	sbc.w	fp, r3, r1
 8006768:	f04f 0200 	mov.w	r2, #0
 800676c:	f04f 0300 	mov.w	r3, #0
 8006770:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006774:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006778:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800677c:	ebb2 040a 	subs.w	r4, r2, sl
 8006780:	eb63 050b 	sbc.w	r5, r3, fp
 8006784:	f04f 0200 	mov.w	r2, #0
 8006788:	f04f 0300 	mov.w	r3, #0
 800678c:	00eb      	lsls	r3, r5, #3
 800678e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006792:	00e2      	lsls	r2, r4, #3
 8006794:	4614      	mov	r4, r2
 8006796:	461d      	mov	r5, r3
 8006798:	4643      	mov	r3, r8
 800679a:	18e3      	adds	r3, r4, r3
 800679c:	603b      	str	r3, [r7, #0]
 800679e:	464b      	mov	r3, r9
 80067a0:	eb45 0303 	adc.w	r3, r5, r3
 80067a4:	607b      	str	r3, [r7, #4]
 80067a6:	f04f 0200 	mov.w	r2, #0
 80067aa:	f04f 0300 	mov.w	r3, #0
 80067ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80067b2:	4629      	mov	r1, r5
 80067b4:	028b      	lsls	r3, r1, #10
 80067b6:	4621      	mov	r1, r4
 80067b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80067bc:	4621      	mov	r1, r4
 80067be:	028a      	lsls	r2, r1, #10
 80067c0:	4610      	mov	r0, r2
 80067c2:	4619      	mov	r1, r3
 80067c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067c6:	2200      	movs	r2, #0
 80067c8:	61bb      	str	r3, [r7, #24]
 80067ca:	61fa      	str	r2, [r7, #28]
 80067cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067d0:	f7fa f8fc 	bl	80009cc <__aeabi_uldivmod>
 80067d4:	4602      	mov	r2, r0
 80067d6:	460b      	mov	r3, r1
 80067d8:	4613      	mov	r3, r2
 80067da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80067dc:	4b0b      	ldr	r3, [pc, #44]	; (800680c <HAL_RCC_GetSysClockFreq+0x200>)
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	0c1b      	lsrs	r3, r3, #16
 80067e2:	f003 0303 	and.w	r3, r3, #3
 80067e6:	3301      	adds	r3, #1
 80067e8:	005b      	lsls	r3, r3, #1
 80067ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80067ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80067f6:	e002      	b.n	80067fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80067f8:	4b05      	ldr	r3, [pc, #20]	; (8006810 <HAL_RCC_GetSysClockFreq+0x204>)
 80067fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80067fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006800:	4618      	mov	r0, r3
 8006802:	3750      	adds	r7, #80	; 0x50
 8006804:	46bd      	mov	sp, r7
 8006806:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800680a:	bf00      	nop
 800680c:	40023800 	.word	0x40023800
 8006810:	00f42400 	.word	0x00f42400
 8006814:	007a1200 	.word	0x007a1200

08006818 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006818:	b480      	push	{r7}
 800681a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800681c:	4b03      	ldr	r3, [pc, #12]	; (800682c <HAL_RCC_GetHCLKFreq+0x14>)
 800681e:	681b      	ldr	r3, [r3, #0]
}
 8006820:	4618      	mov	r0, r3
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	2000001c 	.word	0x2000001c

08006830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006834:	f7ff fff0 	bl	8006818 <HAL_RCC_GetHCLKFreq>
 8006838:	4602      	mov	r2, r0
 800683a:	4b05      	ldr	r3, [pc, #20]	; (8006850 <HAL_RCC_GetPCLK1Freq+0x20>)
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	0a9b      	lsrs	r3, r3, #10
 8006840:	f003 0307 	and.w	r3, r3, #7
 8006844:	4903      	ldr	r1, [pc, #12]	; (8006854 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006846:	5ccb      	ldrb	r3, [r1, r3]
 8006848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800684c:	4618      	mov	r0, r3
 800684e:	bd80      	pop	{r7, pc}
 8006850:	40023800 	.word	0x40023800
 8006854:	0800f228 	.word	0x0800f228

08006858 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800685c:	f7ff ffdc 	bl	8006818 <HAL_RCC_GetHCLKFreq>
 8006860:	4602      	mov	r2, r0
 8006862:	4b05      	ldr	r3, [pc, #20]	; (8006878 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	0b5b      	lsrs	r3, r3, #13
 8006868:	f003 0307 	and.w	r3, r3, #7
 800686c:	4903      	ldr	r1, [pc, #12]	; (800687c <HAL_RCC_GetPCLK2Freq+0x24>)
 800686e:	5ccb      	ldrb	r3, [r1, r3]
 8006870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006874:	4618      	mov	r0, r3
 8006876:	bd80      	pop	{r7, pc}
 8006878:	40023800 	.word	0x40023800
 800687c:	0800f228 	.word	0x0800f228

08006880 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	220f      	movs	r2, #15
 800688e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006890:	4b12      	ldr	r3, [pc, #72]	; (80068dc <HAL_RCC_GetClockConfig+0x5c>)
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f003 0203 	and.w	r2, r3, #3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800689c:	4b0f      	ldr	r3, [pc, #60]	; (80068dc <HAL_RCC_GetClockConfig+0x5c>)
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80068a8:	4b0c      	ldr	r3, [pc, #48]	; (80068dc <HAL_RCC_GetClockConfig+0x5c>)
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80068b4:	4b09      	ldr	r3, [pc, #36]	; (80068dc <HAL_RCC_GetClockConfig+0x5c>)
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	08db      	lsrs	r3, r3, #3
 80068ba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80068c2:	4b07      	ldr	r3, [pc, #28]	; (80068e0 <HAL_RCC_GetClockConfig+0x60>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0207 	and.w	r2, r3, #7
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	601a      	str	r2, [r3, #0]
}
 80068ce:	bf00      	nop
 80068d0:	370c      	adds	r7, #12
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	40023800 	.word	0x40023800
 80068e0:	40023c00 	.word	0x40023c00

080068e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e04c      	b.n	8006990 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d111      	bne.n	8006926 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f001 fc0e 	bl	800812c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006914:	2b00      	cmp	r3, #0
 8006916:	d102      	bne.n	800691e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a1f      	ldr	r2, [pc, #124]	; (8006998 <HAL_TIM_Base_Init+0xb4>)
 800691c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2202      	movs	r2, #2
 800692a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	3304      	adds	r3, #4
 8006936:	4619      	mov	r1, r3
 8006938:	4610      	mov	r0, r2
 800693a:	f001 f80d 	bl	8007958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2201      	movs	r2, #1
 8006972:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	08003695 	.word	0x08003695

0800699c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d001      	beq.n	80069b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e044      	b.n	8006a3e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68da      	ldr	r2, [r3, #12]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f042 0201 	orr.w	r2, r2, #1
 80069ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a1e      	ldr	r2, [pc, #120]	; (8006a4c <HAL_TIM_Base_Start_IT+0xb0>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d018      	beq.n	8006a08 <HAL_TIM_Base_Start_IT+0x6c>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069de:	d013      	beq.n	8006a08 <HAL_TIM_Base_Start_IT+0x6c>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a1a      	ldr	r2, [pc, #104]	; (8006a50 <HAL_TIM_Base_Start_IT+0xb4>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d00e      	beq.n	8006a08 <HAL_TIM_Base_Start_IT+0x6c>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a19      	ldr	r2, [pc, #100]	; (8006a54 <HAL_TIM_Base_Start_IT+0xb8>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d009      	beq.n	8006a08 <HAL_TIM_Base_Start_IT+0x6c>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a17      	ldr	r2, [pc, #92]	; (8006a58 <HAL_TIM_Base_Start_IT+0xbc>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d004      	beq.n	8006a08 <HAL_TIM_Base_Start_IT+0x6c>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a16      	ldr	r2, [pc, #88]	; (8006a5c <HAL_TIM_Base_Start_IT+0xc0>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d111      	bne.n	8006a2c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f003 0307 	and.w	r3, r3, #7
 8006a12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2b06      	cmp	r3, #6
 8006a18:	d010      	beq.n	8006a3c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f042 0201 	orr.w	r2, r2, #1
 8006a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a2a:	e007      	b.n	8006a3c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f042 0201 	orr.w	r2, r2, #1
 8006a3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3714      	adds	r7, #20
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	40010000 	.word	0x40010000
 8006a50:	40000400 	.word	0x40000400
 8006a54:	40000800 	.word	0x40000800
 8006a58:	40000c00 	.word	0x40000c00
 8006a5c:	40014000 	.word	0x40014000

08006a60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e04c      	b.n	8006b0c <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d111      	bne.n	8006aa2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f001 fb50 	bl	800812c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d102      	bne.n	8006a9a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a1f      	ldr	r2, [pc, #124]	; (8006b14 <HAL_TIM_PWM_Init+0xb4>)
 8006a98:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2202      	movs	r2, #2
 8006aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	3304      	adds	r3, #4
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	f000 ff4f 	bl	8007958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	08006b19 	.word	0x08006b19

08006b18 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b36:	2300      	movs	r3, #0
 8006b38:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d109      	bne.n	8006b54 <HAL_TIM_PWM_Start_IT+0x28>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	bf14      	ite	ne
 8006b4c:	2301      	movne	r3, #1
 8006b4e:	2300      	moveq	r3, #0
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	e022      	b.n	8006b9a <HAL_TIM_PWM_Start_IT+0x6e>
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	2b04      	cmp	r3, #4
 8006b58:	d109      	bne.n	8006b6e <HAL_TIM_PWM_Start_IT+0x42>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	bf14      	ite	ne
 8006b66:	2301      	movne	r3, #1
 8006b68:	2300      	moveq	r3, #0
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	e015      	b.n	8006b9a <HAL_TIM_PWM_Start_IT+0x6e>
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	2b08      	cmp	r3, #8
 8006b72:	d109      	bne.n	8006b88 <HAL_TIM_PWM_Start_IT+0x5c>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	bf14      	ite	ne
 8006b80:	2301      	movne	r3, #1
 8006b82:	2300      	moveq	r3, #0
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	e008      	b.n	8006b9a <HAL_TIM_PWM_Start_IT+0x6e>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	bf14      	ite	ne
 8006b94:	2301      	movne	r3, #1
 8006b96:	2300      	moveq	r3, #0
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e0b3      	b.n	8006d0a <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d104      	bne.n	8006bb2 <HAL_TIM_PWM_Start_IT+0x86>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2202      	movs	r2, #2
 8006bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bb0:	e013      	b.n	8006bda <HAL_TIM_PWM_Start_IT+0xae>
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b04      	cmp	r3, #4
 8006bb6:	d104      	bne.n	8006bc2 <HAL_TIM_PWM_Start_IT+0x96>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bc0:	e00b      	b.n	8006bda <HAL_TIM_PWM_Start_IT+0xae>
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	2b08      	cmp	r3, #8
 8006bc6:	d104      	bne.n	8006bd2 <HAL_TIM_PWM_Start_IT+0xa6>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bd0:	e003      	b.n	8006bda <HAL_TIM_PWM_Start_IT+0xae>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2202      	movs	r2, #2
 8006bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	2b0c      	cmp	r3, #12
 8006bde:	d841      	bhi.n	8006c64 <HAL_TIM_PWM_Start_IT+0x138>
 8006be0:	a201      	add	r2, pc, #4	; (adr r2, 8006be8 <HAL_TIM_PWM_Start_IT+0xbc>)
 8006be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be6:	bf00      	nop
 8006be8:	08006c1d 	.word	0x08006c1d
 8006bec:	08006c65 	.word	0x08006c65
 8006bf0:	08006c65 	.word	0x08006c65
 8006bf4:	08006c65 	.word	0x08006c65
 8006bf8:	08006c2f 	.word	0x08006c2f
 8006bfc:	08006c65 	.word	0x08006c65
 8006c00:	08006c65 	.word	0x08006c65
 8006c04:	08006c65 	.word	0x08006c65
 8006c08:	08006c41 	.word	0x08006c41
 8006c0c:	08006c65 	.word	0x08006c65
 8006c10:	08006c65 	.word	0x08006c65
 8006c14:	08006c65 	.word	0x08006c65
 8006c18:	08006c53 	.word	0x08006c53
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68da      	ldr	r2, [r3, #12]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f042 0202 	orr.w	r2, r2, #2
 8006c2a:	60da      	str	r2, [r3, #12]
      break;
 8006c2c:	e01d      	b.n	8006c6a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68da      	ldr	r2, [r3, #12]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f042 0204 	orr.w	r2, r2, #4
 8006c3c:	60da      	str	r2, [r3, #12]
      break;
 8006c3e:	e014      	b.n	8006c6a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68da      	ldr	r2, [r3, #12]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f042 0208 	orr.w	r2, r2, #8
 8006c4e:	60da      	str	r2, [r3, #12]
      break;
 8006c50:	e00b      	b.n	8006c6a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68da      	ldr	r2, [r3, #12]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f042 0210 	orr.w	r2, r2, #16
 8006c60:	60da      	str	r2, [r3, #12]
      break;
 8006c62:	e002      	b.n	8006c6a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	73fb      	strb	r3, [r7, #15]
      break;
 8006c68:	bf00      	nop
  }

  if (status == HAL_OK)
 8006c6a:	7bfb      	ldrb	r3, [r7, #15]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d14b      	bne.n	8006d08 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2201      	movs	r2, #1
 8006c76:	6839      	ldr	r1, [r7, #0]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f001 fa31 	bl	80080e0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a24      	ldr	r2, [pc, #144]	; (8006d14 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d107      	bne.n	8006c98 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c96:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a1d      	ldr	r2, [pc, #116]	; (8006d14 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d018      	beq.n	8006cd4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006caa:	d013      	beq.n	8006cd4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a19      	ldr	r2, [pc, #100]	; (8006d18 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d00e      	beq.n	8006cd4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a18      	ldr	r2, [pc, #96]	; (8006d1c <HAL_TIM_PWM_Start_IT+0x1f0>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d009      	beq.n	8006cd4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a16      	ldr	r2, [pc, #88]	; (8006d20 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d004      	beq.n	8006cd4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a15      	ldr	r2, [pc, #84]	; (8006d24 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d111      	bne.n	8006cf8 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f003 0307 	and.w	r3, r3, #7
 8006cde:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	2b06      	cmp	r3, #6
 8006ce4:	d010      	beq.n	8006d08 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f042 0201 	orr.w	r2, r2, #1
 8006cf4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cf6:	e007      	b.n	8006d08 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f042 0201 	orr.w	r2, r2, #1
 8006d06:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	40010000 	.word	0x40010000
 8006d18:	40000400 	.word	0x40000400
 8006d1c:	40000800 	.word	0x40000800
 8006d20:	40000c00 	.word	0x40000c00
 8006d24:	40014000 	.word	0x40014000

08006d28 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d32:	2300      	movs	r3, #0
 8006d34:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	2b0c      	cmp	r3, #12
 8006d3a:	d841      	bhi.n	8006dc0 <HAL_TIM_PWM_Stop_IT+0x98>
 8006d3c:	a201      	add	r2, pc, #4	; (adr r2, 8006d44 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8006d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d42:	bf00      	nop
 8006d44:	08006d79 	.word	0x08006d79
 8006d48:	08006dc1 	.word	0x08006dc1
 8006d4c:	08006dc1 	.word	0x08006dc1
 8006d50:	08006dc1 	.word	0x08006dc1
 8006d54:	08006d8b 	.word	0x08006d8b
 8006d58:	08006dc1 	.word	0x08006dc1
 8006d5c:	08006dc1 	.word	0x08006dc1
 8006d60:	08006dc1 	.word	0x08006dc1
 8006d64:	08006d9d 	.word	0x08006d9d
 8006d68:	08006dc1 	.word	0x08006dc1
 8006d6c:	08006dc1 	.word	0x08006dc1
 8006d70:	08006dc1 	.word	0x08006dc1
 8006d74:	08006daf 	.word	0x08006daf
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68da      	ldr	r2, [r3, #12]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f022 0202 	bic.w	r2, r2, #2
 8006d86:	60da      	str	r2, [r3, #12]
      break;
 8006d88:	e01d      	b.n	8006dc6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68da      	ldr	r2, [r3, #12]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f022 0204 	bic.w	r2, r2, #4
 8006d98:	60da      	str	r2, [r3, #12]
      break;
 8006d9a:	e014      	b.n	8006dc6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68da      	ldr	r2, [r3, #12]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f022 0208 	bic.w	r2, r2, #8
 8006daa:	60da      	str	r2, [r3, #12]
      break;
 8006dac:	e00b      	b.n	8006dc6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68da      	ldr	r2, [r3, #12]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f022 0210 	bic.w	r2, r2, #16
 8006dbc:	60da      	str	r2, [r3, #12]
      break;
 8006dbe:	e002      	b.n	8006dc6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8006dc4:	bf00      	nop
  }

  if (status == HAL_OK)
 8006dc6:	7bfb      	ldrb	r3, [r7, #15]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d157      	bne.n	8006e7c <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f001 f983 	bl	80080e0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a2a      	ldr	r2, [pc, #168]	; (8006e88 <HAL_TIM_PWM_Stop_IT+0x160>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d117      	bne.n	8006e14 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6a1a      	ldr	r2, [r3, #32]
 8006dea:	f241 1311 	movw	r3, #4369	; 0x1111
 8006dee:	4013      	ands	r3, r2
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d10f      	bne.n	8006e14 <HAL_TIM_PWM_Stop_IT+0xec>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	6a1a      	ldr	r2, [r3, #32]
 8006dfa:	f240 4344 	movw	r3, #1092	; 0x444
 8006dfe:	4013      	ands	r3, r2
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d107      	bne.n	8006e14 <HAL_TIM_PWM_Stop_IT+0xec>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e12:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6a1a      	ldr	r2, [r3, #32]
 8006e1a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e1e:	4013      	ands	r3, r2
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10f      	bne.n	8006e44 <HAL_TIM_PWM_Stop_IT+0x11c>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6a1a      	ldr	r2, [r3, #32]
 8006e2a:	f240 4344 	movw	r3, #1092	; 0x444
 8006e2e:	4013      	ands	r3, r2
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d107      	bne.n	8006e44 <HAL_TIM_PWM_Stop_IT+0x11c>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f022 0201 	bic.w	r2, r2, #1
 8006e42:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d104      	bne.n	8006e54 <HAL_TIM_PWM_Stop_IT+0x12c>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e52:	e013      	b.n	8006e7c <HAL_TIM_PWM_Stop_IT+0x154>
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	2b04      	cmp	r3, #4
 8006e58:	d104      	bne.n	8006e64 <HAL_TIM_PWM_Stop_IT+0x13c>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e62:	e00b      	b.n	8006e7c <HAL_TIM_PWM_Stop_IT+0x154>
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	2b08      	cmp	r3, #8
 8006e68:	d104      	bne.n	8006e74 <HAL_TIM_PWM_Stop_IT+0x14c>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e72:	e003      	b.n	8006e7c <HAL_TIM_PWM_Stop_IT+0x154>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8006e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	40010000 	.word	0x40010000

08006e8c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d101      	bne.n	8006e9e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e04c      	b.n	8006f38 <HAL_TIM_IC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d111      	bne.n	8006ece <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f001 f93a 	bl	800812c <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d102      	bne.n	8006ec6 <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a1f      	ldr	r2, [pc, #124]	; (8006f40 <HAL_TIM_IC_Init+0xb4>)
 8006ec4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2202      	movs	r2, #2
 8006ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	3304      	adds	r3, #4
 8006ede:	4619      	mov	r1, r3
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	f000 fd39 	bl	8007958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2201      	movs	r2, #1
 8006f12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3708      	adds	r7, #8
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	08006f45 	.word	0x08006f45

08006f44 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d104      	bne.n	8006f76 <HAL_TIM_IC_Start_IT+0x1e>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	e013      	b.n	8006f9e <HAL_TIM_IC_Start_IT+0x46>
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	2b04      	cmp	r3, #4
 8006f7a:	d104      	bne.n	8006f86 <HAL_TIM_IC_Start_IT+0x2e>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	e00b      	b.n	8006f9e <HAL_TIM_IC_Start_IT+0x46>
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	2b08      	cmp	r3, #8
 8006f8a:	d104      	bne.n	8006f96 <HAL_TIM_IC_Start_IT+0x3e>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	e003      	b.n	8006f9e <HAL_TIM_IC_Start_IT+0x46>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d104      	bne.n	8006fb0 <HAL_TIM_IC_Start_IT+0x58>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	e013      	b.n	8006fd8 <HAL_TIM_IC_Start_IT+0x80>
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	2b04      	cmp	r3, #4
 8006fb4:	d104      	bne.n	8006fc0 <HAL_TIM_IC_Start_IT+0x68>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	e00b      	b.n	8006fd8 <HAL_TIM_IC_Start_IT+0x80>
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	2b08      	cmp	r3, #8
 8006fc4:	d104      	bne.n	8006fd0 <HAL_TIM_IC_Start_IT+0x78>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	e003      	b.n	8006fd8 <HAL_TIM_IC_Start_IT+0x80>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fda:	7bbb      	ldrb	r3, [r7, #14]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d102      	bne.n	8006fe6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fe0:	7b7b      	ldrb	r3, [r7, #13]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d001      	beq.n	8006fea <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e0c2      	b.n	8007170 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d104      	bne.n	8006ffa <HAL_TIM_IC_Start_IT+0xa2>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ff8:	e013      	b.n	8007022 <HAL_TIM_IC_Start_IT+0xca>
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	2b04      	cmp	r3, #4
 8006ffe:	d104      	bne.n	800700a <HAL_TIM_IC_Start_IT+0xb2>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2202      	movs	r2, #2
 8007004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007008:	e00b      	b.n	8007022 <HAL_TIM_IC_Start_IT+0xca>
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b08      	cmp	r3, #8
 800700e:	d104      	bne.n	800701a <HAL_TIM_IC_Start_IT+0xc2>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2202      	movs	r2, #2
 8007014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007018:	e003      	b.n	8007022 <HAL_TIM_IC_Start_IT+0xca>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2202      	movs	r2, #2
 800701e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d104      	bne.n	8007032 <HAL_TIM_IC_Start_IT+0xda>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2202      	movs	r2, #2
 800702c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007030:	e013      	b.n	800705a <HAL_TIM_IC_Start_IT+0x102>
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2b04      	cmp	r3, #4
 8007036:	d104      	bne.n	8007042 <HAL_TIM_IC_Start_IT+0xea>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2202      	movs	r2, #2
 800703c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007040:	e00b      	b.n	800705a <HAL_TIM_IC_Start_IT+0x102>
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	2b08      	cmp	r3, #8
 8007046:	d104      	bne.n	8007052 <HAL_TIM_IC_Start_IT+0xfa>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2202      	movs	r2, #2
 800704c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007050:	e003      	b.n	800705a <HAL_TIM_IC_Start_IT+0x102>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2202      	movs	r2, #2
 8007056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b0c      	cmp	r3, #12
 800705e:	d841      	bhi.n	80070e4 <HAL_TIM_IC_Start_IT+0x18c>
 8007060:	a201      	add	r2, pc, #4	; (adr r2, 8007068 <HAL_TIM_IC_Start_IT+0x110>)
 8007062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007066:	bf00      	nop
 8007068:	0800709d 	.word	0x0800709d
 800706c:	080070e5 	.word	0x080070e5
 8007070:	080070e5 	.word	0x080070e5
 8007074:	080070e5 	.word	0x080070e5
 8007078:	080070af 	.word	0x080070af
 800707c:	080070e5 	.word	0x080070e5
 8007080:	080070e5 	.word	0x080070e5
 8007084:	080070e5 	.word	0x080070e5
 8007088:	080070c1 	.word	0x080070c1
 800708c:	080070e5 	.word	0x080070e5
 8007090:	080070e5 	.word	0x080070e5
 8007094:	080070e5 	.word	0x080070e5
 8007098:	080070d3 	.word	0x080070d3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68da      	ldr	r2, [r3, #12]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f042 0202 	orr.w	r2, r2, #2
 80070aa:	60da      	str	r2, [r3, #12]
      break;
 80070ac:	e01d      	b.n	80070ea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68da      	ldr	r2, [r3, #12]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f042 0204 	orr.w	r2, r2, #4
 80070bc:	60da      	str	r2, [r3, #12]
      break;
 80070be:	e014      	b.n	80070ea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68da      	ldr	r2, [r3, #12]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f042 0208 	orr.w	r2, r2, #8
 80070ce:	60da      	str	r2, [r3, #12]
      break;
 80070d0:	e00b      	b.n	80070ea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68da      	ldr	r2, [r3, #12]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f042 0210 	orr.w	r2, r2, #16
 80070e0:	60da      	str	r2, [r3, #12]
      break;
 80070e2:	e002      	b.n	80070ea <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	73fb      	strb	r3, [r7, #15]
      break;
 80070e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80070ea:	7bfb      	ldrb	r3, [r7, #15]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d13e      	bne.n	800716e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2201      	movs	r2, #1
 80070f6:	6839      	ldr	r1, [r7, #0]
 80070f8:	4618      	mov	r0, r3
 80070fa:	f000 fff1 	bl	80080e0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a1d      	ldr	r2, [pc, #116]	; (8007178 <HAL_TIM_IC_Start_IT+0x220>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d018      	beq.n	800713a <HAL_TIM_IC_Start_IT+0x1e2>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007110:	d013      	beq.n	800713a <HAL_TIM_IC_Start_IT+0x1e2>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a19      	ldr	r2, [pc, #100]	; (800717c <HAL_TIM_IC_Start_IT+0x224>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d00e      	beq.n	800713a <HAL_TIM_IC_Start_IT+0x1e2>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a17      	ldr	r2, [pc, #92]	; (8007180 <HAL_TIM_IC_Start_IT+0x228>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d009      	beq.n	800713a <HAL_TIM_IC_Start_IT+0x1e2>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a16      	ldr	r2, [pc, #88]	; (8007184 <HAL_TIM_IC_Start_IT+0x22c>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d004      	beq.n	800713a <HAL_TIM_IC_Start_IT+0x1e2>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a14      	ldr	r2, [pc, #80]	; (8007188 <HAL_TIM_IC_Start_IT+0x230>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d111      	bne.n	800715e <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	f003 0307 	and.w	r3, r3, #7
 8007144:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	2b06      	cmp	r3, #6
 800714a:	d010      	beq.n	800716e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f042 0201 	orr.w	r2, r2, #1
 800715a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800715c:	e007      	b.n	800716e <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f042 0201 	orr.w	r2, r2, #1
 800716c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800716e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007170:	4618      	mov	r0, r3
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	40010000 	.word	0x40010000
 800717c:	40000400 	.word	0x40000400
 8007180:	40000800 	.word	0x40000800
 8007184:	40000c00 	.word	0x40000c00
 8007188:	40014000 	.word	0x40014000

0800718c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d128      	bne.n	80071f4 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	f003 0302 	and.w	r3, r3, #2
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d121      	bne.n	80071f4 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f06f 0202 	mvn.w	r2, #2
 80071b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2201      	movs	r2, #1
 80071be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	f003 0303 	and.w	r3, r3, #3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d005      	beq.n	80071da <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	4798      	blx	r3
 80071d8:	e009      	b.n	80071ee <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	f003 0304 	and.w	r3, r3, #4
 80071fe:	2b04      	cmp	r3, #4
 8007200:	d128      	bne.n	8007254 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	f003 0304 	and.w	r3, r3, #4
 800720c:	2b04      	cmp	r3, #4
 800720e:	d121      	bne.n	8007254 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f06f 0204 	mvn.w	r2, #4
 8007218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2202      	movs	r2, #2
 800721e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800722a:	2b00      	cmp	r3, #0
 800722c:	d005      	beq.n	800723a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	4798      	blx	r3
 8007238:	e009      	b.n	800724e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	f003 0308 	and.w	r3, r3, #8
 800725e:	2b08      	cmp	r3, #8
 8007260:	d128      	bne.n	80072b4 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	f003 0308 	and.w	r3, r3, #8
 800726c:	2b08      	cmp	r3, #8
 800726e:	d121      	bne.n	80072b4 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f06f 0208 	mvn.w	r2, #8
 8007278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2204      	movs	r2, #4
 800727e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	69db      	ldr	r3, [r3, #28]
 8007286:	f003 0303 	and.w	r3, r3, #3
 800728a:	2b00      	cmp	r3, #0
 800728c:	d005      	beq.n	800729a <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	4798      	blx	r3
 8007298:	e009      	b.n	80072ae <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	f003 0310 	and.w	r3, r3, #16
 80072be:	2b10      	cmp	r3, #16
 80072c0:	d128      	bne.n	8007314 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	f003 0310 	and.w	r3, r3, #16
 80072cc:	2b10      	cmp	r3, #16
 80072ce:	d121      	bne.n	8007314 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f06f 0210 	mvn.w	r2, #16
 80072d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2208      	movs	r2, #8
 80072de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	69db      	ldr	r3, [r3, #28]
 80072e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d005      	beq.n	80072fa <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	4798      	blx	r3
 80072f8:	e009      	b.n	800730e <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	f003 0301 	and.w	r3, r3, #1
 800731e:	2b01      	cmp	r3, #1
 8007320:	d110      	bne.n	8007344 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	f003 0301 	and.w	r3, r3, #1
 800732c:	2b01      	cmp	r3, #1
 800732e:	d109      	bne.n	8007344 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f06f 0201 	mvn.w	r2, #1
 8007338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800734e:	2b80      	cmp	r3, #128	; 0x80
 8007350:	d110      	bne.n	8007374 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800735c:	2b80      	cmp	r3, #128	; 0x80
 800735e:	d109      	bne.n	8007374 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800737e:	2b40      	cmp	r3, #64	; 0x40
 8007380:	d110      	bne.n	80073a4 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800738c:	2b40      	cmp	r3, #64	; 0x40
 800738e:	d109      	bne.n	80073a4 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	f003 0320 	and.w	r3, r3, #32
 80073ae:	2b20      	cmp	r3, #32
 80073b0:	d110      	bne.n	80073d4 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	f003 0320 	and.w	r3, r3, #32
 80073bc:	2b20      	cmp	r3, #32
 80073be:	d109      	bne.n	80073d4 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f06f 0220 	mvn.w	r2, #32
 80073c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073d4:	bf00      	nop
 80073d6:	3708      	adds	r7, #8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073e8:	2300      	movs	r3, #0
 80073ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d101      	bne.n	80073fa <HAL_TIM_IC_ConfigChannel+0x1e>
 80073f6:	2302      	movs	r3, #2
 80073f8:	e088      	b.n	800750c <HAL_TIM_IC_ConfigChannel+0x130>
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d11b      	bne.n	8007440 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6818      	ldr	r0, [r3, #0]
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	6819      	ldr	r1, [r3, #0]
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	685a      	ldr	r2, [r3, #4]
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	f000 fcaa 	bl	8007d70 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	699a      	ldr	r2, [r3, #24]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f022 020c 	bic.w	r2, r2, #12
 800742a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	6999      	ldr	r1, [r3, #24]
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	689a      	ldr	r2, [r3, #8]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	430a      	orrs	r2, r1
 800743c:	619a      	str	r2, [r3, #24]
 800743e:	e060      	b.n	8007502 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2b04      	cmp	r3, #4
 8007444:	d11c      	bne.n	8007480 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6818      	ldr	r0, [r3, #0]
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	6819      	ldr	r1, [r3, #0]
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	685a      	ldr	r2, [r3, #4]
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	f000 fd22 	bl	8007e9e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	699a      	ldr	r2, [r3, #24]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007468:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6999      	ldr	r1, [r3, #24]
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	021a      	lsls	r2, r3, #8
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	430a      	orrs	r2, r1
 800747c:	619a      	str	r2, [r3, #24]
 800747e:	e040      	b.n	8007502 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2b08      	cmp	r3, #8
 8007484:	d11b      	bne.n	80074be <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6818      	ldr	r0, [r3, #0]
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	6819      	ldr	r1, [r3, #0]
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	685a      	ldr	r2, [r3, #4]
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	f000 fd6f 	bl	8007f78 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	69da      	ldr	r2, [r3, #28]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f022 020c 	bic.w	r2, r2, #12
 80074a8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	69d9      	ldr	r1, [r3, #28]
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	689a      	ldr	r2, [r3, #8]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	430a      	orrs	r2, r1
 80074ba:	61da      	str	r2, [r3, #28]
 80074bc:	e021      	b.n	8007502 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2b0c      	cmp	r3, #12
 80074c2:	d11c      	bne.n	80074fe <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6818      	ldr	r0, [r3, #0]
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	6819      	ldr	r1, [r3, #0]
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	685a      	ldr	r2, [r3, #4]
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	f000 fd8c 	bl	8007ff0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	69da      	ldr	r2, [r3, #28]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80074e6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	69d9      	ldr	r1, [r3, #28]
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	021a      	lsls	r2, r3, #8
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	430a      	orrs	r2, r1
 80074fa:	61da      	str	r2, [r3, #28]
 80074fc:	e001      	b.n	8007502 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800750a:	7dfb      	ldrb	r3, [r7, #23]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3718      	adds	r7, #24
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b086      	sub	sp, #24
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007520:	2300      	movs	r3, #0
 8007522:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800752a:	2b01      	cmp	r3, #1
 800752c:	d101      	bne.n	8007532 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800752e:	2302      	movs	r3, #2
 8007530:	e0ae      	b.n	8007690 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2201      	movs	r2, #1
 8007536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2b0c      	cmp	r3, #12
 800753e:	f200 809f 	bhi.w	8007680 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007542:	a201      	add	r2, pc, #4	; (adr r2, 8007548 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007548:	0800757d 	.word	0x0800757d
 800754c:	08007681 	.word	0x08007681
 8007550:	08007681 	.word	0x08007681
 8007554:	08007681 	.word	0x08007681
 8007558:	080075bd 	.word	0x080075bd
 800755c:	08007681 	.word	0x08007681
 8007560:	08007681 	.word	0x08007681
 8007564:	08007681 	.word	0x08007681
 8007568:	080075ff 	.word	0x080075ff
 800756c:	08007681 	.word	0x08007681
 8007570:	08007681 	.word	0x08007681
 8007574:	08007681 	.word	0x08007681
 8007578:	0800763f 	.word	0x0800763f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68b9      	ldr	r1, [r7, #8]
 8007582:	4618      	mov	r0, r3
 8007584:	f000 fa68 	bl	8007a58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	699a      	ldr	r2, [r3, #24]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f042 0208 	orr.w	r2, r2, #8
 8007596:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	699a      	ldr	r2, [r3, #24]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f022 0204 	bic.w	r2, r2, #4
 80075a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	6999      	ldr	r1, [r3, #24]
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	691a      	ldr	r2, [r3, #16]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	430a      	orrs	r2, r1
 80075b8:	619a      	str	r2, [r3, #24]
      break;
 80075ba:	e064      	b.n	8007686 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68b9      	ldr	r1, [r7, #8]
 80075c2:	4618      	mov	r0, r3
 80075c4:	f000 faae 	bl	8007b24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	699a      	ldr	r2, [r3, #24]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	699a      	ldr	r2, [r3, #24]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6999      	ldr	r1, [r3, #24]
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	021a      	lsls	r2, r3, #8
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	430a      	orrs	r2, r1
 80075fa:	619a      	str	r2, [r3, #24]
      break;
 80075fc:	e043      	b.n	8007686 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	68b9      	ldr	r1, [r7, #8]
 8007604:	4618      	mov	r0, r3
 8007606:	f000 faf9 	bl	8007bfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	69da      	ldr	r2, [r3, #28]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f042 0208 	orr.w	r2, r2, #8
 8007618:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	69da      	ldr	r2, [r3, #28]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f022 0204 	bic.w	r2, r2, #4
 8007628:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	69d9      	ldr	r1, [r3, #28]
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	691a      	ldr	r2, [r3, #16]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	430a      	orrs	r2, r1
 800763a:	61da      	str	r2, [r3, #28]
      break;
 800763c:	e023      	b.n	8007686 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68b9      	ldr	r1, [r7, #8]
 8007644:	4618      	mov	r0, r3
 8007646:	f000 fb43 	bl	8007cd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	69da      	ldr	r2, [r3, #28]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007658:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	69da      	ldr	r2, [r3, #28]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	69d9      	ldr	r1, [r3, #28]
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	021a      	lsls	r2, r3, #8
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	430a      	orrs	r2, r1
 800767c:	61da      	str	r2, [r3, #28]
      break;
 800767e:	e002      	b.n	8007686 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	75fb      	strb	r3, [r7, #23]
      break;
 8007684:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800768e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007690:	4618      	mov	r0, r3
 8007692:	3718      	adds	r7, #24
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076a2:	2300      	movs	r3, #0
 80076a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d101      	bne.n	80076b4 <HAL_TIM_ConfigClockSource+0x1c>
 80076b0:	2302      	movs	r3, #2
 80076b2:	e0b4      	b.n	800781e <HAL_TIM_ConfigClockSource+0x186>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2202      	movs	r2, #2
 80076c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80076d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076ec:	d03e      	beq.n	800776c <HAL_TIM_ConfigClockSource+0xd4>
 80076ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076f2:	f200 8087 	bhi.w	8007804 <HAL_TIM_ConfigClockSource+0x16c>
 80076f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076fa:	f000 8086 	beq.w	800780a <HAL_TIM_ConfigClockSource+0x172>
 80076fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007702:	d87f      	bhi.n	8007804 <HAL_TIM_ConfigClockSource+0x16c>
 8007704:	2b70      	cmp	r3, #112	; 0x70
 8007706:	d01a      	beq.n	800773e <HAL_TIM_ConfigClockSource+0xa6>
 8007708:	2b70      	cmp	r3, #112	; 0x70
 800770a:	d87b      	bhi.n	8007804 <HAL_TIM_ConfigClockSource+0x16c>
 800770c:	2b60      	cmp	r3, #96	; 0x60
 800770e:	d050      	beq.n	80077b2 <HAL_TIM_ConfigClockSource+0x11a>
 8007710:	2b60      	cmp	r3, #96	; 0x60
 8007712:	d877      	bhi.n	8007804 <HAL_TIM_ConfigClockSource+0x16c>
 8007714:	2b50      	cmp	r3, #80	; 0x50
 8007716:	d03c      	beq.n	8007792 <HAL_TIM_ConfigClockSource+0xfa>
 8007718:	2b50      	cmp	r3, #80	; 0x50
 800771a:	d873      	bhi.n	8007804 <HAL_TIM_ConfigClockSource+0x16c>
 800771c:	2b40      	cmp	r3, #64	; 0x40
 800771e:	d058      	beq.n	80077d2 <HAL_TIM_ConfigClockSource+0x13a>
 8007720:	2b40      	cmp	r3, #64	; 0x40
 8007722:	d86f      	bhi.n	8007804 <HAL_TIM_ConfigClockSource+0x16c>
 8007724:	2b30      	cmp	r3, #48	; 0x30
 8007726:	d064      	beq.n	80077f2 <HAL_TIM_ConfigClockSource+0x15a>
 8007728:	2b30      	cmp	r3, #48	; 0x30
 800772a:	d86b      	bhi.n	8007804 <HAL_TIM_ConfigClockSource+0x16c>
 800772c:	2b20      	cmp	r3, #32
 800772e:	d060      	beq.n	80077f2 <HAL_TIM_ConfigClockSource+0x15a>
 8007730:	2b20      	cmp	r3, #32
 8007732:	d867      	bhi.n	8007804 <HAL_TIM_ConfigClockSource+0x16c>
 8007734:	2b00      	cmp	r3, #0
 8007736:	d05c      	beq.n	80077f2 <HAL_TIM_ConfigClockSource+0x15a>
 8007738:	2b10      	cmp	r3, #16
 800773a:	d05a      	beq.n	80077f2 <HAL_TIM_ConfigClockSource+0x15a>
 800773c:	e062      	b.n	8007804 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6818      	ldr	r0, [r3, #0]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	6899      	ldr	r1, [r3, #8]
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	685a      	ldr	r2, [r3, #4]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	f000 fca7 	bl	80080a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007760:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68ba      	ldr	r2, [r7, #8]
 8007768:	609a      	str	r2, [r3, #8]
      break;
 800776a:	e04f      	b.n	800780c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6818      	ldr	r0, [r3, #0]
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	6899      	ldr	r1, [r3, #8]
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	685a      	ldr	r2, [r3, #4]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	f000 fc90 	bl	80080a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	689a      	ldr	r2, [r3, #8]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800778e:	609a      	str	r2, [r3, #8]
      break;
 8007790:	e03c      	b.n	800780c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6818      	ldr	r0, [r3, #0]
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	6859      	ldr	r1, [r3, #4]
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	461a      	mov	r2, r3
 80077a0:	f000 fb4e 	bl	8007e40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2150      	movs	r1, #80	; 0x50
 80077aa:	4618      	mov	r0, r3
 80077ac:	f000 fc5d 	bl	800806a <TIM_ITRx_SetConfig>
      break;
 80077b0:	e02c      	b.n	800780c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6818      	ldr	r0, [r3, #0]
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	6859      	ldr	r1, [r3, #4]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	461a      	mov	r2, r3
 80077c0:	f000 fbaa 	bl	8007f18 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2160      	movs	r1, #96	; 0x60
 80077ca:	4618      	mov	r0, r3
 80077cc:	f000 fc4d 	bl	800806a <TIM_ITRx_SetConfig>
      break;
 80077d0:	e01c      	b.n	800780c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6818      	ldr	r0, [r3, #0]
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	6859      	ldr	r1, [r3, #4]
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	461a      	mov	r2, r3
 80077e0:	f000 fb2e 	bl	8007e40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2140      	movs	r1, #64	; 0x40
 80077ea:	4618      	mov	r0, r3
 80077ec:	f000 fc3d 	bl	800806a <TIM_ITRx_SetConfig>
      break;
 80077f0:	e00c      	b.n	800780c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4619      	mov	r1, r3
 80077fc:	4610      	mov	r0, r2
 80077fe:	f000 fc34 	bl	800806a <TIM_ITRx_SetConfig>
      break;
 8007802:	e003      	b.n	800780c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	73fb      	strb	r3, [r7, #15]
      break;
 8007808:	e000      	b.n	800780c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800780a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800781c:	7bfb      	ldrb	r3, [r7, #15]
}
 800781e:	4618      	mov	r0, r3
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
	...

08007828 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007832:	2300      	movs	r3, #0
 8007834:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	2b0c      	cmp	r3, #12
 800783a:	d831      	bhi.n	80078a0 <HAL_TIM_ReadCapturedValue+0x78>
 800783c:	a201      	add	r2, pc, #4	; (adr r2, 8007844 <HAL_TIM_ReadCapturedValue+0x1c>)
 800783e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007842:	bf00      	nop
 8007844:	08007879 	.word	0x08007879
 8007848:	080078a1 	.word	0x080078a1
 800784c:	080078a1 	.word	0x080078a1
 8007850:	080078a1 	.word	0x080078a1
 8007854:	08007883 	.word	0x08007883
 8007858:	080078a1 	.word	0x080078a1
 800785c:	080078a1 	.word	0x080078a1
 8007860:	080078a1 	.word	0x080078a1
 8007864:	0800788d 	.word	0x0800788d
 8007868:	080078a1 	.word	0x080078a1
 800786c:	080078a1 	.word	0x080078a1
 8007870:	080078a1 	.word	0x080078a1
 8007874:	08007897 	.word	0x08007897
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800787e:	60fb      	str	r3, [r7, #12]

      break;
 8007880:	e00f      	b.n	80078a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007888:	60fb      	str	r3, [r7, #12]

      break;
 800788a:	e00a      	b.n	80078a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007892:	60fb      	str	r3, [r7, #12]

      break;
 8007894:	e005      	b.n	80078a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789c:	60fb      	str	r3, [r7, #12]

      break;
 800789e:	e000      	b.n	80078a2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80078a0:	bf00      	nop
  }

  return tmpreg;
 80078a2:	68fb      	ldr	r3, [r7, #12]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3714      	adds	r7, #20
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078cc:	bf00      	nop
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007908:	bf00      	nop
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800791c:	bf00      	nop
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007930:	bf00      	nop
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  return htim->State;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800794a:	b2db      	uxtb	r3, r3
}
 800794c:	4618      	mov	r0, r3
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a34      	ldr	r2, [pc, #208]	; (8007a3c <TIM_Base_SetConfig+0xe4>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d00f      	beq.n	8007990 <TIM_Base_SetConfig+0x38>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007976:	d00b      	beq.n	8007990 <TIM_Base_SetConfig+0x38>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a31      	ldr	r2, [pc, #196]	; (8007a40 <TIM_Base_SetConfig+0xe8>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d007      	beq.n	8007990 <TIM_Base_SetConfig+0x38>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a30      	ldr	r2, [pc, #192]	; (8007a44 <TIM_Base_SetConfig+0xec>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d003      	beq.n	8007990 <TIM_Base_SetConfig+0x38>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a2f      	ldr	r2, [pc, #188]	; (8007a48 <TIM_Base_SetConfig+0xf0>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d108      	bne.n	80079a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007996:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	4313      	orrs	r3, r2
 80079a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a25      	ldr	r2, [pc, #148]	; (8007a3c <TIM_Base_SetConfig+0xe4>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d01b      	beq.n	80079e2 <TIM_Base_SetConfig+0x8a>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079b0:	d017      	beq.n	80079e2 <TIM_Base_SetConfig+0x8a>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a22      	ldr	r2, [pc, #136]	; (8007a40 <TIM_Base_SetConfig+0xe8>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d013      	beq.n	80079e2 <TIM_Base_SetConfig+0x8a>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a21      	ldr	r2, [pc, #132]	; (8007a44 <TIM_Base_SetConfig+0xec>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d00f      	beq.n	80079e2 <TIM_Base_SetConfig+0x8a>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a20      	ldr	r2, [pc, #128]	; (8007a48 <TIM_Base_SetConfig+0xf0>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d00b      	beq.n	80079e2 <TIM_Base_SetConfig+0x8a>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a1f      	ldr	r2, [pc, #124]	; (8007a4c <TIM_Base_SetConfig+0xf4>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d007      	beq.n	80079e2 <TIM_Base_SetConfig+0x8a>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4a1e      	ldr	r2, [pc, #120]	; (8007a50 <TIM_Base_SetConfig+0xf8>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d003      	beq.n	80079e2 <TIM_Base_SetConfig+0x8a>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a1d      	ldr	r2, [pc, #116]	; (8007a54 <TIM_Base_SetConfig+0xfc>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d108      	bne.n	80079f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	689a      	ldr	r2, [r3, #8]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a08      	ldr	r2, [pc, #32]	; (8007a3c <TIM_Base_SetConfig+0xe4>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d103      	bne.n	8007a28 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	691a      	ldr	r2, [r3, #16]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	615a      	str	r2, [r3, #20]
}
 8007a2e:	bf00      	nop
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	40010000 	.word	0x40010000
 8007a40:	40000400 	.word	0x40000400
 8007a44:	40000800 	.word	0x40000800
 8007a48:	40000c00 	.word	0x40000c00
 8007a4c:	40014000 	.word	0x40014000
 8007a50:	40014400 	.word	0x40014400
 8007a54:	40014800 	.word	0x40014800

08007a58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b087      	sub	sp, #28
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a1b      	ldr	r3, [r3, #32]
 8007a66:	f023 0201 	bic.w	r2, r3, #1
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a1b      	ldr	r3, [r3, #32]
 8007a72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f023 0303 	bic.w	r3, r3, #3
 8007a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	f023 0302 	bic.w	r3, r3, #2
 8007aa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	697a      	ldr	r2, [r7, #20]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4a1c      	ldr	r2, [pc, #112]	; (8007b20 <TIM_OC1_SetConfig+0xc8>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d10c      	bne.n	8007ace <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	f023 0308 	bic.w	r3, r3, #8
 8007aba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	697a      	ldr	r2, [r7, #20]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	f023 0304 	bic.w	r3, r3, #4
 8007acc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a13      	ldr	r2, [pc, #76]	; (8007b20 <TIM_OC1_SetConfig+0xc8>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d111      	bne.n	8007afa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007adc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	693a      	ldr	r2, [r7, #16]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	699b      	ldr	r3, [r3, #24]
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	685a      	ldr	r2, [r3, #4]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	697a      	ldr	r2, [r7, #20]
 8007b12:	621a      	str	r2, [r3, #32]
}
 8007b14:	bf00      	nop
 8007b16:	371c      	adds	r7, #28
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr
 8007b20:	40010000 	.word	0x40010000

08007b24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b087      	sub	sp, #28
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a1b      	ldr	r3, [r3, #32]
 8007b32:	f023 0210 	bic.w	r2, r3, #16
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a1b      	ldr	r3, [r3, #32]
 8007b3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	699b      	ldr	r3, [r3, #24]
 8007b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	021b      	lsls	r3, r3, #8
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	f023 0320 	bic.w	r3, r3, #32
 8007b6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	011b      	lsls	r3, r3, #4
 8007b76:	697a      	ldr	r2, [r7, #20]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a1e      	ldr	r2, [pc, #120]	; (8007bf8 <TIM_OC2_SetConfig+0xd4>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d10d      	bne.n	8007ba0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	011b      	lsls	r3, r3, #4
 8007b92:	697a      	ldr	r2, [r7, #20]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a15      	ldr	r2, [pc, #84]	; (8007bf8 <TIM_OC2_SetConfig+0xd4>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d113      	bne.n	8007bd0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	695b      	ldr	r3, [r3, #20]
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	693a      	ldr	r2, [r7, #16]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	699b      	ldr	r3, [r3, #24]
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	693a      	ldr	r2, [r7, #16]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	693a      	ldr	r2, [r7, #16]
 8007bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	685a      	ldr	r2, [r3, #4]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	621a      	str	r2, [r3, #32]
}
 8007bea:	bf00      	nop
 8007bec:	371c      	adds	r7, #28
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	40010000 	.word	0x40010000

08007bfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b087      	sub	sp, #28
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a1b      	ldr	r3, [r3, #32]
 8007c16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	69db      	ldr	r3, [r3, #28]
 8007c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f023 0303 	bic.w	r3, r3, #3
 8007c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	021b      	lsls	r3, r3, #8
 8007c4c:	697a      	ldr	r2, [r7, #20]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a1d      	ldr	r2, [pc, #116]	; (8007ccc <TIM_OC3_SetConfig+0xd0>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d10d      	bne.n	8007c76 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	021b      	lsls	r3, r3, #8
 8007c68:	697a      	ldr	r2, [r7, #20]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a14      	ldr	r2, [pc, #80]	; (8007ccc <TIM_OC3_SetConfig+0xd0>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d113      	bne.n	8007ca6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	011b      	lsls	r3, r3, #4
 8007c94:	693a      	ldr	r2, [r7, #16]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	699b      	ldr	r3, [r3, #24]
 8007c9e:	011b      	lsls	r3, r3, #4
 8007ca0:	693a      	ldr	r2, [r7, #16]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	693a      	ldr	r2, [r7, #16]
 8007caa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	685a      	ldr	r2, [r3, #4]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	697a      	ldr	r2, [r7, #20]
 8007cbe:	621a      	str	r2, [r3, #32]
}
 8007cc0:	bf00      	nop
 8007cc2:	371c      	adds	r7, #28
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr
 8007ccc:	40010000 	.word	0x40010000

08007cd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b087      	sub	sp, #28
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a1b      	ldr	r3, [r3, #32]
 8007cde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a1b      	ldr	r3, [r3, #32]
 8007cea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	69db      	ldr	r3, [r3, #28]
 8007cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	021b      	lsls	r3, r3, #8
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	031b      	lsls	r3, r3, #12
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a10      	ldr	r2, [pc, #64]	; (8007d6c <TIM_OC4_SetConfig+0x9c>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d109      	bne.n	8007d44 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	695b      	ldr	r3, [r3, #20]
 8007d3c:	019b      	lsls	r3, r3, #6
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	685a      	ldr	r2, [r3, #4]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	693a      	ldr	r2, [r7, #16]
 8007d5c:	621a      	str	r2, [r3, #32]
}
 8007d5e:	bf00      	nop
 8007d60:	371c      	adds	r7, #28
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	40010000 	.word	0x40010000

08007d70 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b087      	sub	sp, #28
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	607a      	str	r2, [r7, #4]
 8007d7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6a1b      	ldr	r3, [r3, #32]
 8007d82:	f023 0201 	bic.w	r2, r3, #1
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	699b      	ldr	r3, [r3, #24]
 8007d8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6a1b      	ldr	r3, [r3, #32]
 8007d94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	4a24      	ldr	r2, [pc, #144]	; (8007e2c <TIM_TI1_SetConfig+0xbc>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d013      	beq.n	8007dc6 <TIM_TI1_SetConfig+0x56>
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007da4:	d00f      	beq.n	8007dc6 <TIM_TI1_SetConfig+0x56>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	4a21      	ldr	r2, [pc, #132]	; (8007e30 <TIM_TI1_SetConfig+0xc0>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d00b      	beq.n	8007dc6 <TIM_TI1_SetConfig+0x56>
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	4a20      	ldr	r2, [pc, #128]	; (8007e34 <TIM_TI1_SetConfig+0xc4>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d007      	beq.n	8007dc6 <TIM_TI1_SetConfig+0x56>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	4a1f      	ldr	r2, [pc, #124]	; (8007e38 <TIM_TI1_SetConfig+0xc8>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d003      	beq.n	8007dc6 <TIM_TI1_SetConfig+0x56>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	4a1e      	ldr	r2, [pc, #120]	; (8007e3c <TIM_TI1_SetConfig+0xcc>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d101      	bne.n	8007dca <TIM_TI1_SetConfig+0x5a>
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e000      	b.n	8007dcc <TIM_TI1_SetConfig+0x5c>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d008      	beq.n	8007de2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	f023 0303 	bic.w	r3, r3, #3
 8007dd6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007dd8:	697a      	ldr	r2, [r7, #20]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	617b      	str	r3, [r7, #20]
 8007de0:	e003      	b.n	8007dea <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	f043 0301 	orr.w	r3, r3, #1
 8007de8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007df0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	011b      	lsls	r3, r3, #4
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	697a      	ldr	r2, [r7, #20]
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	f023 030a 	bic.w	r3, r3, #10
 8007e04:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	f003 030a 	and.w	r3, r3, #10
 8007e0c:	693a      	ldr	r2, [r7, #16]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	697a      	ldr	r2, [r7, #20]
 8007e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	693a      	ldr	r2, [r7, #16]
 8007e1c:	621a      	str	r2, [r3, #32]
}
 8007e1e:	bf00      	nop
 8007e20:	371c      	adds	r7, #28
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	40010000 	.word	0x40010000
 8007e30:	40000400 	.word	0x40000400
 8007e34:	40000800 	.word	0x40000800
 8007e38:	40000c00 	.word	0x40000c00
 8007e3c:	40014000 	.word	0x40014000

08007e40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b087      	sub	sp, #28
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6a1b      	ldr	r3, [r3, #32]
 8007e50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6a1b      	ldr	r3, [r3, #32]
 8007e56:	f023 0201 	bic.w	r2, r3, #1
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	699b      	ldr	r3, [r3, #24]
 8007e62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	011b      	lsls	r3, r3, #4
 8007e70:	693a      	ldr	r2, [r7, #16]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f023 030a 	bic.w	r3, r3, #10
 8007e7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e7e:	697a      	ldr	r2, [r7, #20]
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	693a      	ldr	r2, [r7, #16]
 8007e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	697a      	ldr	r2, [r7, #20]
 8007e90:	621a      	str	r2, [r3, #32]
}
 8007e92:	bf00      	nop
 8007e94:	371c      	adds	r7, #28
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b087      	sub	sp, #28
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	60f8      	str	r0, [r7, #12]
 8007ea6:	60b9      	str	r1, [r7, #8]
 8007ea8:	607a      	str	r2, [r7, #4]
 8007eaa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6a1b      	ldr	r3, [r3, #32]
 8007eb0:	f023 0210 	bic.w	r2, r3, #16
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	699b      	ldr	r3, [r3, #24]
 8007ebc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007eca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	021b      	lsls	r3, r3, #8
 8007ed0:	697a      	ldr	r2, [r7, #20]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007edc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	031b      	lsls	r3, r3, #12
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	697a      	ldr	r2, [r7, #20]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ef0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	011b      	lsls	r3, r3, #4
 8007ef6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007efa:	693a      	ldr	r2, [r7, #16]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	693a      	ldr	r2, [r7, #16]
 8007f0a:	621a      	str	r2, [r3, #32]
}
 8007f0c:	bf00      	nop
 8007f0e:	371c      	adds	r7, #28
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b087      	sub	sp, #28
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6a1b      	ldr	r3, [r3, #32]
 8007f28:	f023 0210 	bic.w	r2, r3, #16
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	699b      	ldr	r3, [r3, #24]
 8007f34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	6a1b      	ldr	r3, [r3, #32]
 8007f3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f42:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	031b      	lsls	r3, r3, #12
 8007f48:	697a      	ldr	r2, [r7, #20]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	011b      	lsls	r3, r3, #4
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	697a      	ldr	r2, [r7, #20]
 8007f64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	693a      	ldr	r2, [r7, #16]
 8007f6a:	621a      	str	r2, [r3, #32]
}
 8007f6c:	bf00      	nop
 8007f6e:	371c      	adds	r7, #28
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b087      	sub	sp, #28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
 8007f84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6a1b      	ldr	r3, [r3, #32]
 8007f8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	69db      	ldr	r3, [r3, #28]
 8007f96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6a1b      	ldr	r3, [r3, #32]
 8007f9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	f023 0303 	bic.w	r3, r3, #3
 8007fa4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007fa6:	697a      	ldr	r2, [r7, #20]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fb4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	011b      	lsls	r3, r3, #4
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	697a      	ldr	r2, [r7, #20]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007fc8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	021b      	lsls	r3, r3, #8
 8007fce:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007fd2:	693a      	ldr	r2, [r7, #16]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	697a      	ldr	r2, [r7, #20]
 8007fdc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	693a      	ldr	r2, [r7, #16]
 8007fe2:	621a      	str	r2, [r3, #32]
}
 8007fe4:	bf00      	nop
 8007fe6:	371c      	adds	r7, #28
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b087      	sub	sp, #28
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	607a      	str	r2, [r7, #4]
 8007ffc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6a1b      	ldr	r3, [r3, #32]
 8008002:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	69db      	ldr	r3, [r3, #28]
 800800e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6a1b      	ldr	r3, [r3, #32]
 8008014:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800801c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	021b      	lsls	r3, r3, #8
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	4313      	orrs	r3, r2
 8008026:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800802e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	031b      	lsls	r3, r3, #12
 8008034:	b29b      	uxth	r3, r3
 8008036:	697a      	ldr	r2, [r7, #20]
 8008038:	4313      	orrs	r3, r2
 800803a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008042:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	031b      	lsls	r3, r3, #12
 8008048:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800804c:	693a      	ldr	r2, [r7, #16]
 800804e:	4313      	orrs	r3, r2
 8008050:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	697a      	ldr	r2, [r7, #20]
 8008056:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	693a      	ldr	r2, [r7, #16]
 800805c:	621a      	str	r2, [r3, #32]
}
 800805e:	bf00      	nop
 8008060:	371c      	adds	r7, #28
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr

0800806a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800806a:	b480      	push	{r7}
 800806c:	b085      	sub	sp, #20
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
 8008072:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008080:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008082:	683a      	ldr	r2, [r7, #0]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	4313      	orrs	r3, r2
 8008088:	f043 0307 	orr.w	r3, r3, #7
 800808c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	609a      	str	r2, [r3, #8]
}
 8008094:	bf00      	nop
 8008096:	3714      	adds	r7, #20
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b087      	sub	sp, #28
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	60b9      	str	r1, [r7, #8]
 80080aa:	607a      	str	r2, [r7, #4]
 80080ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	021a      	lsls	r2, r3, #8
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	431a      	orrs	r2, r3
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	697a      	ldr	r2, [r7, #20]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	697a      	ldr	r2, [r7, #20]
 80080d2:	609a      	str	r2, [r3, #8]
}
 80080d4:	bf00      	nop
 80080d6:	371c      	adds	r7, #28
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b087      	sub	sp, #28
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	f003 031f 	and.w	r3, r3, #31
 80080f2:	2201      	movs	r2, #1
 80080f4:	fa02 f303 	lsl.w	r3, r2, r3
 80080f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	6a1a      	ldr	r2, [r3, #32]
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	43db      	mvns	r3, r3
 8008102:	401a      	ands	r2, r3
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6a1a      	ldr	r2, [r3, #32]
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	f003 031f 	and.w	r3, r3, #31
 8008112:	6879      	ldr	r1, [r7, #4]
 8008114:	fa01 f303 	lsl.w	r3, r1, r3
 8008118:	431a      	orrs	r2, r3
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	621a      	str	r2, [r3, #32]
}
 800811e:	bf00      	nop
 8008120:	371c      	adds	r7, #28
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr
	...

0800812c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a1c      	ldr	r2, [pc, #112]	; (80081a8 <TIM_ResetCallback+0x7c>)
 8008138:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a1b      	ldr	r2, [pc, #108]	; (80081ac <TIM_ResetCallback+0x80>)
 8008140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a1a      	ldr	r2, [pc, #104]	; (80081b0 <TIM_ResetCallback+0x84>)
 8008148:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4a19      	ldr	r2, [pc, #100]	; (80081b4 <TIM_ResetCallback+0x88>)
 8008150:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a18      	ldr	r2, [pc, #96]	; (80081b8 <TIM_ResetCallback+0x8c>)
 8008158:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4a17      	ldr	r2, [pc, #92]	; (80081bc <TIM_ResetCallback+0x90>)
 8008160:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4a16      	ldr	r2, [pc, #88]	; (80081c0 <TIM_ResetCallback+0x94>)
 8008168:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	4a15      	ldr	r2, [pc, #84]	; (80081c4 <TIM_ResetCallback+0x98>)
 8008170:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4a14      	ldr	r2, [pc, #80]	; (80081c8 <TIM_ResetCallback+0x9c>)
 8008178:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a13      	ldr	r2, [pc, #76]	; (80081cc <TIM_ResetCallback+0xa0>)
 8008180:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a12      	ldr	r2, [pc, #72]	; (80081d0 <TIM_ResetCallback+0xa4>)
 8008188:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4a11      	ldr	r2, [pc, #68]	; (80081d4 <TIM_ResetCallback+0xa8>)
 8008190:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4a10      	ldr	r2, [pc, #64]	; (80081d8 <TIM_ResetCallback+0xac>)
 8008198:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800819c:	bf00      	nop
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr
 80081a8:	0800a131 	.word	0x0800a131
 80081ac:	080078b1 	.word	0x080078b1
 80081b0:	08007915 	.word	0x08007915
 80081b4:	08007929 	.word	0x08007929
 80081b8:	08009731 	.word	0x08009731
 80081bc:	080078d9 	.word	0x080078d9
 80081c0:	080078c5 	.word	0x080078c5
 80081c4:	080078ed 	.word	0x080078ed
 80081c8:	08007901 	.word	0x08007901
 80081cc:	08009e31 	.word	0x08009e31
 80081d0:	080082b9 	.word	0x080082b9
 80081d4:	080082cd 	.word	0x080082cd
 80081d8:	080082e1 	.word	0x080082e1

080081dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d101      	bne.n	80081f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081f0:	2302      	movs	r3, #2
 80081f2:	e050      	b.n	8008296 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2202      	movs	r2, #2
 8008200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800821a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68fa      	ldr	r2, [r7, #12]
 8008222:	4313      	orrs	r3, r2
 8008224:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a1c      	ldr	r2, [pc, #112]	; (80082a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d018      	beq.n	800826a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008240:	d013      	beq.n	800826a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a18      	ldr	r2, [pc, #96]	; (80082a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d00e      	beq.n	800826a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a16      	ldr	r2, [pc, #88]	; (80082ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d009      	beq.n	800826a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a15      	ldr	r2, [pc, #84]	; (80082b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d004      	beq.n	800826a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a13      	ldr	r2, [pc, #76]	; (80082b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d10c      	bne.n	8008284 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008270:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	68ba      	ldr	r2, [r7, #8]
 8008278:	4313      	orrs	r3, r2
 800827a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	40010000 	.word	0x40010000
 80082a8:	40000400 	.word	0x40000400
 80082ac:	40000800 	.word	0x40000800
 80082b0:	40000c00 	.word	0x40000c00
 80082b4:	40014000 	.word	0x40014000

080082b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082c0:	bf00      	nop
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80082d4:	bf00      	nop
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d101      	bne.n	8008306 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	e04a      	b.n	800839c <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800830c:	b2db      	uxtb	r3, r3
 800830e:	2b00      	cmp	r3, #0
 8008310:	d111      	bne.n	8008336 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fbf8 	bl	8008b10 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008324:	2b00      	cmp	r3, #0
 8008326:	d102      	bne.n	800832e <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4a1e      	ldr	r2, [pc, #120]	; (80083a4 <HAL_UART_Init+0xb0>)
 800832c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2224      	movs	r2, #36	; 0x24
 800833a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	68da      	ldr	r2, [r3, #12]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800834c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 fdf2 	bl	8008f38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	691a      	ldr	r2, [r3, #16]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008362:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	695a      	ldr	r2, [r3, #20]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008372:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68da      	ldr	r2, [r3, #12]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008382:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2220      	movs	r2, #32
 800838e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2220      	movs	r2, #32
 8008396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3708      	adds	r7, #8
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	0800399d 	.word	0x0800399d

080083a8 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d101      	bne.n	80083ba <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e029      	b.n	800840e <HAL_UART_DeInit+0x66>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2224      	movs	r2, #36	; 0x24
 80083be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	68da      	ldr	r2, [r3, #12]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80083d0:	60da      	str	r2, [r3, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  if (huart->MspDeInitCallback == NULL)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d102      	bne.n	80083e0 <HAL_UART_DeInit+0x38>
  {
    huart->MspDeInitCallback = HAL_UART_MspDeInit;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a0e      	ldr	r2, [pc, #56]	; (8008418 <HAL_UART_DeInit+0x70>)
 80083de:	671a      	str	r2, [r3, #112]	; 0x70
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	4798      	blx	r3
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	08003a2d 	.word	0x08003a2d

0800841c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	4613      	mov	r3, r2
 8008428:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008430:	b2db      	uxtb	r3, r3
 8008432:	2b20      	cmp	r3, #32
 8008434:	d130      	bne.n	8008498 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d002      	beq.n	8008442 <HAL_UART_Transmit_IT+0x26>
 800843c:	88fb      	ldrh	r3, [r7, #6]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d101      	bne.n	8008446 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	e029      	b.n	800849a <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800844c:	2b01      	cmp	r3, #1
 800844e:	d101      	bne.n	8008454 <HAL_UART_Transmit_IT+0x38>
 8008450:	2302      	movs	r3, #2
 8008452:	e022      	b.n	800849a <HAL_UART_Transmit_IT+0x7e>
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	88fa      	ldrh	r2, [r7, #6]
 8008466:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	88fa      	ldrh	r2, [r7, #6]
 800846c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2200      	movs	r2, #0
 8008472:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2221      	movs	r2, #33	; 0x21
 8008478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2200      	movs	r2, #0
 8008480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	68da      	ldr	r2, [r3, #12]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008492:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008494:	2300      	movs	r3, #0
 8008496:	e000      	b.n	800849a <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008498:	2302      	movs	r3, #2
  }
}
 800849a:	4618      	mov	r0, r3
 800849c:	3714      	adds	r7, #20
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b084      	sub	sp, #16
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	60f8      	str	r0, [r7, #12]
 80084ae:	60b9      	str	r1, [r7, #8]
 80084b0:	4613      	mov	r3, r2
 80084b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	2b20      	cmp	r3, #32
 80084be:	d11d      	bne.n	80084fc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d002      	beq.n	80084cc <HAL_UART_Receive_IT+0x26>
 80084c6:	88fb      	ldrh	r3, [r7, #6]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d101      	bne.n	80084d0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	e016      	b.n	80084fe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d101      	bne.n	80084de <HAL_UART_Receive_IT+0x38>
 80084da:	2302      	movs	r3, #2
 80084dc:	e00f      	b.n	80084fe <HAL_UART_Receive_IT+0x58>
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2201      	movs	r2, #1
 80084e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2200      	movs	r2, #0
 80084ea:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80084ec:	88fb      	ldrh	r3, [r7, #6]
 80084ee:	461a      	mov	r2, r3
 80084f0:	68b9      	ldr	r1, [r7, #8]
 80084f2:	68f8      	ldr	r0, [r7, #12]
 80084f4:	f000 fb44 	bl	8008b80 <UART_Start_Receive_IT>
 80084f8:	4603      	mov	r3, r0
 80084fa:	e000      	b.n	80084fe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80084fc:	2302      	movs	r3, #2
  }
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
	...

08008508 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b0ba      	sub	sp, #232	; 0xe8
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	695b      	ldr	r3, [r3, #20]
 800852a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800852e:	2300      	movs	r3, #0
 8008530:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008534:	2300      	movs	r3, #0
 8008536:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800853a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800853e:	f003 030f 	and.w	r3, r3, #15
 8008542:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008546:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10f      	bne.n	800856e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800854e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008552:	f003 0320 	and.w	r3, r3, #32
 8008556:	2b00      	cmp	r3, #0
 8008558:	d009      	beq.n	800856e <HAL_UART_IRQHandler+0x66>
 800855a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800855e:	f003 0320 	and.w	r3, r3, #32
 8008562:	2b00      	cmp	r3, #0
 8008564:	d003      	beq.n	800856e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 fc29 	bl	8008dbe <UART_Receive_IT>
      return;
 800856c:	e25b      	b.n	8008a26 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800856e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008572:	2b00      	cmp	r3, #0
 8008574:	f000 80e1 	beq.w	800873a <HAL_UART_IRQHandler+0x232>
 8008578:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800857c:	f003 0301 	and.w	r3, r3, #1
 8008580:	2b00      	cmp	r3, #0
 8008582:	d106      	bne.n	8008592 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008588:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800858c:	2b00      	cmp	r3, #0
 800858e:	f000 80d4 	beq.w	800873a <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008596:	f003 0301 	and.w	r3, r3, #1
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00b      	beq.n	80085b6 <HAL_UART_IRQHandler+0xae>
 800859e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d005      	beq.n	80085b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ae:	f043 0201 	orr.w	r2, r3, #1
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80085b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085ba:	f003 0304 	and.w	r3, r3, #4
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00b      	beq.n	80085da <HAL_UART_IRQHandler+0xd2>
 80085c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085c6:	f003 0301 	and.w	r3, r3, #1
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d005      	beq.n	80085da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d2:	f043 0202 	orr.w	r2, r3, #2
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80085da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085de:	f003 0302 	and.w	r3, r3, #2
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00b      	beq.n	80085fe <HAL_UART_IRQHandler+0xf6>
 80085e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085ea:	f003 0301 	and.w	r3, r3, #1
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d005      	beq.n	80085fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f6:	f043 0204 	orr.w	r2, r3, #4
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80085fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008602:	f003 0308 	and.w	r3, r3, #8
 8008606:	2b00      	cmp	r3, #0
 8008608:	d011      	beq.n	800862e <HAL_UART_IRQHandler+0x126>
 800860a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800860e:	f003 0320 	and.w	r3, r3, #32
 8008612:	2b00      	cmp	r3, #0
 8008614:	d105      	bne.n	8008622 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008616:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800861a:	f003 0301 	and.w	r3, r3, #1
 800861e:	2b00      	cmp	r3, #0
 8008620:	d005      	beq.n	800862e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008626:	f043 0208 	orr.w	r2, r3, #8
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008632:	2b00      	cmp	r3, #0
 8008634:	f000 81f2 	beq.w	8008a1c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800863c:	f003 0320 	and.w	r3, r3, #32
 8008640:	2b00      	cmp	r3, #0
 8008642:	d008      	beq.n	8008656 <HAL_UART_IRQHandler+0x14e>
 8008644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008648:	f003 0320 	and.w	r3, r3, #32
 800864c:	2b00      	cmp	r3, #0
 800864e:	d002      	beq.n	8008656 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 fbb4 	bl	8008dbe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	695b      	ldr	r3, [r3, #20]
 800865c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008660:	2b40      	cmp	r3, #64	; 0x40
 8008662:	bf0c      	ite	eq
 8008664:	2301      	moveq	r3, #1
 8008666:	2300      	movne	r3, #0
 8008668:	b2db      	uxtb	r3, r3
 800866a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008672:	f003 0308 	and.w	r3, r3, #8
 8008676:	2b00      	cmp	r3, #0
 8008678:	d103      	bne.n	8008682 <HAL_UART_IRQHandler+0x17a>
 800867a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800867e:	2b00      	cmp	r3, #0
 8008680:	d051      	beq.n	8008726 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 faba 	bl	8008bfc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	695b      	ldr	r3, [r3, #20]
 800868e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008692:	2b40      	cmp	r3, #64	; 0x40
 8008694:	d142      	bne.n	800871c <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	3314      	adds	r3, #20
 800869c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80086a4:	e853 3f00 	ldrex	r3, [r3]
 80086a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80086ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80086b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	3314      	adds	r3, #20
 80086be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80086c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80086c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80086ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80086d2:	e841 2300 	strex	r3, r2, [r1]
 80086d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80086da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d1d9      	bne.n	8008696 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d013      	beq.n	8008712 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ee:	4a7f      	ldr	r2, [pc, #508]	; (80088ec <HAL_UART_IRQHandler+0x3e4>)
 80086f0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7fc fcee 	bl	80050d8 <HAL_DMA_Abort_IT>
 80086fc:	4603      	mov	r3, r0
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d019      	beq.n	8008736 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800870c:	4610      	mov	r0, r2
 800870e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008710:	e011      	b.n	8008736 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800871a:	e00c      	b.n	8008736 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008724:	e007      	b.n	8008736 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008734:	e172      	b.n	8008a1c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008736:	bf00      	nop
    return;
 8008738:	e170      	b.n	8008a1c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800873e:	2b01      	cmp	r3, #1
 8008740:	f040 814c 	bne.w	80089dc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008748:	f003 0310 	and.w	r3, r3, #16
 800874c:	2b00      	cmp	r3, #0
 800874e:	f000 8145 	beq.w	80089dc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008756:	f003 0310 	and.w	r3, r3, #16
 800875a:	2b00      	cmp	r3, #0
 800875c:	f000 813e 	beq.w	80089dc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008760:	2300      	movs	r3, #0
 8008762:	60bb      	str	r3, [r7, #8]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	60bb      	str	r3, [r7, #8]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	60bb      	str	r3, [r7, #8]
 8008774:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	695b      	ldr	r3, [r3, #20]
 800877c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008780:	2b40      	cmp	r3, #64	; 0x40
 8008782:	f040 80b5 	bne.w	80088f0 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008792:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008796:	2b00      	cmp	r3, #0
 8008798:	f000 8142 	beq.w	8008a20 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80087a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80087a4:	429a      	cmp	r2, r3
 80087a6:	f080 813b 	bcs.w	8008a20 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80087b0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b6:	69db      	ldr	r3, [r3, #28]
 80087b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087bc:	f000 8088 	beq.w	80088d0 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	330c      	adds	r3, #12
 80087c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80087ce:	e853 3f00 	ldrex	r3, [r3]
 80087d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80087d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80087da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	330c      	adds	r3, #12
 80087e8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80087ec:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80087f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80087f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80087fc:	e841 2300 	strex	r3, r2, [r1]
 8008800:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008804:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008808:	2b00      	cmp	r3, #0
 800880a:	d1d9      	bne.n	80087c0 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	3314      	adds	r3, #20
 8008812:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008814:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008816:	e853 3f00 	ldrex	r3, [r3]
 800881a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800881c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800881e:	f023 0301 	bic.w	r3, r3, #1
 8008822:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	3314      	adds	r3, #20
 800882c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008830:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008834:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008836:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008838:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800883c:	e841 2300 	strex	r3, r2, [r1]
 8008840:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008842:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1e1      	bne.n	800880c <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	3314      	adds	r3, #20
 800884e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008850:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008852:	e853 3f00 	ldrex	r3, [r3]
 8008856:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008858:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800885a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800885e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	3314      	adds	r3, #20
 8008868:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800886c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800886e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008870:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008872:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008874:	e841 2300 	strex	r3, r2, [r1]
 8008878:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800887a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800887c:	2b00      	cmp	r3, #0
 800887e:	d1e3      	bne.n	8008848 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2220      	movs	r2, #32
 8008884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	330c      	adds	r3, #12
 8008894:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008898:	e853 3f00 	ldrex	r3, [r3]
 800889c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800889e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088a0:	f023 0310 	bic.w	r3, r3, #16
 80088a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	330c      	adds	r3, #12
 80088ae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80088b2:	65ba      	str	r2, [r7, #88]	; 0x58
 80088b4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80088b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80088ba:	e841 2300 	strex	r3, r2, [r1]
 80088be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80088c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1e3      	bne.n	800888e <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7fc fb94 	bl	8004ff8 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80088dc:	b292      	uxth	r2, r2
 80088de:	1a8a      	subs	r2, r1, r2
 80088e0:	b292      	uxth	r2, r2
 80088e2:	4611      	mov	r1, r2
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80088e8:	e09a      	b.n	8008a20 <HAL_UART_IRQHandler+0x518>
 80088ea:	bf00      	nop
 80088ec:	08008cc3 	.word	0x08008cc3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	1ad3      	subs	r3, r2, r3
 80088fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008904:	b29b      	uxth	r3, r3
 8008906:	2b00      	cmp	r3, #0
 8008908:	f000 808c 	beq.w	8008a24 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800890c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008910:	2b00      	cmp	r3, #0
 8008912:	f000 8087 	beq.w	8008a24 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	330c      	adds	r3, #12
 800891c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008920:	e853 3f00 	ldrex	r3, [r3]
 8008924:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008928:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800892c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	330c      	adds	r3, #12
 8008936:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800893a:	647a      	str	r2, [r7, #68]	; 0x44
 800893c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800893e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008940:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008942:	e841 2300 	strex	r3, r2, [r1]
 8008946:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800894a:	2b00      	cmp	r3, #0
 800894c:	d1e3      	bne.n	8008916 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	3314      	adds	r3, #20
 8008954:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008958:	e853 3f00 	ldrex	r3, [r3]
 800895c:	623b      	str	r3, [r7, #32]
   return(result);
 800895e:	6a3b      	ldr	r3, [r7, #32]
 8008960:	f023 0301 	bic.w	r3, r3, #1
 8008964:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	3314      	adds	r3, #20
 800896e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008972:	633a      	str	r2, [r7, #48]	; 0x30
 8008974:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008976:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800897a:	e841 2300 	strex	r3, r2, [r1]
 800897e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008982:	2b00      	cmp	r3, #0
 8008984:	d1e3      	bne.n	800894e <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2220      	movs	r2, #32
 800898a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	330c      	adds	r3, #12
 800899a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	e853 3f00 	ldrex	r3, [r3]
 80089a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f023 0310 	bic.w	r3, r3, #16
 80089aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	330c      	adds	r3, #12
 80089b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80089b8:	61fa      	str	r2, [r7, #28]
 80089ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089bc:	69b9      	ldr	r1, [r7, #24]
 80089be:	69fa      	ldr	r2, [r7, #28]
 80089c0:	e841 2300 	strex	r3, r2, [r1]
 80089c4:	617b      	str	r3, [r7, #20]
   return(result);
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d1e3      	bne.n	8008994 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089d0:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 80089d4:	4611      	mov	r1, r2
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80089da:	e023      	b.n	8008a24 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80089dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d009      	beq.n	80089fc <HAL_UART_IRQHandler+0x4f4>
 80089e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d003      	beq.n	80089fc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 f979 	bl	8008cec <UART_Transmit_IT>
    return;
 80089fa:	e014      	b.n	8008a26 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80089fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d00e      	beq.n	8008a26 <HAL_UART_IRQHandler+0x51e>
 8008a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d008      	beq.n	8008a26 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 f9b9 	bl	8008d8c <UART_EndTransmit_IT>
    return;
 8008a1a:	e004      	b.n	8008a26 <HAL_UART_IRQHandler+0x51e>
    return;
 8008a1c:	bf00      	nop
 8008a1e:	e002      	b.n	8008a26 <HAL_UART_IRQHandler+0x51e>
      return;
 8008a20:	bf00      	nop
 8008a22:	e000      	b.n	8008a26 <HAL_UART_IRQHandler+0x51e>
      return;
 8008a24:	bf00      	nop
  }
}
 8008a26:	37e8      	adds	r7, #232	; 0xe8
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008a34:	bf00      	nop
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008a48:	bf00      	nop
 8008a4a:	370c      	adds	r7, #12
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008a5c:	bf00      	nop
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008a70:	bf00      	nop
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008a84:	bf00      	nop
 8008a86:	370c      	adds	r7, #12
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008a98:	bf00      	nop
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr

08008aa4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	460b      	mov	r3, r1
 8008aae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ab0:	bf00      	nop
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	60fb      	str	r3, [r7, #12]
 8008ac8:	2300      	movs	r3, #0
 8008aca:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	b2da      	uxtb	r2, r3
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	b2db      	uxtb	r3, r3
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3714      	adds	r7, #20
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	370c      	adds	r7, #12
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4a10      	ldr	r2, [pc, #64]	; (8008b5c <UART_InitCallbacksToDefault+0x4c>)
 8008b1c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4a0f      	ldr	r2, [pc, #60]	; (8008b60 <UART_InitCallbacksToDefault+0x50>)
 8008b22:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	4a0f      	ldr	r2, [pc, #60]	; (8008b64 <UART_InitCallbacksToDefault+0x54>)
 8008b28:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4a0e      	ldr	r2, [pc, #56]	; (8008b68 <UART_InitCallbacksToDefault+0x58>)
 8008b2e:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a0e      	ldr	r2, [pc, #56]	; (8008b6c <UART_InitCallbacksToDefault+0x5c>)
 8008b34:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4a0d      	ldr	r2, [pc, #52]	; (8008b70 <UART_InitCallbacksToDefault+0x60>)
 8008b3a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4a0d      	ldr	r2, [pc, #52]	; (8008b74 <UART_InitCallbacksToDefault+0x64>)
 8008b40:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4a0c      	ldr	r2, [pc, #48]	; (8008b78 <UART_InitCallbacksToDefault+0x68>)
 8008b46:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a0c      	ldr	r2, [pc, #48]	; (8008b7c <UART_InitCallbacksToDefault+0x6c>)
 8008b4c:	669a      	str	r2, [r3, #104]	; 0x68

}
 8008b4e:	bf00      	nop
 8008b50:	370c      	adds	r7, #12
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	08008a41 	.word	0x08008a41
 8008b60:	08008a2d 	.word	0x08008a2d
 8008b64:	08008a55 	.word	0x08008a55
 8008b68:	08002781 	.word	0x08002781
 8008b6c:	080026cd 	.word	0x080026cd
 8008b70:	08008a69 	.word	0x08008a69
 8008b74:	08008a7d 	.word	0x08008a7d
 8008b78:	08008a91 	.word	0x08008a91
 8008b7c:	08008aa5 	.word	0x08008aa5

08008b80 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	68ba      	ldr	r2, [r7, #8]
 8008b92:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	88fa      	ldrh	r2, [r7, #6]
 8008b98:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	88fa      	ldrh	r2, [r7, #6]
 8008b9e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2222      	movs	r2, #34	; 0x22
 8008baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	691b      	ldr	r3, [r3, #16]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d007      	beq.n	8008bce <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	68da      	ldr	r2, [r3, #12]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008bcc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	695a      	ldr	r2, [r3, #20]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f042 0201 	orr.w	r2, r2, #1
 8008bdc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	68da      	ldr	r2, [r3, #12]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f042 0220 	orr.w	r2, r2, #32
 8008bec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3714      	adds	r7, #20
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b095      	sub	sp, #84	; 0x54
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	330c      	adds	r3, #12
 8008c0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c0e:	e853 3f00 	ldrex	r3, [r3]
 8008c12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	330c      	adds	r3, #12
 8008c22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c24:	643a      	str	r2, [r7, #64]	; 0x40
 8008c26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c2c:	e841 2300 	strex	r3, r2, [r1]
 8008c30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d1e5      	bne.n	8008c04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	3314      	adds	r3, #20
 8008c3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c40:	6a3b      	ldr	r3, [r7, #32]
 8008c42:	e853 3f00 	ldrex	r3, [r3]
 8008c46:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	f023 0301 	bic.w	r3, r3, #1
 8008c4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	3314      	adds	r3, #20
 8008c56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c60:	e841 2300 	strex	r3, r2, [r1]
 8008c64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d1e5      	bne.n	8008c38 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d119      	bne.n	8008ca8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	330c      	adds	r3, #12
 8008c7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	e853 3f00 	ldrex	r3, [r3]
 8008c82:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	f023 0310 	bic.w	r3, r3, #16
 8008c8a:	647b      	str	r3, [r7, #68]	; 0x44
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	330c      	adds	r3, #12
 8008c92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c94:	61ba      	str	r2, [r7, #24]
 8008c96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c98:	6979      	ldr	r1, [r7, #20]
 8008c9a:	69ba      	ldr	r2, [r7, #24]
 8008c9c:	e841 2300 	strex	r3, r2, [r1]
 8008ca0:	613b      	str	r3, [r7, #16]
   return(result);
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d1e5      	bne.n	8008c74 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2220      	movs	r2, #32
 8008cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008cb6:	bf00      	nop
 8008cb8:	3754      	adds	r7, #84	; 0x54
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr

08008cc2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b084      	sub	sp, #16
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ce4:	bf00      	nop
 8008ce6:	3710      	adds	r7, #16
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b085      	sub	sp, #20
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	2b21      	cmp	r3, #33	; 0x21
 8008cfe:	d13e      	bne.n	8008d7e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d08:	d114      	bne.n	8008d34 <UART_Transmit_IT+0x48>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	691b      	ldr	r3, [r3, #16]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d110      	bne.n	8008d34 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a1b      	ldr	r3, [r3, #32]
 8008d16:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	881b      	ldrh	r3, [r3, #0]
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d26:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6a1b      	ldr	r3, [r3, #32]
 8008d2c:	1c9a      	adds	r2, r3, #2
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	621a      	str	r2, [r3, #32]
 8008d32:	e008      	b.n	8008d46 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6a1b      	ldr	r3, [r3, #32]
 8008d38:	1c59      	adds	r1, r3, #1
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	6211      	str	r1, [r2, #32]
 8008d3e:	781a      	ldrb	r2, [r3, #0]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	4619      	mov	r1, r3
 8008d54:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d10f      	bne.n	8008d7a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	68da      	ldr	r2, [r3, #12]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d68:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	68da      	ldr	r2, [r3, #12]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d78:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	e000      	b.n	8008d80 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008d7e:	2302      	movs	r3, #2
  }
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3714      	adds	r7, #20
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	68da      	ldr	r2, [r3, #12]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008da2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2220      	movs	r2, #32
 8008da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3708      	adds	r7, #8
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b08c      	sub	sp, #48	; 0x30
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	2b22      	cmp	r3, #34	; 0x22
 8008dd0:	f040 80ad 	bne.w	8008f2e <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ddc:	d117      	bne.n	8008e0e <UART_Receive_IT+0x50>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	691b      	ldr	r3, [r3, #16]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d113      	bne.n	8008e0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008de6:	2300      	movs	r3, #0
 8008de8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e06:	1c9a      	adds	r2, r3, #2
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	629a      	str	r2, [r3, #40]	; 0x28
 8008e0c:	e026      	b.n	8008e5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e12:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008e14:	2300      	movs	r3, #0
 8008e16:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e20:	d007      	beq.n	8008e32 <UART_Receive_IT+0x74>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d10a      	bne.n	8008e40 <UART_Receive_IT+0x82>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	691b      	ldr	r3, [r3, #16]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d106      	bne.n	8008e40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	b2da      	uxtb	r2, r3
 8008e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3c:	701a      	strb	r2, [r3, #0]
 8008e3e:	e008      	b.n	8008e52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e4c:	b2da      	uxtb	r2, r3
 8008e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e56:	1c5a      	adds	r2, r3, #1
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	3b01      	subs	r3, #1
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	4619      	mov	r1, r3
 8008e6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d15c      	bne.n	8008f2a <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	68da      	ldr	r2, [r3, #12]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f022 0220 	bic.w	r2, r2, #32
 8008e7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	68da      	ldr	r2, [r3, #12]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	695a      	ldr	r2, [r3, #20]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f022 0201 	bic.w	r2, r2, #1
 8008e9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2220      	movs	r2, #32
 8008ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d136      	bne.n	8008f1e <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	330c      	adds	r3, #12
 8008ebc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	e853 3f00 	ldrex	r3, [r3]
 8008ec4:	613b      	str	r3, [r7, #16]
   return(result);
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	f023 0310 	bic.w	r3, r3, #16
 8008ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	330c      	adds	r3, #12
 8008ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ed6:	623a      	str	r2, [r7, #32]
 8008ed8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eda:	69f9      	ldr	r1, [r7, #28]
 8008edc:	6a3a      	ldr	r2, [r7, #32]
 8008ede:	e841 2300 	strex	r3, r2, [r1]
 8008ee2:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ee4:	69bb      	ldr	r3, [r7, #24]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d1e5      	bne.n	8008eb6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f003 0310 	and.w	r3, r3, #16
 8008ef4:	2b10      	cmp	r3, #16
 8008ef6:	d10a      	bne.n	8008f0e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ef8:	2300      	movs	r3, #0
 8008efa:	60fb      	str	r3, [r7, #12]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	60fb      	str	r3, [r7, #12]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	60fb      	str	r3, [r7, #12]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8008f16:	4611      	mov	r1, r2
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	4798      	blx	r3
 8008f1c:	e003      	b.n	8008f26 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008f26:	2300      	movs	r3, #0
 8008f28:	e002      	b.n	8008f30 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	e000      	b.n	8008f30 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8008f2e:	2302      	movs	r3, #2
  }
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3730      	adds	r7, #48	; 0x30
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f3c:	b0c0      	sub	sp, #256	; 0x100
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f54:	68d9      	ldr	r1, [r3, #12]
 8008f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	ea40 0301 	orr.w	r3, r0, r1
 8008f60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f66:	689a      	ldr	r2, [r3, #8]
 8008f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	431a      	orrs	r2, r3
 8008f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f74:	695b      	ldr	r3, [r3, #20]
 8008f76:	431a      	orrs	r2, r3
 8008f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f7c:	69db      	ldr	r3, [r3, #28]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008f90:	f021 010c 	bic.w	r1, r1, #12
 8008f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008f9e:	430b      	orrs	r3, r1
 8008fa0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	695b      	ldr	r3, [r3, #20]
 8008faa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fb2:	6999      	ldr	r1, [r3, #24]
 8008fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	ea40 0301 	orr.w	r3, r0, r1
 8008fbe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	4b8f      	ldr	r3, [pc, #572]	; (8009204 <UART_SetConfig+0x2cc>)
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d005      	beq.n	8008fd8 <UART_SetConfig+0xa0>
 8008fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	4b8d      	ldr	r3, [pc, #564]	; (8009208 <UART_SetConfig+0x2d0>)
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d104      	bne.n	8008fe2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008fd8:	f7fd fc3e 	bl	8006858 <HAL_RCC_GetPCLK2Freq>
 8008fdc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008fe0:	e003      	b.n	8008fea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008fe2:	f7fd fc25 	bl	8006830 <HAL_RCC_GetPCLK1Freq>
 8008fe6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fee:	69db      	ldr	r3, [r3, #28]
 8008ff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ff4:	f040 810c 	bne.w	8009210 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008ff8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009002:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009006:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800900a:	4622      	mov	r2, r4
 800900c:	462b      	mov	r3, r5
 800900e:	1891      	adds	r1, r2, r2
 8009010:	65b9      	str	r1, [r7, #88]	; 0x58
 8009012:	415b      	adcs	r3, r3
 8009014:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009016:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800901a:	4621      	mov	r1, r4
 800901c:	eb12 0801 	adds.w	r8, r2, r1
 8009020:	4629      	mov	r1, r5
 8009022:	eb43 0901 	adc.w	r9, r3, r1
 8009026:	f04f 0200 	mov.w	r2, #0
 800902a:	f04f 0300 	mov.w	r3, #0
 800902e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009032:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009036:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800903a:	4690      	mov	r8, r2
 800903c:	4699      	mov	r9, r3
 800903e:	4623      	mov	r3, r4
 8009040:	eb18 0303 	adds.w	r3, r8, r3
 8009044:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009048:	462b      	mov	r3, r5
 800904a:	eb49 0303 	adc.w	r3, r9, r3
 800904e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	2200      	movs	r2, #0
 800905a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800905e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009062:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009066:	460b      	mov	r3, r1
 8009068:	18db      	adds	r3, r3, r3
 800906a:	653b      	str	r3, [r7, #80]	; 0x50
 800906c:	4613      	mov	r3, r2
 800906e:	eb42 0303 	adc.w	r3, r2, r3
 8009072:	657b      	str	r3, [r7, #84]	; 0x54
 8009074:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009078:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800907c:	f7f7 fca6 	bl	80009cc <__aeabi_uldivmod>
 8009080:	4602      	mov	r2, r0
 8009082:	460b      	mov	r3, r1
 8009084:	4b61      	ldr	r3, [pc, #388]	; (800920c <UART_SetConfig+0x2d4>)
 8009086:	fba3 2302 	umull	r2, r3, r3, r2
 800908a:	095b      	lsrs	r3, r3, #5
 800908c:	011c      	lsls	r4, r3, #4
 800908e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009092:	2200      	movs	r2, #0
 8009094:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009098:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800909c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80090a0:	4642      	mov	r2, r8
 80090a2:	464b      	mov	r3, r9
 80090a4:	1891      	adds	r1, r2, r2
 80090a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80090a8:	415b      	adcs	r3, r3
 80090aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80090b0:	4641      	mov	r1, r8
 80090b2:	eb12 0a01 	adds.w	sl, r2, r1
 80090b6:	4649      	mov	r1, r9
 80090b8:	eb43 0b01 	adc.w	fp, r3, r1
 80090bc:	f04f 0200 	mov.w	r2, #0
 80090c0:	f04f 0300 	mov.w	r3, #0
 80090c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80090c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80090cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80090d0:	4692      	mov	sl, r2
 80090d2:	469b      	mov	fp, r3
 80090d4:	4643      	mov	r3, r8
 80090d6:	eb1a 0303 	adds.w	r3, sl, r3
 80090da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80090de:	464b      	mov	r3, r9
 80090e0:	eb4b 0303 	adc.w	r3, fp, r3
 80090e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80090e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80090f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80090f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80090fc:	460b      	mov	r3, r1
 80090fe:	18db      	adds	r3, r3, r3
 8009100:	643b      	str	r3, [r7, #64]	; 0x40
 8009102:	4613      	mov	r3, r2
 8009104:	eb42 0303 	adc.w	r3, r2, r3
 8009108:	647b      	str	r3, [r7, #68]	; 0x44
 800910a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800910e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009112:	f7f7 fc5b 	bl	80009cc <__aeabi_uldivmod>
 8009116:	4602      	mov	r2, r0
 8009118:	460b      	mov	r3, r1
 800911a:	4611      	mov	r1, r2
 800911c:	4b3b      	ldr	r3, [pc, #236]	; (800920c <UART_SetConfig+0x2d4>)
 800911e:	fba3 2301 	umull	r2, r3, r3, r1
 8009122:	095b      	lsrs	r3, r3, #5
 8009124:	2264      	movs	r2, #100	; 0x64
 8009126:	fb02 f303 	mul.w	r3, r2, r3
 800912a:	1acb      	subs	r3, r1, r3
 800912c:	00db      	lsls	r3, r3, #3
 800912e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009132:	4b36      	ldr	r3, [pc, #216]	; (800920c <UART_SetConfig+0x2d4>)
 8009134:	fba3 2302 	umull	r2, r3, r3, r2
 8009138:	095b      	lsrs	r3, r3, #5
 800913a:	005b      	lsls	r3, r3, #1
 800913c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009140:	441c      	add	r4, r3
 8009142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009146:	2200      	movs	r2, #0
 8009148:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800914c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009150:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009154:	4642      	mov	r2, r8
 8009156:	464b      	mov	r3, r9
 8009158:	1891      	adds	r1, r2, r2
 800915a:	63b9      	str	r1, [r7, #56]	; 0x38
 800915c:	415b      	adcs	r3, r3
 800915e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009160:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009164:	4641      	mov	r1, r8
 8009166:	1851      	adds	r1, r2, r1
 8009168:	6339      	str	r1, [r7, #48]	; 0x30
 800916a:	4649      	mov	r1, r9
 800916c:	414b      	adcs	r3, r1
 800916e:	637b      	str	r3, [r7, #52]	; 0x34
 8009170:	f04f 0200 	mov.w	r2, #0
 8009174:	f04f 0300 	mov.w	r3, #0
 8009178:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800917c:	4659      	mov	r1, fp
 800917e:	00cb      	lsls	r3, r1, #3
 8009180:	4651      	mov	r1, sl
 8009182:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009186:	4651      	mov	r1, sl
 8009188:	00ca      	lsls	r2, r1, #3
 800918a:	4610      	mov	r0, r2
 800918c:	4619      	mov	r1, r3
 800918e:	4603      	mov	r3, r0
 8009190:	4642      	mov	r2, r8
 8009192:	189b      	adds	r3, r3, r2
 8009194:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009198:	464b      	mov	r3, r9
 800919a:	460a      	mov	r2, r1
 800919c:	eb42 0303 	adc.w	r3, r2, r3
 80091a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80091a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	2200      	movs	r2, #0
 80091ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80091b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80091b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80091b8:	460b      	mov	r3, r1
 80091ba:	18db      	adds	r3, r3, r3
 80091bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80091be:	4613      	mov	r3, r2
 80091c0:	eb42 0303 	adc.w	r3, r2, r3
 80091c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80091ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80091ce:	f7f7 fbfd 	bl	80009cc <__aeabi_uldivmod>
 80091d2:	4602      	mov	r2, r0
 80091d4:	460b      	mov	r3, r1
 80091d6:	4b0d      	ldr	r3, [pc, #52]	; (800920c <UART_SetConfig+0x2d4>)
 80091d8:	fba3 1302 	umull	r1, r3, r3, r2
 80091dc:	095b      	lsrs	r3, r3, #5
 80091de:	2164      	movs	r1, #100	; 0x64
 80091e0:	fb01 f303 	mul.w	r3, r1, r3
 80091e4:	1ad3      	subs	r3, r2, r3
 80091e6:	00db      	lsls	r3, r3, #3
 80091e8:	3332      	adds	r3, #50	; 0x32
 80091ea:	4a08      	ldr	r2, [pc, #32]	; (800920c <UART_SetConfig+0x2d4>)
 80091ec:	fba2 2303 	umull	r2, r3, r2, r3
 80091f0:	095b      	lsrs	r3, r3, #5
 80091f2:	f003 0207 	and.w	r2, r3, #7
 80091f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4422      	add	r2, r4
 80091fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009200:	e105      	b.n	800940e <UART_SetConfig+0x4d6>
 8009202:	bf00      	nop
 8009204:	40011000 	.word	0x40011000
 8009208:	40011400 	.word	0x40011400
 800920c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009210:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009214:	2200      	movs	r2, #0
 8009216:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800921a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800921e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009222:	4642      	mov	r2, r8
 8009224:	464b      	mov	r3, r9
 8009226:	1891      	adds	r1, r2, r2
 8009228:	6239      	str	r1, [r7, #32]
 800922a:	415b      	adcs	r3, r3
 800922c:	627b      	str	r3, [r7, #36]	; 0x24
 800922e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009232:	4641      	mov	r1, r8
 8009234:	1854      	adds	r4, r2, r1
 8009236:	4649      	mov	r1, r9
 8009238:	eb43 0501 	adc.w	r5, r3, r1
 800923c:	f04f 0200 	mov.w	r2, #0
 8009240:	f04f 0300 	mov.w	r3, #0
 8009244:	00eb      	lsls	r3, r5, #3
 8009246:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800924a:	00e2      	lsls	r2, r4, #3
 800924c:	4614      	mov	r4, r2
 800924e:	461d      	mov	r5, r3
 8009250:	4643      	mov	r3, r8
 8009252:	18e3      	adds	r3, r4, r3
 8009254:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009258:	464b      	mov	r3, r9
 800925a:	eb45 0303 	adc.w	r3, r5, r3
 800925e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	2200      	movs	r2, #0
 800926a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800926e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009272:	f04f 0200 	mov.w	r2, #0
 8009276:	f04f 0300 	mov.w	r3, #0
 800927a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800927e:	4629      	mov	r1, r5
 8009280:	008b      	lsls	r3, r1, #2
 8009282:	4621      	mov	r1, r4
 8009284:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009288:	4621      	mov	r1, r4
 800928a:	008a      	lsls	r2, r1, #2
 800928c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009290:	f7f7 fb9c 	bl	80009cc <__aeabi_uldivmod>
 8009294:	4602      	mov	r2, r0
 8009296:	460b      	mov	r3, r1
 8009298:	4b60      	ldr	r3, [pc, #384]	; (800941c <UART_SetConfig+0x4e4>)
 800929a:	fba3 2302 	umull	r2, r3, r3, r2
 800929e:	095b      	lsrs	r3, r3, #5
 80092a0:	011c      	lsls	r4, r3, #4
 80092a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092a6:	2200      	movs	r2, #0
 80092a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80092ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80092b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80092b4:	4642      	mov	r2, r8
 80092b6:	464b      	mov	r3, r9
 80092b8:	1891      	adds	r1, r2, r2
 80092ba:	61b9      	str	r1, [r7, #24]
 80092bc:	415b      	adcs	r3, r3
 80092be:	61fb      	str	r3, [r7, #28]
 80092c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80092c4:	4641      	mov	r1, r8
 80092c6:	1851      	adds	r1, r2, r1
 80092c8:	6139      	str	r1, [r7, #16]
 80092ca:	4649      	mov	r1, r9
 80092cc:	414b      	adcs	r3, r1
 80092ce:	617b      	str	r3, [r7, #20]
 80092d0:	f04f 0200 	mov.w	r2, #0
 80092d4:	f04f 0300 	mov.w	r3, #0
 80092d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80092dc:	4659      	mov	r1, fp
 80092de:	00cb      	lsls	r3, r1, #3
 80092e0:	4651      	mov	r1, sl
 80092e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092e6:	4651      	mov	r1, sl
 80092e8:	00ca      	lsls	r2, r1, #3
 80092ea:	4610      	mov	r0, r2
 80092ec:	4619      	mov	r1, r3
 80092ee:	4603      	mov	r3, r0
 80092f0:	4642      	mov	r2, r8
 80092f2:	189b      	adds	r3, r3, r2
 80092f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80092f8:	464b      	mov	r3, r9
 80092fa:	460a      	mov	r2, r1
 80092fc:	eb42 0303 	adc.w	r3, r2, r3
 8009300:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	2200      	movs	r2, #0
 800930c:	67bb      	str	r3, [r7, #120]	; 0x78
 800930e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009310:	f04f 0200 	mov.w	r2, #0
 8009314:	f04f 0300 	mov.w	r3, #0
 8009318:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800931c:	4649      	mov	r1, r9
 800931e:	008b      	lsls	r3, r1, #2
 8009320:	4641      	mov	r1, r8
 8009322:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009326:	4641      	mov	r1, r8
 8009328:	008a      	lsls	r2, r1, #2
 800932a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800932e:	f7f7 fb4d 	bl	80009cc <__aeabi_uldivmod>
 8009332:	4602      	mov	r2, r0
 8009334:	460b      	mov	r3, r1
 8009336:	4b39      	ldr	r3, [pc, #228]	; (800941c <UART_SetConfig+0x4e4>)
 8009338:	fba3 1302 	umull	r1, r3, r3, r2
 800933c:	095b      	lsrs	r3, r3, #5
 800933e:	2164      	movs	r1, #100	; 0x64
 8009340:	fb01 f303 	mul.w	r3, r1, r3
 8009344:	1ad3      	subs	r3, r2, r3
 8009346:	011b      	lsls	r3, r3, #4
 8009348:	3332      	adds	r3, #50	; 0x32
 800934a:	4a34      	ldr	r2, [pc, #208]	; (800941c <UART_SetConfig+0x4e4>)
 800934c:	fba2 2303 	umull	r2, r3, r2, r3
 8009350:	095b      	lsrs	r3, r3, #5
 8009352:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009356:	441c      	add	r4, r3
 8009358:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800935c:	2200      	movs	r2, #0
 800935e:	673b      	str	r3, [r7, #112]	; 0x70
 8009360:	677a      	str	r2, [r7, #116]	; 0x74
 8009362:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009366:	4642      	mov	r2, r8
 8009368:	464b      	mov	r3, r9
 800936a:	1891      	adds	r1, r2, r2
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	415b      	adcs	r3, r3
 8009370:	60fb      	str	r3, [r7, #12]
 8009372:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009376:	4641      	mov	r1, r8
 8009378:	1851      	adds	r1, r2, r1
 800937a:	6039      	str	r1, [r7, #0]
 800937c:	4649      	mov	r1, r9
 800937e:	414b      	adcs	r3, r1
 8009380:	607b      	str	r3, [r7, #4]
 8009382:	f04f 0200 	mov.w	r2, #0
 8009386:	f04f 0300 	mov.w	r3, #0
 800938a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800938e:	4659      	mov	r1, fp
 8009390:	00cb      	lsls	r3, r1, #3
 8009392:	4651      	mov	r1, sl
 8009394:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009398:	4651      	mov	r1, sl
 800939a:	00ca      	lsls	r2, r1, #3
 800939c:	4610      	mov	r0, r2
 800939e:	4619      	mov	r1, r3
 80093a0:	4603      	mov	r3, r0
 80093a2:	4642      	mov	r2, r8
 80093a4:	189b      	adds	r3, r3, r2
 80093a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80093a8:	464b      	mov	r3, r9
 80093aa:	460a      	mov	r2, r1
 80093ac:	eb42 0303 	adc.w	r3, r2, r3
 80093b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80093b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	2200      	movs	r2, #0
 80093ba:	663b      	str	r3, [r7, #96]	; 0x60
 80093bc:	667a      	str	r2, [r7, #100]	; 0x64
 80093be:	f04f 0200 	mov.w	r2, #0
 80093c2:	f04f 0300 	mov.w	r3, #0
 80093c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80093ca:	4649      	mov	r1, r9
 80093cc:	008b      	lsls	r3, r1, #2
 80093ce:	4641      	mov	r1, r8
 80093d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80093d4:	4641      	mov	r1, r8
 80093d6:	008a      	lsls	r2, r1, #2
 80093d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80093dc:	f7f7 faf6 	bl	80009cc <__aeabi_uldivmod>
 80093e0:	4602      	mov	r2, r0
 80093e2:	460b      	mov	r3, r1
 80093e4:	4b0d      	ldr	r3, [pc, #52]	; (800941c <UART_SetConfig+0x4e4>)
 80093e6:	fba3 1302 	umull	r1, r3, r3, r2
 80093ea:	095b      	lsrs	r3, r3, #5
 80093ec:	2164      	movs	r1, #100	; 0x64
 80093ee:	fb01 f303 	mul.w	r3, r1, r3
 80093f2:	1ad3      	subs	r3, r2, r3
 80093f4:	011b      	lsls	r3, r3, #4
 80093f6:	3332      	adds	r3, #50	; 0x32
 80093f8:	4a08      	ldr	r2, [pc, #32]	; (800941c <UART_SetConfig+0x4e4>)
 80093fa:	fba2 2303 	umull	r2, r3, r2, r3
 80093fe:	095b      	lsrs	r3, r3, #5
 8009400:	f003 020f 	and.w	r2, r3, #15
 8009404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4422      	add	r2, r4
 800940c:	609a      	str	r2, [r3, #8]
}
 800940e:	bf00      	nop
 8009410:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009414:	46bd      	mov	sp, r7
 8009416:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800941a:	bf00      	nop
 800941c:	51eb851f 	.word	0x51eb851f

08009420 <HAL_ADC_ConvCpltCallback>:
* Function: HAL_ADC_ConvCpltCallback										   	   *
* Description: Conversion callback to process conversion complete in the 		   *
* 			   peripheral.														   *
************************************************************************************/
VOID HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
	if(Rte_P_Os_OsPort_Os_Counter % 200 == 0)
 8009428:	4b09      	ldr	r3, [pc, #36]	; (8009450 <HAL_ADC_ConvCpltCallback+0x30>)
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	4b09      	ldr	r3, [pc, #36]	; (8009454 <HAL_ADC_ConvCpltCallback+0x34>)
 800942e:	fba3 1302 	umull	r1, r3, r3, r2
 8009432:	099b      	lsrs	r3, r3, #6
 8009434:	21c8      	movs	r1, #200	; 0xc8
 8009436:	fb01 f303 	mul.w	r3, r1, r3
 800943a:	1ad3      	subs	r3, r2, r3
 800943c:	2b00      	cmp	r3, #0
 800943e:	d102      	bne.n	8009446 <HAL_ADC_ConvCpltCallback+0x26>
	{
		Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues(Adc_ChannelOne_Buffer);
 8009440:	4805      	ldr	r0, [pc, #20]	; (8009458 <HAL_ADC_ConvCpltCallback+0x38>)
 8009442:	f004 f9df 	bl	800d804 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues>
	}
	else
	{
		/* do nothing */
	}
}
 8009446:	bf00      	nop
 8009448:	3708      	adds	r7, #8
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
 800944e:	bf00      	nop
 8009450:	2000020c 	.word	0x2000020c
 8009454:	51eb851f 	.word	0x51eb851f
 8009458:	200006d8 	.word	0x200006d8

0800945c <HAL_ADC_ErrorCallback>:
/***********************************************************************************
* Function: HAL_ADC_ErrorCallback										   		   *
* Description: Error callback to process fault in the peripheral.		 		   *
************************************************************************************/
VOID HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
	/* Local variable to store error status. */
	uint32 receivedStatus = HAL_ADC_GetError(&hadc1);
 8009464:	481c      	ldr	r0, [pc, #112]	; (80094d8 <HAL_ADC_ErrorCallback+0x7c>)
 8009466:	f7fb f90f 	bl	8004688 <HAL_ADC_GetError>
 800946a:	60f8      	str	r0, [r7, #12]
	/* Process error status.
	 * Perform re-initialization on each error to prevent faults in the peripheral. */
	switch(receivedStatus)
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2b04      	cmp	r3, #4
 8009470:	d82d      	bhi.n	80094ce <HAL_ADC_ErrorCallback+0x72>
 8009472:	a201      	add	r2, pc, #4	; (adr r2, 8009478 <HAL_ADC_ErrorCallback+0x1c>)
 8009474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009478:	080094cf 	.word	0x080094cf
 800947c:	0800948d 	.word	0x0800948d
 8009480:	080094a3 	.word	0x080094a3
 8009484:	080094cf 	.word	0x080094cf
 8009488:	080094b9 	.word	0x080094b9
	{
		case HAL_ADC_ERROR_NONE:
			/* do nothing */
			break;
		case HAL_ADC_ERROR_INTERNAL:
			SystemManager_Fault[ADC_ERROR_INTERNAL]++;
 800948c:	4b13      	ldr	r3, [pc, #76]	; (80094dc <HAL_ADC_ErrorCallback+0x80>)
 800948e:	7b9b      	ldrb	r3, [r3, #14]
 8009490:	3301      	adds	r3, #1
 8009492:	b2da      	uxtb	r2, r3
 8009494:	4b11      	ldr	r3, [pc, #68]	; (80094dc <HAL_ADC_ErrorCallback+0x80>)
 8009496:	739a      	strb	r2, [r3, #14]
			Adc_DeInit();
 8009498:	f000 f898 	bl	80095cc <Adc_DeInit>
			Adc_Init();
 800949c:	f000 f8a0 	bl	80095e0 <Adc_Init>
			break;
 80094a0:	e016      	b.n	80094d0 <HAL_ADC_ErrorCallback+0x74>
		case HAL_ADC_ERROR_OVR:
			SystemManager_Fault[ADC_ERROR_OVR]++;
 80094a2:	4b0e      	ldr	r3, [pc, #56]	; (80094dc <HAL_ADC_ErrorCallback+0x80>)
 80094a4:	7bdb      	ldrb	r3, [r3, #15]
 80094a6:	3301      	adds	r3, #1
 80094a8:	b2da      	uxtb	r2, r3
 80094aa:	4b0c      	ldr	r3, [pc, #48]	; (80094dc <HAL_ADC_ErrorCallback+0x80>)
 80094ac:	73da      	strb	r2, [r3, #15]
			Adc_DeInit();
 80094ae:	f000 f88d 	bl	80095cc <Adc_DeInit>
			Adc_Init();
 80094b2:	f000 f895 	bl	80095e0 <Adc_Init>
			break;
 80094b6:	e00b      	b.n	80094d0 <HAL_ADC_ErrorCallback+0x74>
		case HAL_ADC_ERROR_DMA:
			SystemManager_Fault[ADC_ERROR_DMA]++;
 80094b8:	4b08      	ldr	r3, [pc, #32]	; (80094dc <HAL_ADC_ErrorCallback+0x80>)
 80094ba:	7c1b      	ldrb	r3, [r3, #16]
 80094bc:	3301      	adds	r3, #1
 80094be:	b2da      	uxtb	r2, r3
 80094c0:	4b06      	ldr	r3, [pc, #24]	; (80094dc <HAL_ADC_ErrorCallback+0x80>)
 80094c2:	741a      	strb	r2, [r3, #16]
			Adc_DeInit();
 80094c4:	f000 f882 	bl	80095cc <Adc_DeInit>
			Adc_Init();
 80094c8:	f000 f88a 	bl	80095e0 <Adc_Init>
			break;
 80094cc:	e000      	b.n	80094d0 <HAL_ADC_ErrorCallback+0x74>
		default:
			break;
 80094ce:	bf00      	nop
	}
}
 80094d0:	bf00      	nop
 80094d2:	3710      	adds	r7, #16
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	20000140 	.word	0x20000140
 80094dc:	2000a754 	.word	0x2000a754

080094e0 <Adc_MainFunction>:
/***********************************************************************************
* Function: Adc_MainFunction										   			   *
* Description: Peripheral main function.									       *
************************************************************************************/
VOID Adc_MainFunction()
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
	/* Local variable to store the error status. */
	uint32 statusValue = STD_LOW;
 80094e6:	2300      	movs	r3, #0
 80094e8:	607b      	str	r3, [r7, #4]
	/* Get error status. */
	statusValue = HAL_ADC_GetState(&hadc1);
 80094ea:	4836      	ldr	r0, [pc, #216]	; (80095c4 <Adc_MainFunction+0xe4>)
 80094ec:	f7fb f8c0 	bl	8004670 <HAL_ADC_GetState>
 80094f0:	6078      	str	r0, [r7, #4]

	/* Process module states. */
	switch(statusValue)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094f8:	d049      	beq.n	800958e <Adc_MainFunction+0xae>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009500:	d85a      	bhi.n	80095b8 <Adc_MainFunction+0xd8>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2b10      	cmp	r3, #16
 8009506:	d827      	bhi.n	8009558 <Adc_MainFunction+0x78>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2b10      	cmp	r3, #16
 800950c:	d854      	bhi.n	80095b8 <Adc_MainFunction+0xd8>
 800950e:	a201      	add	r2, pc, #4	; (adr r2, 8009514 <Adc_MainFunction+0x34>)
 8009510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009514:	08009563 	.word	0x08009563
 8009518:	08009571 	.word	0x08009571
 800951c:	0800957b 	.word	0x0800957b
 8009520:	080095b9 	.word	0x080095b9
 8009524:	08009599 	.word	0x08009599
 8009528:	080095b9 	.word	0x080095b9
 800952c:	080095b9 	.word	0x080095b9
 8009530:	080095b9 	.word	0x080095b9
 8009534:	080095b9 	.word	0x080095b9
 8009538:	080095b9 	.word	0x080095b9
 800953c:	080095b9 	.word	0x080095b9
 8009540:	080095b9 	.word	0x080095b9
 8009544:	080095b9 	.word	0x080095b9
 8009548:	080095b9 	.word	0x080095b9
 800954c:	080095b9 	.word	0x080095b9
 8009550:	080095b9 	.word	0x080095b9
 8009554:	080095a9 	.word	0x080095a9
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800955e:	d011      	beq.n	8009584 <Adc_MainFunction+0xa4>
		case HAL_ADC_STATE_ERROR:
			Adc_BswState = statusValue;
			HAL_ADC_ErrorCallback(&hadc1);
			break;
		default:
			break;
 8009560:	e02a      	b.n	80095b8 <Adc_MainFunction+0xd8>
			Adc_BswState = statusValue;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	b2da      	uxtb	r2, r3
 8009566:	4b18      	ldr	r3, [pc, #96]	; (80095c8 <Adc_MainFunction+0xe8>)
 8009568:	701a      	strb	r2, [r3, #0]
			Adc_Init();
 800956a:	f000 f839 	bl	80095e0 <Adc_Init>
			break;
 800956e:	e024      	b.n	80095ba <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	b2da      	uxtb	r2, r3
 8009574:	4b14      	ldr	r3, [pc, #80]	; (80095c8 <Adc_MainFunction+0xe8>)
 8009576:	701a      	strb	r2, [r3, #0]
			break;
 8009578:	e01f      	b.n	80095ba <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	b2da      	uxtb	r2, r3
 800957e:	4b12      	ldr	r3, [pc, #72]	; (80095c8 <Adc_MainFunction+0xe8>)
 8009580:	701a      	strb	r2, [r3, #0]
			break;
 8009582:	e01a      	b.n	80095ba <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	b2da      	uxtb	r2, r3
 8009588:	4b0f      	ldr	r3, [pc, #60]	; (80095c8 <Adc_MainFunction+0xe8>)
 800958a:	701a      	strb	r2, [r3, #0]
			break;
 800958c:	e015      	b.n	80095ba <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	b2da      	uxtb	r2, r3
 8009592:	4b0d      	ldr	r3, [pc, #52]	; (80095c8 <Adc_MainFunction+0xe8>)
 8009594:	701a      	strb	r2, [r3, #0]
			break;
 8009596:	e010      	b.n	80095ba <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	b2da      	uxtb	r2, r3
 800959c:	4b0a      	ldr	r3, [pc, #40]	; (80095c8 <Adc_MainFunction+0xe8>)
 800959e:	701a      	strb	r2, [r3, #0]
			HAL_ADC_ErrorCallback(&hadc1);
 80095a0:	4808      	ldr	r0, [pc, #32]	; (80095c4 <Adc_MainFunction+0xe4>)
 80095a2:	f7ff ff5b 	bl	800945c <HAL_ADC_ErrorCallback>
			break;
 80095a6:	e008      	b.n	80095ba <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	b2da      	uxtb	r2, r3
 80095ac:	4b06      	ldr	r3, [pc, #24]	; (80095c8 <Adc_MainFunction+0xe8>)
 80095ae:	701a      	strb	r2, [r3, #0]
			HAL_ADC_ErrorCallback(&hadc1);
 80095b0:	4804      	ldr	r0, [pc, #16]	; (80095c4 <Adc_MainFunction+0xe4>)
 80095b2:	f7ff ff53 	bl	800945c <HAL_ADC_ErrorCallback>
			break;
 80095b6:	e000      	b.n	80095ba <Adc_MainFunction+0xda>
			break;
 80095b8:	bf00      	nop
	}
}
 80095ba:	bf00      	nop
 80095bc:	3708      	adds	r7, #8
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	20000140 	.word	0x20000140
 80095c8:	200006d4 	.word	0x200006d4

080095cc <Adc_DeInit>:
/***********************************************************************************
* Function: Adc_DeInit										   					   *
* Description: De-initialize the peripheral.									   *
************************************************************************************/
StdReturnType Adc_DeInit()
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	af00      	add	r7, sp, #0
	/* Call for de-intialization function. */
	HAL_ADC_DeInit(&hadc1);
 80095d0:	4802      	ldr	r0, [pc, #8]	; (80095dc <Adc_DeInit+0x10>)
 80095d2:	f7fa fc67 	bl	8003ea4 <HAL_ADC_DeInit>
	return E_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	20000140 	.word	0x20000140

080095e0 <Adc_Init>:
/***********************************************************************************
* Function: Adc_Init										   					   *
* Description: Initialize the protocol.									       	   *
************************************************************************************/
StdReturnType Adc_Init()
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b08a      	sub	sp, #40	; 0x28
 80095e4:	af00      	add	r7, sp, #0
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80095e6:	f107 0310 	add.w	r3, r7, #16
 80095ea:	2200      	movs	r2, #0
 80095ec:	601a      	str	r2, [r3, #0]
 80095ee:	605a      	str	r2, [r3, #4]
 80095f0:	609a      	str	r2, [r3, #8]
 80095f2:	60da      	str	r2, [r3, #12]
 80095f4:	611a      	str	r2, [r3, #16]
 80095f6:	615a      	str	r2, [r3, #20]
	ADC_ChannelConfTypeDef sConfig = {0};
 80095f8:	463b      	mov	r3, r7
 80095fa:	2200      	movs	r2, #0
 80095fc:	601a      	str	r2, [r3, #0]
 80095fe:	605a      	str	r2, [r3, #4]
 8009600:	609a      	str	r2, [r3, #8]
 8009602:	60da      	str	r2, [r3, #12]
	hadc1.Instance = ADC1;
 8009604:	4b40      	ldr	r3, [pc, #256]	; (8009708 <Adc_Init+0x128>)
 8009606:	4a41      	ldr	r2, [pc, #260]	; (800970c <Adc_Init+0x12c>)
 8009608:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800960a:	4b3f      	ldr	r3, [pc, #252]	; (8009708 <Adc_Init+0x128>)
 800960c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8009610:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8009612:	4b3d      	ldr	r3, [pc, #244]	; (8009708 <Adc_Init+0x128>)
 8009614:	2200      	movs	r2, #0
 8009616:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8009618:	4b3b      	ldr	r3, [pc, #236]	; (8009708 <Adc_Init+0x128>)
 800961a:	2201      	movs	r2, #1
 800961c:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800961e:	4b3a      	ldr	r3, [pc, #232]	; (8009708 <Adc_Init+0x128>)
 8009620:	2201      	movs	r2, #1
 8009622:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009624:	4b38      	ldr	r3, [pc, #224]	; (8009708 <Adc_Init+0x128>)
 8009626:	2200      	movs	r2, #0
 8009628:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800962c:	4b36      	ldr	r3, [pc, #216]	; (8009708 <Adc_Init+0x128>)
 800962e:	2200      	movs	r2, #0
 8009630:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009632:	4b35      	ldr	r3, [pc, #212]	; (8009708 <Adc_Init+0x128>)
 8009634:	4a36      	ldr	r2, [pc, #216]	; (8009710 <Adc_Init+0x130>)
 8009636:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009638:	4b33      	ldr	r3, [pc, #204]	; (8009708 <Adc_Init+0x128>)
 800963a:	2200      	movs	r2, #0
 800963c:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 3;
 800963e:	4b32      	ldr	r3, [pc, #200]	; (8009708 <Adc_Init+0x128>)
 8009640:	2203      	movs	r2, #3
 8009642:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8009644:	4b30      	ldr	r3, [pc, #192]	; (8009708 <Adc_Init+0x128>)
 8009646:	2201      	movs	r2, #1
 8009648:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800964c:	4b2e      	ldr	r3, [pc, #184]	; (8009708 <Adc_Init+0x128>)
 800964e:	2201      	movs	r2, #1
 8009650:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009652:	482d      	ldr	r0, [pc, #180]	; (8009708 <Adc_Init+0x128>)
 8009654:	f7fa fbc0 	bl	8003dd8 <HAL_ADC_Init>
 8009658:	4603      	mov	r3, r0
 800965a:	2b00      	cmp	r3, #0
 800965c:	d002      	beq.n	8009664 <Adc_Init+0x84>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800965e:	482a      	ldr	r0, [pc, #168]	; (8009708 <Adc_Init+0x128>)
 8009660:	f7ff fefc 	bl	800945c <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8009664:	4b2b      	ldr	r3, [pc, #172]	; (8009714 <Adc_Init+0x134>)
 8009666:	613b      	str	r3, [r7, #16]
	AnalogWDGConfig.HighThreshold = 4095;
 8009668:	f640 73ff 	movw	r3, #4095	; 0xfff
 800966c:	617b      	str	r3, [r7, #20]
	AnalogWDGConfig.LowThreshold = 0;
 800966e:	2300      	movs	r3, #0
 8009670:	61bb      	str	r3, [r7, #24]
	AnalogWDGConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8009672:	4b29      	ldr	r3, [pc, #164]	; (8009718 <Adc_Init+0x138>)
 8009674:	61fb      	str	r3, [r7, #28]
	AnalogWDGConfig.ITMode = ENABLE;
 8009676:	2301      	movs	r3, #1
 8009678:	f887 3020 	strb.w	r3, [r7, #32]
	if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 800967c:	f107 0310 	add.w	r3, r7, #16
 8009680:	4619      	mov	r1, r3
 8009682:	4821      	ldr	r0, [pc, #132]	; (8009708 <Adc_Init+0x128>)
 8009684:	f7fa ff94 	bl	80045b0 <HAL_ADC_AnalogWDGConfig>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d002      	beq.n	8009694 <Adc_Init+0xb4>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800968e:	481e      	ldr	r0, [pc, #120]	; (8009708 <Adc_Init+0x128>)
 8009690:	f7ff fee4 	bl	800945c <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_13;
 8009694:	230d      	movs	r3, #13
 8009696:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8009698:	2301      	movs	r3, #1
 800969a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800969c:	2307      	movs	r3, #7
 800969e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80096a0:	463b      	mov	r3, r7
 80096a2:	4619      	mov	r1, r3
 80096a4:	4818      	ldr	r0, [pc, #96]	; (8009708 <Adc_Init+0x128>)
 80096a6:	f7fa fe51 	bl	800434c <HAL_ADC_ConfigChannel>
 80096aa:	4603      	mov	r3, r0
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d002      	beq.n	80096b6 <Adc_Init+0xd6>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 80096b0:	4815      	ldr	r0, [pc, #84]	; (8009708 <Adc_Init+0x128>)
 80096b2:	f7ff fed3 	bl	800945c <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_12;
 80096b6:	230c      	movs	r3, #12
 80096b8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 80096ba:	2302      	movs	r3, #2
 80096bc:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80096be:	463b      	mov	r3, r7
 80096c0:	4619      	mov	r1, r3
 80096c2:	4811      	ldr	r0, [pc, #68]	; (8009708 <Adc_Init+0x128>)
 80096c4:	f7fa fe42 	bl	800434c <HAL_ADC_ConfigChannel>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d002      	beq.n	80096d4 <Adc_Init+0xf4>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 80096ce:	480e      	ldr	r0, [pc, #56]	; (8009708 <Adc_Init+0x128>)
 80096d0:	f7ff fec4 	bl	800945c <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80096d4:	4b10      	ldr	r3, [pc, #64]	; (8009718 <Adc_Init+0x138>)
 80096d6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 80096d8:	2303      	movs	r3, #3
 80096da:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80096dc:	463b      	mov	r3, r7
 80096de:	4619      	mov	r1, r3
 80096e0:	4809      	ldr	r0, [pc, #36]	; (8009708 <Adc_Init+0x128>)
 80096e2:	f7fa fe33 	bl	800434c <HAL_ADC_ConfigChannel>
 80096e6:	4603      	mov	r3, r0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d002      	beq.n	80096f2 <Adc_Init+0x112>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 80096ec:	4806      	ldr	r0, [pc, #24]	; (8009708 <Adc_Init+0x128>)
 80096ee:	f7ff feb5 	bl	800945c <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	HAL_ADC_Start_DMA(&hadc1, Adc_ChannelOne_Buffer, ADC_BUFFER_LENGTH);
 80096f2:	2203      	movs	r2, #3
 80096f4:	4909      	ldr	r1, [pc, #36]	; (800971c <Adc_Init+0x13c>)
 80096f6:	4804      	ldr	r0, [pc, #16]	; (8009708 <Adc_Init+0x128>)
 80096f8:	f7fa fd24 	bl	8004144 <HAL_ADC_Start_DMA>
	return E_OK;
 80096fc:	2300      	movs	r3, #0
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3728      	adds	r7, #40	; 0x28
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	20000140 	.word	0x20000140
 800970c:	40012000 	.word	0x40012000
 8009710:	0f000001 	.word	0x0f000001
 8009714:	00800200 	.word	0x00800200
 8009718:	10000012 	.word	0x10000012
 800971c:	200006d8 	.word	0x200006d8

08009720 <Port_Init>:
/***********************************************************************************
* Function: Port_Init										       				   *
* Description: Initialize the peripheral.									 	   *
************************************************************************************/
StdReturnType Port_Init()
{
 8009720:	b580      	push	{r7, lr}
 8009722:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 8009724:	f7f9 fca6 	bl	8003074 <MX_GPIO_Init>
	return E_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	bd80      	pop	{r7, pc}
	...

08009730 <HAL_TIM_IC_CaptureCallback>:
/***********************************************************************************
* Function: HAL_TIM_IC_CaptureCallback										   	   *
* Description: Input capture callback to process information received.		 	   *
************************************************************************************/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
	/* If channel 3 requests. */
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	7f1b      	ldrb	r3, [r3, #28]
 800973c:	2b01      	cmp	r3, #1
 800973e:	f040 8081 	bne.w	8009844 <HAL_TIM_IC_CaptureCallback+0x114>
	{
		/* Check if the first input capture has been received. */
		if (Tim5_InputCaptureFlag_ChannelThree == STD_LOW)
 8009742:	4b87      	ldr	r3, [pc, #540]	; (8009960 <HAL_TIM_IC_CaptureCallback+0x230>)
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d11a      	bne.n	8009780 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			/* Store the input capture value. */
			Tim5_InputCompare_ValueOne_ChannelThree = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800974a:	2100      	movs	r1, #0
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f7fe f86b 	bl	8007828 <HAL_TIM_ReadCapturedValue>
 8009752:	4603      	mov	r3, r0
 8009754:	4a83      	ldr	r2, [pc, #524]	; (8009964 <HAL_TIM_IC_CaptureCallback+0x234>)
 8009756:	6013      	str	r3, [r2, #0]
			/* Set the flag to high. */
			Tim5_InputCaptureFlag_ChannelThree = STD_HIGH;
 8009758:	4b81      	ldr	r3, [pc, #516]	; (8009960 <HAL_TIM_IC_CaptureCallback+0x230>)
 800975a:	2201      	movs	r2, #1
 800975c:	701a      	strb	r2, [r3, #0]
			/* Change the polarity of the input channel. */
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	6a1a      	ldr	r2, [r3, #32]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f022 020a 	bic.w	r2, r2, #10
 800976c:	621a      	str	r2, [r3, #32]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	6a1a      	ldr	r2, [r3, #32]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f042 0202 	orr.w	r2, r2, #2
 800977c:	621a      	str	r2, [r3, #32]
 800977e:	e061      	b.n	8009844 <HAL_TIM_IC_CaptureCallback+0x114>
		}/* If the first input capture has been stored. */
		else if(Tim5_InputCaptureFlag_ChannelThree == STD_HIGH)
 8009780:	4b77      	ldr	r3, [pc, #476]	; (8009960 <HAL_TIM_IC_CaptureCallback+0x230>)
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	2b01      	cmp	r3, #1
 8009786:	d15d      	bne.n	8009844 <HAL_TIM_IC_CaptureCallback+0x114>
		{
			/* Store the second input capture. */
			Tim5_InputCompare_ValueTwo_ChannelThree = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8009788:	2100      	movs	r1, #0
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f7fe f84c 	bl	8007828 <HAL_TIM_ReadCapturedValue>
 8009790:	4603      	mov	r3, r0
 8009792:	4a75      	ldr	r2, [pc, #468]	; (8009968 <HAL_TIM_IC_CaptureCallback+0x238>)
 8009794:	6013      	str	r3, [r2, #0]
			/* Set the timer counter to 0. */
			__HAL_TIM_SET_COUNTER(htim, 0);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	2200      	movs	r2, #0
 800979c:	625a      	str	r2, [r3, #36]	; 0x24
			/* If the second input capture is greater than the first, then subtract the first one from the second one. */
			if (Tim5_InputCompare_ValueTwo_ChannelThree > Tim5_InputCompare_ValueOne_ChannelThree)
 800979e:	4b72      	ldr	r3, [pc, #456]	; (8009968 <HAL_TIM_IC_CaptureCallback+0x238>)
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	4b70      	ldr	r3, [pc, #448]	; (8009964 <HAL_TIM_IC_CaptureCallback+0x234>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d907      	bls.n	80097ba <HAL_TIM_IC_CaptureCallback+0x8a>
			{
				Tim5_Difference_ChannelThree = Tim5_InputCompare_ValueTwo_ChannelThree - Tim5_InputCompare_ValueOne_ChannelThree;
 80097aa:	4b6f      	ldr	r3, [pc, #444]	; (8009968 <HAL_TIM_IC_CaptureCallback+0x238>)
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	4b6d      	ldr	r3, [pc, #436]	; (8009964 <HAL_TIM_IC_CaptureCallback+0x234>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	1ad3      	subs	r3, r2, r3
 80097b4:	4a6d      	ldr	r2, [pc, #436]	; (800996c <HAL_TIM_IC_CaptureCallback+0x23c>)
 80097b6:	6013      	str	r3, [r2, #0]
 80097b8:	e00d      	b.n	80097d6 <HAL_TIM_IC_CaptureCallback+0xa6>
			}/* Else subtract the first value from maximum uint32 value and add the second value. */
			else if(Tim5_InputCompare_ValueOne_ChannelThree > Tim5_InputCompare_ValueTwo_ChannelThree)
 80097ba:	4b6a      	ldr	r3, [pc, #424]	; (8009964 <HAL_TIM_IC_CaptureCallback+0x234>)
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	4b6a      	ldr	r3, [pc, #424]	; (8009968 <HAL_TIM_IC_CaptureCallback+0x238>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d907      	bls.n	80097d6 <HAL_TIM_IC_CaptureCallback+0xa6>
			{
				Tim5_Difference_ChannelThree = (0xFFFFFFFF - Tim5_InputCompare_ValueOne_ChannelThree) + Tim5_InputCompare_ValueTwo_ChannelThree;
 80097c6:	4b68      	ldr	r3, [pc, #416]	; (8009968 <HAL_TIM_IC_CaptureCallback+0x238>)
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	4b66      	ldr	r3, [pc, #408]	; (8009964 <HAL_TIM_IC_CaptureCallback+0x234>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	1ad3      	subs	r3, r2, r3
 80097d0:	3b01      	subs	r3, #1
 80097d2:	4a66      	ldr	r2, [pc, #408]	; (800996c <HAL_TIM_IC_CaptureCallback+0x23c>)
 80097d4:	6013      	str	r3, [r2, #0]
			else
			{
				/* do nothing */
			}
			/* Calculate the distance the sound traveled between the first measurement and the second. */
			Tim5_CalculatedDistance_ChannelThree = Tim5_Difference_ChannelThree * 0.034 / 2;
 80097d6:	4b65      	ldr	r3, [pc, #404]	; (800996c <HAL_TIM_IC_CaptureCallback+0x23c>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4618      	mov	r0, r3
 80097dc:	f7f6 fe4a 	bl	8000474 <__aeabi_ui2d>
 80097e0:	a35d      	add	r3, pc, #372	; (adr r3, 8009958 <HAL_TIM_IC_CaptureCallback+0x228>)
 80097e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e6:	f7f6 febf 	bl	8000568 <__aeabi_dmul>
 80097ea:	4602      	mov	r2, r0
 80097ec:	460b      	mov	r3, r1
 80097ee:	4610      	mov	r0, r2
 80097f0:	4619      	mov	r1, r3
 80097f2:	f04f 0200 	mov.w	r2, #0
 80097f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80097fa:	f7f6 ffdf 	bl	80007bc <__aeabi_ddiv>
 80097fe:	4602      	mov	r2, r0
 8009800:	460b      	mov	r3, r1
 8009802:	4610      	mov	r0, r2
 8009804:	4619      	mov	r1, r3
 8009806:	f7f7 f8c1 	bl	800098c <__aeabi_d2uiz>
 800980a:	4603      	mov	r3, r0
 800980c:	b2da      	uxtb	r2, r3
 800980e:	4b58      	ldr	r3, [pc, #352]	; (8009970 <HAL_TIM_IC_CaptureCallback+0x240>)
 8009810:	701a      	strb	r2, [r3, #0]
			/* Set the flag to low. */
			Tim5_InputCaptureFlag_ChannelThree = STD_LOW;
 8009812:	4b53      	ldr	r3, [pc, #332]	; (8009960 <HAL_TIM_IC_CaptureCallback+0x230>)
 8009814:	2200      	movs	r2, #0
 8009816:	701a      	strb	r2, [r3, #0]
			/* Change the polarity of the input channel. */
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	6a1a      	ldr	r2, [r3, #32]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f022 020a 	bic.w	r2, r2, #10
 8009826:	621a      	str	r2, [r3, #32]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	6a12      	ldr	r2, [r2, #32]
 8009832:	621a      	str	r2, [r3, #32]
			/* Disable the interrupt for the timer 5 channel 3. */
			__HAL_TIM_DISABLE_IT(&htim5, TIM_IT_CC1);
 8009834:	4b4f      	ldr	r3, [pc, #316]	; (8009974 <HAL_TIM_IC_CaptureCallback+0x244>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	68da      	ldr	r2, [r3, #12]
 800983a:	4b4e      	ldr	r3, [pc, #312]	; (8009974 <HAL_TIM_IC_CaptureCallback+0x244>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f022 0202 	bic.w	r2, r2, #2
 8009842:	60da      	str	r2, [r3, #12]
		{
			/* do nothing */
		}
	}/* If channel 4 requests. */

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	7f1b      	ldrb	r3, [r3, #28]
 8009848:	2b02      	cmp	r3, #2
 800984a:	f040 8081 	bne.w	8009950 <HAL_TIM_IC_CaptureCallback+0x220>
	{
		/* Check if the first input capture has been received. */
		if (Tim5_InputCaptureFlag_ChannelFour == STD_LOW)
 800984e:	4b4a      	ldr	r3, [pc, #296]	; (8009978 <HAL_TIM_IC_CaptureCallback+0x248>)
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d11a      	bne.n	800988c <HAL_TIM_IC_CaptureCallback+0x15c>
		{
			/* Store the input capture value. */
			Tim5_InputCompare_ValueOne_ChannelFour = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8009856:	2104      	movs	r1, #4
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f7fd ffe5 	bl	8007828 <HAL_TIM_ReadCapturedValue>
 800985e:	4603      	mov	r3, r0
 8009860:	4a46      	ldr	r2, [pc, #280]	; (800997c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8009862:	6013      	str	r3, [r2, #0]
			/* Set the flag to high. */
			Tim5_InputCaptureFlag_ChannelFour = STD_HIGH;
 8009864:	4b44      	ldr	r3, [pc, #272]	; (8009978 <HAL_TIM_IC_CaptureCallback+0x248>)
 8009866:	2201      	movs	r2, #1
 8009868:	701a      	strb	r2, [r3, #0]
			/* Change the polarity of the input channel. */
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	6a1a      	ldr	r2, [r3, #32]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009878:	621a      	str	r2, [r3, #32]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	6a1a      	ldr	r2, [r3, #32]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f042 0220 	orr.w	r2, r2, #32
 8009888:	621a      	str	r2, [r3, #32]
	}
	else
	{
		/* do nothing */
	}
}
 800988a:	e061      	b.n	8009950 <HAL_TIM_IC_CaptureCallback+0x220>
		else if(Tim5_InputCaptureFlag_ChannelFour == STD_HIGH)
 800988c:	4b3a      	ldr	r3, [pc, #232]	; (8009978 <HAL_TIM_IC_CaptureCallback+0x248>)
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	2b01      	cmp	r3, #1
 8009892:	d15d      	bne.n	8009950 <HAL_TIM_IC_CaptureCallback+0x220>
			Tim5_InputCompare_ValueTwo_ChannelFour = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8009894:	2104      	movs	r1, #4
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f7fd ffc6 	bl	8007828 <HAL_TIM_ReadCapturedValue>
 800989c:	4603      	mov	r3, r0
 800989e:	4a38      	ldr	r2, [pc, #224]	; (8009980 <HAL_TIM_IC_CaptureCallback+0x250>)
 80098a0:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	2200      	movs	r2, #0
 80098a8:	625a      	str	r2, [r3, #36]	; 0x24
			if (Tim5_InputCompare_ValueTwo_ChannelFour > Tim5_InputCompare_ValueOne_ChannelFour)
 80098aa:	4b35      	ldr	r3, [pc, #212]	; (8009980 <HAL_TIM_IC_CaptureCallback+0x250>)
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	4b33      	ldr	r3, [pc, #204]	; (800997c <HAL_TIM_IC_CaptureCallback+0x24c>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d907      	bls.n	80098c6 <HAL_TIM_IC_CaptureCallback+0x196>
				Tim5_Difference_ChannelFour = Tim5_InputCompare_ValueTwo_ChannelFour - Tim5_InputCompare_ValueOne_ChannelFour;
 80098b6:	4b32      	ldr	r3, [pc, #200]	; (8009980 <HAL_TIM_IC_CaptureCallback+0x250>)
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	4b30      	ldr	r3, [pc, #192]	; (800997c <HAL_TIM_IC_CaptureCallback+0x24c>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	1ad3      	subs	r3, r2, r3
 80098c0:	4a30      	ldr	r2, [pc, #192]	; (8009984 <HAL_TIM_IC_CaptureCallback+0x254>)
 80098c2:	6013      	str	r3, [r2, #0]
 80098c4:	e00d      	b.n	80098e2 <HAL_TIM_IC_CaptureCallback+0x1b2>
			else if(Tim5_InputCompare_ValueOne_ChannelFour > Tim5_InputCompare_ValueTwo_ChannelFour)
 80098c6:	4b2d      	ldr	r3, [pc, #180]	; (800997c <HAL_TIM_IC_CaptureCallback+0x24c>)
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	4b2d      	ldr	r3, [pc, #180]	; (8009980 <HAL_TIM_IC_CaptureCallback+0x250>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d907      	bls.n	80098e2 <HAL_TIM_IC_CaptureCallback+0x1b2>
				Tim5_Difference_ChannelFour = (0xFFFFFFFF - Tim5_InputCompare_ValueOne_ChannelFour) + Tim5_InputCompare_ValueTwo_ChannelFour;
 80098d2:	4b2b      	ldr	r3, [pc, #172]	; (8009980 <HAL_TIM_IC_CaptureCallback+0x250>)
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	4b29      	ldr	r3, [pc, #164]	; (800997c <HAL_TIM_IC_CaptureCallback+0x24c>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	1ad3      	subs	r3, r2, r3
 80098dc:	3b01      	subs	r3, #1
 80098de:	4a29      	ldr	r2, [pc, #164]	; (8009984 <HAL_TIM_IC_CaptureCallback+0x254>)
 80098e0:	6013      	str	r3, [r2, #0]
			Tim5_CalculatedDistance_ChannelFour = Tim5_Difference_ChannelFour * 0.034 / 2;
 80098e2:	4b28      	ldr	r3, [pc, #160]	; (8009984 <HAL_TIM_IC_CaptureCallback+0x254>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7f6 fdc4 	bl	8000474 <__aeabi_ui2d>
 80098ec:	a31a      	add	r3, pc, #104	; (adr r3, 8009958 <HAL_TIM_IC_CaptureCallback+0x228>)
 80098ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f2:	f7f6 fe39 	bl	8000568 <__aeabi_dmul>
 80098f6:	4602      	mov	r2, r0
 80098f8:	460b      	mov	r3, r1
 80098fa:	4610      	mov	r0, r2
 80098fc:	4619      	mov	r1, r3
 80098fe:	f04f 0200 	mov.w	r2, #0
 8009902:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009906:	f7f6 ff59 	bl	80007bc <__aeabi_ddiv>
 800990a:	4602      	mov	r2, r0
 800990c:	460b      	mov	r3, r1
 800990e:	4610      	mov	r0, r2
 8009910:	4619      	mov	r1, r3
 8009912:	f7f7 f83b 	bl	800098c <__aeabi_d2uiz>
 8009916:	4603      	mov	r3, r0
 8009918:	b2da      	uxtb	r2, r3
 800991a:	4b1b      	ldr	r3, [pc, #108]	; (8009988 <HAL_TIM_IC_CaptureCallback+0x258>)
 800991c:	701a      	strb	r2, [r3, #0]
			Tim5_InputCaptureFlag_ChannelFour = 0;
 800991e:	4b16      	ldr	r3, [pc, #88]	; (8009978 <HAL_TIM_IC_CaptureCallback+0x248>)
 8009920:	2200      	movs	r2, #0
 8009922:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	6a1a      	ldr	r2, [r3, #32]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009932:	621a      	str	r2, [r3, #32]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	6a12      	ldr	r2, [r2, #32]
 800993e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim5, TIM_IT_CC2);
 8009940:	4b0c      	ldr	r3, [pc, #48]	; (8009974 <HAL_TIM_IC_CaptureCallback+0x244>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	68da      	ldr	r2, [r3, #12]
 8009946:	4b0b      	ldr	r3, [pc, #44]	; (8009974 <HAL_TIM_IC_CaptureCallback+0x244>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f022 0204 	bic.w	r2, r2, #4
 800994e:	60da      	str	r2, [r3, #12]
}
 8009950:	bf00      	nop
 8009952:	3708      	adds	r7, #8
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}
 8009958:	b020c49c 	.word	0xb020c49c
 800995c:	3fa16872 	.word	0x3fa16872
 8009960:	200006f4 	.word	0x200006f4
 8009964:	200006e8 	.word	0x200006e8
 8009968:	200006ec 	.word	0x200006ec
 800996c:	200006f0 	.word	0x200006f0
 8009970:	200006f5 	.word	0x200006f5
 8009974:	2000057c 	.word	0x2000057c
 8009978:	20000704 	.word	0x20000704
 800997c:	200006f8 	.word	0x200006f8
 8009980:	200006fc 	.word	0x200006fc
 8009984:	20000700 	.word	0x20000700
 8009988:	20000705 	.word	0x20000705

0800998c <Tim_Init>:
/***********************************************************************************
* Function: Tim_Init										   			           *
* Description: Peripheral initialization.									       *
************************************************************************************/
StdReturnType Tim_Init(uint8 TimerChannel)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	4603      	mov	r3, r0
 8009994:	71fb      	strb	r3, [r7, #7]
	/* Set the timer channel value into a local variable. */
	uint8 localValue = TimerChannel;
 8009996:	79fb      	ldrb	r3, [r7, #7]
 8009998:	73fb      	strb	r3, [r7, #15]
	switch(localValue)
 800999a:	7bfb      	ldrb	r3, [r7, #15]
 800999c:	3b02      	subs	r3, #2
 800999e:	2b03      	cmp	r3, #3
 80099a0:	f200 81f4 	bhi.w	8009d8c <Tim_Init+0x400>
 80099a4:	a201      	add	r2, pc, #4	; (adr r2, 80099ac <Tim_Init+0x20>)
 80099a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099aa:	bf00      	nop
 80099ac:	080099bd 	.word	0x080099bd
 80099b0:	08009aa9 	.word	0x08009aa9
 80099b4:	08009bcd 	.word	0x08009bcd
 80099b8:	08009ca3 	.word	0x08009ca3
	{
		/* Initialize the timer two. */
		case TIMER_TWO:
			/* Configure the timer parameters. */
			htim2.Instance = TIM2;
 80099bc:	4b7a      	ldr	r3, [pc, #488]	; (8009ba8 <Tim_Init+0x21c>)
 80099be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80099c2:	601a      	str	r2, [r3, #0]
			htim2.Init.Prescaler = 1000-1;
 80099c4:	4b78      	ldr	r3, [pc, #480]	; (8009ba8 <Tim_Init+0x21c>)
 80099c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80099ca:	605a      	str	r2, [r3, #4]
			htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80099cc:	4b76      	ldr	r3, [pc, #472]	; (8009ba8 <Tim_Init+0x21c>)
 80099ce:	2200      	movs	r2, #0
 80099d0:	609a      	str	r2, [r3, #8]
			htim2.Init.Period = 2000-1;
 80099d2:	4b75      	ldr	r3, [pc, #468]	; (8009ba8 <Tim_Init+0x21c>)
 80099d4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80099d8:	60da      	str	r2, [r3, #12]
			htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80099da:	4b73      	ldr	r3, [pc, #460]	; (8009ba8 <Tim_Init+0x21c>)
 80099dc:	2200      	movs	r2, #0
 80099de:	611a      	str	r2, [r3, #16]
			htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80099e0:	4b71      	ldr	r3, [pc, #452]	; (8009ba8 <Tim_Init+0x21c>)
 80099e2:	2200      	movs	r2, #0
 80099e4:	619a      	str	r2, [r3, #24]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80099e6:	4870      	ldr	r0, [pc, #448]	; (8009ba8 <Tim_Init+0x21c>)
 80099e8:	f7fc ff7c 	bl	80068e4 <HAL_TIM_Base_Init>
 80099ec:	4603      	mov	r3, r0
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d002      	beq.n	80099f8 <Tim_Init+0x6c>
			{
				HAL_TIM_ErrorCallback(&htim2);
 80099f2:	486d      	ldr	r0, [pc, #436]	; (8009ba8 <Tim_Init+0x21c>)
 80099f4:	f000 fa1c 	bl	8009e30 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Set the timer clock source. */
			sClockSourceConfig2.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80099f8:	4b6c      	ldr	r3, [pc, #432]	; (8009bac <Tim_Init+0x220>)
 80099fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80099fe:	601a      	str	r2, [r3, #0]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig2) != HAL_OK)
 8009a00:	496a      	ldr	r1, [pc, #424]	; (8009bac <Tim_Init+0x220>)
 8009a02:	4869      	ldr	r0, [pc, #420]	; (8009ba8 <Tim_Init+0x21c>)
 8009a04:	f7fd fe48 	bl	8007698 <HAL_TIM_ConfigClockSource>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d002      	beq.n	8009a14 <Tim_Init+0x88>
			{
				HAL_TIM_ErrorCallback(&htim2);
 8009a0e:	4866      	ldr	r0, [pc, #408]	; (8009ba8 <Tim_Init+0x21c>)
 8009a10:	f000 fa0e 	bl	8009e30 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8009a14:	4864      	ldr	r0, [pc, #400]	; (8009ba8 <Tim_Init+0x21c>)
 8009a16:	f7fd f823 	bl	8006a60 <HAL_TIM_PWM_Init>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d002      	beq.n	8009a26 <Tim_Init+0x9a>
			{
				HAL_TIM_ErrorCallback(&htim2);
 8009a20:	4861      	ldr	r0, [pc, #388]	; (8009ba8 <Tim_Init+0x21c>)
 8009a22:	f000 fa05 	bl	8009e30 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Set the master slave mode and output trigger. */
			sMasterConfig2.MasterOutputTrigger = TIM_TRGO_RESET;
 8009a26:	4b62      	ldr	r3, [pc, #392]	; (8009bb0 <Tim_Init+0x224>)
 8009a28:	2200      	movs	r2, #0
 8009a2a:	601a      	str	r2, [r3, #0]
			sMasterConfig2.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009a2c:	4b60      	ldr	r3, [pc, #384]	; (8009bb0 <Tim_Init+0x224>)
 8009a2e:	2200      	movs	r2, #0
 8009a30:	605a      	str	r2, [r3, #4]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig2) != HAL_OK)
 8009a32:	495f      	ldr	r1, [pc, #380]	; (8009bb0 <Tim_Init+0x224>)
 8009a34:	485c      	ldr	r0, [pc, #368]	; (8009ba8 <Tim_Init+0x21c>)
 8009a36:	f7fe fbd1 	bl	80081dc <HAL_TIMEx_MasterConfigSynchronization>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d002      	beq.n	8009a46 <Tim_Init+0xba>
			{
				HAL_TIM_ErrorCallback(&htim2);
 8009a40:	4859      	ldr	r0, [pc, #356]	; (8009ba8 <Tim_Init+0x21c>)
 8009a42:	f000 f9f5 	bl	8009e30 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Set the PWM parameters. */
			sConfigOC2.OCMode = TIM_OCMODE_PWM1;
 8009a46:	4b5b      	ldr	r3, [pc, #364]	; (8009bb4 <Tim_Init+0x228>)
 8009a48:	2260      	movs	r2, #96	; 0x60
 8009a4a:	601a      	str	r2, [r3, #0]
			sConfigOC2.Pulse = 0;
 8009a4c:	4b59      	ldr	r3, [pc, #356]	; (8009bb4 <Tim_Init+0x228>)
 8009a4e:	2200      	movs	r2, #0
 8009a50:	605a      	str	r2, [r3, #4]
			sConfigOC2.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009a52:	4b58      	ldr	r3, [pc, #352]	; (8009bb4 <Tim_Init+0x228>)
 8009a54:	2200      	movs	r2, #0
 8009a56:	609a      	str	r2, [r3, #8]
			sConfigOC2.OCFastMode = TIM_OCFAST_ENABLE;
 8009a58:	4b56      	ldr	r3, [pc, #344]	; (8009bb4 <Tim_Init+0x228>)
 8009a5a:	2204      	movs	r2, #4
 8009a5c:	611a      	str	r2, [r3, #16]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC2, TIM_CHANNEL_1) != HAL_OK)
 8009a5e:	2200      	movs	r2, #0
 8009a60:	4954      	ldr	r1, [pc, #336]	; (8009bb4 <Tim_Init+0x228>)
 8009a62:	4851      	ldr	r0, [pc, #324]	; (8009ba8 <Tim_Init+0x21c>)
 8009a64:	f7fd fd56 	bl	8007514 <HAL_TIM_PWM_ConfigChannel>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d002      	beq.n	8009a74 <Tim_Init+0xe8>
			{
				HAL_TIM_ErrorCallback(&htim2);
 8009a6e:	484e      	ldr	r0, [pc, #312]	; (8009ba8 <Tim_Init+0x21c>)
 8009a70:	f000 f9de 	bl	8009e30 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC2, TIM_CHANNEL_2) != HAL_OK)
 8009a74:	2204      	movs	r2, #4
 8009a76:	494f      	ldr	r1, [pc, #316]	; (8009bb4 <Tim_Init+0x228>)
 8009a78:	484b      	ldr	r0, [pc, #300]	; (8009ba8 <Tim_Init+0x21c>)
 8009a7a:	f7fd fd4b 	bl	8007514 <HAL_TIM_PWM_ConfigChannel>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d002      	beq.n	8009a8a <Tim_Init+0xfe>
			{
				HAL_TIM_ErrorCallback(&htim2);
 8009a84:	4848      	ldr	r0, [pc, #288]	; (8009ba8 <Tim_Init+0x21c>)
 8009a86:	f000 f9d3 	bl	8009e30 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC2, TIM_CHANNEL_3) != HAL_OK)
 8009a8a:	2208      	movs	r2, #8
 8009a8c:	4949      	ldr	r1, [pc, #292]	; (8009bb4 <Tim_Init+0x228>)
 8009a8e:	4846      	ldr	r0, [pc, #280]	; (8009ba8 <Tim_Init+0x21c>)
 8009a90:	f7fd fd40 	bl	8007514 <HAL_TIM_PWM_ConfigChannel>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d002      	beq.n	8009aa0 <Tim_Init+0x114>
			{
				HAL_TIM_ErrorCallback(&htim2);
 8009a9a:	4843      	ldr	r0, [pc, #268]	; (8009ba8 <Tim_Init+0x21c>)
 8009a9c:	f000 f9c8 	bl	8009e30 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the GPIO. */
			HAL_TIM_MspPostInit(&htim2);
 8009aa0:	4841      	ldr	r0, [pc, #260]	; (8009ba8 <Tim_Init+0x21c>)
 8009aa2:	f7f9 fe7f 	bl	80037a4 <HAL_TIM_MspPostInit>

			break;
 8009aa6:	e174      	b.n	8009d92 <Tim_Init+0x406>
		/* Initialize the timer three. */
		case TIMER_THREE:
			/* Configure the timer parameters. */
			htim3.Instance = TIM3;
 8009aa8:	4b43      	ldr	r3, [pc, #268]	; (8009bb8 <Tim_Init+0x22c>)
 8009aaa:	4a44      	ldr	r2, [pc, #272]	; (8009bbc <Tim_Init+0x230>)
 8009aac:	601a      	str	r2, [r3, #0]
			htim3.Init.Prescaler = 1000-1;
 8009aae:	4b42      	ldr	r3, [pc, #264]	; (8009bb8 <Tim_Init+0x22c>)
 8009ab0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009ab4:	605a      	str	r2, [r3, #4]
			htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009ab6:	4b40      	ldr	r3, [pc, #256]	; (8009bb8 <Tim_Init+0x22c>)
 8009ab8:	2200      	movs	r2, #0
 8009aba:	609a      	str	r2, [r3, #8]
			htim3.Init.Period = 2000-1;
 8009abc:	4b3e      	ldr	r3, [pc, #248]	; (8009bb8 <Tim_Init+0x22c>)
 8009abe:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8009ac2:	60da      	str	r2, [r3, #12]
			htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009ac4:	4b3c      	ldr	r3, [pc, #240]	; (8009bb8 <Tim_Init+0x22c>)
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	611a      	str	r2, [r3, #16]
			htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009aca:	4b3b      	ldr	r3, [pc, #236]	; (8009bb8 <Tim_Init+0x22c>)
 8009acc:	2200      	movs	r2, #0
 8009ace:	619a      	str	r2, [r3, #24]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8009ad0:	4839      	ldr	r0, [pc, #228]	; (8009bb8 <Tim_Init+0x22c>)
 8009ad2:	f7fc ff07 	bl	80068e4 <HAL_TIM_Base_Init>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d002      	beq.n	8009ae2 <Tim_Init+0x156>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 8009adc:	4836      	ldr	r0, [pc, #216]	; (8009bb8 <Tim_Init+0x22c>)
 8009ade:	f000 f9a7 	bl	8009e30 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Set the clock source. */
			sClockSourceConfig3.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009ae2:	4b37      	ldr	r3, [pc, #220]	; (8009bc0 <Tim_Init+0x234>)
 8009ae4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009ae8:	601a      	str	r2, [r3, #0]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig3) != HAL_OK)
 8009aea:	4935      	ldr	r1, [pc, #212]	; (8009bc0 <Tim_Init+0x234>)
 8009aec:	4832      	ldr	r0, [pc, #200]	; (8009bb8 <Tim_Init+0x22c>)
 8009aee:	f7fd fdd3 	bl	8007698 <HAL_TIM_ConfigClockSource>
 8009af2:	4603      	mov	r3, r0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d002      	beq.n	8009afe <Tim_Init+0x172>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 8009af8:	482f      	ldr	r0, [pc, #188]	; (8009bb8 <Tim_Init+0x22c>)
 8009afa:	f000 f999 	bl	8009e30 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8009afe:	482e      	ldr	r0, [pc, #184]	; (8009bb8 <Tim_Init+0x22c>)
 8009b00:	f7fc ffae 	bl	8006a60 <HAL_TIM_PWM_Init>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d002      	beq.n	8009b10 <Tim_Init+0x184>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 8009b0a:	482b      	ldr	r0, [pc, #172]	; (8009bb8 <Tim_Init+0x22c>)
 8009b0c:	f000 f990 	bl	8009e30 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Configure master slave mode. */
			sMasterConfig3.MasterOutputTrigger = TIM_TRGO_RESET;
 8009b10:	4b2c      	ldr	r3, [pc, #176]	; (8009bc4 <Tim_Init+0x238>)
 8009b12:	2200      	movs	r2, #0
 8009b14:	601a      	str	r2, [r3, #0]
			sMasterConfig3.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009b16:	4b2b      	ldr	r3, [pc, #172]	; (8009bc4 <Tim_Init+0x238>)
 8009b18:	2200      	movs	r2, #0
 8009b1a:	605a      	str	r2, [r3, #4]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig3) != HAL_OK)
 8009b1c:	4929      	ldr	r1, [pc, #164]	; (8009bc4 <Tim_Init+0x238>)
 8009b1e:	4826      	ldr	r0, [pc, #152]	; (8009bb8 <Tim_Init+0x22c>)
 8009b20:	f7fe fb5c 	bl	80081dc <HAL_TIMEx_MasterConfigSynchronization>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d002      	beq.n	8009b30 <Tim_Init+0x1a4>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 8009b2a:	4823      	ldr	r0, [pc, #140]	; (8009bb8 <Tim_Init+0x22c>)
 8009b2c:	f000 f980 	bl	8009e30 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Configure PWM parameters. */
			sConfigOC3.OCMode = TIM_OCMODE_PWM1;
 8009b30:	4b25      	ldr	r3, [pc, #148]	; (8009bc8 <Tim_Init+0x23c>)
 8009b32:	2260      	movs	r2, #96	; 0x60
 8009b34:	601a      	str	r2, [r3, #0]
			sConfigOC3.Pulse = 0;
 8009b36:	4b24      	ldr	r3, [pc, #144]	; (8009bc8 <Tim_Init+0x23c>)
 8009b38:	2200      	movs	r2, #0
 8009b3a:	605a      	str	r2, [r3, #4]
			sConfigOC3.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009b3c:	4b22      	ldr	r3, [pc, #136]	; (8009bc8 <Tim_Init+0x23c>)
 8009b3e:	2200      	movs	r2, #0
 8009b40:	609a      	str	r2, [r3, #8]
			sConfigOC3.OCFastMode = TIM_OCFAST_ENABLE;
 8009b42:	4b21      	ldr	r3, [pc, #132]	; (8009bc8 <Tim_Init+0x23c>)
 8009b44:	2204      	movs	r2, #4
 8009b46:	611a      	str	r2, [r3, #16]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_1) != HAL_OK)
 8009b48:	2200      	movs	r2, #0
 8009b4a:	491f      	ldr	r1, [pc, #124]	; (8009bc8 <Tim_Init+0x23c>)
 8009b4c:	481a      	ldr	r0, [pc, #104]	; (8009bb8 <Tim_Init+0x22c>)
 8009b4e:	f7fd fce1 	bl	8007514 <HAL_TIM_PWM_ConfigChannel>
 8009b52:	4603      	mov	r3, r0
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d002      	beq.n	8009b5e <Tim_Init+0x1d2>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 8009b58:	4817      	ldr	r0, [pc, #92]	; (8009bb8 <Tim_Init+0x22c>)
 8009b5a:	f000 f969 	bl	8009e30 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_2) != HAL_OK)
 8009b5e:	2204      	movs	r2, #4
 8009b60:	4919      	ldr	r1, [pc, #100]	; (8009bc8 <Tim_Init+0x23c>)
 8009b62:	4815      	ldr	r0, [pc, #84]	; (8009bb8 <Tim_Init+0x22c>)
 8009b64:	f7fd fcd6 	bl	8007514 <HAL_TIM_PWM_ConfigChannel>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d002      	beq.n	8009b74 <Tim_Init+0x1e8>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 8009b6e:	4812      	ldr	r0, [pc, #72]	; (8009bb8 <Tim_Init+0x22c>)
 8009b70:	f000 f95e 	bl	8009e30 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_3) != HAL_OK)
 8009b74:	2208      	movs	r2, #8
 8009b76:	4914      	ldr	r1, [pc, #80]	; (8009bc8 <Tim_Init+0x23c>)
 8009b78:	480f      	ldr	r0, [pc, #60]	; (8009bb8 <Tim_Init+0x22c>)
 8009b7a:	f7fd fccb 	bl	8007514 <HAL_TIM_PWM_ConfigChannel>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d002      	beq.n	8009b8a <Tim_Init+0x1fe>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 8009b84:	480c      	ldr	r0, [pc, #48]	; (8009bb8 <Tim_Init+0x22c>)
 8009b86:	f000 f953 	bl	8009e30 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_4) != HAL_OK)
 8009b8a:	220c      	movs	r2, #12
 8009b8c:	490e      	ldr	r1, [pc, #56]	; (8009bc8 <Tim_Init+0x23c>)
 8009b8e:	480a      	ldr	r0, [pc, #40]	; (8009bb8 <Tim_Init+0x22c>)
 8009b90:	f7fd fcc0 	bl	8007514 <HAL_TIM_PWM_ConfigChannel>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d002      	beq.n	8009ba0 <Tim_Init+0x214>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 8009b9a:	4807      	ldr	r0, [pc, #28]	; (8009bb8 <Tim_Init+0x22c>)
 8009b9c:	f000 f948 	bl	8009e30 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Configure timer GPIO. */
			HAL_TIM_MspPostInit(&htim3);
 8009ba0:	4805      	ldr	r0, [pc, #20]	; (8009bb8 <Tim_Init+0x22c>)
 8009ba2:	f7f9 fdff 	bl	80037a4 <HAL_TIM_MspPostInit>
			break;
 8009ba6:	e0f4      	b.n	8009d92 <Tim_Init+0x406>
 8009ba8:	20000360 	.word	0x20000360
 8009bac:	20000708 	.word	0x20000708
 8009bb0:	20000718 	.word	0x20000718
 8009bb4:	20000720 	.word	0x20000720
 8009bb8:	20000414 	.word	0x20000414
 8009bbc:	40000400 	.word	0x40000400
 8009bc0:	20000774 	.word	0x20000774
 8009bc4:	20000784 	.word	0x20000784
 8009bc8:	2000073c 	.word	0x2000073c
		/* Initialize the timer four. */
		case TIMER_FOUR:
			/* Configure timer parameters. */
			htim4.Instance = TIM4;
 8009bcc:	4b73      	ldr	r3, [pc, #460]	; (8009d9c <Tim_Init+0x410>)
 8009bce:	4a74      	ldr	r2, [pc, #464]	; (8009da0 <Tim_Init+0x414>)
 8009bd0:	601a      	str	r2, [r3, #0]
			htim4.Init.Prescaler = 10000-1;
 8009bd2:	4b72      	ldr	r3, [pc, #456]	; (8009d9c <Tim_Init+0x410>)
 8009bd4:	f242 720f 	movw	r2, #9999	; 0x270f
 8009bd8:	605a      	str	r2, [r3, #4]
			htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009bda:	4b70      	ldr	r3, [pc, #448]	; (8009d9c <Tim_Init+0x410>)
 8009bdc:	2200      	movs	r2, #0
 8009bde:	609a      	str	r2, [r3, #8]
			htim4.Init.Period = 1000-1;
 8009be0:	4b6e      	ldr	r3, [pc, #440]	; (8009d9c <Tim_Init+0x410>)
 8009be2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009be6:	60da      	str	r2, [r3, #12]
			htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009be8:	4b6c      	ldr	r3, [pc, #432]	; (8009d9c <Tim_Init+0x410>)
 8009bea:	2200      	movs	r2, #0
 8009bec:	611a      	str	r2, [r3, #16]
			htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009bee:	4b6b      	ldr	r3, [pc, #428]	; (8009d9c <Tim_Init+0x410>)
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	619a      	str	r2, [r3, #24]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8009bf4:	4869      	ldr	r0, [pc, #420]	; (8009d9c <Tim_Init+0x410>)
 8009bf6:	f7fc fe75 	bl	80068e4 <HAL_TIM_Base_Init>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d002      	beq.n	8009c06 <Tim_Init+0x27a>
			{
				HAL_TIM_ErrorCallback(&htim4);
 8009c00:	4866      	ldr	r0, [pc, #408]	; (8009d9c <Tim_Init+0x410>)
 8009c02:	f000 f915 	bl	8009e30 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the clock source. */
			sClockSourceConfig4.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009c06:	4b67      	ldr	r3, [pc, #412]	; (8009da4 <Tim_Init+0x418>)
 8009c08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009c0c:	601a      	str	r2, [r3, #0]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig4) != HAL_OK)
 8009c0e:	4965      	ldr	r1, [pc, #404]	; (8009da4 <Tim_Init+0x418>)
 8009c10:	4862      	ldr	r0, [pc, #392]	; (8009d9c <Tim_Init+0x410>)
 8009c12:	f7fd fd41 	bl	8007698 <HAL_TIM_ConfigClockSource>
 8009c16:	4603      	mov	r3, r0
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d002      	beq.n	8009c22 <Tim_Init+0x296>
			{
				HAL_TIM_ErrorCallback(&htim4);
 8009c1c:	485f      	ldr	r0, [pc, #380]	; (8009d9c <Tim_Init+0x410>)
 8009c1e:	f000 f907 	bl	8009e30 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8009c22:	485e      	ldr	r0, [pc, #376]	; (8009d9c <Tim_Init+0x410>)
 8009c24:	f7fc ff1c 	bl	8006a60 <HAL_TIM_PWM_Init>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d002      	beq.n	8009c34 <Tim_Init+0x2a8>
			{
				HAL_TIM_ErrorCallback(&htim4);
 8009c2e:	485b      	ldr	r0, [pc, #364]	; (8009d9c <Tim_Init+0x410>)
 8009c30:	f000 f8fe 	bl	8009e30 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the master slave mode. */
			sMasterConfig4.MasterOutputTrigger = TIM_TRGO_RESET;
 8009c34:	4b5c      	ldr	r3, [pc, #368]	; (8009da8 <Tim_Init+0x41c>)
 8009c36:	2200      	movs	r2, #0
 8009c38:	601a      	str	r2, [r3, #0]
			sMasterConfig4.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009c3a:	4b5b      	ldr	r3, [pc, #364]	; (8009da8 <Tim_Init+0x41c>)
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	605a      	str	r2, [r3, #4]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig4) != HAL_OK)
 8009c40:	4959      	ldr	r1, [pc, #356]	; (8009da8 <Tim_Init+0x41c>)
 8009c42:	4856      	ldr	r0, [pc, #344]	; (8009d9c <Tim_Init+0x410>)
 8009c44:	f7fe faca 	bl	80081dc <HAL_TIMEx_MasterConfigSynchronization>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d002      	beq.n	8009c54 <Tim_Init+0x2c8>
			{
				HAL_TIM_ErrorCallback(&htim4);
 8009c4e:	4853      	ldr	r0, [pc, #332]	; (8009d9c <Tim_Init+0x410>)
 8009c50:	f000 f8ee 	bl	8009e30 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the PWM parameters. */
			sConfigOC4.OCMode = TIM_OCMODE_PWM1;
 8009c54:	4b55      	ldr	r3, [pc, #340]	; (8009dac <Tim_Init+0x420>)
 8009c56:	2260      	movs	r2, #96	; 0x60
 8009c58:	601a      	str	r2, [r3, #0]
			sConfigOC4.Pulse = 999;
 8009c5a:	4b54      	ldr	r3, [pc, #336]	; (8009dac <Tim_Init+0x420>)
 8009c5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009c60:	605a      	str	r2, [r3, #4]
			sConfigOC4.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009c62:	4b52      	ldr	r3, [pc, #328]	; (8009dac <Tim_Init+0x420>)
 8009c64:	2200      	movs	r2, #0
 8009c66:	609a      	str	r2, [r3, #8]
			sConfigOC4.OCFastMode = TIM_OCFAST_DISABLE;
 8009c68:	4b50      	ldr	r3, [pc, #320]	; (8009dac <Tim_Init+0x420>)
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	611a      	str	r2, [r3, #16]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC4, TIM_CHANNEL_3) != HAL_OK)
 8009c6e:	2208      	movs	r2, #8
 8009c70:	494e      	ldr	r1, [pc, #312]	; (8009dac <Tim_Init+0x420>)
 8009c72:	484a      	ldr	r0, [pc, #296]	; (8009d9c <Tim_Init+0x410>)
 8009c74:	f7fd fc4e 	bl	8007514 <HAL_TIM_PWM_ConfigChannel>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d002      	beq.n	8009c84 <Tim_Init+0x2f8>
			{
				HAL_TIM_ErrorCallback(&htim4);
 8009c7e:	4847      	ldr	r0, [pc, #284]	; (8009d9c <Tim_Init+0x410>)
 8009c80:	f000 f8d6 	bl	8009e30 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC4, TIM_CHANNEL_4) != HAL_OK)
 8009c84:	220c      	movs	r2, #12
 8009c86:	4949      	ldr	r1, [pc, #292]	; (8009dac <Tim_Init+0x420>)
 8009c88:	4844      	ldr	r0, [pc, #272]	; (8009d9c <Tim_Init+0x410>)
 8009c8a:	f7fd fc43 	bl	8007514 <HAL_TIM_PWM_ConfigChannel>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d002      	beq.n	8009c9a <Tim_Init+0x30e>
			{
				HAL_TIM_ErrorCallback(&htim4);
 8009c94:	4841      	ldr	r0, [pc, #260]	; (8009d9c <Tim_Init+0x410>)
 8009c96:	f000 f8cb 	bl	8009e30 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the timer GPIO. */
			HAL_TIM_MspPostInit(&htim4);
 8009c9a:	4840      	ldr	r0, [pc, #256]	; (8009d9c <Tim_Init+0x410>)
 8009c9c:	f7f9 fd82 	bl	80037a4 <HAL_TIM_MspPostInit>
			break;
 8009ca0:	e077      	b.n	8009d92 <Tim_Init+0x406>
		/* Initialize the timer five. */
		case TIMER_FIVE:
			htim5.Instance = TIM5;
 8009ca2:	4b43      	ldr	r3, [pc, #268]	; (8009db0 <Tim_Init+0x424>)
 8009ca4:	4a43      	ldr	r2, [pc, #268]	; (8009db4 <Tim_Init+0x428>)
 8009ca6:	601a      	str	r2, [r3, #0]
			htim5.Init.Prescaler = 100-1;
 8009ca8:	4b41      	ldr	r3, [pc, #260]	; (8009db0 <Tim_Init+0x424>)
 8009caa:	2263      	movs	r2, #99	; 0x63
 8009cac:	605a      	str	r2, [r3, #4]
			htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009cae:	4b40      	ldr	r3, [pc, #256]	; (8009db0 <Tim_Init+0x424>)
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	609a      	str	r2, [r3, #8]
			htim5.Init.Period = 0xffffffff;
 8009cb4:	4b3e      	ldr	r3, [pc, #248]	; (8009db0 <Tim_Init+0x424>)
 8009cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8009cba:	60da      	str	r2, [r3, #12]
			htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009cbc:	4b3c      	ldr	r3, [pc, #240]	; (8009db0 <Tim_Init+0x424>)
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	611a      	str	r2, [r3, #16]
			htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009cc2:	4b3b      	ldr	r3, [pc, #236]	; (8009db0 <Tim_Init+0x424>)
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	619a      	str	r2, [r3, #24]
			if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8009cc8:	4839      	ldr	r0, [pc, #228]	; (8009db0 <Tim_Init+0x424>)
 8009cca:	f7fc fe0b 	bl	80068e4 <HAL_TIM_Base_Init>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d002      	beq.n	8009cda <Tim_Init+0x34e>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8009cd4:	4836      	ldr	r0, [pc, #216]	; (8009db0 <Tim_Init+0x424>)
 8009cd6:	f000 f8ab 	bl	8009e30 <HAL_TIM_ErrorCallback>
			}
			else
			{
				/* do nothing */
			}
			sClockSourceConfig5.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009cda:	4b37      	ldr	r3, [pc, #220]	; (8009db8 <Tim_Init+0x42c>)
 8009cdc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009ce0:	601a      	str	r2, [r3, #0]
			if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig5) != HAL_OK)
 8009ce2:	4935      	ldr	r1, [pc, #212]	; (8009db8 <Tim_Init+0x42c>)
 8009ce4:	4832      	ldr	r0, [pc, #200]	; (8009db0 <Tim_Init+0x424>)
 8009ce6:	f7fd fcd7 	bl	8007698 <HAL_TIM_ConfigClockSource>
 8009cea:	4603      	mov	r3, r0
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d002      	beq.n	8009cf6 <Tim_Init+0x36a>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8009cf0:	482f      	ldr	r0, [pc, #188]	; (8009db0 <Tim_Init+0x424>)
 8009cf2:	f000 f89d 	bl	8009e30 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}

			if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8009cf6:	482e      	ldr	r0, [pc, #184]	; (8009db0 <Tim_Init+0x424>)
 8009cf8:	f7fd f8c8 	bl	8006e8c <HAL_TIM_IC_Init>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d002      	beq.n	8009d08 <Tim_Init+0x37c>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8009d02:	482b      	ldr	r0, [pc, #172]	; (8009db0 <Tim_Init+0x424>)
 8009d04:	f000 f894 	bl	8009e30 <HAL_TIM_ErrorCallback>
			}
			else
			{
				/* do nothing */
			}
			sMasterConfig5.MasterOutputTrigger = TIM_TRGO_RESET;
 8009d08:	4b2c      	ldr	r3, [pc, #176]	; (8009dbc <Tim_Init+0x430>)
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	601a      	str	r2, [r3, #0]
			sMasterConfig5.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009d0e:	4b2b      	ldr	r3, [pc, #172]	; (8009dbc <Tim_Init+0x430>)
 8009d10:	2200      	movs	r2, #0
 8009d12:	605a      	str	r2, [r3, #4]
			if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig5) != HAL_OK)
 8009d14:	4929      	ldr	r1, [pc, #164]	; (8009dbc <Tim_Init+0x430>)
 8009d16:	4826      	ldr	r0, [pc, #152]	; (8009db0 <Tim_Init+0x424>)
 8009d18:	f7fe fa60 	bl	80081dc <HAL_TIMEx_MasterConfigSynchronization>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d002      	beq.n	8009d28 <Tim_Init+0x39c>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8009d22:	4823      	ldr	r0, [pc, #140]	; (8009db0 <Tim_Init+0x424>)
 8009d24:	f000 f884 	bl	8009e30 <HAL_TIM_ErrorCallback>
			}
			else
			{
				/* do nothing */
			}
			sConfigIC5.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8009d28:	4b25      	ldr	r3, [pc, #148]	; (8009dc0 <Tim_Init+0x434>)
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	601a      	str	r2, [r3, #0]
			sConfigIC5.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8009d2e:	4b24      	ldr	r3, [pc, #144]	; (8009dc0 <Tim_Init+0x434>)
 8009d30:	2201      	movs	r2, #1
 8009d32:	605a      	str	r2, [r3, #4]
			sConfigIC5.ICPrescaler = TIM_ICPSC_DIV1;
 8009d34:	4b22      	ldr	r3, [pc, #136]	; (8009dc0 <Tim_Init+0x434>)
 8009d36:	2200      	movs	r2, #0
 8009d38:	609a      	str	r2, [r3, #8]
			sConfigIC5.ICFilter = 0;
 8009d3a:	4b21      	ldr	r3, [pc, #132]	; (8009dc0 <Tim_Init+0x434>)
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	60da      	str	r2, [r3, #12]
			if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC5, TIM_CHANNEL_1) != HAL_OK)
 8009d40:	2200      	movs	r2, #0
 8009d42:	491f      	ldr	r1, [pc, #124]	; (8009dc0 <Tim_Init+0x434>)
 8009d44:	481a      	ldr	r0, [pc, #104]	; (8009db0 <Tim_Init+0x424>)
 8009d46:	f7fd fb49 	bl	80073dc <HAL_TIM_IC_ConfigChannel>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d002      	beq.n	8009d56 <Tim_Init+0x3ca>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8009d50:	4817      	ldr	r0, [pc, #92]	; (8009db0 <Tim_Init+0x424>)
 8009d52:	f000 f86d 	bl	8009e30 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}

			if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC5, TIM_CHANNEL_2) != HAL_OK)
 8009d56:	2204      	movs	r2, #4
 8009d58:	4919      	ldr	r1, [pc, #100]	; (8009dc0 <Tim_Init+0x434>)
 8009d5a:	4815      	ldr	r0, [pc, #84]	; (8009db0 <Tim_Init+0x424>)
 8009d5c:	f7fd fb3e 	bl	80073dc <HAL_TIM_IC_ConfigChannel>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d002      	beq.n	8009d6c <Tim_Init+0x3e0>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8009d66:	4812      	ldr	r0, [pc, #72]	; (8009db0 <Tim_Init+0x424>)
 8009d68:	f000 f862 	bl	8009e30 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}

			if(TimH_MainFunctionFirstCall == STD_LOW)
 8009d6c:	4b15      	ldr	r3, [pc, #84]	; (8009dc4 <Tim_Init+0x438>)
 8009d6e:	781b      	ldrb	r3, [r3, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d10d      	bne.n	8009d90 <Tim_Init+0x404>
			{
				HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8009d74:	2100      	movs	r1, #0
 8009d76:	480e      	ldr	r0, [pc, #56]	; (8009db0 <Tim_Init+0x424>)
 8009d78:	f7fd f8ee 	bl	8006f58 <HAL_TIM_IC_Start_IT>
				HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);
 8009d7c:	2104      	movs	r1, #4
 8009d7e:	480c      	ldr	r0, [pc, #48]	; (8009db0 <Tim_Init+0x424>)
 8009d80:	f7fd f8ea 	bl	8006f58 <HAL_TIM_IC_Start_IT>
				TimH_MainFunctionFirstCall = STD_HIGH;
 8009d84:	4b0f      	ldr	r3, [pc, #60]	; (8009dc4 <Tim_Init+0x438>)
 8009d86:	2201      	movs	r2, #1
 8009d88:	701a      	strb	r2, [r3, #0]
			else
			{
				/* do nothing */
			}

			break;
 8009d8a:	e001      	b.n	8009d90 <Tim_Init+0x404>
		default:
			break;
 8009d8c:	bf00      	nop
 8009d8e:	e000      	b.n	8009d92 <Tim_Init+0x406>
			break;
 8009d90:	bf00      	nop
	}
	return E_OK;
 8009d92:	2300      	movs	r3, #0
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3710      	adds	r7, #16
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	200004c8 	.word	0x200004c8
 8009da0:	40000800 	.word	0x40000800
 8009da4:	2000078c 	.word	0x2000078c
 8009da8:	2000079c 	.word	0x2000079c
 8009dac:	20000758 	.word	0x20000758
 8009db0:	2000057c 	.word	0x2000057c
 8009db4:	40000c00 	.word	0x40000c00
 8009db8:	200007a4 	.word	0x200007a4
 8009dbc:	200007b4 	.word	0x200007b4
 8009dc0:	200007bc 	.word	0x200007bc
 8009dc4:	20000706 	.word	0x20000706

08009dc8 <Tim_DeInit>:
/***********************************************************************************
* Function: Tim_DeInit										   			           *
* Description: Peripheral de-initialization.									   *
************************************************************************************/
StdReturnType Tim_DeInit(uint8 TimerChannel)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	4603      	mov	r3, r0
 8009dd0:	71fb      	strb	r3, [r7, #7]
	/* Store the timer channel value into a local variable. */
	uint8 localVariable = TimerChannel;
 8009dd2:	79fb      	ldrb	r3, [r7, #7]
 8009dd4:	73fb      	strb	r3, [r7, #15]
	/* Process the request for timer de-init. */
	switch(localVariable)
 8009dd6:	7bfb      	ldrb	r3, [r7, #15]
 8009dd8:	3b02      	subs	r3, #2
 8009dda:	2b03      	cmp	r3, #3
 8009ddc:	d81a      	bhi.n	8009e14 <Tim_DeInit+0x4c>
 8009dde:	a201      	add	r2, pc, #4	; (adr r2, 8009de4 <Tim_DeInit+0x1c>)
 8009de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de4:	08009df5 	.word	0x08009df5
 8009de8:	08009dfd 	.word	0x08009dfd
 8009dec:	08009e05 	.word	0x08009e05
 8009df0:	08009e0d 	.word	0x08009e0d
	{
		case TIMER_TWO:
			HAL_TIM_Base_MspDeInit(&htim2);
 8009df4:	480a      	ldr	r0, [pc, #40]	; (8009e20 <Tim_DeInit+0x58>)
 8009df6:	f7f9 fd7f 	bl	80038f8 <HAL_TIM_Base_MspDeInit>
			break;
 8009dfa:	e00c      	b.n	8009e16 <Tim_DeInit+0x4e>
		case TIMER_THREE:
			HAL_TIM_Base_MspDeInit(&htim3);
 8009dfc:	4809      	ldr	r0, [pc, #36]	; (8009e24 <Tim_DeInit+0x5c>)
 8009dfe:	f7f9 fd7b 	bl	80038f8 <HAL_TIM_Base_MspDeInit>
			break;
 8009e02:	e008      	b.n	8009e16 <Tim_DeInit+0x4e>
		case TIMER_FOUR:
			HAL_TIM_Base_MspDeInit(&htim4);
 8009e04:	4808      	ldr	r0, [pc, #32]	; (8009e28 <Tim_DeInit+0x60>)
 8009e06:	f7f9 fd77 	bl	80038f8 <HAL_TIM_Base_MspDeInit>
			break;
 8009e0a:	e004      	b.n	8009e16 <Tim_DeInit+0x4e>
		case TIMER_FIVE:
			HAL_TIM_Base_MspDeInit(&htim5);
 8009e0c:	4807      	ldr	r0, [pc, #28]	; (8009e2c <Tim_DeInit+0x64>)
 8009e0e:	f7f9 fd73 	bl	80038f8 <HAL_TIM_Base_MspDeInit>
			break;
 8009e12:	e000      	b.n	8009e16 <Tim_DeInit+0x4e>
		default:
			break;
 8009e14:	bf00      	nop
	}
	return E_OK;
 8009e16:	2300      	movs	r3, #0
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	20000360 	.word	0x20000360
 8009e24:	20000414 	.word	0x20000414
 8009e28:	200004c8 	.word	0x200004c8
 8009e2c:	2000057c 	.word	0x2000057c

08009e30 <HAL_TIM_ErrorCallback>:
/***********************************************************************************
* Function: HAL_TIM_ErrorCallback										   		   *
* Description: Error callback called when timer fault occurs.					   *
************************************************************************************/
VOID HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b082      	sub	sp, #8
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
	/* Perform re-initialization of the peripheral in case of error. */
	if(htim->Instance == TIM2)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e40:	d10c      	bne.n	8009e5c <HAL_TIM_ErrorCallback+0x2c>
	{
		SystemManager_Fault[TIMER2_ERROR]++;
 8009e42:	4b23      	ldr	r3, [pc, #140]	; (8009ed0 <HAL_TIM_ErrorCallback+0xa0>)
 8009e44:	7d9b      	ldrb	r3, [r3, #22]
 8009e46:	3301      	adds	r3, #1
 8009e48:	b2da      	uxtb	r2, r3
 8009e4a:	4b21      	ldr	r3, [pc, #132]	; (8009ed0 <HAL_TIM_ErrorCallback+0xa0>)
 8009e4c:	759a      	strb	r2, [r3, #22]
		Tim_DeInit(TIMER_TWO);
 8009e4e:	2002      	movs	r0, #2
 8009e50:	f7ff ffba 	bl	8009dc8 <Tim_DeInit>
		Tim_Init(TIMER_TWO);
 8009e54:	2002      	movs	r0, #2
 8009e56:	f7ff fd99 	bl	800998c <Tim_Init>
	}
	else
	{
		/* do nothing */
	}
}
 8009e5a:	e034      	b.n	8009ec6 <HAL_TIM_ErrorCallback+0x96>
	else if(htim->Instance == TIM3)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4a1c      	ldr	r2, [pc, #112]	; (8009ed4 <HAL_TIM_ErrorCallback+0xa4>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d10c      	bne.n	8009e80 <HAL_TIM_ErrorCallback+0x50>
		SystemManager_Fault[TIMER3_ERROR]++;
 8009e66:	4b1a      	ldr	r3, [pc, #104]	; (8009ed0 <HAL_TIM_ErrorCallback+0xa0>)
 8009e68:	7ddb      	ldrb	r3, [r3, #23]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	b2da      	uxtb	r2, r3
 8009e6e:	4b18      	ldr	r3, [pc, #96]	; (8009ed0 <HAL_TIM_ErrorCallback+0xa0>)
 8009e70:	75da      	strb	r2, [r3, #23]
		Tim_DeInit(TIMER_THREE);
 8009e72:	2003      	movs	r0, #3
 8009e74:	f7ff ffa8 	bl	8009dc8 <Tim_DeInit>
		Tim_Init(TIMER_THREE);
 8009e78:	2003      	movs	r0, #3
 8009e7a:	f7ff fd87 	bl	800998c <Tim_Init>
}
 8009e7e:	e022      	b.n	8009ec6 <HAL_TIM_ErrorCallback+0x96>
	else if(htim->Instance == TIM4)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a14      	ldr	r2, [pc, #80]	; (8009ed8 <HAL_TIM_ErrorCallback+0xa8>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d10c      	bne.n	8009ea4 <HAL_TIM_ErrorCallback+0x74>
		SystemManager_Fault[TIMER4_ERROR]++;
 8009e8a:	4b11      	ldr	r3, [pc, #68]	; (8009ed0 <HAL_TIM_ErrorCallback+0xa0>)
 8009e8c:	7e1b      	ldrb	r3, [r3, #24]
 8009e8e:	3301      	adds	r3, #1
 8009e90:	b2da      	uxtb	r2, r3
 8009e92:	4b0f      	ldr	r3, [pc, #60]	; (8009ed0 <HAL_TIM_ErrorCallback+0xa0>)
 8009e94:	761a      	strb	r2, [r3, #24]
		Tim_DeInit(TIMER_FOUR);
 8009e96:	2004      	movs	r0, #4
 8009e98:	f7ff ff96 	bl	8009dc8 <Tim_DeInit>
		Tim_Init(TIMER_FOUR);
 8009e9c:	2004      	movs	r0, #4
 8009e9e:	f7ff fd75 	bl	800998c <Tim_Init>
}
 8009ea2:	e010      	b.n	8009ec6 <HAL_TIM_ErrorCallback+0x96>
	else if(htim->Instance == TIM5)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a0c      	ldr	r2, [pc, #48]	; (8009edc <HAL_TIM_ErrorCallback+0xac>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d10b      	bne.n	8009ec6 <HAL_TIM_ErrorCallback+0x96>
		SystemManager_Fault[TIMER5_ERROR]++;
 8009eae:	4b08      	ldr	r3, [pc, #32]	; (8009ed0 <HAL_TIM_ErrorCallback+0xa0>)
 8009eb0:	7e5b      	ldrb	r3, [r3, #25]
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	b2da      	uxtb	r2, r3
 8009eb6:	4b06      	ldr	r3, [pc, #24]	; (8009ed0 <HAL_TIM_ErrorCallback+0xa0>)
 8009eb8:	765a      	strb	r2, [r3, #25]
		Tim_DeInit(TIMER_FIVE);
 8009eba:	2005      	movs	r0, #5
 8009ebc:	f7ff ff84 	bl	8009dc8 <Tim_DeInit>
		Tim_Init(TIMER_FIVE);
 8009ec0:	2005      	movs	r0, #5
 8009ec2:	f7ff fd63 	bl	800998c <Tim_Init>
}
 8009ec6:	bf00      	nop
 8009ec8:	3708      	adds	r7, #8
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	2000a754 	.word	0x2000a754
 8009ed4:	40000400 	.word	0x40000400
 8009ed8:	40000800 	.word	0x40000800
 8009edc:	40000c00 	.word	0x40000c00

08009ee0 <Tim_MainFunction>:
/***********************************************************************************
* Function: Tim_MainFunction										   			   *
* Description: Peripheral main function.									       *
************************************************************************************/
VOID Tim_MainFunction()
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b084      	sub	sp, #16
 8009ee4:	af00      	add	r7, sp, #0
	/* Check each timer for error status into local variables. */
	uint32 localStateTimerTwo = HAL_TIM_Base_GetState(&htim2);
 8009ee6:	4888      	ldr	r0, [pc, #544]	; (800a108 <Tim_MainFunction+0x228>)
 8009ee8:	f7fd fd28 	bl	800793c <HAL_TIM_Base_GetState>
 8009eec:	4603      	mov	r3, r0
 8009eee:	60fb      	str	r3, [r7, #12]
	uint32 localStateTimerThree = HAL_TIM_Base_GetState(&htim3);
 8009ef0:	4886      	ldr	r0, [pc, #536]	; (800a10c <Tim_MainFunction+0x22c>)
 8009ef2:	f7fd fd23 	bl	800793c <HAL_TIM_Base_GetState>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	60bb      	str	r3, [r7, #8]
	uint32 localStateTimerFour = HAL_TIM_Base_GetState(&htim4);
 8009efa:	4885      	ldr	r0, [pc, #532]	; (800a110 <Tim_MainFunction+0x230>)
 8009efc:	f7fd fd1e 	bl	800793c <HAL_TIM_Base_GetState>
 8009f00:	4603      	mov	r3, r0
 8009f02:	607b      	str	r3, [r7, #4]
	uint32 localStateTimerFive = HAL_TIM_Base_GetState(&htim5);
 8009f04:	4883      	ldr	r0, [pc, #524]	; (800a114 <Tim_MainFunction+0x234>)
 8009f06:	f7fd fd19 	bl	800793c <HAL_TIM_Base_GetState>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	603b      	str	r3, [r7, #0]
	/* Process timers state. */
	switch(localStateTimerFive)
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	2b04      	cmp	r3, #4
 8009f12:	d857      	bhi.n	8009fc4 <Tim_MainFunction+0xe4>
 8009f14:	a201      	add	r2, pc, #4	; (adr r2, 8009f1c <Tim_MainFunction+0x3c>)
 8009f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f1a:	bf00      	nop
 8009f1c:	08009f31 	.word	0x08009f31
 8009f20:	08009f41 	.word	0x08009f41
 8009f24:	08009f9b 	.word	0x08009f9b
 8009f28:	08009fa5 	.word	0x08009fa5
 8009f2c:	08009fb5 	.word	0x08009fb5
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerFive = localStateTimerFive;
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	b2da      	uxtb	r2, r3
 8009f34:	4b78      	ldr	r3, [pc, #480]	; (800a118 <Tim_MainFunction+0x238>)
 8009f36:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_FIVE);
 8009f38:	2005      	movs	r0, #5
 8009f3a:	f7ff fd27 	bl	800998c <Tim_Init>
			break;
 8009f3e:	e042      	b.n	8009fc6 <Tim_MainFunction+0xe6>
		case HAL_TIM_STATE_READY:
			HAL_GPIO_WritePin(PDCR_TRIG_PORT, PDCR_TRIG_PIN, GPIO_PIN_SET);
 8009f40:	2201      	movs	r2, #1
 8009f42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009f46:	4875      	ldr	r0, [pc, #468]	; (800a11c <Tim_MainFunction+0x23c>)
 8009f48:	f7fb ff62 	bl	8005e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PDCR_TRIG_PORT, PDCR_TRIG_PIN, GPIO_PIN_RESET);
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009f52:	4872      	ldr	r0, [pc, #456]	; (800a11c <Tim_MainFunction+0x23c>)
 8009f54:	f7fb ff5c 	bl	8005e10 <HAL_GPIO_WritePin>
			__HAL_TIM_ENABLE_IT(&htim5, TIM_IT_CC2);
 8009f58:	4b6e      	ldr	r3, [pc, #440]	; (800a114 <Tim_MainFunction+0x234>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	68da      	ldr	r2, [r3, #12]
 8009f5e:	4b6d      	ldr	r3, [pc, #436]	; (800a114 <Tim_MainFunction+0x234>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f042 0204 	orr.w	r2, r2, #4
 8009f66:	60da      	str	r2, [r3, #12]
			HAL_GPIO_WritePin(PDCF_TRIG_PORT, PDCF_TRIG_PIN, GPIO_PIN_SET);
 8009f68:	2201      	movs	r2, #1
 8009f6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009f6e:	486c      	ldr	r0, [pc, #432]	; (800a120 <Tim_MainFunction+0x240>)
 8009f70:	f7fb ff4e 	bl	8005e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PDCF_TRIG_PORT, PDCF_TRIG_PIN, GPIO_PIN_RESET);
 8009f74:	2200      	movs	r2, #0
 8009f76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009f7a:	4869      	ldr	r0, [pc, #420]	; (800a120 <Tim_MainFunction+0x240>)
 8009f7c:	f7fb ff48 	bl	8005e10 <HAL_GPIO_WritePin>
			__HAL_TIM_ENABLE_IT(&htim5, TIM_IT_CC1);
 8009f80:	4b64      	ldr	r3, [pc, #400]	; (800a114 <Tim_MainFunction+0x234>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	68da      	ldr	r2, [r3, #12]
 8009f86:	4b63      	ldr	r3, [pc, #396]	; (800a114 <Tim_MainFunction+0x234>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f042 0202 	orr.w	r2, r2, #2
 8009f8e:	60da      	str	r2, [r3, #12]
			TimH_BswState_TimerFive = localStateTimerFive;
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	b2da      	uxtb	r2, r3
 8009f94:	4b60      	ldr	r3, [pc, #384]	; (800a118 <Tim_MainFunction+0x238>)
 8009f96:	701a      	strb	r2, [r3, #0]
			break;
 8009f98:	e015      	b.n	8009fc6 <Tim_MainFunction+0xe6>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerFive = localStateTimerFive;
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	b2da      	uxtb	r2, r3
 8009f9e:	4b5e      	ldr	r3, [pc, #376]	; (800a118 <Tim_MainFunction+0x238>)
 8009fa0:	701a      	strb	r2, [r3, #0]
			break;
 8009fa2:	e010      	b.n	8009fc6 <Tim_MainFunction+0xe6>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerFive = localStateTimerFive;
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	b2da      	uxtb	r2, r3
 8009fa8:	4b5b      	ldr	r3, [pc, #364]	; (800a118 <Tim_MainFunction+0x238>)
 8009faa:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim5);
 8009fac:	4859      	ldr	r0, [pc, #356]	; (800a114 <Tim_MainFunction+0x234>)
 8009fae:	f7ff ff3f 	bl	8009e30 <HAL_TIM_ErrorCallback>
			break;
 8009fb2:	e008      	b.n	8009fc6 <Tim_MainFunction+0xe6>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerFive = localStateTimerFive;
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	b2da      	uxtb	r2, r3
 8009fb8:	4b57      	ldr	r3, [pc, #348]	; (800a118 <Tim_MainFunction+0x238>)
 8009fba:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim5);
 8009fbc:	4855      	ldr	r0, [pc, #340]	; (800a114 <Tim_MainFunction+0x234>)
 8009fbe:	f7ff ff37 	bl	8009e30 <HAL_TIM_ErrorCallback>
			break;
 8009fc2:	e000      	b.n	8009fc6 <Tim_MainFunction+0xe6>
		default:
			break;
 8009fc4:	bf00      	nop
	}
	switch(localStateTimerTwo)
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2b04      	cmp	r3, #4
 8009fca:	d82f      	bhi.n	800a02c <Tim_MainFunction+0x14c>
 8009fcc:	a201      	add	r2, pc, #4	; (adr r2, 8009fd4 <Tim_MainFunction+0xf4>)
 8009fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd2:	bf00      	nop
 8009fd4:	08009fe9 	.word	0x08009fe9
 8009fd8:	08009ff9 	.word	0x08009ff9
 8009fdc:	0800a003 	.word	0x0800a003
 8009fe0:	0800a00d 	.word	0x0800a00d
 8009fe4:	0800a01d 	.word	0x0800a01d
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	b2da      	uxtb	r2, r3
 8009fec:	4b4d      	ldr	r3, [pc, #308]	; (800a124 <Tim_MainFunction+0x244>)
 8009fee:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_TWO);
 8009ff0:	2002      	movs	r0, #2
 8009ff2:	f7ff fccb 	bl	800998c <Tim_Init>
			break;
 8009ff6:	e01a      	b.n	800a02e <Tim_MainFunction+0x14e>
		case HAL_TIM_STATE_READY:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	b2da      	uxtb	r2, r3
 8009ffc:	4b49      	ldr	r3, [pc, #292]	; (800a124 <Tim_MainFunction+0x244>)
 8009ffe:	701a      	strb	r2, [r3, #0]
			break;
 800a000:	e015      	b.n	800a02e <Tim_MainFunction+0x14e>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	b2da      	uxtb	r2, r3
 800a006:	4b47      	ldr	r3, [pc, #284]	; (800a124 <Tim_MainFunction+0x244>)
 800a008:	701a      	strb	r2, [r3, #0]
			break;
 800a00a:	e010      	b.n	800a02e <Tim_MainFunction+0x14e>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	b2da      	uxtb	r2, r3
 800a010:	4b44      	ldr	r3, [pc, #272]	; (800a124 <Tim_MainFunction+0x244>)
 800a012:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim2);
 800a014:	483c      	ldr	r0, [pc, #240]	; (800a108 <Tim_MainFunction+0x228>)
 800a016:	f7ff ff0b 	bl	8009e30 <HAL_TIM_ErrorCallback>
			break;
 800a01a:	e008      	b.n	800a02e <Tim_MainFunction+0x14e>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	b2da      	uxtb	r2, r3
 800a020:	4b40      	ldr	r3, [pc, #256]	; (800a124 <Tim_MainFunction+0x244>)
 800a022:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim2);
 800a024:	4838      	ldr	r0, [pc, #224]	; (800a108 <Tim_MainFunction+0x228>)
 800a026:	f7ff ff03 	bl	8009e30 <HAL_TIM_ErrorCallback>
			break;
 800a02a:	e000      	b.n	800a02e <Tim_MainFunction+0x14e>
		default:
			break;
 800a02c:	bf00      	nop
	}
	switch(localStateTimerThree)
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	2b04      	cmp	r3, #4
 800a032:	d82f      	bhi.n	800a094 <Tim_MainFunction+0x1b4>
 800a034:	a201      	add	r2, pc, #4	; (adr r2, 800a03c <Tim_MainFunction+0x15c>)
 800a036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a03a:	bf00      	nop
 800a03c:	0800a051 	.word	0x0800a051
 800a040:	0800a061 	.word	0x0800a061
 800a044:	0800a06b 	.word	0x0800a06b
 800a048:	0800a075 	.word	0x0800a075
 800a04c:	0800a085 	.word	0x0800a085
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerThree = localStateTimerThree;
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	b2da      	uxtb	r2, r3
 800a054:	4b34      	ldr	r3, [pc, #208]	; (800a128 <Tim_MainFunction+0x248>)
 800a056:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_THREE);
 800a058:	2003      	movs	r0, #3
 800a05a:	f7ff fc97 	bl	800998c <Tim_Init>
			break;
 800a05e:	e01a      	b.n	800a096 <Tim_MainFunction+0x1b6>
		case HAL_TIM_STATE_READY:
			TimH_BswState_TimerThree = localStateTimerThree;
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	b2da      	uxtb	r2, r3
 800a064:	4b30      	ldr	r3, [pc, #192]	; (800a128 <Tim_MainFunction+0x248>)
 800a066:	701a      	strb	r2, [r3, #0]
			break;
 800a068:	e015      	b.n	800a096 <Tim_MainFunction+0x1b6>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerThree = localStateTimerThree;
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	b2da      	uxtb	r2, r3
 800a06e:	4b2e      	ldr	r3, [pc, #184]	; (800a128 <Tim_MainFunction+0x248>)
 800a070:	701a      	strb	r2, [r3, #0]
			break;
 800a072:	e010      	b.n	800a096 <Tim_MainFunction+0x1b6>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerThree = localStateTimerThree;
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	b2da      	uxtb	r2, r3
 800a078:	4b2b      	ldr	r3, [pc, #172]	; (800a128 <Tim_MainFunction+0x248>)
 800a07a:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim3);
 800a07c:	4823      	ldr	r0, [pc, #140]	; (800a10c <Tim_MainFunction+0x22c>)
 800a07e:	f7ff fed7 	bl	8009e30 <HAL_TIM_ErrorCallback>
			break;
 800a082:	e008      	b.n	800a096 <Tim_MainFunction+0x1b6>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerThree = localStateTimerThree;
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	b2da      	uxtb	r2, r3
 800a088:	4b27      	ldr	r3, [pc, #156]	; (800a128 <Tim_MainFunction+0x248>)
 800a08a:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim3);
 800a08c:	481f      	ldr	r0, [pc, #124]	; (800a10c <Tim_MainFunction+0x22c>)
 800a08e:	f7ff fecf 	bl	8009e30 <HAL_TIM_ErrorCallback>
			break;
 800a092:	e000      	b.n	800a096 <Tim_MainFunction+0x1b6>
		default:
			break;
 800a094:	bf00      	nop
	}
	switch(localStateTimerFour)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2b04      	cmp	r3, #4
 800a09a:	d82f      	bhi.n	800a0fc <Tim_MainFunction+0x21c>
 800a09c:	a201      	add	r2, pc, #4	; (adr r2, 800a0a4 <Tim_MainFunction+0x1c4>)
 800a09e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a2:	bf00      	nop
 800a0a4:	0800a0b9 	.word	0x0800a0b9
 800a0a8:	0800a0c9 	.word	0x0800a0c9
 800a0ac:	0800a0d3 	.word	0x0800a0d3
 800a0b0:	0800a0dd 	.word	0x0800a0dd
 800a0b4:	0800a0ed 	.word	0x0800a0ed
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerFour = localStateTimerFour;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	b2da      	uxtb	r2, r3
 800a0bc:	4b1b      	ldr	r3, [pc, #108]	; (800a12c <Tim_MainFunction+0x24c>)
 800a0be:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_FOUR);
 800a0c0:	2004      	movs	r0, #4
 800a0c2:	f7ff fc63 	bl	800998c <Tim_Init>
			break;
 800a0c6:	e01a      	b.n	800a0fe <Tim_MainFunction+0x21e>
		case HAL_TIM_STATE_READY:
			TimH_BswState_TimerFour = localStateTimerFour;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	b2da      	uxtb	r2, r3
 800a0cc:	4b17      	ldr	r3, [pc, #92]	; (800a12c <Tim_MainFunction+0x24c>)
 800a0ce:	701a      	strb	r2, [r3, #0]
			break;
 800a0d0:	e015      	b.n	800a0fe <Tim_MainFunction+0x21e>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerFour = localStateTimerFour;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	b2da      	uxtb	r2, r3
 800a0d6:	4b15      	ldr	r3, [pc, #84]	; (800a12c <Tim_MainFunction+0x24c>)
 800a0d8:	701a      	strb	r2, [r3, #0]
			break;
 800a0da:	e010      	b.n	800a0fe <Tim_MainFunction+0x21e>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerFour = localStateTimerFour;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	b2da      	uxtb	r2, r3
 800a0e0:	4b12      	ldr	r3, [pc, #72]	; (800a12c <Tim_MainFunction+0x24c>)
 800a0e2:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim4);
 800a0e4:	480a      	ldr	r0, [pc, #40]	; (800a110 <Tim_MainFunction+0x230>)
 800a0e6:	f7ff fea3 	bl	8009e30 <HAL_TIM_ErrorCallback>
			break;
 800a0ea:	e008      	b.n	800a0fe <Tim_MainFunction+0x21e>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerFour = localStateTimerFour;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	b2da      	uxtb	r2, r3
 800a0f0:	4b0e      	ldr	r3, [pc, #56]	; (800a12c <Tim_MainFunction+0x24c>)
 800a0f2:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim4);
 800a0f4:	4806      	ldr	r0, [pc, #24]	; (800a110 <Tim_MainFunction+0x230>)
 800a0f6:	f7ff fe9b 	bl	8009e30 <HAL_TIM_ErrorCallback>
			break;
 800a0fa:	e000      	b.n	800a0fe <Tim_MainFunction+0x21e>
		default:
			break;
 800a0fc:	bf00      	nop
	}
}
 800a0fe:	bf00      	nop
 800a100:	3710      	adds	r7, #16
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
 800a106:	bf00      	nop
 800a108:	20000360 	.word	0x20000360
 800a10c:	20000414 	.word	0x20000414
 800a110:	200004c8 	.word	0x200004c8
 800a114:	2000057c 	.word	0x2000057c
 800a118:	200006e7 	.word	0x200006e7
 800a11c:	40020400 	.word	0x40020400
 800a120:	40020000 	.word	0x40020000
 800a124:	200006e4 	.word	0x200006e4
 800a128:	200006e5 	.word	0x200006e5
 800a12c:	200006e6 	.word	0x200006e6

0800a130 <HAL_TIM_PeriodElapsedCallback>:
* Function: HAL_TIM_PeriodElapsedCallback										   *
* Description: Peripheral period elapsed callback to process system state          *
* 			   when timer expires.									               *
************************************************************************************/
VOID HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b082      	sub	sp, #8
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
	/* Timer 1 is used for the time base source of FreeRTOS. Upon expiration increase the clock counter of the system. */
	if (htim->Instance == TIM1)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a04      	ldr	r2, [pc, #16]	; (800a150 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d101      	bne.n	800a146 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 800a142:	f7f9 fe29 	bl	8003d98 <HAL_IncTick>
	}
	else
	{
		/* do nothing */
	}
}
 800a146:	bf00      	nop
 800a148:	3708      	adds	r7, #8
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	40010000 	.word	0x40010000

0800a154 <__NVIC_SetPriority>:
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
 800a15a:	4603      	mov	r3, r0
 800a15c:	6039      	str	r1, [r7, #0]
 800a15e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a164:	2b00      	cmp	r3, #0
 800a166:	db0a      	blt.n	800a17e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	b2da      	uxtb	r2, r3
 800a16c:	490c      	ldr	r1, [pc, #48]	; (800a1a0 <__NVIC_SetPriority+0x4c>)
 800a16e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a172:	0112      	lsls	r2, r2, #4
 800a174:	b2d2      	uxtb	r2, r2
 800a176:	440b      	add	r3, r1
 800a178:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a17c:	e00a      	b.n	800a194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	b2da      	uxtb	r2, r3
 800a182:	4908      	ldr	r1, [pc, #32]	; (800a1a4 <__NVIC_SetPriority+0x50>)
 800a184:	79fb      	ldrb	r3, [r7, #7]
 800a186:	f003 030f 	and.w	r3, r3, #15
 800a18a:	3b04      	subs	r3, #4
 800a18c:	0112      	lsls	r2, r2, #4
 800a18e:	b2d2      	uxtb	r2, r2
 800a190:	440b      	add	r3, r1
 800a192:	761a      	strb	r2, [r3, #24]
}
 800a194:	bf00      	nop
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr
 800a1a0:	e000e100 	.word	0xe000e100
 800a1a4:	e000ed00 	.word	0xe000ed00

0800a1a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a1ac:	4b05      	ldr	r3, [pc, #20]	; (800a1c4 <SysTick_Handler+0x1c>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a1b0:	f002 fd86 	bl	800ccc0 <xTaskGetSchedulerState>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d001      	beq.n	800a1be <SysTick_Handler+0x16>
     /* Call tick handler */
     xPortSysTickHandler();
 800a1ba:	f000 fed5 	bl	800af68 <xPortSysTickHandler>
}

}
 800a1be:	bf00      	nop
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	e000e010 	.word	0xe000e010

0800a1c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	f06f 0004 	mvn.w	r0, #4
 800a1d2:	f7ff ffbf 	bl	800a154 <__NVIC_SetPriority>
#endif
}
 800a1d6:	bf00      	nop
 800a1d8:	bd80      	pop	{r7, pc}
	...

0800a1dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1e2:	f3ef 8305 	mrs	r3, IPSR
 800a1e6:	603b      	str	r3, [r7, #0]
  return(result);
 800a1e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d003      	beq.n	800a1f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a1ee:	f06f 0305 	mvn.w	r3, #5
 800a1f2:	607b      	str	r3, [r7, #4]
 800a1f4:	e00f      	b.n	800a216 <osKernelInitialize+0x3a>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a1f6:	4b0a      	ldr	r3, [pc, #40]	; (800a220 <osKernelInitialize+0x44>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d108      	bne.n	800a210 <osKernelInitialize+0x34>
      #if defined(USE_TRACE_EVENT_RECORDER)
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
 800a1fe:	4809      	ldr	r0, [pc, #36]	; (800a224 <osKernelInitialize+0x48>)
 800a200:	f000 fb78 	bl	800a8f4 <vPortDefineHeapRegions>
      #endif
      KernelState = osKernelReady;
 800a204:	4b06      	ldr	r3, [pc, #24]	; (800a220 <osKernelInitialize+0x44>)
 800a206:	2201      	movs	r2, #1
 800a208:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a20a:	2300      	movs	r3, #0
 800a20c:	607b      	str	r3, [r7, #4]
 800a20e:	e002      	b.n	800a216 <osKernelInitialize+0x3a>
    } else {
      stat = osError;
 800a210:	f04f 33ff 	mov.w	r3, #4294967295
 800a214:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a216:	687b      	ldr	r3, [r7, #4]
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3708      	adds	r7, #8
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	200007cc 	.word	0x200007cc
 800a224:	20000028 	.word	0x20000028

0800a228 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a22e:	f3ef 8305 	mrs	r3, IPSR
 800a232:	603b      	str	r3, [r7, #0]
  return(result);
 800a234:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a236:	2b00      	cmp	r3, #0
 800a238:	d003      	beq.n	800a242 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a23a:	f06f 0305 	mvn.w	r3, #5
 800a23e:	607b      	str	r3, [r7, #4]
 800a240:	e010      	b.n	800a264 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a242:	4b0b      	ldr	r3, [pc, #44]	; (800a270 <osKernelStart+0x48>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	2b01      	cmp	r3, #1
 800a248:	d109      	bne.n	800a25e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a24a:	f7ff ffbd 	bl	800a1c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a24e:	4b08      	ldr	r3, [pc, #32]	; (800a270 <osKernelStart+0x48>)
 800a250:	2202      	movs	r2, #2
 800a252:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a254:	f001 ffae 	bl	800c1b4 <vTaskStartScheduler>
      stat = osOK;
 800a258:	2300      	movs	r3, #0
 800a25a:	607b      	str	r3, [r7, #4]
 800a25c:	e002      	b.n	800a264 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a25e:	f04f 33ff 	mov.w	r3, #4294967295
 800a262:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a264:	687b      	ldr	r3, [r7, #4]
}
 800a266:	4618      	mov	r0, r3
 800a268:	3708      	adds	r7, #8
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	200007cc 	.word	0x200007cc

0800a274 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a274:	b580      	push	{r7, lr}
 800a276:	b08e      	sub	sp, #56	; 0x38
 800a278:	af04      	add	r7, sp, #16
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a280:	2300      	movs	r3, #0
 800a282:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a284:	f3ef 8305 	mrs	r3, IPSR
 800a288:	617b      	str	r3, [r7, #20]
  return(result);
 800a28a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	f040 8081 	bne.w	800a394 <osThreadNew+0x120>
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d07d      	beq.n	800a394 <osThreadNew+0x120>
    stack = configMINIMAL_STACK_SIZE;
 800a298:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a29c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a29e:	2318      	movs	r3, #24
 800a2a0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a2a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a2aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d046      	beq.n	800a340 <osThreadNew+0xcc>
      if (attr->name != NULL) {
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d002      	beq.n	800a2c0 <osThreadNew+0x4c>
        name = attr->name;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	699b      	ldr	r3, [r3, #24]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d002      	beq.n	800a2ce <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	699b      	ldr	r3, [r3, #24]
 800a2cc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d008      	beq.n	800a2e6 <osThreadNew+0x72>
 800a2d4:	69fb      	ldr	r3, [r7, #28]
 800a2d6:	2b38      	cmp	r3, #56	; 0x38
 800a2d8:	d805      	bhi.n	800a2e6 <osThreadNew+0x72>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	f003 0301 	and.w	r3, r3, #1
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d001      	beq.n	800a2ea <osThreadNew+0x76>
        return (NULL);
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	e055      	b.n	800a396 <osThreadNew+0x122>
      }

      if (attr->stack_size > 0U) {
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	695b      	ldr	r3, [r3, #20]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d003      	beq.n	800a2fa <osThreadNew+0x86>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	695b      	ldr	r3, [r3, #20]
 800a2f6:	089b      	lsrs	r3, r3, #2
 800a2f8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	689b      	ldr	r3, [r3, #8]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d00f      	beq.n	800a322 <osThreadNew+0xae>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	68db      	ldr	r3, [r3, #12]
 800a306:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 800a30a:	d30a      	bcc.n	800a322 <osThreadNew+0xae>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a310:	2b00      	cmp	r3, #0
 800a312:	d006      	beq.n	800a322 <osThreadNew+0xae>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	695b      	ldr	r3, [r3, #20]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d002      	beq.n	800a322 <osThreadNew+0xae>
        mem = 1;
 800a31c:	2301      	movs	r3, #1
 800a31e:	61bb      	str	r3, [r7, #24]
 800a320:	e010      	b.n	800a344 <osThreadNew+0xd0>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d10c      	bne.n	800a344 <osThreadNew+0xd0>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	68db      	ldr	r3, [r3, #12]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d108      	bne.n	800a344 <osThreadNew+0xd0>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	691b      	ldr	r3, [r3, #16]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d104      	bne.n	800a344 <osThreadNew+0xd0>
          mem = 0;
 800a33a:	2300      	movs	r3, #0
 800a33c:	61bb      	str	r3, [r7, #24]
 800a33e:	e001      	b.n	800a344 <osThreadNew+0xd0>
        }
      }
    }
    else {
      mem = 0;
 800a340:	2300      	movs	r3, #0
 800a342:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a344:	69bb      	ldr	r3, [r7, #24]
 800a346:	2b01      	cmp	r3, #1
 800a348:	d110      	bne.n	800a36c <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a352:	9202      	str	r2, [sp, #8]
 800a354:	9301      	str	r3, [sp, #4]
 800a356:	69fb      	ldr	r3, [r7, #28]
 800a358:	9300      	str	r3, [sp, #0]
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	6a3a      	ldr	r2, [r7, #32]
 800a35e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a360:	68f8      	ldr	r0, [r7, #12]
 800a362:	f001 fc61 	bl	800bc28 <xTaskCreateStatic>
 800a366:	4603      	mov	r3, r0
 800a368:	613b      	str	r3, [r7, #16]
 800a36a:	e013      	b.n	800a394 <osThreadNew+0x120>
      #endif
    }
    else {
      if (mem == 0) {
 800a36c:	69bb      	ldr	r3, [r7, #24]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d110      	bne.n	800a394 <osThreadNew+0x120>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a372:	6a3b      	ldr	r3, [r7, #32]
 800a374:	b29a      	uxth	r2, r3
 800a376:	f107 0310 	add.w	r3, r7, #16
 800a37a:	9301      	str	r3, [sp, #4]
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	9300      	str	r3, [sp, #0]
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a384:	68f8      	ldr	r0, [r7, #12]
 800a386:	f001 fcae 	bl	800bce6 <xTaskCreate>
 800a38a:	4603      	mov	r3, r0
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d001      	beq.n	800a394 <osThreadNew+0x120>
            hTask = NULL;
 800a390:	2300      	movs	r3, #0
 800a392:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a394:	693b      	ldr	r3, [r7, #16]
}
 800a396:	4618      	mov	r0, r3
 800a398:	3728      	adds	r7, #40	; 0x28
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}

0800a39e <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800a39e:	b580      	push	{r7, lr}
 800a3a0:	b084      	sub	sp, #16
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f003 f987 	bl	800d6ba <pvTimerGetTimerID>
 800a3ac:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d005      	beq.n	800a3c0 <TimerCallback+0x22>
    callb->func (callb->arg);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	68fa      	ldr	r2, [r7, #12]
 800a3ba:	6852      	ldr	r2, [r2, #4]
 800a3bc:	4610      	mov	r0, r2
 800a3be:	4798      	blx	r3
  }
}
 800a3c0:	bf00      	nop
 800a3c2:	3710      	adds	r7, #16
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b08c      	sub	sp, #48	; 0x30
 800a3cc:	af02      	add	r7, sp, #8
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	607a      	str	r2, [r7, #4]
 800a3d2:	603b      	str	r3, [r7, #0]
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3dc:	f3ef 8305 	mrs	r3, IPSR
 800a3e0:	613b      	str	r3, [r7, #16]
  return(result);
 800a3e2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d163      	bne.n	800a4b0 <osTimerNew+0xe8>
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d060      	beq.n	800a4b0 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800a3ee:	2008      	movs	r0, #8
 800a3f0:	f000 f91c 	bl	800a62c <pvPortMalloc>
 800a3f4:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d059      	beq.n	800a4b0 <osTimerNew+0xe8>
      callb->func = func;
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	68fa      	ldr	r2, [r7, #12]
 800a400:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	687a      	ldr	r2, [r7, #4]
 800a406:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800a408:	7afb      	ldrb	r3, [r7, #11]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d102      	bne.n	800a414 <osTimerNew+0x4c>
        reload = pdFALSE;
 800a40e:	2300      	movs	r3, #0
 800a410:	61fb      	str	r3, [r7, #28]
 800a412:	e001      	b.n	800a418 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800a414:	2301      	movs	r3, #1
 800a416:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800a418:	f04f 33ff 	mov.w	r3, #4294967295
 800a41c:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800a41e:	2300      	movs	r3, #0
 800a420:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d01c      	beq.n	800a462 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d002      	beq.n	800a436 <osTimerNew+0x6e>
          name = attr->name;
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	689b      	ldr	r3, [r3, #8]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d006      	beq.n	800a44c <osTimerNew+0x84>
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	68db      	ldr	r3, [r3, #12]
 800a442:	2b2b      	cmp	r3, #43	; 0x2b
 800a444:	d902      	bls.n	800a44c <osTimerNew+0x84>
          mem = 1;
 800a446:	2301      	movs	r3, #1
 800a448:	61bb      	str	r3, [r7, #24]
 800a44a:	e00c      	b.n	800a466 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d108      	bne.n	800a466 <osTimerNew+0x9e>
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d104      	bne.n	800a466 <osTimerNew+0x9e>
            mem = 0;
 800a45c:	2300      	movs	r3, #0
 800a45e:	61bb      	str	r3, [r7, #24]
 800a460:	e001      	b.n	800a466 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800a462:	2300      	movs	r3, #0
 800a464:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d10c      	bne.n	800a486 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	9301      	str	r3, [sp, #4]
 800a472:	4b12      	ldr	r3, [pc, #72]	; (800a4bc <osTimerNew+0xf4>)
 800a474:	9300      	str	r3, [sp, #0]
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	69fa      	ldr	r2, [r7, #28]
 800a47a:	2101      	movs	r1, #1
 800a47c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a47e:	f002 fd74 	bl	800cf6a <xTimerCreateStatic>
 800a482:	6238      	str	r0, [r7, #32]
 800a484:	e00b      	b.n	800a49e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800a486:	69bb      	ldr	r3, [r7, #24]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d108      	bne.n	800a49e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800a48c:	4b0b      	ldr	r3, [pc, #44]	; (800a4bc <osTimerNew+0xf4>)
 800a48e:	9300      	str	r3, [sp, #0]
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	69fa      	ldr	r2, [r7, #28]
 800a494:	2101      	movs	r1, #1
 800a496:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a498:	f002 fd46 	bl	800cf28 <xTimerCreate>
 800a49c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800a49e:	6a3b      	ldr	r3, [r7, #32]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d105      	bne.n	800a4b0 <osTimerNew+0xe8>
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d002      	beq.n	800a4b0 <osTimerNew+0xe8>
        vPortFree (callb);
 800a4aa:	6978      	ldr	r0, [r7, #20]
 800a4ac:	f000 f966 	bl	800a77c <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800a4b0:	6a3b      	ldr	r3, [r7, #32]
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3728      	adds	r7, #40	; 0x28
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	0800a39f 	.word	0x0800a39f

0800a4c0 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b088      	sub	sp, #32
 800a4c4:	af02      	add	r7, sp, #8
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4ce:	f3ef 8305 	mrs	r3, IPSR
 800a4d2:	60fb      	str	r3, [r7, #12]
  return(result);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d003      	beq.n	800a4e2 <osTimerStart+0x22>
    stat = osErrorISR;
 800a4da:	f06f 0305 	mvn.w	r3, #5
 800a4de:	617b      	str	r3, [r7, #20]
 800a4e0:	e017      	b.n	800a512 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d103      	bne.n	800a4f0 <osTimerStart+0x30>
    stat = osErrorParameter;
 800a4e8:	f06f 0303 	mvn.w	r3, #3
 800a4ec:	617b      	str	r3, [r7, #20]
 800a4ee:	e010      	b.n	800a512 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	9300      	str	r3, [sp, #0]
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	683a      	ldr	r2, [r7, #0]
 800a4f8:	2104      	movs	r1, #4
 800a4fa:	6938      	ldr	r0, [r7, #16]
 800a4fc:	f002 fdae 	bl	800d05c <xTimerGenericCommand>
 800a500:	4603      	mov	r3, r0
 800a502:	2b01      	cmp	r3, #1
 800a504:	d102      	bne.n	800a50c <osTimerStart+0x4c>
      stat = osOK;
 800a506:	2300      	movs	r3, #0
 800a508:	617b      	str	r3, [r7, #20]
 800a50a:	e002      	b.n	800a512 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800a50c:	f06f 0302 	mvn.w	r3, #2
 800a510:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a512:	697b      	ldr	r3, [r7, #20]
}
 800a514:	4618      	mov	r0, r3
 800a516:	3718      	adds	r7, #24
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b088      	sub	sp, #32
 800a520:	af02      	add	r7, sp, #8
 800a522:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a528:	f3ef 8305 	mrs	r3, IPSR
 800a52c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a52e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a530:	2b00      	cmp	r3, #0
 800a532:	d003      	beq.n	800a53c <osTimerStop+0x20>
    stat = osErrorISR;
 800a534:	f06f 0305 	mvn.w	r3, #5
 800a538:	617b      	str	r3, [r7, #20]
 800a53a:	e021      	b.n	800a580 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d103      	bne.n	800a54a <osTimerStop+0x2e>
    stat = osErrorParameter;
 800a542:	f06f 0303 	mvn.w	r3, #3
 800a546:	617b      	str	r3, [r7, #20]
 800a548:	e01a      	b.n	800a580 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800a54a:	6938      	ldr	r0, [r7, #16]
 800a54c:	f003 f88c 	bl	800d668 <xTimerIsTimerActive>
 800a550:	4603      	mov	r3, r0
 800a552:	2b00      	cmp	r3, #0
 800a554:	d103      	bne.n	800a55e <osTimerStop+0x42>
      stat = osErrorResource;
 800a556:	f06f 0302 	mvn.w	r3, #2
 800a55a:	617b      	str	r3, [r7, #20]
 800a55c:	e010      	b.n	800a580 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800a55e:	2300      	movs	r3, #0
 800a560:	9300      	str	r3, [sp, #0]
 800a562:	2300      	movs	r3, #0
 800a564:	2200      	movs	r2, #0
 800a566:	2103      	movs	r1, #3
 800a568:	6938      	ldr	r0, [r7, #16]
 800a56a:	f002 fd77 	bl	800d05c <xTimerGenericCommand>
 800a56e:	4603      	mov	r3, r0
 800a570:	2b01      	cmp	r3, #1
 800a572:	d102      	bne.n	800a57a <osTimerStop+0x5e>
        stat = osOK;
 800a574:	2300      	movs	r3, #0
 800a576:	617b      	str	r3, [r7, #20]
 800a578:	e002      	b.n	800a580 <osTimerStop+0x64>
      } else {
        stat = osError;
 800a57a:	f04f 33ff 	mov.w	r3, #4294967295
 800a57e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a580:	697b      	ldr	r3, [r7, #20]
}
 800a582:	4618      	mov	r0, r3
 800a584:	3718      	adds	r7, #24
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <osTimerIsRunning>:

uint32_t osTimerIsRunning (osTimerId_t timer_id) {
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b086      	sub	sp, #24
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a596:	f3ef 8305 	mrs	r3, IPSR
 800a59a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a59c:	68fb      	ldr	r3, [r7, #12]
  uint32_t running;

  if (IS_IRQ() || (hTimer == NULL)) {
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d102      	bne.n	800a5a8 <osTimerIsRunning+0x1e>
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d102      	bne.n	800a5ae <osTimerIsRunning+0x24>
    running = 0U;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	617b      	str	r3, [r7, #20]
 800a5ac:	e004      	b.n	800a5b8 <osTimerIsRunning+0x2e>
  } else {
    running = (uint32_t)xTimerIsTimerActive (hTimer);
 800a5ae:	6938      	ldr	r0, [r7, #16]
 800a5b0:	f003 f85a 	bl	800d668 <xTimerIsTimerActive>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	617b      	str	r3, [r7, #20]
  }

  return (running);
 800a5b8:	697b      	ldr	r3, [r7, #20]
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3718      	adds	r7, #24
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
	...

0800a5c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a5c4:	b480      	push	{r7}
 800a5c6:	b085      	sub	sp, #20
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	4a07      	ldr	r2, [pc, #28]	; (800a5f0 <vApplicationGetIdleTaskMemory+0x2c>)
 800a5d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	4a06      	ldr	r2, [pc, #24]	; (800a5f4 <vApplicationGetIdleTaskMemory+0x30>)
 800a5da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a5e2:	601a      	str	r2, [r3, #0]
}
 800a5e4:	bf00      	nop
 800a5e6:	3714      	adds	r7, #20
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr
 800a5f0:	20006978 	.word	0x20006978
 800a5f4:	20006b34 	.word	0x20006b34

0800a5f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a5f8:	b480      	push	{r7}
 800a5fa:	b085      	sub	sp, #20
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	60f8      	str	r0, [r7, #12]
 800a600:	60b9      	str	r1, [r7, #8]
 800a602:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	4a07      	ldr	r2, [pc, #28]	; (800a624 <vApplicationGetTimerTaskMemory+0x2c>)
 800a608:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	4a06      	ldr	r2, [pc, #24]	; (800a628 <vApplicationGetTimerTaskMemory+0x30>)
 800a60e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a616:	601a      	str	r2, [r3, #0]
}
 800a618:	bf00      	nop
 800a61a:	3714      	adds	r7, #20
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr
 800a624:	20006f34 	.word	0x20006f34
 800a628:	200070f0 	.word	0x200070f0

0800a62c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b088      	sub	sp, #32
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a634:	2300      	movs	r3, #0
 800a636:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 800a638:	4b4a      	ldr	r3, [pc, #296]	; (800a764 <pvPortMalloc+0x138>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d10a      	bne.n	800a656 <pvPortMalloc+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a640:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a644:	f383 8811 	msr	BASEPRI, r3
 800a648:	f3bf 8f6f 	isb	sy
 800a64c:	f3bf 8f4f 	dsb	sy
 800a650:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a652:	bf00      	nop
 800a654:	e7fe      	b.n	800a654 <pvPortMalloc+0x28>

	vTaskSuspendAll();
 800a656:	f001 fe1f 	bl	800c298 <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a65a:	4b43      	ldr	r3, [pc, #268]	; (800a768 <pvPortMalloc+0x13c>)
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	4013      	ands	r3, r2
 800a662:	2b00      	cmp	r3, #0
 800a664:	d172      	bne.n	800a74c <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d00d      	beq.n	800a688 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 800a66c:	2208      	movs	r2, #8
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	4413      	add	r3, r2
 800a672:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f003 0307 	and.w	r3, r3, #7
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d004      	beq.n	800a688 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f023 0307 	bic.w	r3, r3, #7
 800a684:	3308      	adds	r3, #8
 800a686:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d05e      	beq.n	800a74c <pvPortMalloc+0x120>
 800a68e:	4b37      	ldr	r3, [pc, #220]	; (800a76c <pvPortMalloc+0x140>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	687a      	ldr	r2, [r7, #4]
 800a694:	429a      	cmp	r2, r3
 800a696:	d859      	bhi.n	800a74c <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a698:	4b35      	ldr	r3, [pc, #212]	; (800a770 <pvPortMalloc+0x144>)
 800a69a:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 800a69c:	4b34      	ldr	r3, [pc, #208]	; (800a770 <pvPortMalloc+0x144>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a6a2:	e004      	b.n	800a6ae <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a6a8:	69fb      	ldr	r3, [r7, #28]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a6ae:	69fb      	ldr	r3, [r7, #28]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d903      	bls.n	800a6c0 <pvPortMalloc+0x94>
 800a6b8:	69fb      	ldr	r3, [r7, #28]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d1f1      	bne.n	800a6a4 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a6c0:	4b28      	ldr	r3, [pc, #160]	; (800a764 <pvPortMalloc+0x138>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	69fa      	ldr	r2, [r7, #28]
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	d040      	beq.n	800a74c <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a6ca:	69bb      	ldr	r3, [r7, #24]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	2208      	movs	r2, #8
 800a6d0:	4413      	add	r3, r2
 800a6d2:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a6d4:	69fb      	ldr	r3, [r7, #28]
 800a6d6:	681a      	ldr	r2, [r3, #0]
 800a6d8:	69bb      	ldr	r3, [r7, #24]
 800a6da:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a6dc:	69fb      	ldr	r3, [r7, #28]
 800a6de:	685a      	ldr	r2, [r3, #4]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	1ad2      	subs	r2, r2, r3
 800a6e4:	2308      	movs	r3, #8
 800a6e6:	005b      	lsls	r3, r3, #1
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d90f      	bls.n	800a70c <pvPortMalloc+0xe0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a6ec:	69fa      	ldr	r2, [r7, #28]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	4413      	add	r3, r2
 800a6f2:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a6f4:	69fb      	ldr	r3, [r7, #28]
 800a6f6:	685a      	ldr	r2, [r3, #4]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	1ad2      	subs	r2, r2, r3
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800a706:	6938      	ldr	r0, [r7, #16]
 800a708:	f000 f89a 	bl	800a840 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a70c:	4b17      	ldr	r3, [pc, #92]	; (800a76c <pvPortMalloc+0x140>)
 800a70e:	681a      	ldr	r2, [r3, #0]
 800a710:	69fb      	ldr	r3, [r7, #28]
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	1ad3      	subs	r3, r2, r3
 800a716:	4a15      	ldr	r2, [pc, #84]	; (800a76c <pvPortMalloc+0x140>)
 800a718:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a71a:	4b14      	ldr	r3, [pc, #80]	; (800a76c <pvPortMalloc+0x140>)
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	4b15      	ldr	r3, [pc, #84]	; (800a774 <pvPortMalloc+0x148>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	429a      	cmp	r2, r3
 800a724:	d203      	bcs.n	800a72e <pvPortMalloc+0x102>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a726:	4b11      	ldr	r3, [pc, #68]	; (800a76c <pvPortMalloc+0x140>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4a12      	ldr	r2, [pc, #72]	; (800a774 <pvPortMalloc+0x148>)
 800a72c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a72e:	69fb      	ldr	r3, [r7, #28]
 800a730:	685a      	ldr	r2, [r3, #4]
 800a732:	4b0d      	ldr	r3, [pc, #52]	; (800a768 <pvPortMalloc+0x13c>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	431a      	orrs	r2, r3
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	2200      	movs	r2, #0
 800a740:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a742:	4b0d      	ldr	r3, [pc, #52]	; (800a778 <pvPortMalloc+0x14c>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	3301      	adds	r3, #1
 800a748:	4a0b      	ldr	r2, [pc, #44]	; (800a778 <pvPortMalloc+0x14c>)
 800a74a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a74c:	f001 fdea 	bl	800c324 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d101      	bne.n	800a75a <pvPortMalloc+0x12e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800a756:	f7f8 f99d 	bl	8002a94 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 800a75a:	697b      	ldr	r3, [r7, #20]
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3720      	adds	r7, #32
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}
 800a764:	200090f8 	.word	0x200090f8
 800a768:	2000910c 	.word	0x2000910c
 800a76c:	200090fc 	.word	0x200090fc
 800a770:	200090f0 	.word	0x200090f0
 800a774:	20009100 	.word	0x20009100
 800a778:	20009104 	.word	0x20009104

0800a77c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b086      	sub	sp, #24
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d04d      	beq.n	800a82a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a78e:	2308      	movs	r3, #8
 800a790:	425b      	negs	r3, r3
 800a792:	697a      	ldr	r2, [r7, #20]
 800a794:	4413      	add	r3, r2
 800a796:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	685a      	ldr	r2, [r3, #4]
 800a7a0:	4b24      	ldr	r3, [pc, #144]	; (800a834 <vPortFree+0xb8>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4013      	ands	r3, r2
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d10a      	bne.n	800a7c0 <vPortFree+0x44>
	__asm volatile
 800a7aa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a7ae:	f383 8811 	msr	BASEPRI, r3
 800a7b2:	f3bf 8f6f 	isb	sy
 800a7b6:	f3bf 8f4f 	dsb	sy
 800a7ba:	60fb      	str	r3, [r7, #12]
}
 800a7bc:	bf00      	nop
 800a7be:	e7fe      	b.n	800a7be <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d00a      	beq.n	800a7de <vPortFree+0x62>
	__asm volatile
 800a7c8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a7cc:	f383 8811 	msr	BASEPRI, r3
 800a7d0:	f3bf 8f6f 	isb	sy
 800a7d4:	f3bf 8f4f 	dsb	sy
 800a7d8:	60bb      	str	r3, [r7, #8]
}
 800a7da:	bf00      	nop
 800a7dc:	e7fe      	b.n	800a7dc <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	685a      	ldr	r2, [r3, #4]
 800a7e2:	4b14      	ldr	r3, [pc, #80]	; (800a834 <vPortFree+0xb8>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4013      	ands	r3, r2
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d01e      	beq.n	800a82a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d11a      	bne.n	800a82a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	685a      	ldr	r2, [r3, #4]
 800a7f8:	4b0e      	ldr	r3, [pc, #56]	; (800a834 <vPortFree+0xb8>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	43db      	mvns	r3, r3
 800a7fe:	401a      	ands	r2, r3
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a804:	f001 fd48 	bl	800c298 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	685a      	ldr	r2, [r3, #4]
 800a80c:	4b0a      	ldr	r3, [pc, #40]	; (800a838 <vPortFree+0xbc>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4413      	add	r3, r2
 800a812:	4a09      	ldr	r2, [pc, #36]	; (800a838 <vPortFree+0xbc>)
 800a814:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a816:	6938      	ldr	r0, [r7, #16]
 800a818:	f000 f812 	bl	800a840 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a81c:	4b07      	ldr	r3, [pc, #28]	; (800a83c <vPortFree+0xc0>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	3301      	adds	r3, #1
 800a822:	4a06      	ldr	r2, [pc, #24]	; (800a83c <vPortFree+0xc0>)
 800a824:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a826:	f001 fd7d 	bl	800c324 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a82a:	bf00      	nop
 800a82c:	3718      	adds	r7, #24
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	2000910c 	.word	0x2000910c
 800a838:	200090fc 	.word	0x200090fc
 800a83c:	20009108 	.word	0x20009108

0800a840 <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a840:	b480      	push	{r7}
 800a842:	b085      	sub	sp, #20
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a848:	4b28      	ldr	r3, [pc, #160]	; (800a8ec <prvInsertBlockIntoFreeList+0xac>)
 800a84a:	60fb      	str	r3, [r7, #12]
 800a84c:	e002      	b.n	800a854 <prvInsertBlockIntoFreeList+0x14>
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	60fb      	str	r3, [r7, #12]
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d8f7      	bhi.n	800a84e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	68ba      	ldr	r2, [r7, #8]
 800a868:	4413      	add	r3, r2
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d108      	bne.n	800a882 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	685a      	ldr	r2, [r3, #4]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	441a      	add	r2, r3
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	68ba      	ldr	r2, [r7, #8]
 800a88c:	441a      	add	r2, r3
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	429a      	cmp	r2, r3
 800a894:	d118      	bne.n	800a8c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	4b15      	ldr	r3, [pc, #84]	; (800a8f0 <prvInsertBlockIntoFreeList+0xb0>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d00d      	beq.n	800a8be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	685a      	ldr	r2, [r3, #4]
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	441a      	add	r2, r3
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	681a      	ldr	r2, [r3, #0]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	601a      	str	r2, [r3, #0]
 800a8bc:	e008      	b.n	800a8d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a8be:	4b0c      	ldr	r3, [pc, #48]	; (800a8f0 <prvInsertBlockIntoFreeList+0xb0>)
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	601a      	str	r2, [r3, #0]
 800a8c6:	e003      	b.n	800a8d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681a      	ldr	r2, [r3, #0]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a8d0:	68fa      	ldr	r2, [r7, #12]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d002      	beq.n	800a8de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8de:	bf00      	nop
 800a8e0:	3714      	adds	r7, #20
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr
 800a8ea:	bf00      	nop
 800a8ec:	200090f0 	.word	0x200090f0
 800a8f0:	200090f8 	.word	0x200090f8

0800a8f4 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b08f      	sub	sp, #60	; 0x3c
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 800a900:	2300      	movs	r3, #0
 800a902:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xDefinedRegions = 0;
 800a904:	2300      	movs	r3, #0
 800a906:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 800a908:	4b5a      	ldr	r3, [pc, #360]	; (800aa74 <vPortDefineHeapRegions+0x180>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d00a      	beq.n	800a926 <vPortDefineHeapRegions+0x32>
	__asm volatile
 800a910:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a914:	f383 8811 	msr	BASEPRI, r3
 800a918:	f3bf 8f6f 	isb	sy
 800a91c:	f3bf 8f4f 	dsb	sy
 800a920:	617b      	str	r3, [r7, #20]
}
 800a922:	bf00      	nop
 800a924:	e7fe      	b.n	800a924 <vPortDefineHeapRegions+0x30>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800a926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a928:	00db      	lsls	r3, r3, #3
 800a92a:	687a      	ldr	r2, [r7, #4]
 800a92c:	4413      	add	r3, r2
 800a92e:	627b      	str	r3, [r7, #36]	; 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 800a930:	e07d      	b.n	800aa2e <vPortDefineHeapRegions+0x13a>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 800a932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	637b      	str	r3, [r7, #52]	; 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 800a938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	62bb      	str	r3, [r7, #40]	; 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a940:	f003 0307 	and.w	r3, r3, #7
 800a944:	2b00      	cmp	r3, #0
 800a946:	d00e      	beq.n	800a966 <vPortDefineHeapRegions+0x72>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 800a948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94a:	3307      	adds	r3, #7
 800a94c:	62bb      	str	r3, [r7, #40]	; 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800a94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a950:	f023 0307 	bic.w	r3, r3, #7
 800a954:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 800a956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	461a      	mov	r2, r3
 800a95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a95e:	1ad3      	subs	r3, r2, r3
 800a960:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a962:	4413      	add	r3, r2
 800a964:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xAlignedHeap = xAddress;
 800a966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a968:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 800a96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d106      	bne.n	800a97e <vPortDefineHeapRegions+0x8a>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 800a970:	69fb      	ldr	r3, [r7, #28]
 800a972:	4a41      	ldr	r2, [pc, #260]	; (800aa78 <vPortDefineHeapRegions+0x184>)
 800a974:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 800a976:	4b40      	ldr	r3, [pc, #256]	; (800aa78 <vPortDefineHeapRegions+0x184>)
 800a978:	2200      	movs	r2, #0
 800a97a:	605a      	str	r2, [r3, #4]
 800a97c:	e01f      	b.n	800a9be <vPortDefineHeapRegions+0xca>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 800a97e:	4b3d      	ldr	r3, [pc, #244]	; (800aa74 <vPortDefineHeapRegions+0x180>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d10a      	bne.n	800a99c <vPortDefineHeapRegions+0xa8>
	__asm volatile
 800a986:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a98a:	f383 8811 	msr	BASEPRI, r3
 800a98e:	f3bf 8f6f 	isb	sy
 800a992:	f3bf 8f4f 	dsb	sy
 800a996:	613b      	str	r3, [r7, #16]
}
 800a998:	bf00      	nop
 800a99a:	e7fe      	b.n	800a99a <vPortDefineHeapRegions+0xa6>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 800a99c:	4b35      	ldr	r3, [pc, #212]	; (800aa74 <vPortDefineHeapRegions+0x180>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d80a      	bhi.n	800a9be <vPortDefineHeapRegions+0xca>
	__asm volatile
 800a9a8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a9ac:	f383 8811 	msr	BASEPRI, r3
 800a9b0:	f3bf 8f6f 	isb	sy
 800a9b4:	f3bf 8f4f 	dsb	sy
 800a9b8:	60fb      	str	r3, [r7, #12]
}
 800a9ba:	bf00      	nop
 800a9bc:	e7fe      	b.n	800a9bc <vPortDefineHeapRegions+0xc8>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 800a9be:	4b2d      	ldr	r3, [pc, #180]	; (800aa74 <vPortDefineHeapRegions+0x180>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 800a9c4:	69fa      	ldr	r2, [r7, #28]
 800a9c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9c8:	4413      	add	r3, r2
 800a9ca:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress -= xHeapStructSize;
 800a9cc:	2208      	movs	r2, #8
 800a9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d0:	1a9b      	subs	r3, r3, r2
 800a9d2:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800a9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d6:	f023 0307 	bic.w	r3, r3, #7
 800a9da:	62bb      	str	r3, [r7, #40]	; 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 800a9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9de:	4a25      	ldr	r2, [pc, #148]	; (800aa74 <vPortDefineHeapRegions+0x180>)
 800a9e0:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 800a9e2:	4b24      	ldr	r3, [pc, #144]	; (800aa74 <vPortDefineHeapRegions+0x180>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 800a9ea:	4b22      	ldr	r3, [pc, #136]	; (800aa74 <vPortDefineHeapRegions+0x180>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 800a9f2:	69fb      	ldr	r3, [r7, #28]
 800a9f4:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 800a9f6:	6a3b      	ldr	r3, [r7, #32]
 800a9f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9fa:	1ad2      	subs	r2, r2, r3
 800a9fc:	6a3b      	ldr	r3, [r7, #32]
 800a9fe:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 800aa00:	4b1c      	ldr	r3, [pc, #112]	; (800aa74 <vPortDefineHeapRegions+0x180>)
 800aa02:	681a      	ldr	r2, [r3, #0]
 800aa04:	6a3b      	ldr	r3, [r7, #32]
 800aa06:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 800aa08:	69bb      	ldr	r3, [r7, #24]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d002      	beq.n	800aa14 <vPortDefineHeapRegions+0x120>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 800aa0e:	69bb      	ldr	r3, [r7, #24]
 800aa10:	6a3a      	ldr	r2, [r7, #32]
 800aa12:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 800aa14:	6a3b      	ldr	r3, [r7, #32]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa1a:	4413      	add	r3, r2
 800aa1c:	633b      	str	r3, [r7, #48]	; 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 800aa1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa20:	3301      	adds	r3, #1
 800aa22:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800aa24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa26:	00db      	lsls	r3, r3, #3
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	4413      	add	r3, r2
 800aa2c:	627b      	str	r3, [r7, #36]	; 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 800aa2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	f47f af7d 	bne.w	800a932 <vPortDefineHeapRegions+0x3e>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 800aa38:	4a10      	ldr	r2, [pc, #64]	; (800aa7c <vPortDefineHeapRegions+0x188>)
 800aa3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa3c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 800aa3e:	4a10      	ldr	r2, [pc, #64]	; (800aa80 <vPortDefineHeapRegions+0x18c>)
 800aa40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa42:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 800aa44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d10a      	bne.n	800aa60 <vPortDefineHeapRegions+0x16c>
	__asm volatile
 800aa4a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800aa4e:	f383 8811 	msr	BASEPRI, r3
 800aa52:	f3bf 8f6f 	isb	sy
 800aa56:	f3bf 8f4f 	dsb	sy
 800aa5a:	60bb      	str	r3, [r7, #8]
}
 800aa5c:	bf00      	nop
 800aa5e:	e7fe      	b.n	800aa5e <vPortDefineHeapRegions+0x16a>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aa60:	4b08      	ldr	r3, [pc, #32]	; (800aa84 <vPortDefineHeapRegions+0x190>)
 800aa62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aa66:	601a      	str	r2, [r3, #0]
}
 800aa68:	bf00      	nop
 800aa6a:	373c      	adds	r7, #60	; 0x3c
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr
 800aa74:	200090f8 	.word	0x200090f8
 800aa78:	200090f0 	.word	0x200090f0
 800aa7c:	20009100 	.word	0x20009100
 800aa80:	200090fc 	.word	0x200090fc
 800aa84:	2000910c 	.word	0x2000910c

0800aa88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b083      	sub	sp, #12
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f103 0208 	add.w	r2, r3, #8
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f04f 32ff 	mov.w	r2, #4294967295
 800aaa0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f103 0208 	add.w	r2, r3, #8
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f103 0208 	add.w	r2, r3, #8
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2200      	movs	r2, #0
 800aaba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aabc:	bf00      	nop
 800aabe:	370c      	adds	r7, #12
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aac8:	b480      	push	{r7}
 800aaca:	b083      	sub	sp, #12
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2200      	movs	r2, #0
 800aad4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aad6:	bf00      	nop
 800aad8:	370c      	adds	r7, #12
 800aada:	46bd      	mov	sp, r7
 800aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae0:	4770      	bx	lr

0800aae2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aae2:	b480      	push	{r7}
 800aae4:	b085      	sub	sp, #20
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
 800aaea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	68fa      	ldr	r2, [r7, #12]
 800aaf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	689a      	ldr	r2, [r3, #8]
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	683a      	ldr	r2, [r7, #0]
 800ab06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	683a      	ldr	r2, [r7, #0]
 800ab0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	687a      	ldr	r2, [r7, #4]
 800ab12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	1c5a      	adds	r2, r3, #1
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	601a      	str	r2, [r3, #0]
}
 800ab1e:	bf00      	nop
 800ab20:	3714      	adds	r7, #20
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr

0800ab2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab2a:	b480      	push	{r7}
 800ab2c:	b085      	sub	sp, #20
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
 800ab32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab40:	d103      	bne.n	800ab4a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	691b      	ldr	r3, [r3, #16]
 800ab46:	60fb      	str	r3, [r7, #12]
 800ab48:	e00c      	b.n	800ab64 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	3308      	adds	r3, #8
 800ab4e:	60fb      	str	r3, [r7, #12]
 800ab50:	e002      	b.n	800ab58 <vListInsert+0x2e>
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	60fb      	str	r3, [r7, #12]
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	68ba      	ldr	r2, [r7, #8]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d2f6      	bcs.n	800ab52 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	685a      	ldr	r2, [r3, #4]
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	683a      	ldr	r2, [r7, #0]
 800ab72:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	68fa      	ldr	r2, [r7, #12]
 800ab78:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	683a      	ldr	r2, [r7, #0]
 800ab7e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	687a      	ldr	r2, [r7, #4]
 800ab84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	1c5a      	adds	r2, r3, #1
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	601a      	str	r2, [r3, #0]
}
 800ab90:	bf00      	nop
 800ab92:	3714      	adds	r7, #20
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr

0800ab9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b085      	sub	sp, #20
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	691b      	ldr	r3, [r3, #16]
 800aba8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	6892      	ldr	r2, [r2, #8]
 800abb2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	687a      	ldr	r2, [r7, #4]
 800abba:	6852      	ldr	r2, [r2, #4]
 800abbc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d103      	bne.n	800abd0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	689a      	ldr	r2, [r3, #8]
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2200      	movs	r2, #0
 800abd4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	1e5a      	subs	r2, r3, #1
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3714      	adds	r7, #20
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800abf0:	b480      	push	{r7}
 800abf2:	b085      	sub	sp, #20
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	3b04      	subs	r3, #4
 800ac00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ac08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	3b04      	subs	r3, #4
 800ac0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	f023 0201 	bic.w	r2, r3, #1
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	3b04      	subs	r3, #4
 800ac1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ac20:	4a0c      	ldr	r2, [pc, #48]	; (800ac54 <pxPortInitialiseStack+0x64>)
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	3b14      	subs	r3, #20
 800ac2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	3b04      	subs	r3, #4
 800ac36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f06f 0202 	mvn.w	r2, #2
 800ac3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	3b20      	subs	r3, #32
 800ac44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ac46:	68fb      	ldr	r3, [r7, #12]
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3714      	adds	r7, #20
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr
 800ac54:	0800ac59 	.word	0x0800ac59

0800ac58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b085      	sub	sp, #20
 800ac5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ac62:	4b12      	ldr	r3, [pc, #72]	; (800acac <prvTaskExitError+0x54>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac6a:	d00a      	beq.n	800ac82 <prvTaskExitError+0x2a>
	__asm volatile
 800ac6c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ac70:	f383 8811 	msr	BASEPRI, r3
 800ac74:	f3bf 8f6f 	isb	sy
 800ac78:	f3bf 8f4f 	dsb	sy
 800ac7c:	60fb      	str	r3, [r7, #12]
}
 800ac7e:	bf00      	nop
 800ac80:	e7fe      	b.n	800ac80 <prvTaskExitError+0x28>
	__asm volatile
 800ac82:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ac86:	f383 8811 	msr	BASEPRI, r3
 800ac8a:	f3bf 8f6f 	isb	sy
 800ac8e:	f3bf 8f4f 	dsb	sy
 800ac92:	60bb      	str	r3, [r7, #8]
}
 800ac94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ac96:	bf00      	nop
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d0fc      	beq.n	800ac98 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ac9e:	bf00      	nop
 800aca0:	bf00      	nop
 800aca2:	3714      	adds	r7, #20
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr
 800acac:	20000038 	.word	0x20000038

0800acb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800acb0:	4b07      	ldr	r3, [pc, #28]	; (800acd0 <pxCurrentTCBConst2>)
 800acb2:	6819      	ldr	r1, [r3, #0]
 800acb4:	6808      	ldr	r0, [r1, #0]
 800acb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acba:	f380 8809 	msr	PSP, r0
 800acbe:	f3bf 8f6f 	isb	sy
 800acc2:	f04f 0000 	mov.w	r0, #0
 800acc6:	f380 8811 	msr	BASEPRI, r0
 800acca:	4770      	bx	lr
 800accc:	f3af 8000 	nop.w

0800acd0 <pxCurrentTCBConst2>:
 800acd0:	20009164 	.word	0x20009164
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800acd4:	bf00      	nop
 800acd6:	bf00      	nop

0800acd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800acd8:	4808      	ldr	r0, [pc, #32]	; (800acfc <prvPortStartFirstTask+0x24>)
 800acda:	6800      	ldr	r0, [r0, #0]
 800acdc:	6800      	ldr	r0, [r0, #0]
 800acde:	f380 8808 	msr	MSP, r0
 800ace2:	f04f 0000 	mov.w	r0, #0
 800ace6:	f380 8814 	msr	CONTROL, r0
 800acea:	b662      	cpsie	i
 800acec:	b661      	cpsie	f
 800acee:	f3bf 8f4f 	dsb	sy
 800acf2:	f3bf 8f6f 	isb	sy
 800acf6:	df00      	svc	0
 800acf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800acfa:	bf00      	nop
 800acfc:	e000ed08 	.word	0xe000ed08

0800ad00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b086      	sub	sp, #24
 800ad04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ad06:	4b46      	ldr	r3, [pc, #280]	; (800ae20 <xPortStartScheduler+0x120>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a46      	ldr	r2, [pc, #280]	; (800ae24 <xPortStartScheduler+0x124>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d10a      	bne.n	800ad26 <xPortStartScheduler+0x26>
	__asm volatile
 800ad10:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ad14:	f383 8811 	msr	BASEPRI, r3
 800ad18:	f3bf 8f6f 	isb	sy
 800ad1c:	f3bf 8f4f 	dsb	sy
 800ad20:	613b      	str	r3, [r7, #16]
}
 800ad22:	bf00      	nop
 800ad24:	e7fe      	b.n	800ad24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ad26:	4b3e      	ldr	r3, [pc, #248]	; (800ae20 <xPortStartScheduler+0x120>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4a3f      	ldr	r2, [pc, #252]	; (800ae28 <xPortStartScheduler+0x128>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d10a      	bne.n	800ad46 <xPortStartScheduler+0x46>
	__asm volatile
 800ad30:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ad34:	f383 8811 	msr	BASEPRI, r3
 800ad38:	f3bf 8f6f 	isb	sy
 800ad3c:	f3bf 8f4f 	dsb	sy
 800ad40:	60fb      	str	r3, [r7, #12]
}
 800ad42:	bf00      	nop
 800ad44:	e7fe      	b.n	800ad44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ad46:	4b39      	ldr	r3, [pc, #228]	; (800ae2c <xPortStartScheduler+0x12c>)
 800ad48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	781b      	ldrb	r3, [r3, #0]
 800ad4e:	b2db      	uxtb	r3, r3
 800ad50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	22ff      	movs	r2, #255	; 0xff
 800ad56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ad60:	78fb      	ldrb	r3, [r7, #3]
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
 800ad68:	b2da      	uxtb	r2, r3
 800ad6a:	4b31      	ldr	r3, [pc, #196]	; (800ae30 <xPortStartScheduler+0x130>)
 800ad6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ad6e:	4b31      	ldr	r3, [pc, #196]	; (800ae34 <xPortStartScheduler+0x134>)
 800ad70:	2207      	movs	r2, #7
 800ad72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad74:	e009      	b.n	800ad8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ad76:	4b2f      	ldr	r3, [pc, #188]	; (800ae34 <xPortStartScheduler+0x134>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	3b01      	subs	r3, #1
 800ad7c:	4a2d      	ldr	r2, [pc, #180]	; (800ae34 <xPortStartScheduler+0x134>)
 800ad7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ad80:	78fb      	ldrb	r3, [r7, #3]
 800ad82:	b2db      	uxtb	r3, r3
 800ad84:	005b      	lsls	r3, r3, #1
 800ad86:	b2db      	uxtb	r3, r3
 800ad88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad8a:	78fb      	ldrb	r3, [r7, #3]
 800ad8c:	b2db      	uxtb	r3, r3
 800ad8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad92:	2b80      	cmp	r3, #128	; 0x80
 800ad94:	d0ef      	beq.n	800ad76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ad96:	4b27      	ldr	r3, [pc, #156]	; (800ae34 <xPortStartScheduler+0x134>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f1c3 0307 	rsb	r3, r3, #7
 800ad9e:	2b04      	cmp	r3, #4
 800ada0:	d00a      	beq.n	800adb8 <xPortStartScheduler+0xb8>
	__asm volatile
 800ada2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ada6:	f383 8811 	msr	BASEPRI, r3
 800adaa:	f3bf 8f6f 	isb	sy
 800adae:	f3bf 8f4f 	dsb	sy
 800adb2:	60bb      	str	r3, [r7, #8]
}
 800adb4:	bf00      	nop
 800adb6:	e7fe      	b.n	800adb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800adb8:	4b1e      	ldr	r3, [pc, #120]	; (800ae34 <xPortStartScheduler+0x134>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	021b      	lsls	r3, r3, #8
 800adbe:	4a1d      	ldr	r2, [pc, #116]	; (800ae34 <xPortStartScheduler+0x134>)
 800adc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800adc2:	4b1c      	ldr	r3, [pc, #112]	; (800ae34 <xPortStartScheduler+0x134>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800adca:	4a1a      	ldr	r2, [pc, #104]	; (800ae34 <xPortStartScheduler+0x134>)
 800adcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	b2da      	uxtb	r2, r3
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800add6:	4b18      	ldr	r3, [pc, #96]	; (800ae38 <xPortStartScheduler+0x138>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a17      	ldr	r2, [pc, #92]	; (800ae38 <xPortStartScheduler+0x138>)
 800addc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ade0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ade2:	4b15      	ldr	r3, [pc, #84]	; (800ae38 <xPortStartScheduler+0x138>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	4a14      	ldr	r2, [pc, #80]	; (800ae38 <xPortStartScheduler+0x138>)
 800ade8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800adec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800adee:	f000 f9a9 	bl	800b144 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800adf2:	4b12      	ldr	r3, [pc, #72]	; (800ae3c <xPortStartScheduler+0x13c>)
 800adf4:	2200      	movs	r2, #0
 800adf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800adf8:	f000 f9e0 	bl	800b1bc <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800adfc:	4b10      	ldr	r3, [pc, #64]	; (800ae40 <xPortStartScheduler+0x140>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	4a0f      	ldr	r2, [pc, #60]	; (800ae40 <xPortStartScheduler+0x140>)
 800ae02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ae06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ae08:	f7ff ff66 	bl	800acd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ae0c:	f001 fc22 	bl	800c654 <vTaskSwitchContext>
	prvTaskExitError();
 800ae10:	f7ff ff22 	bl	800ac58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ae14:	2300      	movs	r3, #0
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3718      	adds	r7, #24
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	e000ed00 	.word	0xe000ed00
 800ae24:	410fc271 	.word	0x410fc271
 800ae28:	410fc270 	.word	0x410fc270
 800ae2c:	e000e400 	.word	0xe000e400
 800ae30:	2000911c 	.word	0x2000911c
 800ae34:	20009120 	.word	0x20009120
 800ae38:	e000ed20 	.word	0xe000ed20
 800ae3c:	20000038 	.word	0x20000038
 800ae40:	e000ef34 	.word	0xe000ef34

0800ae44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ae44:	b480      	push	{r7}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
	__asm volatile
 800ae4a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ae4e:	f383 8811 	msr	BASEPRI, r3
 800ae52:	f3bf 8f6f 	isb	sy
 800ae56:	f3bf 8f4f 	dsb	sy
 800ae5a:	607b      	str	r3, [r7, #4]
}
 800ae5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ae5e:	4b0f      	ldr	r3, [pc, #60]	; (800ae9c <vPortEnterCritical+0x58>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	3301      	adds	r3, #1
 800ae64:	4a0d      	ldr	r2, [pc, #52]	; (800ae9c <vPortEnterCritical+0x58>)
 800ae66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ae68:	4b0c      	ldr	r3, [pc, #48]	; (800ae9c <vPortEnterCritical+0x58>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d10f      	bne.n	800ae90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ae70:	4b0b      	ldr	r3, [pc, #44]	; (800aea0 <vPortEnterCritical+0x5c>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d00a      	beq.n	800ae90 <vPortEnterCritical+0x4c>
	__asm volatile
 800ae7a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ae7e:	f383 8811 	msr	BASEPRI, r3
 800ae82:	f3bf 8f6f 	isb	sy
 800ae86:	f3bf 8f4f 	dsb	sy
 800ae8a:	603b      	str	r3, [r7, #0]
}
 800ae8c:	bf00      	nop
 800ae8e:	e7fe      	b.n	800ae8e <vPortEnterCritical+0x4a>
	}
}
 800ae90:	bf00      	nop
 800ae92:	370c      	adds	r7, #12
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr
 800ae9c:	20000038 	.word	0x20000038
 800aea0:	e000ed04 	.word	0xe000ed04

0800aea4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aea4:	b480      	push	{r7}
 800aea6:	b083      	sub	sp, #12
 800aea8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aeaa:	4b12      	ldr	r3, [pc, #72]	; (800aef4 <vPortExitCritical+0x50>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d10a      	bne.n	800aec8 <vPortExitCritical+0x24>
	__asm volatile
 800aeb2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800aeb6:	f383 8811 	msr	BASEPRI, r3
 800aeba:	f3bf 8f6f 	isb	sy
 800aebe:	f3bf 8f4f 	dsb	sy
 800aec2:	607b      	str	r3, [r7, #4]
}
 800aec4:	bf00      	nop
 800aec6:	e7fe      	b.n	800aec6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aec8:	4b0a      	ldr	r3, [pc, #40]	; (800aef4 <vPortExitCritical+0x50>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	3b01      	subs	r3, #1
 800aece:	4a09      	ldr	r2, [pc, #36]	; (800aef4 <vPortExitCritical+0x50>)
 800aed0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aed2:	4b08      	ldr	r3, [pc, #32]	; (800aef4 <vPortExitCritical+0x50>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d105      	bne.n	800aee6 <vPortExitCritical+0x42>
 800aeda:	2300      	movs	r3, #0
 800aedc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aee4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aee6:	bf00      	nop
 800aee8:	370c      	adds	r7, #12
 800aeea:	46bd      	mov	sp, r7
 800aeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef0:	4770      	bx	lr
 800aef2:	bf00      	nop
 800aef4:	20000038 	.word	0x20000038
	...

0800af00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800af00:	f3ef 8009 	mrs	r0, PSP
 800af04:	f3bf 8f6f 	isb	sy
 800af08:	4b15      	ldr	r3, [pc, #84]	; (800af60 <pxCurrentTCBConst>)
 800af0a:	681a      	ldr	r2, [r3, #0]
 800af0c:	f01e 0f10 	tst.w	lr, #16
 800af10:	bf08      	it	eq
 800af12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800af16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af1a:	6010      	str	r0, [r2, #0]
 800af1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800af20:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 800af24:	f380 8811 	msr	BASEPRI, r0
 800af28:	f3bf 8f4f 	dsb	sy
 800af2c:	f3bf 8f6f 	isb	sy
 800af30:	f001 fb90 	bl	800c654 <vTaskSwitchContext>
 800af34:	f04f 0000 	mov.w	r0, #0
 800af38:	f380 8811 	msr	BASEPRI, r0
 800af3c:	bc09      	pop	{r0, r3}
 800af3e:	6819      	ldr	r1, [r3, #0]
 800af40:	6808      	ldr	r0, [r1, #0]
 800af42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af46:	f01e 0f10 	tst.w	lr, #16
 800af4a:	bf08      	it	eq
 800af4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800af50:	f380 8809 	msr	PSP, r0
 800af54:	f3bf 8f6f 	isb	sy
 800af58:	4770      	bx	lr
 800af5a:	bf00      	nop
 800af5c:	f3af 8000 	nop.w

0800af60 <pxCurrentTCBConst>:
 800af60:	20009164 	.word	0x20009164
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800af64:	bf00      	nop
 800af66:	bf00      	nop

0800af68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
	__asm volatile
 800af6e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800af72:	f383 8811 	msr	BASEPRI, r3
 800af76:	f3bf 8f6f 	isb	sy
 800af7a:	f3bf 8f4f 	dsb	sy
 800af7e:	607b      	str	r3, [r7, #4]
}
 800af80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800af82:	f001 faa5 	bl	800c4d0 <xTaskIncrementTick>
 800af86:	4603      	mov	r3, r0
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d003      	beq.n	800af94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800af8c:	4b06      	ldr	r3, [pc, #24]	; (800afa8 <xPortSysTickHandler+0x40>)
 800af8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af92:	601a      	str	r2, [r3, #0]
 800af94:	2300      	movs	r3, #0
 800af96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	f383 8811 	msr	BASEPRI, r3
}
 800af9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800afa0:	bf00      	nop
 800afa2:	3708      	adds	r7, #8
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}
 800afa8:	e000ed04 	.word	0xe000ed04

0800afac <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800afac:	b580      	push	{r7, lr}
 800afae:	b088      	sub	sp, #32
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800afb4:	4b5d      	ldr	r3, [pc, #372]	; (800b12c <vPortSuppressTicksAndSleep+0x180>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	429a      	cmp	r2, r3
 800afbc:	d902      	bls.n	800afc4 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800afbe:	4b5b      	ldr	r3, [pc, #364]	; (800b12c <vPortSuppressTicksAndSleep+0x180>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800afc4:	4b5a      	ldr	r3, [pc, #360]	; (800b130 <vPortSuppressTicksAndSleep+0x184>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4a59      	ldr	r2, [pc, #356]	; (800b130 <vPortSuppressTicksAndSleep+0x184>)
 800afca:	f023 0301 	bic.w	r3, r3, #1
 800afce:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800afd0:	4b58      	ldr	r3, [pc, #352]	; (800b134 <vPortSuppressTicksAndSleep+0x188>)
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	3b01      	subs	r3, #1
 800afd8:	4957      	ldr	r1, [pc, #348]	; (800b138 <vPortSuppressTicksAndSleep+0x18c>)
 800afda:	6809      	ldr	r1, [r1, #0]
 800afdc:	fb01 f303 	mul.w	r3, r1, r3
 800afe0:	4413      	add	r3, r2
 800afe2:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800afe4:	4b55      	ldr	r3, [pc, #340]	; (800b13c <vPortSuppressTicksAndSleep+0x190>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	69fa      	ldr	r2, [r7, #28]
 800afea:	429a      	cmp	r2, r3
 800afec:	d904      	bls.n	800aff8 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800afee:	4b53      	ldr	r3, [pc, #332]	; (800b13c <vPortSuppressTicksAndSleep+0x190>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	69fa      	ldr	r2, [r7, #28]
 800aff4:	1ad3      	subs	r3, r2, r3
 800aff6:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800aff8:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800affa:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800affe:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800b002:	f001 fd6b 	bl	800cadc <eTaskConfirmSleepModeStatus>
 800b006:	4603      	mov	r3, r0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d110      	bne.n	800b02e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800b00c:	4b49      	ldr	r3, [pc, #292]	; (800b134 <vPortSuppressTicksAndSleep+0x188>)
 800b00e:	4a4c      	ldr	r2, [pc, #304]	; (800b140 <vPortSuppressTicksAndSleep+0x194>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800b014:	4b46      	ldr	r3, [pc, #280]	; (800b130 <vPortSuppressTicksAndSleep+0x184>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4a45      	ldr	r2, [pc, #276]	; (800b130 <vPortSuppressTicksAndSleep+0x184>)
 800b01a:	f043 0301 	orr.w	r3, r3, #1
 800b01e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800b020:	4b45      	ldr	r3, [pc, #276]	; (800b138 <vPortSuppressTicksAndSleep+0x18c>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a46      	ldr	r2, [pc, #280]	; (800b140 <vPortSuppressTicksAndSleep+0x194>)
 800b026:	3b01      	subs	r3, #1
 800b028:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800b02a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800b02c:	e079      	b.n	800b122 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800b02e:	4a44      	ldr	r2, [pc, #272]	; (800b140 <vPortSuppressTicksAndSleep+0x194>)
 800b030:	69fb      	ldr	r3, [r7, #28]
 800b032:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b034:	4b3f      	ldr	r3, [pc, #252]	; (800b134 <vPortSuppressTicksAndSleep+0x188>)
 800b036:	2200      	movs	r2, #0
 800b038:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800b03a:	4b3d      	ldr	r3, [pc, #244]	; (800b130 <vPortSuppressTicksAndSleep+0x184>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4a3c      	ldr	r2, [pc, #240]	; (800b130 <vPortSuppressTicksAndSleep+0x184>)
 800b040:	f043 0301 	orr.w	r3, r3, #1
 800b044:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800b04a:	2300      	movs	r3, #0
 800b04c:	613b      	str	r3, [r7, #16]
 800b04e:	6938      	ldr	r0, [r7, #16]
 800b050:	f7f7 fd29 	bl	8002aa6 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d004      	beq.n	800b064 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800b05a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800b05e:	bf30      	wfi
				__asm volatile( "isb" );
 800b060:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f7f7 fd28 	bl	8002aba <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800b06a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800b06c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800b070:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800b074:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800b076:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800b07a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800b07e:	4b2c      	ldr	r3, [pc, #176]	; (800b130 <vPortSuppressTicksAndSleep+0x184>)
 800b080:	2206      	movs	r2, #6
 800b082:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800b084:	4b2a      	ldr	r3, [pc, #168]	; (800b130 <vPortSuppressTicksAndSleep+0x184>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d01d      	beq.n	800b0cc <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800b090:	4b29      	ldr	r3, [pc, #164]	; (800b138 <vPortSuppressTicksAndSleep+0x18c>)
 800b092:	681a      	ldr	r2, [r3, #0]
 800b094:	4b27      	ldr	r3, [pc, #156]	; (800b134 <vPortSuppressTicksAndSleep+0x188>)
 800b096:	6819      	ldr	r1, [r3, #0]
 800b098:	69fb      	ldr	r3, [r7, #28]
 800b09a:	1acb      	subs	r3, r1, r3
 800b09c:	4413      	add	r3, r2
 800b09e:	3b01      	subs	r3, #1
 800b0a0:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800b0a2:	4b26      	ldr	r3, [pc, #152]	; (800b13c <vPortSuppressTicksAndSleep+0x190>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	697a      	ldr	r2, [r7, #20]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d304      	bcc.n	800b0b6 <vPortSuppressTicksAndSleep+0x10a>
 800b0ac:	4b22      	ldr	r3, [pc, #136]	; (800b138 <vPortSuppressTicksAndSleep+0x18c>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	697a      	ldr	r2, [r7, #20]
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d903      	bls.n	800b0be <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800b0b6:	4b20      	ldr	r3, [pc, #128]	; (800b138 <vPortSuppressTicksAndSleep+0x18c>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	3b01      	subs	r3, #1
 800b0bc:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800b0be:	4a20      	ldr	r2, [pc, #128]	; (800b140 <vPortSuppressTicksAndSleep+0x194>)
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	3b01      	subs	r3, #1
 800b0c8:	61bb      	str	r3, [r7, #24]
 800b0ca:	e018      	b.n	800b0fe <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800b0cc:	4b1a      	ldr	r3, [pc, #104]	; (800b138 <vPortSuppressTicksAndSleep+0x18c>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	687a      	ldr	r2, [r7, #4]
 800b0d2:	fb03 f202 	mul.w	r2, r3, r2
 800b0d6:	4b17      	ldr	r3, [pc, #92]	; (800b134 <vPortSuppressTicksAndSleep+0x188>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	1ad3      	subs	r3, r2, r3
 800b0dc:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800b0de:	4b16      	ldr	r3, [pc, #88]	; (800b138 <vPortSuppressTicksAndSleep+0x18c>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	68fa      	ldr	r2, [r7, #12]
 800b0e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0e8:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800b0ea:	69bb      	ldr	r3, [r7, #24]
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	4a12      	ldr	r2, [pc, #72]	; (800b138 <vPortSuppressTicksAndSleep+0x18c>)
 800b0f0:	6812      	ldr	r2, [r2, #0]
 800b0f2:	fb03 f202 	mul.w	r2, r3, r2
 800b0f6:	4912      	ldr	r1, [pc, #72]	; (800b140 <vPortSuppressTicksAndSleep+0x194>)
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	1ad3      	subs	r3, r2, r3
 800b0fc:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b0fe:	4b0d      	ldr	r3, [pc, #52]	; (800b134 <vPortSuppressTicksAndSleep+0x188>)
 800b100:	2200      	movs	r2, #0
 800b102:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800b104:	4b0a      	ldr	r3, [pc, #40]	; (800b130 <vPortSuppressTicksAndSleep+0x184>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4a09      	ldr	r2, [pc, #36]	; (800b130 <vPortSuppressTicksAndSleep+0x184>)
 800b10a:	f043 0301 	orr.w	r3, r3, #1
 800b10e:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800b110:	69b8      	ldr	r0, [r7, #24]
 800b112:	f001 f9b5 	bl	800c480 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800b116:	4b08      	ldr	r3, [pc, #32]	; (800b138 <vPortSuppressTicksAndSleep+0x18c>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4a09      	ldr	r2, [pc, #36]	; (800b140 <vPortSuppressTicksAndSleep+0x194>)
 800b11c:	3b01      	subs	r3, #1
 800b11e:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800b120:	b662      	cpsie	i
	}
 800b122:	bf00      	nop
 800b124:	3720      	adds	r7, #32
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}
 800b12a:	bf00      	nop
 800b12c:	20009114 	.word	0x20009114
 800b130:	e000e010 	.word	0xe000e010
 800b134:	e000e018 	.word	0xe000e018
 800b138:	20009110 	.word	0x20009110
 800b13c:	20009118 	.word	0x20009118
 800b140:	e000e014 	.word	0xe000e014

0800b144 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b144:	b480      	push	{r7}
 800b146:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800b148:	4b14      	ldr	r3, [pc, #80]	; (800b19c <vPortSetupTimerInterrupt+0x58>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	4a14      	ldr	r2, [pc, #80]	; (800b1a0 <vPortSetupTimerInterrupt+0x5c>)
 800b14e:	fba2 2303 	umull	r2, r3, r2, r3
 800b152:	099b      	lsrs	r3, r3, #6
 800b154:	4a13      	ldr	r2, [pc, #76]	; (800b1a4 <vPortSetupTimerInterrupt+0x60>)
 800b156:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800b158:	4b12      	ldr	r3, [pc, #72]	; (800b1a4 <vPortSetupTimerInterrupt+0x60>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800b160:	fbb2 f3f3 	udiv	r3, r2, r3
 800b164:	4a10      	ldr	r2, [pc, #64]	; (800b1a8 <vPortSetupTimerInterrupt+0x64>)
 800b166:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800b168:	4b10      	ldr	r3, [pc, #64]	; (800b1ac <vPortSetupTimerInterrupt+0x68>)
 800b16a:	222d      	movs	r2, #45	; 0x2d
 800b16c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b16e:	4b10      	ldr	r3, [pc, #64]	; (800b1b0 <vPortSetupTimerInterrupt+0x6c>)
 800b170:	2200      	movs	r2, #0
 800b172:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b174:	4b0f      	ldr	r3, [pc, #60]	; (800b1b4 <vPortSetupTimerInterrupt+0x70>)
 800b176:	2200      	movs	r2, #0
 800b178:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b17a:	4b08      	ldr	r3, [pc, #32]	; (800b19c <vPortSetupTimerInterrupt+0x58>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	4a08      	ldr	r2, [pc, #32]	; (800b1a0 <vPortSetupTimerInterrupt+0x5c>)
 800b180:	fba2 2303 	umull	r2, r3, r2, r3
 800b184:	099b      	lsrs	r3, r3, #6
 800b186:	4a0c      	ldr	r2, [pc, #48]	; (800b1b8 <vPortSetupTimerInterrupt+0x74>)
 800b188:	3b01      	subs	r3, #1
 800b18a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b18c:	4b08      	ldr	r3, [pc, #32]	; (800b1b0 <vPortSetupTimerInterrupt+0x6c>)
 800b18e:	2207      	movs	r2, #7
 800b190:	601a      	str	r2, [r3, #0]
}
 800b192:	bf00      	nop
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr
 800b19c:	2000001c 	.word	0x2000001c
 800b1a0:	10624dd3 	.word	0x10624dd3
 800b1a4:	20009110 	.word	0x20009110
 800b1a8:	20009114 	.word	0x20009114
 800b1ac:	20009118 	.word	0x20009118
 800b1b0:	e000e010 	.word	0xe000e010
 800b1b4:	e000e018 	.word	0xe000e018
 800b1b8:	e000e014 	.word	0xe000e014

0800b1bc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b1bc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b1cc <vPortEnableVFP+0x10>
 800b1c0:	6801      	ldr	r1, [r0, #0]
 800b1c2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b1c6:	6001      	str	r1, [r0, #0]
 800b1c8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b1ca:	bf00      	nop
 800b1cc:	e000ed88 	.word	0xe000ed88

0800b1d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b085      	sub	sp, #20
 800b1d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b1d6:	f3ef 8305 	mrs	r3, IPSR
 800b1da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	2b0f      	cmp	r3, #15
 800b1e0:	d914      	bls.n	800b20c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b1e2:	4a17      	ldr	r2, [pc, #92]	; (800b240 <vPortValidateInterruptPriority+0x70>)
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	4413      	add	r3, r2
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b1ec:	4b15      	ldr	r3, [pc, #84]	; (800b244 <vPortValidateInterruptPriority+0x74>)
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	7afa      	ldrb	r2, [r7, #11]
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d20a      	bcs.n	800b20c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b1f6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b1fa:	f383 8811 	msr	BASEPRI, r3
 800b1fe:	f3bf 8f6f 	isb	sy
 800b202:	f3bf 8f4f 	dsb	sy
 800b206:	607b      	str	r3, [r7, #4]
}
 800b208:	bf00      	nop
 800b20a:	e7fe      	b.n	800b20a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b20c:	4b0e      	ldr	r3, [pc, #56]	; (800b248 <vPortValidateInterruptPriority+0x78>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b214:	4b0d      	ldr	r3, [pc, #52]	; (800b24c <vPortValidateInterruptPriority+0x7c>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	429a      	cmp	r2, r3
 800b21a:	d90a      	bls.n	800b232 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b21c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b220:	f383 8811 	msr	BASEPRI, r3
 800b224:	f3bf 8f6f 	isb	sy
 800b228:	f3bf 8f4f 	dsb	sy
 800b22c:	603b      	str	r3, [r7, #0]
}
 800b22e:	bf00      	nop
 800b230:	e7fe      	b.n	800b230 <vPortValidateInterruptPriority+0x60>
	}
 800b232:	bf00      	nop
 800b234:	3714      	adds	r7, #20
 800b236:	46bd      	mov	sp, r7
 800b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23c:	4770      	bx	lr
 800b23e:	bf00      	nop
 800b240:	e000e3f0 	.word	0xe000e3f0
 800b244:	2000911c 	.word	0x2000911c
 800b248:	e000ed0c 	.word	0xe000ed0c
 800b24c:	20009120 	.word	0x20009120

0800b250 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d10a      	bne.n	800b27a <xQueueGenericReset+0x2a>
	__asm volatile
 800b264:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b268:	f383 8811 	msr	BASEPRI, r3
 800b26c:	f3bf 8f6f 	isb	sy
 800b270:	f3bf 8f4f 	dsb	sy
 800b274:	60bb      	str	r3, [r7, #8]
}
 800b276:	bf00      	nop
 800b278:	e7fe      	b.n	800b278 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b27a:	f7ff fde3 	bl	800ae44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b286:	68f9      	ldr	r1, [r7, #12]
 800b288:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b28a:	fb01 f303 	mul.w	r3, r1, r3
 800b28e:	441a      	add	r2, r3
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	2200      	movs	r2, #0
 800b298:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681a      	ldr	r2, [r3, #0]
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681a      	ldr	r2, [r3, #0]
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2aa:	3b01      	subs	r3, #1
 800b2ac:	68f9      	ldr	r1, [r7, #12]
 800b2ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b2b0:	fb01 f303 	mul.w	r3, r1, r3
 800b2b4:	441a      	add	r2, r3
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	22ff      	movs	r2, #255	; 0xff
 800b2be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	22ff      	movs	r2, #255	; 0xff
 800b2c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d114      	bne.n	800b2fa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	691b      	ldr	r3, [r3, #16]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d01a      	beq.n	800b30e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	3310      	adds	r3, #16
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f001 fac1 	bl	800c864 <xTaskRemoveFromEventList>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d012      	beq.n	800b30e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b2e8:	4b0c      	ldr	r3, [pc, #48]	; (800b31c <xQueueGenericReset+0xcc>)
 800b2ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2ee:	601a      	str	r2, [r3, #0]
 800b2f0:	f3bf 8f4f 	dsb	sy
 800b2f4:	f3bf 8f6f 	isb	sy
 800b2f8:	e009      	b.n	800b30e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	3310      	adds	r3, #16
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7ff fbc2 	bl	800aa88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	3324      	adds	r3, #36	; 0x24
 800b308:	4618      	mov	r0, r3
 800b30a:	f7ff fbbd 	bl	800aa88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b30e:	f7ff fdc9 	bl	800aea4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b312:	2301      	movs	r3, #1
}
 800b314:	4618      	mov	r0, r3
 800b316:	3710      	adds	r7, #16
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}
 800b31c:	e000ed04 	.word	0xe000ed04

0800b320 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b320:	b580      	push	{r7, lr}
 800b322:	b08e      	sub	sp, #56	; 0x38
 800b324:	af02      	add	r7, sp, #8
 800b326:	60f8      	str	r0, [r7, #12]
 800b328:	60b9      	str	r1, [r7, #8]
 800b32a:	607a      	str	r2, [r7, #4]
 800b32c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d10a      	bne.n	800b34a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b334:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b338:	f383 8811 	msr	BASEPRI, r3
 800b33c:	f3bf 8f6f 	isb	sy
 800b340:	f3bf 8f4f 	dsb	sy
 800b344:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b346:	bf00      	nop
 800b348:	e7fe      	b.n	800b348 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d10a      	bne.n	800b366 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b350:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b354:	f383 8811 	msr	BASEPRI, r3
 800b358:	f3bf 8f6f 	isb	sy
 800b35c:	f3bf 8f4f 	dsb	sy
 800b360:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b362:	bf00      	nop
 800b364:	e7fe      	b.n	800b364 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d002      	beq.n	800b372 <xQueueGenericCreateStatic+0x52>
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d001      	beq.n	800b376 <xQueueGenericCreateStatic+0x56>
 800b372:	2301      	movs	r3, #1
 800b374:	e000      	b.n	800b378 <xQueueGenericCreateStatic+0x58>
 800b376:	2300      	movs	r3, #0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d10a      	bne.n	800b392 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b37c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b380:	f383 8811 	msr	BASEPRI, r3
 800b384:	f3bf 8f6f 	isb	sy
 800b388:	f3bf 8f4f 	dsb	sy
 800b38c:	623b      	str	r3, [r7, #32]
}
 800b38e:	bf00      	nop
 800b390:	e7fe      	b.n	800b390 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d102      	bne.n	800b39e <xQueueGenericCreateStatic+0x7e>
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d101      	bne.n	800b3a2 <xQueueGenericCreateStatic+0x82>
 800b39e:	2301      	movs	r3, #1
 800b3a0:	e000      	b.n	800b3a4 <xQueueGenericCreateStatic+0x84>
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d10a      	bne.n	800b3be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b3a8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b3ac:	f383 8811 	msr	BASEPRI, r3
 800b3b0:	f3bf 8f6f 	isb	sy
 800b3b4:	f3bf 8f4f 	dsb	sy
 800b3b8:	61fb      	str	r3, [r7, #28]
}
 800b3ba:	bf00      	nop
 800b3bc:	e7fe      	b.n	800b3bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b3be:	2350      	movs	r3, #80	; 0x50
 800b3c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	2b50      	cmp	r3, #80	; 0x50
 800b3c6:	d00a      	beq.n	800b3de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b3c8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b3cc:	f383 8811 	msr	BASEPRI, r3
 800b3d0:	f3bf 8f6f 	isb	sy
 800b3d4:	f3bf 8f4f 	dsb	sy
 800b3d8:	61bb      	str	r3, [r7, #24]
}
 800b3da:	bf00      	nop
 800b3dc:	e7fe      	b.n	800b3dc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b3de:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d00d      	beq.n	800b406 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b3f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3f8:	9300      	str	r3, [sp, #0]
 800b3fa:	4613      	mov	r3, r2
 800b3fc:	687a      	ldr	r2, [r7, #4]
 800b3fe:	68b9      	ldr	r1, [r7, #8]
 800b400:	68f8      	ldr	r0, [r7, #12]
 800b402:	f000 f805 	bl	800b410 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b408:	4618      	mov	r0, r3
 800b40a:	3730      	adds	r7, #48	; 0x30
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}

0800b410 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b084      	sub	sp, #16
 800b414:	af00      	add	r7, sp, #0
 800b416:	60f8      	str	r0, [r7, #12]
 800b418:	60b9      	str	r1, [r7, #8]
 800b41a:	607a      	str	r2, [r7, #4]
 800b41c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d103      	bne.n	800b42c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	69ba      	ldr	r2, [r7, #24]
 800b428:	601a      	str	r2, [r3, #0]
 800b42a:	e002      	b.n	800b432 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b42c:	69bb      	ldr	r3, [r7, #24]
 800b42e:	687a      	ldr	r2, [r7, #4]
 800b430:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b432:	69bb      	ldr	r3, [r7, #24]
 800b434:	68fa      	ldr	r2, [r7, #12]
 800b436:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b438:	69bb      	ldr	r3, [r7, #24]
 800b43a:	68ba      	ldr	r2, [r7, #8]
 800b43c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b43e:	2101      	movs	r1, #1
 800b440:	69b8      	ldr	r0, [r7, #24]
 800b442:	f7ff ff05 	bl	800b250 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b446:	69bb      	ldr	r3, [r7, #24]
 800b448:	78fa      	ldrb	r2, [r7, #3]
 800b44a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b44e:	bf00      	nop
 800b450:	3710      	adds	r7, #16
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
	...

0800b458 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b08e      	sub	sp, #56	; 0x38
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	60f8      	str	r0, [r7, #12]
 800b460:	60b9      	str	r1, [r7, #8]
 800b462:	607a      	str	r2, [r7, #4]
 800b464:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b466:	2300      	movs	r3, #0
 800b468:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b470:	2b00      	cmp	r3, #0
 800b472:	d10a      	bne.n	800b48a <xQueueGenericSend+0x32>
	__asm volatile
 800b474:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b478:	f383 8811 	msr	BASEPRI, r3
 800b47c:	f3bf 8f6f 	isb	sy
 800b480:	f3bf 8f4f 	dsb	sy
 800b484:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b486:	bf00      	nop
 800b488:	e7fe      	b.n	800b488 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d103      	bne.n	800b498 <xQueueGenericSend+0x40>
 800b490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b494:	2b00      	cmp	r3, #0
 800b496:	d101      	bne.n	800b49c <xQueueGenericSend+0x44>
 800b498:	2301      	movs	r3, #1
 800b49a:	e000      	b.n	800b49e <xQueueGenericSend+0x46>
 800b49c:	2300      	movs	r3, #0
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d10a      	bne.n	800b4b8 <xQueueGenericSend+0x60>
	__asm volatile
 800b4a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b4a6:	f383 8811 	msr	BASEPRI, r3
 800b4aa:	f3bf 8f6f 	isb	sy
 800b4ae:	f3bf 8f4f 	dsb	sy
 800b4b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b4b4:	bf00      	nop
 800b4b6:	e7fe      	b.n	800b4b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	2b02      	cmp	r3, #2
 800b4bc:	d103      	bne.n	800b4c6 <xQueueGenericSend+0x6e>
 800b4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4c2:	2b01      	cmp	r3, #1
 800b4c4:	d101      	bne.n	800b4ca <xQueueGenericSend+0x72>
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	e000      	b.n	800b4cc <xQueueGenericSend+0x74>
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d10a      	bne.n	800b4e6 <xQueueGenericSend+0x8e>
	__asm volatile
 800b4d0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b4d4:	f383 8811 	msr	BASEPRI, r3
 800b4d8:	f3bf 8f6f 	isb	sy
 800b4dc:	f3bf 8f4f 	dsb	sy
 800b4e0:	623b      	str	r3, [r7, #32]
}
 800b4e2:	bf00      	nop
 800b4e4:	e7fe      	b.n	800b4e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b4e6:	f001 fbeb 	bl	800ccc0 <xTaskGetSchedulerState>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d102      	bne.n	800b4f6 <xQueueGenericSend+0x9e>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d101      	bne.n	800b4fa <xQueueGenericSend+0xa2>
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e000      	b.n	800b4fc <xQueueGenericSend+0xa4>
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d10a      	bne.n	800b516 <xQueueGenericSend+0xbe>
	__asm volatile
 800b500:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b504:	f383 8811 	msr	BASEPRI, r3
 800b508:	f3bf 8f6f 	isb	sy
 800b50c:	f3bf 8f4f 	dsb	sy
 800b510:	61fb      	str	r3, [r7, #28]
}
 800b512:	bf00      	nop
 800b514:	e7fe      	b.n	800b514 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b516:	f7ff fc95 	bl	800ae44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b51c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b522:	429a      	cmp	r2, r3
 800b524:	d302      	bcc.n	800b52c <xQueueGenericSend+0xd4>
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	2b02      	cmp	r3, #2
 800b52a:	d129      	bne.n	800b580 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b52c:	683a      	ldr	r2, [r7, #0]
 800b52e:	68b9      	ldr	r1, [r7, #8]
 800b530:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b532:	f000 fa0b 	bl	800b94c <prvCopyDataToQueue>
 800b536:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d010      	beq.n	800b562 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b542:	3324      	adds	r3, #36	; 0x24
 800b544:	4618      	mov	r0, r3
 800b546:	f001 f98d 	bl	800c864 <xTaskRemoveFromEventList>
 800b54a:	4603      	mov	r3, r0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d013      	beq.n	800b578 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b550:	4b3f      	ldr	r3, [pc, #252]	; (800b650 <xQueueGenericSend+0x1f8>)
 800b552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b556:	601a      	str	r2, [r3, #0]
 800b558:	f3bf 8f4f 	dsb	sy
 800b55c:	f3bf 8f6f 	isb	sy
 800b560:	e00a      	b.n	800b578 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b564:	2b00      	cmp	r3, #0
 800b566:	d007      	beq.n	800b578 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b568:	4b39      	ldr	r3, [pc, #228]	; (800b650 <xQueueGenericSend+0x1f8>)
 800b56a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b56e:	601a      	str	r2, [r3, #0]
 800b570:	f3bf 8f4f 	dsb	sy
 800b574:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b578:	f7ff fc94 	bl	800aea4 <vPortExitCritical>
				return pdPASS;
 800b57c:	2301      	movs	r3, #1
 800b57e:	e063      	b.n	800b648 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d103      	bne.n	800b58e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b586:	f7ff fc8d 	bl	800aea4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b58a:	2300      	movs	r3, #0
 800b58c:	e05c      	b.n	800b648 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b58e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b590:	2b00      	cmp	r3, #0
 800b592:	d106      	bne.n	800b5a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b594:	f107 0314 	add.w	r3, r7, #20
 800b598:	4618      	mov	r0, r3
 800b59a:	f001 f9c9 	bl	800c930 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b59e:	2301      	movs	r3, #1
 800b5a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b5a2:	f7ff fc7f 	bl	800aea4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b5a6:	f000 fe77 	bl	800c298 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b5aa:	f7ff fc4b 	bl	800ae44 <vPortEnterCritical>
 800b5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b5b4:	b25b      	sxtb	r3, r3
 800b5b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ba:	d103      	bne.n	800b5c4 <xQueueGenericSend+0x16c>
 800b5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5be:	2200      	movs	r2, #0
 800b5c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5ca:	b25b      	sxtb	r3, r3
 800b5cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5d0:	d103      	bne.n	800b5da <xQueueGenericSend+0x182>
 800b5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b5da:	f7ff fc63 	bl	800aea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b5de:	1d3a      	adds	r2, r7, #4
 800b5e0:	f107 0314 	add.w	r3, r7, #20
 800b5e4:	4611      	mov	r1, r2
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f001 f9b8 	bl	800c95c <xTaskCheckForTimeOut>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d124      	bne.n	800b63c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b5f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b5f4:	f000 faa2 	bl	800bb3c <prvIsQueueFull>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d018      	beq.n	800b630 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b600:	3310      	adds	r3, #16
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	4611      	mov	r1, r2
 800b606:	4618      	mov	r0, r3
 800b608:	f001 f8dc 	bl	800c7c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b60c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b60e:	f000 fa2d 	bl	800ba6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b612:	f000 fe87 	bl	800c324 <xTaskResumeAll>
 800b616:	4603      	mov	r3, r0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	f47f af7c 	bne.w	800b516 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b61e:	4b0c      	ldr	r3, [pc, #48]	; (800b650 <xQueueGenericSend+0x1f8>)
 800b620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b624:	601a      	str	r2, [r3, #0]
 800b626:	f3bf 8f4f 	dsb	sy
 800b62a:	f3bf 8f6f 	isb	sy
 800b62e:	e772      	b.n	800b516 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b630:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b632:	f000 fa1b 	bl	800ba6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b636:	f000 fe75 	bl	800c324 <xTaskResumeAll>
 800b63a:	e76c      	b.n	800b516 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b63c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b63e:	f000 fa15 	bl	800ba6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b642:	f000 fe6f 	bl	800c324 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b646:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3738      	adds	r7, #56	; 0x38
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}
 800b650:	e000ed04 	.word	0xe000ed04

0800b654 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b090      	sub	sp, #64	; 0x40
 800b658:	af00      	add	r7, sp, #0
 800b65a:	60f8      	str	r0, [r7, #12]
 800b65c:	60b9      	str	r1, [r7, #8]
 800b65e:	607a      	str	r2, [r7, #4]
 800b660:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d10a      	bne.n	800b682 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b66c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b670:	f383 8811 	msr	BASEPRI, r3
 800b674:	f3bf 8f6f 	isb	sy
 800b678:	f3bf 8f4f 	dsb	sy
 800b67c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b67e:	bf00      	nop
 800b680:	e7fe      	b.n	800b680 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d103      	bne.n	800b690 <xQueueGenericSendFromISR+0x3c>
 800b688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b68a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d101      	bne.n	800b694 <xQueueGenericSendFromISR+0x40>
 800b690:	2301      	movs	r3, #1
 800b692:	e000      	b.n	800b696 <xQueueGenericSendFromISR+0x42>
 800b694:	2300      	movs	r3, #0
 800b696:	2b00      	cmp	r3, #0
 800b698:	d10a      	bne.n	800b6b0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b69a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b69e:	f383 8811 	msr	BASEPRI, r3
 800b6a2:	f3bf 8f6f 	isb	sy
 800b6a6:	f3bf 8f4f 	dsb	sy
 800b6aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b6ac:	bf00      	nop
 800b6ae:	e7fe      	b.n	800b6ae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	2b02      	cmp	r3, #2
 800b6b4:	d103      	bne.n	800b6be <xQueueGenericSendFromISR+0x6a>
 800b6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6ba:	2b01      	cmp	r3, #1
 800b6bc:	d101      	bne.n	800b6c2 <xQueueGenericSendFromISR+0x6e>
 800b6be:	2301      	movs	r3, #1
 800b6c0:	e000      	b.n	800b6c4 <xQueueGenericSendFromISR+0x70>
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d10a      	bne.n	800b6de <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b6c8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b6cc:	f383 8811 	msr	BASEPRI, r3
 800b6d0:	f3bf 8f6f 	isb	sy
 800b6d4:	f3bf 8f4f 	dsb	sy
 800b6d8:	623b      	str	r3, [r7, #32]
}
 800b6da:	bf00      	nop
 800b6dc:	e7fe      	b.n	800b6dc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b6de:	f7ff fd77 	bl	800b1d0 <vPortValidateInterruptPriority>
	__asm volatile
 800b6e2:	f3ef 8211 	mrs	r2, BASEPRI
 800b6e6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b6ea:	f383 8811 	msr	BASEPRI, r3
 800b6ee:	f3bf 8f6f 	isb	sy
 800b6f2:	f3bf 8f4f 	dsb	sy
 800b6f6:	61fa      	str	r2, [r7, #28]
 800b6f8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800b6fa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b6fc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b706:	429a      	cmp	r2, r3
 800b708:	d302      	bcc.n	800b710 <xQueueGenericSendFromISR+0xbc>
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	2b02      	cmp	r3, #2
 800b70e:	d12f      	bne.n	800b770 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b712:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b71c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b71e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b720:	683a      	ldr	r2, [r7, #0]
 800b722:	68b9      	ldr	r1, [r7, #8]
 800b724:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b726:	f000 f911 	bl	800b94c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b72a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b72e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b732:	d112      	bne.n	800b75a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d016      	beq.n	800b76a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b73e:	3324      	adds	r3, #36	; 0x24
 800b740:	4618      	mov	r0, r3
 800b742:	f001 f88f 	bl	800c864 <xTaskRemoveFromEventList>
 800b746:	4603      	mov	r3, r0
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d00e      	beq.n	800b76a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d00b      	beq.n	800b76a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2201      	movs	r2, #1
 800b756:	601a      	str	r2, [r3, #0]
 800b758:	e007      	b.n	800b76a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b75a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b75e:	3301      	adds	r3, #1
 800b760:	b2db      	uxtb	r3, r3
 800b762:	b25a      	sxtb	r2, r3
 800b764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b76a:	2301      	movs	r3, #1
 800b76c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b76e:	e001      	b.n	800b774 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b770:	2300      	movs	r3, #0
 800b772:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b776:	617b      	str	r3, [r7, #20]
	__asm volatile
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	f383 8811 	msr	BASEPRI, r3
}
 800b77e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b782:	4618      	mov	r0, r3
 800b784:	3740      	adds	r7, #64	; 0x40
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
	...

0800b78c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b08c      	sub	sp, #48	; 0x30
 800b790:	af00      	add	r7, sp, #0
 800b792:	60f8      	str	r0, [r7, #12]
 800b794:	60b9      	str	r1, [r7, #8]
 800b796:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b798:	2300      	movs	r3, #0
 800b79a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d10a      	bne.n	800b7bc <xQueueReceive+0x30>
	__asm volatile
 800b7a6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b7aa:	f383 8811 	msr	BASEPRI, r3
 800b7ae:	f3bf 8f6f 	isb	sy
 800b7b2:	f3bf 8f4f 	dsb	sy
 800b7b6:	623b      	str	r3, [r7, #32]
}
 800b7b8:	bf00      	nop
 800b7ba:	e7fe      	b.n	800b7ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d103      	bne.n	800b7ca <xQueueReceive+0x3e>
 800b7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d101      	bne.n	800b7ce <xQueueReceive+0x42>
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	e000      	b.n	800b7d0 <xQueueReceive+0x44>
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d10a      	bne.n	800b7ea <xQueueReceive+0x5e>
	__asm volatile
 800b7d4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b7d8:	f383 8811 	msr	BASEPRI, r3
 800b7dc:	f3bf 8f6f 	isb	sy
 800b7e0:	f3bf 8f4f 	dsb	sy
 800b7e4:	61fb      	str	r3, [r7, #28]
}
 800b7e6:	bf00      	nop
 800b7e8:	e7fe      	b.n	800b7e8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b7ea:	f001 fa69 	bl	800ccc0 <xTaskGetSchedulerState>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d102      	bne.n	800b7fa <xQueueReceive+0x6e>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d101      	bne.n	800b7fe <xQueueReceive+0x72>
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	e000      	b.n	800b800 <xQueueReceive+0x74>
 800b7fe:	2300      	movs	r3, #0
 800b800:	2b00      	cmp	r3, #0
 800b802:	d10a      	bne.n	800b81a <xQueueReceive+0x8e>
	__asm volatile
 800b804:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b808:	f383 8811 	msr	BASEPRI, r3
 800b80c:	f3bf 8f6f 	isb	sy
 800b810:	f3bf 8f4f 	dsb	sy
 800b814:	61bb      	str	r3, [r7, #24]
}
 800b816:	bf00      	nop
 800b818:	e7fe      	b.n	800b818 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b81a:	f7ff fb13 	bl	800ae44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b822:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b826:	2b00      	cmp	r3, #0
 800b828:	d01f      	beq.n	800b86a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b82a:	68b9      	ldr	r1, [r7, #8]
 800b82c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b82e:	f000 f8f7 	bl	800ba20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b834:	1e5a      	subs	r2, r3, #1
 800b836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b838:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83c:	691b      	ldr	r3, [r3, #16]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d00f      	beq.n	800b862 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b844:	3310      	adds	r3, #16
 800b846:	4618      	mov	r0, r3
 800b848:	f001 f80c 	bl	800c864 <xTaskRemoveFromEventList>
 800b84c:	4603      	mov	r3, r0
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d007      	beq.n	800b862 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b852:	4b3d      	ldr	r3, [pc, #244]	; (800b948 <xQueueReceive+0x1bc>)
 800b854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b858:	601a      	str	r2, [r3, #0]
 800b85a:	f3bf 8f4f 	dsb	sy
 800b85e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b862:	f7ff fb1f 	bl	800aea4 <vPortExitCritical>
				return pdPASS;
 800b866:	2301      	movs	r3, #1
 800b868:	e069      	b.n	800b93e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d103      	bne.n	800b878 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b870:	f7ff fb18 	bl	800aea4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b874:	2300      	movs	r3, #0
 800b876:	e062      	b.n	800b93e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d106      	bne.n	800b88c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b87e:	f107 0310 	add.w	r3, r7, #16
 800b882:	4618      	mov	r0, r3
 800b884:	f001 f854 	bl	800c930 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b888:	2301      	movs	r3, #1
 800b88a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b88c:	f7ff fb0a 	bl	800aea4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b890:	f000 fd02 	bl	800c298 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b894:	f7ff fad6 	bl	800ae44 <vPortEnterCritical>
 800b898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b89e:	b25b      	sxtb	r3, r3
 800b8a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8a4:	d103      	bne.n	800b8ae <xQueueReceive+0x122>
 800b8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8b4:	b25b      	sxtb	r3, r3
 800b8b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ba:	d103      	bne.n	800b8c4 <xQueueReceive+0x138>
 800b8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8be:	2200      	movs	r2, #0
 800b8c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8c4:	f7ff faee 	bl	800aea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b8c8:	1d3a      	adds	r2, r7, #4
 800b8ca:	f107 0310 	add.w	r3, r7, #16
 800b8ce:	4611      	mov	r1, r2
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f001 f843 	bl	800c95c <xTaskCheckForTimeOut>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d123      	bne.n	800b924 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b8dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8de:	f000 f917 	bl	800bb10 <prvIsQueueEmpty>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d017      	beq.n	800b918 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ea:	3324      	adds	r3, #36	; 0x24
 800b8ec:	687a      	ldr	r2, [r7, #4]
 800b8ee:	4611      	mov	r1, r2
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f000 ff67 	bl	800c7c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b8f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8f8:	f000 f8b8 	bl	800ba6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b8fc:	f000 fd12 	bl	800c324 <xTaskResumeAll>
 800b900:	4603      	mov	r3, r0
 800b902:	2b00      	cmp	r3, #0
 800b904:	d189      	bne.n	800b81a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b906:	4b10      	ldr	r3, [pc, #64]	; (800b948 <xQueueReceive+0x1bc>)
 800b908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b90c:	601a      	str	r2, [r3, #0]
 800b90e:	f3bf 8f4f 	dsb	sy
 800b912:	f3bf 8f6f 	isb	sy
 800b916:	e780      	b.n	800b81a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b918:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b91a:	f000 f8a7 	bl	800ba6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b91e:	f000 fd01 	bl	800c324 <xTaskResumeAll>
 800b922:	e77a      	b.n	800b81a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b926:	f000 f8a1 	bl	800ba6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b92a:	f000 fcfb 	bl	800c324 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b92e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b930:	f000 f8ee 	bl	800bb10 <prvIsQueueEmpty>
 800b934:	4603      	mov	r3, r0
 800b936:	2b00      	cmp	r3, #0
 800b938:	f43f af6f 	beq.w	800b81a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b93c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3730      	adds	r7, #48	; 0x30
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop
 800b948:	e000ed04 	.word	0xe000ed04

0800b94c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b086      	sub	sp, #24
 800b950:	af00      	add	r7, sp, #0
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	60b9      	str	r1, [r7, #8]
 800b956:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b958:	2300      	movs	r3, #0
 800b95a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b960:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b966:	2b00      	cmp	r3, #0
 800b968:	d10d      	bne.n	800b986 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d14d      	bne.n	800ba0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	689b      	ldr	r3, [r3, #8]
 800b976:	4618      	mov	r0, r3
 800b978:	f001 f9c0 	bl	800ccfc <xTaskPriorityDisinherit>
 800b97c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2200      	movs	r2, #0
 800b982:	609a      	str	r2, [r3, #8]
 800b984:	e043      	b.n	800ba0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d119      	bne.n	800b9c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	6858      	ldr	r0, [r3, #4]
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b994:	461a      	mov	r2, r3
 800b996:	68b9      	ldr	r1, [r7, #8]
 800b998:	f003 f85c 	bl	800ea54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	685a      	ldr	r2, [r3, #4]
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9a4:	441a      	add	r2, r3
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	685a      	ldr	r2, [r3, #4]
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	689b      	ldr	r3, [r3, #8]
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d32b      	bcc.n	800ba0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	605a      	str	r2, [r3, #4]
 800b9be:	e026      	b.n	800ba0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	68d8      	ldr	r0, [r3, #12]
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	68b9      	ldr	r1, [r7, #8]
 800b9cc:	f003 f842 	bl	800ea54 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	68da      	ldr	r2, [r3, #12]
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9d8:	425b      	negs	r3, r3
 800b9da:	441a      	add	r2, r3
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	68da      	ldr	r2, [r3, #12]
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d207      	bcs.n	800b9fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	689a      	ldr	r2, [r3, #8]
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9f4:	425b      	negs	r3, r3
 800b9f6:	441a      	add	r2, r3
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2b02      	cmp	r3, #2
 800ba00:	d105      	bne.n	800ba0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d002      	beq.n	800ba0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	3b01      	subs	r3, #1
 800ba0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	1c5a      	adds	r2, r3, #1
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ba16:	697b      	ldr	r3, [r7, #20]
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3718      	adds	r7, #24
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b082      	sub	sp, #8
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d018      	beq.n	800ba64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	68da      	ldr	r2, [r3, #12]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba3a:	441a      	add	r2, r3
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	68da      	ldr	r2, [r3, #12]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	689b      	ldr	r3, [r3, #8]
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d303      	bcc.n	800ba54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681a      	ldr	r2, [r3, #0]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	68d9      	ldr	r1, [r3, #12]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	6838      	ldr	r0, [r7, #0]
 800ba60:	f002 fff8 	bl	800ea54 <memcpy>
	}
}
 800ba64:	bf00      	nop
 800ba66:	3708      	adds	r7, #8
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b084      	sub	sp, #16
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ba74:	f7ff f9e6 	bl	800ae44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ba80:	e011      	b.n	800baa6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d012      	beq.n	800bab0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	3324      	adds	r3, #36	; 0x24
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f000 fee8 	bl	800c864 <xTaskRemoveFromEventList>
 800ba94:	4603      	mov	r3, r0
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d001      	beq.n	800ba9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ba9a:	f000 ffd1 	bl	800ca40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ba9e:	7bfb      	ldrb	r3, [r7, #15]
 800baa0:	3b01      	subs	r3, #1
 800baa2:	b2db      	uxtb	r3, r3
 800baa4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800baa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	dce9      	bgt.n	800ba82 <prvUnlockQueue+0x16>
 800baae:	e000      	b.n	800bab2 <prvUnlockQueue+0x46>
					break;
 800bab0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	22ff      	movs	r2, #255	; 0xff
 800bab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800baba:	f7ff f9f3 	bl	800aea4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800babe:	f7ff f9c1 	bl	800ae44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bac8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800baca:	e011      	b.n	800baf0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	691b      	ldr	r3, [r3, #16]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d012      	beq.n	800bafa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	3310      	adds	r3, #16
 800bad8:	4618      	mov	r0, r3
 800bada:	f000 fec3 	bl	800c864 <xTaskRemoveFromEventList>
 800bade:	4603      	mov	r3, r0
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d001      	beq.n	800bae8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bae4:	f000 ffac 	bl	800ca40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bae8:	7bbb      	ldrb	r3, [r7, #14]
 800baea:	3b01      	subs	r3, #1
 800baec:	b2db      	uxtb	r3, r3
 800baee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800baf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	dce9      	bgt.n	800bacc <prvUnlockQueue+0x60>
 800baf8:	e000      	b.n	800bafc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bafa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	22ff      	movs	r2, #255	; 0xff
 800bb00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bb04:	f7ff f9ce 	bl	800aea4 <vPortExitCritical>
}
 800bb08:	bf00      	nop
 800bb0a:	3710      	adds	r7, #16
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}

0800bb10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b084      	sub	sp, #16
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bb18:	f7ff f994 	bl	800ae44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d102      	bne.n	800bb2a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bb24:	2301      	movs	r3, #1
 800bb26:	60fb      	str	r3, [r7, #12]
 800bb28:	e001      	b.n	800bb2e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bb2e:	f7ff f9b9 	bl	800aea4 <vPortExitCritical>

	return xReturn;
 800bb32:	68fb      	ldr	r3, [r7, #12]
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3710      	adds	r7, #16
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b084      	sub	sp, #16
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bb44:	f7ff f97e 	bl	800ae44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d102      	bne.n	800bb5a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bb54:	2301      	movs	r3, #1
 800bb56:	60fb      	str	r3, [r7, #12]
 800bb58:	e001      	b.n	800bb5e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bb5e:	f7ff f9a1 	bl	800aea4 <vPortExitCritical>

	return xReturn;
 800bb62:	68fb      	ldr	r3, [r7, #12]
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3710      	adds	r7, #16
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b085      	sub	sp, #20
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
 800bb74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bb76:	2300      	movs	r3, #0
 800bb78:	60fb      	str	r3, [r7, #12]
 800bb7a:	e014      	b.n	800bba6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bb7c:	4a0f      	ldr	r2, [pc, #60]	; (800bbbc <vQueueAddToRegistry+0x50>)
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d10b      	bne.n	800bba0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bb88:	490c      	ldr	r1, [pc, #48]	; (800bbbc <vQueueAddToRegistry+0x50>)
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	683a      	ldr	r2, [r7, #0]
 800bb8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bb92:	4a0a      	ldr	r2, [pc, #40]	; (800bbbc <vQueueAddToRegistry+0x50>)
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	00db      	lsls	r3, r3, #3
 800bb98:	4413      	add	r3, r2
 800bb9a:	687a      	ldr	r2, [r7, #4]
 800bb9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bb9e:	e006      	b.n	800bbae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	3301      	adds	r3, #1
 800bba4:	60fb      	str	r3, [r7, #12]
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2b07      	cmp	r3, #7
 800bbaa:	d9e7      	bls.n	800bb7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bbac:	bf00      	nop
 800bbae:	bf00      	nop
 800bbb0:	3714      	adds	r7, #20
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb8:	4770      	bx	lr
 800bbba:	bf00      	nop
 800bbbc:	20009124 	.word	0x20009124

0800bbc0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b086      	sub	sp, #24
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	60f8      	str	r0, [r7, #12]
 800bbc8:	60b9      	str	r1, [r7, #8]
 800bbca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bbd0:	f7ff f938 	bl	800ae44 <vPortEnterCritical>
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bbda:	b25b      	sxtb	r3, r3
 800bbdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbe0:	d103      	bne.n	800bbea <vQueueWaitForMessageRestricted+0x2a>
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbf0:	b25b      	sxtb	r3, r3
 800bbf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbf6:	d103      	bne.n	800bc00 <vQueueWaitForMessageRestricted+0x40>
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc00:	f7ff f950 	bl	800aea4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d106      	bne.n	800bc1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	3324      	adds	r3, #36	; 0x24
 800bc10:	687a      	ldr	r2, [r7, #4]
 800bc12:	68b9      	ldr	r1, [r7, #8]
 800bc14:	4618      	mov	r0, r3
 800bc16:	f000 fdf9 	bl	800c80c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bc1a:	6978      	ldr	r0, [r7, #20]
 800bc1c:	f7ff ff26 	bl	800ba6c <prvUnlockQueue>
	}
 800bc20:	bf00      	nop
 800bc22:	3718      	adds	r7, #24
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b08e      	sub	sp, #56	; 0x38
 800bc2c:	af04      	add	r7, sp, #16
 800bc2e:	60f8      	str	r0, [r7, #12]
 800bc30:	60b9      	str	r1, [r7, #8]
 800bc32:	607a      	str	r2, [r7, #4]
 800bc34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bc36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d10a      	bne.n	800bc52 <xTaskCreateStatic+0x2a>
	__asm volatile
 800bc3c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bc40:	f383 8811 	msr	BASEPRI, r3
 800bc44:	f3bf 8f6f 	isb	sy
 800bc48:	f3bf 8f4f 	dsb	sy
 800bc4c:	623b      	str	r3, [r7, #32]
}
 800bc4e:	bf00      	nop
 800bc50:	e7fe      	b.n	800bc50 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bc52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d10a      	bne.n	800bc6e <xTaskCreateStatic+0x46>
	__asm volatile
 800bc58:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bc5c:	f383 8811 	msr	BASEPRI, r3
 800bc60:	f3bf 8f6f 	isb	sy
 800bc64:	f3bf 8f4f 	dsb	sy
 800bc68:	61fb      	str	r3, [r7, #28]
}
 800bc6a:	bf00      	nop
 800bc6c:	e7fe      	b.n	800bc6c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bc6e:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 800bc72:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 800bc7a:	d00a      	beq.n	800bc92 <xTaskCreateStatic+0x6a>
	__asm volatile
 800bc7c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bc80:	f383 8811 	msr	BASEPRI, r3
 800bc84:	f3bf 8f6f 	isb	sy
 800bc88:	f3bf 8f4f 	dsb	sy
 800bc8c:	61bb      	str	r3, [r7, #24]
}
 800bc8e:	bf00      	nop
 800bc90:	e7fe      	b.n	800bc90 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bc92:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d01e      	beq.n	800bcd8 <xTaskCreateStatic+0xb0>
 800bc9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d01b      	beq.n	800bcd8 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bca8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bcaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcac:	2202      	movs	r2, #2
 800bcae:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	9303      	str	r3, [sp, #12]
 800bcb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb8:	9302      	str	r3, [sp, #8]
 800bcba:	f107 0314 	add.w	r3, r7, #20
 800bcbe:	9301      	str	r3, [sp, #4]
 800bcc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc2:	9300      	str	r3, [sp, #0]
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	687a      	ldr	r2, [r7, #4]
 800bcc8:	68b9      	ldr	r1, [r7, #8]
 800bcca:	68f8      	ldr	r0, [r7, #12]
 800bccc:	f000 f852 	bl	800bd74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bcd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bcd2:	f000 f90b 	bl	800beec <prvAddNewTaskToReadyList>
 800bcd6:	e001      	b.n	800bcdc <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bcdc:	697b      	ldr	r3, [r7, #20]
	}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3728      	adds	r7, #40	; 0x28
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}

0800bce6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bce6:	b580      	push	{r7, lr}
 800bce8:	b08c      	sub	sp, #48	; 0x30
 800bcea:	af04      	add	r7, sp, #16
 800bcec:	60f8      	str	r0, [r7, #12]
 800bcee:	60b9      	str	r1, [r7, #8]
 800bcf0:	603b      	str	r3, [r7, #0]
 800bcf2:	4613      	mov	r3, r2
 800bcf4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bcf6:	88fb      	ldrh	r3, [r7, #6]
 800bcf8:	009b      	lsls	r3, r3, #2
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f7fe fc96 	bl	800a62c <pvPortMalloc>
 800bd00:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d00f      	beq.n	800bd28 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bd08:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 800bd0c:	f7fe fc8e 	bl	800a62c <pvPortMalloc>
 800bd10:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bd12:	69fb      	ldr	r3, [r7, #28]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d003      	beq.n	800bd20 <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bd18:	69fb      	ldr	r3, [r7, #28]
 800bd1a:	697a      	ldr	r2, [r7, #20]
 800bd1c:	631a      	str	r2, [r3, #48]	; 0x30
 800bd1e:	e005      	b.n	800bd2c <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bd20:	6978      	ldr	r0, [r7, #20]
 800bd22:	f7fe fd2b 	bl	800a77c <vPortFree>
 800bd26:	e001      	b.n	800bd2c <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bd2c:	69fb      	ldr	r3, [r7, #28]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d017      	beq.n	800bd62 <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bd32:	69fb      	ldr	r3, [r7, #28]
 800bd34:	2200      	movs	r2, #0
 800bd36:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bd3a:	88fa      	ldrh	r2, [r7, #6]
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	9303      	str	r3, [sp, #12]
 800bd40:	69fb      	ldr	r3, [r7, #28]
 800bd42:	9302      	str	r3, [sp, #8]
 800bd44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd46:	9301      	str	r3, [sp, #4]
 800bd48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd4a:	9300      	str	r3, [sp, #0]
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	68b9      	ldr	r1, [r7, #8]
 800bd50:	68f8      	ldr	r0, [r7, #12]
 800bd52:	f000 f80f 	bl	800bd74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd56:	69f8      	ldr	r0, [r7, #28]
 800bd58:	f000 f8c8 	bl	800beec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	61bb      	str	r3, [r7, #24]
 800bd60:	e002      	b.n	800bd68 <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bd62:	f04f 33ff 	mov.w	r3, #4294967295
 800bd66:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bd68:	69bb      	ldr	r3, [r7, #24]
	}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3720      	adds	r7, #32
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
	...

0800bd74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b088      	sub	sp, #32
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	60f8      	str	r0, [r7, #12]
 800bd7c:	60b9      	str	r1, [r7, #8]
 800bd7e:	607a      	str	r2, [r7, #4]
 800bd80:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bd82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd84:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	009b      	lsls	r3, r3, #2
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	21a5      	movs	r1, #165	; 0xa5
 800bd8e:	f002 fe6f 	bl	800ea70 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bd9c:	3b01      	subs	r3, #1
 800bd9e:	009b      	lsls	r3, r3, #2
 800bda0:	4413      	add	r3, r2
 800bda2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bda4:	69bb      	ldr	r3, [r7, #24]
 800bda6:	f023 0307 	bic.w	r3, r3, #7
 800bdaa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bdac:	69bb      	ldr	r3, [r7, #24]
 800bdae:	f003 0307 	and.w	r3, r3, #7
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d00a      	beq.n	800bdcc <prvInitialiseNewTask+0x58>
	__asm volatile
 800bdb6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bdba:	f383 8811 	msr	BASEPRI, r3
 800bdbe:	f3bf 8f6f 	isb	sy
 800bdc2:	f3bf 8f4f 	dsb	sy
 800bdc6:	617b      	str	r3, [r7, #20]
}
 800bdc8:	bf00      	nop
 800bdca:	e7fe      	b.n	800bdca <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800bdcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdce:	69ba      	ldr	r2, [r7, #24]
 800bdd0:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d01f      	beq.n	800be1a <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bdda:	2300      	movs	r3, #0
 800bddc:	61fb      	str	r3, [r7, #28]
 800bdde:	e012      	b.n	800be06 <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bde0:	68ba      	ldr	r2, [r7, #8]
 800bde2:	69fb      	ldr	r3, [r7, #28]
 800bde4:	4413      	add	r3, r2
 800bde6:	7819      	ldrb	r1, [r3, #0]
 800bde8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdea:	69fb      	ldr	r3, [r7, #28]
 800bdec:	4413      	add	r3, r2
 800bdee:	3334      	adds	r3, #52	; 0x34
 800bdf0:	460a      	mov	r2, r1
 800bdf2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bdf4:	68ba      	ldr	r2, [r7, #8]
 800bdf6:	69fb      	ldr	r3, [r7, #28]
 800bdf8:	4413      	add	r3, r2
 800bdfa:	781b      	ldrb	r3, [r3, #0]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d006      	beq.n	800be0e <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be00:	69fb      	ldr	r3, [r7, #28]
 800be02:	3301      	adds	r3, #1
 800be04:	61fb      	str	r3, [r7, #28]
 800be06:	69fb      	ldr	r3, [r7, #28]
 800be08:	2bfe      	cmp	r3, #254	; 0xfe
 800be0a:	d9e9      	bls.n	800bde0 <prvInitialiseNewTask+0x6c>
 800be0c:	e000      	b.n	800be10 <prvInitialiseNewTask+0x9c>
			{
				break;
 800be0e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800be10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be12:	2200      	movs	r2, #0
 800be14:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 800be18:	e003      	b.n	800be22 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800be1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be1c:	2200      	movs	r2, #0
 800be1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800be22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be24:	2b37      	cmp	r3, #55	; 0x37
 800be26:	d901      	bls.n	800be2c <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800be28:	2337      	movs	r3, #55	; 0x37
 800be2a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800be2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be30:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800be32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be36:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		pxNewTCB->uxMutexesHeld = 0;
 800be3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3c:	2200      	movs	r2, #0
 800be3e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800be42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be44:	3304      	adds	r3, #4
 800be46:	4618      	mov	r0, r3
 800be48:	f7fe fe3e 	bl	800aac8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800be4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be4e:	3318      	adds	r3, #24
 800be50:	4618      	mov	r0, r3
 800be52:	f7fe fe39 	bl	800aac8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800be56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800be62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800be66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be6a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800be6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6e:	2200      	movs	r2, #0
 800be70:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800be74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be76:	2200      	movs	r2, #0
 800be78:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800be7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7e:	2200      	movs	r2, #0
 800be80:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800be84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be86:	2200      	movs	r2, #0
 800be88:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800be8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800be92:	2260      	movs	r2, #96	; 0x60
 800be94:	2100      	movs	r1, #0
 800be96:	4618      	mov	r0, r3
 800be98:	f002 fdea 	bl	800ea70 <memset>
 800be9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9e:	4a10      	ldr	r2, [pc, #64]	; (800bee0 <prvInitialiseNewTask+0x16c>)
 800bea0:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 800bea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea6:	4a0f      	ldr	r2, [pc, #60]	; (800bee4 <prvInitialiseNewTask+0x170>)
 800bea8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800beac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beae:	4a0e      	ldr	r2, [pc, #56]	; (800bee8 <prvInitialiseNewTask+0x174>)
 800beb0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 800beb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb6:	2200      	movs	r2, #0
 800beb8:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bebc:	683a      	ldr	r2, [r7, #0]
 800bebe:	68f9      	ldr	r1, [r7, #12]
 800bec0:	69b8      	ldr	r0, [r7, #24]
 800bec2:	f7fe fe95 	bl	800abf0 <pxPortInitialiseStack>
 800bec6:	4602      	mov	r2, r0
 800bec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800becc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d002      	beq.n	800bed8 <prvInitialiseNewTask+0x164>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bed6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bed8:	bf00      	nop
 800beda:	3720      	adds	r7, #32
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}
 800bee0:	0800f258 	.word	0x0800f258
 800bee4:	0800f278 	.word	0x0800f278
 800bee8:	0800f238 	.word	0x0800f238

0800beec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b082      	sub	sp, #8
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bef4:	f7fe ffa6 	bl	800ae44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bef8:	4b2d      	ldr	r3, [pc, #180]	; (800bfb0 <prvAddNewTaskToReadyList+0xc4>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	3301      	adds	r3, #1
 800befe:	4a2c      	ldr	r2, [pc, #176]	; (800bfb0 <prvAddNewTaskToReadyList+0xc4>)
 800bf00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bf02:	4b2c      	ldr	r3, [pc, #176]	; (800bfb4 <prvAddNewTaskToReadyList+0xc8>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d109      	bne.n	800bf1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bf0a:	4a2a      	ldr	r2, [pc, #168]	; (800bfb4 <prvAddNewTaskToReadyList+0xc8>)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bf10:	4b27      	ldr	r3, [pc, #156]	; (800bfb0 <prvAddNewTaskToReadyList+0xc4>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	d110      	bne.n	800bf3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bf18:	f000 fe0e 	bl	800cb38 <prvInitialiseTaskLists>
 800bf1c:	e00d      	b.n	800bf3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bf1e:	4b26      	ldr	r3, [pc, #152]	; (800bfb8 <prvAddNewTaskToReadyList+0xcc>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d109      	bne.n	800bf3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bf26:	4b23      	ldr	r3, [pc, #140]	; (800bfb4 <prvAddNewTaskToReadyList+0xc8>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d802      	bhi.n	800bf3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bf34:	4a1f      	ldr	r2, [pc, #124]	; (800bfb4 <prvAddNewTaskToReadyList+0xc8>)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bf3a:	4b20      	ldr	r3, [pc, #128]	; (800bfbc <prvAddNewTaskToReadyList+0xd0>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	3301      	adds	r3, #1
 800bf40:	4a1e      	ldr	r2, [pc, #120]	; (800bfbc <prvAddNewTaskToReadyList+0xd0>)
 800bf42:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bf44:	4b1d      	ldr	r3, [pc, #116]	; (800bfbc <prvAddNewTaskToReadyList+0xd0>)
 800bf46:	681a      	ldr	r2, [r3, #0]
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf52:	4b1b      	ldr	r3, [pc, #108]	; (800bfc0 <prvAddNewTaskToReadyList+0xd4>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d903      	bls.n	800bf62 <prvAddNewTaskToReadyList+0x76>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf5e:	4a18      	ldr	r2, [pc, #96]	; (800bfc0 <prvAddNewTaskToReadyList+0xd4>)
 800bf60:	6013      	str	r3, [r2, #0]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf66:	4613      	mov	r3, r2
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	4413      	add	r3, r2
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	4a15      	ldr	r2, [pc, #84]	; (800bfc4 <prvAddNewTaskToReadyList+0xd8>)
 800bf70:	441a      	add	r2, r3
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	3304      	adds	r3, #4
 800bf76:	4619      	mov	r1, r3
 800bf78:	4610      	mov	r0, r2
 800bf7a:	f7fe fdb2 	bl	800aae2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bf7e:	f7fe ff91 	bl	800aea4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bf82:	4b0d      	ldr	r3, [pc, #52]	; (800bfb8 <prvAddNewTaskToReadyList+0xcc>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d00e      	beq.n	800bfa8 <prvAddNewTaskToReadyList+0xbc>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bf8a:	4b0a      	ldr	r3, [pc, #40]	; (800bfb4 <prvAddNewTaskToReadyList+0xc8>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf94:	429a      	cmp	r2, r3
 800bf96:	d207      	bcs.n	800bfa8 <prvAddNewTaskToReadyList+0xbc>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bf98:	4b0b      	ldr	r3, [pc, #44]	; (800bfc8 <prvAddNewTaskToReadyList+0xdc>)
 800bf9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf9e:	601a      	str	r2, [r3, #0]
 800bfa0:	f3bf 8f4f 	dsb	sy
 800bfa4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bfa8:	bf00      	nop
 800bfaa:	3708      	adds	r7, #8
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}
 800bfb0:	2000963c 	.word	0x2000963c
 800bfb4:	20009164 	.word	0x20009164
 800bfb8:	20009648 	.word	0x20009648
 800bfbc:	20009658 	.word	0x20009658
 800bfc0:	20009644 	.word	0x20009644
 800bfc4:	20009168 	.word	0x20009168
 800bfc8:	e000ed04 	.word	0xe000ed04

0800bfcc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b08a      	sub	sp, #40	; 0x28
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d10a      	bne.n	800bff6 <vTaskDelayUntil+0x2a>
	__asm volatile
 800bfe0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bfe4:	f383 8811 	msr	BASEPRI, r3
 800bfe8:	f3bf 8f6f 	isb	sy
 800bfec:	f3bf 8f4f 	dsb	sy
 800bff0:	617b      	str	r3, [r7, #20]
}
 800bff2:	bf00      	nop
 800bff4:	e7fe      	b.n	800bff4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d10a      	bne.n	800c012 <vTaskDelayUntil+0x46>
	__asm volatile
 800bffc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c000:	f383 8811 	msr	BASEPRI, r3
 800c004:	f3bf 8f6f 	isb	sy
 800c008:	f3bf 8f4f 	dsb	sy
 800c00c:	613b      	str	r3, [r7, #16]
}
 800c00e:	bf00      	nop
 800c010:	e7fe      	b.n	800c010 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800c012:	4b2a      	ldr	r3, [pc, #168]	; (800c0bc <vTaskDelayUntil+0xf0>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d00a      	beq.n	800c030 <vTaskDelayUntil+0x64>
	__asm volatile
 800c01a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c01e:	f383 8811 	msr	BASEPRI, r3
 800c022:	f3bf 8f6f 	isb	sy
 800c026:	f3bf 8f4f 	dsb	sy
 800c02a:	60fb      	str	r3, [r7, #12]
}
 800c02c:	bf00      	nop
 800c02e:	e7fe      	b.n	800c02e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800c030:	f000 f932 	bl	800c298 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c034:	4b22      	ldr	r3, [pc, #136]	; (800c0c0 <vTaskDelayUntil+0xf4>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	683a      	ldr	r2, [r7, #0]
 800c040:	4413      	add	r3, r2
 800c042:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	6a3a      	ldr	r2, [r7, #32]
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d20b      	bcs.n	800c066 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	69fa      	ldr	r2, [r7, #28]
 800c054:	429a      	cmp	r2, r3
 800c056:	d211      	bcs.n	800c07c <vTaskDelayUntil+0xb0>
 800c058:	69fa      	ldr	r2, [r7, #28]
 800c05a:	6a3b      	ldr	r3, [r7, #32]
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d90d      	bls.n	800c07c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c060:	2301      	movs	r3, #1
 800c062:	627b      	str	r3, [r7, #36]	; 0x24
 800c064:	e00a      	b.n	800c07c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	69fa      	ldr	r2, [r7, #28]
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d303      	bcc.n	800c078 <vTaskDelayUntil+0xac>
 800c070:	69fa      	ldr	r2, [r7, #28]
 800c072:	6a3b      	ldr	r3, [r7, #32]
 800c074:	429a      	cmp	r2, r3
 800c076:	d901      	bls.n	800c07c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c078:	2301      	movs	r3, #1
 800c07a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	69fa      	ldr	r2, [r7, #28]
 800c080:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c084:	2b00      	cmp	r3, #0
 800c086:	d006      	beq.n	800c096 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c088:	69fa      	ldr	r2, [r7, #28]
 800c08a:	6a3b      	ldr	r3, [r7, #32]
 800c08c:	1ad3      	subs	r3, r2, r3
 800c08e:	2100      	movs	r1, #0
 800c090:	4618      	mov	r0, r3
 800c092:	f000 fea7 	bl	800cde4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c096:	f000 f945 	bl	800c324 <xTaskResumeAll>
 800c09a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c09c:	69bb      	ldr	r3, [r7, #24]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d107      	bne.n	800c0b2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800c0a2:	4b08      	ldr	r3, [pc, #32]	; (800c0c4 <vTaskDelayUntil+0xf8>)
 800c0a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0a8:	601a      	str	r2, [r3, #0]
 800c0aa:	f3bf 8f4f 	dsb	sy
 800c0ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c0b2:	bf00      	nop
 800c0b4:	3728      	adds	r7, #40	; 0x28
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	20009664 	.word	0x20009664
 800c0c0:	20009640 	.word	0x20009640
 800c0c4:	e000ed04 	.word	0xe000ed04

0800c0c8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b084      	sub	sp, #16
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c0d0:	f7fe feb8 	bl	800ae44 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d102      	bne.n	800c0e0 <vTaskSuspend+0x18>
 800c0da:	4b30      	ldr	r3, [pc, #192]	; (800c19c <vTaskSuspend+0xd4>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	e000      	b.n	800c0e2 <vTaskSuspend+0x1a>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	3304      	adds	r3, #4
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f7fe fd57 	bl	800ab9c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d004      	beq.n	800c100 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	3318      	adds	r3, #24
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f7fe fd4e 	bl	800ab9c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	3304      	adds	r3, #4
 800c104:	4619      	mov	r1, r3
 800c106:	4826      	ldr	r0, [pc, #152]	; (800c1a0 <vTaskSuspend+0xd8>)
 800c108:	f7fe fceb 	bl	800aae2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800c112:	b2db      	uxtb	r3, r3
 800c114:	2b01      	cmp	r3, #1
 800c116:	d103      	bne.n	800c120 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	2200      	movs	r2, #0
 800c11c:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800c120:	f7fe fec0 	bl	800aea4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800c124:	4b1f      	ldr	r3, [pc, #124]	; (800c1a4 <vTaskSuspend+0xdc>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d005      	beq.n	800c138 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800c12c:	f7fe fe8a 	bl	800ae44 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800c130:	f000 fda6 	bl	800cc80 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800c134:	f7fe feb6 	bl	800aea4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800c138:	4b18      	ldr	r3, [pc, #96]	; (800c19c <vTaskSuspend+0xd4>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	68fa      	ldr	r2, [r7, #12]
 800c13e:	429a      	cmp	r2, r3
 800c140:	d127      	bne.n	800c192 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800c142:	4b18      	ldr	r3, [pc, #96]	; (800c1a4 <vTaskSuspend+0xdc>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d017      	beq.n	800c17a <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800c14a:	4b17      	ldr	r3, [pc, #92]	; (800c1a8 <vTaskSuspend+0xe0>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d00a      	beq.n	800c168 <vTaskSuspend+0xa0>
	__asm volatile
 800c152:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c156:	f383 8811 	msr	BASEPRI, r3
 800c15a:	f3bf 8f6f 	isb	sy
 800c15e:	f3bf 8f4f 	dsb	sy
 800c162:	60bb      	str	r3, [r7, #8]
}
 800c164:	bf00      	nop
 800c166:	e7fe      	b.n	800c166 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800c168:	4b10      	ldr	r3, [pc, #64]	; (800c1ac <vTaskSuspend+0xe4>)
 800c16a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c16e:	601a      	str	r2, [r3, #0]
 800c170:	f3bf 8f4f 	dsb	sy
 800c174:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c178:	e00b      	b.n	800c192 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800c17a:	4b09      	ldr	r3, [pc, #36]	; (800c1a0 <vTaskSuspend+0xd8>)
 800c17c:	681a      	ldr	r2, [r3, #0]
 800c17e:	4b0c      	ldr	r3, [pc, #48]	; (800c1b0 <vTaskSuspend+0xe8>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	429a      	cmp	r2, r3
 800c184:	d103      	bne.n	800c18e <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800c186:	4b05      	ldr	r3, [pc, #20]	; (800c19c <vTaskSuspend+0xd4>)
 800c188:	2200      	movs	r2, #0
 800c18a:	601a      	str	r2, [r3, #0]
	}
 800c18c:	e001      	b.n	800c192 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800c18e:	f000 fa61 	bl	800c654 <vTaskSwitchContext>
	}
 800c192:	bf00      	nop
 800c194:	3710      	adds	r7, #16
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop
 800c19c:	20009164 	.word	0x20009164
 800c1a0:	20009624 	.word	0x20009624
 800c1a4:	20009648 	.word	0x20009648
 800c1a8:	20009664 	.word	0x20009664
 800c1ac:	e000ed04 	.word	0xe000ed04
 800c1b0:	2000963c 	.word	0x2000963c

0800c1b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b08a      	sub	sp, #40	; 0x28
 800c1b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c1c2:	463a      	mov	r2, r7
 800c1c4:	1d39      	adds	r1, r7, #4
 800c1c6:	f107 0308 	add.w	r3, r7, #8
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f7fe f9fa 	bl	800a5c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c1d0:	6839      	ldr	r1, [r7, #0]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	68ba      	ldr	r2, [r7, #8]
 800c1d6:	9202      	str	r2, [sp, #8]
 800c1d8:	9301      	str	r3, [sp, #4]
 800c1da:	2300      	movs	r3, #0
 800c1dc:	9300      	str	r3, [sp, #0]
 800c1de:	2300      	movs	r3, #0
 800c1e0:	460a      	mov	r2, r1
 800c1e2:	4925      	ldr	r1, [pc, #148]	; (800c278 <vTaskStartScheduler+0xc4>)
 800c1e4:	4825      	ldr	r0, [pc, #148]	; (800c27c <vTaskStartScheduler+0xc8>)
 800c1e6:	f7ff fd1f 	bl	800bc28 <xTaskCreateStatic>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	4a24      	ldr	r2, [pc, #144]	; (800c280 <vTaskStartScheduler+0xcc>)
 800c1ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c1f0:	4b23      	ldr	r3, [pc, #140]	; (800c280 <vTaskStartScheduler+0xcc>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d002      	beq.n	800c1fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	617b      	str	r3, [r7, #20]
 800c1fc:	e001      	b.n	800c202 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c1fe:	2300      	movs	r3, #0
 800c200:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	2b01      	cmp	r3, #1
 800c206:	d102      	bne.n	800c20e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c208:	f000 fe46 	bl	800ce98 <xTimerCreateTimerTask>
 800c20c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	2b01      	cmp	r3, #1
 800c212:	d11e      	bne.n	800c252 <vTaskStartScheduler+0x9e>
	__asm volatile
 800c214:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c218:	f383 8811 	msr	BASEPRI, r3
 800c21c:	f3bf 8f6f 	isb	sy
 800c220:	f3bf 8f4f 	dsb	sy
 800c224:	613b      	str	r3, [r7, #16]
}
 800c226:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c228:	4b16      	ldr	r3, [pc, #88]	; (800c284 <vTaskStartScheduler+0xd0>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c230:	4a15      	ldr	r2, [pc, #84]	; (800c288 <vTaskStartScheduler+0xd4>)
 800c232:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c234:	4b15      	ldr	r3, [pc, #84]	; (800c28c <vTaskStartScheduler+0xd8>)
 800c236:	f04f 32ff 	mov.w	r2, #4294967295
 800c23a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c23c:	4b14      	ldr	r3, [pc, #80]	; (800c290 <vTaskStartScheduler+0xdc>)
 800c23e:	2201      	movs	r2, #1
 800c240:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c242:	4b14      	ldr	r3, [pc, #80]	; (800c294 <vTaskStartScheduler+0xe0>)
 800c244:	2200      	movs	r2, #0
 800c246:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800c248:	f7f6 fbf2 	bl	8002a30 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c24c:	f7fe fd58 	bl	800ad00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c250:	e00e      	b.n	800c270 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c258:	d10a      	bne.n	800c270 <vTaskStartScheduler+0xbc>
	__asm volatile
 800c25a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c25e:	f383 8811 	msr	BASEPRI, r3
 800c262:	f3bf 8f6f 	isb	sy
 800c266:	f3bf 8f4f 	dsb	sy
 800c26a:	60fb      	str	r3, [r7, #12]
}
 800c26c:	bf00      	nop
 800c26e:	e7fe      	b.n	800c26e <vTaskStartScheduler+0xba>
}
 800c270:	bf00      	nop
 800c272:	3718      	adds	r7, #24
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}
 800c278:	0800ef98 	.word	0x0800ef98
 800c27c:	0800ca59 	.word	0x0800ca59
 800c280:	20009660 	.word	0x20009660
 800c284:	20009164 	.word	0x20009164
 800c288:	2000003c 	.word	0x2000003c
 800c28c:	2000965c 	.word	0x2000965c
 800c290:	20009648 	.word	0x20009648
 800c294:	20009640 	.word	0x20009640

0800c298 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c298:	b480      	push	{r7}
 800c29a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c29c:	4b04      	ldr	r3, [pc, #16]	; (800c2b0 <vTaskSuspendAll+0x18>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	3301      	adds	r3, #1
 800c2a2:	4a03      	ldr	r2, [pc, #12]	; (800c2b0 <vTaskSuspendAll+0x18>)
 800c2a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c2a6:	bf00      	nop
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr
 800c2b0:	20009664 	.word	0x20009664

0800c2b4 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b083      	sub	sp, #12
 800c2b8:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800c2be:	4b14      	ldr	r3, [pc, #80]	; (800c310 <prvGetExpectedIdleTime+0x5c>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d001      	beq.n	800c2ca <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800c2ca:	4b12      	ldr	r3, [pc, #72]	; (800c314 <prvGetExpectedIdleTime+0x60>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d002      	beq.n	800c2da <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	607b      	str	r3, [r7, #4]
 800c2d8:	e012      	b.n	800c300 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800c2da:	4b0f      	ldr	r3, [pc, #60]	; (800c318 <prvGetExpectedIdleTime+0x64>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	2b01      	cmp	r3, #1
 800c2e0:	d902      	bls.n	800c2e8 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	607b      	str	r3, [r7, #4]
 800c2e6:	e00b      	b.n	800c300 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d002      	beq.n	800c2f4 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	607b      	str	r3, [r7, #4]
 800c2f2:	e005      	b.n	800c300 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800c2f4:	4b09      	ldr	r3, [pc, #36]	; (800c31c <prvGetExpectedIdleTime+0x68>)
 800c2f6:	681a      	ldr	r2, [r3, #0]
 800c2f8:	4b09      	ldr	r3, [pc, #36]	; (800c320 <prvGetExpectedIdleTime+0x6c>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	1ad3      	subs	r3, r2, r3
 800c2fe:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800c300:	687b      	ldr	r3, [r7, #4]
	}
 800c302:	4618      	mov	r0, r3
 800c304:	370c      	adds	r7, #12
 800c306:	46bd      	mov	sp, r7
 800c308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30c:	4770      	bx	lr
 800c30e:	bf00      	nop
 800c310:	20009644 	.word	0x20009644
 800c314:	20009164 	.word	0x20009164
 800c318:	20009168 	.word	0x20009168
 800c31c:	2000965c 	.word	0x2000965c
 800c320:	20009640 	.word	0x20009640

0800c324 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c32a:	2300      	movs	r3, #0
 800c32c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c32e:	2300      	movs	r3, #0
 800c330:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c332:	4b42      	ldr	r3, [pc, #264]	; (800c43c <xTaskResumeAll+0x118>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d10a      	bne.n	800c350 <xTaskResumeAll+0x2c>
	__asm volatile
 800c33a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c33e:	f383 8811 	msr	BASEPRI, r3
 800c342:	f3bf 8f6f 	isb	sy
 800c346:	f3bf 8f4f 	dsb	sy
 800c34a:	603b      	str	r3, [r7, #0]
}
 800c34c:	bf00      	nop
 800c34e:	e7fe      	b.n	800c34e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c350:	f7fe fd78 	bl	800ae44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c354:	4b39      	ldr	r3, [pc, #228]	; (800c43c <xTaskResumeAll+0x118>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	3b01      	subs	r3, #1
 800c35a:	4a38      	ldr	r2, [pc, #224]	; (800c43c <xTaskResumeAll+0x118>)
 800c35c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c35e:	4b37      	ldr	r3, [pc, #220]	; (800c43c <xTaskResumeAll+0x118>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d162      	bne.n	800c42c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c366:	4b36      	ldr	r3, [pc, #216]	; (800c440 <xTaskResumeAll+0x11c>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d05e      	beq.n	800c42c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c36e:	e02f      	b.n	800c3d0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c370:	4b34      	ldr	r3, [pc, #208]	; (800c444 <xTaskResumeAll+0x120>)
 800c372:	68db      	ldr	r3, [r3, #12]
 800c374:	68db      	ldr	r3, [r3, #12]
 800c376:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	3318      	adds	r3, #24
 800c37c:	4618      	mov	r0, r3
 800c37e:	f7fe fc0d 	bl	800ab9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	3304      	adds	r3, #4
 800c386:	4618      	mov	r0, r3
 800c388:	f7fe fc08 	bl	800ab9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c390:	4b2d      	ldr	r3, [pc, #180]	; (800c448 <xTaskResumeAll+0x124>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	429a      	cmp	r2, r3
 800c396:	d903      	bls.n	800c3a0 <xTaskResumeAll+0x7c>
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c39c:	4a2a      	ldr	r2, [pc, #168]	; (800c448 <xTaskResumeAll+0x124>)
 800c39e:	6013      	str	r3, [r2, #0]
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3a4:	4613      	mov	r3, r2
 800c3a6:	009b      	lsls	r3, r3, #2
 800c3a8:	4413      	add	r3, r2
 800c3aa:	009b      	lsls	r3, r3, #2
 800c3ac:	4a27      	ldr	r2, [pc, #156]	; (800c44c <xTaskResumeAll+0x128>)
 800c3ae:	441a      	add	r2, r3
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	3304      	adds	r3, #4
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	4610      	mov	r0, r2
 800c3b8:	f7fe fb93 	bl	800aae2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3c0:	4b23      	ldr	r3, [pc, #140]	; (800c450 <xTaskResumeAll+0x12c>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d302      	bcc.n	800c3d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c3ca:	4b22      	ldr	r3, [pc, #136]	; (800c454 <xTaskResumeAll+0x130>)
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c3d0:	4b1c      	ldr	r3, [pc, #112]	; (800c444 <xTaskResumeAll+0x120>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d1cb      	bne.n	800c370 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d001      	beq.n	800c3e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c3de:	f000 fc4f 	bl	800cc80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c3e2:	4b1d      	ldr	r3, [pc, #116]	; (800c458 <xTaskResumeAll+0x134>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d010      	beq.n	800c410 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c3ee:	f000 f86f 	bl	800c4d0 <xTaskIncrementTick>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d002      	beq.n	800c3fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c3f8:	4b16      	ldr	r3, [pc, #88]	; (800c454 <xTaskResumeAll+0x130>)
 800c3fa:	2201      	movs	r2, #1
 800c3fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	3b01      	subs	r3, #1
 800c402:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d1f1      	bne.n	800c3ee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c40a:	4b13      	ldr	r3, [pc, #76]	; (800c458 <xTaskResumeAll+0x134>)
 800c40c:	2200      	movs	r2, #0
 800c40e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c410:	4b10      	ldr	r3, [pc, #64]	; (800c454 <xTaskResumeAll+0x130>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d009      	beq.n	800c42c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c418:	2301      	movs	r3, #1
 800c41a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c41c:	4b0f      	ldr	r3, [pc, #60]	; (800c45c <xTaskResumeAll+0x138>)
 800c41e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c422:	601a      	str	r2, [r3, #0]
 800c424:	f3bf 8f4f 	dsb	sy
 800c428:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c42c:	f7fe fd3a 	bl	800aea4 <vPortExitCritical>

	return xAlreadyYielded;
 800c430:	68bb      	ldr	r3, [r7, #8]
}
 800c432:	4618      	mov	r0, r3
 800c434:	3710      	adds	r7, #16
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}
 800c43a:	bf00      	nop
 800c43c:	20009664 	.word	0x20009664
 800c440:	2000963c 	.word	0x2000963c
 800c444:	200095f8 	.word	0x200095f8
 800c448:	20009644 	.word	0x20009644
 800c44c:	20009168 	.word	0x20009168
 800c450:	20009164 	.word	0x20009164
 800c454:	20009650 	.word	0x20009650
 800c458:	2000964c 	.word	0x2000964c
 800c45c:	e000ed04 	.word	0xe000ed04

0800c460 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c460:	b480      	push	{r7}
 800c462:	b083      	sub	sp, #12
 800c464:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c466:	4b05      	ldr	r3, [pc, #20]	; (800c47c <xTaskGetTickCount+0x1c>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c46c:	687b      	ldr	r3, [r7, #4]
}
 800c46e:	4618      	mov	r0, r3
 800c470:	370c      	adds	r7, #12
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr
 800c47a:	bf00      	nop
 800c47c:	20009640 	.word	0x20009640

0800c480 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800c480:	b480      	push	{r7}
 800c482:	b085      	sub	sp, #20
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800c488:	4b0f      	ldr	r3, [pc, #60]	; (800c4c8 <vTaskStepTick+0x48>)
 800c48a:	681a      	ldr	r2, [r3, #0]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	441a      	add	r2, r3
 800c490:	4b0e      	ldr	r3, [pc, #56]	; (800c4cc <vTaskStepTick+0x4c>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	429a      	cmp	r2, r3
 800c496:	d90a      	bls.n	800c4ae <vTaskStepTick+0x2e>
	__asm volatile
 800c498:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c49c:	f383 8811 	msr	BASEPRI, r3
 800c4a0:	f3bf 8f6f 	isb	sy
 800c4a4:	f3bf 8f4f 	dsb	sy
 800c4a8:	60fb      	str	r3, [r7, #12]
}
 800c4aa:	bf00      	nop
 800c4ac:	e7fe      	b.n	800c4ac <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800c4ae:	4b06      	ldr	r3, [pc, #24]	; (800c4c8 <vTaskStepTick+0x48>)
 800c4b0:	681a      	ldr	r2, [r3, #0]
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	4413      	add	r3, r2
 800c4b6:	4a04      	ldr	r2, [pc, #16]	; (800c4c8 <vTaskStepTick+0x48>)
 800c4b8:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800c4ba:	bf00      	nop
 800c4bc:	3714      	adds	r7, #20
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c4:	4770      	bx	lr
 800c4c6:	bf00      	nop
 800c4c8:	20009640 	.word	0x20009640
 800c4cc:	2000965c 	.word	0x2000965c

0800c4d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b086      	sub	sp, #24
 800c4d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4da:	4b53      	ldr	r3, [pc, #332]	; (800c628 <xTaskIncrementTick+0x158>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	f040 8095 	bne.w	800c60e <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c4e4:	4b51      	ldr	r3, [pc, #324]	; (800c62c <xTaskIncrementTick+0x15c>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	3301      	adds	r3, #1
 800c4ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c4ec:	4a4f      	ldr	r2, [pc, #316]	; (800c62c <xTaskIncrementTick+0x15c>)
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d120      	bne.n	800c53a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c4f8:	4b4d      	ldr	r3, [pc, #308]	; (800c630 <xTaskIncrementTick+0x160>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d00a      	beq.n	800c518 <xTaskIncrementTick+0x48>
	__asm volatile
 800c502:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c506:	f383 8811 	msr	BASEPRI, r3
 800c50a:	f3bf 8f6f 	isb	sy
 800c50e:	f3bf 8f4f 	dsb	sy
 800c512:	603b      	str	r3, [r7, #0]
}
 800c514:	bf00      	nop
 800c516:	e7fe      	b.n	800c516 <xTaskIncrementTick+0x46>
 800c518:	4b45      	ldr	r3, [pc, #276]	; (800c630 <xTaskIncrementTick+0x160>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	60fb      	str	r3, [r7, #12]
 800c51e:	4b45      	ldr	r3, [pc, #276]	; (800c634 <xTaskIncrementTick+0x164>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	4a43      	ldr	r2, [pc, #268]	; (800c630 <xTaskIncrementTick+0x160>)
 800c524:	6013      	str	r3, [r2, #0]
 800c526:	4a43      	ldr	r2, [pc, #268]	; (800c634 <xTaskIncrementTick+0x164>)
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	6013      	str	r3, [r2, #0]
 800c52c:	4b42      	ldr	r3, [pc, #264]	; (800c638 <xTaskIncrementTick+0x168>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	3301      	adds	r3, #1
 800c532:	4a41      	ldr	r2, [pc, #260]	; (800c638 <xTaskIncrementTick+0x168>)
 800c534:	6013      	str	r3, [r2, #0]
 800c536:	f000 fba3 	bl	800cc80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c53a:	4b40      	ldr	r3, [pc, #256]	; (800c63c <xTaskIncrementTick+0x16c>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	693a      	ldr	r2, [r7, #16]
 800c540:	429a      	cmp	r2, r3
 800c542:	d349      	bcc.n	800c5d8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c544:	4b3a      	ldr	r3, [pc, #232]	; (800c630 <xTaskIncrementTick+0x160>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d104      	bne.n	800c558 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c54e:	4b3b      	ldr	r3, [pc, #236]	; (800c63c <xTaskIncrementTick+0x16c>)
 800c550:	f04f 32ff 	mov.w	r2, #4294967295
 800c554:	601a      	str	r2, [r3, #0]
					break;
 800c556:	e03f      	b.n	800c5d8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c558:	4b35      	ldr	r3, [pc, #212]	; (800c630 <xTaskIncrementTick+0x160>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	68db      	ldr	r3, [r3, #12]
 800c55e:	68db      	ldr	r3, [r3, #12]
 800c560:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	685b      	ldr	r3, [r3, #4]
 800c566:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c568:	693a      	ldr	r2, [r7, #16]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d203      	bcs.n	800c578 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c570:	4a32      	ldr	r2, [pc, #200]	; (800c63c <xTaskIncrementTick+0x16c>)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c576:	e02f      	b.n	800c5d8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	3304      	adds	r3, #4
 800c57c:	4618      	mov	r0, r3
 800c57e:	f7fe fb0d 	bl	800ab9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c586:	2b00      	cmp	r3, #0
 800c588:	d004      	beq.n	800c594 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	3318      	adds	r3, #24
 800c58e:	4618      	mov	r0, r3
 800c590:	f7fe fb04 	bl	800ab9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c598:	4b29      	ldr	r3, [pc, #164]	; (800c640 <xTaskIncrementTick+0x170>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d903      	bls.n	800c5a8 <xTaskIncrementTick+0xd8>
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5a4:	4a26      	ldr	r2, [pc, #152]	; (800c640 <xTaskIncrementTick+0x170>)
 800c5a6:	6013      	str	r3, [r2, #0]
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5ac:	4613      	mov	r3, r2
 800c5ae:	009b      	lsls	r3, r3, #2
 800c5b0:	4413      	add	r3, r2
 800c5b2:	009b      	lsls	r3, r3, #2
 800c5b4:	4a23      	ldr	r2, [pc, #140]	; (800c644 <xTaskIncrementTick+0x174>)
 800c5b6:	441a      	add	r2, r3
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	3304      	adds	r3, #4
 800c5bc:	4619      	mov	r1, r3
 800c5be:	4610      	mov	r0, r2
 800c5c0:	f7fe fa8f 	bl	800aae2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5c8:	4b1f      	ldr	r3, [pc, #124]	; (800c648 <xTaskIncrementTick+0x178>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d3b8      	bcc.n	800c544 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c5d6:	e7b5      	b.n	800c544 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c5d8:	4b1b      	ldr	r3, [pc, #108]	; (800c648 <xTaskIncrementTick+0x178>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5de:	4919      	ldr	r1, [pc, #100]	; (800c644 <xTaskIncrementTick+0x174>)
 800c5e0:	4613      	mov	r3, r2
 800c5e2:	009b      	lsls	r3, r3, #2
 800c5e4:	4413      	add	r3, r2
 800c5e6:	009b      	lsls	r3, r3, #2
 800c5e8:	440b      	add	r3, r1
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	d901      	bls.n	800c5f4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 800c5f4:	4b15      	ldr	r3, [pc, #84]	; (800c64c <xTaskIncrementTick+0x17c>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d101      	bne.n	800c600 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 800c5fc:	f7f6 fa2e 	bl	8002a5c <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c600:	4b13      	ldr	r3, [pc, #76]	; (800c650 <xTaskIncrementTick+0x180>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d009      	beq.n	800c61c <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 800c608:	2301      	movs	r3, #1
 800c60a:	617b      	str	r3, [r7, #20]
 800c60c:	e006      	b.n	800c61c <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c60e:	4b0f      	ldr	r3, [pc, #60]	; (800c64c <xTaskIncrementTick+0x17c>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	3301      	adds	r3, #1
 800c614:	4a0d      	ldr	r2, [pc, #52]	; (800c64c <xTaskIncrementTick+0x17c>)
 800c616:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800c618:	f7f6 fa20 	bl	8002a5c <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 800c61c:	697b      	ldr	r3, [r7, #20]
}
 800c61e:	4618      	mov	r0, r3
 800c620:	3718      	adds	r7, #24
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}
 800c626:	bf00      	nop
 800c628:	20009664 	.word	0x20009664
 800c62c:	20009640 	.word	0x20009640
 800c630:	200095f0 	.word	0x200095f0
 800c634:	200095f4 	.word	0x200095f4
 800c638:	20009654 	.word	0x20009654
 800c63c:	2000965c 	.word	0x2000965c
 800c640:	20009644 	.word	0x20009644
 800c644:	20009168 	.word	0x20009168
 800c648:	20009164 	.word	0x20009164
 800c64c:	2000964c 	.word	0x2000964c
 800c650:	20009650 	.word	0x20009650

0800c654 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b086      	sub	sp, #24
 800c658:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c65a:	4b51      	ldr	r3, [pc, #324]	; (800c7a0 <vTaskSwitchContext+0x14c>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d003      	beq.n	800c66a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c662:	4b50      	ldr	r3, [pc, #320]	; (800c7a4 <vTaskSwitchContext+0x150>)
 800c664:	2201      	movs	r2, #1
 800c666:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c668:	e095      	b.n	800c796 <vTaskSwitchContext+0x142>
		xYieldPending = pdFALSE;
 800c66a:	4b4e      	ldr	r3, [pc, #312]	; (800c7a4 <vTaskSwitchContext+0x150>)
 800c66c:	2200      	movs	r2, #0
 800c66e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800c670:	f7f6 f9e5 	bl	8002a3e <getRunTimeCounterValue>
 800c674:	4603      	mov	r3, r0
 800c676:	4a4c      	ldr	r2, [pc, #304]	; (800c7a8 <vTaskSwitchContext+0x154>)
 800c678:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800c67a:	4b4b      	ldr	r3, [pc, #300]	; (800c7a8 <vTaskSwitchContext+0x154>)
 800c67c:	681a      	ldr	r2, [r3, #0]
 800c67e:	4b4b      	ldr	r3, [pc, #300]	; (800c7ac <vTaskSwitchContext+0x158>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	429a      	cmp	r2, r3
 800c684:	d90b      	bls.n	800c69e <vTaskSwitchContext+0x4a>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800c686:	4b4a      	ldr	r3, [pc, #296]	; (800c7b0 <vTaskSwitchContext+0x15c>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
 800c68e:	4a46      	ldr	r2, [pc, #280]	; (800c7a8 <vTaskSwitchContext+0x154>)
 800c690:	6810      	ldr	r0, [r2, #0]
 800c692:	4a46      	ldr	r2, [pc, #280]	; (800c7ac <vTaskSwitchContext+0x158>)
 800c694:	6812      	ldr	r2, [r2, #0]
 800c696:	1a82      	subs	r2, r0, r2
 800c698:	440a      	add	r2, r1
 800c69a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			ulTaskSwitchedInTime = ulTotalRunTime;
 800c69e:	4b42      	ldr	r3, [pc, #264]	; (800c7a8 <vTaskSwitchContext+0x154>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	4a42      	ldr	r2, [pc, #264]	; (800c7ac <vTaskSwitchContext+0x158>)
 800c6a4:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800c6a6:	4b42      	ldr	r3, [pc, #264]	; (800c7b0 <vTaskSwitchContext+0x15c>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6ac:	613b      	str	r3, [r7, #16]
 800c6ae:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800c6b2:	60fb      	str	r3, [r7, #12]
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	68fa      	ldr	r2, [r7, #12]
 800c6ba:	429a      	cmp	r2, r3
 800c6bc:	d111      	bne.n	800c6e2 <vTaskSwitchContext+0x8e>
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	3304      	adds	r3, #4
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	68fa      	ldr	r2, [r7, #12]
 800c6c6:	429a      	cmp	r2, r3
 800c6c8:	d10b      	bne.n	800c6e2 <vTaskSwitchContext+0x8e>
 800c6ca:	693b      	ldr	r3, [r7, #16]
 800c6cc:	3308      	adds	r3, #8
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	68fa      	ldr	r2, [r7, #12]
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	d105      	bne.n	800c6e2 <vTaskSwitchContext+0x8e>
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	330c      	adds	r3, #12
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	68fa      	ldr	r2, [r7, #12]
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	d008      	beq.n	800c6f4 <vTaskSwitchContext+0xa0>
 800c6e2:	4b33      	ldr	r3, [pc, #204]	; (800c7b0 <vTaskSwitchContext+0x15c>)
 800c6e4:	681a      	ldr	r2, [r3, #0]
 800c6e6:	4b32      	ldr	r3, [pc, #200]	; (800c7b0 <vTaskSwitchContext+0x15c>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	3334      	adds	r3, #52	; 0x34
 800c6ec:	4619      	mov	r1, r3
 800c6ee:	4610      	mov	r0, r2
 800c6f0:	f7f6 f9c2 	bl	8002a78 <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 800c6f4:	4b2e      	ldr	r3, [pc, #184]	; (800c7b0 <vTaskSwitchContext+0x15c>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4a2e      	ldr	r2, [pc, #184]	; (800c7b4 <vTaskSwitchContext+0x160>)
 800c6fa:	6812      	ldr	r2, [r2, #0]
 800c6fc:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c700:	4b2d      	ldr	r3, [pc, #180]	; (800c7b8 <vTaskSwitchContext+0x164>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	617b      	str	r3, [r7, #20]
 800c706:	e010      	b.n	800c72a <vTaskSwitchContext+0xd6>
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d10a      	bne.n	800c724 <vTaskSwitchContext+0xd0>
	__asm volatile
 800c70e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c712:	f383 8811 	msr	BASEPRI, r3
 800c716:	f3bf 8f6f 	isb	sy
 800c71a:	f3bf 8f4f 	dsb	sy
 800c71e:	607b      	str	r3, [r7, #4]
}
 800c720:	bf00      	nop
 800c722:	e7fe      	b.n	800c722 <vTaskSwitchContext+0xce>
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	3b01      	subs	r3, #1
 800c728:	617b      	str	r3, [r7, #20]
 800c72a:	4924      	ldr	r1, [pc, #144]	; (800c7bc <vTaskSwitchContext+0x168>)
 800c72c:	697a      	ldr	r2, [r7, #20]
 800c72e:	4613      	mov	r3, r2
 800c730:	009b      	lsls	r3, r3, #2
 800c732:	4413      	add	r3, r2
 800c734:	009b      	lsls	r3, r3, #2
 800c736:	440b      	add	r3, r1
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d0e4      	beq.n	800c708 <vTaskSwitchContext+0xb4>
 800c73e:	697a      	ldr	r2, [r7, #20]
 800c740:	4613      	mov	r3, r2
 800c742:	009b      	lsls	r3, r3, #2
 800c744:	4413      	add	r3, r2
 800c746:	009b      	lsls	r3, r3, #2
 800c748:	4a1c      	ldr	r2, [pc, #112]	; (800c7bc <vTaskSwitchContext+0x168>)
 800c74a:	4413      	add	r3, r2
 800c74c:	60bb      	str	r3, [r7, #8]
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	685b      	ldr	r3, [r3, #4]
 800c752:	685a      	ldr	r2, [r3, #4]
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	605a      	str	r2, [r3, #4]
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	685a      	ldr	r2, [r3, #4]
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	3308      	adds	r3, #8
 800c760:	429a      	cmp	r2, r3
 800c762:	d104      	bne.n	800c76e <vTaskSwitchContext+0x11a>
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	685b      	ldr	r3, [r3, #4]
 800c768:	685a      	ldr	r2, [r3, #4]
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	605a      	str	r2, [r3, #4]
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	68db      	ldr	r3, [r3, #12]
 800c774:	4a0e      	ldr	r2, [pc, #56]	; (800c7b0 <vTaskSwitchContext+0x15c>)
 800c776:	6013      	str	r3, [r2, #0]
 800c778:	4a0f      	ldr	r2, [pc, #60]	; (800c7b8 <vTaskSwitchContext+0x164>)
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 800c77e:	4b0c      	ldr	r3, [pc, #48]	; (800c7b0 <vTaskSwitchContext+0x15c>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800c786:	4a0b      	ldr	r2, [pc, #44]	; (800c7b4 <vTaskSwitchContext+0x160>)
 800c788:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c78a:	4b09      	ldr	r3, [pc, #36]	; (800c7b0 <vTaskSwitchContext+0x15c>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c792:	4a0b      	ldr	r2, [pc, #44]	; (800c7c0 <vTaskSwitchContext+0x16c>)
 800c794:	6013      	str	r3, [r2, #0]
}
 800c796:	bf00      	nop
 800c798:	3718      	adds	r7, #24
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}
 800c79e:	bf00      	nop
 800c7a0:	20009664 	.word	0x20009664
 800c7a4:	20009650 	.word	0x20009650
 800c7a8:	2000966c 	.word	0x2000966c
 800c7ac:	20009668 	.word	0x20009668
 800c7b0:	20009164 	.word	0x20009164
 800c7b4:	20009638 	.word	0x20009638
 800c7b8:	20009644 	.word	0x20009644
 800c7bc:	20009168 	.word	0x20009168
 800c7c0:	2000003c 	.word	0x2000003c

0800c7c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b084      	sub	sp, #16
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d10a      	bne.n	800c7ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c7d4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c7d8:	f383 8811 	msr	BASEPRI, r3
 800c7dc:	f3bf 8f6f 	isb	sy
 800c7e0:	f3bf 8f4f 	dsb	sy
 800c7e4:	60fb      	str	r3, [r7, #12]
}
 800c7e6:	bf00      	nop
 800c7e8:	e7fe      	b.n	800c7e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c7ea:	4b07      	ldr	r3, [pc, #28]	; (800c808 <vTaskPlaceOnEventList+0x44>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	3318      	adds	r3, #24
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f7fe f999 	bl	800ab2a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c7f8:	2101      	movs	r1, #1
 800c7fa:	6838      	ldr	r0, [r7, #0]
 800c7fc:	f000 faf2 	bl	800cde4 <prvAddCurrentTaskToDelayedList>
}
 800c800:	bf00      	nop
 800c802:	3710      	adds	r7, #16
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}
 800c808:	20009164 	.word	0x20009164

0800c80c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b086      	sub	sp, #24
 800c810:	af00      	add	r7, sp, #0
 800c812:	60f8      	str	r0, [r7, #12]
 800c814:	60b9      	str	r1, [r7, #8]
 800c816:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d10a      	bne.n	800c834 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c81e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c822:	f383 8811 	msr	BASEPRI, r3
 800c826:	f3bf 8f6f 	isb	sy
 800c82a:	f3bf 8f4f 	dsb	sy
 800c82e:	617b      	str	r3, [r7, #20]
}
 800c830:	bf00      	nop
 800c832:	e7fe      	b.n	800c832 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c834:	4b0a      	ldr	r3, [pc, #40]	; (800c860 <vTaskPlaceOnEventListRestricted+0x54>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	3318      	adds	r3, #24
 800c83a:	4619      	mov	r1, r3
 800c83c:	68f8      	ldr	r0, [r7, #12]
 800c83e:	f7fe f950 	bl	800aae2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d002      	beq.n	800c84e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c848:	f04f 33ff 	mov.w	r3, #4294967295
 800c84c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c84e:	6879      	ldr	r1, [r7, #4]
 800c850:	68b8      	ldr	r0, [r7, #8]
 800c852:	f000 fac7 	bl	800cde4 <prvAddCurrentTaskToDelayedList>
	}
 800c856:	bf00      	nop
 800c858:	3718      	adds	r7, #24
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	bf00      	nop
 800c860:	20009164 	.word	0x20009164

0800c864 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b086      	sub	sp, #24
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	68db      	ldr	r3, [r3, #12]
 800c870:	68db      	ldr	r3, [r3, #12]
 800c872:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d10a      	bne.n	800c890 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c87a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c87e:	f383 8811 	msr	BASEPRI, r3
 800c882:	f3bf 8f6f 	isb	sy
 800c886:	f3bf 8f4f 	dsb	sy
 800c88a:	60fb      	str	r3, [r7, #12]
}
 800c88c:	bf00      	nop
 800c88e:	e7fe      	b.n	800c88e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	3318      	adds	r3, #24
 800c894:	4618      	mov	r0, r3
 800c896:	f7fe f981 	bl	800ab9c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c89a:	4b1f      	ldr	r3, [pc, #124]	; (800c918 <xTaskRemoveFromEventList+0xb4>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d11f      	bne.n	800c8e2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	3304      	adds	r3, #4
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f7fe f978 	bl	800ab9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8b0:	4b1a      	ldr	r3, [pc, #104]	; (800c91c <xTaskRemoveFromEventList+0xb8>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d903      	bls.n	800c8c0 <xTaskRemoveFromEventList+0x5c>
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8bc:	4a17      	ldr	r2, [pc, #92]	; (800c91c <xTaskRemoveFromEventList+0xb8>)
 800c8be:	6013      	str	r3, [r2, #0]
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8c4:	4613      	mov	r3, r2
 800c8c6:	009b      	lsls	r3, r3, #2
 800c8c8:	4413      	add	r3, r2
 800c8ca:	009b      	lsls	r3, r3, #2
 800c8cc:	4a14      	ldr	r2, [pc, #80]	; (800c920 <xTaskRemoveFromEventList+0xbc>)
 800c8ce:	441a      	add	r2, r3
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	3304      	adds	r3, #4
 800c8d4:	4619      	mov	r1, r3
 800c8d6:	4610      	mov	r0, r2
 800c8d8:	f7fe f903 	bl	800aae2 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800c8dc:	f000 f9d0 	bl	800cc80 <prvResetNextTaskUnblockTime>
 800c8e0:	e005      	b.n	800c8ee <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c8e2:	693b      	ldr	r3, [r7, #16]
 800c8e4:	3318      	adds	r3, #24
 800c8e6:	4619      	mov	r1, r3
 800c8e8:	480e      	ldr	r0, [pc, #56]	; (800c924 <xTaskRemoveFromEventList+0xc0>)
 800c8ea:	f7fe f8fa 	bl	800aae2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8f2:	4b0d      	ldr	r3, [pc, #52]	; (800c928 <xTaskRemoveFromEventList+0xc4>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d905      	bls.n	800c908 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c900:	4b0a      	ldr	r3, [pc, #40]	; (800c92c <xTaskRemoveFromEventList+0xc8>)
 800c902:	2201      	movs	r2, #1
 800c904:	601a      	str	r2, [r3, #0]
 800c906:	e001      	b.n	800c90c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800c908:	2300      	movs	r3, #0
 800c90a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c90c:	697b      	ldr	r3, [r7, #20]
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3718      	adds	r7, #24
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}
 800c916:	bf00      	nop
 800c918:	20009664 	.word	0x20009664
 800c91c:	20009644 	.word	0x20009644
 800c920:	20009168 	.word	0x20009168
 800c924:	200095f8 	.word	0x200095f8
 800c928:	20009164 	.word	0x20009164
 800c92c:	20009650 	.word	0x20009650

0800c930 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c930:	b480      	push	{r7}
 800c932:	b083      	sub	sp, #12
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c938:	4b06      	ldr	r3, [pc, #24]	; (800c954 <vTaskInternalSetTimeOutState+0x24>)
 800c93a:	681a      	ldr	r2, [r3, #0]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c940:	4b05      	ldr	r3, [pc, #20]	; (800c958 <vTaskInternalSetTimeOutState+0x28>)
 800c942:	681a      	ldr	r2, [r3, #0]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	605a      	str	r2, [r3, #4]
}
 800c948:	bf00      	nop
 800c94a:	370c      	adds	r7, #12
 800c94c:	46bd      	mov	sp, r7
 800c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c952:	4770      	bx	lr
 800c954:	20009654 	.word	0x20009654
 800c958:	20009640 	.word	0x20009640

0800c95c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b088      	sub	sp, #32
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d10a      	bne.n	800c982 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c96c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c970:	f383 8811 	msr	BASEPRI, r3
 800c974:	f3bf 8f6f 	isb	sy
 800c978:	f3bf 8f4f 	dsb	sy
 800c97c:	613b      	str	r3, [r7, #16]
}
 800c97e:	bf00      	nop
 800c980:	e7fe      	b.n	800c980 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d10a      	bne.n	800c99e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c988:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c98c:	f383 8811 	msr	BASEPRI, r3
 800c990:	f3bf 8f6f 	isb	sy
 800c994:	f3bf 8f4f 	dsb	sy
 800c998:	60fb      	str	r3, [r7, #12]
}
 800c99a:	bf00      	nop
 800c99c:	e7fe      	b.n	800c99c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c99e:	f7fe fa51 	bl	800ae44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c9a2:	4b24      	ldr	r3, [pc, #144]	; (800ca34 <xTaskCheckForTimeOut+0xd8>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	685b      	ldr	r3, [r3, #4]
 800c9ac:	69ba      	ldr	r2, [r7, #24]
 800c9ae:	1ad3      	subs	r3, r2, r3
 800c9b0:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800c9b2:	4b21      	ldr	r3, [pc, #132]	; (800ca38 <xTaskCheckForTimeOut+0xdc>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	f893 31b6 	ldrb.w	r3, [r3, #438]	; 0x1b6
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d007      	beq.n	800c9ce <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800c9be:	4b1e      	ldr	r3, [pc, #120]	; (800ca38 <xTaskCheckForTimeOut+0xdc>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
				xReturn = pdTRUE;
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	61fb      	str	r3, [r7, #28]
 800c9cc:	e02b      	b.n	800ca26 <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9d6:	d102      	bne.n	800c9de <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	61fb      	str	r3, [r7, #28]
 800c9dc:	e023      	b.n	800ca26 <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681a      	ldr	r2, [r3, #0]
 800c9e2:	4b16      	ldr	r3, [pc, #88]	; (800ca3c <xTaskCheckForTimeOut+0xe0>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	429a      	cmp	r2, r3
 800c9e8:	d007      	beq.n	800c9fa <xTaskCheckForTimeOut+0x9e>
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	685b      	ldr	r3, [r3, #4]
 800c9ee:	69ba      	ldr	r2, [r7, #24]
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	d302      	bcc.n	800c9fa <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	61fb      	str	r3, [r7, #28]
 800c9f8:	e015      	b.n	800ca26 <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	697a      	ldr	r2, [r7, #20]
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d20b      	bcs.n	800ca1c <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	681a      	ldr	r2, [r3, #0]
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	1ad2      	subs	r2, r2, r3
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f7ff ff8d 	bl	800c930 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ca16:	2300      	movs	r3, #0
 800ca18:	61fb      	str	r3, [r7, #28]
 800ca1a:	e004      	b.n	800ca26 <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ca22:	2301      	movs	r3, #1
 800ca24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ca26:	f7fe fa3d 	bl	800aea4 <vPortExitCritical>

	return xReturn;
 800ca2a:	69fb      	ldr	r3, [r7, #28]
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3720      	adds	r7, #32
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}
 800ca34:	20009640 	.word	0x20009640
 800ca38:	20009164 	.word	0x20009164
 800ca3c:	20009654 	.word	0x20009654

0800ca40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ca40:	b480      	push	{r7}
 800ca42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ca44:	4b03      	ldr	r3, [pc, #12]	; (800ca54 <vTaskMissedYield+0x14>)
 800ca46:	2201      	movs	r2, #1
 800ca48:	601a      	str	r2, [r3, #0]
}
 800ca4a:	bf00      	nop
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca52:	4770      	bx	lr
 800ca54:	20009650 	.word	0x20009650

0800ca58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b084      	sub	sp, #16
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ca60:	f000 f8aa 	bl	800cbb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ca64:	4b19      	ldr	r3, [pc, #100]	; (800cacc <prvIdleTask+0x74>)
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d907      	bls.n	800ca7c <prvIdleTask+0x24>
			{
				taskYIELD();
 800ca6c:	4b18      	ldr	r3, [pc, #96]	; (800cad0 <prvIdleTask+0x78>)
 800ca6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca72:	601a      	str	r2, [r3, #0]
 800ca74:	f3bf 8f4f 	dsb	sy
 800ca78:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800ca7c:	f7f5 ffe7 	bl	8002a4e <vApplicationIdleHook>
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800ca80:	f7ff fc18 	bl	800c2b4 <prvGetExpectedIdleTime>
 800ca84:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	d9e9      	bls.n	800ca60 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800ca8c:	f7ff fc04 	bl	800c298 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800ca90:	4b10      	ldr	r3, [pc, #64]	; (800cad4 <prvIdleTask+0x7c>)
 800ca92:	681a      	ldr	r2, [r3, #0]
 800ca94:	4b10      	ldr	r3, [pc, #64]	; (800cad8 <prvIdleTask+0x80>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	d20a      	bcs.n	800cab2 <prvIdleTask+0x5a>
	__asm volatile
 800ca9c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800caa0:	f383 8811 	msr	BASEPRI, r3
 800caa4:	f3bf 8f6f 	isb	sy
 800caa8:	f3bf 8f4f 	dsb	sy
 800caac:	60bb      	str	r3, [r7, #8]
}
 800caae:	bf00      	nop
 800cab0:	e7fe      	b.n	800cab0 <prvIdleTask+0x58>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800cab2:	f7ff fbff 	bl	800c2b4 <prvGetExpectedIdleTime>
 800cab6:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	2b01      	cmp	r3, #1
 800cabc:	d902      	bls.n	800cac4 <prvIdleTask+0x6c>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800cabe:	68f8      	ldr	r0, [r7, #12]
 800cac0:	f7fe fa74 	bl	800afac <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800cac4:	f7ff fc2e 	bl	800c324 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800cac8:	e7ca      	b.n	800ca60 <prvIdleTask+0x8>
 800caca:	bf00      	nop
 800cacc:	20009168 	.word	0x20009168
 800cad0:	e000ed04 	.word	0xe000ed04
 800cad4:	2000965c 	.word	0x2000965c
 800cad8:	20009640 	.word	0x20009640

0800cadc <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800cadc:	b480      	push	{r7}
 800cade:	b083      	sub	sp, #12
 800cae0:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800cae2:	2301      	movs	r3, #1
 800cae4:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800cae6:	2301      	movs	r3, #1
 800cae8:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800caea:	4b0f      	ldr	r3, [pc, #60]	; (800cb28 <eTaskConfirmSleepModeStatus+0x4c>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d002      	beq.n	800caf8 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800caf2:	2300      	movs	r3, #0
 800caf4:	71fb      	strb	r3, [r7, #7]
 800caf6:	e010      	b.n	800cb1a <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800caf8:	4b0c      	ldr	r3, [pc, #48]	; (800cb2c <eTaskConfirmSleepModeStatus+0x50>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d002      	beq.n	800cb06 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800cb00:	2300      	movs	r3, #0
 800cb02:	71fb      	strb	r3, [r7, #7]
 800cb04:	e009      	b.n	800cb1a <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800cb06:	4b0a      	ldr	r3, [pc, #40]	; (800cb30 <eTaskConfirmSleepModeStatus+0x54>)
 800cb08:	681a      	ldr	r2, [r3, #0]
 800cb0a:	4b0a      	ldr	r3, [pc, #40]	; (800cb34 <eTaskConfirmSleepModeStatus+0x58>)
 800cb0c:	6819      	ldr	r1, [r3, #0]
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	1acb      	subs	r3, r1, r3
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d101      	bne.n	800cb1a <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800cb16:	2302      	movs	r3, #2
 800cb18:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800cb1a:	79fb      	ldrb	r3, [r7, #7]
	}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	370c      	adds	r7, #12
 800cb20:	46bd      	mov	sp, r7
 800cb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb26:	4770      	bx	lr
 800cb28:	200095f8 	.word	0x200095f8
 800cb2c:	20009650 	.word	0x20009650
 800cb30:	20009624 	.word	0x20009624
 800cb34:	2000963c 	.word	0x2000963c

0800cb38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b082      	sub	sp, #8
 800cb3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb3e:	2300      	movs	r3, #0
 800cb40:	607b      	str	r3, [r7, #4]
 800cb42:	e00c      	b.n	800cb5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cb44:	687a      	ldr	r2, [r7, #4]
 800cb46:	4613      	mov	r3, r2
 800cb48:	009b      	lsls	r3, r3, #2
 800cb4a:	4413      	add	r3, r2
 800cb4c:	009b      	lsls	r3, r3, #2
 800cb4e:	4a12      	ldr	r2, [pc, #72]	; (800cb98 <prvInitialiseTaskLists+0x60>)
 800cb50:	4413      	add	r3, r2
 800cb52:	4618      	mov	r0, r3
 800cb54:	f7fd ff98 	bl	800aa88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	607b      	str	r3, [r7, #4]
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2b37      	cmp	r3, #55	; 0x37
 800cb62:	d9ef      	bls.n	800cb44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cb64:	480d      	ldr	r0, [pc, #52]	; (800cb9c <prvInitialiseTaskLists+0x64>)
 800cb66:	f7fd ff8f 	bl	800aa88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cb6a:	480d      	ldr	r0, [pc, #52]	; (800cba0 <prvInitialiseTaskLists+0x68>)
 800cb6c:	f7fd ff8c 	bl	800aa88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cb70:	480c      	ldr	r0, [pc, #48]	; (800cba4 <prvInitialiseTaskLists+0x6c>)
 800cb72:	f7fd ff89 	bl	800aa88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cb76:	480c      	ldr	r0, [pc, #48]	; (800cba8 <prvInitialiseTaskLists+0x70>)
 800cb78:	f7fd ff86 	bl	800aa88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cb7c:	480b      	ldr	r0, [pc, #44]	; (800cbac <prvInitialiseTaskLists+0x74>)
 800cb7e:	f7fd ff83 	bl	800aa88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cb82:	4b0b      	ldr	r3, [pc, #44]	; (800cbb0 <prvInitialiseTaskLists+0x78>)
 800cb84:	4a05      	ldr	r2, [pc, #20]	; (800cb9c <prvInitialiseTaskLists+0x64>)
 800cb86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cb88:	4b0a      	ldr	r3, [pc, #40]	; (800cbb4 <prvInitialiseTaskLists+0x7c>)
 800cb8a:	4a05      	ldr	r2, [pc, #20]	; (800cba0 <prvInitialiseTaskLists+0x68>)
 800cb8c:	601a      	str	r2, [r3, #0]
}
 800cb8e:	bf00      	nop
 800cb90:	3708      	adds	r7, #8
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}
 800cb96:	bf00      	nop
 800cb98:	20009168 	.word	0x20009168
 800cb9c:	200095c8 	.word	0x200095c8
 800cba0:	200095dc 	.word	0x200095dc
 800cba4:	200095f8 	.word	0x200095f8
 800cba8:	2000960c 	.word	0x2000960c
 800cbac:	20009624 	.word	0x20009624
 800cbb0:	200095f0 	.word	0x200095f0
 800cbb4:	200095f4 	.word	0x200095f4

0800cbb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b082      	sub	sp, #8
 800cbbc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cbbe:	e019      	b.n	800cbf4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cbc0:	f7fe f940 	bl	800ae44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbc4:	4b10      	ldr	r3, [pc, #64]	; (800cc08 <prvCheckTasksWaitingTermination+0x50>)
 800cbc6:	68db      	ldr	r3, [r3, #12]
 800cbc8:	68db      	ldr	r3, [r3, #12]
 800cbca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	3304      	adds	r3, #4
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f7fd ffe3 	bl	800ab9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cbd6:	4b0d      	ldr	r3, [pc, #52]	; (800cc0c <prvCheckTasksWaitingTermination+0x54>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	3b01      	subs	r3, #1
 800cbdc:	4a0b      	ldr	r2, [pc, #44]	; (800cc0c <prvCheckTasksWaitingTermination+0x54>)
 800cbde:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cbe0:	4b0b      	ldr	r3, [pc, #44]	; (800cc10 <prvCheckTasksWaitingTermination+0x58>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	3b01      	subs	r3, #1
 800cbe6:	4a0a      	ldr	r2, [pc, #40]	; (800cc10 <prvCheckTasksWaitingTermination+0x58>)
 800cbe8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cbea:	f7fe f95b 	bl	800aea4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f000 f810 	bl	800cc14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cbf4:	4b06      	ldr	r3, [pc, #24]	; (800cc10 <prvCheckTasksWaitingTermination+0x58>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d1e1      	bne.n	800cbc0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cbfc:	bf00      	nop
 800cbfe:	bf00      	nop
 800cc00:	3708      	adds	r7, #8
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}
 800cc06:	bf00      	nop
 800cc08:	2000960c 	.word	0x2000960c
 800cc0c:	2000963c 	.word	0x2000963c
 800cc10:	20009620 	.word	0x20009620

0800cc14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b084      	sub	sp, #16
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cc22:	4618      	mov	r0, r3
 800cc24:	f001 ff86 	bl	800eb34 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d108      	bne.n	800cc44 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc36:	4618      	mov	r0, r3
 800cc38:	f7fd fda0 	bl	800a77c <vPortFree>
				vPortFree( pxTCB );
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f7fd fd9d 	bl	800a77c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cc42:	e018      	b.n	800cc76 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800cc4a:	2b01      	cmp	r3, #1
 800cc4c:	d103      	bne.n	800cc56 <prvDeleteTCB+0x42>
				vPortFree( pxTCB );
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f7fd fd94 	bl	800a77c <vPortFree>
	}
 800cc54:	e00f      	b.n	800cc76 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800cc5c:	2b02      	cmp	r3, #2
 800cc5e:	d00a      	beq.n	800cc76 <prvDeleteTCB+0x62>
	__asm volatile
 800cc60:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800cc64:	f383 8811 	msr	BASEPRI, r3
 800cc68:	f3bf 8f6f 	isb	sy
 800cc6c:	f3bf 8f4f 	dsb	sy
 800cc70:	60fb      	str	r3, [r7, #12]
}
 800cc72:	bf00      	nop
 800cc74:	e7fe      	b.n	800cc74 <prvDeleteTCB+0x60>
	}
 800cc76:	bf00      	nop
 800cc78:	3710      	adds	r7, #16
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
	...

0800cc80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cc80:	b480      	push	{r7}
 800cc82:	b083      	sub	sp, #12
 800cc84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc86:	4b0c      	ldr	r3, [pc, #48]	; (800ccb8 <prvResetNextTaskUnblockTime+0x38>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d104      	bne.n	800cc9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cc90:	4b0a      	ldr	r3, [pc, #40]	; (800ccbc <prvResetNextTaskUnblockTime+0x3c>)
 800cc92:	f04f 32ff 	mov.w	r2, #4294967295
 800cc96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cc98:	e008      	b.n	800ccac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc9a:	4b07      	ldr	r3, [pc, #28]	; (800ccb8 <prvResetNextTaskUnblockTime+0x38>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	68db      	ldr	r3, [r3, #12]
 800cca0:	68db      	ldr	r3, [r3, #12]
 800cca2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	685b      	ldr	r3, [r3, #4]
 800cca8:	4a04      	ldr	r2, [pc, #16]	; (800ccbc <prvResetNextTaskUnblockTime+0x3c>)
 800ccaa:	6013      	str	r3, [r2, #0]
}
 800ccac:	bf00      	nop
 800ccae:	370c      	adds	r7, #12
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb6:	4770      	bx	lr
 800ccb8:	200095f0 	.word	0x200095f0
 800ccbc:	2000965c 	.word	0x2000965c

0800ccc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b083      	sub	sp, #12
 800ccc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ccc6:	4b0b      	ldr	r3, [pc, #44]	; (800ccf4 <xTaskGetSchedulerState+0x34>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d102      	bne.n	800ccd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ccce:	2301      	movs	r3, #1
 800ccd0:	607b      	str	r3, [r7, #4]
 800ccd2:	e008      	b.n	800cce6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ccd4:	4b08      	ldr	r3, [pc, #32]	; (800ccf8 <xTaskGetSchedulerState+0x38>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d102      	bne.n	800cce2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ccdc:	2302      	movs	r3, #2
 800ccde:	607b      	str	r3, [r7, #4]
 800cce0:	e001      	b.n	800cce6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cce2:	2300      	movs	r3, #0
 800cce4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cce6:	687b      	ldr	r3, [r7, #4]
	}
 800cce8:	4618      	mov	r0, r3
 800ccea:	370c      	adds	r7, #12
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr
 800ccf4:	20009648 	.word	0x20009648
 800ccf8:	20009664 	.word	0x20009664

0800ccfc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b086      	sub	sp, #24
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cd08:	2300      	movs	r3, #0
 800cd0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d05c      	beq.n	800cdcc <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cd12:	4b31      	ldr	r3, [pc, #196]	; (800cdd8 <xTaskPriorityDisinherit+0xdc>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	693a      	ldr	r2, [r7, #16]
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d00a      	beq.n	800cd32 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cd1c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800cd20:	f383 8811 	msr	BASEPRI, r3
 800cd24:	f3bf 8f6f 	isb	sy
 800cd28:	f3bf 8f4f 	dsb	sy
 800cd2c:	60fb      	str	r3, [r7, #12]
}
 800cd2e:	bf00      	nop
 800cd30:	e7fe      	b.n	800cd30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d10a      	bne.n	800cd52 <xTaskPriorityDisinherit+0x56>
	__asm volatile
 800cd3c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800cd40:	f383 8811 	msr	BASEPRI, r3
 800cd44:	f3bf 8f6f 	isb	sy
 800cd48:	f3bf 8f4f 	dsb	sy
 800cd4c:	60bb      	str	r3, [r7, #8]
}
 800cd4e:	bf00      	nop
 800cd50:	e7fe      	b.n	800cd50 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800cd58:	1e5a      	subs	r2, r3, #1
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd64:	693b      	ldr	r3, [r7, #16]
 800cd66:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d02e      	beq.n	800cdcc <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d129      	bne.n	800cdcc <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd78:	693b      	ldr	r3, [r7, #16]
 800cd7a:	3304      	adds	r3, #4
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f7fd ff0d 	bl	800ab9c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cd82:	693b      	ldr	r3, [r7, #16]
 800cd84:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd8c:	693b      	ldr	r3, [r7, #16]
 800cd8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd90:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cd98:	693b      	ldr	r3, [r7, #16]
 800cd9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd9c:	4b0f      	ldr	r3, [pc, #60]	; (800cddc <xTaskPriorityDisinherit+0xe0>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d903      	bls.n	800cdac <xTaskPriorityDisinherit+0xb0>
 800cda4:	693b      	ldr	r3, [r7, #16]
 800cda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cda8:	4a0c      	ldr	r2, [pc, #48]	; (800cddc <xTaskPriorityDisinherit+0xe0>)
 800cdaa:	6013      	str	r3, [r2, #0]
 800cdac:	693b      	ldr	r3, [r7, #16]
 800cdae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdb0:	4613      	mov	r3, r2
 800cdb2:	009b      	lsls	r3, r3, #2
 800cdb4:	4413      	add	r3, r2
 800cdb6:	009b      	lsls	r3, r3, #2
 800cdb8:	4a09      	ldr	r2, [pc, #36]	; (800cde0 <xTaskPriorityDisinherit+0xe4>)
 800cdba:	441a      	add	r2, r3
 800cdbc:	693b      	ldr	r3, [r7, #16]
 800cdbe:	3304      	adds	r3, #4
 800cdc0:	4619      	mov	r1, r3
 800cdc2:	4610      	mov	r0, r2
 800cdc4:	f7fd fe8d 	bl	800aae2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cdc8:	2301      	movs	r3, #1
 800cdca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cdcc:	697b      	ldr	r3, [r7, #20]
	}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3718      	adds	r7, #24
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}
 800cdd6:	bf00      	nop
 800cdd8:	20009164 	.word	0x20009164
 800cddc:	20009644 	.word	0x20009644
 800cde0:	20009168 	.word	0x20009168

0800cde4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b084      	sub	sp, #16
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cdee:	4b24      	ldr	r3, [pc, #144]	; (800ce80 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800cdf4:	4b23      	ldr	r3, [pc, #140]	; (800ce84 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cdfe:	4b21      	ldr	r3, [pc, #132]	; (800ce84 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	3304      	adds	r3, #4
 800ce04:	4618      	mov	r0, r3
 800ce06:	f7fd fec9 	bl	800ab9c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce10:	d10a      	bne.n	800ce28 <prvAddCurrentTaskToDelayedList+0x44>
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d007      	beq.n	800ce28 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce18:	4b1a      	ldr	r3, [pc, #104]	; (800ce84 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	3304      	adds	r3, #4
 800ce1e:	4619      	mov	r1, r3
 800ce20:	4819      	ldr	r0, [pc, #100]	; (800ce88 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ce22:	f7fd fe5e 	bl	800aae2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ce26:	e026      	b.n	800ce76 <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ce28:	68fa      	ldr	r2, [r7, #12]
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	4413      	add	r3, r2
 800ce2e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ce30:	4b14      	ldr	r3, [pc, #80]	; (800ce84 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	68ba      	ldr	r2, [r7, #8]
 800ce36:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ce38:	68ba      	ldr	r2, [r7, #8]
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d209      	bcs.n	800ce54 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce40:	4b12      	ldr	r3, [pc, #72]	; (800ce8c <prvAddCurrentTaskToDelayedList+0xa8>)
 800ce42:	681a      	ldr	r2, [r3, #0]
 800ce44:	4b0f      	ldr	r3, [pc, #60]	; (800ce84 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	3304      	adds	r3, #4
 800ce4a:	4619      	mov	r1, r3
 800ce4c:	4610      	mov	r0, r2
 800ce4e:	f7fd fe6c 	bl	800ab2a <vListInsert>
}
 800ce52:	e010      	b.n	800ce76 <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce54:	4b0e      	ldr	r3, [pc, #56]	; (800ce90 <prvAddCurrentTaskToDelayedList+0xac>)
 800ce56:	681a      	ldr	r2, [r3, #0]
 800ce58:	4b0a      	ldr	r3, [pc, #40]	; (800ce84 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	3304      	adds	r3, #4
 800ce5e:	4619      	mov	r1, r3
 800ce60:	4610      	mov	r0, r2
 800ce62:	f7fd fe62 	bl	800ab2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ce66:	4b0b      	ldr	r3, [pc, #44]	; (800ce94 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	68ba      	ldr	r2, [r7, #8]
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	d202      	bcs.n	800ce76 <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 800ce70:	4a08      	ldr	r2, [pc, #32]	; (800ce94 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	6013      	str	r3, [r2, #0]
}
 800ce76:	bf00      	nop
 800ce78:	3710      	adds	r7, #16
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}
 800ce7e:	bf00      	nop
 800ce80:	20009640 	.word	0x20009640
 800ce84:	20009164 	.word	0x20009164
 800ce88:	20009624 	.word	0x20009624
 800ce8c:	200095f4 	.word	0x200095f4
 800ce90:	200095f0 	.word	0x200095f0
 800ce94:	2000965c 	.word	0x2000965c

0800ce98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b08a      	sub	sp, #40	; 0x28
 800ce9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cea2:	f000 fba1 	bl	800d5e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cea6:	4b1c      	ldr	r3, [pc, #112]	; (800cf18 <xTimerCreateTimerTask+0x80>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d021      	beq.n	800cef2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ceb6:	1d3a      	adds	r2, r7, #4
 800ceb8:	f107 0108 	add.w	r1, r7, #8
 800cebc:	f107 030c 	add.w	r3, r7, #12
 800cec0:	4618      	mov	r0, r3
 800cec2:	f7fd fb99 	bl	800a5f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cec6:	6879      	ldr	r1, [r7, #4]
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	68fa      	ldr	r2, [r7, #12]
 800cecc:	9202      	str	r2, [sp, #8]
 800cece:	9301      	str	r3, [sp, #4]
 800ced0:	2337      	movs	r3, #55	; 0x37
 800ced2:	9300      	str	r3, [sp, #0]
 800ced4:	2300      	movs	r3, #0
 800ced6:	460a      	mov	r2, r1
 800ced8:	4910      	ldr	r1, [pc, #64]	; (800cf1c <xTimerCreateTimerTask+0x84>)
 800ceda:	4811      	ldr	r0, [pc, #68]	; (800cf20 <xTimerCreateTimerTask+0x88>)
 800cedc:	f7fe fea4 	bl	800bc28 <xTaskCreateStatic>
 800cee0:	4603      	mov	r3, r0
 800cee2:	4a10      	ldr	r2, [pc, #64]	; (800cf24 <xTimerCreateTimerTask+0x8c>)
 800cee4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cee6:	4b0f      	ldr	r3, [pc, #60]	; (800cf24 <xTimerCreateTimerTask+0x8c>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d001      	beq.n	800cef2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ceee:	2301      	movs	r3, #1
 800cef0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d10a      	bne.n	800cf0e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800cef8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800cefc:	f383 8811 	msr	BASEPRI, r3
 800cf00:	f3bf 8f6f 	isb	sy
 800cf04:	f3bf 8f4f 	dsb	sy
 800cf08:	613b      	str	r3, [r7, #16]
}
 800cf0a:	bf00      	nop
 800cf0c:	e7fe      	b.n	800cf0c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cf0e:	697b      	ldr	r3, [r7, #20]
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	3718      	adds	r7, #24
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}
 800cf18:	200096a0 	.word	0x200096a0
 800cf1c:	0800efc8 	.word	0x0800efc8
 800cf20:	0800d191 	.word	0x0800d191
 800cf24:	200096a4 	.word	0x200096a4

0800cf28 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b088      	sub	sp, #32
 800cf2c:	af02      	add	r7, sp, #8
 800cf2e:	60f8      	str	r0, [r7, #12]
 800cf30:	60b9      	str	r1, [r7, #8]
 800cf32:	607a      	str	r2, [r7, #4]
 800cf34:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800cf36:	202c      	movs	r0, #44	; 0x2c
 800cf38:	f7fd fb78 	bl	800a62c <pvPortMalloc>
 800cf3c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800cf3e:	697b      	ldr	r3, [r7, #20]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d00d      	beq.n	800cf60 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800cf44:	697b      	ldr	r3, [r7, #20]
 800cf46:	2200      	movs	r2, #0
 800cf48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800cf4c:	697b      	ldr	r3, [r7, #20]
 800cf4e:	9301      	str	r3, [sp, #4]
 800cf50:	6a3b      	ldr	r3, [r7, #32]
 800cf52:	9300      	str	r3, [sp, #0]
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	687a      	ldr	r2, [r7, #4]
 800cf58:	68b9      	ldr	r1, [r7, #8]
 800cf5a:	68f8      	ldr	r0, [r7, #12]
 800cf5c:	f000 f843 	bl	800cfe6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800cf60:	697b      	ldr	r3, [r7, #20]
	}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3718      	adds	r7, #24
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}

0800cf6a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800cf6a:	b580      	push	{r7, lr}
 800cf6c:	b08a      	sub	sp, #40	; 0x28
 800cf6e:	af02      	add	r7, sp, #8
 800cf70:	60f8      	str	r0, [r7, #12]
 800cf72:	60b9      	str	r1, [r7, #8]
 800cf74:	607a      	str	r2, [r7, #4]
 800cf76:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800cf78:	232c      	movs	r3, #44	; 0x2c
 800cf7a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	2b2c      	cmp	r3, #44	; 0x2c
 800cf80:	d00a      	beq.n	800cf98 <xTimerCreateStatic+0x2e>
	__asm volatile
 800cf82:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800cf86:	f383 8811 	msr	BASEPRI, r3
 800cf8a:	f3bf 8f6f 	isb	sy
 800cf8e:	f3bf 8f4f 	dsb	sy
 800cf92:	61bb      	str	r3, [r7, #24]
}
 800cf94:	bf00      	nop
 800cf96:	e7fe      	b.n	800cf96 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cf98:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800cf9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d10a      	bne.n	800cfb6 <xTimerCreateStatic+0x4c>
	__asm volatile
 800cfa0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800cfa4:	f383 8811 	msr	BASEPRI, r3
 800cfa8:	f3bf 8f6f 	isb	sy
 800cfac:	f3bf 8f4f 	dsb	sy
 800cfb0:	617b      	str	r3, [r7, #20]
}
 800cfb2:	bf00      	nop
 800cfb4:	e7fe      	b.n	800cfb4 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800cfb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb8:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800cfba:	69fb      	ldr	r3, [r7, #28]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d00d      	beq.n	800cfdc <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800cfc0:	69fb      	ldr	r3, [r7, #28]
 800cfc2:	2202      	movs	r2, #2
 800cfc4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800cfc8:	69fb      	ldr	r3, [r7, #28]
 800cfca:	9301      	str	r3, [sp, #4]
 800cfcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfce:	9300      	str	r3, [sp, #0]
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	687a      	ldr	r2, [r7, #4]
 800cfd4:	68b9      	ldr	r1, [r7, #8]
 800cfd6:	68f8      	ldr	r0, [r7, #12]
 800cfd8:	f000 f805 	bl	800cfe6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800cfdc:	69fb      	ldr	r3, [r7, #28]
	}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3720      	adds	r7, #32
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}

0800cfe6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800cfe6:	b580      	push	{r7, lr}
 800cfe8:	b086      	sub	sp, #24
 800cfea:	af00      	add	r7, sp, #0
 800cfec:	60f8      	str	r0, [r7, #12]
 800cfee:	60b9      	str	r1, [r7, #8]
 800cff0:	607a      	str	r2, [r7, #4]
 800cff2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d10a      	bne.n	800d010 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800cffa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800cffe:	f383 8811 	msr	BASEPRI, r3
 800d002:	f3bf 8f6f 	isb	sy
 800d006:	f3bf 8f4f 	dsb	sy
 800d00a:	617b      	str	r3, [r7, #20]
}
 800d00c:	bf00      	nop
 800d00e:	e7fe      	b.n	800d00e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800d010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d012:	2b00      	cmp	r3, #0
 800d014:	d01e      	beq.n	800d054 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800d016:	f000 fae7 	bl	800d5e8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800d01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d01c:	68fa      	ldr	r2, [r7, #12]
 800d01e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800d020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d022:	68ba      	ldr	r2, [r7, #8]
 800d024:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800d026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d028:	683a      	ldr	r2, [r7, #0]
 800d02a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800d02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d02e:	6a3a      	ldr	r2, [r7, #32]
 800d030:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800d032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d034:	3304      	adds	r3, #4
 800d036:	4618      	mov	r0, r3
 800d038:	f7fd fd46 	bl	800aac8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d008      	beq.n	800d054 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800d042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d048:	f043 0304 	orr.w	r3, r3, #4
 800d04c:	b2da      	uxtb	r2, r3
 800d04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d050:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800d054:	bf00      	nop
 800d056:	3718      	adds	r7, #24
 800d058:	46bd      	mov	sp, r7
 800d05a:	bd80      	pop	{r7, pc}

0800d05c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b08a      	sub	sp, #40	; 0x28
 800d060:	af00      	add	r7, sp, #0
 800d062:	60f8      	str	r0, [r7, #12]
 800d064:	60b9      	str	r1, [r7, #8]
 800d066:	607a      	str	r2, [r7, #4]
 800d068:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d06a:	2300      	movs	r3, #0
 800d06c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d10a      	bne.n	800d08a <xTimerGenericCommand+0x2e>
	__asm volatile
 800d074:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d078:	f383 8811 	msr	BASEPRI, r3
 800d07c:	f3bf 8f6f 	isb	sy
 800d080:	f3bf 8f4f 	dsb	sy
 800d084:	623b      	str	r3, [r7, #32]
}
 800d086:	bf00      	nop
 800d088:	e7fe      	b.n	800d088 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d08a:	4b1a      	ldr	r3, [pc, #104]	; (800d0f4 <xTimerGenericCommand+0x98>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d02a      	beq.n	800d0e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	2b05      	cmp	r3, #5
 800d0a2:	dc18      	bgt.n	800d0d6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d0a4:	f7ff fe0c 	bl	800ccc0 <xTaskGetSchedulerState>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	2b02      	cmp	r3, #2
 800d0ac:	d109      	bne.n	800d0c2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d0ae:	4b11      	ldr	r3, [pc, #68]	; (800d0f4 <xTimerGenericCommand+0x98>)
 800d0b0:	6818      	ldr	r0, [r3, #0]
 800d0b2:	f107 0110 	add.w	r1, r7, #16
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0ba:	f7fe f9cd 	bl	800b458 <xQueueGenericSend>
 800d0be:	6278      	str	r0, [r7, #36]	; 0x24
 800d0c0:	e012      	b.n	800d0e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d0c2:	4b0c      	ldr	r3, [pc, #48]	; (800d0f4 <xTimerGenericCommand+0x98>)
 800d0c4:	6818      	ldr	r0, [r3, #0]
 800d0c6:	f107 0110 	add.w	r1, r7, #16
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	f7fe f9c3 	bl	800b458 <xQueueGenericSend>
 800d0d2:	6278      	str	r0, [r7, #36]	; 0x24
 800d0d4:	e008      	b.n	800d0e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d0d6:	4b07      	ldr	r3, [pc, #28]	; (800d0f4 <xTimerGenericCommand+0x98>)
 800d0d8:	6818      	ldr	r0, [r3, #0]
 800d0da:	f107 0110 	add.w	r1, r7, #16
 800d0de:	2300      	movs	r3, #0
 800d0e0:	683a      	ldr	r2, [r7, #0]
 800d0e2:	f7fe fab7 	bl	800b654 <xQueueGenericSendFromISR>
 800d0e6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3728      	adds	r7, #40	; 0x28
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}
 800d0f2:	bf00      	nop
 800d0f4:	200096a0 	.word	0x200096a0

0800d0f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b088      	sub	sp, #32
 800d0fc:	af02      	add	r7, sp, #8
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d102:	4b22      	ldr	r3, [pc, #136]	; (800d18c <prvProcessExpiredTimer+0x94>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	68db      	ldr	r3, [r3, #12]
 800d108:	68db      	ldr	r3, [r3, #12]
 800d10a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	3304      	adds	r3, #4
 800d110:	4618      	mov	r0, r3
 800d112:	f7fd fd43 	bl	800ab9c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d11c:	f003 0304 	and.w	r3, r3, #4
 800d120:	2b00      	cmp	r3, #0
 800d122:	d022      	beq.n	800d16a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	699a      	ldr	r2, [r3, #24]
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	18d1      	adds	r1, r2, r3
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	683a      	ldr	r2, [r7, #0]
 800d130:	6978      	ldr	r0, [r7, #20]
 800d132:	f000 f8d1 	bl	800d2d8 <prvInsertTimerInActiveList>
 800d136:	4603      	mov	r3, r0
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d01f      	beq.n	800d17c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d13c:	2300      	movs	r3, #0
 800d13e:	9300      	str	r3, [sp, #0]
 800d140:	2300      	movs	r3, #0
 800d142:	687a      	ldr	r2, [r7, #4]
 800d144:	2100      	movs	r1, #0
 800d146:	6978      	ldr	r0, [r7, #20]
 800d148:	f7ff ff88 	bl	800d05c <xTimerGenericCommand>
 800d14c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d113      	bne.n	800d17c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d154:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d158:	f383 8811 	msr	BASEPRI, r3
 800d15c:	f3bf 8f6f 	isb	sy
 800d160:	f3bf 8f4f 	dsb	sy
 800d164:	60fb      	str	r3, [r7, #12]
}
 800d166:	bf00      	nop
 800d168:	e7fe      	b.n	800d168 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d170:	f023 0301 	bic.w	r3, r3, #1
 800d174:	b2da      	uxtb	r2, r3
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	6a1b      	ldr	r3, [r3, #32]
 800d180:	6978      	ldr	r0, [r7, #20]
 800d182:	4798      	blx	r3
}
 800d184:	bf00      	nop
 800d186:	3718      	adds	r7, #24
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}
 800d18c:	20009698 	.word	0x20009698

0800d190 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b084      	sub	sp, #16
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d198:	f107 0308 	add.w	r3, r7, #8
 800d19c:	4618      	mov	r0, r3
 800d19e:	f000 f857 	bl	800d250 <prvGetNextExpireTime>
 800d1a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	4619      	mov	r1, r3
 800d1a8:	68f8      	ldr	r0, [r7, #12]
 800d1aa:	f000 f803 	bl	800d1b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d1ae:	f000 f8d5 	bl	800d35c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d1b2:	e7f1      	b.n	800d198 <prvTimerTask+0x8>

0800d1b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b084      	sub	sp, #16
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
 800d1bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d1be:	f7ff f86b 	bl	800c298 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d1c2:	f107 0308 	add.w	r3, r7, #8
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f000 f866 	bl	800d298 <prvSampleTimeNow>
 800d1cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d130      	bne.n	800d236 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d10a      	bne.n	800d1f0 <prvProcessTimerOrBlockTask+0x3c>
 800d1da:	687a      	ldr	r2, [r7, #4]
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	d806      	bhi.n	800d1f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d1e2:	f7ff f89f 	bl	800c324 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d1e6:	68f9      	ldr	r1, [r7, #12]
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f7ff ff85 	bl	800d0f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d1ee:	e024      	b.n	800d23a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d008      	beq.n	800d208 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d1f6:	4b13      	ldr	r3, [pc, #76]	; (800d244 <prvProcessTimerOrBlockTask+0x90>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d101      	bne.n	800d204 <prvProcessTimerOrBlockTask+0x50>
 800d200:	2301      	movs	r3, #1
 800d202:	e000      	b.n	800d206 <prvProcessTimerOrBlockTask+0x52>
 800d204:	2300      	movs	r3, #0
 800d206:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d208:	4b0f      	ldr	r3, [pc, #60]	; (800d248 <prvProcessTimerOrBlockTask+0x94>)
 800d20a:	6818      	ldr	r0, [r3, #0]
 800d20c:	687a      	ldr	r2, [r7, #4]
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	1ad3      	subs	r3, r2, r3
 800d212:	683a      	ldr	r2, [r7, #0]
 800d214:	4619      	mov	r1, r3
 800d216:	f7fe fcd3 	bl	800bbc0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d21a:	f7ff f883 	bl	800c324 <xTaskResumeAll>
 800d21e:	4603      	mov	r3, r0
 800d220:	2b00      	cmp	r3, #0
 800d222:	d10a      	bne.n	800d23a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d224:	4b09      	ldr	r3, [pc, #36]	; (800d24c <prvProcessTimerOrBlockTask+0x98>)
 800d226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d22a:	601a      	str	r2, [r3, #0]
 800d22c:	f3bf 8f4f 	dsb	sy
 800d230:	f3bf 8f6f 	isb	sy
}
 800d234:	e001      	b.n	800d23a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d236:	f7ff f875 	bl	800c324 <xTaskResumeAll>
}
 800d23a:	bf00      	nop
 800d23c:	3710      	adds	r7, #16
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}
 800d242:	bf00      	nop
 800d244:	2000969c 	.word	0x2000969c
 800d248:	200096a0 	.word	0x200096a0
 800d24c:	e000ed04 	.word	0xe000ed04

0800d250 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d250:	b480      	push	{r7}
 800d252:	b085      	sub	sp, #20
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d258:	4b0e      	ldr	r3, [pc, #56]	; (800d294 <prvGetNextExpireTime+0x44>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d101      	bne.n	800d266 <prvGetNextExpireTime+0x16>
 800d262:	2201      	movs	r2, #1
 800d264:	e000      	b.n	800d268 <prvGetNextExpireTime+0x18>
 800d266:	2200      	movs	r2, #0
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d105      	bne.n	800d280 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d274:	4b07      	ldr	r3, [pc, #28]	; (800d294 <prvGetNextExpireTime+0x44>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	68db      	ldr	r3, [r3, #12]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	60fb      	str	r3, [r7, #12]
 800d27e:	e001      	b.n	800d284 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d280:	2300      	movs	r3, #0
 800d282:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d284:	68fb      	ldr	r3, [r7, #12]
}
 800d286:	4618      	mov	r0, r3
 800d288:	3714      	adds	r7, #20
 800d28a:	46bd      	mov	sp, r7
 800d28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d290:	4770      	bx	lr
 800d292:	bf00      	nop
 800d294:	20009698 	.word	0x20009698

0800d298 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b084      	sub	sp, #16
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d2a0:	f7ff f8de 	bl	800c460 <xTaskGetTickCount>
 800d2a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d2a6:	4b0b      	ldr	r3, [pc, #44]	; (800d2d4 <prvSampleTimeNow+0x3c>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	68fa      	ldr	r2, [r7, #12]
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	d205      	bcs.n	800d2bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d2b0:	f000 f936 	bl	800d520 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2201      	movs	r2, #1
 800d2b8:	601a      	str	r2, [r3, #0]
 800d2ba:	e002      	b.n	800d2c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d2c2:	4a04      	ldr	r2, [pc, #16]	; (800d2d4 <prvSampleTimeNow+0x3c>)
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	3710      	adds	r7, #16
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}
 800d2d2:	bf00      	nop
 800d2d4:	200096a8 	.word	0x200096a8

0800d2d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b086      	sub	sp, #24
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	60f8      	str	r0, [r7, #12]
 800d2e0:	60b9      	str	r1, [r7, #8]
 800d2e2:	607a      	str	r2, [r7, #4]
 800d2e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	68ba      	ldr	r2, [r7, #8]
 800d2ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	68fa      	ldr	r2, [r7, #12]
 800d2f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d2f6:	68ba      	ldr	r2, [r7, #8]
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d812      	bhi.n	800d324 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2fe:	687a      	ldr	r2, [r7, #4]
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	1ad2      	subs	r2, r2, r3
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	699b      	ldr	r3, [r3, #24]
 800d308:	429a      	cmp	r2, r3
 800d30a:	d302      	bcc.n	800d312 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d30c:	2301      	movs	r3, #1
 800d30e:	617b      	str	r3, [r7, #20]
 800d310:	e01b      	b.n	800d34a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d312:	4b10      	ldr	r3, [pc, #64]	; (800d354 <prvInsertTimerInActiveList+0x7c>)
 800d314:	681a      	ldr	r2, [r3, #0]
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	3304      	adds	r3, #4
 800d31a:	4619      	mov	r1, r3
 800d31c:	4610      	mov	r0, r2
 800d31e:	f7fd fc04 	bl	800ab2a <vListInsert>
 800d322:	e012      	b.n	800d34a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d324:	687a      	ldr	r2, [r7, #4]
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	429a      	cmp	r2, r3
 800d32a:	d206      	bcs.n	800d33a <prvInsertTimerInActiveList+0x62>
 800d32c:	68ba      	ldr	r2, [r7, #8]
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	429a      	cmp	r2, r3
 800d332:	d302      	bcc.n	800d33a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d334:	2301      	movs	r3, #1
 800d336:	617b      	str	r3, [r7, #20]
 800d338:	e007      	b.n	800d34a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d33a:	4b07      	ldr	r3, [pc, #28]	; (800d358 <prvInsertTimerInActiveList+0x80>)
 800d33c:	681a      	ldr	r2, [r3, #0]
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	3304      	adds	r3, #4
 800d342:	4619      	mov	r1, r3
 800d344:	4610      	mov	r0, r2
 800d346:	f7fd fbf0 	bl	800ab2a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d34a:	697b      	ldr	r3, [r7, #20]
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3718      	adds	r7, #24
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}
 800d354:	2000969c 	.word	0x2000969c
 800d358:	20009698 	.word	0x20009698

0800d35c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b08e      	sub	sp, #56	; 0x38
 800d360:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d362:	e0ca      	b.n	800d4fa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2b00      	cmp	r3, #0
 800d368:	da18      	bge.n	800d39c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d36a:	1d3b      	adds	r3, r7, #4
 800d36c:	3304      	adds	r3, #4
 800d36e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d372:	2b00      	cmp	r3, #0
 800d374:	d10a      	bne.n	800d38c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d376:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d37a:	f383 8811 	msr	BASEPRI, r3
 800d37e:	f3bf 8f6f 	isb	sy
 800d382:	f3bf 8f4f 	dsb	sy
 800d386:	61fb      	str	r3, [r7, #28]
}
 800d388:	bf00      	nop
 800d38a:	e7fe      	b.n	800d38a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d392:	6850      	ldr	r0, [r2, #4]
 800d394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d396:	6892      	ldr	r2, [r2, #8]
 800d398:	4611      	mov	r1, r2
 800d39a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	f2c0 80aa 	blt.w	800d4f8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3aa:	695b      	ldr	r3, [r3, #20]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d004      	beq.n	800d3ba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b2:	3304      	adds	r3, #4
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f7fd fbf1 	bl	800ab9c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d3ba:	463b      	mov	r3, r7
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f7ff ff6b 	bl	800d298 <prvSampleTimeNow>
 800d3c2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2b09      	cmp	r3, #9
 800d3c8:	f200 8097 	bhi.w	800d4fa <prvProcessReceivedCommands+0x19e>
 800d3cc:	a201      	add	r2, pc, #4	; (adr r2, 800d3d4 <prvProcessReceivedCommands+0x78>)
 800d3ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3d2:	bf00      	nop
 800d3d4:	0800d3fd 	.word	0x0800d3fd
 800d3d8:	0800d3fd 	.word	0x0800d3fd
 800d3dc:	0800d3fd 	.word	0x0800d3fd
 800d3e0:	0800d471 	.word	0x0800d471
 800d3e4:	0800d485 	.word	0x0800d485
 800d3e8:	0800d4cf 	.word	0x0800d4cf
 800d3ec:	0800d3fd 	.word	0x0800d3fd
 800d3f0:	0800d3fd 	.word	0x0800d3fd
 800d3f4:	0800d471 	.word	0x0800d471
 800d3f8:	0800d485 	.word	0x0800d485
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d402:	f043 0301 	orr.w	r3, r3, #1
 800d406:	b2da      	uxtb	r2, r3
 800d408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d40a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d40e:	68ba      	ldr	r2, [r7, #8]
 800d410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d412:	699b      	ldr	r3, [r3, #24]
 800d414:	18d1      	adds	r1, r2, r3
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d41a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d41c:	f7ff ff5c 	bl	800d2d8 <prvInsertTimerInActiveList>
 800d420:	4603      	mov	r3, r0
 800d422:	2b00      	cmp	r3, #0
 800d424:	d069      	beq.n	800d4fa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d428:	6a1b      	ldr	r3, [r3, #32]
 800d42a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d42c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d430:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d434:	f003 0304 	and.w	r3, r3, #4
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d05e      	beq.n	800d4fa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d43c:	68ba      	ldr	r2, [r7, #8]
 800d43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d440:	699b      	ldr	r3, [r3, #24]
 800d442:	441a      	add	r2, r3
 800d444:	2300      	movs	r3, #0
 800d446:	9300      	str	r3, [sp, #0]
 800d448:	2300      	movs	r3, #0
 800d44a:	2100      	movs	r1, #0
 800d44c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d44e:	f7ff fe05 	bl	800d05c <xTimerGenericCommand>
 800d452:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d454:	6a3b      	ldr	r3, [r7, #32]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d14f      	bne.n	800d4fa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d45a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d45e:	f383 8811 	msr	BASEPRI, r3
 800d462:	f3bf 8f6f 	isb	sy
 800d466:	f3bf 8f4f 	dsb	sy
 800d46a:	61bb      	str	r3, [r7, #24]
}
 800d46c:	bf00      	nop
 800d46e:	e7fe      	b.n	800d46e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d472:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d476:	f023 0301 	bic.w	r3, r3, #1
 800d47a:	b2da      	uxtb	r2, r3
 800d47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d47e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d482:	e03a      	b.n	800d4fa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d486:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d48a:	f043 0301 	orr.w	r3, r3, #1
 800d48e:	b2da      	uxtb	r2, r3
 800d490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d492:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d496:	68ba      	ldr	r2, [r7, #8]
 800d498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d49a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d49e:	699b      	ldr	r3, [r3, #24]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d10a      	bne.n	800d4ba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d4a4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d4a8:	f383 8811 	msr	BASEPRI, r3
 800d4ac:	f3bf 8f6f 	isb	sy
 800d4b0:	f3bf 8f4f 	dsb	sy
 800d4b4:	617b      	str	r3, [r7, #20]
}
 800d4b6:	bf00      	nop
 800d4b8:	e7fe      	b.n	800d4b8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4bc:	699a      	ldr	r2, [r3, #24]
 800d4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c0:	18d1      	adds	r1, r2, r3
 800d4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4c8:	f7ff ff06 	bl	800d2d8 <prvInsertTimerInActiveList>
					break;
 800d4cc:	e015      	b.n	800d4fa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d4d4:	f003 0302 	and.w	r3, r3, #2
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d103      	bne.n	800d4e4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d4dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4de:	f7fd f94d 	bl	800a77c <vPortFree>
 800d4e2:	e00a      	b.n	800d4fa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d4ea:	f023 0301 	bic.w	r3, r3, #1
 800d4ee:	b2da      	uxtb	r2, r3
 800d4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d4f6:	e000      	b.n	800d4fa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d4f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d4fa:	4b08      	ldr	r3, [pc, #32]	; (800d51c <prvProcessReceivedCommands+0x1c0>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	1d39      	adds	r1, r7, #4
 800d500:	2200      	movs	r2, #0
 800d502:	4618      	mov	r0, r3
 800d504:	f7fe f942 	bl	800b78c <xQueueReceive>
 800d508:	4603      	mov	r3, r0
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	f47f af2a 	bne.w	800d364 <prvProcessReceivedCommands+0x8>
	}
}
 800d510:	bf00      	nop
 800d512:	bf00      	nop
 800d514:	3730      	adds	r7, #48	; 0x30
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}
 800d51a:	bf00      	nop
 800d51c:	200096a0 	.word	0x200096a0

0800d520 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b088      	sub	sp, #32
 800d524:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d526:	e048      	b.n	800d5ba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d528:	4b2d      	ldr	r3, [pc, #180]	; (800d5e0 <prvSwitchTimerLists+0xc0>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	68db      	ldr	r3, [r3, #12]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d532:	4b2b      	ldr	r3, [pc, #172]	; (800d5e0 <prvSwitchTimerLists+0xc0>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	68db      	ldr	r3, [r3, #12]
 800d538:	68db      	ldr	r3, [r3, #12]
 800d53a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	3304      	adds	r3, #4
 800d540:	4618      	mov	r0, r3
 800d542:	f7fd fb2b 	bl	800ab9c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	6a1b      	ldr	r3, [r3, #32]
 800d54a:	68f8      	ldr	r0, [r7, #12]
 800d54c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d554:	f003 0304 	and.w	r3, r3, #4
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d02e      	beq.n	800d5ba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	699b      	ldr	r3, [r3, #24]
 800d560:	693a      	ldr	r2, [r7, #16]
 800d562:	4413      	add	r3, r2
 800d564:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d566:	68ba      	ldr	r2, [r7, #8]
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	429a      	cmp	r2, r3
 800d56c:	d90e      	bls.n	800d58c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	68ba      	ldr	r2, [r7, #8]
 800d572:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	68fa      	ldr	r2, [r7, #12]
 800d578:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d57a:	4b19      	ldr	r3, [pc, #100]	; (800d5e0 <prvSwitchTimerLists+0xc0>)
 800d57c:	681a      	ldr	r2, [r3, #0]
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	3304      	adds	r3, #4
 800d582:	4619      	mov	r1, r3
 800d584:	4610      	mov	r0, r2
 800d586:	f7fd fad0 	bl	800ab2a <vListInsert>
 800d58a:	e016      	b.n	800d5ba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d58c:	2300      	movs	r3, #0
 800d58e:	9300      	str	r3, [sp, #0]
 800d590:	2300      	movs	r3, #0
 800d592:	693a      	ldr	r2, [r7, #16]
 800d594:	2100      	movs	r1, #0
 800d596:	68f8      	ldr	r0, [r7, #12]
 800d598:	f7ff fd60 	bl	800d05c <xTimerGenericCommand>
 800d59c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d10a      	bne.n	800d5ba <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d5a4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d5a8:	f383 8811 	msr	BASEPRI, r3
 800d5ac:	f3bf 8f6f 	isb	sy
 800d5b0:	f3bf 8f4f 	dsb	sy
 800d5b4:	603b      	str	r3, [r7, #0]
}
 800d5b6:	bf00      	nop
 800d5b8:	e7fe      	b.n	800d5b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d5ba:	4b09      	ldr	r3, [pc, #36]	; (800d5e0 <prvSwitchTimerLists+0xc0>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d1b1      	bne.n	800d528 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d5c4:	4b06      	ldr	r3, [pc, #24]	; (800d5e0 <prvSwitchTimerLists+0xc0>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d5ca:	4b06      	ldr	r3, [pc, #24]	; (800d5e4 <prvSwitchTimerLists+0xc4>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	4a04      	ldr	r2, [pc, #16]	; (800d5e0 <prvSwitchTimerLists+0xc0>)
 800d5d0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d5d2:	4a04      	ldr	r2, [pc, #16]	; (800d5e4 <prvSwitchTimerLists+0xc4>)
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	6013      	str	r3, [r2, #0]
}
 800d5d8:	bf00      	nop
 800d5da:	3718      	adds	r7, #24
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}
 800d5e0:	20009698 	.word	0x20009698
 800d5e4:	2000969c 	.word	0x2000969c

0800d5e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b082      	sub	sp, #8
 800d5ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d5ee:	f7fd fc29 	bl	800ae44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d5f2:	4b15      	ldr	r3, [pc, #84]	; (800d648 <prvCheckForValidListAndQueue+0x60>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d120      	bne.n	800d63c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d5fa:	4814      	ldr	r0, [pc, #80]	; (800d64c <prvCheckForValidListAndQueue+0x64>)
 800d5fc:	f7fd fa44 	bl	800aa88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d600:	4813      	ldr	r0, [pc, #76]	; (800d650 <prvCheckForValidListAndQueue+0x68>)
 800d602:	f7fd fa41 	bl	800aa88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d606:	4b13      	ldr	r3, [pc, #76]	; (800d654 <prvCheckForValidListAndQueue+0x6c>)
 800d608:	4a10      	ldr	r2, [pc, #64]	; (800d64c <prvCheckForValidListAndQueue+0x64>)
 800d60a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d60c:	4b12      	ldr	r3, [pc, #72]	; (800d658 <prvCheckForValidListAndQueue+0x70>)
 800d60e:	4a10      	ldr	r2, [pc, #64]	; (800d650 <prvCheckForValidListAndQueue+0x68>)
 800d610:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d612:	2300      	movs	r3, #0
 800d614:	9300      	str	r3, [sp, #0]
 800d616:	4b11      	ldr	r3, [pc, #68]	; (800d65c <prvCheckForValidListAndQueue+0x74>)
 800d618:	4a11      	ldr	r2, [pc, #68]	; (800d660 <prvCheckForValidListAndQueue+0x78>)
 800d61a:	2110      	movs	r1, #16
 800d61c:	20ff      	movs	r0, #255	; 0xff
 800d61e:	f7fd fe7f 	bl	800b320 <xQueueGenericCreateStatic>
 800d622:	4603      	mov	r3, r0
 800d624:	4a08      	ldr	r2, [pc, #32]	; (800d648 <prvCheckForValidListAndQueue+0x60>)
 800d626:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d628:	4b07      	ldr	r3, [pc, #28]	; (800d648 <prvCheckForValidListAndQueue+0x60>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d005      	beq.n	800d63c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d630:	4b05      	ldr	r3, [pc, #20]	; (800d648 <prvCheckForValidListAndQueue+0x60>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	490b      	ldr	r1, [pc, #44]	; (800d664 <prvCheckForValidListAndQueue+0x7c>)
 800d636:	4618      	mov	r0, r3
 800d638:	f7fe fa98 	bl	800bb6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d63c:	f7fd fc32 	bl	800aea4 <vPortExitCritical>
}
 800d640:	bf00      	nop
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}
 800d646:	bf00      	nop
 800d648:	200096a0 	.word	0x200096a0
 800d64c:	20009670 	.word	0x20009670
 800d650:	20009684 	.word	0x20009684
 800d654:	20009698 	.word	0x20009698
 800d658:	2000969c 	.word	0x2000969c
 800d65c:	2000a69c 	.word	0x2000a69c
 800d660:	200096ac 	.word	0x200096ac
 800d664:	0800efd0 	.word	0x0800efd0

0800d668 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b086      	sub	sp, #24
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d10a      	bne.n	800d690 <xTimerIsTimerActive+0x28>
	__asm volatile
 800d67a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d67e:	f383 8811 	msr	BASEPRI, r3
 800d682:	f3bf 8f6f 	isb	sy
 800d686:	f3bf 8f4f 	dsb	sy
 800d68a:	60fb      	str	r3, [r7, #12]
}
 800d68c:	bf00      	nop
 800d68e:	e7fe      	b.n	800d68e <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800d690:	f7fd fbd8 	bl	800ae44 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800d694:	693b      	ldr	r3, [r7, #16]
 800d696:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d69a:	f003 0301 	and.w	r3, r3, #1
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d102      	bne.n	800d6a8 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	617b      	str	r3, [r7, #20]
 800d6a6:	e001      	b.n	800d6ac <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800d6ac:	f7fd fbfa 	bl	800aea4 <vPortExitCritical>

	return xReturn;
 800d6b0:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3718      	adds	r7, #24
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}

0800d6ba <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800d6ba:	b580      	push	{r7, lr}
 800d6bc:	b086      	sub	sp, #24
 800d6be:	af00      	add	r7, sp, #0
 800d6c0:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d10a      	bne.n	800d6e2 <pvTimerGetTimerID+0x28>
	__asm volatile
 800d6cc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d6d0:	f383 8811 	msr	BASEPRI, r3
 800d6d4:	f3bf 8f6f 	isb	sy
 800d6d8:	f3bf 8f4f 	dsb	sy
 800d6dc:	60fb      	str	r3, [r7, #12]
}
 800d6de:	bf00      	nop
 800d6e0:	e7fe      	b.n	800d6e0 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800d6e2:	f7fd fbaf 	bl	800ae44 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	69db      	ldr	r3, [r3, #28]
 800d6ea:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800d6ec:	f7fd fbda 	bl	800aea4 <vPortExitCritical>

	return pvReturn;
 800d6f0:	693b      	ldr	r3, [r7, #16]
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3718      	adds	r7, #24
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}
	...

0800d6fc <Rte_Write_TimH_TimHPort_Tim3Ccr2>:
{
	TIM3->CCR1 = data;
}
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim3Ccr2(uint8 data)
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	b083      	sub	sp, #12
 800d700:	af00      	add	r7, sp, #0
 800d702:	4603      	mov	r3, r0
 800d704:	71fb      	strb	r3, [r7, #7]
	TIM3->CCR2 = data;
 800d706:	4a04      	ldr	r2, [pc, #16]	; (800d718 <Rte_Write_TimH_TimHPort_Tim3Ccr2+0x1c>)
 800d708:	79fb      	ldrb	r3, [r7, #7]
 800d70a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800d70c:	bf00      	nop
 800d70e:	370c      	adds	r7, #12
 800d710:	46bd      	mov	sp, r7
 800d712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d716:	4770      	bx	lr
 800d718:	40000400 	.word	0x40000400

0800d71c <Rte_Write_TimH_TimHPort_Tim3Ccr3>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim3Ccr3(uint8 data)
{
 800d71c:	b480      	push	{r7}
 800d71e:	b083      	sub	sp, #12
 800d720:	af00      	add	r7, sp, #0
 800d722:	4603      	mov	r3, r0
 800d724:	71fb      	strb	r3, [r7, #7]
	TIM3->CCR3 = data;
 800d726:	4a04      	ldr	r2, [pc, #16]	; (800d738 <Rte_Write_TimH_TimHPort_Tim3Ccr3+0x1c>)
 800d728:	79fb      	ldrb	r3, [r7, #7]
 800d72a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800d72c:	bf00      	nop
 800d72e:	370c      	adds	r7, #12
 800d730:	46bd      	mov	sp, r7
 800d732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d736:	4770      	bx	lr
 800d738:	40000400 	.word	0x40000400

0800d73c <Rte_Write_TimH_TimHPort_Tim3Ccr4>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim3Ccr4(uint8 data)
{
 800d73c:	b480      	push	{r7}
 800d73e:	b083      	sub	sp, #12
 800d740:	af00      	add	r7, sp, #0
 800d742:	4603      	mov	r3, r0
 800d744:	71fb      	strb	r3, [r7, #7]
	TIM3->CCR4 = data;
 800d746:	4a04      	ldr	r2, [pc, #16]	; (800d758 <Rte_Write_TimH_TimHPort_Tim3Ccr4+0x1c>)
 800d748:	79fb      	ldrb	r3, [r7, #7]
 800d74a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800d74c:	bf00      	nop
 800d74e:	370c      	adds	r7, #12
 800d750:	46bd      	mov	sp, r7
 800d752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d756:	4770      	bx	lr
 800d758:	40000400 	.word	0x40000400

0800d75c <Rte_Write_TimH_TimHPort_Tim2Ccr1>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim2Ccr1(uint16 data)
{
 800d75c:	b480      	push	{r7}
 800d75e:	b083      	sub	sp, #12
 800d760:	af00      	add	r7, sp, #0
 800d762:	4603      	mov	r3, r0
 800d764:	80fb      	strh	r3, [r7, #6]
	TIM2->CCR1 = data;
 800d766:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d76a:	88fb      	ldrh	r3, [r7, #6]
 800d76c:	6353      	str	r3, [r2, #52]	; 0x34
}
 800d76e:	bf00      	nop
 800d770:	370c      	adds	r7, #12
 800d772:	46bd      	mov	sp, r7
 800d774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d778:	4770      	bx	lr

0800d77a <Rte_Write_TimH_TimHPort_Tim2Ccr2>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim2Ccr2(uint16 data)
{
 800d77a:	b480      	push	{r7}
 800d77c:	b083      	sub	sp, #12
 800d77e:	af00      	add	r7, sp, #0
 800d780:	4603      	mov	r3, r0
 800d782:	80fb      	strh	r3, [r7, #6]
	TIM2->CCR2 = data;
 800d784:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d788:	88fb      	ldrh	r3, [r7, #6]
 800d78a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800d78c:	bf00      	nop
 800d78e:	370c      	adds	r7, #12
 800d790:	46bd      	mov	sp, r7
 800d792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d796:	4770      	bx	lr

0800d798 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>:
{
	TIM2->CCR3 = data;
}
/* Run time environment interface. */
VOID Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(uint8* data, uint8 position)
{
 800d798:	b480      	push	{r7}
 800d79a:	b083      	sub	sp, #12
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	460b      	mov	r3, r1
 800d7a2:	70fb      	strb	r3, [r7, #3]
	*data = SystemManager_Fault[position];
 800d7a4:	78fb      	ldrb	r3, [r7, #3]
 800d7a6:	4a05      	ldr	r2, [pc, #20]	; (800d7bc <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault+0x24>)
 800d7a8:	5cd2      	ldrb	r2, [r2, r3]
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	701a      	strb	r2, [r3, #0]
}
 800d7ae:	bf00      	nop
 800d7b0:	370c      	adds	r7, #12
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b8:	4770      	bx	lr
 800d7ba:	bf00      	nop
 800d7bc:	2000a754 	.word	0x2000a754

0800d7c0 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState>:
{
	*data = SecAlm_SensorState;
}
/* Run time environment interface. */
VOID Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState(uint32* data)
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	b083      	sub	sp, #12
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
	SecAlm_SensorState = *data;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	b2da      	uxtb	r2, r3
 800d7ce:	4b04      	ldr	r3, [pc, #16]	; (800d7e0 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState+0x20>)
 800d7d0:	701a      	strb	r2, [r3, #0]
}
 800d7d2:	bf00      	nop
 800d7d4:	370c      	adds	r7, #12
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7dc:	4770      	bx	lr
 800d7de:	bf00      	nop
 800d7e0:	2000012c 	.word	0x2000012c

0800d7e4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState>:
{
	*data = ExtLights_LightSensorState;
}
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState(uint32* data)
{
 800d7e4:	b480      	push	{r7}
 800d7e6:	b083      	sub	sp, #12
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
	ExtLights_LightSensorState = *data;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	4a03      	ldr	r2, [pc, #12]	; (800d800 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState+0x1c>)
 800d7f2:	6013      	str	r3, [r2, #0]
}
 800d7f4:	bf00      	nop
 800d7f6:	370c      	adds	r7, #12
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fe:	4770      	bx	lr
 800d800:	20000110 	.word	0x20000110

0800d804 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues>:
	Adc_ChannelOne_Buffer[0] = SenCtrl_MeasuredValues[0];
	Adc_ChannelOne_Buffer[1] = SenCtrl_MeasuredValues[1];
}
/* Run time environment interface. */
VOID Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues(uint32* data)
{
 800d804:	b480      	push	{r7}
 800d806:	b083      	sub	sp, #12
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
	 SenCtrl_MeasuredValues[0] = Adc_ChannelOne_Buffer[0];
 800d80c:	4b06      	ldr	r3, [pc, #24]	; (800d828 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x24>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	4a06      	ldr	r2, [pc, #24]	; (800d82c <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x28>)
 800d812:	6013      	str	r3, [r2, #0]
	 SenCtrl_MeasuredValues[1] = Adc_ChannelOne_Buffer[1];
 800d814:	4b04      	ldr	r3, [pc, #16]	; (800d828 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x24>)
 800d816:	685b      	ldr	r3, [r3, #4]
 800d818:	4a04      	ldr	r2, [pc, #16]	; (800d82c <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x28>)
 800d81a:	6053      	str	r3, [r2, #4]
}
 800d81c:	bf00      	nop
 800d81e:	370c      	adds	r7, #12
 800d820:	46bd      	mov	sp, r7
 800d822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d826:	4770      	bx	lr
 800d828:	200006d8 	.word	0x200006d8
 800d82c:	20000130 	.word	0x20000130

0800d830 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter>:
{
	*data = CenLoc_FollowMeHomeCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter(uint8* data)
{
 800d830:	b480      	push	{r7}
 800d832:	b083      	sub	sp, #12
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
	CenLoc_FollowMeHomeCounter = *data;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	781a      	ldrb	r2, [r3, #0]
 800d83c:	4b03      	ldr	r3, [pc, #12]	; (800d84c <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter+0x1c>)
 800d83e:	701a      	strb	r2, [r3, #0]
}
 800d840:	bf00      	nop
 800d842:	370c      	adds	r7, #12
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr
 800d84c:	200000e4 	.word	0x200000e4

0800d850 <Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter>:
{
	*data = CenLoc_TurnOnLedCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter(uint8* data)
{
 800d850:	b480      	push	{r7}
 800d852:	b083      	sub	sp, #12
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
	CenLoc_TurnOnLedCounter = *data;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	781a      	ldrb	r2, [r3, #0]
 800d85c:	4b03      	ldr	r3, [pc, #12]	; (800d86c <Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter+0x1c>)
 800d85e:	701a      	strb	r2, [r3, #0]
}
 800d860:	bf00      	nop
 800d862:	370c      	adds	r7, #12
 800d864:	46bd      	mov	sp, r7
 800d866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86a:	4770      	bx	lr
 800d86c:	200000e5 	.word	0x200000e5

0800d870 <Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter>:
{
	*data = CenLoc_CyclicAlarmCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter(uint8* data)
{
 800d870:	b480      	push	{r7}
 800d872:	b083      	sub	sp, #12
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
	CenLoc_CyclicAlarmCounter = *data;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	781a      	ldrb	r2, [r3, #0]
 800d87c:	4b03      	ldr	r3, [pc, #12]	; (800d88c <Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter+0x1c>)
 800d87e:	701a      	strb	r2, [r3, #0]
}
 800d880:	bf00      	nop
 800d882:	370c      	adds	r7, #12
 800d884:	46bd      	mov	sp, r7
 800d886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88a:	4770      	bx	lr
 800d88c:	200000e3 	.word	0x200000e3

0800d890 <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter>:
{
	*data = CenLoc_BlinkCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter(uint8* data)
{
 800d890:	b480      	push	{r7}
 800d892:	b083      	sub	sp, #12
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
	CenLoc_BlinkCounter = *data;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	781a      	ldrb	r2, [r3, #0]
 800d89c:	4b03      	ldr	r3, [pc, #12]	; (800d8ac <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter+0x1c>)
 800d89e:	701a      	strb	r2, [r3, #0]
}
 800d8a0:	bf00      	nop
 800d8a2:	370c      	adds	r7, #12
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8aa:	4770      	bx	lr
 800d8ac:	200000e2 	.word	0x200000e2

0800d8b0 <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter>:
{
	*data = Os_Alarm_Counter;
}
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter(uint8* data)
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b083      	sub	sp, #12
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
	Os_LockUnlockSequence_Counter = *data;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	781a      	ldrb	r2, [r3, #0]
 800d8bc:	4b03      	ldr	r3, [pc, #12]	; (800d8cc <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter+0x1c>)
 800d8be:	701a      	strb	r2, [r3, #0]
}
 800d8c0:	bf00      	nop
 800d8c2:	370c      	adds	r7, #12
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ca:	4770      	bx	lr
 800d8cc:	20000210 	.word	0x20000210

0800d8d0 <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter(uint8* data)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b083      	sub	sp, #12
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
	Os_TurnOnCyclic_Counter = *data;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	781a      	ldrb	r2, [r3, #0]
 800d8dc:	4b03      	ldr	r3, [pc, #12]	; (800d8ec <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter+0x1c>)
 800d8de:	701a      	strb	r2, [r3, #0]
}
 800d8e0:	bf00      	nop
 800d8e2:	370c      	adds	r7, #12
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ea:	4770      	bx	lr
 800d8ec:	20000211 	.word	0x20000211

0800d8f0 <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter(uint8* data)
{
 800d8f0:	b480      	push	{r7}
 800d8f2:	b083      	sub	sp, #12
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
	Os_TurnOnLed_Counter = *data;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	781a      	ldrb	r2, [r3, #0]
 800d8fc:	4b03      	ldr	r3, [pc, #12]	; (800d90c <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter+0x1c>)
 800d8fe:	701a      	strb	r2, [r3, #0]
}
 800d900:	bf00      	nop
 800d902:	370c      	adds	r7, #12
 800d904:	46bd      	mov	sp, r7
 800d906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90a:	4770      	bx	lr
 800d90c:	20000212 	.word	0x20000212

0800d910 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(uint8* data)
{
 800d910:	b480      	push	{r7}
 800d912:	b083      	sub	sp, #12
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
	Os_FollowMeHome_Counter = *data;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	781a      	ldrb	r2, [r3, #0]
 800d91c:	4b03      	ldr	r3, [pc, #12]	; (800d92c <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter+0x1c>)
 800d91e:	701a      	strb	r2, [r3, #0]
}
 800d920:	bf00      	nop
 800d922:	370c      	adds	r7, #12
 800d924:	46bd      	mov	sp, r7
 800d926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92a:	4770      	bx	lr
 800d92c:	20000213 	.word	0x20000213

0800d930 <Rte_Write_Os_R_OsPort_Os_Lts_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_Lts_Counter(uint32* data)
{
 800d930:	b480      	push	{r7}
 800d932:	b083      	sub	sp, #12
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
	Os_Lts_Counter = *data;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	4a03      	ldr	r2, [pc, #12]	; (800d94c <Rte_Write_Os_R_OsPort_Os_Lts_Counter+0x1c>)
 800d93e:	6013      	str	r3, [r2, #0]
}
 800d940:	bf00      	nop
 800d942:	370c      	adds	r7, #12
 800d944:	46bd      	mov	sp, r7
 800d946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94a:	4770      	bx	lr
 800d94c:	20000214 	.word	0x20000214

0800d950 <Rte_Write_Os_R_OsPort_Os_Rts_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_Rts_Counter(uint32* data)
{
 800d950:	b480      	push	{r7}
 800d952:	b083      	sub	sp, #12
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
	Os_Rts_Counter = *data;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	4a03      	ldr	r2, [pc, #12]	; (800d96c <Rte_Write_Os_R_OsPort_Os_Rts_Counter+0x1c>)
 800d95e:	6013      	str	r3, [r2, #0]
}
 800d960:	bf00      	nop
 800d962:	370c      	adds	r7, #12
 800d964:	46bd      	mov	sp, r7
 800d966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96a:	4770      	bx	lr
 800d96c:	20000218 	.word	0x20000218

0800d970 <Rte_Write_Os_R_OsPort_Os_HL_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_HL_Counter(uint32* data)
{
 800d970:	b480      	push	{r7}
 800d972:	b083      	sub	sp, #12
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
	Os_HL_Counter = *data;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	4a03      	ldr	r2, [pc, #12]	; (800d98c <Rte_Write_Os_R_OsPort_Os_HL_Counter+0x1c>)
 800d97e:	6013      	str	r3, [r2, #0]
}
 800d980:	bf00      	nop
 800d982:	370c      	adds	r7, #12
 800d984:	46bd      	mov	sp, r7
 800d986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98a:	4770      	bx	lr
 800d98c:	2000021c 	.word	0x2000021c

0800d990 <Rte_Runnable_EcuM_MainFunction>:
{
	Os_Alarm_Counter = *data;
}
/* Run time environment interface. */
VOID Rte_Runnable_EcuM_MainFunction()
{
 800d990:	b580      	push	{r7, lr}
 800d992:	af00      	add	r7, sp, #0
	EcuM_MainFunction();
 800d994:	f000 fe5a 	bl	800e64c <EcuM_MainFunction>
}
 800d998:	bf00      	nop
 800d99a:	bd80      	pop	{r7, pc}

0800d99c <Rte_Runnable_SystemManager_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_SystemManager_MainFunction()
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	af00      	add	r7, sp, #0
	SystemManager_MainFunction();
 800d9a0:	f000 ff2c 	bl	800e7fc <SystemManager_MainFunction>
}
 800d9a4:	bf00      	nop
 800d9a6:	bd80      	pop	{r7, pc}

0800d9a8 <Rte_Runnable_Crc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Crc_MainFunction()
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	af00      	add	r7, sp, #0
	Crc_MainFunction();
 800d9ac:	f000 fd10 	bl	800e3d0 <Crc_MainFunction>
}
 800d9b0:	bf00      	nop
 800d9b2:	bd80      	pop	{r7, pc}

0800d9b4 <Rte_Runnable_Wdg_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Wdg_MainFunction()
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	af00      	add	r7, sp, #0
	Watchdog_MainFunction();
 800d9b8:	f001 f814 	bl	800e9e4 <Watchdog_MainFunction>
}
 800d9bc:	bf00      	nop
 800d9be:	bd80      	pop	{r7, pc}

0800d9c0 <Rte_Runnable_Adc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Adc_MainFunction()
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	af00      	add	r7, sp, #0
	Adc_MainFunction();
 800d9c4:	f7fb fd8c 	bl	80094e0 <Adc_MainFunction>
}
 800d9c8:	bf00      	nop
 800d9ca:	bd80      	pop	{r7, pc}

0800d9cc <Rte_Runnable_Tim_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Tim_MainFunction()
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	af00      	add	r7, sp, #0
	Tim_MainFunction();
 800d9d0:	f7fc fa86 	bl	8009ee0 <Tim_MainFunction>
}
 800d9d4:	bf00      	nop
 800d9d6:	bd80      	pop	{r7, pc}

0800d9d8 <Rte_Runnable_Uart_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Uart_MainFunction()
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	af00      	add	r7, sp, #0
	Uart_MainFunction();
 800d9dc:	f7f4 fdda 	bl	8002594 <Uart_MainFunction>
}
 800d9e0:	bf00      	nop
 800d9e2:	bd80      	pop	{r7, pc}

0800d9e4 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>:
/* Run time environment interface. */
VOID Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32 Channel)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b082      	sub	sp, #8
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
 800d9ec:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start_IT(htim, Channel);
 800d9ee:	6839      	ldr	r1, [r7, #0]
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f7f9 f89b 	bl	8006b2c <HAL_TIM_PWM_Start_IT>
}
 800d9f6:	bf00      	nop
 800d9f8:	3708      	adds	r7, #8
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}

0800d9fe <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>:
/* Run time environment interface. */
VOID Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32 Channel)
{
 800d9fe:	b580      	push	{r7, lr}
 800da00:	b082      	sub	sp, #8
 800da02:	af00      	add	r7, sp, #0
 800da04:	6078      	str	r0, [r7, #4]
 800da06:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Stop_IT(htim, Channel);
 800da08:	6839      	ldr	r1, [r7, #0]
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f7f9 f98c 	bl	8006d28 <HAL_TIM_PWM_Stop_IT>
}
 800da10:	bf00      	nop
 800da12:	3708      	adds	r7, #8
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}

0800da18 <Rte_Write_Btc_BtcPort_Btc_RxData>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_RxData(uint8 data)
{
 800da18:	b480      	push	{r7}
 800da1a:	b083      	sub	sp, #12
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	4603      	mov	r3, r0
 800da20:	71fb      	strb	r3, [r7, #7]
	Btc_RxData = data;
 800da22:	4a04      	ldr	r2, [pc, #16]	; (800da34 <Rte_Write_Btc_BtcPort_Btc_RxData+0x1c>)
 800da24:	79fb      	ldrb	r3, [r7, #7]
 800da26:	7013      	strb	r3, [r2, #0]
}
 800da28:	bf00      	nop
 800da2a:	370c      	adds	r7, #12
 800da2c:	46bd      	mov	sp, r7
 800da2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da32:	4770      	bx	lr
 800da34:	200000c0 	.word	0x200000c0

0800da38 <Rte_Write_Btc_BtcPort_Btc_RxCount>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_RxCount(uint8 data)
{
 800da38:	b480      	push	{r7}
 800da3a:	b083      	sub	sp, #12
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	4603      	mov	r3, r0
 800da40:	71fb      	strb	r3, [r7, #7]
	Btc_RxCount = data;
 800da42:	4a04      	ldr	r2, [pc, #16]	; (800da54 <Rte_Write_Btc_BtcPort_Btc_RxCount+0x1c>)
 800da44:	79fb      	ldrb	r3, [r7, #7]
 800da46:	7013      	strb	r3, [r2, #0]
}
 800da48:	bf00      	nop
 800da4a:	370c      	adds	r7, #12
 800da4c:	46bd      	mov	sp, r7
 800da4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da52:	4770      	bx	lr
 800da54:	200000c1 	.word	0x200000c1

0800da58 <Rte_Write_Btc_BtcPort_Btc_DataBuffer>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_DataBuffer(uint8 data, uint8 position)
{
 800da58:	b480      	push	{r7}
 800da5a:	b083      	sub	sp, #12
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	4603      	mov	r3, r0
 800da60:	460a      	mov	r2, r1
 800da62:	71fb      	strb	r3, [r7, #7]
 800da64:	4613      	mov	r3, r2
 800da66:	71bb      	strb	r3, [r7, #6]
	Btc_DataBuffer[position] = data;
 800da68:	79bb      	ldrb	r3, [r7, #6]
 800da6a:	4904      	ldr	r1, [pc, #16]	; (800da7c <Rte_Write_Btc_BtcPort_Btc_DataBuffer+0x24>)
 800da6c:	79fa      	ldrb	r2, [r7, #7]
 800da6e:	54ca      	strb	r2, [r1, r3]
}
 800da70:	bf00      	nop
 800da72:	370c      	adds	r7, #12
 800da74:	46bd      	mov	sp, r7
 800da76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7a:	4770      	bx	lr
 800da7c:	200000bc 	.word	0x200000bc

0800da80 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>:
/* Run time environment interface. */
VOID Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(uint32* data, uint8 position)
{
 800da80:	b480      	push	{r7}
 800da82:	b083      	sub	sp, #12
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
 800da88:	460b      	mov	r3, r1
 800da8a:	70fb      	strb	r3, [r7, #3]
	*data = Adc_ChannelOne_Buffer[position];
 800da8c:	78fb      	ldrb	r3, [r7, #3]
 800da8e:	4a05      	ldr	r2, [pc, #20]	; (800daa4 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer+0x24>)
 800da90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	601a      	str	r2, [r3, #0]
}
 800da98:	bf00      	nop
 800da9a:	370c      	adds	r7, #12
 800da9c:	46bd      	mov	sp, r7
 800da9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa2:	4770      	bx	lr
 800daa4:	200006d8 	.word	0x200006d8

0800daa8 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(uint8 data)
{
 800daa8:	b480      	push	{r7}
 800daaa:	b083      	sub	sp, #12
 800daac:	af00      	add	r7, sp, #0
 800daae:	4603      	mov	r3, r0
 800dab0:	71fb      	strb	r3, [r7, #7]
	Btc_ReceivedDataOnBluetooth = data;
 800dab2:	4a04      	ldr	r2, [pc, #16]	; (800dac4 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x1c>)
 800dab4:	79fb      	ldrb	r3, [r7, #7]
 800dab6:	7013      	strb	r3, [r2, #0]
}
 800dab8:	bf00      	nop
 800daba:	370c      	adds	r7, #12
 800dabc:	46bd      	mov	sp, r7
 800dabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac2:	4770      	bx	lr
 800dac4:	200000c2 	.word	0x200000c2

0800dac8 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(uint8* data)
{
 800dac8:	b480      	push	{r7}
 800daca:	b083      	sub	sp, #12
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
	CenLoc_CurrentState = *data;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	781a      	ldrb	r2, [r3, #0]
 800dad4:	4b03      	ldr	r3, [pc, #12]	; (800dae4 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState+0x1c>)
 800dad6:	701a      	strb	r2, [r3, #0]
}
 800dad8:	bf00      	nop
 800dada:	370c      	adds	r7, #12
 800dadc:	46bd      	mov	sp, r7
 800dade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae2:	4770      	bx	lr
 800dae4:	200000de 	.word	0x200000de

0800dae8 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState>:
{
	CenLoc_PreviousState = *data;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState(uint8* data)
{
 800dae8:	b480      	push	{r7}
 800daea:	b083      	sub	sp, #12
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
	CenLoc_FollowMeHomeState = *data;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	781a      	ldrb	r2, [r3, #0]
 800daf4:	4b03      	ldr	r3, [pc, #12]	; (800db04 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState+0x1c>)
 800daf6:	701a      	strb	r2, [r3, #0]
}
 800daf8:	bf00      	nop
 800dafa:	370c      	adds	r7, #12
 800dafc:	46bd      	mov	sp, r7
 800dafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db02:	4770      	bx	lr
 800db04:	200000e0 	.word	0x200000e0

0800db08 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>:
{
	CenLoc_PreviousStateFlag = *data;
}
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(uint8* data)
{
 800db08:	b480      	push	{r7}
 800db0a:	b083      	sub	sp, #12
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
	ExtLights_ReverseLight_CurrentState = *data;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	781a      	ldrb	r2, [r3, #0]
 800db14:	4b03      	ldr	r3, [pc, #12]	; (800db24 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState+0x1c>)
 800db16:	701a      	strb	r2, [r3, #0]
}
 800db18:	bf00      	nop
 800db1a:	370c      	adds	r7, #12
 800db1c:	46bd      	mov	sp, r7
 800db1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db22:	4770      	bx	lr
 800db24:	200000f4 	.word	0x200000f4

0800db28 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(uint8* data)
{
 800db28:	b480      	push	{r7}
 800db2a:	b083      	sub	sp, #12
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
	ExtLights_BrakeLight_CurrentState = *data;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	781a      	ldrb	r2, [r3, #0]
 800db34:	4b03      	ldr	r3, [pc, #12]	; (800db44 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState+0x1c>)
 800db36:	701a      	strb	r2, [r3, #0]
}
 800db38:	bf00      	nop
 800db3a:	370c      	adds	r7, #12
 800db3c:	46bd      	mov	sp, r7
 800db3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db42:	4770      	bx	lr
 800db44:	200000f6 	.word	0x200000f6

0800db48 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(uint8* data)
{
 800db48:	b480      	push	{r7}
 800db4a:	b083      	sub	sp, #12
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
	ExtLights_LightsSwitch_CurrentState = *data;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	781a      	ldrb	r2, [r3, #0]
 800db54:	4b03      	ldr	r3, [pc, #12]	; (800db64 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState+0x1c>)
 800db56:	701a      	strb	r2, [r3, #0]
}
 800db58:	bf00      	nop
 800db5a:	370c      	adds	r7, #12
 800db5c:	46bd      	mov	sp, r7
 800db5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db62:	4770      	bx	lr
 800db64:	200000f7 	.word	0x200000f7

0800db68 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(uint8* data)
{
 800db68:	b480      	push	{r7}
 800db6a:	b083      	sub	sp, #12
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
	ExtLights_HighBeam_CurrentState = *data;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	781a      	ldrb	r2, [r3, #0]
 800db74:	4b03      	ldr	r3, [pc, #12]	; (800db84 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState+0x1c>)
 800db76:	701a      	strb	r2, [r3, #0]
}
 800db78:	bf00      	nop
 800db7a:	370c      	adds	r7, #12
 800db7c:	46bd      	mov	sp, r7
 800db7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db82:	4770      	bx	lr
 800db84:	200000f8 	.word	0x200000f8

0800db88 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(uint8* data)
{
 800db88:	b480      	push	{r7}
 800db8a:	b083      	sub	sp, #12
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
	ExtLights_FrontFogLight_CurrentState = *data;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	781a      	ldrb	r2, [r3, #0]
 800db94:	4b03      	ldr	r3, [pc, #12]	; (800dba4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState+0x1c>)
 800db96:	701a      	strb	r2, [r3, #0]
}
 800db98:	bf00      	nop
 800db9a:	370c      	adds	r7, #12
 800db9c:	46bd      	mov	sp, r7
 800db9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba2:	4770      	bx	lr
 800dba4:	200000f9 	.word	0x200000f9

0800dba8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(uint8* data)
{
 800dba8:	b480      	push	{r7}
 800dbaa:	b083      	sub	sp, #12
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
	ExtLights_TurnSignalLeft_CurrentState = *data;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	781a      	ldrb	r2, [r3, #0]
 800dbb4:	4b03      	ldr	r3, [pc, #12]	; (800dbc4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState+0x1c>)
 800dbb6:	701a      	strb	r2, [r3, #0]
}
 800dbb8:	bf00      	nop
 800dbba:	370c      	adds	r7, #12
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr
 800dbc4:	200000fa 	.word	0x200000fa

0800dbc8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(uint8* data)
{
 800dbc8:	b480      	push	{r7}
 800dbca:	b083      	sub	sp, #12
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
	ExtLights_TurnSignalRight_CurrentState = *data;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	781a      	ldrb	r2, [r3, #0]
 800dbd4:	4b03      	ldr	r3, [pc, #12]	; (800dbe4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState+0x1c>)
 800dbd6:	701a      	strb	r2, [r3, #0]
}
 800dbd8:	bf00      	nop
 800dbda:	370c      	adds	r7, #12
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe2:	4770      	bx	lr
 800dbe4:	200000fb 	.word	0x200000fb

0800dbe8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(uint8* data)
{
 800dbe8:	b480      	push	{r7}
 800dbea:	b083      	sub	sp, #12
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
	ExtLights_HazardLight_CurrentState = *data;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	781a      	ldrb	r2, [r3, #0]
 800dbf4:	4b03      	ldr	r3, [pc, #12]	; (800dc04 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState+0x1c>)
 800dbf6:	701a      	strb	r2, [r3, #0]
}
 800dbf8:	bf00      	nop
 800dbfa:	370c      	adds	r7, #12
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc02:	4770      	bx	lr
 800dc04:	200000fe 	.word	0x200000fe

0800dc08 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(uint8* data)
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b083      	sub	sp, #12
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
	ExtLights_RearFogLight_CurrentState = *data;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	781a      	ldrb	r2, [r3, #0]
 800dc14:	4b03      	ldr	r3, [pc, #12]	; (800dc24 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState+0x1c>)
 800dc16:	701a      	strb	r2, [r3, #0]
}
 800dc18:	bf00      	nop
 800dc1a:	370c      	adds	r7, #12
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr
 800dc24:	200000ff 	.word	0x200000ff

0800dc28 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag>:
{
	ExtLights_HL_PrevState = *data;
}
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag(uint32* data)
{
 800dc28:	b480      	push	{r7}
 800dc2a:	b083      	sub	sp, #12
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
	ExtLights_RTSFlag = *data;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	4a03      	ldr	r2, [pc, #12]	; (800dc44 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag+0x1c>)
 800dc36:	6013      	str	r3, [r2, #0]
}
 800dc38:	bf00      	nop
 800dc3a:	370c      	adds	r7, #12
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc42:	4770      	bx	lr
 800dc44:	20000104 	.word	0x20000104

0800dc48 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag(uint32* data)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b083      	sub	sp, #12
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
	ExtLights_LTSFlag = *data;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	4a03      	ldr	r2, [pc, #12]	; (800dc64 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag+0x1c>)
 800dc56:	6013      	str	r3, [r2, #0]
}
 800dc58:	bf00      	nop
 800dc5a:	370c      	adds	r7, #12
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc62:	4770      	bx	lr
 800dc64:	20000108 	.word	0x20000108

0800dc68 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag(uint32* data)
{
 800dc68:	b480      	push	{r7}
 800dc6a:	b083      	sub	sp, #12
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
	ExtLights_HLFlag = *data;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	4a03      	ldr	r2, [pc, #12]	; (800dc84 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag+0x1c>)
 800dc76:	6013      	str	r3, [r2, #0]
}
 800dc78:	bf00      	nop
 800dc7a:	370c      	adds	r7, #12
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc82:	4770      	bx	lr
 800dc84:	2000010c 	.word	0x2000010c

0800dc88 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(uint8* data)
{
 800dc88:	b480      	push	{r7}
 800dc8a:	b083      	sub	sp, #12
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
	IntLights_CurrentState = *data;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	781a      	ldrb	r2, [r3, #0]
 800dc94:	4b03      	ldr	r3, [pc, #12]	; (800dca4 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState+0x1c>)
 800dc96:	701a      	strb	r2, [r3, #0]
}
 800dc98:	bf00      	nop
 800dc9a:	370c      	adds	r7, #12
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca2:	4770      	bx	lr
 800dca4:	20000118 	.word	0x20000118

0800dca8 <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4>:
{
	SecAlm_PinStateChange = *data;
}
/* Run time environment interface. */
VOID Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4(uint8* data)
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b083      	sub	sp, #12
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
	SecAlm_TriggerIRQCounterForTimer4 = *data;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	781a      	ldrb	r2, [r3, #0]
 800dcb4:	4b03      	ldr	r3, [pc, #12]	; (800dcc4 <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4+0x1c>)
 800dcb6:	701a      	strb	r2, [r3, #0]
}
 800dcb8:	bf00      	nop
 800dcba:	370c      	adds	r7, #12
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc2:	4770      	bx	lr
 800dcc4:	20000126 	.word	0x20000126

0800dcc8 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter>:
/* Run time environment interface. */
VOID Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter(uint16* data)
{
 800dcc8:	b480      	push	{r7}
 800dcca:	b083      	sub	sp, #12
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
	SecAlm_SensorStatusCounter = *data;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	881a      	ldrh	r2, [r3, #0]
 800dcd4:	4b03      	ldr	r3, [pc, #12]	; (800dce4 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter+0x1c>)
 800dcd6:	801a      	strh	r2, [r3, #0]
}
 800dcd8:	bf00      	nop
 800dcda:	370c      	adds	r7, #12
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce2:	4770      	bx	lr
 800dce4:	20000128 	.word	0x20000128

0800dce8 <Rte_Runnable_Btc_MainFunction>:
{
	SecAlm_SensorStatus = *data;
}
/* Run time environment interface. */
VOID Rte_Runnable_Btc_MainFunction()
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	af00      	add	r7, sp, #0
	Btc_MainFunction();
 800dcec:	f7f3 faa2 	bl	8001234 <Btc_MainFunction>
}
 800dcf0:	bf00      	nop
 800dcf2:	bd80      	pop	{r7, pc}

0800dcf4 <Rte_Runnable_CenLoc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_CenLoc_MainFunction()
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	af00      	add	r7, sp, #0
	CenLoc_MainFunction();
 800dcf8:	f7f3 fcf0 	bl	80016dc <CenLoc_MainFunction>
}
 800dcfc:	bf00      	nop
 800dcfe:	bd80      	pop	{r7, pc}

0800dd00 <Rte_Runnable_ExtLights_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_ExtLights_MainFunction()
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	af00      	add	r7, sp, #0
	ExtLights_MainFunction();
 800dd04:	f7f3 ffb0 	bl	8001c68 <ExtLights_MainFunction>
}
 800dd08:	bf00      	nop
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <Rte_Runnable_IntLights_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_IntLights_MainFunction()
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	af00      	add	r7, sp, #0
	IntLights_MainFunction();
 800dd10:	f7f4 f8f2 	bl	8001ef8 <IntLights_MainFunction>
}
 800dd14:	bf00      	nop
 800dd16:	bd80      	pop	{r7, pc}

0800dd18 <Rte_Runnable_SecAlm_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_SecAlm_MainFunction()
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	af00      	add	r7, sp, #0
	SecAlm_MainFunction();
 800dd1c:	f7f4 fb68 	bl	80023f0 <SecAlm_MainFunction>
}
 800dd20:	bf00      	nop
 800dd22:	bd80      	pop	{r7, pc}

0800dd24 <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>:
/* Run time environment interface. */
VOID Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(uint8* data)
{
 800dd24:	b480      	push	{r7}
 800dd26:	b083      	sub	sp, #12
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
	*data = Btc_ReceivedDataOnBluetooth;
 800dd2c:	4b04      	ldr	r3, [pc, #16]	; (800dd40 <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x1c>)
 800dd2e:	781a      	ldrb	r2, [r3, #0]
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	701a      	strb	r2, [r3, #0]
}
 800dd34:	bf00      	nop
 800dd36:	370c      	adds	r7, #12
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3e:	4770      	bx	lr
 800dd40:	200000c2 	.word	0x200000c2

0800dd44 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>:
{
	HAL_TIM_Base_Stop_IT(htim);
}
/* Run time environment interface. */
VOID Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b082      	sub	sp, #8
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	460b      	mov	r3, r1
 800dd4e:	807b      	strh	r3, [r7, #2]
 800dd50:	4613      	mov	r3, r2
 800dd52:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);
 800dd54:	787a      	ldrb	r2, [r7, #1]
 800dd56:	887b      	ldrh	r3, [r7, #2]
 800dd58:	4619      	mov	r1, r3
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f7f8 f858 	bl	8005e10 <HAL_GPIO_WritePin>
}
 800dd60:	bf00      	nop
 800dd62:	3708      	adds	r7, #8
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}

0800dd68 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>:
{
	HAL_GetTick();
}
/* Run time environment interface. */
VOID Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(osTimerId_t timer_id, uint32_t ticks)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b082      	sub	sp, #8
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
 800dd70:	6039      	str	r1, [r7, #0]
	osTimerStart(timer_id, ticks);
 800dd72:	6839      	ldr	r1, [r7, #0]
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	f7fc fba3 	bl	800a4c0 <osTimerStart>
}
 800dd7a:	bf00      	nop
 800dd7c:	3708      	adds	r7, #8
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}

0800dd82 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>:
/* Run time environment interface. */
VOID Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(osTimerId_t timer_id)
{
 800dd82:	b580      	push	{r7, lr}
 800dd84:	b082      	sub	sp, #8
 800dd86:	af00      	add	r7, sp, #0
 800dd88:	6078      	str	r0, [r7, #4]
	osTimerStop(timer_id);
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	f7fc fbc6 	bl	800a51c <osTimerStop>
}
 800dd90:	bf00      	nop
 800dd92:	3708      	adds	r7, #8
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}

0800dd98 <Rte_Runnable_DiagCtrl_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_DiagCtrl_MainFunction()
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	af00      	add	r7, sp, #0
	DiagCtrl_MainFunction();
 800dd9c:	f7f3 fca6 	bl	80016ec <DiagCtrl_MainFunction>
}
 800dda0:	bf00      	nop
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <Rte_Runnable_Pdc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Pdc_MainFunction()
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	af00      	add	r7, sp, #0
	Pdc_MainFunction();
 800dda8:	f7f4 f8ac 	bl	8001f04 <Pdc_MainFunction>
}
 800ddac:	bf00      	nop
 800ddae:	bd80      	pop	{r7, pc}

0800ddb0 <Rte_Runnable_Dem_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Dem_MainFunction()
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	af00      	add	r7, sp, #0
	Dem_MainFunction();
 800ddb4:	f7f5 fee7 	bl	8003b86 <Dem_MainFunction>
}
 800ddb8:	bf00      	nop
 800ddba:	bd80      	pop	{r7, pc}

0800ddbc <Crc_VerifyUartData>:
/***********************************************************************************
* Function: Crc_VerifyUartData													   *
* Description: Verifies the UART data received.							 		   *
************************************************************************************/
StdReturnType Crc_VerifyUartData()
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b084      	sub	sp, #16
 800ddc0:	af00      	add	r7, sp, #0
	/* Local variable to store return value. */
	uint8 returnValue = E_OK;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	73fb      	strb	r3, [r7, #15]
	/* Local variable to store received value. */
	uint8 receivedValue = STD_LOW;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	71fb      	strb	r3, [r7, #7]
	/* Local value to calculate CRC. */
	uint32 calculatedCrc = STD_LOW;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	60bb      	str	r3, [r7, #8]
	/* Read the received data from UART. */
	Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(&receivedValue);
 800ddce:	1dfb      	adds	r3, r7, #7
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f7ff ffa7 	bl	800dd24 <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>
	Crc_BswState = CRC_VERIFYUARTDATA_STATE;
 800ddd6:	4ba6      	ldr	r3, [pc, #664]	; (800e070 <Crc_VerifyUartData+0x2b4>)
 800ddd8:	2201      	movs	r2, #1
 800ddda:	701a      	strb	r2, [r3, #0]
	/* Calculate the CRC. */
	calculatedCrc = HAL_CRC_Calculate(&hcrc, (uint32*)&receivedValue, 1);
 800dddc:	1dfb      	adds	r3, r7, #7
 800ddde:	2201      	movs	r2, #1
 800dde0:	4619      	mov	r1, r3
 800dde2:	48a4      	ldr	r0, [pc, #656]	; (800e074 <Crc_VerifyUartData+0x2b8>)
 800dde4:	f7f6 ff63 	bl	8004cae <HAL_CRC_Calculate>
 800dde8:	60b8      	str	r0, [r7, #8]
	/* Check the value if it has correct CRC. */
	switch(receivedValue)
 800ddea:	79fb      	ldrb	r3, [r7, #7]
 800ddec:	3b01      	subs	r3, #1
 800ddee:	2b19      	cmp	r3, #25
 800ddf0:	f200 8175 	bhi.w	800e0de <Crc_VerifyUartData+0x322>
 800ddf4:	a201      	add	r2, pc, #4	; (adr r2, 800ddfc <Crc_VerifyUartData+0x40>)
 800ddf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddfa:	bf00      	nop
 800ddfc:	0800dee9 	.word	0x0800dee9
 800de00:	0800deff 	.word	0x0800deff
 800de04:	0800df15 	.word	0x0800df15
 800de08:	0800df2b 	.word	0x0800df2b
 800de0c:	0800e0df 	.word	0x0800e0df
 800de10:	0800e0df 	.word	0x0800e0df
 800de14:	0800df41 	.word	0x0800df41
 800de18:	0800df57 	.word	0x0800df57
 800de1c:	0800df6d 	.word	0x0800df6d
 800de20:	0800df83 	.word	0x0800df83
 800de24:	0800df99 	.word	0x0800df99
 800de28:	0800dfaf 	.word	0x0800dfaf
 800de2c:	0800dfc5 	.word	0x0800dfc5
 800de30:	0800dfdb 	.word	0x0800dfdb
 800de34:	0800dff1 	.word	0x0800dff1
 800de38:	0800e007 	.word	0x0800e007
 800de3c:	0800e01d 	.word	0x0800e01d
 800de40:	0800e033 	.word	0x0800e033
 800de44:	0800e049 	.word	0x0800e049
 800de48:	0800e05f 	.word	0x0800e05f
 800de4c:	0800de65 	.word	0x0800de65
 800de50:	0800de7b 	.word	0x0800de7b
 800de54:	0800de91 	.word	0x0800de91
 800de58:	0800dea7 	.word	0x0800dea7
 800de5c:	0800debd 	.word	0x0800debd
 800de60:	0800ded3 	.word	0x0800ded3
	{
		case RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_ON:
			if(calculatedCrc == Crc_ExtLights_ReverseLight_On)
 800de64:	4b84      	ldr	r3, [pc, #528]	; (800e078 <Crc_VerifyUartData+0x2bc>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	68ba      	ldr	r2, [r7, #8]
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d102      	bne.n	800de74 <Crc_VerifyUartData+0xb8>
			{
				returnValue = E_OK;
 800de6e:	2300      	movs	r3, #0
 800de70:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800de72:	e135      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800de74:	2301      	movs	r3, #1
 800de76:	73fb      	strb	r3, [r7, #15]
			break;
 800de78:	e132      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF:
			if(calculatedCrc == Crc_ExtLights_ReverseLight_Off)
 800de7a:	4b80      	ldr	r3, [pc, #512]	; (800e07c <Crc_VerifyUartData+0x2c0>)
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	68ba      	ldr	r2, [r7, #8]
 800de80:	429a      	cmp	r2, r3
 800de82:	d102      	bne.n	800de8a <Crc_VerifyUartData+0xce>
			{
				returnValue = E_OK;
 800de84:	2300      	movs	r3, #0
 800de86:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800de88:	e12a      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800de8a:	2301      	movs	r3, #1
 800de8c:	73fb      	strb	r3, [r7, #15]
			break;
 800de8e:	e127      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_POSITIONZERO:
			if(calculatedCrc == Crc_ExtLights_PositionZero)
 800de90:	4b7b      	ldr	r3, [pc, #492]	; (800e080 <Crc_VerifyUartData+0x2c4>)
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	68ba      	ldr	r2, [r7, #8]
 800de96:	429a      	cmp	r2, r3
 800de98:	d102      	bne.n	800dea0 <Crc_VerifyUartData+0xe4>
			{
				returnValue = E_OK;
 800de9a:	2300      	movs	r3, #0
 800de9c:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800de9e:	e11f      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800dea0:	2301      	movs	r3, #1
 800dea2:	73fb      	strb	r3, [r7, #15]
			break;
 800dea4:	e11c      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:
			if(calculatedCrc == Crc_ExtLights_AutomaticLights)
 800dea6:	4b77      	ldr	r3, [pc, #476]	; (800e084 <Crc_VerifyUartData+0x2c8>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	68ba      	ldr	r2, [r7, #8]
 800deac:	429a      	cmp	r2, r3
 800deae:	d102      	bne.n	800deb6 <Crc_VerifyUartData+0xfa>
			{
				returnValue = E_OK;
 800deb0:	2300      	movs	r3, #0
 800deb2:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800deb4:	e114      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800deb6:	2301      	movs	r3, #1
 800deb8:	73fb      	strb	r3, [r7, #15]
			break;
 800deba:	e111      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_POSITIONLIGHTS:
			if(calculatedCrc == Crc_ExtLights_PositionLights)
 800debc:	4b72      	ldr	r3, [pc, #456]	; (800e088 <Crc_VerifyUartData+0x2cc>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	68ba      	ldr	r2, [r7, #8]
 800dec2:	429a      	cmp	r2, r3
 800dec4:	d102      	bne.n	800decc <Crc_VerifyUartData+0x110>
			{
				returnValue = E_OK;
 800dec6:	2300      	movs	r3, #0
 800dec8:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800deca:	e109      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800decc:	2301      	movs	r3, #1
 800dece:	73fb      	strb	r3, [r7, #15]
			break;
 800ded0:	e106      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:
			if(calculatedCrc == Crc_ExtLights_NightTimeLights)
 800ded2:	4b6e      	ldr	r3, [pc, #440]	; (800e08c <Crc_VerifyUartData+0x2d0>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	68ba      	ldr	r2, [r7, #8]
 800ded8:	429a      	cmp	r2, r3
 800deda:	d102      	bne.n	800dee2 <Crc_VerifyUartData+0x126>
			{
				returnValue = E_OK;
 800dedc:	2300      	movs	r3, #0
 800dede:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800dee0:	e0fe      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800dee2:	2301      	movs	r3, #1
 800dee4:	73fb      	strb	r3, [r7, #15]
			break;
 800dee6:	e0fb      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_CENLOC_ON:
			if(calculatedCrc == Crc_CenLoc_On)
 800dee8:	4b69      	ldr	r3, [pc, #420]	; (800e090 <Crc_VerifyUartData+0x2d4>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	68ba      	ldr	r2, [r7, #8]
 800deee:	429a      	cmp	r2, r3
 800def0:	d102      	bne.n	800def8 <Crc_VerifyUartData+0x13c>
			{
				returnValue = E_OK;
 800def2:	2300      	movs	r3, #0
 800def4:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800def6:	e0f3      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800def8:	2301      	movs	r3, #1
 800defa:	73fb      	strb	r3, [r7, #15]
			break;
 800defc:	e0f0      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_CENLOC_OFF:
			if(calculatedCrc == Crc_CenLoc_Off)
 800defe:	4b65      	ldr	r3, [pc, #404]	; (800e094 <Crc_VerifyUartData+0x2d8>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	68ba      	ldr	r2, [r7, #8]
 800df04:	429a      	cmp	r2, r3
 800df06:	d102      	bne.n	800df0e <Crc_VerifyUartData+0x152>
			{
				returnValue = E_OK;
 800df08:	2300      	movs	r3, #0
 800df0a:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800df0c:	e0e8      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800df0e:	2301      	movs	r3, #1
 800df10:	73fb      	strb	r3, [r7, #15]
			break;
 800df12:	e0e5      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_ON:
			if(calculatedCrc == Crc_ExtLights_HighBeam_On)
 800df14:	4b60      	ldr	r3, [pc, #384]	; (800e098 <Crc_VerifyUartData+0x2dc>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	68ba      	ldr	r2, [r7, #8]
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d102      	bne.n	800df24 <Crc_VerifyUartData+0x168>
			{
				returnValue = E_OK;
 800df1e:	2300      	movs	r3, #0
 800df20:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800df22:	e0dd      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800df24:	2301      	movs	r3, #1
 800df26:	73fb      	strb	r3, [r7, #15]
			break;
 800df28:	e0da      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_OFF:
			if(calculatedCrc == Crc_ExtLights_HighBeam_Off)
 800df2a:	4b5c      	ldr	r3, [pc, #368]	; (800e09c <Crc_VerifyUartData+0x2e0>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	68ba      	ldr	r2, [r7, #8]
 800df30:	429a      	cmp	r2, r3
 800df32:	d102      	bne.n	800df3a <Crc_VerifyUartData+0x17e>
			{
				returnValue = E_OK;
 800df34:	2300      	movs	r3, #0
 800df36:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800df38:	e0d2      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800df3a:	2301      	movs	r3, #1
 800df3c:	73fb      	strb	r3, [r7, #15]
			break;
 800df3e:	e0cf      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:
			if(calculatedCrc == Crc_ExtLights_TurnSignalLeft_On)
 800df40:	4b57      	ldr	r3, [pc, #348]	; (800e0a0 <Crc_VerifyUartData+0x2e4>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	68ba      	ldr	r2, [r7, #8]
 800df46:	429a      	cmp	r2, r3
 800df48:	d102      	bne.n	800df50 <Crc_VerifyUartData+0x194>
			{
				returnValue = E_OK;
 800df4a:	2300      	movs	r3, #0
 800df4c:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800df4e:	e0c7      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800df50:	2301      	movs	r3, #1
 800df52:	73fb      	strb	r3, [r7, #15]
			break;
 800df54:	e0c4      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:
			if(calculatedCrc == Crc_ExtLights_TurnSignalLeft_Off)
 800df56:	4b53      	ldr	r3, [pc, #332]	; (800e0a4 <Crc_VerifyUartData+0x2e8>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	68ba      	ldr	r2, [r7, #8]
 800df5c:	429a      	cmp	r2, r3
 800df5e:	d102      	bne.n	800df66 <Crc_VerifyUartData+0x1aa>
			{
				returnValue = E_OK;
 800df60:	2300      	movs	r3, #0
 800df62:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800df64:	e0bc      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800df66:	2301      	movs	r3, #1
 800df68:	73fb      	strb	r3, [r7, #15]
			break;
 800df6a:	e0b9      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON:
			if(calculatedCrc == Crc_ExtLights_TurnSignalRight_On)
 800df6c:	4b4e      	ldr	r3, [pc, #312]	; (800e0a8 <Crc_VerifyUartData+0x2ec>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	68ba      	ldr	r2, [r7, #8]
 800df72:	429a      	cmp	r2, r3
 800df74:	d102      	bne.n	800df7c <Crc_VerifyUartData+0x1c0>
			{
				returnValue = E_OK;
 800df76:	2300      	movs	r3, #0
 800df78:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800df7a:	e0b1      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800df7c:	2301      	movs	r3, #1
 800df7e:	73fb      	strb	r3, [r7, #15]
			break;
 800df80:	e0ae      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF:
			if(calculatedCrc == Crc_ExtLights_TurnSignalRight_Off)
 800df82:	4b4a      	ldr	r3, [pc, #296]	; (800e0ac <Crc_VerifyUartData+0x2f0>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	68ba      	ldr	r2, [r7, #8]
 800df88:	429a      	cmp	r2, r3
 800df8a:	d102      	bne.n	800df92 <Crc_VerifyUartData+0x1d6>
			{
				returnValue = E_OK;
 800df8c:	2300      	movs	r3, #0
 800df8e:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800df90:	e0a6      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800df92:	2301      	movs	r3, #1
 800df94:	73fb      	strb	r3, [r7, #15]
			break;
 800df96:	e0a3      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:
			if(calculatedCrc == Crc_ExtLights_HazardLight_On)
 800df98:	4b45      	ldr	r3, [pc, #276]	; (800e0b0 <Crc_VerifyUartData+0x2f4>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	68ba      	ldr	r2, [r7, #8]
 800df9e:	429a      	cmp	r2, r3
 800dfa0:	d102      	bne.n	800dfa8 <Crc_VerifyUartData+0x1ec>
			{
				returnValue = E_OK;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800dfa6:	e09b      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	73fb      	strb	r3, [r7, #15]
			break;
 800dfac:	e098      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:
			if(calculatedCrc == Crc_ExtLights_HazardLight_Off)
 800dfae:	4b41      	ldr	r3, [pc, #260]	; (800e0b4 <Crc_VerifyUartData+0x2f8>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	68ba      	ldr	r2, [r7, #8]
 800dfb4:	429a      	cmp	r2, r3
 800dfb6:	d102      	bne.n	800dfbe <Crc_VerifyUartData+0x202>
			{
				returnValue = E_OK;
 800dfb8:	2300      	movs	r3, #0
 800dfba:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800dfbc:	e090      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	73fb      	strb	r3, [r7, #15]
			break;
 800dfc2:	e08d      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:
			if(calculatedCrc == Crc_ExtLights_FogLightFront_On)
 800dfc4:	4b3c      	ldr	r3, [pc, #240]	; (800e0b8 <Crc_VerifyUartData+0x2fc>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	68ba      	ldr	r2, [r7, #8]
 800dfca:	429a      	cmp	r2, r3
 800dfcc:	d102      	bne.n	800dfd4 <Crc_VerifyUartData+0x218>
			{
				returnValue = E_OK;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800dfd2:	e085      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	73fb      	strb	r3, [r7, #15]
			break;
 800dfd8:	e082      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:
			if(calculatedCrc == Crc_ExtLights_FogLightFront_Off)
 800dfda:	4b38      	ldr	r3, [pc, #224]	; (800e0bc <Crc_VerifyUartData+0x300>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	68ba      	ldr	r2, [r7, #8]
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d102      	bne.n	800dfea <Crc_VerifyUartData+0x22e>
			{
				returnValue = E_OK;
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800dfe8:	e07a      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800dfea:	2301      	movs	r3, #1
 800dfec:	73fb      	strb	r3, [r7, #15]
			break;
 800dfee:	e077      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:
			if(calculatedCrc == Crc_ExtLights_FogLightRear_On)
 800dff0:	4b33      	ldr	r3, [pc, #204]	; (800e0c0 <Crc_VerifyUartData+0x304>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	68ba      	ldr	r2, [r7, #8]
 800dff6:	429a      	cmp	r2, r3
 800dff8:	d102      	bne.n	800e000 <Crc_VerifyUartData+0x244>
			{
				returnValue = E_OK;
 800dffa:	2300      	movs	r3, #0
 800dffc:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800dffe:	e06f      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800e000:	2301      	movs	r3, #1
 800e002:	73fb      	strb	r3, [r7, #15]
			break;
 800e004:	e06c      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:
			if(calculatedCrc == Crc_ExtLights_FogLightRear_Off)
 800e006:	4b2f      	ldr	r3, [pc, #188]	; (800e0c4 <Crc_VerifyUartData+0x308>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	68ba      	ldr	r2, [r7, #8]
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d102      	bne.n	800e016 <Crc_VerifyUartData+0x25a>
			{
				returnValue = E_OK;
 800e010:	2300      	movs	r3, #0
 800e012:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800e014:	e064      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800e016:	2301      	movs	r3, #1
 800e018:	73fb      	strb	r3, [r7, #15]
			break;
 800e01a:	e061      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTON:
			if(calculatedCrc == Crc_ExtLights_BrakeLight_On)
 800e01c:	4b2a      	ldr	r3, [pc, #168]	; (800e0c8 <Crc_VerifyUartData+0x30c>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	68ba      	ldr	r2, [r7, #8]
 800e022:	429a      	cmp	r2, r3
 800e024:	d102      	bne.n	800e02c <Crc_VerifyUartData+0x270>
			{
				returnValue = E_OK;
 800e026:	2300      	movs	r3, #0
 800e028:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800e02a:	e059      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800e02c:	2301      	movs	r3, #1
 800e02e:	73fb      	strb	r3, [r7, #15]
			break;
 800e030:	e056      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:
			if(calculatedCrc == Crc_ExtLights_BrakeLight_Off)
 800e032:	4b26      	ldr	r3, [pc, #152]	; (800e0cc <Crc_VerifyUartData+0x310>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	68ba      	ldr	r2, [r7, #8]
 800e038:	429a      	cmp	r2, r3
 800e03a:	d102      	bne.n	800e042 <Crc_VerifyUartData+0x286>
			{
				returnValue = E_OK;
 800e03c:	2300      	movs	r3, #0
 800e03e:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800e040:	e04e      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800e042:	2301      	movs	r3, #1
 800e044:	73fb      	strb	r3, [r7, #15]
			break;
 800e046:	e04b      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:
			if(calculatedCrc == Crc_IntLights_InteriorLight_On)
 800e048:	4b21      	ldr	r3, [pc, #132]	; (800e0d0 <Crc_VerifyUartData+0x314>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	68ba      	ldr	r2, [r7, #8]
 800e04e:	429a      	cmp	r2, r3
 800e050:	d102      	bne.n	800e058 <Crc_VerifyUartData+0x29c>
			{
				returnValue = E_OK;
 800e052:	2300      	movs	r3, #0
 800e054:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800e056:	e043      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800e058:	2301      	movs	r3, #1
 800e05a:	73fb      	strb	r3, [r7, #15]
			break;
 800e05c:	e040      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:
			if(calculatedCrc == Crc_IntLights_InteriorLights_Off)
 800e05e:	4b1d      	ldr	r3, [pc, #116]	; (800e0d4 <Crc_VerifyUartData+0x318>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	68ba      	ldr	r2, [r7, #8]
 800e064:	429a      	cmp	r2, r3
 800e066:	d137      	bne.n	800e0d8 <Crc_VerifyUartData+0x31c>
			{
				returnValue = E_OK;
 800e068:	2300      	movs	r3, #0
 800e06a:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800e06c:	e038      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
 800e06e:	bf00      	nop
 800e070:	2000a6ec 	.word	0x2000a6ec
 800e074:	20000204 	.word	0x20000204
 800e078:	2000a728 	.word	0x2000a728
 800e07c:	2000a72c 	.word	0x2000a72c
 800e080:	2000a730 	.word	0x2000a730
 800e084:	2000a734 	.word	0x2000a734
 800e088:	2000a738 	.word	0x2000a738
 800e08c:	2000a73c 	.word	0x2000a73c
 800e090:	2000a6f0 	.word	0x2000a6f0
 800e094:	2000a6f4 	.word	0x2000a6f4
 800e098:	2000a6f8 	.word	0x2000a6f8
 800e09c:	2000a6fc 	.word	0x2000a6fc
 800e0a0:	2000a700 	.word	0x2000a700
 800e0a4:	2000a704 	.word	0x2000a704
 800e0a8:	2000a708 	.word	0x2000a708
 800e0ac:	2000a70c 	.word	0x2000a70c
 800e0b0:	2000a710 	.word	0x2000a710
 800e0b4:	2000a714 	.word	0x2000a714
 800e0b8:	2000a718 	.word	0x2000a718
 800e0bc:	2000a71c 	.word	0x2000a71c
 800e0c0:	2000a748 	.word	0x2000a748
 800e0c4:	2000a74c 	.word	0x2000a74c
 800e0c8:	2000a720 	.word	0x2000a720
 800e0cc:	2000a724 	.word	0x2000a724
 800e0d0:	2000a740 	.word	0x2000a740
 800e0d4:	2000a744 	.word	0x2000a744
				returnValue = E_NOT_OK;
 800e0d8:	2301      	movs	r3, #1
 800e0da:	73fb      	strb	r3, [r7, #15]
			break;
 800e0dc:	e000      	b.n	800e0e0 <Crc_VerifyUartData+0x324>
		default:
			break;
 800e0de:	bf00      	nop
	}
	return returnValue;
 800e0e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	3710      	adds	r7, #16
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}
 800e0ea:	bf00      	nop

0800e0ec <Crc_InitCrcValuesForUart>:
/***********************************************************************************
* Function: Crc_InitCrcValuesForUart									   		   *
* Description: Initialize the CRC default values for UART data.			 		   *
************************************************************************************/
VOID Crc_InitCrcValuesForUart()
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b082      	sub	sp, #8
 800e0f0:	af00      	add	r7, sp, #0
	/* Local variable to store default value of possible
	 * received data from UART. */
	uint32 value = 0;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	607b      	str	r3, [r7, #4]
	/* Calculate CRC for each defined bluetooth command. */
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON;
 800e0f6:	230f      	movs	r3, #15
 800e0f8:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightRear_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800e0fa:	1d3b      	adds	r3, r7, #4
 800e0fc:	2201      	movs	r2, #1
 800e0fe:	4619      	mov	r1, r3
 800e100:	4883      	ldr	r0, [pc, #524]	; (800e310 <Crc_InitCrcValuesForUart+0x224>)
 800e102:	f7f6 fdd4 	bl	8004cae <HAL_CRC_Calculate>
 800e106:	4603      	mov	r3, r0
 800e108:	4a82      	ldr	r2, [pc, #520]	; (800e314 <Crc_InitCrcValuesForUart+0x228>)
 800e10a:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF;
 800e10c:	2310      	movs	r3, #16
 800e10e:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightRear_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800e110:	1d3b      	adds	r3, r7, #4
 800e112:	2201      	movs	r2, #1
 800e114:	4619      	mov	r1, r3
 800e116:	487e      	ldr	r0, [pc, #504]	; (800e310 <Crc_InitCrcValuesForUart+0x224>)
 800e118:	f7f6 fdc9 	bl	8004cae <HAL_CRC_Calculate>
 800e11c:	4603      	mov	r3, r0
 800e11e:	4a7e      	ldr	r2, [pc, #504]	; (800e318 <Crc_InitCrcValuesForUart+0x22c>)
 800e120:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_CENLOC_ON;
 800e122:	2301      	movs	r3, #1
 800e124:	607b      	str	r3, [r7, #4]
	Crc_CenLoc_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800e126:	1d3b      	adds	r3, r7, #4
 800e128:	2201      	movs	r2, #1
 800e12a:	4619      	mov	r1, r3
 800e12c:	4878      	ldr	r0, [pc, #480]	; (800e310 <Crc_InitCrcValuesForUart+0x224>)
 800e12e:	f7f6 fdbe 	bl	8004cae <HAL_CRC_Calculate>
 800e132:	4603      	mov	r3, r0
 800e134:	4a79      	ldr	r2, [pc, #484]	; (800e31c <Crc_InitCrcValuesForUart+0x230>)
 800e136:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_CENLOC_OFF;
 800e138:	2302      	movs	r3, #2
 800e13a:	607b      	str	r3, [r7, #4]
	Crc_CenLoc_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800e13c:	1d3b      	adds	r3, r7, #4
 800e13e:	2201      	movs	r2, #1
 800e140:	4619      	mov	r1, r3
 800e142:	4873      	ldr	r0, [pc, #460]	; (800e310 <Crc_InitCrcValuesForUart+0x224>)
 800e144:	f7f6 fdb3 	bl	8004cae <HAL_CRC_Calculate>
 800e148:	4603      	mov	r3, r0
 800e14a:	4a75      	ldr	r2, [pc, #468]	; (800e320 <Crc_InitCrcValuesForUart+0x234>)
 800e14c:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_ON;
 800e14e:	2303      	movs	r3, #3
 800e150:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HighBeam_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800e152:	1d3b      	adds	r3, r7, #4
 800e154:	2201      	movs	r2, #1
 800e156:	4619      	mov	r1, r3
 800e158:	486d      	ldr	r0, [pc, #436]	; (800e310 <Crc_InitCrcValuesForUart+0x224>)
 800e15a:	f7f6 fda8 	bl	8004cae <HAL_CRC_Calculate>
 800e15e:	4603      	mov	r3, r0
 800e160:	4a70      	ldr	r2, [pc, #448]	; (800e324 <Crc_InitCrcValuesForUart+0x238>)
 800e162:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_OFF;
 800e164:	2304      	movs	r3, #4
 800e166:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HighBeam_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800e168:	1d3b      	adds	r3, r7, #4
 800e16a:	2201      	movs	r2, #1
 800e16c:	4619      	mov	r1, r3
 800e16e:	4868      	ldr	r0, [pc, #416]	; (800e310 <Crc_InitCrcValuesForUart+0x224>)
 800e170:	f7f6 fd9d 	bl	8004cae <HAL_CRC_Calculate>
 800e174:	4603      	mov	r3, r0
 800e176:	4a6c      	ldr	r2, [pc, #432]	; (800e328 <Crc_InitCrcValuesForUart+0x23c>)
 800e178:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON;
 800e17a:	2307      	movs	r3, #7
 800e17c:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalLeft_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800e17e:	1d3b      	adds	r3, r7, #4
 800e180:	2201      	movs	r2, #1
 800e182:	4619      	mov	r1, r3
 800e184:	4862      	ldr	r0, [pc, #392]	; (800e310 <Crc_InitCrcValuesForUart+0x224>)
 800e186:	f7f6 fd92 	bl	8004cae <HAL_CRC_Calculate>
 800e18a:	4603      	mov	r3, r0
 800e18c:	4a67      	ldr	r2, [pc, #412]	; (800e32c <Crc_InitCrcValuesForUart+0x240>)
 800e18e:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF;
 800e190:	2308      	movs	r3, #8
 800e192:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalLeft_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800e194:	1d3b      	adds	r3, r7, #4
 800e196:	2201      	movs	r2, #1
 800e198:	4619      	mov	r1, r3
 800e19a:	485d      	ldr	r0, [pc, #372]	; (800e310 <Crc_InitCrcValuesForUart+0x224>)
 800e19c:	f7f6 fd87 	bl	8004cae <HAL_CRC_Calculate>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	4a63      	ldr	r2, [pc, #396]	; (800e330 <Crc_InitCrcValuesForUart+0x244>)
 800e1a4:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON;
 800e1a6:	2309      	movs	r3, #9
 800e1a8:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalRight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800e1aa:	1d3b      	adds	r3, r7, #4
 800e1ac:	2201      	movs	r2, #1
 800e1ae:	4619      	mov	r1, r3
 800e1b0:	4857      	ldr	r0, [pc, #348]	; (800e310 <Crc_InitCrcValuesForUart+0x224>)
 800e1b2:	f7f6 fd7c 	bl	8004cae <HAL_CRC_Calculate>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	4a5e      	ldr	r2, [pc, #376]	; (800e334 <Crc_InitCrcValuesForUart+0x248>)
 800e1ba:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF;
 800e1bc:	230a      	movs	r3, #10
 800e1be:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalRight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800e1c0:	1d3b      	adds	r3, r7, #4
 800e1c2:	2201      	movs	r2, #1
 800e1c4:	4619      	mov	r1, r3
 800e1c6:	4852      	ldr	r0, [pc, #328]	; (800e310 <Crc_InitCrcValuesForUart+0x224>)
 800e1c8:	f7f6 fd71 	bl	8004cae <HAL_CRC_Calculate>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	4a5a      	ldr	r2, [pc, #360]	; (800e338 <Crc_InitCrcValuesForUart+0x24c>)
 800e1d0:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON;
 800e1d2:	230b      	movs	r3, #11
 800e1d4:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HazardLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800e1d6:	1d3b      	adds	r3, r7, #4
 800e1d8:	2201      	movs	r2, #1
 800e1da:	4619      	mov	r1, r3
 800e1dc:	484c      	ldr	r0, [pc, #304]	; (800e310 <Crc_InitCrcValuesForUart+0x224>)
 800e1de:	f7f6 fd66 	bl	8004cae <HAL_CRC_Calculate>
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	4a55      	ldr	r2, [pc, #340]	; (800e33c <Crc_InitCrcValuesForUart+0x250>)
 800e1e6:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF;
 800e1e8:	230c      	movs	r3, #12
 800e1ea:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HazardLight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800e1ec:	1d3b      	adds	r3, r7, #4
 800e1ee:	2201      	movs	r2, #1
 800e1f0:	4619      	mov	r1, r3
 800e1f2:	4847      	ldr	r0, [pc, #284]	; (800e310 <Crc_InitCrcValuesForUart+0x224>)
 800e1f4:	f7f6 fd5b 	bl	8004cae <HAL_CRC_Calculate>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	4a51      	ldr	r2, [pc, #324]	; (800e340 <Crc_InitCrcValuesForUart+0x254>)
 800e1fc:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON;
 800e1fe:	230d      	movs	r3, #13
 800e200:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightFront_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800e202:	1d3b      	adds	r3, r7, #4
 800e204:	2201      	movs	r2, #1
 800e206:	4619      	mov	r1, r3
 800e208:	4841      	ldr	r0, [pc, #260]	; (800e310 <Crc_InitCrcValuesForUart+0x224>)
 800e20a:	f7f6 fd50 	bl	8004cae <HAL_CRC_Calculate>
 800e20e:	4603      	mov	r3, r0
 800e210:	4a4c      	ldr	r2, [pc, #304]	; (800e344 <Crc_InitCrcValuesForUart+0x258>)
 800e212:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF;
 800e214:	230e      	movs	r3, #14
 800e216:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightFront_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800e218:	1d3b      	adds	r3, r7, #4
 800e21a:	2201      	movs	r2, #1
 800e21c:	4619      	mov	r1, r3
 800e21e:	483c      	ldr	r0, [pc, #240]	; (800e310 <Crc_InitCrcValuesForUart+0x224>)
 800e220:	f7f6 fd45 	bl	8004cae <HAL_CRC_Calculate>
 800e224:	4603      	mov	r3, r0
 800e226:	4a48      	ldr	r2, [pc, #288]	; (800e348 <Crc_InitCrcValuesForUart+0x25c>)
 800e228:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTON;
 800e22a:	2311      	movs	r3, #17
 800e22c:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_BrakeLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800e22e:	1d3b      	adds	r3, r7, #4
 800e230:	2201      	movs	r2, #1
 800e232:	4619      	mov	r1, r3
 800e234:	4836      	ldr	r0, [pc, #216]	; (800e310 <Crc_InitCrcValuesForUart+0x224>)
 800e236:	f7f6 fd3a 	bl	8004cae <HAL_CRC_Calculate>
 800e23a:	4603      	mov	r3, r0
 800e23c:	4a43      	ldr	r2, [pc, #268]	; (800e34c <Crc_InitCrcValuesForUart+0x260>)
 800e23e:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTOFF;
 800e240:	2312      	movs	r3, #18
 800e242:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_BrakeLight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800e244:	1d3b      	adds	r3, r7, #4
 800e246:	2201      	movs	r2, #1
 800e248:	4619      	mov	r1, r3
 800e24a:	4831      	ldr	r0, [pc, #196]	; (800e310 <Crc_InitCrcValuesForUart+0x224>)
 800e24c:	f7f6 fd2f 	bl	8004cae <HAL_CRC_Calculate>
 800e250:	4603      	mov	r3, r0
 800e252:	4a3f      	ldr	r2, [pc, #252]	; (800e350 <Crc_InitCrcValuesForUart+0x264>)
 800e254:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_ON;
 800e256:	2315      	movs	r3, #21
 800e258:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_ReverseLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800e25a:	1d3b      	adds	r3, r7, #4
 800e25c:	2201      	movs	r2, #1
 800e25e:	4619      	mov	r1, r3
 800e260:	482b      	ldr	r0, [pc, #172]	; (800e310 <Crc_InitCrcValuesForUart+0x224>)
 800e262:	f7f6 fd24 	bl	8004cae <HAL_CRC_Calculate>
 800e266:	4603      	mov	r3, r0
 800e268:	4a3a      	ldr	r2, [pc, #232]	; (800e354 <Crc_InitCrcValuesForUart+0x268>)
 800e26a:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF;
 800e26c:	2316      	movs	r3, #22
 800e26e:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_ReverseLight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800e270:	1d3b      	adds	r3, r7, #4
 800e272:	2201      	movs	r2, #1
 800e274:	4619      	mov	r1, r3
 800e276:	4826      	ldr	r0, [pc, #152]	; (800e310 <Crc_InitCrcValuesForUart+0x224>)
 800e278:	f7f6 fd19 	bl	8004cae <HAL_CRC_Calculate>
 800e27c:	4603      	mov	r3, r0
 800e27e:	4a36      	ldr	r2, [pc, #216]	; (800e358 <Crc_InitCrcValuesForUart+0x26c>)
 800e280:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_POSITIONZERO;
 800e282:	2317      	movs	r3, #23
 800e284:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_PositionZero = HAL_CRC_Calculate(&hcrc, &value, 1);
 800e286:	1d3b      	adds	r3, r7, #4
 800e288:	2201      	movs	r2, #1
 800e28a:	4619      	mov	r1, r3
 800e28c:	4820      	ldr	r0, [pc, #128]	; (800e310 <Crc_InitCrcValuesForUart+0x224>)
 800e28e:	f7f6 fd0e 	bl	8004cae <HAL_CRC_Calculate>
 800e292:	4603      	mov	r3, r0
 800e294:	4a31      	ldr	r2, [pc, #196]	; (800e35c <Crc_InitCrcValuesForUart+0x270>)
 800e296:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
 800e298:	2318      	movs	r3, #24
 800e29a:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_AutomaticLights = HAL_CRC_Calculate(&hcrc, &value, 1);
 800e29c:	1d3b      	adds	r3, r7, #4
 800e29e:	2201      	movs	r2, #1
 800e2a0:	4619      	mov	r1, r3
 800e2a2:	481b      	ldr	r0, [pc, #108]	; (800e310 <Crc_InitCrcValuesForUart+0x224>)
 800e2a4:	f7f6 fd03 	bl	8004cae <HAL_CRC_Calculate>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	4a2d      	ldr	r2, [pc, #180]	; (800e360 <Crc_InitCrcValuesForUart+0x274>)
 800e2ac:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
 800e2ae:	2319      	movs	r3, #25
 800e2b0:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_PositionLights = HAL_CRC_Calculate(&hcrc, &value, 1);
 800e2b2:	1d3b      	adds	r3, r7, #4
 800e2b4:	2201      	movs	r2, #1
 800e2b6:	4619      	mov	r1, r3
 800e2b8:	4815      	ldr	r0, [pc, #84]	; (800e310 <Crc_InitCrcValuesForUart+0x224>)
 800e2ba:	f7f6 fcf8 	bl	8004cae <HAL_CRC_Calculate>
 800e2be:	4603      	mov	r3, r0
 800e2c0:	4a28      	ldr	r2, [pc, #160]	; (800e364 <Crc_InitCrcValuesForUart+0x278>)
 800e2c2:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
 800e2c4:	231a      	movs	r3, #26
 800e2c6:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_NightTimeLights = HAL_CRC_Calculate(&hcrc, &value, 1);
 800e2c8:	1d3b      	adds	r3, r7, #4
 800e2ca:	2201      	movs	r2, #1
 800e2cc:	4619      	mov	r1, r3
 800e2ce:	4810      	ldr	r0, [pc, #64]	; (800e310 <Crc_InitCrcValuesForUart+0x224>)
 800e2d0:	f7f6 fced 	bl	8004cae <HAL_CRC_Calculate>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	4a24      	ldr	r2, [pc, #144]	; (800e368 <Crc_InitCrcValuesForUart+0x27c>)
 800e2d8:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_ON;
 800e2da:	2313      	movs	r3, #19
 800e2dc:	607b      	str	r3, [r7, #4]
	Crc_IntLights_InteriorLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800e2de:	1d3b      	adds	r3, r7, #4
 800e2e0:	2201      	movs	r2, #1
 800e2e2:	4619      	mov	r1, r3
 800e2e4:	480a      	ldr	r0, [pc, #40]	; (800e310 <Crc_InitCrcValuesForUart+0x224>)
 800e2e6:	f7f6 fce2 	bl	8004cae <HAL_CRC_Calculate>
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	4a1f      	ldr	r2, [pc, #124]	; (800e36c <Crc_InitCrcValuesForUart+0x280>)
 800e2ee:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF;
 800e2f0:	2314      	movs	r3, #20
 800e2f2:	607b      	str	r3, [r7, #4]
	Crc_IntLights_InteriorLights_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800e2f4:	1d3b      	adds	r3, r7, #4
 800e2f6:	2201      	movs	r2, #1
 800e2f8:	4619      	mov	r1, r3
 800e2fa:	4805      	ldr	r0, [pc, #20]	; (800e310 <Crc_InitCrcValuesForUart+0x224>)
 800e2fc:	f7f6 fcd7 	bl	8004cae <HAL_CRC_Calculate>
 800e300:	4603      	mov	r3, r0
 800e302:	4a1b      	ldr	r2, [pc, #108]	; (800e370 <Crc_InitCrcValuesForUart+0x284>)
 800e304:	6013      	str	r3, [r2, #0]
}
 800e306:	bf00      	nop
 800e308:	3708      	adds	r7, #8
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}
 800e30e:	bf00      	nop
 800e310:	20000204 	.word	0x20000204
 800e314:	2000a748 	.word	0x2000a748
 800e318:	2000a74c 	.word	0x2000a74c
 800e31c:	2000a6f0 	.word	0x2000a6f0
 800e320:	2000a6f4 	.word	0x2000a6f4
 800e324:	2000a6f8 	.word	0x2000a6f8
 800e328:	2000a6fc 	.word	0x2000a6fc
 800e32c:	2000a700 	.word	0x2000a700
 800e330:	2000a704 	.word	0x2000a704
 800e334:	2000a708 	.word	0x2000a708
 800e338:	2000a70c 	.word	0x2000a70c
 800e33c:	2000a710 	.word	0x2000a710
 800e340:	2000a714 	.word	0x2000a714
 800e344:	2000a718 	.word	0x2000a718
 800e348:	2000a71c 	.word	0x2000a71c
 800e34c:	2000a720 	.word	0x2000a720
 800e350:	2000a724 	.word	0x2000a724
 800e354:	2000a728 	.word	0x2000a728
 800e358:	2000a72c 	.word	0x2000a72c
 800e35c:	2000a730 	.word	0x2000a730
 800e360:	2000a734 	.word	0x2000a734
 800e364:	2000a738 	.word	0x2000a738
 800e368:	2000a73c 	.word	0x2000a73c
 800e36c:	2000a740 	.word	0x2000a740
 800e370:	2000a744 	.word	0x2000a744

0800e374 <HAL_CRC_ErrorCallback>:
/***********************************************************************************
* Function: HAL_CRC_ErrorCallback												   *
* Description: Called in case of error. 								 		   *
************************************************************************************/
VOID HAL_CRC_ErrorCallback(CRC_HandleTypeDef *hcrc)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b082      	sub	sp, #8
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
	/* Perform re-initialization. */
	Crc_DeInit();
 800e37c:	f000 f81e 	bl	800e3bc <Crc_DeInit>
	Crc_Init();
 800e380:	f000 f804 	bl	800e38c <Crc_Init>
}
 800e384:	bf00      	nop
 800e386:	3708      	adds	r7, #8
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}

0800e38c <Crc_Init>:
/***********************************************************************************
* Function: Crc_Init													   		   *
* Description: Initialize the peripheral.								 		   *
************************************************************************************/
StdReturnType Crc_Init()
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	af00      	add	r7, sp, #0
	/* Initialize the CRC.
	 * Call for the error callback in case of faulty initialization. */
	hcrc.Instance = CRC;
 800e390:	4b08      	ldr	r3, [pc, #32]	; (800e3b4 <Crc_Init+0x28>)
 800e392:	4a09      	ldr	r2, [pc, #36]	; (800e3b8 <Crc_Init+0x2c>)
 800e394:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800e396:	4807      	ldr	r0, [pc, #28]	; (800e3b4 <Crc_Init+0x28>)
 800e398:	f7f6 fc3d 	bl	8004c16 <HAL_CRC_Init>
 800e39c:	4603      	mov	r3, r0
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d002      	beq.n	800e3a8 <Crc_Init+0x1c>
	{
		HAL_CRC_ErrorCallback(&hcrc);
 800e3a2:	4804      	ldr	r0, [pc, #16]	; (800e3b4 <Crc_Init+0x28>)
 800e3a4:	f7ff ffe6 	bl	800e374 <HAL_CRC_ErrorCallback>
	else
	{
		/* do nothing */
	}
	/* Initialize the default CRC UART data received values. */
	Crc_InitCrcValuesForUart();
 800e3a8:	f7ff fea0 	bl	800e0ec <Crc_InitCrcValuesForUart>
	return E_OK;
 800e3ac:	2300      	movs	r3, #0
}
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	bd80      	pop	{r7, pc}
 800e3b2:	bf00      	nop
 800e3b4:	20000204 	.word	0x20000204
 800e3b8:	40023000 	.word	0x40023000

0800e3bc <Crc_DeInit>:
/***********************************************************************************
* Function: Crc_DeInit													   		   *
* Description: De-initialize the peripheral.		 		   					   *
************************************************************************************/
StdReturnType Crc_DeInit()
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	af00      	add	r7, sp, #0
	/* De-initialize the CRC. */
	HAL_CRC_DeInit(&hcrc);
 800e3c0:	4802      	ldr	r0, [pc, #8]	; (800e3cc <Crc_DeInit+0x10>)
 800e3c2:	f7f6 fc44 	bl	8004c4e <HAL_CRC_DeInit>
	return E_OK;
 800e3c6:	2300      	movs	r3, #0
}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	bd80      	pop	{r7, pc}
 800e3cc:	20000204 	.word	0x20000204

0800e3d0 <Crc_MainFunction>:
/***********************************************************************************
* Function: Crc_MainFunction													   *
* Description: Peripheral main function.		 		   						   *
************************************************************************************/
VOID Crc_MainFunction()
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b082      	sub	sp, #8
 800e3d4:	af00      	add	r7, sp, #0
	/* Get the error status in the local variable. */
	uint32 returnValue = HAL_CRC_GetState(&hcrc);
 800e3d6:	4825      	ldr	r0, [pc, #148]	; (800e46c <Crc_MainFunction+0x9c>)
 800e3d8:	f7f6 fc9c 	bl	8004d14 <HAL_CRC_GetState>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	607b      	str	r3, [r7, #4]
	/* Process module state. */
	switch(Crc_BswState)
 800e3e0:	4b23      	ldr	r3, [pc, #140]	; (800e470 <Crc_MainFunction+0xa0>)
 800e3e2:	781b      	ldrb	r3, [r3, #0]
 800e3e4:	2b03      	cmp	r3, #3
 800e3e6:	d81a      	bhi.n	800e41e <Crc_MainFunction+0x4e>
 800e3e8:	a201      	add	r2, pc, #4	; (adr r2, 800e3f0 <Crc_MainFunction+0x20>)
 800e3ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3ee:	bf00      	nop
 800e3f0:	0800e401 	.word	0x0800e401
 800e3f4:	0800e41f 	.word	0x0800e41f
 800e3f8:	0800e413 	.word	0x0800e413
 800e3fc:	0800e40d 	.word	0x0800e40d
	{
		case CRC_INIT_STATE:
			Crc_Init();
 800e400:	f7ff ffc4 	bl	800e38c <Crc_Init>
			Crc_BswState = CRC_INITCRCVALUES_STATE;
 800e404:	4b1a      	ldr	r3, [pc, #104]	; (800e470 <Crc_MainFunction+0xa0>)
 800e406:	2202      	movs	r2, #2
 800e408:	701a      	strb	r2, [r3, #0]
			break;
 800e40a:	e009      	b.n	800e420 <Crc_MainFunction+0x50>
		case CRC_DEINIT_STATE:
			Crc_DeInit();
 800e40c:	f7ff ffd6 	bl	800e3bc <Crc_DeInit>
			break;
 800e410:	e006      	b.n	800e420 <Crc_MainFunction+0x50>
		case CRC_VERIFYUARTDATA_STATE:
			break;
		case CRC_INITCRCVALUES_STATE:
			Crc_InitCrcValuesForUart();
 800e412:	f7ff fe6b 	bl	800e0ec <Crc_InitCrcValuesForUart>
			Crc_BswState = CRC_VERIFYUARTDATA_STATE;
 800e416:	4b16      	ldr	r3, [pc, #88]	; (800e470 <Crc_MainFunction+0xa0>)
 800e418:	2201      	movs	r2, #1
 800e41a:	701a      	strb	r2, [r3, #0]
			break;
 800e41c:	e000      	b.n	800e420 <Crc_MainFunction+0x50>
		default:
			break;
 800e41e:	bf00      	nop
	}
	/* Process peripheral state. */
	switch(returnValue)
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2b04      	cmp	r3, #4
 800e424:	d81c      	bhi.n	800e460 <Crc_MainFunction+0x90>
 800e426:	a201      	add	r2, pc, #4	; (adr r2, 800e42c <Crc_MainFunction+0x5c>)
 800e428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e42c:	0800e441 	.word	0x0800e441
 800e430:	0800e449 	.word	0x0800e449
 800e434:	0800e461 	.word	0x0800e461
 800e438:	0800e451 	.word	0x0800e451
 800e43c:	0800e459 	.word	0x0800e459
	{
		case HAL_CRC_STATE_RESET:
			Crc_BswState = CRC_INIT_STATE;
 800e440:	4b0b      	ldr	r3, [pc, #44]	; (800e470 <Crc_MainFunction+0xa0>)
 800e442:	2200      	movs	r2, #0
 800e444:	701a      	strb	r2, [r3, #0]
			break;
 800e446:	e00c      	b.n	800e462 <Crc_MainFunction+0x92>
		case HAL_CRC_STATE_READY:
			Crc_BswState = CRC_VERIFYUARTDATA_STATE;
 800e448:	4b09      	ldr	r3, [pc, #36]	; (800e470 <Crc_MainFunction+0xa0>)
 800e44a:	2201      	movs	r2, #1
 800e44c:	701a      	strb	r2, [r3, #0]
			break;
 800e44e:	e008      	b.n	800e462 <Crc_MainFunction+0x92>
		case HAL_CRC_STATE_BUSY:
			break;
		case HAL_CRC_STATE_TIMEOUT:
			HAL_CRC_ErrorCallback(&hcrc);
 800e450:	4806      	ldr	r0, [pc, #24]	; (800e46c <Crc_MainFunction+0x9c>)
 800e452:	f7ff ff8f 	bl	800e374 <HAL_CRC_ErrorCallback>
			break;
 800e456:	e004      	b.n	800e462 <Crc_MainFunction+0x92>
		case HAL_CRC_STATE_ERROR:
			HAL_CRC_ErrorCallback(&hcrc);
 800e458:	4804      	ldr	r0, [pc, #16]	; (800e46c <Crc_MainFunction+0x9c>)
 800e45a:	f7ff ff8b 	bl	800e374 <HAL_CRC_ErrorCallback>
			break;
 800e45e:	e000      	b.n	800e462 <Crc_MainFunction+0x92>
		default:
			break;
 800e460:	bf00      	nop
	}
}
 800e462:	bf00      	nop
 800e464:	3708      	adds	r7, #8
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}
 800e46a:	bf00      	nop
 800e46c:	20000204 	.word	0x20000204
 800e470:	2000a6ec 	.word	0x2000a6ec

0800e474 <EcuM_CheckForWakeupEvent>:
/***********************************************************************************
* Function: EcuM_CheckForWakeupEvent									   		   *
* Description: Checks for the wake up event and sends it forward for processing.   *
************************************************************************************/
VOID EcuM_CheckForWakeupEvent()
{
 800e474:	b580      	push	{r7, lr}
 800e476:	af00      	add	r7, sp, #0
	/* Check if power-on reset wake-up event occurred. */
	if((RCC->CSR & RCC_CSR_PORRSTF) != 0)
 800e478:	4b2a      	ldr	r3, [pc, #168]	; (800e524 <EcuM_CheckForWakeupEvent+0xb0>)
 800e47a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e47c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e480:	2b00      	cmp	r3, #0
 800e482:	d009      	beq.n	800e498 <EcuM_CheckForWakeupEvent+0x24>
	{
		/* Set the wake-up event. */
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_POR);
 800e484:	2000      	movs	r0, #0
 800e486:	f000 f84f 	bl	800e528 <EcuM_SetWakeupSource>
		/* Reset the flag. */
		RCC->CSR |= RCC_CSR_PORRSTF;
 800e48a:	4b26      	ldr	r3, [pc, #152]	; (800e524 <EcuM_CheckForWakeupEvent+0xb0>)
 800e48c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e48e:	4a25      	ldr	r2, [pc, #148]	; (800e524 <EcuM_CheckForWakeupEvent+0xb0>)
 800e490:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e494:	6753      	str	r3, [r2, #116]	; 0x74
 800e496:	e03c      	b.n	800e512 <EcuM_CheckForWakeupEvent+0x9e>
	}/* Check if brown-out reset wake-up event occurred.*/
	else if((RCC->CSR & RCC_CSR_BORRSTF) != 0)
 800e498:	4b22      	ldr	r3, [pc, #136]	; (800e524 <EcuM_CheckForWakeupEvent+0xb0>)
 800e49a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e49c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d009      	beq.n	800e4b8 <EcuM_CheckForWakeupEvent+0x44>
	{
		/* Set the wake-up event. */
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_BOR);
 800e4a4:	2001      	movs	r0, #1
 800e4a6:	f000 f83f 	bl	800e528 <EcuM_SetWakeupSource>
		/* Reset the flag. */
		RCC->CSR |= RCC_CSR_BORRSTF;
 800e4aa:	4b1e      	ldr	r3, [pc, #120]	; (800e524 <EcuM_CheckForWakeupEvent+0xb0>)
 800e4ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4ae:	4a1d      	ldr	r2, [pc, #116]	; (800e524 <EcuM_CheckForWakeupEvent+0xb0>)
 800e4b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e4b4:	6753      	str	r3, [r2, #116]	; 0x74
 800e4b6:	e02c      	b.n	800e512 <EcuM_CheckForWakeupEvent+0x9e>
	}/* Check if a software reset wake-up event occurred. */
	else if((RCC->CSR & RCC_CSR_SFTRSTF) != 0)
 800e4b8:	4b1a      	ldr	r3, [pc, #104]	; (800e524 <EcuM_CheckForWakeupEvent+0xb0>)
 800e4ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d009      	beq.n	800e4d8 <EcuM_CheckForWakeupEvent+0x64>
	{
		/* Set the wake-up event. */
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_SOFTWARE_RESET);
 800e4c4:	2002      	movs	r0, #2
 800e4c6:	f000 f82f 	bl	800e528 <EcuM_SetWakeupSource>
		/* Reset the flag. */
		RCC->CSR |= RCC_CSR_SFTRSTF;
 800e4ca:	4b16      	ldr	r3, [pc, #88]	; (800e524 <EcuM_CheckForWakeupEvent+0xb0>)
 800e4cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4ce:	4a15      	ldr	r2, [pc, #84]	; (800e524 <EcuM_CheckForWakeupEvent+0xb0>)
 800e4d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e4d4:	6753      	str	r3, [r2, #116]	; 0x74
 800e4d6:	e01c      	b.n	800e512 <EcuM_CheckForWakeupEvent+0x9e>
	}/* Check if a windowed watchdog reset wake-up event occurred. */
	else if((RCC->CSR & RCC_CSR_IWDGRSTF) != 0)
 800e4d8:	4b12      	ldr	r3, [pc, #72]	; (800e524 <EcuM_CheckForWakeupEvent+0xb0>)
 800e4da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d009      	beq.n	800e4f8 <EcuM_CheckForWakeupEvent+0x84>
	{
		/* Set the wake-up event. */
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET);
 800e4e4:	2003      	movs	r0, #3
 800e4e6:	f000 f81f 	bl	800e528 <EcuM_SetWakeupSource>
		/* Reset the flag. */
		RCC->CSR |= RCC_CSR_IWDGRSTF;
 800e4ea:	4b0e      	ldr	r3, [pc, #56]	; (800e524 <EcuM_CheckForWakeupEvent+0xb0>)
 800e4ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4ee:	4a0d      	ldr	r2, [pc, #52]	; (800e524 <EcuM_CheckForWakeupEvent+0xb0>)
 800e4f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e4f4:	6753      	str	r3, [r2, #116]	; 0x74
 800e4f6:	e00c      	b.n	800e512 <EcuM_CheckForWakeupEvent+0x9e>
	}/* Check if a low power reset wake-up event occurred. */
	else if((RCC->CSR & RCC_CSR_LPWRRSTF) != 0)
 800e4f8:	4b0a      	ldr	r3, [pc, #40]	; (800e524 <EcuM_CheckForWakeupEvent+0xb0>)
 800e4fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	da08      	bge.n	800e512 <EcuM_CheckForWakeupEvent+0x9e>
	{
		/* Set the wake-up event. */
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_LOWPOWER_RESET);
 800e500:	2004      	movs	r0, #4
 800e502:	f000 f811 	bl	800e528 <EcuM_SetWakeupSource>
		/* Reset the flag. */
		RCC->CSR |= RCC_CSR_LPWRRSTF;
 800e506:	4b07      	ldr	r3, [pc, #28]	; (800e524 <EcuM_CheckForWakeupEvent+0xb0>)
 800e508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e50a:	4a06      	ldr	r2, [pc, #24]	; (800e524 <EcuM_CheckForWakeupEvent+0xb0>)
 800e50c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e510:	6753      	str	r3, [r2, #116]	; 0x74
	}/* Check if a button reset wake-up event occurred. */
	else
	{
		/* do nothing */
	}
	RCC->CSR |= RCC_CSR_RMVF;
 800e512:	4b04      	ldr	r3, [pc, #16]	; (800e524 <EcuM_CheckForWakeupEvent+0xb0>)
 800e514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e516:	4a03      	ldr	r2, [pc, #12]	; (800e524 <EcuM_CheckForWakeupEvent+0xb0>)
 800e518:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e51c:	6753      	str	r3, [r2, #116]	; 0x74
}
 800e51e:	bf00      	nop
 800e520:	bd80      	pop	{r7, pc}
 800e522:	bf00      	nop
 800e524:	40023800 	.word	0x40023800

0800e528 <EcuM_SetWakeupSource>:
/***********************************************************************************
* Function: EcuM_SetWakeupSource									   		   	   *
* Description: Sets the wake up source received.			 		   			   *
************************************************************************************/
VOID EcuM_SetWakeupSource(uint32 wakeupSource)
{
 800e528:	b480      	push	{r7}
 800e52a:	b083      	sub	sp, #12
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
	/* If wake-up source is valid. */
	if(wakeupSource != NULL_PTR)
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d003      	beq.n	800e53e <EcuM_SetWakeupSource+0x16>
	{
		/* Store the wake-up event. */
		EcuM_GlobalState = wakeupSource;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	b2da      	uxtb	r2, r3
 800e53a:	4b04      	ldr	r3, [pc, #16]	; (800e54c <EcuM_SetWakeupSource+0x24>)
 800e53c:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 800e53e:	bf00      	nop
 800e540:	370c      	adds	r7, #12
 800e542:	46bd      	mov	sp, r7
 800e544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e548:	4770      	bx	lr
 800e54a:	bf00      	nop
 800e54c:	2000a751 	.word	0x2000a751

0800e550 <EcuM_ProcessWakeupEvent>:
/***********************************************************************************
* Function: EcuM_ProcessWakeupEvent									   		       *
* Description: Sends forward the wake up event.							 		   *
************************************************************************************/
VOID EcuM_ProcessWakeupEvent()
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b082      	sub	sp, #8
 800e554:	af00      	add	r7, sp, #0
	/* Store the wake-up event into local variable. */
	uint8 localWakeupEvent = EcuM_GlobalState;
 800e556:	4b1d      	ldr	r3, [pc, #116]	; (800e5cc <EcuM_ProcessWakeupEvent+0x7c>)
 800e558:	781b      	ldrb	r3, [r3, #0]
 800e55a:	71fb      	strb	r3, [r7, #7]
	/* Set the system fault for the respective wake-up event. */
	switch(localWakeupEvent)
 800e55c:	79fb      	ldrb	r3, [r7, #7]
 800e55e:	2b04      	cmp	r3, #4
 800e560:	d82f      	bhi.n	800e5c2 <EcuM_ProcessWakeupEvent+0x72>
 800e562:	a201      	add	r2, pc, #4	; (adr r2, 800e568 <EcuM_ProcessWakeupEvent+0x18>)
 800e564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e568:	0800e57d 	.word	0x0800e57d
 800e56c:	0800e58b 	.word	0x0800e58b
 800e570:	0800e599 	.word	0x0800e599
 800e574:	0800e5a7 	.word	0x0800e5a7
 800e578:	0800e5b5 	.word	0x0800e5b5
	{
		case ECUM_WAKEUPSOURCE_POR:
			EcuM_GlobalState = 255;
 800e57c:	4b13      	ldr	r3, [pc, #76]	; (800e5cc <EcuM_ProcessWakeupEvent+0x7c>)
 800e57e:	22ff      	movs	r2, #255	; 0xff
 800e580:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_POR);
 800e582:	2000      	movs	r0, #0
 800e584:	f000 f918 	bl	800e7b8 <SystemManager_SetFault>
			break;
 800e588:	e01c      	b.n	800e5c4 <EcuM_ProcessWakeupEvent+0x74>
		case ECUM_WAKEUPSOURCE_BOR:
			EcuM_GlobalState = 255;
 800e58a:	4b10      	ldr	r3, [pc, #64]	; (800e5cc <EcuM_ProcessWakeupEvent+0x7c>)
 800e58c:	22ff      	movs	r2, #255	; 0xff
 800e58e:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_BOR);
 800e590:	2001      	movs	r0, #1
 800e592:	f000 f911 	bl	800e7b8 <SystemManager_SetFault>
			break;
 800e596:	e015      	b.n	800e5c4 <EcuM_ProcessWakeupEvent+0x74>
		case ECUM_WAKEUPSOURCE_SOFTWARE_RESET:
			EcuM_GlobalState = 255;
 800e598:	4b0c      	ldr	r3, [pc, #48]	; (800e5cc <EcuM_ProcessWakeupEvent+0x7c>)
 800e59a:	22ff      	movs	r2, #255	; 0xff
 800e59c:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_SOFTWARE_RESET);
 800e59e:	2002      	movs	r0, #2
 800e5a0:	f000 f90a 	bl	800e7b8 <SystemManager_SetFault>
			break;
 800e5a4:	e00e      	b.n	800e5c4 <EcuM_ProcessWakeupEvent+0x74>
		case ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET:
			EcuM_GlobalState = 255;
 800e5a6:	4b09      	ldr	r3, [pc, #36]	; (800e5cc <EcuM_ProcessWakeupEvent+0x7c>)
 800e5a8:	22ff      	movs	r2, #255	; 0xff
 800e5aa:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET);
 800e5ac:	2003      	movs	r0, #3
 800e5ae:	f000 f903 	bl	800e7b8 <SystemManager_SetFault>
			break;
 800e5b2:	e007      	b.n	800e5c4 <EcuM_ProcessWakeupEvent+0x74>
		case ECUM_WAKEUPSOURCE_LOWPOWER_RESET:
			EcuM_GlobalState = 255;
 800e5b4:	4b05      	ldr	r3, [pc, #20]	; (800e5cc <EcuM_ProcessWakeupEvent+0x7c>)
 800e5b6:	22ff      	movs	r2, #255	; 0xff
 800e5b8:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_LOWPOWER_RESET);
 800e5ba:	2004      	movs	r0, #4
 800e5bc:	f000 f8fc 	bl	800e7b8 <SystemManager_SetFault>
			break;
 800e5c0:	e000      	b.n	800e5c4 <EcuM_ProcessWakeupEvent+0x74>
		default:
			break;
 800e5c2:	bf00      	nop
	}
}
 800e5c4:	bf00      	nop
 800e5c6:	3708      	adds	r7, #8
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}
 800e5cc:	2000a751 	.word	0x2000a751

0800e5d0 <EcuM_DriverInit>:
/***********************************************************************************
* Function: EcuM_DriverInit									   		               *
* Description: Initialize the drivers.			 		   						   *
************************************************************************************/
StdReturnType EcuM_DriverInit()
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	af00      	add	r7, sp, #0
	Port_Init();
 800e5d4:	f7fb f8a4 	bl	8009720 <Port_Init>
	MX_DMA_Init();
 800e5d8:	f7f4 fa10 	bl	80029fc <MX_DMA_Init>
	Tim_Init(TIMER_TWO);
 800e5dc:	2002      	movs	r0, #2
 800e5de:	f7fb f9d5 	bl	800998c <Tim_Init>
	Tim_Init(TIMER_THREE);
 800e5e2:	2003      	movs	r0, #3
 800e5e4:	f7fb f9d2 	bl	800998c <Tim_Init>
	Tim_Init(TIMER_FOUR);
 800e5e8:	2004      	movs	r0, #4
 800e5ea:	f7fb f9cf 	bl	800998c <Tim_Init>
	Tim_Init(TIMER_FIVE);
 800e5ee:	2005      	movs	r0, #5
 800e5f0:	f7fb f9cc 	bl	800998c <Tim_Init>
	Adc_Init();
 800e5f4:	f7fa fff4 	bl	80095e0 <Adc_Init>
	Crc_Init();
 800e5f8:	f7ff fec8 	bl	800e38c <Crc_Init>
	Uart_Init();
 800e5fc:	f7f3 ff94 	bl	8002528 <Uart_Init>
	Watchdog_Init();
 800e600:	f000 f9d6 	bl	800e9b0 <Watchdog_Init>
	MX_NVIC_Init();
 800e604:	f000 f906 	bl	800e814 <MX_NVIC_Init>
	EcuM_BswState = ECUM_CHECKFORWAKEUP_STATE;
 800e608:	4b02      	ldr	r3, [pc, #8]	; (800e614 <EcuM_DriverInit+0x44>)
 800e60a:	2201      	movs	r2, #1
 800e60c:	701a      	strb	r2, [r3, #0]
	return E_OK;
 800e60e:	2300      	movs	r3, #0
}
 800e610:	4618      	mov	r0, r3
 800e612:	bd80      	pop	{r7, pc}
 800e614:	2000a750 	.word	0x2000a750

0800e618 <EcuM_DriverDeInit>:
/***********************************************************************************
* Function: EcuM_DriverDeInit									   		           *
* Description: De-initialize the drivers.			 		                       *
************************************************************************************/
StdReturnType EcuM_DriverDeInit()
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	af00      	add	r7, sp, #0
	Adc_DeInit();
 800e61c:	f7fa ffd6 	bl	80095cc <Adc_DeInit>
	Tim_DeInit(TIMER_TWO);
 800e620:	2002      	movs	r0, #2
 800e622:	f7fb fbd1 	bl	8009dc8 <Tim_DeInit>
	Tim_DeInit(TIMER_THREE);
 800e626:	2003      	movs	r0, #3
 800e628:	f7fb fbce 	bl	8009dc8 <Tim_DeInit>
	Tim_DeInit(TIMER_FOUR);
 800e62c:	2004      	movs	r0, #4
 800e62e:	f7fb fbcb 	bl	8009dc8 <Tim_DeInit>
	Tim_DeInit(TIMER_FIVE);
 800e632:	2005      	movs	r0, #5
 800e634:	f7fb fbc8 	bl	8009dc8 <Tim_DeInit>
	Uart_DeInit();
 800e638:	f7f3 ffa2 	bl	8002580 <Uart_DeInit>
	Crc_DeInit();
 800e63c:	f7ff febe 	bl	800e3bc <Crc_DeInit>
	SystemManager_DeInit();
 800e640:	f000 f8b4 	bl	800e7ac <SystemManager_DeInit>
	return E_OK;
 800e644:	2300      	movs	r3, #0
}
 800e646:	4618      	mov	r0, r3
 800e648:	bd80      	pop	{r7, pc}
	...

0800e64c <EcuM_MainFunction>:
/***********************************************************************************
* Function: EcuM_MainFunction									   		           *
* Description: Electronic control unit manager main function.			 		   *
************************************************************************************/
VOID EcuM_MainFunction()
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	af00      	add	r7, sp, #0
	switch(EcuM_BswState)
 800e650:	4b12      	ldr	r3, [pc, #72]	; (800e69c <EcuM_MainFunction+0x50>)
 800e652:	781b      	ldrb	r3, [r3, #0]
 800e654:	2b03      	cmp	r3, #3
 800e656:	d81d      	bhi.n	800e694 <EcuM_MainFunction+0x48>
 800e658:	a201      	add	r2, pc, #4	; (adr r2, 800e660 <EcuM_MainFunction+0x14>)
 800e65a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e65e:	bf00      	nop
 800e660:	0800e671 	.word	0x0800e671
 800e664:	0800e67d 	.word	0x0800e67d
 800e668:	0800e689 	.word	0x0800e689
 800e66c:	0800e677 	.word	0x0800e677
	{
		case ECUM_INIT_STATE:
			EcuM_DriverInit();
 800e670:	f7ff ffae 	bl	800e5d0 <EcuM_DriverInit>
			break;
 800e674:	e00f      	b.n	800e696 <EcuM_MainFunction+0x4a>
		case ECUM_DEINIT_STATE:
			EcuM_DriverDeInit();
 800e676:	f7ff ffcf 	bl	800e618 <EcuM_DriverDeInit>
			break;
 800e67a:	e00c      	b.n	800e696 <EcuM_MainFunction+0x4a>
		case ECUM_CHECKFORWAKEUP_STATE:
			EcuM_CheckForWakeupEvent();
 800e67c:	f7ff fefa 	bl	800e474 <EcuM_CheckForWakeupEvent>
			EcuM_BswState = ECUM_PROCESSWAKEUP_STATE;
 800e680:	4b06      	ldr	r3, [pc, #24]	; (800e69c <EcuM_MainFunction+0x50>)
 800e682:	2202      	movs	r2, #2
 800e684:	701a      	strb	r2, [r3, #0]
			break;
 800e686:	e006      	b.n	800e696 <EcuM_MainFunction+0x4a>
		case ECUM_PROCESSWAKEUP_STATE:
			EcuM_ProcessWakeupEvent();
 800e688:	f7ff ff62 	bl	800e550 <EcuM_ProcessWakeupEvent>
			EcuM_BswState = ECUM_CHECKFORWAKEUP_STATE;
 800e68c:	4b03      	ldr	r3, [pc, #12]	; (800e69c <EcuM_MainFunction+0x50>)
 800e68e:	2201      	movs	r2, #1
 800e690:	701a      	strb	r2, [r3, #0]
			break;
 800e692:	e000      	b.n	800e696 <EcuM_MainFunction+0x4a>
		default:
			break;
 800e694:	bf00      	nop
	}
}
 800e696:	bf00      	nop
 800e698:	bd80      	pop	{r7, pc}
 800e69a:	bf00      	nop
 800e69c:	2000a750 	.word	0x2000a750

0800e6a0 <SystemManager_ProcessFault>:
/***********************************************************************************
* Function: SystemManager_ProcessFault										       *
* Description: Initialize the system.  		   									   *
************************************************************************************/
VOID SystemManager_ProcessFault()
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b082      	sub	sp, #8
 800e6a4:	af00      	add	r7, sp, #0
	for(uint8 idx = STD_LOW ; idx < 26; idx++)
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	71fb      	strb	r3, [r7, #7]
 800e6aa:	e06c      	b.n	800e786 <SystemManager_ProcessFault+0xe6>
	{
		if(SystemManager_Fault[idx] != STD_LOW)
 800e6ac:	79fb      	ldrb	r3, [r7, #7]
 800e6ae:	4a3a      	ldr	r2, [pc, #232]	; (800e798 <SystemManager_ProcessFault+0xf8>)
 800e6b0:	5cd3      	ldrb	r3, [r2, r3]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d064      	beq.n	800e780 <SystemManager_ProcessFault+0xe0>
		{
			if(idx == POWER_ON_RESET)
 800e6b6:	79fb      	ldrb	r3, [r7, #7]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d061      	beq.n	800e780 <SystemManager_ProcessFault+0xe0>
			{
				/* do nothing */
			}
			else if(idx == BROWN_OUT_RESET ||
 800e6bc:	79fb      	ldrb	r3, [r7, #7]
 800e6be:	2b01      	cmp	r3, #1
 800e6c0:	d014      	beq.n	800e6ec <SystemManager_ProcessFault+0x4c>
 800e6c2:	79fb      	ldrb	r3, [r7, #7]
 800e6c4:	2b04      	cmp	r3, #4
 800e6c6:	d011      	beq.n	800e6ec <SystemManager_ProcessFault+0x4c>
					idx == LOW_POWER_RESET ||
 800e6c8:	79fb      	ldrb	r3, [r7, #7]
 800e6ca:	2b06      	cmp	r3, #6
 800e6cc:	d00e      	beq.n	800e6ec <SystemManager_ProcessFault+0x4c>
					idx == HARDWARE_RESET ||
 800e6ce:	79fb      	ldrb	r3, [r7, #7]
 800e6d0:	2b07      	cmp	r3, #7
 800e6d2:	d00b      	beq.n	800e6ec <SystemManager_ProcessFault+0x4c>
					idx == FLASH_FAULT_RESET ||
 800e6d4:	79fb      	ldrb	r3, [r7, #7]
 800e6d6:	2b08      	cmp	r3, #8
 800e6d8:	d008      	beq.n	800e6ec <SystemManager_ProcessFault+0x4c>
					idx == NMI_RESET ||
 800e6da:	79fb      	ldrb	r3, [r7, #7]
 800e6dc:	2b09      	cmp	r3, #9
 800e6de:	d005      	beq.n	800e6ec <SystemManager_ProcessFault+0x4c>
					idx == MEMORY_FAULT_RESET ||
 800e6e0:	79fb      	ldrb	r3, [r7, #7]
 800e6e2:	2b0a      	cmp	r3, #10
 800e6e4:	d002      	beq.n	800e6ec <SystemManager_ProcessFault+0x4c>
					idx == USAGE_FAULT_RESET ||
 800e6e6:	79fb      	ldrb	r3, [r7, #7]
 800e6e8:	2b0b      	cmp	r3, #11
 800e6ea:	d108      	bne.n	800e6fe <SystemManager_ProcessFault+0x5e>
					idx == BUS_FAULT_RESET)
			{
				if(SystemManager_Fault[idx] >= 2)
 800e6ec:	79fb      	ldrb	r3, [r7, #7]
 800e6ee:	4a2a      	ldr	r2, [pc, #168]	; (800e798 <SystemManager_ProcessFault+0xf8>)
 800e6f0:	5cd3      	ldrb	r3, [r2, r3]
 800e6f2:	2b01      	cmp	r3, #1
 800e6f4:	d944      	bls.n	800e780 <SystemManager_ProcessFault+0xe0>
				{
					Dem_ReceiveFault(HARDWARE_RESET_DTC_CODE);
 800e6f6:	2056      	movs	r0, #86	; 0x56
 800e6f8:	f7f5 fa72 	bl	8003be0 <Dem_ReceiveFault>
				if(SystemManager_Fault[idx] >= 2)
 800e6fc:	e040      	b.n	800e780 <SystemManager_ProcessFault+0xe0>
				else
				{
					/* do nothing */
				}
			}
			else if(idx == SOFTWARE_RESET ||
 800e6fe:	79fb      	ldrb	r3, [r7, #7]
 800e700:	2b02      	cmp	r3, #2
 800e702:	d008      	beq.n	800e716 <SystemManager_ProcessFault+0x76>
 800e704:	79fb      	ldrb	r3, [r7, #7]
 800e706:	2b03      	cmp	r3, #3
 800e708:	d005      	beq.n	800e716 <SystemManager_ProcessFault+0x76>
					idx == WATCHDOG_RESET ||
 800e70a:	79fb      	ldrb	r3, [r7, #7]
 800e70c:	2b0c      	cmp	r3, #12
 800e70e:	d002      	beq.n	800e716 <SystemManager_ProcessFault+0x76>
					idx == STACK_OVERFLOW_RESET ||
 800e710:	79fb      	ldrb	r3, [r7, #7]
 800e712:	2b0d      	cmp	r3, #13
 800e714:	d108      	bne.n	800e728 <SystemManager_ProcessFault+0x88>
					idx == MALLOC_FAILED_RESET)
			{
				if(SystemManager_Fault[idx] >= 2)
 800e716:	79fb      	ldrb	r3, [r7, #7]
 800e718:	4a1f      	ldr	r2, [pc, #124]	; (800e798 <SystemManager_ProcessFault+0xf8>)
 800e71a:	5cd3      	ldrb	r3, [r2, r3]
 800e71c:	2b01      	cmp	r3, #1
 800e71e:	d92f      	bls.n	800e780 <SystemManager_ProcessFault+0xe0>
				{
					Dem_ReceiveFault(SOFTWARE_RESET_DTC_CODE);
 800e720:	2035      	movs	r0, #53	; 0x35
 800e722:	f7f5 fa5d 	bl	8003be0 <Dem_ReceiveFault>
				if(SystemManager_Fault[idx] >= 2)
 800e726:	e02b      	b.n	800e780 <SystemManager_ProcessFault+0xe0>
				else
				{
					/* do nothing */
				}
			}
			else if(idx == ADC_ERROR_INTERNAL ||
 800e728:	79fb      	ldrb	r3, [r7, #7]
 800e72a:	2b0e      	cmp	r3, #14
 800e72c:	d020      	beq.n	800e770 <SystemManager_ProcessFault+0xd0>
 800e72e:	79fb      	ldrb	r3, [r7, #7]
 800e730:	2b0f      	cmp	r3, #15
 800e732:	d01d      	beq.n	800e770 <SystemManager_ProcessFault+0xd0>
					idx == ADC_ERROR_OVR ||
 800e734:	79fb      	ldrb	r3, [r7, #7]
 800e736:	2b10      	cmp	r3, #16
 800e738:	d01a      	beq.n	800e770 <SystemManager_ProcessFault+0xd0>
					idx == ADC_ERROR_DMA ||
 800e73a:	79fb      	ldrb	r3, [r7, #7]
 800e73c:	2b11      	cmp	r3, #17
 800e73e:	d017      	beq.n	800e770 <SystemManager_ProcessFault+0xd0>
					idx == UART_ERROR_PE ||
 800e740:	79fb      	ldrb	r3, [r7, #7]
 800e742:	2b12      	cmp	r3, #18
 800e744:	d014      	beq.n	800e770 <SystemManager_ProcessFault+0xd0>
					idx == UART_ERROR_NE ||
 800e746:	79fb      	ldrb	r3, [r7, #7]
 800e748:	2b13      	cmp	r3, #19
 800e74a:	d011      	beq.n	800e770 <SystemManager_ProcessFault+0xd0>
					idx == UART_ERROR_FE ||
 800e74c:	79fb      	ldrb	r3, [r7, #7]
 800e74e:	2b14      	cmp	r3, #20
 800e750:	d00e      	beq.n	800e770 <SystemManager_ProcessFault+0xd0>
					idx == UART_ERROR_ORE ||
 800e752:	79fb      	ldrb	r3, [r7, #7]
 800e754:	2b15      	cmp	r3, #21
 800e756:	d00b      	beq.n	800e770 <SystemManager_ProcessFault+0xd0>
					idx == UART_ERROR_DMA ||
 800e758:	79fb      	ldrb	r3, [r7, #7]
 800e75a:	2b16      	cmp	r3, #22
 800e75c:	d008      	beq.n	800e770 <SystemManager_ProcessFault+0xd0>
					idx == TIMER2_ERROR ||
 800e75e:	79fb      	ldrb	r3, [r7, #7]
 800e760:	2b17      	cmp	r3, #23
 800e762:	d005      	beq.n	800e770 <SystemManager_ProcessFault+0xd0>
					idx == TIMER3_ERROR ||
 800e764:	79fb      	ldrb	r3, [r7, #7]
 800e766:	2b18      	cmp	r3, #24
 800e768:	d002      	beq.n	800e770 <SystemManager_ProcessFault+0xd0>
					idx == TIMER4_ERROR ||
 800e76a:	79fb      	ldrb	r3, [r7, #7]
 800e76c:	2b19      	cmp	r3, #25
 800e76e:	d107      	bne.n	800e780 <SystemManager_ProcessFault+0xe0>
					idx == TIMER5_ERROR)
			{
				if(SystemManager_Fault[idx] >= 2)
 800e770:	79fb      	ldrb	r3, [r7, #7]
 800e772:	4a09      	ldr	r2, [pc, #36]	; (800e798 <SystemManager_ProcessFault+0xf8>)
 800e774:	5cd3      	ldrb	r3, [r2, r3]
 800e776:	2b01      	cmp	r3, #1
 800e778:	d902      	bls.n	800e780 <SystemManager_ProcessFault+0xe0>
				{
					Dem_ReceiveFault(PERIPHERAL_ERROR_DTC_CODE);
 800e77a:	2099      	movs	r0, #153	; 0x99
 800e77c:	f7f5 fa30 	bl	8003be0 <Dem_ReceiveFault>
	for(uint8 idx = STD_LOW ; idx < 26; idx++)
 800e780:	79fb      	ldrb	r3, [r7, #7]
 800e782:	3301      	adds	r3, #1
 800e784:	71fb      	strb	r3, [r7, #7]
 800e786:	79fb      	ldrb	r3, [r7, #7]
 800e788:	2b19      	cmp	r3, #25
 800e78a:	d98f      	bls.n	800e6ac <SystemManager_ProcessFault+0xc>
		else
		{
			/* do nothing */
		}
	}
}
 800e78c:	bf00      	nop
 800e78e:	bf00      	nop
 800e790:	3708      	adds	r7, #8
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}
 800e796:	bf00      	nop
 800e798:	2000a754 	.word	0x2000a754

0800e79c <SystemManager_Init>:
/***********************************************************************************
* Function: SystemManager_Init													   *
* Description: Initialize the system.  		   									   *
************************************************************************************/
VOID SystemManager_Init()
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	af00      	add	r7, sp, #0
	/* Perform system initialization sequence. */
	HAL_Init();
 800e7a0:	f7f5 faa4 	bl	8003cec <HAL_Init>
	SystemClock_Config();
 800e7a4:	f000 f892 	bl	800e8cc <SystemClock_Config>
}
 800e7a8:	bf00      	nop
 800e7aa:	bd80      	pop	{r7, pc}

0800e7ac <SystemManager_DeInit>:
/***********************************************************************************
* Function: SystemManager_DeInit												   *
* Description: De-initialize the system.  		   								   *
************************************************************************************/
VOID SystemManager_DeInit()
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	af00      	add	r7, sp, #0
	HAL_DeInit();
 800e7b0:	f7f5 fabe 	bl	8003d30 <HAL_DeInit>
}
 800e7b4:	bf00      	nop
 800e7b6:	bd80      	pop	{r7, pc}

0800e7b8 <SystemManager_SetFault>:
/***********************************************************************************
* Function: SystemManager_SetFault										   		   *
* Description: Set the fault in the system.		 		   						   *
************************************************************************************/
StdReturnType SystemManager_SetFault(uint8 faultType)
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	b085      	sub	sp, #20
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	4603      	mov	r3, r0
 800e7c0:	71fb      	strb	r3, [r7, #7]
	/* Store the fault into the data type. */
	for(uint8 index = 0; index < 14; index++)
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	73fb      	strb	r3, [r7, #15]
 800e7c6:	e00d      	b.n	800e7e4 <SystemManager_SetFault+0x2c>
	{
		if(faultType == index)
 800e7c8:	79fa      	ldrb	r2, [r7, #7]
 800e7ca:	7bfb      	ldrb	r3, [r7, #15]
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d106      	bne.n	800e7de <SystemManager_SetFault+0x26>
		{
			SystemManager_Fault[index]++;
 800e7d0:	7bfb      	ldrb	r3, [r7, #15]
 800e7d2:	4a09      	ldr	r2, [pc, #36]	; (800e7f8 <SystemManager_SetFault+0x40>)
 800e7d4:	5cd2      	ldrb	r2, [r2, r3]
 800e7d6:	3201      	adds	r2, #1
 800e7d8:	b2d1      	uxtb	r1, r2
 800e7da:	4a07      	ldr	r2, [pc, #28]	; (800e7f8 <SystemManager_SetFault+0x40>)
 800e7dc:	54d1      	strb	r1, [r2, r3]
	for(uint8 index = 0; index < 14; index++)
 800e7de:	7bfb      	ldrb	r3, [r7, #15]
 800e7e0:	3301      	adds	r3, #1
 800e7e2:	73fb      	strb	r3, [r7, #15]
 800e7e4:	7bfb      	ldrb	r3, [r7, #15]
 800e7e6:	2b0d      	cmp	r3, #13
 800e7e8:	d9ee      	bls.n	800e7c8 <SystemManager_SetFault+0x10>
		else
		{
			/* do nothing */
		}
	}
	return E_OK;
 800e7ea:	2300      	movs	r3, #0
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3714      	adds	r7, #20
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f6:	4770      	bx	lr
 800e7f8:	2000a754 	.word	0x2000a754

0800e7fc <SystemManager_MainFunction>:
/***********************************************************************************
* Function: SystemManager_MainFunction									   		   *
* Description: System main function.									 		   *
************************************************************************************/
VOID SystemManager_MainFunction()
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	af00      	add	r7, sp, #0
	SystemManager_ProcessFault();
 800e800:	f7ff ff4e 	bl	800e6a0 <SystemManager_ProcessFault>
}
 800e804:	bf00      	nop
 800e806:	bd80      	pop	{r7, pc}

0800e808 <SystemManager_PerformReset>:
/***********************************************************************************
* Function: SystemManager_PerformReset									   		   *
* Description: Perform system reset.		 		   							   *
************************************************************************************/
VOID SystemManager_PerformReset()
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	af00      	add	r7, sp, #0
	HAL_NVIC_SystemReset();
 800e80c:	f7f6 f9ff 	bl	8004c0e <HAL_NVIC_SystemReset>
}
 800e810:	bf00      	nop
 800e812:	bd80      	pop	{r7, pc}

0800e814 <MX_NVIC_Init>:
* Function: MX_NVIC_Init													   	   *
* Description: Initialize the nested vector interrupt controller with configured   *
* 			   values.		 		   											   *
************************************************************************************/
VOID MX_NVIC_Init(VOID)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	af00      	add	r7, sp, #0
	/* TIM5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM5_IRQn, 15, 0);
 800e818:	2200      	movs	r2, #0
 800e81a:	210f      	movs	r1, #15
 800e81c:	2032      	movs	r0, #50	; 0x32
 800e81e:	f7f6 f9be 	bl	8004b9e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800e822:	2032      	movs	r0, #50	; 0x32
 800e824:	f7f6 f9d7 	bl	8004bd6 <HAL_NVIC_EnableIRQ>
	/* ADC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(ADC_IRQn, 15, 0);
 800e828:	2200      	movs	r2, #0
 800e82a:	210f      	movs	r1, #15
 800e82c:	2012      	movs	r0, #18
 800e82e:	f7f6 f9b6 	bl	8004b9e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 800e832:	2012      	movs	r0, #18
 800e834:	f7f6 f9cf 	bl	8004bd6 <HAL_NVIC_EnableIRQ>
	/* TIM2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 800e838:	2200      	movs	r2, #0
 800e83a:	210f      	movs	r1, #15
 800e83c:	201c      	movs	r0, #28
 800e83e:	f7f6 f9ae 	bl	8004b9e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800e842:	201c      	movs	r0, #28
 800e844:	f7f6 f9c7 	bl	8004bd6 <HAL_NVIC_EnableIRQ>
	/* TIM3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM3_IRQn, 15, 0);
 800e848:	2200      	movs	r2, #0
 800e84a:	210f      	movs	r1, #15
 800e84c:	201d      	movs	r0, #29
 800e84e:	f7f6 f9a6 	bl	8004b9e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800e852:	201d      	movs	r0, #29
 800e854:	f7f6 f9bf 	bl	8004bd6 <HAL_NVIC_EnableIRQ>
	/* TIM4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM4_IRQn, 15, 0);
 800e858:	2200      	movs	r2, #0
 800e85a:	210f      	movs	r1, #15
 800e85c:	201e      	movs	r0, #30
 800e85e:	f7f6 f99e 	bl	8004b9e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800e862:	201e      	movs	r0, #30
 800e864:	f7f6 f9b7 	bl	8004bd6 <HAL_NVIC_EnableIRQ>
	/* USART1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 800e868:	2200      	movs	r2, #0
 800e86a:	210f      	movs	r1, #15
 800e86c:	2025      	movs	r0, #37	; 0x25
 800e86e:	f7f6 f996 	bl	8004b9e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 800e872:	2025      	movs	r0, #37	; 0x25
 800e874:	f7f6 f9af 	bl	8004bd6 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 15, 0);
 800e878:	2200      	movs	r2, #0
 800e87a:	210f      	movs	r1, #15
 800e87c:	2038      	movs	r0, #56	; 0x38
 800e87e:	f7f6 f98e 	bl	8004b9e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800e882:	2038      	movs	r0, #56	; 0x38
 800e884:	f7f6 f9a7 	bl	8004bd6 <HAL_NVIC_EnableIRQ>
	/* RCC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(RCC_IRQn, 15, 0);
 800e888:	2200      	movs	r2, #0
 800e88a:	210f      	movs	r1, #15
 800e88c:	2005      	movs	r0, #5
 800e88e:	f7f6 f986 	bl	8004b9e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RCC_IRQn);
 800e892:	2005      	movs	r0, #5
 800e894:	f7f6 f99f 	bl	8004bd6 <HAL_NVIC_EnableIRQ>
	/* FLASH_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(FLASH_IRQn, 15, 0);
 800e898:	2200      	movs	r2, #0
 800e89a:	210f      	movs	r1, #15
 800e89c:	2004      	movs	r0, #4
 800e89e:	f7f6 f97e 	bl	8004b9e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800e8a2:	2004      	movs	r0, #4
 800e8a4:	f7f6 f997 	bl	8004bd6 <HAL_NVIC_EnableIRQ>
	/* PVD_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(PVD_IRQn, 15, 0);
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	210f      	movs	r1, #15
 800e8ac:	2001      	movs	r0, #1
 800e8ae:	f7f6 f976 	bl	8004b9e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(PVD_IRQn);
 800e8b2:	2001      	movs	r0, #1
 800e8b4:	f7f6 f98f 	bl	8004bd6 <HAL_NVIC_EnableIRQ>
	/* FPU_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(FPU_IRQn, 15, 0);
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	210f      	movs	r1, #15
 800e8bc:	2051      	movs	r0, #81	; 0x51
 800e8be:	f7f6 f96e 	bl	8004b9e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FPU_IRQn);
 800e8c2:	2051      	movs	r0, #81	; 0x51
 800e8c4:	f7f6 f987 	bl	8004bd6 <HAL_NVIC_EnableIRQ>
}
 800e8c8:	bf00      	nop
 800e8ca:	bd80      	pop	{r7, pc}

0800e8cc <SystemClock_Config>:
/***********************************************************************************
* Function: SystemClock_Config													   *
* Description: Initialize the system clock.		 		   						   *
************************************************************************************/
VOID SystemClock_Config(VOID)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b094      	sub	sp, #80	; 0x50
 800e8d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e8d2:	f107 0320 	add.w	r3, r7, #32
 800e8d6:	2230      	movs	r2, #48	; 0x30
 800e8d8:	2100      	movs	r1, #0
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f000 f8c8 	bl	800ea70 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800e8e0:	f107 030c 	add.w	r3, r7, #12
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	601a      	str	r2, [r3, #0]
 800e8e8:	605a      	str	r2, [r3, #4]
 800e8ea:	609a      	str	r2, [r3, #8]
 800e8ec:	60da      	str	r2, [r3, #12]
 800e8ee:	611a      	str	r2, [r3, #16]
	__HAL_RCC_PWR_CLK_ENABLE();
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	60bb      	str	r3, [r7, #8]
 800e8f4:	4b28      	ldr	r3, [pc, #160]	; (800e998 <SystemClock_Config+0xcc>)
 800e8f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8f8:	4a27      	ldr	r2, [pc, #156]	; (800e998 <SystemClock_Config+0xcc>)
 800e8fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e8fe:	6413      	str	r3, [r2, #64]	; 0x40
 800e900:	4b25      	ldr	r3, [pc, #148]	; (800e998 <SystemClock_Config+0xcc>)
 800e902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e908:	60bb      	str	r3, [r7, #8]
 800e90a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800e90c:	2300      	movs	r3, #0
 800e90e:	607b      	str	r3, [r7, #4]
 800e910:	4b22      	ldr	r3, [pc, #136]	; (800e99c <SystemClock_Config+0xd0>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	4a21      	ldr	r2, [pc, #132]	; (800e99c <SystemClock_Config+0xd0>)
 800e916:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e91a:	6013      	str	r3, [r2, #0]
 800e91c:	4b1f      	ldr	r3, [pc, #124]	; (800e99c <SystemClock_Config+0xd0>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e924:	607b      	str	r3, [r7, #4]
 800e926:	687b      	ldr	r3, [r7, #4]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800e928:	2309      	movs	r3, #9
 800e92a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800e92c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e930:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800e932:	2301      	movs	r3, #1
 800e934:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e936:	2302      	movs	r3, #2
 800e938:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800e93a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e93e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800e940:	2304      	movs	r3, #4
 800e942:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 800e944:	2364      	movs	r3, #100	; 0x64
 800e946:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800e948:	2302      	movs	r3, #2
 800e94a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800e94c:	2304      	movs	r3, #4
 800e94e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e950:	f107 0320 	add.w	r3, r7, #32
 800e954:	4618      	mov	r0, r3
 800e956:	f7f7 fafb 	bl	8005f50 <HAL_RCC_OscConfig>
 800e95a:	4603      	mov	r3, r0
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d001      	beq.n	800e964 <SystemClock_Config+0x98>
	{
		Error_Handler();
 800e960:	f000 f81e 	bl	800e9a0 <Error_Handler>
	}
	else
	{
		/* do nothing */
	}
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 800e964:	230f      	movs	r3, #15
 800e966:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e968:	2302      	movs	r3, #2
 800e96a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800e96c:	2300      	movs	r3, #0
 800e96e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800e970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e974:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800e976:	2300      	movs	r3, #0
 800e978:	61fb      	str	r3, [r7, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800e97a:	f107 030c 	add.w	r3, r7, #12
 800e97e:	2103      	movs	r1, #3
 800e980:	4618      	mov	r0, r3
 800e982:	f7f7 fd5d 	bl	8006440 <HAL_RCC_ClockConfig>
 800e986:	4603      	mov	r3, r0
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d001      	beq.n	800e990 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 800e98c:	f000 f808 	bl	800e9a0 <Error_Handler>
	}
	else
	{
		/* do nothing */
	}
}
 800e990:	bf00      	nop
 800e992:	3750      	adds	r7, #80	; 0x50
 800e994:	46bd      	mov	sp, r7
 800e996:	bd80      	pop	{r7, pc}
 800e998:	40023800 	.word	0x40023800
 800e99c:	40007000 	.word	0x40007000

0800e9a0 <Error_Handler>:
/***********************************************************************************
* Function: Error_Handler													   	   *
* Description: Perform system reset in case of system fault.			 		   *
************************************************************************************/
VOID Error_Handler(VOID)
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800e9a4:	b672      	cpsid	i
}
 800e9a6:	bf00      	nop
	__disable_irq();
	SystemManager_PerformReset();
 800e9a8:	f7ff ff2e 	bl	800e808 <SystemManager_PerformReset>
	while (1)
 800e9ac:	e7fe      	b.n	800e9ac <Error_Handler+0xc>
	...

0800e9b0 <Watchdog_Init>:
/***********************************************************************************
* Function: Watchdog_Init									   		       		   *
* Description: Peripheral initialization.							 		   	   *
************************************************************************************/
StdReturnType Watchdog_Init()
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	af00      	add	r7, sp, #0
	hiwdg.Instance = IWDG;
 800e9b4:	4b09      	ldr	r3, [pc, #36]	; (800e9dc <Watchdog_Init+0x2c>)
 800e9b6:	4a0a      	ldr	r2, [pc, #40]	; (800e9e0 <Watchdog_Init+0x30>)
 800e9b8:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 800e9ba:	4b08      	ldr	r3, [pc, #32]	; (800e9dc <Watchdog_Init+0x2c>)
 800e9bc:	2205      	movs	r2, #5
 800e9be:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Reload = 64;
 800e9c0:	4b06      	ldr	r3, [pc, #24]	; (800e9dc <Watchdog_Init+0x2c>)
 800e9c2:	2240      	movs	r2, #64	; 0x40
 800e9c4:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800e9c6:	4805      	ldr	r0, [pc, #20]	; (800e9dc <Watchdog_Init+0x2c>)
 800e9c8:	f7f7 fa55 	bl	8005e76 <HAL_IWDG_Init>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d001      	beq.n	800e9d6 <Watchdog_Init+0x26>
	{
		Error_Handler();
 800e9d2:	f7ff ffe5 	bl	800e9a0 <Error_Handler>
	}
	return E_OK;
 800e9d6:	2300      	movs	r3, #0
}
 800e9d8:	4618      	mov	r0, r3
 800e9da:	bd80      	pop	{r7, pc}
 800e9dc:	200002a0 	.word	0x200002a0
 800e9e0:	40003000 	.word	0x40003000

0800e9e4 <Watchdog_MainFunction>:
/***********************************************************************************
* Function: Watchdog_MainFunction									   		       *
* Description: Peripheral main function.							 		       *
************************************************************************************/
VOID Watchdog_MainFunction()
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 800e9e8:	4802      	ldr	r0, [pc, #8]	; (800e9f4 <Watchdog_MainFunction+0x10>)
 800e9ea:	f7f7 fa86 	bl	8005efa <HAL_IWDG_Refresh>
}
 800e9ee:	bf00      	nop
 800e9f0:	bd80      	pop	{r7, pc}
 800e9f2:	bf00      	nop
 800e9f4:	200002a0 	.word	0x200002a0

0800e9f8 <atoi>:
 800e9f8:	220a      	movs	r2, #10
 800e9fa:	2100      	movs	r1, #0
 800e9fc:	f000 b978 	b.w	800ecf0 <strtol>

0800ea00 <__errno>:
 800ea00:	4b01      	ldr	r3, [pc, #4]	; (800ea08 <__errno+0x8>)
 800ea02:	6818      	ldr	r0, [r3, #0]
 800ea04:	4770      	bx	lr
 800ea06:	bf00      	nop
 800ea08:	2000003c 	.word	0x2000003c

0800ea0c <__libc_init_array>:
 800ea0c:	b570      	push	{r4, r5, r6, lr}
 800ea0e:	4d0d      	ldr	r5, [pc, #52]	; (800ea44 <__libc_init_array+0x38>)
 800ea10:	4c0d      	ldr	r4, [pc, #52]	; (800ea48 <__libc_init_array+0x3c>)
 800ea12:	1b64      	subs	r4, r4, r5
 800ea14:	10a4      	asrs	r4, r4, #2
 800ea16:	2600      	movs	r6, #0
 800ea18:	42a6      	cmp	r6, r4
 800ea1a:	d109      	bne.n	800ea30 <__libc_init_array+0x24>
 800ea1c:	4d0b      	ldr	r5, [pc, #44]	; (800ea4c <__libc_init_array+0x40>)
 800ea1e:	4c0c      	ldr	r4, [pc, #48]	; (800ea50 <__libc_init_array+0x44>)
 800ea20:	f000 f97c 	bl	800ed1c <_init>
 800ea24:	1b64      	subs	r4, r4, r5
 800ea26:	10a4      	asrs	r4, r4, #2
 800ea28:	2600      	movs	r6, #0
 800ea2a:	42a6      	cmp	r6, r4
 800ea2c:	d105      	bne.n	800ea3a <__libc_init_array+0x2e>
 800ea2e:	bd70      	pop	{r4, r5, r6, pc}
 800ea30:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea34:	4798      	blx	r3
 800ea36:	3601      	adds	r6, #1
 800ea38:	e7ee      	b.n	800ea18 <__libc_init_array+0xc>
 800ea3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea3e:	4798      	blx	r3
 800ea40:	3601      	adds	r6, #1
 800ea42:	e7f2      	b.n	800ea2a <__libc_init_array+0x1e>
 800ea44:	0800f3a4 	.word	0x0800f3a4
 800ea48:	0800f3a4 	.word	0x0800f3a4
 800ea4c:	0800f3a4 	.word	0x0800f3a4
 800ea50:	0800f3a8 	.word	0x0800f3a8

0800ea54 <memcpy>:
 800ea54:	440a      	add	r2, r1
 800ea56:	4291      	cmp	r1, r2
 800ea58:	f100 33ff 	add.w	r3, r0, #4294967295
 800ea5c:	d100      	bne.n	800ea60 <memcpy+0xc>
 800ea5e:	4770      	bx	lr
 800ea60:	b510      	push	{r4, lr}
 800ea62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ea6a:	4291      	cmp	r1, r2
 800ea6c:	d1f9      	bne.n	800ea62 <memcpy+0xe>
 800ea6e:	bd10      	pop	{r4, pc}

0800ea70 <memset>:
 800ea70:	4402      	add	r2, r0
 800ea72:	4603      	mov	r3, r0
 800ea74:	4293      	cmp	r3, r2
 800ea76:	d100      	bne.n	800ea7a <memset+0xa>
 800ea78:	4770      	bx	lr
 800ea7a:	f803 1b01 	strb.w	r1, [r3], #1
 800ea7e:	e7f9      	b.n	800ea74 <memset+0x4>

0800ea80 <_free_r>:
 800ea80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea82:	2900      	cmp	r1, #0
 800ea84:	d044      	beq.n	800eb10 <_free_r+0x90>
 800ea86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea8a:	9001      	str	r0, [sp, #4]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	f1a1 0404 	sub.w	r4, r1, #4
 800ea92:	bfb8      	it	lt
 800ea94:	18e4      	addlt	r4, r4, r3
 800ea96:	f000 f935 	bl	800ed04 <__malloc_lock>
 800ea9a:	4a1e      	ldr	r2, [pc, #120]	; (800eb14 <_free_r+0x94>)
 800ea9c:	9801      	ldr	r0, [sp, #4]
 800ea9e:	6813      	ldr	r3, [r2, #0]
 800eaa0:	b933      	cbnz	r3, 800eab0 <_free_r+0x30>
 800eaa2:	6063      	str	r3, [r4, #4]
 800eaa4:	6014      	str	r4, [r2, #0]
 800eaa6:	b003      	add	sp, #12
 800eaa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eaac:	f000 b930 	b.w	800ed10 <__malloc_unlock>
 800eab0:	42a3      	cmp	r3, r4
 800eab2:	d908      	bls.n	800eac6 <_free_r+0x46>
 800eab4:	6825      	ldr	r5, [r4, #0]
 800eab6:	1961      	adds	r1, r4, r5
 800eab8:	428b      	cmp	r3, r1
 800eaba:	bf01      	itttt	eq
 800eabc:	6819      	ldreq	r1, [r3, #0]
 800eabe:	685b      	ldreq	r3, [r3, #4]
 800eac0:	1949      	addeq	r1, r1, r5
 800eac2:	6021      	streq	r1, [r4, #0]
 800eac4:	e7ed      	b.n	800eaa2 <_free_r+0x22>
 800eac6:	461a      	mov	r2, r3
 800eac8:	685b      	ldr	r3, [r3, #4]
 800eaca:	b10b      	cbz	r3, 800ead0 <_free_r+0x50>
 800eacc:	42a3      	cmp	r3, r4
 800eace:	d9fa      	bls.n	800eac6 <_free_r+0x46>
 800ead0:	6811      	ldr	r1, [r2, #0]
 800ead2:	1855      	adds	r5, r2, r1
 800ead4:	42a5      	cmp	r5, r4
 800ead6:	d10b      	bne.n	800eaf0 <_free_r+0x70>
 800ead8:	6824      	ldr	r4, [r4, #0]
 800eada:	4421      	add	r1, r4
 800eadc:	1854      	adds	r4, r2, r1
 800eade:	42a3      	cmp	r3, r4
 800eae0:	6011      	str	r1, [r2, #0]
 800eae2:	d1e0      	bne.n	800eaa6 <_free_r+0x26>
 800eae4:	681c      	ldr	r4, [r3, #0]
 800eae6:	685b      	ldr	r3, [r3, #4]
 800eae8:	6053      	str	r3, [r2, #4]
 800eaea:	4421      	add	r1, r4
 800eaec:	6011      	str	r1, [r2, #0]
 800eaee:	e7da      	b.n	800eaa6 <_free_r+0x26>
 800eaf0:	d902      	bls.n	800eaf8 <_free_r+0x78>
 800eaf2:	230c      	movs	r3, #12
 800eaf4:	6003      	str	r3, [r0, #0]
 800eaf6:	e7d6      	b.n	800eaa6 <_free_r+0x26>
 800eaf8:	6825      	ldr	r5, [r4, #0]
 800eafa:	1961      	adds	r1, r4, r5
 800eafc:	428b      	cmp	r3, r1
 800eafe:	bf04      	itt	eq
 800eb00:	6819      	ldreq	r1, [r3, #0]
 800eb02:	685b      	ldreq	r3, [r3, #4]
 800eb04:	6063      	str	r3, [r4, #4]
 800eb06:	bf04      	itt	eq
 800eb08:	1949      	addeq	r1, r1, r5
 800eb0a:	6021      	streq	r1, [r4, #0]
 800eb0c:	6054      	str	r4, [r2, #4]
 800eb0e:	e7ca      	b.n	800eaa6 <_free_r+0x26>
 800eb10:	b003      	add	sp, #12
 800eb12:	bd30      	pop	{r4, r5, pc}
 800eb14:	2000a770 	.word	0x2000a770

0800eb18 <cleanup_glue>:
 800eb18:	b538      	push	{r3, r4, r5, lr}
 800eb1a:	460c      	mov	r4, r1
 800eb1c:	6809      	ldr	r1, [r1, #0]
 800eb1e:	4605      	mov	r5, r0
 800eb20:	b109      	cbz	r1, 800eb26 <cleanup_glue+0xe>
 800eb22:	f7ff fff9 	bl	800eb18 <cleanup_glue>
 800eb26:	4621      	mov	r1, r4
 800eb28:	4628      	mov	r0, r5
 800eb2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb2e:	f7ff bfa7 	b.w	800ea80 <_free_r>
	...

0800eb34 <_reclaim_reent>:
 800eb34:	4b2c      	ldr	r3, [pc, #176]	; (800ebe8 <_reclaim_reent+0xb4>)
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	4283      	cmp	r3, r0
 800eb3a:	b570      	push	{r4, r5, r6, lr}
 800eb3c:	4604      	mov	r4, r0
 800eb3e:	d051      	beq.n	800ebe4 <_reclaim_reent+0xb0>
 800eb40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800eb42:	b143      	cbz	r3, 800eb56 <_reclaim_reent+0x22>
 800eb44:	68db      	ldr	r3, [r3, #12]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d14a      	bne.n	800ebe0 <_reclaim_reent+0xac>
 800eb4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb4c:	6819      	ldr	r1, [r3, #0]
 800eb4e:	b111      	cbz	r1, 800eb56 <_reclaim_reent+0x22>
 800eb50:	4620      	mov	r0, r4
 800eb52:	f7ff ff95 	bl	800ea80 <_free_r>
 800eb56:	6961      	ldr	r1, [r4, #20]
 800eb58:	b111      	cbz	r1, 800eb60 <_reclaim_reent+0x2c>
 800eb5a:	4620      	mov	r0, r4
 800eb5c:	f7ff ff90 	bl	800ea80 <_free_r>
 800eb60:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800eb62:	b111      	cbz	r1, 800eb6a <_reclaim_reent+0x36>
 800eb64:	4620      	mov	r0, r4
 800eb66:	f7ff ff8b 	bl	800ea80 <_free_r>
 800eb6a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800eb6c:	b111      	cbz	r1, 800eb74 <_reclaim_reent+0x40>
 800eb6e:	4620      	mov	r0, r4
 800eb70:	f7ff ff86 	bl	800ea80 <_free_r>
 800eb74:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800eb76:	b111      	cbz	r1, 800eb7e <_reclaim_reent+0x4a>
 800eb78:	4620      	mov	r0, r4
 800eb7a:	f7ff ff81 	bl	800ea80 <_free_r>
 800eb7e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800eb80:	b111      	cbz	r1, 800eb88 <_reclaim_reent+0x54>
 800eb82:	4620      	mov	r0, r4
 800eb84:	f7ff ff7c 	bl	800ea80 <_free_r>
 800eb88:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800eb8a:	b111      	cbz	r1, 800eb92 <_reclaim_reent+0x5e>
 800eb8c:	4620      	mov	r0, r4
 800eb8e:	f7ff ff77 	bl	800ea80 <_free_r>
 800eb92:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800eb94:	b111      	cbz	r1, 800eb9c <_reclaim_reent+0x68>
 800eb96:	4620      	mov	r0, r4
 800eb98:	f7ff ff72 	bl	800ea80 <_free_r>
 800eb9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb9e:	b111      	cbz	r1, 800eba6 <_reclaim_reent+0x72>
 800eba0:	4620      	mov	r0, r4
 800eba2:	f7ff ff6d 	bl	800ea80 <_free_r>
 800eba6:	69a3      	ldr	r3, [r4, #24]
 800eba8:	b1e3      	cbz	r3, 800ebe4 <_reclaim_reent+0xb0>
 800ebaa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ebac:	4620      	mov	r0, r4
 800ebae:	4798      	blx	r3
 800ebb0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ebb2:	b1b9      	cbz	r1, 800ebe4 <_reclaim_reent+0xb0>
 800ebb4:	4620      	mov	r0, r4
 800ebb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ebba:	f7ff bfad 	b.w	800eb18 <cleanup_glue>
 800ebbe:	5949      	ldr	r1, [r1, r5]
 800ebc0:	b941      	cbnz	r1, 800ebd4 <_reclaim_reent+0xa0>
 800ebc2:	3504      	adds	r5, #4
 800ebc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ebc6:	2d80      	cmp	r5, #128	; 0x80
 800ebc8:	68d9      	ldr	r1, [r3, #12]
 800ebca:	d1f8      	bne.n	800ebbe <_reclaim_reent+0x8a>
 800ebcc:	4620      	mov	r0, r4
 800ebce:	f7ff ff57 	bl	800ea80 <_free_r>
 800ebd2:	e7ba      	b.n	800eb4a <_reclaim_reent+0x16>
 800ebd4:	680e      	ldr	r6, [r1, #0]
 800ebd6:	4620      	mov	r0, r4
 800ebd8:	f7ff ff52 	bl	800ea80 <_free_r>
 800ebdc:	4631      	mov	r1, r6
 800ebde:	e7ef      	b.n	800ebc0 <_reclaim_reent+0x8c>
 800ebe0:	2500      	movs	r5, #0
 800ebe2:	e7ef      	b.n	800ebc4 <_reclaim_reent+0x90>
 800ebe4:	bd70      	pop	{r4, r5, r6, pc}
 800ebe6:	bf00      	nop
 800ebe8:	2000003c 	.word	0x2000003c

0800ebec <_strtol_l.constprop.0>:
 800ebec:	2b01      	cmp	r3, #1
 800ebee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebf2:	d001      	beq.n	800ebf8 <_strtol_l.constprop.0+0xc>
 800ebf4:	2b24      	cmp	r3, #36	; 0x24
 800ebf6:	d906      	bls.n	800ec06 <_strtol_l.constprop.0+0x1a>
 800ebf8:	f7ff ff02 	bl	800ea00 <__errno>
 800ebfc:	2316      	movs	r3, #22
 800ebfe:	6003      	str	r3, [r0, #0]
 800ec00:	2000      	movs	r0, #0
 800ec02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec06:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ecec <_strtol_l.constprop.0+0x100>
 800ec0a:	460d      	mov	r5, r1
 800ec0c:	462e      	mov	r6, r5
 800ec0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ec12:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ec16:	f017 0708 	ands.w	r7, r7, #8
 800ec1a:	d1f7      	bne.n	800ec0c <_strtol_l.constprop.0+0x20>
 800ec1c:	2c2d      	cmp	r4, #45	; 0x2d
 800ec1e:	d132      	bne.n	800ec86 <_strtol_l.constprop.0+0x9a>
 800ec20:	782c      	ldrb	r4, [r5, #0]
 800ec22:	2701      	movs	r7, #1
 800ec24:	1cb5      	adds	r5, r6, #2
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d05b      	beq.n	800ece2 <_strtol_l.constprop.0+0xf6>
 800ec2a:	2b10      	cmp	r3, #16
 800ec2c:	d109      	bne.n	800ec42 <_strtol_l.constprop.0+0x56>
 800ec2e:	2c30      	cmp	r4, #48	; 0x30
 800ec30:	d107      	bne.n	800ec42 <_strtol_l.constprop.0+0x56>
 800ec32:	782c      	ldrb	r4, [r5, #0]
 800ec34:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ec38:	2c58      	cmp	r4, #88	; 0x58
 800ec3a:	d14d      	bne.n	800ecd8 <_strtol_l.constprop.0+0xec>
 800ec3c:	786c      	ldrb	r4, [r5, #1]
 800ec3e:	2310      	movs	r3, #16
 800ec40:	3502      	adds	r5, #2
 800ec42:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ec46:	f108 38ff 	add.w	r8, r8, #4294967295
 800ec4a:	f04f 0c00 	mov.w	ip, #0
 800ec4e:	fbb8 f9f3 	udiv	r9, r8, r3
 800ec52:	4666      	mov	r6, ip
 800ec54:	fb03 8a19 	mls	sl, r3, r9, r8
 800ec58:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ec5c:	f1be 0f09 	cmp.w	lr, #9
 800ec60:	d816      	bhi.n	800ec90 <_strtol_l.constprop.0+0xa4>
 800ec62:	4674      	mov	r4, lr
 800ec64:	42a3      	cmp	r3, r4
 800ec66:	dd24      	ble.n	800ecb2 <_strtol_l.constprop.0+0xc6>
 800ec68:	f1bc 0f00 	cmp.w	ip, #0
 800ec6c:	db1e      	blt.n	800ecac <_strtol_l.constprop.0+0xc0>
 800ec6e:	45b1      	cmp	r9, r6
 800ec70:	d31c      	bcc.n	800ecac <_strtol_l.constprop.0+0xc0>
 800ec72:	d101      	bne.n	800ec78 <_strtol_l.constprop.0+0x8c>
 800ec74:	45a2      	cmp	sl, r4
 800ec76:	db19      	blt.n	800ecac <_strtol_l.constprop.0+0xc0>
 800ec78:	fb06 4603 	mla	r6, r6, r3, r4
 800ec7c:	f04f 0c01 	mov.w	ip, #1
 800ec80:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ec84:	e7e8      	b.n	800ec58 <_strtol_l.constprop.0+0x6c>
 800ec86:	2c2b      	cmp	r4, #43	; 0x2b
 800ec88:	bf04      	itt	eq
 800ec8a:	782c      	ldrbeq	r4, [r5, #0]
 800ec8c:	1cb5      	addeq	r5, r6, #2
 800ec8e:	e7ca      	b.n	800ec26 <_strtol_l.constprop.0+0x3a>
 800ec90:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ec94:	f1be 0f19 	cmp.w	lr, #25
 800ec98:	d801      	bhi.n	800ec9e <_strtol_l.constprop.0+0xb2>
 800ec9a:	3c37      	subs	r4, #55	; 0x37
 800ec9c:	e7e2      	b.n	800ec64 <_strtol_l.constprop.0+0x78>
 800ec9e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800eca2:	f1be 0f19 	cmp.w	lr, #25
 800eca6:	d804      	bhi.n	800ecb2 <_strtol_l.constprop.0+0xc6>
 800eca8:	3c57      	subs	r4, #87	; 0x57
 800ecaa:	e7db      	b.n	800ec64 <_strtol_l.constprop.0+0x78>
 800ecac:	f04f 3cff 	mov.w	ip, #4294967295
 800ecb0:	e7e6      	b.n	800ec80 <_strtol_l.constprop.0+0x94>
 800ecb2:	f1bc 0f00 	cmp.w	ip, #0
 800ecb6:	da05      	bge.n	800ecc4 <_strtol_l.constprop.0+0xd8>
 800ecb8:	2322      	movs	r3, #34	; 0x22
 800ecba:	6003      	str	r3, [r0, #0]
 800ecbc:	4646      	mov	r6, r8
 800ecbe:	b942      	cbnz	r2, 800ecd2 <_strtol_l.constprop.0+0xe6>
 800ecc0:	4630      	mov	r0, r6
 800ecc2:	e79e      	b.n	800ec02 <_strtol_l.constprop.0+0x16>
 800ecc4:	b107      	cbz	r7, 800ecc8 <_strtol_l.constprop.0+0xdc>
 800ecc6:	4276      	negs	r6, r6
 800ecc8:	2a00      	cmp	r2, #0
 800ecca:	d0f9      	beq.n	800ecc0 <_strtol_l.constprop.0+0xd4>
 800eccc:	f1bc 0f00 	cmp.w	ip, #0
 800ecd0:	d000      	beq.n	800ecd4 <_strtol_l.constprop.0+0xe8>
 800ecd2:	1e69      	subs	r1, r5, #1
 800ecd4:	6011      	str	r1, [r2, #0]
 800ecd6:	e7f3      	b.n	800ecc0 <_strtol_l.constprop.0+0xd4>
 800ecd8:	2430      	movs	r4, #48	; 0x30
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d1b1      	bne.n	800ec42 <_strtol_l.constprop.0+0x56>
 800ecde:	2308      	movs	r3, #8
 800ece0:	e7af      	b.n	800ec42 <_strtol_l.constprop.0+0x56>
 800ece2:	2c30      	cmp	r4, #48	; 0x30
 800ece4:	d0a5      	beq.n	800ec32 <_strtol_l.constprop.0+0x46>
 800ece6:	230a      	movs	r3, #10
 800ece8:	e7ab      	b.n	800ec42 <_strtol_l.constprop.0+0x56>
 800ecea:	bf00      	nop
 800ecec:	0800f299 	.word	0x0800f299

0800ecf0 <strtol>:
 800ecf0:	4613      	mov	r3, r2
 800ecf2:	460a      	mov	r2, r1
 800ecf4:	4601      	mov	r1, r0
 800ecf6:	4802      	ldr	r0, [pc, #8]	; (800ed00 <strtol+0x10>)
 800ecf8:	6800      	ldr	r0, [r0, #0]
 800ecfa:	f7ff bf77 	b.w	800ebec <_strtol_l.constprop.0>
 800ecfe:	bf00      	nop
 800ed00:	2000003c 	.word	0x2000003c

0800ed04 <__malloc_lock>:
 800ed04:	4801      	ldr	r0, [pc, #4]	; (800ed0c <__malloc_lock+0x8>)
 800ed06:	f7f4 bf16 	b.w	8003b36 <__retarget_lock_acquire_recursive>
 800ed0a:	bf00      	nop
 800ed0c:	200006a4 	.word	0x200006a4

0800ed10 <__malloc_unlock>:
 800ed10:	4801      	ldr	r0, [pc, #4]	; (800ed18 <__malloc_unlock+0x8>)
 800ed12:	f7f4 bf24 	b.w	8003b5e <__retarget_lock_release_recursive>
 800ed16:	bf00      	nop
 800ed18:	200006a4 	.word	0x200006a4

0800ed1c <_init>:
 800ed1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed1e:	bf00      	nop
 800ed20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed22:	bc08      	pop	{r3}
 800ed24:	469e      	mov	lr, r3
 800ed26:	4770      	bx	lr

0800ed28 <_fini>:
 800ed28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed2a:	bf00      	nop
 800ed2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed2e:	bc08      	pop	{r3}
 800ed30:	469e      	mov	lr, r3
 800ed32:	4770      	bx	lr
