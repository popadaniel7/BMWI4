
I4_BCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000141a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007fc  08014340  08014340  00024340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014b3c  08014b3c  000300c0  2**0
                  CONTENTS
  4 .ARM          00000008  08014b3c  08014b3c  00024b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014b44  08014b44  000300c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014b44  08014b44  00024b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014b48  08014b48  00024b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08014b4c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009430  200000c0  08014c0c  000300c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200094f0  08014c0c  000394f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033d69  00000000  00000000  000300f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000080be  00000000  00000000  00063e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ab0  00000000  00000000  0006bf18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000026e0  00000000  00000000  0006e9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027033  00000000  00000000  000710a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004c9d1  00000000  00000000  000980db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b7522  00000000  00000000  000e4aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019bfce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b198  00000000  00000000  0019c020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c0 	.word	0x200000c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08014328 	.word	0x08014328

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c4 	.word	0x200000c4
 80001dc:	08014328 	.word	0x08014328

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <main>:
/***********************************************************************************
* Function: main														   		   *
* Description: Defined in the linker file as the start of the application.         *
************************************************************************************/
int main()
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	/* Calls for system initialization. */
	SystemManager_Init();
 8000d74:	f012 fbc8 	bl	8013508 <SystemManager_Init>
	/* Initialize the kernel of FreeRTOS. */
	osKernelInitialize();
 8000d78:	f00d ff0e 	bl	800eb98 <osKernelInitialize>
	/* Initialize the FreeRTOS with all its objects.*/
	MX_FREERTOS_Init();
 8000d7c:	f003 fdc0 	bl	8004900 <MX_FREERTOS_Init>
	/* Start the kernel and the scheduler and FreeRTOS takes
	 * control of the application execution. */
	osKernelStart();
 8000d80:	f00d ff2e 	bl	800ebe0 <osKernelStart>
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <Btc_RequestState>:
/***********************************************************************************
* Function: Btc_RequestState													   *
* Description: Process bluetooth command for request state 					       *
************************************************************************************/
VOID Btc_RequestState()
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	if(Btc_ReceivedDataOnBluetooth == 99)
 8000d90:	4ba0      	ldr	r3, [pc, #640]	; (8001014 <Btc_RequestState+0x288>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b63      	cmp	r3, #99	; 0x63
 8000d96:	d101      	bne.n	8000d9c <Btc_RequestState+0x10>
	{
		SystemManager_PerformReset();
 8000d98:	f012 fbee 	bl	8013578 <SystemManager_PerformReset>
	}
	else
	{
		/* do nothing */
	}
	if(Btc_ReceivedDataOnBluetooth == 90)
 8000d9c:	4b9d      	ldr	r3, [pc, #628]	; (8001014 <Btc_RequestState+0x288>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b5a      	cmp	r3, #90	; 0x5a
 8000da2:	f040 825a 	bne.w	800125a <Btc_RequestState+0x4ce>
	{
		Btc_DtcMessageLength = strlen(Btc_DtcMessage);
 8000da6:	4b9c      	ldr	r3, [pc, #624]	; (8001018 <Btc_RequestState+0x28c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fa18 	bl	80001e0 <strlen>
 8000db0:	4603      	mov	r3, r0
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	4b99      	ldr	r3, [pc, #612]	; (800101c <Btc_RequestState+0x290>)
 8000db6:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcMessage, Btc_DtcMessageLength);
 8000db8:	4b97      	ldr	r3, [pc, #604]	; (8001018 <Btc_RequestState+0x28c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a97      	ldr	r2, [pc, #604]	; (800101c <Btc_RequestState+0x290>)
 8000dbe:	8812      	ldrh	r2, [r2, #0]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4897      	ldr	r0, [pc, #604]	; (8001020 <Btc_RequestState+0x294>)
 8000dc4:	f00b fdde 	bl	800c984 <HAL_UART_Transmit_IT>
		Btc_DtcDescriptionLength1 = strlen(Btc_DtcLowBeamLeft);
 8000dc8:	4b96      	ldr	r3, [pc, #600]	; (8001024 <Btc_RequestState+0x298>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fa07 	bl	80001e0 <strlen>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	4b94      	ldr	r3, [pc, #592]	; (8001028 <Btc_RequestState+0x29c>)
 8000dd8:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength2 = strlen(Btc_DtcLowBeamRight);
 8000dda:	4b94      	ldr	r3, [pc, #592]	; (800102c <Btc_RequestState+0x2a0>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff f9fe 	bl	80001e0 <strlen>
 8000de4:	4603      	mov	r3, r0
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	4b91      	ldr	r3, [pc, #580]	; (8001030 <Btc_RequestState+0x2a4>)
 8000dea:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength3 = strlen(Btc_DtcRearPositionLightLeft);
 8000dec:	4b91      	ldr	r3, [pc, #580]	; (8001034 <Btc_RequestState+0x2a8>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff f9f5 	bl	80001e0 <strlen>
 8000df6:	4603      	mov	r3, r0
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	4b8f      	ldr	r3, [pc, #572]	; (8001038 <Btc_RequestState+0x2ac>)
 8000dfc:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength4 = strlen(Btc_DtcRearPositionLightRight);
 8000dfe:	4b8f      	ldr	r3, [pc, #572]	; (800103c <Btc_RequestState+0x2b0>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff f9ec 	bl	80001e0 <strlen>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	4b8c      	ldr	r3, [pc, #560]	; (8001040 <Btc_RequestState+0x2b4>)
 8000e0e:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength5 = strlen(Btc_DtcRightTurnSignalFront);
 8000e10:	4b8c      	ldr	r3, [pc, #560]	; (8001044 <Btc_RequestState+0x2b8>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff f9e3 	bl	80001e0 <strlen>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	4b8a      	ldr	r3, [pc, #552]	; (8001048 <Btc_RequestState+0x2bc>)
 8000e20:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength6 = strlen(Btc_DtcLeftTurnSignalFront);
 8000e22:	4b8a      	ldr	r3, [pc, #552]	; (800104c <Btc_RequestState+0x2c0>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff f9da 	bl	80001e0 <strlen>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	4b87      	ldr	r3, [pc, #540]	; (8001050 <Btc_RequestState+0x2c4>)
 8000e32:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength7 = strlen(Btc_DtcLeftTurnSignalRear);
 8000e34:	4b87      	ldr	r3, [pc, #540]	; (8001054 <Btc_RequestState+0x2c8>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff f9d1 	bl	80001e0 <strlen>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	4b85      	ldr	r3, [pc, #532]	; (8001058 <Btc_RequestState+0x2cc>)
 8000e44:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength8 = strlen(Btc_DtcRightBrakeLight);
 8000e46:	4b85      	ldr	r3, [pc, #532]	; (800105c <Btc_RequestState+0x2d0>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff f9c8 	bl	80001e0 <strlen>
 8000e50:	4603      	mov	r3, r0
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	4b82      	ldr	r3, [pc, #520]	; (8001060 <Btc_RequestState+0x2d4>)
 8000e56:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength9 = strlen(Btc_DtcLeftBrakeLight);
 8000e58:	4b82      	ldr	r3, [pc, #520]	; (8001064 <Btc_RequestState+0x2d8>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff f9bf 	bl	80001e0 <strlen>
 8000e62:	4603      	mov	r3, r0
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	4b80      	ldr	r3, [pc, #512]	; (8001068 <Btc_RequestState+0x2dc>)
 8000e68:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength10 = strlen(Btc_DtcLightSensor);
 8000e6a:	4b80      	ldr	r3, [pc, #512]	; (800106c <Btc_RequestState+0x2e0>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff f9b6 	bl	80001e0 <strlen>
 8000e74:	4603      	mov	r3, r0
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	4b7d      	ldr	r3, [pc, #500]	; (8001070 <Btc_RequestState+0x2e4>)
 8000e7a:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength11 = strlen(Btc_DtcVibrationSensor);
 8000e7c:	4b7d      	ldr	r3, [pc, #500]	; (8001074 <Btc_RequestState+0x2e8>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff f9ad 	bl	80001e0 <strlen>
 8000e86:	4603      	mov	r3, r0
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	4b7b      	ldr	r3, [pc, #492]	; (8001078 <Btc_RequestState+0x2ec>)
 8000e8c:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength12 = strlen(Btc_DtcTemperatureSensor);
 8000e8e:	4b7b      	ldr	r3, [pc, #492]	; (800107c <Btc_RequestState+0x2f0>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff f9a4 	bl	80001e0 <strlen>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	4b78      	ldr	r3, [pc, #480]	; (8001080 <Btc_RequestState+0x2f4>)
 8000e9e:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength13 = strlen(Btc_DtcRearParkingSensor);
 8000ea0:	4b78      	ldr	r3, [pc, #480]	; (8001084 <Btc_RequestState+0x2f8>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff f99b 	bl	80001e0 <strlen>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	4b76      	ldr	r3, [pc, #472]	; (8001088 <Btc_RequestState+0x2fc>)
 8000eb0:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength14 = strlen(Btc_DtcFrontParkingSensor);
 8000eb2:	4b76      	ldr	r3, [pc, #472]	; (800108c <Btc_RequestState+0x300>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff f992 	bl	80001e0 <strlen>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	4b73      	ldr	r3, [pc, #460]	; (8001090 <Btc_RequestState+0x304>)
 8000ec2:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength15 = strlen(Btc_DtcLcd);
 8000ec4:	4b73      	ldr	r3, [pc, #460]	; (8001094 <Btc_RequestState+0x308>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff f989 	bl	80001e0 <strlen>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	4b71      	ldr	r3, [pc, #452]	; (8001098 <Btc_RequestState+0x30c>)
 8000ed4:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength16 = strlen(Btc_DtcHardware);
 8000ed6:	4b71      	ldr	r3, [pc, #452]	; (800109c <Btc_RequestState+0x310>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff f980 	bl	80001e0 <strlen>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	4b6e      	ldr	r3, [pc, #440]	; (80010a0 <Btc_RequestState+0x314>)
 8000ee6:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength17 = strlen(Btc_DtcBtc);
 8000ee8:	4b6e      	ldr	r3, [pc, #440]	; (80010a4 <Btc_RequestState+0x318>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff f977 	bl	80001e0 <strlen>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	4b6c      	ldr	r3, [pc, #432]	; (80010a8 <Btc_RequestState+0x31c>)
 8000ef8:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength18 = strlen(Btc_DtcMem);
 8000efa:	4b6c      	ldr	r3, [pc, #432]	; (80010ac <Btc_RequestState+0x320>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff f96e 	bl	80001e0 <strlen>
 8000f04:	4603      	mov	r3, r0
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	4b69      	ldr	r3, [pc, #420]	; (80010b0 <Btc_RequestState+0x324>)
 8000f0a:	801a      	strh	r2, [r3, #0]
		if(Dem_DtcArray[16] != 0)
 8000f0c:	4b69      	ldr	r3, [pc, #420]	; (80010b4 <Btc_RequestState+0x328>)
 8000f0e:	7c1b      	ldrb	r3, [r3, #16]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d00d      	beq.n	8000f30 <Btc_RequestState+0x1a4>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcBtc, Btc_DtcDescriptionLength17) == HAL_BUSY);
 8000f14:	bf00      	nop
 8000f16:	4b63      	ldr	r3, [pc, #396]	; (80010a4 <Btc_RequestState+0x318>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a63      	ldr	r2, [pc, #396]	; (80010a8 <Btc_RequestState+0x31c>)
 8000f1c:	8812      	ldrh	r2, [r2, #0]
 8000f1e:	4619      	mov	r1, r3
 8000f20:	483f      	ldr	r0, [pc, #252]	; (8001020 <Btc_RequestState+0x294>)
 8000f22:	f00b fd2f 	bl	800c984 <HAL_UART_Transmit_IT>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d0f4      	beq.n	8000f16 <Btc_RequestState+0x18a>
			Rte_Runnable_Wdg_MainFunction();
 8000f2c:	f011 f8fe 	bl	801212c <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[17] != 0)
 8000f30:	4b60      	ldr	r3, [pc, #384]	; (80010b4 <Btc_RequestState+0x328>)
 8000f32:	7c5b      	ldrb	r3, [r3, #17]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d00d      	beq.n	8000f54 <Btc_RequestState+0x1c8>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcMem, Btc_DtcDescriptionLength18) == HAL_BUSY);
 8000f38:	bf00      	nop
 8000f3a:	4b5c      	ldr	r3, [pc, #368]	; (80010ac <Btc_RequestState+0x320>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a5c      	ldr	r2, [pc, #368]	; (80010b0 <Btc_RequestState+0x324>)
 8000f40:	8812      	ldrh	r2, [r2, #0]
 8000f42:	4619      	mov	r1, r3
 8000f44:	4836      	ldr	r0, [pc, #216]	; (8001020 <Btc_RequestState+0x294>)
 8000f46:	f00b fd1d 	bl	800c984 <HAL_UART_Transmit_IT>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d0f4      	beq.n	8000f3a <Btc_RequestState+0x1ae>
			Rte_Runnable_Wdg_MainFunction();
 8000f50:	f011 f8ec 	bl	801212c <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(ExtLights_DtcArray[0] != 0)
 8000f54:	4b58      	ldr	r3, [pc, #352]	; (80010b8 <Btc_RequestState+0x32c>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d00d      	beq.n	8000f78 <Btc_RequestState+0x1ec>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcLowBeamLeft, Btc_DtcDescriptionLength1) == HAL_BUSY);
 8000f5c:	bf00      	nop
 8000f5e:	4b31      	ldr	r3, [pc, #196]	; (8001024 <Btc_RequestState+0x298>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a31      	ldr	r2, [pc, #196]	; (8001028 <Btc_RequestState+0x29c>)
 8000f64:	8812      	ldrh	r2, [r2, #0]
 8000f66:	4619      	mov	r1, r3
 8000f68:	482d      	ldr	r0, [pc, #180]	; (8001020 <Btc_RequestState+0x294>)
 8000f6a:	f00b fd0b 	bl	800c984 <HAL_UART_Transmit_IT>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d0f4      	beq.n	8000f5e <Btc_RequestState+0x1d2>
			Rte_Runnable_Wdg_MainFunction();
 8000f74:	f011 f8da 	bl	801212c <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(ExtLights_DtcArray[1] != 0)
 8000f78:	4b4f      	ldr	r3, [pc, #316]	; (80010b8 <Btc_RequestState+0x32c>)
 8000f7a:	785b      	ldrb	r3, [r3, #1]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00d      	beq.n	8000f9c <Btc_RequestState+0x210>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcLowBeamRight, Btc_DtcDescriptionLength2) == HAL_BUSY);
 8000f80:	bf00      	nop
 8000f82:	4b2a      	ldr	r3, [pc, #168]	; (800102c <Btc_RequestState+0x2a0>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a2a      	ldr	r2, [pc, #168]	; (8001030 <Btc_RequestState+0x2a4>)
 8000f88:	8812      	ldrh	r2, [r2, #0]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4824      	ldr	r0, [pc, #144]	; (8001020 <Btc_RequestState+0x294>)
 8000f8e:	f00b fcf9 	bl	800c984 <HAL_UART_Transmit_IT>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d0f4      	beq.n	8000f82 <Btc_RequestState+0x1f6>
			Rte_Runnable_Wdg_MainFunction();
 8000f98:	f011 f8c8 	bl	801212c <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(ExtLights_DtcArray[2] != 0)
 8000f9c:	4b46      	ldr	r3, [pc, #280]	; (80010b8 <Btc_RequestState+0x32c>)
 8000f9e:	789b      	ldrb	r3, [r3, #2]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d00d      	beq.n	8000fc0 <Btc_RequestState+0x234>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcRearPositionLightLeft, Btc_DtcDescriptionLength3) == HAL_BUSY);
 8000fa4:	bf00      	nop
 8000fa6:	4b23      	ldr	r3, [pc, #140]	; (8001034 <Btc_RequestState+0x2a8>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a23      	ldr	r2, [pc, #140]	; (8001038 <Btc_RequestState+0x2ac>)
 8000fac:	8812      	ldrh	r2, [r2, #0]
 8000fae:	4619      	mov	r1, r3
 8000fb0:	481b      	ldr	r0, [pc, #108]	; (8001020 <Btc_RequestState+0x294>)
 8000fb2:	f00b fce7 	bl	800c984 <HAL_UART_Transmit_IT>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d0f4      	beq.n	8000fa6 <Btc_RequestState+0x21a>
			Rte_Runnable_Wdg_MainFunction();
 8000fbc:	f011 f8b6 	bl	801212c <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(ExtLights_DtcArray[3] != 0)
 8000fc0:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <Btc_RequestState+0x32c>)
 8000fc2:	78db      	ldrb	r3, [r3, #3]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d00d      	beq.n	8000fe4 <Btc_RequestState+0x258>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcRearPositionLightRight, Btc_DtcDescriptionLength4) == HAL_BUSY);
 8000fc8:	bf00      	nop
 8000fca:	4b1c      	ldr	r3, [pc, #112]	; (800103c <Btc_RequestState+0x2b0>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a1c      	ldr	r2, [pc, #112]	; (8001040 <Btc_RequestState+0x2b4>)
 8000fd0:	8812      	ldrh	r2, [r2, #0]
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4812      	ldr	r0, [pc, #72]	; (8001020 <Btc_RequestState+0x294>)
 8000fd6:	f00b fcd5 	bl	800c984 <HAL_UART_Transmit_IT>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d0f4      	beq.n	8000fca <Btc_RequestState+0x23e>
			Rte_Runnable_Wdg_MainFunction();
 8000fe0:	f011 f8a4 	bl	801212c <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(ExtLights_DtcArray[4] != 0)
 8000fe4:	4b34      	ldr	r3, [pc, #208]	; (80010b8 <Btc_RequestState+0x32c>)
 8000fe6:	791b      	ldrb	r3, [r3, #4]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d00d      	beq.n	8001008 <Btc_RequestState+0x27c>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcRightTurnSignalFront, Btc_DtcDescriptionLength5) == HAL_BUSY);
 8000fec:	bf00      	nop
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <Btc_RequestState+0x2b8>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a15      	ldr	r2, [pc, #84]	; (8001048 <Btc_RequestState+0x2bc>)
 8000ff4:	8812      	ldrh	r2, [r2, #0]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4809      	ldr	r0, [pc, #36]	; (8001020 <Btc_RequestState+0x294>)
 8000ffa:	f00b fcc3 	bl	800c984 <HAL_UART_Transmit_IT>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b02      	cmp	r3, #2
 8001002:	d0f4      	beq.n	8000fee <Btc_RequestState+0x262>
			Rte_Runnable_Wdg_MainFunction();
 8001004:	f011 f892 	bl	801212c <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(ExtLights_DtcArray[6] != 0)
 8001008:	4b2b      	ldr	r3, [pc, #172]	; (80010b8 <Btc_RequestState+0x32c>)
 800100a:	799b      	ldrb	r3, [r3, #6]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d063      	beq.n	80010d8 <Btc_RequestState+0x34c>
 8001010:	e054      	b.n	80010bc <Btc_RequestState+0x330>
 8001012:	bf00      	nop
 8001014:	200000e2 	.word	0x200000e2
 8001018:	20000000 	.word	0x20000000
 800101c:	200000fa 	.word	0x200000fa
 8001020:	20000814 	.word	0x20000814
 8001024:	20000004 	.word	0x20000004
 8001028:	200000fc 	.word	0x200000fc
 800102c:	20000008 	.word	0x20000008
 8001030:	200000fe 	.word	0x200000fe
 8001034:	2000000c 	.word	0x2000000c
 8001038:	20000100 	.word	0x20000100
 800103c:	20000010 	.word	0x20000010
 8001040:	20000102 	.word	0x20000102
 8001044:	20000014 	.word	0x20000014
 8001048:	20000104 	.word	0x20000104
 800104c:	20000018 	.word	0x20000018
 8001050:	20000106 	.word	0x20000106
 8001054:	2000001c 	.word	0x2000001c
 8001058:	20000108 	.word	0x20000108
 800105c:	20000024 	.word	0x20000024
 8001060:	2000010a 	.word	0x2000010a
 8001064:	20000020 	.word	0x20000020
 8001068:	2000010c 	.word	0x2000010c
 800106c:	20000028 	.word	0x20000028
 8001070:	2000010e 	.word	0x2000010e
 8001074:	2000002c 	.word	0x2000002c
 8001078:	20000110 	.word	0x20000110
 800107c:	20000030 	.word	0x20000030
 8001080:	20000112 	.word	0x20000112
 8001084:	20000034 	.word	0x20000034
 8001088:	20000114 	.word	0x20000114
 800108c:	20000038 	.word	0x20000038
 8001090:	20000116 	.word	0x20000116
 8001094:	2000003c 	.word	0x2000003c
 8001098:	20000118 	.word	0x20000118
 800109c:	20000040 	.word	0x20000040
 80010a0:	2000011a 	.word	0x2000011a
 80010a4:	20000044 	.word	0x20000044
 80010a8:	2000011c 	.word	0x2000011c
 80010ac:	20000048 	.word	0x20000048
 80010b0:	2000011e 	.word	0x2000011e
 80010b4:	20000894 	.word	0x20000894
 80010b8:	20000170 	.word	0x20000170
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcLeftTurnSignalFront, Btc_DtcDescriptionLength6) == HAL_BUSY);
 80010bc:	bf00      	nop
 80010be:	4b68      	ldr	r3, [pc, #416]	; (8001260 <Btc_RequestState+0x4d4>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a68      	ldr	r2, [pc, #416]	; (8001264 <Btc_RequestState+0x4d8>)
 80010c4:	8812      	ldrh	r2, [r2, #0]
 80010c6:	4619      	mov	r1, r3
 80010c8:	4867      	ldr	r0, [pc, #412]	; (8001268 <Btc_RequestState+0x4dc>)
 80010ca:	f00b fc5b 	bl	800c984 <HAL_UART_Transmit_IT>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d0f4      	beq.n	80010be <Btc_RequestState+0x332>
			Rte_Runnable_Wdg_MainFunction();
 80010d4:	f011 f82a 	bl	801212c <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(ExtLights_DtcArray[7] != 0)
 80010d8:	4b64      	ldr	r3, [pc, #400]	; (800126c <Btc_RequestState+0x4e0>)
 80010da:	79db      	ldrb	r3, [r3, #7]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d00d      	beq.n	80010fc <Btc_RequestState+0x370>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcLeftTurnSignalRear, Btc_DtcDescriptionLength7) == HAL_BUSY);
 80010e0:	bf00      	nop
 80010e2:	4b63      	ldr	r3, [pc, #396]	; (8001270 <Btc_RequestState+0x4e4>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a63      	ldr	r2, [pc, #396]	; (8001274 <Btc_RequestState+0x4e8>)
 80010e8:	8812      	ldrh	r2, [r2, #0]
 80010ea:	4619      	mov	r1, r3
 80010ec:	485e      	ldr	r0, [pc, #376]	; (8001268 <Btc_RequestState+0x4dc>)
 80010ee:	f00b fc49 	bl	800c984 <HAL_UART_Transmit_IT>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d0f4      	beq.n	80010e2 <Btc_RequestState+0x356>
			Rte_Runnable_Wdg_MainFunction();
 80010f8:	f011 f818 	bl	801212c <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(ExtLights_DtcArray[8] != 0)
 80010fc:	4b5b      	ldr	r3, [pc, #364]	; (800126c <Btc_RequestState+0x4e0>)
 80010fe:	7a1b      	ldrb	r3, [r3, #8]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00d      	beq.n	8001120 <Btc_RequestState+0x394>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcRightBrakeLight, Btc_DtcDescriptionLength8) == HAL_BUSY);
 8001104:	bf00      	nop
 8001106:	4b5c      	ldr	r3, [pc, #368]	; (8001278 <Btc_RequestState+0x4ec>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a5c      	ldr	r2, [pc, #368]	; (800127c <Btc_RequestState+0x4f0>)
 800110c:	8812      	ldrh	r2, [r2, #0]
 800110e:	4619      	mov	r1, r3
 8001110:	4855      	ldr	r0, [pc, #340]	; (8001268 <Btc_RequestState+0x4dc>)
 8001112:	f00b fc37 	bl	800c984 <HAL_UART_Transmit_IT>
 8001116:	4603      	mov	r3, r0
 8001118:	2b02      	cmp	r3, #2
 800111a:	d0f4      	beq.n	8001106 <Btc_RequestState+0x37a>
			Rte_Runnable_Wdg_MainFunction();
 800111c:	f011 f806 	bl	801212c <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(ExtLights_DtcArray[9] != 0)
 8001120:	4b52      	ldr	r3, [pc, #328]	; (800126c <Btc_RequestState+0x4e0>)
 8001122:	7a5b      	ldrb	r3, [r3, #9]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d00d      	beq.n	8001144 <Btc_RequestState+0x3b8>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcLeftBrakeLight, Btc_DtcDescriptionLength9) == HAL_BUSY);
 8001128:	bf00      	nop
 800112a:	4b55      	ldr	r3, [pc, #340]	; (8001280 <Btc_RequestState+0x4f4>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a55      	ldr	r2, [pc, #340]	; (8001284 <Btc_RequestState+0x4f8>)
 8001130:	8812      	ldrh	r2, [r2, #0]
 8001132:	4619      	mov	r1, r3
 8001134:	484c      	ldr	r0, [pc, #304]	; (8001268 <Btc_RequestState+0x4dc>)
 8001136:	f00b fc25 	bl	800c984 <HAL_UART_Transmit_IT>
 800113a:	4603      	mov	r3, r0
 800113c:	2b02      	cmp	r3, #2
 800113e:	d0f4      	beq.n	800112a <Btc_RequestState+0x39e>
			Rte_Runnable_Wdg_MainFunction();
 8001140:	f010 fff4 	bl	801212c <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[10] != 0)
 8001144:	4b50      	ldr	r3, [pc, #320]	; (8001288 <Btc_RequestState+0x4fc>)
 8001146:	7a9b      	ldrb	r3, [r3, #10]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d00d      	beq.n	8001168 <Btc_RequestState+0x3dc>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcLightSensor, Btc_DtcDescriptionLength10) == HAL_BUSY);
 800114c:	bf00      	nop
 800114e:	4b4f      	ldr	r3, [pc, #316]	; (800128c <Btc_RequestState+0x500>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a4f      	ldr	r2, [pc, #316]	; (8001290 <Btc_RequestState+0x504>)
 8001154:	8812      	ldrh	r2, [r2, #0]
 8001156:	4619      	mov	r1, r3
 8001158:	4843      	ldr	r0, [pc, #268]	; (8001268 <Btc_RequestState+0x4dc>)
 800115a:	f00b fc13 	bl	800c984 <HAL_UART_Transmit_IT>
 800115e:	4603      	mov	r3, r0
 8001160:	2b02      	cmp	r3, #2
 8001162:	d0f4      	beq.n	800114e <Btc_RequestState+0x3c2>
			Rte_Runnable_Wdg_MainFunction();
 8001164:	f010 ffe2 	bl	801212c <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[11] != 0)
 8001168:	4b47      	ldr	r3, [pc, #284]	; (8001288 <Btc_RequestState+0x4fc>)
 800116a:	7adb      	ldrb	r3, [r3, #11]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d00d      	beq.n	800118c <Btc_RequestState+0x400>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcVibrationSensor, Btc_DtcDescriptionLength11) == HAL_BUSY);
 8001170:	bf00      	nop
 8001172:	4b48      	ldr	r3, [pc, #288]	; (8001294 <Btc_RequestState+0x508>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a48      	ldr	r2, [pc, #288]	; (8001298 <Btc_RequestState+0x50c>)
 8001178:	8812      	ldrh	r2, [r2, #0]
 800117a:	4619      	mov	r1, r3
 800117c:	483a      	ldr	r0, [pc, #232]	; (8001268 <Btc_RequestState+0x4dc>)
 800117e:	f00b fc01 	bl	800c984 <HAL_UART_Transmit_IT>
 8001182:	4603      	mov	r3, r0
 8001184:	2b02      	cmp	r3, #2
 8001186:	d0f4      	beq.n	8001172 <Btc_RequestState+0x3e6>
			Rte_Runnable_Wdg_MainFunction();
 8001188:	f010 ffd0 	bl	801212c <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[13] != 0)
 800118c:	4b3e      	ldr	r3, [pc, #248]	; (8001288 <Btc_RequestState+0x4fc>)
 800118e:	7b5b      	ldrb	r3, [r3, #13]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d00d      	beq.n	80011b0 <Btc_RequestState+0x424>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcTemperatureSensor, Btc_DtcDescriptionLength12) == HAL_BUSY);
 8001194:	bf00      	nop
 8001196:	4b41      	ldr	r3, [pc, #260]	; (800129c <Btc_RequestState+0x510>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a41      	ldr	r2, [pc, #260]	; (80012a0 <Btc_RequestState+0x514>)
 800119c:	8812      	ldrh	r2, [r2, #0]
 800119e:	4619      	mov	r1, r3
 80011a0:	4831      	ldr	r0, [pc, #196]	; (8001268 <Btc_RequestState+0x4dc>)
 80011a2:	f00b fbef 	bl	800c984 <HAL_UART_Transmit_IT>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d0f4      	beq.n	8001196 <Btc_RequestState+0x40a>
			Rte_Runnable_Wdg_MainFunction();
 80011ac:	f010 ffbe 	bl	801212c <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[14] != 0)
 80011b0:	4b35      	ldr	r3, [pc, #212]	; (8001288 <Btc_RequestState+0x4fc>)
 80011b2:	7b9b      	ldrb	r3, [r3, #14]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d00d      	beq.n	80011d4 <Btc_RequestState+0x448>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcRearParkingSensor, Btc_DtcDescriptionLength13) == HAL_BUSY);
 80011b8:	bf00      	nop
 80011ba:	4b3a      	ldr	r3, [pc, #232]	; (80012a4 <Btc_RequestState+0x518>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a3a      	ldr	r2, [pc, #232]	; (80012a8 <Btc_RequestState+0x51c>)
 80011c0:	8812      	ldrh	r2, [r2, #0]
 80011c2:	4619      	mov	r1, r3
 80011c4:	4828      	ldr	r0, [pc, #160]	; (8001268 <Btc_RequestState+0x4dc>)
 80011c6:	f00b fbdd 	bl	800c984 <HAL_UART_Transmit_IT>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d0f4      	beq.n	80011ba <Btc_RequestState+0x42e>
			Rte_Runnable_Wdg_MainFunction();
 80011d0:	f010 ffac 	bl	801212c <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[15] != 0)
 80011d4:	4b2c      	ldr	r3, [pc, #176]	; (8001288 <Btc_RequestState+0x4fc>)
 80011d6:	7bdb      	ldrb	r3, [r3, #15]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d00d      	beq.n	80011f8 <Btc_RequestState+0x46c>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcFrontParkingSensor, Btc_DtcDescriptionLength14) == HAL_BUSY);
 80011dc:	bf00      	nop
 80011de:	4b33      	ldr	r3, [pc, #204]	; (80012ac <Btc_RequestState+0x520>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a33      	ldr	r2, [pc, #204]	; (80012b0 <Btc_RequestState+0x524>)
 80011e4:	8812      	ldrh	r2, [r2, #0]
 80011e6:	4619      	mov	r1, r3
 80011e8:	481f      	ldr	r0, [pc, #124]	; (8001268 <Btc_RequestState+0x4dc>)
 80011ea:	f00b fbcb 	bl	800c984 <HAL_UART_Transmit_IT>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d0f4      	beq.n	80011de <Btc_RequestState+0x452>
			Rte_Runnable_Wdg_MainFunction();
 80011f4:	f010 ff9a 	bl	801212c <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[20] != 0)
 80011f8:	4b23      	ldr	r3, [pc, #140]	; (8001288 <Btc_RequestState+0x4fc>)
 80011fa:	7d1b      	ldrb	r3, [r3, #20]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00d      	beq.n	800121c <Btc_RequestState+0x490>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcLcd, Btc_DtcDescriptionLength15) == HAL_BUSY);
 8001200:	bf00      	nop
 8001202:	4b2c      	ldr	r3, [pc, #176]	; (80012b4 <Btc_RequestState+0x528>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a2c      	ldr	r2, [pc, #176]	; (80012b8 <Btc_RequestState+0x52c>)
 8001208:	8812      	ldrh	r2, [r2, #0]
 800120a:	4619      	mov	r1, r3
 800120c:	4816      	ldr	r0, [pc, #88]	; (8001268 <Btc_RequestState+0x4dc>)
 800120e:	f00b fbb9 	bl	800c984 <HAL_UART_Transmit_IT>
 8001212:	4603      	mov	r3, r0
 8001214:	2b02      	cmp	r3, #2
 8001216:	d0f4      	beq.n	8001202 <Btc_RequestState+0x476>
			Rte_Runnable_Wdg_MainFunction();
 8001218:	f010 ff88 	bl	801212c <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[21] != 0 || Dem_DtcArray[22] != 0 || Dem_DtcArray[23] != 0)
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <Btc_RequestState+0x4fc>)
 800121e:	7d5b      	ldrb	r3, [r3, #21]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d107      	bne.n	8001234 <Btc_RequestState+0x4a8>
 8001224:	4b18      	ldr	r3, [pc, #96]	; (8001288 <Btc_RequestState+0x4fc>)
 8001226:	7d9b      	ldrb	r3, [r3, #22]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d103      	bne.n	8001234 <Btc_RequestState+0x4a8>
 800122c:	4b16      	ldr	r3, [pc, #88]	; (8001288 <Btc_RequestState+0x4fc>)
 800122e:	7ddb      	ldrb	r3, [r3, #23]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d00d      	beq.n	8001250 <Btc_RequestState+0x4c4>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcHardware, Btc_DtcDescriptionLength16) == HAL_BUSY);
 8001234:	bf00      	nop
 8001236:	4b21      	ldr	r3, [pc, #132]	; (80012bc <Btc_RequestState+0x530>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a21      	ldr	r2, [pc, #132]	; (80012c0 <Btc_RequestState+0x534>)
 800123c:	8812      	ldrh	r2, [r2, #0]
 800123e:	4619      	mov	r1, r3
 8001240:	4809      	ldr	r0, [pc, #36]	; (8001268 <Btc_RequestState+0x4dc>)
 8001242:	f00b fb9f 	bl	800c984 <HAL_UART_Transmit_IT>
 8001246:	4603      	mov	r3, r0
 8001248:	2b02      	cmp	r3, #2
 800124a:	d0f4      	beq.n	8001236 <Btc_RequestState+0x4aa>
			Rte_Runnable_Wdg_MainFunction();
 800124c:	f010 ff6e 	bl	801212c <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		Rte_Runnable_Wdg_MainFunction();
 8001250:	f010 ff6c 	bl	801212c <Rte_Runnable_Wdg_MainFunction>
		Btc_ReceivedDataOnBluetooth = 0;
 8001254:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <Btc_RequestState+0x538>)
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000018 	.word	0x20000018
 8001264:	20000106 	.word	0x20000106
 8001268:	20000814 	.word	0x20000814
 800126c:	20000170 	.word	0x20000170
 8001270:	2000001c 	.word	0x2000001c
 8001274:	20000108 	.word	0x20000108
 8001278:	20000024 	.word	0x20000024
 800127c:	2000010a 	.word	0x2000010a
 8001280:	20000020 	.word	0x20000020
 8001284:	2000010c 	.word	0x2000010c
 8001288:	20000894 	.word	0x20000894
 800128c:	20000028 	.word	0x20000028
 8001290:	2000010e 	.word	0x2000010e
 8001294:	2000002c 	.word	0x2000002c
 8001298:	20000110 	.word	0x20000110
 800129c:	20000030 	.word	0x20000030
 80012a0:	20000112 	.word	0x20000112
 80012a4:	20000034 	.word	0x20000034
 80012a8:	20000114 	.word	0x20000114
 80012ac:	20000038 	.word	0x20000038
 80012b0:	20000116 	.word	0x20000116
 80012b4:	2000003c 	.word	0x2000003c
 80012b8:	20000118 	.word	0x20000118
 80012bc:	20000040 	.word	0x20000040
 80012c0:	2000011a 	.word	0x2000011a
 80012c4:	200000e2 	.word	0x200000e2

080012c8 <Btc_RxVal>:
/***********************************************************************************
* Function: Btc_RxVal													   		   *
* Description: Process bluetooth commands.	 		   							   *
************************************************************************************/
VOID Btc_RxVal()
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
	if(Rte_Call_Crc_R_CrcPort_Crc_VerifyUartData() == E_OK)
 80012cc:	f011 f950 	bl	8012570 <Crc_VerifyUartData>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f040 832d 	bne.w	8001932 <Btc_RxVal+0x66a>
	{
		if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80012d8:	4bbc      	ldr	r3, [pc, #752]	; (80015cc <Btc_RxVal+0x304>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d11d      	bne.n	800131c <Btc_RxVal+0x54>
		{
			if(Btc_ReceivedDataOnBluetooth >= BTC_RX_HVAC_FANVALUE_MIN &&
 80012e0:	4bbb      	ldr	r3, [pc, #748]	; (80015d0 <Btc_RxVal+0x308>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b1d      	cmp	r3, #29
 80012e6:	d90a      	bls.n	80012fe <Btc_RxVal+0x36>
				Btc_ReceivedDataOnBluetooth <= BTC_RX_HVAC_FANVALUE_MAX)
 80012e8:	4bb9      	ldr	r3, [pc, #740]	; (80015d0 <Btc_RxVal+0x308>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
			if(Btc_ReceivedDataOnBluetooth >= BTC_RX_HVAC_FANVALUE_MIN &&
 80012ec:	2b25      	cmp	r3, #37	; 0x25
 80012ee:	d806      	bhi.n	80012fe <Btc_RxVal+0x36>
			{
				Btc_FanValue = Btc_ReceivedDataOnBluetooth;
 80012f0:	4bb7      	ldr	r3, [pc, #732]	; (80015d0 <Btc_RxVal+0x308>)
 80012f2:	781a      	ldrb	r2, [r3, #0]
 80012f4:	4bb7      	ldr	r3, [pc, #732]	; (80015d4 <Btc_RxVal+0x30c>)
 80012f6:	701a      	strb	r2, [r3, #0]
				Rte_Write_Hvac_HvacPort_Hvac_FanValue(&Btc_FanValue);
 80012f8:	48b6      	ldr	r0, [pc, #728]	; (80015d4 <Btc_RxVal+0x30c>)
 80012fa:	f010 fd21 	bl	8011d40 <Rte_Write_Hvac_HvacPort_Hvac_FanValue>
			else
			{
				/* do nothing */
			}

			if(Btc_ReceivedDataOnBluetooth >= BTC_RX_HVAC_TEMPERATUREVALUE_MIN &&
 80012fe:	4bb4      	ldr	r3, [pc, #720]	; (80015d0 <Btc_RxVal+0x308>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b25      	cmp	r3, #37	; 0x25
 8001304:	d90a      	bls.n	800131c <Btc_RxVal+0x54>
					Btc_ReceivedDataOnBluetooth <= BTC_RX_HVAC_TEMPERATUREVALUE_MAX)
 8001306:	4bb2      	ldr	r3, [pc, #712]	; (80015d0 <Btc_RxVal+0x308>)
 8001308:	781b      	ldrb	r3, [r3, #0]
			if(Btc_ReceivedDataOnBluetooth >= BTC_RX_HVAC_TEMPERATUREVALUE_MIN &&
 800130a:	2b36      	cmp	r3, #54	; 0x36
 800130c:	d806      	bhi.n	800131c <Btc_RxVal+0x54>
			{
				Btc_TemperatureValue = Btc_ReceivedDataOnBluetooth;
 800130e:	4bb0      	ldr	r3, [pc, #704]	; (80015d0 <Btc_RxVal+0x308>)
 8001310:	781a      	ldrb	r2, [r3, #0]
 8001312:	4bb1      	ldr	r3, [pc, #708]	; (80015d8 <Btc_RxVal+0x310>)
 8001314:	701a      	strb	r2, [r3, #0]
				Rte_Write_Hvac_HvacPort_Hvac_TemperatureValue(&Btc_TemperatureValue);
 8001316:	48b0      	ldr	r0, [pc, #704]	; (80015d8 <Btc_RxVal+0x310>)
 8001318:	f010 fd24 	bl	8011d64 <Rte_Write_Hvac_HvacPort_Hvac_TemperatureValue>
		{
			/* do nothing */
		}

		/* Process the command on each case and update the respective variable. */
		switch(Btc_ReceivedDataOnBluetooth)
 800131c:	4bac      	ldr	r3, [pc, #688]	; (80015d0 <Btc_RxVal+0x308>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	3b01      	subs	r3, #1
 8001322:	2b46      	cmp	r3, #70	; 0x46
 8001324:	f200 829b 	bhi.w	800185e <Btc_RxVal+0x596>
 8001328:	a201      	add	r2, pc, #4	; (adr r2, 8001330 <Btc_RxVal+0x68>)
 800132a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132e:	bf00      	nop
 8001330:	080016a9 	.word	0x080016a9
 8001334:	080016b7 	.word	0x080016b7
 8001338:	080016c5 	.word	0x080016c5
 800133c:	080016e3 	.word	0x080016e3
 8001340:	0800185f 	.word	0x0800185f
 8001344:	0800185f 	.word	0x0800185f
 8001348:	080016fb 	.word	0x080016fb
 800134c:	0800171f 	.word	0x0800171f
 8001350:	08001737 	.word	0x08001737
 8001354:	0800175b 	.word	0x0800175b
 8001358:	08001773 	.word	0x08001773
 800135c:	0800178b 	.word	0x0800178b
 8001360:	080017a3 	.word	0x080017a3
 8001364:	080017bb 	.word	0x080017bb
 8001368:	080017d3 	.word	0x080017d3
 800136c:	080017eb 	.word	0x080017eb
 8001370:	08001803 	.word	0x08001803
 8001374:	0800181b 	.word	0x0800181b
 8001378:	08001833 	.word	0x08001833
 800137c:	08001849 	.word	0x08001849
 8001380:	08001619 	.word	0x08001619
 8001384:	08001631 	.word	0x08001631
 8001388:	08001649 	.word	0x08001649
 800138c:	08001661 	.word	0x08001661
 8001390:	08001679 	.word	0x08001679
 8001394:	08001691 	.word	0x08001691
 8001398:	0800185f 	.word	0x0800185f
 800139c:	0800185f 	.word	0x0800185f
 80013a0:	0800185f 	.word	0x0800185f
 80013a4:	0800185f 	.word	0x0800185f
 80013a8:	0800185f 	.word	0x0800185f
 80013ac:	0800185f 	.word	0x0800185f
 80013b0:	0800185f 	.word	0x0800185f
 80013b4:	0800185f 	.word	0x0800185f
 80013b8:	0800185f 	.word	0x0800185f
 80013bc:	0800185f 	.word	0x0800185f
 80013c0:	0800185f 	.word	0x0800185f
 80013c4:	0800185f 	.word	0x0800185f
 80013c8:	0800185f 	.word	0x0800185f
 80013cc:	0800185f 	.word	0x0800185f
 80013d0:	0800185f 	.word	0x0800185f
 80013d4:	0800185f 	.word	0x0800185f
 80013d8:	0800185f 	.word	0x0800185f
 80013dc:	0800185f 	.word	0x0800185f
 80013e0:	0800185f 	.word	0x0800185f
 80013e4:	0800185f 	.word	0x0800185f
 80013e8:	0800185f 	.word	0x0800185f
 80013ec:	0800185f 	.word	0x0800185f
 80013f0:	0800185f 	.word	0x0800185f
 80013f4:	0800185f 	.word	0x0800185f
 80013f8:	0800185f 	.word	0x0800185f
 80013fc:	0800185f 	.word	0x0800185f
 8001400:	0800185f 	.word	0x0800185f
 8001404:	0800185f 	.word	0x0800185f
 8001408:	0800144d 	.word	0x0800144d
 800140c:	08001465 	.word	0x08001465
 8001410:	0800147d 	.word	0x0800147d
 8001414:	08001495 	.word	0x08001495
 8001418:	080014ad 	.word	0x080014ad
 800141c:	080014c5 	.word	0x080014c5
 8001420:	080014dd 	.word	0x080014dd
 8001424:	080014f5 	.word	0x080014f5
 8001428:	0800153d 	.word	0x0800153d
 800142c:	08001555 	.word	0x08001555
 8001430:	0800156d 	.word	0x0800156d
 8001434:	08001591 	.word	0x08001591
 8001438:	0800185f 	.word	0x0800185f
 800143c:	080015b5 	.word	0x080015b5
 8001440:	08001601 	.word	0x08001601
 8001444:	0800150d 	.word	0x0800150d
 8001448:	08001525 	.word	0x08001525
		{
			case BTC_RX_HVAC_LEGVENT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800144c:	4b5f      	ldr	r3, [pc, #380]	; (80015cc <Btc_RxVal+0x304>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b01      	cmp	r3, #1
 8001452:	f040 8206 	bne.w	8001862 <Btc_RxVal+0x59a>
				{
					Btc_LegVent = STD_HIGH;
 8001456:	4b61      	ldr	r3, [pc, #388]	; (80015dc <Btc_RxVal+0x314>)
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_LegVent(&Btc_LegVent);
 800145c:	485f      	ldr	r0, [pc, #380]	; (80015dc <Btc_RxVal+0x314>)
 800145e:	f010 fc93 	bl	8011d88 <Rte_Write_Hvac_HvacPort_Hvac_LegVent>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001462:	e1fe      	b.n	8001862 <Btc_RxVal+0x59a>
			case BTC_RX_HVAC_LEGVENT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001464:	4b59      	ldr	r3, [pc, #356]	; (80015cc <Btc_RxVal+0x304>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b01      	cmp	r3, #1
 800146a:	f040 81fc 	bne.w	8001866 <Btc_RxVal+0x59e>
				{
					Btc_LegVent = STD_LOW;
 800146e:	4b5b      	ldr	r3, [pc, #364]	; (80015dc <Btc_RxVal+0x314>)
 8001470:	2200      	movs	r2, #0
 8001472:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_LegVent(&Btc_LegVent);
 8001474:	4859      	ldr	r0, [pc, #356]	; (80015dc <Btc_RxVal+0x314>)
 8001476:	f010 fc87 	bl	8011d88 <Rte_Write_Hvac_HvacPort_Hvac_LegVent>
				}
				else
				{
					/* do nothing */
				}
				break;
 800147a:	e1f4      	b.n	8001866 <Btc_RxVal+0x59e>
			case BTC_RX_HVAC_MIDVENT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800147c:	4b53      	ldr	r3, [pc, #332]	; (80015cc <Btc_RxVal+0x304>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b01      	cmp	r3, #1
 8001482:	f040 81f2 	bne.w	800186a <Btc_RxVal+0x5a2>
				{
					Btc_MidVent = STD_HIGH;
 8001486:	4b56      	ldr	r3, [pc, #344]	; (80015e0 <Btc_RxVal+0x318>)
 8001488:	2201      	movs	r2, #1
 800148a:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_MidVent(&Btc_MidVent);
 800148c:	4854      	ldr	r0, [pc, #336]	; (80015e0 <Btc_RxVal+0x318>)
 800148e:	f010 fc8b 	bl	8011da8 <Rte_Write_Hvac_HvacPort_Hvac_MidVent>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001492:	e1ea      	b.n	800186a <Btc_RxVal+0x5a2>
			case BTC_RX_HVAC_MIDVENT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001494:	4b4d      	ldr	r3, [pc, #308]	; (80015cc <Btc_RxVal+0x304>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b01      	cmp	r3, #1
 800149a:	f040 81e8 	bne.w	800186e <Btc_RxVal+0x5a6>
				{
					Btc_MidVent = STD_LOW;
 800149e:	4b50      	ldr	r3, [pc, #320]	; (80015e0 <Btc_RxVal+0x318>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_MidVent(&Btc_MidVent);
 80014a4:	484e      	ldr	r0, [pc, #312]	; (80015e0 <Btc_RxVal+0x318>)
 80014a6:	f010 fc7f 	bl	8011da8 <Rte_Write_Hvac_HvacPort_Hvac_MidVent>
				}
				else
				{
					/* do nothing */
				}
				break;
 80014aa:	e1e0      	b.n	800186e <Btc_RxVal+0x5a6>
			case BTC_RX_HVAC_WINDSHIELDVENT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80014ac:	4b47      	ldr	r3, [pc, #284]	; (80015cc <Btc_RxVal+0x304>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	f040 81de 	bne.w	8001872 <Btc_RxVal+0x5aa>
				{
					Btc_WindshieldVent = STD_HIGH;
 80014b6:	4b4b      	ldr	r3, [pc, #300]	; (80015e4 <Btc_RxVal+0x31c>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_WindshieldVent(&Btc_WindshieldVent);
 80014bc:	4849      	ldr	r0, [pc, #292]	; (80015e4 <Btc_RxVal+0x31c>)
 80014be:	f010 fc83 	bl	8011dc8 <Rte_Write_Hvac_HvacPort_Hvac_WindshieldVent>
				}
				else
				{
					/* do nothing */
				}
				break;
 80014c2:	e1d6      	b.n	8001872 <Btc_RxVal+0x5aa>
			case BTC_RX_HVAC_WINDSHIELDVENT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80014c4:	4b41      	ldr	r3, [pc, #260]	; (80015cc <Btc_RxVal+0x304>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	f040 81d4 	bne.w	8001876 <Btc_RxVal+0x5ae>
				{
					Btc_WindshieldVent = STD_LOW;
 80014ce:	4b45      	ldr	r3, [pc, #276]	; (80015e4 <Btc_RxVal+0x31c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_WindshieldVent(&Btc_WindshieldVent);
 80014d4:	4843      	ldr	r0, [pc, #268]	; (80015e4 <Btc_RxVal+0x31c>)
 80014d6:	f010 fc77 	bl	8011dc8 <Rte_Write_Hvac_HvacPort_Hvac_WindshieldVent>
				}
				else
				{
					/* do nothing */
				}
				break;
 80014da:	e1cc      	b.n	8001876 <Btc_RxVal+0x5ae>
			case BTC_RX_HVAC_WINDSHIELDDEFROST_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80014dc:	4b3b      	ldr	r3, [pc, #236]	; (80015cc <Btc_RxVal+0x304>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	f040 81ca 	bne.w	800187a <Btc_RxVal+0x5b2>
				{
					Btc_WindshieldDefrost = STD_HIGH;
 80014e6:	4b40      	ldr	r3, [pc, #256]	; (80015e8 <Btc_RxVal+0x320>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_WindshieldDefrost(&Btc_WindshieldDefrost);
 80014ec:	483e      	ldr	r0, [pc, #248]	; (80015e8 <Btc_RxVal+0x320>)
 80014ee:	f010 fc7b 	bl	8011de8 <Rte_Write_Hvac_HvacPort_Hvac_WindshieldDefrost>
				}
				else
				{
					/* do nothing */
				}
				break;
 80014f2:	e1c2      	b.n	800187a <Btc_RxVal+0x5b2>
			case BTC_RX_HVAC_WINDSHIELDDEFROST_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80014f4:	4b35      	ldr	r3, [pc, #212]	; (80015cc <Btc_RxVal+0x304>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	f040 81c0 	bne.w	800187e <Btc_RxVal+0x5b6>
				{
					Btc_WindshieldDefrost = STD_LOW;
 80014fe:	4b3a      	ldr	r3, [pc, #232]	; (80015e8 <Btc_RxVal+0x320>)
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_WindshieldDefrost(&Btc_WindshieldDefrost);
 8001504:	4838      	ldr	r0, [pc, #224]	; (80015e8 <Btc_RxVal+0x320>)
 8001506:	f010 fc6f 	bl	8011de8 <Rte_Write_Hvac_HvacPort_Hvac_WindshieldDefrost>
				}
				else
				{
					/* do nothing */
				}
				break;
 800150a:	e1b8      	b.n	800187e <Btc_RxVal+0x5b6>
			case BTC_RX_HVAC_REARWINDSHIELDDEFROST_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800150c:	4b2f      	ldr	r3, [pc, #188]	; (80015cc <Btc_RxVal+0x304>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b01      	cmp	r3, #1
 8001512:	f040 81b6 	bne.w	8001882 <Btc_RxVal+0x5ba>
				{
					Btc_RearWindshieldDefrost = STD_HIGH;
 8001516:	4b35      	ldr	r3, [pc, #212]	; (80015ec <Btc_RxVal+0x324>)
 8001518:	2201      	movs	r2, #1
 800151a:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_RearWindshieldDefrost(&Btc_RearWindshieldDefrost);
 800151c:	4833      	ldr	r0, [pc, #204]	; (80015ec <Btc_RxVal+0x324>)
 800151e:	f010 fc73 	bl	8011e08 <Rte_Write_Hvac_HvacPort_Hvac_RearWindshieldDefrost>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001522:	e1ae      	b.n	8001882 <Btc_RxVal+0x5ba>
			case BTC_RX_HVAC_REARWINDSHIELDDEFROST_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001524:	4b29      	ldr	r3, [pc, #164]	; (80015cc <Btc_RxVal+0x304>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b01      	cmp	r3, #1
 800152a:	f040 81ac 	bne.w	8001886 <Btc_RxVal+0x5be>
				{
					Btc_RearWindshieldDefrost = STD_LOW;
 800152e:	4b2f      	ldr	r3, [pc, #188]	; (80015ec <Btc_RxVal+0x324>)
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_RearWindshieldDefrost(&Btc_RearWindshieldDefrost);
 8001534:	482d      	ldr	r0, [pc, #180]	; (80015ec <Btc_RxVal+0x324>)
 8001536:	f010 fc67 	bl	8011e08 <Rte_Write_Hvac_HvacPort_Hvac_RearWindshieldDefrost>
				}
				else
				{
					/* do nothing */
				}
				break;
 800153a:	e1a4      	b.n	8001886 <Btc_RxVal+0x5be>
			case BTC_RX_HVAC_AC_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800153c:	4b23      	ldr	r3, [pc, #140]	; (80015cc <Btc_RxVal+0x304>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b01      	cmp	r3, #1
 8001542:	f040 81a2 	bne.w	800188a <Btc_RxVal+0x5c2>
				{
					Btc_Ac = STD_HIGH;
 8001546:	4b2a      	ldr	r3, [pc, #168]	; (80015f0 <Btc_RxVal+0x328>)
 8001548:	2201      	movs	r2, #1
 800154a:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_Ac(&Btc_Ac);
 800154c:	4828      	ldr	r0, [pc, #160]	; (80015f0 <Btc_RxVal+0x328>)
 800154e:	f010 fc6b 	bl	8011e28 <Rte_Write_Hvac_HvacPort_Hvac_Ac>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001552:	e19a      	b.n	800188a <Btc_RxVal+0x5c2>
			case BTC_RX_HVAC_AC_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001554:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <Btc_RxVal+0x304>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b01      	cmp	r3, #1
 800155a:	f040 8198 	bne.w	800188e <Btc_RxVal+0x5c6>
				{
					Btc_Ac = STD_LOW;
 800155e:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <Btc_RxVal+0x328>)
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_Ac(&Btc_Ac);
 8001564:	4822      	ldr	r0, [pc, #136]	; (80015f0 <Btc_RxVal+0x328>)
 8001566:	f010 fc5f 	bl	8011e28 <Rte_Write_Hvac_HvacPort_Hvac_Ac>
				}
				else
				{
					/* do nothing */
				}
				break;
 800156a:	e190      	b.n	800188e <Btc_RxVal+0x5c6>
			case BTC_RX_HVAC_RECIRCULATION:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800156c:	4b17      	ldr	r3, [pc, #92]	; (80015cc <Btc_RxVal+0x304>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b01      	cmp	r3, #1
 8001572:	f040 818e 	bne.w	8001892 <Btc_RxVal+0x5ca>
				{
					Btc_Recirculation = STD_HIGH;
 8001576:	4b1f      	ldr	r3, [pc, #124]	; (80015f4 <Btc_RxVal+0x32c>)
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
					Btc_NoRecirculation = STD_LOW;
 800157c:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <Btc_RxVal+0x330>)
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_Recirculation(&Btc_Recirculation);
 8001582:	481c      	ldr	r0, [pc, #112]	; (80015f4 <Btc_RxVal+0x32c>)
 8001584:	f010 fc60 	bl	8011e48 <Rte_Write_Hvac_HvacPort_Hvac_Recirculation>
					Rte_Write_Hvac_HvacPort_Hvac_NoRecirculation(&Btc_NoRecirculation);
 8001588:	481b      	ldr	r0, [pc, #108]	; (80015f8 <Btc_RxVal+0x330>)
 800158a:	f010 fc6d 	bl	8011e68 <Rte_Write_Hvac_HvacPort_Hvac_NoRecirculation>
				}
				else
				{
					/* do nothing */
				}
				break;
 800158e:	e180      	b.n	8001892 <Btc_RxVal+0x5ca>
			case BTC_RX_HVAC_NORECIRCULATION:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001590:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <Btc_RxVal+0x304>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b01      	cmp	r3, #1
 8001596:	f040 817e 	bne.w	8001896 <Btc_RxVal+0x5ce>
				{
					Btc_Recirculation = STD_LOW;
 800159a:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <Btc_RxVal+0x32c>)
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
					Btc_NoRecirculation = STD_HIGH;
 80015a0:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <Btc_RxVal+0x330>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_Recirculation(&Btc_Recirculation);
 80015a6:	4813      	ldr	r0, [pc, #76]	; (80015f4 <Btc_RxVal+0x32c>)
 80015a8:	f010 fc4e 	bl	8011e48 <Rte_Write_Hvac_HvacPort_Hvac_Recirculation>
					Rte_Write_Hvac_HvacPort_Hvac_NoRecirculation(&Btc_NoRecirculation);
 80015ac:	4812      	ldr	r0, [pc, #72]	; (80015f8 <Btc_RxVal+0x330>)
 80015ae:	f010 fc5b 	bl	8011e68 <Rte_Write_Hvac_HvacPort_Hvac_NoRecirculation>
				}
				else
				{
					/* do nothing */
				}
				break;
 80015b2:	e170      	b.n	8001896 <Btc_RxVal+0x5ce>
			case BTC_RX_HVAC_AUTOMATICMODE_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80015b4:	4b05      	ldr	r3, [pc, #20]	; (80015cc <Btc_RxVal+0x304>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	f040 816e 	bne.w	800189a <Btc_RxVal+0x5d2>
				{
					Btc_AutomaticMode = STD_HIGH;
 80015be:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <Btc_RxVal+0x334>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_AutomaticMode(&Btc_AutomaticMode);
 80015c4:	480d      	ldr	r0, [pc, #52]	; (80015fc <Btc_RxVal+0x334>)
 80015c6:	f010 fc5f 	bl	8011e88 <Rte_Write_Hvac_HvacPort_Hvac_AutomaticMode>
				}
				else
				{
					/* do nothing */
				}
				break;
 80015ca:	e166      	b.n	800189a <Btc_RxVal+0x5d2>
 80015cc:	20000120 	.word	0x20000120
 80015d0:	200000e2 	.word	0x200000e2
 80015d4:	200000ef 	.word	0x200000ef
 80015d8:	200000f0 	.word	0x200000f0
 80015dc:	200000f1 	.word	0x200000f1
 80015e0:	200000f2 	.word	0x200000f2
 80015e4:	200000f3 	.word	0x200000f3
 80015e8:	200000f4 	.word	0x200000f4
 80015ec:	200000f5 	.word	0x200000f5
 80015f0:	200000f6 	.word	0x200000f6
 80015f4:	200000f7 	.word	0x200000f7
 80015f8:	200000f8 	.word	0x200000f8
 80015fc:	200000f9 	.word	0x200000f9
			case BTC_RX_HVAC_AUTOMATICMODE_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001600:	4ba9      	ldr	r3, [pc, #676]	; (80018a8 <Btc_RxVal+0x5e0>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b01      	cmp	r3, #1
 8001606:	f040 814a 	bne.w	800189e <Btc_RxVal+0x5d6>
				{
					Btc_AutomaticMode = STD_LOW;
 800160a:	4ba8      	ldr	r3, [pc, #672]	; (80018ac <Btc_RxVal+0x5e4>)
 800160c:	2200      	movs	r2, #0
 800160e:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_AutomaticMode(&Btc_AutomaticMode);
 8001610:	48a6      	ldr	r0, [pc, #664]	; (80018ac <Btc_RxVal+0x5e4>)
 8001612:	f010 fc39 	bl	8011e88 <Rte_Write_Hvac_HvacPort_Hvac_AutomaticMode>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001616:	e142      	b.n	800189e <Btc_RxVal+0x5d6>
			case BTC_RX_EXTLIGHTS_REVERSELIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001618:	4ba3      	ldr	r3, [pc, #652]	; (80018a8 <Btc_RxVal+0x5e0>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b01      	cmp	r3, #1
 800161e:	f040 8140 	bne.w	80018a2 <Btc_RxVal+0x5da>
				{
					Btc_ReverseLight = STD_HIGH;
 8001622:	4ba3      	ldr	r3, [pc, #652]	; (80018b0 <Btc_RxVal+0x5e8>)
 8001624:	2201      	movs	r2, #1
 8001626:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(&Btc_ReverseLight);
 8001628:	48a1      	ldr	r0, [pc, #644]	; (80018b0 <Btc_RxVal+0x5e8>)
 800162a:	f010 fe29 	bl	8012280 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 800162e:	e138      	b.n	80018a2 <Btc_RxVal+0x5da>
			case BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001630:	4b9d      	ldr	r3, [pc, #628]	; (80018a8 <Btc_RxVal+0x5e0>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b01      	cmp	r3, #1
 8001636:	f040 8153 	bne.w	80018e0 <Btc_RxVal+0x618>
				{
					Btc_ReverseLight = STD_LOW;
 800163a:	4b9d      	ldr	r3, [pc, #628]	; (80018b0 <Btc_RxVal+0x5e8>)
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(&Btc_ReverseLight);
 8001640:	489b      	ldr	r0, [pc, #620]	; (80018b0 <Btc_RxVal+0x5e8>)
 8001642:	f010 fe1d 	bl	8012280 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001646:	e14b      	b.n	80018e0 <Btc_RxVal+0x618>
			case BTC_RX_EXTLIGHTS_POSITIONZERO:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001648:	4b97      	ldr	r3, [pc, #604]	; (80018a8 <Btc_RxVal+0x5e0>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b01      	cmp	r3, #1
 800164e:	f040 8149 	bne.w	80018e4 <Btc_RxVal+0x61c>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONZERO;
 8001652:	4b98      	ldr	r3, [pc, #608]	; (80018b4 <Btc_RxVal+0x5ec>)
 8001654:	2217      	movs	r2, #23
 8001656:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 8001658:	4896      	ldr	r0, [pc, #600]	; (80018b4 <Btc_RxVal+0x5ec>)
 800165a:	f010 fe31 	bl	80122c0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 800165e:	e141      	b.n	80018e4 <Btc_RxVal+0x61c>
			case BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001660:	4b91      	ldr	r3, [pc, #580]	; (80018a8 <Btc_RxVal+0x5e0>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b01      	cmp	r3, #1
 8001666:	f040 813f 	bne.w	80018e8 <Btc_RxVal+0x620>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
 800166a:	4b92      	ldr	r3, [pc, #584]	; (80018b4 <Btc_RxVal+0x5ec>)
 800166c:	2218      	movs	r2, #24
 800166e:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 8001670:	4890      	ldr	r0, [pc, #576]	; (80018b4 <Btc_RxVal+0x5ec>)
 8001672:	f010 fe25 	bl	80122c0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001676:	e137      	b.n	80018e8 <Btc_RxVal+0x620>
			case BTC_RX_EXTLIGHTS_POSITIONLIGHTS:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001678:	4b8b      	ldr	r3, [pc, #556]	; (80018a8 <Btc_RxVal+0x5e0>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b01      	cmp	r3, #1
 800167e:	f040 8135 	bne.w	80018ec <Btc_RxVal+0x624>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
 8001682:	4b8c      	ldr	r3, [pc, #560]	; (80018b4 <Btc_RxVal+0x5ec>)
 8001684:	2219      	movs	r2, #25
 8001686:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 8001688:	488a      	ldr	r0, [pc, #552]	; (80018b4 <Btc_RxVal+0x5ec>)
 800168a:	f010 fe19 	bl	80122c0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 800168e:	e12d      	b.n	80018ec <Btc_RxVal+0x624>
			case BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001690:	4b85      	ldr	r3, [pc, #532]	; (80018a8 <Btc_RxVal+0x5e0>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b01      	cmp	r3, #1
 8001696:	f040 812b 	bne.w	80018f0 <Btc_RxVal+0x628>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
 800169a:	4b86      	ldr	r3, [pc, #536]	; (80018b4 <Btc_RxVal+0x5ec>)
 800169c:	221a      	movs	r2, #26
 800169e:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 80016a0:	4884      	ldr	r0, [pc, #528]	; (80018b4 <Btc_RxVal+0x5ec>)
 80016a2:	f010 fe0d 	bl	80122c0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80016a6:	e123      	b.n	80018f0 <Btc_RxVal+0x628>
			case BTC_RX_CENLOC_ON:
				Btc_CenLoc = STD_HIGH;
 80016a8:	4b83      	ldr	r3, [pc, #524]	; (80018b8 <Btc_RxVal+0x5f0>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	701a      	strb	r2, [r3, #0]
				Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(&Btc_CenLoc);
 80016ae:	4882      	ldr	r0, [pc, #520]	; (80018b8 <Btc_RxVal+0x5f0>)
 80016b0:	f010 fdc6 	bl	8012240 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>
				break;
 80016b4:	e13d      	b.n	8001932 <Btc_RxVal+0x66a>
			case BTC_RX_CENLOC_OFF:
				Btc_CenLoc = STD_LOW;
 80016b6:	4b80      	ldr	r3, [pc, #512]	; (80018b8 <Btc_RxVal+0x5f0>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]
				Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(&Btc_CenLoc);
 80016bc:	487e      	ldr	r0, [pc, #504]	; (80018b8 <Btc_RxVal+0x5f0>)
 80016be:	f010 fdbf 	bl	8012240 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>
				break;
 80016c2:	e136      	b.n	8001932 <Btc_RxVal+0x66a>
			case BTC_RX_EXTLIGHTS_HIGHBEAM_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80016c4:	4b78      	ldr	r3, [pc, #480]	; (80018a8 <Btc_RxVal+0x5e0>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	f040 8113 	bne.w	80018f4 <Btc_RxVal+0x62c>
				{
					Btc_HighBeam = STD_HIGH;
 80016ce:	4b7b      	ldr	r3, [pc, #492]	; (80018bc <Btc_RxVal+0x5f4>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	701a      	strb	r2, [r3, #0]
					Btc_FlashHighBeam = STD_LOW;
 80016d4:	4b7a      	ldr	r3, [pc, #488]	; (80018c0 <Btc_RxVal+0x5f8>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(&Btc_HighBeam);
 80016da:	4878      	ldr	r0, [pc, #480]	; (80018bc <Btc_RxVal+0x5f4>)
 80016dc:	f010 fe00 	bl	80122e0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80016e0:	e108      	b.n	80018f4 <Btc_RxVal+0x62c>
			case BTC_RX_EXTLIGHTS_HIGHBEAM_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80016e2:	4b71      	ldr	r3, [pc, #452]	; (80018a8 <Btc_RxVal+0x5e0>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	f040 8106 	bne.w	80018f8 <Btc_RxVal+0x630>
				{
					Btc_HighBeam = STD_LOW;
 80016ec:	4b73      	ldr	r3, [pc, #460]	; (80018bc <Btc_RxVal+0x5f4>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(&Btc_HighBeam);
 80016f2:	4872      	ldr	r0, [pc, #456]	; (80018bc <Btc_RxVal+0x5f4>)
 80016f4:	f010 fdf4 	bl	80122e0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80016f8:	e0fe      	b.n	80018f8 <Btc_RxVal+0x630>
			case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80016fa:	4b6b      	ldr	r3, [pc, #428]	; (80018a8 <Btc_RxVal+0x5e0>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	f040 80fc 	bne.w	80018fc <Btc_RxVal+0x634>
				{
					Btc_TurnSignalLeft = STD_HIGH;
 8001704:	4b6f      	ldr	r3, [pc, #444]	; (80018c4 <Btc_RxVal+0x5fc>)
 8001706:	2201      	movs	r2, #1
 8001708:	701a      	strb	r2, [r3, #0]
					Btc_TurnSignalRight = STD_LOW;
 800170a:	4b6f      	ldr	r3, [pc, #444]	; (80018c8 <Btc_RxVal+0x600>)
 800170c:	2200      	movs	r2, #0
 800170e:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 8001710:	486c      	ldr	r0, [pc, #432]	; (80018c4 <Btc_RxVal+0x5fc>)
 8001712:	f010 fe05 	bl	8012320 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 8001716:	486c      	ldr	r0, [pc, #432]	; (80018c8 <Btc_RxVal+0x600>)
 8001718:	f010 fe12 	bl	8012340 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 800171c:	e0ee      	b.n	80018fc <Btc_RxVal+0x634>
			case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800171e:	4b62      	ldr	r3, [pc, #392]	; (80018a8 <Btc_RxVal+0x5e0>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b01      	cmp	r3, #1
 8001724:	f040 80ec 	bne.w	8001900 <Btc_RxVal+0x638>
				{
					Btc_TurnSignalLeft = STD_LOW;
 8001728:	4b66      	ldr	r3, [pc, #408]	; (80018c4 <Btc_RxVal+0x5fc>)
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 800172e:	4865      	ldr	r0, [pc, #404]	; (80018c4 <Btc_RxVal+0x5fc>)
 8001730:	f010 fdf6 	bl	8012320 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001734:	e0e4      	b.n	8001900 <Btc_RxVal+0x638>
			case BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001736:	4b5c      	ldr	r3, [pc, #368]	; (80018a8 <Btc_RxVal+0x5e0>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b01      	cmp	r3, #1
 800173c:	f040 80e2 	bne.w	8001904 <Btc_RxVal+0x63c>
				{
					Btc_TurnSignalRight = STD_HIGH;
 8001740:	4b61      	ldr	r3, [pc, #388]	; (80018c8 <Btc_RxVal+0x600>)
 8001742:	2201      	movs	r2, #1
 8001744:	701a      	strb	r2, [r3, #0]
					Btc_TurnSignalLeft = STD_LOW;
 8001746:	4b5f      	ldr	r3, [pc, #380]	; (80018c4 <Btc_RxVal+0x5fc>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 800174c:	485d      	ldr	r0, [pc, #372]	; (80018c4 <Btc_RxVal+0x5fc>)
 800174e:	f010 fde7 	bl	8012320 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 8001752:	485d      	ldr	r0, [pc, #372]	; (80018c8 <Btc_RxVal+0x600>)
 8001754:	f010 fdf4 	bl	8012340 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001758:	e0d4      	b.n	8001904 <Btc_RxVal+0x63c>
			case BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800175a:	4b53      	ldr	r3, [pc, #332]	; (80018a8 <Btc_RxVal+0x5e0>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b01      	cmp	r3, #1
 8001760:	f040 80d2 	bne.w	8001908 <Btc_RxVal+0x640>
				{
					Btc_TurnSignalRight = STD_LOW;
 8001764:	4b58      	ldr	r3, [pc, #352]	; (80018c8 <Btc_RxVal+0x600>)
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 800176a:	4857      	ldr	r0, [pc, #348]	; (80018c8 <Btc_RxVal+0x600>)
 800176c:	f010 fde8 	bl	8012340 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001770:	e0ca      	b.n	8001908 <Btc_RxVal+0x640>
			case BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001772:	4b4d      	ldr	r3, [pc, #308]	; (80018a8 <Btc_RxVal+0x5e0>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b01      	cmp	r3, #1
 8001778:	f040 80c8 	bne.w	800190c <Btc_RxVal+0x644>
				{
					Btc_HazardLight = STD_HIGH;
 800177c:	4b53      	ldr	r3, [pc, #332]	; (80018cc <Btc_RxVal+0x604>)
 800177e:	2201      	movs	r2, #1
 8001780:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(&Btc_HazardLight);
 8001782:	4852      	ldr	r0, [pc, #328]	; (80018cc <Btc_RxVal+0x604>)
 8001784:	f010 fdec 	bl	8012360 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001788:	e0c0      	b.n	800190c <Btc_RxVal+0x644>
			case BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800178a:	4b47      	ldr	r3, [pc, #284]	; (80018a8 <Btc_RxVal+0x5e0>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b01      	cmp	r3, #1
 8001790:	f040 80be 	bne.w	8001910 <Btc_RxVal+0x648>
				{
					Btc_HazardLight = STD_LOW;
 8001794:	4b4d      	ldr	r3, [pc, #308]	; (80018cc <Btc_RxVal+0x604>)
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(&Btc_HazardLight);
 800179a:	484c      	ldr	r0, [pc, #304]	; (80018cc <Btc_RxVal+0x604>)
 800179c:	f010 fde0 	bl	8012360 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80017a0:	e0b6      	b.n	8001910 <Btc_RxVal+0x648>
			case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80017a2:	4b41      	ldr	r3, [pc, #260]	; (80018a8 <Btc_RxVal+0x5e0>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	f040 80b4 	bne.w	8001914 <Btc_RxVal+0x64c>
				{
					Btc_FrontFogLight = STD_HIGH;
 80017ac:	4b48      	ldr	r3, [pc, #288]	; (80018d0 <Btc_RxVal+0x608>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(&Btc_FrontFogLight);
 80017b2:	4847      	ldr	r0, [pc, #284]	; (80018d0 <Btc_RxVal+0x608>)
 80017b4:	f010 fda4 	bl	8012300 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80017b8:	e0ac      	b.n	8001914 <Btc_RxVal+0x64c>
			case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80017ba:	4b3b      	ldr	r3, [pc, #236]	; (80018a8 <Btc_RxVal+0x5e0>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	f040 80aa 	bne.w	8001918 <Btc_RxVal+0x650>
				{
					Btc_FrontFogLight = STD_LOW;
 80017c4:	4b42      	ldr	r3, [pc, #264]	; (80018d0 <Btc_RxVal+0x608>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(&Btc_FrontFogLight);
 80017ca:	4841      	ldr	r0, [pc, #260]	; (80018d0 <Btc_RxVal+0x608>)
 80017cc:	f010 fd98 	bl	8012300 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80017d0:	e0a2      	b.n	8001918 <Btc_RxVal+0x650>
			case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80017d2:	4b35      	ldr	r3, [pc, #212]	; (80018a8 <Btc_RxVal+0x5e0>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	f040 80a0 	bne.w	800191c <Btc_RxVal+0x654>
				{
					Btc_RearFogLight = STD_HIGH;
 80017dc:	4b3d      	ldr	r3, [pc, #244]	; (80018d4 <Btc_RxVal+0x60c>)
 80017de:	2201      	movs	r2, #1
 80017e0:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(&Btc_RearFogLight);
 80017e2:	483c      	ldr	r0, [pc, #240]	; (80018d4 <Btc_RxVal+0x60c>)
 80017e4:	f010 fdcc 	bl	8012380 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80017e8:	e098      	b.n	800191c <Btc_RxVal+0x654>
			case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80017ea:	4b2f      	ldr	r3, [pc, #188]	; (80018a8 <Btc_RxVal+0x5e0>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	f040 8096 	bne.w	8001920 <Btc_RxVal+0x658>
				{
					Btc_RearFogLight = STD_LOW;
 80017f4:	4b37      	ldr	r3, [pc, #220]	; (80018d4 <Btc_RxVal+0x60c>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(&Btc_RearFogLight);
 80017fa:	4836      	ldr	r0, [pc, #216]	; (80018d4 <Btc_RxVal+0x60c>)
 80017fc:	f010 fdc0 	bl	8012380 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001800:	e08e      	b.n	8001920 <Btc_RxVal+0x658>
			case BTC_RX_EXTLIGHTS_BRAKELIGHTON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001802:	4b29      	ldr	r3, [pc, #164]	; (80018a8 <Btc_RxVal+0x5e0>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b01      	cmp	r3, #1
 8001808:	f040 808c 	bne.w	8001924 <Btc_RxVal+0x65c>
				{
					Btc_BrakeLight = STD_HIGH;
 800180c:	4b32      	ldr	r3, [pc, #200]	; (80018d8 <Btc_RxVal+0x610>)
 800180e:	2201      	movs	r2, #1
 8001810:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(&Btc_BrakeLight);
 8001812:	4831      	ldr	r0, [pc, #196]	; (80018d8 <Btc_RxVal+0x610>)
 8001814:	f010 fd44 	bl	80122a0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001818:	e084      	b.n	8001924 <Btc_RxVal+0x65c>
			case BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800181a:	4b23      	ldr	r3, [pc, #140]	; (80018a8 <Btc_RxVal+0x5e0>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b01      	cmp	r3, #1
 8001820:	f040 8082 	bne.w	8001928 <Btc_RxVal+0x660>
				{
					Btc_BrakeLight = STD_LOW;
 8001824:	4b2c      	ldr	r3, [pc, #176]	; (80018d8 <Btc_RxVal+0x610>)
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(&Btc_BrakeLight);
 800182a:	482b      	ldr	r0, [pc, #172]	; (80018d8 <Btc_RxVal+0x610>)
 800182c:	f010 fd38 	bl	80122a0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001830:	e07a      	b.n	8001928 <Btc_RxVal+0x660>
			case BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001832:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <Btc_RxVal+0x5e0>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d178      	bne.n	800192c <Btc_RxVal+0x664>
				{
					Btc_IntLights = STD_HIGH;
 800183a:	4b28      	ldr	r3, [pc, #160]	; (80018dc <Btc_RxVal+0x614>)
 800183c:	2201      	movs	r2, #1
 800183e:	701a      	strb	r2, [r3, #0]
					Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(&Btc_IntLights);
 8001840:	4826      	ldr	r0, [pc, #152]	; (80018dc <Btc_RxVal+0x614>)
 8001842:	f010 fddd 	bl	8012400 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001846:	e071      	b.n	800192c <Btc_RxVal+0x664>
			case BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001848:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <Btc_RxVal+0x5e0>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d16f      	bne.n	8001930 <Btc_RxVal+0x668>
				{
					Btc_IntLights = STD_LOW;
 8001850:	4b22      	ldr	r3, [pc, #136]	; (80018dc <Btc_RxVal+0x614>)
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
					Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(&Btc_IntLights);
 8001856:	4821      	ldr	r0, [pc, #132]	; (80018dc <Btc_RxVal+0x614>)
 8001858:	f010 fdd2 	bl	8012400 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 800185c:	e068      	b.n	8001930 <Btc_RxVal+0x668>
			default:
				break;
 800185e:	bf00      	nop
 8001860:	e067      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001862:	bf00      	nop
 8001864:	e065      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001866:	bf00      	nop
 8001868:	e063      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 800186a:	bf00      	nop
 800186c:	e061      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 800186e:	bf00      	nop
 8001870:	e05f      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001872:	bf00      	nop
 8001874:	e05d      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001876:	bf00      	nop
 8001878:	e05b      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 800187a:	bf00      	nop
 800187c:	e059      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 800187e:	bf00      	nop
 8001880:	e057      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001882:	bf00      	nop
 8001884:	e055      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001886:	bf00      	nop
 8001888:	e053      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 800188a:	bf00      	nop
 800188c:	e051      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 800188e:	bf00      	nop
 8001890:	e04f      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001892:	bf00      	nop
 8001894:	e04d      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001896:	bf00      	nop
 8001898:	e04b      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 800189a:	bf00      	nop
 800189c:	e049      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 800189e:	bf00      	nop
 80018a0:	e047      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 80018a2:	bf00      	nop
 80018a4:	e045      	b.n	8001932 <Btc_RxVal+0x66a>
 80018a6:	bf00      	nop
 80018a8:	20000120 	.word	0x20000120
 80018ac:	200000f9 	.word	0x200000f9
 80018b0:	200000ed 	.word	0x200000ed
 80018b4:	200000e4 	.word	0x200000e4
 80018b8:	200000e3 	.word	0x200000e3
 80018bc:	200000e5 	.word	0x200000e5
 80018c0:	200000e6 	.word	0x200000e6
 80018c4:	200000e8 	.word	0x200000e8
 80018c8:	200000e9 	.word	0x200000e9
 80018cc:	200000ea 	.word	0x200000ea
 80018d0:	200000e7 	.word	0x200000e7
 80018d4:	200000ec 	.word	0x200000ec
 80018d8:	200000eb 	.word	0x200000eb
 80018dc:	200000ee 	.word	0x200000ee
				break;
 80018e0:	bf00      	nop
 80018e2:	e026      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 80018e4:	bf00      	nop
 80018e6:	e024      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 80018e8:	bf00      	nop
 80018ea:	e022      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 80018ec:	bf00      	nop
 80018ee:	e020      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 80018f0:	bf00      	nop
 80018f2:	e01e      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 80018f4:	bf00      	nop
 80018f6:	e01c      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 80018f8:	bf00      	nop
 80018fa:	e01a      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 80018fc:	bf00      	nop
 80018fe:	e018      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001900:	bf00      	nop
 8001902:	e016      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001904:	bf00      	nop
 8001906:	e014      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001908:	bf00      	nop
 800190a:	e012      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 800190c:	bf00      	nop
 800190e:	e010      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001910:	bf00      	nop
 8001912:	e00e      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001914:	bf00      	nop
 8001916:	e00c      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001918:	bf00      	nop
 800191a:	e00a      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 800191c:	bf00      	nop
 800191e:	e008      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001920:	bf00      	nop
 8001922:	e006      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001924:	bf00      	nop
 8001926:	e004      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001928:	bf00      	nop
 800192a:	e002      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 800192c:	bf00      	nop
 800192e:	e000      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001930:	bf00      	nop
	}
	else
	{
		/* do nothing */
	}
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop

08001938 <Btc_MainFunction>:
/***********************************************************************************
* Function: Btc_MainFunction											 		   *
* Description: Process bluetooth communication states.					           *
************************************************************************************/
VOID Btc_MainFunction()
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
	Btc_RxVal();
 800193c:	f7ff fcc4 	bl	80012c8 <Btc_RxVal>
	Btc_RequestState();
 8001940:	f7ff fa24 	bl	8000d8c <Btc_RequestState>
}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}

08001948 <CenLoc_State>:
/***********************************************************************************
* Function: CenLoc_State													   	   *
* Description: Process the current and previous state of the central lock.		   *
************************************************************************************/
VOID CenLoc_State()
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
	/* Every time the state of the central lock changes
	 * set the alarm to off. */
	CenLoc_SecAlmStateToOff();
 800194c:	f000 f840 	bl	80019d0 <CenLoc_SecAlmStateToOff>
	/* If the current state is different than the previous state
	 * update the variables respectively.
	 * Initialize the security alarm application.
	 * Calls for start of OS timer for lock unlock sequence.*/
	if(CenLoc_PreviousState != CenLoc_CurrentState)
 8001950:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <CenLoc_State+0x68>)
 8001952:	781a      	ldrb	r2, [r3, #0]
 8001954:	4b17      	ldr	r3, [pc, #92]	; (80019b4 <CenLoc_State+0x6c>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d027      	beq.n	80019ac <CenLoc_State+0x64>
	{
		CenLoc_PreviousStateFlag 	= CenLoc_PreviousState;
 800195c:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <CenLoc_State+0x68>)
 800195e:	781a      	ldrb	r2, [r3, #0]
 8001960:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <CenLoc_State+0x70>)
 8001962:	701a      	strb	r2, [r3, #0]
		CenLoc_PreviousState 		= CenLoc_CurrentState;
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <CenLoc_State+0x6c>)
 8001966:	781a      	ldrb	r2, [r3, #0]
 8001968:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <CenLoc_State+0x68>)
 800196a:	701a      	strb	r2, [r3, #0]
		CenLoc_BlinkCounter 		= STD_LOW;
 800196c:	4b13      	ldr	r3, [pc, #76]	; (80019bc <CenLoc_State+0x74>)
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
		CenLoc_FollowMeHomeCounter 	= STD_LOW;
 8001972:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <CenLoc_State+0x78>)
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
		CenLoc_CyclicAlarmCounter	= STD_LOW;
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <CenLoc_State+0x7c>)
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
		CenLoc_TurnOnLedCounter		= STD_LOW;
 800197e:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <CenLoc_State+0x80>)
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_Init();
 8001984:	f001 fdf0 	bl	8003568 <SecAlm_Init>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_CenLoc_LockUnlockSequence_TimerHandle, 250);
 8001988:	4b10      	ldr	r3, [pc, #64]	; (80019cc <CenLoc_State+0x84>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	21fa      	movs	r1, #250	; 0xfa
 800198e:	4618      	mov	r0, r3
 8001990:	f010 fdb7 	bl	8012502 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter(&CenLoc_BlinkCounter);
 8001994:	4809      	ldr	r0, [pc, #36]	; (80019bc <CenLoc_State+0x74>)
 8001996:	f010 fb47 	bl	8012028 <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter>
		Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter(&CenLoc_CyclicAlarmCounter);
 800199a:	480a      	ldr	r0, [pc, #40]	; (80019c4 <CenLoc_State+0x7c>)
 800199c:	f010 fb54 	bl	8012048 <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter>
		Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter(&CenLoc_TurnOnLedCounter);
 80019a0:	4809      	ldr	r0, [pc, #36]	; (80019c8 <CenLoc_State+0x80>)
 80019a2:	f010 fb61 	bl	8012068 <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter>
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(&CenLoc_FollowMeHomeCounter);
 80019a6:	4806      	ldr	r0, [pc, #24]	; (80019c0 <CenLoc_State+0x78>)
 80019a8:	f010 fb6e 	bl	8012088 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
	}
	else
	{
		/* do nothing */
	}
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000121 	.word	0x20000121
 80019b4:	20000120 	.word	0x20000120
 80019b8:	20000128 	.word	0x20000128
 80019bc:	20000124 	.word	0x20000124
 80019c0:	20000126 	.word	0x20000126
 80019c4:	20000125 	.word	0x20000125
 80019c8:	20000127 	.word	0x20000127
 80019cc:	20000358 	.word	0x20000358

080019d0 <CenLoc_SecAlmStateToOff>:
/***********************************************************************************
* Function: CenLoc_SecAlmStateToOff												   *
* Description: Turn off the security alarm.										   *
************************************************************************************/
VOID CenLoc_SecAlmStateToOff()
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
	/* The central lock is on, the security alarm goes off. */
	if(CenLoc_CurrentState == STD_HIGH)
 80019d4:	4b03      	ldr	r3, [pc, #12]	; (80019e4 <CenLoc_SecAlmStateToOff+0x14>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d101      	bne.n	80019e0 <CenLoc_SecAlmStateToOff+0x10>
	{
		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_Init();
 80019dc:	f001 fdc4 	bl	8003568 <SecAlm_Init>
	}
	else
	{
		/* do nothing */
	}
}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000120 	.word	0x20000120

080019e8 <CenLoc_FollowMeHome>:
/***********************************************************************************
* Function: CenLoc_FollowMeHome												       *
* Description: Process the state of the follow me home.					 		   *
************************************************************************************/
VOID CenLoc_FollowMeHome()
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
	/* Follow me home is on as long as the timer is on. */
	if(CenLoc_FollowMeHomeCounter == 1)
 80019ec:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <CenLoc_FollowMeHome+0x3c>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d103      	bne.n	80019fc <CenLoc_FollowMeHome+0x14>
	{
		CenLoc_FollowMeHomeState = STD_HIGH;
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <CenLoc_FollowMeHome+0x40>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 80019fa:	e011      	b.n	8001a20 <CenLoc_FollowMeHome+0x38>
	else if(CenLoc_FollowMeHomeCounter == 2)
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <CenLoc_FollowMeHome+0x3c>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d10d      	bne.n	8001a20 <CenLoc_FollowMeHome+0x38>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_FollowMeHome_TimerHandle);
 8001a04:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <CenLoc_FollowMeHome+0x44>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f010 fd87 	bl	801251c <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		CenLoc_FollowMeHomeState = STD_LOW;
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <CenLoc_FollowMeHome+0x40>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
		CenLoc_FollowMeHomeCounter = 2;
 8001a14:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <CenLoc_FollowMeHome+0x3c>)
 8001a16:	2202      	movs	r2, #2
 8001a18:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(&CenLoc_FollowMeHomeCounter);
 8001a1a:	4802      	ldr	r0, [pc, #8]	; (8001a24 <CenLoc_FollowMeHome+0x3c>)
 8001a1c:	f010 fb34 	bl	8012088 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000126 	.word	0x20000126
 8001a28:	20000122 	.word	0x20000122
 8001a2c:	20000364 	.word	0x20000364

08001a30 <CenLoc_UnlockSequence>:
/***********************************************************************************
* Function: CenLoc_UnlockSequence												   *
* Description: Process the unlock sequence. 		   							   *
************************************************************************************/
VOID CenLoc_UnlockSequence()
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
	/* Stop the timer used for the security alarm LED. */
	Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLed_TurnOnCyclic_TimerHandle);
 8001a34:	4b4c      	ldr	r3, [pc, #304]	; (8001b68 <CenLoc_UnlockSequence+0x138>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f010 fd6f 	bl	801251c <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
	/* Turn on the door LEDs. */
	if(CenLoc_PreviousStateFlag == STD_LOW)
 8001a3e:	4b4b      	ldr	r3, [pc, #300]	; (8001b6c <CenLoc_UnlockSequence+0x13c>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d103      	bne.n	8001a4e <CenLoc_UnlockSequence+0x1e>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel1);
 8001a46:	2100      	movs	r1, #0
 8001a48:	4849      	ldr	r0, [pc, #292]	; (8001b70 <CenLoc_UnlockSequence+0x140>)
 8001a4a:	f010 fb87 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
	else
	{
		/* do nothing */
	}
	/* Process follow me home state. */
	CenLoc_FollowMeHome();
 8001a4e:	f7ff ffcb 	bl	80019e8 <CenLoc_FollowMeHome>
	/* Sets previous state to high so that on locking it is taken into consideration. */
	localPreviousState = STD_HIGH;
 8001a52:	4b48      	ldr	r3, [pc, #288]	; (8001b74 <CenLoc_UnlockSequence+0x144>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	701a      	strb	r2, [r3, #0]
	/* Unlocking sequence consists of triggering the hazard lights twice on and twice off.*/
	if(CenLoc_BlinkCounter <= 3)
 8001a58:	4b47      	ldr	r3, [pc, #284]	; (8001b78 <CenLoc_UnlockSequence+0x148>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d86f      	bhi.n	8001b40 <CenLoc_UnlockSequence+0x110>
	{
		/* On and off period for the hazard lights and buzzer is defined in the OS timer start call. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 8001a60:	4b46      	ldr	r3, [pc, #280]	; (8001b7c <CenLoc_UnlockSequence+0x14c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f010 fd4a 	bl	8012502 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		/* Start the OS timer for the follow me home. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_FollowMeHome_TimerHandle) == 0)
 8001a6e:	4b44      	ldr	r3, [pc, #272]	; (8001b80 <CenLoc_UnlockSequence+0x150>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f00d fa63 	bl	800ef3e <osTimerIsRunning>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d106      	bne.n	8001a8c <CenLoc_UnlockSequence+0x5c>
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_FollowMeHome_TimerHandle, 10000);
 8001a7e:	4b40      	ldr	r3, [pc, #256]	; (8001b80 <CenLoc_UnlockSequence+0x150>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f242 7110 	movw	r1, #10000	; 0x2710
 8001a86:	4618      	mov	r0, r3
 8001a88:	f010 fd3b 	bl	8012502 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		{
			/* do nothing */
		}
		/* Set the follow me home timer state variable to one to prevent activation of the follow me home
		 * when it is not requested. Upon expiration, the timer callback increments this variable. */
		CenLoc_FollowMeHomeCounter = 1;
 8001a8c:	4b3d      	ldr	r3, [pc, #244]	; (8001b84 <CenLoc_UnlockSequence+0x154>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(&CenLoc_FollowMeHomeCounter);
 8001a92:	483c      	ldr	r0, [pc, #240]	; (8001b84 <CenLoc_UnlockSequence+0x154>)
 8001a94:	f010 faf8 	bl	8012088 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
		/* Process the on off states of the hazard lights and the buzzer. */
		switch(CenLoc_BlinkCounter)
 8001a98:	4b37      	ldr	r3, [pc, #220]	; (8001b78 <CenLoc_UnlockSequence+0x148>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	d85f      	bhi.n	8001b60 <CenLoc_UnlockSequence+0x130>
 8001aa0:	a201      	add	r2, pc, #4	; (adr r2, 8001aa8 <CenLoc_UnlockSequence+0x78>)
 8001aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa6:	bf00      	nop
 8001aa8:	08001ab9 	.word	0x08001ab9
 8001aac:	08001adb 	.word	0x08001adb
 8001ab0:	08001afd 	.word	0x08001afd
 8001ab4:	08001b1f 	.word	0x08001b1f
		{
			case 0:
				CenLoc_BlinkState = STD_HIGH;
 8001ab8:	4b33      	ldr	r3, [pc, #204]	; (8001b88 <CenLoc_UnlockSequence+0x158>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001abe:	2108      	movs	r1, #8
 8001ac0:	4832      	ldr	r0, [pc, #200]	; (8001b8c <CenLoc_UnlockSequence+0x15c>)
 8001ac2:	f010 fb4b 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001ac6:	210c      	movs	r1, #12
 8001ac8:	4830      	ldr	r0, [pc, #192]	; (8001b8c <CenLoc_UnlockSequence+0x15c>)
 8001aca:	f010 fb47 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001ace:	4b2e      	ldr	r3, [pc, #184]	; (8001b88 <CenLoc_UnlockSequence+0x158>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 f972 	bl	8001dbc <CenLoc_ToggleBuzzer>
				break;
 8001ad8:	e043      	b.n	8001b62 <CenLoc_UnlockSequence+0x132>
			case 1:
				CenLoc_BlinkState = STD_LOW;
 8001ada:	4b2b      	ldr	r3, [pc, #172]	; (8001b88 <CenLoc_UnlockSequence+0x158>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001ae0:	2108      	movs	r1, #8
 8001ae2:	482a      	ldr	r0, [pc, #168]	; (8001b8c <CenLoc_UnlockSequence+0x15c>)
 8001ae4:	f010 fb3a 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001ae8:	210c      	movs	r1, #12
 8001aea:	4828      	ldr	r0, [pc, #160]	; (8001b8c <CenLoc_UnlockSequence+0x15c>)
 8001aec:	f010 fb36 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001af0:	4b25      	ldr	r3, [pc, #148]	; (8001b88 <CenLoc_UnlockSequence+0x158>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f000 f961 	bl	8001dbc <CenLoc_ToggleBuzzer>
				break;
 8001afa:	e032      	b.n	8001b62 <CenLoc_UnlockSequence+0x132>
			case 2:
				CenLoc_BlinkState = STD_HIGH;
 8001afc:	4b22      	ldr	r3, [pc, #136]	; (8001b88 <CenLoc_UnlockSequence+0x158>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001b02:	2108      	movs	r1, #8
 8001b04:	4821      	ldr	r0, [pc, #132]	; (8001b8c <CenLoc_UnlockSequence+0x15c>)
 8001b06:	f010 fb29 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001b0a:	210c      	movs	r1, #12
 8001b0c:	481f      	ldr	r0, [pc, #124]	; (8001b8c <CenLoc_UnlockSequence+0x15c>)
 8001b0e:	f010 fb25 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001b12:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <CenLoc_UnlockSequence+0x158>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f000 f950 	bl	8001dbc <CenLoc_ToggleBuzzer>
				break;
 8001b1c:	e021      	b.n	8001b62 <CenLoc_UnlockSequence+0x132>
			case 3:
				CenLoc_BlinkState = STD_LOW;
 8001b1e:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <CenLoc_UnlockSequence+0x158>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001b24:	2108      	movs	r1, #8
 8001b26:	4819      	ldr	r0, [pc, #100]	; (8001b8c <CenLoc_UnlockSequence+0x15c>)
 8001b28:	f010 fb18 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001b2c:	210c      	movs	r1, #12
 8001b2e:	4817      	ldr	r0, [pc, #92]	; (8001b8c <CenLoc_UnlockSequence+0x15c>)
 8001b30:	f010 fb14 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001b34:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <CenLoc_UnlockSequence+0x158>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f000 f93f 	bl	8001dbc <CenLoc_ToggleBuzzer>
				break;
 8001b3e:	e010      	b.n	8001b62 <CenLoc_UnlockSequence+0x132>
			default:
				break;
		}
	}/* After the sequence is completed, stop the timers and set the variables related to this sequence to out of bounds values to prevent triggering when not requested. */
	else if(CenLoc_BlinkCounter >= 3)
 8001b40:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <CenLoc_UnlockSequence+0x148>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d90c      	bls.n	8001b62 <CenLoc_UnlockSequence+0x132>
	{
		CenLoc_BlinkState = 2;
 8001b48:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <CenLoc_UnlockSequence+0x158>)
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	701a      	strb	r2, [r3, #0]
		CenLoc_BlinkCounter = 6;
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <CenLoc_UnlockSequence+0x148>)
 8001b50:	2206      	movs	r2, #6
 8001b52:	701a      	strb	r2, [r3, #0]
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_CenLoc_LockUnlockSequence_TimerHandle);
 8001b54:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <CenLoc_UnlockSequence+0x160>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f010 fcdf 	bl	801251c <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
	}
	else
	{
		/* do nothing */
	}
}
 8001b5e:	e000      	b.n	8001b62 <CenLoc_UnlockSequence+0x132>
				break;
 8001b60:	bf00      	nop
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	2000035c 	.word	0x2000035c
 8001b6c:	20000128 	.word	0x20000128
 8001b70:	200005f8 	.word	0x200005f8
 8001b74:	20000129 	.word	0x20000129
 8001b78:	20000124 	.word	0x20000124
 8001b7c:	20000368 	.word	0x20000368
 8001b80:	20000364 	.word	0x20000364
 8001b84:	20000126 	.word	0x20000126
 8001b88:	20000123 	.word	0x20000123
 8001b8c:	200006ac 	.word	0x200006ac
 8001b90:	20000358 	.word	0x20000358

08001b94 <CenLoc_LockSequence>:
/***********************************************************************************
* Function: CenLoc_LockSequence													   *
* Description: Process the lock sequence.								 		   *
************************************************************************************/
VOID CenLoc_LockSequence()
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
	/* Turn off the door LEDs. */
	if(CenLoc_PreviousStateFlag == STD_HIGH)
 8001b98:	4b37      	ldr	r3, [pc, #220]	; (8001c78 <CenLoc_LockSequence+0xe4>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d103      	bne.n	8001ba8 <CenLoc_LockSequence+0x14>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel1);
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4836      	ldr	r0, [pc, #216]	; (8001c7c <CenLoc_LockSequence+0xe8>)
 8001ba4:	f010 fae7 	bl	8012176 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Process follow me home state.*/
	CenLoc_FollowMeHome();
 8001ba8:	f7ff ff1e 	bl	80019e8 <CenLoc_FollowMeHome>
	/* If the central lock has been on previously
	 * and the variable related to the state of the timer is less than the value of
	 * how many times the hazard lights should turn on on locking, proceed with the processing. */
	if(CenLoc_BlinkCounter <= 1 && localPreviousState == STD_HIGH)
 8001bac:	4b34      	ldr	r3, [pc, #208]	; (8001c80 <CenLoc_LockSequence+0xec>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d84d      	bhi.n	8001c50 <CenLoc_LockSequence+0xbc>
 8001bb4:	4b33      	ldr	r3, [pc, #204]	; (8001c84 <CenLoc_LockSequence+0xf0>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d149      	bne.n	8001c50 <CenLoc_LockSequence+0xbc>
	{
		/* On and off period for the hazard lights and buzzer is defined in the OS timer start call. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 8001bbc:	4b32      	ldr	r3, [pc, #200]	; (8001c88 <CenLoc_LockSequence+0xf4>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f010 fc9c 	bl	8012502 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		/* Start the OS timer for the follow me home. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_FollowMeHome_TimerHandle) == 0)
 8001bca:	4b30      	ldr	r3, [pc, #192]	; (8001c8c <CenLoc_LockSequence+0xf8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f00d f9b5 	bl	800ef3e <osTimerIsRunning>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d106      	bne.n	8001be8 <CenLoc_LockSequence+0x54>
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_FollowMeHome_TimerHandle, 10000);
 8001bda:	4b2c      	ldr	r3, [pc, #176]	; (8001c8c <CenLoc_LockSequence+0xf8>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f242 7110 	movw	r1, #10000	; 0x2710
 8001be2:	4618      	mov	r0, r3
 8001be4:	f010 fc8d 	bl	8012502 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		{
			/* do nothing */
		}
		/* Set the follow me home timer state variable to one to prevent activation of the follow me home
		 * when it is not requested. Upon expiration, the timer callback increments this variable. */
		CenLoc_FollowMeHomeCounter = 1;
 8001be8:	4b29      	ldr	r3, [pc, #164]	; (8001c90 <CenLoc_LockSequence+0xfc>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(&CenLoc_FollowMeHomeCounter);
 8001bee:	4828      	ldr	r0, [pc, #160]	; (8001c90 <CenLoc_LockSequence+0xfc>)
 8001bf0:	f010 fa4a 	bl	8012088 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
		/* Process the on off states of the hazard lights and buzzer. */
		switch(CenLoc_BlinkCounter)
 8001bf4:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <CenLoc_LockSequence+0xec>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d002      	beq.n	8001c02 <CenLoc_LockSequence+0x6e>
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d011      	beq.n	8001c24 <CenLoc_LockSequence+0x90>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
				localPreviousState = STD_LOW;
				break;
			default:
				break;
 8001c00:	e024      	b.n	8001c4c <CenLoc_LockSequence+0xb8>
				CenLoc_BlinkState = STD_HIGH;
 8001c02:	4b24      	ldr	r3, [pc, #144]	; (8001c94 <CenLoc_LockSequence+0x100>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001c08:	2108      	movs	r1, #8
 8001c0a:	4823      	ldr	r0, [pc, #140]	; (8001c98 <CenLoc_LockSequence+0x104>)
 8001c0c:	f010 faa6 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001c10:	210c      	movs	r1, #12
 8001c12:	4821      	ldr	r0, [pc, #132]	; (8001c98 <CenLoc_LockSequence+0x104>)
 8001c14:	f010 faa2 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001c18:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <CenLoc_LockSequence+0x100>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f000 f8cd 	bl	8001dbc <CenLoc_ToggleBuzzer>
				break;
 8001c22:	e013      	b.n	8001c4c <CenLoc_LockSequence+0xb8>
				CenLoc_BlinkState = STD_LOW;
 8001c24:	4b1b      	ldr	r3, [pc, #108]	; (8001c94 <CenLoc_LockSequence+0x100>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001c2a:	2108      	movs	r1, #8
 8001c2c:	481a      	ldr	r0, [pc, #104]	; (8001c98 <CenLoc_LockSequence+0x104>)
 8001c2e:	f010 fa95 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001c32:	210c      	movs	r1, #12
 8001c34:	4818      	ldr	r0, [pc, #96]	; (8001c98 <CenLoc_LockSequence+0x104>)
 8001c36:	f010 fa91 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001c3a:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <CenLoc_LockSequence+0x100>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 f8bc 	bl	8001dbc <CenLoc_ToggleBuzzer>
				localPreviousState = STD_LOW;
 8001c44:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <CenLoc_LockSequence+0xf0>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	701a      	strb	r2, [r3, #0]
				break;
 8001c4a:	bf00      	nop
		switch(CenLoc_BlinkCounter)
 8001c4c:	bf00      	nop
	}
	else
	{
		/* do nothing */
	}
}
 8001c4e:	e011      	b.n	8001c74 <CenLoc_LockSequence+0xe0>
	else if(CenLoc_BlinkCounter == 2)
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <CenLoc_LockSequence+0xec>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d10d      	bne.n	8001c74 <CenLoc_LockSequence+0xe0>
		CenLoc_BlinkState = 2;
 8001c58:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <CenLoc_LockSequence+0x100>)
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	701a      	strb	r2, [r3, #0]
		CenLoc_BlinkCounter = 4;
 8001c5e:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <CenLoc_LockSequence+0xec>)
 8001c60:	2204      	movs	r2, #4
 8001c62:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter(&CenLoc_BlinkCounter);
 8001c64:	4806      	ldr	r0, [pc, #24]	; (8001c80 <CenLoc_LockSequence+0xec>)
 8001c66:	f010 f9df 	bl	8012028 <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_CenLoc_LockUnlockSequence_TimerHandle);
 8001c6a:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <CenLoc_LockSequence+0x108>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f010 fc54 	bl	801251c <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
}
 8001c74:	bf00      	nop
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000128 	.word	0x20000128
 8001c7c:	200005f8 	.word	0x200005f8
 8001c80:	20000124 	.word	0x20000124
 8001c84:	20000129 	.word	0x20000129
 8001c88:	20000368 	.word	0x20000368
 8001c8c:	20000364 	.word	0x20000364
 8001c90:	20000126 	.word	0x20000126
 8001c94:	20000123 	.word	0x20000123
 8001c98:	200006ac 	.word	0x200006ac
 8001c9c:	20000358 	.word	0x20000358

08001ca0 <CenLoc_ControlAlarmLed>:
/***********************************************************************************
* Function: CenLoc_ControlAlarmLed												   *
* Description: Controls the security alarm LED 		   							   *
************************************************************************************/
VOID CenLoc_ControlAlarmLed()
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
	/* Check if the central lock state is set to high. */
	if(CenLoc_CurrentState == STD_HIGH)
 8001ca4:	4b2f      	ldr	r3, [pc, #188]	; (8001d64 <CenLoc_ControlAlarmLed+0xc4>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d10b      	bne.n	8001cc4 <CenLoc_ControlAlarmLed+0x24>
	{
		/* Set the security alarm LED to off. */
		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_LOW);
 8001cac:	2000      	movs	r0, #0
 8001cae:	f001 fc8f 	bl	80035d0 <SecAlm_ToggleAlarmLed>
		/* Set the timer flag to 0. */
		CenLoc_TurnOnLedCounter = STD_LOW;
 8001cb2:	4b2d      	ldr	r3, [pc, #180]	; (8001d68 <CenLoc_ControlAlarmLed+0xc8>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
		/* Stop the timer related to the LED cyclic trigger. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLedTurnOn_TimerHandle);
 8001cb8:	4b2c      	ldr	r3, [pc, #176]	; (8001d6c <CenLoc_ControlAlarmLed+0xcc>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f010 fc2d 	bl	801251c <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		else
		{
			/* do nothing */
		}
	}
}
 8001cc2:	e04c      	b.n	8001d5e <CenLoc_ControlAlarmLed+0xbe>
	else if(CenLoc_CurrentState == STD_LOW)
 8001cc4:	4b27      	ldr	r3, [pc, #156]	; (8001d64 <CenLoc_ControlAlarmLed+0xc4>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d148      	bne.n	8001d5e <CenLoc_ControlAlarmLed+0xbe>
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmLed_TurnOnCyclic_TimerHandle) == 0 && Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmLedTurnOn_TimerHandle) == 0)
 8001ccc:	4b28      	ldr	r3, [pc, #160]	; (8001d70 <CenLoc_ControlAlarmLed+0xd0>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f00d f934 	bl	800ef3e <osTimerIsRunning>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d10e      	bne.n	8001cfa <CenLoc_ControlAlarmLed+0x5a>
 8001cdc:	4b23      	ldr	r3, [pc, #140]	; (8001d6c <CenLoc_ControlAlarmLed+0xcc>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f00d f92c 	bl	800ef3e <osTimerIsRunning>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d106      	bne.n	8001cfa <CenLoc_ControlAlarmLed+0x5a>
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlmLed_TurnOnCyclic_TimerHandle, 3750);
 8001cec:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <CenLoc_ControlAlarmLed+0xd0>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f640 61a6 	movw	r1, #3750	; 0xea6
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f010 fc04 	bl	8012502 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		if(CenLoc_CyclicAlarmCounter == 1)
 8001cfa:	4b1e      	ldr	r3, [pc, #120]	; (8001d74 <CenLoc_ControlAlarmLed+0xd4>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d12d      	bne.n	8001d5e <CenLoc_ControlAlarmLed+0xbe>
			if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmLedTurnOn_TimerHandle) == 0)
 8001d02:	4b1a      	ldr	r3, [pc, #104]	; (8001d6c <CenLoc_ControlAlarmLed+0xcc>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f00d f919 	bl	800ef3e <osTimerIsRunning>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d105      	bne.n	8001d1e <CenLoc_ControlAlarmLed+0x7e>
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlmLedTurnOn_TimerHandle, 250);
 8001d12:	4b16      	ldr	r3, [pc, #88]	; (8001d6c <CenLoc_ControlAlarmLed+0xcc>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	21fa      	movs	r1, #250	; 0xfa
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f010 fbf2 	bl	8012502 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
			if(CenLoc_TurnOnLedCounter < 1)
 8001d1e:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <CenLoc_ControlAlarmLed+0xc8>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d103      	bne.n	8001d2e <CenLoc_ControlAlarmLed+0x8e>
				Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_HIGH);
 8001d26:	2001      	movs	r0, #1
 8001d28:	f001 fc52 	bl	80035d0 <SecAlm_ToggleAlarmLed>
}
 8001d2c:	e017      	b.n	8001d5e <CenLoc_ControlAlarmLed+0xbe>
			else if(CenLoc_TurnOnLedCounter == 1)
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <CenLoc_ControlAlarmLed+0xc8>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d113      	bne.n	8001d5e <CenLoc_ControlAlarmLed+0xbe>
				Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_LOW);
 8001d36:	2000      	movs	r0, #0
 8001d38:	f001 fc4a 	bl	80035d0 <SecAlm_ToggleAlarmLed>
				CenLoc_TurnOnLedCounter = 0;
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <CenLoc_ControlAlarmLed+0xc8>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
				CenLoc_CyclicAlarmCounter = 0;
 8001d42:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <CenLoc_ControlAlarmLed+0xd4>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
				Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter(&CenLoc_CyclicAlarmCounter);
 8001d48:	480a      	ldr	r0, [pc, #40]	; (8001d74 <CenLoc_ControlAlarmLed+0xd4>)
 8001d4a:	f010 f97d 	bl	8012048 <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter>
				Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter(&CenLoc_TurnOnLedCounter);
 8001d4e:	4806      	ldr	r0, [pc, #24]	; (8001d68 <CenLoc_ControlAlarmLed+0xc8>)
 8001d50:	f010 f98a 	bl	8012068 <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter>
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLedTurnOn_TimerHandle);
 8001d54:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <CenLoc_ControlAlarmLed+0xcc>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f010 fbdf 	bl	801251c <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000120 	.word	0x20000120
 8001d68:	20000127 	.word	0x20000127
 8001d6c:	20000360 	.word	0x20000360
 8001d70:	2000035c 	.word	0x2000035c
 8001d74:	20000125 	.word	0x20000125

08001d78 <CenLoc_LockUnlockStates>:
/***********************************************************************************
* Function: CenLoc_LockUnlockStates												   *
* Description: Check for the state of the central lock.					 		   *
************************************************************************************/
VOID CenLoc_LockUnlockStates()
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
	/* If the central lock state is set to high and the security alarm is set to off. */
	if(CenLoc_CurrentState == STD_HIGH && Rte_P_SecAlm_SecAlmPort_SecAlm_Trigger == STD_LOW)
 8001d7c:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <CenLoc_LockUnlockStates+0x3c>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d108      	bne.n	8001d96 <CenLoc_LockUnlockStates+0x1e>
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <CenLoc_LockUnlockStates+0x40>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d104      	bne.n	8001d96 <CenLoc_LockUnlockStates+0x1e>
	{
		/* Perform the related activities. */
		CenLoc_UnlockSequence();
 8001d8c:	f7ff fe50 	bl	8001a30 <CenLoc_UnlockSequence>
		CenLoc_ControlAlarmLed();
 8001d90:	f7ff ff86 	bl	8001ca0 <CenLoc_ControlAlarmLed>
	}
	else
	{
		/* do nothing */
	}
}
 8001d94:	e00b      	b.n	8001dae <CenLoc_LockUnlockStates+0x36>
	else if(CenLoc_CurrentState == STD_LOW && Rte_P_SecAlm_SecAlmPort_SecAlm_Trigger == STD_LOW)
 8001d96:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <CenLoc_LockUnlockStates+0x3c>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d107      	bne.n	8001dae <CenLoc_LockUnlockStates+0x36>
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <CenLoc_LockUnlockStates+0x40>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d103      	bne.n	8001dae <CenLoc_LockUnlockStates+0x36>
		CenLoc_LockSequence();
 8001da6:	f7ff fef5 	bl	8001b94 <CenLoc_LockSequence>
		CenLoc_ControlAlarmLed();
 8001daa:	f7ff ff79 	bl	8001ca0 <CenLoc_ControlAlarmLed>
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000120 	.word	0x20000120
 8001db8:	200001a4 	.word	0x200001a4

08001dbc <CenLoc_ToggleBuzzer>:
/***********************************************************************************
* Function: CenLoc_ToggleBuzzer													   *
* Description: Trigger central lock buzzer. 		   							   *
************************************************************************************/
VOID CenLoc_ToggleBuzzer(uint8 PinState)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(CENLOC_BUZZER_PORT, CENLOC_BUZZER_PIN, PinState);
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	2104      	movs	r1, #4
 8001dcc:	4803      	ldr	r0, [pc, #12]	; (8001ddc <CenLoc_ToggleBuzzer+0x20>)
 8001dce:	f010 fb86 	bl	80124de <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40020400 	.word	0x40020400

08001de0 <CenLoc_MainFunction>:
/***********************************************************************************
* Function: CenLoc_MainFunction													   *
* Description: Central lock main function. Process the states of the application.  *
************************************************************************************/
VOID CenLoc_MainFunction()
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
	CenLoc_State();
 8001de4:	f7ff fdb0 	bl	8001948 <CenLoc_State>
	CenLoc_LockUnlockStates();
 8001de8:	f7ff ffc6 	bl	8001d78 <CenLoc_LockUnlockStates>
}
 8001dec:	bf00      	nop
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <DiagCtrl_MainFunction>:
/***********************************************************************************
* Function: DiagCtrl_MainFunction										   		   *
* Description: Application main function.		 		   						   *
************************************************************************************/
VOID DiagCtrl_MainFunction()
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
	DiagCtrl_ProcessRequestedData();
 8001df4:	f000 f802 	bl	8001dfc <DiagCtrl_ProcessRequestedData>
}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <DiagCtrl_ProcessRequestedData>:
/***********************************************************************************
* Function: DiagCtrl_ProcessRequestedData										   *
* Description: Process the measured requested data.		 		   				   *
************************************************************************************/
VOID DiagCtrl_ProcessRequestedData()
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
	static uint8 SpiCanTransceiver_FaultValue_Seven = 0;
	static uint8 CanBusOff_FaultValue = 0;
	static uint8 CanRx_FaultValue = 0;
	static uint8 CanTx_FaultValue = 0;
#endif
	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&LightSensor_RequestedValue, 0);
 8001e00:	2100      	movs	r1, #0
 8001e02:	48a5      	ldr	r0, [pc, #660]	; (8002098 <DiagCtrl_ProcessRequestedData+0x29c>)
 8001e04:	f010 f9f8 	bl	80121f8 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>
	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&VibrationSensor_RequestedValue, 1);
 8001e08:	2101      	movs	r1, #1
 8001e0a:	48a4      	ldr	r0, [pc, #656]	; (800209c <DiagCtrl_ProcessRequestedData+0x2a0>)
 8001e0c:	f010 f9f4 	bl	80121f8 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>
	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&TemperatureSensor_RequestedValue, 3);
 8001e10:	2103      	movs	r1, #3
 8001e12:	48a3      	ldr	r0, [pc, #652]	; (80020a0 <DiagCtrl_ProcessRequestedData+0x2a4>)
 8001e14:	f010 f9f0 	bl	80121f8 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_One, 17);
 8001e18:	2111      	movs	r1, #17
 8001e1a:	48a2      	ldr	r0, [pc, #648]	; (80020a4 <DiagCtrl_ProcessRequestedData+0x2a8>)
 8001e1c:	f00f ff7a 	bl	8011d14 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_Two, 18);
 8001e20:	2112      	movs	r1, #18
 8001e22:	48a1      	ldr	r0, [pc, #644]	; (80020a8 <DiagCtrl_ProcessRequestedData+0x2ac>)
 8001e24:	f00f ff76 	bl	8011d14 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_Three, 19);
 8001e28:	2113      	movs	r1, #19
 8001e2a:	48a0      	ldr	r0, [pc, #640]	; (80020ac <DiagCtrl_ProcessRequestedData+0x2b0>)
 8001e2c:	f00f ff72 	bl	8011d14 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_Four, 20);
 8001e30:	2114      	movs	r1, #20
 8001e32:	489f      	ldr	r0, [pc, #636]	; (80020b0 <DiagCtrl_ProcessRequestedData+0x2b4>)
 8001e34:	f00f ff6e 	bl	8011d14 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_One, 41);
 8001e38:	2129      	movs	r1, #41	; 0x29
 8001e3a:	489e      	ldr	r0, [pc, #632]	; (80020b4 <DiagCtrl_ProcessRequestedData+0x2b8>)
 8001e3c:	f00f ff6a 	bl	8011d14 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_Two, 42);
 8001e40:	212a      	movs	r1, #42	; 0x2a
 8001e42:	489d      	ldr	r0, [pc, #628]	; (80020b8 <DiagCtrl_ProcessRequestedData+0x2bc>)
 8001e44:	f00f ff66 	bl	8011d14 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_Three, 43);
 8001e48:	212b      	movs	r1, #43	; 0x2b
 8001e4a:	489c      	ldr	r0, [pc, #624]	; (80020bc <DiagCtrl_ProcessRequestedData+0x2c0>)
 8001e4c:	f00f ff62 	bl	8011d14 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_Four, 44);
 8001e50:	212c      	movs	r1, #44	; 0x2c
 8001e52:	489b      	ldr	r0, [pc, #620]	; (80020c0 <DiagCtrl_ProcessRequestedData+0x2c4>)
 8001e54:	f00f ff5e 	bl	8011d14 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_Five, 45);
 8001e58:	212d      	movs	r1, #45	; 0x2d
 8001e5a:	489a      	ldr	r0, [pc, #616]	; (80020c4 <DiagCtrl_ProcessRequestedData+0x2c8>)
 8001e5c:	f00f ff5a 	bl	8011d14 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_Six, 46);
 8001e60:	212e      	movs	r1, #46	; 0x2e
 8001e62:	4899      	ldr	r0, [pc, #612]	; (80020c8 <DiagCtrl_ProcessRequestedData+0x2cc>)
 8001e64:	f00f ff56 	bl	8011d14 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_Seven, 47);
 8001e68:	212f      	movs	r1, #47	; 0x2f
 8001e6a:	4898      	ldr	r0, [pc, #608]	; (80020cc <DiagCtrl_ProcessRequestedData+0x2d0>)
 8001e6c:	f00f ff52 	bl	8011d14 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_Eight, 48);
 8001e70:	2130      	movs	r1, #48	; 0x30
 8001e72:	4897      	ldr	r0, [pc, #604]	; (80020d0 <DiagCtrl_ProcessRequestedData+0x2d4>)
 8001e74:	f00f ff4e 	bl	8011d14 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_One, 33);
 8001e78:	2121      	movs	r1, #33	; 0x21
 8001e7a:	4896      	ldr	r0, [pc, #600]	; (80020d4 <DiagCtrl_ProcessRequestedData+0x2d8>)
 8001e7c:	f00f ff4a 	bl	8011d14 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Two, 34);
 8001e80:	2122      	movs	r1, #34	; 0x22
 8001e82:	4895      	ldr	r0, [pc, #596]	; (80020d8 <DiagCtrl_ProcessRequestedData+0x2dc>)
 8001e84:	f00f ff46 	bl	8011d14 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Three, 35);
 8001e88:	2123      	movs	r1, #35	; 0x23
 8001e8a:	4894      	ldr	r0, [pc, #592]	; (80020dc <DiagCtrl_ProcessRequestedData+0x2e0>)
 8001e8c:	f00f ff42 	bl	8011d14 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Four, 36);
 8001e90:	2124      	movs	r1, #36	; 0x24
 8001e92:	4893      	ldr	r0, [pc, #588]	; (80020e0 <DiagCtrl_ProcessRequestedData+0x2e4>)
 8001e94:	f00f ff3e 	bl	8011d14 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Five, 37);
 8001e98:	2125      	movs	r1, #37	; 0x25
 8001e9a:	4892      	ldr	r0, [pc, #584]	; (80020e4 <DiagCtrl_ProcessRequestedData+0x2e8>)
 8001e9c:	f00f ff3a 	bl	8011d14 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Six, 38);
 8001ea0:	2126      	movs	r1, #38	; 0x26
 8001ea2:	4891      	ldr	r0, [pc, #580]	; (80020e8 <DiagCtrl_ProcessRequestedData+0x2ec>)
 8001ea4:	f00f ff36 	bl	8011d14 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Seven, 39);
 8001ea8:	2127      	movs	r1, #39	; 0x27
 8001eaa:	4890      	ldr	r0, [pc, #576]	; (80020ec <DiagCtrl_ProcessRequestedData+0x2f0>)
 8001eac:	f00f ff32 	bl	8011d14 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Eight, 40);
 8001eb0:	2128      	movs	r1, #40	; 0x28
 8001eb2:	488f      	ldr	r0, [pc, #572]	; (80020f0 <DiagCtrl_ProcessRequestedData+0x2f4>)
 8001eb4:	f00f ff2e 	bl	8011d14 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	CanBusOff_FaultValue = Rte_Call_Can_P_CanPort_Can_BusState();
	CanRx_FaultValue = Rte_Call_Can_P_CanPort_CanOverSpi_isRxErrorPassive();
	CanTx_FaultValue = Rte_Call_Can_P_CanPort_CanOverSpi_isTxErrorPassive();
#endif

	if(BtcUart_FaultValue_One != 0 ||
 8001eb8:	4b7a      	ldr	r3, [pc, #488]	; (80020a4 <DiagCtrl_ProcessRequestedData+0x2a8>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10b      	bne.n	8001ed8 <DiagCtrl_ProcessRequestedData+0xdc>
			BtcUart_FaultValue_Two != 0 ||
 8001ec0:	4b79      	ldr	r3, [pc, #484]	; (80020a8 <DiagCtrl_ProcessRequestedData+0x2ac>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
	if(BtcUart_FaultValue_One != 0 ||
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d107      	bne.n	8001ed8 <DiagCtrl_ProcessRequestedData+0xdc>
			BtcUart_FaultValue_Three != 0 ||
 8001ec8:	4b78      	ldr	r3, [pc, #480]	; (80020ac <DiagCtrl_ProcessRequestedData+0x2b0>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
			BtcUart_FaultValue_Two != 0 ||
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d103      	bne.n	8001ed8 <DiagCtrl_ProcessRequestedData+0xdc>
			BtcUart_FaultValue_Four != 0)
 8001ed0:	4b77      	ldr	r3, [pc, #476]	; (80020b0 <DiagCtrl_ProcessRequestedData+0x2b4>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
			BtcUart_FaultValue_Three != 0 ||
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d002      	beq.n	8001ede <DiagCtrl_ProcessRequestedData+0xe2>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_BLUETOOTH_MODULE_MALFUNCTION);
 8001ed8:	2022      	movs	r0, #34	; 0x22
 8001eda:	f003 ffab 	bl	8005e34 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(I2cThreeExternalEeeprom_FaultValue_One != 0 ||
 8001ede:	4b75      	ldr	r3, [pc, #468]	; (80020b4 <DiagCtrl_ProcessRequestedData+0x2b8>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d11b      	bne.n	8001f1e <DiagCtrl_ProcessRequestedData+0x122>
			I2cThreeExternalEeeprom_FaultValue_Two != 0 ||
 8001ee6:	4b74      	ldr	r3, [pc, #464]	; (80020b8 <DiagCtrl_ProcessRequestedData+0x2bc>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
	if(I2cThreeExternalEeeprom_FaultValue_One != 0 ||
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d117      	bne.n	8001f1e <DiagCtrl_ProcessRequestedData+0x122>
			I2cThreeExternalEeeprom_FaultValue_Three != 0 ||
 8001eee:	4b73      	ldr	r3, [pc, #460]	; (80020bc <DiagCtrl_ProcessRequestedData+0x2c0>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
			I2cThreeExternalEeeprom_FaultValue_Two != 0 ||
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d113      	bne.n	8001f1e <DiagCtrl_ProcessRequestedData+0x122>
			I2cThreeExternalEeeprom_FaultValue_Four != 0 ||
 8001ef6:	4b72      	ldr	r3, [pc, #456]	; (80020c0 <DiagCtrl_ProcessRequestedData+0x2c4>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
			I2cThreeExternalEeeprom_FaultValue_Three != 0 ||
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10f      	bne.n	8001f1e <DiagCtrl_ProcessRequestedData+0x122>
			I2cThreeExternalEeeprom_FaultValue_Five != 0 ||
 8001efe:	4b71      	ldr	r3, [pc, #452]	; (80020c4 <DiagCtrl_ProcessRequestedData+0x2c8>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
			I2cThreeExternalEeeprom_FaultValue_Four != 0 ||
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10b      	bne.n	8001f1e <DiagCtrl_ProcessRequestedData+0x122>
			I2cThreeExternalEeeprom_FaultValue_Six != 0 ||
 8001f06:	4b70      	ldr	r3, [pc, #448]	; (80020c8 <DiagCtrl_ProcessRequestedData+0x2cc>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
			I2cThreeExternalEeeprom_FaultValue_Five != 0 ||
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d107      	bne.n	8001f1e <DiagCtrl_ProcessRequestedData+0x122>
			I2cThreeExternalEeeprom_FaultValue_Seven != 0 ||
 8001f0e:	4b6f      	ldr	r3, [pc, #444]	; (80020cc <DiagCtrl_ProcessRequestedData+0x2d0>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
			I2cThreeExternalEeeprom_FaultValue_Six != 0 ||
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d103      	bne.n	8001f1e <DiagCtrl_ProcessRequestedData+0x122>
			I2cThreeExternalEeeprom_FaultValue_Eight != 0)
 8001f16:	4b6e      	ldr	r3, [pc, #440]	; (80020d0 <DiagCtrl_ProcessRequestedData+0x2d4>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
			I2cThreeExternalEeeprom_FaultValue_Seven != 0 ||
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d002      	beq.n	8001f24 <DiagCtrl_ProcessRequestedData+0x128>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_EXTERNAL_EEPROM_MODULE_MALFUNCTION);
 8001f1e:	2032      	movs	r0, #50	; 0x32
 8001f20:	f003 ff88 	bl	8005e34 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(I2cOneLcd_FaultValue_One != 0 ||
 8001f24:	4b6b      	ldr	r3, [pc, #428]	; (80020d4 <DiagCtrl_ProcessRequestedData+0x2d8>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d11b      	bne.n	8001f64 <DiagCtrl_ProcessRequestedData+0x168>
			I2cOneLcd_FaultValue_Two != 0 ||
 8001f2c:	4b6a      	ldr	r3, [pc, #424]	; (80020d8 <DiagCtrl_ProcessRequestedData+0x2dc>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
	if(I2cOneLcd_FaultValue_One != 0 ||
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d117      	bne.n	8001f64 <DiagCtrl_ProcessRequestedData+0x168>
			I2cOneLcd_FaultValue_Three != 0 ||
 8001f34:	4b69      	ldr	r3, [pc, #420]	; (80020dc <DiagCtrl_ProcessRequestedData+0x2e0>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Two != 0 ||
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d113      	bne.n	8001f64 <DiagCtrl_ProcessRequestedData+0x168>
			I2cOneLcd_FaultValue_Four != 0 ||
 8001f3c:	4b68      	ldr	r3, [pc, #416]	; (80020e0 <DiagCtrl_ProcessRequestedData+0x2e4>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Three != 0 ||
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10f      	bne.n	8001f64 <DiagCtrl_ProcessRequestedData+0x168>
			I2cOneLcd_FaultValue_Five != 0 ||
 8001f44:	4b67      	ldr	r3, [pc, #412]	; (80020e4 <DiagCtrl_ProcessRequestedData+0x2e8>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Four != 0 ||
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10b      	bne.n	8001f64 <DiagCtrl_ProcessRequestedData+0x168>
			I2cOneLcd_FaultValue_Six != 0 ||
 8001f4c:	4b66      	ldr	r3, [pc, #408]	; (80020e8 <DiagCtrl_ProcessRequestedData+0x2ec>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Five != 0 ||
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d107      	bne.n	8001f64 <DiagCtrl_ProcessRequestedData+0x168>
			I2cOneLcd_FaultValue_Seven != 0 ||
 8001f54:	4b65      	ldr	r3, [pc, #404]	; (80020ec <DiagCtrl_ProcessRequestedData+0x2f0>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Six != 0 ||
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d103      	bne.n	8001f64 <DiagCtrl_ProcessRequestedData+0x168>
			I2cOneLcd_FaultValue_Eight != 0)
 8001f5c:	4b64      	ldr	r3, [pc, #400]	; (80020f0 <DiagCtrl_ProcessRequestedData+0x2f4>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Seven != 0 ||
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d002      	beq.n	8001f6a <DiagCtrl_ProcessRequestedData+0x16e>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_LCD_MODULE_MALFUNCTION);
 8001f64:	2062      	movs	r0, #98	; 0x62
 8001f66:	f003 ff65 	bl	8005e34 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}
#endif
	if(LightSensor_RequestedValue < 100)
 8001f6a:	4b4b      	ldr	r3, [pc, #300]	; (8002098 <DiagCtrl_ProcessRequestedData+0x29c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2b63      	cmp	r3, #99	; 0x63
 8001f70:	d802      	bhi.n	8001f78 <DiagCtrl_ProcessRequestedData+0x17c>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_LIGHT_SENSOR_MALFUNCTION);
 8001f72:	2003      	movs	r0, #3
 8001f74:	f003 ff5e 	bl	8005e34 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(VibrationSensor_RequestedValue < 100)
 8001f78:	4b48      	ldr	r3, [pc, #288]	; (800209c <DiagCtrl_ProcessRequestedData+0x2a0>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b63      	cmp	r3, #99	; 0x63
 8001f7e:	d802      	bhi.n	8001f86 <DiagCtrl_ProcessRequestedData+0x18a>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_VIBRATION_SENSOR_MALFUNCTION);
 8001f80:	2013      	movs	r0, #19
 8001f82:	f003 ff57 	bl	8005e34 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(TemperatureSensor_RequestedValue < 100)
 8001f86:	4b46      	ldr	r3, [pc, #280]	; (80020a0 <DiagCtrl_ProcessRequestedData+0x2a4>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2b63      	cmp	r3, #99	; 0x63
 8001f8c:	d802      	bhi.n	8001f94 <DiagCtrl_ProcessRequestedData+0x198>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_TEMPERATURE_SENSOR_MALFUNCTION);
 8001f8e:	2033      	movs	r0, #51	; 0x33
 8001f90:	f003 ff50 	bl	8005e34 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelThree == 0)
 8001f94:	4b57      	ldr	r3, [pc, #348]	; (80020f4 <DiagCtrl_ProcessRequestedData+0x2f8>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d102      	bne.n	8001fa2 <DiagCtrl_ProcessRequestedData+0x1a6>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION);
 8001f9c:	2012      	movs	r0, #18
 8001f9e:	f003 ff49 	bl	8005e34 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelFour == 0)
 8001fa2:	4b55      	ldr	r3, [pc, #340]	; (80020f8 <DiagCtrl_ProcessRequestedData+0x2fc>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d102      	bne.n	8001fb0 <DiagCtrl_ProcessRequestedData+0x1b4>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION);
 8001faa:	2002      	movs	r0, #2
 8001fac:	f003 ff42 	bl	8005e34 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_LB_L_REQUEST);
 8001fb0:	2004      	movs	r0, #4
 8001fb2:	f001 fb1f 	bl	80035f4 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_LOW_BEAM_LEFT_MALFUNCTION)
 8001fb6:	4b51      	ldr	r3, [pc, #324]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	d104      	bne.n	8001fc8 <DiagCtrl_ProcessRequestedData+0x1cc>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 8001fbe:	4b4f      	ldr	r3, [pc, #316]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f003 ff36 	bl	8005e34 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_LB_R_REQUEST);
 8001fc8:	2005      	movs	r0, #5
 8001fca:	f001 fb13 	bl	80035f4 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_LOW_BEAM_RIGHT_MALFUNCTION)
 8001fce:	4b4b      	ldr	r3, [pc, #300]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b05      	cmp	r3, #5
 8001fd4:	d104      	bne.n	8001fe0 <DiagCtrl_ProcessRequestedData+0x1e4>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 8001fd6:	4b49      	ldr	r3, [pc, #292]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f003 ff2a 	bl	8005e34 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_RPL_L_REQUEST);
 8001fe0:	2006      	movs	r0, #6
 8001fe2:	f001 fb07 	bl	80035f4 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_REAR_POSITION_LIGHT_LEFT_MALFUNCTION)
 8001fe6:	4b45      	ldr	r3, [pc, #276]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b44      	cmp	r3, #68	; 0x44
 8001fec:	d104      	bne.n	8001ff8 <DiagCtrl_ProcessRequestedData+0x1fc>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 8001fee:	4b43      	ldr	r3, [pc, #268]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f003 ff1e 	bl	8005e34 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_RPL_R_REQUEST);
 8001ff8:	2007      	movs	r0, #7
 8001ffa:	f001 fafb 	bl	80035f4 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_REAR_POSITION_LIGHT_RIGHT_MALFUNCTION)
 8001ffe:	4b3f      	ldr	r3, [pc, #252]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b45      	cmp	r3, #69	; 0x45
 8002004:	d104      	bne.n	8002010 <DiagCtrl_ProcessRequestedData+0x214>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 8002006:	4b3d      	ldr	r3, [pc, #244]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f003 ff12 	bl	8005e34 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_BL_R_REQUEST);
 8002010:	2008      	movs	r0, #8
 8002012:	f001 faef 	bl	80035f4 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_BRAKE_LIGHT_RIGHT_MALFUNCTION)
 8002016:	4b39      	ldr	r3, [pc, #228]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b74      	cmp	r3, #116	; 0x74
 800201c:	d104      	bne.n	8002028 <DiagCtrl_ProcessRequestedData+0x22c>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 800201e:	4b37      	ldr	r3, [pc, #220]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f003 ff06 	bl	8005e34 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_BL_L_REQUEST);
 8002028:	2009      	movs	r0, #9
 800202a:	f001 fae3 	bl	80035f4 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_BRAKE_LIGHT_LEFT_MALFUNCTION)
 800202e:	4b33      	ldr	r3, [pc, #204]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b74      	cmp	r3, #116	; 0x74
 8002034:	d104      	bne.n	8002040 <DiagCtrl_ProcessRequestedData+0x244>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 8002036:	4b31      	ldr	r3, [pc, #196]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f003 fefa 	bl	8005e34 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_LTS_F_REQUEST);
 8002040:	200a      	movs	r0, #10
 8002042:	f001 fad7 	bl	80035f4 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_LEFT_TURN_SIGNAL_FRONT_MALFUNCTION)
 8002046:	4b2d      	ldr	r3, [pc, #180]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b64      	cmp	r3, #100	; 0x64
 800204c:	d104      	bne.n	8002058 <DiagCtrl_ProcessRequestedData+0x25c>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 800204e:	4b2b      	ldr	r3, [pc, #172]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f003 feee 	bl	8005e34 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_LTS_R_REQUEST);
 8002058:	200b      	movs	r0, #11
 800205a:	f001 facb 	bl	80035f4 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_LEFT_TURN_SIGNAL_REAR_MALFUNCTION)
 800205e:	4b27      	ldr	r3, [pc, #156]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b65      	cmp	r3, #101	; 0x65
 8002064:	d104      	bne.n	8002070 <DiagCtrl_ProcessRequestedData+0x274>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 8002066:	4b25      	ldr	r3, [pc, #148]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f003 fee2 	bl	8005e34 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_RTS_R_REQUEST);
 8002070:	200c      	movs	r0, #12
 8002072:	f001 fabf 	bl	80035f4 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_RIGHT_TURN_SIGNAL_REAR_MALFUNCTION)
 8002076:	4b21      	ldr	r3, [pc, #132]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b55      	cmp	r3, #85	; 0x55
 800207c:	d104      	bne.n	8002088 <DiagCtrl_ProcessRequestedData+0x28c>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 800207e:	4b1f      	ldr	r3, [pc, #124]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f003 fed6 	bl	8005e34 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_RTS_F_REQUEST);
 8002088:	200d      	movs	r0, #13
 800208a:	f001 fab3 	bl	80035f4 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_LEFT_TURN_SIGNAL_FRONT_MALFUNCTION)
 800208e:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b64      	cmp	r3, #100	; 0x64
 8002094:	e034      	b.n	8002100 <DiagCtrl_ProcessRequestedData+0x304>
 8002096:	bf00      	nop
 8002098:	2000012c 	.word	0x2000012c
 800209c:	20000130 	.word	0x20000130
 80020a0:	20000134 	.word	0x20000134
 80020a4:	20000138 	.word	0x20000138
 80020a8:	20000139 	.word	0x20000139
 80020ac:	2000013a 	.word	0x2000013a
 80020b0:	2000013b 	.word	0x2000013b
 80020b4:	2000013c 	.word	0x2000013c
 80020b8:	2000013d 	.word	0x2000013d
 80020bc:	2000013e 	.word	0x2000013e
 80020c0:	2000013f 	.word	0x2000013f
 80020c4:	20000140 	.word	0x20000140
 80020c8:	20000141 	.word	0x20000141
 80020cc:	20000142 	.word	0x20000142
 80020d0:	20000143 	.word	0x20000143
 80020d4:	20000144 	.word	0x20000144
 80020d8:	20000145 	.word	0x20000145
 80020dc:	20000146 	.word	0x20000146
 80020e0:	20000147 	.word	0x20000147
 80020e4:	20000148 	.word	0x20000148
 80020e8:	20000149 	.word	0x20000149
 80020ec:	2000014a 	.word	0x2000014a
 80020f0:	2000014b 	.word	0x2000014b
 80020f4:	20000939 	.word	0x20000939
 80020f8:	20000949 	.word	0x20000949
 80020fc:	2000012a 	.word	0x2000012a
 8002100:	d104      	bne.n	800210c <DiagCtrl_ProcessRequestedData+0x310>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 8002102:	4b03      	ldr	r3, [pc, #12]	; (8002110 <DiagCtrl_ProcessRequestedData+0x314>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f003 fe94 	bl	8005e34 <Dem_ReceiveFault>
	}
	else
	{
		/* do nothing */
	}
}
 800210c:	bf00      	nop
 800210e:	bd80      	pop	{r7, pc}
 8002110:	2000012a 	.word	0x2000012a

08002114 <ExtLights_TurnSignalHazardLight>:
/***********************************************************************************
* Function: ExtLights_TurnSignalHazardLight										   *
* Description: Process the turn signals and hazard lights states. 		   		   *
************************************************************************************/
VOID ExtLights_TurnSignalHazardLight()
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
	/* If the turn signal left is set on. */
	if(ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 8002118:	4b4c      	ldr	r3, [pc, #304]	; (800224c <ExtLights_TurnSignalHazardLight+0x138>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d123      	bne.n	8002168 <ExtLights_TurnSignalHazardLight+0x54>
	{
		/* Check if the timer related to the turn signals is off. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_TurnSignals_TimerHandle) == 0)
 8002120:	4b4b      	ldr	r3, [pc, #300]	; (8002250 <ExtLights_TurnSignalHazardLight+0x13c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f00c ff0a 	bl	800ef3e <osTimerIsRunning>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d106      	bne.n	800213e <ExtLights_TurnSignalHazardLight+0x2a>
		{
			/* Start the timer with the designated period counter value. */
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 8002130:	4b47      	ldr	r3, [pc, #284]	; (8002250 <ExtLights_TurnSignalHazardLight+0x13c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002138:	4618      	mov	r0, r3
 800213a:	f010 f9e2 	bl	8012502 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Turn on and off the turn signal. */
		if(ExtLights_LTSFlag % 2 == 1)
 800213e:	4b45      	ldr	r3, [pc, #276]	; (8002254 <ExtLights_TurnSignalHazardLight+0x140>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d004      	beq.n	8002154 <ExtLights_TurnSignalHazardLight+0x40>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 800214a:	2108      	movs	r1, #8
 800214c:	4842      	ldr	r0, [pc, #264]	; (8002258 <ExtLights_TurnSignalHazardLight+0x144>)
 800214e:	f010 f805 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8002152:	e009      	b.n	8002168 <ExtLights_TurnSignalHazardLight+0x54>
		}
		else if(ExtLights_LTSFlag % 2 == 0)
 8002154:	4b3f      	ldr	r3, [pc, #252]	; (8002254 <ExtLights_TurnSignalHazardLight+0x140>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b00      	cmp	r3, #0
 800215e:	d103      	bne.n	8002168 <ExtLights_TurnSignalHazardLight+0x54>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8002160:	2108      	movs	r1, #8
 8002162:	483d      	ldr	r0, [pc, #244]	; (8002258 <ExtLights_TurnSignalHazardLight+0x144>)
 8002164:	f010 f807 	bl	8012176 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* If the turn signal right is set on. */
	if(ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 8002168:	4b3c      	ldr	r3, [pc, #240]	; (800225c <ExtLights_TurnSignalHazardLight+0x148>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d123      	bne.n	80021b8 <ExtLights_TurnSignalHazardLight+0xa4>
	{
		/* Check if the timer related to the turn signals is off. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_TurnSignals_TimerHandle) == 0)
 8002170:	4b37      	ldr	r3, [pc, #220]	; (8002250 <ExtLights_TurnSignalHazardLight+0x13c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f00c fee2 	bl	800ef3e <osTimerIsRunning>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d106      	bne.n	800218e <ExtLights_TurnSignalHazardLight+0x7a>
		{
			/* Start the timer with the designated period counter value. */
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 8002180:	4b33      	ldr	r3, [pc, #204]	; (8002250 <ExtLights_TurnSignalHazardLight+0x13c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002188:	4618      	mov	r0, r3
 800218a:	f010 f9ba 	bl	8012502 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Turn on and off the turn signal. */
		if(ExtLights_RTSFlag % 2 == 1)
 800218e:	4b34      	ldr	r3, [pc, #208]	; (8002260 <ExtLights_TurnSignalHazardLight+0x14c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d004      	beq.n	80021a4 <ExtLights_TurnSignalHazardLight+0x90>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 800219a:	210c      	movs	r1, #12
 800219c:	482e      	ldr	r0, [pc, #184]	; (8002258 <ExtLights_TurnSignalHazardLight+0x144>)
 800219e:	f00f ffdd 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 80021a2:	e009      	b.n	80021b8 <ExtLights_TurnSignalHazardLight+0xa4>
		}
		else if(ExtLights_RTSFlag % 2 == 0)
 80021a4:	4b2e      	ldr	r3, [pc, #184]	; (8002260 <ExtLights_TurnSignalHazardLight+0x14c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d103      	bne.n	80021b8 <ExtLights_TurnSignalHazardLight+0xa4>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 80021b0:	210c      	movs	r1, #12
 80021b2:	4829      	ldr	r0, [pc, #164]	; (8002258 <ExtLights_TurnSignalHazardLight+0x144>)
 80021b4:	f00f ffdf 	bl	8012176 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* If the hazard light is set on. */
	if(ExtLights_HazardLight_CurrentState == STD_HIGH)
 80021b8:	4b2a      	ldr	r3, [pc, #168]	; (8002264 <ExtLights_TurnSignalHazardLight+0x150>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d12b      	bne.n	8002218 <ExtLights_TurnSignalHazardLight+0x104>
	{
		/* Check if the timer related to the turn signals is off. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_TurnSignals_TimerHandle) == 0)
 80021c0:	4b23      	ldr	r3, [pc, #140]	; (8002250 <ExtLights_TurnSignalHazardLight+0x13c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f00c feba 	bl	800ef3e <osTimerIsRunning>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d106      	bne.n	80021de <ExtLights_TurnSignalHazardLight+0xca>
		{
			/* Start the timer with the designated period counter value. */
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 80021d0:	4b1f      	ldr	r3, [pc, #124]	; (8002250 <ExtLights_TurnSignalHazardLight+0x13c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80021d8:	4618      	mov	r0, r3
 80021da:	f010 f992 	bl	8012502 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Turn on and off the turn signal. */
		if(ExtLights_HLFlag % 2 == 1)
 80021de:	4b22      	ldr	r3, [pc, #136]	; (8002268 <ExtLights_TurnSignalHazardLight+0x154>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d008      	beq.n	80021fc <ExtLights_TurnSignalHazardLight+0xe8>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80021ea:	2108      	movs	r1, #8
 80021ec:	481a      	ldr	r0, [pc, #104]	; (8002258 <ExtLights_TurnSignalHazardLight+0x144>)
 80021ee:	f00f ffb5 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 80021f2:	210c      	movs	r1, #12
 80021f4:	4818      	ldr	r0, [pc, #96]	; (8002258 <ExtLights_TurnSignalHazardLight+0x144>)
 80021f6:	f00f ffb1 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 80021fa:	e00d      	b.n	8002218 <ExtLights_TurnSignalHazardLight+0x104>
		}
		else if(ExtLights_HLFlag % 2 == 0)
 80021fc:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <ExtLights_TurnSignalHazardLight+0x154>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	d107      	bne.n	8002218 <ExtLights_TurnSignalHazardLight+0x104>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8002208:	2108      	movs	r1, #8
 800220a:	4813      	ldr	r0, [pc, #76]	; (8002258 <ExtLights_TurnSignalHazardLight+0x144>)
 800220c:	f00f ffb3 	bl	8012176 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8002210:	210c      	movs	r1, #12
 8002212:	4811      	ldr	r0, [pc, #68]	; (8002258 <ExtLights_TurnSignalHazardLight+0x144>)
 8002214:	f00f ffaf 	bl	8012176 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Only one pair of turn signals can be on at a time. Set on one pair and the other off. */
	if(ExtLights_TurnSignalRight_CurrentState == STD_LOW && ExtLights_HazardLight_CurrentState == STD_LOW)
 8002218:	4b10      	ldr	r3, [pc, #64]	; (800225c <ExtLights_TurnSignalHazardLight+0x148>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d107      	bne.n	8002230 <ExtLights_TurnSignalHazardLight+0x11c>
 8002220:	4b10      	ldr	r3, [pc, #64]	; (8002264 <ExtLights_TurnSignalHazardLight+0x150>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d103      	bne.n	8002230 <ExtLights_TurnSignalHazardLight+0x11c>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8002228:	210c      	movs	r1, #12
 800222a:	480b      	ldr	r0, [pc, #44]	; (8002258 <ExtLights_TurnSignalHazardLight+0x144>)
 800222c:	f00f ffa3 	bl	8012176 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Only one pair of turn signals can be on at a time. Set on one pair and the other off. */
	if(ExtLights_TurnSignalLeft_CurrentState == STD_LOW && ExtLights_HazardLight_CurrentState == STD_LOW)
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <ExtLights_TurnSignalHazardLight+0x138>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d107      	bne.n	8002248 <ExtLights_TurnSignalHazardLight+0x134>
 8002238:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <ExtLights_TurnSignalHazardLight+0x150>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d103      	bne.n	8002248 <ExtLights_TurnSignalHazardLight+0x134>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8002240:	2108      	movs	r1, #8
 8002242:	4805      	ldr	r0, [pc, #20]	; (8002258 <ExtLights_TurnSignalHazardLight+0x144>)
 8002244:	f00f ff97 	bl	8012176 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	}
	else
	{
		/* do nothing */
	}
}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20000152 	.word	0x20000152
 8002250:	20000368 	.word	0x20000368
 8002254:	20000160 	.word	0x20000160
 8002258:	200006ac 	.word	0x200006ac
 800225c:	20000153 	.word	0x20000153
 8002260:	2000015c 	.word	0x2000015c
 8002264:	20000156 	.word	0x20000156
 8002268:	20000164 	.word	0x20000164

0800226c <ExtLights_PrevStateTSHL>:
* Function: ExtLights_PrevStateTSHL										           *
* Description: Checks the current state and previous state of turn signals and     *
* 			   hazard lights. 		   											   *
************************************************************************************/
VOID ExtLights_PrevStateTSHL()
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
	/* Change the variables related to states. */
	if(ExtLights_TurnSignalLeft_CurrentState != ExtLights_LTS_PrevState)
 8002270:	4b18      	ldr	r3, [pc, #96]	; (80022d4 <ExtLights_PrevStateTSHL+0x68>)
 8002272:	781a      	ldrb	r2, [r3, #0]
 8002274:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <ExtLights_PrevStateTSHL+0x6c>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d009      	beq.n	8002290 <ExtLights_PrevStateTSHL+0x24>
	{
		ExtLights_LTS_PrevState = ExtLights_TurnSignalLeft_CurrentState;
 800227c:	4b15      	ldr	r3, [pc, #84]	; (80022d4 <ExtLights_PrevStateTSHL+0x68>)
 800227e:	781a      	ldrb	r2, [r3, #0]
 8002280:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <ExtLights_PrevStateTSHL+0x6c>)
 8002282:	701a      	strb	r2, [r3, #0]
		ExtLights_LTSFlag = 0;
 8002284:	4b15      	ldr	r3, [pc, #84]	; (80022dc <ExtLights_PrevStateTSHL+0x70>)
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_Lts_Counter(&ExtLights_LTSFlag);
 800228a:	4814      	ldr	r0, [pc, #80]	; (80022dc <ExtLights_PrevStateTSHL+0x70>)
 800228c:	f00f ff0c 	bl	80120a8 <Rte_Write_Os_R_OsPort_Os_Lts_Counter>
	else
	{
		/* do nothing */
	}
	/* Change the variables related to states. */
	if(ExtLights_TurnSignalRight_CurrentState != ExtLights_RTS_PrevState)
 8002290:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <ExtLights_PrevStateTSHL+0x74>)
 8002292:	781a      	ldrb	r2, [r3, #0]
 8002294:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <ExtLights_PrevStateTSHL+0x78>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d009      	beq.n	80022b0 <ExtLights_PrevStateTSHL+0x44>
	{
		ExtLights_RTS_PrevState = ExtLights_TurnSignalRight_CurrentState;
 800229c:	4b10      	ldr	r3, [pc, #64]	; (80022e0 <ExtLights_PrevStateTSHL+0x74>)
 800229e:	781a      	ldrb	r2, [r3, #0]
 80022a0:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <ExtLights_PrevStateTSHL+0x78>)
 80022a2:	701a      	strb	r2, [r3, #0]
		ExtLights_RTSFlag = 0;
 80022a4:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <ExtLights_PrevStateTSHL+0x7c>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_Rts_Counter(&ExtLights_RTSFlag);
 80022aa:	480f      	ldr	r0, [pc, #60]	; (80022e8 <ExtLights_PrevStateTSHL+0x7c>)
 80022ac:	f00f ff0c 	bl	80120c8 <Rte_Write_Os_R_OsPort_Os_Rts_Counter>
	else
	{
		/* do nothing */
	}
	/* Change the variables related to states. */
	if(ExtLights_HazardLight_CurrentState != ExtLights_HL_PrevState)
 80022b0:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <ExtLights_PrevStateTSHL+0x80>)
 80022b2:	781a      	ldrb	r2, [r3, #0]
 80022b4:	4b0e      	ldr	r3, [pc, #56]	; (80022f0 <ExtLights_PrevStateTSHL+0x84>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d009      	beq.n	80022d0 <ExtLights_PrevStateTSHL+0x64>
	{
		ExtLights_HL_PrevState = ExtLights_HazardLight_CurrentState;
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <ExtLights_PrevStateTSHL+0x80>)
 80022be:	781a      	ldrb	r2, [r3, #0]
 80022c0:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <ExtLights_PrevStateTSHL+0x84>)
 80022c2:	701a      	strb	r2, [r3, #0]
		ExtLights_HLFlag = 0;
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <ExtLights_PrevStateTSHL+0x88>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_HL_Counter(&ExtLights_HLFlag);
 80022ca:	480a      	ldr	r0, [pc, #40]	; (80022f4 <ExtLights_PrevStateTSHL+0x88>)
 80022cc:	f00f ff0c 	bl	80120e8 <Rte_Write_Os_R_OsPort_Os_HL_Counter>
	}
	else
	{
		/* do nothing */
	}
}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20000152 	.word	0x20000152
 80022d8:	20000159 	.word	0x20000159
 80022dc:	20000160 	.word	0x20000160
 80022e0:	20000153 	.word	0x20000153
 80022e4:	20000158 	.word	0x20000158
 80022e8:	2000015c 	.word	0x2000015c
 80022ec:	20000156 	.word	0x20000156
 80022f0:	2000015a 	.word	0x2000015a
 80022f4:	20000164 	.word	0x20000164

080022f8 <ExtLights_LightState>:
/***********************************************************************************
* Function: ExtLights_LightState										   		   *
* Description: Controls the lights states.								 		   *
************************************************************************************/
VOID ExtLights_LightState()
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
	/* Process turn signals state. */
	ExtLights_PrevStateTSHL();
 80022fc:	f7ff ffb6 	bl	800226c <ExtLights_PrevStateTSHL>
	/* Follow me home is on, then turn on the respective lights. */
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_HIGH)
 8002300:	4b88      	ldr	r3, [pc, #544]	; (8002524 <ExtLights_LightState+0x22c>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d110      	bne.n	800232a <ExtLights_LightState+0x32>
	{
		ExtLights_LightSwitchMode();
 8002308:	f000 f9d8 	bl	80026bc <ExtLights_LightSwitchMode>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 800230c:	2100      	movs	r1, #0
 800230e:	4886      	ldr	r0, [pc, #536]	; (8002528 <ExtLights_LightState+0x230>)
 8002310:	f00f ff24 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8002314:	2104      	movs	r1, #4
 8002316:	4884      	ldr	r0, [pc, #528]	; (8002528 <ExtLights_LightState+0x230>)
 8002318:	f00f ff20 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		ExtLights_LowBeam_CurrentState = STD_HIGH;
 800231c:	4b83      	ldr	r3, [pc, #524]	; (800252c <ExtLights_LightState+0x234>)
 800231e:	2201      	movs	r2, #1
 8002320:	701a      	strb	r2, [r3, #0]
		ExtLights_RearPositionLights_CurrentState = STD_HIGH;
 8002322:	4b83      	ldr	r3, [pc, #524]	; (8002530 <ExtLights_LightState+0x238>)
 8002324:	2201      	movs	r2, #1
 8002326:	701a      	strb	r2, [r3, #0]
 8002328:	e017      	b.n	800235a <ExtLights_LightState+0x62>
	}/* Follow me home is off, turn off the lights.*/
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW)
 800232a:	4b7e      	ldr	r3, [pc, #504]	; (8002524 <ExtLights_LightState+0x22c>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d113      	bne.n	800235a <ExtLights_LightState+0x62>
	{
		ExtLights_LightSwitchMode();
 8002332:	f000 f9c3 	bl	80026bc <ExtLights_LightSwitchMode>
		if(ExtLights_LightsSwitch_CurrentState == STD_LOW)
 8002336:	4b7f      	ldr	r3, [pc, #508]	; (8002534 <ExtLights_LightState+0x23c>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10d      	bne.n	800235a <ExtLights_LightState+0x62>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 800233e:	2100      	movs	r1, #0
 8002340:	4879      	ldr	r0, [pc, #484]	; (8002528 <ExtLights_LightState+0x230>)
 8002342:	f00f ff18 	bl	8012176 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8002346:	2104      	movs	r1, #4
 8002348:	4877      	ldr	r0, [pc, #476]	; (8002528 <ExtLights_LightState+0x230>)
 800234a:	f00f ff14 	bl	8012176 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			ExtLights_LowBeam_CurrentState = STD_LOW;
 800234e:	4b77      	ldr	r3, [pc, #476]	; (800252c <ExtLights_LightState+0x234>)
 8002350:	2200      	movs	r2, #0
 8002352:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8002354:	4b76      	ldr	r3, [pc, #472]	; (8002530 <ExtLights_LightState+0x238>)
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If any light state is set to on, then stop the follow me home. */
	if(ExtLights_BrakeLight_CurrentState == STD_HIGH ||
 800235a:	4b77      	ldr	r3, [pc, #476]	; (8002538 <ExtLights_LightState+0x240>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d017      	beq.n	8002392 <ExtLights_LightState+0x9a>
		ExtLights_FlashHighBeam_CurrentState == STD_HIGH ||
 8002362:	4b76      	ldr	r3, [pc, #472]	; (800253c <ExtLights_LightState+0x244>)
 8002364:	781b      	ldrb	r3, [r3, #0]
	if(ExtLights_BrakeLight_CurrentState == STD_HIGH ||
 8002366:	2b01      	cmp	r3, #1
 8002368:	d013      	beq.n	8002392 <ExtLights_LightState+0x9a>
		ExtLights_LightsSwitch_CurrentState != STD_LOW ||
 800236a:	4b72      	ldr	r3, [pc, #456]	; (8002534 <ExtLights_LightState+0x23c>)
 800236c:	781b      	ldrb	r3, [r3, #0]
		ExtLights_FlashHighBeam_CurrentState == STD_HIGH ||
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10f      	bne.n	8002392 <ExtLights_LightState+0x9a>
		ExtLights_HighBeam_CurrentState == STD_HIGH ||
 8002372:	4b73      	ldr	r3, [pc, #460]	; (8002540 <ExtLights_LightState+0x248>)
 8002374:	781b      	ldrb	r3, [r3, #0]
		ExtLights_LightsSwitch_CurrentState != STD_LOW ||
 8002376:	2b01      	cmp	r3, #1
 8002378:	d00b      	beq.n	8002392 <ExtLights_LightState+0x9a>
		ExtLights_TurnSignalLeft_CurrentState == STD_HIGH ||
 800237a:	4b72      	ldr	r3, [pc, #456]	; (8002544 <ExtLights_LightState+0x24c>)
 800237c:	781b      	ldrb	r3, [r3, #0]
		ExtLights_HighBeam_CurrentState == STD_HIGH ||
 800237e:	2b01      	cmp	r3, #1
 8002380:	d007      	beq.n	8002392 <ExtLights_LightState+0x9a>
		ExtLights_TurnSignalRight_CurrentState == STD_HIGH ||
 8002382:	4b71      	ldr	r3, [pc, #452]	; (8002548 <ExtLights_LightState+0x250>)
 8002384:	781b      	ldrb	r3, [r3, #0]
		ExtLights_TurnSignalLeft_CurrentState == STD_HIGH ||
 8002386:	2b01      	cmp	r3, #1
 8002388:	d003      	beq.n	8002392 <ExtLights_LightState+0x9a>
		ExtLights_HazardLight_CurrentState == STD_HIGH)
 800238a:	4b70      	ldr	r3, [pc, #448]	; (800254c <ExtLights_LightState+0x254>)
 800238c:	781b      	ldrb	r3, [r3, #0]
		ExtLights_TurnSignalRight_CurrentState == STD_HIGH ||
 800238e:	2b01      	cmp	r3, #1
 8002390:	d11a      	bne.n	80023c8 <ExtLights_LightState+0xd0>
	{
		if(ExtLights_LightsSwitch_CurrentState == STD_LOW)
 8002392:	4b68      	ldr	r3, [pc, #416]	; (8002534 <ExtLights_LightState+0x23c>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d116      	bne.n	80023c8 <ExtLights_LightState+0xd0>
		{
			Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState(STD_LOW);
 800239a:	2000      	movs	r0, #0
 800239c:	f00f ff60 	bl	8012260 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState>
			Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter((uint8*)2);
 80023a0:	2002      	movs	r0, #2
 80023a2:	f00f fe01 	bl	8011fa8 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter>
			Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter((uint8*)2);
 80023a6:	2002      	movs	r0, #2
 80023a8:	f00f fe6e 	bl	8012088 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 80023ac:	2100      	movs	r1, #0
 80023ae:	485e      	ldr	r0, [pc, #376]	; (8002528 <ExtLights_LightState+0x230>)
 80023b0:	f00f fee1 	bl	8012176 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 80023b4:	2104      	movs	r1, #4
 80023b6:	485c      	ldr	r0, [pc, #368]	; (8002528 <ExtLights_LightState+0x230>)
 80023b8:	f00f fedd 	bl	8012176 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			ExtLights_LowBeam_CurrentState = STD_LOW;
 80023bc:	4b5b      	ldr	r3, [pc, #364]	; (800252c <ExtLights_LightState+0x234>)
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_LOW;
 80023c2:	4b5b      	ldr	r3, [pc, #364]	; (8002530 <ExtLights_LightState+0x238>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* Control the turn signals for the central lock lock unlock sequence when requested. */
	if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == STD_HIGH)
 80023c8:	4b61      	ldr	r3, [pc, #388]	; (8002550 <ExtLights_LightState+0x258>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d108      	bne.n	80023e2 <ExtLights_LightState+0xea>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80023d0:	2108      	movs	r1, #8
 80023d2:	4860      	ldr	r0, [pc, #384]	; (8002554 <ExtLights_LightState+0x25c>)
 80023d4:	f00f fec2 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 80023d8:	210c      	movs	r1, #12
 80023da:	485e      	ldr	r0, [pc, #376]	; (8002554 <ExtLights_LightState+0x25c>)
 80023dc:	f00f febe 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 80023e0:	e016      	b.n	8002410 <ExtLights_LightState+0x118>
	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == STD_LOW)
 80023e2:	4b5b      	ldr	r3, [pc, #364]	; (8002550 <ExtLights_LightState+0x258>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d108      	bne.n	80023fc <ExtLights_LightState+0x104>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80023ea:	2108      	movs	r1, #8
 80023ec:	4859      	ldr	r0, [pc, #356]	; (8002554 <ExtLights_LightState+0x25c>)
 80023ee:	f00f fec2 	bl	8012176 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 80023f2:	210c      	movs	r1, #12
 80023f4:	4857      	ldr	r0, [pc, #348]	; (8002554 <ExtLights_LightState+0x25c>)
 80023f6:	f00f febe 	bl	8012176 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
 80023fa:	e009      	b.n	8002410 <ExtLights_LightState+0x118>
	}/* Allows for turning on the hazard lights or turn signals independently of other states in the system. */
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == 2 || Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == 4)
 80023fc:	4b54      	ldr	r3, [pc, #336]	; (8002550 <ExtLights_LightState+0x258>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b02      	cmp	r3, #2
 8002402:	d003      	beq.n	800240c <ExtLights_LightState+0x114>
 8002404:	4b52      	ldr	r3, [pc, #328]	; (8002550 <ExtLights_LightState+0x258>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b04      	cmp	r3, #4
 800240a:	d101      	bne.n	8002410 <ExtLights_LightState+0x118>
	{
		ExtLights_TurnSignalHazardLight();
 800240c:	f7ff fe82 	bl	8002114 <ExtLights_TurnSignalHazardLight>
	else
	{
		/* do nothing */
	}
	/* Turn on/off high beam. */
	if(ExtLights_FlashHighBeam_CurrentState == STD_HIGH)
 8002410:	4b4a      	ldr	r3, [pc, #296]	; (800253c <ExtLights_LightState+0x244>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d103      	bne.n	8002420 <ExtLights_LightState+0x128>
	{
		ExtLights_HighBeam(STD_HIGH);
 8002418:	2001      	movs	r0, #1
 800241a:	f000 fa3d 	bl	8002898 <ExtLights_HighBeam>
 800241e:	e006      	b.n	800242e <ExtLights_LightState+0x136>
	}
	else if(ExtLights_FlashHighBeam_CurrentState == STD_LOW)
 8002420:	4b46      	ldr	r3, [pc, #280]	; (800253c <ExtLights_LightState+0x244>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d102      	bne.n	800242e <ExtLights_LightState+0x136>
	{
		ExtLights_HighBeam(STD_LOW);
 8002428:	2000      	movs	r0, #0
 800242a:	f000 fa35 	bl	8002898 <ExtLights_HighBeam>
	else
	{
		/* do nothing */
	}
	/* Turn on/off high beam. */
	if(ExtLights_HighBeam_CurrentState == STD_HIGH)
 800242e:	4b44      	ldr	r3, [pc, #272]	; (8002540 <ExtLights_LightState+0x248>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d103      	bne.n	800243e <ExtLights_LightState+0x146>
	{
		ExtLights_HighBeam(STD_HIGH);
 8002436:	2001      	movs	r0, #1
 8002438:	f000 fa2e 	bl	8002898 <ExtLights_HighBeam>
 800243c:	e006      	b.n	800244c <ExtLights_LightState+0x154>
	}
	else if(ExtLights_HighBeam_CurrentState == STD_LOW)
 800243e:	4b40      	ldr	r3, [pc, #256]	; (8002540 <ExtLights_LightState+0x248>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d102      	bne.n	800244c <ExtLights_LightState+0x154>
	{
		ExtLights_HighBeam(STD_LOW);
 8002446:	2000      	movs	r0, #0
 8002448:	f000 fa26 	bl	8002898 <ExtLights_HighBeam>
	else
	{
		/* do nothing */
	}
	/* Turn on or off the brake lights. */
	if(ExtLights_BrakeLight_CurrentState == STD_HIGH)
 800244c:	4b3a      	ldr	r3, [pc, #232]	; (8002538 <ExtLights_LightState+0x240>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d111      	bne.n	8002478 <ExtLights_LightState+0x180>
	{
		if(ExtLights_BrakeLight_CurrentState != ExtLights_Previous_BrakeLight_CurrentState)
 8002454:	4b38      	ldr	r3, [pc, #224]	; (8002538 <ExtLights_LightState+0x240>)
 8002456:	781a      	ldrb	r2, [r3, #0]
 8002458:	4b3f      	ldr	r3, [pc, #252]	; (8002558 <ExtLights_LightState+0x260>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	429a      	cmp	r2, r3
 800245e:	d006      	beq.n	800246e <ExtLights_LightState+0x176>
		{
			ExtLights_Previous_BrakeLight_CurrentState = ExtLights_BrakeLight_CurrentState;
 8002460:	4b35      	ldr	r3, [pc, #212]	; (8002538 <ExtLights_LightState+0x240>)
 8002462:	781a      	ldrb	r2, [r3, #0]
 8002464:	4b3c      	ldr	r3, [pc, #240]	; (8002558 <ExtLights_LightState+0x260>)
 8002466:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr2(0);
 8002468:	2000      	movs	r0, #0
 800246a:	f00f fc05 	bl	8011c78 <Rte_Write_TimH_TimHPort_Tim3Ccr2>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel2);
 800246e:	2104      	movs	r1, #4
 8002470:	483a      	ldr	r0, [pc, #232]	; (800255c <ExtLights_LightState+0x264>)
 8002472:	f00f fe73 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8002476:	e014      	b.n	80024a2 <ExtLights_LightState+0x1aa>
	}
	else if(ExtLights_BrakeLight_CurrentState == STD_LOW)
 8002478:	4b2f      	ldr	r3, [pc, #188]	; (8002538 <ExtLights_LightState+0x240>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d110      	bne.n	80024a2 <ExtLights_LightState+0x1aa>
	{
		if(ExtLights_BrakeLight_CurrentState != ExtLights_Previous_BrakeLight_CurrentState)
 8002480:	4b2d      	ldr	r3, [pc, #180]	; (8002538 <ExtLights_LightState+0x240>)
 8002482:	781a      	ldrb	r2, [r3, #0]
 8002484:	4b34      	ldr	r3, [pc, #208]	; (8002558 <ExtLights_LightState+0x260>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d006      	beq.n	800249a <ExtLights_LightState+0x1a2>
		{
			ExtLights_Previous_BrakeLight_CurrentState = ExtLights_BrakeLight_CurrentState;
 800248c:	4b2a      	ldr	r3, [pc, #168]	; (8002538 <ExtLights_LightState+0x240>)
 800248e:	781a      	ldrb	r2, [r3, #0]
 8002490:	4b31      	ldr	r3, [pc, #196]	; (8002558 <ExtLights_LightState+0x260>)
 8002492:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr2(0);
 8002494:	2000      	movs	r0, #0
 8002496:	f00f fbef 	bl	8011c78 <Rte_Write_TimH_TimHPort_Tim3Ccr2>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel2);
 800249a:	2104      	movs	r1, #4
 800249c:	482f      	ldr	r0, [pc, #188]	; (800255c <ExtLights_LightState+0x264>)
 800249e:	f00f fe6a 	bl	8012176 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Turn on or off the rear fog lights. */
	if(ExtLights_RearFogLight_CurrentState == STD_HIGH)
 80024a2:	4b2f      	ldr	r3, [pc, #188]	; (8002560 <ExtLights_LightState+0x268>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d111      	bne.n	80024ce <ExtLights_LightState+0x1d6>
	{
		if(ExtLights_RearFogLight_CurrentState != ExtLights_Previous_RearFogLight_CurrentState)
 80024aa:	4b2d      	ldr	r3, [pc, #180]	; (8002560 <ExtLights_LightState+0x268>)
 80024ac:	781a      	ldrb	r2, [r3, #0]
 80024ae:	4b2d      	ldr	r3, [pc, #180]	; (8002564 <ExtLights_LightState+0x26c>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d006      	beq.n	80024c4 <ExtLights_LightState+0x1cc>
		{
			ExtLights_Previous_RearFogLight_CurrentState = ExtLights_RearFogLight_CurrentState;
 80024b6:	4b2a      	ldr	r3, [pc, #168]	; (8002560 <ExtLights_LightState+0x268>)
 80024b8:	781a      	ldrb	r2, [r3, #0]
 80024ba:	4b2a      	ldr	r3, [pc, #168]	; (8002564 <ExtLights_LightState+0x26c>)
 80024bc:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr4(0);
 80024be:	2000      	movs	r0, #0
 80024c0:	f00f fbfa 	bl	8011cb8 <Rte_Write_TimH_TimHPort_Tim3Ccr4>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 80024c4:	210c      	movs	r1, #12
 80024c6:	4825      	ldr	r0, [pc, #148]	; (800255c <ExtLights_LightState+0x264>)
 80024c8:	f00f fe48 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 80024cc:	e014      	b.n	80024f8 <ExtLights_LightState+0x200>
	}
	else if(ExtLights_RearFogLight_CurrentState == STD_LOW)
 80024ce:	4b24      	ldr	r3, [pc, #144]	; (8002560 <ExtLights_LightState+0x268>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d110      	bne.n	80024f8 <ExtLights_LightState+0x200>
	{
		if(ExtLights_RearFogLight_CurrentState != ExtLights_Previous_RearFogLight_CurrentState)
 80024d6:	4b22      	ldr	r3, [pc, #136]	; (8002560 <ExtLights_LightState+0x268>)
 80024d8:	781a      	ldrb	r2, [r3, #0]
 80024da:	4b22      	ldr	r3, [pc, #136]	; (8002564 <ExtLights_LightState+0x26c>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d006      	beq.n	80024f0 <ExtLights_LightState+0x1f8>
		{
			ExtLights_Previous_RearFogLight_CurrentState = ExtLights_RearFogLight_CurrentState;
 80024e2:	4b1f      	ldr	r3, [pc, #124]	; (8002560 <ExtLights_LightState+0x268>)
 80024e4:	781a      	ldrb	r2, [r3, #0]
 80024e6:	4b1f      	ldr	r3, [pc, #124]	; (8002564 <ExtLights_LightState+0x26c>)
 80024e8:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr4(0);
 80024ea:	2000      	movs	r0, #0
 80024ec:	f00f fbe4 	bl	8011cb8 <Rte_Write_TimH_TimHPort_Tim3Ccr4>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 80024f0:	210c      	movs	r1, #12
 80024f2:	481a      	ldr	r0, [pc, #104]	; (800255c <ExtLights_LightState+0x264>)
 80024f4:	f00f fe3f 	bl	8012176 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Turn on or off the front fog lights. */
	if(ExtLights_FrontFogLight_CurrentState == STD_HIGH)
 80024f8:	4b1b      	ldr	r3, [pc, #108]	; (8002568 <ExtLights_LightState+0x270>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d137      	bne.n	8002570 <ExtLights_LightState+0x278>
	{
		if(ExtLights_FrontFogLight_CurrentState != ExtLights_Previous_FrontFogLight_CurrentState)
 8002500:	4b19      	ldr	r3, [pc, #100]	; (8002568 <ExtLights_LightState+0x270>)
 8002502:	781a      	ldrb	r2, [r3, #0]
 8002504:	4b19      	ldr	r3, [pc, #100]	; (800256c <ExtLights_LightState+0x274>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d006      	beq.n	800251a <ExtLights_LightState+0x222>
		{
			ExtLights_Previous_FrontFogLight_CurrentState = ExtLights_FrontFogLight_CurrentState;
 800250c:	4b16      	ldr	r3, [pc, #88]	; (8002568 <ExtLights_LightState+0x270>)
 800250e:	781a      	ldrb	r2, [r3, #0]
 8002510:	4b16      	ldr	r3, [pc, #88]	; (800256c <ExtLights_LightState+0x274>)
 8002512:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr3(0);
 8002514:	2000      	movs	r0, #0
 8002516:	f00f fbbf 	bl	8011c98 <Rte_Write_TimH_TimHPort_Tim3Ccr3>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 800251a:	2108      	movs	r1, #8
 800251c:	480f      	ldr	r0, [pc, #60]	; (800255c <ExtLights_LightState+0x264>)
 800251e:	f00f fe1d 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8002522:	e03a      	b.n	800259a <ExtLights_LightState+0x2a2>
 8002524:	20000122 	.word	0x20000122
 8002528:	20000544 	.word	0x20000544
 800252c:	20000154 	.word	0x20000154
 8002530:	20000155 	.word	0x20000155
 8002534:	2000014f 	.word	0x2000014f
 8002538:	2000014e 	.word	0x2000014e
 800253c:	2000014d 	.word	0x2000014d
 8002540:	20000150 	.word	0x20000150
 8002544:	20000152 	.word	0x20000152
 8002548:	20000153 	.word	0x20000153
 800254c:	20000156 	.word	0x20000156
 8002550:	20000123 	.word	0x20000123
 8002554:	200006ac 	.word	0x200006ac
 8002558:	2000016e 	.word	0x2000016e
 800255c:	200005f8 	.word	0x200005f8
 8002560:	20000157 	.word	0x20000157
 8002564:	2000016c 	.word	0x2000016c
 8002568:	20000151 	.word	0x20000151
 800256c:	2000016d 	.word	0x2000016d
	}
	else if(ExtLights_FrontFogLight_CurrentState == STD_LOW)
 8002570:	4b42      	ldr	r3, [pc, #264]	; (800267c <ExtLights_LightState+0x384>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d110      	bne.n	800259a <ExtLights_LightState+0x2a2>
	{
		if(ExtLights_FrontFogLight_CurrentState != ExtLights_Previous_FrontFogLight_CurrentState)
 8002578:	4b40      	ldr	r3, [pc, #256]	; (800267c <ExtLights_LightState+0x384>)
 800257a:	781a      	ldrb	r2, [r3, #0]
 800257c:	4b40      	ldr	r3, [pc, #256]	; (8002680 <ExtLights_LightState+0x388>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d006      	beq.n	8002592 <ExtLights_LightState+0x29a>
		{
			ExtLights_Previous_FrontFogLight_CurrentState = ExtLights_FrontFogLight_CurrentState;
 8002584:	4b3d      	ldr	r3, [pc, #244]	; (800267c <ExtLights_LightState+0x384>)
 8002586:	781a      	ldrb	r2, [r3, #0]
 8002588:	4b3d      	ldr	r3, [pc, #244]	; (8002680 <ExtLights_LightState+0x388>)
 800258a:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr3(0);
 800258c:	2000      	movs	r0, #0
 800258e:	f00f fb83 	bl	8011c98 <Rte_Write_TimH_TimHPort_Tim3Ccr3>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 8002592:	2108      	movs	r1, #8
 8002594:	483b      	ldr	r0, [pc, #236]	; (8002684 <ExtLights_LightState+0x38c>)
 8002596:	f00f fdee 	bl	8012176 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Turn on the reverse light. */
	ExtLights_ReverseLight(ExtLights_ReverseLight_CurrentState);
 800259a:	4b3b      	ldr	r3, [pc, #236]	; (8002688 <ExtLights_LightState+0x390>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 f98c 	bl	80028bc <ExtLights_ReverseLight>

	if((ExtLights_DtcArray[0] != 0 || ExtLights_DtcArray[1] != 0) && ExtLights_LowBeam_CurrentState == STD_HIGH)
 80025a4:	4b39      	ldr	r3, [pc, #228]	; (800268c <ExtLights_LightState+0x394>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d103      	bne.n	80025b4 <ExtLights_LightState+0x2bc>
 80025ac:	4b37      	ldr	r3, [pc, #220]	; (800268c <ExtLights_LightState+0x394>)
 80025ae:	785b      	ldrb	r3, [r3, #1]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d007      	beq.n	80025c4 <ExtLights_LightState+0x2cc>
 80025b4:	4b36      	ldr	r3, [pc, #216]	; (8002690 <ExtLights_LightState+0x398>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d103      	bne.n	80025c4 <ExtLights_LightState+0x2cc>
	{
		ExtLights_FrontFogLight_CurrentState = STD_HIGH;
 80025bc:	4b2f      	ldr	r3, [pc, #188]	; (800267c <ExtLights_LightState+0x384>)
 80025be:	2201      	movs	r2, #1
 80025c0:	701a      	strb	r2, [r3, #0]
 80025c2:	e00e      	b.n	80025e2 <ExtLights_LightState+0x2ea>
	}
	else if((ExtLights_DtcArray[0] == 0 || ExtLights_DtcArray[1] == 0) && Rte_P_Btc_BtcPort_Btc_FrontFogLight == STD_LOW)
 80025c4:	4b31      	ldr	r3, [pc, #196]	; (800268c <ExtLights_LightState+0x394>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <ExtLights_LightState+0x2dc>
 80025cc:	4b2f      	ldr	r3, [pc, #188]	; (800268c <ExtLights_LightState+0x394>)
 80025ce:	785b      	ldrb	r3, [r3, #1]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d106      	bne.n	80025e2 <ExtLights_LightState+0x2ea>
 80025d4:	4b2f      	ldr	r3, [pc, #188]	; (8002694 <ExtLights_LightState+0x39c>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d102      	bne.n	80025e2 <ExtLights_LightState+0x2ea>
	{
		ExtLights_FrontFogLight_CurrentState = STD_LOW;
 80025dc:	4b27      	ldr	r3, [pc, #156]	; (800267c <ExtLights_LightState+0x384>)
 80025de:	2200      	movs	r2, #0
 80025e0:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if((ExtLights_DtcArray[2] != 0 || ExtLights_DtcArray[3] != 0) && ExtLights_RearPositionLights_CurrentState == STD_HIGH)
 80025e2:	4b2a      	ldr	r3, [pc, #168]	; (800268c <ExtLights_LightState+0x394>)
 80025e4:	789b      	ldrb	r3, [r3, #2]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d103      	bne.n	80025f2 <ExtLights_LightState+0x2fa>
 80025ea:	4b28      	ldr	r3, [pc, #160]	; (800268c <ExtLights_LightState+0x394>)
 80025ec:	78db      	ldrb	r3, [r3, #3]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d007      	beq.n	8002602 <ExtLights_LightState+0x30a>
 80025f2:	4b29      	ldr	r3, [pc, #164]	; (8002698 <ExtLights_LightState+0x3a0>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d103      	bne.n	8002602 <ExtLights_LightState+0x30a>
	{
		ExtLights_RearFogLight_CurrentState = STD_HIGH;
 80025fa:	4b28      	ldr	r3, [pc, #160]	; (800269c <ExtLights_LightState+0x3a4>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	701a      	strb	r2, [r3, #0]
 8002600:	e00e      	b.n	8002620 <ExtLights_LightState+0x328>
	}
	else if((ExtLights_DtcArray[2] == 0 || ExtLights_DtcArray[3] == 0) && Rte_P_Btc_BtcPort_Btc_RearFogLight == STD_LOW)
 8002602:	4b22      	ldr	r3, [pc, #136]	; (800268c <ExtLights_LightState+0x394>)
 8002604:	789b      	ldrb	r3, [r3, #2]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <ExtLights_LightState+0x31a>
 800260a:	4b20      	ldr	r3, [pc, #128]	; (800268c <ExtLights_LightState+0x394>)
 800260c:	78db      	ldrb	r3, [r3, #3]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d106      	bne.n	8002620 <ExtLights_LightState+0x328>
 8002612:	4b23      	ldr	r3, [pc, #140]	; (80026a0 <ExtLights_LightState+0x3a8>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d102      	bne.n	8002620 <ExtLights_LightState+0x328>
	{
		ExtLights_RearFogLight_CurrentState = STD_LOW;
 800261a:	4b20      	ldr	r3, [pc, #128]	; (800269c <ExtLights_LightState+0x3a4>)
 800261c:	2200      	movs	r2, #0
 800261e:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if((ExtLights_DtcArray[8] != 0 || ExtLights_DtcArray[9] != 0) && ExtLights_BrakeLight_CurrentState == STD_HIGH)
 8002620:	4b1a      	ldr	r3, [pc, #104]	; (800268c <ExtLights_LightState+0x394>)
 8002622:	7a1b      	ldrb	r3, [r3, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d103      	bne.n	8002630 <ExtLights_LightState+0x338>
 8002628:	4b18      	ldr	r3, [pc, #96]	; (800268c <ExtLights_LightState+0x394>)
 800262a:	7a5b      	ldrb	r3, [r3, #9]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d007      	beq.n	8002640 <ExtLights_LightState+0x348>
 8002630:	4b1c      	ldr	r3, [pc, #112]	; (80026a4 <ExtLights_LightState+0x3ac>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d103      	bne.n	8002640 <ExtLights_LightState+0x348>
	{
		ExtLights_ReverseLight_CurrentState = STD_HIGH;
 8002638:	4b13      	ldr	r3, [pc, #76]	; (8002688 <ExtLights_LightState+0x390>)
 800263a:	2201      	movs	r2, #1
 800263c:	701a      	strb	r2, [r3, #0]
 800263e:	e00e      	b.n	800265e <ExtLights_LightState+0x366>
	}
	else if((ExtLights_DtcArray[8] == 0 || ExtLights_DtcArray[9] == 0) && Rte_P_Btc_BtcPort_Btc_ReverseLight == STD_LOW)
 8002640:	4b12      	ldr	r3, [pc, #72]	; (800268c <ExtLights_LightState+0x394>)
 8002642:	7a1b      	ldrb	r3, [r3, #8]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <ExtLights_LightState+0x358>
 8002648:	4b10      	ldr	r3, [pc, #64]	; (800268c <ExtLights_LightState+0x394>)
 800264a:	7a5b      	ldrb	r3, [r3, #9]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d106      	bne.n	800265e <ExtLights_LightState+0x366>
 8002650:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <ExtLights_LightState+0x3b0>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d102      	bne.n	800265e <ExtLights_LightState+0x366>
	{
		ExtLights_ReverseLight_CurrentState = STD_LOW;
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <ExtLights_LightState+0x390>)
 800265a:	2200      	movs	r2, #0
 800265c:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_LOW)
 800265e:	4b13      	ldr	r3, [pc, #76]	; (80026ac <ExtLights_LightState+0x3b4>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d108      	bne.n	8002678 <ExtLights_LightState+0x380>
	{
		ExtLights_ReverseLight_CurrentState = STD_LOW;
 8002666:	4b08      	ldr	r3, [pc, #32]	; (8002688 <ExtLights_LightState+0x390>)
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
		ExtLights_RearFogLight_CurrentState = STD_LOW;
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <ExtLights_LightState+0x3a4>)
 800266e:	2200      	movs	r2, #0
 8002670:	701a      	strb	r2, [r3, #0]
		ExtLights_FrontFogLight_CurrentState = STD_LOW;
 8002672:	4b02      	ldr	r3, [pc, #8]	; (800267c <ExtLights_LightState+0x384>)
 8002674:	2200      	movs	r2, #0
 8002676:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8002678:	bf00      	nop
 800267a:	bd80      	pop	{r7, pc}
 800267c:	20000151 	.word	0x20000151
 8002680:	2000016d 	.word	0x2000016d
 8002684:	200005f8 	.word	0x200005f8
 8002688:	2000014c 	.word	0x2000014c
 800268c:	20000170 	.word	0x20000170
 8002690:	20000154 	.word	0x20000154
 8002694:	200000e7 	.word	0x200000e7
 8002698:	20000155 	.word	0x20000155
 800269c:	20000157 	.word	0x20000157
 80026a0:	200000ec 	.word	0x200000ec
 80026a4:	2000014e 	.word	0x2000014e
 80026a8:	200000ed 	.word	0x200000ed
 80026ac:	20000120 	.word	0x20000120

080026b0 <ExtLights_MainFunction>:
* Function: ExtLights_MainFunction										   		   *
* Description: Exterior lights application main function. Controls application	   *
* 			   states. 		   													   *
************************************************************************************/
VOID ExtLights_MainFunction()
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
	ExtLights_LightState();
 80026b4:	f7ff fe20 	bl	80022f8 <ExtLights_LightState>
}
 80026b8:	bf00      	nop
 80026ba:	bd80      	pop	{r7, pc}

080026bc <ExtLights_LightSwitchMode>:
/***********************************************************************************
* Function: ExtLights_LightSwitchMode										   	   *
* Description: Control the light switch.								 		   *
************************************************************************************/
VOID ExtLights_LightSwitchMode()
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
	/* Switch through the light switch states. */
	switch(ExtLights_LightsSwitch_CurrentState)
 80026c0:	4b6d      	ldr	r3, [pc, #436]	; (8002878 <ExtLights_LightSwitchMode+0x1bc>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	3b17      	subs	r3, #23
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	f200 80d1 	bhi.w	800286e <ExtLights_LightSwitchMode+0x1b2>
 80026cc:	a201      	add	r2, pc, #4	; (adr r2, 80026d4 <ExtLights_LightSwitchMode+0x18>)
 80026ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d2:	bf00      	nop
 80026d4:	080026e5 	.word	0x080026e5
 80026d8:	0800272f 	.word	0x0800272f
 80026dc:	080027cf 	.word	0x080027cf
 80026e0:	08002825 	.word	0x08002825
	{
		/* Switch is on position zero, turn off the lights. */
		case EXTLIGHTS_LIGHTSWITCH_STATEZERO:
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 80026e4:	4b65      	ldr	r3, [pc, #404]	; (800287c <ExtLights_LightSwitchMode+0x1c0>)
 80026e6:	781a      	ldrb	r2, [r3, #0]
 80026e8:	4b63      	ldr	r3, [pc, #396]	; (8002878 <ExtLights_LightSwitchMode+0x1bc>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d00f      	beq.n	8002710 <ExtLights_LightSwitchMode+0x54>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 80026f0:	4b61      	ldr	r3, [pc, #388]	; (8002878 <ExtLights_LightSwitchMode+0x1bc>)
 80026f2:	781a      	ldrb	r2, [r3, #0]
 80026f4:	4b61      	ldr	r3, [pc, #388]	; (800287c <ExtLights_LightSwitchMode+0x1c0>)
 80026f6:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 80026f8:	2000      	movs	r0, #0
 80026fa:	f00f faed 	bl	8011cd8 <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 80026fe:	2000      	movs	r0, #0
 8002700:	f00f faf9 	bl	8011cf6 <Rte_Write_TimH_TimHPort_Tim2Ccr2>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 8002704:	4b5e      	ldr	r3, [pc, #376]	; (8002880 <ExtLights_LightSwitchMode+0x1c4>)
 8002706:	2200      	movs	r2, #0
 8002708:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 800270a:	4b5e      	ldr	r3, [pc, #376]	; (8002884 <ExtLights_LightSwitchMode+0x1c8>)
 800270c:	2200      	movs	r2, #0
 800270e:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8002710:	2100      	movs	r1, #0
 8002712:	485d      	ldr	r0, [pc, #372]	; (8002888 <ExtLights_LightSwitchMode+0x1cc>)
 8002714:	f00f fd2f 	bl	8012176 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8002718:	2104      	movs	r1, #4
 800271a:	485b      	ldr	r0, [pc, #364]	; (8002888 <ExtLights_LightSwitchMode+0x1cc>)
 800271c:	f00f fd2b 	bl	8012176 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			ExtLights_LowBeam_CurrentState = STD_LOW;
 8002720:	4b57      	ldr	r3, [pc, #348]	; (8002880 <ExtLights_LightSwitchMode+0x1c4>)
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8002726:	4b57      	ldr	r3, [pc, #348]	; (8002884 <ExtLights_LightSwitchMode+0x1c8>)
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]
			break;
 800272c:	e0a2      	b.n	8002874 <ExtLights_LightSwitchMode+0x1b8>
		/* Switch is on position one, turn automatic lights controlled by sensor's input. */
		case EXTLIGHTS_LIGHTSWITCH_STATEONE:
			/* Read the sensor status. */
			if(Rte_P_Os_OsPort_Os_Counter % 39 == 0)
 800272e:	4b57      	ldr	r3, [pc, #348]	; (800288c <ExtLights_LightSwitchMode+0x1d0>)
 8002730:	6819      	ldr	r1, [r3, #0]
 8002732:	4b57      	ldr	r3, [pc, #348]	; (8002890 <ExtLights_LightSwitchMode+0x1d4>)
 8002734:	fba3 2301 	umull	r2, r3, r3, r1
 8002738:	1aca      	subs	r2, r1, r3
 800273a:	0852      	lsrs	r2, r2, #1
 800273c:	4413      	add	r3, r2
 800273e:	095a      	lsrs	r2, r3, #5
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	1a9b      	subs	r3, r3, r2
 800274a:	1aca      	subs	r2, r1, r3
 800274c:	2a00      	cmp	r2, #0
 800274e:	d102      	bne.n	8002756 <ExtLights_LightSwitchMode+0x9a>
			{
				Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(EXTLIGHTS_LS_REQUEST);
 8002750:	2000      	movs	r0, #0
 8002752:	f000 ff4f 	bl	80035f4 <SenCtrl_ProcessSensorValue>
			}
			else
			{
				/* do nothing */
			}
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 8002756:	4b49      	ldr	r3, [pc, #292]	; (800287c <ExtLights_LightSwitchMode+0x1c0>)
 8002758:	781a      	ldrb	r2, [r3, #0]
 800275a:	4b47      	ldr	r3, [pc, #284]	; (8002878 <ExtLights_LightSwitchMode+0x1bc>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d00f      	beq.n	8002782 <ExtLights_LightSwitchMode+0xc6>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 8002762:	4b45      	ldr	r3, [pc, #276]	; (8002878 <ExtLights_LightSwitchMode+0x1bc>)
 8002764:	781a      	ldrb	r2, [r3, #0]
 8002766:	4b45      	ldr	r3, [pc, #276]	; (800287c <ExtLights_LightSwitchMode+0x1c0>)
 8002768:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 800276a:	2000      	movs	r0, #0
 800276c:	f00f fab4 	bl	8011cd8 <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 8002770:	2000      	movs	r0, #0
 8002772:	f00f fac0 	bl	8011cf6 <Rte_Write_TimH_TimHPort_Tim2Ccr2>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 8002776:	4b42      	ldr	r3, [pc, #264]	; (8002880 <ExtLights_LightSwitchMode+0x1c4>)
 8002778:	2200      	movs	r2, #0
 800277a:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 800277c:	4b41      	ldr	r3, [pc, #260]	; (8002884 <ExtLights_LightSwitchMode+0x1c8>)
 800277e:	2200      	movs	r2, #0
 8002780:	701a      	strb	r2, [r3, #0]
			else
			{
				/* do nothing */
			}
			/* If the sensor status is on, turn on the lights to on. */
			if(ExtLights_LightSensorState == 1)
 8002782:	4b44      	ldr	r3, [pc, #272]	; (8002894 <ExtLights_LightSwitchMode+0x1d8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d10e      	bne.n	80027a8 <ExtLights_LightSwitchMode+0xec>
			{
				ExtLights_LowBeam_CurrentState = STD_HIGH;
 800278a:	4b3d      	ldr	r3, [pc, #244]	; (8002880 <ExtLights_LightSwitchMode+0x1c4>)
 800278c:	2201      	movs	r2, #1
 800278e:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_HIGH;
 8002790:	4b3c      	ldr	r3, [pc, #240]	; (8002884 <ExtLights_LightSwitchMode+0x1c8>)
 8002792:	2201      	movs	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8002796:	2100      	movs	r1, #0
 8002798:	483b      	ldr	r0, [pc, #236]	; (8002888 <ExtLights_LightSwitchMode+0x1cc>)
 800279a:	f00f fcdf 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 800279e:	2104      	movs	r1, #4
 80027a0:	4839      	ldr	r0, [pc, #228]	; (8002888 <ExtLights_LightSwitchMode+0x1cc>)
 80027a2:	f00f fcdb 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				ExtLights_LowBeam_CurrentState = STD_LOW;
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
			}
			break;
 80027a6:	e064      	b.n	8002872 <ExtLights_LightSwitchMode+0x1b6>
			else if(ExtLights_LightSensorState != 1)
 80027a8:	4b3a      	ldr	r3, [pc, #232]	; (8002894 <ExtLights_LightSwitchMode+0x1d8>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d060      	beq.n	8002872 <ExtLights_LightSwitchMode+0x1b6>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 80027b0:	4b33      	ldr	r3, [pc, #204]	; (8002880 <ExtLights_LightSwitchMode+0x1c4>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 80027b6:	4b33      	ldr	r3, [pc, #204]	; (8002884 <ExtLights_LightSwitchMode+0x1c8>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 80027bc:	2100      	movs	r1, #0
 80027be:	4832      	ldr	r0, [pc, #200]	; (8002888 <ExtLights_LightSwitchMode+0x1cc>)
 80027c0:	f00f fcd9 	bl	8012176 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 80027c4:	2104      	movs	r1, #4
 80027c6:	4830      	ldr	r0, [pc, #192]	; (8002888 <ExtLights_LightSwitchMode+0x1cc>)
 80027c8:	f00f fcd5 	bl	8012176 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			break;
 80027cc:	e051      	b.n	8002872 <ExtLights_LightSwitchMode+0x1b6>
		/* Switch is on position three, turn on position lights. */
		case EXTLIGHTS_LIGHTSWITCH_STATETWO:
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 80027ce:	4b2b      	ldr	r3, [pc, #172]	; (800287c <ExtLights_LightSwitchMode+0x1c0>)
 80027d0:	781a      	ldrb	r2, [r3, #0]
 80027d2:	4b29      	ldr	r3, [pc, #164]	; (8002878 <ExtLights_LightSwitchMode+0x1bc>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d00f      	beq.n	80027fa <ExtLights_LightSwitchMode+0x13e>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 80027da:	4b27      	ldr	r3, [pc, #156]	; (8002878 <ExtLights_LightSwitchMode+0x1bc>)
 80027dc:	781a      	ldrb	r2, [r3, #0]
 80027de:	4b27      	ldr	r3, [pc, #156]	; (800287c <ExtLights_LightSwitchMode+0x1c0>)
 80027e0:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 80027e2:	2000      	movs	r0, #0
 80027e4:	f00f fa78 	bl	8011cd8 <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 80027e8:	2000      	movs	r0, #0
 80027ea:	f00f fa84 	bl	8011cf6 <Rte_Write_TimH_TimHPort_Tim2Ccr2>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 80027ee:	4b24      	ldr	r3, [pc, #144]	; (8002880 <ExtLights_LightSwitchMode+0x1c4>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 80027f4:	4b23      	ldr	r3, [pc, #140]	; (8002884 <ExtLights_LightSwitchMode+0x1c8>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 80027fa:	2100      	movs	r1, #0
 80027fc:	4822      	ldr	r0, [pc, #136]	; (8002888 <ExtLights_LightSwitchMode+0x1cc>)
 80027fe:	f00f fcad 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8002802:	2104      	movs	r1, #4
 8002804:	4820      	ldr	r0, [pc, #128]	; (8002888 <ExtLights_LightSwitchMode+0x1cc>)
 8002806:	f00f fca9 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 800280a:	2000      	movs	r0, #0
 800280c:	f00f fa64 	bl	8011cd8 <Rte_Write_TimH_TimHPort_Tim2Ccr1>
			Rte_Write_TimH_TimHPort_Tim2Ccr2(100);
 8002810:	2064      	movs	r0, #100	; 0x64
 8002812:	f00f fa70 	bl	8011cf6 <Rte_Write_TimH_TimHPort_Tim2Ccr2>
			ExtLights_LowBeam_CurrentState = STD_LOW;
 8002816:	4b1a      	ldr	r3, [pc, #104]	; (8002880 <ExtLights_LightSwitchMode+0x1c4>)
 8002818:	2200      	movs	r2, #0
 800281a:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_LOW;
 800281c:	4b19      	ldr	r3, [pc, #100]	; (8002884 <ExtLights_LightSwitchMode+0x1c8>)
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]
			break;
 8002822:	e027      	b.n	8002874 <ExtLights_LightSwitchMode+0x1b8>
		/* Switch is on position four, turn on night time lights. */
		case EXTLIGHTS_LIGHTSWITCH_STATETHREE:
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 8002824:	4b15      	ldr	r3, [pc, #84]	; (800287c <ExtLights_LightSwitchMode+0x1c0>)
 8002826:	781a      	ldrb	r2, [r3, #0]
 8002828:	4b13      	ldr	r3, [pc, #76]	; (8002878 <ExtLights_LightSwitchMode+0x1bc>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	429a      	cmp	r2, r3
 800282e:	d00f      	beq.n	8002850 <ExtLights_LightSwitchMode+0x194>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 8002830:	4b11      	ldr	r3, [pc, #68]	; (8002878 <ExtLights_LightSwitchMode+0x1bc>)
 8002832:	781a      	ldrb	r2, [r3, #0]
 8002834:	4b11      	ldr	r3, [pc, #68]	; (800287c <ExtLights_LightSwitchMode+0x1c0>)
 8002836:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 8002838:	2000      	movs	r0, #0
 800283a:	f00f fa4d 	bl	8011cd8 <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 800283e:	2000      	movs	r0, #0
 8002840:	f00f fa59 	bl	8011cf6 <Rte_Write_TimH_TimHPort_Tim2Ccr2>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 8002844:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <ExtLights_LightSwitchMode+0x1c4>)
 8002846:	2200      	movs	r2, #0
 8002848:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 800284a:	4b0e      	ldr	r3, [pc, #56]	; (8002884 <ExtLights_LightSwitchMode+0x1c8>)
 800284c:	2200      	movs	r2, #0
 800284e:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8002850:	2100      	movs	r1, #0
 8002852:	480d      	ldr	r0, [pc, #52]	; (8002888 <ExtLights_LightSwitchMode+0x1cc>)
 8002854:	f00f fc82 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8002858:	2104      	movs	r1, #4
 800285a:	480b      	ldr	r0, [pc, #44]	; (8002888 <ExtLights_LightSwitchMode+0x1cc>)
 800285c:	f00f fc7e 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			ExtLights_LowBeam_CurrentState = STD_HIGH;
 8002860:	4b07      	ldr	r3, [pc, #28]	; (8002880 <ExtLights_LightSwitchMode+0x1c4>)
 8002862:	2201      	movs	r2, #1
 8002864:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_HIGH;
 8002866:	4b07      	ldr	r3, [pc, #28]	; (8002884 <ExtLights_LightSwitchMode+0x1c8>)
 8002868:	2201      	movs	r2, #1
 800286a:	701a      	strb	r2, [r3, #0]
			break;
 800286c:	e002      	b.n	8002874 <ExtLights_LightSwitchMode+0x1b8>
		default:
			break;
 800286e:	bf00      	nop
 8002870:	e000      	b.n	8002874 <ExtLights_LightSwitchMode+0x1b8>
			break;
 8002872:	bf00      	nop
	}
}
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}
 8002878:	2000014f 	.word	0x2000014f
 800287c:	2000016f 	.word	0x2000016f
 8002880:	20000154 	.word	0x20000154
 8002884:	20000155 	.word	0x20000155
 8002888:	20000544 	.word	0x20000544
 800288c:	200002dc 	.word	0x200002dc
 8002890:	a41a41a5 	.word	0xa41a41a5
 8002894:	20000168 	.word	0x20000168

08002898 <ExtLights_HighBeam>:
/***********************************************************************************
* Function: ExtLights_HighBeam										   			   *
* Description: High beam trigger. 		  										   *
************************************************************************************/
VOID ExtLights_HighBeam(uint8 PinState)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_HIGHBEAM_PORT, EXTLIGHTS_HIGHBEAM_PIN, PinState);
 80028a2:	79fb      	ldrb	r3, [r7, #7]
 80028a4:	461a      	mov	r2, r3
 80028a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028aa:	4803      	ldr	r0, [pc, #12]	; (80028b8 <ExtLights_HighBeam+0x20>)
 80028ac:	f00f fe17 	bl	80124de <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 80028b0:	bf00      	nop
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40020000 	.word	0x40020000

080028bc <ExtLights_ReverseLight>:
/***********************************************************************************
* Function: ExtLights_ReverseLight										   		   *
* Description: Reverse light trigger. 		   									   *
************************************************************************************/
VOID ExtLights_ReverseLight(uint8 PinState)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_REVERSELIGHT_PORT, EXTLIGHTS_REVERSELIGHT_PIN, PinState);
 80028c6:	79fb      	ldrb	r3, [r7, #7]
 80028c8:	461a      	mov	r2, r3
 80028ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028ce:	4803      	ldr	r0, [pc, #12]	; (80028dc <ExtLights_ReverseLight+0x20>)
 80028d0:	f00f fe05 	bl	80124de <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 80028d4:	bf00      	nop
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40020400 	.word	0x40020400

080028e0 <Hvac_MainFunction>:
/***********************************************************************************
* Function: Hvac_MainFunction											 		   *
* Description: Application main function.					                       *
************************************************************************************/
VOID Hvac_MainFunction()
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
	Hvac_MainCounter++;
 80028e4:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <Hvac_MainFunction+0x18>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	3301      	adds	r3, #1
 80028ea:	4a03      	ldr	r2, [pc, #12]	; (80028f8 <Hvac_MainFunction+0x18>)
 80028ec:	6013      	str	r3, [r2, #0]
	Hvac_ProcessCommand();
 80028ee:	f000 f805 	bl	80028fc <Hvac_ProcessCommand>
}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	2000017c 	.word	0x2000017c

080028fc <Hvac_ProcessCommand>:
/***********************************************************************************
* Function: Hvac_ProcessCommand											 		   *
* Description: Process HVAC states.					                               *
************************************************************************************/
VOID Hvac_ProcessCommand()
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
	static uint8 sensorValueTs = 0;
	char buffer_T[3];
	char buffer_F[2];
	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(HVAC_TS_REQUEST);
 8002902:	2003      	movs	r0, #3
 8002904:	f000 fe76 	bl	80035f4 <SenCtrl_ProcessSensorValue>
	sensorValueTs = Hvac_TsState;
 8002908:	4b11      	ldr	r3, [pc, #68]	; (8002950 <Hvac_ProcessCommand+0x54>)
 800290a:	781a      	ldrb	r2, [r3, #0]
 800290c:	4b11      	ldr	r3, [pc, #68]	; (8002954 <Hvac_ProcessCommand+0x58>)
 800290e:	701a      	strb	r2, [r3, #0]
	if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8002910:	4b11      	ldr	r3, [pc, #68]	; (8002958 <Hvac_ProcessCommand+0x5c>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b01      	cmp	r3, #1
 8002916:	f040 81d1 	bne.w	8002cbc <Hvac_ProcessCommand+0x3c0>
	{
		if(Btc_FanValue == STD_LOW)
 800291a:	4b10      	ldr	r3, [pc, #64]	; (800295c <Hvac_ProcessCommand+0x60>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d102      	bne.n	8002928 <Hvac_ProcessCommand+0x2c>
		{
			Hvac_FanValue = 1;
 8002922:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <Hvac_ProcessCommand+0x64>)
 8002924:	2201      	movs	r2, #1
 8002926:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(Btc_TemperatureValue == STD_LOW)
 8002928:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <Hvac_ProcessCommand+0x68>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d106      	bne.n	800293e <Hvac_ProcessCommand+0x42>
		{
			Hvac_TemperatureValue = 22;
 8002930:	4b0d      	ldr	r3, [pc, #52]	; (8002968 <Hvac_ProcessCommand+0x6c>)
 8002932:	2216      	movs	r2, #22
 8002934:	701a      	strb	r2, [r3, #0]
			Hvac_prevTemperatureValue = Hvac_TemperatureValue;
 8002936:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <Hvac_ProcessCommand+0x6c>)
 8002938:	781a      	ldrb	r2, [r3, #0]
 800293a:	4b0c      	ldr	r3, [pc, #48]	; (800296c <Hvac_ProcessCommand+0x70>)
 800293c:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(Hvac_FanValue != STD_LOW)
 800293e:	4b08      	ldr	r3, [pc, #32]	; (8002960 <Hvac_ProcessCommand+0x64>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d016      	beq.n	8002974 <Hvac_ProcessCommand+0x78>
		{
			Hvac_CurrentState = STD_HIGH;
 8002946:	4b0a      	ldr	r3, [pc, #40]	; (8002970 <Hvac_ProcessCommand+0x74>)
 8002948:	2201      	movs	r2, #1
 800294a:	701a      	strb	r2, [r3, #0]
 800294c:	e019      	b.n	8002982 <Hvac_ProcessCommand+0x86>
 800294e:	bf00      	nop
 8002950:	20000180 	.word	0x20000180
 8002954:	20000198 	.word	0x20000198
 8002958:	20000120 	.word	0x20000120
 800295c:	200000ef 	.word	0x200000ef
 8002960:	20000182 	.word	0x20000182
 8002964:	200000f0 	.word	0x200000f0
 8002968:	20000183 	.word	0x20000183
 800296c:	20000197 	.word	0x20000197
 8002970:	20000181 	.word	0x20000181
		}
		else if(Hvac_FanValue == STD_LOW)
 8002974:	4b8f      	ldr	r3, [pc, #572]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d102      	bne.n	8002982 <Hvac_ProcessCommand+0x86>
		{
			Hvac_CurrentState = STD_LOW;
 800297c:	4b8e      	ldr	r3, [pc, #568]	; (8002bb8 <Hvac_ProcessCommand+0x2bc>)
 800297e:	2200      	movs	r2, #0
 8002980:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(Hvac_TemperatureValue != Hvac_prevTemperatureValue)
 8002982:	4b8e      	ldr	r3, [pc, #568]	; (8002bbc <Hvac_ProcessCommand+0x2c0>)
 8002984:	781a      	ldrb	r2, [r3, #0]
 8002986:	4b8e      	ldr	r3, [pc, #568]	; (8002bc0 <Hvac_ProcessCommand+0x2c4>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d018      	beq.n	80029c0 <Hvac_ProcessCommand+0xc4>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 800298e:	4b8d      	ldr	r3, [pc, #564]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b1f      	cmp	r3, #31
 8002994:	d007      	beq.n	80029a6 <Hvac_ProcessCommand+0xaa>
 8002996:	4b8b      	ldr	r3, [pc, #556]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <Hvac_ProcessCommand+0xaa>
 800299e:	4b85      	ldr	r3, [pc, #532]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d105      	bne.n	80029b2 <Hvac_ProcessCommand+0xb6>
			{
				Btc_FanValue = 31;
 80029a6:	4b87      	ldr	r3, [pc, #540]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 80029a8:	221f      	movs	r2, #31
 80029aa:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 80029ac:	4b81      	ldr	r3, [pc, #516]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			Hvac_prevTemperatureValue = Hvac_TemperatureValue;
 80029b2:	4b82      	ldr	r3, [pc, #520]	; (8002bbc <Hvac_ProcessCommand+0x2c0>)
 80029b4:	781a      	ldrb	r2, [r3, #0]
 80029b6:	4b82      	ldr	r3, [pc, #520]	; (8002bc0 <Hvac_ProcessCommand+0x2c4>)
 80029b8:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 80029ba:	4b7f      	ldr	r3, [pc, #508]	; (8002bb8 <Hvac_ProcessCommand+0x2bc>)
 80029bc:	2201      	movs	r2, #1
 80029be:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_Ac != Hvac_Ac)
 80029c0:	4b81      	ldr	r3, [pc, #516]	; (8002bc8 <Hvac_ProcessCommand+0x2cc>)
 80029c2:	781a      	ldrb	r2, [r3, #0]
 80029c4:	4b81      	ldr	r3, [pc, #516]	; (8002bcc <Hvac_ProcessCommand+0x2d0>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d018      	beq.n	80029fe <Hvac_ProcessCommand+0x102>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 80029cc:	4b7d      	ldr	r3, [pc, #500]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b1f      	cmp	r3, #31
 80029d2:	d007      	beq.n	80029e4 <Hvac_ProcessCommand+0xe8>
 80029d4:	4b7b      	ldr	r3, [pc, #492]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <Hvac_ProcessCommand+0xe8>
 80029dc:	4b75      	ldr	r3, [pc, #468]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d105      	bne.n	80029f0 <Hvac_ProcessCommand+0xf4>
			{
				Btc_FanValue = 31;
 80029e4:	4b77      	ldr	r3, [pc, #476]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 80029e6:	221f      	movs	r2, #31
 80029e8:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 80029ea:	4b72      	ldr	r3, [pc, #456]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_Ac = Hvac_Ac;
 80029f0:	4b76      	ldr	r3, [pc, #472]	; (8002bcc <Hvac_ProcessCommand+0x2d0>)
 80029f2:	781a      	ldrb	r2, [r3, #0]
 80029f4:	4b74      	ldr	r3, [pc, #464]	; (8002bc8 <Hvac_ProcessCommand+0x2cc>)
 80029f6:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 80029f8:	4b6f      	ldr	r3, [pc, #444]	; (8002bb8 <Hvac_ProcessCommand+0x2bc>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_AutomaticMode != Hvac_AutomaticMode)
 80029fe:	4b74      	ldr	r3, [pc, #464]	; (8002bd0 <Hvac_ProcessCommand+0x2d4>)
 8002a00:	781a      	ldrb	r2, [r3, #0]
 8002a02:	4b74      	ldr	r3, [pc, #464]	; (8002bd4 <Hvac_ProcessCommand+0x2d8>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d018      	beq.n	8002a3c <Hvac_ProcessCommand+0x140>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 8002a0a:	4b6e      	ldr	r3, [pc, #440]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b1f      	cmp	r3, #31
 8002a10:	d007      	beq.n	8002a22 <Hvac_ProcessCommand+0x126>
 8002a12:	4b6c      	ldr	r3, [pc, #432]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <Hvac_ProcessCommand+0x126>
 8002a1a:	4b66      	ldr	r3, [pc, #408]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d105      	bne.n	8002a2e <Hvac_ProcessCommand+0x132>
			{
				Btc_FanValue = 31;
 8002a22:	4b68      	ldr	r3, [pc, #416]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002a24:	221f      	movs	r2, #31
 8002a26:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 8002a28:	4b62      	ldr	r3, [pc, #392]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_AutomaticMode = Hvac_AutomaticMode;
 8002a2e:	4b69      	ldr	r3, [pc, #420]	; (8002bd4 <Hvac_ProcessCommand+0x2d8>)
 8002a30:	781a      	ldrb	r2, [r3, #0]
 8002a32:	4b67      	ldr	r3, [pc, #412]	; (8002bd0 <Hvac_ProcessCommand+0x2d4>)
 8002a34:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 8002a36:	4b60      	ldr	r3, [pc, #384]	; (8002bb8 <Hvac_ProcessCommand+0x2bc>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_LegVent != Hvac_LegVent)
 8002a3c:	4b66      	ldr	r3, [pc, #408]	; (8002bd8 <Hvac_ProcessCommand+0x2dc>)
 8002a3e:	781a      	ldrb	r2, [r3, #0]
 8002a40:	4b66      	ldr	r3, [pc, #408]	; (8002bdc <Hvac_ProcessCommand+0x2e0>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d018      	beq.n	8002a7a <Hvac_ProcessCommand+0x17e>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 8002a48:	4b5e      	ldr	r3, [pc, #376]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b1f      	cmp	r3, #31
 8002a4e:	d007      	beq.n	8002a60 <Hvac_ProcessCommand+0x164>
 8002a50:	4b5c      	ldr	r3, [pc, #368]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <Hvac_ProcessCommand+0x164>
 8002a58:	4b56      	ldr	r3, [pc, #344]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d105      	bne.n	8002a6c <Hvac_ProcessCommand+0x170>
			{
				Btc_FanValue = 31;
 8002a60:	4b58      	ldr	r3, [pc, #352]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002a62:	221f      	movs	r2, #31
 8002a64:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 8002a66:	4b53      	ldr	r3, [pc, #332]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_LegVent = Hvac_LegVent;
 8002a6c:	4b5b      	ldr	r3, [pc, #364]	; (8002bdc <Hvac_ProcessCommand+0x2e0>)
 8002a6e:	781a      	ldrb	r2, [r3, #0]
 8002a70:	4b59      	ldr	r3, [pc, #356]	; (8002bd8 <Hvac_ProcessCommand+0x2dc>)
 8002a72:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 8002a74:	4b50      	ldr	r3, [pc, #320]	; (8002bb8 <Hvac_ProcessCommand+0x2bc>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_MidVent != Hvac_MidVent)
 8002a7a:	4b59      	ldr	r3, [pc, #356]	; (8002be0 <Hvac_ProcessCommand+0x2e4>)
 8002a7c:	781a      	ldrb	r2, [r3, #0]
 8002a7e:	4b59      	ldr	r3, [pc, #356]	; (8002be4 <Hvac_ProcessCommand+0x2e8>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d018      	beq.n	8002ab8 <Hvac_ProcessCommand+0x1bc>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 8002a86:	4b4f      	ldr	r3, [pc, #316]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b1f      	cmp	r3, #31
 8002a8c:	d007      	beq.n	8002a9e <Hvac_ProcessCommand+0x1a2>
 8002a8e:	4b4d      	ldr	r3, [pc, #308]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <Hvac_ProcessCommand+0x1a2>
 8002a96:	4b47      	ldr	r3, [pc, #284]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d105      	bne.n	8002aaa <Hvac_ProcessCommand+0x1ae>
			{
				Btc_FanValue = 31;
 8002a9e:	4b49      	ldr	r3, [pc, #292]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002aa0:	221f      	movs	r2, #31
 8002aa2:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 8002aa4:	4b43      	ldr	r3, [pc, #268]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_MidVent = Hvac_MidVent;
 8002aaa:	4b4e      	ldr	r3, [pc, #312]	; (8002be4 <Hvac_ProcessCommand+0x2e8>)
 8002aac:	781a      	ldrb	r2, [r3, #0]
 8002aae:	4b4c      	ldr	r3, [pc, #304]	; (8002be0 <Hvac_ProcessCommand+0x2e4>)
 8002ab0:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 8002ab2:	4b41      	ldr	r3, [pc, #260]	; (8002bb8 <Hvac_ProcessCommand+0x2bc>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_WindshieldVent != Hvac_WindshieldVent)
 8002ab8:	4b4b      	ldr	r3, [pc, #300]	; (8002be8 <Hvac_ProcessCommand+0x2ec>)
 8002aba:	781a      	ldrb	r2, [r3, #0]
 8002abc:	4b4b      	ldr	r3, [pc, #300]	; (8002bec <Hvac_ProcessCommand+0x2f0>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d018      	beq.n	8002af6 <Hvac_ProcessCommand+0x1fa>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 8002ac4:	4b3f      	ldr	r3, [pc, #252]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b1f      	cmp	r3, #31
 8002aca:	d007      	beq.n	8002adc <Hvac_ProcessCommand+0x1e0>
 8002acc:	4b3d      	ldr	r3, [pc, #244]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <Hvac_ProcessCommand+0x1e0>
 8002ad4:	4b37      	ldr	r3, [pc, #220]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d105      	bne.n	8002ae8 <Hvac_ProcessCommand+0x1ec>
			{
				Btc_FanValue = 31;
 8002adc:	4b39      	ldr	r3, [pc, #228]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002ade:	221f      	movs	r2, #31
 8002ae0:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 8002ae2:	4b34      	ldr	r3, [pc, #208]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_WindshieldVent = Hvac_WindshieldVent;
 8002ae8:	4b40      	ldr	r3, [pc, #256]	; (8002bec <Hvac_ProcessCommand+0x2f0>)
 8002aea:	781a      	ldrb	r2, [r3, #0]
 8002aec:	4b3e      	ldr	r3, [pc, #248]	; (8002be8 <Hvac_ProcessCommand+0x2ec>)
 8002aee:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 8002af0:	4b31      	ldr	r3, [pc, #196]	; (8002bb8 <Hvac_ProcessCommand+0x2bc>)
 8002af2:	2201      	movs	r2, #1
 8002af4:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_WindshieldVent != Hvac_WindshieldVent)
 8002af6:	4b3c      	ldr	r3, [pc, #240]	; (8002be8 <Hvac_ProcessCommand+0x2ec>)
 8002af8:	781a      	ldrb	r2, [r3, #0]
 8002afa:	4b3c      	ldr	r3, [pc, #240]	; (8002bec <Hvac_ProcessCommand+0x2f0>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d018      	beq.n	8002b34 <Hvac_ProcessCommand+0x238>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 8002b02:	4b30      	ldr	r3, [pc, #192]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b1f      	cmp	r3, #31
 8002b08:	d007      	beq.n	8002b1a <Hvac_ProcessCommand+0x21e>
 8002b0a:	4b2e      	ldr	r3, [pc, #184]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <Hvac_ProcessCommand+0x21e>
 8002b12:	4b28      	ldr	r3, [pc, #160]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d105      	bne.n	8002b26 <Hvac_ProcessCommand+0x22a>
			{
				Btc_FanValue = 31;
 8002b1a:	4b2a      	ldr	r3, [pc, #168]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002b1c:	221f      	movs	r2, #31
 8002b1e:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 8002b20:	4b24      	ldr	r3, [pc, #144]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 8002b22:	2201      	movs	r2, #1
 8002b24:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_WindshieldVent = Hvac_WindshieldVent;
 8002b26:	4b31      	ldr	r3, [pc, #196]	; (8002bec <Hvac_ProcessCommand+0x2f0>)
 8002b28:	781a      	ldrb	r2, [r3, #0]
 8002b2a:	4b2f      	ldr	r3, [pc, #188]	; (8002be8 <Hvac_ProcessCommand+0x2ec>)
 8002b2c:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 8002b2e:	4b22      	ldr	r3, [pc, #136]	; (8002bb8 <Hvac_ProcessCommand+0x2bc>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_WindshieldDefrost != Hvac_WindshieldDefrost)
 8002b34:	4b2e      	ldr	r3, [pc, #184]	; (8002bf0 <Hvac_ProcessCommand+0x2f4>)
 8002b36:	781a      	ldrb	r2, [r3, #0]
 8002b38:	4b2e      	ldr	r3, [pc, #184]	; (8002bf4 <Hvac_ProcessCommand+0x2f8>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d018      	beq.n	8002b72 <Hvac_ProcessCommand+0x276>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 8002b40:	4b20      	ldr	r3, [pc, #128]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b1f      	cmp	r3, #31
 8002b46:	d007      	beq.n	8002b58 <Hvac_ProcessCommand+0x25c>
 8002b48:	4b1e      	ldr	r3, [pc, #120]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <Hvac_ProcessCommand+0x25c>
 8002b50:	4b18      	ldr	r3, [pc, #96]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d105      	bne.n	8002b64 <Hvac_ProcessCommand+0x268>
			{
				Btc_FanValue = 31;
 8002b58:	4b1a      	ldr	r3, [pc, #104]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002b5a:	221f      	movs	r2, #31
 8002b5c:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 8002b5e:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_WindshieldDefrost = Hvac_WindshieldDefrost;
 8002b64:	4b23      	ldr	r3, [pc, #140]	; (8002bf4 <Hvac_ProcessCommand+0x2f8>)
 8002b66:	781a      	ldrb	r2, [r3, #0]
 8002b68:	4b21      	ldr	r3, [pc, #132]	; (8002bf0 <Hvac_ProcessCommand+0x2f4>)
 8002b6a:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 8002b6c:	4b12      	ldr	r3, [pc, #72]	; (8002bb8 <Hvac_ProcessCommand+0x2bc>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_RearWindshieldDefrost != Hvac_RearWindshieldDefrost)
 8002b72:	4b21      	ldr	r3, [pc, #132]	; (8002bf8 <Hvac_ProcessCommand+0x2fc>)
 8002b74:	781a      	ldrb	r2, [r3, #0]
 8002b76:	4b21      	ldr	r3, [pc, #132]	; (8002bfc <Hvac_ProcessCommand+0x300>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d040      	beq.n	8002c00 <Hvac_ProcessCommand+0x304>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 8002b7e:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b1f      	cmp	r3, #31
 8002b84:	d007      	beq.n	8002b96 <Hvac_ProcessCommand+0x29a>
 8002b86:	4b0f      	ldr	r3, [pc, #60]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <Hvac_ProcessCommand+0x29a>
 8002b8e:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d105      	bne.n	8002ba2 <Hvac_ProcessCommand+0x2a6>
			{
				Btc_FanValue = 31;
 8002b96:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002b98:	221f      	movs	r2, #31
 8002b9a:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_RearWindshieldDefrost = Hvac_RearWindshieldDefrost;
 8002ba2:	4b16      	ldr	r3, [pc, #88]	; (8002bfc <Hvac_ProcessCommand+0x300>)
 8002ba4:	781a      	ldrb	r2, [r3, #0]
 8002ba6:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <Hvac_ProcessCommand+0x2fc>)
 8002ba8:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 8002baa:	4b03      	ldr	r3, [pc, #12]	; (8002bb8 <Hvac_ProcessCommand+0x2bc>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	701a      	strb	r2, [r3, #0]
 8002bb0:	e026      	b.n	8002c00 <Hvac_ProcessCommand+0x304>
 8002bb2:	bf00      	nop
 8002bb4:	20000182 	.word	0x20000182
 8002bb8:	20000181 	.word	0x20000181
 8002bbc:	20000183 	.word	0x20000183
 8002bc0:	20000197 	.word	0x20000197
 8002bc4:	200000ef 	.word	0x200000ef
 8002bc8:	20000193 	.word	0x20000193
 8002bcc:	20000189 	.word	0x20000189
 8002bd0:	20000196 	.word	0x20000196
 8002bd4:	2000018c 	.word	0x2000018c
 8002bd8:	2000018e 	.word	0x2000018e
 8002bdc:	20000184 	.word	0x20000184
 8002be0:	2000018f 	.word	0x2000018f
 8002be4:	20000185 	.word	0x20000185
 8002be8:	20000190 	.word	0x20000190
 8002bec:	20000186 	.word	0x20000186
 8002bf0:	20000191 	.word	0x20000191
 8002bf4:	20000187 	.word	0x20000187
 8002bf8:	20000192 	.word	0x20000192
 8002bfc:	20000188 	.word	0x20000188
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_Recirculation != Hvac_Recirculation)
 8002c00:	4ba3      	ldr	r3, [pc, #652]	; (8002e90 <Hvac_ProcessCommand+0x594>)
 8002c02:	781a      	ldrb	r2, [r3, #0]
 8002c04:	4ba3      	ldr	r3, [pc, #652]	; (8002e94 <Hvac_ProcessCommand+0x598>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d018      	beq.n	8002c3e <Hvac_ProcessCommand+0x342>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 8002c0c:	4ba2      	ldr	r3, [pc, #648]	; (8002e98 <Hvac_ProcessCommand+0x59c>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b1f      	cmp	r3, #31
 8002c12:	d007      	beq.n	8002c24 <Hvac_ProcessCommand+0x328>
 8002c14:	4ba0      	ldr	r3, [pc, #640]	; (8002e98 <Hvac_ProcessCommand+0x59c>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <Hvac_ProcessCommand+0x328>
 8002c1c:	4b9f      	ldr	r3, [pc, #636]	; (8002e9c <Hvac_ProcessCommand+0x5a0>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d105      	bne.n	8002c30 <Hvac_ProcessCommand+0x334>
			{
				Btc_FanValue = 31;
 8002c24:	4b9c      	ldr	r3, [pc, #624]	; (8002e98 <Hvac_ProcessCommand+0x59c>)
 8002c26:	221f      	movs	r2, #31
 8002c28:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 8002c2a:	4b9c      	ldr	r3, [pc, #624]	; (8002e9c <Hvac_ProcessCommand+0x5a0>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_Recirculation = Hvac_Recirculation;
 8002c30:	4b98      	ldr	r3, [pc, #608]	; (8002e94 <Hvac_ProcessCommand+0x598>)
 8002c32:	781a      	ldrb	r2, [r3, #0]
 8002c34:	4b96      	ldr	r3, [pc, #600]	; (8002e90 <Hvac_ProcessCommand+0x594>)
 8002c36:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 8002c38:	4b99      	ldr	r3, [pc, #612]	; (8002ea0 <Hvac_ProcessCommand+0x5a4>)
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_Recirculation != Hvac_Recirculation)
 8002c3e:	4b94      	ldr	r3, [pc, #592]	; (8002e90 <Hvac_ProcessCommand+0x594>)
 8002c40:	781a      	ldrb	r2, [r3, #0]
 8002c42:	4b94      	ldr	r3, [pc, #592]	; (8002e94 <Hvac_ProcessCommand+0x598>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d018      	beq.n	8002c7c <Hvac_ProcessCommand+0x380>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 8002c4a:	4b93      	ldr	r3, [pc, #588]	; (8002e98 <Hvac_ProcessCommand+0x59c>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b1f      	cmp	r3, #31
 8002c50:	d007      	beq.n	8002c62 <Hvac_ProcessCommand+0x366>
 8002c52:	4b91      	ldr	r3, [pc, #580]	; (8002e98 <Hvac_ProcessCommand+0x59c>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <Hvac_ProcessCommand+0x366>
 8002c5a:	4b90      	ldr	r3, [pc, #576]	; (8002e9c <Hvac_ProcessCommand+0x5a0>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d105      	bne.n	8002c6e <Hvac_ProcessCommand+0x372>
			{
				Btc_FanValue = 31;
 8002c62:	4b8d      	ldr	r3, [pc, #564]	; (8002e98 <Hvac_ProcessCommand+0x59c>)
 8002c64:	221f      	movs	r2, #31
 8002c66:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 8002c68:	4b8c      	ldr	r3, [pc, #560]	; (8002e9c <Hvac_ProcessCommand+0x5a0>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_Recirculation = Hvac_Recirculation;
 8002c6e:	4b89      	ldr	r3, [pc, #548]	; (8002e94 <Hvac_ProcessCommand+0x598>)
 8002c70:	781a      	ldrb	r2, [r3, #0]
 8002c72:	4b87      	ldr	r3, [pc, #540]	; (8002e90 <Hvac_ProcessCommand+0x594>)
 8002c74:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 8002c76:	4b8a      	ldr	r3, [pc, #552]	; (8002ea0 <Hvac_ProcessCommand+0x5a4>)
 8002c78:	2201      	movs	r2, #1
 8002c7a:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_NoRecirculation != Hvac_NoRecirculation)
 8002c7c:	4b89      	ldr	r3, [pc, #548]	; (8002ea4 <Hvac_ProcessCommand+0x5a8>)
 8002c7e:	781a      	ldrb	r2, [r3, #0]
 8002c80:	4b89      	ldr	r3, [pc, #548]	; (8002ea8 <Hvac_ProcessCommand+0x5ac>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d023      	beq.n	8002cd0 <Hvac_ProcessCommand+0x3d4>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 8002c88:	4b83      	ldr	r3, [pc, #524]	; (8002e98 <Hvac_ProcessCommand+0x59c>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b1f      	cmp	r3, #31
 8002c8e:	d007      	beq.n	8002ca0 <Hvac_ProcessCommand+0x3a4>
 8002c90:	4b81      	ldr	r3, [pc, #516]	; (8002e98 <Hvac_ProcessCommand+0x59c>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <Hvac_ProcessCommand+0x3a4>
 8002c98:	4b80      	ldr	r3, [pc, #512]	; (8002e9c <Hvac_ProcessCommand+0x5a0>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d105      	bne.n	8002cac <Hvac_ProcessCommand+0x3b0>
			{
				Btc_FanValue = 31;
 8002ca0:	4b7d      	ldr	r3, [pc, #500]	; (8002e98 <Hvac_ProcessCommand+0x59c>)
 8002ca2:	221f      	movs	r2, #31
 8002ca4:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 8002ca6:	4b7d      	ldr	r3, [pc, #500]	; (8002e9c <Hvac_ProcessCommand+0x5a0>)
 8002ca8:	2201      	movs	r2, #1
 8002caa:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_NoRecirculation = Hvac_NoRecirculation;
 8002cac:	4b7e      	ldr	r3, [pc, #504]	; (8002ea8 <Hvac_ProcessCommand+0x5ac>)
 8002cae:	781a      	ldrb	r2, [r3, #0]
 8002cb0:	4b7c      	ldr	r3, [pc, #496]	; (8002ea4 <Hvac_ProcessCommand+0x5a8>)
 8002cb2:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 8002cb4:	4b7a      	ldr	r3, [pc, #488]	; (8002ea0 <Hvac_ProcessCommand+0x5a4>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	701a      	strb	r2, [r3, #0]
 8002cba:	e009      	b.n	8002cd0 <Hvac_ProcessCommand+0x3d4>
		else
		{
			/* do nothing */
		}
	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_LOW)
 8002cbc:	4b7b      	ldr	r3, [pc, #492]	; (8002eac <Hvac_ProcessCommand+0x5b0>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d105      	bne.n	8002cd0 <Hvac_ProcessCommand+0x3d4>
	{
		Hvac_CurrentState = STD_LOW;
 8002cc4:	4b76      	ldr	r3, [pc, #472]	; (8002ea0 <Hvac_ProcessCommand+0x5a4>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	701a      	strb	r2, [r3, #0]
		Hvac_IsCleared = STD_LOW;
 8002cca:	4b79      	ldr	r3, [pc, #484]	; (8002eb0 <Hvac_ProcessCommand+0x5b4>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	sprintf(buffer_T, "%u", (unsigned int) Hvac_TemperatureValue);
 8002cd0:	4b78      	ldr	r3, [pc, #480]	; (8002eb4 <Hvac_ProcessCommand+0x5b8>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	1d3b      	adds	r3, r7, #4
 8002cd8:	4977      	ldr	r1, [pc, #476]	; (8002eb8 <Hvac_ProcessCommand+0x5bc>)
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f010 ff2a 	bl	8013b34 <siprintf>
	sprintf(buffer_F, "%u", (unsigned int) Hvac_FanValue);
 8002ce0:	4b6e      	ldr	r3, [pc, #440]	; (8002e9c <Hvac_ProcessCommand+0x5a0>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	463b      	mov	r3, r7
 8002ce8:	4973      	ldr	r1, [pc, #460]	; (8002eb8 <Hvac_ProcessCommand+0x5bc>)
 8002cea:	4618      	mov	r0, r3
 8002cec:	f010 ff22 	bl	8013b34 <siprintf>
	if(Hvac_CurrentState == STD_LOW && Hvac_IsCleared == STD_LOW)
 8002cf0:	4b6b      	ldr	r3, [pc, #428]	; (8002ea0 <Hvac_ProcessCommand+0x5a4>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d109      	bne.n	8002d0c <Hvac_ProcessCommand+0x410>
 8002cf8:	4b6d      	ldr	r3, [pc, #436]	; (8002eb0 <Hvac_ProcessCommand+0x5b4>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d105      	bne.n	8002d0c <Hvac_ProcessCommand+0x410>
	{
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_Clear();
 8002d00:	f001 fafa 	bl	80042f8 <I2cLcd_Clear>
		Hvac_IsCleared = STD_HIGH;
 8002d04:	4b6a      	ldr	r3, [pc, #424]	; (8002eb0 <Hvac_ProcessCommand+0x5b4>)
 8002d06:	2201      	movs	r2, #1
 8002d08:	701a      	strb	r2, [r3, #0]
 8002d0a:	e16b      	b.n	8002fe4 <Hvac_ProcessCommand+0x6e8>
	}
	else if(Hvac_CurrentState == STD_HIGH)
 8002d0c:	4b64      	ldr	r3, [pc, #400]	; (8002ea0 <Hvac_ProcessCommand+0x5a4>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	f040 8167 	bne.w	8002fe4 <Hvac_ProcessCommand+0x6e8>
	{
		if(Hvac_MainCounter % 10 == 0)
 8002d16:	4b69      	ldr	r3, [pc, #420]	; (8002ebc <Hvac_ProcessCommand+0x5c0>)
 8002d18:	6819      	ldr	r1, [r3, #0]
 8002d1a:	4b69      	ldr	r3, [pc, #420]	; (8002ec0 <Hvac_ProcessCommand+0x5c4>)
 8002d1c:	fba3 2301 	umull	r2, r3, r3, r1
 8002d20:	08da      	lsrs	r2, r3, #3
 8002d22:	4613      	mov	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	1aca      	subs	r2, r1, r3
 8002d2c:	2a00      	cmp	r2, #0
 8002d2e:	d101      	bne.n	8002d34 <Hvac_ProcessCommand+0x438>
		{
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_Clear();
 8002d30:	f001 fae2 	bl	80042f8 <I2cLcd_Clear>
		}
		else
		{
			/* do nothing */
		}
		Hvac_IsCleared = STD_LOW;
 8002d34:	4b5e      	ldr	r3, [pc, #376]	; (8002eb0 <Hvac_ProcessCommand+0x5b4>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	701a      	strb	r2, [r3, #0]
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 0);
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	2000      	movs	r0, #0
 8002d3e:	f001 fabc 	bl	80042ba <I2cLcd_SetCursor>
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("F=");
 8002d42:	4860      	ldr	r0, [pc, #384]	; (8002ec4 <Hvac_ProcessCommand+0x5c8>)
 8002d44:	f001 faa4 	bl	8004290 <I2cLcd_SendString>
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 2);
 8002d48:	2102      	movs	r1, #2
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	f001 fab5 	bl	80042ba <I2cLcd_SetCursor>
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(buffer_F);
 8002d50:	463b      	mov	r3, r7
 8002d52:	4618      	mov	r0, r3
 8002d54:	f001 fa9c 	bl	8004290 <I2cLcd_SendString>
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 0);
 8002d58:	2100      	movs	r1, #0
 8002d5a:	2001      	movs	r0, #1
 8002d5c:	f001 faad 	bl	80042ba <I2cLcd_SetCursor>
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("T=");
 8002d60:	4859      	ldr	r0, [pc, #356]	; (8002ec8 <Hvac_ProcessCommand+0x5cc>)
 8002d62:	f001 fa95 	bl	8004290 <I2cLcd_SendString>
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 2);
 8002d66:	2102      	movs	r1, #2
 8002d68:	2001      	movs	r0, #1
 8002d6a:	f001 faa6 	bl	80042ba <I2cLcd_SetCursor>
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(buffer_T);
 8002d6e:	1d3b      	adds	r3, r7, #4
 8002d70:	4618      	mov	r0, r3
 8002d72:	f001 fa8d 	bl	8004290 <I2cLcd_SendString>
		if(Hvac_AutomaticMode == STD_HIGH)
 8002d76:	4b55      	ldr	r3, [pc, #340]	; (8002ecc <Hvac_ProcessCommand+0x5d0>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d142      	bne.n	8002e04 <Hvac_ProcessCommand+0x508>
		{
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 12);
 8002d7e:	210c      	movs	r1, #12
 8002d80:	2001      	movs	r0, #1
 8002d82:	f001 fa9a 	bl	80042ba <I2cLcd_SetCursor>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("AUTO");
 8002d86:	4852      	ldr	r0, [pc, #328]	; (8002ed0 <Hvac_ProcessCommand+0x5d4>)
 8002d88:	f001 fa82 	bl	8004290 <I2cLcd_SendString>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 4);
 8002d8c:	2104      	movs	r1, #4
 8002d8e:	2000      	movs	r0, #0
 8002d90:	f001 fa93 	bl	80042ba <I2cLcd_SetCursor>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(" ");
 8002d94:	484f      	ldr	r0, [pc, #316]	; (8002ed4 <Hvac_ProcessCommand+0x5d8>)
 8002d96:	f001 fa7b 	bl	8004290 <I2cLcd_SendString>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 6);
 8002d9a:	2106      	movs	r1, #6
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	f001 fa8c 	bl	80042ba <I2cLcd_SetCursor>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(" ");
 8002da2:	484c      	ldr	r0, [pc, #304]	; (8002ed4 <Hvac_ProcessCommand+0x5d8>)
 8002da4:	f001 fa74 	bl	8004290 <I2cLcd_SendString>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 8);
 8002da8:	2108      	movs	r1, #8
 8002daa:	2000      	movs	r0, #0
 8002dac:	f001 fa85 	bl	80042ba <I2cLcd_SetCursor>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(" ");
 8002db0:	4848      	ldr	r0, [pc, #288]	; (8002ed4 <Hvac_ProcessCommand+0x5d8>)
 8002db2:	f001 fa6d 	bl	8004290 <I2cLcd_SendString>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 10);
 8002db6:	210a      	movs	r1, #10
 8002db8:	2000      	movs	r0, #0
 8002dba:	f001 fa7e 	bl	80042ba <I2cLcd_SetCursor>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("  ");
 8002dbe:	4846      	ldr	r0, [pc, #280]	; (8002ed8 <Hvac_ProcessCommand+0x5dc>)
 8002dc0:	f001 fa66 	bl	8004290 <I2cLcd_SendString>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 13);
 8002dc4:	210d      	movs	r1, #13
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	f001 fa77 	bl	80042ba <I2cLcd_SetCursor>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("   ");
 8002dcc:	4843      	ldr	r0, [pc, #268]	; (8002edc <Hvac_ProcessCommand+0x5e0>)
 8002dce:	f001 fa5f 	bl	8004290 <I2cLcd_SendString>
			if(sensorValueTs == STD_HIGH)
 8002dd2:	4b43      	ldr	r3, [pc, #268]	; (8002ee0 <Hvac_ProcessCommand+0x5e4>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d107      	bne.n	8002dea <Hvac_ProcessCommand+0x4ee>
			{
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 9);
 8002dda:	2109      	movs	r1, #9
 8002ddc:	2001      	movs	r0, #1
 8002dde:	f001 fa6c 	bl	80042ba <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("AC");
 8002de2:	4840      	ldr	r0, [pc, #256]	; (8002ee4 <Hvac_ProcessCommand+0x5e8>)
 8002de4:	f001 fa54 	bl	8004290 <I2cLcd_SendString>
			{
				/* do nothing */
			}
		}
	}
}
 8002de8:	e0fc      	b.n	8002fe4 <Hvac_ProcessCommand+0x6e8>
			else if(sensorValueTs == STD_LOW)
 8002dea:	4b3d      	ldr	r3, [pc, #244]	; (8002ee0 <Hvac_ProcessCommand+0x5e4>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f040 80f8 	bne.w	8002fe4 <Hvac_ProcessCommand+0x6e8>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 9);
 8002df4:	2109      	movs	r1, #9
 8002df6:	2001      	movs	r0, #1
 8002df8:	f001 fa5f 	bl	80042ba <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("  ");
 8002dfc:	4836      	ldr	r0, [pc, #216]	; (8002ed8 <Hvac_ProcessCommand+0x5dc>)
 8002dfe:	f001 fa47 	bl	8004290 <I2cLcd_SendString>
}
 8002e02:	e0ef      	b.n	8002fe4 <Hvac_ProcessCommand+0x6e8>
		else if(Hvac_AutomaticMode == STD_LOW)
 8002e04:	4b31      	ldr	r3, [pc, #196]	; (8002ecc <Hvac_ProcessCommand+0x5d0>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f040 80eb 	bne.w	8002fe4 <Hvac_ProcessCommand+0x6e8>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 12);
 8002e0e:	210c      	movs	r1, #12
 8002e10:	2001      	movs	r0, #1
 8002e12:	f001 fa52 	bl	80042ba <I2cLcd_SetCursor>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("    ");
 8002e16:	4834      	ldr	r0, [pc, #208]	; (8002ee8 <Hvac_ProcessCommand+0x5ec>)
 8002e18:	f001 fa3a 	bl	8004290 <I2cLcd_SendString>
			if(Hvac_LegVent == STD_HIGH)
 8002e1c:	4b33      	ldr	r3, [pc, #204]	; (8002eec <Hvac_ProcessCommand+0x5f0>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d107      	bne.n	8002e34 <Hvac_ProcessCommand+0x538>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 4);
 8002e24:	2104      	movs	r1, #4
 8002e26:	2000      	movs	r0, #0
 8002e28:	f001 fa47 	bl	80042ba <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("L");
 8002e2c:	4830      	ldr	r0, [pc, #192]	; (8002ef0 <Hvac_ProcessCommand+0x5f4>)
 8002e2e:	f001 fa2f 	bl	8004290 <I2cLcd_SendString>
 8002e32:	e00a      	b.n	8002e4a <Hvac_ProcessCommand+0x54e>
			else if(Hvac_LegVent == STD_LOW)
 8002e34:	4b2d      	ldr	r3, [pc, #180]	; (8002eec <Hvac_ProcessCommand+0x5f0>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d106      	bne.n	8002e4a <Hvac_ProcessCommand+0x54e>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 4);
 8002e3c:	2104      	movs	r1, #4
 8002e3e:	2000      	movs	r0, #0
 8002e40:	f001 fa3b 	bl	80042ba <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(" ");
 8002e44:	4823      	ldr	r0, [pc, #140]	; (8002ed4 <Hvac_ProcessCommand+0x5d8>)
 8002e46:	f001 fa23 	bl	8004290 <I2cLcd_SendString>
			if(Hvac_MidVent == STD_HIGH)
 8002e4a:	4b2a      	ldr	r3, [pc, #168]	; (8002ef4 <Hvac_ProcessCommand+0x5f8>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d107      	bne.n	8002e62 <Hvac_ProcessCommand+0x566>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 6);
 8002e52:	2106      	movs	r1, #6
 8002e54:	2000      	movs	r0, #0
 8002e56:	f001 fa30 	bl	80042ba <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("M");
 8002e5a:	4827      	ldr	r0, [pc, #156]	; (8002ef8 <Hvac_ProcessCommand+0x5fc>)
 8002e5c:	f001 fa18 	bl	8004290 <I2cLcd_SendString>
 8002e60:	e00a      	b.n	8002e78 <Hvac_ProcessCommand+0x57c>
			else if(Hvac_MidVent == STD_LOW)
 8002e62:	4b24      	ldr	r3, [pc, #144]	; (8002ef4 <Hvac_ProcessCommand+0x5f8>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d106      	bne.n	8002e78 <Hvac_ProcessCommand+0x57c>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 6);
 8002e6a:	2106      	movs	r1, #6
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	f001 fa24 	bl	80042ba <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(" ");
 8002e72:	4818      	ldr	r0, [pc, #96]	; (8002ed4 <Hvac_ProcessCommand+0x5d8>)
 8002e74:	f001 fa0c 	bl	8004290 <I2cLcd_SendString>
			if(Hvac_WindshieldVent == STD_HIGH)
 8002e78:	4b20      	ldr	r3, [pc, #128]	; (8002efc <Hvac_ProcessCommand+0x600>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d141      	bne.n	8002f04 <Hvac_ProcessCommand+0x608>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 8);
 8002e80:	2108      	movs	r1, #8
 8002e82:	2000      	movs	r0, #0
 8002e84:	f001 fa19 	bl	80042ba <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("W");
 8002e88:	481d      	ldr	r0, [pc, #116]	; (8002f00 <Hvac_ProcessCommand+0x604>)
 8002e8a:	f001 fa01 	bl	8004290 <I2cLcd_SendString>
 8002e8e:	e044      	b.n	8002f1a <Hvac_ProcessCommand+0x61e>
 8002e90:	20000194 	.word	0x20000194
 8002e94:	2000018a 	.word	0x2000018a
 8002e98:	200000ef 	.word	0x200000ef
 8002e9c:	20000182 	.word	0x20000182
 8002ea0:	20000181 	.word	0x20000181
 8002ea4:	20000195 	.word	0x20000195
 8002ea8:	2000018b 	.word	0x2000018b
 8002eac:	20000120 	.word	0x20000120
 8002eb0:	2000018d 	.word	0x2000018d
 8002eb4:	20000183 	.word	0x20000183
 8002eb8:	0801450c 	.word	0x0801450c
 8002ebc:	2000017c 	.word	0x2000017c
 8002ec0:	cccccccd 	.word	0xcccccccd
 8002ec4:	08014510 	.word	0x08014510
 8002ec8:	08014514 	.word	0x08014514
 8002ecc:	2000018c 	.word	0x2000018c
 8002ed0:	08014518 	.word	0x08014518
 8002ed4:	08014520 	.word	0x08014520
 8002ed8:	08014524 	.word	0x08014524
 8002edc:	08014528 	.word	0x08014528
 8002ee0:	20000198 	.word	0x20000198
 8002ee4:	0801452c 	.word	0x0801452c
 8002ee8:	08014530 	.word	0x08014530
 8002eec:	20000184 	.word	0x20000184
 8002ef0:	08014538 	.word	0x08014538
 8002ef4:	20000185 	.word	0x20000185
 8002ef8:	0801453c 	.word	0x0801453c
 8002efc:	20000186 	.word	0x20000186
 8002f00:	08014540 	.word	0x08014540
			else if(Hvac_WindshieldVent == STD_LOW)
 8002f04:	4b39      	ldr	r3, [pc, #228]	; (8002fec <Hvac_ProcessCommand+0x6f0>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d106      	bne.n	8002f1a <Hvac_ProcessCommand+0x61e>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 8);
 8002f0c:	2108      	movs	r1, #8
 8002f0e:	2000      	movs	r0, #0
 8002f10:	f001 f9d3 	bl	80042ba <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(" ");
 8002f14:	4836      	ldr	r0, [pc, #216]	; (8002ff0 <Hvac_ProcessCommand+0x6f4>)
 8002f16:	f001 f9bb 	bl	8004290 <I2cLcd_SendString>
			if(Hvac_WindshieldDefrost == STD_HIGH)
 8002f1a:	4b36      	ldr	r3, [pc, #216]	; (8002ff4 <Hvac_ProcessCommand+0x6f8>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d107      	bne.n	8002f32 <Hvac_ProcessCommand+0x636>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 10);
 8002f22:	210a      	movs	r1, #10
 8002f24:	2000      	movs	r0, #0
 8002f26:	f001 f9c8 	bl	80042ba <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("WD");
 8002f2a:	4833      	ldr	r0, [pc, #204]	; (8002ff8 <Hvac_ProcessCommand+0x6fc>)
 8002f2c:	f001 f9b0 	bl	8004290 <I2cLcd_SendString>
 8002f30:	e00a      	b.n	8002f48 <Hvac_ProcessCommand+0x64c>
			else if(Hvac_WindshieldDefrost == STD_LOW)
 8002f32:	4b30      	ldr	r3, [pc, #192]	; (8002ff4 <Hvac_ProcessCommand+0x6f8>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d106      	bne.n	8002f48 <Hvac_ProcessCommand+0x64c>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 10);
 8002f3a:	210a      	movs	r1, #10
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	f001 f9bc 	bl	80042ba <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("  ");
 8002f42:	482e      	ldr	r0, [pc, #184]	; (8002ffc <Hvac_ProcessCommand+0x700>)
 8002f44:	f001 f9a4 	bl	8004290 <I2cLcd_SendString>
			if(Hvac_RearWindshieldDefrost == STD_HIGH)
 8002f48:	4b2d      	ldr	r3, [pc, #180]	; (8003000 <Hvac_ProcessCommand+0x704>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d107      	bne.n	8002f60 <Hvac_ProcessCommand+0x664>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 13);
 8002f50:	210d      	movs	r1, #13
 8002f52:	2000      	movs	r0, #0
 8002f54:	f001 f9b1 	bl	80042ba <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("RWD");
 8002f58:	482a      	ldr	r0, [pc, #168]	; (8003004 <Hvac_ProcessCommand+0x708>)
 8002f5a:	f001 f999 	bl	8004290 <I2cLcd_SendString>
 8002f5e:	e00a      	b.n	8002f76 <Hvac_ProcessCommand+0x67a>
			else if(Hvac_RearWindshieldDefrost == STD_LOW)
 8002f60:	4b27      	ldr	r3, [pc, #156]	; (8003000 <Hvac_ProcessCommand+0x704>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d106      	bne.n	8002f76 <Hvac_ProcessCommand+0x67a>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 13);
 8002f68:	210d      	movs	r1, #13
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	f001 f9a5 	bl	80042ba <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("   ");
 8002f70:	4825      	ldr	r0, [pc, #148]	; (8003008 <Hvac_ProcessCommand+0x70c>)
 8002f72:	f001 f98d 	bl	8004290 <I2cLcd_SendString>
			if(Hvac_Ac == STD_HIGH)
 8002f76:	4b25      	ldr	r3, [pc, #148]	; (800300c <Hvac_ProcessCommand+0x710>)
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d107      	bne.n	8002f8e <Hvac_ProcessCommand+0x692>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 9);
 8002f7e:	2109      	movs	r1, #9
 8002f80:	2001      	movs	r0, #1
 8002f82:	f001 f99a 	bl	80042ba <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("AC");
 8002f86:	4822      	ldr	r0, [pc, #136]	; (8003010 <Hvac_ProcessCommand+0x714>)
 8002f88:	f001 f982 	bl	8004290 <I2cLcd_SendString>
 8002f8c:	e00a      	b.n	8002fa4 <Hvac_ProcessCommand+0x6a8>
			else if(Hvac_Ac == STD_LOW)
 8002f8e:	4b1f      	ldr	r3, [pc, #124]	; (800300c <Hvac_ProcessCommand+0x710>)
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <Hvac_ProcessCommand+0x6a8>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 9);
 8002f96:	2109      	movs	r1, #9
 8002f98:	2001      	movs	r0, #1
 8002f9a:	f001 f98e 	bl	80042ba <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("  ");
 8002f9e:	4817      	ldr	r0, [pc, #92]	; (8002ffc <Hvac_ProcessCommand+0x700>)
 8002fa0:	f001 f976 	bl	8004290 <I2cLcd_SendString>
			if(Hvac_NoRecirculation == STD_HIGH && Hvac_Recirculation == STD_LOW)
 8002fa4:	4b1b      	ldr	r3, [pc, #108]	; (8003014 <Hvac_ProcessCommand+0x718>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d10b      	bne.n	8002fc4 <Hvac_ProcessCommand+0x6c8>
 8002fac:	4b1a      	ldr	r3, [pc, #104]	; (8003018 <Hvac_ProcessCommand+0x71c>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d107      	bne.n	8002fc4 <Hvac_ProcessCommand+0x6c8>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 5);
 8002fb4:	2105      	movs	r1, #5
 8002fb6:	2001      	movs	r0, #1
 8002fb8:	f001 f97f 	bl	80042ba <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("   ");
 8002fbc:	4812      	ldr	r0, [pc, #72]	; (8003008 <Hvac_ProcessCommand+0x70c>)
 8002fbe:	f001 f967 	bl	8004290 <I2cLcd_SendString>
 8002fc2:	e00f      	b.n	8002fe4 <Hvac_ProcessCommand+0x6e8>
			else if(Hvac_NoRecirculation == STD_LOW && Hvac_Recirculation == STD_HIGH)
 8002fc4:	4b13      	ldr	r3, [pc, #76]	; (8003014 <Hvac_ProcessCommand+0x718>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10b      	bne.n	8002fe4 <Hvac_ProcessCommand+0x6e8>
 8002fcc:	4b12      	ldr	r3, [pc, #72]	; (8003018 <Hvac_ProcessCommand+0x71c>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d107      	bne.n	8002fe4 <Hvac_ProcessCommand+0x6e8>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 5);
 8002fd4:	2105      	movs	r1, #5
 8002fd6:	2001      	movs	r0, #1
 8002fd8:	f001 f96f 	bl	80042ba <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("(C)");
 8002fdc:	480f      	ldr	r0, [pc, #60]	; (800301c <Hvac_ProcessCommand+0x720>)
 8002fde:	f001 f957 	bl	8004290 <I2cLcd_SendString>
}
 8002fe2:	e7ff      	b.n	8002fe4 <Hvac_ProcessCommand+0x6e8>
 8002fe4:	bf00      	nop
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	20000186 	.word	0x20000186
 8002ff0:	08014520 	.word	0x08014520
 8002ff4:	20000187 	.word	0x20000187
 8002ff8:	08014544 	.word	0x08014544
 8002ffc:	08014524 	.word	0x08014524
 8003000:	20000188 	.word	0x20000188
 8003004:	08014548 	.word	0x08014548
 8003008:	08014528 	.word	0x08014528
 800300c:	20000189 	.word	0x20000189
 8003010:	0801452c 	.word	0x0801452c
 8003014:	2000018b 	.word	0x2000018b
 8003018:	2000018a 	.word	0x2000018a
 800301c:	0801454c 	.word	0x0801454c

08003020 <IntLights_RxBtcState>:
/***********************************************************************************
* Function: IntLights_RxBtcState										   		   *
* Description: Process command. 		   		   						           *
************************************************************************************/
VOID IntLights_RxBtcState()
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
	/* Process the state of the interior lights according to system state. */
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_HIGH)
 8003024:	4b11      	ldr	r3, [pc, #68]	; (800306c <IntLights_RxBtcState+0x4c>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d102      	bne.n	8003032 <IntLights_RxBtcState+0x12>
	{
		IntLights_CurrentState = STD_HIGH;
 800302c:	4b10      	ldr	r3, [pc, #64]	; (8003070 <IntLights_RxBtcState+0x50>)
 800302e:	2201      	movs	r2, #1
 8003030:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW && Rte_P_Btc_BtcPort_Btc_IntLights == STD_LOW)
 8003032:	4b0e      	ldr	r3, [pc, #56]	; (800306c <IntLights_RxBtcState+0x4c>)
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d106      	bne.n	8003048 <IntLights_RxBtcState+0x28>
 800303a:	4b0e      	ldr	r3, [pc, #56]	; (8003074 <IntLights_RxBtcState+0x54>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d102      	bne.n	8003048 <IntLights_RxBtcState+0x28>
	{
		IntLights_CurrentState = STD_LOW;
 8003042:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <IntLights_RxBtcState+0x50>)
 8003044:	2200      	movs	r2, #0
 8003046:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW && Rte_P_Btc_BtcPort_Btc_IntLights == STD_HIGH)
 8003048:	4b08      	ldr	r3, [pc, #32]	; (800306c <IntLights_RxBtcState+0x4c>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d106      	bne.n	800305e <IntLights_RxBtcState+0x3e>
 8003050:	4b08      	ldr	r3, [pc, #32]	; (8003074 <IntLights_RxBtcState+0x54>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d102      	bne.n	800305e <IntLights_RxBtcState+0x3e>
	{
		IntLights_CurrentState = STD_HIGH;
 8003058:	4b05      	ldr	r3, [pc, #20]	; (8003070 <IntLights_RxBtcState+0x50>)
 800305a:	2201      	movs	r2, #1
 800305c:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel3);
 800305e:	2108      	movs	r1, #8
 8003060:	4805      	ldr	r0, [pc, #20]	; (8003078 <IntLights_RxBtcState+0x58>)
 8003062:	f00f f87b 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
}
 8003066:	bf00      	nop
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	20000122 	.word	0x20000122
 8003070:	20000199 	.word	0x20000199
 8003074:	200000ee 	.word	0x200000ee
 8003078:	20000544 	.word	0x20000544

0800307c <IntLights_MainFunction>:
/***********************************************************************************
* Function: IntLights_MainFunction										           *
* Description: Interior lights main function for the application and state process.*
************************************************************************************/
VOID IntLights_MainFunction()
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
	IntLights_RxBtcState();
 8003080:	f7ff ffce 	bl	8003020 <IntLights_RxBtcState>
}
 8003084:	bf00      	nop
 8003086:	bd80      	pop	{r7, pc}

08003088 <Pdc_MainFunction>:
/***********************************************************************************
* Function: Pdc_MainFunction													   *
* Description: Main function application. 		   			                       *
************************************************************************************/
VOID Pdc_MainFunction()
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
	if(Btc_ReverseLight == STD_HIGH)
 800308c:	4b04      	ldr	r3, [pc, #16]	; (80030a0 <Pdc_MainFunction+0x18>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d103      	bne.n	800309c <Pdc_MainFunction+0x14>
	{
		Pdc_Front_ProcessData();
 8003094:	f000 f830 	bl	80030f8 <Pdc_Front_ProcessData>
		Pdc_Rear_ProcessData();
 8003098:	f000 f804 	bl	80030a4 <Pdc_Rear_ProcessData>
	}
	else
	{
		/* do nothing */
	}
}
 800309c:	bf00      	nop
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	200000ed 	.word	0x200000ed

080030a4 <Pdc_Rear_ProcessData>:
/***********************************************************************************
* Function: Pdc_Rear_ProcessData												   *
* Description: Process distance data.		   			                           *
************************************************************************************/
VOID Pdc_Rear_ProcessData()
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
	/* Store the distance measured. */
	Pdc_Rear_Distance = Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelFour;
 80030a8:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <Pdc_Rear_ProcessData+0x40>)
 80030aa:	781a      	ldrb	r2, [r3, #0]
 80030ac:	4b0e      	ldr	r3, [pc, #56]	; (80030e8 <Pdc_Rear_ProcessData+0x44>)
 80030ae:	701a      	strb	r2, [r3, #0]
	/* Trigger the buzzer according to the distance measured. */
	if(Pdc_Rear_Distance <= PDC_MAX_DISTANCE)
 80030b0:	4b0d      	ldr	r3, [pc, #52]	; (80030e8 <Pdc_Rear_ProcessData+0x44>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b28      	cmp	r3, #40	; 0x28
 80030b6:	d801      	bhi.n	80030bc <Pdc_Rear_ProcessData+0x18>
	{
		Pdc_Rear_TriggerBuzzer();
 80030b8:	f000 f848 	bl	800314c <Pdc_Rear_TriggerBuzzer>
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance >= PDC_MAX_DISTANCE)
 80030bc:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <Pdc_Rear_ProcessData+0x44>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b27      	cmp	r3, #39	; 0x27
 80030c2:	d90c      	bls.n	80030de <Pdc_Rear_ProcessData+0x3a>
	{
		Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(PDCR_BUZZER_PORT, PDCR_BUZZER_PIN, STD_LOW);
 80030c4:	2200      	movs	r2, #0
 80030c6:	2120      	movs	r1, #32
 80030c8:	4808      	ldr	r0, [pc, #32]	; (80030ec <Pdc_Rear_ProcessData+0x48>)
 80030ca:	f00f fa08 	bl	80124de <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_PdcR_Buzzer_TimerHandle);
 80030ce:	4b08      	ldr	r3, [pc, #32]	; (80030f0 <Pdc_Rear_ProcessData+0x4c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f00f fa22 	bl	801251c <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		PdcR_DistanceRange = 0;
 80030d8:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <Pdc_Rear_ProcessData+0x50>)
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 80030de:	bf00      	nop
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20000949 	.word	0x20000949
 80030e8:	2000019a 	.word	0x2000019a
 80030ec:	40020400 	.word	0x40020400
 80030f0:	20000370 	.word	0x20000370
 80030f4:	2000019c 	.word	0x2000019c

080030f8 <Pdc_Front_ProcessData>:
/***********************************************************************************
* Function: Pdc_Front_ProcessData												   *
* Description: Process distance data. 		   			                           *
************************************************************************************/
VOID Pdc_Front_ProcessData()
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
	/* Store the distance measured. */
	Pdc_Front_Distance = Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelThree;
 80030fc:	4b0e      	ldr	r3, [pc, #56]	; (8003138 <Pdc_Front_ProcessData+0x40>)
 80030fe:	781a      	ldrb	r2, [r3, #0]
 8003100:	4b0e      	ldr	r3, [pc, #56]	; (800313c <Pdc_Front_ProcessData+0x44>)
 8003102:	701a      	strb	r2, [r3, #0]
	/* Trigger the buzzer according to the distance measured. */
	if(Pdc_Front_Distance <= PDC_MAX_DISTANCE)
 8003104:	4b0d      	ldr	r3, [pc, #52]	; (800313c <Pdc_Front_ProcessData+0x44>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	2b28      	cmp	r3, #40	; 0x28
 800310a:	d801      	bhi.n	8003110 <Pdc_Front_ProcessData+0x18>
	{
		Pdc_Front_TriggerBuzzer();
 800310c:	f000 f896 	bl	800323c <Pdc_Front_TriggerBuzzer>
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance >= PDC_MAX_DISTANCE)
 8003110:	4b0a      	ldr	r3, [pc, #40]	; (800313c <Pdc_Front_ProcessData+0x44>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2b27      	cmp	r3, #39	; 0x27
 8003116:	d90d      	bls.n	8003134 <Pdc_Front_ProcessData+0x3c>
	{
		Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(PDCF_BUZZER_PORT, PDCF_BUZZER_PIN, STD_LOW);
 8003118:	2200      	movs	r2, #0
 800311a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800311e:	4808      	ldr	r0, [pc, #32]	; (8003140 <Pdc_Front_ProcessData+0x48>)
 8003120:	f00f f9dd 	bl	80124de <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_PdcF_Buzzer_TimerHandle);
 8003124:	4b07      	ldr	r3, [pc, #28]	; (8003144 <Pdc_Front_ProcessData+0x4c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f00f f9f7 	bl	801251c <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		PdcF_DistanceRange = 0;
 800312e:	4b06      	ldr	r3, [pc, #24]	; (8003148 <Pdc_Front_ProcessData+0x50>)
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8003134:	bf00      	nop
 8003136:	bd80      	pop	{r7, pc}
 8003138:	20000939 	.word	0x20000939
 800313c:	2000019b 	.word	0x2000019b
 8003140:	40020800 	.word	0x40020800
 8003144:	20000374 	.word	0x20000374
 8003148:	200001a0 	.word	0x200001a0

0800314c <Pdc_Rear_TriggerBuzzer>:
/***********************************************************************************
* Function: Pdc_Rear_TriggerBuzzer												   *
* Description: Control buzzer.		   			                                   *
************************************************************************************/
VOID Pdc_Rear_TriggerBuzzer()
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
	if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_PdcR_Buzzer_TimerHandle) == 0)
 8003150:	4b37      	ldr	r3, [pc, #220]	; (8003230 <Pdc_Rear_TriggerBuzzer+0xe4>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f00b fef2 	bl	800ef3e <osTimerIsRunning>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d139      	bne.n	80031d4 <Pdc_Rear_TriggerBuzzer+0x88>
	{
		switch(PdcR_DistanceRange)
 8003160:	4b34      	ldr	r3, [pc, #208]	; (8003234 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	3b01      	subs	r3, #1
 8003166:	2b03      	cmp	r3, #3
 8003168:	d833      	bhi.n	80031d2 <Pdc_Rear_TriggerBuzzer+0x86>
 800316a:	a201      	add	r2, pc, #4	; (adr r2, 8003170 <Pdc_Rear_TriggerBuzzer+0x24>)
 800316c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003170:	08003181 	.word	0x08003181
 8003174:	08003197 	.word	0x08003197
 8003178:	080031ab 	.word	0x080031ab
 800317c:	080031bf 	.word	0x080031bf
		{
			case 1:
				PdcR_DistanceRange = 0;
 8003180:	4b2c      	ldr	r3, [pc, #176]	; (8003234 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_ONE);
 8003186:	4b2a      	ldr	r3, [pc, #168]	; (8003230 <Pdc_Rear_TriggerBuzzer+0xe4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800318e:	4618      	mov	r0, r3
 8003190:	f00f f9b7 	bl	8012502 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8003194:	e01e      	b.n	80031d4 <Pdc_Rear_TriggerBuzzer+0x88>
			case 2:
				PdcR_DistanceRange = 0;
 8003196:	4b27      	ldr	r3, [pc, #156]	; (8003234 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_TWO);
 800319c:	4b24      	ldr	r3, [pc, #144]	; (8003230 <Pdc_Rear_TriggerBuzzer+0xe4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	21fa      	movs	r1, #250	; 0xfa
 80031a2:	4618      	mov	r0, r3
 80031a4:	f00f f9ad 	bl	8012502 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 80031a8:	e014      	b.n	80031d4 <Pdc_Rear_TriggerBuzzer+0x88>
			case 3:
				PdcR_DistanceRange = 0;
 80031aa:	4b22      	ldr	r3, [pc, #136]	; (8003234 <Pdc_Rear_TriggerBuzzer+0xe8>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_THREE);
 80031b0:	4b1f      	ldr	r3, [pc, #124]	; (8003230 <Pdc_Rear_TriggerBuzzer+0xe4>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	217d      	movs	r1, #125	; 0x7d
 80031b6:	4618      	mov	r0, r3
 80031b8:	f00f f9a3 	bl	8012502 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 80031bc:	e00a      	b.n	80031d4 <Pdc_Rear_TriggerBuzzer+0x88>
			case 4:
				PdcR_DistanceRange = 0;
 80031be:	4b1d      	ldr	r3, [pc, #116]	; (8003234 <Pdc_Rear_TriggerBuzzer+0xe8>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_FOUR);
 80031c4:	4b1a      	ldr	r3, [pc, #104]	; (8003230 <Pdc_Rear_TriggerBuzzer+0xe4>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	214b      	movs	r1, #75	; 0x4b
 80031ca:	4618      	mov	r0, r3
 80031cc:	f00f f999 	bl	8012502 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 80031d0:	e000      	b.n	80031d4 <Pdc_Rear_TriggerBuzzer+0x88>
			default:
				break;
 80031d2:	bf00      	nop
	else
	{
		/* do nothing */
	}
	/* Trigger the buzzer for each case and type of safety distance. */
	if(Pdc_Rear_Distance <= PDC_MAX_DISTANCE && Pdc_Rear_Distance >= PDC_FIRST_SAFE_DISTANCE)
 80031d4:	4b18      	ldr	r3, [pc, #96]	; (8003238 <Pdc_Rear_TriggerBuzzer+0xec>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b28      	cmp	r3, #40	; 0x28
 80031da:	d806      	bhi.n	80031ea <Pdc_Rear_TriggerBuzzer+0x9e>
 80031dc:	4b16      	ldr	r3, [pc, #88]	; (8003238 <Pdc_Rear_TriggerBuzzer+0xec>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b1d      	cmp	r3, #29
 80031e2:	d902      	bls.n	80031ea <Pdc_Rear_TriggerBuzzer+0x9e>
	{
		PdcR_DistanceRange = 1;
 80031e4:	4b13      	ldr	r3, [pc, #76]	; (8003234 <Pdc_Rear_TriggerBuzzer+0xe8>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance <= PDC_FIRST_SAFE_DISTANCE && Pdc_Rear_Distance >= PDC_SECOND_SAFE_DISTANCE)
 80031ea:	4b13      	ldr	r3, [pc, #76]	; (8003238 <Pdc_Rear_TriggerBuzzer+0xec>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b1e      	cmp	r3, #30
 80031f0:	d806      	bhi.n	8003200 <Pdc_Rear_TriggerBuzzer+0xb4>
 80031f2:	4b11      	ldr	r3, [pc, #68]	; (8003238 <Pdc_Rear_TriggerBuzzer+0xec>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b13      	cmp	r3, #19
 80031f8:	d902      	bls.n	8003200 <Pdc_Rear_TriggerBuzzer+0xb4>
	{
		PdcR_DistanceRange = 2;
 80031fa:	4b0e      	ldr	r3, [pc, #56]	; (8003234 <Pdc_Rear_TriggerBuzzer+0xe8>)
 80031fc:	2202      	movs	r2, #2
 80031fe:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance <= PDC_SECOND_SAFE_DISTANCE && Pdc_Rear_Distance >= PDC_THIRD_SAFE_DISTANCE)
 8003200:	4b0d      	ldr	r3, [pc, #52]	; (8003238 <Pdc_Rear_TriggerBuzzer+0xec>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b14      	cmp	r3, #20
 8003206:	d806      	bhi.n	8003216 <Pdc_Rear_TriggerBuzzer+0xca>
 8003208:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <Pdc_Rear_TriggerBuzzer+0xec>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b09      	cmp	r3, #9
 800320e:	d902      	bls.n	8003216 <Pdc_Rear_TriggerBuzzer+0xca>
	{
		PdcR_DistanceRange = 3;
 8003210:	4b08      	ldr	r3, [pc, #32]	; (8003234 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8003212:	2203      	movs	r2, #3
 8003214:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance <= PDC_THIRD_SAFE_DISTANCE && Pdc_Rear_Distance >= PDC_FOURTH_SAFE_DISTANCE)
 8003216:	4b08      	ldr	r3, [pc, #32]	; (8003238 <Pdc_Rear_TriggerBuzzer+0xec>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b0a      	cmp	r3, #10
 800321c:	d806      	bhi.n	800322c <Pdc_Rear_TriggerBuzzer+0xe0>
 800321e:	4b06      	ldr	r3, [pc, #24]	; (8003238 <Pdc_Rear_TriggerBuzzer+0xec>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d902      	bls.n	800322c <Pdc_Rear_TriggerBuzzer+0xe0>
	{
		PdcR_DistanceRange = 4;
 8003226:	4b03      	ldr	r3, [pc, #12]	; (8003234 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8003228:	2204      	movs	r2, #4
 800322a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 800322c:	bf00      	nop
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20000370 	.word	0x20000370
 8003234:	2000019c 	.word	0x2000019c
 8003238:	2000019a 	.word	0x2000019a

0800323c <Pdc_Front_TriggerBuzzer>:
/***********************************************************************************
* Function: Pdc_Front_TriggerBuzzer												   *
* Description: Control buzzer		   			   								   *
************************************************************************************/
VOID Pdc_Front_TriggerBuzzer()
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
	if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_PdcF_Buzzer_TimerHandle) == 0)
 8003240:	4b37      	ldr	r3, [pc, #220]	; (8003320 <Pdc_Front_TriggerBuzzer+0xe4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f00b fe7a 	bl	800ef3e <osTimerIsRunning>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d139      	bne.n	80032c4 <Pdc_Front_TriggerBuzzer+0x88>
	{
		switch(PdcF_DistanceRange)
 8003250:	4b34      	ldr	r3, [pc, #208]	; (8003324 <Pdc_Front_TriggerBuzzer+0xe8>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	3b01      	subs	r3, #1
 8003256:	2b03      	cmp	r3, #3
 8003258:	d833      	bhi.n	80032c2 <Pdc_Front_TriggerBuzzer+0x86>
 800325a:	a201      	add	r2, pc, #4	; (adr r2, 8003260 <Pdc_Front_TriggerBuzzer+0x24>)
 800325c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003260:	08003271 	.word	0x08003271
 8003264:	08003287 	.word	0x08003287
 8003268:	0800329b 	.word	0x0800329b
 800326c:	080032af 	.word	0x080032af
		{
			case 1:
				PdcF_DistanceRange = 0;
 8003270:	4b2c      	ldr	r3, [pc, #176]	; (8003324 <Pdc_Front_TriggerBuzzer+0xe8>)
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_ONE);
 8003276:	4b2a      	ldr	r3, [pc, #168]	; (8003320 <Pdc_Front_TriggerBuzzer+0xe4>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800327e:	4618      	mov	r0, r3
 8003280:	f00f f93f 	bl	8012502 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8003284:	e01e      	b.n	80032c4 <Pdc_Front_TriggerBuzzer+0x88>
			case 2:
				PdcF_DistanceRange = 0;
 8003286:	4b27      	ldr	r3, [pc, #156]	; (8003324 <Pdc_Front_TriggerBuzzer+0xe8>)
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_TWO);
 800328c:	4b24      	ldr	r3, [pc, #144]	; (8003320 <Pdc_Front_TriggerBuzzer+0xe4>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	21fa      	movs	r1, #250	; 0xfa
 8003292:	4618      	mov	r0, r3
 8003294:	f00f f935 	bl	8012502 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8003298:	e014      	b.n	80032c4 <Pdc_Front_TriggerBuzzer+0x88>
			case 3:
				PdcF_DistanceRange = 0;
 800329a:	4b22      	ldr	r3, [pc, #136]	; (8003324 <Pdc_Front_TriggerBuzzer+0xe8>)
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_THREE);
 80032a0:	4b1f      	ldr	r3, [pc, #124]	; (8003320 <Pdc_Front_TriggerBuzzer+0xe4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	217d      	movs	r1, #125	; 0x7d
 80032a6:	4618      	mov	r0, r3
 80032a8:	f00f f92b 	bl	8012502 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 80032ac:	e00a      	b.n	80032c4 <Pdc_Front_TriggerBuzzer+0x88>
			case 4:
				PdcF_DistanceRange = 0;
 80032ae:	4b1d      	ldr	r3, [pc, #116]	; (8003324 <Pdc_Front_TriggerBuzzer+0xe8>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_FOUR);
 80032b4:	4b1a      	ldr	r3, [pc, #104]	; (8003320 <Pdc_Front_TriggerBuzzer+0xe4>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	214b      	movs	r1, #75	; 0x4b
 80032ba:	4618      	mov	r0, r3
 80032bc:	f00f f921 	bl	8012502 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 80032c0:	e000      	b.n	80032c4 <Pdc_Front_TriggerBuzzer+0x88>
			default:
				break;
 80032c2:	bf00      	nop
	else
	{
		/* do nothing */
	}
	/* Trigger the buzzer for each case and type of safety distance. */
	if(Pdc_Front_Distance <= PDC_MAX_DISTANCE && Pdc_Front_Distance >= PDC_FIRST_SAFE_DISTANCE)
 80032c4:	4b18      	ldr	r3, [pc, #96]	; (8003328 <Pdc_Front_TriggerBuzzer+0xec>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b28      	cmp	r3, #40	; 0x28
 80032ca:	d806      	bhi.n	80032da <Pdc_Front_TriggerBuzzer+0x9e>
 80032cc:	4b16      	ldr	r3, [pc, #88]	; (8003328 <Pdc_Front_TriggerBuzzer+0xec>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b1d      	cmp	r3, #29
 80032d2:	d902      	bls.n	80032da <Pdc_Front_TriggerBuzzer+0x9e>
	{
		PdcF_DistanceRange = 1;
 80032d4:	4b13      	ldr	r3, [pc, #76]	; (8003324 <Pdc_Front_TriggerBuzzer+0xe8>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance <= PDC_FIRST_SAFE_DISTANCE && Pdc_Front_Distance >= PDC_SECOND_SAFE_DISTANCE)
 80032da:	4b13      	ldr	r3, [pc, #76]	; (8003328 <Pdc_Front_TriggerBuzzer+0xec>)
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	2b1e      	cmp	r3, #30
 80032e0:	d806      	bhi.n	80032f0 <Pdc_Front_TriggerBuzzer+0xb4>
 80032e2:	4b11      	ldr	r3, [pc, #68]	; (8003328 <Pdc_Front_TriggerBuzzer+0xec>)
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2b13      	cmp	r3, #19
 80032e8:	d902      	bls.n	80032f0 <Pdc_Front_TriggerBuzzer+0xb4>
	{
		PdcF_DistanceRange = 2;
 80032ea:	4b0e      	ldr	r3, [pc, #56]	; (8003324 <Pdc_Front_TriggerBuzzer+0xe8>)
 80032ec:	2202      	movs	r2, #2
 80032ee:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance <= PDC_SECOND_SAFE_DISTANCE && Pdc_Front_Distance >= PDC_THIRD_SAFE_DISTANCE)
 80032f0:	4b0d      	ldr	r3, [pc, #52]	; (8003328 <Pdc_Front_TriggerBuzzer+0xec>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b14      	cmp	r3, #20
 80032f6:	d806      	bhi.n	8003306 <Pdc_Front_TriggerBuzzer+0xca>
 80032f8:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <Pdc_Front_TriggerBuzzer+0xec>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b09      	cmp	r3, #9
 80032fe:	d902      	bls.n	8003306 <Pdc_Front_TriggerBuzzer+0xca>
	{
		PdcF_DistanceRange = 3;
 8003300:	4b08      	ldr	r3, [pc, #32]	; (8003324 <Pdc_Front_TriggerBuzzer+0xe8>)
 8003302:	2203      	movs	r2, #3
 8003304:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance <= PDC_THIRD_SAFE_DISTANCE && Pdc_Front_Distance >= PDC_FOURTH_SAFE_DISTANCE)
 8003306:	4b08      	ldr	r3, [pc, #32]	; (8003328 <Pdc_Front_TriggerBuzzer+0xec>)
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b0a      	cmp	r3, #10
 800330c:	d806      	bhi.n	800331c <Pdc_Front_TriggerBuzzer+0xe0>
 800330e:	4b06      	ldr	r3, [pc, #24]	; (8003328 <Pdc_Front_TriggerBuzzer+0xec>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d902      	bls.n	800331c <Pdc_Front_TriggerBuzzer+0xe0>
	{
		PdcF_DistanceRange = 4;
 8003316:	4b03      	ldr	r3, [pc, #12]	; (8003324 <Pdc_Front_TriggerBuzzer+0xe8>)
 8003318:	2204      	movs	r2, #4
 800331a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 800331c:	bf00      	nop
 800331e:	bd80      	pop	{r7, pc}
 8003320:	20000374 	.word	0x20000374
 8003324:	200001a0 	.word	0x200001a0
 8003328:	2000019b 	.word	0x2000019b

0800332c <SecAlm_LightsBuzzerControl>:
/***********************************************************************************
* Function: SecAlm_LightsBuzzerControl										       *
* Description: Controls the lights and buzzer in case of alarm trigger. 		   *
************************************************************************************/
VOID SecAlm_LightsBuzzerControl()
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
	/* Local variable for sensor status. */
	uint32 sensorStatus = STD_LOW;
 8003332:	2300      	movs	r3, #0
 8003334:	607b      	str	r3, [r7, #4]
	/* Get the sensor status. */
	sensorStatus = SecAlm_VibSenStatus();
 8003336:	f000 f893 	bl	8003460 <SecAlm_VibSenStatus>
 800333a:	4603      	mov	r3, r0
 800333c:	607b      	str	r3, [r7, #4]
	/* If the trigger was previously on and now it is off. */
	if(SecAlm_TriggerPreviousState != SecAlm_Trigger && !SecAlm_Trigger)
 800333e:	4b3f      	ldr	r3, [pc, #252]	; (800343c <SecAlm_LightsBuzzerControl+0x110>)
 8003340:	781a      	ldrb	r2, [r3, #0]
 8003342:	4b3f      	ldr	r3, [pc, #252]	; (8003440 <SecAlm_LightsBuzzerControl+0x114>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d006      	beq.n	8003358 <SecAlm_LightsBuzzerControl+0x2c>
 800334a:	4b3d      	ldr	r3, [pc, #244]	; (8003440 <SecAlm_LightsBuzzerControl+0x114>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d102      	bne.n	8003358 <SecAlm_LightsBuzzerControl+0x2c>
	{
		/* Reset the counter. */
		SecAlm_TriggerIRQCounterForTimer4 = STD_LOW;
 8003352:	4b3c      	ldr	r3, [pc, #240]	; (8003444 <SecAlm_LightsBuzzerControl+0x118>)
 8003354:	2200      	movs	r2, #0
 8003356:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If the counter exceeded the maximum value, reset the variables. */
	if(SecAlm_TriggerIRQCounterForTimer4 >= 20)
 8003358:	4b3a      	ldr	r3, [pc, #232]	; (8003444 <SecAlm_LightsBuzzerControl+0x118>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b13      	cmp	r3, #19
 800335e:	d922      	bls.n	80033a6 <SecAlm_LightsBuzzerControl+0x7a>
	{
		SecAlm_TriggerPreviousState 						= SecAlm_Trigger;
 8003360:	4b37      	ldr	r3, [pc, #220]	; (8003440 <SecAlm_LightsBuzzerControl+0x114>)
 8003362:	781a      	ldrb	r2, [r3, #0]
 8003364:	4b35      	ldr	r3, [pc, #212]	; (800343c <SecAlm_LightsBuzzerControl+0x110>)
 8003366:	701a      	strb	r2, [r3, #0]
		Rte_P_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter	= STD_HIGH;
 8003368:	4b37      	ldr	r3, [pc, #220]	; (8003448 <SecAlm_LightsBuzzerControl+0x11c>)
 800336a:	2201      	movs	r2, #1
 800336c:	701a      	strb	r2, [r3, #0]
		Rte_P_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter 	= STD_LOW;
 800336e:	4b37      	ldr	r3, [pc, #220]	; (800344c <SecAlm_LightsBuzzerControl+0x120>)
 8003370:	2200      	movs	r2, #0
 8003372:	701a      	strb	r2, [r3, #0]
		SecAlm_Trigger 										= STD_LOW;
 8003374:	4b32      	ldr	r3, [pc, #200]	; (8003440 <SecAlm_LightsBuzzerControl+0x114>)
 8003376:	2200      	movs	r2, #0
 8003378:	701a      	strb	r2, [r3, #0]
		SecAlm_PinStateChange 								= STD_LOW;
 800337a:	4b35      	ldr	r3, [pc, #212]	; (8003450 <SecAlm_LightsBuzzerControl+0x124>)
 800337c:	2200      	movs	r2, #0
 800337e:	701a      	strb	r2, [r3, #0]
		SecAlm_TriggerIRQCounterForTimer4 					= STD_LOW;
 8003380:	4b30      	ldr	r3, [pc, #192]	; (8003444 <SecAlm_LightsBuzzerControl+0x118>)
 8003382:	2200      	movs	r2, #0
 8003384:	701a      	strb	r2, [r3, #0]
		SecAlm_SensorStatusCounter 							= STD_LOW;
 8003386:	4b33      	ldr	r3, [pc, #204]	; (8003454 <SecAlm_LightsBuzzerControl+0x128>)
 8003388:	2200      	movs	r2, #0
 800338a:	801a      	strh	r2, [r3, #0]
		SecAlm_SensorStatus 								= STD_LOW;
 800338c:	4b32      	ldr	r3, [pc, #200]	; (8003458 <SecAlm_LightsBuzzerControl+0x12c>)
 800338e:	2200      	movs	r2, #0
 8003390:	801a      	strh	r2, [r3, #0]
		SecAlm_SensorStatusCounter 							= STD_LOW;
 8003392:	4b30      	ldr	r3, [pc, #192]	; (8003454 <SecAlm_LightsBuzzerControl+0x128>)
 8003394:	2200      	movs	r2, #0
 8003396:	801a      	strh	r2, [r3, #0]
		/* Stop the os timer assigned to security alarm trigger. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmAlarm_TimerHandle);
 8003398:	4b30      	ldr	r3, [pc, #192]	; (800345c <SecAlm_LightsBuzzerControl+0x130>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f00f f8bd 	bl	801251c <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		/* Turn off the lights to make sure their state is off before any other action. */
		SecAlm_TurnOnExtLights();
 80033a2:	f000 f891 	bl	80034c8 <SecAlm_TurnOnExtLights>
		/* do nothing */
	}
	/* The counter resets every 10 seconds, if a reset of the timer
	 * occurs, then reset the variables related to the security
	 * alarm trigger. */
	if(SecAlm_SensorStatusCounter == STD_LOW)
 80033a6:	4b2b      	ldr	r3, [pc, #172]	; (8003454 <SecAlm_LightsBuzzerControl+0x128>)
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d107      	bne.n	80033be <SecAlm_LightsBuzzerControl+0x92>
	{
		sensorStatus 	= STD_LOW;
 80033ae:	2300      	movs	r3, #0
 80033b0:	607b      	str	r3, [r7, #4]
		SecAlm_Trigger 	= STD_LOW;
 80033b2:	4b23      	ldr	r3, [pc, #140]	; (8003440 <SecAlm_LightsBuzzerControl+0x114>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	701a      	strb	r2, [r3, #0]
		SecAlm_PinStateChange = STD_LOW;
 80033b8:	4b25      	ldr	r3, [pc, #148]	; (8003450 <SecAlm_LightsBuzzerControl+0x124>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If the sensor status is high, trigger the alarm. */
	if(sensorStatus == STD_HIGH)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d102      	bne.n	80033ca <SecAlm_LightsBuzzerControl+0x9e>
	{
		SecAlm_Trigger = STD_HIGH;
 80033c4:	4b1e      	ldr	r3, [pc, #120]	; (8003440 <SecAlm_LightsBuzzerControl+0x114>)
 80033c6:	2201      	movs	r2, #1
 80033c8:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If the trigger is set to high, perform alarm triggering. */
	if(SecAlm_Trigger == STD_HIGH)
 80033ca:	4b1d      	ldr	r3, [pc, #116]	; (8003440 <SecAlm_LightsBuzzerControl+0x114>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d128      	bne.n	8003424 <SecAlm_LightsBuzzerControl+0xf8>
	{
		/* One alarm cycle is performed consisting of 10 seconds. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmAlarm_TimerHandle) == 0)
 80033d2:	4b22      	ldr	r3, [pc, #136]	; (800345c <SecAlm_LightsBuzzerControl+0x130>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f00b fdb1 	bl	800ef3e <osTimerIsRunning>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d106      	bne.n	80033f0 <SecAlm_LightsBuzzerControl+0xc4>
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlmAlarm_TimerHandle, 500);
 80033e2:	4b1e      	ldr	r3, [pc, #120]	; (800345c <SecAlm_LightsBuzzerControl+0x130>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80033ea:	4618      	mov	r0, r3
 80033ec:	f00f f889 	bl	8012502 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Cycle between on and off states of buzzer and lights. */
		if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 1)
 80033f0:	4b14      	ldr	r3, [pc, #80]	; (8003444 <SecAlm_LightsBuzzerControl+0x118>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d005      	beq.n	800340a <SecAlm_LightsBuzzerControl+0xde>
		{
			SecAlm_PinStateChange = STD_HIGH;
 80033fe:	4b14      	ldr	r3, [pc, #80]	; (8003450 <SecAlm_LightsBuzzerControl+0x124>)
 8003400:	2201      	movs	r2, #1
 8003402:	701a      	strb	r2, [r3, #0]
			SecAlm_TurnOnExtLights();
 8003404:	f000 f860 	bl	80034c8 <SecAlm_TurnOnExtLights>
	}
	else
	{
		/* do nothing */
	}
}
 8003408:	e013      	b.n	8003432 <SecAlm_LightsBuzzerControl+0x106>
		else if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 0)
 800340a:	4b0e      	ldr	r3, [pc, #56]	; (8003444 <SecAlm_LightsBuzzerControl+0x118>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10c      	bne.n	8003432 <SecAlm_LightsBuzzerControl+0x106>
			SecAlm_PinStateChange = STD_LOW;
 8003418:	4b0d      	ldr	r3, [pc, #52]	; (8003450 <SecAlm_LightsBuzzerControl+0x124>)
 800341a:	2200      	movs	r2, #0
 800341c:	701a      	strb	r2, [r3, #0]
			SecAlm_TurnOnExtLights();
 800341e:	f000 f853 	bl	80034c8 <SecAlm_TurnOnExtLights>
}
 8003422:	e006      	b.n	8003432 <SecAlm_LightsBuzzerControl+0x106>
	else if(SecAlm_Trigger == STD_LOW)
 8003424:	4b06      	ldr	r3, [pc, #24]	; (8003440 <SecAlm_LightsBuzzerControl+0x114>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d102      	bne.n	8003432 <SecAlm_LightsBuzzerControl+0x106>
		SecAlm_ToggleAlarmBuzzer(STD_LOW);
 800342c:	2000      	movs	r0, #0
 800342e:	f000 f8bd 	bl	80035ac <SecAlm_ToggleAlarmBuzzer>
}
 8003432:	bf00      	nop
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	200001ad 	.word	0x200001ad
 8003440:	200001a4 	.word	0x200001a4
 8003444:	200001a6 	.word	0x200001a6
 8003448:	20000125 	.word	0x20000125
 800344c:	20000127 	.word	0x20000127
 8003450:	200001a5 	.word	0x200001a5
 8003454:	200001a8 	.word	0x200001a8
 8003458:	200001aa 	.word	0x200001aa
 800345c:	2000036c 	.word	0x2000036c

08003460 <SecAlm_VibSenStatus>:
/***********************************************************************************
* Function: SecAlm_VibSenStatus										               *
* Description: Updates the vibration sensor status based on measurements.		   *
************************************************************************************/
StdReturnType SecAlm_VibSenStatus()
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
	/* Local variable for sensor status. */
	uint16 sensorStatus = STD_LOW;
 8003466:	2300      	movs	r3, #0
 8003468:	80fb      	strh	r3, [r7, #6]
	/* Read the sensor value. */
	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(SECALM_VS_REQUEST);
 800346a:	2002      	movs	r0, #2
 800346c:	f000 f8c2 	bl	80035f4 <SenCtrl_ProcessSensorValue>
	/* If the sensor was triggered. */
	if(SecAlm_SensorState == STD_HIGH)
 8003470:	4b12      	ldr	r3, [pc, #72]	; (80034bc <SecAlm_VibSenStatus+0x5c>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d10c      	bne.n	8003492 <SecAlm_VibSenStatus+0x32>
	{
		/* Count for how long it has been triggered. */
		SecAlm_SensorStatusCounter = SecAlm_SensorStatusCounter + 1;
 8003478:	4b11      	ldr	r3, [pc, #68]	; (80034c0 <SecAlm_VibSenStatus+0x60>)
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	3301      	adds	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	4b0f      	ldr	r3, [pc, #60]	; (80034c0 <SecAlm_VibSenStatus+0x60>)
 8003482:	801a      	strh	r2, [r3, #0]
		/* Start the reset timer for the counter variable. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlm_AlarmResetHandle, 10000);
 8003484:	4b0f      	ldr	r3, [pc, #60]	; (80034c4 <SecAlm_VibSenStatus+0x64>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f242 7110 	movw	r1, #10000	; 0x2710
 800348c:	4618      	mov	r0, r3
 800348e:	f00f f838 	bl	8012502 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
	else
	{
		/* do nothing */
	}
	/* If the sensor was triggered enough times. */
	if(SecAlm_SensorStatusCounter >= 1000)
 8003492:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <SecAlm_VibSenStatus+0x60>)
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800349a:	d302      	bcc.n	80034a2 <SecAlm_VibSenStatus+0x42>
	{
		/* Set the sensor status to high. */
		sensorStatus = STD_HIGH;
 800349c:	2301      	movs	r3, #1
 800349e:	80fb      	strh	r3, [r7, #6]
 80034a0:	e006      	b.n	80034b0 <SecAlm_VibSenStatus+0x50>
	}
	else if(SecAlm_SensorStatusCounter < 1000)
 80034a2:	4b07      	ldr	r3, [pc, #28]	; (80034c0 <SecAlm_VibSenStatus+0x60>)
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034aa:	d201      	bcs.n	80034b0 <SecAlm_VibSenStatus+0x50>
	{
		/* Set the sensor status to low. */
		sensorStatus = STD_LOW;
 80034ac:	2300      	movs	r3, #0
 80034ae:	80fb      	strh	r3, [r7, #6]
	else
	{
		/* do nothing */
	}
	/* Return sensor status. */
	return sensorStatus;
 80034b0:	88fb      	ldrh	r3, [r7, #6]
 80034b2:	b2db      	uxtb	r3, r3
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	200001ac 	.word	0x200001ac
 80034c0:	200001a8 	.word	0x200001a8
 80034c4:	20000354 	.word	0x20000354

080034c8 <SecAlm_TurnOnExtLights>:
/***********************************************************************************
* Function: SecAlm_TurnOnExtLights										           *
* Description: Trigger the exterior lights and buzzer.							   *
************************************************************************************/
VOID SecAlm_TurnOnExtLights()
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
	/* Turn on the lights and the buzzer. */
	if(SecAlm_PinStateChange == STD_HIGH)
 80034cc:	4b1f      	ldr	r3, [pc, #124]	; (800354c <SecAlm_TurnOnExtLights+0x84>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d118      	bne.n	8003506 <SecAlm_TurnOnExtLights+0x3e>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 80034d4:	2100      	movs	r1, #0
 80034d6:	481e      	ldr	r0, [pc, #120]	; (8003550 <SecAlm_TurnOnExtLights+0x88>)
 80034d8:	f00e fe40 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 80034dc:	2104      	movs	r1, #4
 80034de:	481c      	ldr	r0, [pc, #112]	; (8003550 <SecAlm_TurnOnExtLights+0x88>)
 80034e0:	f00e fe3c 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 80034e4:	2108      	movs	r1, #8
 80034e6:	481b      	ldr	r0, [pc, #108]	; (8003554 <SecAlm_TurnOnExtLights+0x8c>)
 80034e8:	f00e fe38 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 80034ec:	210c      	movs	r1, #12
 80034ee:	4819      	ldr	r0, [pc, #100]	; (8003554 <SecAlm_TurnOnExtLights+0x8c>)
 80034f0:	f00e fe34 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80034f4:	2108      	movs	r1, #8
 80034f6:	4818      	ldr	r0, [pc, #96]	; (8003558 <SecAlm_TurnOnExtLights+0x90>)
 80034f8:	f00e fe30 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 80034fc:	210c      	movs	r1, #12
 80034fe:	4816      	ldr	r0, [pc, #88]	; (8003558 <SecAlm_TurnOnExtLights+0x90>)
 8003500:	f00e fe2c 	bl	801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8003504:	e01b      	b.n	800353e <SecAlm_TurnOnExtLights+0x76>
	}
	else if(SecAlm_PinStateChange == STD_LOW)
 8003506:	4b11      	ldr	r3, [pc, #68]	; (800354c <SecAlm_TurnOnExtLights+0x84>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d117      	bne.n	800353e <SecAlm_TurnOnExtLights+0x76>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 800350e:	2100      	movs	r1, #0
 8003510:	480f      	ldr	r0, [pc, #60]	; (8003550 <SecAlm_TurnOnExtLights+0x88>)
 8003512:	f00e fe30 	bl	8012176 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8003516:	2104      	movs	r1, #4
 8003518:	480d      	ldr	r0, [pc, #52]	; (8003550 <SecAlm_TurnOnExtLights+0x88>)
 800351a:	f00e fe2c 	bl	8012176 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 800351e:	2108      	movs	r1, #8
 8003520:	480c      	ldr	r0, [pc, #48]	; (8003554 <SecAlm_TurnOnExtLights+0x8c>)
 8003522:	f00e fe28 	bl	8012176 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 8003526:	210c      	movs	r1, #12
 8003528:	480a      	ldr	r0, [pc, #40]	; (8003554 <SecAlm_TurnOnExtLights+0x8c>)
 800352a:	f00e fe24 	bl	8012176 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 800352e:	2108      	movs	r1, #8
 8003530:	4809      	ldr	r0, [pc, #36]	; (8003558 <SecAlm_TurnOnExtLights+0x90>)
 8003532:	f00e fe20 	bl	8012176 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8003536:	210c      	movs	r1, #12
 8003538:	4807      	ldr	r0, [pc, #28]	; (8003558 <SecAlm_TurnOnExtLights+0x90>)
 800353a:	f00e fe1c 	bl	8012176 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	}
	SecAlm_ToggleAlarmBuzzer(SecAlm_PinStateChange);
 800353e:	4b03      	ldr	r3, [pc, #12]	; (800354c <SecAlm_TurnOnExtLights+0x84>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f000 f832 	bl	80035ac <SecAlm_ToggleAlarmBuzzer>
}
 8003548:	bf00      	nop
 800354a:	bd80      	pop	{r7, pc}
 800354c:	200001a5 	.word	0x200001a5
 8003550:	20000544 	.word	0x20000544
 8003554:	200005f8 	.word	0x200005f8
 8003558:	200006ac 	.word	0x200006ac

0800355c <SecAlm_MainFunction>:
/***********************************************************************************
* Function: SecAlm_MainFunction										           	   *
* Description: Process application states.										   *
************************************************************************************/
VOID SecAlm_MainFunction()
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
	SecAlm_LightsBuzzerControl();
 8003560:	f7ff fee4 	bl	800332c <SecAlm_LightsBuzzerControl>
}
 8003564:	bf00      	nop
 8003566:	bd80      	pop	{r7, pc}

08003568 <SecAlm_Init>:
/***********************************************************************************
* Function: SecAlm_Init										                       *
* Description: Initialize the application.										   *
************************************************************************************/
StdReturnType SecAlm_Init()
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
	/* Set the variables to 0. */
	SecAlm_Trigger 						= STD_LOW;
 800356c:	4b0a      	ldr	r3, [pc, #40]	; (8003598 <SecAlm_Init+0x30>)
 800356e:	2200      	movs	r2, #0
 8003570:	701a      	strb	r2, [r3, #0]
	SecAlm_PinStateChange 				= STD_LOW;
 8003572:	4b0a      	ldr	r3, [pc, #40]	; (800359c <SecAlm_Init+0x34>)
 8003574:	2200      	movs	r2, #0
 8003576:	701a      	strb	r2, [r3, #0]
	SecAlm_TriggerIRQCounterForTimer4 	= STD_LOW;
 8003578:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <SecAlm_Init+0x38>)
 800357a:	2200      	movs	r2, #0
 800357c:	701a      	strb	r2, [r3, #0]
	SecAlm_SensorStatusCounter 			= STD_LOW;
 800357e:	4b09      	ldr	r3, [pc, #36]	; (80035a4 <SecAlm_Init+0x3c>)
 8003580:	2200      	movs	r2, #0
 8003582:	801a      	strh	r2, [r3, #0]
	SecAlm_SensorStatus 				= STD_LOW;
 8003584:	4b08      	ldr	r3, [pc, #32]	; (80035a8 <SecAlm_Init+0x40>)
 8003586:	2200      	movs	r2, #0
 8003588:	801a      	strh	r2, [r3, #0]
	return E_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	200001a4 	.word	0x200001a4
 800359c:	200001a5 	.word	0x200001a5
 80035a0:	200001a6 	.word	0x200001a6
 80035a4:	200001a8 	.word	0x200001a8
 80035a8:	200001aa 	.word	0x200001aa

080035ac <SecAlm_ToggleAlarmBuzzer>:
/***********************************************************************************
* Function: SecAlm_ToggleAlarmBuzzer										       *
* Description: Alarm buzzer trigger.                                               *
************************************************************************************/
VOID SecAlm_ToggleAlarmBuzzer(uint8 PinState)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(SECALM_BUZZER_PORT, SECALM_BUZZER_PIN, PinState);
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	461a      	mov	r2, r3
 80035ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035be:	4803      	ldr	r0, [pc, #12]	; (80035cc <SecAlm_ToggleAlarmBuzzer+0x20>)
 80035c0:	f00e ff8d 	bl	80124de <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 80035c4:	bf00      	nop
 80035c6:	3708      	adds	r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40020400 	.word	0x40020400

080035d0 <SecAlm_ToggleAlarmLed>:
/***********************************************************************************
* Function: SecAlm_ToggleAlarmLed										           *
* Description: Alarm LED trigger.												   *
************************************************************************************/
VOID SecAlm_ToggleAlarmLed(uint8 PinState)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	4603      	mov	r3, r0
 80035d8:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(SECALM_LED_PORT, SECALM_LED_PIN, PinState);
 80035da:	79fb      	ldrb	r3, [r7, #7]
 80035dc:	461a      	mov	r2, r3
 80035de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035e2:	4803      	ldr	r0, [pc, #12]	; (80035f0 <SecAlm_ToggleAlarmLed+0x20>)
 80035e4:	f00e ff7b 	bl	80124de <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 80035e8:	bf00      	nop
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40020400 	.word	0x40020400

080035f4 <SenCtrl_ProcessSensorValue>:
/***********************************************************************************
* Function: SenCtrl_ProcessSensorValue									   	       *
* Description: Process the request for the sensor value. 	                       *
************************************************************************************/
VOID SenCtrl_ProcessSensorValue(uint8 request)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b088      	sub	sp, #32
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4603      	mov	r3, r0
 80035fc:	71fb      	strb	r3, [r7, #7]
	/* Store request into local variable. */
	uint8 localRequest = request;
 80035fe:	79fb      	ldrb	r3, [r7, #7]
 8003600:	77fb      	strb	r3, [r7, #31]
	/* Process sensor request. */
	switch(localRequest)
 8003602:	7ffb      	ldrb	r3, [r7, #31]
 8003604:	2b0d      	cmp	r3, #13
 8003606:	f200 80c0 	bhi.w	800378a <SenCtrl_ProcessSensorValue+0x196>
 800360a:	a201      	add	r2, pc, #4	; (adr r2, 8003610 <SenCtrl_ProcessSensorValue+0x1c>)
 800360c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003610:	08003649 	.word	0x08003649
 8003614:	0800378b 	.word	0x0800378b
 8003618:	0800367f 	.word	0x0800367f
 800361c:	080036b7 	.word	0x080036b7
 8003620:	080036eb 	.word	0x080036eb
 8003624:	080036fb 	.word	0x080036fb
 8003628:	0800370b 	.word	0x0800370b
 800362c:	0800371b 	.word	0x0800371b
 8003630:	0800372b 	.word	0x0800372b
 8003634:	0800373b 	.word	0x0800373b
 8003638:	0800374b 	.word	0x0800374b
 800363c:	0800375b 	.word	0x0800375b
 8003640:	0800376b 	.word	0x0800376b
 8003644:	0800377b 	.word	0x0800377b
	{
		case SENCTRL_EXTLIGHTS_LS_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_EXTLIGHTS_LS_POSITION] >= 4000)
 8003648:	4b5f      	ldr	r3, [pc, #380]	; (80037c8 <SenCtrl_ProcessSensorValue+0x1d4>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003650:	d307      	bcc.n	8003662 <SenCtrl_ProcessSensorValue+0x6e>
			{
				uint32 localls = 1;
 8003652:	2301      	movs	r3, #1
 8003654:	61bb      	str	r3, [r7, #24]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState(&localls);
 8003656:	f107 0318 	add.w	r3, r7, #24
 800365a:	4618      	mov	r0, r3
 800365c:	f00e fc56 	bl	8011f0c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState>
			}
			else
			{
				/* do nothing */
			}
			break;
 8003660:	e095      	b.n	800378e <SenCtrl_ProcessSensorValue+0x19a>
			else if(SenCtrl_MeasuredValues[SENCTRL_EXTLIGHTS_LS_POSITION] < 4000)
 8003662:	4b59      	ldr	r3, [pc, #356]	; (80037c8 <SenCtrl_ProcessSensorValue+0x1d4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800366a:	f080 8090 	bcs.w	800378e <SenCtrl_ProcessSensorValue+0x19a>
				uint32 localls = 0;
 800366e:	2300      	movs	r3, #0
 8003670:	617b      	str	r3, [r7, #20]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState(&localls);
 8003672:	f107 0314 	add.w	r3, r7, #20
 8003676:	4618      	mov	r0, r3
 8003678:	f00e fc48 	bl	8011f0c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState>
			break;
 800367c:	e087      	b.n	800378e <SenCtrl_ProcessSensorValue+0x19a>
		case SENCTRL_SECALM_VS_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_SECALM_VS_REQUEST] == 4095)
 800367e:	4b52      	ldr	r3, [pc, #328]	; (80037c8 <SenCtrl_ProcessSensorValue+0x1d4>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003686:	4293      	cmp	r3, r2
 8003688:	d107      	bne.n	800369a <SenCtrl_ProcessSensorValue+0xa6>
			{
				uint32 localvs = STD_HIGH;
 800368a:	2301      	movs	r3, #1
 800368c:	613b      	str	r3, [r7, #16]
				Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState(&localvs);
 800368e:	f107 0310 	add.w	r3, r7, #16
 8003692:	4618      	mov	r0, r3
 8003694:	f00e fc28 	bl	8011ee8 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState>
			}
			else
			{
				/* do nothing */
			}
			break;
 8003698:	e07b      	b.n	8003792 <SenCtrl_ProcessSensorValue+0x19e>
			else if(SenCtrl_MeasuredValues[SENCTRL_SECALM_VS_REQUEST] < 4095)
 800369a:	4b4b      	ldr	r3, [pc, #300]	; (80037c8 <SenCtrl_ProcessSensorValue+0x1d4>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f640 72fe 	movw	r2, #4094	; 0xffe
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d875      	bhi.n	8003792 <SenCtrl_ProcessSensorValue+0x19e>
				uint32 localvs = STD_LOW;
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]
				Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState(&localvs);
 80036aa:	f107 030c 	add.w	r3, r7, #12
 80036ae:	4618      	mov	r0, r3
 80036b0:	f00e fc1a 	bl	8011ee8 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState>
			break;
 80036b4:	e06d      	b.n	8003792 <SenCtrl_ProcessSensorValue+0x19e>
		case SENCTRL_HVAC_TS_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_HVAC_TS_POSITION] >= 4000)
 80036b6:	4b44      	ldr	r3, [pc, #272]	; (80037c8 <SenCtrl_ProcessSensorValue+0x1d4>)
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80036be:	d307      	bcc.n	80036d0 <SenCtrl_ProcessSensorValue+0xdc>
			{
				uint8 localts = STD_HIGH;
 80036c0:	2301      	movs	r3, #1
 80036c2:	72fb      	strb	r3, [r7, #11]
				Rte_Write_Hvac_HvacPort_Hvac_TsState(&localts);
 80036c4:	f107 030b 	add.w	r3, r7, #11
 80036c8:	4618      	mov	r0, r3
 80036ca:	f00e fbed 	bl	8011ea8 <Rte_Write_Hvac_HvacPort_Hvac_TsState>
			}
			else
			{
				/* do nothing */
			}
			break;
 80036ce:	e062      	b.n	8003796 <SenCtrl_ProcessSensorValue+0x1a2>
			else if(SenCtrl_MeasuredValues[SENCTRL_HVAC_TS_POSITION] < 4000)
 80036d0:	4b3d      	ldr	r3, [pc, #244]	; (80037c8 <SenCtrl_ProcessSensorValue+0x1d4>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80036d8:	d25d      	bcs.n	8003796 <SenCtrl_ProcessSensorValue+0x1a2>
				uint8 localts = STD_LOW;
 80036da:	2300      	movs	r3, #0
 80036dc:	72bb      	strb	r3, [r7, #10]
				Rte_Write_Hvac_HvacPort_Hvac_TsState(&localts);
 80036de:	f107 030a 	add.w	r3, r7, #10
 80036e2:	4618      	mov	r0, r3
 80036e4:	f00e fbe0 	bl	8011ea8 <Rte_Write_Hvac_HvacPort_Hvac_TsState>
			break;
 80036e8:	e055      	b.n	8003796 <SenCtrl_ProcessSensorValue+0x1a2>
		case SENCTRL_DIAGCTRL_LB_L_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_LB_L_POSITION] < SENCTRL_THRESHOLD_SH)
 80036ea:	4b37      	ldr	r3, [pc, #220]	; (80037c8 <SenCtrl_ProcessSensorValue+0x1d4>)
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	2b59      	cmp	r3, #89	; 0x59
 80036f0:	d853      	bhi.n	800379a <SenCtrl_ProcessSensorValue+0x1a6>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_LOW_BEAM_LEFT_MALFUNCTION);
 80036f2:	2004      	movs	r0, #4
 80036f4:	f00e fbe8 	bl	8011ec8 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 80036f8:	e04f      	b.n	800379a <SenCtrl_ProcessSensorValue+0x1a6>
		case SENCTRL_DIAGCTRL_LB_R_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_LB_R_POSITION] < SENCTRL_THRESHOLD_SH)
 80036fa:	4b33      	ldr	r3, [pc, #204]	; (80037c8 <SenCtrl_ProcessSensorValue+0x1d4>)
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	2b59      	cmp	r3, #89	; 0x59
 8003700:	d84d      	bhi.n	800379e <SenCtrl_ProcessSensorValue+0x1aa>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_LOW_BEAM_RIGHT_MALFUNCTION);
 8003702:	2005      	movs	r0, #5
 8003704:	f00e fbe0 	bl	8011ec8 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 8003708:	e049      	b.n	800379e <SenCtrl_ProcessSensorValue+0x1aa>
		case SENCTRL_DIAGCTRL_RPL_L_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_RPL_L_POSITION] < SENCTRL_THRESHOLD_SH)
 800370a:	4b2f      	ldr	r3, [pc, #188]	; (80037c8 <SenCtrl_ProcessSensorValue+0x1d4>)
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	2b59      	cmp	r3, #89	; 0x59
 8003710:	d847      	bhi.n	80037a2 <SenCtrl_ProcessSensorValue+0x1ae>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_REAR_POSITION_LIGHT_LEFT_MALFUNCTION);
 8003712:	2044      	movs	r0, #68	; 0x44
 8003714:	f00e fbd8 	bl	8011ec8 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 8003718:	e043      	b.n	80037a2 <SenCtrl_ProcessSensorValue+0x1ae>
		case SENCTRL_DIAGCTRL_RPL_R_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_RPL_R_POSITION] < SENCTRL_THRESHOLD_SH)
 800371a:	4b2b      	ldr	r3, [pc, #172]	; (80037c8 <SenCtrl_ProcessSensorValue+0x1d4>)
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	2b59      	cmp	r3, #89	; 0x59
 8003720:	d841      	bhi.n	80037a6 <SenCtrl_ProcessSensorValue+0x1b2>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_REAR_POSITION_LIGHT_RIGHT_MALFUNCTION);
 8003722:	2045      	movs	r0, #69	; 0x45
 8003724:	f00e fbd0 	bl	8011ec8 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 8003728:	e03d      	b.n	80037a6 <SenCtrl_ProcessSensorValue+0x1b2>
		case SENCTRL_DIAGCTRL_BL_R_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_BL_R_POSITION] < SENCTRL_THRESHOLD_SH)
 800372a:	4b27      	ldr	r3, [pc, #156]	; (80037c8 <SenCtrl_ProcessSensorValue+0x1d4>)
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	2b59      	cmp	r3, #89	; 0x59
 8003730:	d83b      	bhi.n	80037aa <SenCtrl_ProcessSensorValue+0x1b6>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_BRAKE_LIGHT_RIGHT_MALFUNCTION);
 8003732:	2074      	movs	r0, #116	; 0x74
 8003734:	f00e fbc8 	bl	8011ec8 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 8003738:	e037      	b.n	80037aa <SenCtrl_ProcessSensorValue+0x1b6>
		case SENCTRL_DIAGCTRL_BL_L_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_BL_L_POSITION] < SENCTRL_THRESHOLD_SH)
 800373a:	4b23      	ldr	r3, [pc, #140]	; (80037c8 <SenCtrl_ProcessSensorValue+0x1d4>)
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	2b59      	cmp	r3, #89	; 0x59
 8003740:	d835      	bhi.n	80037ae <SenCtrl_ProcessSensorValue+0x1ba>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_BRAKE_LIGHT_LEFT_MALFUNCTION);
 8003742:	2074      	movs	r0, #116	; 0x74
 8003744:	f00e fbc0 	bl	8011ec8 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 8003748:	e031      	b.n	80037ae <SenCtrl_ProcessSensorValue+0x1ba>
		case SENCTRL_DIAGCTRL_LTS_F_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_LTS_F_POSITION] < SENCTRL_THRESHOLD_SH)
 800374a:	4b1f      	ldr	r3, [pc, #124]	; (80037c8 <SenCtrl_ProcessSensorValue+0x1d4>)
 800374c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374e:	2b59      	cmp	r3, #89	; 0x59
 8003750:	d82f      	bhi.n	80037b2 <SenCtrl_ProcessSensorValue+0x1be>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_LEFT_TURN_SIGNAL_FRONT_MALFUNCTION);
 8003752:	2064      	movs	r0, #100	; 0x64
 8003754:	f00e fbb8 	bl	8011ec8 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 8003758:	e02b      	b.n	80037b2 <SenCtrl_ProcessSensorValue+0x1be>
		case SENCTRL_DIAGCTRL_LTS_R_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_LTS_R_POSITION] < SENCTRL_THRESHOLD_SH)
 800375a:	4b1b      	ldr	r3, [pc, #108]	; (80037c8 <SenCtrl_ProcessSensorValue+0x1d4>)
 800375c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375e:	2b59      	cmp	r3, #89	; 0x59
 8003760:	d829      	bhi.n	80037b6 <SenCtrl_ProcessSensorValue+0x1c2>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_LEFT_TURN_SIGNAL_REAR_MALFUNCTION);
 8003762:	2065      	movs	r0, #101	; 0x65
 8003764:	f00e fbb0 	bl	8011ec8 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 8003768:	e025      	b.n	80037b6 <SenCtrl_ProcessSensorValue+0x1c2>
		case SENCTRL_DIAGCTRL_RTS_R_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_RTS_R_POSITION] < SENCTRL_THRESHOLD_SH)
 800376a:	4b17      	ldr	r3, [pc, #92]	; (80037c8 <SenCtrl_ProcessSensorValue+0x1d4>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	2b59      	cmp	r3, #89	; 0x59
 8003770:	d823      	bhi.n	80037ba <SenCtrl_ProcessSensorValue+0x1c6>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_RIGHT_TURN_SIGNAL_REAR_MALFUNCTION);
 8003772:	2055      	movs	r0, #85	; 0x55
 8003774:	f00e fba8 	bl	8011ec8 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 8003778:	e01f      	b.n	80037ba <SenCtrl_ProcessSensorValue+0x1c6>
		case SENCTRL_DIAGCTRL_RTS_F_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_RTS_F_POSITION] < SENCTRL_THRESHOLD_SH)
 800377a:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <SenCtrl_ProcessSensorValue+0x1d4>)
 800377c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800377e:	2b59      	cmp	r3, #89	; 0x59
 8003780:	d81d      	bhi.n	80037be <SenCtrl_ProcessSensorValue+0x1ca>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_RIGHT_TURN_SIGNAL_FRONT_MALFUNCTION);
 8003782:	2054      	movs	r0, #84	; 0x54
 8003784:	f00e fba0 	bl	8011ec8 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 8003788:	e019      	b.n	80037be <SenCtrl_ProcessSensorValue+0x1ca>
		default:
			break;
 800378a:	bf00      	nop
 800378c:	e018      	b.n	80037c0 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 800378e:	bf00      	nop
 8003790:	e016      	b.n	80037c0 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 8003792:	bf00      	nop
 8003794:	e014      	b.n	80037c0 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 8003796:	bf00      	nop
 8003798:	e012      	b.n	80037c0 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 800379a:	bf00      	nop
 800379c:	e010      	b.n	80037c0 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 800379e:	bf00      	nop
 80037a0:	e00e      	b.n	80037c0 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 80037a2:	bf00      	nop
 80037a4:	e00c      	b.n	80037c0 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 80037a6:	bf00      	nop
 80037a8:	e00a      	b.n	80037c0 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 80037aa:	bf00      	nop
 80037ac:	e008      	b.n	80037c0 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 80037ae:	bf00      	nop
 80037b0:	e006      	b.n	80037c0 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 80037b2:	bf00      	nop
 80037b4:	e004      	b.n	80037c0 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 80037b6:	bf00      	nop
 80037b8:	e002      	b.n	80037c0 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 80037ba:	bf00      	nop
 80037bc:	e000      	b.n	80037c0 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 80037be:	bf00      	nop
	}
}
 80037c0:	bf00      	nop
 80037c2:	3720      	adds	r7, #32
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	200001b0 	.word	0x200001b0

080037cc <Can_Init>:
/***********************************************************************************
* Function: Can_Init													   		   *
* Description: Driver initialization.		 	   								   *
************************************************************************************/
VOID Can_Init()
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
	Can_BswState = CAN_INIT_STATE;
 80037d0:	4b03      	ldr	r3, [pc, #12]	; (80037e0 <Can_Init+0x14>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	701a      	strb	r2, [r3, #0]
	CanOverSpi_Init();
 80037d6:	f00a fafc 	bl	800ddd2 <CanOverSpi_Init>
}
 80037da:	bf00      	nop
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	200001f0 	.word	0x200001f0

080037e4 <I2cExtEeprom_BytesToWrite>:
/***********************************************************************************
* Function: I2cExtEeprom_BytesToWrite						    		           *
* Description: Returns the bytes that need to be written.					       *
************************************************************************************/
uint16 I2cExtEeprom_BytesToWrite(uint16 size, uint16 offset)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	4603      	mov	r3, r0
 80037ec:	460a      	mov	r2, r1
 80037ee:	80fb      	strh	r3, [r7, #6]
 80037f0:	4613      	mov	r3, r2
 80037f2:	80bb      	strh	r3, [r7, #4]
	/* Returns the number of bytes to write into memory. */
	if((size + offset) < I2C_EXTEEPROM_PAGE_SIZE)
 80037f4:	88fa      	ldrh	r2, [r7, #6]
 80037f6:	88bb      	ldrh	r3, [r7, #4]
 80037f8:	4413      	add	r3, r2
 80037fa:	2b3f      	cmp	r3, #63	; 0x3f
 80037fc:	dc01      	bgt.n	8003802 <I2cExtEeprom_BytesToWrite+0x1e>
	{
		return size;
 80037fe:	88fb      	ldrh	r3, [r7, #6]
 8003800:	e003      	b.n	800380a <I2cExtEeprom_BytesToWrite+0x26>
	}
	else
	{
		return I2C_EXTEEPROM_PAGE_SIZE - offset;
 8003802:	88bb      	ldrh	r3, [r7, #4]
 8003804:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003808:	b29b      	uxth	r3, r3
	}
}
 800380a:	4618      	mov	r0, r3
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
	...

08003818 <I2cExtEeprom_Write>:
/***********************************************************************************
* Function: I2cExtEeprom_Write										   			   *
* Description: Driver write to memory function.									   *
************************************************************************************/
VOID I2cExtEeprom_Write(uint16 page, uint16 offset, uint8 *data, uint16 size)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08c      	sub	sp, #48	; 0x30
 800381c:	af02      	add	r7, sp, #8
 800381e:	60ba      	str	r2, [r7, #8]
 8003820:	461a      	mov	r2, r3
 8003822:	4603      	mov	r3, r0
 8003824:	81fb      	strh	r3, [r7, #14]
 8003826:	460b      	mov	r3, r1
 8003828:	81bb      	strh	r3, [r7, #12]
 800382a:	4613      	mov	r3, r2
 800382c:	80fb      	strh	r3, [r7, #6]
	uint32 paddrposition = log(I2C_EXTEEPROM_PAGE_SIZE) / log(2);
 800382e:	2306      	movs	r3, #6
 8003830:	61fb      	str	r3, [r7, #28]
	uint16 startPage = page;
 8003832:	89fb      	ldrh	r3, [r7, #14]
 8003834:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16 endPage = page + ((size + offset) / I2C_EXTEEPROM_PAGE_SIZE);
 8003836:	88fa      	ldrh	r2, [r7, #6]
 8003838:	89bb      	ldrh	r3, [r7, #12]
 800383a:	4413      	add	r3, r2
 800383c:	2b00      	cmp	r3, #0
 800383e:	da00      	bge.n	8003842 <I2cExtEeprom_Write+0x2a>
 8003840:	333f      	adds	r3, #63	; 0x3f
 8003842:	119b      	asrs	r3, r3, #6
 8003844:	b29a      	uxth	r2, r3
 8003846:	89fb      	ldrh	r3, [r7, #14]
 8003848:	4413      	add	r3, r2
 800384a:	837b      	strh	r3, [r7, #26]
	uint16 numofpages = (endPage - startPage) + 1;
 800384c:	8b7a      	ldrh	r2, [r7, #26]
 800384e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	b29b      	uxth	r3, r3
 8003854:	3301      	adds	r3, #1
 8003856:	833b      	strh	r3, [r7, #24]
	uint16 pos = 0;
 8003858:	2300      	movs	r3, #0
 800385a:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (uint8 i = 0; i < numofpages; i++)
 800385c:	2300      	movs	r3, #0
 800385e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003862:	e033      	b.n	80038cc <I2cExtEeprom_Write+0xb4>
	{
		uint16 MemAddress = startPage << paddrposition | offset;
 8003864:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	b21a      	sxth	r2, r3
 800386e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	b21b      	sxth	r3, r3
 8003876:	82fb      	strh	r3, [r7, #22]
		uint16 bytesremaining = I2cExtEeprom_BytesToWrite(size, offset);
 8003878:	89ba      	ldrh	r2, [r7, #12]
 800387a:	88fb      	ldrh	r3, [r7, #6]
 800387c:	4611      	mov	r1, r2
 800387e:	4618      	mov	r0, r3
 8003880:	f7ff ffb0 	bl	80037e4 <I2cExtEeprom_BytesToWrite>
 8003884:	4603      	mov	r3, r0
 8003886:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Write_IT(&hi2c3, I2C_EXTEEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining);
 8003888:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	4413      	add	r3, r2
 800388e:	8af9      	ldrh	r1, [r7, #22]
 8003890:	8aba      	ldrh	r2, [r7, #20]
 8003892:	9201      	str	r2, [sp, #4]
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	2302      	movs	r3, #2
 8003898:	460a      	mov	r2, r1
 800389a:	21a0      	movs	r1, #160	; 0xa0
 800389c:	4811      	ldr	r0, [pc, #68]	; (80038e4 <I2cExtEeprom_Write+0xcc>)
 800389e:	f004 fff1 	bl	8008884 <HAL_I2C_Mem_Write_IT>
		startPage = startPage + 1;
 80038a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80038a4:	3301      	adds	r3, #1
 80038a6:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset = 0;
 80038a8:	2300      	movs	r3, #0
 80038aa:	81bb      	strh	r3, [r7, #12]
		size = size - bytesremaining;
 80038ac:	88fa      	ldrh	r2, [r7, #6]
 80038ae:	8abb      	ldrh	r3, [r7, #20]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	80fb      	strh	r3, [r7, #6]
		pos = pos+ bytesremaining;
 80038b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80038b6:	8abb      	ldrh	r3, [r7, #20]
 80038b8:	4413      	add	r3, r2
 80038ba:	84bb      	strh	r3, [r7, #36]	; 0x24
		HAL_Delay(5);
 80038bc:	2005      	movs	r0, #5
 80038be:	f002 fce1 	bl	8006284 <HAL_Delay>
	for (uint8 i = 0; i < numofpages; i++)
 80038c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038c6:	3301      	adds	r3, #1
 80038c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	8b3a      	ldrh	r2, [r7, #24]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d8c5      	bhi.n	8003864 <I2cExtEeprom_Write+0x4c>
	}
}
 80038d8:	bf00      	nop
 80038da:	bf00      	nop
 80038dc:	3728      	adds	r7, #40	; 0x28
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	200003fc 	.word	0x200003fc

080038e8 <I2cExtEeprom_Read>:
/***********************************************************************************
* Function: I2cExtEeprom_Read										   			   *
* Description: Driver read from memory function.								   *
************************************************************************************/
VOID I2cExtEeprom_Read(uint16 page, uint16 offset, uint8 *data, uint16 size)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08c      	sub	sp, #48	; 0x30
 80038ec:	af02      	add	r7, sp, #8
 80038ee:	60ba      	str	r2, [r7, #8]
 80038f0:	461a      	mov	r2, r3
 80038f2:	4603      	mov	r3, r0
 80038f4:	81fb      	strh	r3, [r7, #14]
 80038f6:	460b      	mov	r3, r1
 80038f8:	81bb      	strh	r3, [r7, #12]
 80038fa:	4613      	mov	r3, r2
 80038fc:	80fb      	strh	r3, [r7, #6]
	uint32 paddrposition = log(I2C_EXTEEPROM_PAGE_SIZE) / log(2);
 80038fe:	2306      	movs	r3, #6
 8003900:	61fb      	str	r3, [r7, #28]
	uint16 startPage = page;
 8003902:	89fb      	ldrh	r3, [r7, #14]
 8003904:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16 endPage = page + ((size + offset) / I2C_EXTEEPROM_PAGE_SIZE);
 8003906:	88fa      	ldrh	r2, [r7, #6]
 8003908:	89bb      	ldrh	r3, [r7, #12]
 800390a:	4413      	add	r3, r2
 800390c:	2b00      	cmp	r3, #0
 800390e:	da00      	bge.n	8003912 <I2cExtEeprom_Read+0x2a>
 8003910:	333f      	adds	r3, #63	; 0x3f
 8003912:	119b      	asrs	r3, r3, #6
 8003914:	b29a      	uxth	r2, r3
 8003916:	89fb      	ldrh	r3, [r7, #14]
 8003918:	4413      	add	r3, r2
 800391a:	837b      	strh	r3, [r7, #26]
	uint16 numofpages = (endPage - startPage) + 1;
 800391c:	8b7a      	ldrh	r2, [r7, #26]
 800391e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	b29b      	uxth	r3, r3
 8003924:	3301      	adds	r3, #1
 8003926:	833b      	strh	r3, [r7, #24]
	uint16 pos = 0;
 8003928:	2300      	movs	r3, #0
 800392a:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (uint8 i = 0; i < numofpages; i++)
 800392c:	2300      	movs	r3, #0
 800392e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003932:	e033      	b.n	800399c <I2cExtEeprom_Read+0xb4>
	{
		uint16 MemAddress = startPage << paddrposition | offset;
 8003934:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	b21a      	sxth	r2, r3
 800393e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	b21b      	sxth	r3, r3
 8003946:	82fb      	strh	r3, [r7, #22]
		uint16 bytesremaining = I2cExtEeprom_BytesToWrite(size, offset);
 8003948:	89ba      	ldrh	r2, [r7, #12]
 800394a:	88fb      	ldrh	r3, [r7, #6]
 800394c:	4611      	mov	r1, r2
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff ff48 	bl	80037e4 <I2cExtEeprom_BytesToWrite>
 8003954:	4603      	mov	r3, r0
 8003956:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Write_IT(&hi2c3, I2C_EXTEEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining);
 8003958:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	4413      	add	r3, r2
 800395e:	8af9      	ldrh	r1, [r7, #22]
 8003960:	8aba      	ldrh	r2, [r7, #20]
 8003962:	9201      	str	r2, [sp, #4]
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	2302      	movs	r3, #2
 8003968:	460a      	mov	r2, r1
 800396a:	21a0      	movs	r1, #160	; 0xa0
 800396c:	4811      	ldr	r0, [pc, #68]	; (80039b4 <I2cExtEeprom_Read+0xcc>)
 800396e:	f004 ff89 	bl	8008884 <HAL_I2C_Mem_Write_IT>
		startPage = startPage + 1;
 8003972:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003974:	3301      	adds	r3, #1
 8003976:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset = 0;
 8003978:	2300      	movs	r3, #0
 800397a:	81bb      	strh	r3, [r7, #12]
		size = size - bytesremaining;
 800397c:	88fa      	ldrh	r2, [r7, #6]
 800397e:	8abb      	ldrh	r3, [r7, #20]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	80fb      	strh	r3, [r7, #6]
		pos = pos + bytesremaining;
 8003984:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003986:	8abb      	ldrh	r3, [r7, #20]
 8003988:	4413      	add	r3, r2
 800398a:	84bb      	strh	r3, [r7, #36]	; 0x24
		HAL_Delay(5);
 800398c:	2005      	movs	r0, #5
 800398e:	f002 fc79 	bl	8006284 <HAL_Delay>
	for (uint8 i = 0; i < numofpages; i++)
 8003992:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003996:	3301      	adds	r3, #1
 8003998:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800399c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	8b3a      	ldrh	r2, [r7, #24]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d8c5      	bhi.n	8003934 <I2cExtEeprom_Read+0x4c>
	}
}
 80039a8:	bf00      	nop
 80039aa:	bf00      	nop
 80039ac:	3728      	adds	r7, #40	; 0x28
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	200003fc 	.word	0x200003fc

080039b8 <I2cExtEeprom_PageErase>:
/***********************************************************************************
* Function: I2cExtEeprom_PageErase										   		   *
* Description: Driver memory page erasing.									       *
************************************************************************************/
VOID I2cExtEeprom_PageErase(uint16 page)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b096      	sub	sp, #88	; 0x58
 80039bc:	af02      	add	r7, sp, #8
 80039be:	4603      	mov	r3, r0
 80039c0:	80fb      	strh	r3, [r7, #6]
	uint32 paddrposition = log(I2C_EXTEEPROM_PAGE_SIZE) / log(2);
 80039c2:	2306      	movs	r3, #6
 80039c4:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint16 MemAddress = page << paddrposition;
 80039c6:	88fa      	ldrh	r2, [r7, #6]
 80039c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ca:	fa02 f303 	lsl.w	r3, r2, r3
 80039ce:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	uint8 data[I2C_EXTEEPROM_PAGE_SIZE];
	memset(data, 0xff, I2C_EXTEEPROM_PAGE_SIZE);
 80039d2:	f107 0308 	add.w	r3, r7, #8
 80039d6:	2240      	movs	r2, #64	; 0x40
 80039d8:	21ff      	movs	r1, #255	; 0xff
 80039da:	4618      	mov	r0, r3
 80039dc:	f00f ff48 	bl	8013870 <memset>
	HAL_I2C_Mem_Write_IT(&hi2c3, I2C_EXTEEPROM_ADDR, MemAddress, 2, data, I2C_EXTEEPROM_PAGE_SIZE);
 80039e0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80039e4:	2340      	movs	r3, #64	; 0x40
 80039e6:	9301      	str	r3, [sp, #4]
 80039e8:	f107 0308 	add.w	r3, r7, #8
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	2302      	movs	r3, #2
 80039f0:	21a0      	movs	r1, #160	; 0xa0
 80039f2:	4805      	ldr	r0, [pc, #20]	; (8003a08 <I2cExtEeprom_PageErase+0x50>)
 80039f4:	f004 ff46 	bl	8008884 <HAL_I2C_Mem_Write_IT>
	HAL_Delay(5);
 80039f8:	2005      	movs	r0, #5
 80039fa:	f002 fc43 	bl	8006284 <HAL_Delay>
}
 80039fe:	bf00      	nop
 8003a00:	3750      	adds	r7, #80	; 0x50
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	200003fc 	.word	0x200003fc

08003a0c <HAL_I2C_MasterTxCpltCallback>:
/***********************************************************************************
* Function: HAL_I2C_MasterTxCpltCallback										   *
* Description: Handler master transmission complete.							   *
************************************************************************************/
VOID HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C1)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a05      	ldr	r2, [pc, #20]	; (8003a30 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d104      	bne.n	8003a28 <HAL_I2C_MasterTxCpltCallback+0x1c>
	{
		xTaskResumeFromISR(I2C_ISRHandle);
 8003a1e:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f00c fe7e 	bl	8010724 <xTaskResumeFromISR>
	}
	else
	{
		/* do nothing */
	}
}
 8003a28:	bf00      	nop
 8003a2a:	3708      	adds	r7, #8
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40005400 	.word	0x40005400
 8003a34:	20000350 	.word	0x20000350

08003a38 <HAL_I2C_ErrorCallback>:
/***********************************************************************************
* Function: HAL_I2C_ErrorCallback										   		   *
* Description: Handler error callback.									           *
************************************************************************************/
VOID HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4aa4      	ldr	r2, [pc, #656]	; (8003cd8 <HAL_I2C_ErrorCallback+0x2a0>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	f040 809d 	bne.w	8003b86 <HAL_I2C_ErrorCallback+0x14e>
	{
		/* Store the fault. */
		uint32 receivedValue = HAL_I2C_GetError(hi2c);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f005 fa45 	bl	8008edc <HAL_I2C_GetError>
 8003a52:	60f8      	str	r0, [r7, #12]
		/* Process the fault. */
		switch(receivedValue)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b80      	cmp	r3, #128	; 0x80
 8003a58:	f000 808c 	beq.w	8003b74 <HAL_I2C_ErrorCallback+0x13c>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2b80      	cmp	r3, #128	; 0x80
 8003a60:	f200 8090 	bhi.w	8003b84 <HAL_I2C_ErrorCallback+0x14c>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2b20      	cmp	r3, #32
 8003a68:	d848      	bhi.n	8003afc <HAL_I2C_ErrorCallback+0xc4>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2b20      	cmp	r3, #32
 8003a6e:	f200 8089 	bhi.w	8003b84 <HAL_I2C_ErrorCallback+0x14c>
 8003a72:	a201      	add	r2, pc, #4	; (adr r2, 8003a78 <HAL_I2C_ErrorCallback+0x40>)
 8003a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a78:	08003b85 	.word	0x08003b85
 8003a7c:	08003b05 	.word	0x08003b05
 8003a80:	08003b15 	.word	0x08003b15
 8003a84:	08003b85 	.word	0x08003b85
 8003a88:	08003b25 	.word	0x08003b25
 8003a8c:	08003b85 	.word	0x08003b85
 8003a90:	08003b85 	.word	0x08003b85
 8003a94:	08003b85 	.word	0x08003b85
 8003a98:	08003b35 	.word	0x08003b35
 8003a9c:	08003b85 	.word	0x08003b85
 8003aa0:	08003b85 	.word	0x08003b85
 8003aa4:	08003b85 	.word	0x08003b85
 8003aa8:	08003b85 	.word	0x08003b85
 8003aac:	08003b85 	.word	0x08003b85
 8003ab0:	08003b85 	.word	0x08003b85
 8003ab4:	08003b85 	.word	0x08003b85
 8003ab8:	08003b45 	.word	0x08003b45
 8003abc:	08003b85 	.word	0x08003b85
 8003ac0:	08003b85 	.word	0x08003b85
 8003ac4:	08003b85 	.word	0x08003b85
 8003ac8:	08003b85 	.word	0x08003b85
 8003acc:	08003b85 	.word	0x08003b85
 8003ad0:	08003b85 	.word	0x08003b85
 8003ad4:	08003b85 	.word	0x08003b85
 8003ad8:	08003b85 	.word	0x08003b85
 8003adc:	08003b85 	.word	0x08003b85
 8003ae0:	08003b85 	.word	0x08003b85
 8003ae4:	08003b85 	.word	0x08003b85
 8003ae8:	08003b85 	.word	0x08003b85
 8003aec:	08003b85 	.word	0x08003b85
 8003af0:	08003b85 	.word	0x08003b85
 8003af4:	08003b85 	.word	0x08003b85
 8003af8:	08003b55 	.word	0x08003b55
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2b40      	cmp	r3, #64	; 0x40
 8003b00:	d030      	beq.n	8003b64 <HAL_I2C_ErrorCallback+0x12c>
				break;
			case HAL_I2C_ERROR_DMA_PARAM:
				SystemManager_Fault[I2C_ERROR_DMA_PARAM_ONE]++;
				break;
			default:
				break;
 8003b02:	e03f      	b.n	8003b84 <HAL_I2C_ErrorCallback+0x14c>
				SystemManager_Fault[I2C_ERROR_BERR_ONE]++;
 8003b04:	4b75      	ldr	r3, [pc, #468]	; (8003cdc <HAL_I2C_ErrorCallback+0x2a4>)
 8003b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	4a73      	ldr	r2, [pc, #460]	; (8003cdc <HAL_I2C_ErrorCallback+0x2a4>)
 8003b0e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
				break;
 8003b12:	e038      	b.n	8003b86 <HAL_I2C_ErrorCallback+0x14e>
				SystemManager_Fault[I2C_ERROR_ARLO_ONE]++;;
 8003b14:	4b71      	ldr	r3, [pc, #452]	; (8003cdc <HAL_I2C_ErrorCallback+0x2a4>)
 8003b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	4a6f      	ldr	r2, [pc, #444]	; (8003cdc <HAL_I2C_ErrorCallback+0x2a4>)
 8003b1e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				break;
 8003b22:	e030      	b.n	8003b86 <HAL_I2C_ErrorCallback+0x14e>
				SystemManager_Fault[I2C_ERROR_AF_ONE]++;
 8003b24:	4b6d      	ldr	r3, [pc, #436]	; (8003cdc <HAL_I2C_ErrorCallback+0x2a4>)
 8003b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	4a6b      	ldr	r2, [pc, #428]	; (8003cdc <HAL_I2C_ErrorCallback+0x2a4>)
 8003b2e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
				break;
 8003b32:	e028      	b.n	8003b86 <HAL_I2C_ErrorCallback+0x14e>
				SystemManager_Fault[I2C_ERROR_OVR_ONE]++;
 8003b34:	4b69      	ldr	r3, [pc, #420]	; (8003cdc <HAL_I2C_ErrorCallback+0x2a4>)
 8003b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	4a67      	ldr	r2, [pc, #412]	; (8003cdc <HAL_I2C_ErrorCallback+0x2a4>)
 8003b3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
				break;
 8003b42:	e020      	b.n	8003b86 <HAL_I2C_ErrorCallback+0x14e>
				SystemManager_Fault[I2C_ERROR_DMA_ONE]++;
 8003b44:	4b65      	ldr	r3, [pc, #404]	; (8003cdc <HAL_I2C_ErrorCallback+0x2a4>)
 8003b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	4a63      	ldr	r2, [pc, #396]	; (8003cdc <HAL_I2C_ErrorCallback+0x2a4>)
 8003b4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
				break;
 8003b52:	e018      	b.n	8003b86 <HAL_I2C_ErrorCallback+0x14e>
				SystemManager_Fault[I2C_ERROR_TIMEOUT_ONE]++;
 8003b54:	4b61      	ldr	r3, [pc, #388]	; (8003cdc <HAL_I2C_ErrorCallback+0x2a4>)
 8003b56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	4a5f      	ldr	r2, [pc, #380]	; (8003cdc <HAL_I2C_ErrorCallback+0x2a4>)
 8003b5e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
				break;
 8003b62:	e010      	b.n	8003b86 <HAL_I2C_ErrorCallback+0x14e>
				SystemManager_Fault[I2C_ERROR_SIZE_ONE]++;
 8003b64:	4b5d      	ldr	r3, [pc, #372]	; (8003cdc <HAL_I2C_ErrorCallback+0x2a4>)
 8003b66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	4a5b      	ldr	r2, [pc, #364]	; (8003cdc <HAL_I2C_ErrorCallback+0x2a4>)
 8003b6e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
				break;
 8003b72:	e008      	b.n	8003b86 <HAL_I2C_ErrorCallback+0x14e>
				SystemManager_Fault[I2C_ERROR_DMA_PARAM_ONE]++;
 8003b74:	4b59      	ldr	r3, [pc, #356]	; (8003cdc <HAL_I2C_ErrorCallback+0x2a4>)
 8003b76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	4a57      	ldr	r2, [pc, #348]	; (8003cdc <HAL_I2C_ErrorCallback+0x2a4>)
 8003b7e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
				break;
 8003b82:	e000      	b.n	8003b86 <HAL_I2C_ErrorCallback+0x14e>
				break;
 8003b84:	bf00      	nop
	else
	{
		/* do nothing */
	}

	if(hi2c->Instance == I2C3)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a55      	ldr	r2, [pc, #340]	; (8003ce0 <HAL_I2C_ErrorCallback+0x2a8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	f040 809e 	bne.w	8003cce <HAL_I2C_ErrorCallback+0x296>
	{
		/* Store the fault. */
		uint32 receivedValue = HAL_I2C_GetError(hi2c);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f005 f9a2 	bl	8008edc <HAL_I2C_GetError>
 8003b98:	60b8      	str	r0, [r7, #8]
		/* Process the fault. */
		switch(receivedValue)
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	2b80      	cmp	r3, #128	; 0x80
 8003b9e:	f000 808d 	beq.w	8003cbc <HAL_I2C_ErrorCallback+0x284>
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2b80      	cmp	r3, #128	; 0x80
 8003ba6:	f200 8091 	bhi.w	8003ccc <HAL_I2C_ErrorCallback+0x294>
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2b20      	cmp	r3, #32
 8003bae:	d849      	bhi.n	8003c44 <HAL_I2C_ErrorCallback+0x20c>
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b20      	cmp	r3, #32
 8003bb4:	f200 808a 	bhi.w	8003ccc <HAL_I2C_ErrorCallback+0x294>
 8003bb8:	a201      	add	r2, pc, #4	; (adr r2, 8003bc0 <HAL_I2C_ErrorCallback+0x188>)
 8003bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bbe:	bf00      	nop
 8003bc0:	08003ccd 	.word	0x08003ccd
 8003bc4:	08003c4d 	.word	0x08003c4d
 8003bc8:	08003c5d 	.word	0x08003c5d
 8003bcc:	08003ccd 	.word	0x08003ccd
 8003bd0:	08003c6d 	.word	0x08003c6d
 8003bd4:	08003ccd 	.word	0x08003ccd
 8003bd8:	08003ccd 	.word	0x08003ccd
 8003bdc:	08003ccd 	.word	0x08003ccd
 8003be0:	08003c7d 	.word	0x08003c7d
 8003be4:	08003ccd 	.word	0x08003ccd
 8003be8:	08003ccd 	.word	0x08003ccd
 8003bec:	08003ccd 	.word	0x08003ccd
 8003bf0:	08003ccd 	.word	0x08003ccd
 8003bf4:	08003ccd 	.word	0x08003ccd
 8003bf8:	08003ccd 	.word	0x08003ccd
 8003bfc:	08003ccd 	.word	0x08003ccd
 8003c00:	08003c8d 	.word	0x08003c8d
 8003c04:	08003ccd 	.word	0x08003ccd
 8003c08:	08003ccd 	.word	0x08003ccd
 8003c0c:	08003ccd 	.word	0x08003ccd
 8003c10:	08003ccd 	.word	0x08003ccd
 8003c14:	08003ccd 	.word	0x08003ccd
 8003c18:	08003ccd 	.word	0x08003ccd
 8003c1c:	08003ccd 	.word	0x08003ccd
 8003c20:	08003ccd 	.word	0x08003ccd
 8003c24:	08003ccd 	.word	0x08003ccd
 8003c28:	08003ccd 	.word	0x08003ccd
 8003c2c:	08003ccd 	.word	0x08003ccd
 8003c30:	08003ccd 	.word	0x08003ccd
 8003c34:	08003ccd 	.word	0x08003ccd
 8003c38:	08003ccd 	.word	0x08003ccd
 8003c3c:	08003ccd 	.word	0x08003ccd
 8003c40:	08003c9d 	.word	0x08003c9d
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	2b40      	cmp	r3, #64	; 0x40
 8003c48:	d030      	beq.n	8003cac <HAL_I2C_ErrorCallback+0x274>
				break;
			case HAL_I2C_ERROR_DMA_PARAM:
				SystemManager_Fault[I2C_ERROR_DMA_PARAM_THREE]++;
				break;
			default:
				break;
 8003c4a:	e03f      	b.n	8003ccc <HAL_I2C_ErrorCallback+0x294>
				SystemManager_Fault[I2C_ERROR_BERR_THREE]++;
 8003c4c:	4b23      	ldr	r3, [pc, #140]	; (8003cdc <HAL_I2C_ErrorCallback+0x2a4>)
 8003c4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c52:	3301      	adds	r3, #1
 8003c54:	4a21      	ldr	r2, [pc, #132]	; (8003cdc <HAL_I2C_ErrorCallback+0x2a4>)
 8003c56:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
				break;
 8003c5a:	e038      	b.n	8003cce <HAL_I2C_ErrorCallback+0x296>
				SystemManager_Fault[I2C_ERROR_ARLO_THREE]++;
 8003c5c:	4b1f      	ldr	r3, [pc, #124]	; (8003cdc <HAL_I2C_ErrorCallback+0x2a4>)
 8003c5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003c62:	3301      	adds	r3, #1
 8003c64:	4a1d      	ldr	r2, [pc, #116]	; (8003cdc <HAL_I2C_ErrorCallback+0x2a4>)
 8003c66:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
				break;
 8003c6a:	e030      	b.n	8003cce <HAL_I2C_ErrorCallback+0x296>
				SystemManager_Fault[I2C_ERROR_AF_THREE]++;
 8003c6c:	4b1b      	ldr	r3, [pc, #108]	; (8003cdc <HAL_I2C_ErrorCallback+0x2a4>)
 8003c6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c72:	3301      	adds	r3, #1
 8003c74:	4a19      	ldr	r2, [pc, #100]	; (8003cdc <HAL_I2C_ErrorCallback+0x2a4>)
 8003c76:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
				break;
 8003c7a:	e028      	b.n	8003cce <HAL_I2C_ErrorCallback+0x296>
				SystemManager_Fault[I2C_ERROR_OVR_THREE]++;
 8003c7c:	4b17      	ldr	r3, [pc, #92]	; (8003cdc <HAL_I2C_ErrorCallback+0x2a4>)
 8003c7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c82:	3301      	adds	r3, #1
 8003c84:	4a15      	ldr	r2, [pc, #84]	; (8003cdc <HAL_I2C_ErrorCallback+0x2a4>)
 8003c86:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
				break;
 8003c8a:	e020      	b.n	8003cce <HAL_I2C_ErrorCallback+0x296>
				SystemManager_Fault[I2C_ERROR_DMA_THREE]++;
 8003c8c:	4b13      	ldr	r3, [pc, #76]	; (8003cdc <HAL_I2C_ErrorCallback+0x2a4>)
 8003c8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c92:	3301      	adds	r3, #1
 8003c94:	4a11      	ldr	r2, [pc, #68]	; (8003cdc <HAL_I2C_ErrorCallback+0x2a4>)
 8003c96:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
				break;
 8003c9a:	e018      	b.n	8003cce <HAL_I2C_ErrorCallback+0x296>
				SystemManager_Fault[I2C_ERROR_TIMEOUT_THREE]++;
 8003c9c:	4b0f      	ldr	r3, [pc, #60]	; (8003cdc <HAL_I2C_ErrorCallback+0x2a4>)
 8003c9e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	4a0d      	ldr	r2, [pc, #52]	; (8003cdc <HAL_I2C_ErrorCallback+0x2a4>)
 8003ca6:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
				break;
 8003caa:	e010      	b.n	8003cce <HAL_I2C_ErrorCallback+0x296>
				SystemManager_Fault[I2C_ERROR_SIZE_THREE]++;
 8003cac:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <HAL_I2C_ErrorCallback+0x2a4>)
 8003cae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	4a09      	ldr	r2, [pc, #36]	; (8003cdc <HAL_I2C_ErrorCallback+0x2a4>)
 8003cb6:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
				break;
 8003cba:	e008      	b.n	8003cce <HAL_I2C_ErrorCallback+0x296>
				SystemManager_Fault[I2C_ERROR_DMA_PARAM_THREE]++;
 8003cbc:	4b07      	ldr	r3, [pc, #28]	; (8003cdc <HAL_I2C_ErrorCallback+0x2a4>)
 8003cbe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	4a05      	ldr	r2, [pc, #20]	; (8003cdc <HAL_I2C_ErrorCallback+0x2a4>)
 8003cc6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
				break;
 8003cca:	e000      	b.n	8003cce <HAL_I2C_ErrorCallback+0x296>
				break;
 8003ccc:	bf00      	nop
	}
	else
	{
		/* do nothing */
	}
}
 8003cce:	bf00      	nop
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40005400 	.word	0x40005400
 8003cdc:	20009420 	.word	0x20009420
 8003ce0:	40005c00 	.word	0x40005c00

08003ce4 <I2c_Init>:
/***********************************************************************************
* Function: I2c_Init										   			           *
* Description: Handler initialization.									           *
************************************************************************************/
StdReturnType I2c_Init(uint8 I2c_Channel)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	4603      	mov	r3, r0
 8003cec:	71fb      	strb	r3, [r7, #7]
	/* Initialize the protocol on the respective channel. */
	if(I2c_Channel == I2C_CHANNEL_ONE)
 8003cee:	79fb      	ldrb	r3, [r7, #7]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d125      	bne.n	8003d40 <I2c_Init+0x5c>
	{
		hi2c1.Instance = I2C1;
 8003cf4:	4b29      	ldr	r3, [pc, #164]	; (8003d9c <I2c_Init+0xb8>)
 8003cf6:	4a2a      	ldr	r2, [pc, #168]	; (8003da0 <I2c_Init+0xbc>)
 8003cf8:	601a      	str	r2, [r3, #0]
		hi2c1.Init.ClockSpeed = 100000;
 8003cfa:	4b28      	ldr	r3, [pc, #160]	; (8003d9c <I2c_Init+0xb8>)
 8003cfc:	4a29      	ldr	r2, [pc, #164]	; (8003da4 <I2c_Init+0xc0>)
 8003cfe:	605a      	str	r2, [r3, #4]
		hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003d00:	4b26      	ldr	r3, [pc, #152]	; (8003d9c <I2c_Init+0xb8>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	609a      	str	r2, [r3, #8]
		hi2c1.Init.OwnAddress1 = 0;
 8003d06:	4b25      	ldr	r3, [pc, #148]	; (8003d9c <I2c_Init+0xb8>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	60da      	str	r2, [r3, #12]
		hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d0c:	4b23      	ldr	r3, [pc, #140]	; (8003d9c <I2c_Init+0xb8>)
 8003d0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d12:	611a      	str	r2, [r3, #16]
		hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003d14:	4b21      	ldr	r3, [pc, #132]	; (8003d9c <I2c_Init+0xb8>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	615a      	str	r2, [r3, #20]
		hi2c1.Init.OwnAddress2 = 0;
 8003d1a:	4b20      	ldr	r3, [pc, #128]	; (8003d9c <I2c_Init+0xb8>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	619a      	str	r2, [r3, #24]
		hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d20:	4b1e      	ldr	r3, [pc, #120]	; (8003d9c <I2c_Init+0xb8>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	61da      	str	r2, [r3, #28]
		hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d26:	4b1d      	ldr	r3, [pc, #116]	; (8003d9c <I2c_Init+0xb8>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	621a      	str	r2, [r3, #32]
		if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003d2c:	481b      	ldr	r0, [pc, #108]	; (8003d9c <I2c_Init+0xb8>)
 8003d2e:	f004 fb47 	bl	80083c0 <HAL_I2C_Init>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d02b      	beq.n	8003d90 <I2c_Init+0xac>
		{
			HAL_I2C_ErrorCallback(&hi2c1);
 8003d38:	4818      	ldr	r0, [pc, #96]	; (8003d9c <I2c_Init+0xb8>)
 8003d3a:	f7ff fe7d 	bl	8003a38 <HAL_I2C_ErrorCallback>
 8003d3e:	e027      	b.n	8003d90 <I2c_Init+0xac>
		else
		{
			/* do nothing */
		}
	}
	else if(I2c_Channel == I2C_CHANNEL_THREE)
 8003d40:	79fb      	ldrb	r3, [r7, #7]
 8003d42:	2b03      	cmp	r3, #3
 8003d44:	d124      	bne.n	8003d90 <I2c_Init+0xac>
	{
		hi2c3.Instance = I2C3;
 8003d46:	4b18      	ldr	r3, [pc, #96]	; (8003da8 <I2c_Init+0xc4>)
 8003d48:	4a18      	ldr	r2, [pc, #96]	; (8003dac <I2c_Init+0xc8>)
 8003d4a:	601a      	str	r2, [r3, #0]
		hi2c3.Init.ClockSpeed = 400000;
 8003d4c:	4b16      	ldr	r3, [pc, #88]	; (8003da8 <I2c_Init+0xc4>)
 8003d4e:	4a18      	ldr	r2, [pc, #96]	; (8003db0 <I2c_Init+0xcc>)
 8003d50:	605a      	str	r2, [r3, #4]
		hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003d52:	4b15      	ldr	r3, [pc, #84]	; (8003da8 <I2c_Init+0xc4>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	609a      	str	r2, [r3, #8]
		hi2c3.Init.OwnAddress1 = 0;
 8003d58:	4b13      	ldr	r3, [pc, #76]	; (8003da8 <I2c_Init+0xc4>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	60da      	str	r2, [r3, #12]
		hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d5e:	4b12      	ldr	r3, [pc, #72]	; (8003da8 <I2c_Init+0xc4>)
 8003d60:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d64:	611a      	str	r2, [r3, #16]
		hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003d66:	4b10      	ldr	r3, [pc, #64]	; (8003da8 <I2c_Init+0xc4>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	615a      	str	r2, [r3, #20]
		hi2c3.Init.OwnAddress2 = 0;
 8003d6c:	4b0e      	ldr	r3, [pc, #56]	; (8003da8 <I2c_Init+0xc4>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	619a      	str	r2, [r3, #24]
		hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d72:	4b0d      	ldr	r3, [pc, #52]	; (8003da8 <I2c_Init+0xc4>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	61da      	str	r2, [r3, #28]
		hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d78:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <I2c_Init+0xc4>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	621a      	str	r2, [r3, #32]
		if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003d7e:	480a      	ldr	r0, [pc, #40]	; (8003da8 <I2c_Init+0xc4>)
 8003d80:	f004 fb1e 	bl	80083c0 <HAL_I2C_Init>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d002      	beq.n	8003d90 <I2c_Init+0xac>
		{
			HAL_I2C_ErrorCallback(&hi2c3);
 8003d8a:	4807      	ldr	r0, [pc, #28]	; (8003da8 <I2c_Init+0xc4>)
 8003d8c:	f7ff fe54 	bl	8003a38 <HAL_I2C_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	return E_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	20000378 	.word	0x20000378
 8003da0:	40005400 	.word	0x40005400
 8003da4:	000186a0 	.word	0x000186a0
 8003da8:	200003fc 	.word	0x200003fc
 8003dac:	40005c00 	.word	0x40005c00
 8003db0:	00061a80 	.word	0x00061a80

08003db4 <I2c_DeInit>:
/***********************************************************************************
* Function: I2c_DeInit										   			           *
* Description: Handler de-initialization.									       *
************************************************************************************/
StdReturnType I2c_DeInit(uint8 I2c_Channel)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	4603      	mov	r3, r0
 8003dbc:	71fb      	strb	r3, [r7, #7]
	/* De-initialize the protocol on the respective channel. */
	if(I2c_Channel == I2C_CHANNEL_ONE)
 8003dbe:	79fb      	ldrb	r3, [r7, #7]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d103      	bne.n	8003dcc <I2c_DeInit+0x18>
	{
		HAL_I2C_DeInit(&hi2c1);
 8003dc4:	4807      	ldr	r0, [pc, #28]	; (8003de4 <I2c_DeInit+0x30>)
 8003dc6:	f004 fc7b 	bl	80086c0 <HAL_I2C_DeInit>
 8003dca:	e005      	b.n	8003dd8 <I2c_DeInit+0x24>
	}
	else if(I2c_Channel == I2C_CHANNEL_THREE)
 8003dcc:	79fb      	ldrb	r3, [r7, #7]
 8003dce:	2b03      	cmp	r3, #3
 8003dd0:	d102      	bne.n	8003dd8 <I2c_DeInit+0x24>
	{
		HAL_I2C_DeInit(&hi2c3);
 8003dd2:	4805      	ldr	r0, [pc, #20]	; (8003de8 <I2c_DeInit+0x34>)
 8003dd4:	f004 fc74 	bl	80086c0 <HAL_I2C_DeInit>
	}
	else
	{
		/* do nothing */
	}
	return E_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20000378 	.word	0x20000378
 8003de8:	200003fc 	.word	0x200003fc

08003dec <I2c_MainFunction>:
/***********************************************************************************
* Function: I2c_MainFunction										   			   *
* Description: Handler main function.									           *
************************************************************************************/
VOID I2c_MainFunction()
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
	uint32 localStatusOne = HAL_I2C_GetState(&hi2c1);
 8003df2:	488a      	ldr	r0, [pc, #552]	; (800401c <I2c_MainFunction+0x230>)
 8003df4:	f005 f864 	bl	8008ec0 <HAL_I2C_GetState>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	607b      	str	r3, [r7, #4]
	uint32 localStatusThree = HAL_I2C_GetState(&hi2c3);
 8003dfc:	4888      	ldr	r0, [pc, #544]	; (8004020 <I2c_MainFunction+0x234>)
 8003dfe:	f005 f85f 	bl	8008ec0 <HAL_I2C_GetState>
 8003e02:	4603      	mov	r3, r0
 8003e04:	603b      	str	r3, [r7, #0]
	/* Process channel one. */
	switch(localStatusOne)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2be0      	cmp	r3, #224	; 0xe0
 8003e0a:	d077      	beq.n	8003efc <I2c_MainFunction+0x110>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2be0      	cmp	r3, #224	; 0xe0
 8003e10:	d87b      	bhi.n	8003f0a <I2c_MainFunction+0x11e>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b24      	cmp	r3, #36	; 0x24
 8003e16:	d84f      	bhi.n	8003eb8 <I2c_MainFunction+0xcc>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b24      	cmp	r3, #36	; 0x24
 8003e1c:	d875      	bhi.n	8003f0a <I2c_MainFunction+0x11e>
 8003e1e:	a201      	add	r2, pc, #4	; (adr r2, 8003e24 <I2c_MainFunction+0x38>)
 8003e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e24:	08003ec1 	.word	0x08003ec1
 8003e28:	08003f0b 	.word	0x08003f0b
 8003e2c:	08003f0b 	.word	0x08003f0b
 8003e30:	08003f0b 	.word	0x08003f0b
 8003e34:	08003f0b 	.word	0x08003f0b
 8003e38:	08003f0b 	.word	0x08003f0b
 8003e3c:	08003f0b 	.word	0x08003f0b
 8003e40:	08003f0b 	.word	0x08003f0b
 8003e44:	08003f0b 	.word	0x08003f0b
 8003e48:	08003f0b 	.word	0x08003f0b
 8003e4c:	08003f0b 	.word	0x08003f0b
 8003e50:	08003f0b 	.word	0x08003f0b
 8003e54:	08003f0b 	.word	0x08003f0b
 8003e58:	08003f0b 	.word	0x08003f0b
 8003e5c:	08003f0b 	.word	0x08003f0b
 8003e60:	08003f0b 	.word	0x08003f0b
 8003e64:	08003f0b 	.word	0x08003f0b
 8003e68:	08003f0b 	.word	0x08003f0b
 8003e6c:	08003f0b 	.word	0x08003f0b
 8003e70:	08003f0b 	.word	0x08003f0b
 8003e74:	08003f0b 	.word	0x08003f0b
 8003e78:	08003f0b 	.word	0x08003f0b
 8003e7c:	08003f0b 	.word	0x08003f0b
 8003e80:	08003f0b 	.word	0x08003f0b
 8003e84:	08003f0b 	.word	0x08003f0b
 8003e88:	08003f0b 	.word	0x08003f0b
 8003e8c:	08003f0b 	.word	0x08003f0b
 8003e90:	08003f0b 	.word	0x08003f0b
 8003e94:	08003f0b 	.word	0x08003f0b
 8003e98:	08003f0b 	.word	0x08003f0b
 8003e9c:	08003f0b 	.word	0x08003f0b
 8003ea0:	08003f0b 	.word	0x08003f0b
 8003ea4:	08003ecf 	.word	0x08003ecf
 8003ea8:	08003edf 	.word	0x08003edf
 8003eac:	08003ee7 	.word	0x08003ee7
 8003eb0:	08003f0b 	.word	0x08003f0b
 8003eb4:	08003ed7 	.word	0x08003ed7
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2ba0      	cmp	r3, #160	; 0xa0
 8003ebc:	d017      	beq.n	8003eee <I2c_MainFunction+0x102>
		case HAL_I2C_STATE_ERROR:
			I2c_BswState_ChannelOne = localStatusOne;
			HAL_I2C_ErrorCallback(&hi2c1);
			break;
		default:
			break;
 8003ebe:	e024      	b.n	8003f0a <I2c_MainFunction+0x11e>
			I2c_BswState_ChannelOne = localStatusOne;
 8003ec0:	4a58      	ldr	r2, [pc, #352]	; (8004024 <I2c_MainFunction+0x238>)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6013      	str	r3, [r2, #0]
			I2c_Init(I2C_CHANNEL_ONE);
 8003ec6:	2001      	movs	r0, #1
 8003ec8:	f7ff ff0c 	bl	8003ce4 <I2c_Init>
			break;
 8003ecc:	e01e      	b.n	8003f0c <I2c_MainFunction+0x120>
			I2c_BswState_ChannelOne = localStatusOne;
 8003ece:	4a55      	ldr	r2, [pc, #340]	; (8004024 <I2c_MainFunction+0x238>)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6013      	str	r3, [r2, #0]
			break;
 8003ed4:	e01a      	b.n	8003f0c <I2c_MainFunction+0x120>
			I2c_BswState_ChannelOne = localStatusOne;
 8003ed6:	4a53      	ldr	r2, [pc, #332]	; (8004024 <I2c_MainFunction+0x238>)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6013      	str	r3, [r2, #0]
			break;
 8003edc:	e016      	b.n	8003f0c <I2c_MainFunction+0x120>
			I2c_BswState_ChannelOne = localStatusOne;
 8003ede:	4a51      	ldr	r2, [pc, #324]	; (8004024 <I2c_MainFunction+0x238>)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6013      	str	r3, [r2, #0]
			break;
 8003ee4:	e012      	b.n	8003f0c <I2c_MainFunction+0x120>
			I2c_BswState_ChannelOne = localStatusOne;
 8003ee6:	4a4f      	ldr	r2, [pc, #316]	; (8004024 <I2c_MainFunction+0x238>)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6013      	str	r3, [r2, #0]
			break;
 8003eec:	e00e      	b.n	8003f0c <I2c_MainFunction+0x120>
			I2c_BswState_ChannelOne = localStatusOne;
 8003eee:	4a4d      	ldr	r2, [pc, #308]	; (8004024 <I2c_MainFunction+0x238>)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6013      	str	r3, [r2, #0]
			HAL_I2C_ErrorCallback(&hi2c1);
 8003ef4:	4849      	ldr	r0, [pc, #292]	; (800401c <I2c_MainFunction+0x230>)
 8003ef6:	f7ff fd9f 	bl	8003a38 <HAL_I2C_ErrorCallback>
			break;
 8003efa:	e007      	b.n	8003f0c <I2c_MainFunction+0x120>
			I2c_BswState_ChannelOne = localStatusOne;
 8003efc:	4a49      	ldr	r2, [pc, #292]	; (8004024 <I2c_MainFunction+0x238>)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6013      	str	r3, [r2, #0]
			HAL_I2C_ErrorCallback(&hi2c1);
 8003f02:	4846      	ldr	r0, [pc, #280]	; (800401c <I2c_MainFunction+0x230>)
 8003f04:	f7ff fd98 	bl	8003a38 <HAL_I2C_ErrorCallback>
			break;
 8003f08:	e000      	b.n	8003f0c <I2c_MainFunction+0x120>
			break;
 8003f0a:	bf00      	nop
	}
	/* Process channel two. */
	switch(localStatusThree)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	2be0      	cmp	r3, #224	; 0xe0
 8003f10:	d078      	beq.n	8004004 <I2c_MainFunction+0x218>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	2be0      	cmp	r3, #224	; 0xe0
 8003f16:	d87c      	bhi.n	8004012 <I2c_MainFunction+0x226>
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	2b24      	cmp	r3, #36	; 0x24
 8003f1c:	d850      	bhi.n	8003fc0 <I2c_MainFunction+0x1d4>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b24      	cmp	r3, #36	; 0x24
 8003f22:	d876      	bhi.n	8004012 <I2c_MainFunction+0x226>
 8003f24:	a201      	add	r2, pc, #4	; (adr r2, 8003f2c <I2c_MainFunction+0x140>)
 8003f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2a:	bf00      	nop
 8003f2c:	08003fc9 	.word	0x08003fc9
 8003f30:	08004013 	.word	0x08004013
 8003f34:	08004013 	.word	0x08004013
 8003f38:	08004013 	.word	0x08004013
 8003f3c:	08004013 	.word	0x08004013
 8003f40:	08004013 	.word	0x08004013
 8003f44:	08004013 	.word	0x08004013
 8003f48:	08004013 	.word	0x08004013
 8003f4c:	08004013 	.word	0x08004013
 8003f50:	08004013 	.word	0x08004013
 8003f54:	08004013 	.word	0x08004013
 8003f58:	08004013 	.word	0x08004013
 8003f5c:	08004013 	.word	0x08004013
 8003f60:	08004013 	.word	0x08004013
 8003f64:	08004013 	.word	0x08004013
 8003f68:	08004013 	.word	0x08004013
 8003f6c:	08004013 	.word	0x08004013
 8003f70:	08004013 	.word	0x08004013
 8003f74:	08004013 	.word	0x08004013
 8003f78:	08004013 	.word	0x08004013
 8003f7c:	08004013 	.word	0x08004013
 8003f80:	08004013 	.word	0x08004013
 8003f84:	08004013 	.word	0x08004013
 8003f88:	08004013 	.word	0x08004013
 8003f8c:	08004013 	.word	0x08004013
 8003f90:	08004013 	.word	0x08004013
 8003f94:	08004013 	.word	0x08004013
 8003f98:	08004013 	.word	0x08004013
 8003f9c:	08004013 	.word	0x08004013
 8003fa0:	08004013 	.word	0x08004013
 8003fa4:	08004013 	.word	0x08004013
 8003fa8:	08004013 	.word	0x08004013
 8003fac:	08003fd7 	.word	0x08003fd7
 8003fb0:	08003fe7 	.word	0x08003fe7
 8003fb4:	08003fef 	.word	0x08003fef
 8003fb8:	08004013 	.word	0x08004013
 8003fbc:	08003fdf 	.word	0x08003fdf
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	2ba0      	cmp	r3, #160	; 0xa0
 8003fc4:	d017      	beq.n	8003ff6 <I2c_MainFunction+0x20a>
		case HAL_I2C_STATE_ERROR:
			I2c_BswState_ChannelThree = localStatusThree;
			HAL_I2C_ErrorCallback(&hi2c3);
			break;
		default:
			break;
 8003fc6:	e024      	b.n	8004012 <I2c_MainFunction+0x226>
			I2c_BswState_ChannelThree = localStatusThree;
 8003fc8:	4a17      	ldr	r2, [pc, #92]	; (8004028 <I2c_MainFunction+0x23c>)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	6013      	str	r3, [r2, #0]
			I2c_Init(I2C_CHANNEL_THREE);
 8003fce:	2003      	movs	r0, #3
 8003fd0:	f7ff fe88 	bl	8003ce4 <I2c_Init>
			break;
 8003fd4:	e01e      	b.n	8004014 <I2c_MainFunction+0x228>
			I2c_BswState_ChannelThree = localStatusThree;
 8003fd6:	4a14      	ldr	r2, [pc, #80]	; (8004028 <I2c_MainFunction+0x23c>)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	6013      	str	r3, [r2, #0]
			break;
 8003fdc:	e01a      	b.n	8004014 <I2c_MainFunction+0x228>
			I2c_BswState_ChannelThree = localStatusThree;
 8003fde:	4a12      	ldr	r2, [pc, #72]	; (8004028 <I2c_MainFunction+0x23c>)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	6013      	str	r3, [r2, #0]
			break;
 8003fe4:	e016      	b.n	8004014 <I2c_MainFunction+0x228>
			I2c_BswState_ChannelThree = localStatusThree;
 8003fe6:	4a10      	ldr	r2, [pc, #64]	; (8004028 <I2c_MainFunction+0x23c>)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	6013      	str	r3, [r2, #0]
			break;
 8003fec:	e012      	b.n	8004014 <I2c_MainFunction+0x228>
			I2c_BswState_ChannelThree = localStatusThree;
 8003fee:	4a0e      	ldr	r2, [pc, #56]	; (8004028 <I2c_MainFunction+0x23c>)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	6013      	str	r3, [r2, #0]
			break;
 8003ff4:	e00e      	b.n	8004014 <I2c_MainFunction+0x228>
			I2c_BswState_ChannelThree = localStatusThree;
 8003ff6:	4a0c      	ldr	r2, [pc, #48]	; (8004028 <I2c_MainFunction+0x23c>)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	6013      	str	r3, [r2, #0]
			HAL_I2C_ErrorCallback(&hi2c3);
 8003ffc:	4808      	ldr	r0, [pc, #32]	; (8004020 <I2c_MainFunction+0x234>)
 8003ffe:	f7ff fd1b 	bl	8003a38 <HAL_I2C_ErrorCallback>
			break;
 8004002:	e007      	b.n	8004014 <I2c_MainFunction+0x228>
			I2c_BswState_ChannelThree = localStatusThree;
 8004004:	4a08      	ldr	r2, [pc, #32]	; (8004028 <I2c_MainFunction+0x23c>)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	6013      	str	r3, [r2, #0]
			HAL_I2C_ErrorCallback(&hi2c3);
 800400a:	4805      	ldr	r0, [pc, #20]	; (8004020 <I2c_MainFunction+0x234>)
 800400c:	f7ff fd14 	bl	8003a38 <HAL_I2C_ErrorCallback>
			break;
 8004010:	e000      	b.n	8004014 <I2c_MainFunction+0x228>
			break;
 8004012:	bf00      	nop
	}
}
 8004014:	bf00      	nop
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	20000378 	.word	0x20000378
 8004020:	200003fc 	.word	0x200003fc
 8004024:	200001f4 	.word	0x200001f4
 8004028:	200001f8 	.word	0x200001f8

0800402c <I2cLcd_Init>:
/***********************************************************************************
* Function: I2cLcd_Init										   			           *
* Description: Driver initialization.									           *
************************************************************************************/
StdReturnType I2cLcd_Init()
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
	if(Rte_P_Btc_BtcPort_Btc_ReceivedDataOnBluetooth == 92)
 8004032:	4b58      	ldr	r3, [pc, #352]	; (8004194 <I2cLcd_Init+0x168>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	2b5c      	cmp	r3, #92	; 0x5c
 8004038:	d123      	bne.n	8004082 <I2cLcd_Init+0x56>
	{
		uint8 local = 93;
 800403a:	235d      	movs	r3, #93	; 0x5d
 800403c:	71fb      	strb	r3, [r7, #7]
		Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(&local);
 800403e:	1dfb      	adds	r3, r7, #7
 8004040:	4618      	mov	r0, r3
 8004042:	f00e f8ed 	bl	8012220 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>
		init1 = STD_LOW;
 8004046:	4b54      	ldr	r3, [pc, #336]	; (8004198 <I2cLcd_Init+0x16c>)
 8004048:	2200      	movs	r2, #0
 800404a:	701a      	strb	r2, [r3, #0]
		init2 = STD_LOW;
 800404c:	4b53      	ldr	r3, [pc, #332]	; (800419c <I2cLcd_Init+0x170>)
 800404e:	2200      	movs	r2, #0
 8004050:	701a      	strb	r2, [r3, #0]
		init3 = STD_LOW;
 8004052:	4b53      	ldr	r3, [pc, #332]	; (80041a0 <I2cLcd_Init+0x174>)
 8004054:	2200      	movs	r2, #0
 8004056:	701a      	strb	r2, [r3, #0]
		init4 = STD_LOW;
 8004058:	4b52      	ldr	r3, [pc, #328]	; (80041a4 <I2cLcd_Init+0x178>)
 800405a:	2200      	movs	r2, #0
 800405c:	701a      	strb	r2, [r3, #0]
		init5 = STD_LOW;
 800405e:	4b52      	ldr	r3, [pc, #328]	; (80041a8 <I2cLcd_Init+0x17c>)
 8004060:	2200      	movs	r2, #0
 8004062:	701a      	strb	r2, [r3, #0]
		init6 = STD_LOW;
 8004064:	4b51      	ldr	r3, [pc, #324]	; (80041ac <I2cLcd_Init+0x180>)
 8004066:	2200      	movs	r2, #0
 8004068:	701a      	strb	r2, [r3, #0]
		init7 = STD_LOW;
 800406a:	4b51      	ldr	r3, [pc, #324]	; (80041b0 <I2cLcd_Init+0x184>)
 800406c:	2200      	movs	r2, #0
 800406e:	701a      	strb	r2, [r3, #0]
		init8 = STD_LOW;
 8004070:	4b50      	ldr	r3, [pc, #320]	; (80041b4 <I2cLcd_Init+0x188>)
 8004072:	2200      	movs	r2, #0
 8004074:	701a      	strb	r2, [r3, #0]
		init9 = STD_LOW;
 8004076:	4b50      	ldr	r3, [pc, #320]	; (80041b8 <I2cLcd_Init+0x18c>)
 8004078:	2200      	movs	r2, #0
 800407a:	701a      	strb	r2, [r3, #0]
		I2c_Lcd_Init_Flag = STD_LOW;
 800407c:	4b4f      	ldr	r3, [pc, #316]	; (80041bc <I2cLcd_Init+0x190>)
 800407e:	2200      	movs	r2, #0
 8004080:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	if(init1 == STD_LOW)
 8004082:	4b45      	ldr	r3, [pc, #276]	; (8004198 <I2cLcd_Init+0x16c>)
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d105      	bne.n	8004096 <I2cLcd_Init+0x6a>
	{
		init1 = STD_HIGH;
 800408a:	4b43      	ldr	r3, [pc, #268]	; (8004198 <I2cLcd_Init+0x16c>)
 800408c:	2201      	movs	r2, #1
 800408e:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x30);
 8004090:	2030      	movs	r0, #48	; 0x30
 8004092:	f000 f895 	bl	80041c0 <I2cLcd_SendCommand>
	}
	else
	{
		/* do nothing */
	}
	if(init2 == STD_LOW)
 8004096:	4b41      	ldr	r3, [pc, #260]	; (800419c <I2cLcd_Init+0x170>)
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d105      	bne.n	80040aa <I2cLcd_Init+0x7e>
	{
		init2 = STD_HIGH;
 800409e:	4b3f      	ldr	r3, [pc, #252]	; (800419c <I2cLcd_Init+0x170>)
 80040a0:	2201      	movs	r2, #1
 80040a2:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x30);
 80040a4:	2030      	movs	r0, #48	; 0x30
 80040a6:	f000 f88b 	bl	80041c0 <I2cLcd_SendCommand>
	}
	else
	{
		/* do nothing */
	}
	if(init3 == STD_LOW)
 80040aa:	4b3d      	ldr	r3, [pc, #244]	; (80041a0 <I2cLcd_Init+0x174>)
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d105      	bne.n	80040be <I2cLcd_Init+0x92>
	{
		init3 = STD_HIGH;
 80040b2:	4b3b      	ldr	r3, [pc, #236]	; (80041a0 <I2cLcd_Init+0x174>)
 80040b4:	2201      	movs	r2, #1
 80040b6:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x30);
 80040b8:	2030      	movs	r0, #48	; 0x30
 80040ba:	f000 f881 	bl	80041c0 <I2cLcd_SendCommand>
	}
	else
	{
		/* do nothing */
	}
	if(init4 == STD_LOW)
 80040be:	4b39      	ldr	r3, [pc, #228]	; (80041a4 <I2cLcd_Init+0x178>)
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d105      	bne.n	80040d2 <I2cLcd_Init+0xa6>
	{
		init4 = STD_HIGH;
 80040c6:	4b37      	ldr	r3, [pc, #220]	; (80041a4 <I2cLcd_Init+0x178>)
 80040c8:	2201      	movs	r2, #1
 80040ca:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x20);
 80040cc:	2020      	movs	r0, #32
 80040ce:	f000 f877 	bl	80041c0 <I2cLcd_SendCommand>
	}
	else
	{
		/* do nothing */
	}
	if(init5 == STD_LOW)
 80040d2:	4b35      	ldr	r3, [pc, #212]	; (80041a8 <I2cLcd_Init+0x17c>)
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d105      	bne.n	80040e6 <I2cLcd_Init+0xba>
	{
		init5 = STD_HIGH;
 80040da:	4b33      	ldr	r3, [pc, #204]	; (80041a8 <I2cLcd_Init+0x17c>)
 80040dc:	2201      	movs	r2, #1
 80040de:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x28);
 80040e0:	2028      	movs	r0, #40	; 0x28
 80040e2:	f000 f86d 	bl	80041c0 <I2cLcd_SendCommand>
	}
	else
	{
		/* do nothing */
	}
	if(init6 == STD_LOW)
 80040e6:	4b31      	ldr	r3, [pc, #196]	; (80041ac <I2cLcd_Init+0x180>)
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d105      	bne.n	80040fa <I2cLcd_Init+0xce>
	{
		init6 = STD_HIGH;
 80040ee:	4b2f      	ldr	r3, [pc, #188]	; (80041ac <I2cLcd_Init+0x180>)
 80040f0:	2201      	movs	r2, #1
 80040f2:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x08);
 80040f4:	2008      	movs	r0, #8
 80040f6:	f000 f863 	bl	80041c0 <I2cLcd_SendCommand>
	}
	else
	{
		/* do nothing */
	}
	if(init7 == STD_LOW)
 80040fa:	4b2d      	ldr	r3, [pc, #180]	; (80041b0 <I2cLcd_Init+0x184>)
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d105      	bne.n	800410e <I2cLcd_Init+0xe2>
	{
		init7 = STD_HIGH;
 8004102:	4b2b      	ldr	r3, [pc, #172]	; (80041b0 <I2cLcd_Init+0x184>)
 8004104:	2201      	movs	r2, #1
 8004106:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x01);
 8004108:	2001      	movs	r0, #1
 800410a:	f000 f859 	bl	80041c0 <I2cLcd_SendCommand>
	}
	else
	{
		/* do nothing */
	}
	if(init8 == STD_LOW)
 800410e:	4b29      	ldr	r3, [pc, #164]	; (80041b4 <I2cLcd_Init+0x188>)
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d105      	bne.n	8004122 <I2cLcd_Init+0xf6>
	{
		init8 = STD_HIGH;
 8004116:	4b27      	ldr	r3, [pc, #156]	; (80041b4 <I2cLcd_Init+0x188>)
 8004118:	2201      	movs	r2, #1
 800411a:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x06);
 800411c:	2006      	movs	r0, #6
 800411e:	f000 f84f 	bl	80041c0 <I2cLcd_SendCommand>
	}
	else
	{
		/* do nothing */
	}
	if(init9 == STD_LOW)
 8004122:	4b25      	ldr	r3, [pc, #148]	; (80041b8 <I2cLcd_Init+0x18c>)
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d105      	bne.n	8004136 <I2cLcd_Init+0x10a>
	{
		init9 = STD_HIGH;
 800412a:	4b23      	ldr	r3, [pc, #140]	; (80041b8 <I2cLcd_Init+0x18c>)
 800412c:	2201      	movs	r2, #1
 800412e:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x0C);
 8004130:	200c      	movs	r0, #12
 8004132:	f000 f845 	bl	80041c0 <I2cLcd_SendCommand>
	}
	else
	{
		/* do nothing */
	}
	if(init1 == STD_HIGH && init2 == STD_HIGH && init3 == STD_HIGH
 8004136:	4b18      	ldr	r3, [pc, #96]	; (8004198 <I2cLcd_Init+0x16c>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d124      	bne.n	8004188 <I2cLcd_Init+0x15c>
 800413e:	4b17      	ldr	r3, [pc, #92]	; (800419c <I2cLcd_Init+0x170>)
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d120      	bne.n	8004188 <I2cLcd_Init+0x15c>
 8004146:	4b16      	ldr	r3, [pc, #88]	; (80041a0 <I2cLcd_Init+0x174>)
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d11c      	bne.n	8004188 <I2cLcd_Init+0x15c>
			&& init4 == STD_HIGH && init5 == STD_HIGH && init6 == STD_HIGH
 800414e:	4b15      	ldr	r3, [pc, #84]	; (80041a4 <I2cLcd_Init+0x178>)
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d118      	bne.n	8004188 <I2cLcd_Init+0x15c>
 8004156:	4b14      	ldr	r3, [pc, #80]	; (80041a8 <I2cLcd_Init+0x17c>)
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d114      	bne.n	8004188 <I2cLcd_Init+0x15c>
 800415e:	4b13      	ldr	r3, [pc, #76]	; (80041ac <I2cLcd_Init+0x180>)
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d110      	bne.n	8004188 <I2cLcd_Init+0x15c>
			&& init7 == STD_HIGH && init8 == STD_HIGH && init9 == STD_HIGH)
 8004166:	4b12      	ldr	r3, [pc, #72]	; (80041b0 <I2cLcd_Init+0x184>)
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d10c      	bne.n	8004188 <I2cLcd_Init+0x15c>
 800416e:	4b11      	ldr	r3, [pc, #68]	; (80041b4 <I2cLcd_Init+0x188>)
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d108      	bne.n	8004188 <I2cLcd_Init+0x15c>
 8004176:	4b10      	ldr	r3, [pc, #64]	; (80041b8 <I2cLcd_Init+0x18c>)
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d104      	bne.n	8004188 <I2cLcd_Init+0x15c>
	{
		I2cLcd_Clear();
 800417e:	f000 f8bb 	bl	80042f8 <I2cLcd_Clear>
		I2c_Lcd_Init_Flag = STD_HIGH;
 8004182:	4b0e      	ldr	r3, [pc, #56]	; (80041bc <I2cLcd_Init+0x190>)
 8004184:	2201      	movs	r2, #1
 8004186:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	return E_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	200000e2 	.word	0x200000e2
 8004198:	200001fc 	.word	0x200001fc
 800419c:	200001fd 	.word	0x200001fd
 80041a0:	200001fe 	.word	0x200001fe
 80041a4:	200001ff 	.word	0x200001ff
 80041a8:	20000200 	.word	0x20000200
 80041ac:	20000201 	.word	0x20000201
 80041b0:	20000202 	.word	0x20000202
 80041b4:	20000203 	.word	0x20000203
 80041b8:	20000204 	.word	0x20000204
 80041bc:	200002f1 	.word	0x200002f1

080041c0 <I2cLcd_SendCommand>:
/***********************************************************************************
* Function: I2cLcd_SendCommand										   			   *
* Description: Driver command transmitting.									       *
************************************************************************************/
VOID I2cLcd_SendCommand(char cmd)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	4603      	mov	r3, r0
 80041c8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8 data_t[4];
	data_u = (cmd & 0xf0);
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	f023 030f 	bic.w	r3, r3, #15
 80041d0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 80041d2:	79fb      	ldrb	r3, [r7, #7]
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
 80041da:	f043 030c 	orr.w	r3, r3, #12
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
 80041e4:	f043 0308 	orr.w	r3, r3, #8
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;
 80041ec:	7bbb      	ldrb	r3, [r7, #14]
 80041ee:	f043 030c 	orr.w	r3, r3, #12
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;
 80041f6:	7bbb      	ldrb	r3, [r7, #14]
 80041f8:	f043 0308 	orr.w	r3, r3, #8
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit_IT(&hi2c1, I2CLCD_SLAVE_ADDRESS, (uint8 *) data_t, 4);
 8004200:	f107 0208 	add.w	r2, r7, #8
 8004204:	2304      	movs	r3, #4
 8004206:	214e      	movs	r1, #78	; 0x4e
 8004208:	4805      	ldr	r0, [pc, #20]	; (8004220 <I2cLcd_SendCommand+0x60>)
 800420a:	f004 fa95 	bl	8008738 <HAL_I2C_Master_Transmit_IT>
	vTaskSuspend(I2C_ISRHandle);
 800420e:	4b05      	ldr	r3, [pc, #20]	; (8004224 <I2cLcd_SendCommand+0x64>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4618      	mov	r0, r3
 8004214:	f00c f980 	bl	8010518 <vTaskSuspend>
}
 8004218:	bf00      	nop
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	20000378 	.word	0x20000378
 8004224:	20000350 	.word	0x20000350

08004228 <I2cLcd_SendData>:
/***********************************************************************************
* Function: I2cLcd_SendData										   			       *
* Description: Driver data transmitting.									       *
************************************************************************************/
VOID I2cLcd_SendData(char data)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	4603      	mov	r3, r0
 8004230:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8 data_t[4];
	data_u = (data & 0xf0);
 8004232:	79fb      	ldrb	r3, [r7, #7]
 8004234:	f023 030f 	bic.w	r3, r3, #15
 8004238:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 800423a:	79fb      	ldrb	r3, [r7, #7]
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;
 8004240:	7bfb      	ldrb	r3, [r7, #15]
 8004242:	f043 030d 	orr.w	r3, r3, #13
 8004246:	b2db      	uxtb	r3, r3
 8004248:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;
 800424a:	7bfb      	ldrb	r3, [r7, #15]
 800424c:	f043 0309 	orr.w	r3, r3, #9
 8004250:	b2db      	uxtb	r3, r3
 8004252:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;
 8004254:	7bbb      	ldrb	r3, [r7, #14]
 8004256:	f043 030d 	orr.w	r3, r3, #13
 800425a:	b2db      	uxtb	r3, r3
 800425c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;
 800425e:	7bbb      	ldrb	r3, [r7, #14]
 8004260:	f043 0309 	orr.w	r3, r3, #9
 8004264:	b2db      	uxtb	r3, r3
 8004266:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit_IT(&hi2c1, I2CLCD_SLAVE_ADDRESS, (uint8 *) data_t, 4);
 8004268:	f107 0208 	add.w	r2, r7, #8
 800426c:	2304      	movs	r3, #4
 800426e:	214e      	movs	r1, #78	; 0x4e
 8004270:	4805      	ldr	r0, [pc, #20]	; (8004288 <I2cLcd_SendData+0x60>)
 8004272:	f004 fa61 	bl	8008738 <HAL_I2C_Master_Transmit_IT>
	vTaskSuspend(I2C_ISRHandle);
 8004276:	4b05      	ldr	r3, [pc, #20]	; (800428c <I2cLcd_SendData+0x64>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f00c f94c 	bl	8010518 <vTaskSuspend>
}
 8004280:	bf00      	nop
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	20000378 	.word	0x20000378
 800428c:	20000350 	.word	0x20000350

08004290 <I2cLcd_SendString>:
/***********************************************************************************
* Function: I2cLcd_SendString										   			   *
* Description: Driver string transmitting.									       *
************************************************************************************/
VOID I2cLcd_SendString(char *str)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
	while (*str)
 8004298:	e006      	b.n	80042a8 <I2cLcd_SendString+0x18>
	{
		I2cLcd_SendData(*str++);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff ffc0 	bl	8004228 <I2cLcd_SendData>
	while (*str)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1f4      	bne.n	800429a <I2cLcd_SendString+0xa>
	}
}
 80042b0:	bf00      	nop
 80042b2:	bf00      	nop
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <I2cLcd_SetCursor>:
/***********************************************************************************
* Function: I2cLcd_SetCursor										   			   *
* Description: Driver cursor setting.									           *
************************************************************************************/
VOID I2cLcd_SetCursor(int row, int col)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b082      	sub	sp, #8
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
 80042c2:	6039      	str	r1, [r7, #0]
	switch (row)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <I2cLcd_SetCursor+0x18>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d005      	beq.n	80042dc <I2cLcd_SetCursor+0x22>
 80042d0:	e009      	b.n	80042e6 <I2cLcd_SetCursor+0x2c>
	{
		case 0:
			col |= 0x80;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042d8:	603b      	str	r3, [r7, #0]
			break;
 80042da:	e004      	b.n	80042e6 <I2cLcd_SetCursor+0x2c>
		case 1:
			col |= 0xC0;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042e2:	603b      	str	r3, [r7, #0]
			break;
 80042e4:	bf00      	nop
	}
	I2cLcd_SendCommand(col);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff ff68 	bl	80041c0 <I2cLcd_SendCommand>
}
 80042f0:	bf00      	nop
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <I2cLcd_Clear>:
/***********************************************************************************
* Function: I2cLcd_Clear										   			       *
* Description: Driver LCD clearing.									               *
************************************************************************************/
VOID I2cLcd_Clear()
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
	I2cLcd_SendCommand(0x80);
 80042fe:	2080      	movs	r0, #128	; 0x80
 8004300:	f7ff ff5e 	bl	80041c0 <I2cLcd_SendCommand>
	for (uint8 i=0; i < 70; i++)
 8004304:	2300      	movs	r3, #0
 8004306:	71fb      	strb	r3, [r7, #7]
 8004308:	e005      	b.n	8004316 <I2cLcd_Clear+0x1e>
	{
		I2cLcd_SendData(' ');
 800430a:	2020      	movs	r0, #32
 800430c:	f7ff ff8c 	bl	8004228 <I2cLcd_SendData>
	for (uint8 i=0; i < 70; i++)
 8004310:	79fb      	ldrb	r3, [r7, #7]
 8004312:	3301      	adds	r3, #1
 8004314:	71fb      	strb	r3, [r7, #7]
 8004316:	79fb      	ldrb	r3, [r7, #7]
 8004318:	2b45      	cmp	r3, #69	; 0x45
 800431a:	d9f6      	bls.n	800430a <I2cLcd_Clear+0x12>
	}
}
 800431c:	bf00      	nop
 800431e:	bf00      	nop
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
	...

08004328 <Uart_Init>:
/***********************************************************************************
* Function: Uart_Init										       				   *
* Description: Initialize the protocol.									 		   *
************************************************************************************/
StdReturnType Uart_Init()
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
	/* Set the instance. */
	huart1.Instance = USART1;
 800432c:	4b12      	ldr	r3, [pc, #72]	; (8004378 <Uart_Init+0x50>)
 800432e:	4a13      	ldr	r2, [pc, #76]	; (800437c <Uart_Init+0x54>)
 8004330:	601a      	str	r2, [r3, #0]
	/* Set the baud rate for the protocol. */
	huart1.Init.BaudRate = 9600;
 8004332:	4b11      	ldr	r3, [pc, #68]	; (8004378 <Uart_Init+0x50>)
 8004334:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004338:	605a      	str	r2, [r3, #4]
	/* Set the number of data bits transmitted or received. */
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800433a:	4b0f      	ldr	r3, [pc, #60]	; (8004378 <Uart_Init+0x50>)
 800433c:	2200      	movs	r2, #0
 800433e:	609a      	str	r2, [r3, #8]
	/* Set the number of stop bits transmitted. */
	huart1.Init.StopBits = UART_STOPBITS_1;
 8004340:	4b0d      	ldr	r3, [pc, #52]	; (8004378 <Uart_Init+0x50>)
 8004342:	2200      	movs	r2, #0
 8004344:	60da      	str	r2, [r3, #12]
	/* Set the parity mode. */
	huart1.Init.Parity = UART_PARITY_NONE;
 8004346:	4b0c      	ldr	r3, [pc, #48]	; (8004378 <Uart_Init+0x50>)
 8004348:	2200      	movs	r2, #0
 800434a:	611a      	str	r2, [r3, #16]
	/* Set the protocol mode. */
	huart1.Init.Mode = UART_MODE_TX_RX;
 800434c:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <Uart_Init+0x50>)
 800434e:	220c      	movs	r2, #12
 8004350:	615a      	str	r2, [r3, #20]
	/* Set the hardware flow control. */
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004352:	4b09      	ldr	r3, [pc, #36]	; (8004378 <Uart_Init+0x50>)
 8004354:	2200      	movs	r2, #0
 8004356:	619a      	str	r2, [r3, #24]
	/* Set the over sampling value. */
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004358:	4b07      	ldr	r3, [pc, #28]	; (8004378 <Uart_Init+0x50>)
 800435a:	2200      	movs	r2, #0
 800435c:	61da      	str	r2, [r3, #28]
	/* Call for error callback if the initialization is not performed accordingly. */
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800435e:	4806      	ldr	r0, [pc, #24]	; (8004378 <Uart_Init+0x50>)
 8004360:	f008 fa7c 	bl	800c85c <HAL_UART_Init>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d002      	beq.n	8004370 <Uart_Init+0x48>
	{
		HAL_UART_ErrorCallback(&huart1);
 800436a:	4803      	ldr	r0, [pc, #12]	; (8004378 <Uart_Init+0x50>)
 800436c:	f000 f8b2 	bl	80044d4 <HAL_UART_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	return E_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	20000814 	.word	0x20000814
 800437c:	40011000 	.word	0x40011000

08004380 <Uart_DeInit>:
/***********************************************************************************
* Function: Uart_DeInit										   					   *
* Description: De-initialize the protocol.									       *
************************************************************************************/
StdReturnType Uart_DeInit()
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
	/* Call for protocol de-init function. */
	HAL_UART_DeInit(&huart1);
 8004384:	4802      	ldr	r0, [pc, #8]	; (8004390 <Uart_DeInit+0x10>)
 8004386:	f008 fac3 	bl	800c910 <HAL_UART_DeInit>
	return E_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	bd80      	pop	{r7, pc}
 8004390:	20000814 	.word	0x20000814

08004394 <Uart_MainFunction>:
/***********************************************************************************
* Function: Uart_MainFunction										   			   *
* Description: Protocol main function.									           *
************************************************************************************/
VOID Uart_MainFunction()
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
	/* Get the error status in local variable. */
	uint32 localState = HAL_UART_GetState(&huart1);
 800439a:	484b      	ldr	r0, [pc, #300]	; (80044c8 <Uart_MainFunction+0x134>)
 800439c:	f008 fe42 	bl	800d024 <HAL_UART_GetState>
 80043a0:	4603      	mov	r3, r0
 80043a2:	607b      	str	r3, [r7, #4]
	switch(localState)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2be0      	cmp	r3, #224	; 0xe0
 80043a8:	f000 8082 	beq.w	80044b0 <Uart_MainFunction+0x11c>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2be0      	cmp	r3, #224	; 0xe0
 80043b0:	f200 8085 	bhi.w	80044be <Uart_MainFunction+0x12a>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b24      	cmp	r3, #36	; 0x24
 80043b8:	d850      	bhi.n	800445c <Uart_MainFunction+0xc8>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b24      	cmp	r3, #36	; 0x24
 80043be:	d87e      	bhi.n	80044be <Uart_MainFunction+0x12a>
 80043c0:	a201      	add	r2, pc, #4	; (adr r2, 80043c8 <Uart_MainFunction+0x34>)
 80043c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c6:	bf00      	nop
 80043c8:	08004465 	.word	0x08004465
 80043cc:	080044bf 	.word	0x080044bf
 80043d0:	080044bf 	.word	0x080044bf
 80043d4:	080044bf 	.word	0x080044bf
 80043d8:	080044bf 	.word	0x080044bf
 80043dc:	080044bf 	.word	0x080044bf
 80043e0:	080044bf 	.word	0x080044bf
 80043e4:	080044bf 	.word	0x080044bf
 80043e8:	080044bf 	.word	0x080044bf
 80043ec:	080044bf 	.word	0x080044bf
 80043f0:	080044bf 	.word	0x080044bf
 80043f4:	080044bf 	.word	0x080044bf
 80043f8:	080044bf 	.word	0x080044bf
 80043fc:	080044bf 	.word	0x080044bf
 8004400:	080044bf 	.word	0x080044bf
 8004404:	080044bf 	.word	0x080044bf
 8004408:	080044bf 	.word	0x080044bf
 800440c:	080044bf 	.word	0x080044bf
 8004410:	080044bf 	.word	0x080044bf
 8004414:	080044bf 	.word	0x080044bf
 8004418:	080044bf 	.word	0x080044bf
 800441c:	080044bf 	.word	0x080044bf
 8004420:	080044bf 	.word	0x080044bf
 8004424:	080044bf 	.word	0x080044bf
 8004428:	080044bf 	.word	0x080044bf
 800442c:	080044bf 	.word	0x080044bf
 8004430:	080044bf 	.word	0x080044bf
 8004434:	080044bf 	.word	0x080044bf
 8004438:	080044bf 	.word	0x080044bf
 800443c:	080044bf 	.word	0x080044bf
 8004440:	080044bf 	.word	0x080044bf
 8004444:	080044bf 	.word	0x080044bf
 8004448:	08004471 	.word	0x08004471
 800444c:	0800448b 	.word	0x0800448b
 8004450:	08004493 	.word	0x08004493
 8004454:	0800449b 	.word	0x0800449b
 8004458:	08004483 	.word	0x08004483
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2ba0      	cmp	r3, #160	; 0xa0
 8004460:	d01f      	beq.n	80044a2 <Uart_MainFunction+0x10e>
		case HAL_UART_STATE_ERROR:
			Uart_BswState = localState;
			HAL_UART_ErrorCallback(&huart1);
			break;
		default:
			break;
 8004462:	e02c      	b.n	80044be <Uart_MainFunction+0x12a>
			Uart_BswState = localState;
 8004464:	4a19      	ldr	r2, [pc, #100]	; (80044cc <Uart_MainFunction+0x138>)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6013      	str	r3, [r2, #0]
			Uart_Init();
 800446a:	f7ff ff5d 	bl	8004328 <Uart_Init>
			break;
 800446e:	e027      	b.n	80044c0 <Uart_MainFunction+0x12c>
			HAL_UART_Receive_IT(&huart1, &Rte_P_Btc_BtcPort_Btc_RxData, 1);
 8004470:	2201      	movs	r2, #1
 8004472:	4917      	ldr	r1, [pc, #92]	; (80044d0 <Uart_MainFunction+0x13c>)
 8004474:	4814      	ldr	r0, [pc, #80]	; (80044c8 <Uart_MainFunction+0x134>)
 8004476:	f008 faca 	bl	800ca0e <HAL_UART_Receive_IT>
			Uart_BswState = localState;
 800447a:	4a14      	ldr	r2, [pc, #80]	; (80044cc <Uart_MainFunction+0x138>)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6013      	str	r3, [r2, #0]
			break;
 8004480:	e01e      	b.n	80044c0 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 8004482:	4a12      	ldr	r2, [pc, #72]	; (80044cc <Uart_MainFunction+0x138>)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6013      	str	r3, [r2, #0]
			break;
 8004488:	e01a      	b.n	80044c0 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 800448a:	4a10      	ldr	r2, [pc, #64]	; (80044cc <Uart_MainFunction+0x138>)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6013      	str	r3, [r2, #0]
			break;
 8004490:	e016      	b.n	80044c0 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 8004492:	4a0e      	ldr	r2, [pc, #56]	; (80044cc <Uart_MainFunction+0x138>)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6013      	str	r3, [r2, #0]
			break;
 8004498:	e012      	b.n	80044c0 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 800449a:	4a0c      	ldr	r2, [pc, #48]	; (80044cc <Uart_MainFunction+0x138>)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6013      	str	r3, [r2, #0]
			break;
 80044a0:	e00e      	b.n	80044c0 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 80044a2:	4a0a      	ldr	r2, [pc, #40]	; (80044cc <Uart_MainFunction+0x138>)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6013      	str	r3, [r2, #0]
			HAL_UART_ErrorCallback(&huart1);
 80044a8:	4807      	ldr	r0, [pc, #28]	; (80044c8 <Uart_MainFunction+0x134>)
 80044aa:	f000 f813 	bl	80044d4 <HAL_UART_ErrorCallback>
			break;
 80044ae:	e007      	b.n	80044c0 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 80044b0:	4a06      	ldr	r2, [pc, #24]	; (80044cc <Uart_MainFunction+0x138>)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6013      	str	r3, [r2, #0]
			HAL_UART_ErrorCallback(&huart1);
 80044b6:	4804      	ldr	r0, [pc, #16]	; (80044c8 <Uart_MainFunction+0x134>)
 80044b8:	f000 f80c 	bl	80044d4 <HAL_UART_ErrorCallback>
			break;
 80044bc:	e000      	b.n	80044c0 <Uart_MainFunction+0x12c>
			break;
 80044be:	bf00      	nop
	}
}
 80044c0:	bf00      	nop
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	20000814 	.word	0x20000814
 80044cc:	20000208 	.word	0x20000208
 80044d0:	200000e0 	.word	0x200000e0

080044d4 <HAL_UART_ErrorCallback>:
/***********************************************************************************
* Function: HAL_UART_ErrorCallback										   		   *
* Description: Process error callback.								               *
************************************************************************************/
VOID HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
	/* Get error status in local variable. */
	uint32 receivedValue = HAL_UART_GetError(huart);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f008 fdbf 	bl	800d060 <HAL_UART_GetError>
 80044e2:	60f8      	str	r0, [r7, #12]
	/* Process each error.
	 * Store each in error in the system manager fault array.
	 * In case of DMA error re-initialize the protocol. */
	switch(receivedValue)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2b10      	cmp	r3, #16
 80044e8:	d846      	bhi.n	8004578 <HAL_UART_ErrorCallback+0xa4>
 80044ea:	a201      	add	r2, pc, #4	; (adr r2, 80044f0 <HAL_UART_ErrorCallback+0x1c>)
 80044ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f0:	08004579 	.word	0x08004579
 80044f4:	08004535 	.word	0x08004535
 80044f8:	08004541 	.word	0x08004541
 80044fc:	08004579 	.word	0x08004579
 8004500:	0800454d 	.word	0x0800454d
 8004504:	08004579 	.word	0x08004579
 8004508:	08004579 	.word	0x08004579
 800450c:	08004579 	.word	0x08004579
 8004510:	08004559 	.word	0x08004559
 8004514:	08004579 	.word	0x08004579
 8004518:	08004579 	.word	0x08004579
 800451c:	08004579 	.word	0x08004579
 8004520:	08004579 	.word	0x08004579
 8004524:	08004579 	.word	0x08004579
 8004528:	08004579 	.word	0x08004579
 800452c:	08004579 	.word	0x08004579
 8004530:	08004565 	.word	0x08004565
	{
		case HAL_UART_ERROR_NONE:
			/* do nothing */
			break;
		case HAL_UART_ERROR_PE:
			SystemManager_Fault[UART_ERROR_PE]++;
 8004534:	4b13      	ldr	r3, [pc, #76]	; (8004584 <HAL_UART_ErrorCallback+0xb0>)
 8004536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004538:	3301      	adds	r3, #1
 800453a:	4a12      	ldr	r2, [pc, #72]	; (8004584 <HAL_UART_ErrorCallback+0xb0>)
 800453c:	6453      	str	r3, [r2, #68]	; 0x44
			break;
 800453e:	e01c      	b.n	800457a <HAL_UART_ErrorCallback+0xa6>
		case HAL_UART_ERROR_NE:
			SystemManager_Fault[UART_ERROR_NE]++;
 8004540:	4b10      	ldr	r3, [pc, #64]	; (8004584 <HAL_UART_ErrorCallback+0xb0>)
 8004542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004544:	3301      	adds	r3, #1
 8004546:	4a0f      	ldr	r2, [pc, #60]	; (8004584 <HAL_UART_ErrorCallback+0xb0>)
 8004548:	6493      	str	r3, [r2, #72]	; 0x48
			break;
 800454a:	e016      	b.n	800457a <HAL_UART_ErrorCallback+0xa6>
		case HAL_UART_ERROR_FE:
			SystemManager_Fault[UART_ERROR_FE]++;
 800454c:	4b0d      	ldr	r3, [pc, #52]	; (8004584 <HAL_UART_ErrorCallback+0xb0>)
 800454e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004550:	3301      	adds	r3, #1
 8004552:	4a0c      	ldr	r2, [pc, #48]	; (8004584 <HAL_UART_ErrorCallback+0xb0>)
 8004554:	64d3      	str	r3, [r2, #76]	; 0x4c
			break;
 8004556:	e010      	b.n	800457a <HAL_UART_ErrorCallback+0xa6>
		case HAL_UART_ERROR_ORE:
			SystemManager_Fault[UART_ERROR_ORE]++;
 8004558:	4b0a      	ldr	r3, [pc, #40]	; (8004584 <HAL_UART_ErrorCallback+0xb0>)
 800455a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800455c:	3301      	adds	r3, #1
 800455e:	4a09      	ldr	r2, [pc, #36]	; (8004584 <HAL_UART_ErrorCallback+0xb0>)
 8004560:	6513      	str	r3, [r2, #80]	; 0x50
			break;
 8004562:	e00a      	b.n	800457a <HAL_UART_ErrorCallback+0xa6>
		case HAL_UART_ERROR_DMA:
			SystemManager_Fault[UART_ERROR_ORE]++;
 8004564:	4b07      	ldr	r3, [pc, #28]	; (8004584 <HAL_UART_ErrorCallback+0xb0>)
 8004566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004568:	3301      	adds	r3, #1
 800456a:	4a06      	ldr	r2, [pc, #24]	; (8004584 <HAL_UART_ErrorCallback+0xb0>)
 800456c:	6513      	str	r3, [r2, #80]	; 0x50
			Uart_Init();
 800456e:	f7ff fedb 	bl	8004328 <Uart_Init>
			Uart_DeInit();
 8004572:	f7ff ff05 	bl	8004380 <Uart_DeInit>
			break;
 8004576:	e000      	b.n	800457a <HAL_UART_ErrorCallback+0xa6>
		default:
			break;
 8004578:	bf00      	nop
	}
}
 800457a:	bf00      	nop
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	20009420 	.word	0x20009420

08004588 <HAL_UART_RxCpltCallback>:
/***********************************************************************************
* Function: HAL_UART_RxCpltCallback										           *
* Description: Process received data.									   		   *
************************************************************************************/
VOID HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
	/* If the UART 1 is calling the callback. */
	if(huart->Instance == USART1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a20      	ldr	r2, [pc, #128]	; (8004618 <HAL_UART_RxCpltCallback+0x90>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d13a      	bne.n	8004610 <HAL_UART_RxCpltCallback+0x88>
	{
		/* If the data received is not nullptr. */
		if(Rte_P_Btc_BtcPort_Btc_RxData == '\n')
 800459a:	4b20      	ldr	r3, [pc, #128]	; (800461c <HAL_UART_RxCpltCallback+0x94>)
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	2b0a      	cmp	r3, #10
 80045a0:	d11a      	bne.n	80045d8 <HAL_UART_RxCpltCallback+0x50>
		{
			/* If the buffer length counter is less than maximum value. */
			if(Rte_P_Btc_BtcPort_Btc_RxCount <= 3)
 80045a2:	4b1f      	ldr	r3, [pc, #124]	; (8004620 <HAL_UART_RxCpltCallback+0x98>)
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	2b03      	cmp	r3, #3
 80045a8:	d80f      	bhi.n	80045ca <HAL_UART_RxCpltCallback+0x42>
			{
				/* Convert the data received to uint8.*/
				uint8 asciiToUint = 0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	73fb      	strb	r3, [r7, #15]
				asciiToUint = atoi((char*)Rte_P_Btc_BtcPort_Btc_DataBuffer);
 80045ae:	481d      	ldr	r0, [pc, #116]	; (8004624 <HAL_UART_RxCpltCallback+0x9c>)
 80045b0:	f00f f922 	bl	80137f8 <atoi>
 80045b4:	4603      	mov	r3, r0
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	73fb      	strb	r3, [r7, #15]
				Rte_Write_Btc_BtcPort_Btc_RxData(&asciiToUint);
 80045ba:	f107 030f 	add.w	r3, r7, #15
 80045be:	4618      	mov	r0, r3
 80045c0:	f00d fde6 	bl	8012190 <Rte_Write_Btc_BtcPort_Btc_RxData>
				Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(&Rte_P_Btc_BtcPort_Btc_RxData);
 80045c4:	4815      	ldr	r0, [pc, #84]	; (800461c <HAL_UART_RxCpltCallback+0x94>)
 80045c6:	f00d fe2b 	bl	8012220 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>
			else
			{
				/* do nothing */
			}
			/* Set the counter to 0 if it is more than maximum value. */
			UartCounter_Btc_RxCount = 0;
 80045ca:	4b17      	ldr	r3, [pc, #92]	; (8004628 <HAL_UART_RxCpltCallback+0xa0>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	701a      	strb	r2, [r3, #0]
			Rte_Write_Btc_BtcPort_Btc_RxCount(&UartCounter_Btc_RxCount);
 80045d0:	4815      	ldr	r0, [pc, #84]	; (8004628 <HAL_UART_RxCpltCallback+0xa0>)
 80045d2:	f00d fded 	bl	80121b0 <Rte_Write_Btc_BtcPort_Btc_RxCount>
 80045d6:	e016      	b.n	8004606 <HAL_UART_RxCpltCallback+0x7e>
		}/* If the message was not fully processed, continue with the processing into the buffer. */
		else if(Rte_P_Btc_BtcPort_Btc_RxCount < 3)
 80045d8:	4b11      	ldr	r3, [pc, #68]	; (8004620 <HAL_UART_RxCpltCallback+0x98>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d80c      	bhi.n	80045fa <HAL_UART_RxCpltCallback+0x72>
		{
			Rte_Write_Btc_BtcPort_Btc_DataBuffer(&Rte_P_Btc_BtcPort_Btc_RxData, UartCounter_Btc_RxCount);
 80045e0:	4b11      	ldr	r3, [pc, #68]	; (8004628 <HAL_UART_RxCpltCallback+0xa0>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	4619      	mov	r1, r3
 80045e6:	480d      	ldr	r0, [pc, #52]	; (800461c <HAL_UART_RxCpltCallback+0x94>)
 80045e8:	f00d fdf2 	bl	80121d0 <Rte_Write_Btc_BtcPort_Btc_DataBuffer>
			UartCounter_Btc_RxCount++;
 80045ec:	4b0e      	ldr	r3, [pc, #56]	; (8004628 <HAL_UART_RxCpltCallback+0xa0>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	3301      	adds	r3, #1
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	4b0c      	ldr	r3, [pc, #48]	; (8004628 <HAL_UART_RxCpltCallback+0xa0>)
 80045f6:	701a      	strb	r2, [r3, #0]
 80045f8:	e005      	b.n	8004606 <HAL_UART_RxCpltCallback+0x7e>
		}
		else
		{
			/* Set the counter to 0 otherwise. */
			UartCounter_Btc_RxCount = 0;
 80045fa:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <HAL_UART_RxCpltCallback+0xa0>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	701a      	strb	r2, [r3, #0]
			Rte_Write_Btc_BtcPort_Btc_RxCount(&UartCounter_Btc_RxCount);
 8004600:	4809      	ldr	r0, [pc, #36]	; (8004628 <HAL_UART_RxCpltCallback+0xa0>)
 8004602:	f00d fdd5 	bl	80121b0 <Rte_Write_Btc_BtcPort_Btc_RxCount>
		}
		/* Re-enable data transmission throuhg the protocol in interrupt mode. */
		Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT(&huart1, &Btc_RxData, 1);
 8004606:	2201      	movs	r2, #1
 8004608:	4904      	ldr	r1, [pc, #16]	; (800461c <HAL_UART_RxCpltCallback+0x94>)
 800460a:	4808      	ldr	r0, [pc, #32]	; (800462c <HAL_UART_RxCpltCallback+0xa4>)
 800460c:	f00d ff56 	bl	80124bc <Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT>
	}
	else
	{
		/* do nothing */
	}
}
 8004610:	bf00      	nop
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40011000 	.word	0x40011000
 800461c:	200000e0 	.word	0x200000e0
 8004620:	200000e1 	.word	0x200000e1
 8004624:	200000dc 	.word	0x200000dc
 8004628:	2000020c 	.word	0x2000020c
 800462c:	20000814 	.word	0x20000814

08004630 <HAL_ADC_MspInit>:
  /* USER CODE END ADC1_Init 2 */

}

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b08c      	sub	sp, #48	; 0x30
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004638:	f107 031c 	add.w	r3, r7, #28
 800463c:	2200      	movs	r2, #0
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	605a      	str	r2, [r3, #4]
 8004642:	609a      	str	r2, [r3, #8]
 8004644:	60da      	str	r2, [r3, #12]
 8004646:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a4e      	ldr	r2, [pc, #312]	; (8004788 <HAL_ADC_MspInit+0x158>)
 800464e:	4293      	cmp	r3, r2
 8004650:	f040 8096 	bne.w	8004780 <HAL_ADC_MspInit+0x150>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004654:	2300      	movs	r3, #0
 8004656:	61bb      	str	r3, [r7, #24]
 8004658:	4b4c      	ldr	r3, [pc, #304]	; (800478c <HAL_ADC_MspInit+0x15c>)
 800465a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465c:	4a4b      	ldr	r2, [pc, #300]	; (800478c <HAL_ADC_MspInit+0x15c>)
 800465e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004662:	6453      	str	r3, [r2, #68]	; 0x44
 8004664:	4b49      	ldr	r3, [pc, #292]	; (800478c <HAL_ADC_MspInit+0x15c>)
 8004666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466c:	61bb      	str	r3, [r7, #24]
 800466e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004670:	2300      	movs	r3, #0
 8004672:	617b      	str	r3, [r7, #20]
 8004674:	4b45      	ldr	r3, [pc, #276]	; (800478c <HAL_ADC_MspInit+0x15c>)
 8004676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004678:	4a44      	ldr	r2, [pc, #272]	; (800478c <HAL_ADC_MspInit+0x15c>)
 800467a:	f043 0304 	orr.w	r3, r3, #4
 800467e:	6313      	str	r3, [r2, #48]	; 0x30
 8004680:	4b42      	ldr	r3, [pc, #264]	; (800478c <HAL_ADC_MspInit+0x15c>)
 8004682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	617b      	str	r3, [r7, #20]
 800468a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800468c:	2300      	movs	r3, #0
 800468e:	613b      	str	r3, [r7, #16]
 8004690:	4b3e      	ldr	r3, [pc, #248]	; (800478c <HAL_ADC_MspInit+0x15c>)
 8004692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004694:	4a3d      	ldr	r2, [pc, #244]	; (800478c <HAL_ADC_MspInit+0x15c>)
 8004696:	f043 0301 	orr.w	r3, r3, #1
 800469a:	6313      	str	r3, [r2, #48]	; 0x30
 800469c:	4b3b      	ldr	r3, [pc, #236]	; (800478c <HAL_ADC_MspInit+0x15c>)
 800469e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	613b      	str	r3, [r7, #16]
 80046a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046a8:	2300      	movs	r3, #0
 80046aa:	60fb      	str	r3, [r7, #12]
 80046ac:	4b37      	ldr	r3, [pc, #220]	; (800478c <HAL_ADC_MspInit+0x15c>)
 80046ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b0:	4a36      	ldr	r2, [pc, #216]	; (800478c <HAL_ADC_MspInit+0x15c>)
 80046b2:	f043 0302 	orr.w	r3, r3, #2
 80046b6:	6313      	str	r3, [r2, #48]	; 0x30
 80046b8:	4b34      	ldr	r3, [pc, #208]	; (800478c <HAL_ADC_MspInit+0x15c>)
 80046ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = TS_Pin|RTS_F_Pin|AQS_Pin|LS_Pin
 80046c4:	233f      	movs	r3, #63	; 0x3f
 80046c6:	61fb      	str	r3, [r7, #28]
                          |LTS_R_Pin|LTS_F_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80046c8:	2303      	movs	r3, #3
 80046ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046cc:	2300      	movs	r3, #0
 80046ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046d0:	f107 031c 	add.w	r3, r7, #28
 80046d4:	4619      	mov	r1, r3
 80046d6:	482e      	ldr	r0, [pc, #184]	; (8004790 <HAL_ADC_MspInit+0x160>)
 80046d8:	f003 fbd6 	bl	8007e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VS_Pin|RTS_R_Pin|LB_L_Pin|LB_R_Pin
 80046dc:	23fc      	movs	r3, #252	; 0xfc
 80046de:	61fb      	str	r3, [r7, #28]
                          |RPL_L_Pin|RPL_R_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80046e0:	2303      	movs	r3, #3
 80046e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e4:	2300      	movs	r3, #0
 80046e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046e8:	f107 031c 	add.w	r3, r7, #28
 80046ec:	4619      	mov	r1, r3
 80046ee:	4829      	ldr	r0, [pc, #164]	; (8004794 <HAL_ADC_MspInit+0x164>)
 80046f0:	f003 fbca 	bl	8007e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BL_R_Pin|BL_L_Pin;
 80046f4:	2303      	movs	r3, #3
 80046f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80046f8:	2303      	movs	r3, #3
 80046fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046fc:	2300      	movs	r3, #0
 80046fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004700:	f107 031c 	add.w	r3, r7, #28
 8004704:	4619      	mov	r1, r3
 8004706:	4824      	ldr	r0, [pc, #144]	; (8004798 <HAL_ADC_MspInit+0x168>)
 8004708:	f003 fbbe 	bl	8007e88 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800470c:	4b23      	ldr	r3, [pc, #140]	; (800479c <HAL_ADC_MspInit+0x16c>)
 800470e:	4a24      	ldr	r2, [pc, #144]	; (80047a0 <HAL_ADC_MspInit+0x170>)
 8004710:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004712:	4b22      	ldr	r3, [pc, #136]	; (800479c <HAL_ADC_MspInit+0x16c>)
 8004714:	2200      	movs	r2, #0
 8004716:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004718:	4b20      	ldr	r3, [pc, #128]	; (800479c <HAL_ADC_MspInit+0x16c>)
 800471a:	2200      	movs	r2, #0
 800471c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800471e:	4b1f      	ldr	r3, [pc, #124]	; (800479c <HAL_ADC_MspInit+0x16c>)
 8004720:	2200      	movs	r2, #0
 8004722:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004724:	4b1d      	ldr	r3, [pc, #116]	; (800479c <HAL_ADC_MspInit+0x16c>)
 8004726:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800472a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800472c:	4b1b      	ldr	r3, [pc, #108]	; (800479c <HAL_ADC_MspInit+0x16c>)
 800472e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004732:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004734:	4b19      	ldr	r3, [pc, #100]	; (800479c <HAL_ADC_MspInit+0x16c>)
 8004736:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800473a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800473c:	4b17      	ldr	r3, [pc, #92]	; (800479c <HAL_ADC_MspInit+0x16c>)
 800473e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004742:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004744:	4b15      	ldr	r3, [pc, #84]	; (800479c <HAL_ADC_MspInit+0x16c>)
 8004746:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800474a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800474c:	4b13      	ldr	r3, [pc, #76]	; (800479c <HAL_ADC_MspInit+0x16c>)
 800474e:	2204      	movs	r2, #4
 8004750:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004752:	4b12      	ldr	r3, [pc, #72]	; (800479c <HAL_ADC_MspInit+0x16c>)
 8004754:	2203      	movs	r2, #3
 8004756:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8004758:	4b10      	ldr	r3, [pc, #64]	; (800479c <HAL_ADC_MspInit+0x16c>)
 800475a:	2200      	movs	r2, #0
 800475c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800475e:	4b0f      	ldr	r3, [pc, #60]	; (800479c <HAL_ADC_MspInit+0x16c>)
 8004760:	2200      	movs	r2, #0
 8004762:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004764:	480d      	ldr	r0, [pc, #52]	; (800479c <HAL_ADC_MspInit+0x16c>)
 8004766:	f002 fd79 	bl	800725c <HAL_DMA_Init>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <HAL_ADC_MspInit+0x144>
    {
      Error_Handler();
 8004770:	f00f f816 	bl	80137a0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a09      	ldr	r2, [pc, #36]	; (800479c <HAL_ADC_MspInit+0x16c>)
 8004778:	639a      	str	r2, [r3, #56]	; 0x38
 800477a:	4a08      	ldr	r2, [pc, #32]	; (800479c <HAL_ADC_MspInit+0x16c>)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004780:	bf00      	nop
 8004782:	3730      	adds	r7, #48	; 0x30
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40012000 	.word	0x40012000
 800478c:	40023800 	.word	0x40023800
 8004790:	40020800 	.word	0x40020800
 8004794:	40020000 	.word	0x40020000
 8004798:	40020400 	.word	0x40020400
 800479c:	20000274 	.word	0x20000274
 80047a0:	40026410 	.word	0x40026410

080047a4 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a10      	ldr	r2, [pc, #64]	; (80047f4 <HAL_ADC_MspDeInit+0x50>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d119      	bne.n	80047ea <HAL_ADC_MspDeInit+0x46>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 80047b6:	4b10      	ldr	r3, [pc, #64]	; (80047f8 <HAL_ADC_MspDeInit+0x54>)
 80047b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ba:	4a0f      	ldr	r2, [pc, #60]	; (80047f8 <HAL_ADC_MspDeInit+0x54>)
 80047bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047c0:	6453      	str	r3, [r2, #68]	; 0x44
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    HAL_GPIO_DeInit(GPIOC, TS_Pin|RTS_F_Pin|AQS_Pin|LS_Pin
 80047c2:	213f      	movs	r1, #63	; 0x3f
 80047c4:	480d      	ldr	r0, [pc, #52]	; (80047fc <HAL_ADC_MspDeInit+0x58>)
 80047c6:	f003 fce3 	bl	8008190 <HAL_GPIO_DeInit>
                          |LTS_R_Pin|LTS_F_Pin);

    HAL_GPIO_DeInit(GPIOA, VS_Pin|RTS_R_Pin|LB_L_Pin|LB_R_Pin
 80047ca:	21fc      	movs	r1, #252	; 0xfc
 80047cc:	480c      	ldr	r0, [pc, #48]	; (8004800 <HAL_ADC_MspDeInit+0x5c>)
 80047ce:	f003 fcdf 	bl	8008190 <HAL_GPIO_DeInit>
                          |RPL_L_Pin|RPL_R_Pin);

    HAL_GPIO_DeInit(GPIOB, BL_R_Pin|BL_L_Pin);
 80047d2:	2103      	movs	r1, #3
 80047d4:	480b      	ldr	r0, [pc, #44]	; (8004804 <HAL_ADC_MspDeInit+0x60>)
 80047d6:	f003 fcdb 	bl	8008190 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047de:	4618      	mov	r0, r3
 80047e0:	f002 fdea 	bl	80073b8 <HAL_DMA_DeInit>

    /* ADC1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(ADC_IRQn);
 80047e4:	2012      	movs	r0, #18
 80047e6:	f002 fc1e 	bl	8007026 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 80047ea:	bf00      	nop
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	40012000 	.word	0x40012000
 80047f8:	40023800 	.word	0x40023800
 80047fc:	40020800 	.word	0x40020800
 8004800:	40020000 	.word	0x40020000
 8004804:	40020400 	.word	0x40020400

08004808 <HAL_CRC_MspInit>:
  /* USER CODE END CRC_Init 2 */

}

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a0b      	ldr	r2, [pc, #44]	; (8004844 <HAL_CRC_MspInit+0x3c>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d10d      	bne.n	8004836 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800481a:	2300      	movs	r3, #0
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	4b0a      	ldr	r3, [pc, #40]	; (8004848 <HAL_CRC_MspInit+0x40>)
 8004820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004822:	4a09      	ldr	r2, [pc, #36]	; (8004848 <HAL_CRC_MspInit+0x40>)
 8004824:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004828:	6313      	str	r3, [r2, #48]	; 0x30
 800482a:	4b07      	ldr	r3, [pc, #28]	; (8004848 <HAL_CRC_MspInit+0x40>)
 800482c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8004836:	bf00      	nop
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	40023000 	.word	0x40023000
 8004848:	40023800 	.word	0x40023800

0800484c <HAL_CRC_MspDeInit>:

void HAL_CRC_MspDeInit(CRC_HandleTypeDef* crcHandle)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a07      	ldr	r2, [pc, #28]	; (8004878 <HAL_CRC_MspDeInit+0x2c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d105      	bne.n	800486a <HAL_CRC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN CRC_MspDeInit 0 */

  /* USER CODE END CRC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
 800485e:	4b07      	ldr	r3, [pc, #28]	; (800487c <HAL_CRC_MspDeInit+0x30>)
 8004860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004862:	4a06      	ldr	r2, [pc, #24]	; (800487c <HAL_CRC_MspDeInit+0x30>)
 8004864:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004868:	6313      	str	r3, [r2, #48]	; 0x30
  /* USER CODE BEGIN CRC_MspDeInit 1 */

  /* USER CODE END CRC_MspDeInit 1 */
  }
}
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	40023000 	.word	0x40023000
 800487c:	40023800 	.word	0x40023800

08004880 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004886:	2300      	movs	r3, #0
 8004888:	607b      	str	r3, [r7, #4]
 800488a:	4b09      	ldr	r3, [pc, #36]	; (80048b0 <MX_DMA_Init+0x30>)
 800488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488e:	4a08      	ldr	r2, [pc, #32]	; (80048b0 <MX_DMA_Init+0x30>)
 8004890:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004894:	6313      	str	r3, [r2, #48]	; 0x30
 8004896:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <MX_DMA_Init+0x30>)
 8004898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800489e:	607b      	str	r3, [r7, #4]
 80048a0:	687b      	ldr	r3, [r7, #4]

}
 80048a2:	bf00      	nop
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	40023800 	.word	0x40023800

080048b4 <vApplicationTickHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
	Os_Counter++;
 80048b8:	4b04      	ldr	r3, [pc, #16]	; (80048cc <vApplicationTickHook+0x18>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3301      	adds	r3, #1
 80048be:	4a03      	ldr	r2, [pc, #12]	; (80048cc <vApplicationTickHook+0x18>)
 80048c0:	6013      	str	r3, [r2, #0]
}
 80048c2:	bf00      	nop
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	200002dc 	.word	0x200002dc

080048d0 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
   SystemManager_SetFault(STACK_OVERFLOW_RESET);
 80048da:	200c      	movs	r0, #12
 80048dc:	f00e fe22 	bl	8013524 <SystemManager_SetFault>
   SystemManager_PerformReset();
 80048e0:	f00e fe4a 	bl	8013578 <SystemManager_PerformReset>
}
 80048e4:	bf00      	nop
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
	SystemManager_SetFault(MALLOC_FAILED_RESET);
 80048f0:	200d      	movs	r0, #13
 80048f2:	f00e fe17 	bl	8013524 <SystemManager_SetFault>
	SystemManager_PerformReset();
 80048f6:	f00e fe3f 	bl	8013578 <SystemManager_PerformReset>
}
 80048fa:	bf00      	nop
 80048fc:	bd80      	pop	{r7, pc}
	...

08004900 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Os_SecAlm_AlarmReset */
  Os_SecAlm_AlarmResetHandle = osTimerNew(Os_SecAlm_AlarmReset_Callback, osTimerPeriodic, NULL, &Os_SecAlm_AlarmReset_attributes);
 8004904:	4b5d      	ldr	r3, [pc, #372]	; (8004a7c <MX_FREERTOS_Init+0x17c>)
 8004906:	2200      	movs	r2, #0
 8004908:	2101      	movs	r1, #1
 800490a:	485d      	ldr	r0, [pc, #372]	; (8004a80 <MX_FREERTOS_Init+0x180>)
 800490c:	f00a fa36 	bl	800ed7c <osTimerNew>
 8004910:	4603      	mov	r3, r0
 8004912:	4a5c      	ldr	r2, [pc, #368]	; (8004a84 <MX_FREERTOS_Init+0x184>)
 8004914:	6013      	str	r3, [r2, #0]

  /* creation of Os_CenLoc_LockUnlockSequence_Timer */
  Os_CenLoc_LockUnlockSequence_TimerHandle = osTimerNew(Os_CenLoc_LockUnlockSequence_Timer_Callback, osTimerPeriodic, NULL, &Os_CenLoc_LockUnlockSequence_Timer_attributes);
 8004916:	4b5c      	ldr	r3, [pc, #368]	; (8004a88 <MX_FREERTOS_Init+0x188>)
 8004918:	2200      	movs	r2, #0
 800491a:	2101      	movs	r1, #1
 800491c:	485b      	ldr	r0, [pc, #364]	; (8004a8c <MX_FREERTOS_Init+0x18c>)
 800491e:	f00a fa2d 	bl	800ed7c <osTimerNew>
 8004922:	4603      	mov	r3, r0
 8004924:	4a5a      	ldr	r2, [pc, #360]	; (8004a90 <MX_FREERTOS_Init+0x190>)
 8004926:	6013      	str	r3, [r2, #0]

  /* creation of Os_SecAlmLed_TurnOnCyclic_Timer */
  Os_SecAlmLed_TurnOnCyclic_TimerHandle = osTimerNew(Os_SecAlmLed_TurnOnCyclic_Timer_Callback, osTimerPeriodic, NULL, &Os_SecAlmLed_TurnOnCyclic_Timer_attributes);
 8004928:	4b5a      	ldr	r3, [pc, #360]	; (8004a94 <MX_FREERTOS_Init+0x194>)
 800492a:	2200      	movs	r2, #0
 800492c:	2101      	movs	r1, #1
 800492e:	485a      	ldr	r0, [pc, #360]	; (8004a98 <MX_FREERTOS_Init+0x198>)
 8004930:	f00a fa24 	bl	800ed7c <osTimerNew>
 8004934:	4603      	mov	r3, r0
 8004936:	4a59      	ldr	r2, [pc, #356]	; (8004a9c <MX_FREERTOS_Init+0x19c>)
 8004938:	6013      	str	r3, [r2, #0]

  /* creation of Os_SecAlmLedTurnOn_Timer */
  Os_SecAlmLedTurnOn_TimerHandle = osTimerNew(Os_SecAlmLedTurnOn_Timer_Callback, osTimerPeriodic, NULL, &Os_SecAlmLedTurnOn_Timer_attributes);
 800493a:	4b59      	ldr	r3, [pc, #356]	; (8004aa0 <MX_FREERTOS_Init+0x1a0>)
 800493c:	2200      	movs	r2, #0
 800493e:	2101      	movs	r1, #1
 8004940:	4858      	ldr	r0, [pc, #352]	; (8004aa4 <MX_FREERTOS_Init+0x1a4>)
 8004942:	f00a fa1b 	bl	800ed7c <osTimerNew>
 8004946:	4603      	mov	r3, r0
 8004948:	4a57      	ldr	r2, [pc, #348]	; (8004aa8 <MX_FREERTOS_Init+0x1a8>)
 800494a:	6013      	str	r3, [r2, #0]

  /* creation of Os_FollowMeHome_Timer */
  Os_FollowMeHome_TimerHandle = osTimerNew(Os_FollowMeHome_Timer_Callback, osTimerPeriodic, NULL, &Os_FollowMeHome_Timer_attributes);
 800494c:	4b57      	ldr	r3, [pc, #348]	; (8004aac <MX_FREERTOS_Init+0x1ac>)
 800494e:	2200      	movs	r2, #0
 8004950:	2101      	movs	r1, #1
 8004952:	4857      	ldr	r0, [pc, #348]	; (8004ab0 <MX_FREERTOS_Init+0x1b0>)
 8004954:	f00a fa12 	bl	800ed7c <osTimerNew>
 8004958:	4603      	mov	r3, r0
 800495a:	4a56      	ldr	r2, [pc, #344]	; (8004ab4 <MX_FREERTOS_Init+0x1b4>)
 800495c:	6013      	str	r3, [r2, #0]

  /* creation of Os_TurnSignals_Timer */
  Os_TurnSignals_TimerHandle = osTimerNew(Os_TurnSignals_Timer_Callback, osTimerPeriodic, NULL, &Os_TurnSignals_Timer_attributes);
 800495e:	4b56      	ldr	r3, [pc, #344]	; (8004ab8 <MX_FREERTOS_Init+0x1b8>)
 8004960:	2200      	movs	r2, #0
 8004962:	2101      	movs	r1, #1
 8004964:	4855      	ldr	r0, [pc, #340]	; (8004abc <MX_FREERTOS_Init+0x1bc>)
 8004966:	f00a fa09 	bl	800ed7c <osTimerNew>
 800496a:	4603      	mov	r3, r0
 800496c:	4a54      	ldr	r2, [pc, #336]	; (8004ac0 <MX_FREERTOS_Init+0x1c0>)
 800496e:	6013      	str	r3, [r2, #0]

  /* creation of Os_SecAlmAlarm_Timer */
  Os_SecAlmAlarm_TimerHandle = osTimerNew(Os_SecAlmAlarm_Timer_Callback, osTimerPeriodic, NULL, &Os_SecAlmAlarm_Timer_attributes);
 8004970:	4b54      	ldr	r3, [pc, #336]	; (8004ac4 <MX_FREERTOS_Init+0x1c4>)
 8004972:	2200      	movs	r2, #0
 8004974:	2101      	movs	r1, #1
 8004976:	4854      	ldr	r0, [pc, #336]	; (8004ac8 <MX_FREERTOS_Init+0x1c8>)
 8004978:	f00a fa00 	bl	800ed7c <osTimerNew>
 800497c:	4603      	mov	r3, r0
 800497e:	4a53      	ldr	r2, [pc, #332]	; (8004acc <MX_FREERTOS_Init+0x1cc>)
 8004980:	6013      	str	r3, [r2, #0]

  /* creation of Os_PdcR_Buzzer_Timer */
  Os_PdcR_Buzzer_TimerHandle = osTimerNew(Os_PdcR_Buzzer_Timer_Callback, osTimerOnce, NULL, &Os_PdcR_Buzzer_Timer_attributes);
 8004982:	4b53      	ldr	r3, [pc, #332]	; (8004ad0 <MX_FREERTOS_Init+0x1d0>)
 8004984:	2200      	movs	r2, #0
 8004986:	2100      	movs	r1, #0
 8004988:	4852      	ldr	r0, [pc, #328]	; (8004ad4 <MX_FREERTOS_Init+0x1d4>)
 800498a:	f00a f9f7 	bl	800ed7c <osTimerNew>
 800498e:	4603      	mov	r3, r0
 8004990:	4a51      	ldr	r2, [pc, #324]	; (8004ad8 <MX_FREERTOS_Init+0x1d8>)
 8004992:	6013      	str	r3, [r2, #0]

  /* creation of Os_PdcF_Buzzer_Timer */
  Os_PdcF_Buzzer_TimerHandle = osTimerNew(Os_PdcF_Buzzer_Timer_Callback, osTimerOnce, NULL, &Os_PdcF_Buzzer_Timer_attributes);
 8004994:	4b51      	ldr	r3, [pc, #324]	; (8004adc <MX_FREERTOS_Init+0x1dc>)
 8004996:	2200      	movs	r2, #0
 8004998:	2100      	movs	r1, #0
 800499a:	4851      	ldr	r0, [pc, #324]	; (8004ae0 <MX_FREERTOS_Init+0x1e0>)
 800499c:	f00a f9ee 	bl	800ed7c <osTimerNew>
 80049a0:	4603      	mov	r3, r0
 80049a2:	4a50      	ldr	r2, [pc, #320]	; (8004ae4 <MX_FREERTOS_Init+0x1e4>)
 80049a4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_QUEUES */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of OS_Init */
  OS_InitHandle = osThreadNew(OS_TASK_OS_INIT, NULL, &OS_Init_attributes);
 80049a6:	4a50      	ldr	r2, [pc, #320]	; (8004ae8 <MX_FREERTOS_Init+0x1e8>)
 80049a8:	2100      	movs	r1, #0
 80049aa:	4850      	ldr	r0, [pc, #320]	; (8004aec <MX_FREERTOS_Init+0x1ec>)
 80049ac:	f00a f93e 	bl	800ec2c <osThreadNew>
 80049b0:	4603      	mov	r3, r0
 80049b2:	4a4f      	ldr	r2, [pc, #316]	; (8004af0 <MX_FREERTOS_Init+0x1f0>)
 80049b4:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_APPL_Main */
  ASIL_APPL_MainHandle = osThreadNew(OS_TASK_ASIL_APPL_Main, NULL, &ASIL_APPL_Main_attributes);
 80049b6:	4a4f      	ldr	r2, [pc, #316]	; (8004af4 <MX_FREERTOS_Init+0x1f4>)
 80049b8:	2100      	movs	r1, #0
 80049ba:	484f      	ldr	r0, [pc, #316]	; (8004af8 <MX_FREERTOS_Init+0x1f8>)
 80049bc:	f00a f936 	bl	800ec2c <osThreadNew>
 80049c0:	4603      	mov	r3, r0
 80049c2:	4a4e      	ldr	r2, [pc, #312]	; (8004afc <MX_FREERTOS_Init+0x1fc>)
 80049c4:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_APPL_PostMain */
  ASIL_APPL_PostMainHandle = osThreadNew(OS_TASK_ASIL_APPL_PostMain, NULL, &ASIL_APPL_PostMain_attributes);
 80049c6:	4a4e      	ldr	r2, [pc, #312]	; (8004b00 <MX_FREERTOS_Init+0x200>)
 80049c8:	2100      	movs	r1, #0
 80049ca:	484e      	ldr	r0, [pc, #312]	; (8004b04 <MX_FREERTOS_Init+0x204>)
 80049cc:	f00a f92e 	bl	800ec2c <osThreadNew>
 80049d0:	4603      	mov	r3, r0
 80049d2:	4a4d      	ldr	r2, [pc, #308]	; (8004b08 <MX_FREERTOS_Init+0x208>)
 80049d4:	6013      	str	r3, [r2, #0]

  /* creation of QM_APPL_PreMain */
  QM_APPL_PreMainHandle = osThreadNew(OS_TASK_QM_APPL_PreMain, NULL, &QM_APPL_PreMain_attributes);
 80049d6:	4a4d      	ldr	r2, [pc, #308]	; (8004b0c <MX_FREERTOS_Init+0x20c>)
 80049d8:	2100      	movs	r1, #0
 80049da:	484d      	ldr	r0, [pc, #308]	; (8004b10 <MX_FREERTOS_Init+0x210>)
 80049dc:	f00a f926 	bl	800ec2c <osThreadNew>
 80049e0:	4603      	mov	r3, r0
 80049e2:	4a4c      	ldr	r2, [pc, #304]	; (8004b14 <MX_FREERTOS_Init+0x214>)
 80049e4:	6013      	str	r3, [r2, #0]

  /* creation of QM_APPL_Main */
  QM_APPL_MainHandle = osThreadNew(OS_TASK_QM_APPL_Main, NULL, &QM_APPL_Main_attributes);
 80049e6:	4a4c      	ldr	r2, [pc, #304]	; (8004b18 <MX_FREERTOS_Init+0x218>)
 80049e8:	2100      	movs	r1, #0
 80049ea:	484c      	ldr	r0, [pc, #304]	; (8004b1c <MX_FREERTOS_Init+0x21c>)
 80049ec:	f00a f91e 	bl	800ec2c <osThreadNew>
 80049f0:	4603      	mov	r3, r0
 80049f2:	4a4b      	ldr	r2, [pc, #300]	; (8004b20 <MX_FREERTOS_Init+0x220>)
 80049f4:	6013      	str	r3, [r2, #0]

  /* creation of QM_APPL_PostMain */
  QM_APPL_PostMainHandle = osThreadNew(OS_TASK_QM_APPL_PostMain, NULL, &QM_APPL_PostMain_attributes);
 80049f6:	4a4b      	ldr	r2, [pc, #300]	; (8004b24 <MX_FREERTOS_Init+0x224>)
 80049f8:	2100      	movs	r1, #0
 80049fa:	484b      	ldr	r0, [pc, #300]	; (8004b28 <MX_FREERTOS_Init+0x228>)
 80049fc:	f00a f916 	bl	800ec2c <osThreadNew>
 8004a00:	4603      	mov	r3, r0
 8004a02:	4a4a      	ldr	r2, [pc, #296]	; (8004b2c <MX_FREERTOS_Init+0x22c>)
 8004a04:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_BSW_PreMain */
  ASIL_BSW_PreMainHandle = osThreadNew(OS_TASK_ASIL_BSW_PreMain, NULL, &ASIL_BSW_PreMain_attributes);
 8004a06:	4a4a      	ldr	r2, [pc, #296]	; (8004b30 <MX_FREERTOS_Init+0x230>)
 8004a08:	2100      	movs	r1, #0
 8004a0a:	484a      	ldr	r0, [pc, #296]	; (8004b34 <MX_FREERTOS_Init+0x234>)
 8004a0c:	f00a f90e 	bl	800ec2c <osThreadNew>
 8004a10:	4603      	mov	r3, r0
 8004a12:	4a49      	ldr	r2, [pc, #292]	; (8004b38 <MX_FREERTOS_Init+0x238>)
 8004a14:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_BSW_Main */
  ASIL_BSW_MainHandle = osThreadNew(OS_TASK_ASIL_BSW_Main, NULL, &ASIL_BSW_Main_attributes);
 8004a16:	4a49      	ldr	r2, [pc, #292]	; (8004b3c <MX_FREERTOS_Init+0x23c>)
 8004a18:	2100      	movs	r1, #0
 8004a1a:	4849      	ldr	r0, [pc, #292]	; (8004b40 <MX_FREERTOS_Init+0x240>)
 8004a1c:	f00a f906 	bl	800ec2c <osThreadNew>
 8004a20:	4603      	mov	r3, r0
 8004a22:	4a48      	ldr	r2, [pc, #288]	; (8004b44 <MX_FREERTOS_Init+0x244>)
 8004a24:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_BSW_PostMain */
  ASIL_BSW_PostMainHandle = osThreadNew(OS_TASK_ASIL_BSW_PostMain, NULL, &ASIL_BSW_PostMain_attributes);
 8004a26:	4a48      	ldr	r2, [pc, #288]	; (8004b48 <MX_FREERTOS_Init+0x248>)
 8004a28:	2100      	movs	r1, #0
 8004a2a:	4848      	ldr	r0, [pc, #288]	; (8004b4c <MX_FREERTOS_Init+0x24c>)
 8004a2c:	f00a f8fe 	bl	800ec2c <osThreadNew>
 8004a30:	4603      	mov	r3, r0
 8004a32:	4a47      	ldr	r2, [pc, #284]	; (8004b50 <MX_FREERTOS_Init+0x250>)
 8004a34:	6013      	str	r3, [r2, #0]

  /* creation of QM_BSW_PreMain */
  QM_BSW_PreMainHandle = osThreadNew(OS_TASK_QM_BSW_PreMain, NULL, &QM_BSW_PreMain_attributes);
 8004a36:	4a47      	ldr	r2, [pc, #284]	; (8004b54 <MX_FREERTOS_Init+0x254>)
 8004a38:	2100      	movs	r1, #0
 8004a3a:	4847      	ldr	r0, [pc, #284]	; (8004b58 <MX_FREERTOS_Init+0x258>)
 8004a3c:	f00a f8f6 	bl	800ec2c <osThreadNew>
 8004a40:	4603      	mov	r3, r0
 8004a42:	4a46      	ldr	r2, [pc, #280]	; (8004b5c <MX_FREERTOS_Init+0x25c>)
 8004a44:	6013      	str	r3, [r2, #0]

  /* creation of QM_BSW_Main */
  QM_BSW_MainHandle = osThreadNew(OS_TASK_QM_BSW_Main, NULL, &QM_BSW_Main_attributes);
 8004a46:	4a46      	ldr	r2, [pc, #280]	; (8004b60 <MX_FREERTOS_Init+0x260>)
 8004a48:	2100      	movs	r1, #0
 8004a4a:	4846      	ldr	r0, [pc, #280]	; (8004b64 <MX_FREERTOS_Init+0x264>)
 8004a4c:	f00a f8ee 	bl	800ec2c <osThreadNew>
 8004a50:	4603      	mov	r3, r0
 8004a52:	4a45      	ldr	r2, [pc, #276]	; (8004b68 <MX_FREERTOS_Init+0x268>)
 8004a54:	6013      	str	r3, [r2, #0]

  /* creation of QM_BSW_PostMain */
  QM_BSW_PostMainHandle = osThreadNew(OS_TASK_QM_BSW_PostMain, NULL, &QM_BSW_PostMain_attributes);
 8004a56:	4a45      	ldr	r2, [pc, #276]	; (8004b6c <MX_FREERTOS_Init+0x26c>)
 8004a58:	2100      	movs	r1, #0
 8004a5a:	4845      	ldr	r0, [pc, #276]	; (8004b70 <MX_FREERTOS_Init+0x270>)
 8004a5c:	f00a f8e6 	bl	800ec2c <osThreadNew>
 8004a60:	4603      	mov	r3, r0
 8004a62:	4a44      	ldr	r2, [pc, #272]	; (8004b74 <MX_FREERTOS_Init+0x274>)
 8004a64:	6013      	str	r3, [r2, #0]

  /* creation of I2C_ISR */
  I2C_ISRHandle = osThreadNew(OS_TASK_I2C_ISR, NULL, &I2C_ISR_attributes);
 8004a66:	4a44      	ldr	r2, [pc, #272]	; (8004b78 <MX_FREERTOS_Init+0x278>)
 8004a68:	2100      	movs	r1, #0
 8004a6a:	4844      	ldr	r0, [pc, #272]	; (8004b7c <MX_FREERTOS_Init+0x27c>)
 8004a6c:	f00a f8de 	bl	800ec2c <osThreadNew>
 8004a70:	4603      	mov	r3, r0
 8004a72:	4a43      	ldr	r2, [pc, #268]	; (8004b80 <MX_FREERTOS_Init+0x280>)
 8004a74:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* USER CODE END RTOS_EVENTS */

}
 8004a76:	bf00      	nop
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	080148f8 	.word	0x080148f8
 8004a80:	08004d1d 	.word	0x08004d1d
 8004a84:	20000354 	.word	0x20000354
 8004a88:	08014908 	.word	0x08014908
 8004a8c:	08004d35 	.word	0x08004d35
 8004a90:	20000358 	.word	0x20000358
 8004a94:	08014918 	.word	0x08014918
 8004a98:	08004d9d 	.word	0x08004d9d
 8004a9c:	2000035c 	.word	0x2000035c
 8004aa0:	08014928 	.word	0x08014928
 8004aa4:	08004dc5 	.word	0x08004dc5
 8004aa8:	20000360 	.word	0x20000360
 8004aac:	08014938 	.word	0x08014938
 8004ab0:	08004ded 	.word	0x08004ded
 8004ab4:	20000364 	.word	0x20000364
 8004ab8:	08014948 	.word	0x08014948
 8004abc:	08004e15 	.word	0x08004e15
 8004ac0:	20000368 	.word	0x20000368
 8004ac4:	08014958 	.word	0x08014958
 8004ac8:	08004e85 	.word	0x08004e85
 8004acc:	2000036c 	.word	0x2000036c
 8004ad0:	08014968 	.word	0x08014968
 8004ad4:	08004ead 	.word	0x08004ead
 8004ad8:	20000370 	.word	0x20000370
 8004adc:	08014978 	.word	0x08014978
 8004ae0:	08004ec9 	.word	0x08004ec9
 8004ae4:	20000374 	.word	0x20000374
 8004ae8:	08014724 	.word	0x08014724
 8004aec:	08004b85 	.word	0x08004b85
 8004af0:	20000320 	.word	0x20000320
 8004af4:	08014748 	.word	0x08014748
 8004af8:	08004b99 	.word	0x08004b99
 8004afc:	20000324 	.word	0x20000324
 8004b00:	0801476c 	.word	0x0801476c
 8004b04:	08004bc1 	.word	0x08004bc1
 8004b08:	20000328 	.word	0x20000328
 8004b0c:	08014790 	.word	0x08014790
 8004b10:	08004bdd 	.word	0x08004bdd
 8004b14:	2000032c 	.word	0x2000032c
 8004b18:	080147b4 	.word	0x080147b4
 8004b1c:	08004bf9 	.word	0x08004bf9
 8004b20:	20000330 	.word	0x20000330
 8004b24:	080147d8 	.word	0x080147d8
 8004b28:	08004c15 	.word	0x08004c15
 8004b2c:	20000334 	.word	0x20000334
 8004b30:	080147fc 	.word	0x080147fc
 8004b34:	08004c39 	.word	0x08004c39
 8004b38:	20000338 	.word	0x20000338
 8004b3c:	08014820 	.word	0x08014820
 8004b40:	08004c55 	.word	0x08004c55
 8004b44:	2000033c 	.word	0x2000033c
 8004b48:	08014844 	.word	0x08014844
 8004b4c:	08004c75 	.word	0x08004c75
 8004b50:	20000340 	.word	0x20000340
 8004b54:	08014868 	.word	0x08014868
 8004b58:	08004c91 	.word	0x08004c91
 8004b5c:	20000344 	.word	0x20000344
 8004b60:	0801488c 	.word	0x0801488c
 8004b64:	08004cb5 	.word	0x08004cb5
 8004b68:	20000348 	.word	0x20000348
 8004b6c:	080148b0 	.word	0x080148b0
 8004b70:	08004cd1 	.word	0x08004cd1
 8004b74:	2000034c 	.word	0x2000034c
 8004b78:	080148d4 	.word	0x080148d4
 8004b7c:	08004ced 	.word	0x08004ced
 8004b80:	20000350 	.word	0x20000350

08004b84 <OS_TASK_OS_INIT>:

/* USER CODE BEGIN Header_OS_TASK_OS_INIT */
/* USER CODE END Header_OS_TASK_OS_INIT */
void OS_TASK_OS_INIT(void *argument)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_OS_INIT */
	for(;;)
	{
		EcuM_DriverInit();
 8004b8c:	f00e fb3a 	bl	8013204 <EcuM_DriverInit>
		vTaskSuspend(NULL);
 8004b90:	2000      	movs	r0, #0
 8004b92:	f00b fcc1 	bl	8010518 <vTaskSuspend>
		EcuM_DriverInit();
 8004b96:	e7f9      	b.n	8004b8c <OS_TASK_OS_INIT+0x8>

08004b98 <OS_TASK_ASIL_APPL_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_APPL_Main */
/* USER CODE END Header_OS_TASK_ASIL_APPL_Main */
void OS_TASK_ASIL_APPL_Main(void *argument)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_APPL_Main */
	for(;;)
	{
		Rte_Runnable_Btc_MainFunction();
 8004ba0:	f00d fc5e 	bl	8012460 <Rte_Runnable_Btc_MainFunction>
		Rte_Runnable_CenLoc_MainFunction();
 8004ba4:	f00d fc62 	bl	801246c <Rte_Runnable_CenLoc_MainFunction>
		Rte_Runnable_ExtLights_MainFunction();
 8004ba8:	f00d fc66 	bl	8012478 <Rte_Runnable_ExtLights_MainFunction>
		Rte_Runnable_IntLights_MainFunction();
 8004bac:	f00d fc6a 	bl	8012484 <Rte_Runnable_IntLights_MainFunction>
		vTaskDelayUntil(&ASIL_APPL_Main, pdMS_TO_TICKS(5));
 8004bb0:	2105      	movs	r1, #5
 8004bb2:	4802      	ldr	r0, [pc, #8]	; (8004bbc <OS_TASK_ASIL_APPL_Main+0x24>)
 8004bb4:	f00b fc32 	bl	801041c <vTaskDelayUntil>
		Rte_Runnable_Btc_MainFunction();
 8004bb8:	e7f2      	b.n	8004ba0 <OS_TASK_ASIL_APPL_Main+0x8>
 8004bba:	bf00      	nop
 8004bbc:	200002f4 	.word	0x200002f4

08004bc0 <OS_TASK_ASIL_APPL_PostMain>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_APPL_PostMain */
/* USER CODE END Header_OS_TASK_ASIL_APPL_PostMain */
void OS_TASK_ASIL_APPL_PostMain(void *argument)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_APPL_PostMain */
	for(;;)
	{
		Rte_Runnable_DiagCtrl_MainFunction();
 8004bc8:	f00d fcb3 	bl	8012532 <Rte_Runnable_DiagCtrl_MainFunction>
		vTaskDelayUntil(&ASIL_APPL_PostMain, pdMS_TO_TICKS(1000));
 8004bcc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004bd0:	4801      	ldr	r0, [pc, #4]	; (8004bd8 <OS_TASK_ASIL_APPL_PostMain+0x18>)
 8004bd2:	f00b fc23 	bl	801041c <vTaskDelayUntil>
		Rte_Runnable_DiagCtrl_MainFunction();
 8004bd6:	e7f7      	b.n	8004bc8 <OS_TASK_ASIL_APPL_PostMain+0x8>
 8004bd8:	200002f8 	.word	0x200002f8

08004bdc <OS_TASK_QM_APPL_PreMain>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_APPL_PreMain */
/* USER CODE END Header_OS_TASK_QM_APPL_PreMain */
void OS_TASK_QM_APPL_PreMain(void *argument)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_APPL_PreMain */
	for(;;)
	{
		Rte_Runnable_SecAlm_MainFunction();
 8004be4:	f00d fc54 	bl	8012490 <Rte_Runnable_SecAlm_MainFunction>
		vTaskDelayUntil(&QM_APPL_PreMain, pdMS_TO_TICKS(5));
 8004be8:	2105      	movs	r1, #5
 8004bea:	4802      	ldr	r0, [pc, #8]	; (8004bf4 <OS_TASK_QM_APPL_PreMain+0x18>)
 8004bec:	f00b fc16 	bl	801041c <vTaskDelayUntil>
		Rte_Runnable_SecAlm_MainFunction();
 8004bf0:	e7f8      	b.n	8004be4 <OS_TASK_QM_APPL_PreMain+0x8>
 8004bf2:	bf00      	nop
 8004bf4:	200002fc 	.word	0x200002fc

08004bf8 <OS_TASK_QM_APPL_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_APPL_Main */
/* USER CODE END Header_OS_TASK_QM_APPL_Main */
void OS_TASK_QM_APPL_Main(void *argument)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_APPL_Main */
	for(;;)
	{
		Rte_Runnable_Pdc_MainFunction();
 8004c00:	f00d fca3 	bl	801254a <Rte_Runnable_Pdc_MainFunction>
		vTaskDelayUntil(&QM_APPL_Main, pdMS_TO_TICKS(100));
 8004c04:	2164      	movs	r1, #100	; 0x64
 8004c06:	4802      	ldr	r0, [pc, #8]	; (8004c10 <OS_TASK_QM_APPL_Main+0x18>)
 8004c08:	f00b fc08 	bl	801041c <vTaskDelayUntil>
		Rte_Runnable_Pdc_MainFunction();
 8004c0c:	e7f8      	b.n	8004c00 <OS_TASK_QM_APPL_Main+0x8>
 8004c0e:	bf00      	nop
 8004c10:	20000300 	.word	0x20000300

08004c14 <OS_TASK_QM_APPL_PostMain>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_APPL_PostMain */
/* USER CODE END Header_OS_TASK_QM_APPL_PostMain */
void OS_TASK_QM_APPL_PostMain(void *argument)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_APPL_PostMain */
	for(;;)
	{
		vTaskResume(I2C_ISRHandle);
 8004c1c:	4b04      	ldr	r3, [pc, #16]	; (8004c30 <OS_TASK_QM_APPL_PostMain+0x1c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f00b fd21 	bl	8010668 <vTaskResume>
		vTaskDelayUntil(&QM_APPL_PostMain, pdMS_TO_TICKS(250));
 8004c26:	21fa      	movs	r1, #250	; 0xfa
 8004c28:	4802      	ldr	r0, [pc, #8]	; (8004c34 <OS_TASK_QM_APPL_PostMain+0x20>)
 8004c2a:	f00b fbf7 	bl	801041c <vTaskDelayUntil>
		vTaskResume(I2C_ISRHandle);
 8004c2e:	e7f5      	b.n	8004c1c <OS_TASK_QM_APPL_PostMain+0x8>
 8004c30:	20000350 	.word	0x20000350
 8004c34:	20000304 	.word	0x20000304

08004c38 <OS_TASK_ASIL_BSW_PreMain>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_BSW_PreMain */
/* USER CODE END Header_OS_TASK_ASIL_BSW_PreMain */
void OS_TASK_ASIL_BSW_PreMain(void *argument)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_BSW_PreMain */
	for(;;)
	{
		Rte_Runnable_Wdg_MainFunction();
 8004c40:	f00d fa74 	bl	801212c <Rte_Runnable_Wdg_MainFunction>
		vTaskDelayUntil(&ASIL_BSW_PreMain, pdMS_TO_TICKS(5));
 8004c44:	2105      	movs	r1, #5
 8004c46:	4802      	ldr	r0, [pc, #8]	; (8004c50 <OS_TASK_ASIL_BSW_PreMain+0x18>)
 8004c48:	f00b fbe8 	bl	801041c <vTaskDelayUntil>
		Rte_Runnable_Wdg_MainFunction();
 8004c4c:	e7f8      	b.n	8004c40 <OS_TASK_ASIL_BSW_PreMain+0x8>
 8004c4e:	bf00      	nop
 8004c50:	20000308 	.word	0x20000308

08004c54 <OS_TASK_ASIL_BSW_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_BSW_Main */
/* USER CODE END Header_OS_TASK_ASIL_BSW_Main */
void OS_TASK_ASIL_BSW_Main(void *argument)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_BSW_Main */
	for(;;)
	{
		Rte_Runnable_Uart_MainFunction();
 8004c5c:	f00d fa78 	bl	8012150 <Rte_Runnable_Uart_MainFunction>
		Rte_Runnable_Crc_MainFunction();
 8004c60:	f00d fa5e 	bl	8012120 <Rte_Runnable_Crc_MainFunction>
#if(CAN_SPI_COMMUNICATION_ENABLE == STD_ON)
		Rte_Runnable_Spi_MainFunction();
		Rte_Runnable_Can_MainFunction();
#endif
		vTaskDelayUntil(&ASIL_BSW_Main, pdMS_TO_TICKS(5));
 8004c64:	2105      	movs	r1, #5
 8004c66:	4802      	ldr	r0, [pc, #8]	; (8004c70 <OS_TASK_ASIL_BSW_Main+0x1c>)
 8004c68:	f00b fbd8 	bl	801041c <vTaskDelayUntil>
		Rte_Runnable_Uart_MainFunction();
 8004c6c:	e7f6      	b.n	8004c5c <OS_TASK_ASIL_BSW_Main+0x8>
 8004c6e:	bf00      	nop
 8004c70:	2000030c 	.word	0x2000030c

08004c74 <OS_TASK_ASIL_BSW_PostMain>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_BSW_PostMain */
/* USER CODE END Header_OS_TASK_ASIL_BSW_PostMain */
void OS_TASK_ASIL_BSW_PostMain(void *argument)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_BSW_PostMain */
	for(;;)
	{
		Rte_Runnable_Tim_MainFunction();
 8004c7c:	f00d fa62 	bl	8012144 <Rte_Runnable_Tim_MainFunction>
		vTaskDelayUntil(&ASIL_BSW_PostMain, pdMS_TO_TICKS(5));
 8004c80:	2105      	movs	r1, #5
 8004c82:	4802      	ldr	r0, [pc, #8]	; (8004c8c <OS_TASK_ASIL_BSW_PostMain+0x18>)
 8004c84:	f00b fbca 	bl	801041c <vTaskDelayUntil>
		Rte_Runnable_Tim_MainFunction();
 8004c88:	e7f8      	b.n	8004c7c <OS_TASK_ASIL_BSW_PostMain+0x8>
 8004c8a:	bf00      	nop
 8004c8c:	20000310 	.word	0x20000310

08004c90 <OS_TASK_QM_BSW_PreMain>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_BSW_PreMain */
/* USER CODE END Header_OS_TASK_QM_BSW_PreMain */
void OS_TASK_QM_BSW_PreMain(void *argument)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_BSW_PreMain */
	for(;;)
	{
		Rte_Runnable_EcuM_MainFunction();
 8004c98:	f00d fa36 	bl	8012108 <Rte_Runnable_EcuM_MainFunction>
		Rte_Runnable_SystemManager_MainFunction();
 8004c9c:	f00d fa3a 	bl	8012114 <Rte_Runnable_SystemManager_MainFunction>
		Rte_Runnable_Adc_MainFunction();
 8004ca0:	f00d fa4a 	bl	8012138 <Rte_Runnable_Adc_MainFunction>
		vTaskDelayUntil(&QM_BSW_PreMain, pdMS_TO_TICKS(5));
 8004ca4:	2105      	movs	r1, #5
 8004ca6:	4802      	ldr	r0, [pc, #8]	; (8004cb0 <OS_TASK_QM_BSW_PreMain+0x20>)
 8004ca8:	f00b fbb8 	bl	801041c <vTaskDelayUntil>
		Rte_Runnable_EcuM_MainFunction();
 8004cac:	e7f4      	b.n	8004c98 <OS_TASK_QM_BSW_PreMain+0x8>
 8004cae:	bf00      	nop
 8004cb0:	20000314 	.word	0x20000314

08004cb4 <OS_TASK_QM_BSW_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_BSW_Main */
/* USER CODE END Header_OS_TASK_QM_BSW_Main */
void OS_TASK_QM_BSW_Main(void *argument)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_BSW_Main */
	for(;;)
	{
		Rte_Runnable_I2c_MainFunction();
 8004cbc:	f00d fc4b 	bl	8012556 <Rte_Runnable_I2c_MainFunction>
		vTaskDelayUntil(&QM_BSW_Main, pdMS_TO_TICKS(5));
 8004cc0:	2105      	movs	r1, #5
 8004cc2:	4802      	ldr	r0, [pc, #8]	; (8004ccc <OS_TASK_QM_BSW_Main+0x18>)
 8004cc4:	f00b fbaa 	bl	801041c <vTaskDelayUntil>
		Rte_Runnable_I2c_MainFunction();
 8004cc8:	e7f8      	b.n	8004cbc <OS_TASK_QM_BSW_Main+0x8>
 8004cca:	bf00      	nop
 8004ccc:	20000318 	.word	0x20000318

08004cd0 <OS_TASK_QM_BSW_PostMain>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_BSW_PostMain */
/* USER CODE END Header_OS_TASK_QM_BSW_PostMain */
void OS_TASK_QM_BSW_PostMain(void *argument)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_BSW_PostMain */
  for(;;)
  {
	  Rte_Runnable_Dem_MainFunction();
 8004cd8:	f00d fc43 	bl	8012562 <Rte_Runnable_Dem_MainFunction>
	  vTaskDelayUntil(&QM_BSW_PostMain, pdMS_TO_TICKS(1000));
 8004cdc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004ce0:	4801      	ldr	r0, [pc, #4]	; (8004ce8 <OS_TASK_QM_BSW_PostMain+0x18>)
 8004ce2:	f00b fb9b 	bl	801041c <vTaskDelayUntil>
	  Rte_Runnable_Dem_MainFunction();
 8004ce6:	e7f7      	b.n	8004cd8 <OS_TASK_QM_BSW_PostMain+0x8>
 8004ce8:	2000031c 	.word	0x2000031c

08004cec <OS_TASK_I2C_ISR>:
}

/* USER CODE BEGIN Header_OS_TASK_I2C_ISR */
/* USER CODE END Header_OS_TASK_I2C_ISR */
void OS_TASK_I2C_ISR(void *argument)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_I2C_ISR */
	for(;;)
	{
		if(I2c_Lcd_Init_Flag == STD_LOW)
 8004cf4:	4b08      	ldr	r3, [pc, #32]	; (8004d18 <OS_TASK_I2C_ISR+0x2c>)
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d102      	bne.n	8004d02 <OS_TASK_I2C_ISR+0x16>
		{
			I2cLcd_Init();
 8004cfc:	f7ff f996 	bl	800402c <I2cLcd_Init>
 8004d00:	e005      	b.n	8004d0e <OS_TASK_I2C_ISR+0x22>
		}
		else if(I2c_Lcd_Init_Flag == STD_HIGH)
 8004d02:	4b05      	ldr	r3, [pc, #20]	; (8004d18 <OS_TASK_I2C_ISR+0x2c>)
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d101      	bne.n	8004d0e <OS_TASK_I2C_ISR+0x22>
		{
			Rte_Runnable_Hvac_MainFunction();
 8004d0a:	f00d fc18 	bl	801253e <Rte_Runnable_Hvac_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		vTaskSuspend(NULL);
 8004d0e:	2000      	movs	r0, #0
 8004d10:	f00b fc02 	bl	8010518 <vTaskSuspend>
		if(I2c_Lcd_Init_Flag == STD_LOW)
 8004d14:	e7ee      	b.n	8004cf4 <OS_TASK_I2C_ISR+0x8>
 8004d16:	bf00      	nop
 8004d18:	200002f1 	.word	0x200002f1

08004d1c <Os_SecAlm_AlarmReset_Callback>:
  /* USER CODE END OS_TASK_I2C_ISR */
}

/* Os_SecAlm_AlarmReset_Callback function */
void Os_SecAlm_AlarmReset_Callback(void *argument)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlm_AlarmReset_Callback */
	/* Reset the security alarm counter trigger. */
	Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter((uint16*)0);
 8004d24:	2000      	movs	r0, #0
 8004d26:	f00d fb8b 	bl	8012440 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter>
  /* USER CODE END Os_SecAlm_AlarmReset_Callback */
}
 8004d2a:	bf00      	nop
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
	...

08004d34 <Os_CenLoc_LockUnlockSequence_Timer_Callback>:

/* Os_CenLoc_LockUnlockSequence_Timer_Callback function */
void Os_CenLoc_LockUnlockSequence_Timer_Callback(void *argument)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_CenLoc_LockUnlockSequence_Timer_Callback */
	/* If the counter variable for the lock unlock turn signals sequence is less than or equal to 6
	 * Then if there is either a lock or an unlock sequence increase the counter to process the states
	 * in the application. */
	if(Os_LockUnlockSequence_Counter <= 6
 8004d3c:	4b14      	ldr	r3, [pc, #80]	; (8004d90 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	2b06      	cmp	r3, #6
 8004d42:	d819      	bhi.n	8004d78 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
		&& ((Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_LOW && Rte_P_CenLoc_CenLocPort_CenLoc_PreviousStateFlag == STD_HIGH)
 8004d44:	4b13      	ldr	r3, [pc, #76]	; (8004d94 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x60>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d103      	bne.n	8004d54 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x20>
 8004d4c:	4b12      	ldr	r3, [pc, #72]	; (8004d98 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x64>)
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d007      	beq.n	8004d64 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x30>
		|| (Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH && Rte_P_CenLoc_CenLocPort_CenLoc_PreviousStateFlag == STD_LOW)))
 8004d54:	4b0f      	ldr	r3, [pc, #60]	; (8004d94 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x60>)
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d10d      	bne.n	8004d78 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
 8004d5c:	4b0e      	ldr	r3, [pc, #56]	; (8004d98 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x64>)
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d109      	bne.n	8004d78 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
	{
		Os_LockUnlockSequence_Counter = Os_LockUnlockSequence_Counter + 1;
 8004d64:	4b0a      	ldr	r3, [pc, #40]	; (8004d90 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	4b08      	ldr	r3, [pc, #32]	; (8004d90 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8004d6e:	701a      	strb	r2, [r3, #0]
		Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter(&Os_LockUnlockSequence_Counter);
 8004d70:	4807      	ldr	r0, [pc, #28]	; (8004d90 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8004d72:	f00d f949 	bl	8012008 <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter>
 8004d76:	e006      	b.n	8004d86 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x52>
	}
	else
	{
		/* Update the counter with out of bounds value to prevent unexpected triggering. */
		Os_LockUnlockSequence_Counter = 7;
 8004d78:	4b05      	ldr	r3, [pc, #20]	; (8004d90 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8004d7a:	2207      	movs	r2, #7
 8004d7c:	701a      	strb	r2, [r3, #0]
		Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter(&Os_LockUnlockSequence_Counter);
 8004d7e:	4804      	ldr	r0, [pc, #16]	; (8004d90 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8004d80:	f00d f942 	bl	8012008 <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter>
	}

  /* USER CODE END Os_CenLoc_LockUnlockSequence_Timer_Callback */
}
 8004d84:	bf00      	nop
 8004d86:	bf00      	nop
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	200002e0 	.word	0x200002e0
 8004d94:	20000120 	.word	0x20000120
 8004d98:	20000128 	.word	0x20000128

08004d9c <Os_SecAlmLed_TurnOnCyclic_Timer_Callback>:

/* Os_SecAlmLed_TurnOnCyclic_Timer_Callback function */
void Os_SecAlmLed_TurnOnCyclic_Timer_Callback(void *argument)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlmLed_TurnOnCyclic_Timer_Callback */
	/* Increase the counter variable used in the timer for the alarm LED
	 * that expires every 3,75 seconds. */
	Os_TurnOnCyclic_Counter = Os_TurnOnCyclic_Counter + 1;
 8004da4:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <Os_SecAlmLed_TurnOnCyclic_Timer_Callback+0x24>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	3301      	adds	r3, #1
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	4b04      	ldr	r3, [pc, #16]	; (8004dc0 <Os_SecAlmLed_TurnOnCyclic_Timer_Callback+0x24>)
 8004dae:	701a      	strb	r2, [r3, #0]
	Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter(&Os_TurnOnCyclic_Counter);
 8004db0:	4803      	ldr	r0, [pc, #12]	; (8004dc0 <Os_SecAlmLed_TurnOnCyclic_Timer_Callback+0x24>)
 8004db2:	f00d f919 	bl	8011fe8 <Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter>
  /* USER CODE END Os_SecAlmLed_TurnOnCyclic_Timer_Callback */
}
 8004db6:	bf00      	nop
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	200002e1 	.word	0x200002e1

08004dc4 <Os_SecAlmLedTurnOn_Timer_Callback>:

/* Os_SecAlmLedTurnOn_Timer_Callback function */
void Os_SecAlmLedTurnOn_Timer_Callback(void *argument)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlmLedTurnOn_Timer_Callback */
	/* Increase the counter variable used in the turning on the alarm LED for 0,25 seconds. */
	Os_TurnOnLed_Counter = Os_TurnOnLed_Counter + 1;
 8004dcc:	4b06      	ldr	r3, [pc, #24]	; (8004de8 <Os_SecAlmLedTurnOn_Timer_Callback+0x24>)
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	4b04      	ldr	r3, [pc, #16]	; (8004de8 <Os_SecAlmLedTurnOn_Timer_Callback+0x24>)
 8004dd6:	701a      	strb	r2, [r3, #0]
	Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter(&Os_TurnOnLed_Counter);
 8004dd8:	4803      	ldr	r0, [pc, #12]	; (8004de8 <Os_SecAlmLedTurnOn_Timer_Callback+0x24>)
 8004dda:	f00d f8f5 	bl	8011fc8 <Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter>
  /* USER CODE END Os_SecAlmLedTurnOn_Timer_Callback */
}
 8004dde:	bf00      	nop
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	200002e2 	.word	0x200002e2

08004dec <Os_FollowMeHome_Timer_Callback>:

/* Os_FollowMeHome_Timer_Callback function */
void Os_FollowMeHome_Timer_Callback(void *argument)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_FollowMeHome_Timer_Callback */
	/* Increase the counter variable used in the follow me home concept when the timer
	 * period expires for the lights to go off. */
	Os_FollowMeHome_Counter = Os_FollowMeHome_Counter + 1;
 8004df4:	4b06      	ldr	r3, [pc, #24]	; (8004e10 <Os_FollowMeHome_Timer_Callback+0x24>)
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	b2da      	uxtb	r2, r3
 8004dfc:	4b04      	ldr	r3, [pc, #16]	; (8004e10 <Os_FollowMeHome_Timer_Callback+0x24>)
 8004dfe:	701a      	strb	r2, [r3, #0]
	Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter(&Os_FollowMeHome_Counter);
 8004e00:	4803      	ldr	r0, [pc, #12]	; (8004e10 <Os_FollowMeHome_Timer_Callback+0x24>)
 8004e02:	f00d f8d1 	bl	8011fa8 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter>
  /* USER CODE END Os_FollowMeHome_Timer_Callback */
}
 8004e06:	bf00      	nop
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	200002e3 	.word	0x200002e3

08004e14 <Os_TurnSignals_Timer_Callback>:

/* Os_TurnSignals_Timer_Callback function */
void Os_TurnSignals_Timer_Callback(void *argument)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_TurnSignals_Timer_Callback */
	/* Increase the respective counter on request from the specific light in turn signals. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 8004e1c:	4b13      	ldr	r3, [pc, #76]	; (8004e6c <Os_TurnSignals_Timer_Callback+0x58>)
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d107      	bne.n	8004e34 <Os_TurnSignals_Timer_Callback+0x20>
	{
		Os_Lts_Counter = Os_Lts_Counter + 1;
 8004e24:	4b12      	ldr	r3, [pc, #72]	; (8004e70 <Os_TurnSignals_Timer_Callback+0x5c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	4a11      	ldr	r2, [pc, #68]	; (8004e70 <Os_TurnSignals_Timer_Callback+0x5c>)
 8004e2c:	6013      	str	r3, [r2, #0]
		Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag(&Os_Lts_Counter);
 8004e2e:	4810      	ldr	r0, [pc, #64]	; (8004e70 <Os_TurnSignals_Timer_Callback+0x5c>)
 8004e30:	f00d fac6 	bl	80123c0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag>
	else
	{
		/* do nothing */
	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 8004e34:	4b0f      	ldr	r3, [pc, #60]	; (8004e74 <Os_TurnSignals_Timer_Callback+0x60>)
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d107      	bne.n	8004e4c <Os_TurnSignals_Timer_Callback+0x38>
	{
		Os_Rts_Counter = Os_Rts_Counter + 1;
 8004e3c:	4b0e      	ldr	r3, [pc, #56]	; (8004e78 <Os_TurnSignals_Timer_Callback+0x64>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	3301      	adds	r3, #1
 8004e42:	4a0d      	ldr	r2, [pc, #52]	; (8004e78 <Os_TurnSignals_Timer_Callback+0x64>)
 8004e44:	6013      	str	r3, [r2, #0]
		Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag(&Os_Rts_Counter);
 8004e46:	480c      	ldr	r0, [pc, #48]	; (8004e78 <Os_TurnSignals_Timer_Callback+0x64>)
 8004e48:	f00d faaa 	bl	80123a0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag>
	else
	{
		/* do nothing */
	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState == STD_HIGH)
 8004e4c:	4b0b      	ldr	r3, [pc, #44]	; (8004e7c <Os_TurnSignals_Timer_Callback+0x68>)
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d107      	bne.n	8004e64 <Os_TurnSignals_Timer_Callback+0x50>
	{
		Os_HL_Counter = Os_HL_Counter + 1;
 8004e54:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <Os_TurnSignals_Timer_Callback+0x6c>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	4a09      	ldr	r2, [pc, #36]	; (8004e80 <Os_TurnSignals_Timer_Callback+0x6c>)
 8004e5c:	6013      	str	r3, [r2, #0]
		Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag(&Os_HL_Counter);
 8004e5e:	4808      	ldr	r0, [pc, #32]	; (8004e80 <Os_TurnSignals_Timer_Callback+0x6c>)
 8004e60:	f00d fabe 	bl	80123e0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag>
	else
	{
		/* do nothing */
	}
  /* USER CODE END Os_TurnSignals_Timer_Callback */
}
 8004e64:	bf00      	nop
 8004e66:	3708      	adds	r7, #8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	20000152 	.word	0x20000152
 8004e70:	200002e4 	.word	0x200002e4
 8004e74:	20000153 	.word	0x20000153
 8004e78:	200002e8 	.word	0x200002e8
 8004e7c:	20000156 	.word	0x20000156
 8004e80:	200002ec 	.word	0x200002ec

08004e84 <Os_SecAlmAlarm_Timer_Callback>:

/* Os_SecAlmAlarm_Timer_Callback function */
void Os_SecAlmAlarm_Timer_Callback(void *argument)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlmAlarm_Timer_Callback */
	/* Increase the security alarm trigger counter when the alarm is on. */
	Os_Alarm_Counter = Os_Alarm_Counter + 1;
 8004e8c:	4b06      	ldr	r3, [pc, #24]	; (8004ea8 <Os_SecAlmAlarm_Timer_Callback+0x24>)
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	3301      	adds	r3, #1
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	4b04      	ldr	r3, [pc, #16]	; (8004ea8 <Os_SecAlmAlarm_Timer_Callback+0x24>)
 8004e96:	701a      	strb	r2, [r3, #0]
	Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4(&Os_Alarm_Counter);
 8004e98:	4803      	ldr	r0, [pc, #12]	; (8004ea8 <Os_SecAlmAlarm_Timer_Callback+0x24>)
 8004e9a:	f00d fac1 	bl	8012420 <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4>
  /* USER CODE END Os_SecAlmAlarm_Timer_Callback */
}
 8004e9e:	bf00      	nop
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	200002f0 	.word	0x200002f0

08004eac <Os_PdcR_Buzzer_Timer_Callback>:

/* Os_PdcR_Buzzer_Timer_Callback function */
void Os_PdcR_Buzzer_Timer_Callback(void *argument)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_PdcR_Buzzer_Timer_Callback */
	HAL_GPIO_TogglePin(PDCR_BUZZER_PORT, PDCR_BUZZER_PIN);
 8004eb4:	2120      	movs	r1, #32
 8004eb6:	4803      	ldr	r0, [pc, #12]	; (8004ec4 <Os_PdcR_Buzzer_Timer_Callback+0x18>)
 8004eb8:	f003 fa67 	bl	800838a <HAL_GPIO_TogglePin>
  /* USER CODE END Os_PdcR_Buzzer_Timer_Callback */
}
 8004ebc:	bf00      	nop
 8004ebe:	3708      	adds	r7, #8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	40020400 	.word	0x40020400

08004ec8 <Os_PdcF_Buzzer_Timer_Callback>:

/* Os_PdcF_Buzzer_Timer_Callback function */
void Os_PdcF_Buzzer_Timer_Callback(void *argument)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_PdcF_Buzzer_Timer_Callback */
	HAL_GPIO_TogglePin(PDCF_BUZZER_PORT, PDCF_BUZZER_PIN);
 8004ed0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ed4:	4803      	ldr	r0, [pc, #12]	; (8004ee4 <Os_PdcF_Buzzer_Timer_Callback+0x1c>)
 8004ed6:	f003 fa58 	bl	800838a <HAL_GPIO_TogglePin>
  /* USER CODE END Os_PdcF_Buzzer_Timer_Callback */
}
 8004eda:	bf00      	nop
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40020800 	.word	0x40020800

08004ee8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b08a      	sub	sp, #40	; 0x28
 8004eec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eee:	f107 0314 	add.w	r3, r7, #20
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	601a      	str	r2, [r3, #0]
 8004ef6:	605a      	str	r2, [r3, #4]
 8004ef8:	609a      	str	r2, [r3, #8]
 8004efa:	60da      	str	r2, [r3, #12]
 8004efc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004efe:	2300      	movs	r3, #0
 8004f00:	613b      	str	r3, [r7, #16]
 8004f02:	4b4d      	ldr	r3, [pc, #308]	; (8005038 <MX_GPIO_Init+0x150>)
 8004f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f06:	4a4c      	ldr	r2, [pc, #304]	; (8005038 <MX_GPIO_Init+0x150>)
 8004f08:	f043 0304 	orr.w	r3, r3, #4
 8004f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f0e:	4b4a      	ldr	r3, [pc, #296]	; (8005038 <MX_GPIO_Init+0x150>)
 8004f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f12:	f003 0304 	and.w	r3, r3, #4
 8004f16:	613b      	str	r3, [r7, #16]
 8004f18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	4b46      	ldr	r3, [pc, #280]	; (8005038 <MX_GPIO_Init+0x150>)
 8004f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f22:	4a45      	ldr	r2, [pc, #276]	; (8005038 <MX_GPIO_Init+0x150>)
 8004f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f28:	6313      	str	r3, [r2, #48]	; 0x30
 8004f2a:	4b43      	ldr	r3, [pc, #268]	; (8005038 <MX_GPIO_Init+0x150>)
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f32:	60fb      	str	r3, [r7, #12]
 8004f34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f36:	2300      	movs	r3, #0
 8004f38:	60bb      	str	r3, [r7, #8]
 8004f3a:	4b3f      	ldr	r3, [pc, #252]	; (8005038 <MX_GPIO_Init+0x150>)
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3e:	4a3e      	ldr	r2, [pc, #248]	; (8005038 <MX_GPIO_Init+0x150>)
 8004f40:	f043 0301 	orr.w	r3, r3, #1
 8004f44:	6313      	str	r3, [r2, #48]	; 0x30
 8004f46:	4b3c      	ldr	r3, [pc, #240]	; (8005038 <MX_GPIO_Init+0x150>)
 8004f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	60bb      	str	r3, [r7, #8]
 8004f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f52:	2300      	movs	r3, #0
 8004f54:	607b      	str	r3, [r7, #4]
 8004f56:	4b38      	ldr	r3, [pc, #224]	; (8005038 <MX_GPIO_Init+0x150>)
 8004f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5a:	4a37      	ldr	r2, [pc, #220]	; (8005038 <MX_GPIO_Init+0x150>)
 8004f5c:	f043 0302 	orr.w	r3, r3, #2
 8004f60:	6313      	str	r3, [r2, #48]	; 0x30
 8004f62:	4b35      	ldr	r3, [pc, #212]	; (8005038 <MX_GPIO_Init+0x150>)
 8004f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	607b      	str	r3, [r7, #4]
 8004f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f6e:	2300      	movs	r3, #0
 8004f70:	603b      	str	r3, [r7, #0]
 8004f72:	4b31      	ldr	r3, [pc, #196]	; (8005038 <MX_GPIO_Init+0x150>)
 8004f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f76:	4a30      	ldr	r2, [pc, #192]	; (8005038 <MX_GPIO_Init+0x150>)
 8004f78:	f043 0308 	orr.w	r3, r3, #8
 8004f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f7e:	4b2e      	ldr	r3, [pc, #184]	; (8005038 <MX_GPIO_Init+0x150>)
 8004f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f82:	f003 0308 	and.w	r3, r3, #8
 8004f86:	603b      	str	r3, [r7, #0]
 8004f88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PDCF_BUZZER_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_10
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8004f90:	482a      	ldr	r0, [pc, #168]	; (800503c <MX_GPIO_Init+0x154>)
 8004f92:	f003 f9e1 	bl	8008358 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CENLOC_BUZZER_Pin|SECALM_BUZZER_Pin|PDCR_TRIG_Pin|AL_Pin
 8004f96:	2200      	movs	r2, #0
 8004f98:	f24f 0124 	movw	r1, #61476	; 0xf024
 8004f9c:	4828      	ldr	r0, [pc, #160]	; (8005040 <MX_GPIO_Init+0x158>)
 8004f9e:	f003 f9db 	bl	8008358 <HAL_GPIO_WritePin>
                          |RL_Pin|PDCR_BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PDCF_TRIG_Pin|HB_Pin, GPIO_PIN_RESET);
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004fa8:	4826      	ldr	r0, [pc, #152]	; (8005044 <MX_GPIO_Init+0x15c>)
 8004faa:	f003 f9d5 	bl	8008358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8004fae:	2200      	movs	r2, #0
 8004fb0:	2104      	movs	r1, #4
 8004fb2:	4825      	ldr	r0, [pc, #148]	; (8005048 <MX_GPIO_Init+0x160>)
 8004fb4:	f003 f9d0 	bl	8008358 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PC14 PC15 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = PDCF_BUZZER_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_10
 8004fb8:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8004fbc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fca:	f107 0314 	add.w	r3, r7, #20
 8004fce:	4619      	mov	r1, r3
 8004fd0:	481a      	ldr	r0, [pc, #104]	; (800503c <MX_GPIO_Init+0x154>)
 8004fd2:	f002 ff59 	bl	8007e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = CENLOC_BUZZER_Pin|SECALM_BUZZER_Pin|PDCR_TRIG_Pin|AL_Pin
 8004fd6:	f24f 0324 	movw	r3, #61476	; 0xf024
 8004fda:	617b      	str	r3, [r7, #20]
                          |RL_Pin|PDCR_BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fe8:	f107 0314 	add.w	r3, r7, #20
 8004fec:	4619      	mov	r1, r3
 8004fee:	4814      	ldr	r0, [pc, #80]	; (8005040 <MX_GPIO_Init+0x158>)
 8004ff0:	f002 ff4a 	bl	8007e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = PDCF_TRIG_Pin|HB_Pin;
 8004ff4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004ff8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ffe:	2300      	movs	r3, #0
 8005000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005002:	2300      	movs	r3, #0
 8005004:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005006:	f107 0314 	add.w	r3, r7, #20
 800500a:	4619      	mov	r1, r3
 800500c:	480d      	ldr	r0, [pc, #52]	; (8005044 <MX_GPIO_Init+0x15c>)
 800500e:	f002 ff3b 	bl	8007e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005012:	2304      	movs	r3, #4
 8005014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005016:	2301      	movs	r3, #1
 8005018:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800501a:	2300      	movs	r3, #0
 800501c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800501e:	2300      	movs	r3, #0
 8005020:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005022:	f107 0314 	add.w	r3, r7, #20
 8005026:	4619      	mov	r1, r3
 8005028:	4807      	ldr	r0, [pc, #28]	; (8005048 <MX_GPIO_Init+0x160>)
 800502a:	f002 ff2d 	bl	8007e88 <HAL_GPIO_Init>

}
 800502e:	bf00      	nop
 8005030:	3728      	adds	r7, #40	; 0x28
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	40023800 	.word	0x40023800
 800503c:	40020800 	.word	0x40020800
 8005040:	40020400 	.word	0x40020400
 8005044:	40020000 	.word	0x40020000
 8005048:	40020c00 	.word	0x40020c00

0800504c <HAL_I2C_MspInit>:
  /* USER CODE END I2C3_Init 2 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b08c      	sub	sp, #48	; 0x30
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005054:	f107 031c 	add.w	r3, r7, #28
 8005058:	2200      	movs	r2, #0
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	605a      	str	r2, [r3, #4]
 800505e:	609a      	str	r2, [r3, #8]
 8005060:	60da      	str	r2, [r3, #12]
 8005062:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a41      	ldr	r2, [pc, #260]	; (8005170 <HAL_I2C_MspInit+0x124>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d12c      	bne.n	80050c8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800506e:	2300      	movs	r3, #0
 8005070:	61bb      	str	r3, [r7, #24]
 8005072:	4b40      	ldr	r3, [pc, #256]	; (8005174 <HAL_I2C_MspInit+0x128>)
 8005074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005076:	4a3f      	ldr	r2, [pc, #252]	; (8005174 <HAL_I2C_MspInit+0x128>)
 8005078:	f043 0302 	orr.w	r3, r3, #2
 800507c:	6313      	str	r3, [r2, #48]	; 0x30
 800507e:	4b3d      	ldr	r3, [pc, #244]	; (8005174 <HAL_I2C_MspInit+0x128>)
 8005080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	61bb      	str	r3, [r7, #24]
 8005088:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800508a:	23c0      	movs	r3, #192	; 0xc0
 800508c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800508e:	2312      	movs	r3, #18
 8005090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005092:	2300      	movs	r3, #0
 8005094:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005096:	2303      	movs	r3, #3
 8005098:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800509a:	2304      	movs	r3, #4
 800509c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800509e:	f107 031c 	add.w	r3, r7, #28
 80050a2:	4619      	mov	r1, r3
 80050a4:	4834      	ldr	r0, [pc, #208]	; (8005178 <HAL_I2C_MspInit+0x12c>)
 80050a6:	f002 feef 	bl	8007e88 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80050aa:	2300      	movs	r3, #0
 80050ac:	617b      	str	r3, [r7, #20]
 80050ae:	4b31      	ldr	r3, [pc, #196]	; (8005174 <HAL_I2C_MspInit+0x128>)
 80050b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b2:	4a30      	ldr	r2, [pc, #192]	; (8005174 <HAL_I2C_MspInit+0x128>)
 80050b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050b8:	6413      	str	r3, [r2, #64]	; 0x40
 80050ba:	4b2e      	ldr	r3, [pc, #184]	; (8005174 <HAL_I2C_MspInit+0x128>)
 80050bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80050c6:	e04f      	b.n	8005168 <HAL_I2C_MspInit+0x11c>
  else if(i2cHandle->Instance==I2C3)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a2b      	ldr	r2, [pc, #172]	; (800517c <HAL_I2C_MspInit+0x130>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d14a      	bne.n	8005168 <HAL_I2C_MspInit+0x11c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050d2:	2300      	movs	r3, #0
 80050d4:	613b      	str	r3, [r7, #16]
 80050d6:	4b27      	ldr	r3, [pc, #156]	; (8005174 <HAL_I2C_MspInit+0x128>)
 80050d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050da:	4a26      	ldr	r2, [pc, #152]	; (8005174 <HAL_I2C_MspInit+0x128>)
 80050dc:	f043 0301 	orr.w	r3, r3, #1
 80050e0:	6313      	str	r3, [r2, #48]	; 0x30
 80050e2:	4b24      	ldr	r3, [pc, #144]	; (8005174 <HAL_I2C_MspInit+0x128>)
 80050e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	613b      	str	r3, [r7, #16]
 80050ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050ee:	2300      	movs	r3, #0
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	4b20      	ldr	r3, [pc, #128]	; (8005174 <HAL_I2C_MspInit+0x128>)
 80050f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f6:	4a1f      	ldr	r2, [pc, #124]	; (8005174 <HAL_I2C_MspInit+0x128>)
 80050f8:	f043 0302 	orr.w	r3, r3, #2
 80050fc:	6313      	str	r3, [r2, #48]	; 0x30
 80050fe:	4b1d      	ldr	r3, [pc, #116]	; (8005174 <HAL_I2C_MspInit+0x128>)
 8005100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800510a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800510e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005110:	2312      	movs	r3, #18
 8005112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005114:	2300      	movs	r3, #0
 8005116:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005118:	2303      	movs	r3, #3
 800511a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800511c:	2304      	movs	r3, #4
 800511e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005120:	f107 031c 	add.w	r3, r7, #28
 8005124:	4619      	mov	r1, r3
 8005126:	4816      	ldr	r0, [pc, #88]	; (8005180 <HAL_I2C_MspInit+0x134>)
 8005128:	f002 feae 	bl	8007e88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800512c:	2310      	movs	r3, #16
 800512e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005130:	2312      	movs	r3, #18
 8005132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005134:	2300      	movs	r3, #0
 8005136:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005138:	2303      	movs	r3, #3
 800513a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 800513c:	2309      	movs	r3, #9
 800513e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005140:	f107 031c 	add.w	r3, r7, #28
 8005144:	4619      	mov	r1, r3
 8005146:	480c      	ldr	r0, [pc, #48]	; (8005178 <HAL_I2C_MspInit+0x12c>)
 8005148:	f002 fe9e 	bl	8007e88 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800514c:	2300      	movs	r3, #0
 800514e:	60bb      	str	r3, [r7, #8]
 8005150:	4b08      	ldr	r3, [pc, #32]	; (8005174 <HAL_I2C_MspInit+0x128>)
 8005152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005154:	4a07      	ldr	r2, [pc, #28]	; (8005174 <HAL_I2C_MspInit+0x128>)
 8005156:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800515a:	6413      	str	r3, [r2, #64]	; 0x40
 800515c:	4b05      	ldr	r3, [pc, #20]	; (8005174 <HAL_I2C_MspInit+0x128>)
 800515e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005160:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005164:	60bb      	str	r3, [r7, #8]
 8005166:	68bb      	ldr	r3, [r7, #8]
}
 8005168:	bf00      	nop
 800516a:	3730      	adds	r7, #48	; 0x30
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40005400 	.word	0x40005400
 8005174:	40023800 	.word	0x40023800
 8005178:	40020400 	.word	0x40020400
 800517c:	40005c00 	.word	0x40005c00
 8005180:	40020000 	.word	0x40020000

08005184 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a1a      	ldr	r2, [pc, #104]	; (80051fc <HAL_I2C_MspDeInit+0x78>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d114      	bne.n	80051c0 <HAL_I2C_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8005196:	4b1a      	ldr	r3, [pc, #104]	; (8005200 <HAL_I2C_MspDeInit+0x7c>)
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	4a19      	ldr	r2, [pc, #100]	; (8005200 <HAL_I2C_MspDeInit+0x7c>)
 800519c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051a0:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80051a2:	2140      	movs	r1, #64	; 0x40
 80051a4:	4817      	ldr	r0, [pc, #92]	; (8005204 <HAL_I2C_MspDeInit+0x80>)
 80051a6:	f002 fff3 	bl	8008190 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80051aa:	2180      	movs	r1, #128	; 0x80
 80051ac:	4815      	ldr	r0, [pc, #84]	; (8005204 <HAL_I2C_MspDeInit+0x80>)
 80051ae:	f002 ffef 	bl	8008190 <HAL_GPIO_DeInit>

    /* I2C1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 80051b2:	201f      	movs	r0, #31
 80051b4:	f001 ff37 	bl	8007026 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 80051b8:	2020      	movs	r0, #32
 80051ba:	f001 ff34 	bl	8007026 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 80051be:	e019      	b.n	80051f4 <HAL_I2C_MspDeInit+0x70>
  else if(i2cHandle->Instance==I2C3)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a10      	ldr	r2, [pc, #64]	; (8005208 <HAL_I2C_MspDeInit+0x84>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d114      	bne.n	80051f4 <HAL_I2C_MspDeInit+0x70>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80051ca:	4b0d      	ldr	r3, [pc, #52]	; (8005200 <HAL_I2C_MspDeInit+0x7c>)
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	4a0c      	ldr	r2, [pc, #48]	; (8005200 <HAL_I2C_MspDeInit+0x7c>)
 80051d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80051d4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 80051d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80051da:	480c      	ldr	r0, [pc, #48]	; (800520c <HAL_I2C_MspDeInit+0x88>)
 80051dc:	f002 ffd8 	bl	8008190 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4);
 80051e0:	2110      	movs	r1, #16
 80051e2:	4808      	ldr	r0, [pc, #32]	; (8005204 <HAL_I2C_MspDeInit+0x80>)
 80051e4:	f002 ffd4 	bl	8008190 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 80051e8:	2048      	movs	r0, #72	; 0x48
 80051ea:	f001 ff1c 	bl	8007026 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 80051ee:	2049      	movs	r0, #73	; 0x49
 80051f0:	f001 ff19 	bl	8007026 <HAL_NVIC_DisableIRQ>
}
 80051f4:	bf00      	nop
 80051f6:	3708      	adds	r7, #8
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	40005400 	.word	0x40005400
 8005200:	40023800 	.word	0x40023800
 8005204:	40020400 	.word	0x40020400
 8005208:	40005c00 	.word	0x40005c00
 800520c:	40020000 	.word	0x40020000

08005210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005216:	2300      	movs	r3, #0
 8005218:	607b      	str	r3, [r7, #4]
 800521a:	4b21      	ldr	r3, [pc, #132]	; (80052a0 <HAL_MspInit+0x90>)
 800521c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521e:	4a20      	ldr	r2, [pc, #128]	; (80052a0 <HAL_MspInit+0x90>)
 8005220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005224:	6453      	str	r3, [r2, #68]	; 0x44
 8005226:	4b1e      	ldr	r3, [pc, #120]	; (80052a0 <HAL_MspInit+0x90>)
 8005228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800522e:	607b      	str	r3, [r7, #4]
 8005230:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005232:	2300      	movs	r3, #0
 8005234:	603b      	str	r3, [r7, #0]
 8005236:	4b1a      	ldr	r3, [pc, #104]	; (80052a0 <HAL_MspInit+0x90>)
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	4a19      	ldr	r2, [pc, #100]	; (80052a0 <HAL_MspInit+0x90>)
 800523c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005240:	6413      	str	r3, [r2, #64]	; 0x40
 8005242:	4b17      	ldr	r3, [pc, #92]	; (80052a0 <HAL_MspInit+0x90>)
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800524a:	603b      	str	r3, [r7, #0]
 800524c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 15, 0);
 800524e:	2200      	movs	r2, #0
 8005250:	210f      	movs	r1, #15
 8005252:	f06f 000b 	mvn.w	r0, #11
 8005256:	f001 febc 	bl	8006fd2 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 15, 0);
 800525a:	2200      	movs	r2, #0
 800525c:	210f      	movs	r1, #15
 800525e:	f06f 000a 	mvn.w	r0, #10
 8005262:	f001 feb6 	bl	8006fd2 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 15, 0);
 8005266:	2200      	movs	r2, #0
 8005268:	210f      	movs	r1, #15
 800526a:	f06f 0009 	mvn.w	r0, #9
 800526e:	f001 feb0 	bl	8006fd2 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 15, 0);
 8005272:	2200      	movs	r2, #0
 8005274:	210f      	movs	r1, #15
 8005276:	f06f 0004 	mvn.w	r0, #4
 800527a:	f001 feaa 	bl	8006fd2 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 800527e:	2200      	movs	r2, #0
 8005280:	210f      	movs	r1, #15
 8005282:	f06f 0003 	mvn.w	r0, #3
 8005286:	f001 fea4 	bl	8006fd2 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800528a:	2200      	movs	r2, #0
 800528c:	210f      	movs	r1, #15
 800528e:	f06f 0001 	mvn.w	r0, #1
 8005292:	f001 fe9e 	bl	8006fd2 <HAL_NVIC_SetPriority>
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005296:	bf00      	nop
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	40023800 	.word	0x40023800

080052a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b08c      	sub	sp, #48	; 0x30
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80052ac:	2300      	movs	r3, #0
 80052ae:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80052b0:	2300      	movs	r3, #0
 80052b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80052b4:	2300      	movs	r3, #0
 80052b6:	60bb      	str	r3, [r7, #8]
 80052b8:	4b2e      	ldr	r3, [pc, #184]	; (8005374 <HAL_InitTick+0xd0>)
 80052ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052bc:	4a2d      	ldr	r2, [pc, #180]	; (8005374 <HAL_InitTick+0xd0>)
 80052be:	f043 0301 	orr.w	r3, r3, #1
 80052c2:	6453      	str	r3, [r2, #68]	; 0x44
 80052c4:	4b2b      	ldr	r3, [pc, #172]	; (8005374 <HAL_InitTick+0xd0>)
 80052c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	60bb      	str	r3, [r7, #8]
 80052ce:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80052d0:	f107 020c 	add.w	r2, r7, #12
 80052d4:	f107 0310 	add.w	r3, r7, #16
 80052d8:	4611      	mov	r1, r2
 80052da:	4618      	mov	r0, r3
 80052dc:	f005 fd84 	bl	800ade8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80052e0:	f005 fd6e 	bl	800adc0 <HAL_RCC_GetPCLK2Freq>
 80052e4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80052e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e8:	4a23      	ldr	r2, [pc, #140]	; (8005378 <HAL_InitTick+0xd4>)
 80052ea:	fba2 2303 	umull	r2, r3, r2, r3
 80052ee:	0c9b      	lsrs	r3, r3, #18
 80052f0:	3b01      	subs	r3, #1
 80052f2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80052f4:	4b21      	ldr	r3, [pc, #132]	; (800537c <HAL_InitTick+0xd8>)
 80052f6:	4a22      	ldr	r2, [pc, #136]	; (8005380 <HAL_InitTick+0xdc>)
 80052f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80052fa:	4b20      	ldr	r3, [pc, #128]	; (800537c <HAL_InitTick+0xd8>)
 80052fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005300:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005302:	4a1e      	ldr	r2, [pc, #120]	; (800537c <HAL_InitTick+0xd8>)
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005308:	4b1c      	ldr	r3, [pc, #112]	; (800537c <HAL_InitTick+0xd8>)
 800530a:	2200      	movs	r2, #0
 800530c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800530e:	4b1b      	ldr	r3, [pc, #108]	; (800537c <HAL_InitTick+0xd8>)
 8005310:	2200      	movs	r2, #0
 8005312:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005314:	4b19      	ldr	r3, [pc, #100]	; (800537c <HAL_InitTick+0xd8>)
 8005316:	2200      	movs	r2, #0
 8005318:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800531a:	4818      	ldr	r0, [pc, #96]	; (800537c <HAL_InitTick+0xd8>)
 800531c:	f005 fd96 	bl	800ae4c <HAL_TIM_Base_Init>
 8005320:	4603      	mov	r3, r0
 8005322:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8005326:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800532a:	2b00      	cmp	r3, #0
 800532c:	d11b      	bne.n	8005366 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800532e:	4813      	ldr	r0, [pc, #76]	; (800537c <HAL_InitTick+0xd8>)
 8005330:	f005 fde8 	bl	800af04 <HAL_TIM_Base_Start_IT>
 8005334:	4603      	mov	r3, r0
 8005336:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800533a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800533e:	2b00      	cmp	r3, #0
 8005340:	d111      	bne.n	8005366 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005342:	2019      	movs	r0, #25
 8005344:	f001 fe61 	bl	800700a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b0f      	cmp	r3, #15
 800534c:	d808      	bhi.n	8005360 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800534e:	2200      	movs	r2, #0
 8005350:	6879      	ldr	r1, [r7, #4]
 8005352:	2019      	movs	r0, #25
 8005354:	f001 fe3d 	bl	8006fd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005358:	4a0a      	ldr	r2, [pc, #40]	; (8005384 <HAL_InitTick+0xe0>)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6013      	str	r3, [r2, #0]
 800535e:	e002      	b.n	8005366 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8005366:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800536a:	4618      	mov	r0, r3
 800536c:	3730      	adds	r7, #48	; 0x30
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	40023800 	.word	0x40023800
 8005378:	431bde83 	.word	0x431bde83
 800537c:	2000048c 	.word	0x2000048c
 8005380:	40010000 	.word	0x40010000
 8005384:	20000050 	.word	0x20000050

08005388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	SystemManager_SetFault(NMI_RESET);
 800538c:	2008      	movs	r0, #8
 800538e:	f00e f8c9 	bl	8013524 <SystemManager_SetFault>
	SystemManager_PerformReset();
 8005392:	f00e f8f1 	bl	8013578 <SystemManager_PerformReset>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005396:	e7fe      	b.n	8005396 <NMI_Handler+0xe>

08005398 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	SystemManager_SetFault(HARDWARE_RESET);
 800539c:	2006      	movs	r0, #6
 800539e:	f00e f8c1 	bl	8013524 <SystemManager_SetFault>
	SystemManager_PerformReset();
 80053a2:	f00e f8e9 	bl	8013578 <SystemManager_PerformReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80053a6:	e7fe      	b.n	80053a6 <HardFault_Handler+0xe>

080053a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	SystemManager_SetFault(MEMORY_FAULT_RESET);
 80053ac:	2009      	movs	r0, #9
 80053ae:	f00e f8b9 	bl	8013524 <SystemManager_SetFault>
	SystemManager_PerformReset();
 80053b2:	f00e f8e1 	bl	8013578 <SystemManager_PerformReset>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80053b6:	e7fe      	b.n	80053b6 <MemManage_Handler+0xe>

080053b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	SystemManager_SetFault(BUS_FAULT_RESET);
 80053bc:	200b      	movs	r0, #11
 80053be:	f00e f8b1 	bl	8013524 <SystemManager_SetFault>
	SystemManager_PerformReset();
 80053c2:	f00e f8d9 	bl	8013578 <SystemManager_PerformReset>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80053c6:	e7fe      	b.n	80053c6 <BusFault_Handler+0xe>

080053c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	SystemManager_SetFault(USAGE_FAULT_RESET);
 80053cc:	200a      	movs	r0, #10
 80053ce:	f00e f8a9 	bl	8013524 <SystemManager_SetFault>
	SystemManager_PerformReset();
 80053d2:	f00e f8d1 	bl	8013578 <SystemManager_PerformReset>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80053d6:	e7fe      	b.n	80053d6 <UsageFault_Handler+0xe>

080053d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80053dc:	bf00      	nop
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */
	SystemManager_PerformReset();
 80053ea:	f00e f8c5 	bl	8013578 <SystemManager_PerformReset>
  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80053ee:	f005 f849 	bl	800a484 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */
  /* USER CODE END PVD_IRQn 1 */
}
 80053f2:	bf00      	nop
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */
	SystemManager_SetFault(FLASH_FAULT_RESET);
 80053fa:	2007      	movs	r0, #7
 80053fc:	f00e f892 	bl	8013524 <SystemManager_SetFault>
	SystemManager_PerformReset();
 8005400:	f00e f8ba 	bl	8013578 <SystemManager_PerformReset>
  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8005404:	f002 fb98 	bl	8007b38 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */
  /* USER CODE END FLASH_IRQn 1 */
}
 8005408:	bf00      	nop
 800540a:	bd80      	pop	{r7, pc}

0800540c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_IRQn 0 */
  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */
  /* USER CODE END RCC_IRQn 1 */
}
 8005410:	bf00      	nop
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
	...

0800541c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */
  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005420:	4802      	ldr	r0, [pc, #8]	; (800542c <ADC_IRQHandler+0x10>)
 8005422:	f000 fff5 	bl	8006410 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */
  /* USER CODE END ADC_IRQn 1 */
}
 8005426:	bf00      	nop
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	20000210 	.word	0x20000210

08005430 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005434:	4802      	ldr	r0, [pc, #8]	; (8005440 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005436:	f006 f95d 	bl	800b6f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800543a:	bf00      	nop
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	2000048c 	.word	0x2000048c

08005444 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	/* When alarm is on turn on the LEDs at full duty cycle for the designated time. */
	if(Rte_P_SecAlm_SecAlmPort_SecAlm_PinStateChange == STD_HIGH)
 8005448:	4b44      	ldr	r3, [pc, #272]	; (800555c <TIM2_IRQHandler+0x118>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d10b      	bne.n	8005468 <TIM2_IRQHandler+0x24>
	{
		TIM2->CCR1 = TIM2->ARR;
 8005450:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005454:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545a:	6353      	str	r3, [r2, #52]	; 0x34
		TIM2->CCR2 = TIM2->ARR;
 800545c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005460:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005466:	6393      	str	r3, [r2, #56]	; 0x38
		/* do nothing */
	}
	/* Upon timer interrupt generation
	 * proceed to increase the PWM duty cycle
	 * for the low beam light until 75%. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_LowBeam_CurrentState == STD_HIGH)
 8005468:	4b3d      	ldr	r3, [pc, #244]	; (8005560 <TIM2_IRQHandler+0x11c>)
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d119      	bne.n	80054a4 <TIM2_IRQHandler+0x60>
	{
		if(TIM2->CCR1 < 1250)
 8005470:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005476:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800547a:	4293      	cmp	r3, r2
 800547c:	d807      	bhi.n	800548e <TIM2_IRQHandler+0x4a>
		{
			TIM2->CCR1 = TIM2->CCR1 + 20;
 800547e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005484:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005488:	3314      	adds	r3, #20
 800548a:	6353      	str	r3, [r2, #52]	; 0x34
 800548c:	e00a      	b.n	80054a4 <TIM2_IRQHandler+0x60>
		}
		else if(TIM2->CCR1 >= 1000)
 800548e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005494:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005498:	d304      	bcc.n	80054a4 <TIM2_IRQHandler+0x60>
		{
			TIM2->CCR1 = 1250;
 800549a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800549e:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80054a2:	635a      	str	r2, [r3, #52]	; 0x34
		/* do nothing */
	}
	/* Upon timer interrupt generation
	 * proceed to increase the PWM duty cycle
	 * for the rear position light until 75%. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearPositionLights_CurrentState == STD_HIGH)
 80054a4:	4b2f      	ldr	r3, [pc, #188]	; (8005564 <TIM2_IRQHandler+0x120>)
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d118      	bne.n	80054de <TIM2_IRQHandler+0x9a>
	{
		if(TIM2->CCR2 < 1000)
 80054ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80054b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054b6:	d207      	bcs.n	80054c8 <TIM2_IRQHandler+0x84>
		{
			TIM2->CCR2 = TIM2->CCR2 + 1;
 80054b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80054bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80054c2:	3301      	adds	r3, #1
 80054c4:	6393      	str	r3, [r2, #56]	; 0x38
 80054c6:	e00a      	b.n	80054de <TIM2_IRQHandler+0x9a>
		}
		else if(TIM2->CCR2 >= 1000)
 80054c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80054cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054d2:	d304      	bcc.n	80054de <TIM2_IRQHandler+0x9a>
		{
			TIM2->CCR2 = 1000;
 80054d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80054d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80054dc:	639a      	str	r2, [r3, #56]	; 0x38
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_IntLights_IntLightsPort_IntLights_CurrentState == STD_HIGH)
 80054de:	4b22      	ldr	r3, [pc, #136]	; (8005568 <TIM2_IRQHandler+0x124>)
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d11b      	bne.n	800551e <TIM2_IRQHandler+0xda>
	{
		if(TIM2->CCR3 < 1999)
 80054e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80054ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ec:	f240 72ce 	movw	r2, #1998	; 0x7ce
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d807      	bhi.n	8005504 <TIM2_IRQHandler+0xc0>
		{
			TIM2->CCR3 = TIM2->CCR3 + 20;
 80054f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80054f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80054fe:	3314      	adds	r3, #20
 8005500:	63d3      	str	r3, [r2, #60]	; 0x3c
 8005502:	e026      	b.n	8005552 <TIM2_IRQHandler+0x10e>
		}
		else if(TIM2->CCR3 >= 1999)
 8005504:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800550a:	f240 72ce 	movw	r2, #1998	; 0x7ce
 800550e:	4293      	cmp	r3, r2
 8005510:	d91f      	bls.n	8005552 <TIM2_IRQHandler+0x10e>
		{
			TIM2->CCR3 = 1999;
 8005512:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005516:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800551a:	63da      	str	r2, [r3, #60]	; 0x3c
 800551c:	e019      	b.n	8005552 <TIM2_IRQHandler+0x10e>
		else
		{
			/* do nothing */
		}
	}
	else if(Rte_P_IntLights_IntLightsPort_IntLights_CurrentState == STD_LOW)
 800551e:	4b12      	ldr	r3, [pc, #72]	; (8005568 <TIM2_IRQHandler+0x124>)
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d115      	bne.n	8005552 <TIM2_IRQHandler+0x10e>
	{
		if(TIM2->CCR3 > 20)
 8005526:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800552a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800552c:	2b14      	cmp	r3, #20
 800552e:	d907      	bls.n	8005540 <TIM2_IRQHandler+0xfc>
		{
			TIM2->CCR3 = TIM2->CCR3 - 20;
 8005530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005536:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800553a:	3b14      	subs	r3, #20
 800553c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800553e:	e008      	b.n	8005552 <TIM2_IRQHandler+0x10e>
		}
		else if(TIM2->CCR3 <= 20)
 8005540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005546:	2b14      	cmp	r3, #20
 8005548:	d803      	bhi.n	8005552 <TIM2_IRQHandler+0x10e>
		{
			TIM2->CCR3 = 0;
 800554a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800554e:	2200      	movs	r2, #0
 8005550:	63da      	str	r2, [r3, #60]	; 0x3c
	else
	{
		/* do nothing */
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005552:	4806      	ldr	r0, [pc, #24]	; (800556c <TIM2_IRQHandler+0x128>)
 8005554:	f006 f8ce 	bl	800b6f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  /* USER CODE END TIM2_IRQn 1 */
}
 8005558:	bf00      	nop
 800555a:	bd80      	pop	{r7, pc}
 800555c:	200001a5 	.word	0x200001a5
 8005560:	20000154 	.word	0x20000154
 8005564:	20000155 	.word	0x20000155
 8005568:	20000199 	.word	0x20000199
 800556c:	20000544 	.word	0x20000544

08005570 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
	/* On central lock set to high
	 * increase the PWM duty cycle of the
	 * door led's brightness up to 100% gradually.
	 * Set it to 100% upon reaching maximum value.
	 * If the central lock is set to low, set duty cycle to 0. */
	if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8005574:	4b32      	ldr	r3, [pc, #200]	; (8005640 <TIM3_IRQHandler+0xd0>)
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d104      	bne.n	8005586 <TIM3_IRQHandler+0x16>
	{
		TIM3->CCR1 = TIM3->ARR;
 800557c:	4b31      	ldr	r3, [pc, #196]	; (8005644 <TIM3_IRQHandler+0xd4>)
 800557e:	4a31      	ldr	r2, [pc, #196]	; (8005644 <TIM3_IRQHandler+0xd4>)
 8005580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005582:	6353      	str	r3, [r2, #52]	; 0x34
 8005584:	e006      	b.n	8005594 <TIM3_IRQHandler+0x24>
	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_LOW)
 8005586:	4b2e      	ldr	r3, [pc, #184]	; (8005640 <TIM3_IRQHandler+0xd0>)
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d102      	bne.n	8005594 <TIM3_IRQHandler+0x24>
	{
		TIM3->CCR1 = 0;
 800558e:	4b2d      	ldr	r3, [pc, #180]	; (8005644 <TIM3_IRQHandler+0xd4>)
 8005590:	2200      	movs	r2, #0
 8005592:	635a      	str	r2, [r3, #52]	; 0x34
	/* On brake lights set to high
	 * increase the PWM duty cycle of the
	 * door led's brightness up to 100% gradually.
	 * Set it to 100% upon reaching maximum value.
	 * If the brake lights are set to low, set duty cycle to 0. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState == STD_HIGH)
 8005594:	4b2c      	ldr	r3, [pc, #176]	; (8005648 <TIM3_IRQHandler+0xd8>)
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d104      	bne.n	80055a6 <TIM3_IRQHandler+0x36>
	{
		TIM3->CCR2 = TIM3->ARR;
 800559c:	4b29      	ldr	r3, [pc, #164]	; (8005644 <TIM3_IRQHandler+0xd4>)
 800559e:	4a29      	ldr	r2, [pc, #164]	; (8005644 <TIM3_IRQHandler+0xd4>)
 80055a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a2:	6393      	str	r3, [r2, #56]	; 0x38
 80055a4:	e006      	b.n	80055b4 <TIM3_IRQHandler+0x44>
	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState == STD_LOW)
 80055a6:	4b28      	ldr	r3, [pc, #160]	; (8005648 <TIM3_IRQHandler+0xd8>)
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d102      	bne.n	80055b4 <TIM3_IRQHandler+0x44>
	{
		TIM3->CCR2 = 0;
 80055ae:	4b25      	ldr	r3, [pc, #148]	; (8005644 <TIM3_IRQHandler+0xd4>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	639a      	str	r2, [r3, #56]	; 0x38
	/* On front fog lights set to high
	 * increase the PWM duty cycle of the
	 * door led's brightness up to 100% gradually.
	 * Set it to 100% upon reaching maximum value.
	 * If the front fog lights are set to low, set duty cycle to 0. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState == STD_HIGH)
 80055b4:	4b25      	ldr	r3, [pc, #148]	; (800564c <TIM3_IRQHandler+0xdc>)
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d114      	bne.n	80055e6 <TIM3_IRQHandler+0x76>
	{
		if(TIM3->CCR3 < 1000)
 80055bc:	4b21      	ldr	r3, [pc, #132]	; (8005644 <TIM3_IRQHandler+0xd4>)
 80055be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055c4:	d205      	bcs.n	80055d2 <TIM3_IRQHandler+0x62>
		{
			TIM3->CCR3 = TIM3->CCR3 + 20;
 80055c6:	4b1f      	ldr	r3, [pc, #124]	; (8005644 <TIM3_IRQHandler+0xd4>)
 80055c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ca:	4a1e      	ldr	r2, [pc, #120]	; (8005644 <TIM3_IRQHandler+0xd4>)
 80055cc:	3314      	adds	r3, #20
 80055ce:	63d3      	str	r3, [r2, #60]	; 0x3c
 80055d0:	e010      	b.n	80055f4 <TIM3_IRQHandler+0x84>
		}
		else if(TIM3->CCR3 >= 1000)
 80055d2:	4b1c      	ldr	r3, [pc, #112]	; (8005644 <TIM3_IRQHandler+0xd4>)
 80055d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055da:	d30b      	bcc.n	80055f4 <TIM3_IRQHandler+0x84>
		{
			TIM3->CCR3 = 1000;
 80055dc:	4b19      	ldr	r3, [pc, #100]	; (8005644 <TIM3_IRQHandler+0xd4>)
 80055de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80055e4:	e006      	b.n	80055f4 <TIM3_IRQHandler+0x84>
		else
		{
			/* do nothing */
		}
	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState == STD_LOW)
 80055e6:	4b19      	ldr	r3, [pc, #100]	; (800564c <TIM3_IRQHandler+0xdc>)
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d102      	bne.n	80055f4 <TIM3_IRQHandler+0x84>
	{
		TIM3->CCR3 = 0;
 80055ee:	4b15      	ldr	r3, [pc, #84]	; (8005644 <TIM3_IRQHandler+0xd4>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	63da      	str	r2, [r3, #60]	; 0x3c
	/* On rear fog lights set to high
	 * increase the PWM duty cycle of the
	 * door led's brightness up to 100% gradually.
	 * Set it to 100% upon reaching maximum value.
	 * If the rear fog lights are set to low, set duty cycle to 0. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState == STD_HIGH)
 80055f4:	4b16      	ldr	r3, [pc, #88]	; (8005650 <TIM3_IRQHandler+0xe0>)
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d114      	bne.n	8005626 <TIM3_IRQHandler+0xb6>
	{
		if(TIM3->CCR4 < 1000)
 80055fc:	4b11      	ldr	r3, [pc, #68]	; (8005644 <TIM3_IRQHandler+0xd4>)
 80055fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005600:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005604:	d205      	bcs.n	8005612 <TIM3_IRQHandler+0xa2>
		{
			TIM3->CCR4 = TIM3->CCR4 + 20;
 8005606:	4b0f      	ldr	r3, [pc, #60]	; (8005644 <TIM3_IRQHandler+0xd4>)
 8005608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560a:	4a0e      	ldr	r2, [pc, #56]	; (8005644 <TIM3_IRQHandler+0xd4>)
 800560c:	3314      	adds	r3, #20
 800560e:	6413      	str	r3, [r2, #64]	; 0x40
 8005610:	e010      	b.n	8005634 <TIM3_IRQHandler+0xc4>
		}
		else if(TIM3->CCR4 >= 1000)
 8005612:	4b0c      	ldr	r3, [pc, #48]	; (8005644 <TIM3_IRQHandler+0xd4>)
 8005614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005616:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800561a:	d30b      	bcc.n	8005634 <TIM3_IRQHandler+0xc4>
		{
			TIM3->CCR4 = 1000;
 800561c:	4b09      	ldr	r3, [pc, #36]	; (8005644 <TIM3_IRQHandler+0xd4>)
 800561e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005622:	641a      	str	r2, [r3, #64]	; 0x40
 8005624:	e006      	b.n	8005634 <TIM3_IRQHandler+0xc4>
		else
		{
			/* do nothing */
		}
	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState == STD_LOW)
 8005626:	4b0a      	ldr	r3, [pc, #40]	; (8005650 <TIM3_IRQHandler+0xe0>)
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d102      	bne.n	8005634 <TIM3_IRQHandler+0xc4>
	{
		TIM3->CCR4 = 0;
 800562e:	4b05      	ldr	r3, [pc, #20]	; (8005644 <TIM3_IRQHandler+0xd4>)
 8005630:	2200      	movs	r2, #0
 8005632:	641a      	str	r2, [r3, #64]	; 0x40
	else
	{
		/* do nothing */
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005634:	4807      	ldr	r0, [pc, #28]	; (8005654 <TIM3_IRQHandler+0xe4>)
 8005636:	f006 f85d 	bl	800b6f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  /* USER CODE END TIM3_IRQn 1 */
}
 800563a:	bf00      	nop
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	20000120 	.word	0x20000120
 8005644:	40000400 	.word	0x40000400
 8005648:	2000014e 	.word	0x2000014e
 800564c:	20000151 	.word	0x20000151
 8005650:	20000157 	.word	0x20000157
 8005654:	200005f8 	.word	0x200005f8

08005658 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800565c:	4802      	ldr	r0, [pc, #8]	; (8005668 <TIM4_IRQHandler+0x10>)
 800565e:	f006 f849 	bl	800b6f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  /* USER CODE END TIM4_IRQn 1 */
}
 8005662:	bf00      	nop
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	200006ac 	.word	0x200006ac

0800566c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005670:	4802      	ldr	r0, [pc, #8]	; (800567c <I2C1_EV_IRQHandler+0x10>)
 8005672:	f003 f9b9 	bl	80089e8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005676:	bf00      	nop
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	20000378 	.word	0x20000378

08005680 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005684:	4802      	ldr	r0, [pc, #8]	; (8005690 <I2C1_ER_IRQHandler+0x10>)
 8005686:	f003 fb20 	bl	8008cca <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800568a:	bf00      	nop
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	20000378 	.word	0x20000378

08005694 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005698:	4802      	ldr	r0, [pc, #8]	; (80056a4 <USART1_IRQHandler+0x10>)
 800569a:	f007 f9e9 	bl	800ca70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  /* USER CODE END USART1_IRQn 1 */
}
 800569e:	bf00      	nop
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	20000814 	.word	0x20000814

080056a8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80056ac:	4802      	ldr	r0, [pc, #8]	; (80056b8 <TIM5_IRQHandler+0x10>)
 80056ae:	f006 f821 	bl	800b6f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */
  /* USER CODE END TIM5_IRQn 1 */
}
 80056b2:	bf00      	nop
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	20000760 	.word	0x20000760

080056bc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80056c0:	4802      	ldr	r0, [pc, #8]	; (80056cc <DMA2_Stream0_IRQHandler+0x10>)
 80056c2:	f001 ffc1 	bl	8007648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80056c6:	bf00      	nop
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	20000274 	.word	0x20000274

080056d0 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80056d4:	4802      	ldr	r0, [pc, #8]	; (80056e0 <I2C3_EV_IRQHandler+0x10>)
 80056d6:	f003 f987 	bl	80089e8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80056da:	bf00      	nop
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	200003fc 	.word	0x200003fc

080056e4 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80056e8:	4802      	ldr	r0, [pc, #8]	; (80056f4 <I2C3_ER_IRQHandler+0x10>)
 80056ea:	f003 faee 	bl	8008cca <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80056ee:	bf00      	nop
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	200003fc 	.word	0x200003fc

080056f8 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80056f8:	b480      	push	{r7}
 80056fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FPU_IRQn 0 */
  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */
  /* USER CODE END FPU_IRQn 1 */
}
 80056fc:	bf00      	nop
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
	...

08005708 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b086      	sub	sp, #24
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005710:	4a14      	ldr	r2, [pc, #80]	; (8005764 <_sbrk+0x5c>)
 8005712:	4b15      	ldr	r3, [pc, #84]	; (8005768 <_sbrk+0x60>)
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800571c:	4b13      	ldr	r3, [pc, #76]	; (800576c <_sbrk+0x64>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d102      	bne.n	800572a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005724:	4b11      	ldr	r3, [pc, #68]	; (800576c <_sbrk+0x64>)
 8005726:	4a12      	ldr	r2, [pc, #72]	; (8005770 <_sbrk+0x68>)
 8005728:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800572a:	4b10      	ldr	r3, [pc, #64]	; (800576c <_sbrk+0x64>)
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4413      	add	r3, r2
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	429a      	cmp	r2, r3
 8005736:	d207      	bcs.n	8005748 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005738:	f00e f862 	bl	8013800 <__errno>
 800573c:	4603      	mov	r3, r0
 800573e:	220c      	movs	r2, #12
 8005740:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005742:	f04f 33ff 	mov.w	r3, #4294967295
 8005746:	e009      	b.n	800575c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005748:	4b08      	ldr	r3, [pc, #32]	; (800576c <_sbrk+0x64>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800574e:	4b07      	ldr	r3, [pc, #28]	; (800576c <_sbrk+0x64>)
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4413      	add	r3, r2
 8005756:	4a05      	ldr	r2, [pc, #20]	; (800576c <_sbrk+0x64>)
 8005758:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800575a:	68fb      	ldr	r3, [r7, #12]
}
 800575c:	4618      	mov	r0, r3
 800575e:	3718      	adds	r7, #24
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	20020000 	.word	0x20020000
 8005768:	00000400 	.word	0x00000400
 800576c:	20000540 	.word	0x20000540
 8005770:	200094f0 	.word	0x200094f0

08005774 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005774:	b480      	push	{r7}
 8005776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005778:	4b06      	ldr	r3, [pc, #24]	; (8005794 <SystemInit+0x20>)
 800577a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800577e:	4a05      	ldr	r2, [pc, #20]	; (8005794 <SystemInit+0x20>)
 8005780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005788:	bf00      	nop
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	e000ed00 	.word	0xe000ed00

08005798 <HAL_TIM_Base_MspInit>:
  /* USER CODE END TIM5_Init 2 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b08c      	sub	sp, #48	; 0x30
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057a0:	f107 031c 	add.w	r3, r7, #28
 80057a4:	2200      	movs	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]
 80057a8:	605a      	str	r2, [r3, #4]
 80057aa:	609a      	str	r2, [r3, #8]
 80057ac:	60da      	str	r2, [r3, #12]
 80057ae:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b8:	d10e      	bne.n	80057d8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80057ba:	2300      	movs	r3, #0
 80057bc:	61bb      	str	r3, [r7, #24]
 80057be:	4b35      	ldr	r3, [pc, #212]	; (8005894 <HAL_TIM_Base_MspInit+0xfc>)
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	4a34      	ldr	r2, [pc, #208]	; (8005894 <HAL_TIM_Base_MspInit+0xfc>)
 80057c4:	f043 0301 	orr.w	r3, r3, #1
 80057c8:	6413      	str	r3, [r2, #64]	; 0x40
 80057ca:	4b32      	ldr	r3, [pc, #200]	; (8005894 <HAL_TIM_Base_MspInit+0xfc>)
 80057cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	61bb      	str	r3, [r7, #24]
 80057d4:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80057d6:	e058      	b.n	800588a <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM3)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a2e      	ldr	r2, [pc, #184]	; (8005898 <HAL_TIM_Base_MspInit+0x100>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d10e      	bne.n	8005800 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80057e2:	2300      	movs	r3, #0
 80057e4:	617b      	str	r3, [r7, #20]
 80057e6:	4b2b      	ldr	r3, [pc, #172]	; (8005894 <HAL_TIM_Base_MspInit+0xfc>)
 80057e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ea:	4a2a      	ldr	r2, [pc, #168]	; (8005894 <HAL_TIM_Base_MspInit+0xfc>)
 80057ec:	f043 0302 	orr.w	r3, r3, #2
 80057f0:	6413      	str	r3, [r2, #64]	; 0x40
 80057f2:	4b28      	ldr	r3, [pc, #160]	; (8005894 <HAL_TIM_Base_MspInit+0xfc>)
 80057f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	697b      	ldr	r3, [r7, #20]
}
 80057fe:	e044      	b.n	800588a <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM4)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a25      	ldr	r2, [pc, #148]	; (800589c <HAL_TIM_Base_MspInit+0x104>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d10e      	bne.n	8005828 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800580a:	2300      	movs	r3, #0
 800580c:	613b      	str	r3, [r7, #16]
 800580e:	4b21      	ldr	r3, [pc, #132]	; (8005894 <HAL_TIM_Base_MspInit+0xfc>)
 8005810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005812:	4a20      	ldr	r2, [pc, #128]	; (8005894 <HAL_TIM_Base_MspInit+0xfc>)
 8005814:	f043 0304 	orr.w	r3, r3, #4
 8005818:	6413      	str	r3, [r2, #64]	; 0x40
 800581a:	4b1e      	ldr	r3, [pc, #120]	; (8005894 <HAL_TIM_Base_MspInit+0xfc>)
 800581c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581e:	f003 0304 	and.w	r3, r3, #4
 8005822:	613b      	str	r3, [r7, #16]
 8005824:	693b      	ldr	r3, [r7, #16]
}
 8005826:	e030      	b.n	800588a <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM5)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a1c      	ldr	r2, [pc, #112]	; (80058a0 <HAL_TIM_Base_MspInit+0x108>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d12b      	bne.n	800588a <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005832:	2300      	movs	r3, #0
 8005834:	60fb      	str	r3, [r7, #12]
 8005836:	4b17      	ldr	r3, [pc, #92]	; (8005894 <HAL_TIM_Base_MspInit+0xfc>)
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	4a16      	ldr	r2, [pc, #88]	; (8005894 <HAL_TIM_Base_MspInit+0xfc>)
 800583c:	f043 0308 	orr.w	r3, r3, #8
 8005840:	6413      	str	r3, [r2, #64]	; 0x40
 8005842:	4b14      	ldr	r3, [pc, #80]	; (8005894 <HAL_TIM_Base_MspInit+0xfc>)
 8005844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005846:	f003 0308 	and.w	r3, r3, #8
 800584a:	60fb      	str	r3, [r7, #12]
 800584c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800584e:	2300      	movs	r3, #0
 8005850:	60bb      	str	r3, [r7, #8]
 8005852:	4b10      	ldr	r3, [pc, #64]	; (8005894 <HAL_TIM_Base_MspInit+0xfc>)
 8005854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005856:	4a0f      	ldr	r2, [pc, #60]	; (8005894 <HAL_TIM_Base_MspInit+0xfc>)
 8005858:	f043 0301 	orr.w	r3, r3, #1
 800585c:	6313      	str	r3, [r2, #48]	; 0x30
 800585e:	4b0d      	ldr	r3, [pc, #52]	; (8005894 <HAL_TIM_Base_MspInit+0xfc>)
 8005860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	60bb      	str	r3, [r7, #8]
 8005868:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PDCF_IC_Pin|PDCR_IC_Pin;
 800586a:	2303      	movs	r3, #3
 800586c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800586e:	2302      	movs	r3, #2
 8005870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005872:	2300      	movs	r3, #0
 8005874:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005876:	2300      	movs	r3, #0
 8005878:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800587a:	2302      	movs	r3, #2
 800587c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800587e:	f107 031c 	add.w	r3, r7, #28
 8005882:	4619      	mov	r1, r3
 8005884:	4807      	ldr	r0, [pc, #28]	; (80058a4 <HAL_TIM_Base_MspInit+0x10c>)
 8005886:	f002 faff 	bl	8007e88 <HAL_GPIO_Init>
}
 800588a:	bf00      	nop
 800588c:	3730      	adds	r7, #48	; 0x30
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	40023800 	.word	0x40023800
 8005898:	40000400 	.word	0x40000400
 800589c:	40000800 	.word	0x40000800
 80058a0:	40000c00 	.word	0x40000c00
 80058a4:	40020000 	.word	0x40020000

080058a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b08c      	sub	sp, #48	; 0x30
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058b0:	f107 031c 	add.w	r3, r7, #28
 80058b4:	2200      	movs	r2, #0
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	605a      	str	r2, [r3, #4]
 80058ba:	609a      	str	r2, [r3, #8]
 80058bc:	60da      	str	r2, [r3, #12]
 80058be:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058c8:	d13e      	bne.n	8005948 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058ca:	2300      	movs	r3, #0
 80058cc:	61bb      	str	r3, [r7, #24]
 80058ce:	4b45      	ldr	r3, [pc, #276]	; (80059e4 <HAL_TIM_MspPostInit+0x13c>)
 80058d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d2:	4a44      	ldr	r2, [pc, #272]	; (80059e4 <HAL_TIM_MspPostInit+0x13c>)
 80058d4:	f043 0302 	orr.w	r3, r3, #2
 80058d8:	6313      	str	r3, [r2, #48]	; 0x30
 80058da:	4b42      	ldr	r3, [pc, #264]	; (80059e4 <HAL_TIM_MspPostInit+0x13c>)
 80058dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	61bb      	str	r3, [r7, #24]
 80058e4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058e6:	2300      	movs	r3, #0
 80058e8:	617b      	str	r3, [r7, #20]
 80058ea:	4b3e      	ldr	r3, [pc, #248]	; (80059e4 <HAL_TIM_MspPostInit+0x13c>)
 80058ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ee:	4a3d      	ldr	r2, [pc, #244]	; (80059e4 <HAL_TIM_MspPostInit+0x13c>)
 80058f0:	f043 0301 	orr.w	r3, r3, #1
 80058f4:	6313      	str	r3, [r2, #48]	; 0x30
 80058f6:	4b3b      	ldr	r3, [pc, #236]	; (80059e4 <HAL_TIM_MspPostInit+0x13c>)
 80058f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	617b      	str	r3, [r7, #20]
 8005900:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = IL_PWM_Pin|RPL_PWM_Pin;
 8005902:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8005906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005908:	2302      	movs	r3, #2
 800590a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800590c:	2300      	movs	r3, #0
 800590e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005910:	2300      	movs	r3, #0
 8005912:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005914:	2301      	movs	r3, #1
 8005916:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005918:	f107 031c 	add.w	r3, r7, #28
 800591c:	4619      	mov	r1, r3
 800591e:	4832      	ldr	r0, [pc, #200]	; (80059e8 <HAL_TIM_MspPostInit+0x140>)
 8005920:	f002 fab2 	bl	8007e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LB_PWM_Pin;
 8005924:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800592a:	2302      	movs	r3, #2
 800592c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800592e:	2300      	movs	r3, #0
 8005930:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005932:	2300      	movs	r3, #0
 8005934:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005936:	2301      	movs	r3, #1
 8005938:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LB_PWM_GPIO_Port, &GPIO_InitStruct);
 800593a:	f107 031c 	add.w	r3, r7, #28
 800593e:	4619      	mov	r1, r3
 8005940:	482a      	ldr	r0, [pc, #168]	; (80059ec <HAL_TIM_MspPostInit+0x144>)
 8005942:	f002 faa1 	bl	8007e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005946:	e048      	b.n	80059da <HAL_TIM_MspPostInit+0x132>
  else if(timHandle->Instance==TIM3)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a28      	ldr	r2, [pc, #160]	; (80059f0 <HAL_TIM_MspPostInit+0x148>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d11f      	bne.n	8005992 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005952:	2300      	movs	r3, #0
 8005954:	613b      	str	r3, [r7, #16]
 8005956:	4b23      	ldr	r3, [pc, #140]	; (80059e4 <HAL_TIM_MspPostInit+0x13c>)
 8005958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595a:	4a22      	ldr	r2, [pc, #136]	; (80059e4 <HAL_TIM_MspPostInit+0x13c>)
 800595c:	f043 0304 	orr.w	r3, r3, #4
 8005960:	6313      	str	r3, [r2, #48]	; 0x30
 8005962:	4b20      	ldr	r3, [pc, #128]	; (80059e4 <HAL_TIM_MspPostInit+0x13c>)
 8005964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005966:	f003 0304 	and.w	r3, r3, #4
 800596a:	613b      	str	r3, [r7, #16]
 800596c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DL_PWM_Pin|BL_PWM_Pin|FFL_PWM_Pin|RFL_PWM_Pin;
 800596e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005974:	2302      	movs	r3, #2
 8005976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005978:	2300      	movs	r3, #0
 800597a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800597c:	2300      	movs	r3, #0
 800597e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005980:	2302      	movs	r3, #2
 8005982:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005984:	f107 031c 	add.w	r3, r7, #28
 8005988:	4619      	mov	r1, r3
 800598a:	481a      	ldr	r0, [pc, #104]	; (80059f4 <HAL_TIM_MspPostInit+0x14c>)
 800598c:	f002 fa7c 	bl	8007e88 <HAL_GPIO_Init>
}
 8005990:	e023      	b.n	80059da <HAL_TIM_MspPostInit+0x132>
  else if(timHandle->Instance==TIM4)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a18      	ldr	r2, [pc, #96]	; (80059f8 <HAL_TIM_MspPostInit+0x150>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d11e      	bne.n	80059da <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800599c:	2300      	movs	r3, #0
 800599e:	60fb      	str	r3, [r7, #12]
 80059a0:	4b10      	ldr	r3, [pc, #64]	; (80059e4 <HAL_TIM_MspPostInit+0x13c>)
 80059a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a4:	4a0f      	ldr	r2, [pc, #60]	; (80059e4 <HAL_TIM_MspPostInit+0x13c>)
 80059a6:	f043 0302 	orr.w	r3, r3, #2
 80059aa:	6313      	str	r3, [r2, #48]	; 0x30
 80059ac:	4b0d      	ldr	r3, [pc, #52]	; (80059e4 <HAL_TIM_MspPostInit+0x13c>)
 80059ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	60fb      	str	r3, [r7, #12]
 80059b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LTS_PWM_Pin|RTS_PWM_Pin;
 80059b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80059bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059be:	2302      	movs	r3, #2
 80059c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059c2:	2300      	movs	r3, #0
 80059c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059c6:	2300      	movs	r3, #0
 80059c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80059ca:	2302      	movs	r3, #2
 80059cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059ce:	f107 031c 	add.w	r3, r7, #28
 80059d2:	4619      	mov	r1, r3
 80059d4:	4804      	ldr	r0, [pc, #16]	; (80059e8 <HAL_TIM_MspPostInit+0x140>)
 80059d6:	f002 fa57 	bl	8007e88 <HAL_GPIO_Init>
}
 80059da:	bf00      	nop
 80059dc:	3730      	adds	r7, #48	; 0x30
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	40023800 	.word	0x40023800
 80059e8:	40020400 	.word	0x40020400
 80059ec:	40020000 	.word	0x40020000
 80059f0:	40000400 	.word	0x40000400
 80059f4:	40020800 	.word	0x40020800
 80059f8:	40000800 	.word	0x40000800

080059fc <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a0c:	d109      	bne.n	8005a22 <HAL_TIM_Base_MspDeInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */

  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 8005a0e:	4b1f      	ldr	r3, [pc, #124]	; (8005a8c <HAL_TIM_Base_MspDeInit+0x90>)
 8005a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a12:	4a1e      	ldr	r2, [pc, #120]	; (8005a8c <HAL_TIM_Base_MspDeInit+0x90>)
 8005a14:	f023 0301 	bic.w	r3, r3, #1
 8005a18:	6413      	str	r3, [r2, #64]	; 0x40

    /* TIM2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8005a1a:	201c      	movs	r0, #28
 8005a1c:	f001 fb03 	bl	8007026 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspDeInit 1 */

  /* USER CODE END TIM5_MspDeInit 1 */
  }
}
 8005a20:	e02f      	b.n	8005a82 <HAL_TIM_Base_MspDeInit+0x86>
  else if(tim_baseHandle->Instance==TIM3)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a1a      	ldr	r2, [pc, #104]	; (8005a90 <HAL_TIM_Base_MspDeInit+0x94>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d109      	bne.n	8005a40 <HAL_TIM_Base_MspDeInit+0x44>
    __HAL_RCC_TIM3_CLK_DISABLE();
 8005a2c:	4b17      	ldr	r3, [pc, #92]	; (8005a8c <HAL_TIM_Base_MspDeInit+0x90>)
 8005a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a30:	4a16      	ldr	r2, [pc, #88]	; (8005a8c <HAL_TIM_Base_MspDeInit+0x90>)
 8005a32:	f023 0302 	bic.w	r3, r3, #2
 8005a36:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8005a38:	201d      	movs	r0, #29
 8005a3a:	f001 faf4 	bl	8007026 <HAL_NVIC_DisableIRQ>
}
 8005a3e:	e020      	b.n	8005a82 <HAL_TIM_Base_MspDeInit+0x86>
  else if(tim_baseHandle->Instance==TIM4)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a13      	ldr	r2, [pc, #76]	; (8005a94 <HAL_TIM_Base_MspDeInit+0x98>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d109      	bne.n	8005a5e <HAL_TIM_Base_MspDeInit+0x62>
    __HAL_RCC_TIM4_CLK_DISABLE();
 8005a4a:	4b10      	ldr	r3, [pc, #64]	; (8005a8c <HAL_TIM_Base_MspDeInit+0x90>)
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4e:	4a0f      	ldr	r2, [pc, #60]	; (8005a8c <HAL_TIM_Base_MspDeInit+0x90>)
 8005a50:	f023 0304 	bic.w	r3, r3, #4
 8005a54:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM4_IRQn);
 8005a56:	201e      	movs	r0, #30
 8005a58:	f001 fae5 	bl	8007026 <HAL_NVIC_DisableIRQ>
}
 8005a5c:	e011      	b.n	8005a82 <HAL_TIM_Base_MspDeInit+0x86>
  else if(tim_baseHandle->Instance==TIM5)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a0d      	ldr	r2, [pc, #52]	; (8005a98 <HAL_TIM_Base_MspDeInit+0x9c>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d10c      	bne.n	8005a82 <HAL_TIM_Base_MspDeInit+0x86>
    __HAL_RCC_TIM5_CLK_DISABLE();
 8005a68:	4b08      	ldr	r3, [pc, #32]	; (8005a8c <HAL_TIM_Base_MspDeInit+0x90>)
 8005a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6c:	4a07      	ldr	r2, [pc, #28]	; (8005a8c <HAL_TIM_Base_MspDeInit+0x90>)
 8005a6e:	f023 0308 	bic.w	r3, r3, #8
 8005a72:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, PDCF_IC_Pin|PDCR_IC_Pin);
 8005a74:	2103      	movs	r1, #3
 8005a76:	4809      	ldr	r0, [pc, #36]	; (8005a9c <HAL_TIM_Base_MspDeInit+0xa0>)
 8005a78:	f002 fb8a 	bl	8008190 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(TIM5_IRQn);
 8005a7c:	2032      	movs	r0, #50	; 0x32
 8005a7e:	f001 fad2 	bl	8007026 <HAL_NVIC_DisableIRQ>
}
 8005a82:	bf00      	nop
 8005a84:	3708      	adds	r7, #8
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	40023800 	.word	0x40023800
 8005a90:	40000400 	.word	0x40000400
 8005a94:	40000800 	.word	0x40000800
 8005a98:	40000c00 	.word	0x40000c00
 8005a9c:	40020000 	.word	0x40020000

08005aa0 <HAL_UART_MspInit>:
  /* USER CODE END USART1_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b08a      	sub	sp, #40	; 0x28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005aa8:	f107 0314 	add.w	r3, r7, #20
 8005aac:	2200      	movs	r2, #0
 8005aae:	601a      	str	r2, [r3, #0]
 8005ab0:	605a      	str	r2, [r3, #4]
 8005ab2:	609a      	str	r2, [r3, #8]
 8005ab4:	60da      	str	r2, [r3, #12]
 8005ab6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a19      	ldr	r2, [pc, #100]	; (8005b24 <HAL_UART_MspInit+0x84>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d12c      	bne.n	8005b1c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	613b      	str	r3, [r7, #16]
 8005ac6:	4b18      	ldr	r3, [pc, #96]	; (8005b28 <HAL_UART_MspInit+0x88>)
 8005ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aca:	4a17      	ldr	r2, [pc, #92]	; (8005b28 <HAL_UART_MspInit+0x88>)
 8005acc:	f043 0310 	orr.w	r3, r3, #16
 8005ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8005ad2:	4b15      	ldr	r3, [pc, #84]	; (8005b28 <HAL_UART_MspInit+0x88>)
 8005ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad6:	f003 0310 	and.w	r3, r3, #16
 8005ada:	613b      	str	r3, [r7, #16]
 8005adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ade:	2300      	movs	r3, #0
 8005ae0:	60fb      	str	r3, [r7, #12]
 8005ae2:	4b11      	ldr	r3, [pc, #68]	; (8005b28 <HAL_UART_MspInit+0x88>)
 8005ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae6:	4a10      	ldr	r2, [pc, #64]	; (8005b28 <HAL_UART_MspInit+0x88>)
 8005ae8:	f043 0301 	orr.w	r3, r3, #1
 8005aec:	6313      	str	r3, [r2, #48]	; 0x30
 8005aee:	4b0e      	ldr	r3, [pc, #56]	; (8005b28 <HAL_UART_MspInit+0x88>)
 8005af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af2:	f003 0301 	and.w	r3, r3, #1
 8005af6:	60fb      	str	r3, [r7, #12]
 8005af8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005afa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b00:	2302      	movs	r3, #2
 8005b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b04:	2300      	movs	r3, #0
 8005b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005b0c:	2307      	movs	r3, #7
 8005b0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b10:	f107 0314 	add.w	r3, r7, #20
 8005b14:	4619      	mov	r1, r3
 8005b16:	4805      	ldr	r0, [pc, #20]	; (8005b2c <HAL_UART_MspInit+0x8c>)
 8005b18:	f002 f9b6 	bl	8007e88 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005b1c:	bf00      	nop
 8005b1e:	3728      	adds	r7, #40	; 0x28
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	40011000 	.word	0x40011000
 8005b28:	40023800 	.word	0x40023800
 8005b2c:	40020000 	.word	0x40020000

08005b30 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a0a      	ldr	r2, [pc, #40]	; (8005b68 <HAL_UART_MspDeInit+0x38>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d10d      	bne.n	8005b5e <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8005b42:	4b0a      	ldr	r3, [pc, #40]	; (8005b6c <HAL_UART_MspDeInit+0x3c>)
 8005b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b46:	4a09      	ldr	r2, [pc, #36]	; (8005b6c <HAL_UART_MspDeInit+0x3c>)
 8005b48:	f023 0310 	bic.w	r3, r3, #16
 8005b4c:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8005b4e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005b52:	4807      	ldr	r0, [pc, #28]	; (8005b70 <HAL_UART_MspDeInit+0x40>)
 8005b54:	f002 fb1c 	bl	8008190 <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8005b58:	2025      	movs	r0, #37	; 0x25
 8005b5a:	f001 fa64 	bl	8007026 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8005b5e:	bf00      	nop
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	40011000 	.word	0x40011000
 8005b6c:	40023800 	.word	0x40023800
 8005b70:	40020000 	.word	0x40020000

08005b74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005b74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005bac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005b78:	480d      	ldr	r0, [pc, #52]	; (8005bb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005b7a:	490e      	ldr	r1, [pc, #56]	; (8005bb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005b7c:	4a0e      	ldr	r2, [pc, #56]	; (8005bb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005b80:	e002      	b.n	8005b88 <LoopCopyDataInit>

08005b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b86:	3304      	adds	r3, #4

08005b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005b8c:	d3f9      	bcc.n	8005b82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005b8e:	4a0b      	ldr	r2, [pc, #44]	; (8005bbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005b90:	4c0b      	ldr	r4, [pc, #44]	; (8005bc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005b94:	e001      	b.n	8005b9a <LoopFillZerobss>

08005b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b98:	3204      	adds	r2, #4

08005b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005b9c:	d3fb      	bcc.n	8005b96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005b9e:	f7ff fde9 	bl	8005774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005ba2:	f00d fe33 	bl	801380c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005ba6:	f7fb f8e3 	bl	8000d70 <main>
  bx  lr    
 8005baa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005bac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005bb4:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8005bb8:	08014b4c 	.word	0x08014b4c
  ldr r2, =_sbss
 8005bbc:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8005bc0:	200094f0 	.word	0x200094f0

08005bc4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005bc4:	e7fe      	b.n	8005bc4 <DMA1_Stream0_IRQHandler>

08005bc6 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b084      	sub	sp, #16
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d104      	bne.n	8005bde <stm32_lock_acquire+0x18>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005bd4:	b672      	cpsid	i
}
 8005bd6:	bf00      	nop
 8005bd8:	f00d fde2 	bl	80137a0 <Error_Handler>
 8005bdc:	e7fe      	b.n	8005bdc <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	7a1b      	ldrb	r3, [r3, #8]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d904      	bls.n	8005bf0 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8005be6:	b672      	cpsid	i
}
 8005be8:	bf00      	nop
 8005bea:	f00d fdd9 	bl	80137a0 <Error_Handler>
 8005bee:	e7fe      	b.n	8005bee <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	7a1b      	ldrb	r3, [r3, #8]
 8005bf4:	1c5a      	adds	r2, r3, #1
 8005bf6:	b2d1      	uxtb	r1, r2
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	7211      	strb	r1, [r2, #8]
 8005bfc:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005bfe:	f3ef 8211 	mrs	r2, BASEPRI
 8005c02:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8005c06:	f383 8811 	msr	BASEPRI, r3
 8005c0a:	f3bf 8f6f 	isb	sy
 8005c0e:	f3bf 8f4f 	dsb	sy
 8005c12:	60fa      	str	r2, [r7, #12]
 8005c14:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8005c1e:	bf00      	nop
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b084      	sub	sp, #16
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d104      	bne.n	8005c3e <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8005c34:	b672      	cpsid	i
}
 8005c36:	bf00      	nop
 8005c38:	f00d fdb2 	bl	80137a0 <Error_Handler>
 8005c3c:	e7fe      	b.n	8005c3c <stm32_lock_release+0x16>
  lock->nesting_level--;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	7a1b      	ldrb	r3, [r3, #8]
 8005c42:	3b01      	subs	r3, #1
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	7a1b      	ldrb	r3, [r3, #8]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d904      	bls.n	8005c5c <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8005c52:	b672      	cpsid	i
}
 8005c54:	bf00      	nop
 8005c56:	f00d fda3 	bl	80137a0 <Error_Handler>
 8005c5a:	e7fe      	b.n	8005c5a <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	7a1b      	ldrb	r3, [r3, #8]
 8005c60:	461a      	mov	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c68:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c70:	bf00      	nop
}
 8005c72:	bf00      	nop
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b082      	sub	sp, #8
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d104      	bne.n	8005c92 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8005c88:	b672      	cpsid	i
}
 8005c8a:	bf00      	nop
 8005c8c:	f00d fd88 	bl	80137a0 <Error_Handler>
 8005c90:	e7fe      	b.n	8005c90 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7ff ff96 	bl	8005bc6 <stm32_lock_acquire>
}
 8005c9a:	bf00      	nop
 8005c9c:	3708      	adds	r7, #8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b082      	sub	sp, #8
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d104      	bne.n	8005cba <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8005cb0:	b672      	cpsid	i
}
 8005cb2:	bf00      	nop
 8005cb4:	f00d fd74 	bl	80137a0 <Error_Handler>
 8005cb8:	e7fe      	b.n	8005cb8 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7ff ffb2 	bl	8005c26 <stm32_lock_release>
}
 8005cc2:	bf00      	nop
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <Dem_MainFunction>:
/***********************************************************************************
* Function: Dem_MainFunction													   *
* Description: Module main function.									 		   *
************************************************************************************/
VOID Dem_MainFunction()
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	af00      	add	r7, sp, #0
	Dem_ProcessFault();
 8005cce:	f000 f803 	bl	8005cd8 <Dem_ProcessFault>
}
 8005cd2:	bf00      	nop
 8005cd4:	bd80      	pop	{r7, pc}
	...

08005cd8 <Dem_ProcessFault>:
/***********************************************************************************
* Function: Dem_ProcessFault													   *
* Description: Process fault from application.							 		   *
************************************************************************************/
VOID Dem_ProcessFault()
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
	if(firstRun == STD_LOW)
 8005cde:	4b4a      	ldr	r3, [pc, #296]	; (8005e08 <Dem_ProcessFault+0x130>)
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d11a      	bne.n	8005d1c <Dem_ProcessFault+0x44>
	{
		I2cExtEeprom_Read(100, 0, Dem_MemDtcArray, 24);
 8005ce6:	2318      	movs	r3, #24
 8005ce8:	4a48      	ldr	r2, [pc, #288]	; (8005e0c <Dem_ProcessFault+0x134>)
 8005cea:	2100      	movs	r1, #0
 8005cec:	2064      	movs	r0, #100	; 0x64
 8005cee:	f7fd fdfb 	bl	80038e8 <I2cExtEeprom_Read>
		firstRun = STD_HIGH;
 8005cf2:	4b45      	ldr	r3, [pc, #276]	; (8005e08 <Dem_ProcessFault+0x130>)
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	701a      	strb	r2, [r3, #0]
		for(uint8 idx = STD_LOW; idx < 24; idx++)
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	71fb      	strb	r3, [r7, #7]
 8005cfc:	e00b      	b.n	8005d16 <Dem_ProcessFault+0x3e>
		{
			if(Dem_MemDtcArray[idx] >= 254)
 8005cfe:	79fb      	ldrb	r3, [r7, #7]
 8005d00:	4a42      	ldr	r2, [pc, #264]	; (8005e0c <Dem_ProcessFault+0x134>)
 8005d02:	5cd3      	ldrb	r3, [r2, r3]
 8005d04:	2bfd      	cmp	r3, #253	; 0xfd
 8005d06:	d903      	bls.n	8005d10 <Dem_ProcessFault+0x38>
			{
				Dem_MemDtcArray[idx] = STD_LOW;
 8005d08:	79fb      	ldrb	r3, [r7, #7]
 8005d0a:	4a40      	ldr	r2, [pc, #256]	; (8005e0c <Dem_ProcessFault+0x134>)
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	54d1      	strb	r1, [r2, r3]
		for(uint8 idx = STD_LOW; idx < 24; idx++)
 8005d10:	79fb      	ldrb	r3, [r7, #7]
 8005d12:	3301      	adds	r3, #1
 8005d14:	71fb      	strb	r3, [r7, #7]
 8005d16:	79fb      	ldrb	r3, [r7, #7]
 8005d18:	2b17      	cmp	r3, #23
 8005d1a:	d9f0      	bls.n	8005cfe <Dem_ProcessFault+0x26>
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_LowBeam_CurrentState == STD_LOW)
 8005d1c:	4b3c      	ldr	r3, [pc, #240]	; (8005e10 <Dem_ProcessFault+0x138>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d105      	bne.n	8005d30 <Dem_ProcessFault+0x58>
	{
		Dem_DtcArray[POSITION_DTC_LOW_BEAM_LEFT_MALFUNCTION] = STD_LOW;
 8005d24:	4b3b      	ldr	r3, [pc, #236]	; (8005e14 <Dem_ProcessFault+0x13c>)
 8005d26:	2200      	movs	r2, #0
 8005d28:	701a      	strb	r2, [r3, #0]
		Dem_DtcArray[POSITION_DTC_LOW_BEAM_RIGHT_MALFUNCTION] = STD_LOW;
 8005d2a:	4b3a      	ldr	r3, [pc, #232]	; (8005e14 <Dem_ProcessFault+0x13c>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	705a      	strb	r2, [r3, #1]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState == STD_LOW)
 8005d30:	4b39      	ldr	r3, [pc, #228]	; (8005e18 <Dem_ProcessFault+0x140>)
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d105      	bne.n	8005d44 <Dem_ProcessFault+0x6c>
	{
		Dem_DtcArray[POSITION_DTC_BRAKE_LIGHT_LEFT_MALFUNCTION] = STD_LOW;
 8005d38:	4b36      	ldr	r3, [pc, #216]	; (8005e14 <Dem_ProcessFault+0x13c>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	721a      	strb	r2, [r3, #8]
		Dem_DtcArray[POSITION_DTC_BRAKE_LIGHT_RIGHT_MALFUNCTION] = STD_LOW;
 8005d3e:	4b35      	ldr	r3, [pc, #212]	; (8005e14 <Dem_ProcessFault+0x13c>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	725a      	strb	r2, [r3, #9]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearPositionLights_CurrentState == STD_LOW)
 8005d44:	4b35      	ldr	r3, [pc, #212]	; (8005e1c <Dem_ProcessFault+0x144>)
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d105      	bne.n	8005d58 <Dem_ProcessFault+0x80>
	{
		Dem_DtcArray[POSITION_DTC_REAR_POSITION_LIGHT_LEFT_MALFUNCTION] = STD_LOW;
 8005d4c:	4b31      	ldr	r3, [pc, #196]	; (8005e14 <Dem_ProcessFault+0x13c>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	709a      	strb	r2, [r3, #2]
		Dem_DtcArray[POSITION_DTC_REAR_POSITION_LIGHT_RIGHT_MALFUNCTION] = STD_LOW;
 8005d52:	4b30      	ldr	r3, [pc, #192]	; (8005e14 <Dem_ProcessFault+0x13c>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	70da      	strb	r2, [r3, #3]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState == STD_LOW)
 8005d58:	4b31      	ldr	r3, [pc, #196]	; (8005e20 <Dem_ProcessFault+0x148>)
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d105      	bne.n	8005d6c <Dem_ProcessFault+0x94>
	{
		Dem_DtcArray[POSITION_DTC_LEFT_TURN_SIGNAL_FRONT_MALFUNCTION] = STD_LOW;
 8005d60:	4b2c      	ldr	r3, [pc, #176]	; (8005e14 <Dem_ProcessFault+0x13c>)
 8005d62:	2200      	movs	r2, #0
 8005d64:	719a      	strb	r2, [r3, #6]
		Dem_DtcArray[POSITION_DTC_LEFT_TURN_SIGNAL_REAR_MALFUNCTION] = STD_LOW;
 8005d66:	4b2b      	ldr	r3, [pc, #172]	; (8005e14 <Dem_ProcessFault+0x13c>)
 8005d68:	2200      	movs	r2, #0
 8005d6a:	71da      	strb	r2, [r3, #7]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState == STD_LOW)
 8005d6c:	4b2d      	ldr	r3, [pc, #180]	; (8005e24 <Dem_ProcessFault+0x14c>)
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d105      	bne.n	8005d80 <Dem_ProcessFault+0xa8>
	{
		Dem_DtcArray[POSITION_DTC_RIGHT_TURN_SIGNAL_FRONT_MALFUNCTION] = STD_LOW;
 8005d74:	4b27      	ldr	r3, [pc, #156]	; (8005e14 <Dem_ProcessFault+0x13c>)
 8005d76:	2200      	movs	r2, #0
 8005d78:	711a      	strb	r2, [r3, #4]
		Dem_DtcArray[POSITION_DTC_RIGHT_TURN_SIGNAL_REAR_MALFUNCTION] = STD_LOW;
 8005d7a:	4b26      	ldr	r3, [pc, #152]	; (8005e14 <Dem_ProcessFault+0x13c>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	715a      	strb	r2, [r3, #5]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelFour != STD_LOW || Rte_P_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState == STD_LOW)
 8005d80:	4b29      	ldr	r3, [pc, #164]	; (8005e28 <Dem_ProcessFault+0x150>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d103      	bne.n	8005d90 <Dem_ProcessFault+0xb8>
 8005d88:	4b28      	ldr	r3, [pc, #160]	; (8005e2c <Dem_ProcessFault+0x154>)
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d102      	bne.n	8005d96 <Dem_ProcessFault+0xbe>
	{
		Dem_DtcArray[POSITION_DTC_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION] = STD_LOW;
 8005d90:	4b20      	ldr	r3, [pc, #128]	; (8005e14 <Dem_ProcessFault+0x13c>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	739a      	strb	r2, [r3, #14]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelThree != STD_LOW || Rte_P_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState == STD_LOW)
 8005d96:	4b26      	ldr	r3, [pc, #152]	; (8005e30 <Dem_ProcessFault+0x158>)
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d103      	bne.n	8005da6 <Dem_ProcessFault+0xce>
 8005d9e:	4b23      	ldr	r3, [pc, #140]	; (8005e2c <Dem_ProcessFault+0x154>)
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d102      	bne.n	8005dac <Dem_ProcessFault+0xd4>
	{
		Dem_DtcArray[POSITION_DTC_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION] = STD_LOW;
 8005da6:	4b1b      	ldr	r3, [pc, #108]	; (8005e14 <Dem_ProcessFault+0x13c>)
 8005da8:	2200      	movs	r2, #0
 8005daa:	73da      	strb	r2, [r3, #15]
	}
	else
	{
		/* do nothing */
	}
	for(uint8 index = POSITION_DTC_LOW_BEAM_LEFT_MALFUNCTION; index <= POSITION_DTC_PERIPHERAL_ERROR; index++)
 8005dac:	2300      	movs	r3, #0
 8005dae:	71bb      	strb	r3, [r7, #6]
 8005db0:	e01e      	b.n	8005df0 <Dem_ProcessFault+0x118>
	{
		if(Dem_MemDtcArray[index] != Dem_DtcArray[index] && Dem_DtcArray[index] >= 2)
 8005db2:	79bb      	ldrb	r3, [r7, #6]
 8005db4:	4a15      	ldr	r2, [pc, #84]	; (8005e0c <Dem_ProcessFault+0x134>)
 8005db6:	5cd2      	ldrb	r2, [r2, r3]
 8005db8:	79bb      	ldrb	r3, [r7, #6]
 8005dba:	4916      	ldr	r1, [pc, #88]	; (8005e14 <Dem_ProcessFault+0x13c>)
 8005dbc:	5ccb      	ldrb	r3, [r1, r3]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d013      	beq.n	8005dea <Dem_ProcessFault+0x112>
 8005dc2:	79bb      	ldrb	r3, [r7, #6]
 8005dc4:	4a13      	ldr	r2, [pc, #76]	; (8005e14 <Dem_ProcessFault+0x13c>)
 8005dc6:	5cd3      	ldrb	r3, [r2, r3]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d90e      	bls.n	8005dea <Dem_ProcessFault+0x112>
		{
			Dem_MemDtcArray[index] = Dem_DtcArray[index];
 8005dcc:	79ba      	ldrb	r2, [r7, #6]
 8005dce:	79bb      	ldrb	r3, [r7, #6]
 8005dd0:	4910      	ldr	r1, [pc, #64]	; (8005e14 <Dem_ProcessFault+0x13c>)
 8005dd2:	5c89      	ldrb	r1, [r1, r2]
 8005dd4:	4a0d      	ldr	r2, [pc, #52]	; (8005e0c <Dem_ProcessFault+0x134>)
 8005dd6:	54d1      	strb	r1, [r2, r3]
			I2cExtEeprom_Write(100, index, &Dem_DtcArray[index], 1);
 8005dd8:	79bb      	ldrb	r3, [r7, #6]
 8005dda:	b299      	uxth	r1, r3
 8005ddc:	79bb      	ldrb	r3, [r7, #6]
 8005dde:	4a0d      	ldr	r2, [pc, #52]	; (8005e14 <Dem_ProcessFault+0x13c>)
 8005de0:	441a      	add	r2, r3
 8005de2:	2301      	movs	r3, #1
 8005de4:	2064      	movs	r0, #100	; 0x64
 8005de6:	f7fd fd17 	bl	8003818 <I2cExtEeprom_Write>
	for(uint8 index = POSITION_DTC_LOW_BEAM_LEFT_MALFUNCTION; index <= POSITION_DTC_PERIPHERAL_ERROR; index++)
 8005dea:	79bb      	ldrb	r3, [r7, #6]
 8005dec:	3301      	adds	r3, #1
 8005dee:	71bb      	strb	r3, [r7, #6]
 8005df0:	79bb      	ldrb	r3, [r7, #6]
 8005df2:	2b17      	cmp	r3, #23
 8005df4:	d9dd      	bls.n	8005db2 <Dem_ProcessFault+0xda>
		else
		{
			/* do nothing */
		}
	}
	Rte_Read_Dem_DemPort_Dem_DtcArray(0, 0);
 8005df6:	2100      	movs	r1, #0
 8005df8:	2000      	movs	r0, #0
 8005dfa:	f00b febd 	bl	8011b78 <Rte_Read_Dem_DemPort_Dem_DtcArray>
}
 8005dfe:	bf00      	nop
 8005e00:	3708      	adds	r7, #8
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	200008c4 	.word	0x200008c4
 8005e0c:	200008ac 	.word	0x200008ac
 8005e10:	20000154 	.word	0x20000154
 8005e14:	20000894 	.word	0x20000894
 8005e18:	2000014e 	.word	0x2000014e
 8005e1c:	20000155 	.word	0x20000155
 8005e20:	20000152 	.word	0x20000152
 8005e24:	20000153 	.word	0x20000153
 8005e28:	20000949 	.word	0x20000949
 8005e2c:	2000014c 	.word	0x2000014c
 8005e30:	20000939 	.word	0x20000939

08005e34 <Dem_ReceiveFault>:
/***********************************************************************************
* Function: Dem_ReceiveFault													   *
* Description: Receives fault from application.							 		   *
************************************************************************************/
VOID Dem_ReceiveFault(uint8 faultValue)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	71fb      	strb	r3, [r7, #7]
	switch(faultValue)
 8005e3e:	79fb      	ldrb	r3, [r7, #7]
 8005e40:	3b02      	subs	r3, #2
 8005e42:	2b97      	cmp	r3, #151	; 0x97
 8005e44:	f200 819f 	bhi.w	8006186 <Dem_ReceiveFault+0x352>
 8005e48:	a201      	add	r2, pc, #4	; (adr r2, 8005e50 <Dem_ReceiveFault+0x1c>)
 8005e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4e:	bf00      	nop
 8005e50:	08006147 	.word	0x08006147
 8005e54:	0800612f 	.word	0x0800612f
 8005e58:	080060b1 	.word	0x080060b1
 8005e5c:	080060bf 	.word	0x080060bf
 8005e60:	08006187 	.word	0x08006187
 8005e64:	08006187 	.word	0x08006187
 8005e68:	08006187 	.word	0x08006187
 8005e6c:	08006187 	.word	0x08006187
 8005e70:	08006187 	.word	0x08006187
 8005e74:	08006187 	.word	0x08006187
 8005e78:	08006187 	.word	0x08006187
 8005e7c:	08006187 	.word	0x08006187
 8005e80:	08006187 	.word	0x08006187
 8005e84:	08006187 	.word	0x08006187
 8005e88:	08006187 	.word	0x08006187
 8005e8c:	08006187 	.word	0x08006187
 8005e90:	0800614f 	.word	0x0800614f
 8005e94:	08006137 	.word	0x08006137
 8005e98:	08006187 	.word	0x08006187
 8005e9c:	08006187 	.word	0x08006187
 8005ea0:	08006187 	.word	0x08006187
 8005ea4:	08006187 	.word	0x08006187
 8005ea8:	08006187 	.word	0x08006187
 8005eac:	08006187 	.word	0x08006187
 8005eb0:	08006187 	.word	0x08006187
 8005eb4:	08006187 	.word	0x08006187
 8005eb8:	08006187 	.word	0x08006187
 8005ebc:	08006187 	.word	0x08006187
 8005ec0:	08006187 	.word	0x08006187
 8005ec4:	08006187 	.word	0x08006187
 8005ec8:	08006187 	.word	0x08006187
 8005ecc:	08006187 	.word	0x08006187
 8005ed0:	08006157 	.word	0x08006157
 8005ed4:	08006187 	.word	0x08006187
 8005ed8:	08006187 	.word	0x08006187
 8005edc:	08006187 	.word	0x08006187
 8005ee0:	08006187 	.word	0x08006187
 8005ee4:	08006187 	.word	0x08006187
 8005ee8:	08006187 	.word	0x08006187
 8005eec:	08006187 	.word	0x08006187
 8005ef0:	08006187 	.word	0x08006187
 8005ef4:	08006187 	.word	0x08006187
 8005ef8:	08006187 	.word	0x08006187
 8005efc:	08006187 	.word	0x08006187
 8005f00:	08006187 	.word	0x08006187
 8005f04:	08006187 	.word	0x08006187
 8005f08:	08006187 	.word	0x08006187
 8005f0c:	08006187 	.word	0x08006187
 8005f10:	0800615f 	.word	0x0800615f
 8005f14:	0800613f 	.word	0x0800613f
 8005f18:	08006187 	.word	0x08006187
 8005f1c:	0800616f 	.word	0x0800616f
 8005f20:	08006187 	.word	0x08006187
 8005f24:	08006187 	.word	0x08006187
 8005f28:	08006187 	.word	0x08006187
 8005f2c:	08006187 	.word	0x08006187
 8005f30:	08006187 	.word	0x08006187
 8005f34:	08006187 	.word	0x08006187
 8005f38:	08006187 	.word	0x08006187
 8005f3c:	08006187 	.word	0x08006187
 8005f40:	08006187 	.word	0x08006187
 8005f44:	08006187 	.word	0x08006187
 8005f48:	08006187 	.word	0x08006187
 8005f4c:	08006187 	.word	0x08006187
 8005f50:	08006187 	.word	0x08006187
 8005f54:	08006187 	.word	0x08006187
 8005f58:	080060cd 	.word	0x080060cd
 8005f5c:	080060db 	.word	0x080060db
 8005f60:	08006187 	.word	0x08006187
 8005f64:	08006187 	.word	0x08006187
 8005f68:	08006187 	.word	0x08006187
 8005f6c:	08006187 	.word	0x08006187
 8005f70:	08006187 	.word	0x08006187
 8005f74:	08006187 	.word	0x08006187
 8005f78:	08006187 	.word	0x08006187
 8005f7c:	08006187 	.word	0x08006187
 8005f80:	08006187 	.word	0x08006187
 8005f84:	08006187 	.word	0x08006187
 8005f88:	08006187 	.word	0x08006187
 8005f8c:	08006187 	.word	0x08006187
 8005f90:	08006187 	.word	0x08006187
 8005f94:	08006187 	.word	0x08006187
 8005f98:	080060e9 	.word	0x080060e9
 8005f9c:	08006187 	.word	0x08006187
 8005fa0:	08006177 	.word	0x08006177
 8005fa4:	08006187 	.word	0x08006187
 8005fa8:	08006187 	.word	0x08006187
 8005fac:	08006187 	.word	0x08006187
 8005fb0:	08006187 	.word	0x08006187
 8005fb4:	08006187 	.word	0x08006187
 8005fb8:	08006187 	.word	0x08006187
 8005fbc:	08006187 	.word	0x08006187
 8005fc0:	08006187 	.word	0x08006187
 8005fc4:	08006187 	.word	0x08006187
 8005fc8:	08006187 	.word	0x08006187
 8005fcc:	08006187 	.word	0x08006187
 8005fd0:	08006167 	.word	0x08006167
 8005fd4:	08006187 	.word	0x08006187
 8005fd8:	080060f7 	.word	0x080060f7
 8005fdc:	08006105 	.word	0x08006105
 8005fe0:	08006187 	.word	0x08006187
 8005fe4:	08006187 	.word	0x08006187
 8005fe8:	08006187 	.word	0x08006187
 8005fec:	08006187 	.word	0x08006187
 8005ff0:	08006187 	.word	0x08006187
 8005ff4:	08006187 	.word	0x08006187
 8005ff8:	08006187 	.word	0x08006187
 8005ffc:	08006187 	.word	0x08006187
 8006000:	08006187 	.word	0x08006187
 8006004:	08006187 	.word	0x08006187
 8006008:	08006187 	.word	0x08006187
 800600c:	08006187 	.word	0x08006187
 8006010:	08006187 	.word	0x08006187
 8006014:	08006187 	.word	0x08006187
 8006018:	08006113 	.word	0x08006113
 800601c:	08006121 	.word	0x08006121
 8006020:	08006187 	.word	0x08006187
 8006024:	08006187 	.word	0x08006187
 8006028:	08006187 	.word	0x08006187
 800602c:	08006187 	.word	0x08006187
 8006030:	08006187 	.word	0x08006187
 8006034:	08006187 	.word	0x08006187
 8006038:	08006187 	.word	0x08006187
 800603c:	08006187 	.word	0x08006187
 8006040:	08006187 	.word	0x08006187
 8006044:	08006187 	.word	0x08006187
 8006048:	08006187 	.word	0x08006187
 800604c:	08006187 	.word	0x08006187
 8006050:	08006187 	.word	0x08006187
 8006054:	08006187 	.word	0x08006187
 8006058:	08006187 	.word	0x08006187
 800605c:	08006187 	.word	0x08006187
 8006060:	08006187 	.word	0x08006187
 8006064:	08006187 	.word	0x08006187
 8006068:	08006187 	.word	0x08006187
 800606c:	08006187 	.word	0x08006187
 8006070:	08006187 	.word	0x08006187
 8006074:	08006187 	.word	0x08006187
 8006078:	08006187 	.word	0x08006187
 800607c:	08006187 	.word	0x08006187
 8006080:	08006187 	.word	0x08006187
 8006084:	08006187 	.word	0x08006187
 8006088:	08006187 	.word	0x08006187
 800608c:	08006187 	.word	0x08006187
 8006090:	08006187 	.word	0x08006187
 8006094:	08006187 	.word	0x08006187
 8006098:	08006187 	.word	0x08006187
 800609c:	08006187 	.word	0x08006187
 80060a0:	08006187 	.word	0x08006187
 80060a4:	08006187 	.word	0x08006187
 80060a8:	08006187 	.word	0x08006187
 80060ac:	0800617f 	.word	0x0800617f
	{
		case DTC_LOW_BEAM_LEFT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_LOW_BEAM_LEFT_MALFUNCTION]++;
 80060b0:	4b38      	ldr	r3, [pc, #224]	; (8006194 <Dem_ReceiveFault+0x360>)
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	3301      	adds	r3, #1
 80060b6:	b2da      	uxtb	r2, r3
 80060b8:	4b36      	ldr	r3, [pc, #216]	; (8006194 <Dem_ReceiveFault+0x360>)
 80060ba:	701a      	strb	r2, [r3, #0]
			break;
 80060bc:	e064      	b.n	8006188 <Dem_ReceiveFault+0x354>
		case DTC_LOW_BEAM_RIGHT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_LOW_BEAM_RIGHT_MALFUNCTION]++;
 80060be:	4b35      	ldr	r3, [pc, #212]	; (8006194 <Dem_ReceiveFault+0x360>)
 80060c0:	785b      	ldrb	r3, [r3, #1]
 80060c2:	3301      	adds	r3, #1
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	4b33      	ldr	r3, [pc, #204]	; (8006194 <Dem_ReceiveFault+0x360>)
 80060c8:	705a      	strb	r2, [r3, #1]
			break;
 80060ca:	e05d      	b.n	8006188 <Dem_ReceiveFault+0x354>
		case DTC_REAR_POSITION_LIGHT_LEFT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_REAR_POSITION_LIGHT_LEFT_MALFUNCTION]++;
 80060cc:	4b31      	ldr	r3, [pc, #196]	; (8006194 <Dem_ReceiveFault+0x360>)
 80060ce:	789b      	ldrb	r3, [r3, #2]
 80060d0:	3301      	adds	r3, #1
 80060d2:	b2da      	uxtb	r2, r3
 80060d4:	4b2f      	ldr	r3, [pc, #188]	; (8006194 <Dem_ReceiveFault+0x360>)
 80060d6:	709a      	strb	r2, [r3, #2]
			break;
 80060d8:	e056      	b.n	8006188 <Dem_ReceiveFault+0x354>
		case DTC_REAR_POSITION_LIGHT_RIGHT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_REAR_POSITION_LIGHT_RIGHT_MALFUNCTION]++;
 80060da:	4b2e      	ldr	r3, [pc, #184]	; (8006194 <Dem_ReceiveFault+0x360>)
 80060dc:	78db      	ldrb	r3, [r3, #3]
 80060de:	3301      	adds	r3, #1
 80060e0:	b2da      	uxtb	r2, r3
 80060e2:	4b2c      	ldr	r3, [pc, #176]	; (8006194 <Dem_ReceiveFault+0x360>)
 80060e4:	70da      	strb	r2, [r3, #3]
			break;
 80060e6:	e04f      	b.n	8006188 <Dem_ReceiveFault+0x354>
		case DTC_RIGHT_TURN_SIGNAL_FRONT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_RIGHT_TURN_SIGNAL_FRONT_MALFUNCTION]++;
 80060e8:	4b2a      	ldr	r3, [pc, #168]	; (8006194 <Dem_ReceiveFault+0x360>)
 80060ea:	791b      	ldrb	r3, [r3, #4]
 80060ec:	3301      	adds	r3, #1
 80060ee:	b2da      	uxtb	r2, r3
 80060f0:	4b28      	ldr	r3, [pc, #160]	; (8006194 <Dem_ReceiveFault+0x360>)
 80060f2:	711a      	strb	r2, [r3, #4]
			break;
 80060f4:	e048      	b.n	8006188 <Dem_ReceiveFault+0x354>
		case DTC_LEFT_TURN_SIGNAL_FRONT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_LEFT_TURN_SIGNAL_FRONT_MALFUNCTION]++;
 80060f6:	4b27      	ldr	r3, [pc, #156]	; (8006194 <Dem_ReceiveFault+0x360>)
 80060f8:	799b      	ldrb	r3, [r3, #6]
 80060fa:	3301      	adds	r3, #1
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	4b25      	ldr	r3, [pc, #148]	; (8006194 <Dem_ReceiveFault+0x360>)
 8006100:	719a      	strb	r2, [r3, #6]
			break;
 8006102:	e041      	b.n	8006188 <Dem_ReceiveFault+0x354>
		case DTC_LEFT_TURN_SIGNAL_REAR_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_LEFT_TURN_SIGNAL_REAR_MALFUNCTION]++;
 8006104:	4b23      	ldr	r3, [pc, #140]	; (8006194 <Dem_ReceiveFault+0x360>)
 8006106:	79db      	ldrb	r3, [r3, #7]
 8006108:	3301      	adds	r3, #1
 800610a:	b2da      	uxtb	r2, r3
 800610c:	4b21      	ldr	r3, [pc, #132]	; (8006194 <Dem_ReceiveFault+0x360>)
 800610e:	71da      	strb	r2, [r3, #7]
			break;
 8006110:	e03a      	b.n	8006188 <Dem_ReceiveFault+0x354>
		case DTC_BRAKE_LIGHT_LEFT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_BRAKE_LIGHT_LEFT_MALFUNCTION]++;
 8006112:	4b20      	ldr	r3, [pc, #128]	; (8006194 <Dem_ReceiveFault+0x360>)
 8006114:	7a1b      	ldrb	r3, [r3, #8]
 8006116:	3301      	adds	r3, #1
 8006118:	b2da      	uxtb	r2, r3
 800611a:	4b1e      	ldr	r3, [pc, #120]	; (8006194 <Dem_ReceiveFault+0x360>)
 800611c:	721a      	strb	r2, [r3, #8]
			break;
 800611e:	e033      	b.n	8006188 <Dem_ReceiveFault+0x354>
		case DTC_BRAKE_LIGHT_RIGHT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_BRAKE_LIGHT_RIGHT_MALFUNCTION]++;
 8006120:	4b1c      	ldr	r3, [pc, #112]	; (8006194 <Dem_ReceiveFault+0x360>)
 8006122:	7a5b      	ldrb	r3, [r3, #9]
 8006124:	3301      	adds	r3, #1
 8006126:	b2da      	uxtb	r2, r3
 8006128:	4b1a      	ldr	r3, [pc, #104]	; (8006194 <Dem_ReceiveFault+0x360>)
 800612a:	725a      	strb	r2, [r3, #9]
			break;
 800612c:	e02c      	b.n	8006188 <Dem_ReceiveFault+0x354>
		case DTC_LIGHT_SENSOR_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_LIGHT_SENSOR_MALFUNCTION] = DTC_LIGHT_SENSOR_MALFUNCTION;
 800612e:	4b19      	ldr	r3, [pc, #100]	; (8006194 <Dem_ReceiveFault+0x360>)
 8006130:	2203      	movs	r2, #3
 8006132:	729a      	strb	r2, [r3, #10]
			break;
 8006134:	e028      	b.n	8006188 <Dem_ReceiveFault+0x354>
		case DTC_VIBRATION_SENSOR_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_VIBRATION_SENSOR_MALFUNCTION] = DTC_VIBRATION_SENSOR_MALFUNCTION;
 8006136:	4b17      	ldr	r3, [pc, #92]	; (8006194 <Dem_ReceiveFault+0x360>)
 8006138:	2213      	movs	r2, #19
 800613a:	72da      	strb	r2, [r3, #11]
			break;
 800613c:	e024      	b.n	8006188 <Dem_ReceiveFault+0x354>
		case DTC_TEMPERATURE_SENSOR_MALFUNCTION:
			Dem_DtcArray[POSITION_POSITION_DTC_TEMPERATURE_SENSOR_MALFUNCTION] = DTC_TEMPERATURE_SENSOR_MALFUNCTION;
 800613e:	4b15      	ldr	r3, [pc, #84]	; (8006194 <Dem_ReceiveFault+0x360>)
 8006140:	2233      	movs	r2, #51	; 0x33
 8006142:	735a      	strb	r2, [r3, #13]
			break;
 8006144:	e020      	b.n	8006188 <Dem_ReceiveFault+0x354>
		case DTC_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION] = DTC_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION;
 8006146:	4b13      	ldr	r3, [pc, #76]	; (8006194 <Dem_ReceiveFault+0x360>)
 8006148:	2202      	movs	r2, #2
 800614a:	739a      	strb	r2, [r3, #14]
			break;
 800614c:	e01c      	b.n	8006188 <Dem_ReceiveFault+0x354>
		case DTC_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION] = DTC_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION;
 800614e:	4b11      	ldr	r3, [pc, #68]	; (8006194 <Dem_ReceiveFault+0x360>)
 8006150:	2212      	movs	r2, #18
 8006152:	73da      	strb	r2, [r3, #15]
			break;
 8006154:	e018      	b.n	8006188 <Dem_ReceiveFault+0x354>
		case DTC_BLUETOOTH_MODULE_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_BLUETOOTH_MODULE_MALFUNCTION] = DTC_BLUETOOTH_MODULE_MALFUNCTION;
 8006156:	4b0f      	ldr	r3, [pc, #60]	; (8006194 <Dem_ReceiveFault+0x360>)
 8006158:	2222      	movs	r2, #34	; 0x22
 800615a:	741a      	strb	r2, [r3, #16]
			break;
 800615c:	e014      	b.n	8006188 <Dem_ReceiveFault+0x354>
		case DTC_EXTERNAL_EEPROM_MODULE_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_EXTERNAL_EEPROM_MODULE_MALFUNCTION] = DTC_EXTERNAL_EEPROM_MODULE_MALFUNCTION;
 800615e:	4b0d      	ldr	r3, [pc, #52]	; (8006194 <Dem_ReceiveFault+0x360>)
 8006160:	2232      	movs	r2, #50	; 0x32
 8006162:	745a      	strb	r2, [r3, #17]
			break;
 8006164:	e010      	b.n	8006188 <Dem_ReceiveFault+0x354>
#if(CAN_SPI_COMMUNICATION_ENABLE == STD_ON)
			Dem_DtcArray[POSITION_DTC_CAN_BUS_OFF]++;
#endif
			break;
		case DTC_LCD_MODULE_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_LCD_MODULE_MALFUNCTION] = DTC_LCD_MODULE_MALFUNCTION;
 8006166:	4b0b      	ldr	r3, [pc, #44]	; (8006194 <Dem_ReceiveFault+0x360>)
 8006168:	2262      	movs	r2, #98	; 0x62
 800616a:	751a      	strb	r2, [r3, #20]
			break;
 800616c:	e00c      	b.n	8006188 <Dem_ReceiveFault+0x354>
		case DTC_SOFTWARE_RESET:
			Dem_DtcArray[POSITION_DTC_SOFTWARE_RESET] = DTC_SOFTWARE_RESET;
 800616e:	4b09      	ldr	r3, [pc, #36]	; (8006194 <Dem_ReceiveFault+0x360>)
 8006170:	2235      	movs	r2, #53	; 0x35
 8006172:	755a      	strb	r2, [r3, #21]
			break;
 8006174:	e008      	b.n	8006188 <Dem_ReceiveFault+0x354>
		case DTC_HARDWARE_RESET:
			Dem_DtcArray[POSITION_DTC_HARDWARE_RESET] = DTC_HARDWARE_RESET;
 8006176:	4b07      	ldr	r3, [pc, #28]	; (8006194 <Dem_ReceiveFault+0x360>)
 8006178:	2256      	movs	r2, #86	; 0x56
 800617a:	759a      	strb	r2, [r3, #22]
			break;
 800617c:	e004      	b.n	8006188 <Dem_ReceiveFault+0x354>
		case DTC_PERIPHERAL_ERROR:
			Dem_DtcArray[POSITION_DTC_PERIPHERAL_ERROR] = DTC_PERIPHERAL_ERROR;
 800617e:	4b05      	ldr	r3, [pc, #20]	; (8006194 <Dem_ReceiveFault+0x360>)
 8006180:	2299      	movs	r2, #153	; 0x99
 8006182:	75da      	strb	r2, [r3, #23]
			break;
 8006184:	e000      	b.n	8006188 <Dem_ReceiveFault+0x354>
		default:
			break;
 8006186:	bf00      	nop
	}
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr
 8006194:	20000894 	.word	0x20000894

08006198 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800619c:	4b0e      	ldr	r3, [pc, #56]	; (80061d8 <HAL_Init+0x40>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a0d      	ldr	r2, [pc, #52]	; (80061d8 <HAL_Init+0x40>)
 80061a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80061a8:	4b0b      	ldr	r3, [pc, #44]	; (80061d8 <HAL_Init+0x40>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a0a      	ldr	r2, [pc, #40]	; (80061d8 <HAL_Init+0x40>)
 80061ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80061b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80061b4:	4b08      	ldr	r3, [pc, #32]	; (80061d8 <HAL_Init+0x40>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a07      	ldr	r2, [pc, #28]	; (80061d8 <HAL_Init+0x40>)
 80061ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80061c0:	2003      	movs	r0, #3
 80061c2:	f000 fefb 	bl	8006fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80061c6:	200f      	movs	r0, #15
 80061c8:	f7ff f86c 	bl	80052a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80061cc:	f7ff f820 	bl	8005210 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	40023c00 	.word	0x40023c00

080061dc <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80061e0:	4b13      	ldr	r3, [pc, #76]	; (8006230 <HAL_DeInit+0x54>)
 80061e2:	f04f 32ff 	mov.w	r2, #4294967295
 80061e6:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 80061e8:	4b11      	ldr	r3, [pc, #68]	; (8006230 <HAL_DeInit+0x54>)
 80061ea:	2200      	movs	r2, #0
 80061ec:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 80061ee:	4b10      	ldr	r3, [pc, #64]	; (8006230 <HAL_DeInit+0x54>)
 80061f0:	f04f 32ff 	mov.w	r2, #4294967295
 80061f4:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80061f6:	4b0e      	ldr	r3, [pc, #56]	; (8006230 <HAL_DeInit+0x54>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 80061fc:	4b0c      	ldr	r3, [pc, #48]	; (8006230 <HAL_DeInit+0x54>)
 80061fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006202:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8006204:	4b0a      	ldr	r3, [pc, #40]	; (8006230 <HAL_DeInit+0x54>)
 8006206:	2200      	movs	r2, #0
 8006208:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 800620a:	4b09      	ldr	r3, [pc, #36]	; (8006230 <HAL_DeInit+0x54>)
 800620c:	f04f 32ff 	mov.w	r2, #4294967295
 8006210:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8006212:	4b07      	ldr	r3, [pc, #28]	; (8006230 <HAL_DeInit+0x54>)
 8006214:	2200      	movs	r2, #0
 8006216:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8006218:	4b05      	ldr	r3, [pc, #20]	; (8006230 <HAL_DeInit+0x54>)
 800621a:	f04f 32ff 	mov.w	r2, #4294967295
 800621e:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8006220:	4b03      	ldr	r3, [pc, #12]	; (8006230 <HAL_DeInit+0x54>)
 8006222:	2200      	movs	r2, #0
 8006224:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8006226:	f000 f805 	bl	8006234 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	bd80      	pop	{r7, pc}
 8006230:	40023800 	.word	0x40023800

08006234 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8006234:	b480      	push	{r7}
 8006236:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8006238:	bf00      	nop
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
	...

08006244 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006244:	b480      	push	{r7}
 8006246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006248:	4b06      	ldr	r3, [pc, #24]	; (8006264 <HAL_IncTick+0x20>)
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	461a      	mov	r2, r3
 800624e:	4b06      	ldr	r3, [pc, #24]	; (8006268 <HAL_IncTick+0x24>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4413      	add	r3, r2
 8006254:	4a04      	ldr	r2, [pc, #16]	; (8006268 <HAL_IncTick+0x24>)
 8006256:	6013      	str	r3, [r2, #0]
}
 8006258:	bf00      	nop
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	20000054 	.word	0x20000054
 8006268:	200008c8 	.word	0x200008c8

0800626c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800626c:	b480      	push	{r7}
 800626e:	af00      	add	r7, sp, #0
  return uwTick;
 8006270:	4b03      	ldr	r3, [pc, #12]	; (8006280 <HAL_GetTick+0x14>)
 8006272:	681b      	ldr	r3, [r3, #0]
}
 8006274:	4618      	mov	r0, r3
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	200008c8 	.word	0x200008c8

08006284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800628c:	f7ff ffee 	bl	800626c <HAL_GetTick>
 8006290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800629c:	d005      	beq.n	80062aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800629e:	4b0a      	ldr	r3, [pc, #40]	; (80062c8 <HAL_Delay+0x44>)
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	461a      	mov	r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	4413      	add	r3, r2
 80062a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80062aa:	bf00      	nop
 80062ac:	f7ff ffde 	bl	800626c <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d8f7      	bhi.n	80062ac <HAL_Delay+0x28>
  {
  }
}
 80062bc:	bf00      	nop
 80062be:	bf00      	nop
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	20000054 	.word	0x20000054

080062cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80062d4:	2300      	movs	r3, #0
 80062d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d101      	bne.n	80062e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e04a      	b.n	8006378 <HAL_ADC_Init+0xac>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d120      	bne.n	800632c <HAL_ADC_Init+0x60>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a24      	ldr	r2, [pc, #144]	; (8006380 <HAL_ADC_Init+0xb4>)
 80062ee:	649a      	str	r2, [r3, #72]	; 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a24      	ldr	r2, [pc, #144]	; (8006384 <HAL_ADC_Init+0xb8>)
 80062f4:	64da      	str	r2, [r3, #76]	; 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a23      	ldr	r2, [pc, #140]	; (8006388 <HAL_ADC_Init+0xbc>)
 80062fa:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a23      	ldr	r2, [pc, #140]	; (800638c <HAL_ADC_Init+0xc0>)
 8006300:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a22      	ldr	r2, [pc, #136]	; (8006390 <HAL_ADC_Init+0xc4>)
 8006306:	659a      	str	r2, [r3, #88]	; 0x58
    if (hadc->MspInitCallback == NULL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800630c:	2b00      	cmp	r3, #0
 800630e:	d102      	bne.n	8006316 <HAL_ADC_Init+0x4a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a20      	ldr	r2, [pc, #128]	; (8006394 <HAL_ADC_Init+0xc8>)
 8006314:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006330:	f003 0310 	and.w	r3, r3, #16
 8006334:	2b00      	cmp	r3, #0
 8006336:	d118      	bne.n	800636a <HAL_ADC_Init+0x9e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006340:	f023 0302 	bic.w	r3, r3, #2
 8006344:	f043 0202 	orr.w	r2, r3, #2
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fbc1 	bl	8006ad4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635c:	f023 0303 	bic.w	r3, r3, #3
 8006360:	f043 0201 	orr.w	r2, r3, #1
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	641a      	str	r2, [r3, #64]	; 0x40
 8006368:	e001      	b.n	800636e <HAL_ADC_Init+0xa2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006376:	7bfb      	ldrb	r3, [r7, #15]
}
 8006378:	4618      	mov	r0, r3
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	0800d989 	.word	0x0800d989
 8006384:	08006819 	.word	0x08006819
 8006388:	0800682d 	.word	0x0800682d
 800638c:	0800d9c5 	.word	0x0800d9c5
 8006390:	08006dd9 	.word	0x08006dd9
 8006394:	08004631 	.word	0x08004631

08006398 <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063a0:	2300      	movs	r3, #0
 80063a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e02a      	b.n	8006404 <HAL_ADC_DeInit+0x6c>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b2:	f043 0202 	orr.w	r2, r3, #2
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	689a      	ldr	r2, [r3, #8]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f022 0201 	bic.w	r2, r2, #1
 80063c8:	609a      	str	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d110      	bne.n	80063fa <HAL_ADC_DeInit+0x62>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  if (hadc->MspDeInitCallback == NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d102      	bne.n	80063e6 <HAL_ADC_DeInit+0x4e>
  {
    hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit  */
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a0a      	ldr	r2, [pc, #40]	; (800640c <HAL_ADC_DeInit+0x74>)
 80063e4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	4798      	blx	r3
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8006402:	7bfb      	ldrb	r3, [r7, #15]
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	080047a5 	.word	0x080047a5

08006410 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8006418:	2300      	movs	r3, #0
 800641a:	617b      	str	r3, [r7, #20]
 800641c:	2300      	movs	r3, #0
 800641e:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	f003 0320 	and.w	r3, r3, #32
 800643e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d04a      	beq.n	80064dc <HAL_ADC_IRQHandler+0xcc>
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d047      	beq.n	80064dc <HAL_ADC_IRQHandler+0xcc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006450:	f003 0310 	and.w	r3, r3, #16
 8006454:	2b00      	cmp	r3, #0
 8006456:	d105      	bne.n	8006464 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d12b      	bne.n	80064ca <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006476:	2b00      	cmp	r3, #0
 8006478:	d127      	bne.n	80064ca <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006480:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006484:	2b00      	cmp	r3, #0
 8006486:	d006      	beq.n	8006496 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006492:	2b00      	cmp	r3, #0
 8006494:	d119      	bne.n	80064ca <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f022 0220 	bic.w	r2, r2, #32
 80064a4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d105      	bne.n	80064ca <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c2:	f043 0201 	orr.w	r2, r3, #1
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	4798      	blx	r3
#else
    HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f06f 0212 	mvn.w	r2, #18
 80064da:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f003 0304 	and.w	r3, r3, #4
 80064e2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ea:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d058      	beq.n	80065a4 <HAL_ADC_IRQHandler+0x194>
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d055      	beq.n	80065a4 <HAL_ADC_IRQHandler+0x194>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fc:	f003 0310 	and.w	r3, r3, #16
 8006500:	2b00      	cmp	r3, #0
 8006502:	d105      	bne.n	8006510 <HAL_ADC_IRQHandler+0x100>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006508:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d139      	bne.n	8006592 <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006524:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8006528:	2b00      	cmp	r3, #0
 800652a:	d006      	beq.n	800653a <HAL_ADC_IRQHandler+0x12a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8006536:	2b00      	cmp	r3, #0
 8006538:	d12b      	bne.n	8006592 <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8006544:	2b00      	cmp	r3, #0
 8006546:	d124      	bne.n	8006592 <HAL_ADC_IRQHandler+0x182>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8006552:	2b00      	cmp	r3, #0
 8006554:	d11d      	bne.n	8006592 <HAL_ADC_IRQHandler+0x182>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800655a:	2b00      	cmp	r3, #0
 800655c:	d119      	bne.n	8006592 <HAL_ADC_IRQHandler+0x182>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	685a      	ldr	r2, [r3, #4]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800656c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006572:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006582:	2b00      	cmp	r3, #0
 8006584:	d105      	bne.n	8006592 <HAL_ADC_IRQHandler+0x182>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658a:	f043 0201 	orr.w	r2, r3, #1
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f06f 020c 	mvn.w	r2, #12
 80065a2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b2:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d018      	beq.n	80065ec <HAL_ADC_IRQHandler+0x1dc>
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d015      	beq.n	80065ec <HAL_ADC_IRQHandler+0x1dc>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d10e      	bne.n	80065ec <HAL_ADC_IRQHandler+0x1dc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f06f 0201 	mvn.w	r2, #1
 80065ea:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f003 0320 	and.w	r3, r3, #32
 80065f2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065fa:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d016      	beq.n	8006630 <HAL_ADC_IRQHandler+0x220>
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d013      	beq.n	8006630 <HAL_ADC_IRQHandler+0x220>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800660c:	f043 0202 	orr.w	r2, r3, #2
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f06f 0220 	mvn.w	r2, #32
 800661c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	4798      	blx	r3
#else
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f06f 0220 	mvn.w	r2, #32
 800662e:	601a      	str	r2, [r3, #0]
  }
}
 8006630:	bf00      	nop
 8006632:	3718      	adds	r7, #24
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b086      	sub	sp, #24
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006644:	2300      	movs	r3, #0
 8006646:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800664e:	2b01      	cmp	r3, #1
 8006650:	d101      	bne.n	8006656 <HAL_ADC_Start_DMA+0x1e>
 8006652:	2302      	movs	r3, #2
 8006654:	e0ce      	b.n	80067f4 <HAL_ADC_Start_DMA+0x1bc>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	2b01      	cmp	r3, #1
 800666a:	d018      	beq.n	800669e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689a      	ldr	r2, [r3, #8]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f042 0201 	orr.w	r2, r2, #1
 800667a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800667c:	4b5f      	ldr	r3, [pc, #380]	; (80067fc <HAL_ADC_Start_DMA+0x1c4>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a5f      	ldr	r2, [pc, #380]	; (8006800 <HAL_ADC_Start_DMA+0x1c8>)
 8006682:	fba2 2303 	umull	r2, r3, r2, r3
 8006686:	0c9a      	lsrs	r2, r3, #18
 8006688:	4613      	mov	r3, r2
 800668a:	005b      	lsls	r3, r3, #1
 800668c:	4413      	add	r3, r2
 800668e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006690:	e002      	b.n	8006698 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	3b01      	subs	r3, #1
 8006696:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1f9      	bne.n	8006692 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ac:	d107      	bne.n	80066be <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	689a      	ldr	r2, [r3, #8]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f003 0301 	and.w	r3, r3, #1
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	f040 8086 	bne.w	80067da <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80066d6:	f023 0301 	bic.w	r3, r3, #1
 80066da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d007      	beq.n	8006700 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80066f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006704:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800670c:	d106      	bne.n	800671c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006712:	f023 0206 	bic.w	r2, r3, #6
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	645a      	str	r2, [r3, #68]	; 0x44
 800671a:	e002      	b.n	8006722 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800672a:	4b36      	ldr	r3, [pc, #216]	; (8006804 <HAL_ADC_Start_DMA+0x1cc>)
 800672c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006732:	4a35      	ldr	r2, [pc, #212]	; (8006808 <HAL_ADC_Start_DMA+0x1d0>)
 8006734:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673a:	4a34      	ldr	r2, [pc, #208]	; (800680c <HAL_ADC_Start_DMA+0x1d4>)
 800673c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006742:	4a33      	ldr	r2, [pc, #204]	; (8006810 <HAL_ADC_Start_DMA+0x1d8>)
 8006744:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800674e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800675e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689a      	ldr	r2, [r3, #8]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800676e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	334c      	adds	r3, #76	; 0x4c
 800677a:	4619      	mov	r1, r3
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f000 fe78 	bl	8007474 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	f003 031f 	and.w	r3, r3, #31
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10f      	bne.n	80067b0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d129      	bne.n	80067f2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	689a      	ldr	r2, [r3, #8]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80067ac:	609a      	str	r2, [r3, #8]
 80067ae:	e020      	b.n	80067f2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a17      	ldr	r2, [pc, #92]	; (8006814 <HAL_ADC_Start_DMA+0x1dc>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d11b      	bne.n	80067f2 <HAL_ADC_Start_DMA+0x1ba>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d114      	bne.n	80067f2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	689a      	ldr	r2, [r3, #8]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80067d6:	609a      	str	r2, [r3, #8]
 80067d8:	e00b      	b.n	80067f2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067de:	f043 0210 	orr.w	r2, r3, #16
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ea:	f043 0201 	orr.w	r2, r3, #1
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3718      	adds	r7, #24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	2000004c 	.word	0x2000004c
 8006800:	431bde83 	.word	0x431bde83
 8006804:	40012300 	.word	0x40012300
 8006808:	08006ccd 	.word	0x08006ccd
 800680c:	08006d8b 	.word	0x08006d8b
 8006810:	08006da9 	.word	0x08006da9
 8006814:	40012000 	.word	0x40012000

08006818 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800684a:	2300      	movs	r3, #0
 800684c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006854:	2b01      	cmp	r3, #1
 8006856:	d101      	bne.n	800685c <HAL_ADC_ConfigChannel+0x1c>
 8006858:	2302      	movs	r3, #2
 800685a:	e113      	b.n	8006a84 <HAL_ADC_ConfigChannel+0x244>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b09      	cmp	r3, #9
 800686a:	d925      	bls.n	80068b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68d9      	ldr	r1, [r3, #12]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	b29b      	uxth	r3, r3
 8006878:	461a      	mov	r2, r3
 800687a:	4613      	mov	r3, r2
 800687c:	005b      	lsls	r3, r3, #1
 800687e:	4413      	add	r3, r2
 8006880:	3b1e      	subs	r3, #30
 8006882:	2207      	movs	r2, #7
 8006884:	fa02 f303 	lsl.w	r3, r2, r3
 8006888:	43da      	mvns	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	400a      	ands	r2, r1
 8006890:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68d9      	ldr	r1, [r3, #12]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	689a      	ldr	r2, [r3, #8]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	4618      	mov	r0, r3
 80068a4:	4603      	mov	r3, r0
 80068a6:	005b      	lsls	r3, r3, #1
 80068a8:	4403      	add	r3, r0
 80068aa:	3b1e      	subs	r3, #30
 80068ac:	409a      	lsls	r2, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	430a      	orrs	r2, r1
 80068b4:	60da      	str	r2, [r3, #12]
 80068b6:	e022      	b.n	80068fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6919      	ldr	r1, [r3, #16]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	461a      	mov	r2, r3
 80068c6:	4613      	mov	r3, r2
 80068c8:	005b      	lsls	r3, r3, #1
 80068ca:	4413      	add	r3, r2
 80068cc:	2207      	movs	r2, #7
 80068ce:	fa02 f303 	lsl.w	r3, r2, r3
 80068d2:	43da      	mvns	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	400a      	ands	r2, r1
 80068da:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6919      	ldr	r1, [r3, #16]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	689a      	ldr	r2, [r3, #8]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	4618      	mov	r0, r3
 80068ee:	4603      	mov	r3, r0
 80068f0:	005b      	lsls	r3, r3, #1
 80068f2:	4403      	add	r3, r0
 80068f4:	409a      	lsls	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	2b06      	cmp	r3, #6
 8006904:	d824      	bhi.n	8006950 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	4613      	mov	r3, r2
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4413      	add	r3, r2
 8006916:	3b05      	subs	r3, #5
 8006918:	221f      	movs	r2, #31
 800691a:	fa02 f303 	lsl.w	r3, r2, r3
 800691e:	43da      	mvns	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	400a      	ands	r2, r1
 8006926:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	b29b      	uxth	r3, r3
 8006934:	4618      	mov	r0, r3
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	685a      	ldr	r2, [r3, #4]
 800693a:	4613      	mov	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4413      	add	r3, r2
 8006940:	3b05      	subs	r3, #5
 8006942:	fa00 f203 	lsl.w	r2, r0, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	430a      	orrs	r2, r1
 800694c:	635a      	str	r2, [r3, #52]	; 0x34
 800694e:	e04c      	b.n	80069ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	2b0c      	cmp	r3, #12
 8006956:	d824      	bhi.n	80069a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	685a      	ldr	r2, [r3, #4]
 8006962:	4613      	mov	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	3b23      	subs	r3, #35	; 0x23
 800696a:	221f      	movs	r2, #31
 800696c:	fa02 f303 	lsl.w	r3, r2, r3
 8006970:	43da      	mvns	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	400a      	ands	r2, r1
 8006978:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	b29b      	uxth	r3, r3
 8006986:	4618      	mov	r0, r3
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	685a      	ldr	r2, [r3, #4]
 800698c:	4613      	mov	r3, r2
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	4413      	add	r3, r2
 8006992:	3b23      	subs	r3, #35	; 0x23
 8006994:	fa00 f203 	lsl.w	r2, r0, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	430a      	orrs	r2, r1
 800699e:	631a      	str	r2, [r3, #48]	; 0x30
 80069a0:	e023      	b.n	80069ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	4613      	mov	r3, r2
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	4413      	add	r3, r2
 80069b2:	3b41      	subs	r3, #65	; 0x41
 80069b4:	221f      	movs	r2, #31
 80069b6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ba:	43da      	mvns	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	400a      	ands	r2, r1
 80069c2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	4618      	mov	r0, r3
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	685a      	ldr	r2, [r3, #4]
 80069d6:	4613      	mov	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	3b41      	subs	r3, #65	; 0x41
 80069de:	fa00 f203 	lsl.w	r2, r0, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	430a      	orrs	r2, r1
 80069e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80069ea:	4b29      	ldr	r3, [pc, #164]	; (8006a90 <HAL_ADC_ConfigChannel+0x250>)
 80069ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a28      	ldr	r2, [pc, #160]	; (8006a94 <HAL_ADC_ConfigChannel+0x254>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d10f      	bne.n	8006a18 <HAL_ADC_ConfigChannel+0x1d8>
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2b12      	cmp	r3, #18
 80069fe:	d10b      	bne.n	8006a18 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a1d      	ldr	r2, [pc, #116]	; (8006a94 <HAL_ADC_ConfigChannel+0x254>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d12b      	bne.n	8006a7a <HAL_ADC_ConfigChannel+0x23a>
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a1c      	ldr	r2, [pc, #112]	; (8006a98 <HAL_ADC_ConfigChannel+0x258>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d003      	beq.n	8006a34 <HAL_ADC_ConfigChannel+0x1f4>
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2b11      	cmp	r3, #17
 8006a32:	d122      	bne.n	8006a7a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a11      	ldr	r2, [pc, #68]	; (8006a98 <HAL_ADC_ConfigChannel+0x258>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d111      	bne.n	8006a7a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006a56:	4b11      	ldr	r3, [pc, #68]	; (8006a9c <HAL_ADC_ConfigChannel+0x25c>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a11      	ldr	r2, [pc, #68]	; (8006aa0 <HAL_ADC_ConfigChannel+0x260>)
 8006a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a60:	0c9a      	lsrs	r2, r3, #18
 8006a62:	4613      	mov	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	4413      	add	r3, r2
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006a6c:	e002      	b.n	8006a74 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	3b01      	subs	r3, #1
 8006a72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1f9      	bne.n	8006a6e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3714      	adds	r7, #20
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr
 8006a90:	40012300 	.word	0x40012300
 8006a94:	40012000 	.word	0x40012000
 8006a98:	10000012 	.word	0x10000012
 8006a9c:	2000004c 	.word	0x2000004c
 8006aa0:	431bde83 	.word	0x431bde83

08006aa4 <HAL_ADC_GetState>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <HAL_ADC_GetError>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval ADC Error Code
  */
uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  return hadc->ErrorCode;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006adc:	4b79      	ldr	r3, [pc, #484]	; (8006cc4 <ADC_Init+0x1f0>)
 8006ade:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	685a      	ldr	r2, [r3, #4]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	431a      	orrs	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	685a      	ldr	r2, [r3, #4]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	6859      	ldr	r1, [r3, #4]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	021a      	lsls	r2, r3, #8
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006b2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	6859      	ldr	r1, [r3, #4]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	689a      	ldr	r2, [r3, #8]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	689a      	ldr	r2, [r3, #8]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	6899      	ldr	r1, [r3, #8]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68da      	ldr	r2, [r3, #12]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b66:	4a58      	ldr	r2, [pc, #352]	; (8006cc8 <ADC_Init+0x1f4>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d022      	beq.n	8006bb2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	689a      	ldr	r2, [r3, #8]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006b7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6899      	ldr	r1, [r3, #8]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	430a      	orrs	r2, r1
 8006b8c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	689a      	ldr	r2, [r3, #8]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006b9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	6899      	ldr	r1, [r3, #8]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	430a      	orrs	r2, r1
 8006bae:	609a      	str	r2, [r3, #8]
 8006bb0:	e00f      	b.n	8006bd2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	689a      	ldr	r2, [r3, #8]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006bc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	689a      	ldr	r2, [r3, #8]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006bd0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	689a      	ldr	r2, [r3, #8]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f022 0202 	bic.w	r2, r2, #2
 8006be0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	6899      	ldr	r1, [r3, #8]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	7e1b      	ldrb	r3, [r3, #24]
 8006bec:	005a      	lsls	r2, r3, #1
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d01b      	beq.n	8006c38 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c0e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685a      	ldr	r2, [r3, #4]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006c1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6859      	ldr	r1, [r3, #4]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	035a      	lsls	r2, r3, #13
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	430a      	orrs	r2, r1
 8006c34:	605a      	str	r2, [r3, #4]
 8006c36:	e007      	b.n	8006c48 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c46:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006c56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	69db      	ldr	r3, [r3, #28]
 8006c62:	3b01      	subs	r3, #1
 8006c64:	051a      	lsls	r2, r3, #20
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	689a      	ldr	r2, [r3, #8]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006c7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	6899      	ldr	r1, [r3, #8]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c8a:	025a      	lsls	r2, r3, #9
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	430a      	orrs	r2, r1
 8006c92:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	689a      	ldr	r2, [r3, #8]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ca2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6899      	ldr	r1, [r3, #8]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	695b      	ldr	r3, [r3, #20]
 8006cae:	029a      	lsls	r2, r3, #10
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	609a      	str	r2, [r3, #8]
}
 8006cb8:	bf00      	nop
 8006cba:	3714      	adds	r7, #20
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr
 8006cc4:	40012300 	.word	0x40012300
 8006cc8:	0f000001 	.word	0x0f000001

08006ccc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cde:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d13d      	bne.n	8006d62 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d12b      	bne.n	8006d58 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d127      	bne.n	8006d58 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d006      	beq.n	8006d24 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d119      	bne.n	8006d58 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	685a      	ldr	r2, [r3, #4]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f022 0220 	bic.w	r2, r2, #32
 8006d32:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d105      	bne.n	8006d58 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d50:	f043 0201 	orr.w	r2, r3, #1
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	4798      	blx	r3
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006d60:	e00f      	b.n	8006d82 <ADC_DMAConvCplt+0xb6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d66:	f003 0310 	and.w	r3, r3, #16
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d004      	beq.n	8006d78 <ADC_DMAConvCplt+0xac>
      hadc->ErrorCallback(hadc);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	4798      	blx	r3
}
 8006d76:	e004      	b.n	8006d82 <ADC_DMAConvCplt+0xb6>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	4798      	blx	r3
}
 8006d82:	bf00      	nop
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006d8a:	b580      	push	{r7, lr}
 8006d8c:	b084      	sub	sp, #16
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d96:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006da0:	bf00      	nop
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db4:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2240      	movs	r2, #64	; 0x40
 8006dba:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc0:	f043 0204 	orr.w	r2, r3, #4
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006dd0:	bf00      	nop
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b085      	sub	sp, #20
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f003 0307 	and.w	r3, r3, #7
 8006dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006dfc:	4b0c      	ldr	r3, [pc, #48]	; (8006e30 <__NVIC_SetPriorityGrouping+0x44>)
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e02:	68ba      	ldr	r2, [r7, #8]
 8006e04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006e08:	4013      	ands	r3, r2
 8006e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006e14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e1e:	4a04      	ldr	r2, [pc, #16]	; (8006e30 <__NVIC_SetPriorityGrouping+0x44>)
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	60d3      	str	r3, [r2, #12]
}
 8006e24:	bf00      	nop
 8006e26:	3714      	adds	r7, #20
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr
 8006e30:	e000ed00 	.word	0xe000ed00

08006e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006e34:	b480      	push	{r7}
 8006e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e38:	4b04      	ldr	r3, [pc, #16]	; (8006e4c <__NVIC_GetPriorityGrouping+0x18>)
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	0a1b      	lsrs	r3, r3, #8
 8006e3e:	f003 0307 	and.w	r3, r3, #7
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr
 8006e4c:	e000ed00 	.word	0xe000ed00

08006e50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	4603      	mov	r3, r0
 8006e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	db0b      	blt.n	8006e7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e62:	79fb      	ldrb	r3, [r7, #7]
 8006e64:	f003 021f 	and.w	r2, r3, #31
 8006e68:	4907      	ldr	r1, [pc, #28]	; (8006e88 <__NVIC_EnableIRQ+0x38>)
 8006e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e6e:	095b      	lsrs	r3, r3, #5
 8006e70:	2001      	movs	r0, #1
 8006e72:	fa00 f202 	lsl.w	r2, r0, r2
 8006e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006e7a:	bf00      	nop
 8006e7c:	370c      	adds	r7, #12
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	e000e100 	.word	0xe000e100

08006e8c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	4603      	mov	r3, r0
 8006e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	db12      	blt.n	8006ec4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e9e:	79fb      	ldrb	r3, [r7, #7]
 8006ea0:	f003 021f 	and.w	r2, r3, #31
 8006ea4:	490a      	ldr	r1, [pc, #40]	; (8006ed0 <__NVIC_DisableIRQ+0x44>)
 8006ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eaa:	095b      	lsrs	r3, r3, #5
 8006eac:	2001      	movs	r0, #1
 8006eae:	fa00 f202 	lsl.w	r2, r0, r2
 8006eb2:	3320      	adds	r3, #32
 8006eb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006eb8:	f3bf 8f4f 	dsb	sy
}
 8006ebc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006ebe:	f3bf 8f6f 	isb	sy
}
 8006ec2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr
 8006ed0:	e000e100 	.word	0xe000e100

08006ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	4603      	mov	r3, r0
 8006edc:	6039      	str	r1, [r7, #0]
 8006ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	db0a      	blt.n	8006efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	b2da      	uxtb	r2, r3
 8006eec:	490c      	ldr	r1, [pc, #48]	; (8006f20 <__NVIC_SetPriority+0x4c>)
 8006eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ef2:	0112      	lsls	r2, r2, #4
 8006ef4:	b2d2      	uxtb	r2, r2
 8006ef6:	440b      	add	r3, r1
 8006ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006efc:	e00a      	b.n	8006f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	b2da      	uxtb	r2, r3
 8006f02:	4908      	ldr	r1, [pc, #32]	; (8006f24 <__NVIC_SetPriority+0x50>)
 8006f04:	79fb      	ldrb	r3, [r7, #7]
 8006f06:	f003 030f 	and.w	r3, r3, #15
 8006f0a:	3b04      	subs	r3, #4
 8006f0c:	0112      	lsls	r2, r2, #4
 8006f0e:	b2d2      	uxtb	r2, r2
 8006f10:	440b      	add	r3, r1
 8006f12:	761a      	strb	r2, [r3, #24]
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	e000e100 	.word	0xe000e100
 8006f24:	e000ed00 	.word	0xe000ed00

08006f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b089      	sub	sp, #36	; 0x24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f003 0307 	and.w	r3, r3, #7
 8006f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	f1c3 0307 	rsb	r3, r3, #7
 8006f42:	2b04      	cmp	r3, #4
 8006f44:	bf28      	it	cs
 8006f46:	2304      	movcs	r3, #4
 8006f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	3304      	adds	r3, #4
 8006f4e:	2b06      	cmp	r3, #6
 8006f50:	d902      	bls.n	8006f58 <NVIC_EncodePriority+0x30>
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	3b03      	subs	r3, #3
 8006f56:	e000      	b.n	8006f5a <NVIC_EncodePriority+0x32>
 8006f58:	2300      	movs	r3, #0
 8006f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	fa02 f303 	lsl.w	r3, r2, r3
 8006f66:	43da      	mvns	r2, r3
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	401a      	ands	r2, r3
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f70:	f04f 31ff 	mov.w	r1, #4294967295
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	fa01 f303 	lsl.w	r3, r1, r3
 8006f7a:	43d9      	mvns	r1, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f80:	4313      	orrs	r3, r2
         );
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3724      	adds	r7, #36	; 0x24
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
	...

08006f90 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8006f90:	b480      	push	{r7}
 8006f92:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8006f94:	f3bf 8f4f 	dsb	sy
}
 8006f98:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006f9a:	4b06      	ldr	r3, [pc, #24]	; (8006fb4 <__NVIC_SystemReset+0x24>)
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006fa2:	4904      	ldr	r1, [pc, #16]	; (8006fb4 <__NVIC_SystemReset+0x24>)
 8006fa4:	4b04      	ldr	r3, [pc, #16]	; (8006fb8 <__NVIC_SystemReset+0x28>)
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006faa:	f3bf 8f4f 	dsb	sy
}
 8006fae:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006fb0:	bf00      	nop
 8006fb2:	e7fd      	b.n	8006fb0 <__NVIC_SystemReset+0x20>
 8006fb4:	e000ed00 	.word	0xe000ed00
 8006fb8:	05fa0004 	.word	0x05fa0004

08006fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f7ff ff11 	bl	8006dec <__NVIC_SetPriorityGrouping>
}
 8006fca:	bf00      	nop
 8006fcc:	3708      	adds	r7, #8
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b086      	sub	sp, #24
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	4603      	mov	r3, r0
 8006fda:	60b9      	str	r1, [r7, #8]
 8006fdc:	607a      	str	r2, [r7, #4]
 8006fde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006fe4:	f7ff ff26 	bl	8006e34 <__NVIC_GetPriorityGrouping>
 8006fe8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	68b9      	ldr	r1, [r7, #8]
 8006fee:	6978      	ldr	r0, [r7, #20]
 8006ff0:	f7ff ff9a 	bl	8006f28 <NVIC_EncodePriority>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ffa:	4611      	mov	r1, r2
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7ff ff69 	bl	8006ed4 <__NVIC_SetPriority>
}
 8007002:	bf00      	nop
 8007004:	3718      	adds	r7, #24
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b082      	sub	sp, #8
 800700e:	af00      	add	r7, sp, #0
 8007010:	4603      	mov	r3, r0
 8007012:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007018:	4618      	mov	r0, r3
 800701a:	f7ff ff19 	bl	8006e50 <__NVIC_EnableIRQ>
}
 800701e:	bf00      	nop
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b082      	sub	sp, #8
 800702a:	af00      	add	r7, sp, #0
 800702c:	4603      	mov	r3, r0
 800702e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007034:	4618      	mov	r0, r3
 8007036:	f7ff ff29 	bl	8006e8c <__NVIC_DisableIRQ>
}
 800703a:	bf00      	nop
 800703c:	3708      	adds	r7, #8
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8007046:	f7ff ffa3 	bl	8006f90 <__NVIC_SystemReset>
	...

0800704c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800704c:	b480      	push	{r7}
 800704e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8007050:	f3bf 8f5f 	dmb	sy
}
 8007054:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8007056:	4b07      	ldr	r3, [pc, #28]	; (8007074 <HAL_MPU_Disable+0x28>)
 8007058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705a:	4a06      	ldr	r2, [pc, #24]	; (8007074 <HAL_MPU_Disable+0x28>)
 800705c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007060:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
 8007062:	4b05      	ldr	r3, [pc, #20]	; (8007078 <HAL_MPU_Disable+0x2c>)
 8007064:	2200      	movs	r2, #0
 8007066:	605a      	str	r2, [r3, #4]
}
 8007068:	bf00      	nop
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	e000ed00 	.word	0xe000ed00
 8007078:	e000ed90 	.word	0xe000ed90

0800707c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8007084:	4a0b      	ldr	r2, [pc, #44]	; (80070b4 <HAL_MPU_Enable+0x38>)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f043 0301 	orr.w	r3, r3, #1
 800708c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800708e:	4b0a      	ldr	r3, [pc, #40]	; (80070b8 <HAL_MPU_Enable+0x3c>)
 8007090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007092:	4a09      	ldr	r2, [pc, #36]	; (80070b8 <HAL_MPU_Enable+0x3c>)
 8007094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007098:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800709a:	f3bf 8f4f 	dsb	sy
}
 800709e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80070a0:	f3bf 8f6f 	isb	sy
}
 80070a4:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80070a6:	bf00      	nop
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	e000ed90 	.word	0xe000ed90
 80070b8:	e000ed00 	.word	0xe000ed00

080070bc <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	785a      	ldrb	r2, [r3, #1]
 80070c8:	4b1d      	ldr	r3, [pc, #116]	; (8007140 <HAL_MPU_ConfigRegion+0x84>)
 80070ca:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d029      	beq.n	8007128 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80070d4:	4a1a      	ldr	r2, [pc, #104]	; (8007140 <HAL_MPU_ConfigRegion+0x84>)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	7b1b      	ldrb	r3, [r3, #12]
 80070e0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	7adb      	ldrb	r3, [r3, #11]
 80070e6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80070e8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	7a9b      	ldrb	r3, [r3, #10]
 80070ee:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80070f0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	7b5b      	ldrb	r3, [r3, #13]
 80070f6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80070f8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	7b9b      	ldrb	r3, [r3, #14]
 80070fe:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8007100:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	7bdb      	ldrb	r3, [r3, #15]
 8007106:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007108:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	7a5b      	ldrb	r3, [r3, #9]
 800710e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8007110:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	7a1b      	ldrb	r3, [r3, #8]
 8007116:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007118:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	7812      	ldrb	r2, [r2, #0]
 800711e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007120:	4a07      	ldr	r2, [pc, #28]	; (8007140 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007122:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007124:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00U;
    MPU->RASR = 0x00U;
  }
}
 8007126:	e005      	b.n	8007134 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00U;
 8007128:	4b05      	ldr	r3, [pc, #20]	; (8007140 <HAL_MPU_ConfigRegion+0x84>)
 800712a:	2200      	movs	r2, #0
 800712c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00U;
 800712e:	4b04      	ldr	r3, [pc, #16]	; (8007140 <HAL_MPU_ConfigRegion+0x84>)
 8007130:	2200      	movs	r2, #0
 8007132:	611a      	str	r2, [r3, #16]
}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	e000ed90 	.word	0xe000ed90

08007144 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d101      	bne.n	8007156 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e00e      	b.n	8007174 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	795b      	ldrb	r3, [r3, #5]
 800715a:	b2db      	uxtb	r3, r3
 800715c:	2b00      	cmp	r3, #0
 800715e:	d105      	bne.n	800716c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f7fd fb4e 	bl	8004808 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3708      	adds	r7, #8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <HAL_CRC_DeInit>:
  * @brief  DeInitialize the CRC peripheral.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <HAL_CRC_DeInit+0x12>
  {
    return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e022      	b.n	80071d4 <HAL_CRC_DeInit+0x58>

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  /* Check the CRC peripheral state */
  if (hcrc->State == HAL_CRC_STATE_BUSY)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	795b      	ldrb	r3, [r3, #5]
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b02      	cmp	r3, #2
 8007196:	d101      	bne.n	800719c <HAL_CRC_DeInit+0x20>
  {
    return HAL_BUSY;
 8007198:	2302      	movs	r3, #2
 800719a:	e01b      	b.n	80071d4 <HAL_CRC_DeInit+0x58>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2202      	movs	r2, #2
 80071a0:	715a      	strb	r2, [r3, #5]

  /* Reset CRC calculation unit */
  __HAL_CRC_DR_RESET(hcrc);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	689a      	ldr	r2, [r3, #8]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f042 0201 	orr.w	r2, r2, #1
 80071b0:	609a      	str	r2, [r3, #8]

  /* Reset IDR register content */
  CLEAR_BIT(hcrc->Instance->IDR, CRC_IDR_IDR);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	791b      	ldrb	r3, [r3, #4]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2200      	movs	r2, #0
 80071be:	711a      	strb	r2, [r3, #4]

  /* DeInit the low level hardware */
  HAL_CRC_MspDeInit(hcrc);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f7fd fb43 	bl	800484c <HAL_CRC_MspDeInit>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_RESET;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	715a      	strb	r2, [r3, #5]

  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3708      	adds	r7, #8
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80071dc:	b480      	push	{r7}
 80071de:	b087      	sub	sp, #28
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80071e8:	2300      	movs	r3, #0
 80071ea:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2202      	movs	r2, #2
 80071f0:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	689a      	ldr	r2, [r3, #8]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f042 0201 	orr.w	r2, r2, #1
 8007200:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8007202:	2300      	movs	r3, #0
 8007204:	617b      	str	r3, [r7, #20]
 8007206:	e00a      	b.n	800721e <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	68ba      	ldr	r2, [r7, #8]
 800720e:	441a      	add	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6812      	ldr	r2, [r2, #0]
 8007216:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	3301      	adds	r3, #1
 800721c:	617b      	str	r3, [r7, #20]
 800721e:	697a      	ldr	r2, [r7, #20]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	429a      	cmp	r2, r3
 8007224:	d3f0      	bcc.n	8007208 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2201      	movs	r2, #1
 8007232:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8007234:	693b      	ldr	r3, [r7, #16]
}
 8007236:	4618      	mov	r0, r3
 8007238:	371c      	adds	r7, #28
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <HAL_CRC_GetState>:
  * @brief  Return the CRC handle state.
  * @param  hcrc CRC handle
  * @retval HAL state
  */
HAL_CRC_StateTypeDef HAL_CRC_GetState(CRC_HandleTypeDef *hcrc)
{
 8007242:	b480      	push	{r7}
 8007244:	b083      	sub	sp, #12
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  /* Return CRC handle state */
  return hcrc->State;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	795b      	ldrb	r3, [r3, #5]
 800724e:	b2db      	uxtb	r3, r3
}
 8007250:	4618      	mov	r0, r3
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b086      	sub	sp, #24
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007264:	2300      	movs	r3, #0
 8007266:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007268:	f7ff f800 	bl	800626c <HAL_GetTick>
 800726c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d101      	bne.n	8007278 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e099      	b.n	80073ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2202      	movs	r2, #2
 800727c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f022 0201 	bic.w	r2, r2, #1
 8007296:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007298:	e00f      	b.n	80072ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800729a:	f7fe ffe7 	bl	800626c <HAL_GetTick>
 800729e:	4602      	mov	r2, r0
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	2b05      	cmp	r3, #5
 80072a6:	d908      	bls.n	80072ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2220      	movs	r2, #32
 80072ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2203      	movs	r2, #3
 80072b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e078      	b.n	80073ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0301 	and.w	r3, r3, #1
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d1e8      	bne.n	800729a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80072d0:	697a      	ldr	r2, [r7, #20]
 80072d2:	4b38      	ldr	r3, [pc, #224]	; (80073b4 <HAL_DMA_Init+0x158>)
 80072d4:	4013      	ands	r3, r2
 80072d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	699b      	ldr	r3, [r3, #24]
 80072f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6a1b      	ldr	r3, [r3, #32]
 8007304:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	4313      	orrs	r3, r2
 800730a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007310:	2b04      	cmp	r3, #4
 8007312:	d107      	bne.n	8007324 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731c:	4313      	orrs	r3, r2
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	4313      	orrs	r3, r2
 8007322:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	697a      	ldr	r2, [r7, #20]
 800732a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	695b      	ldr	r3, [r3, #20]
 8007332:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	f023 0307 	bic.w	r3, r3, #7
 800733a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007340:	697a      	ldr	r2, [r7, #20]
 8007342:	4313      	orrs	r3, r2
 8007344:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734a:	2b04      	cmp	r3, #4
 800734c:	d117      	bne.n	800737e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	4313      	orrs	r3, r2
 8007356:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00e      	beq.n	800737e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fb6d 	bl	8007a40 <DMA_CheckFifoParam>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d008      	beq.n	800737e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2240      	movs	r2, #64	; 0x40
 8007370:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800737a:	2301      	movs	r3, #1
 800737c:	e016      	b.n	80073ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	697a      	ldr	r2, [r7, #20]
 8007384:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fb24 	bl	80079d4 <DMA_CalcBaseAndBitshift>
 800738c:	4603      	mov	r3, r0
 800738e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007394:	223f      	movs	r2, #63	; 0x3f
 8007396:	409a      	lsls	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3718      	adds	r7, #24
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	f010803f 	.word	0xf010803f

080073b8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d101      	bne.n	80073ca <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e050      	b.n	800746c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	d101      	bne.n	80073da <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80073d6:	2302      	movs	r3, #2
 80073d8:	e048      	b.n	800746c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f022 0201 	bic.w	r2, r2, #1
 80073e8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2200      	movs	r2, #0
 80073f0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2200      	movs	r2, #0
 80073f8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2200      	movs	r2, #0
 8007400:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2200      	movs	r2, #0
 8007408:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2200      	movs	r2, #0
 8007410:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2221      	movs	r2, #33	; 0x21
 8007418:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 fada 	bl	80079d4 <DMA_CalcBaseAndBitshift>
 8007420:	4603      	mov	r3, r0
 8007422:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800744c:	223f      	movs	r2, #63	; 0x3f
 800744e:	409a      	lsls	r2, r3
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3710      	adds	r7, #16
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b086      	sub	sp, #24
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
 8007480:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800748a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007492:	2b01      	cmp	r3, #1
 8007494:	d101      	bne.n	800749a <HAL_DMA_Start_IT+0x26>
 8007496:	2302      	movs	r3, #2
 8007498:	e040      	b.n	800751c <HAL_DMA_Start_IT+0xa8>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d12f      	bne.n	800750e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2202      	movs	r2, #2
 80074b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	68b9      	ldr	r1, [r7, #8]
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f000 fa58 	bl	8007978 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074cc:	223f      	movs	r2, #63	; 0x3f
 80074ce:	409a      	lsls	r2, r3
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f042 0216 	orr.w	r2, r2, #22
 80074e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d007      	beq.n	80074fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f042 0208 	orr.w	r2, r2, #8
 80074fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f042 0201 	orr.w	r2, r2, #1
 800750a:	601a      	str	r2, [r3, #0]
 800750c:	e005      	b.n	800751a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007516:	2302      	movs	r3, #2
 8007518:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800751a:	7dfb      	ldrb	r3, [r7, #23]
}
 800751c:	4618      	mov	r0, r3
 800751e:	3718      	adds	r7, #24
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007530:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007532:	f7fe fe9b 	bl	800626c <HAL_GetTick>
 8007536:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b02      	cmp	r3, #2
 8007542:	d008      	beq.n	8007556 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2280      	movs	r2, #128	; 0x80
 8007548:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e052      	b.n	80075fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f022 0216 	bic.w	r2, r2, #22
 8007564:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	695a      	ldr	r2, [r3, #20]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007574:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757a:	2b00      	cmp	r3, #0
 800757c:	d103      	bne.n	8007586 <HAL_DMA_Abort+0x62>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007582:	2b00      	cmp	r3, #0
 8007584:	d007      	beq.n	8007596 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f022 0208 	bic.w	r2, r2, #8
 8007594:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f022 0201 	bic.w	r2, r2, #1
 80075a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80075a6:	e013      	b.n	80075d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80075a8:	f7fe fe60 	bl	800626c <HAL_GetTick>
 80075ac:	4602      	mov	r2, r0
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	2b05      	cmp	r3, #5
 80075b4:	d90c      	bls.n	80075d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2220      	movs	r2, #32
 80075ba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2203      	movs	r2, #3
 80075c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	e015      	b.n	80075fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1e4      	bne.n	80075a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075e2:	223f      	movs	r2, #63	; 0x3f
 80075e4:	409a      	lsls	r2, r3
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2201      	movs	r2, #1
 80075ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3710      	adds	r7, #16
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007612:	b2db      	uxtb	r3, r3
 8007614:	2b02      	cmp	r3, #2
 8007616:	d004      	beq.n	8007622 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2280      	movs	r2, #128	; 0x80
 800761c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e00c      	b.n	800763c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2205      	movs	r2, #5
 8007626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f022 0201 	bic.w	r2, r2, #1
 8007638:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b086      	sub	sp, #24
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007650:	2300      	movs	r3, #0
 8007652:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007654:	4b8e      	ldr	r3, [pc, #568]	; (8007890 <HAL_DMA_IRQHandler+0x248>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a8e      	ldr	r2, [pc, #568]	; (8007894 <HAL_DMA_IRQHandler+0x24c>)
 800765a:	fba2 2303 	umull	r2, r3, r2, r3
 800765e:	0a9b      	lsrs	r3, r3, #10
 8007660:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007666:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007672:	2208      	movs	r2, #8
 8007674:	409a      	lsls	r2, r3
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	4013      	ands	r3, r2
 800767a:	2b00      	cmp	r3, #0
 800767c:	d01a      	beq.n	80076b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0304 	and.w	r3, r3, #4
 8007688:	2b00      	cmp	r3, #0
 800768a:	d013      	beq.n	80076b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f022 0204 	bic.w	r2, r2, #4
 800769a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076a0:	2208      	movs	r2, #8
 80076a2:	409a      	lsls	r2, r3
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ac:	f043 0201 	orr.w	r2, r3, #1
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076b8:	2201      	movs	r2, #1
 80076ba:	409a      	lsls	r2, r3
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	4013      	ands	r3, r2
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d012      	beq.n	80076ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	695b      	ldr	r3, [r3, #20]
 80076ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00b      	beq.n	80076ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076d6:	2201      	movs	r2, #1
 80076d8:	409a      	lsls	r2, r3
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e2:	f043 0202 	orr.w	r2, r3, #2
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076ee:	2204      	movs	r2, #4
 80076f0:	409a      	lsls	r2, r3
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	4013      	ands	r3, r2
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d012      	beq.n	8007720 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0302 	and.w	r3, r3, #2
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00b      	beq.n	8007720 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800770c:	2204      	movs	r2, #4
 800770e:	409a      	lsls	r2, r3
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007718:	f043 0204 	orr.w	r2, r3, #4
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007724:	2210      	movs	r2, #16
 8007726:	409a      	lsls	r2, r3
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	4013      	ands	r3, r2
 800772c:	2b00      	cmp	r3, #0
 800772e:	d043      	beq.n	80077b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 0308 	and.w	r3, r3, #8
 800773a:	2b00      	cmp	r3, #0
 800773c:	d03c      	beq.n	80077b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007742:	2210      	movs	r2, #16
 8007744:	409a      	lsls	r2, r3
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d018      	beq.n	800778a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007762:	2b00      	cmp	r3, #0
 8007764:	d108      	bne.n	8007778 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776a:	2b00      	cmp	r3, #0
 800776c:	d024      	beq.n	80077b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	4798      	blx	r3
 8007776:	e01f      	b.n	80077b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800777c:	2b00      	cmp	r3, #0
 800777e:	d01b      	beq.n	80077b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	4798      	blx	r3
 8007788:	e016      	b.n	80077b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007794:	2b00      	cmp	r3, #0
 8007796:	d107      	bne.n	80077a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f022 0208 	bic.w	r2, r2, #8
 80077a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d003      	beq.n	80077b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077bc:	2220      	movs	r2, #32
 80077be:	409a      	lsls	r2, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	4013      	ands	r3, r2
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 808f 	beq.w	80078e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0310 	and.w	r3, r3, #16
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f000 8087 	beq.w	80078e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077de:	2220      	movs	r2, #32
 80077e0:	409a      	lsls	r2, r3
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b05      	cmp	r3, #5
 80077f0:	d136      	bne.n	8007860 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f022 0216 	bic.w	r2, r2, #22
 8007800:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	695a      	ldr	r2, [r3, #20]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007810:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007816:	2b00      	cmp	r3, #0
 8007818:	d103      	bne.n	8007822 <HAL_DMA_IRQHandler+0x1da>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800781e:	2b00      	cmp	r3, #0
 8007820:	d007      	beq.n	8007832 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f022 0208 	bic.w	r2, r2, #8
 8007830:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007836:	223f      	movs	r2, #63	; 0x3f
 8007838:	409a      	lsls	r2, r3
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2201      	movs	r2, #1
 8007842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007852:	2b00      	cmp	r3, #0
 8007854:	d07e      	beq.n	8007954 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	4798      	blx	r3
        }
        return;
 800785e:	e079      	b.n	8007954 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d01d      	beq.n	80078aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007878:	2b00      	cmp	r3, #0
 800787a:	d10d      	bne.n	8007898 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007880:	2b00      	cmp	r3, #0
 8007882:	d031      	beq.n	80078e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	4798      	blx	r3
 800788c:	e02c      	b.n	80078e8 <HAL_DMA_IRQHandler+0x2a0>
 800788e:	bf00      	nop
 8007890:	2000004c 	.word	0x2000004c
 8007894:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800789c:	2b00      	cmp	r3, #0
 800789e:	d023      	beq.n	80078e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	4798      	blx	r3
 80078a8:	e01e      	b.n	80078e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10f      	bne.n	80078d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f022 0210 	bic.w	r2, r2, #16
 80078c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d003      	beq.n	80078e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d032      	beq.n	8007956 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f4:	f003 0301 	and.w	r3, r3, #1
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d022      	beq.n	8007942 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2205      	movs	r2, #5
 8007900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f022 0201 	bic.w	r2, r2, #1
 8007912:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	3301      	adds	r3, #1
 8007918:	60bb      	str	r3, [r7, #8]
 800791a:	697a      	ldr	r2, [r7, #20]
 800791c:	429a      	cmp	r2, r3
 800791e:	d307      	bcc.n	8007930 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 0301 	and.w	r3, r3, #1
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1f2      	bne.n	8007914 <HAL_DMA_IRQHandler+0x2cc>
 800792e:	e000      	b.n	8007932 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007930:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2201      	movs	r2, #1
 8007936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007946:	2b00      	cmp	r3, #0
 8007948:	d005      	beq.n	8007956 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	4798      	blx	r3
 8007952:	e000      	b.n	8007956 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007954:	bf00      	nop
    }
  }
}
 8007956:	3718      	adds	r7, #24
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800796a:	b2db      	uxtb	r3, r3
}
 800796c:	4618      	mov	r0, r3
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	607a      	str	r2, [r7, #4]
 8007984:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007994:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	683a      	ldr	r2, [r7, #0]
 800799c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	2b40      	cmp	r3, #64	; 0x40
 80079a4:	d108      	bne.n	80079b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68ba      	ldr	r2, [r7, #8]
 80079b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80079b6:	e007      	b.n	80079c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68ba      	ldr	r2, [r7, #8]
 80079be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	60da      	str	r2, [r3, #12]
}
 80079c8:	bf00      	nop
 80079ca:	3714      	adds	r7, #20
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	3b10      	subs	r3, #16
 80079e4:	4a14      	ldr	r2, [pc, #80]	; (8007a38 <DMA_CalcBaseAndBitshift+0x64>)
 80079e6:	fba2 2303 	umull	r2, r3, r2, r3
 80079ea:	091b      	lsrs	r3, r3, #4
 80079ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80079ee:	4a13      	ldr	r2, [pc, #76]	; (8007a3c <DMA_CalcBaseAndBitshift+0x68>)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4413      	add	r3, r2
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	461a      	mov	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2b03      	cmp	r3, #3
 8007a00:	d909      	bls.n	8007a16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007a0a:	f023 0303 	bic.w	r3, r3, #3
 8007a0e:	1d1a      	adds	r2, r3, #4
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	659a      	str	r2, [r3, #88]	; 0x58
 8007a14:	e007      	b.n	8007a26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007a1e:	f023 0303 	bic.w	r3, r3, #3
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3714      	adds	r7, #20
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	aaaaaaab 	.word	0xaaaaaaab
 8007a3c:	080149a0 	.word	0x080149a0

08007a40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d11f      	bne.n	8007a9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	2b03      	cmp	r3, #3
 8007a5e:	d856      	bhi.n	8007b0e <DMA_CheckFifoParam+0xce>
 8007a60:	a201      	add	r2, pc, #4	; (adr r2, 8007a68 <DMA_CheckFifoParam+0x28>)
 8007a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a66:	bf00      	nop
 8007a68:	08007a79 	.word	0x08007a79
 8007a6c:	08007a8b 	.word	0x08007a8b
 8007a70:	08007a79 	.word	0x08007a79
 8007a74:	08007b0f 	.word	0x08007b0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d046      	beq.n	8007b12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a88:	e043      	b.n	8007b12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007a92:	d140      	bne.n	8007b16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a98:	e03d      	b.n	8007b16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	699b      	ldr	r3, [r3, #24]
 8007a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aa2:	d121      	bne.n	8007ae8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	d837      	bhi.n	8007b1a <DMA_CheckFifoParam+0xda>
 8007aaa:	a201      	add	r2, pc, #4	; (adr r2, 8007ab0 <DMA_CheckFifoParam+0x70>)
 8007aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab0:	08007ac1 	.word	0x08007ac1
 8007ab4:	08007ac7 	.word	0x08007ac7
 8007ab8:	08007ac1 	.word	0x08007ac1
 8007abc:	08007ad9 	.word	0x08007ad9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ac4:	e030      	b.n	8007b28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d025      	beq.n	8007b1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ad6:	e022      	b.n	8007b1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007adc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007ae0:	d11f      	bne.n	8007b22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007ae6:	e01c      	b.n	8007b22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d903      	bls.n	8007af6 <DMA_CheckFifoParam+0xb6>
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	2b03      	cmp	r3, #3
 8007af2:	d003      	beq.n	8007afc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007af4:	e018      	b.n	8007b28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	73fb      	strb	r3, [r7, #15]
      break;
 8007afa:	e015      	b.n	8007b28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00e      	beq.n	8007b26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b0c:	e00b      	b.n	8007b26 <DMA_CheckFifoParam+0xe6>
      break;
 8007b0e:	bf00      	nop
 8007b10:	e00a      	b.n	8007b28 <DMA_CheckFifoParam+0xe8>
      break;
 8007b12:	bf00      	nop
 8007b14:	e008      	b.n	8007b28 <DMA_CheckFifoParam+0xe8>
      break;
 8007b16:	bf00      	nop
 8007b18:	e006      	b.n	8007b28 <DMA_CheckFifoParam+0xe8>
      break;
 8007b1a:	bf00      	nop
 8007b1c:	e004      	b.n	8007b28 <DMA_CheckFifoParam+0xe8>
      break;
 8007b1e:	bf00      	nop
 8007b20:	e002      	b.n	8007b28 <DMA_CheckFifoParam+0xe8>
      break;   
 8007b22:	bf00      	nop
 8007b24:	e000      	b.n	8007b28 <DMA_CheckFifoParam+0xe8>
      break;
 8007b26:	bf00      	nop
    }
  } 
  
  return status; 
 8007b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3714      	adds	r7, #20
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop

08007b38 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8007b42:	4b4b      	ldr	r3, [pc, #300]	; (8007c70 <HAL_FLASH_IRQHandler+0x138>)
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d020      	beq.n	8007b90 <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8007b4e:	4b49      	ldr	r3, [pc, #292]	; (8007c74 <HAL_FLASH_IRQHandler+0x13c>)
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d107      	bne.n	8007b68 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8007b58:	4b46      	ldr	r3, [pc, #280]	; (8007c74 <HAL_FLASH_IRQHandler+0x13c>)
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8007b5e:	4b45      	ldr	r3, [pc, #276]	; (8007c74 <HAL_FLASH_IRQHandler+0x13c>)
 8007b60:	f04f 32ff 	mov.w	r2, #4294967295
 8007b64:	60da      	str	r2, [r3, #12]
 8007b66:	e00b      	b.n	8007b80 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8007b68:	4b42      	ldr	r3, [pc, #264]	; (8007c74 <HAL_FLASH_IRQHandler+0x13c>)
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d103      	bne.n	8007b7a <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8007b72:	4b40      	ldr	r3, [pc, #256]	; (8007c74 <HAL_FLASH_IRQHandler+0x13c>)
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	607b      	str	r3, [r7, #4]
 8007b78:	e002      	b.n	8007b80 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8007b7a:	4b3e      	ldr	r3, [pc, #248]	; (8007c74 <HAL_FLASH_IRQHandler+0x13c>)
 8007b7c:	695b      	ldr	r3, [r3, #20]
 8007b7e:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8007b80:	f000 f88e 	bl	8007ca0 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f881 	bl	8007c8c <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8007b8a:	4b3a      	ldr	r3, [pc, #232]	; (8007c74 <HAL_FLASH_IRQHandler+0x13c>)
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007b90:	4b37      	ldr	r3, [pc, #220]	; (8007c70 <HAL_FLASH_IRQHandler+0x138>)
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	f003 0301 	and.w	r3, r3, #1
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d04a      	beq.n	8007c32 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007b9c:	4b34      	ldr	r3, [pc, #208]	; (8007c70 <HAL_FLASH_IRQHandler+0x138>)
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8007ba2:	4b34      	ldr	r3, [pc, #208]	; (8007c74 <HAL_FLASH_IRQHandler+0x13c>)
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d12d      	bne.n	8007c08 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8007bac:	4b31      	ldr	r3, [pc, #196]	; (8007c74 <HAL_FLASH_IRQHandler+0x13c>)
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	4a30      	ldr	r2, [pc, #192]	; (8007c74 <HAL_FLASH_IRQHandler+0x13c>)
 8007bb4:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8007bb6:	4b2f      	ldr	r3, [pc, #188]	; (8007c74 <HAL_FLASH_IRQHandler+0x13c>)
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d015      	beq.n	8007bea <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8007bbe:	4b2d      	ldr	r3, [pc, #180]	; (8007c74 <HAL_FLASH_IRQHandler+0x13c>)
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 f857 	bl	8007c78 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8007bca:	4b2a      	ldr	r3, [pc, #168]	; (8007c74 <HAL_FLASH_IRQHandler+0x13c>)
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	4a28      	ldr	r2, [pc, #160]	; (8007c74 <HAL_FLASH_IRQHandler+0x13c>)
 8007bd2:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8007bd4:	4b27      	ldr	r3, [pc, #156]	; (8007c74 <HAL_FLASH_IRQHandler+0x13c>)
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8007bda:	4b26      	ldr	r3, [pc, #152]	; (8007c74 <HAL_FLASH_IRQHandler+0x13c>)
 8007bdc:	7a1b      	ldrb	r3, [r3, #8]
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	4619      	mov	r1, r3
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 f8c2 	bl	8007d6c <FLASH_Erase_Sector>
 8007be8:	e023      	b.n	8007c32 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8007bea:	f04f 33ff 	mov.w	r3, #4294967295
 8007bee:	607b      	str	r3, [r7, #4]
 8007bf0:	4a20      	ldr	r2, [pc, #128]	; (8007c74 <HAL_FLASH_IRQHandler+0x13c>)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8007bf6:	4b1f      	ldr	r3, [pc, #124]	; (8007c74 <HAL_FLASH_IRQHandler+0x13c>)
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8007bfc:	f000 f8fe 	bl	8007dfc <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 f839 	bl	8007c78 <HAL_FLASH_EndOfOperationCallback>
 8007c06:	e014      	b.n	8007c32 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8007c08:	4b1a      	ldr	r3, [pc, #104]	; (8007c74 <HAL_FLASH_IRQHandler+0x13c>)
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	2b02      	cmp	r3, #2
 8007c10:	d107      	bne.n	8007c22 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8007c12:	f000 f8f3 	bl	8007dfc <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8007c16:	4b17      	ldr	r3, [pc, #92]	; (8007c74 <HAL_FLASH_IRQHandler+0x13c>)
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f000 f82c 	bl	8007c78 <HAL_FLASH_EndOfOperationCallback>
 8007c20:	e004      	b.n	8007c2c <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8007c22:	4b14      	ldr	r3, [pc, #80]	; (8007c74 <HAL_FLASH_IRQHandler+0x13c>)
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f000 f826 	bl	8007c78 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8007c2c:	4b11      	ldr	r3, [pc, #68]	; (8007c74 <HAL_FLASH_IRQHandler+0x13c>)
 8007c2e:	2200      	movs	r2, #0
 8007c30:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8007c32:	4b10      	ldr	r3, [pc, #64]	; (8007c74 <HAL_FLASH_IRQHandler+0x13c>)
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d114      	bne.n	8007c66 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8007c3c:	4b0c      	ldr	r3, [pc, #48]	; (8007c70 <HAL_FLASH_IRQHandler+0x138>)
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	4a0b      	ldr	r2, [pc, #44]	; (8007c70 <HAL_FLASH_IRQHandler+0x138>)
 8007c42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007c46:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8007c48:	4b09      	ldr	r3, [pc, #36]	; (8007c70 <HAL_FLASH_IRQHandler+0x138>)
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	4a08      	ldr	r2, [pc, #32]	; (8007c70 <HAL_FLASH_IRQHandler+0x138>)
 8007c4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c52:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8007c54:	4b06      	ldr	r3, [pc, #24]	; (8007c70 <HAL_FLASH_IRQHandler+0x138>)
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	4a05      	ldr	r2, [pc, #20]	; (8007c70 <HAL_FLASH_IRQHandler+0x138>)
 8007c5a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007c5e:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8007c60:	4b04      	ldr	r3, [pc, #16]	; (8007c74 <HAL_FLASH_IRQHandler+0x13c>)
 8007c62:	2200      	movs	r2, #0
 8007c64:	761a      	strb	r2, [r3, #24]
  }
}
 8007c66:	bf00      	nop
 8007c68:	3708      	adds	r7, #8
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	40023c00 	.word	0x40023c00
 8007c74:	200008cc 	.word	0x200008cc

08007c78 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8007c80:	bf00      	nop
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8007ca0:	b480      	push	{r7}
 8007ca2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007ca4:	4b2f      	ldr	r3, [pc, #188]	; (8007d64 <FLASH_SetErrorCode+0xc4>)
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	f003 0310 	and.w	r3, r3, #16
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d008      	beq.n	8007cc2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007cb0:	4b2d      	ldr	r3, [pc, #180]	; (8007d68 <FLASH_SetErrorCode+0xc8>)
 8007cb2:	69db      	ldr	r3, [r3, #28]
 8007cb4:	f043 0310 	orr.w	r3, r3, #16
 8007cb8:	4a2b      	ldr	r2, [pc, #172]	; (8007d68 <FLASH_SetErrorCode+0xc8>)
 8007cba:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8007cbc:	4b29      	ldr	r3, [pc, #164]	; (8007d64 <FLASH_SetErrorCode+0xc4>)
 8007cbe:	2210      	movs	r2, #16
 8007cc0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8007cc2:	4b28      	ldr	r3, [pc, #160]	; (8007d64 <FLASH_SetErrorCode+0xc4>)
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	f003 0320 	and.w	r3, r3, #32
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d008      	beq.n	8007ce0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8007cce:	4b26      	ldr	r3, [pc, #152]	; (8007d68 <FLASH_SetErrorCode+0xc8>)
 8007cd0:	69db      	ldr	r3, [r3, #28]
 8007cd2:	f043 0308 	orr.w	r3, r3, #8
 8007cd6:	4a24      	ldr	r2, [pc, #144]	; (8007d68 <FLASH_SetErrorCode+0xc8>)
 8007cd8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8007cda:	4b22      	ldr	r3, [pc, #136]	; (8007d64 <FLASH_SetErrorCode+0xc4>)
 8007cdc:	2220      	movs	r2, #32
 8007cde:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8007ce0:	4b20      	ldr	r3, [pc, #128]	; (8007d64 <FLASH_SetErrorCode+0xc4>)
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d008      	beq.n	8007cfe <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8007cec:	4b1e      	ldr	r3, [pc, #120]	; (8007d68 <FLASH_SetErrorCode+0xc8>)
 8007cee:	69db      	ldr	r3, [r3, #28]
 8007cf0:	f043 0304 	orr.w	r3, r3, #4
 8007cf4:	4a1c      	ldr	r2, [pc, #112]	; (8007d68 <FLASH_SetErrorCode+0xc8>)
 8007cf6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8007cf8:	4b1a      	ldr	r3, [pc, #104]	; (8007d64 <FLASH_SetErrorCode+0xc4>)
 8007cfa:	2240      	movs	r2, #64	; 0x40
 8007cfc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8007cfe:	4b19      	ldr	r3, [pc, #100]	; (8007d64 <FLASH_SetErrorCode+0xc4>)
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d008      	beq.n	8007d1c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8007d0a:	4b17      	ldr	r3, [pc, #92]	; (8007d68 <FLASH_SetErrorCode+0xc8>)
 8007d0c:	69db      	ldr	r3, [r3, #28]
 8007d0e:	f043 0302 	orr.w	r3, r3, #2
 8007d12:	4a15      	ldr	r2, [pc, #84]	; (8007d68 <FLASH_SetErrorCode+0xc8>)
 8007d14:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8007d16:	4b13      	ldr	r3, [pc, #76]	; (8007d64 <FLASH_SetErrorCode+0xc4>)
 8007d18:	2280      	movs	r2, #128	; 0x80
 8007d1a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8007d1c:	4b11      	ldr	r3, [pc, #68]	; (8007d64 <FLASH_SetErrorCode+0xc4>)
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d009      	beq.n	8007d3c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8007d28:	4b0f      	ldr	r3, [pc, #60]	; (8007d68 <FLASH_SetErrorCode+0xc8>)
 8007d2a:	69db      	ldr	r3, [r3, #28]
 8007d2c:	f043 0301 	orr.w	r3, r3, #1
 8007d30:	4a0d      	ldr	r2, [pc, #52]	; (8007d68 <FLASH_SetErrorCode+0xc8>)
 8007d32:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8007d34:	4b0b      	ldr	r3, [pc, #44]	; (8007d64 <FLASH_SetErrorCode+0xc4>)
 8007d36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d3a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8007d3c:	4b09      	ldr	r3, [pc, #36]	; (8007d64 <FLASH_SetErrorCode+0xc4>)
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	f003 0302 	and.w	r3, r3, #2
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d008      	beq.n	8007d5a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007d48:	4b07      	ldr	r3, [pc, #28]	; (8007d68 <FLASH_SetErrorCode+0xc8>)
 8007d4a:	69db      	ldr	r3, [r3, #28]
 8007d4c:	f043 0320 	orr.w	r3, r3, #32
 8007d50:	4a05      	ldr	r2, [pc, #20]	; (8007d68 <FLASH_SetErrorCode+0xc8>)
 8007d52:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8007d54:	4b03      	ldr	r3, [pc, #12]	; (8007d64 <FLASH_SetErrorCode+0xc4>)
 8007d56:	2202      	movs	r2, #2
 8007d58:	60da      	str	r2, [r3, #12]
  }
}
 8007d5a:	bf00      	nop
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr
 8007d64:	40023c00 	.word	0x40023c00
 8007d68:	200008cc 	.word	0x200008cc

08007d6c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	460b      	mov	r3, r1
 8007d76:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8007d7c:	78fb      	ldrb	r3, [r7, #3]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d102      	bne.n	8007d88 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8007d82:	2300      	movs	r3, #0
 8007d84:	60fb      	str	r3, [r7, #12]
 8007d86:	e010      	b.n	8007daa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8007d88:	78fb      	ldrb	r3, [r7, #3]
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d103      	bne.n	8007d96 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8007d8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d92:	60fb      	str	r3, [r7, #12]
 8007d94:	e009      	b.n	8007daa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8007d96:	78fb      	ldrb	r3, [r7, #3]
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d103      	bne.n	8007da4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8007d9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007da0:	60fb      	str	r3, [r7, #12]
 8007da2:	e002      	b.n	8007daa <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8007da4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007da8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007daa:	4b13      	ldr	r3, [pc, #76]	; (8007df8 <FLASH_Erase_Sector+0x8c>)
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	4a12      	ldr	r2, [pc, #72]	; (8007df8 <FLASH_Erase_Sector+0x8c>)
 8007db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007db4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8007db6:	4b10      	ldr	r3, [pc, #64]	; (8007df8 <FLASH_Erase_Sector+0x8c>)
 8007db8:	691a      	ldr	r2, [r3, #16]
 8007dba:	490f      	ldr	r1, [pc, #60]	; (8007df8 <FLASH_Erase_Sector+0x8c>)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8007dc2:	4b0d      	ldr	r3, [pc, #52]	; (8007df8 <FLASH_Erase_Sector+0x8c>)
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	4a0c      	ldr	r2, [pc, #48]	; (8007df8 <FLASH_Erase_Sector+0x8c>)
 8007dc8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007dcc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8007dce:	4b0a      	ldr	r3, [pc, #40]	; (8007df8 <FLASH_Erase_Sector+0x8c>)
 8007dd0:	691a      	ldr	r2, [r3, #16]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	00db      	lsls	r3, r3, #3
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	4a07      	ldr	r2, [pc, #28]	; (8007df8 <FLASH_Erase_Sector+0x8c>)
 8007dda:	f043 0302 	orr.w	r3, r3, #2
 8007dde:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8007de0:	4b05      	ldr	r3, [pc, #20]	; (8007df8 <FLASH_Erase_Sector+0x8c>)
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	4a04      	ldr	r2, [pc, #16]	; (8007df8 <FLASH_Erase_Sector+0x8c>)
 8007de6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dea:	6113      	str	r3, [r2, #16]
}
 8007dec:	bf00      	nop
 8007dee:	3714      	adds	r7, #20
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr
 8007df8:	40023c00 	.word	0x40023c00

08007dfc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8007e00:	4b20      	ldr	r3, [pc, #128]	; (8007e84 <FLASH_FlushCaches+0x88>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d017      	beq.n	8007e3c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007e0c:	4b1d      	ldr	r3, [pc, #116]	; (8007e84 <FLASH_FlushCaches+0x88>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a1c      	ldr	r2, [pc, #112]	; (8007e84 <FLASH_FlushCaches+0x88>)
 8007e12:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e16:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007e18:	4b1a      	ldr	r3, [pc, #104]	; (8007e84 <FLASH_FlushCaches+0x88>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a19      	ldr	r2, [pc, #100]	; (8007e84 <FLASH_FlushCaches+0x88>)
 8007e1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007e22:	6013      	str	r3, [r2, #0]
 8007e24:	4b17      	ldr	r3, [pc, #92]	; (8007e84 <FLASH_FlushCaches+0x88>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a16      	ldr	r2, [pc, #88]	; (8007e84 <FLASH_FlushCaches+0x88>)
 8007e2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e2e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007e30:	4b14      	ldr	r3, [pc, #80]	; (8007e84 <FLASH_FlushCaches+0x88>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a13      	ldr	r2, [pc, #76]	; (8007e84 <FLASH_FlushCaches+0x88>)
 8007e36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e3a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8007e3c:	4b11      	ldr	r3, [pc, #68]	; (8007e84 <FLASH_FlushCaches+0x88>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d017      	beq.n	8007e78 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8007e48:	4b0e      	ldr	r3, [pc, #56]	; (8007e84 <FLASH_FlushCaches+0x88>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a0d      	ldr	r2, [pc, #52]	; (8007e84 <FLASH_FlushCaches+0x88>)
 8007e4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e52:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007e54:	4b0b      	ldr	r3, [pc, #44]	; (8007e84 <FLASH_FlushCaches+0x88>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a0a      	ldr	r2, [pc, #40]	; (8007e84 <FLASH_FlushCaches+0x88>)
 8007e5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007e5e:	6013      	str	r3, [r2, #0]
 8007e60:	4b08      	ldr	r3, [pc, #32]	; (8007e84 <FLASH_FlushCaches+0x88>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a07      	ldr	r2, [pc, #28]	; (8007e84 <FLASH_FlushCaches+0x88>)
 8007e66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e6a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007e6c:	4b05      	ldr	r3, [pc, #20]	; (8007e84 <FLASH_FlushCaches+0x88>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a04      	ldr	r2, [pc, #16]	; (8007e84 <FLASH_FlushCaches+0x88>)
 8007e72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007e76:	6013      	str	r3, [r2, #0]
  }
}
 8007e78:	bf00      	nop
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
 8007e82:	bf00      	nop
 8007e84:	40023c00 	.word	0x40023c00

08007e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b089      	sub	sp, #36	; 0x24
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007e92:	2300      	movs	r3, #0
 8007e94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007e96:	2300      	movs	r3, #0
 8007e98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	61fb      	str	r3, [r7, #28]
 8007ea2:	e159      	b.n	8008158 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8007eac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	697a      	ldr	r2, [r7, #20]
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007eb8:	693a      	ldr	r2, [r7, #16]
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	f040 8148 	bne.w	8008152 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	f003 0303 	and.w	r3, r3, #3
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d005      	beq.n	8007eda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d130      	bne.n	8007f3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	005b      	lsls	r3, r3, #1
 8007ee4:	2203      	movs	r2, #3
 8007ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eea:	43db      	mvns	r3, r3
 8007eec:	69ba      	ldr	r2, [r7, #24]
 8007eee:	4013      	ands	r3, r2
 8007ef0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	68da      	ldr	r2, [r3, #12]
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	005b      	lsls	r3, r3, #1
 8007efa:	fa02 f303 	lsl.w	r3, r2, r3
 8007efe:	69ba      	ldr	r2, [r7, #24]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	69ba      	ldr	r2, [r7, #24]
 8007f08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007f10:	2201      	movs	r2, #1
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	fa02 f303 	lsl.w	r3, r2, r3
 8007f18:	43db      	mvns	r3, r3
 8007f1a:	69ba      	ldr	r2, [r7, #24]
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	091b      	lsrs	r3, r3, #4
 8007f26:	f003 0201 	and.w	r2, r3, #1
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	69ba      	ldr	r2, [r7, #24]
 8007f3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	f003 0303 	and.w	r3, r3, #3
 8007f44:	2b03      	cmp	r3, #3
 8007f46:	d017      	beq.n	8007f78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	005b      	lsls	r3, r3, #1
 8007f52:	2203      	movs	r2, #3
 8007f54:	fa02 f303 	lsl.w	r3, r2, r3
 8007f58:	43db      	mvns	r3, r3
 8007f5a:	69ba      	ldr	r2, [r7, #24]
 8007f5c:	4013      	ands	r3, r2
 8007f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	689a      	ldr	r2, [r3, #8]
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	005b      	lsls	r3, r3, #1
 8007f68:	fa02 f303 	lsl.w	r3, r2, r3
 8007f6c:	69ba      	ldr	r2, [r7, #24]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	69ba      	ldr	r2, [r7, #24]
 8007f76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	f003 0303 	and.w	r3, r3, #3
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	d123      	bne.n	8007fcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	08da      	lsrs	r2, r3, #3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	3208      	adds	r2, #8
 8007f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	f003 0307 	and.w	r3, r3, #7
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	220f      	movs	r2, #15
 8007f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa0:	43db      	mvns	r3, r3
 8007fa2:	69ba      	ldr	r2, [r7, #24]
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	691a      	ldr	r2, [r3, #16]
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	f003 0307 	and.w	r3, r3, #7
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb8:	69ba      	ldr	r2, [r7, #24]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	08da      	lsrs	r2, r3, #3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	3208      	adds	r2, #8
 8007fc6:	69b9      	ldr	r1, [r7, #24]
 8007fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	005b      	lsls	r3, r3, #1
 8007fd6:	2203      	movs	r2, #3
 8007fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fdc:	43db      	mvns	r3, r3
 8007fde:	69ba      	ldr	r2, [r7, #24]
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	f003 0203 	and.w	r2, r3, #3
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	005b      	lsls	r3, r3, #1
 8007ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff4:	69ba      	ldr	r2, [r7, #24]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	69ba      	ldr	r2, [r7, #24]
 8007ffe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008008:	2b00      	cmp	r3, #0
 800800a:	f000 80a2 	beq.w	8008152 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800800e:	2300      	movs	r3, #0
 8008010:	60fb      	str	r3, [r7, #12]
 8008012:	4b57      	ldr	r3, [pc, #348]	; (8008170 <HAL_GPIO_Init+0x2e8>)
 8008014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008016:	4a56      	ldr	r2, [pc, #344]	; (8008170 <HAL_GPIO_Init+0x2e8>)
 8008018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800801c:	6453      	str	r3, [r2, #68]	; 0x44
 800801e:	4b54      	ldr	r3, [pc, #336]	; (8008170 <HAL_GPIO_Init+0x2e8>)
 8008020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008026:	60fb      	str	r3, [r7, #12]
 8008028:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800802a:	4a52      	ldr	r2, [pc, #328]	; (8008174 <HAL_GPIO_Init+0x2ec>)
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	089b      	lsrs	r3, r3, #2
 8008030:	3302      	adds	r3, #2
 8008032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008036:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	f003 0303 	and.w	r3, r3, #3
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	220f      	movs	r2, #15
 8008042:	fa02 f303 	lsl.w	r3, r2, r3
 8008046:	43db      	mvns	r3, r3
 8008048:	69ba      	ldr	r2, [r7, #24]
 800804a:	4013      	ands	r3, r2
 800804c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a49      	ldr	r2, [pc, #292]	; (8008178 <HAL_GPIO_Init+0x2f0>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d019      	beq.n	800808a <HAL_GPIO_Init+0x202>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a48      	ldr	r2, [pc, #288]	; (800817c <HAL_GPIO_Init+0x2f4>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d013      	beq.n	8008086 <HAL_GPIO_Init+0x1fe>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4a47      	ldr	r2, [pc, #284]	; (8008180 <HAL_GPIO_Init+0x2f8>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d00d      	beq.n	8008082 <HAL_GPIO_Init+0x1fa>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a46      	ldr	r2, [pc, #280]	; (8008184 <HAL_GPIO_Init+0x2fc>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d007      	beq.n	800807e <HAL_GPIO_Init+0x1f6>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a45      	ldr	r2, [pc, #276]	; (8008188 <HAL_GPIO_Init+0x300>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d101      	bne.n	800807a <HAL_GPIO_Init+0x1f2>
 8008076:	2304      	movs	r3, #4
 8008078:	e008      	b.n	800808c <HAL_GPIO_Init+0x204>
 800807a:	2307      	movs	r3, #7
 800807c:	e006      	b.n	800808c <HAL_GPIO_Init+0x204>
 800807e:	2303      	movs	r3, #3
 8008080:	e004      	b.n	800808c <HAL_GPIO_Init+0x204>
 8008082:	2302      	movs	r3, #2
 8008084:	e002      	b.n	800808c <HAL_GPIO_Init+0x204>
 8008086:	2301      	movs	r3, #1
 8008088:	e000      	b.n	800808c <HAL_GPIO_Init+0x204>
 800808a:	2300      	movs	r3, #0
 800808c:	69fa      	ldr	r2, [r7, #28]
 800808e:	f002 0203 	and.w	r2, r2, #3
 8008092:	0092      	lsls	r2, r2, #2
 8008094:	4093      	lsls	r3, r2
 8008096:	69ba      	ldr	r2, [r7, #24]
 8008098:	4313      	orrs	r3, r2
 800809a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800809c:	4935      	ldr	r1, [pc, #212]	; (8008174 <HAL_GPIO_Init+0x2ec>)
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	089b      	lsrs	r3, r3, #2
 80080a2:	3302      	adds	r3, #2
 80080a4:	69ba      	ldr	r2, [r7, #24]
 80080a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80080aa:	4b38      	ldr	r3, [pc, #224]	; (800818c <HAL_GPIO_Init+0x304>)
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	43db      	mvns	r3, r3
 80080b4:	69ba      	ldr	r2, [r7, #24]
 80080b6:	4013      	ands	r3, r2
 80080b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d003      	beq.n	80080ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80080c6:	69ba      	ldr	r2, [r7, #24]
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80080ce:	4a2f      	ldr	r2, [pc, #188]	; (800818c <HAL_GPIO_Init+0x304>)
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80080d4:	4b2d      	ldr	r3, [pc, #180]	; (800818c <HAL_GPIO_Init+0x304>)
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	43db      	mvns	r3, r3
 80080de:	69ba      	ldr	r2, [r7, #24]
 80080e0:	4013      	ands	r3, r2
 80080e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d003      	beq.n	80080f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80080f0:	69ba      	ldr	r2, [r7, #24]
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80080f8:	4a24      	ldr	r2, [pc, #144]	; (800818c <HAL_GPIO_Init+0x304>)
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80080fe:	4b23      	ldr	r3, [pc, #140]	; (800818c <HAL_GPIO_Init+0x304>)
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	43db      	mvns	r3, r3
 8008108:	69ba      	ldr	r2, [r7, #24]
 800810a:	4013      	ands	r3, r2
 800810c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008116:	2b00      	cmp	r3, #0
 8008118:	d003      	beq.n	8008122 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800811a:	69ba      	ldr	r2, [r7, #24]
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	4313      	orrs	r3, r2
 8008120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008122:	4a1a      	ldr	r2, [pc, #104]	; (800818c <HAL_GPIO_Init+0x304>)
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008128:	4b18      	ldr	r3, [pc, #96]	; (800818c <HAL_GPIO_Init+0x304>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	43db      	mvns	r3, r3
 8008132:	69ba      	ldr	r2, [r7, #24]
 8008134:	4013      	ands	r3, r2
 8008136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008140:	2b00      	cmp	r3, #0
 8008142:	d003      	beq.n	800814c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8008144:	69ba      	ldr	r2, [r7, #24]
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	4313      	orrs	r3, r2
 800814a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800814c:	4a0f      	ldr	r2, [pc, #60]	; (800818c <HAL_GPIO_Init+0x304>)
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	3301      	adds	r3, #1
 8008156:	61fb      	str	r3, [r7, #28]
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	2b0f      	cmp	r3, #15
 800815c:	f67f aea2 	bls.w	8007ea4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008160:	bf00      	nop
 8008162:	bf00      	nop
 8008164:	3724      	adds	r7, #36	; 0x24
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	40023800 	.word	0x40023800
 8008174:	40013800 	.word	0x40013800
 8008178:	40020000 	.word	0x40020000
 800817c:	40020400 	.word	0x40020400
 8008180:	40020800 	.word	0x40020800
 8008184:	40020c00 	.word	0x40020c00
 8008188:	40021000 	.word	0x40021000
 800818c:	40013c00 	.word	0x40013c00

08008190 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008190:	b480      	push	{r7}
 8008192:	b087      	sub	sp, #28
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800819a:	2300      	movs	r3, #0
 800819c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800819e:	2300      	movs	r3, #0
 80081a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80081a2:	2300      	movs	r3, #0
 80081a4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80081a6:	2300      	movs	r3, #0
 80081a8:	617b      	str	r3, [r7, #20]
 80081aa:	e0bb      	b.n	8008324 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80081ac:	2201      	movs	r2, #1
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	fa02 f303 	lsl.w	r3, r2, r3
 80081b4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	4013      	ands	r3, r2
 80081bc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80081be:	68fa      	ldr	r2, [r7, #12]
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	f040 80ab 	bne.w	800831e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80081c8:	4a5c      	ldr	r2, [pc, #368]	; (800833c <HAL_GPIO_DeInit+0x1ac>)
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	089b      	lsrs	r3, r3, #2
 80081ce:	3302      	adds	r3, #2
 80081d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081d4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	f003 0303 	and.w	r3, r3, #3
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	220f      	movs	r2, #15
 80081e0:	fa02 f303 	lsl.w	r3, r2, r3
 80081e4:	68ba      	ldr	r2, [r7, #8]
 80081e6:	4013      	ands	r3, r2
 80081e8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a54      	ldr	r2, [pc, #336]	; (8008340 <HAL_GPIO_DeInit+0x1b0>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d019      	beq.n	8008226 <HAL_GPIO_DeInit+0x96>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a53      	ldr	r2, [pc, #332]	; (8008344 <HAL_GPIO_DeInit+0x1b4>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d013      	beq.n	8008222 <HAL_GPIO_DeInit+0x92>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a52      	ldr	r2, [pc, #328]	; (8008348 <HAL_GPIO_DeInit+0x1b8>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d00d      	beq.n	800821e <HAL_GPIO_DeInit+0x8e>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4a51      	ldr	r2, [pc, #324]	; (800834c <HAL_GPIO_DeInit+0x1bc>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d007      	beq.n	800821a <HAL_GPIO_DeInit+0x8a>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4a50      	ldr	r2, [pc, #320]	; (8008350 <HAL_GPIO_DeInit+0x1c0>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d101      	bne.n	8008216 <HAL_GPIO_DeInit+0x86>
 8008212:	2304      	movs	r3, #4
 8008214:	e008      	b.n	8008228 <HAL_GPIO_DeInit+0x98>
 8008216:	2307      	movs	r3, #7
 8008218:	e006      	b.n	8008228 <HAL_GPIO_DeInit+0x98>
 800821a:	2303      	movs	r3, #3
 800821c:	e004      	b.n	8008228 <HAL_GPIO_DeInit+0x98>
 800821e:	2302      	movs	r3, #2
 8008220:	e002      	b.n	8008228 <HAL_GPIO_DeInit+0x98>
 8008222:	2301      	movs	r3, #1
 8008224:	e000      	b.n	8008228 <HAL_GPIO_DeInit+0x98>
 8008226:	2300      	movs	r3, #0
 8008228:	697a      	ldr	r2, [r7, #20]
 800822a:	f002 0203 	and.w	r2, r2, #3
 800822e:	0092      	lsls	r2, r2, #2
 8008230:	4093      	lsls	r3, r2
 8008232:	68ba      	ldr	r2, [r7, #8]
 8008234:	429a      	cmp	r2, r3
 8008236:	d132      	bne.n	800829e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008238:	4b46      	ldr	r3, [pc, #280]	; (8008354 <HAL_GPIO_DeInit+0x1c4>)
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	43db      	mvns	r3, r3
 8008240:	4944      	ldr	r1, [pc, #272]	; (8008354 <HAL_GPIO_DeInit+0x1c4>)
 8008242:	4013      	ands	r3, r2
 8008244:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8008246:	4b43      	ldr	r3, [pc, #268]	; (8008354 <HAL_GPIO_DeInit+0x1c4>)
 8008248:	685a      	ldr	r2, [r3, #4]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	43db      	mvns	r3, r3
 800824e:	4941      	ldr	r1, [pc, #260]	; (8008354 <HAL_GPIO_DeInit+0x1c4>)
 8008250:	4013      	ands	r3, r2
 8008252:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008254:	4b3f      	ldr	r3, [pc, #252]	; (8008354 <HAL_GPIO_DeInit+0x1c4>)
 8008256:	68da      	ldr	r2, [r3, #12]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	43db      	mvns	r3, r3
 800825c:	493d      	ldr	r1, [pc, #244]	; (8008354 <HAL_GPIO_DeInit+0x1c4>)
 800825e:	4013      	ands	r3, r2
 8008260:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8008262:	4b3c      	ldr	r3, [pc, #240]	; (8008354 <HAL_GPIO_DeInit+0x1c4>)
 8008264:	689a      	ldr	r2, [r3, #8]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	43db      	mvns	r3, r3
 800826a:	493a      	ldr	r1, [pc, #232]	; (8008354 <HAL_GPIO_DeInit+0x1c4>)
 800826c:	4013      	ands	r3, r2
 800826e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	f003 0303 	and.w	r3, r3, #3
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	220f      	movs	r2, #15
 800827a:	fa02 f303 	lsl.w	r3, r2, r3
 800827e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008280:	4a2e      	ldr	r2, [pc, #184]	; (800833c <HAL_GPIO_DeInit+0x1ac>)
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	089b      	lsrs	r3, r3, #2
 8008286:	3302      	adds	r3, #2
 8008288:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	43da      	mvns	r2, r3
 8008290:	482a      	ldr	r0, [pc, #168]	; (800833c <HAL_GPIO_DeInit+0x1ac>)
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	089b      	lsrs	r3, r3, #2
 8008296:	400a      	ands	r2, r1
 8008298:	3302      	adds	r3, #2
 800829a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	005b      	lsls	r3, r3, #1
 80082a6:	2103      	movs	r1, #3
 80082a8:	fa01 f303 	lsl.w	r3, r1, r3
 80082ac:	43db      	mvns	r3, r3
 80082ae:	401a      	ands	r2, r3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	08da      	lsrs	r2, r3, #3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	3208      	adds	r2, #8
 80082bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	f003 0307 	and.w	r3, r3, #7
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	220f      	movs	r2, #15
 80082ca:	fa02 f303 	lsl.w	r3, r2, r3
 80082ce:	43db      	mvns	r3, r3
 80082d0:	697a      	ldr	r2, [r7, #20]
 80082d2:	08d2      	lsrs	r2, r2, #3
 80082d4:	4019      	ands	r1, r3
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	3208      	adds	r2, #8
 80082da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	68da      	ldr	r2, [r3, #12]
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	005b      	lsls	r3, r3, #1
 80082e6:	2103      	movs	r1, #3
 80082e8:	fa01 f303 	lsl.w	r3, r1, r3
 80082ec:	43db      	mvns	r3, r3
 80082ee:	401a      	ands	r2, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	685a      	ldr	r2, [r3, #4]
 80082f8:	2101      	movs	r1, #1
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008300:	43db      	mvns	r3, r3
 8008302:	401a      	ands	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	689a      	ldr	r2, [r3, #8]
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	005b      	lsls	r3, r3, #1
 8008310:	2103      	movs	r1, #3
 8008312:	fa01 f303 	lsl.w	r3, r1, r3
 8008316:	43db      	mvns	r3, r3
 8008318:	401a      	ands	r2, r3
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	3301      	adds	r3, #1
 8008322:	617b      	str	r3, [r7, #20]
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	2b0f      	cmp	r3, #15
 8008328:	f67f af40 	bls.w	80081ac <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800832c:	bf00      	nop
 800832e:	bf00      	nop
 8008330:	371c      	adds	r7, #28
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	40013800 	.word	0x40013800
 8008340:	40020000 	.word	0x40020000
 8008344:	40020400 	.word	0x40020400
 8008348:	40020800 	.word	0x40020800
 800834c:	40020c00 	.word	0x40020c00
 8008350:	40021000 	.word	0x40021000
 8008354:	40013c00 	.word	0x40013c00

08008358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	460b      	mov	r3, r1
 8008362:	807b      	strh	r3, [r7, #2]
 8008364:	4613      	mov	r3, r2
 8008366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008368:	787b      	ldrb	r3, [r7, #1]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d003      	beq.n	8008376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800836e:	887a      	ldrh	r2, [r7, #2]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008374:	e003      	b.n	800837e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008376:	887b      	ldrh	r3, [r7, #2]
 8008378:	041a      	lsls	r2, r3, #16
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	619a      	str	r2, [r3, #24]
}
 800837e:	bf00      	nop
 8008380:	370c      	adds	r7, #12
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr

0800838a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800838a:	b480      	push	{r7}
 800838c:	b085      	sub	sp, #20
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
 8008392:	460b      	mov	r3, r1
 8008394:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	695b      	ldr	r3, [r3, #20]
 800839a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800839c:	887a      	ldrh	r2, [r7, #2]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	4013      	ands	r3, r2
 80083a2:	041a      	lsls	r2, r3, #16
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	43d9      	mvns	r1, r3
 80083a8:	887b      	ldrh	r3, [r7, #2]
 80083aa:	400b      	ands	r3, r1
 80083ac:	431a      	orrs	r2, r3
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	619a      	str	r2, [r3, #24]
}
 80083b2:	bf00      	nop
 80083b4:	3714      	adds	r7, #20
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
	...

080083c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d101      	bne.n	80083d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	e171      	b.n	80086b6 <HAL_I2C_Init+0x2f6>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d12c      	bne.n	8008438 <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4a77      	ldr	r2, [pc, #476]	; (80085c8 <HAL_I2C_Init+0x208>)
 80083ea:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a77      	ldr	r2, [pc, #476]	; (80085cc <HAL_I2C_Init+0x20c>)
 80083f0:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a76      	ldr	r2, [pc, #472]	; (80085d0 <HAL_I2C_Init+0x210>)
 80083f6:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4a76      	ldr	r2, [pc, #472]	; (80085d4 <HAL_I2C_Init+0x214>)
 80083fc:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4a75      	ldr	r2, [pc, #468]	; (80085d8 <HAL_I2C_Init+0x218>)
 8008402:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a75      	ldr	r2, [pc, #468]	; (80085dc <HAL_I2C_Init+0x21c>)
 8008408:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a74      	ldr	r2, [pc, #464]	; (80085e0 <HAL_I2C_Init+0x220>)
 800840e:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4a74      	ldr	r2, [pc, #464]	; (80085e4 <HAL_I2C_Init+0x224>)
 8008414:	671a      	str	r2, [r3, #112]	; 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a73      	ldr	r2, [pc, #460]	; (80085e8 <HAL_I2C_Init+0x228>)
 800841a:	675a      	str	r2, [r3, #116]	; 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a73      	ldr	r2, [pc, #460]	; (80085ec <HAL_I2C_Init+0x22c>)
 8008420:	679a      	str	r2, [r3, #120]	; 0x78

    if (hi2c->MspInitCallback == NULL)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008426:	2b00      	cmp	r3, #0
 8008428:	d102      	bne.n	8008430 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a70      	ldr	r2, [pc, #448]	; (80085f0 <HAL_I2C_Init+0x230>)
 800842e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2224      	movs	r2, #36	; 0x24
 800843c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f022 0201 	bic.w	r2, r2, #1
 800844e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800845e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800846e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008470:	f002 fc92 	bl	800ad98 <HAL_RCC_GetPCLK1Freq>
 8008474:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	4a5e      	ldr	r2, [pc, #376]	; (80085f4 <HAL_I2C_Init+0x234>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d807      	bhi.n	8008490 <HAL_I2C_Init+0xd0>
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	4a5d      	ldr	r2, [pc, #372]	; (80085f8 <HAL_I2C_Init+0x238>)
 8008484:	4293      	cmp	r3, r2
 8008486:	bf94      	ite	ls
 8008488:	2301      	movls	r3, #1
 800848a:	2300      	movhi	r3, #0
 800848c:	b2db      	uxtb	r3, r3
 800848e:	e006      	b.n	800849e <HAL_I2C_Init+0xde>
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	4a5a      	ldr	r2, [pc, #360]	; (80085fc <HAL_I2C_Init+0x23c>)
 8008494:	4293      	cmp	r3, r2
 8008496:	bf94      	ite	ls
 8008498:	2301      	movls	r3, #1
 800849a:	2300      	movhi	r3, #0
 800849c:	b2db      	uxtb	r3, r3
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d001      	beq.n	80084a6 <HAL_I2C_Init+0xe6>
  {
    return HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	e107      	b.n	80086b6 <HAL_I2C_Init+0x2f6>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	4a55      	ldr	r2, [pc, #340]	; (8008600 <HAL_I2C_Init+0x240>)
 80084aa:	fba2 2303 	umull	r2, r3, r2, r3
 80084ae:	0c9b      	lsrs	r3, r3, #18
 80084b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	430a      	orrs	r2, r1
 80084c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	6a1b      	ldr	r3, [r3, #32]
 80084cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	4a47      	ldr	r2, [pc, #284]	; (80085f4 <HAL_I2C_Init+0x234>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d802      	bhi.n	80084e0 <HAL_I2C_Init+0x120>
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	3301      	adds	r3, #1
 80084de:	e009      	b.n	80084f4 <HAL_I2C_Init+0x134>
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80084e6:	fb02 f303 	mul.w	r3, r2, r3
 80084ea:	4a46      	ldr	r2, [pc, #280]	; (8008604 <HAL_I2C_Init+0x244>)
 80084ec:	fba2 2303 	umull	r2, r3, r2, r3
 80084f0:	099b      	lsrs	r3, r3, #6
 80084f2:	3301      	adds	r3, #1
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	6812      	ldr	r2, [r2, #0]
 80084f8:	430b      	orrs	r3, r1
 80084fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	69db      	ldr	r3, [r3, #28]
 8008502:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008506:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	4939      	ldr	r1, [pc, #228]	; (80085f4 <HAL_I2C_Init+0x234>)
 8008510:	428b      	cmp	r3, r1
 8008512:	d819      	bhi.n	8008548 <HAL_I2C_Init+0x188>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	1e59      	subs	r1, r3, #1
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	005b      	lsls	r3, r3, #1
 800851e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008522:	1c59      	adds	r1, r3, #1
 8008524:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008528:	400b      	ands	r3, r1
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00a      	beq.n	8008544 <HAL_I2C_Init+0x184>
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	1e59      	subs	r1, r3, #1
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	005b      	lsls	r3, r3, #1
 8008538:	fbb1 f3f3 	udiv	r3, r1, r3
 800853c:	3301      	adds	r3, #1
 800853e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008542:	e071      	b.n	8008628 <HAL_I2C_Init+0x268>
 8008544:	2304      	movs	r3, #4
 8008546:	e06f      	b.n	8008628 <HAL_I2C_Init+0x268>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d111      	bne.n	8008574 <HAL_I2C_Init+0x1b4>
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	1e58      	subs	r0, r3, #1
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6859      	ldr	r1, [r3, #4]
 8008558:	460b      	mov	r3, r1
 800855a:	005b      	lsls	r3, r3, #1
 800855c:	440b      	add	r3, r1
 800855e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008562:	3301      	adds	r3, #1
 8008564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008568:	2b00      	cmp	r3, #0
 800856a:	bf0c      	ite	eq
 800856c:	2301      	moveq	r3, #1
 800856e:	2300      	movne	r3, #0
 8008570:	b2db      	uxtb	r3, r3
 8008572:	e012      	b.n	800859a <HAL_I2C_Init+0x1da>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	1e58      	subs	r0, r3, #1
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6859      	ldr	r1, [r3, #4]
 800857c:	460b      	mov	r3, r1
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	440b      	add	r3, r1
 8008582:	0099      	lsls	r1, r3, #2
 8008584:	440b      	add	r3, r1
 8008586:	fbb0 f3f3 	udiv	r3, r0, r3
 800858a:	3301      	adds	r3, #1
 800858c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008590:	2b00      	cmp	r3, #0
 8008592:	bf0c      	ite	eq
 8008594:	2301      	moveq	r3, #1
 8008596:	2300      	movne	r3, #0
 8008598:	b2db      	uxtb	r3, r3
 800859a:	2b00      	cmp	r3, #0
 800859c:	d001      	beq.n	80085a2 <HAL_I2C_Init+0x1e2>
 800859e:	2301      	movs	r3, #1
 80085a0:	e042      	b.n	8008628 <HAL_I2C_Init+0x268>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d12e      	bne.n	8008608 <HAL_I2C_Init+0x248>
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	1e58      	subs	r0, r3, #1
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6859      	ldr	r1, [r3, #4]
 80085b2:	460b      	mov	r3, r1
 80085b4:	005b      	lsls	r3, r3, #1
 80085b6:	440b      	add	r3, r1
 80085b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80085bc:	3301      	adds	r3, #1
 80085be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085c6:	e02f      	b.n	8008628 <HAL_I2C_Init+0x268>
 80085c8:	08003a0d 	.word	0x08003a0d
 80085cc:	08008e19 	.word	0x08008e19
 80085d0:	08008e2d 	.word	0x08008e2d
 80085d4:	08008e41 	.word	0x08008e41
 80085d8:	08008e71 	.word	0x08008e71
 80085dc:	08008e85 	.word	0x08008e85
 80085e0:	08008e99 	.word	0x08008e99
 80085e4:	08003a39 	.word	0x08003a39
 80085e8:	08008ead 	.word	0x08008ead
 80085ec:	08008e55 	.word	0x08008e55
 80085f0:	0800504d 	.word	0x0800504d
 80085f4:	000186a0 	.word	0x000186a0
 80085f8:	001e847f 	.word	0x001e847f
 80085fc:	003d08ff 	.word	0x003d08ff
 8008600:	431bde83 	.word	0x431bde83
 8008604:	10624dd3 	.word	0x10624dd3
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	1e58      	subs	r0, r3, #1
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6859      	ldr	r1, [r3, #4]
 8008610:	460b      	mov	r3, r1
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	440b      	add	r3, r1
 8008616:	0099      	lsls	r1, r3, #2
 8008618:	440b      	add	r3, r1
 800861a:	fbb0 f3f3 	udiv	r3, r0, r3
 800861e:	3301      	adds	r3, #1
 8008620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008624:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008628:	6879      	ldr	r1, [r7, #4]
 800862a:	6809      	ldr	r1, [r1, #0]
 800862c:	4313      	orrs	r3, r2
 800862e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	69da      	ldr	r2, [r3, #28]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a1b      	ldr	r3, [r3, #32]
 8008642:	431a      	orrs	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	430a      	orrs	r2, r1
 800864a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008656:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	6911      	ldr	r1, [r2, #16]
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	68d2      	ldr	r2, [r2, #12]
 8008662:	4311      	orrs	r1, r2
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	6812      	ldr	r2, [r2, #0]
 8008668:	430b      	orrs	r3, r1
 800866a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	695a      	ldr	r2, [r3, #20]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	431a      	orrs	r2, r3
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	430a      	orrs	r2, r1
 8008686:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f042 0201 	orr.w	r2, r2, #1
 8008696:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2220      	movs	r2, #32
 80086a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop

080086c0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d101      	bne.n	80086d2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	e02c      	b.n	800872c <HAL_I2C_DeInit+0x6c>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2224      	movs	r2, #36	; 0x24
 80086d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f022 0201 	bic.w	r2, r2, #1
 80086e8:	601a      	str	r2, [r3, #0]

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  if (hi2c->MspDeInitCallback == NULL)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d103      	bne.n	80086fc <HAL_I2C_DeInit+0x3c>
  {
    hi2c->MspDeInitCallback = HAL_I2C_MspDeInit; /* Legacy weak MspDeInit  */
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a0f      	ldr	r2, [pc, #60]	; (8008734 <HAL_I2C_DeInit+0x74>)
 80086f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	4798      	blx	r3
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3708      	adds	r7, #8
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	08005185 	.word	0x08005185

08008738 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8008738:	b480      	push	{r7}
 800873a:	b087      	sub	sp, #28
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	607a      	str	r2, [r7, #4]
 8008742:	461a      	mov	r2, r3
 8008744:	460b      	mov	r3, r1
 8008746:	817b      	strh	r3, [r7, #10]
 8008748:	4613      	mov	r3, r2
 800874a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800874c:	2300      	movs	r3, #0
 800874e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008756:	b2db      	uxtb	r3, r3
 8008758:	2b20      	cmp	r3, #32
 800875a:	f040 8085 	bne.w	8008868 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800875e:	4b46      	ldr	r3, [pc, #280]	; (8008878 <HAL_I2C_Master_Transmit_IT+0x140>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	08db      	lsrs	r3, r3, #3
 8008764:	4a45      	ldr	r2, [pc, #276]	; (800887c <HAL_I2C_Master_Transmit_IT+0x144>)
 8008766:	fba2 2303 	umull	r2, r3, r2, r3
 800876a:	0a1a      	lsrs	r2, r3, #8
 800876c:	4613      	mov	r3, r2
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	4413      	add	r3, r2
 8008772:	009a      	lsls	r2, r3, #2
 8008774:	4413      	add	r3, r2
 8008776:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	3b01      	subs	r3, #1
 800877c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d116      	bne.n	80087b2 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2200      	movs	r2, #0
 8008788:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2220      	movs	r2, #32
 800878e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2200      	movs	r2, #0
 8008796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879e:	f043 0220 	orr.w	r2, r3, #32
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	e05b      	b.n	800886a <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	699b      	ldr	r3, [r3, #24]
 80087b8:	f003 0302 	and.w	r3, r3, #2
 80087bc:	2b02      	cmp	r3, #2
 80087be:	d0db      	beq.n	8008778 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d101      	bne.n	80087ce <HAL_I2C_Master_Transmit_IT+0x96>
 80087ca:	2302      	movs	r3, #2
 80087cc:	e04d      	b.n	800886a <HAL_I2C_Master_Transmit_IT+0x132>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2201      	movs	r2, #1
 80087d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f003 0301 	and.w	r3, r3, #1
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d007      	beq.n	80087f4 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	681a      	ldr	r2, [r3, #0]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f042 0201 	orr.w	r2, r2, #1
 80087f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008802:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2221      	movs	r2, #33	; 0x21
 8008808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2210      	movs	r2, #16
 8008810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2200      	movs	r2, #0
 8008818:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	893a      	ldrh	r2, [r7, #8]
 8008824:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800882a:	b29a      	uxth	r2, r3
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	4a13      	ldr	r2, [pc, #76]	; (8008880 <HAL_I2C_Master_Transmit_IT+0x148>)
 8008834:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8008836:	897a      	ldrh	r2, [r7, #10]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2200      	movs	r2, #0
 8008840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	685a      	ldr	r2, [r3, #4]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8008852:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008862:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8008864:	2300      	movs	r3, #0
 8008866:	e000      	b.n	800886a <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8008868:	2302      	movs	r3, #2
  }
}
 800886a:	4618      	mov	r0, r3
 800886c:	371c      	adds	r7, #28
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop
 8008878:	2000004c 	.word	0x2000004c
 800887c:	14f8b589 	.word	0x14f8b589
 8008880:	ffff0000 	.word	0xffff0000

08008884 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8008884:	b480      	push	{r7}
 8008886:	b087      	sub	sp, #28
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	4608      	mov	r0, r1
 800888e:	4611      	mov	r1, r2
 8008890:	461a      	mov	r2, r3
 8008892:	4603      	mov	r3, r0
 8008894:	817b      	strh	r3, [r7, #10]
 8008896:	460b      	mov	r3, r1
 8008898:	813b      	strh	r3, [r7, #8]
 800889a:	4613      	mov	r3, r2
 800889c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800889e:	2300      	movs	r3, #0
 80088a0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	2b20      	cmp	r3, #32
 80088ac:	f040 808e 	bne.w	80089cc <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80088b0:	4b4a      	ldr	r3, [pc, #296]	; (80089dc <HAL_I2C_Mem_Write_IT+0x158>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	08db      	lsrs	r3, r3, #3
 80088b6:	4a4a      	ldr	r2, [pc, #296]	; (80089e0 <HAL_I2C_Mem_Write_IT+0x15c>)
 80088b8:	fba2 2303 	umull	r2, r3, r2, r3
 80088bc:	0a1a      	lsrs	r2, r3, #8
 80088be:	4613      	mov	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4413      	add	r3, r2
 80088c4:	009a      	lsls	r2, r3, #2
 80088c6:	4413      	add	r3, r2
 80088c8:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	3b01      	subs	r3, #1
 80088ce:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d116      	bne.n	8008904 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2220      	movs	r2, #32
 80088e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f0:	f043 0220 	orr.w	r2, r3, #32
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	e064      	b.n	80089ce <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	f003 0302 	and.w	r3, r3, #2
 800890e:	2b02      	cmp	r3, #2
 8008910:	d0db      	beq.n	80088ca <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008918:	2b01      	cmp	r3, #1
 800891a:	d101      	bne.n	8008920 <HAL_I2C_Mem_Write_IT+0x9c>
 800891c:	2302      	movs	r3, #2
 800891e:	e056      	b.n	80089ce <HAL_I2C_Mem_Write_IT+0x14a>
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2201      	movs	r2, #1
 8008924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f003 0301 	and.w	r3, r3, #1
 8008932:	2b01      	cmp	r3, #1
 8008934:	d007      	beq.n	8008946 <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f042 0201 	orr.w	r2, r2, #1
 8008944:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008954:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2221      	movs	r2, #33	; 0x21
 800895a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2240      	movs	r2, #64	; 0x40
 8008962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6a3a      	ldr	r2, [r7, #32]
 8008970:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008976:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800897c:	b29a      	uxth	r2, r3
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	4a17      	ldr	r2, [pc, #92]	; (80089e4 <HAL_I2C_Mem_Write_IT+0x160>)
 8008986:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8008988:	897a      	ldrh	r2, [r7, #10]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800898e:	893a      	ldrh	r2, [r7, #8]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8008994:	88fa      	ldrh	r2, [r7, #6]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2200      	movs	r2, #0
 800899e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80089ae:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	685a      	ldr	r2, [r3, #4]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80089c6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80089c8:	2300      	movs	r3, #0
 80089ca:	e000      	b.n	80089ce <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80089cc:	2302      	movs	r3, #2
  }
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	371c      	adds	r7, #28
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	2000004c 	.word	0x2000004c
 80089e0:	14f8b589 	.word	0x14f8b589
 80089e4:	ffff0000 	.word	0xffff0000

080089e8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b088      	sub	sp, #32
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80089f0:	2300      	movs	r3, #0
 80089f2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a00:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a08:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a10:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008a12:	7bfb      	ldrb	r3, [r7, #15]
 8008a14:	2b10      	cmp	r3, #16
 8008a16:	d003      	beq.n	8008a20 <HAL_I2C_EV_IRQHandler+0x38>
 8008a18:	7bfb      	ldrb	r3, [r7, #15]
 8008a1a:	2b40      	cmp	r3, #64	; 0x40
 8008a1c:	f040 80c1 	bne.w	8008ba2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	699b      	ldr	r3, [r3, #24]
 8008a26:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	695b      	ldr	r3, [r3, #20]
 8008a2e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8008a30:	69fb      	ldr	r3, [r7, #28]
 8008a32:	f003 0301 	and.w	r3, r3, #1
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d10d      	bne.n	8008a56 <HAL_I2C_EV_IRQHandler+0x6e>
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008a40:	d003      	beq.n	8008a4a <HAL_I2C_EV_IRQHandler+0x62>
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008a48:	d101      	bne.n	8008a4e <HAL_I2C_EV_IRQHandler+0x66>
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e000      	b.n	8008a50 <HAL_I2C_EV_IRQHandler+0x68>
 8008a4e:	2300      	movs	r3, #0
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	f000 8132 	beq.w	8008cba <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	f003 0301 	and.w	r3, r3, #1
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00c      	beq.n	8008a7a <HAL_I2C_EV_IRQHandler+0x92>
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	0a5b      	lsrs	r3, r3, #9
 8008a64:	f003 0301 	and.w	r3, r3, #1
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d006      	beq.n	8008a7a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f001 fc9b 	bl	800a3a8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 fd95 	bl	80095a2 <I2C_Master_SB>
 8008a78:	e092      	b.n	8008ba0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	08db      	lsrs	r3, r3, #3
 8008a7e:	f003 0301 	and.w	r3, r3, #1
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d009      	beq.n	8008a9a <HAL_I2C_EV_IRQHandler+0xb2>
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	0a5b      	lsrs	r3, r3, #9
 8008a8a:	f003 0301 	and.w	r3, r3, #1
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d003      	beq.n	8008a9a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 fe0b 	bl	80096ae <I2C_Master_ADD10>
 8008a98:	e082      	b.n	8008ba0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	085b      	lsrs	r3, r3, #1
 8008a9e:	f003 0301 	and.w	r3, r3, #1
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d009      	beq.n	8008aba <HAL_I2C_EV_IRQHandler+0xd2>
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	0a5b      	lsrs	r3, r3, #9
 8008aaa:	f003 0301 	and.w	r3, r3, #1
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d003      	beq.n	8008aba <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 fe25 	bl	8009702 <I2C_Master_ADDR>
 8008ab8:	e072      	b.n	8008ba0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	089b      	lsrs	r3, r3, #2
 8008abe:	f003 0301 	and.w	r3, r3, #1
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d03b      	beq.n	8008b3e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ad0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ad4:	f000 80f3 	beq.w	8008cbe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	09db      	lsrs	r3, r3, #7
 8008adc:	f003 0301 	and.w	r3, r3, #1
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00f      	beq.n	8008b04 <HAL_I2C_EV_IRQHandler+0x11c>
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	0a9b      	lsrs	r3, r3, #10
 8008ae8:	f003 0301 	and.w	r3, r3, #1
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d009      	beq.n	8008b04 <HAL_I2C_EV_IRQHandler+0x11c>
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	089b      	lsrs	r3, r3, #2
 8008af4:	f003 0301 	and.w	r3, r3, #1
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d103      	bne.n	8008b04 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f9f9 	bl	8008ef4 <I2C_MasterTransmit_TXE>
 8008b02:	e04d      	b.n	8008ba0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	089b      	lsrs	r3, r3, #2
 8008b08:	f003 0301 	and.w	r3, r3, #1
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	f000 80d6 	beq.w	8008cbe <HAL_I2C_EV_IRQHandler+0x2d6>
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	0a5b      	lsrs	r3, r3, #9
 8008b16:	f003 0301 	and.w	r3, r3, #1
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	f000 80cf 	beq.w	8008cbe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008b20:	7bbb      	ldrb	r3, [r7, #14]
 8008b22:	2b21      	cmp	r3, #33	; 0x21
 8008b24:	d103      	bne.n	8008b2e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 fa83 	bl	8009032 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008b2c:	e0c7      	b.n	8008cbe <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8008b2e:	7bfb      	ldrb	r3, [r7, #15]
 8008b30:	2b40      	cmp	r3, #64	; 0x40
 8008b32:	f040 80c4 	bne.w	8008cbe <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 faf4 	bl	8009124 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008b3c:	e0bf      	b.n	8008cbe <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b4c:	f000 80b7 	beq.w	8008cbe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	099b      	lsrs	r3, r3, #6
 8008b54:	f003 0301 	and.w	r3, r3, #1
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d00f      	beq.n	8008b7c <HAL_I2C_EV_IRQHandler+0x194>
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	0a9b      	lsrs	r3, r3, #10
 8008b60:	f003 0301 	and.w	r3, r3, #1
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d009      	beq.n	8008b7c <HAL_I2C_EV_IRQHandler+0x194>
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	089b      	lsrs	r3, r3, #2
 8008b6c:	f003 0301 	and.w	r3, r3, #1
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d103      	bne.n	8008b7c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 fb6a 	bl	800924e <I2C_MasterReceive_RXNE>
 8008b7a:	e011      	b.n	8008ba0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	089b      	lsrs	r3, r3, #2
 8008b80:	f003 0301 	and.w	r3, r3, #1
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f000 809a 	beq.w	8008cbe <HAL_I2C_EV_IRQHandler+0x2d6>
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	0a5b      	lsrs	r3, r3, #9
 8008b8e:	f003 0301 	and.w	r3, r3, #1
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	f000 8093 	beq.w	8008cbe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 fc16 	bl	80093ca <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008b9e:	e08e      	b.n	8008cbe <HAL_I2C_EV_IRQHandler+0x2d6>
 8008ba0:	e08d      	b.n	8008cbe <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d004      	beq.n	8008bb4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	695b      	ldr	r3, [r3, #20]
 8008bb0:	61fb      	str	r3, [r7, #28]
 8008bb2:	e007      	b.n	8008bc4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	699b      	ldr	r3, [r3, #24]
 8008bba:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	695b      	ldr	r3, [r3, #20]
 8008bc2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	085b      	lsrs	r3, r3, #1
 8008bc8:	f003 0301 	and.w	r3, r3, #1
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d012      	beq.n	8008bf6 <HAL_I2C_EV_IRQHandler+0x20e>
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	0a5b      	lsrs	r3, r3, #9
 8008bd4:	f003 0301 	and.w	r3, r3, #1
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00c      	beq.n	8008bf6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d003      	beq.n	8008bec <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	699b      	ldr	r3, [r3, #24]
 8008bea:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8008bec:	69b9      	ldr	r1, [r7, #24]
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 ffd8 	bl	8009ba4 <I2C_Slave_ADDR>
 8008bf4:	e066      	b.n	8008cc4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008bf6:	69fb      	ldr	r3, [r7, #28]
 8008bf8:	091b      	lsrs	r3, r3, #4
 8008bfa:	f003 0301 	and.w	r3, r3, #1
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d009      	beq.n	8008c16 <HAL_I2C_EV_IRQHandler+0x22e>
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	0a5b      	lsrs	r3, r3, #9
 8008c06:	f003 0301 	and.w	r3, r3, #1
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d003      	beq.n	8008c16 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f001 f812 	bl	8009c38 <I2C_Slave_STOPF>
 8008c14:	e056      	b.n	8008cc4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008c16:	7bbb      	ldrb	r3, [r7, #14]
 8008c18:	2b21      	cmp	r3, #33	; 0x21
 8008c1a:	d002      	beq.n	8008c22 <HAL_I2C_EV_IRQHandler+0x23a>
 8008c1c:	7bbb      	ldrb	r3, [r7, #14]
 8008c1e:	2b29      	cmp	r3, #41	; 0x29
 8008c20:	d125      	bne.n	8008c6e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	09db      	lsrs	r3, r3, #7
 8008c26:	f003 0301 	and.w	r3, r3, #1
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d00f      	beq.n	8008c4e <HAL_I2C_EV_IRQHandler+0x266>
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	0a9b      	lsrs	r3, r3, #10
 8008c32:	f003 0301 	and.w	r3, r3, #1
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d009      	beq.n	8008c4e <HAL_I2C_EV_IRQHandler+0x266>
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	089b      	lsrs	r3, r3, #2
 8008c3e:	f003 0301 	and.w	r3, r3, #1
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d103      	bne.n	8008c4e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 feec 	bl	8009a24 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008c4c:	e039      	b.n	8008cc2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	089b      	lsrs	r3, r3, #2
 8008c52:	f003 0301 	and.w	r3, r3, #1
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d033      	beq.n	8008cc2 <HAL_I2C_EV_IRQHandler+0x2da>
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	0a5b      	lsrs	r3, r3, #9
 8008c5e:	f003 0301 	and.w	r3, r3, #1
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d02d      	beq.n	8008cc2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 ff1a 	bl	8009aa0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008c6c:	e029      	b.n	8008cc2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	099b      	lsrs	r3, r3, #6
 8008c72:	f003 0301 	and.w	r3, r3, #1
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d00f      	beq.n	8008c9a <HAL_I2C_EV_IRQHandler+0x2b2>
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	0a9b      	lsrs	r3, r3, #10
 8008c7e:	f003 0301 	and.w	r3, r3, #1
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d009      	beq.n	8008c9a <HAL_I2C_EV_IRQHandler+0x2b2>
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	089b      	lsrs	r3, r3, #2
 8008c8a:	f003 0301 	and.w	r3, r3, #1
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d103      	bne.n	8008c9a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 ff25 	bl	8009ae2 <I2C_SlaveReceive_RXNE>
 8008c98:	e014      	b.n	8008cc4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	089b      	lsrs	r3, r3, #2
 8008c9e:	f003 0301 	and.w	r3, r3, #1
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d00e      	beq.n	8008cc4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	0a5b      	lsrs	r3, r3, #9
 8008caa:	f003 0301 	and.w	r3, r3, #1
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d008      	beq.n	8008cc4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 ff54 	bl	8009b60 <I2C_SlaveReceive_BTF>
 8008cb8:	e004      	b.n	8008cc4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8008cba:	bf00      	nop
 8008cbc:	e002      	b.n	8008cc4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008cbe:	bf00      	nop
 8008cc0:	e000      	b.n	8008cc4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008cc2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8008cc4:	3720      	adds	r7, #32
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b08a      	sub	sp, #40	; 0x28
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	695b      	ldr	r3, [r3, #20]
 8008cd8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008cec:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008cee:	6a3b      	ldr	r3, [r7, #32]
 8008cf0:	0a1b      	lsrs	r3, r3, #8
 8008cf2:	f003 0301 	and.w	r3, r3, #1
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00e      	beq.n	8008d18 <HAL_I2C_ER_IRQHandler+0x4e>
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	0a1b      	lsrs	r3, r3, #8
 8008cfe:	f003 0301 	and.w	r3, r3, #1
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d008      	beq.n	8008d18 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8008d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d08:	f043 0301 	orr.w	r3, r3, #1
 8008d0c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008d16:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008d18:	6a3b      	ldr	r3, [r7, #32]
 8008d1a:	0a5b      	lsrs	r3, r3, #9
 8008d1c:	f003 0301 	and.w	r3, r3, #1
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00e      	beq.n	8008d42 <HAL_I2C_ER_IRQHandler+0x78>
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	0a1b      	lsrs	r3, r3, #8
 8008d28:	f003 0301 	and.w	r3, r3, #1
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d008      	beq.n	8008d42 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8008d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d32:	f043 0302 	orr.w	r3, r3, #2
 8008d36:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8008d40:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008d42:	6a3b      	ldr	r3, [r7, #32]
 8008d44:	0a9b      	lsrs	r3, r3, #10
 8008d46:	f003 0301 	and.w	r3, r3, #1
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d03f      	beq.n	8008dce <HAL_I2C_ER_IRQHandler+0x104>
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	0a1b      	lsrs	r3, r3, #8
 8008d52:	f003 0301 	and.w	r3, r3, #1
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d039      	beq.n	8008dce <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8008d5a:	7efb      	ldrb	r3, [r7, #27]
 8008d5c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d6c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d72:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8008d74:	7ebb      	ldrb	r3, [r7, #26]
 8008d76:	2b20      	cmp	r3, #32
 8008d78:	d112      	bne.n	8008da0 <HAL_I2C_ER_IRQHandler+0xd6>
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d10f      	bne.n	8008da0 <HAL_I2C_ER_IRQHandler+0xd6>
 8008d80:	7cfb      	ldrb	r3, [r7, #19]
 8008d82:	2b21      	cmp	r3, #33	; 0x21
 8008d84:	d008      	beq.n	8008d98 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8008d86:	7cfb      	ldrb	r3, [r7, #19]
 8008d88:	2b29      	cmp	r3, #41	; 0x29
 8008d8a:	d005      	beq.n	8008d98 <HAL_I2C_ER_IRQHandler+0xce>
 8008d8c:	7cfb      	ldrb	r3, [r7, #19]
 8008d8e:	2b28      	cmp	r3, #40	; 0x28
 8008d90:	d106      	bne.n	8008da0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2b21      	cmp	r3, #33	; 0x21
 8008d96:	d103      	bne.n	8008da0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f001 f881 	bl	8009ea0 <I2C_Slave_AF>
 8008d9e:	e016      	b.n	8008dce <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008da8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8008daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dac:	f043 0304 	orr.w	r3, r3, #4
 8008db0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008db2:	7efb      	ldrb	r3, [r7, #27]
 8008db4:	2b10      	cmp	r3, #16
 8008db6:	d002      	beq.n	8008dbe <HAL_I2C_ER_IRQHandler+0xf4>
 8008db8:	7efb      	ldrb	r3, [r7, #27]
 8008dba:	2b40      	cmp	r3, #64	; 0x40
 8008dbc:	d107      	bne.n	8008dce <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008dcc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008dce:	6a3b      	ldr	r3, [r7, #32]
 8008dd0:	0adb      	lsrs	r3, r3, #11
 8008dd2:	f003 0301 	and.w	r3, r3, #1
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00e      	beq.n	8008df8 <HAL_I2C_ER_IRQHandler+0x12e>
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	0a1b      	lsrs	r3, r3, #8
 8008dde:	f003 0301 	and.w	r3, r3, #1
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d008      	beq.n	8008df8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8008de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de8:	f043 0308 	orr.w	r3, r3, #8
 8008dec:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8008df6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8008df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d008      	beq.n	8008e10 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e04:	431a      	orrs	r2, r3
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f001 f8ba 	bl	8009f84 <I2C_ITError>
  }
}
 8008e10:	bf00      	nop
 8008e12:	3728      	adds	r7, #40	; 0x28
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008e20:	bf00      	nop
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008e34:	bf00      	nop
 8008e36:	370c      	adds	r7, #12
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008e48:	bf00      	nop
 8008e4a:	370c      	adds	r7, #12
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr

08008e54 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	70fb      	strb	r3, [r7, #3]
 8008e60:	4613      	mov	r3, r2
 8008e62:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008e64:	bf00      	nop
 8008e66:	370c      	adds	r7, #12
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8008e78:	bf00      	nop
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008e8c:	bf00      	nop
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008eb4:	bf00      	nop
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ece:	b2db      	uxtb	r3, r3
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f02:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f0a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f10:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d153      	bne.n	8008fc2 <I2C_MasterTransmit_TXE+0xce>
 8008f1a:	7bfb      	ldrb	r3, [r7, #15]
 8008f1c:	2b21      	cmp	r3, #33	; 0x21
 8008f1e:	d150      	bne.n	8008fc2 <I2C_MasterTransmit_TXE+0xce>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	2b08      	cmp	r3, #8
 8008f24:	d01e      	beq.n	8008f64 <I2C_MasterTransmit_TXE+0x70>
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	2b20      	cmp	r3, #32
 8008f2a:	d01b      	beq.n	8008f64 <I2C_MasterTransmit_TXE+0x70>
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008f32:	d017      	beq.n	8008f64 <I2C_MasterTransmit_TXE+0x70>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	685a      	ldr	r2, [r3, #4]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008f42:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2211      	movs	r2, #17
 8008f48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2220      	movs	r2, #32
 8008f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008f62:	e062      	b.n	800902a <I2C_MasterTransmit_TXE+0x136>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	685a      	ldr	r2, [r3, #4]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008f72:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f82:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2220      	movs	r2, #32
 8008f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	2b40      	cmp	r3, #64	; 0x40
 8008f9c:	d108      	bne.n	8008fb0 <I2C_MasterTransmit_TXE+0xbc>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008fae:	e03c      	b.n	800902a <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MemTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008fc0:	e033      	b.n	800902a <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MasterTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8008fc2:	7bfb      	ldrb	r3, [r7, #15]
 8008fc4:	2b21      	cmp	r3, #33	; 0x21
 8008fc6:	d005      	beq.n	8008fd4 <I2C_MasterTransmit_TXE+0xe0>
 8008fc8:	7bbb      	ldrb	r3, [r7, #14]
 8008fca:	2b40      	cmp	r3, #64	; 0x40
 8008fcc:	d12d      	bne.n	800902a <I2C_MasterTransmit_TXE+0x136>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8008fce:	7bfb      	ldrb	r3, [r7, #15]
 8008fd0:	2b22      	cmp	r3, #34	; 0x22
 8008fd2:	d12a      	bne.n	800902a <I2C_MasterTransmit_TXE+0x136>
  {
    if (hi2c->XferCount == 0U)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d108      	bne.n	8008ff0 <I2C_MasterTransmit_TXE+0xfc>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	685a      	ldr	r2, [r3, #4]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fec:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008fee:	e01c      	b.n	800902a <I2C_MasterTransmit_TXE+0x136>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	2b40      	cmp	r3, #64	; 0x40
 8008ffa:	d103      	bne.n	8009004 <I2C_MasterTransmit_TXE+0x110>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 f891 	bl	8009124 <I2C_MemoryTransmit_TXE_BTF>
}
 8009002:	e012      	b.n	800902a <I2C_MasterTransmit_TXE+0x136>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009008:	781a      	ldrb	r2, [r3, #0]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009014:	1c5a      	adds	r2, r3, #1
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800901e:	b29b      	uxth	r3, r3
 8009020:	3b01      	subs	r3, #1
 8009022:	b29a      	uxth	r2, r3
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8009028:	e7ff      	b.n	800902a <I2C_MasterTransmit_TXE+0x136>
 800902a:	bf00      	nop
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8009032:	b580      	push	{r7, lr}
 8009034:	b084      	sub	sp, #16
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800903e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009046:	b2db      	uxtb	r3, r3
 8009048:	2b21      	cmp	r3, #33	; 0x21
 800904a:	d167      	bne.n	800911c <I2C_MasterTransmit_BTF+0xea>
  {
    if (hi2c->XferCount != 0U)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009050:	b29b      	uxth	r3, r3
 8009052:	2b00      	cmp	r3, #0
 8009054:	d012      	beq.n	800907c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905a:	781a      	ldrb	r2, [r3, #0]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009066:	1c5a      	adds	r2, r3, #1
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009070:	b29b      	uxth	r3, r3
 8009072:	3b01      	subs	r3, #1
 8009074:	b29a      	uxth	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800907a:	e04f      	b.n	800911c <I2C_MasterTransmit_BTF+0xea>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2b08      	cmp	r3, #8
 8009080:	d01e      	beq.n	80090c0 <I2C_MasterTransmit_BTF+0x8e>
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2b20      	cmp	r3, #32
 8009086:	d01b      	beq.n	80090c0 <I2C_MasterTransmit_BTF+0x8e>
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800908e:	d017      	beq.n	80090c0 <I2C_MasterTransmit_BTF+0x8e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	685a      	ldr	r2, [r3, #4]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800909e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2211      	movs	r2, #17
 80090a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2220      	movs	r2, #32
 80090b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->MasterTxCpltCallback(hi2c);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	4798      	blx	r3
}
 80090be:	e02d      	b.n	800911c <I2C_MasterTransmit_BTF+0xea>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	685a      	ldr	r2, [r3, #4]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80090ce:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090de:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2220      	movs	r2, #32
 80090ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	2b40      	cmp	r3, #64	; 0x40
 80090f8:	d108      	bne.n	800910c <I2C_MasterTransmit_BTF+0xda>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MemTxCpltCallback(hi2c);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	4798      	blx	r3
}
 800910a:	e007      	b.n	800911c <I2C_MasterTransmit_BTF+0xea>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MasterTxCpltCallback(hi2c);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	4798      	blx	r3
}
 800911c:	bf00      	nop
 800911e:	3710      	adds	r7, #16
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009132:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009138:	2b00      	cmp	r3, #0
 800913a:	d11d      	bne.n	8009178 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009140:	2b01      	cmp	r3, #1
 8009142:	d10b      	bne.n	800915c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009148:	b2da      	uxtb	r2, r3
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009154:	1c9a      	adds	r2, r3, #2
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800915a:	e074      	b.n	8009246 <I2C_MemoryTransmit_TXE_BTF+0x122>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009160:	b29b      	uxth	r3, r3
 8009162:	121b      	asrs	r3, r3, #8
 8009164:	b2da      	uxtb	r2, r3
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009170:	1c5a      	adds	r2, r3, #1
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009176:	e066      	b.n	8009246 <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 1U)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800917c:	2b01      	cmp	r3, #1
 800917e:	d10b      	bne.n	8009198 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009184:	b2da      	uxtb	r2, r3
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009190:	1c5a      	adds	r2, r3, #1
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009196:	e056      	b.n	8009246 <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 2U)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800919c:	2b02      	cmp	r3, #2
 800919e:	d152      	bne.n	8009246 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80091a0:	7bfb      	ldrb	r3, [r7, #15]
 80091a2:	2b22      	cmp	r3, #34	; 0x22
 80091a4:	d10d      	bne.n	80091c2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80091b4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091ba:	1c5a      	adds	r2, r3, #1
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	651a      	str	r2, [r3, #80]	; 0x50
}
 80091c0:	e041      	b.n	8009246 <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d015      	beq.n	80091f8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80091cc:	7bfb      	ldrb	r3, [r7, #15]
 80091ce:	2b21      	cmp	r3, #33	; 0x21
 80091d0:	d112      	bne.n	80091f8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d6:	781a      	ldrb	r2, [r3, #0]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e2:	1c5a      	adds	r2, r3, #1
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	3b01      	subs	r3, #1
 80091f0:	b29a      	uxth	r2, r3
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80091f6:	e026      	b.n	8009246 <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d121      	bne.n	8009246 <I2C_MemoryTransmit_TXE_BTF+0x122>
 8009202:	7bfb      	ldrb	r3, [r7, #15]
 8009204:	2b21      	cmp	r3, #33	; 0x21
 8009206:	d11e      	bne.n	8009246 <I2C_MemoryTransmit_TXE_BTF+0x122>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	685a      	ldr	r2, [r3, #4]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009216:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009226:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2220      	movs	r2, #32
 8009232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->MemTxCpltCallback(hi2c);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	4798      	blx	r3
}
 8009246:	bf00      	nop
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b084      	sub	sp, #16
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800925c:	b2db      	uxtb	r3, r3
 800925e:	2b22      	cmp	r3, #34	; 0x22
 8009260:	f040 80af 	bne.w	80093c2 <I2C_MasterReceive_RXNE+0x174>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009268:	b29b      	uxth	r3, r3
 800926a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2b03      	cmp	r3, #3
 8009270:	d921      	bls.n	80092b6 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	691a      	ldr	r2, [r3, #16]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927c:	b2d2      	uxtb	r2, r2
 800927e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009284:	1c5a      	adds	r2, r3, #1
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800928e:	b29b      	uxth	r3, r3
 8009290:	3b01      	subs	r3, #1
 8009292:	b29a      	uxth	r2, r3
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800929c:	b29b      	uxth	r3, r3
 800929e:	2b03      	cmp	r3, #3
 80092a0:	f040 808f 	bne.w	80093c2 <I2C_MasterReceive_RXNE+0x174>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	685a      	ldr	r2, [r3, #4]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092b2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80092b4:	e085      	b.n	80093c2 <I2C_MasterReceive_RXNE+0x174>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	d078      	beq.n	80093b0 <I2C_MasterReceive_RXNE+0x162>
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d002      	beq.n	80092ca <I2C_MasterReceive_RXNE+0x7c>
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d172      	bne.n	80093b0 <I2C_MasterReceive_RXNE+0x162>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f001 f83a 	bl	800a344 <I2C_WaitOnSTOPRequestThroughIT>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d144      	bne.n	8009360 <I2C_MasterReceive_RXNE+0x112>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092e4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	685a      	ldr	r2, [r3, #4]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80092f4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	691a      	ldr	r2, [r3, #16]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009300:	b2d2      	uxtb	r2, r2
 8009302:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009308:	1c5a      	adds	r2, r3, #1
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009312:	b29b      	uxth	r3, r3
 8009314:	3b01      	subs	r3, #1
 8009316:	b29a      	uxth	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2220      	movs	r2, #32
 8009320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800932a:	b2db      	uxtb	r3, r3
 800932c:	2b40      	cmp	r3, #64	; 0x40
 800932e:	d10b      	bne.n	8009348 <I2C_MasterReceive_RXNE+0xfa>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MemRxCpltCallback(hi2c);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8009346:	e03c      	b.n	80093c2 <I2C_MasterReceive_RXNE+0x174>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2212      	movs	r2, #18
 8009354:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MasterRxCpltCallback(hi2c);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800935e:	e030      	b.n	80093c2 <I2C_MasterReceive_RXNE+0x174>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	685a      	ldr	r2, [r3, #4]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800936e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	691a      	ldr	r2, [r3, #16]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937a:	b2d2      	uxtb	r2, r2
 800937c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009382:	1c5a      	adds	r2, r3, #1
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800938c:	b29b      	uxth	r3, r3
 800938e:	3b01      	subs	r3, #1
 8009390:	b29a      	uxth	r2, r3
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2220      	movs	r2, #32
 800939a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCallback(hi2c);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80093ae:	e008      	b.n	80093c2 <I2C_MasterReceive_RXNE+0x174>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	685a      	ldr	r2, [r3, #4]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093be:	605a      	str	r2, [r3, #4]
}
 80093c0:	e7ff      	b.n	80093c2 <I2C_MasterReceive_RXNE+0x174>
 80093c2:	bf00      	nop
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}

080093ca <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80093ca:	b580      	push	{r7, lr}
 80093cc:	b084      	sub	sp, #16
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093dc:	b29b      	uxth	r3, r3
 80093de:	2b04      	cmp	r3, #4
 80093e0:	d11b      	bne.n	800941a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	685a      	ldr	r2, [r3, #4]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093f0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	691a      	ldr	r2, [r3, #16]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fc:	b2d2      	uxtb	r2, r2
 80093fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009404:	1c5a      	adds	r2, r3, #1
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800940e:	b29b      	uxth	r3, r3
 8009410:	3b01      	subs	r3, #1
 8009412:	b29a      	uxth	r2, r3
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8009418:	e0bf      	b.n	800959a <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 3U)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800941e:	b29b      	uxth	r3, r3
 8009420:	2b03      	cmp	r3, #3
 8009422:	d129      	bne.n	8009478 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	685a      	ldr	r2, [r3, #4]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009432:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2b04      	cmp	r3, #4
 8009438:	d00a      	beq.n	8009450 <I2C_MasterReceive_BTF+0x86>
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2b02      	cmp	r3, #2
 800943e:	d007      	beq.n	8009450 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800944e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	691a      	ldr	r2, [r3, #16]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945a:	b2d2      	uxtb	r2, r2
 800945c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009462:	1c5a      	adds	r2, r3, #1
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800946c:	b29b      	uxth	r3, r3
 800946e:	3b01      	subs	r3, #1
 8009470:	b29a      	uxth	r2, r3
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8009476:	e090      	b.n	800959a <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 2U)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800947c:	b29b      	uxth	r3, r3
 800947e:	2b02      	cmp	r3, #2
 8009480:	d178      	bne.n	8009574 <I2C_MasterReceive_BTF+0x1aa>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2b01      	cmp	r3, #1
 8009486:	d002      	beq.n	800948e <I2C_MasterReceive_BTF+0xc4>
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2b10      	cmp	r3, #16
 800948c:	d108      	bne.n	80094a0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800949c:	601a      	str	r2, [r3, #0]
 800949e:	e019      	b.n	80094d4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2b04      	cmp	r3, #4
 80094a4:	d002      	beq.n	80094ac <I2C_MasterReceive_BTF+0xe2>
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2b02      	cmp	r3, #2
 80094aa:	d108      	bne.n	80094be <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80094ba:	601a      	str	r2, [r3, #0]
 80094bc:	e00a      	b.n	80094d4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2b10      	cmp	r3, #16
 80094c2:	d007      	beq.n	80094d4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094d2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	691a      	ldr	r2, [r3, #16]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094de:	b2d2      	uxtb	r2, r2
 80094e0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e6:	1c5a      	adds	r2, r3, #1
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	3b01      	subs	r3, #1
 80094f4:	b29a      	uxth	r2, r3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	691a      	ldr	r2, [r3, #16]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009504:	b2d2      	uxtb	r2, r2
 8009506:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950c:	1c5a      	adds	r2, r3, #1
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009516:	b29b      	uxth	r3, r3
 8009518:	3b01      	subs	r3, #1
 800951a:	b29a      	uxth	r2, r3
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	685a      	ldr	r2, [r3, #4]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800952e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2220      	movs	r2, #32
 8009534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800953e:	b2db      	uxtb	r3, r3
 8009540:	2b40      	cmp	r3, #64	; 0x40
 8009542:	d10b      	bne.n	800955c <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MemRxCpltCallback(hi2c);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	4798      	blx	r3
}
 800955a:	e01e      	b.n	800959a <I2C_MasterReceive_BTF+0x1d0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2212      	movs	r2, #18
 8009568:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MasterRxCpltCallback(hi2c);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	4798      	blx	r3
}
 8009572:	e012      	b.n	800959a <I2C_MasterReceive_BTF+0x1d0>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	691a      	ldr	r2, [r3, #16]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800957e:	b2d2      	uxtb	r2, r2
 8009580:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009586:	1c5a      	adds	r2, r3, #1
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009590:	b29b      	uxth	r3, r3
 8009592:	3b01      	subs	r3, #1
 8009594:	b29a      	uxth	r2, r3
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800959a:	bf00      	nop
 800959c:	3710      	adds	r7, #16
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80095a2:	b480      	push	{r7}
 80095a4:	b083      	sub	sp, #12
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	2b40      	cmp	r3, #64	; 0x40
 80095b4:	d117      	bne.n	80095e6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d109      	bne.n	80095d2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	461a      	mov	r2, r3
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80095ce:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80095d0:	e067      	b.n	80096a2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	f043 0301 	orr.w	r3, r3, #1
 80095dc:	b2da      	uxtb	r2, r3
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	611a      	str	r2, [r3, #16]
}
 80095e4:	e05d      	b.n	80096a2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	691b      	ldr	r3, [r3, #16]
 80095ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095ee:	d133      	bne.n	8009658 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	2b21      	cmp	r3, #33	; 0x21
 80095fa:	d109      	bne.n	8009610 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009600:	b2db      	uxtb	r3, r3
 8009602:	461a      	mov	r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800960c:	611a      	str	r2, [r3, #16]
 800960e:	e008      	b.n	8009622 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009614:	b2db      	uxtb	r3, r3
 8009616:	f043 0301 	orr.w	r3, r3, #1
 800961a:	b2da      	uxtb	r2, r3
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009626:	2b00      	cmp	r3, #0
 8009628:	d004      	beq.n	8009634 <I2C_Master_SB+0x92>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800962e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009630:	2b00      	cmp	r3, #0
 8009632:	d108      	bne.n	8009646 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009638:	2b00      	cmp	r3, #0
 800963a:	d032      	beq.n	80096a2 <I2C_Master_SB+0x100>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009642:	2b00      	cmp	r3, #0
 8009644:	d02d      	beq.n	80096a2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	685a      	ldr	r2, [r3, #4]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009654:	605a      	str	r2, [r3, #4]
}
 8009656:	e024      	b.n	80096a2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800965c:	2b00      	cmp	r3, #0
 800965e:	d10e      	bne.n	800967e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009664:	b29b      	uxth	r3, r3
 8009666:	11db      	asrs	r3, r3, #7
 8009668:	b2db      	uxtb	r3, r3
 800966a:	f003 0306 	and.w	r3, r3, #6
 800966e:	b2db      	uxtb	r3, r3
 8009670:	f063 030f 	orn	r3, r3, #15
 8009674:	b2da      	uxtb	r2, r3
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	611a      	str	r2, [r3, #16]
}
 800967c:	e011      	b.n	80096a2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009682:	2b01      	cmp	r3, #1
 8009684:	d10d      	bne.n	80096a2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800968a:	b29b      	uxth	r3, r3
 800968c:	11db      	asrs	r3, r3, #7
 800968e:	b2db      	uxtb	r3, r3
 8009690:	f003 0306 	and.w	r3, r3, #6
 8009694:	b2db      	uxtb	r3, r3
 8009696:	f063 030e 	orn	r3, r3, #14
 800969a:	b2da      	uxtb	r2, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	611a      	str	r2, [r3, #16]
}
 80096a2:	bf00      	nop
 80096a4:	370c      	adds	r7, #12
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr

080096ae <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80096ae:	b480      	push	{r7}
 80096b0:	b083      	sub	sp, #12
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ba:	b2da      	uxtb	r2, r3
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d004      	beq.n	80096d4 <I2C_Master_ADD10+0x26>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d108      	bne.n	80096e6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d00c      	beq.n	80096f6 <I2C_Master_ADD10+0x48>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d007      	beq.n	80096f6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	685a      	ldr	r2, [r3, #4]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096f4:	605a      	str	r2, [r3, #4]
  }
}
 80096f6:	bf00      	nop
 80096f8:	370c      	adds	r7, #12
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr

08009702 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8009702:	b480      	push	{r7}
 8009704:	b091      	sub	sp, #68	; 0x44
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009710:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009718:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800971e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009726:	b2db      	uxtb	r3, r3
 8009728:	2b22      	cmp	r3, #34	; 0x22
 800972a:	f040 8169 	bne.w	8009a00 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009732:	2b00      	cmp	r3, #0
 8009734:	d10f      	bne.n	8009756 <I2C_Master_ADDR+0x54>
 8009736:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800973a:	2b40      	cmp	r3, #64	; 0x40
 800973c:	d10b      	bne.n	8009756 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800973e:	2300      	movs	r3, #0
 8009740:	633b      	str	r3, [r7, #48]	; 0x30
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	695b      	ldr	r3, [r3, #20]
 8009748:	633b      	str	r3, [r7, #48]	; 0x30
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	699b      	ldr	r3, [r3, #24]
 8009750:	633b      	str	r3, [r7, #48]	; 0x30
 8009752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009754:	e160      	b.n	8009a18 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800975a:	2b00      	cmp	r3, #0
 800975c:	d11d      	bne.n	800979a <I2C_Master_ADDR+0x98>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009766:	d118      	bne.n	800979a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009768:	2300      	movs	r3, #0
 800976a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	695b      	ldr	r3, [r3, #20]
 8009772:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	699b      	ldr	r3, [r3, #24]
 800977a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800977c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800978c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009792:	1c5a      	adds	r2, r3, #1
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	651a      	str	r2, [r3, #80]	; 0x50
 8009798:	e13e      	b.n	8009a18 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800979e:	b29b      	uxth	r3, r3
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d113      	bne.n	80097cc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097a4:	2300      	movs	r3, #0
 80097a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	695b      	ldr	r3, [r3, #20]
 80097ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	699b      	ldr	r3, [r3, #24]
 80097b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80097b8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097c8:	601a      	str	r2, [r3, #0]
 80097ca:	e115      	b.n	80099f8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	f040 808a 	bne.w	80098ec <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80097d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80097de:	d137      	bne.n	8009850 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097ee:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097fe:	d113      	bne.n	8009828 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800980e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009810:	2300      	movs	r3, #0
 8009812:	627b      	str	r3, [r7, #36]	; 0x24
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	695b      	ldr	r3, [r3, #20]
 800981a:	627b      	str	r3, [r7, #36]	; 0x24
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	699b      	ldr	r3, [r3, #24]
 8009822:	627b      	str	r3, [r7, #36]	; 0x24
 8009824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009826:	e0e7      	b.n	80099f8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009828:	2300      	movs	r3, #0
 800982a:	623b      	str	r3, [r7, #32]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	695b      	ldr	r3, [r3, #20]
 8009832:	623b      	str	r3, [r7, #32]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	699b      	ldr	r3, [r3, #24]
 800983a:	623b      	str	r3, [r7, #32]
 800983c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	681a      	ldr	r2, [r3, #0]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800984c:	601a      	str	r2, [r3, #0]
 800984e:	e0d3      	b.n	80099f8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8009850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009852:	2b08      	cmp	r3, #8
 8009854:	d02e      	beq.n	80098b4 <I2C_Master_ADDR+0x1b2>
 8009856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009858:	2b20      	cmp	r3, #32
 800985a:	d02b      	beq.n	80098b4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800985c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800985e:	2b12      	cmp	r3, #18
 8009860:	d102      	bne.n	8009868 <I2C_Master_ADDR+0x166>
 8009862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009864:	2b01      	cmp	r3, #1
 8009866:	d125      	bne.n	80098b4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800986a:	2b04      	cmp	r3, #4
 800986c:	d00e      	beq.n	800988c <I2C_Master_ADDR+0x18a>
 800986e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009870:	2b02      	cmp	r3, #2
 8009872:	d00b      	beq.n	800988c <I2C_Master_ADDR+0x18a>
 8009874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009876:	2b10      	cmp	r3, #16
 8009878:	d008      	beq.n	800988c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009888:	601a      	str	r2, [r3, #0]
 800988a:	e007      	b.n	800989c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800989a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800989c:	2300      	movs	r3, #0
 800989e:	61fb      	str	r3, [r7, #28]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	695b      	ldr	r3, [r3, #20]
 80098a6:	61fb      	str	r3, [r7, #28]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	699b      	ldr	r3, [r3, #24]
 80098ae:	61fb      	str	r3, [r7, #28]
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	e0a1      	b.n	80099f8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098c2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098c4:	2300      	movs	r3, #0
 80098c6:	61bb      	str	r3, [r7, #24]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	695b      	ldr	r3, [r3, #20]
 80098ce:	61bb      	str	r3, [r7, #24]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	699b      	ldr	r3, [r3, #24]
 80098d6:	61bb      	str	r3, [r7, #24]
 80098d8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098e8:	601a      	str	r2, [r3, #0]
 80098ea:	e085      	b.n	80099f8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	d14d      	bne.n	8009992 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80098f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f8:	2b04      	cmp	r3, #4
 80098fa:	d016      	beq.n	800992a <I2C_Master_ADDR+0x228>
 80098fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098fe:	2b02      	cmp	r3, #2
 8009900:	d013      	beq.n	800992a <I2C_Master_ADDR+0x228>
 8009902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009904:	2b10      	cmp	r3, #16
 8009906:	d010      	beq.n	800992a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009916:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009926:	601a      	str	r2, [r3, #0]
 8009928:	e007      	b.n	800993a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009938:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009948:	d117      	bne.n	800997a <I2C_Master_ADDR+0x278>
 800994a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009950:	d00b      	beq.n	800996a <I2C_Master_ADDR+0x268>
 8009952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009954:	2b01      	cmp	r3, #1
 8009956:	d008      	beq.n	800996a <I2C_Master_ADDR+0x268>
 8009958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800995a:	2b08      	cmp	r3, #8
 800995c:	d005      	beq.n	800996a <I2C_Master_ADDR+0x268>
 800995e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009960:	2b10      	cmp	r3, #16
 8009962:	d002      	beq.n	800996a <I2C_Master_ADDR+0x268>
 8009964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009966:	2b20      	cmp	r3, #32
 8009968:	d107      	bne.n	800997a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	685a      	ldr	r2, [r3, #4]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009978:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800997a:	2300      	movs	r3, #0
 800997c:	617b      	str	r3, [r7, #20]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	695b      	ldr	r3, [r3, #20]
 8009984:	617b      	str	r3, [r7, #20]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	699b      	ldr	r3, [r3, #24]
 800998c:	617b      	str	r3, [r7, #20]
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	e032      	b.n	80099f8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80099a0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099b0:	d117      	bne.n	80099e2 <I2C_Master_ADDR+0x2e0>
 80099b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80099b8:	d00b      	beq.n	80099d2 <I2C_Master_ADDR+0x2d0>
 80099ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d008      	beq.n	80099d2 <I2C_Master_ADDR+0x2d0>
 80099c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c2:	2b08      	cmp	r3, #8
 80099c4:	d005      	beq.n	80099d2 <I2C_Master_ADDR+0x2d0>
 80099c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c8:	2b10      	cmp	r3, #16
 80099ca:	d002      	beq.n	80099d2 <I2C_Master_ADDR+0x2d0>
 80099cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ce:	2b20      	cmp	r3, #32
 80099d0:	d107      	bne.n	80099e2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	685a      	ldr	r2, [r3, #4]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80099e0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099e2:	2300      	movs	r3, #0
 80099e4:	613b      	str	r3, [r7, #16]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	695b      	ldr	r3, [r3, #20]
 80099ec:	613b      	str	r3, [r7, #16]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	699b      	ldr	r3, [r3, #24]
 80099f4:	613b      	str	r3, [r7, #16]
 80099f6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2200      	movs	r2, #0
 80099fc:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80099fe:	e00b      	b.n	8009a18 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a00:	2300      	movs	r3, #0
 8009a02:	60fb      	str	r3, [r7, #12]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	695b      	ldr	r3, [r3, #20]
 8009a0a:	60fb      	str	r3, [r7, #12]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	699b      	ldr	r3, [r3, #24]
 8009a12:	60fb      	str	r3, [r7, #12]
 8009a14:	68fb      	ldr	r3, [r7, #12]
}
 8009a16:	e7ff      	b.n	8009a18 <I2C_Master_ADDR+0x316>
 8009a18:	bf00      	nop
 8009a1a:	3744      	adds	r7, #68	; 0x44
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr

08009a24 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a32:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d02c      	beq.n	8009a98 <I2C_SlaveTransmit_TXE+0x74>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a42:	781a      	ldrb	r2, [r3, #0]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a4e:	1c5a      	adds	r2, r3, #1
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	3b01      	subs	r3, #1
 8009a5c:	b29a      	uxth	r2, r3
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d115      	bne.n	8009a98 <I2C_SlaveTransmit_TXE+0x74>
 8009a6c:	7bfb      	ldrb	r3, [r7, #15]
 8009a6e:	2b29      	cmp	r3, #41	; 0x29
 8009a70:	d112      	bne.n	8009a98 <I2C_SlaveTransmit_TXE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	685a      	ldr	r2, [r3, #4]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a80:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2221      	movs	r2, #33	; 0x21
 8009a86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2228      	movs	r2, #40	; 0x28
 8009a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	4798      	blx	r3
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009a98:	bf00      	nop
 8009a9a:	3710      	adds	r7, #16
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d011      	beq.n	8009ad6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab6:	781a      	ldrb	r2, [r3, #0]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac2:	1c5a      	adds	r2, r3, #1
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	3b01      	subs	r3, #1
 8009ad0:	b29a      	uxth	r2, r3
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8009ad6:	bf00      	nop
 8009ad8:	370c      	adds	r7, #12
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr

08009ae2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b084      	sub	sp, #16
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009af0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d02d      	beq.n	8009b58 <I2C_SlaveReceive_RXNE+0x76>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	691a      	ldr	r2, [r3, #16]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b06:	b2d2      	uxtb	r2, r2
 8009b08:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0e:	1c5a      	adds	r2, r3, #1
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	3b01      	subs	r3, #1
 8009b1c:	b29a      	uxth	r2, r3
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d115      	bne.n	8009b58 <I2C_SlaveReceive_RXNE+0x76>
 8009b2c:	7bfb      	ldrb	r3, [r7, #15]
 8009b2e:	2b2a      	cmp	r3, #42	; 0x2a
 8009b30:	d112      	bne.n	8009b58 <I2C_SlaveReceive_RXNE+0x76>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	685a      	ldr	r2, [r3, #4]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b40:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2222      	movs	r2, #34	; 0x22
 8009b46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2228      	movs	r2, #40	; 0x28
 8009b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	4798      	blx	r3
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009b58:	bf00      	nop
 8009b5a:	3710      	adds	r7, #16
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b6c:	b29b      	uxth	r3, r3
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d012      	beq.n	8009b98 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	691a      	ldr	r2, [r3, #16]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7c:	b2d2      	uxtb	r2, r2
 8009b7e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b84:	1c5a      	adds	r2, r3, #1
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	3b01      	subs	r3, #1
 8009b92:	b29a      	uxth	r2, r3
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8009b98:	bf00      	nop
 8009b9a:	370c      	adds	r7, #12
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009bbe:	2b28      	cmp	r3, #40	; 0x28
 8009bc0:	d127      	bne.n	8009c12 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	685a      	ldr	r2, [r3, #4]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bd0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	089b      	lsrs	r3, r3, #2
 8009bd6:	f003 0301 	and.w	r3, r3, #1
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d101      	bne.n	8009be2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8009bde:	2301      	movs	r3, #1
 8009be0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	09db      	lsrs	r3, r3, #7
 8009be6:	f003 0301 	and.w	r3, r3, #1
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d103      	bne.n	8009bf6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	68db      	ldr	r3, [r3, #12]
 8009bf2:	81bb      	strh	r3, [r7, #12]
 8009bf4:	e002      	b.n	8009bfc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	699b      	ldr	r3, [r3, #24]
 8009bfa:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c08:	89ba      	ldrh	r2, [r7, #12]
 8009c0a:	7bf9      	ldrb	r1, [r7, #15]
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	4798      	blx	r3
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009c10:	e00e      	b.n	8009c30 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c12:	2300      	movs	r3, #0
 8009c14:	60bb      	str	r3, [r7, #8]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	695b      	ldr	r3, [r3, #20]
 8009c1c:	60bb      	str	r3, [r7, #8]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	699b      	ldr	r3, [r3, #24]
 8009c24:	60bb      	str	r3, [r7, #8]
 8009c26:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8009c30:	bf00      	nop
 8009c32:	3710      	adds	r7, #16
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c46:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	685a      	ldr	r2, [r3, #4]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009c56:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8009c58:	2300      	movs	r3, #0
 8009c5a:	60bb      	str	r3, [r7, #8]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	695b      	ldr	r3, [r3, #20]
 8009c62:	60bb      	str	r3, [r7, #8]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f042 0201 	orr.w	r2, r2, #1
 8009c72:	601a      	str	r2, [r3, #0]
 8009c74:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c84:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c94:	d172      	bne.n	8009d7c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009c96:	7bfb      	ldrb	r3, [r7, #15]
 8009c98:	2b22      	cmp	r3, #34	; 0x22
 8009c9a:	d002      	beq.n	8009ca2 <I2C_Slave_STOPF+0x6a>
 8009c9c:	7bfb      	ldrb	r3, [r7, #15]
 8009c9e:	2b2a      	cmp	r3, #42	; 0x2a
 8009ca0:	d135      	bne.n	8009d0e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	b29a      	uxth	r2, r3
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d005      	beq.n	8009cc6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cbe:	f043 0204 	orr.w	r2, r3, #4
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	685a      	ldr	r2, [r3, #4]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009cd4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7fd fe3e 	bl	800795c <HAL_DMA_GetState>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d049      	beq.n	8009d7a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cea:	4a6b      	ldr	r2, [pc, #428]	; (8009e98 <I2C_Slave_STOPF+0x260>)
 8009cec:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7fd fc86 	bl	8007604 <HAL_DMA_Abort_IT>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d03d      	beq.n	8009d7a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009d08:	4610      	mov	r0, r2
 8009d0a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009d0c:	e035      	b.n	8009d7a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d005      	beq.n	8009d32 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d2a:	f043 0204 	orr.w	r2, r3, #4
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	685a      	ldr	r2, [r3, #4]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009d40:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d46:	4618      	mov	r0, r3
 8009d48:	f7fd fe08 	bl	800795c <HAL_DMA_GetState>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d014      	beq.n	8009d7c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d56:	4a50      	ldr	r2, [pc, #320]	; (8009e98 <I2C_Slave_STOPF+0x260>)
 8009d58:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7fd fc50 	bl	8007604 <HAL_DMA_Abort_IT>
 8009d64:	4603      	mov	r3, r0
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d008      	beq.n	8009d7c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009d74:	4610      	mov	r0, r2
 8009d76:	4798      	blx	r3
 8009d78:	e000      	b.n	8009d7c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009d7a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d03e      	beq.n	8009e04 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	695b      	ldr	r3, [r3, #20]
 8009d8c:	f003 0304 	and.w	r3, r3, #4
 8009d90:	2b04      	cmp	r3, #4
 8009d92:	d112      	bne.n	8009dba <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	691a      	ldr	r2, [r3, #16]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d9e:	b2d2      	uxtb	r2, r2
 8009da0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da6:	1c5a      	adds	r2, r3, #1
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	3b01      	subs	r3, #1
 8009db4:	b29a      	uxth	r2, r3
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	695b      	ldr	r3, [r3, #20]
 8009dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dc4:	2b40      	cmp	r3, #64	; 0x40
 8009dc6:	d112      	bne.n	8009dee <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	691a      	ldr	r2, [r3, #16]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd2:	b2d2      	uxtb	r2, r2
 8009dd4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dda:	1c5a      	adds	r2, r3, #1
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	3b01      	subs	r3, #1
 8009de8:	b29a      	uxth	r2, r3
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d005      	beq.n	8009e04 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfc:	f043 0204 	orr.w	r2, r3, #4
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d003      	beq.n	8009e14 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 f8b9 	bl	8009f84 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8009e12:	e03c      	b.n	8009e8e <I2C_Slave_STOPF+0x256>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009e14:	7bfb      	ldrb	r3, [r7, #15]
 8009e16:	2b2a      	cmp	r3, #42	; 0x2a
 8009e18:	d10a      	bne.n	8009e30 <I2C_Slave_STOPF+0x1f8>
      hi2c->PreviousState = I2C_STATE_NONE;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2228      	movs	r2, #40	; 0x28
 8009e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->SlaveRxCpltCallback(hi2c);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	4798      	blx	r3
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	2b28      	cmp	r3, #40	; 0x28
 8009e3a:	d112      	bne.n	8009e62 <I2C_Slave_STOPF+0x22a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	4a17      	ldr	r2, [pc, #92]	; (8009e9c <I2C_Slave_STOPF+0x264>)
 8009e40:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2220      	movs	r2, #32
 8009e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ListenCpltCallback(hi2c);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	4798      	blx	r3
}
 8009e60:	e015      	b.n	8009e8e <I2C_Slave_STOPF+0x256>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e66:	2b22      	cmp	r3, #34	; 0x22
 8009e68:	d002      	beq.n	8009e70 <I2C_Slave_STOPF+0x238>
 8009e6a:	7bfb      	ldrb	r3, [r7, #15]
 8009e6c:	2b22      	cmp	r3, #34	; 0x22
 8009e6e:	d10e      	bne.n	8009e8e <I2C_Slave_STOPF+0x256>
        hi2c->PreviousState = I2C_STATE_NONE;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2200      	movs	r2, #0
 8009e74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2220      	movs	r2, #32
 8009e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->SlaveRxCpltCallback(hi2c);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	4798      	blx	r3
}
 8009e8e:	bf00      	nop
 8009e90:	3710      	adds	r7, #16
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	0800a1f1 	.word	0x0800a1f1
 8009e9c:	ffff0000 	.word	0xffff0000

08009ea0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009eae:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	2b08      	cmp	r3, #8
 8009eba:	d002      	beq.n	8009ec2 <I2C_Slave_AF+0x22>
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	2b20      	cmp	r3, #32
 8009ec0:	d12a      	bne.n	8009f18 <I2C_Slave_AF+0x78>
 8009ec2:	7bfb      	ldrb	r3, [r7, #15]
 8009ec4:	2b28      	cmp	r3, #40	; 0x28
 8009ec6:	d127      	bne.n	8009f18 <I2C_Slave_AF+0x78>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	4a2d      	ldr	r2, [pc, #180]	; (8009f80 <I2C_Slave_AF+0xe0>)
 8009ecc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	685a      	ldr	r2, [r3, #4]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009edc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009ee6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ef6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2220      	movs	r2, #32
 8009f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	4798      	blx	r3
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8009f16:	e02f      	b.n	8009f78 <I2C_Slave_AF+0xd8>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8009f18:	7bfb      	ldrb	r3, [r7, #15]
 8009f1a:	2b21      	cmp	r3, #33	; 0x21
 8009f1c:	d127      	bne.n	8009f6e <I2C_Slave_AF+0xce>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4a17      	ldr	r2, [pc, #92]	; (8009f80 <I2C_Slave_AF+0xe0>)
 8009f22:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2221      	movs	r2, #33	; 0x21
 8009f28:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2220      	movs	r2, #32
 8009f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	685a      	ldr	r2, [r3, #4]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009f48:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009f52:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	681a      	ldr	r2, [r3, #0]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f62:	601a      	str	r2, [r3, #0]
    hi2c->SlaveTxCpltCallback(hi2c);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	4798      	blx	r3
}
 8009f6c:	e004      	b.n	8009f78 <I2C_Slave_AF+0xd8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009f76:	615a      	str	r2, [r3, #20]
}
 8009f78:	bf00      	nop
 8009f7a:	3710      	adds	r7, #16
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	ffff0000 	.word	0xffff0000

08009f84 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f92:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f9a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009f9c:	7bbb      	ldrb	r3, [r7, #14]
 8009f9e:	2b10      	cmp	r3, #16
 8009fa0:	d002      	beq.n	8009fa8 <I2C_ITError+0x24>
 8009fa2:	7bbb      	ldrb	r3, [r7, #14]
 8009fa4:	2b40      	cmp	r3, #64	; 0x40
 8009fa6:	d10a      	bne.n	8009fbe <I2C_ITError+0x3a>
 8009fa8:	7bfb      	ldrb	r3, [r7, #15]
 8009faa:	2b22      	cmp	r3, #34	; 0x22
 8009fac:	d107      	bne.n	8009fbe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	681a      	ldr	r2, [r3, #0]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009fbc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009fbe:	7bfb      	ldrb	r3, [r7, #15]
 8009fc0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009fc4:	2b28      	cmp	r3, #40	; 0x28
 8009fc6:	d107      	bne.n	8009fd8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2228      	movs	r2, #40	; 0x28
 8009fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009fd6:	e015      	b.n	800a004 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fe2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fe6:	d00a      	beq.n	8009ffe <I2C_ITError+0x7a>
 8009fe8:	7bfb      	ldrb	r3, [r7, #15]
 8009fea:	2b60      	cmp	r3, #96	; 0x60
 8009fec:	d007      	beq.n	8009ffe <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2220      	movs	r2, #32
 8009ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2200      	movs	r2, #0
 800a002:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a00e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a012:	d162      	bne.n	800a0da <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	685a      	ldr	r2, [r3, #4]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a022:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a028:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a02c:	b2db      	uxtb	r3, r3
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d020      	beq.n	800a074 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a036:	4a6c      	ldr	r2, [pc, #432]	; (800a1e8 <I2C_ITError+0x264>)
 800a038:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a03e:	4618      	mov	r0, r3
 800a040:	f7fd fae0 	bl	8007604 <HAL_DMA_Abort_IT>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	f000 808b 	beq.w	800a162 <I2C_ITError+0x1de>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f022 0201 	bic.w	r2, r2, #1
 800a05a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2220      	movs	r2, #32
 800a060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a06e:	4610      	mov	r0, r2
 800a070:	4798      	blx	r3
 800a072:	e076      	b.n	800a162 <I2C_ITError+0x1de>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a078:	4a5b      	ldr	r2, [pc, #364]	; (800a1e8 <I2C_ITError+0x264>)
 800a07a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a080:	4618      	mov	r0, r3
 800a082:	f7fd fabf 	bl	8007604 <HAL_DMA_Abort_IT>
 800a086:	4603      	mov	r3, r0
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d06a      	beq.n	800a162 <I2C_ITError+0x1de>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	695b      	ldr	r3, [r3, #20]
 800a092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a096:	2b40      	cmp	r3, #64	; 0x40
 800a098:	d10b      	bne.n	800a0b2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	691a      	ldr	r2, [r3, #16]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a4:	b2d2      	uxtb	r2, r2
 800a0a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ac:	1c5a      	adds	r2, r3, #1
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f022 0201 	bic.w	r2, r2, #1
 800a0c0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2220      	movs	r2, #32
 800a0c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a0d4:	4610      	mov	r0, r2
 800a0d6:	4798      	blx	r3
 800a0d8:	e043      	b.n	800a162 <I2C_ITError+0x1de>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	2b60      	cmp	r3, #96	; 0x60
 800a0e4:	d126      	bne.n	800a134 <I2C_ITError+0x1b0>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2220      	movs	r2, #32
 800a0ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	695b      	ldr	r3, [r3, #20]
 800a0fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0fe:	2b40      	cmp	r3, #64	; 0x40
 800a100:	d10b      	bne.n	800a11a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	691a      	ldr	r2, [r3, #16]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10c:	b2d2      	uxtb	r2, r2
 800a10e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a114:	1c5a      	adds	r2, r3, #1
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f022 0201 	bic.w	r2, r2, #1
 800a128:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	4798      	blx	r3
 800a132:	e016      	b.n	800a162 <I2C_ITError+0x1de>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	695b      	ldr	r3, [r3, #20]
 800a13a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a13e:	2b40      	cmp	r3, #64	; 0x40
 800a140:	d10b      	bne.n	800a15a <I2C_ITError+0x1d6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	691a      	ldr	r2, [r3, #16]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14c:	b2d2      	uxtb	r2, r2
 800a14e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a154:	1c5a      	adds	r2, r3, #1
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	4798      	blx	r3
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a166:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	f003 0301 	and.w	r3, r3, #1
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d10e      	bne.n	800a190 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d109      	bne.n	800a190 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800a182:	2b00      	cmp	r3, #0
 800a184:	d104      	bne.n	800a190 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d007      	beq.n	800a1a0 <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	685a      	ldr	r2, [r3, #4]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a19e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1a6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ac:	f003 0304 	and.w	r3, r3, #4
 800a1b0:	2b04      	cmp	r3, #4
 800a1b2:	d114      	bne.n	800a1de <I2C_ITError+0x25a>
 800a1b4:	7bfb      	ldrb	r3, [r7, #15]
 800a1b6:	2b28      	cmp	r3, #40	; 0x28
 800a1b8:	d111      	bne.n	800a1de <I2C_ITError+0x25a>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	4a0b      	ldr	r2, [pc, #44]	; (800a1ec <I2C_ITError+0x268>)
 800a1be:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2220      	movs	r2, #32
 800a1ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	4798      	blx	r3
#else
    HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a1de:	bf00      	nop
 800a1e0:	3710      	adds	r7, #16
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	bf00      	nop
 800a1e8:	0800a1f1 	.word	0x0800a1f1
 800a1ec:	ffff0000 	.word	0xffff0000

0800a1f0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b086      	sub	sp, #24
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a200:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a208:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a20a:	4b4c      	ldr	r3, [pc, #304]	; (800a33c <I2C_DMAAbort+0x14c>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	08db      	lsrs	r3, r3, #3
 800a210:	4a4b      	ldr	r2, [pc, #300]	; (800a340 <I2C_DMAAbort+0x150>)
 800a212:	fba2 2303 	umull	r2, r3, r2, r3
 800a216:	0a1a      	lsrs	r2, r3, #8
 800a218:	4613      	mov	r3, r2
 800a21a:	009b      	lsls	r3, r3, #2
 800a21c:	4413      	add	r3, r2
 800a21e:	00da      	lsls	r2, r3, #3
 800a220:	1ad3      	subs	r3, r2, r3
 800a222:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d106      	bne.n	800a238 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a22e:	f043 0220 	orr.w	r2, r3, #32
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800a236:	e00a      	b.n	800a24e <I2C_DMAAbort+0x5e>
    }
    count--;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	3b01      	subs	r3, #1
 800a23c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a24c:	d0ea      	beq.n	800a224 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a252:	2b00      	cmp	r3, #0
 800a254:	d003      	beq.n	800a25e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a25a:	2200      	movs	r2, #0
 800a25c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a262:	2b00      	cmp	r3, #0
 800a264:	d003      	beq.n	800a26e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a26a:	2200      	movs	r2, #0
 800a26c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	681a      	ldr	r2, [r3, #0]
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a27c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	2200      	movs	r2, #0
 800a282:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d003      	beq.n	800a294 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a290:	2200      	movs	r2, #0
 800a292:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d003      	beq.n	800a2a4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f022 0201 	bic.w	r2, r2, #1
 800a2b2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2ba:	b2db      	uxtb	r3, r3
 800a2bc:	2b60      	cmp	r3, #96	; 0x60
 800a2be:	d10f      	bne.n	800a2e0 <I2C_DMAAbort+0xf0>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	2220      	movs	r2, #32
 800a2c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2da:	6978      	ldr	r0, [r7, #20]
 800a2dc:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a2de:	e028      	b.n	800a332 <I2C_DMAAbort+0x142>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a2e0:	7cfb      	ldrb	r3, [r7, #19]
 800a2e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a2e6:	2b28      	cmp	r3, #40	; 0x28
 800a2e8:	d117      	bne.n	800a31a <I2C_DMAAbort+0x12a>
      __HAL_I2C_ENABLE(hi2c);
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f042 0201 	orr.w	r2, r2, #1
 800a2f8:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	681a      	ldr	r2, [r3, #0]
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a308:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	2200      	movs	r2, #0
 800a30e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	2228      	movs	r2, #40	; 0x28
 800a314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a318:	e007      	b.n	800a32a <I2C_DMAAbort+0x13a>
      hi2c->State = HAL_I2C_STATE_READY;
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	2220      	movs	r2, #32
 800a31e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	2200      	movs	r2, #0
 800a326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCallback(hi2c);
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a32e:	6978      	ldr	r0, [r7, #20]
 800a330:	4798      	blx	r3
}
 800a332:	bf00      	nop
 800a334:	3718      	adds	r7, #24
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	2000004c 	.word	0x2000004c
 800a340:	14f8b589 	.word	0x14f8b589

0800a344 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800a344:	b480      	push	{r7}
 800a346:	b085      	sub	sp, #20
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a34c:	2300      	movs	r3, #0
 800a34e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800a350:	4b13      	ldr	r3, [pc, #76]	; (800a3a0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	08db      	lsrs	r3, r3, #3
 800a356:	4a13      	ldr	r2, [pc, #76]	; (800a3a4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800a358:	fba2 2303 	umull	r2, r3, r2, r3
 800a35c:	0a1a      	lsrs	r2, r3, #8
 800a35e:	4613      	mov	r3, r2
 800a360:	009b      	lsls	r3, r3, #2
 800a362:	4413      	add	r3, r2
 800a364:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	3b01      	subs	r3, #1
 800a36a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d107      	bne.n	800a382 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a376:	f043 0220 	orr.w	r2, r3, #32
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	e008      	b.n	800a394 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a38c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a390:	d0e9      	beq.n	800a366 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	3714      	adds	r7, #20
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr
 800a3a0:	2000004c 	.word	0x2000004c
 800a3a4:	14f8b589 	.word	0x14f8b589

0800a3a8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800a3b8:	d103      	bne.n	800a3c2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2201      	movs	r2, #1
 800a3be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800a3c0:	e007      	b.n	800a3d2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800a3ca:	d102      	bne.n	800a3d2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2208      	movs	r2, #8
 800a3d0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a3d2:	bf00      	nop
 800a3d4:	370c      	adds	r7, #12
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr

0800a3de <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800a3de:	b580      	push	{r7, lr}
 800a3e0:	b084      	sub	sp, #16
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d101      	bne.n	800a3f0 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	e034      	b.n	800a45a <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800a3f8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f245 5255 	movw	r2, #21845	; 0x5555
 800a402:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	687a      	ldr	r2, [r7, #4]
 800a40a:	6852      	ldr	r2, [r2, #4]
 800a40c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	687a      	ldr	r2, [r7, #4]
 800a414:	6892      	ldr	r2, [r2, #8]
 800a416:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800a418:	f7fb ff28 	bl	800626c <HAL_GetTick>
 800a41c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a41e:	e00f      	b.n	800a440 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800a420:	f7fb ff24 	bl	800626c <HAL_GetTick>
 800a424:	4602      	mov	r2, r0
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	1ad3      	subs	r3, r2, r3
 800a42a:	2b31      	cmp	r3, #49	; 0x31
 800a42c:	d908      	bls.n	800a440 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	68db      	ldr	r3, [r3, #12]
 800a434:	f003 0303 	and.w	r3, r3, #3
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d001      	beq.n	800a440 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800a43c:	2303      	movs	r3, #3
 800a43e:	e00c      	b.n	800a45a <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	f003 0303 	and.w	r3, r3, #3
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d1e8      	bne.n	800a420 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a456:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a458:	2300      	movs	r3, #0
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3710      	adds	r7, #16
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}

0800a462 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800a462:	b480      	push	{r7}
 800a464:	b083      	sub	sp, #12
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a472:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a474:	2300      	movs	r3, #0
}
 800a476:	4618      	mov	r0, r3
 800a478:	370c      	adds	r7, #12
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr
	...

0800a484 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 800a488:	4b06      	ldr	r3, [pc, #24]	; (800a4a4 <HAL_PWR_PVD_IRQHandler+0x20>)
 800a48a:	695b      	ldr	r3, [r3, #20]
 800a48c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a490:	2b00      	cmp	r3, #0
 800a492:	d005      	beq.n	800a4a0 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800a494:	f000 f808 	bl	800a4a8 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800a498:	4b02      	ldr	r3, [pc, #8]	; (800a4a4 <HAL_PWR_PVD_IRQHandler+0x20>)
 800a49a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a49e:	615a      	str	r2, [r3, #20]
  }
}
 800a4a0:	bf00      	nop
 800a4a2:	bd80      	pop	{r7, pc}
 800a4a4:	40013c00 	.word	0x40013c00

0800a4a8 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 800a4ac:	bf00      	nop
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr
	...

0800a4b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b086      	sub	sp, #24
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d101      	bne.n	800a4ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e267      	b.n	800a99a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f003 0301 	and.w	r3, r3, #1
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d075      	beq.n	800a5c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a4d6:	4b88      	ldr	r3, [pc, #544]	; (800a6f8 <HAL_RCC_OscConfig+0x240>)
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	f003 030c 	and.w	r3, r3, #12
 800a4de:	2b04      	cmp	r3, #4
 800a4e0:	d00c      	beq.n	800a4fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a4e2:	4b85      	ldr	r3, [pc, #532]	; (800a6f8 <HAL_RCC_OscConfig+0x240>)
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a4ea:	2b08      	cmp	r3, #8
 800a4ec:	d112      	bne.n	800a514 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a4ee:	4b82      	ldr	r3, [pc, #520]	; (800a6f8 <HAL_RCC_OscConfig+0x240>)
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a4fa:	d10b      	bne.n	800a514 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a4fc:	4b7e      	ldr	r3, [pc, #504]	; (800a6f8 <HAL_RCC_OscConfig+0x240>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a504:	2b00      	cmp	r3, #0
 800a506:	d05b      	beq.n	800a5c0 <HAL_RCC_OscConfig+0x108>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d157      	bne.n	800a5c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a510:	2301      	movs	r3, #1
 800a512:	e242      	b.n	800a99a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a51c:	d106      	bne.n	800a52c <HAL_RCC_OscConfig+0x74>
 800a51e:	4b76      	ldr	r3, [pc, #472]	; (800a6f8 <HAL_RCC_OscConfig+0x240>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4a75      	ldr	r2, [pc, #468]	; (800a6f8 <HAL_RCC_OscConfig+0x240>)
 800a524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a528:	6013      	str	r3, [r2, #0]
 800a52a:	e01d      	b.n	800a568 <HAL_RCC_OscConfig+0xb0>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a534:	d10c      	bne.n	800a550 <HAL_RCC_OscConfig+0x98>
 800a536:	4b70      	ldr	r3, [pc, #448]	; (800a6f8 <HAL_RCC_OscConfig+0x240>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a6f      	ldr	r2, [pc, #444]	; (800a6f8 <HAL_RCC_OscConfig+0x240>)
 800a53c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a540:	6013      	str	r3, [r2, #0]
 800a542:	4b6d      	ldr	r3, [pc, #436]	; (800a6f8 <HAL_RCC_OscConfig+0x240>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a6c      	ldr	r2, [pc, #432]	; (800a6f8 <HAL_RCC_OscConfig+0x240>)
 800a548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a54c:	6013      	str	r3, [r2, #0]
 800a54e:	e00b      	b.n	800a568 <HAL_RCC_OscConfig+0xb0>
 800a550:	4b69      	ldr	r3, [pc, #420]	; (800a6f8 <HAL_RCC_OscConfig+0x240>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a68      	ldr	r2, [pc, #416]	; (800a6f8 <HAL_RCC_OscConfig+0x240>)
 800a556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a55a:	6013      	str	r3, [r2, #0]
 800a55c:	4b66      	ldr	r3, [pc, #408]	; (800a6f8 <HAL_RCC_OscConfig+0x240>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a65      	ldr	r2, [pc, #404]	; (800a6f8 <HAL_RCC_OscConfig+0x240>)
 800a562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a566:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d013      	beq.n	800a598 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a570:	f7fb fe7c 	bl	800626c <HAL_GetTick>
 800a574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a576:	e008      	b.n	800a58a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a578:	f7fb fe78 	bl	800626c <HAL_GetTick>
 800a57c:	4602      	mov	r2, r0
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	1ad3      	subs	r3, r2, r3
 800a582:	2b64      	cmp	r3, #100	; 0x64
 800a584:	d901      	bls.n	800a58a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a586:	2303      	movs	r3, #3
 800a588:	e207      	b.n	800a99a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a58a:	4b5b      	ldr	r3, [pc, #364]	; (800a6f8 <HAL_RCC_OscConfig+0x240>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a592:	2b00      	cmp	r3, #0
 800a594:	d0f0      	beq.n	800a578 <HAL_RCC_OscConfig+0xc0>
 800a596:	e014      	b.n	800a5c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a598:	f7fb fe68 	bl	800626c <HAL_GetTick>
 800a59c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a59e:	e008      	b.n	800a5b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a5a0:	f7fb fe64 	bl	800626c <HAL_GetTick>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	1ad3      	subs	r3, r2, r3
 800a5aa:	2b64      	cmp	r3, #100	; 0x64
 800a5ac:	d901      	bls.n	800a5b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a5ae:	2303      	movs	r3, #3
 800a5b0:	e1f3      	b.n	800a99a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a5b2:	4b51      	ldr	r3, [pc, #324]	; (800a6f8 <HAL_RCC_OscConfig+0x240>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d1f0      	bne.n	800a5a0 <HAL_RCC_OscConfig+0xe8>
 800a5be:	e000      	b.n	800a5c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a5c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f003 0302 	and.w	r3, r3, #2
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d063      	beq.n	800a696 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a5ce:	4b4a      	ldr	r3, [pc, #296]	; (800a6f8 <HAL_RCC_OscConfig+0x240>)
 800a5d0:	689b      	ldr	r3, [r3, #8]
 800a5d2:	f003 030c 	and.w	r3, r3, #12
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d00b      	beq.n	800a5f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a5da:	4b47      	ldr	r3, [pc, #284]	; (800a6f8 <HAL_RCC_OscConfig+0x240>)
 800a5dc:	689b      	ldr	r3, [r3, #8]
 800a5de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a5e2:	2b08      	cmp	r3, #8
 800a5e4:	d11c      	bne.n	800a620 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a5e6:	4b44      	ldr	r3, [pc, #272]	; (800a6f8 <HAL_RCC_OscConfig+0x240>)
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d116      	bne.n	800a620 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a5f2:	4b41      	ldr	r3, [pc, #260]	; (800a6f8 <HAL_RCC_OscConfig+0x240>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f003 0302 	and.w	r3, r3, #2
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d005      	beq.n	800a60a <HAL_RCC_OscConfig+0x152>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	2b01      	cmp	r3, #1
 800a604:	d001      	beq.n	800a60a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a606:	2301      	movs	r3, #1
 800a608:	e1c7      	b.n	800a99a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a60a:	4b3b      	ldr	r3, [pc, #236]	; (800a6f8 <HAL_RCC_OscConfig+0x240>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	691b      	ldr	r3, [r3, #16]
 800a616:	00db      	lsls	r3, r3, #3
 800a618:	4937      	ldr	r1, [pc, #220]	; (800a6f8 <HAL_RCC_OscConfig+0x240>)
 800a61a:	4313      	orrs	r3, r2
 800a61c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a61e:	e03a      	b.n	800a696 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	68db      	ldr	r3, [r3, #12]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d020      	beq.n	800a66a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a628:	4b34      	ldr	r3, [pc, #208]	; (800a6fc <HAL_RCC_OscConfig+0x244>)
 800a62a:	2201      	movs	r2, #1
 800a62c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a62e:	f7fb fe1d 	bl	800626c <HAL_GetTick>
 800a632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a634:	e008      	b.n	800a648 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a636:	f7fb fe19 	bl	800626c <HAL_GetTick>
 800a63a:	4602      	mov	r2, r0
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	1ad3      	subs	r3, r2, r3
 800a640:	2b02      	cmp	r3, #2
 800a642:	d901      	bls.n	800a648 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a644:	2303      	movs	r3, #3
 800a646:	e1a8      	b.n	800a99a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a648:	4b2b      	ldr	r3, [pc, #172]	; (800a6f8 <HAL_RCC_OscConfig+0x240>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f003 0302 	and.w	r3, r3, #2
 800a650:	2b00      	cmp	r3, #0
 800a652:	d0f0      	beq.n	800a636 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a654:	4b28      	ldr	r3, [pc, #160]	; (800a6f8 <HAL_RCC_OscConfig+0x240>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	691b      	ldr	r3, [r3, #16]
 800a660:	00db      	lsls	r3, r3, #3
 800a662:	4925      	ldr	r1, [pc, #148]	; (800a6f8 <HAL_RCC_OscConfig+0x240>)
 800a664:	4313      	orrs	r3, r2
 800a666:	600b      	str	r3, [r1, #0]
 800a668:	e015      	b.n	800a696 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a66a:	4b24      	ldr	r3, [pc, #144]	; (800a6fc <HAL_RCC_OscConfig+0x244>)
 800a66c:	2200      	movs	r2, #0
 800a66e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a670:	f7fb fdfc 	bl	800626c <HAL_GetTick>
 800a674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a676:	e008      	b.n	800a68a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a678:	f7fb fdf8 	bl	800626c <HAL_GetTick>
 800a67c:	4602      	mov	r2, r0
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	1ad3      	subs	r3, r2, r3
 800a682:	2b02      	cmp	r3, #2
 800a684:	d901      	bls.n	800a68a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a686:	2303      	movs	r3, #3
 800a688:	e187      	b.n	800a99a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a68a:	4b1b      	ldr	r3, [pc, #108]	; (800a6f8 <HAL_RCC_OscConfig+0x240>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f003 0302 	and.w	r3, r3, #2
 800a692:	2b00      	cmp	r3, #0
 800a694:	d1f0      	bne.n	800a678 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f003 0308 	and.w	r3, r3, #8
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d036      	beq.n	800a710 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	695b      	ldr	r3, [r3, #20]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d016      	beq.n	800a6d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a6aa:	4b15      	ldr	r3, [pc, #84]	; (800a700 <HAL_RCC_OscConfig+0x248>)
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6b0:	f7fb fddc 	bl	800626c <HAL_GetTick>
 800a6b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a6b6:	e008      	b.n	800a6ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a6b8:	f7fb fdd8 	bl	800626c <HAL_GetTick>
 800a6bc:	4602      	mov	r2, r0
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	1ad3      	subs	r3, r2, r3
 800a6c2:	2b02      	cmp	r3, #2
 800a6c4:	d901      	bls.n	800a6ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a6c6:	2303      	movs	r3, #3
 800a6c8:	e167      	b.n	800a99a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a6ca:	4b0b      	ldr	r3, [pc, #44]	; (800a6f8 <HAL_RCC_OscConfig+0x240>)
 800a6cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6ce:	f003 0302 	and.w	r3, r3, #2
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d0f0      	beq.n	800a6b8 <HAL_RCC_OscConfig+0x200>
 800a6d6:	e01b      	b.n	800a710 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a6d8:	4b09      	ldr	r3, [pc, #36]	; (800a700 <HAL_RCC_OscConfig+0x248>)
 800a6da:	2200      	movs	r2, #0
 800a6dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a6de:	f7fb fdc5 	bl	800626c <HAL_GetTick>
 800a6e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a6e4:	e00e      	b.n	800a704 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a6e6:	f7fb fdc1 	bl	800626c <HAL_GetTick>
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	1ad3      	subs	r3, r2, r3
 800a6f0:	2b02      	cmp	r3, #2
 800a6f2:	d907      	bls.n	800a704 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a6f4:	2303      	movs	r3, #3
 800a6f6:	e150      	b.n	800a99a <HAL_RCC_OscConfig+0x4e2>
 800a6f8:	40023800 	.word	0x40023800
 800a6fc:	42470000 	.word	0x42470000
 800a700:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a704:	4b88      	ldr	r3, [pc, #544]	; (800a928 <HAL_RCC_OscConfig+0x470>)
 800a706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a708:	f003 0302 	and.w	r3, r3, #2
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d1ea      	bne.n	800a6e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f003 0304 	and.w	r3, r3, #4
 800a718:	2b00      	cmp	r3, #0
 800a71a:	f000 8097 	beq.w	800a84c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a71e:	2300      	movs	r3, #0
 800a720:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a722:	4b81      	ldr	r3, [pc, #516]	; (800a928 <HAL_RCC_OscConfig+0x470>)
 800a724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d10f      	bne.n	800a74e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a72e:	2300      	movs	r3, #0
 800a730:	60bb      	str	r3, [r7, #8]
 800a732:	4b7d      	ldr	r3, [pc, #500]	; (800a928 <HAL_RCC_OscConfig+0x470>)
 800a734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a736:	4a7c      	ldr	r2, [pc, #496]	; (800a928 <HAL_RCC_OscConfig+0x470>)
 800a738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a73c:	6413      	str	r3, [r2, #64]	; 0x40
 800a73e:	4b7a      	ldr	r3, [pc, #488]	; (800a928 <HAL_RCC_OscConfig+0x470>)
 800a740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a746:	60bb      	str	r3, [r7, #8]
 800a748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a74a:	2301      	movs	r3, #1
 800a74c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a74e:	4b77      	ldr	r3, [pc, #476]	; (800a92c <HAL_RCC_OscConfig+0x474>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a756:	2b00      	cmp	r3, #0
 800a758:	d118      	bne.n	800a78c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a75a:	4b74      	ldr	r3, [pc, #464]	; (800a92c <HAL_RCC_OscConfig+0x474>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4a73      	ldr	r2, [pc, #460]	; (800a92c <HAL_RCC_OscConfig+0x474>)
 800a760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a766:	f7fb fd81 	bl	800626c <HAL_GetTick>
 800a76a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a76c:	e008      	b.n	800a780 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a76e:	f7fb fd7d 	bl	800626c <HAL_GetTick>
 800a772:	4602      	mov	r2, r0
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	1ad3      	subs	r3, r2, r3
 800a778:	2b02      	cmp	r3, #2
 800a77a:	d901      	bls.n	800a780 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a77c:	2303      	movs	r3, #3
 800a77e:	e10c      	b.n	800a99a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a780:	4b6a      	ldr	r3, [pc, #424]	; (800a92c <HAL_RCC_OscConfig+0x474>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d0f0      	beq.n	800a76e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	689b      	ldr	r3, [r3, #8]
 800a790:	2b01      	cmp	r3, #1
 800a792:	d106      	bne.n	800a7a2 <HAL_RCC_OscConfig+0x2ea>
 800a794:	4b64      	ldr	r3, [pc, #400]	; (800a928 <HAL_RCC_OscConfig+0x470>)
 800a796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a798:	4a63      	ldr	r2, [pc, #396]	; (800a928 <HAL_RCC_OscConfig+0x470>)
 800a79a:	f043 0301 	orr.w	r3, r3, #1
 800a79e:	6713      	str	r3, [r2, #112]	; 0x70
 800a7a0:	e01c      	b.n	800a7dc <HAL_RCC_OscConfig+0x324>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	2b05      	cmp	r3, #5
 800a7a8:	d10c      	bne.n	800a7c4 <HAL_RCC_OscConfig+0x30c>
 800a7aa:	4b5f      	ldr	r3, [pc, #380]	; (800a928 <HAL_RCC_OscConfig+0x470>)
 800a7ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7ae:	4a5e      	ldr	r2, [pc, #376]	; (800a928 <HAL_RCC_OscConfig+0x470>)
 800a7b0:	f043 0304 	orr.w	r3, r3, #4
 800a7b4:	6713      	str	r3, [r2, #112]	; 0x70
 800a7b6:	4b5c      	ldr	r3, [pc, #368]	; (800a928 <HAL_RCC_OscConfig+0x470>)
 800a7b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7ba:	4a5b      	ldr	r2, [pc, #364]	; (800a928 <HAL_RCC_OscConfig+0x470>)
 800a7bc:	f043 0301 	orr.w	r3, r3, #1
 800a7c0:	6713      	str	r3, [r2, #112]	; 0x70
 800a7c2:	e00b      	b.n	800a7dc <HAL_RCC_OscConfig+0x324>
 800a7c4:	4b58      	ldr	r3, [pc, #352]	; (800a928 <HAL_RCC_OscConfig+0x470>)
 800a7c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7c8:	4a57      	ldr	r2, [pc, #348]	; (800a928 <HAL_RCC_OscConfig+0x470>)
 800a7ca:	f023 0301 	bic.w	r3, r3, #1
 800a7ce:	6713      	str	r3, [r2, #112]	; 0x70
 800a7d0:	4b55      	ldr	r3, [pc, #340]	; (800a928 <HAL_RCC_OscConfig+0x470>)
 800a7d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7d4:	4a54      	ldr	r2, [pc, #336]	; (800a928 <HAL_RCC_OscConfig+0x470>)
 800a7d6:	f023 0304 	bic.w	r3, r3, #4
 800a7da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	689b      	ldr	r3, [r3, #8]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d015      	beq.n	800a810 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7e4:	f7fb fd42 	bl	800626c <HAL_GetTick>
 800a7e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a7ea:	e00a      	b.n	800a802 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a7ec:	f7fb fd3e 	bl	800626c <HAL_GetTick>
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	1ad3      	subs	r3, r2, r3
 800a7f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d901      	bls.n	800a802 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a7fe:	2303      	movs	r3, #3
 800a800:	e0cb      	b.n	800a99a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a802:	4b49      	ldr	r3, [pc, #292]	; (800a928 <HAL_RCC_OscConfig+0x470>)
 800a804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a806:	f003 0302 	and.w	r3, r3, #2
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d0ee      	beq.n	800a7ec <HAL_RCC_OscConfig+0x334>
 800a80e:	e014      	b.n	800a83a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a810:	f7fb fd2c 	bl	800626c <HAL_GetTick>
 800a814:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a816:	e00a      	b.n	800a82e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a818:	f7fb fd28 	bl	800626c <HAL_GetTick>
 800a81c:	4602      	mov	r2, r0
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	1ad3      	subs	r3, r2, r3
 800a822:	f241 3288 	movw	r2, #5000	; 0x1388
 800a826:	4293      	cmp	r3, r2
 800a828:	d901      	bls.n	800a82e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a82a:	2303      	movs	r3, #3
 800a82c:	e0b5      	b.n	800a99a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a82e:	4b3e      	ldr	r3, [pc, #248]	; (800a928 <HAL_RCC_OscConfig+0x470>)
 800a830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a832:	f003 0302 	and.w	r3, r3, #2
 800a836:	2b00      	cmp	r3, #0
 800a838:	d1ee      	bne.n	800a818 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a83a:	7dfb      	ldrb	r3, [r7, #23]
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d105      	bne.n	800a84c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a840:	4b39      	ldr	r3, [pc, #228]	; (800a928 <HAL_RCC_OscConfig+0x470>)
 800a842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a844:	4a38      	ldr	r2, [pc, #224]	; (800a928 <HAL_RCC_OscConfig+0x470>)
 800a846:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a84a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	699b      	ldr	r3, [r3, #24]
 800a850:	2b00      	cmp	r3, #0
 800a852:	f000 80a1 	beq.w	800a998 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a856:	4b34      	ldr	r3, [pc, #208]	; (800a928 <HAL_RCC_OscConfig+0x470>)
 800a858:	689b      	ldr	r3, [r3, #8]
 800a85a:	f003 030c 	and.w	r3, r3, #12
 800a85e:	2b08      	cmp	r3, #8
 800a860:	d05c      	beq.n	800a91c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	699b      	ldr	r3, [r3, #24]
 800a866:	2b02      	cmp	r3, #2
 800a868:	d141      	bne.n	800a8ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a86a:	4b31      	ldr	r3, [pc, #196]	; (800a930 <HAL_RCC_OscConfig+0x478>)
 800a86c:	2200      	movs	r2, #0
 800a86e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a870:	f7fb fcfc 	bl	800626c <HAL_GetTick>
 800a874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a876:	e008      	b.n	800a88a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a878:	f7fb fcf8 	bl	800626c <HAL_GetTick>
 800a87c:	4602      	mov	r2, r0
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	1ad3      	subs	r3, r2, r3
 800a882:	2b02      	cmp	r3, #2
 800a884:	d901      	bls.n	800a88a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a886:	2303      	movs	r3, #3
 800a888:	e087      	b.n	800a99a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a88a:	4b27      	ldr	r3, [pc, #156]	; (800a928 <HAL_RCC_OscConfig+0x470>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a892:	2b00      	cmp	r3, #0
 800a894:	d1f0      	bne.n	800a878 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	69da      	ldr	r2, [r3, #28]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6a1b      	ldr	r3, [r3, #32]
 800a89e:	431a      	orrs	r2, r3
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a4:	019b      	lsls	r3, r3, #6
 800a8a6:	431a      	orrs	r2, r3
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ac:	085b      	lsrs	r3, r3, #1
 800a8ae:	3b01      	subs	r3, #1
 800a8b0:	041b      	lsls	r3, r3, #16
 800a8b2:	431a      	orrs	r2, r3
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8b8:	061b      	lsls	r3, r3, #24
 800a8ba:	491b      	ldr	r1, [pc, #108]	; (800a928 <HAL_RCC_OscConfig+0x470>)
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a8c0:	4b1b      	ldr	r3, [pc, #108]	; (800a930 <HAL_RCC_OscConfig+0x478>)
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8c6:	f7fb fcd1 	bl	800626c <HAL_GetTick>
 800a8ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a8cc:	e008      	b.n	800a8e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a8ce:	f7fb fccd 	bl	800626c <HAL_GetTick>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	1ad3      	subs	r3, r2, r3
 800a8d8:	2b02      	cmp	r3, #2
 800a8da:	d901      	bls.n	800a8e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a8dc:	2303      	movs	r3, #3
 800a8de:	e05c      	b.n	800a99a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a8e0:	4b11      	ldr	r3, [pc, #68]	; (800a928 <HAL_RCC_OscConfig+0x470>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d0f0      	beq.n	800a8ce <HAL_RCC_OscConfig+0x416>
 800a8ec:	e054      	b.n	800a998 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a8ee:	4b10      	ldr	r3, [pc, #64]	; (800a930 <HAL_RCC_OscConfig+0x478>)
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8f4:	f7fb fcba 	bl	800626c <HAL_GetTick>
 800a8f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a8fa:	e008      	b.n	800a90e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a8fc:	f7fb fcb6 	bl	800626c <HAL_GetTick>
 800a900:	4602      	mov	r2, r0
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	1ad3      	subs	r3, r2, r3
 800a906:	2b02      	cmp	r3, #2
 800a908:	d901      	bls.n	800a90e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a90a:	2303      	movs	r3, #3
 800a90c:	e045      	b.n	800a99a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a90e:	4b06      	ldr	r3, [pc, #24]	; (800a928 <HAL_RCC_OscConfig+0x470>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a916:	2b00      	cmp	r3, #0
 800a918:	d1f0      	bne.n	800a8fc <HAL_RCC_OscConfig+0x444>
 800a91a:	e03d      	b.n	800a998 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	699b      	ldr	r3, [r3, #24]
 800a920:	2b01      	cmp	r3, #1
 800a922:	d107      	bne.n	800a934 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a924:	2301      	movs	r3, #1
 800a926:	e038      	b.n	800a99a <HAL_RCC_OscConfig+0x4e2>
 800a928:	40023800 	.word	0x40023800
 800a92c:	40007000 	.word	0x40007000
 800a930:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a934:	4b1b      	ldr	r3, [pc, #108]	; (800a9a4 <HAL_RCC_OscConfig+0x4ec>)
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	699b      	ldr	r3, [r3, #24]
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d028      	beq.n	800a994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d121      	bne.n	800a994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d11a      	bne.n	800a994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a95e:	68fa      	ldr	r2, [r7, #12]
 800a960:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a964:	4013      	ands	r3, r2
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a96a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d111      	bne.n	800a994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a97a:	085b      	lsrs	r3, r3, #1
 800a97c:	3b01      	subs	r3, #1
 800a97e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a980:	429a      	cmp	r2, r3
 800a982:	d107      	bne.n	800a994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a98e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a990:	429a      	cmp	r2, r3
 800a992:	d001      	beq.n	800a998 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a994:	2301      	movs	r3, #1
 800a996:	e000      	b.n	800a99a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a998:	2300      	movs	r3, #0
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3718      	adds	r7, #24
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	bf00      	nop
 800a9a4:	40023800 	.word	0x40023800

0800a9a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d101      	bne.n	800a9bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	e0cc      	b.n	800ab56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a9bc:	4b68      	ldr	r3, [pc, #416]	; (800ab60 <HAL_RCC_ClockConfig+0x1b8>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f003 0307 	and.w	r3, r3, #7
 800a9c4:	683a      	ldr	r2, [r7, #0]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d90c      	bls.n	800a9e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9ca:	4b65      	ldr	r3, [pc, #404]	; (800ab60 <HAL_RCC_ClockConfig+0x1b8>)
 800a9cc:	683a      	ldr	r2, [r7, #0]
 800a9ce:	b2d2      	uxtb	r2, r2
 800a9d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9d2:	4b63      	ldr	r3, [pc, #396]	; (800ab60 <HAL_RCC_ClockConfig+0x1b8>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f003 0307 	and.w	r3, r3, #7
 800a9da:	683a      	ldr	r2, [r7, #0]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d001      	beq.n	800a9e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e0b8      	b.n	800ab56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f003 0302 	and.w	r3, r3, #2
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d020      	beq.n	800aa32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f003 0304 	and.w	r3, r3, #4
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d005      	beq.n	800aa08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a9fc:	4b59      	ldr	r3, [pc, #356]	; (800ab64 <HAL_RCC_ClockConfig+0x1bc>)
 800a9fe:	689b      	ldr	r3, [r3, #8]
 800aa00:	4a58      	ldr	r2, [pc, #352]	; (800ab64 <HAL_RCC_ClockConfig+0x1bc>)
 800aa02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800aa06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f003 0308 	and.w	r3, r3, #8
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d005      	beq.n	800aa20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800aa14:	4b53      	ldr	r3, [pc, #332]	; (800ab64 <HAL_RCC_ClockConfig+0x1bc>)
 800aa16:	689b      	ldr	r3, [r3, #8]
 800aa18:	4a52      	ldr	r2, [pc, #328]	; (800ab64 <HAL_RCC_ClockConfig+0x1bc>)
 800aa1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800aa1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa20:	4b50      	ldr	r3, [pc, #320]	; (800ab64 <HAL_RCC_ClockConfig+0x1bc>)
 800aa22:	689b      	ldr	r3, [r3, #8]
 800aa24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	689b      	ldr	r3, [r3, #8]
 800aa2c:	494d      	ldr	r1, [pc, #308]	; (800ab64 <HAL_RCC_ClockConfig+0x1bc>)
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f003 0301 	and.w	r3, r3, #1
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d044      	beq.n	800aac8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d107      	bne.n	800aa56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aa46:	4b47      	ldr	r3, [pc, #284]	; (800ab64 <HAL_RCC_ClockConfig+0x1bc>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d119      	bne.n	800aa86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aa52:	2301      	movs	r3, #1
 800aa54:	e07f      	b.n	800ab56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	2b02      	cmp	r3, #2
 800aa5c:	d003      	beq.n	800aa66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800aa62:	2b03      	cmp	r3, #3
 800aa64:	d107      	bne.n	800aa76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aa66:	4b3f      	ldr	r3, [pc, #252]	; (800ab64 <HAL_RCC_ClockConfig+0x1bc>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d109      	bne.n	800aa86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aa72:	2301      	movs	r3, #1
 800aa74:	e06f      	b.n	800ab56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa76:	4b3b      	ldr	r3, [pc, #236]	; (800ab64 <HAL_RCC_ClockConfig+0x1bc>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f003 0302 	and.w	r3, r3, #2
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d101      	bne.n	800aa86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aa82:	2301      	movs	r3, #1
 800aa84:	e067      	b.n	800ab56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800aa86:	4b37      	ldr	r3, [pc, #220]	; (800ab64 <HAL_RCC_ClockConfig+0x1bc>)
 800aa88:	689b      	ldr	r3, [r3, #8]
 800aa8a:	f023 0203 	bic.w	r2, r3, #3
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	4934      	ldr	r1, [pc, #208]	; (800ab64 <HAL_RCC_ClockConfig+0x1bc>)
 800aa94:	4313      	orrs	r3, r2
 800aa96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800aa98:	f7fb fbe8 	bl	800626c <HAL_GetTick>
 800aa9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa9e:	e00a      	b.n	800aab6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aaa0:	f7fb fbe4 	bl	800626c <HAL_GetTick>
 800aaa4:	4602      	mov	r2, r0
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	1ad3      	subs	r3, r2, r3
 800aaaa:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d901      	bls.n	800aab6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800aab2:	2303      	movs	r3, #3
 800aab4:	e04f      	b.n	800ab56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aab6:	4b2b      	ldr	r3, [pc, #172]	; (800ab64 <HAL_RCC_ClockConfig+0x1bc>)
 800aab8:	689b      	ldr	r3, [r3, #8]
 800aaba:	f003 020c 	and.w	r2, r3, #12
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	685b      	ldr	r3, [r3, #4]
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d1eb      	bne.n	800aaa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800aac8:	4b25      	ldr	r3, [pc, #148]	; (800ab60 <HAL_RCC_ClockConfig+0x1b8>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f003 0307 	and.w	r3, r3, #7
 800aad0:	683a      	ldr	r2, [r7, #0]
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d20c      	bcs.n	800aaf0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aad6:	4b22      	ldr	r3, [pc, #136]	; (800ab60 <HAL_RCC_ClockConfig+0x1b8>)
 800aad8:	683a      	ldr	r2, [r7, #0]
 800aada:	b2d2      	uxtb	r2, r2
 800aadc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aade:	4b20      	ldr	r3, [pc, #128]	; (800ab60 <HAL_RCC_ClockConfig+0x1b8>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f003 0307 	and.w	r3, r3, #7
 800aae6:	683a      	ldr	r2, [r7, #0]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d001      	beq.n	800aaf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800aaec:	2301      	movs	r3, #1
 800aaee:	e032      	b.n	800ab56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f003 0304 	and.w	r3, r3, #4
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d008      	beq.n	800ab0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aafc:	4b19      	ldr	r3, [pc, #100]	; (800ab64 <HAL_RCC_ClockConfig+0x1bc>)
 800aafe:	689b      	ldr	r3, [r3, #8]
 800ab00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	68db      	ldr	r3, [r3, #12]
 800ab08:	4916      	ldr	r1, [pc, #88]	; (800ab64 <HAL_RCC_ClockConfig+0x1bc>)
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f003 0308 	and.w	r3, r3, #8
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d009      	beq.n	800ab2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ab1a:	4b12      	ldr	r3, [pc, #72]	; (800ab64 <HAL_RCC_ClockConfig+0x1bc>)
 800ab1c:	689b      	ldr	r3, [r3, #8]
 800ab1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	691b      	ldr	r3, [r3, #16]
 800ab26:	00db      	lsls	r3, r3, #3
 800ab28:	490e      	ldr	r1, [pc, #56]	; (800ab64 <HAL_RCC_ClockConfig+0x1bc>)
 800ab2a:	4313      	orrs	r3, r2
 800ab2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ab2e:	f000 f821 	bl	800ab74 <HAL_RCC_GetSysClockFreq>
 800ab32:	4602      	mov	r2, r0
 800ab34:	4b0b      	ldr	r3, [pc, #44]	; (800ab64 <HAL_RCC_ClockConfig+0x1bc>)
 800ab36:	689b      	ldr	r3, [r3, #8]
 800ab38:	091b      	lsrs	r3, r3, #4
 800ab3a:	f003 030f 	and.w	r3, r3, #15
 800ab3e:	490a      	ldr	r1, [pc, #40]	; (800ab68 <HAL_RCC_ClockConfig+0x1c0>)
 800ab40:	5ccb      	ldrb	r3, [r1, r3]
 800ab42:	fa22 f303 	lsr.w	r3, r2, r3
 800ab46:	4a09      	ldr	r2, [pc, #36]	; (800ab6c <HAL_RCC_ClockConfig+0x1c4>)
 800ab48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ab4a:	4b09      	ldr	r3, [pc, #36]	; (800ab70 <HAL_RCC_ClockConfig+0x1c8>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7fa fba8 	bl	80052a4 <HAL_InitTick>

  return HAL_OK;
 800ab54:	2300      	movs	r3, #0
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3710      	adds	r7, #16
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
 800ab5e:	bf00      	nop
 800ab60:	40023c00 	.word	0x40023c00
 800ab64:	40023800 	.word	0x40023800
 800ab68:	08014988 	.word	0x08014988
 800ab6c:	2000004c 	.word	0x2000004c
 800ab70:	20000050 	.word	0x20000050

0800ab74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ab74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ab78:	b094      	sub	sp, #80	; 0x50
 800ab7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	647b      	str	r3, [r7, #68]	; 0x44
 800ab80:	2300      	movs	r3, #0
 800ab82:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab84:	2300      	movs	r3, #0
 800ab86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ab8c:	4b79      	ldr	r3, [pc, #484]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x200>)
 800ab8e:	689b      	ldr	r3, [r3, #8]
 800ab90:	f003 030c 	and.w	r3, r3, #12
 800ab94:	2b08      	cmp	r3, #8
 800ab96:	d00d      	beq.n	800abb4 <HAL_RCC_GetSysClockFreq+0x40>
 800ab98:	2b08      	cmp	r3, #8
 800ab9a:	f200 80e1 	bhi.w	800ad60 <HAL_RCC_GetSysClockFreq+0x1ec>
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d002      	beq.n	800aba8 <HAL_RCC_GetSysClockFreq+0x34>
 800aba2:	2b04      	cmp	r3, #4
 800aba4:	d003      	beq.n	800abae <HAL_RCC_GetSysClockFreq+0x3a>
 800aba6:	e0db      	b.n	800ad60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800aba8:	4b73      	ldr	r3, [pc, #460]	; (800ad78 <HAL_RCC_GetSysClockFreq+0x204>)
 800abaa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800abac:	e0db      	b.n	800ad66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800abae:	4b73      	ldr	r3, [pc, #460]	; (800ad7c <HAL_RCC_GetSysClockFreq+0x208>)
 800abb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800abb2:	e0d8      	b.n	800ad66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800abb4:	4b6f      	ldr	r3, [pc, #444]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x200>)
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abbc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800abbe:	4b6d      	ldr	r3, [pc, #436]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x200>)
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d063      	beq.n	800ac92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800abca:	4b6a      	ldr	r3, [pc, #424]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x200>)
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	099b      	lsrs	r3, r3, #6
 800abd0:	2200      	movs	r2, #0
 800abd2:	63bb      	str	r3, [r7, #56]	; 0x38
 800abd4:	63fa      	str	r2, [r7, #60]	; 0x3c
 800abd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abdc:	633b      	str	r3, [r7, #48]	; 0x30
 800abde:	2300      	movs	r3, #0
 800abe0:	637b      	str	r3, [r7, #52]	; 0x34
 800abe2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800abe6:	4622      	mov	r2, r4
 800abe8:	462b      	mov	r3, r5
 800abea:	f04f 0000 	mov.w	r0, #0
 800abee:	f04f 0100 	mov.w	r1, #0
 800abf2:	0159      	lsls	r1, r3, #5
 800abf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800abf8:	0150      	lsls	r0, r2, #5
 800abfa:	4602      	mov	r2, r0
 800abfc:	460b      	mov	r3, r1
 800abfe:	4621      	mov	r1, r4
 800ac00:	1a51      	subs	r1, r2, r1
 800ac02:	6139      	str	r1, [r7, #16]
 800ac04:	4629      	mov	r1, r5
 800ac06:	eb63 0301 	sbc.w	r3, r3, r1
 800ac0a:	617b      	str	r3, [r7, #20]
 800ac0c:	f04f 0200 	mov.w	r2, #0
 800ac10:	f04f 0300 	mov.w	r3, #0
 800ac14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ac18:	4659      	mov	r1, fp
 800ac1a:	018b      	lsls	r3, r1, #6
 800ac1c:	4651      	mov	r1, sl
 800ac1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ac22:	4651      	mov	r1, sl
 800ac24:	018a      	lsls	r2, r1, #6
 800ac26:	4651      	mov	r1, sl
 800ac28:	ebb2 0801 	subs.w	r8, r2, r1
 800ac2c:	4659      	mov	r1, fp
 800ac2e:	eb63 0901 	sbc.w	r9, r3, r1
 800ac32:	f04f 0200 	mov.w	r2, #0
 800ac36:	f04f 0300 	mov.w	r3, #0
 800ac3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ac3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ac42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ac46:	4690      	mov	r8, r2
 800ac48:	4699      	mov	r9, r3
 800ac4a:	4623      	mov	r3, r4
 800ac4c:	eb18 0303 	adds.w	r3, r8, r3
 800ac50:	60bb      	str	r3, [r7, #8]
 800ac52:	462b      	mov	r3, r5
 800ac54:	eb49 0303 	adc.w	r3, r9, r3
 800ac58:	60fb      	str	r3, [r7, #12]
 800ac5a:	f04f 0200 	mov.w	r2, #0
 800ac5e:	f04f 0300 	mov.w	r3, #0
 800ac62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800ac66:	4629      	mov	r1, r5
 800ac68:	024b      	lsls	r3, r1, #9
 800ac6a:	4621      	mov	r1, r4
 800ac6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800ac70:	4621      	mov	r1, r4
 800ac72:	024a      	lsls	r2, r1, #9
 800ac74:	4610      	mov	r0, r2
 800ac76:	4619      	mov	r1, r3
 800ac78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ac80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ac84:	f7f5 fef2 	bl	8000a6c <__aeabi_uldivmod>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	460b      	mov	r3, r1
 800ac8c:	4613      	mov	r3, r2
 800ac8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac90:	e058      	b.n	800ad44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ac92:	4b38      	ldr	r3, [pc, #224]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x200>)
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	099b      	lsrs	r3, r3, #6
 800ac98:	2200      	movs	r2, #0
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	4611      	mov	r1, r2
 800ac9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800aca2:	623b      	str	r3, [r7, #32]
 800aca4:	2300      	movs	r3, #0
 800aca6:	627b      	str	r3, [r7, #36]	; 0x24
 800aca8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800acac:	4642      	mov	r2, r8
 800acae:	464b      	mov	r3, r9
 800acb0:	f04f 0000 	mov.w	r0, #0
 800acb4:	f04f 0100 	mov.w	r1, #0
 800acb8:	0159      	lsls	r1, r3, #5
 800acba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800acbe:	0150      	lsls	r0, r2, #5
 800acc0:	4602      	mov	r2, r0
 800acc2:	460b      	mov	r3, r1
 800acc4:	4641      	mov	r1, r8
 800acc6:	ebb2 0a01 	subs.w	sl, r2, r1
 800acca:	4649      	mov	r1, r9
 800accc:	eb63 0b01 	sbc.w	fp, r3, r1
 800acd0:	f04f 0200 	mov.w	r2, #0
 800acd4:	f04f 0300 	mov.w	r3, #0
 800acd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800acdc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800ace0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800ace4:	ebb2 040a 	subs.w	r4, r2, sl
 800ace8:	eb63 050b 	sbc.w	r5, r3, fp
 800acec:	f04f 0200 	mov.w	r2, #0
 800acf0:	f04f 0300 	mov.w	r3, #0
 800acf4:	00eb      	lsls	r3, r5, #3
 800acf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800acfa:	00e2      	lsls	r2, r4, #3
 800acfc:	4614      	mov	r4, r2
 800acfe:	461d      	mov	r5, r3
 800ad00:	4643      	mov	r3, r8
 800ad02:	18e3      	adds	r3, r4, r3
 800ad04:	603b      	str	r3, [r7, #0]
 800ad06:	464b      	mov	r3, r9
 800ad08:	eb45 0303 	adc.w	r3, r5, r3
 800ad0c:	607b      	str	r3, [r7, #4]
 800ad0e:	f04f 0200 	mov.w	r2, #0
 800ad12:	f04f 0300 	mov.w	r3, #0
 800ad16:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ad1a:	4629      	mov	r1, r5
 800ad1c:	028b      	lsls	r3, r1, #10
 800ad1e:	4621      	mov	r1, r4
 800ad20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ad24:	4621      	mov	r1, r4
 800ad26:	028a      	lsls	r2, r1, #10
 800ad28:	4610      	mov	r0, r2
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad2e:	2200      	movs	r2, #0
 800ad30:	61bb      	str	r3, [r7, #24]
 800ad32:	61fa      	str	r2, [r7, #28]
 800ad34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ad38:	f7f5 fe98 	bl	8000a6c <__aeabi_uldivmod>
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	460b      	mov	r3, r1
 800ad40:	4613      	mov	r3, r2
 800ad42:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ad44:	4b0b      	ldr	r3, [pc, #44]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x200>)
 800ad46:	685b      	ldr	r3, [r3, #4]
 800ad48:	0c1b      	lsrs	r3, r3, #16
 800ad4a:	f003 0303 	and.w	r3, r3, #3
 800ad4e:	3301      	adds	r3, #1
 800ad50:	005b      	lsls	r3, r3, #1
 800ad52:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800ad54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad58:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800ad5e:	e002      	b.n	800ad66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ad60:	4b05      	ldr	r3, [pc, #20]	; (800ad78 <HAL_RCC_GetSysClockFreq+0x204>)
 800ad62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800ad64:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ad66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3750      	adds	r7, #80	; 0x50
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ad72:	bf00      	nop
 800ad74:	40023800 	.word	0x40023800
 800ad78:	00f42400 	.word	0x00f42400
 800ad7c:	007a1200 	.word	0x007a1200

0800ad80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ad80:	b480      	push	{r7}
 800ad82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ad84:	4b03      	ldr	r3, [pc, #12]	; (800ad94 <HAL_RCC_GetHCLKFreq+0x14>)
 800ad86:	681b      	ldr	r3, [r3, #0]
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr
 800ad92:	bf00      	nop
 800ad94:	2000004c 	.word	0x2000004c

0800ad98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ad9c:	f7ff fff0 	bl	800ad80 <HAL_RCC_GetHCLKFreq>
 800ada0:	4602      	mov	r2, r0
 800ada2:	4b05      	ldr	r3, [pc, #20]	; (800adb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ada4:	689b      	ldr	r3, [r3, #8]
 800ada6:	0a9b      	lsrs	r3, r3, #10
 800ada8:	f003 0307 	and.w	r3, r3, #7
 800adac:	4903      	ldr	r1, [pc, #12]	; (800adbc <HAL_RCC_GetPCLK1Freq+0x24>)
 800adae:	5ccb      	ldrb	r3, [r1, r3]
 800adb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	bd80      	pop	{r7, pc}
 800adb8:	40023800 	.word	0x40023800
 800adbc:	08014998 	.word	0x08014998

0800adc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800adc4:	f7ff ffdc 	bl	800ad80 <HAL_RCC_GetHCLKFreq>
 800adc8:	4602      	mov	r2, r0
 800adca:	4b05      	ldr	r3, [pc, #20]	; (800ade0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800adcc:	689b      	ldr	r3, [r3, #8]
 800adce:	0b5b      	lsrs	r3, r3, #13
 800add0:	f003 0307 	and.w	r3, r3, #7
 800add4:	4903      	ldr	r1, [pc, #12]	; (800ade4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800add6:	5ccb      	ldrb	r3, [r1, r3]
 800add8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800addc:	4618      	mov	r0, r3
 800adde:	bd80      	pop	{r7, pc}
 800ade0:	40023800 	.word	0x40023800
 800ade4:	08014998 	.word	0x08014998

0800ade8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ade8:	b480      	push	{r7}
 800adea:	b083      	sub	sp, #12
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	220f      	movs	r2, #15
 800adf6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800adf8:	4b12      	ldr	r3, [pc, #72]	; (800ae44 <HAL_RCC_GetClockConfig+0x5c>)
 800adfa:	689b      	ldr	r3, [r3, #8]
 800adfc:	f003 0203 	and.w	r2, r3, #3
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ae04:	4b0f      	ldr	r3, [pc, #60]	; (800ae44 <HAL_RCC_GetClockConfig+0x5c>)
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ae10:	4b0c      	ldr	r3, [pc, #48]	; (800ae44 <HAL_RCC_GetClockConfig+0x5c>)
 800ae12:	689b      	ldr	r3, [r3, #8]
 800ae14:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800ae1c:	4b09      	ldr	r3, [pc, #36]	; (800ae44 <HAL_RCC_GetClockConfig+0x5c>)
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	08db      	lsrs	r3, r3, #3
 800ae22:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ae2a:	4b07      	ldr	r3, [pc, #28]	; (800ae48 <HAL_RCC_GetClockConfig+0x60>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f003 0207 	and.w	r2, r3, #7
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	601a      	str	r2, [r3, #0]
}
 800ae36:	bf00      	nop
 800ae38:	370c      	adds	r7, #12
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae40:	4770      	bx	lr
 800ae42:	bf00      	nop
 800ae44:	40023800 	.word	0x40023800
 800ae48:	40023c00 	.word	0x40023c00

0800ae4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b082      	sub	sp, #8
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d101      	bne.n	800ae5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	e04c      	b.n	800aef8 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d111      	bne.n	800ae8e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f001 fc0e 	bl	800c694 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d102      	bne.n	800ae86 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	4a1f      	ldr	r2, [pc, #124]	; (800af00 <HAL_TIM_Base_Init+0xb4>)
 800ae84:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2202      	movs	r2, #2
 800ae92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681a      	ldr	r2, [r3, #0]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	3304      	adds	r3, #4
 800ae9e:	4619      	mov	r1, r3
 800aea0:	4610      	mov	r0, r2
 800aea2:	f001 f80d 	bl	800bec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2201      	movs	r2, #1
 800aeaa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2201      	movs	r2, #1
 800aeb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2201      	movs	r2, #1
 800aeba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2201      	movs	r2, #1
 800aec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2201      	movs	r2, #1
 800aeca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2201      	movs	r2, #1
 800aed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2201      	movs	r2, #1
 800aeda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2201      	movs	r2, #1
 800aee2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2201      	movs	r2, #1
 800aeea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2201      	movs	r2, #1
 800aef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aef6:	2300      	movs	r3, #0
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3708      	adds	r7, #8
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}
 800af00:	08005799 	.word	0x08005799

0800af04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800af04:	b480      	push	{r7}
 800af06:	b085      	sub	sp, #20
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af12:	b2db      	uxtb	r3, r3
 800af14:	2b01      	cmp	r3, #1
 800af16:	d001      	beq.n	800af1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800af18:	2301      	movs	r3, #1
 800af1a:	e044      	b.n	800afa6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2202      	movs	r2, #2
 800af20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	68da      	ldr	r2, [r3, #12]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f042 0201 	orr.w	r2, r2, #1
 800af32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4a1e      	ldr	r2, [pc, #120]	; (800afb4 <HAL_TIM_Base_Start_IT+0xb0>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d018      	beq.n	800af70 <HAL_TIM_Base_Start_IT+0x6c>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af46:	d013      	beq.n	800af70 <HAL_TIM_Base_Start_IT+0x6c>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a1a      	ldr	r2, [pc, #104]	; (800afb8 <HAL_TIM_Base_Start_IT+0xb4>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d00e      	beq.n	800af70 <HAL_TIM_Base_Start_IT+0x6c>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4a19      	ldr	r2, [pc, #100]	; (800afbc <HAL_TIM_Base_Start_IT+0xb8>)
 800af58:	4293      	cmp	r3, r2
 800af5a:	d009      	beq.n	800af70 <HAL_TIM_Base_Start_IT+0x6c>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	4a17      	ldr	r2, [pc, #92]	; (800afc0 <HAL_TIM_Base_Start_IT+0xbc>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d004      	beq.n	800af70 <HAL_TIM_Base_Start_IT+0x6c>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4a16      	ldr	r2, [pc, #88]	; (800afc4 <HAL_TIM_Base_Start_IT+0xc0>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d111      	bne.n	800af94 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	689b      	ldr	r3, [r3, #8]
 800af76:	f003 0307 	and.w	r3, r3, #7
 800af7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	2b06      	cmp	r3, #6
 800af80:	d010      	beq.n	800afa4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f042 0201 	orr.w	r2, r2, #1
 800af90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af92:	e007      	b.n	800afa4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	681a      	ldr	r2, [r3, #0]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f042 0201 	orr.w	r2, r2, #1
 800afa2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800afa4:	2300      	movs	r3, #0
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3714      	adds	r7, #20
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr
 800afb2:	bf00      	nop
 800afb4:	40010000 	.word	0x40010000
 800afb8:	40000400 	.word	0x40000400
 800afbc:	40000800 	.word	0x40000800
 800afc0:	40000c00 	.word	0x40000c00
 800afc4:	40014000 	.word	0x40014000

0800afc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b082      	sub	sp, #8
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d101      	bne.n	800afda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800afd6:	2301      	movs	r3, #1
 800afd8:	e04c      	b.n	800b074 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afe0:	b2db      	uxtb	r3, r3
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d111      	bne.n	800b00a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2200      	movs	r2, #0
 800afea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f001 fb50 	bl	800c694 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d102      	bne.n	800b002 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	4a1f      	ldr	r2, [pc, #124]	; (800b07c <HAL_TIM_PWM_Init+0xb4>)
 800b000:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2202      	movs	r2, #2
 800b00e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681a      	ldr	r2, [r3, #0]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	3304      	adds	r3, #4
 800b01a:	4619      	mov	r1, r3
 800b01c:	4610      	mov	r0, r2
 800b01e:	f000 ff4f 	bl	800bec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2201      	movs	r2, #1
 800b026:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2201      	movs	r2, #1
 800b02e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2201      	movs	r2, #1
 800b036:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2201      	movs	r2, #1
 800b03e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2201      	movs	r2, #1
 800b046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2201      	movs	r2, #1
 800b04e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2201      	movs	r2, #1
 800b056:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2201      	movs	r2, #1
 800b05e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2201      	movs	r2, #1
 800b066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2201      	movs	r2, #1
 800b06e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b072:	2300      	movs	r3, #0
}
 800b074:	4618      	mov	r0, r3
 800b076:	3708      	adds	r7, #8
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}
 800b07c:	0800b081 	.word	0x0800b081

0800b080 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b080:	b480      	push	{r7}
 800b082:	b083      	sub	sp, #12
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b088:	bf00      	nop
 800b08a:	370c      	adds	r7, #12
 800b08c:	46bd      	mov	sp, r7
 800b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b092:	4770      	bx	lr

0800b094 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b084      	sub	sp, #16
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
 800b09c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d109      	bne.n	800b0bc <HAL_TIM_PWM_Start_IT+0x28>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	bf14      	ite	ne
 800b0b4:	2301      	movne	r3, #1
 800b0b6:	2300      	moveq	r3, #0
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	e022      	b.n	800b102 <HAL_TIM_PWM_Start_IT+0x6e>
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	2b04      	cmp	r3, #4
 800b0c0:	d109      	bne.n	800b0d6 <HAL_TIM_PWM_Start_IT+0x42>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b0c8:	b2db      	uxtb	r3, r3
 800b0ca:	2b01      	cmp	r3, #1
 800b0cc:	bf14      	ite	ne
 800b0ce:	2301      	movne	r3, #1
 800b0d0:	2300      	moveq	r3, #0
 800b0d2:	b2db      	uxtb	r3, r3
 800b0d4:	e015      	b.n	800b102 <HAL_TIM_PWM_Start_IT+0x6e>
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	2b08      	cmp	r3, #8
 800b0da:	d109      	bne.n	800b0f0 <HAL_TIM_PWM_Start_IT+0x5c>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b0e2:	b2db      	uxtb	r3, r3
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	bf14      	ite	ne
 800b0e8:	2301      	movne	r3, #1
 800b0ea:	2300      	moveq	r3, #0
 800b0ec:	b2db      	uxtb	r3, r3
 800b0ee:	e008      	b.n	800b102 <HAL_TIM_PWM_Start_IT+0x6e>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0f6:	b2db      	uxtb	r3, r3
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	bf14      	ite	ne
 800b0fc:	2301      	movne	r3, #1
 800b0fe:	2300      	moveq	r3, #0
 800b100:	b2db      	uxtb	r3, r3
 800b102:	2b00      	cmp	r3, #0
 800b104:	d001      	beq.n	800b10a <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800b106:	2301      	movs	r3, #1
 800b108:	e0b3      	b.n	800b272 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d104      	bne.n	800b11a <HAL_TIM_PWM_Start_IT+0x86>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2202      	movs	r2, #2
 800b114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b118:	e013      	b.n	800b142 <HAL_TIM_PWM_Start_IT+0xae>
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	2b04      	cmp	r3, #4
 800b11e:	d104      	bne.n	800b12a <HAL_TIM_PWM_Start_IT+0x96>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2202      	movs	r2, #2
 800b124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b128:	e00b      	b.n	800b142 <HAL_TIM_PWM_Start_IT+0xae>
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	2b08      	cmp	r3, #8
 800b12e:	d104      	bne.n	800b13a <HAL_TIM_PWM_Start_IT+0xa6>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2202      	movs	r2, #2
 800b134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b138:	e003      	b.n	800b142 <HAL_TIM_PWM_Start_IT+0xae>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2202      	movs	r2, #2
 800b13e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	2b0c      	cmp	r3, #12
 800b146:	d841      	bhi.n	800b1cc <HAL_TIM_PWM_Start_IT+0x138>
 800b148:	a201      	add	r2, pc, #4	; (adr r2, 800b150 <HAL_TIM_PWM_Start_IT+0xbc>)
 800b14a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b14e:	bf00      	nop
 800b150:	0800b185 	.word	0x0800b185
 800b154:	0800b1cd 	.word	0x0800b1cd
 800b158:	0800b1cd 	.word	0x0800b1cd
 800b15c:	0800b1cd 	.word	0x0800b1cd
 800b160:	0800b197 	.word	0x0800b197
 800b164:	0800b1cd 	.word	0x0800b1cd
 800b168:	0800b1cd 	.word	0x0800b1cd
 800b16c:	0800b1cd 	.word	0x0800b1cd
 800b170:	0800b1a9 	.word	0x0800b1a9
 800b174:	0800b1cd 	.word	0x0800b1cd
 800b178:	0800b1cd 	.word	0x0800b1cd
 800b17c:	0800b1cd 	.word	0x0800b1cd
 800b180:	0800b1bb 	.word	0x0800b1bb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	68da      	ldr	r2, [r3, #12]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f042 0202 	orr.w	r2, r2, #2
 800b192:	60da      	str	r2, [r3, #12]
      break;
 800b194:	e01d      	b.n	800b1d2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	68da      	ldr	r2, [r3, #12]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f042 0204 	orr.w	r2, r2, #4
 800b1a4:	60da      	str	r2, [r3, #12]
      break;
 800b1a6:	e014      	b.n	800b1d2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	68da      	ldr	r2, [r3, #12]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f042 0208 	orr.w	r2, r2, #8
 800b1b6:	60da      	str	r2, [r3, #12]
      break;
 800b1b8:	e00b      	b.n	800b1d2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	68da      	ldr	r2, [r3, #12]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f042 0210 	orr.w	r2, r2, #16
 800b1c8:	60da      	str	r2, [r3, #12]
      break;
 800b1ca:	e002      	b.n	800b1d2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	73fb      	strb	r3, [r7, #15]
      break;
 800b1d0:	bf00      	nop
  }

  if (status == HAL_OK)
 800b1d2:	7bfb      	ldrb	r3, [r7, #15]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d14b      	bne.n	800b270 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	2201      	movs	r2, #1
 800b1de:	6839      	ldr	r1, [r7, #0]
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f001 fa31 	bl	800c648 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4a24      	ldr	r2, [pc, #144]	; (800b27c <HAL_TIM_PWM_Start_IT+0x1e8>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d107      	bne.n	800b200 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b1fe:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4a1d      	ldr	r2, [pc, #116]	; (800b27c <HAL_TIM_PWM_Start_IT+0x1e8>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d018      	beq.n	800b23c <HAL_TIM_PWM_Start_IT+0x1a8>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b212:	d013      	beq.n	800b23c <HAL_TIM_PWM_Start_IT+0x1a8>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4a19      	ldr	r2, [pc, #100]	; (800b280 <HAL_TIM_PWM_Start_IT+0x1ec>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d00e      	beq.n	800b23c <HAL_TIM_PWM_Start_IT+0x1a8>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	4a18      	ldr	r2, [pc, #96]	; (800b284 <HAL_TIM_PWM_Start_IT+0x1f0>)
 800b224:	4293      	cmp	r3, r2
 800b226:	d009      	beq.n	800b23c <HAL_TIM_PWM_Start_IT+0x1a8>
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	4a16      	ldr	r2, [pc, #88]	; (800b288 <HAL_TIM_PWM_Start_IT+0x1f4>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d004      	beq.n	800b23c <HAL_TIM_PWM_Start_IT+0x1a8>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4a15      	ldr	r2, [pc, #84]	; (800b28c <HAL_TIM_PWM_Start_IT+0x1f8>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d111      	bne.n	800b260 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	689b      	ldr	r3, [r3, #8]
 800b242:	f003 0307 	and.w	r3, r3, #7
 800b246:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	2b06      	cmp	r3, #6
 800b24c:	d010      	beq.n	800b270 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	681a      	ldr	r2, [r3, #0]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f042 0201 	orr.w	r2, r2, #1
 800b25c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b25e:	e007      	b.n	800b270 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f042 0201 	orr.w	r2, r2, #1
 800b26e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800b270:	7bfb      	ldrb	r3, [r7, #15]
}
 800b272:	4618      	mov	r0, r3
 800b274:	3710      	adds	r7, #16
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop
 800b27c:	40010000 	.word	0x40010000
 800b280:	40000400 	.word	0x40000400
 800b284:	40000800 	.word	0x40000800
 800b288:	40000c00 	.word	0x40000c00
 800b28c:	40014000 	.word	0x40014000

0800b290 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b29a:	2300      	movs	r3, #0
 800b29c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	2b0c      	cmp	r3, #12
 800b2a2:	d841      	bhi.n	800b328 <HAL_TIM_PWM_Stop_IT+0x98>
 800b2a4:	a201      	add	r2, pc, #4	; (adr r2, 800b2ac <HAL_TIM_PWM_Stop_IT+0x1c>)
 800b2a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2aa:	bf00      	nop
 800b2ac:	0800b2e1 	.word	0x0800b2e1
 800b2b0:	0800b329 	.word	0x0800b329
 800b2b4:	0800b329 	.word	0x0800b329
 800b2b8:	0800b329 	.word	0x0800b329
 800b2bc:	0800b2f3 	.word	0x0800b2f3
 800b2c0:	0800b329 	.word	0x0800b329
 800b2c4:	0800b329 	.word	0x0800b329
 800b2c8:	0800b329 	.word	0x0800b329
 800b2cc:	0800b305 	.word	0x0800b305
 800b2d0:	0800b329 	.word	0x0800b329
 800b2d4:	0800b329 	.word	0x0800b329
 800b2d8:	0800b329 	.word	0x0800b329
 800b2dc:	0800b317 	.word	0x0800b317
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	68da      	ldr	r2, [r3, #12]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f022 0202 	bic.w	r2, r2, #2
 800b2ee:	60da      	str	r2, [r3, #12]
      break;
 800b2f0:	e01d      	b.n	800b32e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	68da      	ldr	r2, [r3, #12]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f022 0204 	bic.w	r2, r2, #4
 800b300:	60da      	str	r2, [r3, #12]
      break;
 800b302:	e014      	b.n	800b32e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	68da      	ldr	r2, [r3, #12]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f022 0208 	bic.w	r2, r2, #8
 800b312:	60da      	str	r2, [r3, #12]
      break;
 800b314:	e00b      	b.n	800b32e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	68da      	ldr	r2, [r3, #12]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f022 0210 	bic.w	r2, r2, #16
 800b324:	60da      	str	r2, [r3, #12]
      break;
 800b326:	e002      	b.n	800b32e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800b328:	2301      	movs	r3, #1
 800b32a:	73fb      	strb	r3, [r7, #15]
      break;
 800b32c:	bf00      	nop
  }

  if (status == HAL_OK)
 800b32e:	7bfb      	ldrb	r3, [r7, #15]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d157      	bne.n	800b3e4 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	2200      	movs	r2, #0
 800b33a:	6839      	ldr	r1, [r7, #0]
 800b33c:	4618      	mov	r0, r3
 800b33e:	f001 f983 	bl	800c648 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4a2a      	ldr	r2, [pc, #168]	; (800b3f0 <HAL_TIM_PWM_Stop_IT+0x160>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d117      	bne.n	800b37c <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	6a1a      	ldr	r2, [r3, #32]
 800b352:	f241 1311 	movw	r3, #4369	; 0x1111
 800b356:	4013      	ands	r3, r2
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d10f      	bne.n	800b37c <HAL_TIM_PWM_Stop_IT+0xec>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	6a1a      	ldr	r2, [r3, #32]
 800b362:	f240 4344 	movw	r3, #1092	; 0x444
 800b366:	4013      	ands	r3, r2
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d107      	bne.n	800b37c <HAL_TIM_PWM_Stop_IT+0xec>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b37a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	6a1a      	ldr	r2, [r3, #32]
 800b382:	f241 1311 	movw	r3, #4369	; 0x1111
 800b386:	4013      	ands	r3, r2
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d10f      	bne.n	800b3ac <HAL_TIM_PWM_Stop_IT+0x11c>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	6a1a      	ldr	r2, [r3, #32]
 800b392:	f240 4344 	movw	r3, #1092	; 0x444
 800b396:	4013      	ands	r3, r2
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d107      	bne.n	800b3ac <HAL_TIM_PWM_Stop_IT+0x11c>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	681a      	ldr	r2, [r3, #0]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f022 0201 	bic.w	r2, r2, #1
 800b3aa:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d104      	bne.n	800b3bc <HAL_TIM_PWM_Stop_IT+0x12c>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2201      	movs	r2, #1
 800b3b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b3ba:	e013      	b.n	800b3e4 <HAL_TIM_PWM_Stop_IT+0x154>
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	2b04      	cmp	r3, #4
 800b3c0:	d104      	bne.n	800b3cc <HAL_TIM_PWM_Stop_IT+0x13c>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b3ca:	e00b      	b.n	800b3e4 <HAL_TIM_PWM_Stop_IT+0x154>
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	2b08      	cmp	r3, #8
 800b3d0:	d104      	bne.n	800b3dc <HAL_TIM_PWM_Stop_IT+0x14c>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b3da:	e003      	b.n	800b3e4 <HAL_TIM_PWM_Stop_IT+0x154>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2201      	movs	r2, #1
 800b3e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800b3e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3710      	adds	r7, #16
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}
 800b3ee:	bf00      	nop
 800b3f0:	40010000 	.word	0x40010000

0800b3f4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b082      	sub	sp, #8
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d101      	bne.n	800b406 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800b402:	2301      	movs	r3, #1
 800b404:	e04c      	b.n	800b4a0 <HAL_TIM_IC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b40c:	b2db      	uxtb	r3, r3
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d111      	bne.n	800b436 <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2200      	movs	r2, #0
 800b416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f001 f93a 	bl	800c694 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b424:	2b00      	cmp	r3, #0
 800b426:	d102      	bne.n	800b42e <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	4a1f      	ldr	r2, [pc, #124]	; (800b4a8 <HAL_TIM_IC_Init+0xb4>)
 800b42c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2202      	movs	r2, #2
 800b43a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681a      	ldr	r2, [r3, #0]
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	3304      	adds	r3, #4
 800b446:	4619      	mov	r1, r3
 800b448:	4610      	mov	r0, r2
 800b44a:	f000 fd39 	bl	800bec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2201      	movs	r2, #1
 800b452:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2201      	movs	r2, #1
 800b45a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2201      	movs	r2, #1
 800b462:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2201      	movs	r2, #1
 800b46a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2201      	movs	r2, #1
 800b472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2201      	movs	r2, #1
 800b47a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2201      	movs	r2, #1
 800b482:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2201      	movs	r2, #1
 800b48a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2201      	movs	r2, #1
 800b492:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2201      	movs	r2, #1
 800b49a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b49e:	2300      	movs	r3, #0
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3708      	adds	r7, #8
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}
 800b4a8:	0800b4ad 	.word	0x0800b4ad

0800b4ac <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b083      	sub	sp, #12
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800b4b4:	bf00      	nop
 800b4b6:	370c      	adds	r7, #12
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr

0800b4c0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b084      	sub	sp, #16
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d104      	bne.n	800b4de <HAL_TIM_IC_Start_IT+0x1e>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b4da:	b2db      	uxtb	r3, r3
 800b4dc:	e013      	b.n	800b506 <HAL_TIM_IC_Start_IT+0x46>
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	2b04      	cmp	r3, #4
 800b4e2:	d104      	bne.n	800b4ee <HAL_TIM_IC_Start_IT+0x2e>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b4ea:	b2db      	uxtb	r3, r3
 800b4ec:	e00b      	b.n	800b506 <HAL_TIM_IC_Start_IT+0x46>
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	2b08      	cmp	r3, #8
 800b4f2:	d104      	bne.n	800b4fe <HAL_TIM_IC_Start_IT+0x3e>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b4fa:	b2db      	uxtb	r3, r3
 800b4fc:	e003      	b.n	800b506 <HAL_TIM_IC_Start_IT+0x46>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b504:	b2db      	uxtb	r3, r3
 800b506:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d104      	bne.n	800b518 <HAL_TIM_IC_Start_IT+0x58>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b514:	b2db      	uxtb	r3, r3
 800b516:	e013      	b.n	800b540 <HAL_TIM_IC_Start_IT+0x80>
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	2b04      	cmp	r3, #4
 800b51c:	d104      	bne.n	800b528 <HAL_TIM_IC_Start_IT+0x68>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b524:	b2db      	uxtb	r3, r3
 800b526:	e00b      	b.n	800b540 <HAL_TIM_IC_Start_IT+0x80>
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	2b08      	cmp	r3, #8
 800b52c:	d104      	bne.n	800b538 <HAL_TIM_IC_Start_IT+0x78>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b534:	b2db      	uxtb	r3, r3
 800b536:	e003      	b.n	800b540 <HAL_TIM_IC_Start_IT+0x80>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b53e:	b2db      	uxtb	r3, r3
 800b540:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800b542:	7bbb      	ldrb	r3, [r7, #14]
 800b544:	2b01      	cmp	r3, #1
 800b546:	d102      	bne.n	800b54e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800b548:	7b7b      	ldrb	r3, [r7, #13]
 800b54a:	2b01      	cmp	r3, #1
 800b54c:	d001      	beq.n	800b552 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800b54e:	2301      	movs	r3, #1
 800b550:	e0c2      	b.n	800b6d8 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d104      	bne.n	800b562 <HAL_TIM_IC_Start_IT+0xa2>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2202      	movs	r2, #2
 800b55c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b560:	e013      	b.n	800b58a <HAL_TIM_IC_Start_IT+0xca>
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	2b04      	cmp	r3, #4
 800b566:	d104      	bne.n	800b572 <HAL_TIM_IC_Start_IT+0xb2>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2202      	movs	r2, #2
 800b56c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b570:	e00b      	b.n	800b58a <HAL_TIM_IC_Start_IT+0xca>
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	2b08      	cmp	r3, #8
 800b576:	d104      	bne.n	800b582 <HAL_TIM_IC_Start_IT+0xc2>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2202      	movs	r2, #2
 800b57c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b580:	e003      	b.n	800b58a <HAL_TIM_IC_Start_IT+0xca>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2202      	movs	r2, #2
 800b586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d104      	bne.n	800b59a <HAL_TIM_IC_Start_IT+0xda>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2202      	movs	r2, #2
 800b594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b598:	e013      	b.n	800b5c2 <HAL_TIM_IC_Start_IT+0x102>
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	2b04      	cmp	r3, #4
 800b59e:	d104      	bne.n	800b5aa <HAL_TIM_IC_Start_IT+0xea>
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2202      	movs	r2, #2
 800b5a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b5a8:	e00b      	b.n	800b5c2 <HAL_TIM_IC_Start_IT+0x102>
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	2b08      	cmp	r3, #8
 800b5ae:	d104      	bne.n	800b5ba <HAL_TIM_IC_Start_IT+0xfa>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2202      	movs	r2, #2
 800b5b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5b8:	e003      	b.n	800b5c2 <HAL_TIM_IC_Start_IT+0x102>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2202      	movs	r2, #2
 800b5be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	2b0c      	cmp	r3, #12
 800b5c6:	d841      	bhi.n	800b64c <HAL_TIM_IC_Start_IT+0x18c>
 800b5c8:	a201      	add	r2, pc, #4	; (adr r2, 800b5d0 <HAL_TIM_IC_Start_IT+0x110>)
 800b5ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5ce:	bf00      	nop
 800b5d0:	0800b605 	.word	0x0800b605
 800b5d4:	0800b64d 	.word	0x0800b64d
 800b5d8:	0800b64d 	.word	0x0800b64d
 800b5dc:	0800b64d 	.word	0x0800b64d
 800b5e0:	0800b617 	.word	0x0800b617
 800b5e4:	0800b64d 	.word	0x0800b64d
 800b5e8:	0800b64d 	.word	0x0800b64d
 800b5ec:	0800b64d 	.word	0x0800b64d
 800b5f0:	0800b629 	.word	0x0800b629
 800b5f4:	0800b64d 	.word	0x0800b64d
 800b5f8:	0800b64d 	.word	0x0800b64d
 800b5fc:	0800b64d 	.word	0x0800b64d
 800b600:	0800b63b 	.word	0x0800b63b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	68da      	ldr	r2, [r3, #12]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f042 0202 	orr.w	r2, r2, #2
 800b612:	60da      	str	r2, [r3, #12]
      break;
 800b614:	e01d      	b.n	800b652 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	68da      	ldr	r2, [r3, #12]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f042 0204 	orr.w	r2, r2, #4
 800b624:	60da      	str	r2, [r3, #12]
      break;
 800b626:	e014      	b.n	800b652 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	68da      	ldr	r2, [r3, #12]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f042 0208 	orr.w	r2, r2, #8
 800b636:	60da      	str	r2, [r3, #12]
      break;
 800b638:	e00b      	b.n	800b652 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	68da      	ldr	r2, [r3, #12]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f042 0210 	orr.w	r2, r2, #16
 800b648:	60da      	str	r2, [r3, #12]
      break;
 800b64a:	e002      	b.n	800b652 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800b64c:	2301      	movs	r3, #1
 800b64e:	73fb      	strb	r3, [r7, #15]
      break;
 800b650:	bf00      	nop
  }

  if (status == HAL_OK)
 800b652:	7bfb      	ldrb	r3, [r7, #15]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d13e      	bne.n	800b6d6 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	2201      	movs	r2, #1
 800b65e:	6839      	ldr	r1, [r7, #0]
 800b660:	4618      	mov	r0, r3
 800b662:	f000 fff1 	bl	800c648 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4a1d      	ldr	r2, [pc, #116]	; (800b6e0 <HAL_TIM_IC_Start_IT+0x220>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d018      	beq.n	800b6a2 <HAL_TIM_IC_Start_IT+0x1e2>
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b678:	d013      	beq.n	800b6a2 <HAL_TIM_IC_Start_IT+0x1e2>
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	4a19      	ldr	r2, [pc, #100]	; (800b6e4 <HAL_TIM_IC_Start_IT+0x224>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d00e      	beq.n	800b6a2 <HAL_TIM_IC_Start_IT+0x1e2>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	4a17      	ldr	r2, [pc, #92]	; (800b6e8 <HAL_TIM_IC_Start_IT+0x228>)
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d009      	beq.n	800b6a2 <HAL_TIM_IC_Start_IT+0x1e2>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	4a16      	ldr	r2, [pc, #88]	; (800b6ec <HAL_TIM_IC_Start_IT+0x22c>)
 800b694:	4293      	cmp	r3, r2
 800b696:	d004      	beq.n	800b6a2 <HAL_TIM_IC_Start_IT+0x1e2>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4a14      	ldr	r2, [pc, #80]	; (800b6f0 <HAL_TIM_IC_Start_IT+0x230>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d111      	bne.n	800b6c6 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	f003 0307 	and.w	r3, r3, #7
 800b6ac:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	2b06      	cmp	r3, #6
 800b6b2:	d010      	beq.n	800b6d6 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	681a      	ldr	r2, [r3, #0]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f042 0201 	orr.w	r2, r2, #1
 800b6c2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6c4:	e007      	b.n	800b6d6 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	681a      	ldr	r2, [r3, #0]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f042 0201 	orr.w	r2, r2, #1
 800b6d4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800b6d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3710      	adds	r7, #16
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}
 800b6e0:	40010000 	.word	0x40010000
 800b6e4:	40000400 	.word	0x40000400
 800b6e8:	40000800 	.word	0x40000800
 800b6ec:	40000c00 	.word	0x40000c00
 800b6f0:	40014000 	.word	0x40014000

0800b6f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b082      	sub	sp, #8
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	691b      	ldr	r3, [r3, #16]
 800b702:	f003 0302 	and.w	r3, r3, #2
 800b706:	2b02      	cmp	r3, #2
 800b708:	d128      	bne.n	800b75c <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	68db      	ldr	r3, [r3, #12]
 800b710:	f003 0302 	and.w	r3, r3, #2
 800b714:	2b02      	cmp	r3, #2
 800b716:	d121      	bne.n	800b75c <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f06f 0202 	mvn.w	r2, #2
 800b720:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2201      	movs	r2, #1
 800b726:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	699b      	ldr	r3, [r3, #24]
 800b72e:	f003 0303 	and.w	r3, r3, #3
 800b732:	2b00      	cmp	r3, #0
 800b734:	d005      	beq.n	800b742 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	4798      	blx	r3
 800b740:	e009      	b.n	800b756 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2200      	movs	r2, #0
 800b75a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	691b      	ldr	r3, [r3, #16]
 800b762:	f003 0304 	and.w	r3, r3, #4
 800b766:	2b04      	cmp	r3, #4
 800b768:	d128      	bne.n	800b7bc <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	68db      	ldr	r3, [r3, #12]
 800b770:	f003 0304 	and.w	r3, r3, #4
 800b774:	2b04      	cmp	r3, #4
 800b776:	d121      	bne.n	800b7bc <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f06f 0204 	mvn.w	r2, #4
 800b780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2202      	movs	r2, #2
 800b786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	699b      	ldr	r3, [r3, #24]
 800b78e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b792:	2b00      	cmp	r3, #0
 800b794:	d005      	beq.n	800b7a2 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	4798      	blx	r3
 800b7a0:	e009      	b.n	800b7b6 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	691b      	ldr	r3, [r3, #16]
 800b7c2:	f003 0308 	and.w	r3, r3, #8
 800b7c6:	2b08      	cmp	r3, #8
 800b7c8:	d128      	bne.n	800b81c <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	68db      	ldr	r3, [r3, #12]
 800b7d0:	f003 0308 	and.w	r3, r3, #8
 800b7d4:	2b08      	cmp	r3, #8
 800b7d6:	d121      	bne.n	800b81c <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f06f 0208 	mvn.w	r2, #8
 800b7e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2204      	movs	r2, #4
 800b7e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	69db      	ldr	r3, [r3, #28]
 800b7ee:	f003 0303 	and.w	r3, r3, #3
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d005      	beq.n	800b802 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	4798      	blx	r3
 800b800:	e009      	b.n	800b816 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2200      	movs	r2, #0
 800b81a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	691b      	ldr	r3, [r3, #16]
 800b822:	f003 0310 	and.w	r3, r3, #16
 800b826:	2b10      	cmp	r3, #16
 800b828:	d128      	bne.n	800b87c <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	68db      	ldr	r3, [r3, #12]
 800b830:	f003 0310 	and.w	r3, r3, #16
 800b834:	2b10      	cmp	r3, #16
 800b836:	d121      	bne.n	800b87c <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f06f 0210 	mvn.w	r2, #16
 800b840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2208      	movs	r2, #8
 800b846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	69db      	ldr	r3, [r3, #28]
 800b84e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b852:	2b00      	cmp	r3, #0
 800b854:	d005      	beq.n	800b862 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	4798      	blx	r3
 800b860:	e009      	b.n	800b876 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2200      	movs	r2, #0
 800b87a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	691b      	ldr	r3, [r3, #16]
 800b882:	f003 0301 	and.w	r3, r3, #1
 800b886:	2b01      	cmp	r3, #1
 800b888:	d110      	bne.n	800b8ac <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	68db      	ldr	r3, [r3, #12]
 800b890:	f003 0301 	and.w	r3, r3, #1
 800b894:	2b01      	cmp	r3, #1
 800b896:	d109      	bne.n	800b8ac <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f06f 0201 	mvn.w	r2, #1
 800b8a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	691b      	ldr	r3, [r3, #16]
 800b8b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8b6:	2b80      	cmp	r3, #128	; 0x80
 800b8b8:	d110      	bne.n	800b8dc <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	68db      	ldr	r3, [r3, #12]
 800b8c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8c4:	2b80      	cmp	r3, #128	; 0x80
 800b8c6:	d109      	bne.n	800b8dc <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b8d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	691b      	ldr	r3, [r3, #16]
 800b8e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8e6:	2b40      	cmp	r3, #64	; 0x40
 800b8e8:	d110      	bne.n	800b90c <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	68db      	ldr	r3, [r3, #12]
 800b8f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8f4:	2b40      	cmp	r3, #64	; 0x40
 800b8f6:	d109      	bne.n	800b90c <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	691b      	ldr	r3, [r3, #16]
 800b912:	f003 0320 	and.w	r3, r3, #32
 800b916:	2b20      	cmp	r3, #32
 800b918:	d110      	bne.n	800b93c <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	68db      	ldr	r3, [r3, #12]
 800b920:	f003 0320 	and.w	r3, r3, #32
 800b924:	2b20      	cmp	r3, #32
 800b926:	d109      	bne.n	800b93c <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f06f 0220 	mvn.w	r2, #32
 800b930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b93c:	bf00      	nop
 800b93e:	3708      	adds	r7, #8
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}

0800b944 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b086      	sub	sp, #24
 800b948:	af00      	add	r7, sp, #0
 800b94a:	60f8      	str	r0, [r7, #12]
 800b94c:	60b9      	str	r1, [r7, #8]
 800b94e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b950:	2300      	movs	r3, #0
 800b952:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b95a:	2b01      	cmp	r3, #1
 800b95c:	d101      	bne.n	800b962 <HAL_TIM_IC_ConfigChannel+0x1e>
 800b95e:	2302      	movs	r3, #2
 800b960:	e088      	b.n	800ba74 <HAL_TIM_IC_ConfigChannel+0x130>
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2201      	movs	r2, #1
 800b966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d11b      	bne.n	800b9a8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	6818      	ldr	r0, [r3, #0]
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	6819      	ldr	r1, [r3, #0]
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	685a      	ldr	r2, [r3, #4]
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	68db      	ldr	r3, [r3, #12]
 800b980:	f000 fcaa 	bl	800c2d8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	699a      	ldr	r2, [r3, #24]
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f022 020c 	bic.w	r2, r2, #12
 800b992:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	6999      	ldr	r1, [r3, #24]
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	689a      	ldr	r2, [r3, #8]
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	430a      	orrs	r2, r1
 800b9a4:	619a      	str	r2, [r3, #24]
 800b9a6:	e060      	b.n	800ba6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2b04      	cmp	r3, #4
 800b9ac:	d11c      	bne.n	800b9e8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	6818      	ldr	r0, [r3, #0]
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	6819      	ldr	r1, [r3, #0]
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	685a      	ldr	r2, [r3, #4]
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	68db      	ldr	r3, [r3, #12]
 800b9be:	f000 fd22 	bl	800c406 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	699a      	ldr	r2, [r3, #24]
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b9d0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	6999      	ldr	r1, [r3, #24]
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	689b      	ldr	r3, [r3, #8]
 800b9dc:	021a      	lsls	r2, r3, #8
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	430a      	orrs	r2, r1
 800b9e4:	619a      	str	r2, [r3, #24]
 800b9e6:	e040      	b.n	800ba6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2b08      	cmp	r3, #8
 800b9ec:	d11b      	bne.n	800ba26 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	6818      	ldr	r0, [r3, #0]
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	6819      	ldr	r1, [r3, #0]
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	685a      	ldr	r2, [r3, #4]
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	68db      	ldr	r3, [r3, #12]
 800b9fe:	f000 fd6f 	bl	800c4e0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	69da      	ldr	r2, [r3, #28]
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f022 020c 	bic.w	r2, r2, #12
 800ba10:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	69d9      	ldr	r1, [r3, #28]
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	689a      	ldr	r2, [r3, #8]
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	430a      	orrs	r2, r1
 800ba22:	61da      	str	r2, [r3, #28]
 800ba24:	e021      	b.n	800ba6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2b0c      	cmp	r3, #12
 800ba2a:	d11c      	bne.n	800ba66 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	6818      	ldr	r0, [r3, #0]
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	6819      	ldr	r1, [r3, #0]
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	685a      	ldr	r2, [r3, #4]
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	68db      	ldr	r3, [r3, #12]
 800ba3c:	f000 fd8c 	bl	800c558 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	69da      	ldr	r2, [r3, #28]
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ba4e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	69d9      	ldr	r1, [r3, #28]
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	689b      	ldr	r3, [r3, #8]
 800ba5a:	021a      	lsls	r2, r3, #8
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	430a      	orrs	r2, r1
 800ba62:	61da      	str	r2, [r3, #28]
 800ba64:	e001      	b.n	800ba6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800ba66:	2301      	movs	r3, #1
 800ba68:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ba72:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3718      	adds	r7, #24
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b086      	sub	sp, #24
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	60f8      	str	r0, [r7, #12]
 800ba84:	60b9      	str	r1, [r7, #8]
 800ba86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d101      	bne.n	800ba9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ba96:	2302      	movs	r3, #2
 800ba98:	e0ae      	b.n	800bbf8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2b0c      	cmp	r3, #12
 800baa6:	f200 809f 	bhi.w	800bbe8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800baaa:	a201      	add	r2, pc, #4	; (adr r2, 800bab0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800baac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bab0:	0800bae5 	.word	0x0800bae5
 800bab4:	0800bbe9 	.word	0x0800bbe9
 800bab8:	0800bbe9 	.word	0x0800bbe9
 800babc:	0800bbe9 	.word	0x0800bbe9
 800bac0:	0800bb25 	.word	0x0800bb25
 800bac4:	0800bbe9 	.word	0x0800bbe9
 800bac8:	0800bbe9 	.word	0x0800bbe9
 800bacc:	0800bbe9 	.word	0x0800bbe9
 800bad0:	0800bb67 	.word	0x0800bb67
 800bad4:	0800bbe9 	.word	0x0800bbe9
 800bad8:	0800bbe9 	.word	0x0800bbe9
 800badc:	0800bbe9 	.word	0x0800bbe9
 800bae0:	0800bba7 	.word	0x0800bba7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	68b9      	ldr	r1, [r7, #8]
 800baea:	4618      	mov	r0, r3
 800baec:	f000 fa68 	bl	800bfc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	699a      	ldr	r2, [r3, #24]
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f042 0208 	orr.w	r2, r2, #8
 800bafe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	699a      	ldr	r2, [r3, #24]
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f022 0204 	bic.w	r2, r2, #4
 800bb0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	6999      	ldr	r1, [r3, #24]
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	691a      	ldr	r2, [r3, #16]
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	430a      	orrs	r2, r1
 800bb20:	619a      	str	r2, [r3, #24]
      break;
 800bb22:	e064      	b.n	800bbee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	68b9      	ldr	r1, [r7, #8]
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f000 faae 	bl	800c08c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	699a      	ldr	r2, [r3, #24]
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	699a      	ldr	r2, [r3, #24]
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	6999      	ldr	r1, [r3, #24]
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	691b      	ldr	r3, [r3, #16]
 800bb5a:	021a      	lsls	r2, r3, #8
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	430a      	orrs	r2, r1
 800bb62:	619a      	str	r2, [r3, #24]
      break;
 800bb64:	e043      	b.n	800bbee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	68b9      	ldr	r1, [r7, #8]
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f000 faf9 	bl	800c164 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	69da      	ldr	r2, [r3, #28]
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f042 0208 	orr.w	r2, r2, #8
 800bb80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	69da      	ldr	r2, [r3, #28]
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f022 0204 	bic.w	r2, r2, #4
 800bb90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	69d9      	ldr	r1, [r3, #28]
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	691a      	ldr	r2, [r3, #16]
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	430a      	orrs	r2, r1
 800bba2:	61da      	str	r2, [r3, #28]
      break;
 800bba4:	e023      	b.n	800bbee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	68b9      	ldr	r1, [r7, #8]
 800bbac:	4618      	mov	r0, r3
 800bbae:	f000 fb43 	bl	800c238 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	69da      	ldr	r2, [r3, #28]
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bbc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	69da      	ldr	r2, [r3, #28]
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bbd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	69d9      	ldr	r1, [r3, #28]
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	691b      	ldr	r3, [r3, #16]
 800bbdc:	021a      	lsls	r2, r3, #8
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	430a      	orrs	r2, r1
 800bbe4:	61da      	str	r2, [r3, #28]
      break;
 800bbe6:	e002      	b.n	800bbee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	75fb      	strb	r3, [r7, #23]
      break;
 800bbec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bbf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3718      	adds	r7, #24
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b084      	sub	sp, #16
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
 800bc08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	d101      	bne.n	800bc1c <HAL_TIM_ConfigClockSource+0x1c>
 800bc18:	2302      	movs	r3, #2
 800bc1a:	e0b4      	b.n	800bd86 <HAL_TIM_ConfigClockSource+0x186>
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2201      	movs	r2, #1
 800bc20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2202      	movs	r2, #2
 800bc28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	689b      	ldr	r3, [r3, #8]
 800bc32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bc3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	68ba      	ldr	r2, [r7, #8]
 800bc4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc54:	d03e      	beq.n	800bcd4 <HAL_TIM_ConfigClockSource+0xd4>
 800bc56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc5a:	f200 8087 	bhi.w	800bd6c <HAL_TIM_ConfigClockSource+0x16c>
 800bc5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc62:	f000 8086 	beq.w	800bd72 <HAL_TIM_ConfigClockSource+0x172>
 800bc66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc6a:	d87f      	bhi.n	800bd6c <HAL_TIM_ConfigClockSource+0x16c>
 800bc6c:	2b70      	cmp	r3, #112	; 0x70
 800bc6e:	d01a      	beq.n	800bca6 <HAL_TIM_ConfigClockSource+0xa6>
 800bc70:	2b70      	cmp	r3, #112	; 0x70
 800bc72:	d87b      	bhi.n	800bd6c <HAL_TIM_ConfigClockSource+0x16c>
 800bc74:	2b60      	cmp	r3, #96	; 0x60
 800bc76:	d050      	beq.n	800bd1a <HAL_TIM_ConfigClockSource+0x11a>
 800bc78:	2b60      	cmp	r3, #96	; 0x60
 800bc7a:	d877      	bhi.n	800bd6c <HAL_TIM_ConfigClockSource+0x16c>
 800bc7c:	2b50      	cmp	r3, #80	; 0x50
 800bc7e:	d03c      	beq.n	800bcfa <HAL_TIM_ConfigClockSource+0xfa>
 800bc80:	2b50      	cmp	r3, #80	; 0x50
 800bc82:	d873      	bhi.n	800bd6c <HAL_TIM_ConfigClockSource+0x16c>
 800bc84:	2b40      	cmp	r3, #64	; 0x40
 800bc86:	d058      	beq.n	800bd3a <HAL_TIM_ConfigClockSource+0x13a>
 800bc88:	2b40      	cmp	r3, #64	; 0x40
 800bc8a:	d86f      	bhi.n	800bd6c <HAL_TIM_ConfigClockSource+0x16c>
 800bc8c:	2b30      	cmp	r3, #48	; 0x30
 800bc8e:	d064      	beq.n	800bd5a <HAL_TIM_ConfigClockSource+0x15a>
 800bc90:	2b30      	cmp	r3, #48	; 0x30
 800bc92:	d86b      	bhi.n	800bd6c <HAL_TIM_ConfigClockSource+0x16c>
 800bc94:	2b20      	cmp	r3, #32
 800bc96:	d060      	beq.n	800bd5a <HAL_TIM_ConfigClockSource+0x15a>
 800bc98:	2b20      	cmp	r3, #32
 800bc9a:	d867      	bhi.n	800bd6c <HAL_TIM_ConfigClockSource+0x16c>
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d05c      	beq.n	800bd5a <HAL_TIM_ConfigClockSource+0x15a>
 800bca0:	2b10      	cmp	r3, #16
 800bca2:	d05a      	beq.n	800bd5a <HAL_TIM_ConfigClockSource+0x15a>
 800bca4:	e062      	b.n	800bd6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6818      	ldr	r0, [r3, #0]
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	6899      	ldr	r1, [r3, #8]
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	685a      	ldr	r2, [r3, #4]
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	68db      	ldr	r3, [r3, #12]
 800bcb6:	f000 fca7 	bl	800c608 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	689b      	ldr	r3, [r3, #8]
 800bcc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bcc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	68ba      	ldr	r2, [r7, #8]
 800bcd0:	609a      	str	r2, [r3, #8]
      break;
 800bcd2:	e04f      	b.n	800bd74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6818      	ldr	r0, [r3, #0]
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	6899      	ldr	r1, [r3, #8]
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	685a      	ldr	r2, [r3, #4]
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	68db      	ldr	r3, [r3, #12]
 800bce4:	f000 fc90 	bl	800c608 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	689a      	ldr	r2, [r3, #8]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bcf6:	609a      	str	r2, [r3, #8]
      break;
 800bcf8:	e03c      	b.n	800bd74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6818      	ldr	r0, [r3, #0]
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	6859      	ldr	r1, [r3, #4]
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	68db      	ldr	r3, [r3, #12]
 800bd06:	461a      	mov	r2, r3
 800bd08:	f000 fb4e 	bl	800c3a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	2150      	movs	r1, #80	; 0x50
 800bd12:	4618      	mov	r0, r3
 800bd14:	f000 fc5d 	bl	800c5d2 <TIM_ITRx_SetConfig>
      break;
 800bd18:	e02c      	b.n	800bd74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6818      	ldr	r0, [r3, #0]
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	6859      	ldr	r1, [r3, #4]
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	68db      	ldr	r3, [r3, #12]
 800bd26:	461a      	mov	r2, r3
 800bd28:	f000 fbaa 	bl	800c480 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	2160      	movs	r1, #96	; 0x60
 800bd32:	4618      	mov	r0, r3
 800bd34:	f000 fc4d 	bl	800c5d2 <TIM_ITRx_SetConfig>
      break;
 800bd38:	e01c      	b.n	800bd74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6818      	ldr	r0, [r3, #0]
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	6859      	ldr	r1, [r3, #4]
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	68db      	ldr	r3, [r3, #12]
 800bd46:	461a      	mov	r2, r3
 800bd48:	f000 fb2e 	bl	800c3a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	2140      	movs	r1, #64	; 0x40
 800bd52:	4618      	mov	r0, r3
 800bd54:	f000 fc3d 	bl	800c5d2 <TIM_ITRx_SetConfig>
      break;
 800bd58:	e00c      	b.n	800bd74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681a      	ldr	r2, [r3, #0]
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	4619      	mov	r1, r3
 800bd64:	4610      	mov	r0, r2
 800bd66:	f000 fc34 	bl	800c5d2 <TIM_ITRx_SetConfig>
      break;
 800bd6a:	e003      	b.n	800bd74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	73fb      	strb	r3, [r7, #15]
      break;
 800bd70:	e000      	b.n	800bd74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bd72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2201      	movs	r2, #1
 800bd78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bd84:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	3710      	adds	r7, #16
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}
	...

0800bd90 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b085      	sub	sp, #20
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	2b0c      	cmp	r3, #12
 800bda2:	d831      	bhi.n	800be08 <HAL_TIM_ReadCapturedValue+0x78>
 800bda4:	a201      	add	r2, pc, #4	; (adr r2, 800bdac <HAL_TIM_ReadCapturedValue+0x1c>)
 800bda6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdaa:	bf00      	nop
 800bdac:	0800bde1 	.word	0x0800bde1
 800bdb0:	0800be09 	.word	0x0800be09
 800bdb4:	0800be09 	.word	0x0800be09
 800bdb8:	0800be09 	.word	0x0800be09
 800bdbc:	0800bdeb 	.word	0x0800bdeb
 800bdc0:	0800be09 	.word	0x0800be09
 800bdc4:	0800be09 	.word	0x0800be09
 800bdc8:	0800be09 	.word	0x0800be09
 800bdcc:	0800bdf5 	.word	0x0800bdf5
 800bdd0:	0800be09 	.word	0x0800be09
 800bdd4:	0800be09 	.word	0x0800be09
 800bdd8:	0800be09 	.word	0x0800be09
 800bddc:	0800bdff 	.word	0x0800bdff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bde6:	60fb      	str	r3, [r7, #12]

      break;
 800bde8:	e00f      	b.n	800be0a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdf0:	60fb      	str	r3, [r7, #12]

      break;
 800bdf2:	e00a      	b.n	800be0a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdfa:	60fb      	str	r3, [r7, #12]

      break;
 800bdfc:	e005      	b.n	800be0a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be04:	60fb      	str	r3, [r7, #12]

      break;
 800be06:	e000      	b.n	800be0a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800be08:	bf00      	nop
  }

  return tmpreg;
 800be0a:	68fb      	ldr	r3, [r7, #12]
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3714      	adds	r7, #20
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr

0800be18 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800be18:	b480      	push	{r7}
 800be1a:	b083      	sub	sp, #12
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800be20:	bf00      	nop
 800be22:	370c      	adds	r7, #12
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr

0800be2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b083      	sub	sp, #12
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800be34:	bf00      	nop
 800be36:	370c      	adds	r7, #12
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr

0800be40 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800be40:	b480      	push	{r7}
 800be42:	b083      	sub	sp, #12
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800be48:	bf00      	nop
 800be4a:	370c      	adds	r7, #12
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr

0800be54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800be54:	b480      	push	{r7}
 800be56:	b083      	sub	sp, #12
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800be5c:	bf00      	nop
 800be5e:	370c      	adds	r7, #12
 800be60:	46bd      	mov	sp, r7
 800be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be66:	4770      	bx	lr

0800be68 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800be68:	b480      	push	{r7}
 800be6a:	b083      	sub	sp, #12
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800be70:	bf00      	nop
 800be72:	370c      	adds	r7, #12
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr

0800be7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b083      	sub	sp, #12
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800be84:	bf00      	nop
 800be86:	370c      	adds	r7, #12
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr

0800be90 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800be90:	b480      	push	{r7}
 800be92:	b083      	sub	sp, #12
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800be98:	bf00      	nop
 800be9a:	370c      	adds	r7, #12
 800be9c:	46bd      	mov	sp, r7
 800be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea2:	4770      	bx	lr

0800bea4 <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b083      	sub	sp, #12
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  return htim->State;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800beb2:	b2db      	uxtb	r3, r3
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	370c      	adds	r7, #12
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr

0800bec0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b085      	sub	sp, #20
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	4a34      	ldr	r2, [pc, #208]	; (800bfa4 <TIM_Base_SetConfig+0xe4>)
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d00f      	beq.n	800bef8 <TIM_Base_SetConfig+0x38>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bede:	d00b      	beq.n	800bef8 <TIM_Base_SetConfig+0x38>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	4a31      	ldr	r2, [pc, #196]	; (800bfa8 <TIM_Base_SetConfig+0xe8>)
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d007      	beq.n	800bef8 <TIM_Base_SetConfig+0x38>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	4a30      	ldr	r2, [pc, #192]	; (800bfac <TIM_Base_SetConfig+0xec>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d003      	beq.n	800bef8 <TIM_Base_SetConfig+0x38>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	4a2f      	ldr	r2, [pc, #188]	; (800bfb0 <TIM_Base_SetConfig+0xf0>)
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d108      	bne.n	800bf0a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800befe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	68fa      	ldr	r2, [r7, #12]
 800bf06:	4313      	orrs	r3, r2
 800bf08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	4a25      	ldr	r2, [pc, #148]	; (800bfa4 <TIM_Base_SetConfig+0xe4>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d01b      	beq.n	800bf4a <TIM_Base_SetConfig+0x8a>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf18:	d017      	beq.n	800bf4a <TIM_Base_SetConfig+0x8a>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	4a22      	ldr	r2, [pc, #136]	; (800bfa8 <TIM_Base_SetConfig+0xe8>)
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d013      	beq.n	800bf4a <TIM_Base_SetConfig+0x8a>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	4a21      	ldr	r2, [pc, #132]	; (800bfac <TIM_Base_SetConfig+0xec>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d00f      	beq.n	800bf4a <TIM_Base_SetConfig+0x8a>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	4a20      	ldr	r2, [pc, #128]	; (800bfb0 <TIM_Base_SetConfig+0xf0>)
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d00b      	beq.n	800bf4a <TIM_Base_SetConfig+0x8a>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	4a1f      	ldr	r2, [pc, #124]	; (800bfb4 <TIM_Base_SetConfig+0xf4>)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	d007      	beq.n	800bf4a <TIM_Base_SetConfig+0x8a>
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	4a1e      	ldr	r2, [pc, #120]	; (800bfb8 <TIM_Base_SetConfig+0xf8>)
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	d003      	beq.n	800bf4a <TIM_Base_SetConfig+0x8a>
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	4a1d      	ldr	r2, [pc, #116]	; (800bfbc <TIM_Base_SetConfig+0xfc>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d108      	bne.n	800bf5c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	68db      	ldr	r3, [r3, #12]
 800bf56:	68fa      	ldr	r2, [r7, #12]
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	695b      	ldr	r3, [r3, #20]
 800bf66:	4313      	orrs	r3, r2
 800bf68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	68fa      	ldr	r2, [r7, #12]
 800bf6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	689a      	ldr	r2, [r3, #8]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	681a      	ldr	r2, [r3, #0]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	4a08      	ldr	r2, [pc, #32]	; (800bfa4 <TIM_Base_SetConfig+0xe4>)
 800bf84:	4293      	cmp	r3, r2
 800bf86:	d103      	bne.n	800bf90 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	691a      	ldr	r2, [r3, #16]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2201      	movs	r2, #1
 800bf94:	615a      	str	r2, [r3, #20]
}
 800bf96:	bf00      	nop
 800bf98:	3714      	adds	r7, #20
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr
 800bfa2:	bf00      	nop
 800bfa4:	40010000 	.word	0x40010000
 800bfa8:	40000400 	.word	0x40000400
 800bfac:	40000800 	.word	0x40000800
 800bfb0:	40000c00 	.word	0x40000c00
 800bfb4:	40014000 	.word	0x40014000
 800bfb8:	40014400 	.word	0x40014400
 800bfbc:	40014800 	.word	0x40014800

0800bfc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b087      	sub	sp, #28
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6a1b      	ldr	r3, [r3, #32]
 800bfce:	f023 0201 	bic.w	r2, r3, #1
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6a1b      	ldr	r3, [r3, #32]
 800bfda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	685b      	ldr	r3, [r3, #4]
 800bfe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	699b      	ldr	r3, [r3, #24]
 800bfe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f023 0303 	bic.w	r3, r3, #3
 800bff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	68fa      	ldr	r2, [r7, #12]
 800bffe:	4313      	orrs	r3, r2
 800c000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	f023 0302 	bic.w	r3, r3, #2
 800c008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	689b      	ldr	r3, [r3, #8]
 800c00e:	697a      	ldr	r2, [r7, #20]
 800c010:	4313      	orrs	r3, r2
 800c012:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	4a1c      	ldr	r2, [pc, #112]	; (800c088 <TIM_OC1_SetConfig+0xc8>)
 800c018:	4293      	cmp	r3, r2
 800c01a:	d10c      	bne.n	800c036 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	f023 0308 	bic.w	r3, r3, #8
 800c022:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	68db      	ldr	r3, [r3, #12]
 800c028:	697a      	ldr	r2, [r7, #20]
 800c02a:	4313      	orrs	r3, r2
 800c02c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	f023 0304 	bic.w	r3, r3, #4
 800c034:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	4a13      	ldr	r2, [pc, #76]	; (800c088 <TIM_OC1_SetConfig+0xc8>)
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d111      	bne.n	800c062 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c044:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c04c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	695b      	ldr	r3, [r3, #20]
 800c052:	693a      	ldr	r2, [r7, #16]
 800c054:	4313      	orrs	r3, r2
 800c056:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	699b      	ldr	r3, [r3, #24]
 800c05c:	693a      	ldr	r2, [r7, #16]
 800c05e:	4313      	orrs	r3, r2
 800c060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	693a      	ldr	r2, [r7, #16]
 800c066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	68fa      	ldr	r2, [r7, #12]
 800c06c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	685a      	ldr	r2, [r3, #4]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	697a      	ldr	r2, [r7, #20]
 800c07a:	621a      	str	r2, [r3, #32]
}
 800c07c:	bf00      	nop
 800c07e:	371c      	adds	r7, #28
 800c080:	46bd      	mov	sp, r7
 800c082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c086:	4770      	bx	lr
 800c088:	40010000 	.word	0x40010000

0800c08c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b087      	sub	sp, #28
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6a1b      	ldr	r3, [r3, #32]
 800c09a:	f023 0210 	bic.w	r2, r3, #16
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6a1b      	ldr	r3, [r3, #32]
 800c0a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	685b      	ldr	r3, [r3, #4]
 800c0ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	699b      	ldr	r3, [r3, #24]
 800c0b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c0ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c0c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	021b      	lsls	r3, r3, #8
 800c0ca:	68fa      	ldr	r2, [r7, #12]
 800c0cc:	4313      	orrs	r3, r2
 800c0ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	f023 0320 	bic.w	r3, r3, #32
 800c0d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	689b      	ldr	r3, [r3, #8]
 800c0dc:	011b      	lsls	r3, r3, #4
 800c0de:	697a      	ldr	r2, [r7, #20]
 800c0e0:	4313      	orrs	r3, r2
 800c0e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	4a1e      	ldr	r2, [pc, #120]	; (800c160 <TIM_OC2_SetConfig+0xd4>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d10d      	bne.n	800c108 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c0f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	68db      	ldr	r3, [r3, #12]
 800c0f8:	011b      	lsls	r3, r3, #4
 800c0fa:	697a      	ldr	r2, [r7, #20]
 800c0fc:	4313      	orrs	r3, r2
 800c0fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c106:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	4a15      	ldr	r2, [pc, #84]	; (800c160 <TIM_OC2_SetConfig+0xd4>)
 800c10c:	4293      	cmp	r3, r2
 800c10e:	d113      	bne.n	800c138 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c116:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c118:	693b      	ldr	r3, [r7, #16]
 800c11a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c11e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	695b      	ldr	r3, [r3, #20]
 800c124:	009b      	lsls	r3, r3, #2
 800c126:	693a      	ldr	r2, [r7, #16]
 800c128:	4313      	orrs	r3, r2
 800c12a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	699b      	ldr	r3, [r3, #24]
 800c130:	009b      	lsls	r3, r3, #2
 800c132:	693a      	ldr	r2, [r7, #16]
 800c134:	4313      	orrs	r3, r2
 800c136:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	693a      	ldr	r2, [r7, #16]
 800c13c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	68fa      	ldr	r2, [r7, #12]
 800c142:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	685a      	ldr	r2, [r3, #4]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	697a      	ldr	r2, [r7, #20]
 800c150:	621a      	str	r2, [r3, #32]
}
 800c152:	bf00      	nop
 800c154:	371c      	adds	r7, #28
 800c156:	46bd      	mov	sp, r7
 800c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15c:	4770      	bx	lr
 800c15e:	bf00      	nop
 800c160:	40010000 	.word	0x40010000

0800c164 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c164:	b480      	push	{r7}
 800c166:	b087      	sub	sp, #28
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6a1b      	ldr	r3, [r3, #32]
 800c172:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6a1b      	ldr	r3, [r3, #32]
 800c17e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	69db      	ldr	r3, [r3, #28]
 800c18a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f023 0303 	bic.w	r3, r3, #3
 800c19a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	68fa      	ldr	r2, [r7, #12]
 800c1a2:	4313      	orrs	r3, r2
 800c1a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c1a6:	697b      	ldr	r3, [r7, #20]
 800c1a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c1ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	689b      	ldr	r3, [r3, #8]
 800c1b2:	021b      	lsls	r3, r3, #8
 800c1b4:	697a      	ldr	r2, [r7, #20]
 800c1b6:	4313      	orrs	r3, r2
 800c1b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	4a1d      	ldr	r2, [pc, #116]	; (800c234 <TIM_OC3_SetConfig+0xd0>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d10d      	bne.n	800c1de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c1c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	68db      	ldr	r3, [r3, #12]
 800c1ce:	021b      	lsls	r3, r3, #8
 800c1d0:	697a      	ldr	r2, [r7, #20]
 800c1d2:	4313      	orrs	r3, r2
 800c1d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c1d6:	697b      	ldr	r3, [r7, #20]
 800c1d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c1dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	4a14      	ldr	r2, [pc, #80]	; (800c234 <TIM_OC3_SetConfig+0xd0>)
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d113      	bne.n	800c20e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c1ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c1f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	695b      	ldr	r3, [r3, #20]
 800c1fa:	011b      	lsls	r3, r3, #4
 800c1fc:	693a      	ldr	r2, [r7, #16]
 800c1fe:	4313      	orrs	r3, r2
 800c200:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	699b      	ldr	r3, [r3, #24]
 800c206:	011b      	lsls	r3, r3, #4
 800c208:	693a      	ldr	r2, [r7, #16]
 800c20a:	4313      	orrs	r3, r2
 800c20c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	693a      	ldr	r2, [r7, #16]
 800c212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	68fa      	ldr	r2, [r7, #12]
 800c218:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	685a      	ldr	r2, [r3, #4]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	697a      	ldr	r2, [r7, #20]
 800c226:	621a      	str	r2, [r3, #32]
}
 800c228:	bf00      	nop
 800c22a:	371c      	adds	r7, #28
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr
 800c234:	40010000 	.word	0x40010000

0800c238 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c238:	b480      	push	{r7}
 800c23a:	b087      	sub	sp, #28
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6a1b      	ldr	r3, [r3, #32]
 800c246:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6a1b      	ldr	r3, [r3, #32]
 800c252:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	685b      	ldr	r3, [r3, #4]
 800c258:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	69db      	ldr	r3, [r3, #28]
 800c25e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c26e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	021b      	lsls	r3, r3, #8
 800c276:	68fa      	ldr	r2, [r7, #12]
 800c278:	4313      	orrs	r3, r2
 800c27a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c282:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	689b      	ldr	r3, [r3, #8]
 800c288:	031b      	lsls	r3, r3, #12
 800c28a:	693a      	ldr	r2, [r7, #16]
 800c28c:	4313      	orrs	r3, r2
 800c28e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	4a10      	ldr	r2, [pc, #64]	; (800c2d4 <TIM_OC4_SetConfig+0x9c>)
 800c294:	4293      	cmp	r3, r2
 800c296:	d109      	bne.n	800c2ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c29e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	695b      	ldr	r3, [r3, #20]
 800c2a4:	019b      	lsls	r3, r3, #6
 800c2a6:	697a      	ldr	r2, [r7, #20]
 800c2a8:	4313      	orrs	r3, r2
 800c2aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	697a      	ldr	r2, [r7, #20]
 800c2b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	68fa      	ldr	r2, [r7, #12]
 800c2b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	685a      	ldr	r2, [r3, #4]
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	693a      	ldr	r2, [r7, #16]
 800c2c4:	621a      	str	r2, [r3, #32]
}
 800c2c6:	bf00      	nop
 800c2c8:	371c      	adds	r7, #28
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d0:	4770      	bx	lr
 800c2d2:	bf00      	nop
 800c2d4:	40010000 	.word	0x40010000

0800c2d8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b087      	sub	sp, #28
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	60f8      	str	r0, [r7, #12]
 800c2e0:	60b9      	str	r1, [r7, #8]
 800c2e2:	607a      	str	r2, [r7, #4]
 800c2e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	6a1b      	ldr	r3, [r3, #32]
 800c2ea:	f023 0201 	bic.w	r2, r3, #1
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	699b      	ldr	r3, [r3, #24]
 800c2f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	6a1b      	ldr	r3, [r3, #32]
 800c2fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	4a24      	ldr	r2, [pc, #144]	; (800c394 <TIM_TI1_SetConfig+0xbc>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d013      	beq.n	800c32e <TIM_TI1_SetConfig+0x56>
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c30c:	d00f      	beq.n	800c32e <TIM_TI1_SetConfig+0x56>
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	4a21      	ldr	r2, [pc, #132]	; (800c398 <TIM_TI1_SetConfig+0xc0>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d00b      	beq.n	800c32e <TIM_TI1_SetConfig+0x56>
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	4a20      	ldr	r2, [pc, #128]	; (800c39c <TIM_TI1_SetConfig+0xc4>)
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d007      	beq.n	800c32e <TIM_TI1_SetConfig+0x56>
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	4a1f      	ldr	r2, [pc, #124]	; (800c3a0 <TIM_TI1_SetConfig+0xc8>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d003      	beq.n	800c32e <TIM_TI1_SetConfig+0x56>
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	4a1e      	ldr	r2, [pc, #120]	; (800c3a4 <TIM_TI1_SetConfig+0xcc>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d101      	bne.n	800c332 <TIM_TI1_SetConfig+0x5a>
 800c32e:	2301      	movs	r3, #1
 800c330:	e000      	b.n	800c334 <TIM_TI1_SetConfig+0x5c>
 800c332:	2300      	movs	r3, #0
 800c334:	2b00      	cmp	r3, #0
 800c336:	d008      	beq.n	800c34a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	f023 0303 	bic.w	r3, r3, #3
 800c33e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800c340:	697a      	ldr	r2, [r7, #20]
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	4313      	orrs	r3, r2
 800c346:	617b      	str	r3, [r7, #20]
 800c348:	e003      	b.n	800c352 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	f043 0301 	orr.w	r3, r3, #1
 800c350:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c358:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	011b      	lsls	r3, r3, #4
 800c35e:	b2db      	uxtb	r3, r3
 800c360:	697a      	ldr	r2, [r7, #20]
 800c362:	4313      	orrs	r3, r2
 800c364:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	f023 030a 	bic.w	r3, r3, #10
 800c36c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	f003 030a 	and.w	r3, r3, #10
 800c374:	693a      	ldr	r2, [r7, #16]
 800c376:	4313      	orrs	r3, r2
 800c378:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	697a      	ldr	r2, [r7, #20]
 800c37e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	693a      	ldr	r2, [r7, #16]
 800c384:	621a      	str	r2, [r3, #32]
}
 800c386:	bf00      	nop
 800c388:	371c      	adds	r7, #28
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr
 800c392:	bf00      	nop
 800c394:	40010000 	.word	0x40010000
 800c398:	40000400 	.word	0x40000400
 800c39c:	40000800 	.word	0x40000800
 800c3a0:	40000c00 	.word	0x40000c00
 800c3a4:	40014000 	.word	0x40014000

0800c3a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b087      	sub	sp, #28
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	60b9      	str	r1, [r7, #8]
 800c3b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	6a1b      	ldr	r3, [r3, #32]
 800c3b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	6a1b      	ldr	r3, [r3, #32]
 800c3be:	f023 0201 	bic.w	r2, r3, #1
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	699b      	ldr	r3, [r3, #24]
 800c3ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c3d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	011b      	lsls	r3, r3, #4
 800c3d8:	693a      	ldr	r2, [r7, #16]
 800c3da:	4313      	orrs	r3, r2
 800c3dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	f023 030a 	bic.w	r3, r3, #10
 800c3e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c3e6:	697a      	ldr	r2, [r7, #20]
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	693a      	ldr	r2, [r7, #16]
 800c3f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	697a      	ldr	r2, [r7, #20]
 800c3f8:	621a      	str	r2, [r3, #32]
}
 800c3fa:	bf00      	nop
 800c3fc:	371c      	adds	r7, #28
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr

0800c406 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c406:	b480      	push	{r7}
 800c408:	b087      	sub	sp, #28
 800c40a:	af00      	add	r7, sp, #0
 800c40c:	60f8      	str	r0, [r7, #12]
 800c40e:	60b9      	str	r1, [r7, #8]
 800c410:	607a      	str	r2, [r7, #4]
 800c412:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	6a1b      	ldr	r3, [r3, #32]
 800c418:	f023 0210 	bic.w	r2, r3, #16
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	699b      	ldr	r3, [r3, #24]
 800c424:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	6a1b      	ldr	r3, [r3, #32]
 800c42a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c432:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	021b      	lsls	r3, r3, #8
 800c438:	697a      	ldr	r2, [r7, #20]
 800c43a:	4313      	orrs	r3, r2
 800c43c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c444:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	031b      	lsls	r3, r3, #12
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	697a      	ldr	r2, [r7, #20]
 800c44e:	4313      	orrs	r3, r2
 800c450:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c458:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	011b      	lsls	r3, r3, #4
 800c45e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c462:	693a      	ldr	r2, [r7, #16]
 800c464:	4313      	orrs	r3, r2
 800c466:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	697a      	ldr	r2, [r7, #20]
 800c46c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	693a      	ldr	r2, [r7, #16]
 800c472:	621a      	str	r2, [r3, #32]
}
 800c474:	bf00      	nop
 800c476:	371c      	adds	r7, #28
 800c478:	46bd      	mov	sp, r7
 800c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47e:	4770      	bx	lr

0800c480 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c480:	b480      	push	{r7}
 800c482:	b087      	sub	sp, #28
 800c484:	af00      	add	r7, sp, #0
 800c486:	60f8      	str	r0, [r7, #12]
 800c488:	60b9      	str	r1, [r7, #8]
 800c48a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	6a1b      	ldr	r3, [r3, #32]
 800c490:	f023 0210 	bic.w	r2, r3, #16
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	699b      	ldr	r3, [r3, #24]
 800c49c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	6a1b      	ldr	r3, [r3, #32]
 800c4a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c4aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	031b      	lsls	r3, r3, #12
 800c4b0:	697a      	ldr	r2, [r7, #20]
 800c4b2:	4313      	orrs	r3, r2
 800c4b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c4bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	011b      	lsls	r3, r3, #4
 800c4c2:	693a      	ldr	r2, [r7, #16]
 800c4c4:	4313      	orrs	r3, r2
 800c4c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	697a      	ldr	r2, [r7, #20]
 800c4cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	693a      	ldr	r2, [r7, #16]
 800c4d2:	621a      	str	r2, [r3, #32]
}
 800c4d4:	bf00      	nop
 800c4d6:	371c      	adds	r7, #28
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr

0800c4e0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b087      	sub	sp, #28
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	60f8      	str	r0, [r7, #12]
 800c4e8:	60b9      	str	r1, [r7, #8]
 800c4ea:	607a      	str	r2, [r7, #4]
 800c4ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	6a1b      	ldr	r3, [r3, #32]
 800c4f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	69db      	ldr	r3, [r3, #28]
 800c4fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	6a1b      	ldr	r3, [r3, #32]
 800c504:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	f023 0303 	bic.w	r3, r3, #3
 800c50c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800c50e:	697a      	ldr	r2, [r7, #20]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	4313      	orrs	r3, r2
 800c514:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c51c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	011b      	lsls	r3, r3, #4
 800c522:	b2db      	uxtb	r3, r3
 800c524:	697a      	ldr	r2, [r7, #20]
 800c526:	4313      	orrs	r3, r2
 800c528:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800c530:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	021b      	lsls	r3, r3, #8
 800c536:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800c53a:	693a      	ldr	r2, [r7, #16]
 800c53c:	4313      	orrs	r3, r2
 800c53e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	697a      	ldr	r2, [r7, #20]
 800c544:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	693a      	ldr	r2, [r7, #16]
 800c54a:	621a      	str	r2, [r3, #32]
}
 800c54c:	bf00      	nop
 800c54e:	371c      	adds	r7, #28
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr

0800c558 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c558:	b480      	push	{r7}
 800c55a:	b087      	sub	sp, #28
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	60f8      	str	r0, [r7, #12]
 800c560:	60b9      	str	r1, [r7, #8]
 800c562:	607a      	str	r2, [r7, #4]
 800c564:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	6a1b      	ldr	r3, [r3, #32]
 800c56a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	69db      	ldr	r3, [r3, #28]
 800c576:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	6a1b      	ldr	r3, [r3, #32]
 800c57c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c584:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	021b      	lsls	r3, r3, #8
 800c58a:	697a      	ldr	r2, [r7, #20]
 800c58c:	4313      	orrs	r3, r2
 800c58e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c596:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	031b      	lsls	r3, r3, #12
 800c59c:	b29b      	uxth	r3, r3
 800c59e:	697a      	ldr	r2, [r7, #20]
 800c5a0:	4313      	orrs	r3, r2
 800c5a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800c5a4:	693b      	ldr	r3, [r7, #16]
 800c5a6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800c5aa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	031b      	lsls	r3, r3, #12
 800c5b0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800c5b4:	693a      	ldr	r2, [r7, #16]
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	697a      	ldr	r2, [r7, #20]
 800c5be:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	693a      	ldr	r2, [r7, #16]
 800c5c4:	621a      	str	r2, [r3, #32]
}
 800c5c6:	bf00      	nop
 800c5c8:	371c      	adds	r7, #28
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d0:	4770      	bx	lr

0800c5d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c5d2:	b480      	push	{r7}
 800c5d4:	b085      	sub	sp, #20
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
 800c5da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	689b      	ldr	r3, [r3, #8]
 800c5e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c5ea:	683a      	ldr	r2, [r7, #0]
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	4313      	orrs	r3, r2
 800c5f0:	f043 0307 	orr.w	r3, r3, #7
 800c5f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	68fa      	ldr	r2, [r7, #12]
 800c5fa:	609a      	str	r2, [r3, #8]
}
 800c5fc:	bf00      	nop
 800c5fe:	3714      	adds	r7, #20
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr

0800c608 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c608:	b480      	push	{r7}
 800c60a:	b087      	sub	sp, #28
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	60f8      	str	r0, [r7, #12]
 800c610:	60b9      	str	r1, [r7, #8]
 800c612:	607a      	str	r2, [r7, #4]
 800c614:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	689b      	ldr	r3, [r3, #8]
 800c61a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c622:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	021a      	lsls	r2, r3, #8
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	431a      	orrs	r2, r3
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	4313      	orrs	r3, r2
 800c630:	697a      	ldr	r2, [r7, #20]
 800c632:	4313      	orrs	r3, r2
 800c634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	697a      	ldr	r2, [r7, #20]
 800c63a:	609a      	str	r2, [r3, #8]
}
 800c63c:	bf00      	nop
 800c63e:	371c      	adds	r7, #28
 800c640:	46bd      	mov	sp, r7
 800c642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c646:	4770      	bx	lr

0800c648 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c648:	b480      	push	{r7}
 800c64a:	b087      	sub	sp, #28
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	60f8      	str	r0, [r7, #12]
 800c650:	60b9      	str	r1, [r7, #8]
 800c652:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	f003 031f 	and.w	r3, r3, #31
 800c65a:	2201      	movs	r2, #1
 800c65c:	fa02 f303 	lsl.w	r3, r2, r3
 800c660:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	6a1a      	ldr	r2, [r3, #32]
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	43db      	mvns	r3, r3
 800c66a:	401a      	ands	r2, r3
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	6a1a      	ldr	r2, [r3, #32]
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	f003 031f 	and.w	r3, r3, #31
 800c67a:	6879      	ldr	r1, [r7, #4]
 800c67c:	fa01 f303 	lsl.w	r3, r1, r3
 800c680:	431a      	orrs	r2, r3
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	621a      	str	r2, [r3, #32]
}
 800c686:	bf00      	nop
 800c688:	371c      	adds	r7, #28
 800c68a:	46bd      	mov	sp, r7
 800c68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c690:	4770      	bx	lr
	...

0800c694 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800c694:	b480      	push	{r7}
 800c696:	b083      	sub	sp, #12
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	4a1c      	ldr	r2, [pc, #112]	; (800c710 <TIM_ResetCallback+0x7c>)
 800c6a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	4a1b      	ldr	r2, [pc, #108]	; (800c714 <TIM_ResetCallback+0x80>)
 800c6a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	4a1a      	ldr	r2, [pc, #104]	; (800c718 <TIM_ResetCallback+0x84>)
 800c6b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	4a19      	ldr	r2, [pc, #100]	; (800c71c <TIM_ResetCallback+0x88>)
 800c6b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	4a18      	ldr	r2, [pc, #96]	; (800c720 <TIM_ResetCallback+0x8c>)
 800c6c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	4a17      	ldr	r2, [pc, #92]	; (800c724 <TIM_ResetCallback+0x90>)
 800c6c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	4a16      	ldr	r2, [pc, #88]	; (800c728 <TIM_ResetCallback+0x94>)
 800c6d0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	4a15      	ldr	r2, [pc, #84]	; (800c72c <TIM_ResetCallback+0x98>)
 800c6d8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	4a14      	ldr	r2, [pc, #80]	; (800c730 <TIM_ResetCallback+0x9c>)
 800c6e0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	4a13      	ldr	r2, [pc, #76]	; (800c734 <TIM_ResetCallback+0xa0>)
 800c6e8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	4a12      	ldr	r2, [pc, #72]	; (800c738 <TIM_ResetCallback+0xa4>)
 800c6f0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	4a11      	ldr	r2, [pc, #68]	; (800c73c <TIM_ResetCallback+0xa8>)
 800c6f8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	4a10      	ldr	r2, [pc, #64]	; (800c740 <TIM_ResetCallback+0xac>)
 800c700:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800c704:	bf00      	nop
 800c706:	370c      	adds	r7, #12
 800c708:	46bd      	mov	sp, r7
 800c70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70e:	4770      	bx	lr
 800c710:	0800eaed 	.word	0x0800eaed
 800c714:	0800be19 	.word	0x0800be19
 800c718:	0800be7d 	.word	0x0800be7d
 800c71c:	0800be91 	.word	0x0800be91
 800c720:	0800e0c9 	.word	0x0800e0c9
 800c724:	0800be41 	.word	0x0800be41
 800c728:	0800be2d 	.word	0x0800be2d
 800c72c:	0800be55 	.word	0x0800be55
 800c730:	0800be69 	.word	0x0800be69
 800c734:	0800e7c9 	.word	0x0800e7c9
 800c738:	0800c821 	.word	0x0800c821
 800c73c:	0800c835 	.word	0x0800c835
 800c740:	0800c849 	.word	0x0800c849

0800c744 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c744:	b480      	push	{r7}
 800c746:	b085      	sub	sp, #20
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
 800c74c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c754:	2b01      	cmp	r3, #1
 800c756:	d101      	bne.n	800c75c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c758:	2302      	movs	r3, #2
 800c75a:	e050      	b.n	800c7fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2201      	movs	r2, #1
 800c760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2202      	movs	r2, #2
 800c768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	689b      	ldr	r3, [r3, #8]
 800c77a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c782:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	68fa      	ldr	r2, [r7, #12]
 800c78a:	4313      	orrs	r3, r2
 800c78c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	68fa      	ldr	r2, [r7, #12]
 800c794:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	4a1c      	ldr	r2, [pc, #112]	; (800c80c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c79c:	4293      	cmp	r3, r2
 800c79e:	d018      	beq.n	800c7d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7a8:	d013      	beq.n	800c7d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	4a18      	ldr	r2, [pc, #96]	; (800c810 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	d00e      	beq.n	800c7d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	4a16      	ldr	r2, [pc, #88]	; (800c814 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	d009      	beq.n	800c7d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	4a15      	ldr	r2, [pc, #84]	; (800c818 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d004      	beq.n	800c7d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	4a13      	ldr	r2, [pc, #76]	; (800c81c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d10c      	bne.n	800c7ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c7d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	685b      	ldr	r3, [r3, #4]
 800c7de:	68ba      	ldr	r2, [r7, #8]
 800c7e0:	4313      	orrs	r3, r2
 800c7e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	68ba      	ldr	r2, [r7, #8]
 800c7ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c7fc:	2300      	movs	r3, #0
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	3714      	adds	r7, #20
 800c802:	46bd      	mov	sp, r7
 800c804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c808:	4770      	bx	lr
 800c80a:	bf00      	nop
 800c80c:	40010000 	.word	0x40010000
 800c810:	40000400 	.word	0x40000400
 800c814:	40000800 	.word	0x40000800
 800c818:	40000c00 	.word	0x40000c00
 800c81c:	40014000 	.word	0x40014000

0800c820 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c820:	b480      	push	{r7}
 800c822:	b083      	sub	sp, #12
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c828:	bf00      	nop
 800c82a:	370c      	adds	r7, #12
 800c82c:	46bd      	mov	sp, r7
 800c82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c832:	4770      	bx	lr

0800c834 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c834:	b480      	push	{r7}
 800c836:	b083      	sub	sp, #12
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800c83c:	bf00      	nop
 800c83e:	370c      	adds	r7, #12
 800c840:	46bd      	mov	sp, r7
 800c842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c846:	4770      	bx	lr

0800c848 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c848:	b480      	push	{r7}
 800c84a:	b083      	sub	sp, #12
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c850:	bf00      	nop
 800c852:	370c      	adds	r7, #12
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr

0800c85c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b082      	sub	sp, #8
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d101      	bne.n	800c86e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c86a:	2301      	movs	r3, #1
 800c86c:	e04a      	b.n	800c904 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c874:	b2db      	uxtb	r3, r3
 800c876:	2b00      	cmp	r3, #0
 800c878:	d111      	bne.n	800c89e <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2200      	movs	r2, #0
 800c87e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f000 fbf8 	bl	800d078 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d102      	bne.n	800c896 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	4a1e      	ldr	r2, [pc, #120]	; (800c90c <HAL_UART_Init+0xb0>)
 800c894:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2224      	movs	r2, #36	; 0x24
 800c8a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	68da      	ldr	r2, [r3, #12]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c8b4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f000 fdf2 	bl	800d4a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	691a      	ldr	r2, [r3, #16]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c8ca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	695a      	ldr	r2, [r3, #20]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c8da:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	68da      	ldr	r2, [r3, #12]
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c8ea:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2220      	movs	r2, #32
 800c8f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2220      	movs	r2, #32
 800c8fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c902:	2300      	movs	r3, #0
}
 800c904:	4618      	mov	r0, r3
 800c906:	3708      	adds	r7, #8
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}
 800c90c:	08005aa1 	.word	0x08005aa1

0800c910 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b082      	sub	sp, #8
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d101      	bne.n	800c922 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800c91e:	2301      	movs	r3, #1
 800c920:	e029      	b.n	800c976 <HAL_UART_DeInit+0x66>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2224      	movs	r2, #36	; 0x24
 800c926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	68da      	ldr	r2, [r3, #12]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c938:	60da      	str	r2, [r3, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  if (huart->MspDeInitCallback == NULL)
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d102      	bne.n	800c948 <HAL_UART_DeInit+0x38>
  {
    huart->MspDeInitCallback = HAL_UART_MspDeInit;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	4a0e      	ldr	r2, [pc, #56]	; (800c980 <HAL_UART_DeInit+0x70>)
 800c946:	671a      	str	r2, [r3, #112]	; 0x70
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	4798      	blx	r3
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2200      	movs	r2, #0
 800c954:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2200      	movs	r2, #0
 800c95a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2200      	movs	r2, #0
 800c962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2200      	movs	r2, #0
 800c96a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2200      	movs	r2, #0
 800c970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c974:	2300      	movs	r3, #0
}
 800c976:	4618      	mov	r0, r3
 800c978:	3708      	adds	r7, #8
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}
 800c97e:	bf00      	nop
 800c980:	08005b31 	.word	0x08005b31

0800c984 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c984:	b480      	push	{r7}
 800c986:	b085      	sub	sp, #20
 800c988:	af00      	add	r7, sp, #0
 800c98a:	60f8      	str	r0, [r7, #12]
 800c98c:	60b9      	str	r1, [r7, #8]
 800c98e:	4613      	mov	r3, r2
 800c990:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c998:	b2db      	uxtb	r3, r3
 800c99a:	2b20      	cmp	r3, #32
 800c99c:	d130      	bne.n	800ca00 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d002      	beq.n	800c9aa <HAL_UART_Transmit_IT+0x26>
 800c9a4:	88fb      	ldrh	r3, [r7, #6]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d101      	bne.n	800c9ae <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	e029      	b.n	800ca02 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c9b4:	2b01      	cmp	r3, #1
 800c9b6:	d101      	bne.n	800c9bc <HAL_UART_Transmit_IT+0x38>
 800c9b8:	2302      	movs	r3, #2
 800c9ba:	e022      	b.n	800ca02 <HAL_UART_Transmit_IT+0x7e>
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	2201      	movs	r2, #1
 800c9c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	68ba      	ldr	r2, [r7, #8]
 800c9c8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	88fa      	ldrh	r2, [r7, #6]
 800c9ce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	88fa      	ldrh	r2, [r7, #6]
 800c9d4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	2200      	movs	r2, #0
 800c9da:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	2221      	movs	r2, #33	; 0x21
 800c9e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	68da      	ldr	r2, [r3, #12]
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c9fa:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	e000      	b.n	800ca02 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800ca00:	2302      	movs	r3, #2
  }
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	3714      	adds	r7, #20
 800ca06:	46bd      	mov	sp, r7
 800ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0c:	4770      	bx	lr

0800ca0e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca0e:	b580      	push	{r7, lr}
 800ca10:	b084      	sub	sp, #16
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	60f8      	str	r0, [r7, #12]
 800ca16:	60b9      	str	r1, [r7, #8]
 800ca18:	4613      	mov	r3, r2
 800ca1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ca22:	b2db      	uxtb	r3, r3
 800ca24:	2b20      	cmp	r3, #32
 800ca26:	d11d      	bne.n	800ca64 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d002      	beq.n	800ca34 <HAL_UART_Receive_IT+0x26>
 800ca2e:	88fb      	ldrh	r3, [r7, #6]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d101      	bne.n	800ca38 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800ca34:	2301      	movs	r3, #1
 800ca36:	e016      	b.n	800ca66 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca3e:	2b01      	cmp	r3, #1
 800ca40:	d101      	bne.n	800ca46 <HAL_UART_Receive_IT+0x38>
 800ca42:	2302      	movs	r3, #2
 800ca44:	e00f      	b.n	800ca66 <HAL_UART_Receive_IT+0x58>
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	2201      	movs	r2, #1
 800ca4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	2200      	movs	r2, #0
 800ca52:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ca54:	88fb      	ldrh	r3, [r7, #6]
 800ca56:	461a      	mov	r2, r3
 800ca58:	68b9      	ldr	r1, [r7, #8]
 800ca5a:	68f8      	ldr	r0, [r7, #12]
 800ca5c:	f000 fb44 	bl	800d0e8 <UART_Start_Receive_IT>
 800ca60:	4603      	mov	r3, r0
 800ca62:	e000      	b.n	800ca66 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800ca64:	2302      	movs	r3, #2
  }
}
 800ca66:	4618      	mov	r0, r3
 800ca68:	3710      	adds	r7, #16
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}
	...

0800ca70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b0ba      	sub	sp, #232	; 0xe8
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	68db      	ldr	r3, [r3, #12]
 800ca88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	695b      	ldr	r3, [r3, #20]
 800ca92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ca96:	2300      	movs	r3, #0
 800ca98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800caa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800caa6:	f003 030f 	and.w	r3, r3, #15
 800caaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800caae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d10f      	bne.n	800cad6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800caba:	f003 0320 	and.w	r3, r3, #32
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d009      	beq.n	800cad6 <HAL_UART_IRQHandler+0x66>
 800cac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cac6:	f003 0320 	and.w	r3, r3, #32
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d003      	beq.n	800cad6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f000 fc29 	bl	800d326 <UART_Receive_IT>
      return;
 800cad4:	e25b      	b.n	800cf8e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800cad6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cada:	2b00      	cmp	r3, #0
 800cadc:	f000 80e1 	beq.w	800cca2 <HAL_UART_IRQHandler+0x232>
 800cae0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cae4:	f003 0301 	and.w	r3, r3, #1
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d106      	bne.n	800cafa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800caec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800caf0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	f000 80d4 	beq.w	800cca2 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800cafa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cafe:	f003 0301 	and.w	r3, r3, #1
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d00b      	beq.n	800cb1e <HAL_UART_IRQHandler+0xae>
 800cb06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d005      	beq.n	800cb1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb16:	f043 0201 	orr.w	r2, r3, #1
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cb1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb22:	f003 0304 	and.w	r3, r3, #4
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d00b      	beq.n	800cb42 <HAL_UART_IRQHandler+0xd2>
 800cb2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb2e:	f003 0301 	and.w	r3, r3, #1
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d005      	beq.n	800cb42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb3a:	f043 0202 	orr.w	r2, r3, #2
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cb42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb46:	f003 0302 	and.w	r3, r3, #2
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d00b      	beq.n	800cb66 <HAL_UART_IRQHandler+0xf6>
 800cb4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb52:	f003 0301 	and.w	r3, r3, #1
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d005      	beq.n	800cb66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb5e:	f043 0204 	orr.w	r2, r3, #4
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800cb66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb6a:	f003 0308 	and.w	r3, r3, #8
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d011      	beq.n	800cb96 <HAL_UART_IRQHandler+0x126>
 800cb72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb76:	f003 0320 	and.w	r3, r3, #32
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d105      	bne.n	800cb8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800cb7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb82:	f003 0301 	and.w	r3, r3, #1
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d005      	beq.n	800cb96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb8e:	f043 0208 	orr.w	r2, r3, #8
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	f000 81f2 	beq.w	800cf84 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cba4:	f003 0320 	and.w	r3, r3, #32
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d008      	beq.n	800cbbe <HAL_UART_IRQHandler+0x14e>
 800cbac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cbb0:	f003 0320 	and.w	r3, r3, #32
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d002      	beq.n	800cbbe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f000 fbb4 	bl	800d326 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	695b      	ldr	r3, [r3, #20]
 800cbc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbc8:	2b40      	cmp	r3, #64	; 0x40
 800cbca:	bf0c      	ite	eq
 800cbcc:	2301      	moveq	r3, #1
 800cbce:	2300      	movne	r3, #0
 800cbd0:	b2db      	uxtb	r3, r3
 800cbd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbda:	f003 0308 	and.w	r3, r3, #8
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d103      	bne.n	800cbea <HAL_UART_IRQHandler+0x17a>
 800cbe2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d051      	beq.n	800cc8e <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f000 faba 	bl	800d164 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	695b      	ldr	r3, [r3, #20]
 800cbf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbfa:	2b40      	cmp	r3, #64	; 0x40
 800cbfc:	d142      	bne.n	800cc84 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	3314      	adds	r3, #20
 800cc04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cc0c:	e853 3f00 	ldrex	r3, [r3]
 800cc10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cc14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cc18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	3314      	adds	r3, #20
 800cc26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cc2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800cc2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cc36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cc3a:	e841 2300 	strex	r3, r2, [r1]
 800cc3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800cc42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d1d9      	bne.n	800cbfe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d013      	beq.n	800cc7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc56:	4a7f      	ldr	r2, [pc, #508]	; (800ce54 <HAL_UART_IRQHandler+0x3e4>)
 800cc58:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f7fa fcd0 	bl	8007604 <HAL_DMA_Abort_IT>
 800cc64:	4603      	mov	r3, r0
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d019      	beq.n	800cc9e <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc70:	687a      	ldr	r2, [r7, #4]
 800cc72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cc74:	4610      	mov	r0, r2
 800cc76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc78:	e011      	b.n	800cc9e <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc82:	e00c      	b.n	800cc9e <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc8c:	e007      	b.n	800cc9e <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800cc9c:	e172      	b.n	800cf84 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc9e:	bf00      	nop
    return;
 800cca0:	e170      	b.n	800cf84 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cca6:	2b01      	cmp	r3, #1
 800cca8:	f040 814c 	bne.w	800cf44 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ccac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ccb0:	f003 0310 	and.w	r3, r3, #16
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	f000 8145 	beq.w	800cf44 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ccba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ccbe:	f003 0310 	and.w	r3, r3, #16
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	f000 813e 	beq.w	800cf44 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ccc8:	2300      	movs	r3, #0
 800ccca:	60bb      	str	r3, [r7, #8]
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	60bb      	str	r3, [r7, #8]
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	685b      	ldr	r3, [r3, #4]
 800ccda:	60bb      	str	r3, [r7, #8]
 800ccdc:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	695b      	ldr	r3, [r3, #20]
 800cce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cce8:	2b40      	cmp	r3, #64	; 0x40
 800ccea:	f040 80b5 	bne.w	800ce58 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ccfa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	f000 8142 	beq.w	800cf88 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cd08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cd0c:	429a      	cmp	r2, r3
 800cd0e:	f080 813b 	bcs.w	800cf88 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cd18:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd1e:	69db      	ldr	r3, [r3, #28]
 800cd20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd24:	f000 8088 	beq.w	800ce38 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	330c      	adds	r3, #12
 800cd2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cd36:	e853 3f00 	ldrex	r3, [r3]
 800cd3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800cd3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cd42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	330c      	adds	r3, #12
 800cd50:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800cd54:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cd58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd5c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cd60:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cd64:	e841 2300 	strex	r3, r2, [r1]
 800cd68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800cd6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d1d9      	bne.n	800cd28 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	3314      	adds	r3, #20
 800cd7a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd7e:	e853 3f00 	ldrex	r3, [r3]
 800cd82:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cd84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cd86:	f023 0301 	bic.w	r3, r3, #1
 800cd8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	3314      	adds	r3, #20
 800cd94:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800cd98:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cd9c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd9e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cda0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cda4:	e841 2300 	strex	r3, r2, [r1]
 800cda8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cdaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d1e1      	bne.n	800cd74 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	3314      	adds	r3, #20
 800cdb6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cdba:	e853 3f00 	ldrex	r3, [r3]
 800cdbe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cdc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cdc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cdc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	3314      	adds	r3, #20
 800cdd0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cdd4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cdd6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdd8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cdda:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cddc:	e841 2300 	strex	r3, r2, [r1]
 800cde0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cde2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d1e3      	bne.n	800cdb0 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2220      	movs	r2, #32
 800cdec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	330c      	adds	r3, #12
 800cdfc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce00:	e853 3f00 	ldrex	r3, [r3]
 800ce04:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ce06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce08:	f023 0310 	bic.w	r3, r3, #16
 800ce0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	330c      	adds	r3, #12
 800ce16:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ce1a:	65ba      	str	r2, [r7, #88]	; 0x58
 800ce1c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce1e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ce20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ce22:	e841 2300 	strex	r3, r2, [r1]
 800ce26:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ce28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d1e3      	bne.n	800cdf6 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce32:	4618      	mov	r0, r3
 800ce34:	f7fa fb76 	bl	8007524 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800ce40:	687a      	ldr	r2, [r7, #4]
 800ce42:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800ce44:	b292      	uxth	r2, r2
 800ce46:	1a8a      	subs	r2, r1, r2
 800ce48:	b292      	uxth	r2, r2
 800ce4a:	4611      	mov	r1, r2
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ce50:	e09a      	b.n	800cf88 <HAL_UART_IRQHandler+0x518>
 800ce52:	bf00      	nop
 800ce54:	0800d22b 	.word	0x0800d22b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ce60:	b29b      	uxth	r3, r3
 800ce62:	1ad3      	subs	r3, r2, r3
 800ce64:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ce6c:	b29b      	uxth	r3, r3
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	f000 808c 	beq.w	800cf8c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800ce74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	f000 8087 	beq.w	800cf8c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	330c      	adds	r3, #12
 800ce84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce88:	e853 3f00 	ldrex	r3, [r3]
 800ce8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ce8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ce94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	330c      	adds	r3, #12
 800ce9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800cea2:	647a      	str	r2, [r7, #68]	; 0x44
 800cea4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cea6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cea8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ceaa:	e841 2300 	strex	r3, r2, [r1]
 800ceae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ceb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d1e3      	bne.n	800ce7e <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	3314      	adds	r3, #20
 800cebc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec0:	e853 3f00 	ldrex	r3, [r3]
 800cec4:	623b      	str	r3, [r7, #32]
   return(result);
 800cec6:	6a3b      	ldr	r3, [r7, #32]
 800cec8:	f023 0301 	bic.w	r3, r3, #1
 800cecc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	3314      	adds	r3, #20
 800ced6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ceda:	633a      	str	r2, [r7, #48]	; 0x30
 800cedc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cede:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cee2:	e841 2300 	strex	r3, r2, [r1]
 800cee6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d1e3      	bne.n	800ceb6 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2220      	movs	r2, #32
 800cef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2200      	movs	r2, #0
 800cefa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	330c      	adds	r3, #12
 800cf02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	e853 3f00 	ldrex	r3, [r3]
 800cf0a:	60fb      	str	r3, [r7, #12]
   return(result);
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	f023 0310 	bic.w	r3, r3, #16
 800cf12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	330c      	adds	r3, #12
 800cf1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800cf20:	61fa      	str	r2, [r7, #28]
 800cf22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf24:	69b9      	ldr	r1, [r7, #24]
 800cf26:	69fa      	ldr	r2, [r7, #28]
 800cf28:	e841 2300 	strex	r3, r2, [r1]
 800cf2c:	617b      	str	r3, [r7, #20]
   return(result);
 800cf2e:	697b      	ldr	r3, [r7, #20]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d1e3      	bne.n	800cefc <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf38:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800cf3c:	4611      	mov	r1, r2
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cf42:	e023      	b.n	800cf8c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800cf44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d009      	beq.n	800cf64 <HAL_UART_IRQHandler+0x4f4>
 800cf50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d003      	beq.n	800cf64 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f000 f979 	bl	800d254 <UART_Transmit_IT>
    return;
 800cf62:	e014      	b.n	800cf8e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800cf64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d00e      	beq.n	800cf8e <HAL_UART_IRQHandler+0x51e>
 800cf70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d008      	beq.n	800cf8e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f000 f9b9 	bl	800d2f4 <UART_EndTransmit_IT>
    return;
 800cf82:	e004      	b.n	800cf8e <HAL_UART_IRQHandler+0x51e>
    return;
 800cf84:	bf00      	nop
 800cf86:	e002      	b.n	800cf8e <HAL_UART_IRQHandler+0x51e>
      return;
 800cf88:	bf00      	nop
 800cf8a:	e000      	b.n	800cf8e <HAL_UART_IRQHandler+0x51e>
      return;
 800cf8c:	bf00      	nop
  }
}
 800cf8e:	37e8      	adds	r7, #232	; 0xe8
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}

0800cf94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cf94:	b480      	push	{r7}
 800cf96:	b083      	sub	sp, #12
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800cf9c:	bf00      	nop
 800cf9e:	370c      	adds	r7, #12
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa6:	4770      	bx	lr

0800cfa8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b083      	sub	sp, #12
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800cfb0:	bf00      	nop
 800cfb2:	370c      	adds	r7, #12
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfba:	4770      	bx	lr

0800cfbc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b083      	sub	sp, #12
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800cfc4:	bf00      	nop
 800cfc6:	370c      	adds	r7, #12
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfce:	4770      	bx	lr

0800cfd0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b083      	sub	sp, #12
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800cfd8:	bf00      	nop
 800cfda:	370c      	adds	r7, #12
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe2:	4770      	bx	lr

0800cfe4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b083      	sub	sp, #12
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800cfec:	bf00      	nop
 800cfee:	370c      	adds	r7, #12
 800cff0:	46bd      	mov	sp, r7
 800cff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff6:	4770      	bx	lr

0800cff8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800cff8:	b480      	push	{r7}
 800cffa:	b083      	sub	sp, #12
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800d000:	bf00      	nop
 800d002:	370c      	adds	r7, #12
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr

0800d00c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	460b      	mov	r3, r1
 800d016:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d018:	bf00      	nop
 800d01a:	370c      	adds	r7, #12
 800d01c:	46bd      	mov	sp, r7
 800d01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d022:	4770      	bx	lr

0800d024 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 800d024:	b480      	push	{r7}
 800d026:	b085      	sub	sp, #20
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800d02c:	2300      	movs	r3, #0
 800d02e:	60fb      	str	r3, [r7, #12]
 800d030:	2300      	movs	r3, #0
 800d032:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d03a:	b2db      	uxtb	r3, r3
 800d03c:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d044:	b2db      	uxtb	r3, r3
 800d046:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	b2da      	uxtb	r2, r3
 800d04c:	68bb      	ldr	r3, [r7, #8]
 800d04e:	b2db      	uxtb	r3, r3
 800d050:	4313      	orrs	r3, r2
 800d052:	b2db      	uxtb	r3, r3
}
 800d054:	4618      	mov	r0, r3
 800d056:	3714      	adds	r7, #20
 800d058:	46bd      	mov	sp, r7
 800d05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05e:	4770      	bx	lr

0800d060 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 800d060:	b480      	push	{r7}
 800d062:	b083      	sub	sp, #12
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	370c      	adds	r7, #12
 800d070:	46bd      	mov	sp, r7
 800d072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d076:	4770      	bx	lr

0800d078 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800d078:	b480      	push	{r7}
 800d07a:	b083      	sub	sp, #12
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	4a10      	ldr	r2, [pc, #64]	; (800d0c4 <UART_InitCallbacksToDefault+0x4c>)
 800d084:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	4a0f      	ldr	r2, [pc, #60]	; (800d0c8 <UART_InitCallbacksToDefault+0x50>)
 800d08a:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	4a0f      	ldr	r2, [pc, #60]	; (800d0cc <UART_InitCallbacksToDefault+0x54>)
 800d090:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	4a0e      	ldr	r2, [pc, #56]	; (800d0d0 <UART_InitCallbacksToDefault+0x58>)
 800d096:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	4a0e      	ldr	r2, [pc, #56]	; (800d0d4 <UART_InitCallbacksToDefault+0x5c>)
 800d09c:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	4a0d      	ldr	r2, [pc, #52]	; (800d0d8 <UART_InitCallbacksToDefault+0x60>)
 800d0a2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	4a0d      	ldr	r2, [pc, #52]	; (800d0dc <UART_InitCallbacksToDefault+0x64>)
 800d0a8:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	4a0c      	ldr	r2, [pc, #48]	; (800d0e0 <UART_InitCallbacksToDefault+0x68>)
 800d0ae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	4a0c      	ldr	r2, [pc, #48]	; (800d0e4 <UART_InitCallbacksToDefault+0x6c>)
 800d0b4:	669a      	str	r2, [r3, #104]	; 0x68

}
 800d0b6:	bf00      	nop
 800d0b8:	370c      	adds	r7, #12
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c0:	4770      	bx	lr
 800d0c2:	bf00      	nop
 800d0c4:	0800cfa9 	.word	0x0800cfa9
 800d0c8:	0800cf95 	.word	0x0800cf95
 800d0cc:	0800cfbd 	.word	0x0800cfbd
 800d0d0:	08004589 	.word	0x08004589
 800d0d4:	080044d5 	.word	0x080044d5
 800d0d8:	0800cfd1 	.word	0x0800cfd1
 800d0dc:	0800cfe5 	.word	0x0800cfe5
 800d0e0:	0800cff9 	.word	0x0800cff9
 800d0e4:	0800d00d 	.word	0x0800d00d

0800d0e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	b085      	sub	sp, #20
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	60f8      	str	r0, [r7, #12]
 800d0f0:	60b9      	str	r1, [r7, #8]
 800d0f2:	4613      	mov	r3, r2
 800d0f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	68ba      	ldr	r2, [r7, #8]
 800d0fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	88fa      	ldrh	r2, [r7, #6]
 800d100:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	88fa      	ldrh	r2, [r7, #6]
 800d106:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	2200      	movs	r2, #0
 800d10c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	2222      	movs	r2, #34	; 0x22
 800d112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	2200      	movs	r2, #0
 800d11a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	691b      	ldr	r3, [r3, #16]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d007      	beq.n	800d136 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	68da      	ldr	r2, [r3, #12]
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d134:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	695a      	ldr	r2, [r3, #20]
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	f042 0201 	orr.w	r2, r2, #1
 800d144:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	68da      	ldr	r2, [r3, #12]
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	f042 0220 	orr.w	r2, r2, #32
 800d154:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d156:	2300      	movs	r3, #0
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3714      	adds	r7, #20
 800d15c:	46bd      	mov	sp, r7
 800d15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d162:	4770      	bx	lr

0800d164 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d164:	b480      	push	{r7}
 800d166:	b095      	sub	sp, #84	; 0x54
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	330c      	adds	r3, #12
 800d172:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d176:	e853 3f00 	ldrex	r3, [r3]
 800d17a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d17e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d182:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	330c      	adds	r3, #12
 800d18a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d18c:	643a      	str	r2, [r7, #64]	; 0x40
 800d18e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d190:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d192:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d194:	e841 2300 	strex	r3, r2, [r1]
 800d198:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d1e5      	bne.n	800d16c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	3314      	adds	r3, #20
 800d1a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1a8:	6a3b      	ldr	r3, [r7, #32]
 800d1aa:	e853 3f00 	ldrex	r3, [r3]
 800d1ae:	61fb      	str	r3, [r7, #28]
   return(result);
 800d1b0:	69fb      	ldr	r3, [r7, #28]
 800d1b2:	f023 0301 	bic.w	r3, r3, #1
 800d1b6:	64bb      	str	r3, [r7, #72]	; 0x48
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	3314      	adds	r3, #20
 800d1be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d1c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d1c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d1c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1c8:	e841 2300 	strex	r3, r2, [r1]
 800d1cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d1e5      	bne.n	800d1a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1d8:	2b01      	cmp	r3, #1
 800d1da:	d119      	bne.n	800d210 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	330c      	adds	r3, #12
 800d1e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	e853 3f00 	ldrex	r3, [r3]
 800d1ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	f023 0310 	bic.w	r3, r3, #16
 800d1f2:	647b      	str	r3, [r7, #68]	; 0x44
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	330c      	adds	r3, #12
 800d1fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d1fc:	61ba      	str	r2, [r7, #24]
 800d1fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d200:	6979      	ldr	r1, [r7, #20]
 800d202:	69ba      	ldr	r2, [r7, #24]
 800d204:	e841 2300 	strex	r3, r2, [r1]
 800d208:	613b      	str	r3, [r7, #16]
   return(result);
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d1e5      	bne.n	800d1dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2220      	movs	r2, #32
 800d214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2200      	movs	r2, #0
 800d21c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800d21e:	bf00      	nop
 800d220:	3754      	adds	r7, #84	; 0x54
 800d222:	46bd      	mov	sp, r7
 800d224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d228:	4770      	bx	lr

0800d22a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d22a:	b580      	push	{r7, lr}
 800d22c:	b084      	sub	sp, #16
 800d22e:	af00      	add	r7, sp, #0
 800d230:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d236:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	2200      	movs	r2, #0
 800d23c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	2200      	movs	r2, #0
 800d242:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d248:	68f8      	ldr	r0, [r7, #12]
 800d24a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d24c:	bf00      	nop
 800d24e:	3710      	adds	r7, #16
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}

0800d254 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d254:	b480      	push	{r7}
 800d256:	b085      	sub	sp, #20
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d262:	b2db      	uxtb	r3, r3
 800d264:	2b21      	cmp	r3, #33	; 0x21
 800d266:	d13e      	bne.n	800d2e6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	689b      	ldr	r3, [r3, #8]
 800d26c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d270:	d114      	bne.n	800d29c <UART_Transmit_IT+0x48>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	691b      	ldr	r3, [r3, #16]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d110      	bne.n	800d29c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6a1b      	ldr	r3, [r3, #32]
 800d27e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	881b      	ldrh	r3, [r3, #0]
 800d284:	461a      	mov	r2, r3
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d28e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6a1b      	ldr	r3, [r3, #32]
 800d294:	1c9a      	adds	r2, r3, #2
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	621a      	str	r2, [r3, #32]
 800d29a:	e008      	b.n	800d2ae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6a1b      	ldr	r3, [r3, #32]
 800d2a0:	1c59      	adds	r1, r3, #1
 800d2a2:	687a      	ldr	r2, [r7, #4]
 800d2a4:	6211      	str	r1, [r2, #32]
 800d2a6:	781a      	ldrb	r2, [r3, #0]
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d2b2:	b29b      	uxth	r3, r3
 800d2b4:	3b01      	subs	r3, #1
 800d2b6:	b29b      	uxth	r3, r3
 800d2b8:	687a      	ldr	r2, [r7, #4]
 800d2ba:	4619      	mov	r1, r3
 800d2bc:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d10f      	bne.n	800d2e2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	68da      	ldr	r2, [r3, #12]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d2d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	68da      	ldr	r2, [r3, #12]
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d2e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	e000      	b.n	800d2e8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d2e6:	2302      	movs	r3, #2
  }
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3714      	adds	r7, #20
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f2:	4770      	bx	lr

0800d2f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	68da      	ldr	r2, [r3, #12]
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d30a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2220      	movs	r2, #32
 800d310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d31c:	2300      	movs	r3, #0
}
 800d31e:	4618      	mov	r0, r3
 800d320:	3708      	adds	r7, #8
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}

0800d326 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d326:	b580      	push	{r7, lr}
 800d328:	b08c      	sub	sp, #48	; 0x30
 800d32a:	af00      	add	r7, sp, #0
 800d32c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d334:	b2db      	uxtb	r3, r3
 800d336:	2b22      	cmp	r3, #34	; 0x22
 800d338:	f040 80ad 	bne.w	800d496 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	689b      	ldr	r3, [r3, #8]
 800d340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d344:	d117      	bne.n	800d376 <UART_Receive_IT+0x50>
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	691b      	ldr	r3, [r3, #16]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d113      	bne.n	800d376 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d34e:	2300      	movs	r3, #0
 800d350:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d356:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	685b      	ldr	r3, [r3, #4]
 800d35e:	b29b      	uxth	r3, r3
 800d360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d364:	b29a      	uxth	r2, r3
 800d366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d368:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d36e:	1c9a      	adds	r2, r3, #2
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	629a      	str	r2, [r3, #40]	; 0x28
 800d374:	e026      	b.n	800d3c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d37a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800d37c:	2300      	movs	r3, #0
 800d37e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	689b      	ldr	r3, [r3, #8]
 800d384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d388:	d007      	beq.n	800d39a <UART_Receive_IT+0x74>
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	689b      	ldr	r3, [r3, #8]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d10a      	bne.n	800d3a8 <UART_Receive_IT+0x82>
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	691b      	ldr	r3, [r3, #16]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d106      	bne.n	800d3a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	685b      	ldr	r3, [r3, #4]
 800d3a0:	b2da      	uxtb	r2, r3
 800d3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a4:	701a      	strb	r2, [r3, #0]
 800d3a6:	e008      	b.n	800d3ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	685b      	ldr	r3, [r3, #4]
 800d3ae:	b2db      	uxtb	r3, r3
 800d3b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3b4:	b2da      	uxtb	r2, r3
 800d3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3be:	1c5a      	adds	r2, r3, #1
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d3c8:	b29b      	uxth	r3, r3
 800d3ca:	3b01      	subs	r3, #1
 800d3cc:	b29b      	uxth	r3, r3
 800d3ce:	687a      	ldr	r2, [r7, #4]
 800d3d0:	4619      	mov	r1, r3
 800d3d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d15c      	bne.n	800d492 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	68da      	ldr	r2, [r3, #12]
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	f022 0220 	bic.w	r2, r2, #32
 800d3e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	68da      	ldr	r2, [r3, #12]
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d3f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	695a      	ldr	r2, [r3, #20]
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	f022 0201 	bic.w	r2, r2, #1
 800d406:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2220      	movs	r2, #32
 800d40c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d414:	2b01      	cmp	r3, #1
 800d416:	d136      	bne.n	800d486 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2200      	movs	r2, #0
 800d41c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	330c      	adds	r3, #12
 800d424:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	e853 3f00 	ldrex	r3, [r3]
 800d42c:	613b      	str	r3, [r7, #16]
   return(result);
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	f023 0310 	bic.w	r3, r3, #16
 800d434:	627b      	str	r3, [r7, #36]	; 0x24
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	330c      	adds	r3, #12
 800d43c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d43e:	623a      	str	r2, [r7, #32]
 800d440:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d442:	69f9      	ldr	r1, [r7, #28]
 800d444:	6a3a      	ldr	r2, [r7, #32]
 800d446:	e841 2300 	strex	r3, r2, [r1]
 800d44a:	61bb      	str	r3, [r7, #24]
   return(result);
 800d44c:	69bb      	ldr	r3, [r7, #24]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d1e5      	bne.n	800d41e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	f003 0310 	and.w	r3, r3, #16
 800d45c:	2b10      	cmp	r3, #16
 800d45e:	d10a      	bne.n	800d476 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d460:	2300      	movs	r3, #0
 800d462:	60fb      	str	r3, [r7, #12]
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	60fb      	str	r3, [r7, #12]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	685b      	ldr	r3, [r3, #4]
 800d472:	60fb      	str	r3, [r7, #12]
 800d474:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d47a:	687a      	ldr	r2, [r7, #4]
 800d47c:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800d47e:	4611      	mov	r1, r2
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	4798      	blx	r3
 800d484:	e003      	b.n	800d48e <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d48e:	2300      	movs	r3, #0
 800d490:	e002      	b.n	800d498 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800d492:	2300      	movs	r3, #0
 800d494:	e000      	b.n	800d498 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800d496:	2302      	movs	r3, #2
  }
}
 800d498:	4618      	mov	r0, r3
 800d49a:	3730      	adds	r7, #48	; 0x30
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}

0800d4a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d4a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d4a4:	b0c0      	sub	sp, #256	; 0x100
 800d4a6:	af00      	add	r7, sp, #0
 800d4a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d4ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	691b      	ldr	r3, [r3, #16]
 800d4b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d4b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d4bc:	68d9      	ldr	r1, [r3, #12]
 800d4be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d4c2:	681a      	ldr	r2, [r3, #0]
 800d4c4:	ea40 0301 	orr.w	r3, r0, r1
 800d4c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d4ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d4ce:	689a      	ldr	r2, [r3, #8]
 800d4d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d4d4:	691b      	ldr	r3, [r3, #16]
 800d4d6:	431a      	orrs	r2, r3
 800d4d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d4dc:	695b      	ldr	r3, [r3, #20]
 800d4de:	431a      	orrs	r2, r3
 800d4e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d4e4:	69db      	ldr	r3, [r3, #28]
 800d4e6:	4313      	orrs	r3, r2
 800d4e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d4ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	68db      	ldr	r3, [r3, #12]
 800d4f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800d4f8:	f021 010c 	bic.w	r1, r1, #12
 800d4fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d500:	681a      	ldr	r2, [r3, #0]
 800d502:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d506:	430b      	orrs	r3, r1
 800d508:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d50a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	695b      	ldr	r3, [r3, #20]
 800d512:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800d516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d51a:	6999      	ldr	r1, [r3, #24]
 800d51c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d520:	681a      	ldr	r2, [r3, #0]
 800d522:	ea40 0301 	orr.w	r3, r0, r1
 800d526:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d52c:	681a      	ldr	r2, [r3, #0]
 800d52e:	4b8f      	ldr	r3, [pc, #572]	; (800d76c <UART_SetConfig+0x2cc>)
 800d530:	429a      	cmp	r2, r3
 800d532:	d005      	beq.n	800d540 <UART_SetConfig+0xa0>
 800d534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d538:	681a      	ldr	r2, [r3, #0]
 800d53a:	4b8d      	ldr	r3, [pc, #564]	; (800d770 <UART_SetConfig+0x2d0>)
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d104      	bne.n	800d54a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d540:	f7fd fc3e 	bl	800adc0 <HAL_RCC_GetPCLK2Freq>
 800d544:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800d548:	e003      	b.n	800d552 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d54a:	f7fd fc25 	bl	800ad98 <HAL_RCC_GetPCLK1Freq>
 800d54e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d556:	69db      	ldr	r3, [r3, #28]
 800d558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d55c:	f040 810c 	bne.w	800d778 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d560:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d564:	2200      	movs	r2, #0
 800d566:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d56a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800d56e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800d572:	4622      	mov	r2, r4
 800d574:	462b      	mov	r3, r5
 800d576:	1891      	adds	r1, r2, r2
 800d578:	65b9      	str	r1, [r7, #88]	; 0x58
 800d57a:	415b      	adcs	r3, r3
 800d57c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d57e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d582:	4621      	mov	r1, r4
 800d584:	eb12 0801 	adds.w	r8, r2, r1
 800d588:	4629      	mov	r1, r5
 800d58a:	eb43 0901 	adc.w	r9, r3, r1
 800d58e:	f04f 0200 	mov.w	r2, #0
 800d592:	f04f 0300 	mov.w	r3, #0
 800d596:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d59a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d59e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d5a2:	4690      	mov	r8, r2
 800d5a4:	4699      	mov	r9, r3
 800d5a6:	4623      	mov	r3, r4
 800d5a8:	eb18 0303 	adds.w	r3, r8, r3
 800d5ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d5b0:	462b      	mov	r3, r5
 800d5b2:	eb49 0303 	adc.w	r3, r9, r3
 800d5b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d5ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d5be:	685b      	ldr	r3, [r3, #4]
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d5c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800d5ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d5ce:	460b      	mov	r3, r1
 800d5d0:	18db      	adds	r3, r3, r3
 800d5d2:	653b      	str	r3, [r7, #80]	; 0x50
 800d5d4:	4613      	mov	r3, r2
 800d5d6:	eb42 0303 	adc.w	r3, r2, r3
 800d5da:	657b      	str	r3, [r7, #84]	; 0x54
 800d5dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d5e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800d5e4:	f7f3 fa42 	bl	8000a6c <__aeabi_uldivmod>
 800d5e8:	4602      	mov	r2, r0
 800d5ea:	460b      	mov	r3, r1
 800d5ec:	4b61      	ldr	r3, [pc, #388]	; (800d774 <UART_SetConfig+0x2d4>)
 800d5ee:	fba3 2302 	umull	r2, r3, r3, r2
 800d5f2:	095b      	lsrs	r3, r3, #5
 800d5f4:	011c      	lsls	r4, r3, #4
 800d5f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d600:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800d604:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800d608:	4642      	mov	r2, r8
 800d60a:	464b      	mov	r3, r9
 800d60c:	1891      	adds	r1, r2, r2
 800d60e:	64b9      	str	r1, [r7, #72]	; 0x48
 800d610:	415b      	adcs	r3, r3
 800d612:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d614:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d618:	4641      	mov	r1, r8
 800d61a:	eb12 0a01 	adds.w	sl, r2, r1
 800d61e:	4649      	mov	r1, r9
 800d620:	eb43 0b01 	adc.w	fp, r3, r1
 800d624:	f04f 0200 	mov.w	r2, #0
 800d628:	f04f 0300 	mov.w	r3, #0
 800d62c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d630:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d634:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d638:	4692      	mov	sl, r2
 800d63a:	469b      	mov	fp, r3
 800d63c:	4643      	mov	r3, r8
 800d63e:	eb1a 0303 	adds.w	r3, sl, r3
 800d642:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d646:	464b      	mov	r3, r9
 800d648:	eb4b 0303 	adc.w	r3, fp, r3
 800d64c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d654:	685b      	ldr	r3, [r3, #4]
 800d656:	2200      	movs	r2, #0
 800d658:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d65c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800d660:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d664:	460b      	mov	r3, r1
 800d666:	18db      	adds	r3, r3, r3
 800d668:	643b      	str	r3, [r7, #64]	; 0x40
 800d66a:	4613      	mov	r3, r2
 800d66c:	eb42 0303 	adc.w	r3, r2, r3
 800d670:	647b      	str	r3, [r7, #68]	; 0x44
 800d672:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d676:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d67a:	f7f3 f9f7 	bl	8000a6c <__aeabi_uldivmod>
 800d67e:	4602      	mov	r2, r0
 800d680:	460b      	mov	r3, r1
 800d682:	4611      	mov	r1, r2
 800d684:	4b3b      	ldr	r3, [pc, #236]	; (800d774 <UART_SetConfig+0x2d4>)
 800d686:	fba3 2301 	umull	r2, r3, r3, r1
 800d68a:	095b      	lsrs	r3, r3, #5
 800d68c:	2264      	movs	r2, #100	; 0x64
 800d68e:	fb02 f303 	mul.w	r3, r2, r3
 800d692:	1acb      	subs	r3, r1, r3
 800d694:	00db      	lsls	r3, r3, #3
 800d696:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800d69a:	4b36      	ldr	r3, [pc, #216]	; (800d774 <UART_SetConfig+0x2d4>)
 800d69c:	fba3 2302 	umull	r2, r3, r3, r2
 800d6a0:	095b      	lsrs	r3, r3, #5
 800d6a2:	005b      	lsls	r3, r3, #1
 800d6a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d6a8:	441c      	add	r4, r3
 800d6aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d6b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d6b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800d6bc:	4642      	mov	r2, r8
 800d6be:	464b      	mov	r3, r9
 800d6c0:	1891      	adds	r1, r2, r2
 800d6c2:	63b9      	str	r1, [r7, #56]	; 0x38
 800d6c4:	415b      	adcs	r3, r3
 800d6c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d6c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d6cc:	4641      	mov	r1, r8
 800d6ce:	1851      	adds	r1, r2, r1
 800d6d0:	6339      	str	r1, [r7, #48]	; 0x30
 800d6d2:	4649      	mov	r1, r9
 800d6d4:	414b      	adcs	r3, r1
 800d6d6:	637b      	str	r3, [r7, #52]	; 0x34
 800d6d8:	f04f 0200 	mov.w	r2, #0
 800d6dc:	f04f 0300 	mov.w	r3, #0
 800d6e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800d6e4:	4659      	mov	r1, fp
 800d6e6:	00cb      	lsls	r3, r1, #3
 800d6e8:	4651      	mov	r1, sl
 800d6ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d6ee:	4651      	mov	r1, sl
 800d6f0:	00ca      	lsls	r2, r1, #3
 800d6f2:	4610      	mov	r0, r2
 800d6f4:	4619      	mov	r1, r3
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	4642      	mov	r2, r8
 800d6fa:	189b      	adds	r3, r3, r2
 800d6fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d700:	464b      	mov	r3, r9
 800d702:	460a      	mov	r2, r1
 800d704:	eb42 0303 	adc.w	r3, r2, r3
 800d708:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d70c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d710:	685b      	ldr	r3, [r3, #4]
 800d712:	2200      	movs	r2, #0
 800d714:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d718:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d71c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d720:	460b      	mov	r3, r1
 800d722:	18db      	adds	r3, r3, r3
 800d724:	62bb      	str	r3, [r7, #40]	; 0x28
 800d726:	4613      	mov	r3, r2
 800d728:	eb42 0303 	adc.w	r3, r2, r3
 800d72c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d72e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d732:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800d736:	f7f3 f999 	bl	8000a6c <__aeabi_uldivmod>
 800d73a:	4602      	mov	r2, r0
 800d73c:	460b      	mov	r3, r1
 800d73e:	4b0d      	ldr	r3, [pc, #52]	; (800d774 <UART_SetConfig+0x2d4>)
 800d740:	fba3 1302 	umull	r1, r3, r3, r2
 800d744:	095b      	lsrs	r3, r3, #5
 800d746:	2164      	movs	r1, #100	; 0x64
 800d748:	fb01 f303 	mul.w	r3, r1, r3
 800d74c:	1ad3      	subs	r3, r2, r3
 800d74e:	00db      	lsls	r3, r3, #3
 800d750:	3332      	adds	r3, #50	; 0x32
 800d752:	4a08      	ldr	r2, [pc, #32]	; (800d774 <UART_SetConfig+0x2d4>)
 800d754:	fba2 2303 	umull	r2, r3, r2, r3
 800d758:	095b      	lsrs	r3, r3, #5
 800d75a:	f003 0207 	and.w	r2, r3, #7
 800d75e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	4422      	add	r2, r4
 800d766:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d768:	e105      	b.n	800d976 <UART_SetConfig+0x4d6>
 800d76a:	bf00      	nop
 800d76c:	40011000 	.word	0x40011000
 800d770:	40011400 	.word	0x40011400
 800d774:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d778:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d77c:	2200      	movs	r2, #0
 800d77e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d782:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d786:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800d78a:	4642      	mov	r2, r8
 800d78c:	464b      	mov	r3, r9
 800d78e:	1891      	adds	r1, r2, r2
 800d790:	6239      	str	r1, [r7, #32]
 800d792:	415b      	adcs	r3, r3
 800d794:	627b      	str	r3, [r7, #36]	; 0x24
 800d796:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d79a:	4641      	mov	r1, r8
 800d79c:	1854      	adds	r4, r2, r1
 800d79e:	4649      	mov	r1, r9
 800d7a0:	eb43 0501 	adc.w	r5, r3, r1
 800d7a4:	f04f 0200 	mov.w	r2, #0
 800d7a8:	f04f 0300 	mov.w	r3, #0
 800d7ac:	00eb      	lsls	r3, r5, #3
 800d7ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d7b2:	00e2      	lsls	r2, r4, #3
 800d7b4:	4614      	mov	r4, r2
 800d7b6:	461d      	mov	r5, r3
 800d7b8:	4643      	mov	r3, r8
 800d7ba:	18e3      	adds	r3, r4, r3
 800d7bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d7c0:	464b      	mov	r3, r9
 800d7c2:	eb45 0303 	adc.w	r3, r5, r3
 800d7c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d7ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d7ce:	685b      	ldr	r3, [r3, #4]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d7d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d7da:	f04f 0200 	mov.w	r2, #0
 800d7de:	f04f 0300 	mov.w	r3, #0
 800d7e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d7e6:	4629      	mov	r1, r5
 800d7e8:	008b      	lsls	r3, r1, #2
 800d7ea:	4621      	mov	r1, r4
 800d7ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d7f0:	4621      	mov	r1, r4
 800d7f2:	008a      	lsls	r2, r1, #2
 800d7f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800d7f8:	f7f3 f938 	bl	8000a6c <__aeabi_uldivmod>
 800d7fc:	4602      	mov	r2, r0
 800d7fe:	460b      	mov	r3, r1
 800d800:	4b60      	ldr	r3, [pc, #384]	; (800d984 <UART_SetConfig+0x4e4>)
 800d802:	fba3 2302 	umull	r2, r3, r3, r2
 800d806:	095b      	lsrs	r3, r3, #5
 800d808:	011c      	lsls	r4, r3, #4
 800d80a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d80e:	2200      	movs	r2, #0
 800d810:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d814:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d818:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d81c:	4642      	mov	r2, r8
 800d81e:	464b      	mov	r3, r9
 800d820:	1891      	adds	r1, r2, r2
 800d822:	61b9      	str	r1, [r7, #24]
 800d824:	415b      	adcs	r3, r3
 800d826:	61fb      	str	r3, [r7, #28]
 800d828:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d82c:	4641      	mov	r1, r8
 800d82e:	1851      	adds	r1, r2, r1
 800d830:	6139      	str	r1, [r7, #16]
 800d832:	4649      	mov	r1, r9
 800d834:	414b      	adcs	r3, r1
 800d836:	617b      	str	r3, [r7, #20]
 800d838:	f04f 0200 	mov.w	r2, #0
 800d83c:	f04f 0300 	mov.w	r3, #0
 800d840:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d844:	4659      	mov	r1, fp
 800d846:	00cb      	lsls	r3, r1, #3
 800d848:	4651      	mov	r1, sl
 800d84a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d84e:	4651      	mov	r1, sl
 800d850:	00ca      	lsls	r2, r1, #3
 800d852:	4610      	mov	r0, r2
 800d854:	4619      	mov	r1, r3
 800d856:	4603      	mov	r3, r0
 800d858:	4642      	mov	r2, r8
 800d85a:	189b      	adds	r3, r3, r2
 800d85c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d860:	464b      	mov	r3, r9
 800d862:	460a      	mov	r2, r1
 800d864:	eb42 0303 	adc.w	r3, r2, r3
 800d868:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d86c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d870:	685b      	ldr	r3, [r3, #4]
 800d872:	2200      	movs	r2, #0
 800d874:	67bb      	str	r3, [r7, #120]	; 0x78
 800d876:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d878:	f04f 0200 	mov.w	r2, #0
 800d87c:	f04f 0300 	mov.w	r3, #0
 800d880:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d884:	4649      	mov	r1, r9
 800d886:	008b      	lsls	r3, r1, #2
 800d888:	4641      	mov	r1, r8
 800d88a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d88e:	4641      	mov	r1, r8
 800d890:	008a      	lsls	r2, r1, #2
 800d892:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d896:	f7f3 f8e9 	bl	8000a6c <__aeabi_uldivmod>
 800d89a:	4602      	mov	r2, r0
 800d89c:	460b      	mov	r3, r1
 800d89e:	4b39      	ldr	r3, [pc, #228]	; (800d984 <UART_SetConfig+0x4e4>)
 800d8a0:	fba3 1302 	umull	r1, r3, r3, r2
 800d8a4:	095b      	lsrs	r3, r3, #5
 800d8a6:	2164      	movs	r1, #100	; 0x64
 800d8a8:	fb01 f303 	mul.w	r3, r1, r3
 800d8ac:	1ad3      	subs	r3, r2, r3
 800d8ae:	011b      	lsls	r3, r3, #4
 800d8b0:	3332      	adds	r3, #50	; 0x32
 800d8b2:	4a34      	ldr	r2, [pc, #208]	; (800d984 <UART_SetConfig+0x4e4>)
 800d8b4:	fba2 2303 	umull	r2, r3, r2, r3
 800d8b8:	095b      	lsrs	r3, r3, #5
 800d8ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d8be:	441c      	add	r4, r3
 800d8c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	673b      	str	r3, [r7, #112]	; 0x70
 800d8c8:	677a      	str	r2, [r7, #116]	; 0x74
 800d8ca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d8ce:	4642      	mov	r2, r8
 800d8d0:	464b      	mov	r3, r9
 800d8d2:	1891      	adds	r1, r2, r2
 800d8d4:	60b9      	str	r1, [r7, #8]
 800d8d6:	415b      	adcs	r3, r3
 800d8d8:	60fb      	str	r3, [r7, #12]
 800d8da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d8de:	4641      	mov	r1, r8
 800d8e0:	1851      	adds	r1, r2, r1
 800d8e2:	6039      	str	r1, [r7, #0]
 800d8e4:	4649      	mov	r1, r9
 800d8e6:	414b      	adcs	r3, r1
 800d8e8:	607b      	str	r3, [r7, #4]
 800d8ea:	f04f 0200 	mov.w	r2, #0
 800d8ee:	f04f 0300 	mov.w	r3, #0
 800d8f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d8f6:	4659      	mov	r1, fp
 800d8f8:	00cb      	lsls	r3, r1, #3
 800d8fa:	4651      	mov	r1, sl
 800d8fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d900:	4651      	mov	r1, sl
 800d902:	00ca      	lsls	r2, r1, #3
 800d904:	4610      	mov	r0, r2
 800d906:	4619      	mov	r1, r3
 800d908:	4603      	mov	r3, r0
 800d90a:	4642      	mov	r2, r8
 800d90c:	189b      	adds	r3, r3, r2
 800d90e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d910:	464b      	mov	r3, r9
 800d912:	460a      	mov	r2, r1
 800d914:	eb42 0303 	adc.w	r3, r2, r3
 800d918:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d91a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d91e:	685b      	ldr	r3, [r3, #4]
 800d920:	2200      	movs	r2, #0
 800d922:	663b      	str	r3, [r7, #96]	; 0x60
 800d924:	667a      	str	r2, [r7, #100]	; 0x64
 800d926:	f04f 0200 	mov.w	r2, #0
 800d92a:	f04f 0300 	mov.w	r3, #0
 800d92e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d932:	4649      	mov	r1, r9
 800d934:	008b      	lsls	r3, r1, #2
 800d936:	4641      	mov	r1, r8
 800d938:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d93c:	4641      	mov	r1, r8
 800d93e:	008a      	lsls	r2, r1, #2
 800d940:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d944:	f7f3 f892 	bl	8000a6c <__aeabi_uldivmod>
 800d948:	4602      	mov	r2, r0
 800d94a:	460b      	mov	r3, r1
 800d94c:	4b0d      	ldr	r3, [pc, #52]	; (800d984 <UART_SetConfig+0x4e4>)
 800d94e:	fba3 1302 	umull	r1, r3, r3, r2
 800d952:	095b      	lsrs	r3, r3, #5
 800d954:	2164      	movs	r1, #100	; 0x64
 800d956:	fb01 f303 	mul.w	r3, r1, r3
 800d95a:	1ad3      	subs	r3, r2, r3
 800d95c:	011b      	lsls	r3, r3, #4
 800d95e:	3332      	adds	r3, #50	; 0x32
 800d960:	4a08      	ldr	r2, [pc, #32]	; (800d984 <UART_SetConfig+0x4e4>)
 800d962:	fba2 2303 	umull	r2, r3, r2, r3
 800d966:	095b      	lsrs	r3, r3, #5
 800d968:	f003 020f 	and.w	r2, r3, #15
 800d96c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	4422      	add	r2, r4
 800d974:	609a      	str	r2, [r3, #8]
}
 800d976:	bf00      	nop
 800d978:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d97c:	46bd      	mov	sp, r7
 800d97e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d982:	bf00      	nop
 800d984:	51eb851f 	.word	0x51eb851f

0800d988 <HAL_ADC_ConvCpltCallback>:
* Function: HAL_ADC_ConvCpltCallback										   	   *
* Description: Conversion callback to process conversion complete in the 		   *
* 			   peripheral.														   *
************************************************************************************/
VOID HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b082      	sub	sp, #8
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
	if(Rte_P_Os_OsPort_Os_Counter % 200 == 0)
 800d990:	4b09      	ldr	r3, [pc, #36]	; (800d9b8 <HAL_ADC_ConvCpltCallback+0x30>)
 800d992:	681a      	ldr	r2, [r3, #0]
 800d994:	4b09      	ldr	r3, [pc, #36]	; (800d9bc <HAL_ADC_ConvCpltCallback+0x34>)
 800d996:	fba3 1302 	umull	r1, r3, r3, r2
 800d99a:	099b      	lsrs	r3, r3, #6
 800d99c:	21c8      	movs	r1, #200	; 0xc8
 800d99e:	fb01 f303 	mul.w	r3, r1, r3
 800d9a2:	1ad3      	subs	r3, r2, r3
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d102      	bne.n	800d9ae <HAL_ADC_ConvCpltCallback+0x26>
	{
		Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues(Adc_ChannelOne_Buffer);
 800d9a8:	4805      	ldr	r0, [pc, #20]	; (800d9c0 <HAL_ADC_ConvCpltCallback+0x38>)
 800d9aa:	f004 fabf 	bl	8011f2c <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues>
	}
	else
	{
		/* do nothing */
	}
}
 800d9ae:	bf00      	nop
 800d9b0:	3708      	adds	r7, #8
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}
 800d9b6:	bf00      	nop
 800d9b8:	200002dc 	.word	0x200002dc
 800d9bc:	51eb851f 	.word	0x51eb851f
 800d9c0:	200008f0 	.word	0x200008f0

0800d9c4 <HAL_ADC_ErrorCallback>:
/***********************************************************************************
* Function: HAL_ADC_ErrorCallback										   		   *
* Description: Error callback to process fault in the peripheral.		 		   *
************************************************************************************/
VOID HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b084      	sub	sp, #16
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
	/* Local variable to store error status. */
	uint32 receivedStatus = HAL_ADC_GetError(&hadc1);
 800d9cc:	481b      	ldr	r0, [pc, #108]	; (800da3c <HAL_ADC_ErrorCallback+0x78>)
 800d9ce:	f7f9 f875 	bl	8006abc <HAL_ADC_GetError>
 800d9d2:	60f8      	str	r0, [r7, #12]
	/* Process error status.
	 * Perform re-initialization on each error to prevent faults in the peripheral. */
	switch(receivedStatus)
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	2b04      	cmp	r3, #4
 800d9d8:	d82a      	bhi.n	800da30 <HAL_ADC_ErrorCallback+0x6c>
 800d9da:	a201      	add	r2, pc, #4	; (adr r2, 800d9e0 <HAL_ADC_ErrorCallback+0x1c>)
 800d9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9e0:	0800da31 	.word	0x0800da31
 800d9e4:	0800d9f5 	.word	0x0800d9f5
 800d9e8:	0800da09 	.word	0x0800da09
 800d9ec:	0800da31 	.word	0x0800da31
 800d9f0:	0800da1d 	.word	0x0800da1d
	{
		case HAL_ADC_ERROR_NONE:
			/* do nothing */
			break;
		case HAL_ADC_ERROR_INTERNAL:
			SystemManager_Fault[ADC_ERROR_INTERNAL]++;
 800d9f4:	4b12      	ldr	r3, [pc, #72]	; (800da40 <HAL_ADC_ErrorCallback+0x7c>)
 800d9f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9f8:	3301      	adds	r3, #1
 800d9fa:	4a11      	ldr	r2, [pc, #68]	; (800da40 <HAL_ADC_ErrorCallback+0x7c>)
 800d9fc:	6393      	str	r3, [r2, #56]	; 0x38
			Adc_DeInit();
 800d9fe:	f000 f897 	bl	800db30 <Adc_DeInit>
			Adc_Init();
 800da02:	f000 f89f 	bl	800db44 <Adc_Init>
			break;
 800da06:	e014      	b.n	800da32 <HAL_ADC_ErrorCallback+0x6e>
		case HAL_ADC_ERROR_OVR:
			SystemManager_Fault[ADC_ERROR_OVR]++;
 800da08:	4b0d      	ldr	r3, [pc, #52]	; (800da40 <HAL_ADC_ErrorCallback+0x7c>)
 800da0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da0c:	3301      	adds	r3, #1
 800da0e:	4a0c      	ldr	r2, [pc, #48]	; (800da40 <HAL_ADC_ErrorCallback+0x7c>)
 800da10:	63d3      	str	r3, [r2, #60]	; 0x3c
			Adc_DeInit();
 800da12:	f000 f88d 	bl	800db30 <Adc_DeInit>
			Adc_Init();
 800da16:	f000 f895 	bl	800db44 <Adc_Init>
			break;
 800da1a:	e00a      	b.n	800da32 <HAL_ADC_ErrorCallback+0x6e>
		case HAL_ADC_ERROR_DMA:
			SystemManager_Fault[ADC_ERROR_DMA]++;
 800da1c:	4b08      	ldr	r3, [pc, #32]	; (800da40 <HAL_ADC_ErrorCallback+0x7c>)
 800da1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da20:	3301      	adds	r3, #1
 800da22:	4a07      	ldr	r2, [pc, #28]	; (800da40 <HAL_ADC_ErrorCallback+0x7c>)
 800da24:	6413      	str	r3, [r2, #64]	; 0x40
			Adc_DeInit();
 800da26:	f000 f883 	bl	800db30 <Adc_DeInit>
			Adc_Init();
 800da2a:	f000 f88b 	bl	800db44 <Adc_Init>
			break;
 800da2e:	e000      	b.n	800da32 <HAL_ADC_ErrorCallback+0x6e>
		default:
			break;
 800da30:	bf00      	nop
	}
}
 800da32:	bf00      	nop
 800da34:	3710      	adds	r7, #16
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}
 800da3a:	bf00      	nop
 800da3c:	20000210 	.word	0x20000210
 800da40:	20009420 	.word	0x20009420

0800da44 <Adc_MainFunction>:
/***********************************************************************************
* Function: Adc_MainFunction										   			   *
* Description: Peripheral main function.									       *
************************************************************************************/
VOID Adc_MainFunction()
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b082      	sub	sp, #8
 800da48:	af00      	add	r7, sp, #0
	/* Local variable to store the error status. */
	uint32 statusValue = STD_LOW;
 800da4a:	2300      	movs	r3, #0
 800da4c:	607b      	str	r3, [r7, #4]
	/* Get error status. */
	statusValue = HAL_ADC_GetState(&hadc1);
 800da4e:	4836      	ldr	r0, [pc, #216]	; (800db28 <Adc_MainFunction+0xe4>)
 800da50:	f7f9 f828 	bl	8006aa4 <HAL_ADC_GetState>
 800da54:	6078      	str	r0, [r7, #4]

	/* Process module states. */
	switch(statusValue)
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da5c:	d049      	beq.n	800daf2 <Adc_MainFunction+0xae>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da64:	d85a      	bhi.n	800db1c <Adc_MainFunction+0xd8>
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2b10      	cmp	r3, #16
 800da6a:	d827      	bhi.n	800dabc <Adc_MainFunction+0x78>
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2b10      	cmp	r3, #16
 800da70:	d854      	bhi.n	800db1c <Adc_MainFunction+0xd8>
 800da72:	a201      	add	r2, pc, #4	; (adr r2, 800da78 <Adc_MainFunction+0x34>)
 800da74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da78:	0800dac7 	.word	0x0800dac7
 800da7c:	0800dad5 	.word	0x0800dad5
 800da80:	0800dadf 	.word	0x0800dadf
 800da84:	0800db1d 	.word	0x0800db1d
 800da88:	0800dafd 	.word	0x0800dafd
 800da8c:	0800db1d 	.word	0x0800db1d
 800da90:	0800db1d 	.word	0x0800db1d
 800da94:	0800db1d 	.word	0x0800db1d
 800da98:	0800db1d 	.word	0x0800db1d
 800da9c:	0800db1d 	.word	0x0800db1d
 800daa0:	0800db1d 	.word	0x0800db1d
 800daa4:	0800db1d 	.word	0x0800db1d
 800daa8:	0800db1d 	.word	0x0800db1d
 800daac:	0800db1d 	.word	0x0800db1d
 800dab0:	0800db1d 	.word	0x0800db1d
 800dab4:	0800db1d 	.word	0x0800db1d
 800dab8:	0800db0d 	.word	0x0800db0d
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dac2:	d011      	beq.n	800dae8 <Adc_MainFunction+0xa4>
		case HAL_ADC_STATE_ERROR:
			Adc_BswState = statusValue;
			HAL_ADC_ErrorCallback(&hadc1);
			break;
		default:
			break;
 800dac4:	e02a      	b.n	800db1c <Adc_MainFunction+0xd8>
			Adc_BswState = statusValue;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	b2da      	uxtb	r2, r3
 800daca:	4b18      	ldr	r3, [pc, #96]	; (800db2c <Adc_MainFunction+0xe8>)
 800dacc:	701a      	strb	r2, [r3, #0]
			Adc_Init();
 800dace:	f000 f839 	bl	800db44 <Adc_Init>
			break;
 800dad2:	e024      	b.n	800db1e <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	b2da      	uxtb	r2, r3
 800dad8:	4b14      	ldr	r3, [pc, #80]	; (800db2c <Adc_MainFunction+0xe8>)
 800dada:	701a      	strb	r2, [r3, #0]
			break;
 800dadc:	e01f      	b.n	800db1e <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	b2da      	uxtb	r2, r3
 800dae2:	4b12      	ldr	r3, [pc, #72]	; (800db2c <Adc_MainFunction+0xe8>)
 800dae4:	701a      	strb	r2, [r3, #0]
			break;
 800dae6:	e01a      	b.n	800db1e <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	b2da      	uxtb	r2, r3
 800daec:	4b0f      	ldr	r3, [pc, #60]	; (800db2c <Adc_MainFunction+0xe8>)
 800daee:	701a      	strb	r2, [r3, #0]
			break;
 800daf0:	e015      	b.n	800db1e <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	b2da      	uxtb	r2, r3
 800daf6:	4b0d      	ldr	r3, [pc, #52]	; (800db2c <Adc_MainFunction+0xe8>)
 800daf8:	701a      	strb	r2, [r3, #0]
			break;
 800dafa:	e010      	b.n	800db1e <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	b2da      	uxtb	r2, r3
 800db00:	4b0a      	ldr	r3, [pc, #40]	; (800db2c <Adc_MainFunction+0xe8>)
 800db02:	701a      	strb	r2, [r3, #0]
			HAL_ADC_ErrorCallback(&hadc1);
 800db04:	4808      	ldr	r0, [pc, #32]	; (800db28 <Adc_MainFunction+0xe4>)
 800db06:	f7ff ff5d 	bl	800d9c4 <HAL_ADC_ErrorCallback>
			break;
 800db0a:	e008      	b.n	800db1e <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	b2da      	uxtb	r2, r3
 800db10:	4b06      	ldr	r3, [pc, #24]	; (800db2c <Adc_MainFunction+0xe8>)
 800db12:	701a      	strb	r2, [r3, #0]
			HAL_ADC_ErrorCallback(&hadc1);
 800db14:	4804      	ldr	r0, [pc, #16]	; (800db28 <Adc_MainFunction+0xe4>)
 800db16:	f7ff ff55 	bl	800d9c4 <HAL_ADC_ErrorCallback>
			break;
 800db1a:	e000      	b.n	800db1e <Adc_MainFunction+0xda>
			break;
 800db1c:	bf00      	nop
	}
}
 800db1e:	bf00      	nop
 800db20:	3708      	adds	r7, #8
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}
 800db26:	bf00      	nop
 800db28:	20000210 	.word	0x20000210
 800db2c:	200008ec 	.word	0x200008ec

0800db30 <Adc_DeInit>:
/***********************************************************************************
* Function: Adc_DeInit										   					   *
* Description: De-initialize the peripheral.									   *
************************************************************************************/
StdReturnType Adc_DeInit()
{
 800db30:	b580      	push	{r7, lr}
 800db32:	af00      	add	r7, sp, #0
	/* Call for de-intialization function. */
	HAL_ADC_DeInit(&hadc1);
 800db34:	4802      	ldr	r0, [pc, #8]	; (800db40 <Adc_DeInit+0x10>)
 800db36:	f7f8 fc2f 	bl	8006398 <HAL_ADC_DeInit>
	return E_OK;
 800db3a:	2300      	movs	r3, #0
}
 800db3c:	4618      	mov	r0, r3
 800db3e:	bd80      	pop	{r7, pc}
 800db40:	20000210 	.word	0x20000210

0800db44 <Adc_Init>:
/***********************************************************************************
* Function: Adc_Init										   					   *
* Description: Initialize the protocol.									       	   *
************************************************************************************/
StdReturnType Adc_Init()
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b084      	sub	sp, #16
 800db48:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800db4a:	463b      	mov	r3, r7
 800db4c:	2200      	movs	r2, #0
 800db4e:	601a      	str	r2, [r3, #0]
 800db50:	605a      	str	r2, [r3, #4]
 800db52:	609a      	str	r2, [r3, #8]
 800db54:	60da      	str	r2, [r3, #12]
	hadc1.Instance = ADC1;
 800db56:	4b96      	ldr	r3, [pc, #600]	; (800ddb0 <Adc_Init+0x26c>)
 800db58:	4a96      	ldr	r2, [pc, #600]	; (800ddb4 <Adc_Init+0x270>)
 800db5a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800db5c:	4b94      	ldr	r3, [pc, #592]	; (800ddb0 <Adc_Init+0x26c>)
 800db5e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800db62:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800db64:	4b92      	ldr	r3, [pc, #584]	; (800ddb0 <Adc_Init+0x26c>)
 800db66:	2200      	movs	r2, #0
 800db68:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 800db6a:	4b91      	ldr	r3, [pc, #580]	; (800ddb0 <Adc_Init+0x26c>)
 800db6c:	2201      	movs	r2, #1
 800db6e:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800db70:	4b8f      	ldr	r3, [pc, #572]	; (800ddb0 <Adc_Init+0x26c>)
 800db72:	2201      	movs	r2, #1
 800db74:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800db76:	4b8e      	ldr	r3, [pc, #568]	; (800ddb0 <Adc_Init+0x26c>)
 800db78:	2200      	movs	r2, #0
 800db7a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800db7e:	4b8c      	ldr	r3, [pc, #560]	; (800ddb0 <Adc_Init+0x26c>)
 800db80:	2200      	movs	r2, #0
 800db82:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800db84:	4b8a      	ldr	r3, [pc, #552]	; (800ddb0 <Adc_Init+0x26c>)
 800db86:	4a8c      	ldr	r2, [pc, #560]	; (800ddb8 <Adc_Init+0x274>)
 800db88:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800db8a:	4b89      	ldr	r3, [pc, #548]	; (800ddb0 <Adc_Init+0x26c>)
 800db8c:	2200      	movs	r2, #0
 800db8e:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 14;
 800db90:	4b87      	ldr	r3, [pc, #540]	; (800ddb0 <Adc_Init+0x26c>)
 800db92:	220e      	movs	r2, #14
 800db94:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 800db96:	4b86      	ldr	r3, [pc, #536]	; (800ddb0 <Adc_Init+0x26c>)
 800db98:	2201      	movs	r2, #1
 800db9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800db9e:	4b84      	ldr	r3, [pc, #528]	; (800ddb0 <Adc_Init+0x26c>)
 800dba0:	2201      	movs	r2, #1
 800dba2:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800dba4:	4882      	ldr	r0, [pc, #520]	; (800ddb0 <Adc_Init+0x26c>)
 800dba6:	f7f8 fb91 	bl	80062cc <HAL_ADC_Init>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d002      	beq.n	800dbb6 <Adc_Init+0x72>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800dbb0:	487f      	ldr	r0, [pc, #508]	; (800ddb0 <Adc_Init+0x26c>)
 800dbb2:	f7ff ff07 	bl	800d9c4 <HAL_ADC_ErrorCallback>
	}
	else
	{
	/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_13;
 800dbb6:	230d      	movs	r3, #13
 800dbb8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800dbba:	2301      	movs	r3, #1
 800dbbc:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800dbbe:	2307      	movs	r3, #7
 800dbc0:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800dbc2:	463b      	mov	r3, r7
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	487a      	ldr	r0, [pc, #488]	; (800ddb0 <Adc_Init+0x26c>)
 800dbc8:	f7f8 fe3a 	bl	8006840 <HAL_ADC_ConfigChannel>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d002      	beq.n	800dbd8 <Adc_Init+0x94>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800dbd2:	4877      	ldr	r0, [pc, #476]	; (800ddb0 <Adc_Init+0x26c>)
 800dbd4:	f7ff fef6 	bl	800d9c4 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_2;
 800dbd8:	2302      	movs	r3, #2
 800dbda:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 800dbdc:	2302      	movs	r3, #2
 800dbde:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800dbe0:	463b      	mov	r3, r7
 800dbe2:	4619      	mov	r1, r3
 800dbe4:	4872      	ldr	r0, [pc, #456]	; (800ddb0 <Adc_Init+0x26c>)
 800dbe6:	f7f8 fe2b 	bl	8006840 <HAL_ADC_ConfigChannel>
 800dbea:	4603      	mov	r3, r0
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d002      	beq.n	800dbf6 <Adc_Init+0xb2>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800dbf0:	486f      	ldr	r0, [pc, #444]	; (800ddb0 <Adc_Init+0x26c>)
 800dbf2:	f7ff fee7 	bl	800d9c4 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_12;
 800dbf6:	230c      	movs	r3, #12
 800dbf8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 800dbfa:	2303      	movs	r3, #3
 800dbfc:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800dbfe:	463b      	mov	r3, r7
 800dc00:	4619      	mov	r1, r3
 800dc02:	486b      	ldr	r0, [pc, #428]	; (800ddb0 <Adc_Init+0x26c>)
 800dc04:	f7f8 fe1c 	bl	8006840 <HAL_ADC_ConfigChannel>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d002      	beq.n	800dc14 <Adc_Init+0xd0>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800dc0e:	4868      	ldr	r0, [pc, #416]	; (800ddb0 <Adc_Init+0x26c>)
 800dc10:	f7ff fed8 	bl	800d9c4 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_10;
 800dc14:	230a      	movs	r3, #10
 800dc16:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 4;
 800dc18:	2304      	movs	r3, #4
 800dc1a:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800dc1c:	463b      	mov	r3, r7
 800dc1e:	4619      	mov	r1, r3
 800dc20:	4863      	ldr	r0, [pc, #396]	; (800ddb0 <Adc_Init+0x26c>)
 800dc22:	f7f8 fe0d 	bl	8006840 <HAL_ADC_ConfigChannel>
 800dc26:	4603      	mov	r3, r0
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d002      	beq.n	800dc32 <Adc_Init+0xee>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800dc2c:	4860      	ldr	r0, [pc, #384]	; (800ddb0 <Adc_Init+0x26c>)
 800dc2e:	f7ff fec9 	bl	800d9c4 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_4;
 800dc32:	2304      	movs	r3, #4
 800dc34:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 5;
 800dc36:	2305      	movs	r3, #5
 800dc38:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800dc3a:	463b      	mov	r3, r7
 800dc3c:	4619      	mov	r1, r3
 800dc3e:	485c      	ldr	r0, [pc, #368]	; (800ddb0 <Adc_Init+0x26c>)
 800dc40:	f7f8 fdfe 	bl	8006840 <HAL_ADC_ConfigChannel>
 800dc44:	4603      	mov	r3, r0
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d002      	beq.n	800dc50 <Adc_Init+0x10c>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800dc4a:	4859      	ldr	r0, [pc, #356]	; (800ddb0 <Adc_Init+0x26c>)
 800dc4c:	f7ff feba 	bl	800d9c4 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_5;
 800dc50:	2305      	movs	r3, #5
 800dc52:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 6;
 800dc54:	2306      	movs	r3, #6
 800dc56:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800dc58:	463b      	mov	r3, r7
 800dc5a:	4619      	mov	r1, r3
 800dc5c:	4854      	ldr	r0, [pc, #336]	; (800ddb0 <Adc_Init+0x26c>)
 800dc5e:	f7f8 fdef 	bl	8006840 <HAL_ADC_ConfigChannel>
 800dc62:	4603      	mov	r3, r0
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d002      	beq.n	800dc6e <Adc_Init+0x12a>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800dc68:	4851      	ldr	r0, [pc, #324]	; (800ddb0 <Adc_Init+0x26c>)
 800dc6a:	f7ff feab 	bl	800d9c4 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_6;
 800dc6e:	2306      	movs	r3, #6
 800dc70:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 7;
 800dc72:	2307      	movs	r3, #7
 800dc74:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800dc76:	463b      	mov	r3, r7
 800dc78:	4619      	mov	r1, r3
 800dc7a:	484d      	ldr	r0, [pc, #308]	; (800ddb0 <Adc_Init+0x26c>)
 800dc7c:	f7f8 fde0 	bl	8006840 <HAL_ADC_ConfigChannel>
 800dc80:	4603      	mov	r3, r0
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d002      	beq.n	800dc8c <Adc_Init+0x148>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800dc86:	484a      	ldr	r0, [pc, #296]	; (800ddb0 <Adc_Init+0x26c>)
 800dc88:	f7ff fe9c 	bl	800d9c4 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_7;
 800dc8c:	2307      	movs	r3, #7
 800dc8e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 8;
 800dc90:	2308      	movs	r3, #8
 800dc92:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800dc94:	463b      	mov	r3, r7
 800dc96:	4619      	mov	r1, r3
 800dc98:	4845      	ldr	r0, [pc, #276]	; (800ddb0 <Adc_Init+0x26c>)
 800dc9a:	f7f8 fdd1 	bl	8006840 <HAL_ADC_ConfigChannel>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d002      	beq.n	800dcaa <Adc_Init+0x166>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800dca4:	4842      	ldr	r0, [pc, #264]	; (800ddb0 <Adc_Init+0x26c>)
 800dca6:	f7ff fe8d 	bl	800d9c4 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_8;
 800dcaa:	2308      	movs	r3, #8
 800dcac:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 9;
 800dcae:	2309      	movs	r3, #9
 800dcb0:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800dcb2:	463b      	mov	r3, r7
 800dcb4:	4619      	mov	r1, r3
 800dcb6:	483e      	ldr	r0, [pc, #248]	; (800ddb0 <Adc_Init+0x26c>)
 800dcb8:	f7f8 fdc2 	bl	8006840 <HAL_ADC_ConfigChannel>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d002      	beq.n	800dcc8 <Adc_Init+0x184>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800dcc2:	483b      	ldr	r0, [pc, #236]	; (800ddb0 <Adc_Init+0x26c>)
 800dcc4:	f7ff fe7e 	bl	800d9c4 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_9;
 800dcc8:	2309      	movs	r3, #9
 800dcca:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 10;
 800dccc:	230a      	movs	r3, #10
 800dcce:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800dcd0:	463b      	mov	r3, r7
 800dcd2:	4619      	mov	r1, r3
 800dcd4:	4836      	ldr	r0, [pc, #216]	; (800ddb0 <Adc_Init+0x26c>)
 800dcd6:	f7f8 fdb3 	bl	8006840 <HAL_ADC_ConfigChannel>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d002      	beq.n	800dce6 <Adc_Init+0x1a2>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800dce0:	4833      	ldr	r0, [pc, #204]	; (800ddb0 <Adc_Init+0x26c>)
 800dce2:	f7ff fe6f 	bl	800d9c4 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_15;
 800dce6:	230f      	movs	r3, #15
 800dce8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 11;
 800dcea:	230b      	movs	r3, #11
 800dcec:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800dcee:	463b      	mov	r3, r7
 800dcf0:	4619      	mov	r1, r3
 800dcf2:	482f      	ldr	r0, [pc, #188]	; (800ddb0 <Adc_Init+0x26c>)
 800dcf4:	f7f8 fda4 	bl	8006840 <HAL_ADC_ConfigChannel>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d002      	beq.n	800dd04 <Adc_Init+0x1c0>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800dcfe:	482c      	ldr	r0, [pc, #176]	; (800ddb0 <Adc_Init+0x26c>)
 800dd00:	f7ff fe60 	bl	800d9c4 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_14;
 800dd04:	230e      	movs	r3, #14
 800dd06:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 12;
 800dd08:	230c      	movs	r3, #12
 800dd0a:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800dd0c:	463b      	mov	r3, r7
 800dd0e:	4619      	mov	r1, r3
 800dd10:	4827      	ldr	r0, [pc, #156]	; (800ddb0 <Adc_Init+0x26c>)
 800dd12:	f7f8 fd95 	bl	8006840 <HAL_ADC_ConfigChannel>
 800dd16:	4603      	mov	r3, r0
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d002      	beq.n	800dd22 <Adc_Init+0x1de>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800dd1c:	4824      	ldr	r0, [pc, #144]	; (800ddb0 <Adc_Init+0x26c>)
 800dd1e:	f7ff fe51 	bl	800d9c4 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_3;
 800dd22:	2303      	movs	r3, #3
 800dd24:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 13;
 800dd26:	230d      	movs	r3, #13
 800dd28:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800dd2a:	463b      	mov	r3, r7
 800dd2c:	4619      	mov	r1, r3
 800dd2e:	4820      	ldr	r0, [pc, #128]	; (800ddb0 <Adc_Init+0x26c>)
 800dd30:	f7f8 fd86 	bl	8006840 <HAL_ADC_ConfigChannel>
 800dd34:	4603      	mov	r3, r0
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d002      	beq.n	800dd40 <Adc_Init+0x1fc>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800dd3a:	481d      	ldr	r0, [pc, #116]	; (800ddb0 <Adc_Init+0x26c>)
 800dd3c:	f7ff fe42 	bl	800d9c4 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_11;
 800dd40:	230b      	movs	r3, #11
 800dd42:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 14;
 800dd44:	230e      	movs	r3, #14
 800dd46:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800dd48:	463b      	mov	r3, r7
 800dd4a:	4619      	mov	r1, r3
 800dd4c:	4818      	ldr	r0, [pc, #96]	; (800ddb0 <Adc_Init+0x26c>)
 800dd4e:	f7f8 fd77 	bl	8006840 <HAL_ADC_ConfigChannel>
 800dd52:	4603      	mov	r3, r0
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d002      	beq.n	800dd5e <Adc_Init+0x21a>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800dd58:	4815      	ldr	r0, [pc, #84]	; (800ddb0 <Adc_Init+0x26c>)
 800dd5a:	f7ff fe33 	bl	800d9c4 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800dd5e:	4b17      	ldr	r3, [pc, #92]	; (800ddbc <Adc_Init+0x278>)
 800dd60:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 15;
 800dd62:	230f      	movs	r3, #15
 800dd64:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800dd66:	463b      	mov	r3, r7
 800dd68:	4619      	mov	r1, r3
 800dd6a:	4811      	ldr	r0, [pc, #68]	; (800ddb0 <Adc_Init+0x26c>)
 800dd6c:	f7f8 fd68 	bl	8006840 <HAL_ADC_ConfigChannel>
 800dd70:	4603      	mov	r3, r0
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d002      	beq.n	800dd7c <Adc_Init+0x238>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800dd76:	480e      	ldr	r0, [pc, #56]	; (800ddb0 <Adc_Init+0x26c>)
 800dd78:	f7ff fe24 	bl	800d9c4 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800dd7c:	2311      	movs	r3, #17
 800dd7e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 16;
 800dd80:	2310      	movs	r3, #16
 800dd82:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800dd84:	463b      	mov	r3, r7
 800dd86:	4619      	mov	r1, r3
 800dd88:	4809      	ldr	r0, [pc, #36]	; (800ddb0 <Adc_Init+0x26c>)
 800dd8a:	f7f8 fd59 	bl	8006840 <HAL_ADC_ConfigChannel>
 800dd8e:	4603      	mov	r3, r0
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d002      	beq.n	800dd9a <Adc_Init+0x256>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800dd94:	4806      	ldr	r0, [pc, #24]	; (800ddb0 <Adc_Init+0x26c>)
 800dd96:	f7ff fe15 	bl	800d9c4 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	HAL_ADC_Start_DMA(&hadc1, Adc_ChannelOne_Buffer, ADC_BUFFER_LENGTH);
 800dd9a:	220e      	movs	r2, #14
 800dd9c:	4908      	ldr	r1, [pc, #32]	; (800ddc0 <Adc_Init+0x27c>)
 800dd9e:	4804      	ldr	r0, [pc, #16]	; (800ddb0 <Adc_Init+0x26c>)
 800dda0:	f7f8 fc4a 	bl	8006638 <HAL_ADC_Start_DMA>
	return E_OK;
 800dda4:	2300      	movs	r3, #0
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	3710      	adds	r7, #16
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}
 800ddae:	bf00      	nop
 800ddb0:	20000210 	.word	0x20000210
 800ddb4:	40012000 	.word	0x40012000
 800ddb8:	0f000001 	.word	0x0f000001
 800ddbc:	10000012 	.word	0x10000012
 800ddc0:	200008f0 	.word	0x200008f0

0800ddc4 <Port_Init>:
/***********************************************************************************
* Function: Port_Init										       				   *
* Description: Initialize the peripheral.									 	   *
************************************************************************************/
StdReturnType Port_Init()
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 800ddc8:	f7f7 f88e 	bl	8004ee8 <MX_GPIO_Init>
	return E_OK;
 800ddcc:	2300      	movs	r3, #0
}
 800ddce:	4618      	mov	r0, r3
 800ddd0:	bd80      	pop	{r7, pc}

0800ddd2 <CanOverSpi_Init>:
/***********************************************************************************
* Function: CanOverSpi_Init									   					   *
* Description: Driver initialization.		 		   							   *
************************************************************************************/
StdReturnType CanOverSpi_Init()
{
 800ddd2:	b580      	push	{r7, lr}
 800ddd4:	b088      	sub	sp, #32
 800ddd6:	af00      	add	r7, sp, #0
	RXF3 RXF3reg;
	RXF4 RXF4reg;
	RXF5 RXF5reg;
	RXM0 RXM0reg;
	RXM1 RXM1reg;
	RXM0reg.RXM0SIDH = 0x00;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	713b      	strb	r3, [r7, #4]
	RXM0reg.RXM0SIDL = 0x00;
 800dddc:	2300      	movs	r3, #0
 800ddde:	717b      	strb	r3, [r7, #5]
	RXM0reg.RXM0EID8 = 0x00;
 800dde0:	2300      	movs	r3, #0
 800dde2:	71bb      	strb	r3, [r7, #6]
	RXM0reg.RXM0EID0 = 0x00;
 800dde4:	2300      	movs	r3, #0
 800dde6:	71fb      	strb	r3, [r7, #7]
	RXM1reg.RXM1SIDH = 0x00;
 800dde8:	2300      	movs	r3, #0
 800ddea:	703b      	strb	r3, [r7, #0]
	RXM1reg.RXM1SIDL = 0x00;
 800ddec:	2300      	movs	r3, #0
 800ddee:	707b      	strb	r3, [r7, #1]
	RXM1reg.RXM1EID8 = 0x00;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	70bb      	strb	r3, [r7, #2]
	RXM1reg.RXM1EID0 = 0x00;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	70fb      	strb	r3, [r7, #3]
	RXF0reg.RXF0SIDH = 0x00;
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	773b      	strb	r3, [r7, #28]
	RXF0reg.RXF0SIDL = 0x00;
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	777b      	strb	r3, [r7, #29]
	RXF0reg.RXF0EID8 = 0x00;
 800de00:	2300      	movs	r3, #0
 800de02:	77bb      	strb	r3, [r7, #30]
	RXF0reg.RXF0EID0 = 0x00;
 800de04:	2300      	movs	r3, #0
 800de06:	77fb      	strb	r3, [r7, #31]
	RXF1reg.RXF1SIDH = 0x00;
 800de08:	2300      	movs	r3, #0
 800de0a:	763b      	strb	r3, [r7, #24]
	RXF1reg.RXF1SIDL = 0x08;
 800de0c:	2308      	movs	r3, #8
 800de0e:	767b      	strb	r3, [r7, #25]
	RXF1reg.RXF1EID8 = 0x00;
 800de10:	2300      	movs	r3, #0
 800de12:	76bb      	strb	r3, [r7, #26]
	RXF1reg.RXF1EID0 = 0x00;
 800de14:	2300      	movs	r3, #0
 800de16:	76fb      	strb	r3, [r7, #27]
	RXF2reg.RXF2SIDH = 0x00;
 800de18:	2300      	movs	r3, #0
 800de1a:	753b      	strb	r3, [r7, #20]
	RXF2reg.RXF2SIDL = 0x00;
 800de1c:	2300      	movs	r3, #0
 800de1e:	757b      	strb	r3, [r7, #21]
	RXF2reg.RXF2EID8 = 0x00;
 800de20:	2300      	movs	r3, #0
 800de22:	75bb      	strb	r3, [r7, #22]
	RXF2reg.RXF2EID0 = 0x00;
 800de24:	2300      	movs	r3, #0
 800de26:	75fb      	strb	r3, [r7, #23]
	RXF3reg.RXF3SIDH = 0x00;
 800de28:	2300      	movs	r3, #0
 800de2a:	743b      	strb	r3, [r7, #16]
	RXF3reg.RXF3SIDL = 0x00;
 800de2c:	2300      	movs	r3, #0
 800de2e:	747b      	strb	r3, [r7, #17]
	RXF3reg.RXF3EID8 = 0x00;
 800de30:	2300      	movs	r3, #0
 800de32:	74bb      	strb	r3, [r7, #18]
	RXF3reg.RXF3EID0 = 0x00;
 800de34:	2300      	movs	r3, #0
 800de36:	74fb      	strb	r3, [r7, #19]
	RXF4reg.RXF4SIDH = 0x00;
 800de38:	2300      	movs	r3, #0
 800de3a:	733b      	strb	r3, [r7, #12]
	RXF4reg.RXF4SIDL = 0x00;
 800de3c:	2300      	movs	r3, #0
 800de3e:	737b      	strb	r3, [r7, #13]
	RXF4reg.RXF4EID8 = 0x00;
 800de40:	2300      	movs	r3, #0
 800de42:	73bb      	strb	r3, [r7, #14]
	RXF4reg.RXF4EID0 = 0x00;
 800de44:	2300      	movs	r3, #0
 800de46:	73fb      	strb	r3, [r7, #15]
	RXF5reg.RXF5SIDH = 0x00;
 800de48:	2300      	movs	r3, #0
 800de4a:	723b      	strb	r3, [r7, #8]
	RXF5reg.RXF5SIDL = 0x08;
 800de4c:	2308      	movs	r3, #8
 800de4e:	727b      	strb	r3, [r7, #9]
	RXF5reg.RXF5EID8 = 0x00;
 800de50:	2300      	movs	r3, #0
 800de52:	72bb      	strb	r3, [r7, #10]
	RXF5reg.RXF5EID0 = 0x00;
 800de54:	2300      	movs	r3, #0
 800de56:	72fb      	strb	r3, [r7, #11]
	if(MCP2515_CanOverSpi_Initialize() == E_NOT_OK)
 800de58:	f000 f862 	bl	800df20 <MCP2515_CanOverSpi_Initialize>
 800de5c:	4603      	mov	r3, r0
 800de5e:	2b01      	cmp	r3, #1
 800de60:	d101      	bne.n	800de66 <CanOverSpi_Init+0x94>
	{
		return E_NOT_OK;
 800de62:	2301      	movs	r3, #1
 800de64:	e058      	b.n	800df18 <CanOverSpi_Init+0x146>
	else
	{
		/* do nothing */
	}

	if(MCP2515_CanOverSpi_SetConfigMode() == E_NOT_OK)
 800de66:	f000 f869 	bl	800df3c <MCP2515_CanOverSpi_SetConfigMode>
 800de6a:	4603      	mov	r3, r0
 800de6c:	2b01      	cmp	r3, #1
 800de6e:	d101      	bne.n	800de74 <CanOverSpi_Init+0xa2>
	{
		return E_NOT_OK;
 800de70:	2301      	movs	r3, #1
 800de72:	e051      	b.n	800df18 <CanOverSpi_Init+0x146>
	}
	else
	{
		/* do nothing */
	}
	MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXM0SIDH, MCP2515_CanOverSpi_RXM0EID0, &(RXM0reg.RXM0SIDH));
 800de74:	1d3b      	adds	r3, r7, #4
 800de76:	461a      	mov	r2, r3
 800de78:	2123      	movs	r1, #35	; 0x23
 800de7a:	2020      	movs	r0, #32
 800de7c:	f000 f8ce 	bl	800e01c <MCP2515_CanOverSpi_WriteByteSequence>
	MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXM1SIDH, MCP2515_CanOverSpi_RXM1EID0, &(RXM1reg.RXM1SIDH));
 800de80:	463b      	mov	r3, r7
 800de82:	461a      	mov	r2, r3
 800de84:	2127      	movs	r1, #39	; 0x27
 800de86:	2024      	movs	r0, #36	; 0x24
 800de88:	f000 f8c8 	bl	800e01c <MCP2515_CanOverSpi_WriteByteSequence>
	MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXF0SIDH, MCP2515_CanOverSpi_RXF0EID0, &(RXF0reg.RXF0SIDH));
 800de8c:	f107 031c 	add.w	r3, r7, #28
 800de90:	461a      	mov	r2, r3
 800de92:	2103      	movs	r1, #3
 800de94:	2000      	movs	r0, #0
 800de96:	f000 f8c1 	bl	800e01c <MCP2515_CanOverSpi_WriteByteSequence>
	MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXF1SIDH, MCP2515_CanOverSpi_RXF1EID0, &(RXF1reg.RXF1SIDH));
 800de9a:	f107 0318 	add.w	r3, r7, #24
 800de9e:	461a      	mov	r2, r3
 800dea0:	2107      	movs	r1, #7
 800dea2:	2004      	movs	r0, #4
 800dea4:	f000 f8ba 	bl	800e01c <MCP2515_CanOverSpi_WriteByteSequence>
	MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXF2SIDH, MCP2515_CanOverSpi_RXF2EID0, &(RXF2reg.RXF2SIDH));
 800dea8:	f107 0314 	add.w	r3, r7, #20
 800deac:	461a      	mov	r2, r3
 800deae:	210b      	movs	r1, #11
 800deb0:	2008      	movs	r0, #8
 800deb2:	f000 f8b3 	bl	800e01c <MCP2515_CanOverSpi_WriteByteSequence>
	MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXF3SIDH, MCP2515_CanOverSpi_RXF3EID0, &(RXF3reg.RXF3SIDH));
 800deb6:	f107 0310 	add.w	r3, r7, #16
 800deba:	461a      	mov	r2, r3
 800debc:	2113      	movs	r1, #19
 800debe:	2010      	movs	r0, #16
 800dec0:	f000 f8ac 	bl	800e01c <MCP2515_CanOverSpi_WriteByteSequence>
	MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXF4SIDH, MCP2515_CanOverSpi_RXF4EID0, &(RXF4reg.RXF4SIDH));
 800dec4:	f107 030c 	add.w	r3, r7, #12
 800dec8:	461a      	mov	r2, r3
 800deca:	2117      	movs	r1, #23
 800decc:	2014      	movs	r0, #20
 800dece:	f000 f8a5 	bl	800e01c <MCP2515_CanOverSpi_WriteByteSequence>
	MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXF5SIDH, MCP2515_CanOverSpi_RXF5EID0, &(RXF5reg.RXF5SIDH));
 800ded2:	f107 0308 	add.w	r3, r7, #8
 800ded6:	461a      	mov	r2, r3
 800ded8:	211b      	movs	r1, #27
 800deda:	2018      	movs	r0, #24
 800dedc:	f000 f89e 	bl	800e01c <MCP2515_CanOverSpi_WriteByteSequence>
	MCP2515_CanOverSpi_WriteByte(MCP2515_CanOverSpi_RXB0CTRL, 0x04);
 800dee0:	2104      	movs	r1, #4
 800dee2:	2060      	movs	r0, #96	; 0x60
 800dee4:	f000 f874 	bl	800dfd0 <MCP2515_CanOverSpi_WriteByte>
	MCP2515_CanOverSpi_WriteByte(MCP2515_CanOverSpi_RXB1CTRL, 0x00);
 800dee8:	2100      	movs	r1, #0
 800deea:	2070      	movs	r0, #112	; 0x70
 800deec:	f000 f870 	bl	800dfd0 <MCP2515_CanOverSpi_WriteByte>
	MCP2515_CanOverSpi_WriteByte(MCP2515_CanOverSpi_CNF1, 0x00);
 800def0:	2100      	movs	r1, #0
 800def2:	202a      	movs	r0, #42	; 0x2a
 800def4:	f000 f86c 	bl	800dfd0 <MCP2515_CanOverSpi_WriteByte>
	MCP2515_CanOverSpi_WriteByte(MCP2515_CanOverSpi_CNF2, 0x90);
 800def8:	2190      	movs	r1, #144	; 0x90
 800defa:	2029      	movs	r0, #41	; 0x29
 800defc:	f000 f868 	bl	800dfd0 <MCP2515_CanOverSpi_WriteByte>
	MCP2515_CanOverSpi_WriteByte(MCP2515_CanOverSpi_CNF3, 0x02);
 800df00:	2102      	movs	r1, #2
 800df02:	2028      	movs	r0, #40	; 0x28
 800df04:	f000 f864 	bl	800dfd0 <MCP2515_CanOverSpi_WriteByte>
	if(MCP2515_CanOverSpi_SetNormalMode() == E_NOT_OK)
 800df08:	f000 f82b 	bl	800df62 <MCP2515_CanOverSpi_SetNormalMode>
 800df0c:	4603      	mov	r3, r0
 800df0e:	2b01      	cmp	r3, #1
 800df10:	d101      	bne.n	800df16 <CanOverSpi_Init+0x144>
	{
		return E_NOT_OK;
 800df12:	2301      	movs	r3, #1
 800df14:	e000      	b.n	800df18 <CanOverSpi_Init+0x146>
	}
	else
	{
		/* do nothing */
	}
	return true;
 800df16:	2301      	movs	r3, #1
}
 800df18:	4618      	mov	r0, r3
 800df1a:	3720      	adds	r7, #32
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}

0800df20 <MCP2515_CanOverSpi_Initialize>:
/***********************************************************************************
* Function: MCP2515_CanOverSpi_Initialize									       *
* Description: Set the CAN CS pin high.		 	   								   *
************************************************************************************/
StdReturnType MCP2515_CanOverSpi_Initialize()
{
 800df20:	b580      	push	{r7, lr}
 800df22:	af00      	add	r7, sp, #0
	MCP2515_CanOverSpi_CS_HIGH();
 800df24:	2201      	movs	r2, #1
 800df26:	f44f 7100 	mov.w	r1, #512	; 0x200
 800df2a:	4803      	ldr	r0, [pc, #12]	; (800df38 <MCP2515_CanOverSpi_Initialize+0x18>)
 800df2c:	f7fa fa14 	bl	8008358 <HAL_GPIO_WritePin>
//	}
//	else
//	{
//		/* do nothing */
//	}
	return E_NOT_OK;
 800df30:	2301      	movs	r3, #1
}
 800df32:	4618      	mov	r0, r3
 800df34:	bd80      	pop	{r7, pc}
 800df36:	bf00      	nop
 800df38:	40020000 	.word	0x40020000

0800df3c <MCP2515_CanOverSpi_SetConfigMode>:
/***********************************************************************************
* Function: MCP2515_CanOverSpi_SetConfigMode									   *
* Description: Set the mode to config.		 		   							   *
************************************************************************************/
StdReturnType MCP2515_CanOverSpi_SetConfigMode()
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	af00      	add	r7, sp, #0
	MCP2515_CanOverSpi_WriteByte(MCP2515_CanOverSpi_CANCTRL, MODE_CONFIG);
 800df40:	2180      	movs	r1, #128	; 0x80
 800df42:	200f      	movs	r0, #15
 800df44:	f000 f844 	bl	800dfd0 <MCP2515_CanOverSpi_WriteByte>
	if((MCP2515_CanOverSpi_ReadByte(MCP2515_CanOverSpi_CANSTAT) & MODE_MASK) == MODE_CONFIG)
 800df48:	200e      	movs	r0, #14
 800df4a:	f000 f81d 	bl	800df88 <MCP2515_CanOverSpi_ReadByte>
 800df4e:	4603      	mov	r3, r0
 800df50:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800df54:	2b80      	cmp	r3, #128	; 0x80
 800df56:	d101      	bne.n	800df5c <MCP2515_CanOverSpi_SetConfigMode+0x20>
	{
		return E_OK;
 800df58:	2300      	movs	r3, #0
 800df5a:	e000      	b.n	800df5e <MCP2515_CanOverSpi_SetConfigMode+0x22>
	}
	else
	{
		/* do nothing */
	}
	return E_NOT_OK;
 800df5c:	2301      	movs	r3, #1
}
 800df5e:	4618      	mov	r0, r3
 800df60:	bd80      	pop	{r7, pc}

0800df62 <MCP2515_CanOverSpi_SetNormalMode>:
/***********************************************************************************
* Function: MCP2515_CanOverSpi_SetNormalMode									   *
* Description: Set the mode to normal.		 		   							   *
************************************************************************************/
StdReturnType MCP2515_CanOverSpi_SetNormalMode()
{
 800df62:	b580      	push	{r7, lr}
 800df64:	af00      	add	r7, sp, #0
	MCP2515_CanOverSpi_WriteByte(MCP2515_CanOverSpi_CANCTRL, MODE_NORMAL);
 800df66:	2100      	movs	r1, #0
 800df68:	200f      	movs	r0, #15
 800df6a:	f000 f831 	bl	800dfd0 <MCP2515_CanOverSpi_WriteByte>
	if((MCP2515_CanOverSpi_ReadByte(MCP2515_CanOverSpi_CANSTAT) & MODE_MASK) == MODE_NORMAL)
 800df6e:	200e      	movs	r0, #14
 800df70:	f000 f80a 	bl	800df88 <MCP2515_CanOverSpi_ReadByte>
 800df74:	4603      	mov	r3, r0
 800df76:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d101      	bne.n	800df82 <MCP2515_CanOverSpi_SetNormalMode+0x20>
	{
		return E_OK;
 800df7e:	2300      	movs	r3, #0
 800df80:	e000      	b.n	800df84 <MCP2515_CanOverSpi_SetNormalMode+0x22>
	}
	else
	{
		/* do nothing */
	}
	return E_NOT_OK;
 800df82:	2301      	movs	r3, #1
}
 800df84:	4618      	mov	r0, r3
 800df86:	bd80      	pop	{r7, pc}

0800df88 <MCP2515_CanOverSpi_ReadByte>:
/***********************************************************************************
* Function: MCP2515_CanOverSpi_ReadByte											   *
* Description: Read the byte from the bus.		 		   						   *
************************************************************************************/
StdReturnType MCP2515_CanOverSpi_ReadByte (uint8 address)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b084      	sub	sp, #16
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	4603      	mov	r3, r0
 800df90:	71fb      	strb	r3, [r7, #7]
	uint8 retVal;
	MCP2515_CanOverSpi_CS_LOW();
 800df92:	2201      	movs	r2, #1
 800df94:	f44f 7100 	mov.w	r1, #512	; 0x200
 800df98:	480c      	ldr	r0, [pc, #48]	; (800dfcc <MCP2515_CanOverSpi_ReadByte+0x44>)
 800df9a:	f7fa f9dd 	bl	8008358 <HAL_GPIO_WritePin>
	SPI_Tx(MCP2515_CanOverSpi_READ);
 800df9e:	2003      	movs	r0, #3
 800dfa0:	f000 f868 	bl	800e074 <SPI_Tx>
	SPI_Tx(address);
 800dfa4:	79fb      	ldrb	r3, [r7, #7]
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f000 f864 	bl	800e074 <SPI_Tx>
	retVal = SPI_Rx();
 800dfac:	f000 f879 	bl	800e0a2 <SPI_Rx>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	73fb      	strb	r3, [r7, #15]
	MCP2515_CanOverSpi_CS_HIGH();
 800dfb4:	2201      	movs	r2, #1
 800dfb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dfba:	4804      	ldr	r0, [pc, #16]	; (800dfcc <MCP2515_CanOverSpi_ReadByte+0x44>)
 800dfbc:	f7fa f9cc 	bl	8008358 <HAL_GPIO_WritePin>
	return retVal;
 800dfc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	3710      	adds	r7, #16
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd80      	pop	{r7, pc}
 800dfca:	bf00      	nop
 800dfcc:	40020000 	.word	0x40020000

0800dfd0 <MCP2515_CanOverSpi_WriteByte>:
/***********************************************************************************
* Function: MCP2515_CanOverSpi_WriteByte										   *
* Description: Write the byte on the bus.		 		   						   *
************************************************************************************/
VOID MCP2515_CanOverSpi_WriteByte(uint8 address, uint8 data)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b082      	sub	sp, #8
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	460a      	mov	r2, r1
 800dfda:	71fb      	strb	r3, [r7, #7]
 800dfdc:	4613      	mov	r3, r2
 800dfde:	71bb      	strb	r3, [r7, #6]
	MCP2515_CanOverSpi_CS_LOW();
 800dfe0:	2201      	movs	r2, #1
 800dfe2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dfe6:	480c      	ldr	r0, [pc, #48]	; (800e018 <MCP2515_CanOverSpi_WriteByte+0x48>)
 800dfe8:	f7fa f9b6 	bl	8008358 <HAL_GPIO_WritePin>
	SPI_Tx(MCP2515_CanOverSpi_WRITE);
 800dfec:	2002      	movs	r0, #2
 800dfee:	f000 f841 	bl	800e074 <SPI_Tx>
	SPI_Tx(address);
 800dff2:	79fb      	ldrb	r3, [r7, #7]
 800dff4:	4618      	mov	r0, r3
 800dff6:	f000 f83d 	bl	800e074 <SPI_Tx>
	SPI_Tx(data);
 800dffa:	79bb      	ldrb	r3, [r7, #6]
 800dffc:	4618      	mov	r0, r3
 800dffe:	f000 f839 	bl	800e074 <SPI_Tx>
	MCP2515_CanOverSpi_CS_HIGH();
 800e002:	2201      	movs	r2, #1
 800e004:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e008:	4803      	ldr	r0, [pc, #12]	; (800e018 <MCP2515_CanOverSpi_WriteByte+0x48>)
 800e00a:	f7fa f9a5 	bl	8008358 <HAL_GPIO_WritePin>
}
 800e00e:	bf00      	nop
 800e010:	3708      	adds	r7, #8
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}
 800e016:	bf00      	nop
 800e018:	40020000 	.word	0x40020000

0800e01c <MCP2515_CanOverSpi_WriteByteSequence>:
/***********************************************************************************
* Function: MCP2515_CanOverSpi_WriteByteSequence								   *
* Description: Initialize the bluetooth communication application.		 		   *
************************************************************************************/
VOID MCP2515_CanOverSpi_WriteByteSequence(uint8 startAddress, uint8 endAddress, uint8 *data)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b082      	sub	sp, #8
 800e020:	af00      	add	r7, sp, #0
 800e022:	4603      	mov	r3, r0
 800e024:	603a      	str	r2, [r7, #0]
 800e026:	71fb      	strb	r3, [r7, #7]
 800e028:	460b      	mov	r3, r1
 800e02a:	71bb      	strb	r3, [r7, #6]
	MCP2515_CanOverSpi_CS_LOW();
 800e02c:	2201      	movs	r2, #1
 800e02e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e032:	480f      	ldr	r0, [pc, #60]	; (800e070 <MCP2515_CanOverSpi_WriteByteSequence+0x54>)
 800e034:	f7fa f990 	bl	8008358 <HAL_GPIO_WritePin>
	SPI_Tx(MCP2515_CanOverSpi_WRITE);
 800e038:	2002      	movs	r0, #2
 800e03a:	f000 f81b 	bl	800e074 <SPI_Tx>
	SPI_Tx(startAddress);
 800e03e:	79fb      	ldrb	r3, [r7, #7]
 800e040:	4618      	mov	r0, r3
 800e042:	f000 f817 	bl	800e074 <SPI_Tx>
	SPI_TxBuffer(data, (endAddress - startAddress + 1));
 800e046:	79ba      	ldrb	r2, [r7, #6]
 800e048:	79fb      	ldrb	r3, [r7, #7]
 800e04a:	1ad3      	subs	r3, r2, r3
 800e04c:	b2db      	uxtb	r3, r3
 800e04e:	3301      	adds	r3, #1
 800e050:	b2db      	uxtb	r3, r3
 800e052:	4619      	mov	r1, r3
 800e054:	6838      	ldr	r0, [r7, #0]
 800e056:	f000 f818 	bl	800e08a <SPI_TxBuffer>
	MCP2515_CanOverSpi_CS_HIGH();
 800e05a:	2201      	movs	r2, #1
 800e05c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e060:	4803      	ldr	r0, [pc, #12]	; (800e070 <MCP2515_CanOverSpi_WriteByteSequence+0x54>)
 800e062:	f7fa f979 	bl	8008358 <HAL_GPIO_WritePin>
}
 800e066:	bf00      	nop
 800e068:	3708      	adds	r7, #8
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}
 800e06e:	bf00      	nop
 800e070:	40020000 	.word	0x40020000

0800e074 <SPI_Tx>:
/***********************************************************************************
* Function: SPI_Tx													   		   	   *
* Description: Peripheral interface.		 		   							   *
************************************************************************************/
STATIC VOID SPI_Tx(uint8 data)
{
 800e074:	b480      	push	{r7}
 800e076:	b083      	sub	sp, #12
 800e078:	af00      	add	r7, sp, #0
 800e07a:	4603      	mov	r3, r0
 800e07c:	71fb      	strb	r3, [r7, #7]
	//HAL_SPI_Transmit_IT(SPI_CAN, &data, 1);
}
 800e07e:	bf00      	nop
 800e080:	370c      	adds	r7, #12
 800e082:	46bd      	mov	sp, r7
 800e084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e088:	4770      	bx	lr

0800e08a <SPI_TxBuffer>:
/***********************************************************************************
* Function: SPI_TxBuffer													   	   *
* Description: Peripheral interface.		 		   							   *
************************************************************************************/
STATIC VOID SPI_TxBuffer(uint8 *buffer, uint8 length)
{
 800e08a:	b480      	push	{r7}
 800e08c:	b083      	sub	sp, #12
 800e08e:	af00      	add	r7, sp, #0
 800e090:	6078      	str	r0, [r7, #4]
 800e092:	460b      	mov	r3, r1
 800e094:	70fb      	strb	r3, [r7, #3]
	//HAL_SPI_Transmit_IT(SPI_CAN, buffer, length);
}
 800e096:	bf00      	nop
 800e098:	370c      	adds	r7, #12
 800e09a:	46bd      	mov	sp, r7
 800e09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a0:	4770      	bx	lr

0800e0a2 <SPI_Rx>:
/***********************************************************************************
* Function: SPI_Rx													   	           *
* Description: Peripheral interface.		 		   							   *
************************************************************************************/
STATIC StdReturnType SPI_Rx(VOID)
{
 800e0a2:	b480      	push	{r7}
 800e0a4:	af00      	add	r7, sp, #0
	//uint8 retVal;
	//HAL_SPI_Receive_IT(SPI_CAN, &retVal, 1);
	//return retVal;
	return 0;
 800e0a6:	2300      	movs	r3, #0
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b0:	4770      	bx	lr

0800e0b2 <Spi_Init>:
/***********************************************************************************
* Function: Spi_Init											 		 		   *
* Description: Module initialization.					           				   *
************************************************************************************/
StdReturnType Spi_Init()
{
 800e0b2:	b480      	push	{r7}
 800e0b4:	af00      	add	r7, sp, #0
//	}
//	else
//	{
//		/* do nothing */
//	}
	return E_OK;
 800e0b6:	2300      	movs	r3, #0
}
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c0:	4770      	bx	lr
 800e0c2:	0000      	movs	r0, r0
 800e0c4:	0000      	movs	r0, r0
	...

0800e0c8 <HAL_TIM_IC_CaptureCallback>:
/***********************************************************************************
* Function: HAL_TIM_IC_CaptureCallback										   	   *
* Description: Input capture callback to process information received.		 	   *
************************************************************************************/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b082      	sub	sp, #8
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
	/* If channel 3 requests. */
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	7f1b      	ldrb	r3, [r3, #28]
 800e0d4:	2b01      	cmp	r3, #1
 800e0d6:	f040 8081 	bne.w	800e1dc <HAL_TIM_IC_CaptureCallback+0x114>
	{
		/* Check if the first input capture has been received. */
		if (Tim5_InputCaptureFlag_ChannelThree == STD_LOW)
 800e0da:	4b87      	ldr	r3, [pc, #540]	; (800e2f8 <HAL_TIM_IC_CaptureCallback+0x230>)
 800e0dc:	781b      	ldrb	r3, [r3, #0]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d11a      	bne.n	800e118 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			/* Store the input capture value. */
			Tim5_InputCompare_ValueOne_ChannelThree = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800e0e2:	2100      	movs	r1, #0
 800e0e4:	6878      	ldr	r0, [r7, #4]
 800e0e6:	f7fd fe53 	bl	800bd90 <HAL_TIM_ReadCapturedValue>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	4a83      	ldr	r2, [pc, #524]	; (800e2fc <HAL_TIM_IC_CaptureCallback+0x234>)
 800e0ee:	6013      	str	r3, [r2, #0]
			/* Set the flag to high. */
			Tim5_InputCaptureFlag_ChannelThree = STD_HIGH;
 800e0f0:	4b81      	ldr	r3, [pc, #516]	; (800e2f8 <HAL_TIM_IC_CaptureCallback+0x230>)
 800e0f2:	2201      	movs	r2, #1
 800e0f4:	701a      	strb	r2, [r3, #0]
			/* Change the polarity of the input channel. */
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	6a1a      	ldr	r2, [r3, #32]
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	f022 020a 	bic.w	r2, r2, #10
 800e104:	621a      	str	r2, [r3, #32]
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	6a1a      	ldr	r2, [r3, #32]
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	f042 0202 	orr.w	r2, r2, #2
 800e114:	621a      	str	r2, [r3, #32]
 800e116:	e061      	b.n	800e1dc <HAL_TIM_IC_CaptureCallback+0x114>
		}/* If the first input capture has been stored. */
		else if(Tim5_InputCaptureFlag_ChannelThree == STD_HIGH)
 800e118:	4b77      	ldr	r3, [pc, #476]	; (800e2f8 <HAL_TIM_IC_CaptureCallback+0x230>)
 800e11a:	781b      	ldrb	r3, [r3, #0]
 800e11c:	2b01      	cmp	r3, #1
 800e11e:	d15d      	bne.n	800e1dc <HAL_TIM_IC_CaptureCallback+0x114>
		{
			/* Store the second input capture. */
			Tim5_InputCompare_ValueTwo_ChannelThree = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800e120:	2100      	movs	r1, #0
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f7fd fe34 	bl	800bd90 <HAL_TIM_ReadCapturedValue>
 800e128:	4603      	mov	r3, r0
 800e12a:	4a75      	ldr	r2, [pc, #468]	; (800e300 <HAL_TIM_IC_CaptureCallback+0x238>)
 800e12c:	6013      	str	r3, [r2, #0]
			/* Set the timer counter to 0. */
			__HAL_TIM_SET_COUNTER(htim, 0);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	2200      	movs	r2, #0
 800e134:	625a      	str	r2, [r3, #36]	; 0x24
			/* If the second input capture is greater than the first, then subtract the first one from the second one. */
			if (Tim5_InputCompare_ValueTwo_ChannelThree > Tim5_InputCompare_ValueOne_ChannelThree)
 800e136:	4b72      	ldr	r3, [pc, #456]	; (800e300 <HAL_TIM_IC_CaptureCallback+0x238>)
 800e138:	681a      	ldr	r2, [r3, #0]
 800e13a:	4b70      	ldr	r3, [pc, #448]	; (800e2fc <HAL_TIM_IC_CaptureCallback+0x234>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	429a      	cmp	r2, r3
 800e140:	d907      	bls.n	800e152 <HAL_TIM_IC_CaptureCallback+0x8a>
			{
				Tim5_Difference_ChannelThree = Tim5_InputCompare_ValueTwo_ChannelThree - Tim5_InputCompare_ValueOne_ChannelThree;
 800e142:	4b6f      	ldr	r3, [pc, #444]	; (800e300 <HAL_TIM_IC_CaptureCallback+0x238>)
 800e144:	681a      	ldr	r2, [r3, #0]
 800e146:	4b6d      	ldr	r3, [pc, #436]	; (800e2fc <HAL_TIM_IC_CaptureCallback+0x234>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	1ad3      	subs	r3, r2, r3
 800e14c:	4a6d      	ldr	r2, [pc, #436]	; (800e304 <HAL_TIM_IC_CaptureCallback+0x23c>)
 800e14e:	6013      	str	r3, [r2, #0]
 800e150:	e00d      	b.n	800e16e <HAL_TIM_IC_CaptureCallback+0xa6>
			}/* Else subtract the first value from maximum uint32 value and add the second value. */
			else if(Tim5_InputCompare_ValueOne_ChannelThree > Tim5_InputCompare_ValueTwo_ChannelThree)
 800e152:	4b6a      	ldr	r3, [pc, #424]	; (800e2fc <HAL_TIM_IC_CaptureCallback+0x234>)
 800e154:	681a      	ldr	r2, [r3, #0]
 800e156:	4b6a      	ldr	r3, [pc, #424]	; (800e300 <HAL_TIM_IC_CaptureCallback+0x238>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d907      	bls.n	800e16e <HAL_TIM_IC_CaptureCallback+0xa6>
			{
				Tim5_Difference_ChannelThree = (0xFFFFFFFF - Tim5_InputCompare_ValueOne_ChannelThree) + Tim5_InputCompare_ValueTwo_ChannelThree;
 800e15e:	4b68      	ldr	r3, [pc, #416]	; (800e300 <HAL_TIM_IC_CaptureCallback+0x238>)
 800e160:	681a      	ldr	r2, [r3, #0]
 800e162:	4b66      	ldr	r3, [pc, #408]	; (800e2fc <HAL_TIM_IC_CaptureCallback+0x234>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	1ad3      	subs	r3, r2, r3
 800e168:	3b01      	subs	r3, #1
 800e16a:	4a66      	ldr	r2, [pc, #408]	; (800e304 <HAL_TIM_IC_CaptureCallback+0x23c>)
 800e16c:	6013      	str	r3, [r2, #0]
			else
			{
				/* do nothing */
			}
			/* Calculate the distance the sound traveled between the first measurement and the second. */
			Tim5_CalculatedDistance_ChannelThree = Tim5_Difference_ChannelThree * 0.034 / 2;
 800e16e:	4b65      	ldr	r3, [pc, #404]	; (800e304 <HAL_TIM_IC_CaptureCallback+0x23c>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	4618      	mov	r0, r3
 800e174:	f7f2 f9ce 	bl	8000514 <__aeabi_ui2d>
 800e178:	a35d      	add	r3, pc, #372	; (adr r3, 800e2f0 <HAL_TIM_IC_CaptureCallback+0x228>)
 800e17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e17e:	f7f2 fa43 	bl	8000608 <__aeabi_dmul>
 800e182:	4602      	mov	r2, r0
 800e184:	460b      	mov	r3, r1
 800e186:	4610      	mov	r0, r2
 800e188:	4619      	mov	r1, r3
 800e18a:	f04f 0200 	mov.w	r2, #0
 800e18e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e192:	f7f2 fb63 	bl	800085c <__aeabi_ddiv>
 800e196:	4602      	mov	r2, r0
 800e198:	460b      	mov	r3, r1
 800e19a:	4610      	mov	r0, r2
 800e19c:	4619      	mov	r1, r3
 800e19e:	f7f2 fc45 	bl	8000a2c <__aeabi_d2uiz>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	b2da      	uxtb	r2, r3
 800e1a6:	4b58      	ldr	r3, [pc, #352]	; (800e308 <HAL_TIM_IC_CaptureCallback+0x240>)
 800e1a8:	701a      	strb	r2, [r3, #0]
			/* Set the flag to low. */
			Tim5_InputCaptureFlag_ChannelThree = STD_LOW;
 800e1aa:	4b53      	ldr	r3, [pc, #332]	; (800e2f8 <HAL_TIM_IC_CaptureCallback+0x230>)
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	701a      	strb	r2, [r3, #0]
			/* Change the polarity of the input channel. */
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	6a1a      	ldr	r2, [r3, #32]
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	f022 020a 	bic.w	r2, r2, #10
 800e1be:	621a      	str	r2, [r3, #32]
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681a      	ldr	r2, [r3, #0]
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	6a12      	ldr	r2, [r2, #32]
 800e1ca:	621a      	str	r2, [r3, #32]
			/* Disable the interrupt for the timer 5 channel 3. */
			__HAL_TIM_DISABLE_IT(&htim5, TIM_IT_CC1);
 800e1cc:	4b4f      	ldr	r3, [pc, #316]	; (800e30c <HAL_TIM_IC_CaptureCallback+0x244>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	68da      	ldr	r2, [r3, #12]
 800e1d2:	4b4e      	ldr	r3, [pc, #312]	; (800e30c <HAL_TIM_IC_CaptureCallback+0x244>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	f022 0202 	bic.w	r2, r2, #2
 800e1da:	60da      	str	r2, [r3, #12]
		{
			/* do nothing */
		}
	}/* If channel 4 requests. */

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	7f1b      	ldrb	r3, [r3, #28]
 800e1e0:	2b02      	cmp	r3, #2
 800e1e2:	f040 8081 	bne.w	800e2e8 <HAL_TIM_IC_CaptureCallback+0x220>
	{
		/* Check if the first input capture has been received. */
		if (Tim5_InputCaptureFlag_ChannelFour == STD_LOW)
 800e1e6:	4b4a      	ldr	r3, [pc, #296]	; (800e310 <HAL_TIM_IC_CaptureCallback+0x248>)
 800e1e8:	781b      	ldrb	r3, [r3, #0]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d11a      	bne.n	800e224 <HAL_TIM_IC_CaptureCallback+0x15c>
		{
			/* Store the input capture value. */
			Tim5_InputCompare_ValueOne_ChannelFour = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800e1ee:	2104      	movs	r1, #4
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	f7fd fdcd 	bl	800bd90 <HAL_TIM_ReadCapturedValue>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	4a46      	ldr	r2, [pc, #280]	; (800e314 <HAL_TIM_IC_CaptureCallback+0x24c>)
 800e1fa:	6013      	str	r3, [r2, #0]
			/* Set the flag to high. */
			Tim5_InputCaptureFlag_ChannelFour = STD_HIGH;
 800e1fc:	4b44      	ldr	r3, [pc, #272]	; (800e310 <HAL_TIM_IC_CaptureCallback+0x248>)
 800e1fe:	2201      	movs	r2, #1
 800e200:	701a      	strb	r2, [r3, #0]
			/* Change the polarity of the input channel. */
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	6a1a      	ldr	r2, [r3, #32]
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800e210:	621a      	str	r2, [r3, #32]
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	6a1a      	ldr	r2, [r3, #32]
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	f042 0220 	orr.w	r2, r2, #32
 800e220:	621a      	str	r2, [r3, #32]
	}
	else
	{
		/* do nothing */
	}
}
 800e222:	e061      	b.n	800e2e8 <HAL_TIM_IC_CaptureCallback+0x220>
		else if(Tim5_InputCaptureFlag_ChannelFour == STD_HIGH)
 800e224:	4b3a      	ldr	r3, [pc, #232]	; (800e310 <HAL_TIM_IC_CaptureCallback+0x248>)
 800e226:	781b      	ldrb	r3, [r3, #0]
 800e228:	2b01      	cmp	r3, #1
 800e22a:	d15d      	bne.n	800e2e8 <HAL_TIM_IC_CaptureCallback+0x220>
			Tim5_InputCompare_ValueTwo_ChannelFour = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800e22c:	2104      	movs	r1, #4
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f7fd fdae 	bl	800bd90 <HAL_TIM_ReadCapturedValue>
 800e234:	4603      	mov	r3, r0
 800e236:	4a38      	ldr	r2, [pc, #224]	; (800e318 <HAL_TIM_IC_CaptureCallback+0x250>)
 800e238:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	2200      	movs	r2, #0
 800e240:	625a      	str	r2, [r3, #36]	; 0x24
			if (Tim5_InputCompare_ValueTwo_ChannelFour > Tim5_InputCompare_ValueOne_ChannelFour)
 800e242:	4b35      	ldr	r3, [pc, #212]	; (800e318 <HAL_TIM_IC_CaptureCallback+0x250>)
 800e244:	681a      	ldr	r2, [r3, #0]
 800e246:	4b33      	ldr	r3, [pc, #204]	; (800e314 <HAL_TIM_IC_CaptureCallback+0x24c>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d907      	bls.n	800e25e <HAL_TIM_IC_CaptureCallback+0x196>
				Tim5_Difference_ChannelFour = Tim5_InputCompare_ValueTwo_ChannelFour - Tim5_InputCompare_ValueOne_ChannelFour;
 800e24e:	4b32      	ldr	r3, [pc, #200]	; (800e318 <HAL_TIM_IC_CaptureCallback+0x250>)
 800e250:	681a      	ldr	r2, [r3, #0]
 800e252:	4b30      	ldr	r3, [pc, #192]	; (800e314 <HAL_TIM_IC_CaptureCallback+0x24c>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	1ad3      	subs	r3, r2, r3
 800e258:	4a30      	ldr	r2, [pc, #192]	; (800e31c <HAL_TIM_IC_CaptureCallback+0x254>)
 800e25a:	6013      	str	r3, [r2, #0]
 800e25c:	e00d      	b.n	800e27a <HAL_TIM_IC_CaptureCallback+0x1b2>
			else if(Tim5_InputCompare_ValueOne_ChannelFour > Tim5_InputCompare_ValueTwo_ChannelFour)
 800e25e:	4b2d      	ldr	r3, [pc, #180]	; (800e314 <HAL_TIM_IC_CaptureCallback+0x24c>)
 800e260:	681a      	ldr	r2, [r3, #0]
 800e262:	4b2d      	ldr	r3, [pc, #180]	; (800e318 <HAL_TIM_IC_CaptureCallback+0x250>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	429a      	cmp	r2, r3
 800e268:	d907      	bls.n	800e27a <HAL_TIM_IC_CaptureCallback+0x1b2>
				Tim5_Difference_ChannelFour = (0xFFFFFFFF - Tim5_InputCompare_ValueOne_ChannelFour) + Tim5_InputCompare_ValueTwo_ChannelFour;
 800e26a:	4b2b      	ldr	r3, [pc, #172]	; (800e318 <HAL_TIM_IC_CaptureCallback+0x250>)
 800e26c:	681a      	ldr	r2, [r3, #0]
 800e26e:	4b29      	ldr	r3, [pc, #164]	; (800e314 <HAL_TIM_IC_CaptureCallback+0x24c>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	1ad3      	subs	r3, r2, r3
 800e274:	3b01      	subs	r3, #1
 800e276:	4a29      	ldr	r2, [pc, #164]	; (800e31c <HAL_TIM_IC_CaptureCallback+0x254>)
 800e278:	6013      	str	r3, [r2, #0]
			Tim5_CalculatedDistance_ChannelFour = Tim5_Difference_ChannelFour * 0.034 / 2;
 800e27a:	4b28      	ldr	r3, [pc, #160]	; (800e31c <HAL_TIM_IC_CaptureCallback+0x254>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	4618      	mov	r0, r3
 800e280:	f7f2 f948 	bl	8000514 <__aeabi_ui2d>
 800e284:	a31a      	add	r3, pc, #104	; (adr r3, 800e2f0 <HAL_TIM_IC_CaptureCallback+0x228>)
 800e286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e28a:	f7f2 f9bd 	bl	8000608 <__aeabi_dmul>
 800e28e:	4602      	mov	r2, r0
 800e290:	460b      	mov	r3, r1
 800e292:	4610      	mov	r0, r2
 800e294:	4619      	mov	r1, r3
 800e296:	f04f 0200 	mov.w	r2, #0
 800e29a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e29e:	f7f2 fadd 	bl	800085c <__aeabi_ddiv>
 800e2a2:	4602      	mov	r2, r0
 800e2a4:	460b      	mov	r3, r1
 800e2a6:	4610      	mov	r0, r2
 800e2a8:	4619      	mov	r1, r3
 800e2aa:	f7f2 fbbf 	bl	8000a2c <__aeabi_d2uiz>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	b2da      	uxtb	r2, r3
 800e2b2:	4b1b      	ldr	r3, [pc, #108]	; (800e320 <HAL_TIM_IC_CaptureCallback+0x258>)
 800e2b4:	701a      	strb	r2, [r3, #0]
			Tim5_InputCaptureFlag_ChannelFour = 0;
 800e2b6:	4b16      	ldr	r3, [pc, #88]	; (800e310 <HAL_TIM_IC_CaptureCallback+0x248>)
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	6a1a      	ldr	r2, [r3, #32]
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800e2ca:	621a      	str	r2, [r3, #32]
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681a      	ldr	r2, [r3, #0]
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	6a12      	ldr	r2, [r2, #32]
 800e2d6:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim5, TIM_IT_CC2);
 800e2d8:	4b0c      	ldr	r3, [pc, #48]	; (800e30c <HAL_TIM_IC_CaptureCallback+0x244>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	68da      	ldr	r2, [r3, #12]
 800e2de:	4b0b      	ldr	r3, [pc, #44]	; (800e30c <HAL_TIM_IC_CaptureCallback+0x244>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	f022 0204 	bic.w	r2, r2, #4
 800e2e6:	60da      	str	r2, [r3, #12]
}
 800e2e8:	bf00      	nop
 800e2ea:	3708      	adds	r7, #8
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}
 800e2f0:	b020c49c 	.word	0xb020c49c
 800e2f4:	3fa16872 	.word	0x3fa16872
 800e2f8:	20000938 	.word	0x20000938
 800e2fc:	2000092c 	.word	0x2000092c
 800e300:	20000930 	.word	0x20000930
 800e304:	20000934 	.word	0x20000934
 800e308:	20000939 	.word	0x20000939
 800e30c:	20000760 	.word	0x20000760
 800e310:	20000948 	.word	0x20000948
 800e314:	2000093c 	.word	0x2000093c
 800e318:	20000940 	.word	0x20000940
 800e31c:	20000944 	.word	0x20000944
 800e320:	20000949 	.word	0x20000949

0800e324 <Tim_Init>:
/***********************************************************************************
* Function: Tim_Init										   			           *
* Description: Peripheral initialization.									       *
************************************************************************************/
StdReturnType Tim_Init(uint8 TimerChannel)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b084      	sub	sp, #16
 800e328:	af00      	add	r7, sp, #0
 800e32a:	4603      	mov	r3, r0
 800e32c:	71fb      	strb	r3, [r7, #7]
	/* Set the timer channel value into a local variable. */
	uint8 localValue = TimerChannel;
 800e32e:	79fb      	ldrb	r3, [r7, #7]
 800e330:	73fb      	strb	r3, [r7, #15]
	switch(localValue)
 800e332:	7bfb      	ldrb	r3, [r7, #15]
 800e334:	3b02      	subs	r3, #2
 800e336:	2b03      	cmp	r3, #3
 800e338:	f200 81f4 	bhi.w	800e724 <Tim_Init+0x400>
 800e33c:	a201      	add	r2, pc, #4	; (adr r2, 800e344 <Tim_Init+0x20>)
 800e33e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e342:	bf00      	nop
 800e344:	0800e355 	.word	0x0800e355
 800e348:	0800e441 	.word	0x0800e441
 800e34c:	0800e565 	.word	0x0800e565
 800e350:	0800e63b 	.word	0x0800e63b
	{
		/* Initialize the timer two. */
		case TIMER_TWO:
			/* Configure the timer parameters. */
			htim2.Instance = TIM2;
 800e354:	4b7a      	ldr	r3, [pc, #488]	; (800e540 <Tim_Init+0x21c>)
 800e356:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e35a:	601a      	str	r2, [r3, #0]
			htim2.Init.Prescaler = 1000-1;
 800e35c:	4b78      	ldr	r3, [pc, #480]	; (800e540 <Tim_Init+0x21c>)
 800e35e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e362:	605a      	str	r2, [r3, #4]
			htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e364:	4b76      	ldr	r3, [pc, #472]	; (800e540 <Tim_Init+0x21c>)
 800e366:	2200      	movs	r2, #0
 800e368:	609a      	str	r2, [r3, #8]
			htim2.Init.Period = 2000-1;
 800e36a:	4b75      	ldr	r3, [pc, #468]	; (800e540 <Tim_Init+0x21c>)
 800e36c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800e370:	60da      	str	r2, [r3, #12]
			htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e372:	4b73      	ldr	r3, [pc, #460]	; (800e540 <Tim_Init+0x21c>)
 800e374:	2200      	movs	r2, #0
 800e376:	611a      	str	r2, [r3, #16]
			htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e378:	4b71      	ldr	r3, [pc, #452]	; (800e540 <Tim_Init+0x21c>)
 800e37a:	2200      	movs	r2, #0
 800e37c:	619a      	str	r2, [r3, #24]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800e37e:	4870      	ldr	r0, [pc, #448]	; (800e540 <Tim_Init+0x21c>)
 800e380:	f7fc fd64 	bl	800ae4c <HAL_TIM_Base_Init>
 800e384:	4603      	mov	r3, r0
 800e386:	2b00      	cmp	r3, #0
 800e388:	d002      	beq.n	800e390 <Tim_Init+0x6c>
			{
				HAL_TIM_ErrorCallback(&htim2);
 800e38a:	486d      	ldr	r0, [pc, #436]	; (800e540 <Tim_Init+0x21c>)
 800e38c:	f000 fa1c 	bl	800e7c8 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Set the timer clock source. */
			sClockSourceConfig2.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e390:	4b6c      	ldr	r3, [pc, #432]	; (800e544 <Tim_Init+0x220>)
 800e392:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e396:	601a      	str	r2, [r3, #0]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig2) != HAL_OK)
 800e398:	496a      	ldr	r1, [pc, #424]	; (800e544 <Tim_Init+0x220>)
 800e39a:	4869      	ldr	r0, [pc, #420]	; (800e540 <Tim_Init+0x21c>)
 800e39c:	f7fd fc30 	bl	800bc00 <HAL_TIM_ConfigClockSource>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d002      	beq.n	800e3ac <Tim_Init+0x88>
			{
				HAL_TIM_ErrorCallback(&htim2);
 800e3a6:	4866      	ldr	r0, [pc, #408]	; (800e540 <Tim_Init+0x21c>)
 800e3a8:	f000 fa0e 	bl	800e7c8 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800e3ac:	4864      	ldr	r0, [pc, #400]	; (800e540 <Tim_Init+0x21c>)
 800e3ae:	f7fc fe0b 	bl	800afc8 <HAL_TIM_PWM_Init>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d002      	beq.n	800e3be <Tim_Init+0x9a>
			{
				HAL_TIM_ErrorCallback(&htim2);
 800e3b8:	4861      	ldr	r0, [pc, #388]	; (800e540 <Tim_Init+0x21c>)
 800e3ba:	f000 fa05 	bl	800e7c8 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Set the master slave mode and output trigger. */
			sMasterConfig2.MasterOutputTrigger = TIM_TRGO_RESET;
 800e3be:	4b62      	ldr	r3, [pc, #392]	; (800e548 <Tim_Init+0x224>)
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	601a      	str	r2, [r3, #0]
			sMasterConfig2.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e3c4:	4b60      	ldr	r3, [pc, #384]	; (800e548 <Tim_Init+0x224>)
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	605a      	str	r2, [r3, #4]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig2) != HAL_OK)
 800e3ca:	495f      	ldr	r1, [pc, #380]	; (800e548 <Tim_Init+0x224>)
 800e3cc:	485c      	ldr	r0, [pc, #368]	; (800e540 <Tim_Init+0x21c>)
 800e3ce:	f7fe f9b9 	bl	800c744 <HAL_TIMEx_MasterConfigSynchronization>
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d002      	beq.n	800e3de <Tim_Init+0xba>
			{
				HAL_TIM_ErrorCallback(&htim2);
 800e3d8:	4859      	ldr	r0, [pc, #356]	; (800e540 <Tim_Init+0x21c>)
 800e3da:	f000 f9f5 	bl	800e7c8 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Set the PWM parameters. */
			sConfigOC2.OCMode = TIM_OCMODE_PWM1;
 800e3de:	4b5b      	ldr	r3, [pc, #364]	; (800e54c <Tim_Init+0x228>)
 800e3e0:	2260      	movs	r2, #96	; 0x60
 800e3e2:	601a      	str	r2, [r3, #0]
			sConfigOC2.Pulse = 0;
 800e3e4:	4b59      	ldr	r3, [pc, #356]	; (800e54c <Tim_Init+0x228>)
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	605a      	str	r2, [r3, #4]
			sConfigOC2.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e3ea:	4b58      	ldr	r3, [pc, #352]	; (800e54c <Tim_Init+0x228>)
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	609a      	str	r2, [r3, #8]
			sConfigOC2.OCFastMode = TIM_OCFAST_ENABLE;
 800e3f0:	4b56      	ldr	r3, [pc, #344]	; (800e54c <Tim_Init+0x228>)
 800e3f2:	2204      	movs	r2, #4
 800e3f4:	611a      	str	r2, [r3, #16]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC2, TIM_CHANNEL_1) != HAL_OK)
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	4954      	ldr	r1, [pc, #336]	; (800e54c <Tim_Init+0x228>)
 800e3fa:	4851      	ldr	r0, [pc, #324]	; (800e540 <Tim_Init+0x21c>)
 800e3fc:	f7fd fb3e 	bl	800ba7c <HAL_TIM_PWM_ConfigChannel>
 800e400:	4603      	mov	r3, r0
 800e402:	2b00      	cmp	r3, #0
 800e404:	d002      	beq.n	800e40c <Tim_Init+0xe8>
			{
				HAL_TIM_ErrorCallback(&htim2);
 800e406:	484e      	ldr	r0, [pc, #312]	; (800e540 <Tim_Init+0x21c>)
 800e408:	f000 f9de 	bl	800e7c8 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC2, TIM_CHANNEL_2) != HAL_OK)
 800e40c:	2204      	movs	r2, #4
 800e40e:	494f      	ldr	r1, [pc, #316]	; (800e54c <Tim_Init+0x228>)
 800e410:	484b      	ldr	r0, [pc, #300]	; (800e540 <Tim_Init+0x21c>)
 800e412:	f7fd fb33 	bl	800ba7c <HAL_TIM_PWM_ConfigChannel>
 800e416:	4603      	mov	r3, r0
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d002      	beq.n	800e422 <Tim_Init+0xfe>
			{
				HAL_TIM_ErrorCallback(&htim2);
 800e41c:	4848      	ldr	r0, [pc, #288]	; (800e540 <Tim_Init+0x21c>)
 800e41e:	f000 f9d3 	bl	800e7c8 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC2, TIM_CHANNEL_3) != HAL_OK)
 800e422:	2208      	movs	r2, #8
 800e424:	4949      	ldr	r1, [pc, #292]	; (800e54c <Tim_Init+0x228>)
 800e426:	4846      	ldr	r0, [pc, #280]	; (800e540 <Tim_Init+0x21c>)
 800e428:	f7fd fb28 	bl	800ba7c <HAL_TIM_PWM_ConfigChannel>
 800e42c:	4603      	mov	r3, r0
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d002      	beq.n	800e438 <Tim_Init+0x114>
			{
				HAL_TIM_ErrorCallback(&htim2);
 800e432:	4843      	ldr	r0, [pc, #268]	; (800e540 <Tim_Init+0x21c>)
 800e434:	f000 f9c8 	bl	800e7c8 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the GPIO. */
			HAL_TIM_MspPostInit(&htim2);
 800e438:	4841      	ldr	r0, [pc, #260]	; (800e540 <Tim_Init+0x21c>)
 800e43a:	f7f7 fa35 	bl	80058a8 <HAL_TIM_MspPostInit>

			break;
 800e43e:	e174      	b.n	800e72a <Tim_Init+0x406>
		/* Initialize the timer three. */
		case TIMER_THREE:
			/* Configure the timer parameters. */
			htim3.Instance = TIM3;
 800e440:	4b43      	ldr	r3, [pc, #268]	; (800e550 <Tim_Init+0x22c>)
 800e442:	4a44      	ldr	r2, [pc, #272]	; (800e554 <Tim_Init+0x230>)
 800e444:	601a      	str	r2, [r3, #0]
			htim3.Init.Prescaler = 1000-1;
 800e446:	4b42      	ldr	r3, [pc, #264]	; (800e550 <Tim_Init+0x22c>)
 800e448:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e44c:	605a      	str	r2, [r3, #4]
			htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e44e:	4b40      	ldr	r3, [pc, #256]	; (800e550 <Tim_Init+0x22c>)
 800e450:	2200      	movs	r2, #0
 800e452:	609a      	str	r2, [r3, #8]
			htim3.Init.Period = 2000-1;
 800e454:	4b3e      	ldr	r3, [pc, #248]	; (800e550 <Tim_Init+0x22c>)
 800e456:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800e45a:	60da      	str	r2, [r3, #12]
			htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e45c:	4b3c      	ldr	r3, [pc, #240]	; (800e550 <Tim_Init+0x22c>)
 800e45e:	2200      	movs	r2, #0
 800e460:	611a      	str	r2, [r3, #16]
			htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e462:	4b3b      	ldr	r3, [pc, #236]	; (800e550 <Tim_Init+0x22c>)
 800e464:	2200      	movs	r2, #0
 800e466:	619a      	str	r2, [r3, #24]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800e468:	4839      	ldr	r0, [pc, #228]	; (800e550 <Tim_Init+0x22c>)
 800e46a:	f7fc fcef 	bl	800ae4c <HAL_TIM_Base_Init>
 800e46e:	4603      	mov	r3, r0
 800e470:	2b00      	cmp	r3, #0
 800e472:	d002      	beq.n	800e47a <Tim_Init+0x156>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 800e474:	4836      	ldr	r0, [pc, #216]	; (800e550 <Tim_Init+0x22c>)
 800e476:	f000 f9a7 	bl	800e7c8 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Set the clock source. */
			sClockSourceConfig3.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e47a:	4b37      	ldr	r3, [pc, #220]	; (800e558 <Tim_Init+0x234>)
 800e47c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e480:	601a      	str	r2, [r3, #0]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig3) != HAL_OK)
 800e482:	4935      	ldr	r1, [pc, #212]	; (800e558 <Tim_Init+0x234>)
 800e484:	4832      	ldr	r0, [pc, #200]	; (800e550 <Tim_Init+0x22c>)
 800e486:	f7fd fbbb 	bl	800bc00 <HAL_TIM_ConfigClockSource>
 800e48a:	4603      	mov	r3, r0
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d002      	beq.n	800e496 <Tim_Init+0x172>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 800e490:	482f      	ldr	r0, [pc, #188]	; (800e550 <Tim_Init+0x22c>)
 800e492:	f000 f999 	bl	800e7c8 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800e496:	482e      	ldr	r0, [pc, #184]	; (800e550 <Tim_Init+0x22c>)
 800e498:	f7fc fd96 	bl	800afc8 <HAL_TIM_PWM_Init>
 800e49c:	4603      	mov	r3, r0
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d002      	beq.n	800e4a8 <Tim_Init+0x184>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 800e4a2:	482b      	ldr	r0, [pc, #172]	; (800e550 <Tim_Init+0x22c>)
 800e4a4:	f000 f990 	bl	800e7c8 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Configure master slave mode. */
			sMasterConfig3.MasterOutputTrigger = TIM_TRGO_RESET;
 800e4a8:	4b2c      	ldr	r3, [pc, #176]	; (800e55c <Tim_Init+0x238>)
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	601a      	str	r2, [r3, #0]
			sMasterConfig3.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e4ae:	4b2b      	ldr	r3, [pc, #172]	; (800e55c <Tim_Init+0x238>)
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	605a      	str	r2, [r3, #4]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig3) != HAL_OK)
 800e4b4:	4929      	ldr	r1, [pc, #164]	; (800e55c <Tim_Init+0x238>)
 800e4b6:	4826      	ldr	r0, [pc, #152]	; (800e550 <Tim_Init+0x22c>)
 800e4b8:	f7fe f944 	bl	800c744 <HAL_TIMEx_MasterConfigSynchronization>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d002      	beq.n	800e4c8 <Tim_Init+0x1a4>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 800e4c2:	4823      	ldr	r0, [pc, #140]	; (800e550 <Tim_Init+0x22c>)
 800e4c4:	f000 f980 	bl	800e7c8 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Configure PWM parameters. */
			sConfigOC3.OCMode = TIM_OCMODE_PWM1;
 800e4c8:	4b25      	ldr	r3, [pc, #148]	; (800e560 <Tim_Init+0x23c>)
 800e4ca:	2260      	movs	r2, #96	; 0x60
 800e4cc:	601a      	str	r2, [r3, #0]
			sConfigOC3.Pulse = 0;
 800e4ce:	4b24      	ldr	r3, [pc, #144]	; (800e560 <Tim_Init+0x23c>)
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	605a      	str	r2, [r3, #4]
			sConfigOC3.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e4d4:	4b22      	ldr	r3, [pc, #136]	; (800e560 <Tim_Init+0x23c>)
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	609a      	str	r2, [r3, #8]
			sConfigOC3.OCFastMode = TIM_OCFAST_ENABLE;
 800e4da:	4b21      	ldr	r3, [pc, #132]	; (800e560 <Tim_Init+0x23c>)
 800e4dc:	2204      	movs	r2, #4
 800e4de:	611a      	str	r2, [r3, #16]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_1) != HAL_OK)
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	491f      	ldr	r1, [pc, #124]	; (800e560 <Tim_Init+0x23c>)
 800e4e4:	481a      	ldr	r0, [pc, #104]	; (800e550 <Tim_Init+0x22c>)
 800e4e6:	f7fd fac9 	bl	800ba7c <HAL_TIM_PWM_ConfigChannel>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d002      	beq.n	800e4f6 <Tim_Init+0x1d2>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 800e4f0:	4817      	ldr	r0, [pc, #92]	; (800e550 <Tim_Init+0x22c>)
 800e4f2:	f000 f969 	bl	800e7c8 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_2) != HAL_OK)
 800e4f6:	2204      	movs	r2, #4
 800e4f8:	4919      	ldr	r1, [pc, #100]	; (800e560 <Tim_Init+0x23c>)
 800e4fa:	4815      	ldr	r0, [pc, #84]	; (800e550 <Tim_Init+0x22c>)
 800e4fc:	f7fd fabe 	bl	800ba7c <HAL_TIM_PWM_ConfigChannel>
 800e500:	4603      	mov	r3, r0
 800e502:	2b00      	cmp	r3, #0
 800e504:	d002      	beq.n	800e50c <Tim_Init+0x1e8>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 800e506:	4812      	ldr	r0, [pc, #72]	; (800e550 <Tim_Init+0x22c>)
 800e508:	f000 f95e 	bl	800e7c8 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_3) != HAL_OK)
 800e50c:	2208      	movs	r2, #8
 800e50e:	4914      	ldr	r1, [pc, #80]	; (800e560 <Tim_Init+0x23c>)
 800e510:	480f      	ldr	r0, [pc, #60]	; (800e550 <Tim_Init+0x22c>)
 800e512:	f7fd fab3 	bl	800ba7c <HAL_TIM_PWM_ConfigChannel>
 800e516:	4603      	mov	r3, r0
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d002      	beq.n	800e522 <Tim_Init+0x1fe>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 800e51c:	480c      	ldr	r0, [pc, #48]	; (800e550 <Tim_Init+0x22c>)
 800e51e:	f000 f953 	bl	800e7c8 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_4) != HAL_OK)
 800e522:	220c      	movs	r2, #12
 800e524:	490e      	ldr	r1, [pc, #56]	; (800e560 <Tim_Init+0x23c>)
 800e526:	480a      	ldr	r0, [pc, #40]	; (800e550 <Tim_Init+0x22c>)
 800e528:	f7fd faa8 	bl	800ba7c <HAL_TIM_PWM_ConfigChannel>
 800e52c:	4603      	mov	r3, r0
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d002      	beq.n	800e538 <Tim_Init+0x214>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 800e532:	4807      	ldr	r0, [pc, #28]	; (800e550 <Tim_Init+0x22c>)
 800e534:	f000 f948 	bl	800e7c8 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Configure timer GPIO. */
			HAL_TIM_MspPostInit(&htim3);
 800e538:	4805      	ldr	r0, [pc, #20]	; (800e550 <Tim_Init+0x22c>)
 800e53a:	f7f7 f9b5 	bl	80058a8 <HAL_TIM_MspPostInit>
			break;
 800e53e:	e0f4      	b.n	800e72a <Tim_Init+0x406>
 800e540:	20000544 	.word	0x20000544
 800e544:	2000094c 	.word	0x2000094c
 800e548:	2000095c 	.word	0x2000095c
 800e54c:	20000964 	.word	0x20000964
 800e550:	200005f8 	.word	0x200005f8
 800e554:	40000400 	.word	0x40000400
 800e558:	200009b8 	.word	0x200009b8
 800e55c:	200009c8 	.word	0x200009c8
 800e560:	20000980 	.word	0x20000980
		/* Initialize the timer four. */
		case TIMER_FOUR:
			/* Configure timer parameters. */
			htim4.Instance = TIM4;
 800e564:	4b73      	ldr	r3, [pc, #460]	; (800e734 <Tim_Init+0x410>)
 800e566:	4a74      	ldr	r2, [pc, #464]	; (800e738 <Tim_Init+0x414>)
 800e568:	601a      	str	r2, [r3, #0]
			htim4.Init.Prescaler = 10000-1;
 800e56a:	4b72      	ldr	r3, [pc, #456]	; (800e734 <Tim_Init+0x410>)
 800e56c:	f242 720f 	movw	r2, #9999	; 0x270f
 800e570:	605a      	str	r2, [r3, #4]
			htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e572:	4b70      	ldr	r3, [pc, #448]	; (800e734 <Tim_Init+0x410>)
 800e574:	2200      	movs	r2, #0
 800e576:	609a      	str	r2, [r3, #8]
			htim4.Init.Period = 1000-1;
 800e578:	4b6e      	ldr	r3, [pc, #440]	; (800e734 <Tim_Init+0x410>)
 800e57a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e57e:	60da      	str	r2, [r3, #12]
			htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e580:	4b6c      	ldr	r3, [pc, #432]	; (800e734 <Tim_Init+0x410>)
 800e582:	2200      	movs	r2, #0
 800e584:	611a      	str	r2, [r3, #16]
			htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e586:	4b6b      	ldr	r3, [pc, #428]	; (800e734 <Tim_Init+0x410>)
 800e588:	2200      	movs	r2, #0
 800e58a:	619a      	str	r2, [r3, #24]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800e58c:	4869      	ldr	r0, [pc, #420]	; (800e734 <Tim_Init+0x410>)
 800e58e:	f7fc fc5d 	bl	800ae4c <HAL_TIM_Base_Init>
 800e592:	4603      	mov	r3, r0
 800e594:	2b00      	cmp	r3, #0
 800e596:	d002      	beq.n	800e59e <Tim_Init+0x27a>
			{
				HAL_TIM_ErrorCallback(&htim4);
 800e598:	4866      	ldr	r0, [pc, #408]	; (800e734 <Tim_Init+0x410>)
 800e59a:	f000 f915 	bl	800e7c8 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the clock source. */
			sClockSourceConfig4.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e59e:	4b67      	ldr	r3, [pc, #412]	; (800e73c <Tim_Init+0x418>)
 800e5a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e5a4:	601a      	str	r2, [r3, #0]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig4) != HAL_OK)
 800e5a6:	4965      	ldr	r1, [pc, #404]	; (800e73c <Tim_Init+0x418>)
 800e5a8:	4862      	ldr	r0, [pc, #392]	; (800e734 <Tim_Init+0x410>)
 800e5aa:	f7fd fb29 	bl	800bc00 <HAL_TIM_ConfigClockSource>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d002      	beq.n	800e5ba <Tim_Init+0x296>
			{
				HAL_TIM_ErrorCallback(&htim4);
 800e5b4:	485f      	ldr	r0, [pc, #380]	; (800e734 <Tim_Init+0x410>)
 800e5b6:	f000 f907 	bl	800e7c8 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800e5ba:	485e      	ldr	r0, [pc, #376]	; (800e734 <Tim_Init+0x410>)
 800e5bc:	f7fc fd04 	bl	800afc8 <HAL_TIM_PWM_Init>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d002      	beq.n	800e5cc <Tim_Init+0x2a8>
			{
				HAL_TIM_ErrorCallback(&htim4);
 800e5c6:	485b      	ldr	r0, [pc, #364]	; (800e734 <Tim_Init+0x410>)
 800e5c8:	f000 f8fe 	bl	800e7c8 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the master slave mode. */
			sMasterConfig4.MasterOutputTrigger = TIM_TRGO_RESET;
 800e5cc:	4b5c      	ldr	r3, [pc, #368]	; (800e740 <Tim_Init+0x41c>)
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	601a      	str	r2, [r3, #0]
			sMasterConfig4.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e5d2:	4b5b      	ldr	r3, [pc, #364]	; (800e740 <Tim_Init+0x41c>)
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	605a      	str	r2, [r3, #4]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig4) != HAL_OK)
 800e5d8:	4959      	ldr	r1, [pc, #356]	; (800e740 <Tim_Init+0x41c>)
 800e5da:	4856      	ldr	r0, [pc, #344]	; (800e734 <Tim_Init+0x410>)
 800e5dc:	f7fe f8b2 	bl	800c744 <HAL_TIMEx_MasterConfigSynchronization>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d002      	beq.n	800e5ec <Tim_Init+0x2c8>
			{
				HAL_TIM_ErrorCallback(&htim4);
 800e5e6:	4853      	ldr	r0, [pc, #332]	; (800e734 <Tim_Init+0x410>)
 800e5e8:	f000 f8ee 	bl	800e7c8 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the PWM parameters. */
			sConfigOC4.OCMode = TIM_OCMODE_PWM1;
 800e5ec:	4b55      	ldr	r3, [pc, #340]	; (800e744 <Tim_Init+0x420>)
 800e5ee:	2260      	movs	r2, #96	; 0x60
 800e5f0:	601a      	str	r2, [r3, #0]
			sConfigOC4.Pulse = 999;
 800e5f2:	4b54      	ldr	r3, [pc, #336]	; (800e744 <Tim_Init+0x420>)
 800e5f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e5f8:	605a      	str	r2, [r3, #4]
			sConfigOC4.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e5fa:	4b52      	ldr	r3, [pc, #328]	; (800e744 <Tim_Init+0x420>)
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	609a      	str	r2, [r3, #8]
			sConfigOC4.OCFastMode = TIM_OCFAST_DISABLE;
 800e600:	4b50      	ldr	r3, [pc, #320]	; (800e744 <Tim_Init+0x420>)
 800e602:	2200      	movs	r2, #0
 800e604:	611a      	str	r2, [r3, #16]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC4, TIM_CHANNEL_3) != HAL_OK)
 800e606:	2208      	movs	r2, #8
 800e608:	494e      	ldr	r1, [pc, #312]	; (800e744 <Tim_Init+0x420>)
 800e60a:	484a      	ldr	r0, [pc, #296]	; (800e734 <Tim_Init+0x410>)
 800e60c:	f7fd fa36 	bl	800ba7c <HAL_TIM_PWM_ConfigChannel>
 800e610:	4603      	mov	r3, r0
 800e612:	2b00      	cmp	r3, #0
 800e614:	d002      	beq.n	800e61c <Tim_Init+0x2f8>
			{
				HAL_TIM_ErrorCallback(&htim4);
 800e616:	4847      	ldr	r0, [pc, #284]	; (800e734 <Tim_Init+0x410>)
 800e618:	f000 f8d6 	bl	800e7c8 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC4, TIM_CHANNEL_4) != HAL_OK)
 800e61c:	220c      	movs	r2, #12
 800e61e:	4949      	ldr	r1, [pc, #292]	; (800e744 <Tim_Init+0x420>)
 800e620:	4844      	ldr	r0, [pc, #272]	; (800e734 <Tim_Init+0x410>)
 800e622:	f7fd fa2b 	bl	800ba7c <HAL_TIM_PWM_ConfigChannel>
 800e626:	4603      	mov	r3, r0
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d002      	beq.n	800e632 <Tim_Init+0x30e>
			{
				HAL_TIM_ErrorCallback(&htim4);
 800e62c:	4841      	ldr	r0, [pc, #260]	; (800e734 <Tim_Init+0x410>)
 800e62e:	f000 f8cb 	bl	800e7c8 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the timer GPIO. */
			HAL_TIM_MspPostInit(&htim4);
 800e632:	4840      	ldr	r0, [pc, #256]	; (800e734 <Tim_Init+0x410>)
 800e634:	f7f7 f938 	bl	80058a8 <HAL_TIM_MspPostInit>
			break;
 800e638:	e077      	b.n	800e72a <Tim_Init+0x406>
		/* Initialize the timer five. */
		case TIMER_FIVE:
			htim5.Instance = TIM5;
 800e63a:	4b43      	ldr	r3, [pc, #268]	; (800e748 <Tim_Init+0x424>)
 800e63c:	4a43      	ldr	r2, [pc, #268]	; (800e74c <Tim_Init+0x428>)
 800e63e:	601a      	str	r2, [r3, #0]
			htim5.Init.Prescaler = 100-1;
 800e640:	4b41      	ldr	r3, [pc, #260]	; (800e748 <Tim_Init+0x424>)
 800e642:	2263      	movs	r2, #99	; 0x63
 800e644:	605a      	str	r2, [r3, #4]
			htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e646:	4b40      	ldr	r3, [pc, #256]	; (800e748 <Tim_Init+0x424>)
 800e648:	2200      	movs	r2, #0
 800e64a:	609a      	str	r2, [r3, #8]
			htim5.Init.Period = 0xffffffff;
 800e64c:	4b3e      	ldr	r3, [pc, #248]	; (800e748 <Tim_Init+0x424>)
 800e64e:	f04f 32ff 	mov.w	r2, #4294967295
 800e652:	60da      	str	r2, [r3, #12]
			htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e654:	4b3c      	ldr	r3, [pc, #240]	; (800e748 <Tim_Init+0x424>)
 800e656:	2200      	movs	r2, #0
 800e658:	611a      	str	r2, [r3, #16]
			htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e65a:	4b3b      	ldr	r3, [pc, #236]	; (800e748 <Tim_Init+0x424>)
 800e65c:	2200      	movs	r2, #0
 800e65e:	619a      	str	r2, [r3, #24]
			if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800e660:	4839      	ldr	r0, [pc, #228]	; (800e748 <Tim_Init+0x424>)
 800e662:	f7fc fbf3 	bl	800ae4c <HAL_TIM_Base_Init>
 800e666:	4603      	mov	r3, r0
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d002      	beq.n	800e672 <Tim_Init+0x34e>
			{
				HAL_TIM_ErrorCallback(&htim5);
 800e66c:	4836      	ldr	r0, [pc, #216]	; (800e748 <Tim_Init+0x424>)
 800e66e:	f000 f8ab 	bl	800e7c8 <HAL_TIM_ErrorCallback>
			}
			else
			{
				/* do nothing */
			}
			sClockSourceConfig5.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e672:	4b37      	ldr	r3, [pc, #220]	; (800e750 <Tim_Init+0x42c>)
 800e674:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e678:	601a      	str	r2, [r3, #0]
			if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig5) != HAL_OK)
 800e67a:	4935      	ldr	r1, [pc, #212]	; (800e750 <Tim_Init+0x42c>)
 800e67c:	4832      	ldr	r0, [pc, #200]	; (800e748 <Tim_Init+0x424>)
 800e67e:	f7fd fabf 	bl	800bc00 <HAL_TIM_ConfigClockSource>
 800e682:	4603      	mov	r3, r0
 800e684:	2b00      	cmp	r3, #0
 800e686:	d002      	beq.n	800e68e <Tim_Init+0x36a>
			{
				HAL_TIM_ErrorCallback(&htim5);
 800e688:	482f      	ldr	r0, [pc, #188]	; (800e748 <Tim_Init+0x424>)
 800e68a:	f000 f89d 	bl	800e7c8 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}

			if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 800e68e:	482e      	ldr	r0, [pc, #184]	; (800e748 <Tim_Init+0x424>)
 800e690:	f7fc feb0 	bl	800b3f4 <HAL_TIM_IC_Init>
 800e694:	4603      	mov	r3, r0
 800e696:	2b00      	cmp	r3, #0
 800e698:	d002      	beq.n	800e6a0 <Tim_Init+0x37c>
			{
				HAL_TIM_ErrorCallback(&htim5);
 800e69a:	482b      	ldr	r0, [pc, #172]	; (800e748 <Tim_Init+0x424>)
 800e69c:	f000 f894 	bl	800e7c8 <HAL_TIM_ErrorCallback>
			}
			else
			{
				/* do nothing */
			}
			sMasterConfig5.MasterOutputTrigger = TIM_TRGO_RESET;
 800e6a0:	4b2c      	ldr	r3, [pc, #176]	; (800e754 <Tim_Init+0x430>)
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	601a      	str	r2, [r3, #0]
			sMasterConfig5.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e6a6:	4b2b      	ldr	r3, [pc, #172]	; (800e754 <Tim_Init+0x430>)
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	605a      	str	r2, [r3, #4]
			if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig5) != HAL_OK)
 800e6ac:	4929      	ldr	r1, [pc, #164]	; (800e754 <Tim_Init+0x430>)
 800e6ae:	4826      	ldr	r0, [pc, #152]	; (800e748 <Tim_Init+0x424>)
 800e6b0:	f7fe f848 	bl	800c744 <HAL_TIMEx_MasterConfigSynchronization>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d002      	beq.n	800e6c0 <Tim_Init+0x39c>
			{
				HAL_TIM_ErrorCallback(&htim5);
 800e6ba:	4823      	ldr	r0, [pc, #140]	; (800e748 <Tim_Init+0x424>)
 800e6bc:	f000 f884 	bl	800e7c8 <HAL_TIM_ErrorCallback>
			}
			else
			{
				/* do nothing */
			}
			sConfigIC5.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800e6c0:	4b25      	ldr	r3, [pc, #148]	; (800e758 <Tim_Init+0x434>)
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	601a      	str	r2, [r3, #0]
			sConfigIC5.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800e6c6:	4b24      	ldr	r3, [pc, #144]	; (800e758 <Tim_Init+0x434>)
 800e6c8:	2201      	movs	r2, #1
 800e6ca:	605a      	str	r2, [r3, #4]
			sConfigIC5.ICPrescaler = TIM_ICPSC_DIV1;
 800e6cc:	4b22      	ldr	r3, [pc, #136]	; (800e758 <Tim_Init+0x434>)
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	609a      	str	r2, [r3, #8]
			sConfigIC5.ICFilter = 0;
 800e6d2:	4b21      	ldr	r3, [pc, #132]	; (800e758 <Tim_Init+0x434>)
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	60da      	str	r2, [r3, #12]
			if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC5, TIM_CHANNEL_1) != HAL_OK)
 800e6d8:	2200      	movs	r2, #0
 800e6da:	491f      	ldr	r1, [pc, #124]	; (800e758 <Tim_Init+0x434>)
 800e6dc:	481a      	ldr	r0, [pc, #104]	; (800e748 <Tim_Init+0x424>)
 800e6de:	f7fd f931 	bl	800b944 <HAL_TIM_IC_ConfigChannel>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d002      	beq.n	800e6ee <Tim_Init+0x3ca>
			{
				HAL_TIM_ErrorCallback(&htim5);
 800e6e8:	4817      	ldr	r0, [pc, #92]	; (800e748 <Tim_Init+0x424>)
 800e6ea:	f000 f86d 	bl	800e7c8 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}

			if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC5, TIM_CHANNEL_2) != HAL_OK)
 800e6ee:	2204      	movs	r2, #4
 800e6f0:	4919      	ldr	r1, [pc, #100]	; (800e758 <Tim_Init+0x434>)
 800e6f2:	4815      	ldr	r0, [pc, #84]	; (800e748 <Tim_Init+0x424>)
 800e6f4:	f7fd f926 	bl	800b944 <HAL_TIM_IC_ConfigChannel>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d002      	beq.n	800e704 <Tim_Init+0x3e0>
			{
				HAL_TIM_ErrorCallback(&htim5);
 800e6fe:	4812      	ldr	r0, [pc, #72]	; (800e748 <Tim_Init+0x424>)
 800e700:	f000 f862 	bl	800e7c8 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}

			if(TimH_MainFunctionFirstCall == STD_LOW)
 800e704:	4b15      	ldr	r3, [pc, #84]	; (800e75c <Tim_Init+0x438>)
 800e706:	781b      	ldrb	r3, [r3, #0]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d10d      	bne.n	800e728 <Tim_Init+0x404>
			{
				HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 800e70c:	2100      	movs	r1, #0
 800e70e:	480e      	ldr	r0, [pc, #56]	; (800e748 <Tim_Init+0x424>)
 800e710:	f7fc fed6 	bl	800b4c0 <HAL_TIM_IC_Start_IT>
				HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);
 800e714:	2104      	movs	r1, #4
 800e716:	480c      	ldr	r0, [pc, #48]	; (800e748 <Tim_Init+0x424>)
 800e718:	f7fc fed2 	bl	800b4c0 <HAL_TIM_IC_Start_IT>
				TimH_MainFunctionFirstCall = STD_HIGH;
 800e71c:	4b0f      	ldr	r3, [pc, #60]	; (800e75c <Tim_Init+0x438>)
 800e71e:	2201      	movs	r2, #1
 800e720:	701a      	strb	r2, [r3, #0]
			else
			{
				/* do nothing */
			}

			break;
 800e722:	e001      	b.n	800e728 <Tim_Init+0x404>
		default:
			break;
 800e724:	bf00      	nop
 800e726:	e000      	b.n	800e72a <Tim_Init+0x406>
			break;
 800e728:	bf00      	nop
	}
	return E_OK;
 800e72a:	2300      	movs	r3, #0
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	3710      	adds	r7, #16
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}
 800e734:	200006ac 	.word	0x200006ac
 800e738:	40000800 	.word	0x40000800
 800e73c:	200009d0 	.word	0x200009d0
 800e740:	200009e0 	.word	0x200009e0
 800e744:	2000099c 	.word	0x2000099c
 800e748:	20000760 	.word	0x20000760
 800e74c:	40000c00 	.word	0x40000c00
 800e750:	200009e8 	.word	0x200009e8
 800e754:	200009f8 	.word	0x200009f8
 800e758:	20000a00 	.word	0x20000a00
 800e75c:	2000094a 	.word	0x2000094a

0800e760 <Tim_DeInit>:
/***********************************************************************************
* Function: Tim_DeInit										   			           *
* Description: Peripheral de-initialization.									   *
************************************************************************************/
StdReturnType Tim_DeInit(uint8 TimerChannel)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b084      	sub	sp, #16
 800e764:	af00      	add	r7, sp, #0
 800e766:	4603      	mov	r3, r0
 800e768:	71fb      	strb	r3, [r7, #7]
	/* Store the timer channel value into a local variable. */
	uint8 localVariable = TimerChannel;
 800e76a:	79fb      	ldrb	r3, [r7, #7]
 800e76c:	73fb      	strb	r3, [r7, #15]
	/* Process the request for timer de-init. */
	switch(localVariable)
 800e76e:	7bfb      	ldrb	r3, [r7, #15]
 800e770:	3b02      	subs	r3, #2
 800e772:	2b03      	cmp	r3, #3
 800e774:	d81a      	bhi.n	800e7ac <Tim_DeInit+0x4c>
 800e776:	a201      	add	r2, pc, #4	; (adr r2, 800e77c <Tim_DeInit+0x1c>)
 800e778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e77c:	0800e78d 	.word	0x0800e78d
 800e780:	0800e795 	.word	0x0800e795
 800e784:	0800e79d 	.word	0x0800e79d
 800e788:	0800e7a5 	.word	0x0800e7a5
	{
		case TIMER_TWO:
			HAL_TIM_Base_MspDeInit(&htim2);
 800e78c:	480a      	ldr	r0, [pc, #40]	; (800e7b8 <Tim_DeInit+0x58>)
 800e78e:	f7f7 f935 	bl	80059fc <HAL_TIM_Base_MspDeInit>
			break;
 800e792:	e00c      	b.n	800e7ae <Tim_DeInit+0x4e>
		case TIMER_THREE:
			HAL_TIM_Base_MspDeInit(&htim3);
 800e794:	4809      	ldr	r0, [pc, #36]	; (800e7bc <Tim_DeInit+0x5c>)
 800e796:	f7f7 f931 	bl	80059fc <HAL_TIM_Base_MspDeInit>
			break;
 800e79a:	e008      	b.n	800e7ae <Tim_DeInit+0x4e>
		case TIMER_FOUR:
			HAL_TIM_Base_MspDeInit(&htim4);
 800e79c:	4808      	ldr	r0, [pc, #32]	; (800e7c0 <Tim_DeInit+0x60>)
 800e79e:	f7f7 f92d 	bl	80059fc <HAL_TIM_Base_MspDeInit>
			break;
 800e7a2:	e004      	b.n	800e7ae <Tim_DeInit+0x4e>
		case TIMER_FIVE:
			HAL_TIM_Base_MspDeInit(&htim5);
 800e7a4:	4807      	ldr	r0, [pc, #28]	; (800e7c4 <Tim_DeInit+0x64>)
 800e7a6:	f7f7 f929 	bl	80059fc <HAL_TIM_Base_MspDeInit>
			break;
 800e7aa:	e000      	b.n	800e7ae <Tim_DeInit+0x4e>
		default:
			break;
 800e7ac:	bf00      	nop
	}
	return E_OK;
 800e7ae:	2300      	movs	r3, #0
}
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	3710      	adds	r7, #16
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}
 800e7b8:	20000544 	.word	0x20000544
 800e7bc:	200005f8 	.word	0x200005f8
 800e7c0:	200006ac 	.word	0x200006ac
 800e7c4:	20000760 	.word	0x20000760

0800e7c8 <HAL_TIM_ErrorCallback>:
/***********************************************************************************
* Function: HAL_TIM_ErrorCallback										   		   *
* Description: Error callback called when timer fault occurs.					   *
************************************************************************************/
VOID HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b082      	sub	sp, #8
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
	/* Perform re-initialization of the peripheral in case of error. */
	if(htim->Instance == TIM2)
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e7d8:	d10b      	bne.n	800e7f2 <HAL_TIM_ErrorCallback+0x2a>
	{
		SystemManager_Fault[TIMER2_ERROR]++;
 800e7da:	4b21      	ldr	r3, [pc, #132]	; (800e860 <HAL_TIM_ErrorCallback+0x98>)
 800e7dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e7de:	3301      	adds	r3, #1
 800e7e0:	4a1f      	ldr	r2, [pc, #124]	; (800e860 <HAL_TIM_ErrorCallback+0x98>)
 800e7e2:	6593      	str	r3, [r2, #88]	; 0x58
		Tim_DeInit(TIMER_TWO);
 800e7e4:	2002      	movs	r0, #2
 800e7e6:	f7ff ffbb 	bl	800e760 <Tim_DeInit>
		Tim_Init(TIMER_TWO);
 800e7ea:	2002      	movs	r0, #2
 800e7ec:	f7ff fd9a 	bl	800e324 <Tim_Init>
	}
	else
	{
		/* do nothing */
	}
}
 800e7f0:	e031      	b.n	800e856 <HAL_TIM_ErrorCallback+0x8e>
	else if(htim->Instance == TIM3)
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	4a1b      	ldr	r2, [pc, #108]	; (800e864 <HAL_TIM_ErrorCallback+0x9c>)
 800e7f8:	4293      	cmp	r3, r2
 800e7fa:	d10b      	bne.n	800e814 <HAL_TIM_ErrorCallback+0x4c>
		SystemManager_Fault[TIMER3_ERROR]++;
 800e7fc:	4b18      	ldr	r3, [pc, #96]	; (800e860 <HAL_TIM_ErrorCallback+0x98>)
 800e7fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e800:	3301      	adds	r3, #1
 800e802:	4a17      	ldr	r2, [pc, #92]	; (800e860 <HAL_TIM_ErrorCallback+0x98>)
 800e804:	65d3      	str	r3, [r2, #92]	; 0x5c
		Tim_DeInit(TIMER_THREE);
 800e806:	2003      	movs	r0, #3
 800e808:	f7ff ffaa 	bl	800e760 <Tim_DeInit>
		Tim_Init(TIMER_THREE);
 800e80c:	2003      	movs	r0, #3
 800e80e:	f7ff fd89 	bl	800e324 <Tim_Init>
}
 800e812:	e020      	b.n	800e856 <HAL_TIM_ErrorCallback+0x8e>
	else if(htim->Instance == TIM4)
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	4a13      	ldr	r2, [pc, #76]	; (800e868 <HAL_TIM_ErrorCallback+0xa0>)
 800e81a:	4293      	cmp	r3, r2
 800e81c:	d10b      	bne.n	800e836 <HAL_TIM_ErrorCallback+0x6e>
		SystemManager_Fault[TIMER4_ERROR]++;
 800e81e:	4b10      	ldr	r3, [pc, #64]	; (800e860 <HAL_TIM_ErrorCallback+0x98>)
 800e820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e822:	3301      	adds	r3, #1
 800e824:	4a0e      	ldr	r2, [pc, #56]	; (800e860 <HAL_TIM_ErrorCallback+0x98>)
 800e826:	6613      	str	r3, [r2, #96]	; 0x60
		Tim_DeInit(TIMER_FOUR);
 800e828:	2004      	movs	r0, #4
 800e82a:	f7ff ff99 	bl	800e760 <Tim_DeInit>
		Tim_Init(TIMER_FOUR);
 800e82e:	2004      	movs	r0, #4
 800e830:	f7ff fd78 	bl	800e324 <Tim_Init>
}
 800e834:	e00f      	b.n	800e856 <HAL_TIM_ErrorCallback+0x8e>
	else if(htim->Instance == TIM5)
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	4a0c      	ldr	r2, [pc, #48]	; (800e86c <HAL_TIM_ErrorCallback+0xa4>)
 800e83c:	4293      	cmp	r3, r2
 800e83e:	d10a      	bne.n	800e856 <HAL_TIM_ErrorCallback+0x8e>
		SystemManager_Fault[TIMER5_ERROR]++;
 800e840:	4b07      	ldr	r3, [pc, #28]	; (800e860 <HAL_TIM_ErrorCallback+0x98>)
 800e842:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e844:	3301      	adds	r3, #1
 800e846:	4a06      	ldr	r2, [pc, #24]	; (800e860 <HAL_TIM_ErrorCallback+0x98>)
 800e848:	6653      	str	r3, [r2, #100]	; 0x64
		Tim_DeInit(TIMER_FIVE);
 800e84a:	2005      	movs	r0, #5
 800e84c:	f7ff ff88 	bl	800e760 <Tim_DeInit>
		Tim_Init(TIMER_FIVE);
 800e850:	2005      	movs	r0, #5
 800e852:	f7ff fd67 	bl	800e324 <Tim_Init>
}
 800e856:	bf00      	nop
 800e858:	3708      	adds	r7, #8
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}
 800e85e:	bf00      	nop
 800e860:	20009420 	.word	0x20009420
 800e864:	40000400 	.word	0x40000400
 800e868:	40000800 	.word	0x40000800
 800e86c:	40000c00 	.word	0x40000c00

0800e870 <Tim_MainFunction>:
/***********************************************************************************
* Function: Tim_MainFunction										   			   *
* Description: Peripheral main function.									       *
************************************************************************************/
VOID Tim_MainFunction()
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b084      	sub	sp, #16
 800e874:	af00      	add	r7, sp, #0
	/* Check each timer for error status into local variables. */
	uint32 localStateTimerTwo = HAL_TIM_Base_GetState(&htim2);
 800e876:	4891      	ldr	r0, [pc, #580]	; (800eabc <Tim_MainFunction+0x24c>)
 800e878:	f7fd fb14 	bl	800bea4 <HAL_TIM_Base_GetState>
 800e87c:	4603      	mov	r3, r0
 800e87e:	60fb      	str	r3, [r7, #12]
	uint32 localStateTimerThree = HAL_TIM_Base_GetState(&htim3);
 800e880:	488f      	ldr	r0, [pc, #572]	; (800eac0 <Tim_MainFunction+0x250>)
 800e882:	f7fd fb0f 	bl	800bea4 <HAL_TIM_Base_GetState>
 800e886:	4603      	mov	r3, r0
 800e888:	60bb      	str	r3, [r7, #8]
	uint32 localStateTimerFour = HAL_TIM_Base_GetState(&htim4);
 800e88a:	488e      	ldr	r0, [pc, #568]	; (800eac4 <Tim_MainFunction+0x254>)
 800e88c:	f7fd fb0a 	bl	800bea4 <HAL_TIM_Base_GetState>
 800e890:	4603      	mov	r3, r0
 800e892:	607b      	str	r3, [r7, #4]
	uint32 localStateTimerFive = HAL_TIM_Base_GetState(&htim5);
 800e894:	488c      	ldr	r0, [pc, #560]	; (800eac8 <Tim_MainFunction+0x258>)
 800e896:	f7fd fb05 	bl	800bea4 <HAL_TIM_Base_GetState>
 800e89a:	4603      	mov	r3, r0
 800e89c:	603b      	str	r3, [r7, #0]
	/* Process timers state. */
	switch(localStateTimerFive)
 800e89e:	683b      	ldr	r3, [r7, #0]
 800e8a0:	2b04      	cmp	r3, #4
 800e8a2:	d86a      	bhi.n	800e97a <Tim_MainFunction+0x10a>
 800e8a4:	a201      	add	r2, pc, #4	; (adr r2, 800e8ac <Tim_MainFunction+0x3c>)
 800e8a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8aa:	bf00      	nop
 800e8ac:	0800e8c1 	.word	0x0800e8c1
 800e8b0:	0800e8d1 	.word	0x0800e8d1
 800e8b4:	0800e951 	.word	0x0800e951
 800e8b8:	0800e95b 	.word	0x0800e95b
 800e8bc:	0800e96b 	.word	0x0800e96b
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerFive = localStateTimerFive;
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	b2da      	uxtb	r2, r3
 800e8c4:	4b81      	ldr	r3, [pc, #516]	; (800eacc <Tim_MainFunction+0x25c>)
 800e8c6:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_FIVE);
 800e8c8:	2005      	movs	r0, #5
 800e8ca:	f7ff fd2b 	bl	800e324 <Tim_Init>
			break;
 800e8ce:	e055      	b.n	800e97c <Tim_MainFunction+0x10c>
		case HAL_TIM_STATE_READY:
			if(Os_Counter % 500)
 800e8d0:	4b7f      	ldr	r3, [pc, #508]	; (800ead0 <Tim_MainFunction+0x260>)
 800e8d2:	681a      	ldr	r2, [r3, #0]
 800e8d4:	4b7f      	ldr	r3, [pc, #508]	; (800ead4 <Tim_MainFunction+0x264>)
 800e8d6:	fba3 1302 	umull	r1, r3, r3, r2
 800e8da:	095b      	lsrs	r3, r3, #5
 800e8dc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e8e0:	fb01 f303 	mul.w	r3, r1, r3
 800e8e4:	1ad3      	subs	r3, r2, r3
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d02d      	beq.n	800e946 <Tim_MainFunction+0xd6>
			{
				HAL_GPIO_WritePin(PDCR_TRIG_PORT, PDCR_TRIG_PIN, GPIO_PIN_SET);
 800e8ea:	2201      	movs	r2, #1
 800e8ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e8f0:	4879      	ldr	r0, [pc, #484]	; (800ead8 <Tim_MainFunction+0x268>)
 800e8f2:	f7f9 fd31 	bl	8008358 <HAL_GPIO_WritePin>
				HAL_Delay(1);
 800e8f6:	2001      	movs	r0, #1
 800e8f8:	f7f7 fcc4 	bl	8006284 <HAL_Delay>
				HAL_GPIO_WritePin(PDCR_TRIG_PORT, PDCR_TRIG_PIN, GPIO_PIN_RESET);
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e902:	4875      	ldr	r0, [pc, #468]	; (800ead8 <Tim_MainFunction+0x268>)
 800e904:	f7f9 fd28 	bl	8008358 <HAL_GPIO_WritePin>
				__HAL_TIM_ENABLE_IT(&htim5, TIM_IT_CC2);
 800e908:	4b6f      	ldr	r3, [pc, #444]	; (800eac8 <Tim_MainFunction+0x258>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	68da      	ldr	r2, [r3, #12]
 800e90e:	4b6e      	ldr	r3, [pc, #440]	; (800eac8 <Tim_MainFunction+0x258>)
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	f042 0204 	orr.w	r2, r2, #4
 800e916:	60da      	str	r2, [r3, #12]
				HAL_GPIO_WritePin(PDCF_TRIG_PORT, PDCF_TRIG_PIN, GPIO_PIN_SET);
 800e918:	2201      	movs	r2, #1
 800e91a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e91e:	486f      	ldr	r0, [pc, #444]	; (800eadc <Tim_MainFunction+0x26c>)
 800e920:	f7f9 fd1a 	bl	8008358 <HAL_GPIO_WritePin>
				HAL_Delay(1);
 800e924:	2001      	movs	r0, #1
 800e926:	f7f7 fcad 	bl	8006284 <HAL_Delay>
				HAL_GPIO_WritePin(PDCF_TRIG_PORT, PDCF_TRIG_PIN, GPIO_PIN_RESET);
 800e92a:	2200      	movs	r2, #0
 800e92c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e930:	486a      	ldr	r0, [pc, #424]	; (800eadc <Tim_MainFunction+0x26c>)
 800e932:	f7f9 fd11 	bl	8008358 <HAL_GPIO_WritePin>
				__HAL_TIM_ENABLE_IT(&htim5, TIM_IT_CC1);
 800e936:	4b64      	ldr	r3, [pc, #400]	; (800eac8 <Tim_MainFunction+0x258>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	68da      	ldr	r2, [r3, #12]
 800e93c:	4b62      	ldr	r3, [pc, #392]	; (800eac8 <Tim_MainFunction+0x258>)
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	f042 0202 	orr.w	r2, r2, #2
 800e944:	60da      	str	r2, [r3, #12]
			}
			else
			{
				/* do nothing */
			}
			TimH_BswState_TimerFive = localStateTimerFive;
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	b2da      	uxtb	r2, r3
 800e94a:	4b60      	ldr	r3, [pc, #384]	; (800eacc <Tim_MainFunction+0x25c>)
 800e94c:	701a      	strb	r2, [r3, #0]
			break;
 800e94e:	e015      	b.n	800e97c <Tim_MainFunction+0x10c>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerFive = localStateTimerFive;
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	b2da      	uxtb	r2, r3
 800e954:	4b5d      	ldr	r3, [pc, #372]	; (800eacc <Tim_MainFunction+0x25c>)
 800e956:	701a      	strb	r2, [r3, #0]
			break;
 800e958:	e010      	b.n	800e97c <Tim_MainFunction+0x10c>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerFive = localStateTimerFive;
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	b2da      	uxtb	r2, r3
 800e95e:	4b5b      	ldr	r3, [pc, #364]	; (800eacc <Tim_MainFunction+0x25c>)
 800e960:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim5);
 800e962:	4859      	ldr	r0, [pc, #356]	; (800eac8 <Tim_MainFunction+0x258>)
 800e964:	f7ff ff30 	bl	800e7c8 <HAL_TIM_ErrorCallback>
			break;
 800e968:	e008      	b.n	800e97c <Tim_MainFunction+0x10c>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerFive = localStateTimerFive;
 800e96a:	683b      	ldr	r3, [r7, #0]
 800e96c:	b2da      	uxtb	r2, r3
 800e96e:	4b57      	ldr	r3, [pc, #348]	; (800eacc <Tim_MainFunction+0x25c>)
 800e970:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim5);
 800e972:	4855      	ldr	r0, [pc, #340]	; (800eac8 <Tim_MainFunction+0x258>)
 800e974:	f7ff ff28 	bl	800e7c8 <HAL_TIM_ErrorCallback>
			break;
 800e978:	e000      	b.n	800e97c <Tim_MainFunction+0x10c>
		default:
			break;
 800e97a:	bf00      	nop
	}
	switch(localStateTimerTwo)
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	2b04      	cmp	r3, #4
 800e980:	d82e      	bhi.n	800e9e0 <Tim_MainFunction+0x170>
 800e982:	a201      	add	r2, pc, #4	; (adr r2, 800e988 <Tim_MainFunction+0x118>)
 800e984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e988:	0800e99d 	.word	0x0800e99d
 800e98c:	0800e9ad 	.word	0x0800e9ad
 800e990:	0800e9b7 	.word	0x0800e9b7
 800e994:	0800e9c1 	.word	0x0800e9c1
 800e998:	0800e9d1 	.word	0x0800e9d1
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	b2da      	uxtb	r2, r3
 800e9a0:	4b4f      	ldr	r3, [pc, #316]	; (800eae0 <Tim_MainFunction+0x270>)
 800e9a2:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_TWO);
 800e9a4:	2002      	movs	r0, #2
 800e9a6:	f7ff fcbd 	bl	800e324 <Tim_Init>
			break;
 800e9aa:	e01a      	b.n	800e9e2 <Tim_MainFunction+0x172>
		case HAL_TIM_STATE_READY:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	b2da      	uxtb	r2, r3
 800e9b0:	4b4b      	ldr	r3, [pc, #300]	; (800eae0 <Tim_MainFunction+0x270>)
 800e9b2:	701a      	strb	r2, [r3, #0]
			break;
 800e9b4:	e015      	b.n	800e9e2 <Tim_MainFunction+0x172>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	b2da      	uxtb	r2, r3
 800e9ba:	4b49      	ldr	r3, [pc, #292]	; (800eae0 <Tim_MainFunction+0x270>)
 800e9bc:	701a      	strb	r2, [r3, #0]
			break;
 800e9be:	e010      	b.n	800e9e2 <Tim_MainFunction+0x172>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	b2da      	uxtb	r2, r3
 800e9c4:	4b46      	ldr	r3, [pc, #280]	; (800eae0 <Tim_MainFunction+0x270>)
 800e9c6:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim2);
 800e9c8:	483c      	ldr	r0, [pc, #240]	; (800eabc <Tim_MainFunction+0x24c>)
 800e9ca:	f7ff fefd 	bl	800e7c8 <HAL_TIM_ErrorCallback>
			break;
 800e9ce:	e008      	b.n	800e9e2 <Tim_MainFunction+0x172>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	b2da      	uxtb	r2, r3
 800e9d4:	4b42      	ldr	r3, [pc, #264]	; (800eae0 <Tim_MainFunction+0x270>)
 800e9d6:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim2);
 800e9d8:	4838      	ldr	r0, [pc, #224]	; (800eabc <Tim_MainFunction+0x24c>)
 800e9da:	f7ff fef5 	bl	800e7c8 <HAL_TIM_ErrorCallback>
			break;
 800e9de:	e000      	b.n	800e9e2 <Tim_MainFunction+0x172>
		default:
			break;
 800e9e0:	bf00      	nop
	}
	switch(localStateTimerThree)
 800e9e2:	68bb      	ldr	r3, [r7, #8]
 800e9e4:	2b04      	cmp	r3, #4
 800e9e6:	d82f      	bhi.n	800ea48 <Tim_MainFunction+0x1d8>
 800e9e8:	a201      	add	r2, pc, #4	; (adr r2, 800e9f0 <Tim_MainFunction+0x180>)
 800e9ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9ee:	bf00      	nop
 800e9f0:	0800ea05 	.word	0x0800ea05
 800e9f4:	0800ea15 	.word	0x0800ea15
 800e9f8:	0800ea1f 	.word	0x0800ea1f
 800e9fc:	0800ea29 	.word	0x0800ea29
 800ea00:	0800ea39 	.word	0x0800ea39
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerThree = localStateTimerThree;
 800ea04:	68bb      	ldr	r3, [r7, #8]
 800ea06:	b2da      	uxtb	r2, r3
 800ea08:	4b36      	ldr	r3, [pc, #216]	; (800eae4 <Tim_MainFunction+0x274>)
 800ea0a:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_THREE);
 800ea0c:	2003      	movs	r0, #3
 800ea0e:	f7ff fc89 	bl	800e324 <Tim_Init>
			break;
 800ea12:	e01a      	b.n	800ea4a <Tim_MainFunction+0x1da>
		case HAL_TIM_STATE_READY:
			TimH_BswState_TimerThree = localStateTimerThree;
 800ea14:	68bb      	ldr	r3, [r7, #8]
 800ea16:	b2da      	uxtb	r2, r3
 800ea18:	4b32      	ldr	r3, [pc, #200]	; (800eae4 <Tim_MainFunction+0x274>)
 800ea1a:	701a      	strb	r2, [r3, #0]
			break;
 800ea1c:	e015      	b.n	800ea4a <Tim_MainFunction+0x1da>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerThree = localStateTimerThree;
 800ea1e:	68bb      	ldr	r3, [r7, #8]
 800ea20:	b2da      	uxtb	r2, r3
 800ea22:	4b30      	ldr	r3, [pc, #192]	; (800eae4 <Tim_MainFunction+0x274>)
 800ea24:	701a      	strb	r2, [r3, #0]
			break;
 800ea26:	e010      	b.n	800ea4a <Tim_MainFunction+0x1da>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerThree = localStateTimerThree;
 800ea28:	68bb      	ldr	r3, [r7, #8]
 800ea2a:	b2da      	uxtb	r2, r3
 800ea2c:	4b2d      	ldr	r3, [pc, #180]	; (800eae4 <Tim_MainFunction+0x274>)
 800ea2e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim3);
 800ea30:	4823      	ldr	r0, [pc, #140]	; (800eac0 <Tim_MainFunction+0x250>)
 800ea32:	f7ff fec9 	bl	800e7c8 <HAL_TIM_ErrorCallback>
			break;
 800ea36:	e008      	b.n	800ea4a <Tim_MainFunction+0x1da>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerThree = localStateTimerThree;
 800ea38:	68bb      	ldr	r3, [r7, #8]
 800ea3a:	b2da      	uxtb	r2, r3
 800ea3c:	4b29      	ldr	r3, [pc, #164]	; (800eae4 <Tim_MainFunction+0x274>)
 800ea3e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim3);
 800ea40:	481f      	ldr	r0, [pc, #124]	; (800eac0 <Tim_MainFunction+0x250>)
 800ea42:	f7ff fec1 	bl	800e7c8 <HAL_TIM_ErrorCallback>
			break;
 800ea46:	e000      	b.n	800ea4a <Tim_MainFunction+0x1da>
		default:
			break;
 800ea48:	bf00      	nop
	}
	switch(localStateTimerFour)
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	2b04      	cmp	r3, #4
 800ea4e:	d82f      	bhi.n	800eab0 <Tim_MainFunction+0x240>
 800ea50:	a201      	add	r2, pc, #4	; (adr r2, 800ea58 <Tim_MainFunction+0x1e8>)
 800ea52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea56:	bf00      	nop
 800ea58:	0800ea6d 	.word	0x0800ea6d
 800ea5c:	0800ea7d 	.word	0x0800ea7d
 800ea60:	0800ea87 	.word	0x0800ea87
 800ea64:	0800ea91 	.word	0x0800ea91
 800ea68:	0800eaa1 	.word	0x0800eaa1
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerFour = localStateTimerFour;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	b2da      	uxtb	r2, r3
 800ea70:	4b1d      	ldr	r3, [pc, #116]	; (800eae8 <Tim_MainFunction+0x278>)
 800ea72:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_FOUR);
 800ea74:	2004      	movs	r0, #4
 800ea76:	f7ff fc55 	bl	800e324 <Tim_Init>
			break;
 800ea7a:	e01a      	b.n	800eab2 <Tim_MainFunction+0x242>
		case HAL_TIM_STATE_READY:
			TimH_BswState_TimerFour = localStateTimerFour;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	b2da      	uxtb	r2, r3
 800ea80:	4b19      	ldr	r3, [pc, #100]	; (800eae8 <Tim_MainFunction+0x278>)
 800ea82:	701a      	strb	r2, [r3, #0]
			break;
 800ea84:	e015      	b.n	800eab2 <Tim_MainFunction+0x242>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerFour = localStateTimerFour;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	b2da      	uxtb	r2, r3
 800ea8a:	4b17      	ldr	r3, [pc, #92]	; (800eae8 <Tim_MainFunction+0x278>)
 800ea8c:	701a      	strb	r2, [r3, #0]
			break;
 800ea8e:	e010      	b.n	800eab2 <Tim_MainFunction+0x242>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerFour = localStateTimerFour;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	b2da      	uxtb	r2, r3
 800ea94:	4b14      	ldr	r3, [pc, #80]	; (800eae8 <Tim_MainFunction+0x278>)
 800ea96:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim4);
 800ea98:	480a      	ldr	r0, [pc, #40]	; (800eac4 <Tim_MainFunction+0x254>)
 800ea9a:	f7ff fe95 	bl	800e7c8 <HAL_TIM_ErrorCallback>
			break;
 800ea9e:	e008      	b.n	800eab2 <Tim_MainFunction+0x242>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerFour = localStateTimerFour;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	b2da      	uxtb	r2, r3
 800eaa4:	4b10      	ldr	r3, [pc, #64]	; (800eae8 <Tim_MainFunction+0x278>)
 800eaa6:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim4);
 800eaa8:	4806      	ldr	r0, [pc, #24]	; (800eac4 <Tim_MainFunction+0x254>)
 800eaaa:	f7ff fe8d 	bl	800e7c8 <HAL_TIM_ErrorCallback>
			break;
 800eaae:	e000      	b.n	800eab2 <Tim_MainFunction+0x242>
		default:
			break;
 800eab0:	bf00      	nop
	}
}
 800eab2:	bf00      	nop
 800eab4:	3710      	adds	r7, #16
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}
 800eaba:	bf00      	nop
 800eabc:	20000544 	.word	0x20000544
 800eac0:	200005f8 	.word	0x200005f8
 800eac4:	200006ac 	.word	0x200006ac
 800eac8:	20000760 	.word	0x20000760
 800eacc:	2000092b 	.word	0x2000092b
 800ead0:	200002dc 	.word	0x200002dc
 800ead4:	10624dd3 	.word	0x10624dd3
 800ead8:	40020400 	.word	0x40020400
 800eadc:	40020000 	.word	0x40020000
 800eae0:	20000928 	.word	0x20000928
 800eae4:	20000929 	.word	0x20000929
 800eae8:	2000092a 	.word	0x2000092a

0800eaec <HAL_TIM_PeriodElapsedCallback>:
* Function: HAL_TIM_PeriodElapsedCallback										   *
* Description: Peripheral period elapsed callback to process system state          *
* 			   when timer expires.									               *
************************************************************************************/
VOID HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b082      	sub	sp, #8
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
	/* Timer 1 is used for the time base source of FreeRTOS. Upon expiration increase the clock counter of the system. */
	if (htim->Instance == TIM1)
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	4a04      	ldr	r2, [pc, #16]	; (800eb0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800eafa:	4293      	cmp	r3, r2
 800eafc:	d101      	bne.n	800eb02 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 800eafe:	f7f7 fba1 	bl	8006244 <HAL_IncTick>
	}
	else
	{
		/* do nothing */
	}
}
 800eb02:	bf00      	nop
 800eb04:	3708      	adds	r7, #8
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}
 800eb0a:	bf00      	nop
 800eb0c:	40010000 	.word	0x40010000

0800eb10 <__NVIC_SetPriority>:
{
 800eb10:	b480      	push	{r7}
 800eb12:	b083      	sub	sp, #12
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	4603      	mov	r3, r0
 800eb18:	6039      	str	r1, [r7, #0]
 800eb1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800eb1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	db0a      	blt.n	800eb3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	b2da      	uxtb	r2, r3
 800eb28:	490c      	ldr	r1, [pc, #48]	; (800eb5c <__NVIC_SetPriority+0x4c>)
 800eb2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eb2e:	0112      	lsls	r2, r2, #4
 800eb30:	b2d2      	uxtb	r2, r2
 800eb32:	440b      	add	r3, r1
 800eb34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800eb38:	e00a      	b.n	800eb50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	b2da      	uxtb	r2, r3
 800eb3e:	4908      	ldr	r1, [pc, #32]	; (800eb60 <__NVIC_SetPriority+0x50>)
 800eb40:	79fb      	ldrb	r3, [r7, #7]
 800eb42:	f003 030f 	and.w	r3, r3, #15
 800eb46:	3b04      	subs	r3, #4
 800eb48:	0112      	lsls	r2, r2, #4
 800eb4a:	b2d2      	uxtb	r2, r2
 800eb4c:	440b      	add	r3, r1
 800eb4e:	761a      	strb	r2, [r3, #24]
}
 800eb50:	bf00      	nop
 800eb52:	370c      	adds	r7, #12
 800eb54:	46bd      	mov	sp, r7
 800eb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5a:	4770      	bx	lr
 800eb5c:	e000e100 	.word	0xe000e100
 800eb60:	e000ed00 	.word	0xe000ed00

0800eb64 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800eb64:	b580      	push	{r7, lr}
 800eb66:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800eb68:	4b05      	ldr	r3, [pc, #20]	; (800eb80 <SysTick_Handler+0x1c>)
 800eb6a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800eb6c:	f002 fae6 	bl	801113c <xTaskGetSchedulerState>
 800eb70:	4603      	mov	r3, r0
 800eb72:	2b01      	cmp	r3, #1
 800eb74:	d001      	beq.n	800eb7a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800eb76:	f000 fd07 	bl	800f588 <xPortSysTickHandler>
  }
}
 800eb7a:	bf00      	nop
 800eb7c:	bd80      	pop	{r7, pc}
 800eb7e:	bf00      	nop
 800eb80:	e000e010 	.word	0xe000e010

0800eb84 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800eb84:	b580      	push	{r7, lr}
 800eb86:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800eb88:	2100      	movs	r1, #0
 800eb8a:	f06f 0004 	mvn.w	r0, #4
 800eb8e:	f7ff ffbf 	bl	800eb10 <__NVIC_SetPriority>
#endif
}
 800eb92:	bf00      	nop
 800eb94:	bd80      	pop	{r7, pc}
	...

0800eb98 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800eb98:	b480      	push	{r7}
 800eb9a:	b083      	sub	sp, #12
 800eb9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb9e:	f3ef 8305 	mrs	r3, IPSR
 800eba2:	603b      	str	r3, [r7, #0]
  return(result);
 800eba4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d003      	beq.n	800ebb2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ebaa:	f06f 0305 	mvn.w	r3, #5
 800ebae:	607b      	str	r3, [r7, #4]
 800ebb0:	e00c      	b.n	800ebcc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ebb2:	4b0a      	ldr	r3, [pc, #40]	; (800ebdc <osKernelInitialize+0x44>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d105      	bne.n	800ebc6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ebba:	4b08      	ldr	r3, [pc, #32]	; (800ebdc <osKernelInitialize+0x44>)
 800ebbc:	2201      	movs	r2, #1
 800ebbe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	607b      	str	r3, [r7, #4]
 800ebc4:	e002      	b.n	800ebcc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ebc6:	f04f 33ff 	mov.w	r3, #4294967295
 800ebca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ebcc:	687b      	ldr	r3, [r7, #4]
}
 800ebce:	4618      	mov	r0, r3
 800ebd0:	370c      	adds	r7, #12
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd8:	4770      	bx	lr
 800ebda:	bf00      	nop
 800ebdc:	20000a10 	.word	0x20000a10

0800ebe0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b082      	sub	sp, #8
 800ebe4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ebe6:	f3ef 8305 	mrs	r3, IPSR
 800ebea:	603b      	str	r3, [r7, #0]
  return(result);
 800ebec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d003      	beq.n	800ebfa <osKernelStart+0x1a>
    stat = osErrorISR;
 800ebf2:	f06f 0305 	mvn.w	r3, #5
 800ebf6:	607b      	str	r3, [r7, #4]
 800ebf8:	e010      	b.n	800ec1c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ebfa:	4b0b      	ldr	r3, [pc, #44]	; (800ec28 <osKernelStart+0x48>)
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	2b01      	cmp	r3, #1
 800ec00:	d109      	bne.n	800ec16 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ec02:	f7ff ffbf 	bl	800eb84 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ec06:	4b08      	ldr	r3, [pc, #32]	; (800ec28 <osKernelStart+0x48>)
 800ec08:	2202      	movs	r2, #2
 800ec0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ec0c:	f001 fdfc 	bl	8010808 <vTaskStartScheduler>
      stat = osOK;
 800ec10:	2300      	movs	r3, #0
 800ec12:	607b      	str	r3, [r7, #4]
 800ec14:	e002      	b.n	800ec1c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ec16:	f04f 33ff 	mov.w	r3, #4294967295
 800ec1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ec1c:	687b      	ldr	r3, [r7, #4]
}
 800ec1e:	4618      	mov	r0, r3
 800ec20:	3708      	adds	r7, #8
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd80      	pop	{r7, pc}
 800ec26:	bf00      	nop
 800ec28:	20000a10 	.word	0x20000a10

0800ec2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b08e      	sub	sp, #56	; 0x38
 800ec30:	af04      	add	r7, sp, #16
 800ec32:	60f8      	str	r0, [r7, #12]
 800ec34:	60b9      	str	r1, [r7, #8]
 800ec36:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ec38:	2300      	movs	r3, #0
 800ec3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec3c:	f3ef 8305 	mrs	r3, IPSR
 800ec40:	617b      	str	r3, [r7, #20]
  return(result);
 800ec42:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d17f      	bne.n	800ed48 <osThreadNew+0x11c>
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d07c      	beq.n	800ed48 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800ec4e:	2380      	movs	r3, #128	; 0x80
 800ec50:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ec52:	2318      	movs	r3, #24
 800ec54:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ec56:	2300      	movs	r3, #0
 800ec58:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ec5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ec5e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d046      	beq.n	800ecf4 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d002      	beq.n	800ec74 <osThreadNew+0x48>
        name = attr->name;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	699b      	ldr	r3, [r3, #24]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d002      	beq.n	800ec82 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	699b      	ldr	r3, [r3, #24]
 800ec80:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ec82:	69fb      	ldr	r3, [r7, #28]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d008      	beq.n	800ec9a <osThreadNew+0x6e>
 800ec88:	69fb      	ldr	r3, [r7, #28]
 800ec8a:	2b38      	cmp	r3, #56	; 0x38
 800ec8c:	d805      	bhi.n	800ec9a <osThreadNew+0x6e>
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	685b      	ldr	r3, [r3, #4]
 800ec92:	f003 0301 	and.w	r3, r3, #1
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d001      	beq.n	800ec9e <osThreadNew+0x72>
        return (NULL);
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	e055      	b.n	800ed4a <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	695b      	ldr	r3, [r3, #20]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d003      	beq.n	800ecae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	695b      	ldr	r3, [r3, #20]
 800ecaa:	089b      	lsrs	r3, r3, #2
 800ecac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	689b      	ldr	r3, [r3, #8]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d00f      	beq.n	800ecd6 <osThreadNew+0xaa>
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	68db      	ldr	r3, [r3, #12]
 800ecba:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 800ecbe:	d30a      	bcc.n	800ecd6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d006      	beq.n	800ecd6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	695b      	ldr	r3, [r3, #20]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d002      	beq.n	800ecd6 <osThreadNew+0xaa>
        mem = 1;
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	61bb      	str	r3, [r7, #24]
 800ecd4:	e010      	b.n	800ecf8 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	689b      	ldr	r3, [r3, #8]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d10c      	bne.n	800ecf8 <osThreadNew+0xcc>
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	68db      	ldr	r3, [r3, #12]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d108      	bne.n	800ecf8 <osThreadNew+0xcc>
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	691b      	ldr	r3, [r3, #16]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d104      	bne.n	800ecf8 <osThreadNew+0xcc>
          mem = 0;
 800ecee:	2300      	movs	r3, #0
 800ecf0:	61bb      	str	r3, [r7, #24]
 800ecf2:	e001      	b.n	800ecf8 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ecf8:	69bb      	ldr	r3, [r7, #24]
 800ecfa:	2b01      	cmp	r3, #1
 800ecfc:	d110      	bne.n	800ed20 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ed02:	687a      	ldr	r2, [r7, #4]
 800ed04:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ed06:	9202      	str	r2, [sp, #8]
 800ed08:	9301      	str	r3, [sp, #4]
 800ed0a:	69fb      	ldr	r3, [r7, #28]
 800ed0c:	9300      	str	r3, [sp, #0]
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	6a3a      	ldr	r2, [r7, #32]
 800ed12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ed14:	68f8      	ldr	r0, [r7, #12]
 800ed16:	f001 f9b3 	bl	8010080 <xTaskCreateStatic>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	613b      	str	r3, [r7, #16]
 800ed1e:	e013      	b.n	800ed48 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800ed20:	69bb      	ldr	r3, [r7, #24]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d110      	bne.n	800ed48 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ed26:	6a3b      	ldr	r3, [r7, #32]
 800ed28:	b29a      	uxth	r2, r3
 800ed2a:	f107 0310 	add.w	r3, r7, #16
 800ed2e:	9301      	str	r3, [sp, #4]
 800ed30:	69fb      	ldr	r3, [r7, #28]
 800ed32:	9300      	str	r3, [sp, #0]
 800ed34:	68bb      	ldr	r3, [r7, #8]
 800ed36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ed38:	68f8      	ldr	r0, [r7, #12]
 800ed3a:	f001 fa00 	bl	801013e <xTaskCreate>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	2b01      	cmp	r3, #1
 800ed42:	d001      	beq.n	800ed48 <osThreadNew+0x11c>
            hTask = NULL;
 800ed44:	2300      	movs	r3, #0
 800ed46:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ed48:	693b      	ldr	r3, [r7, #16]
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	3728      	adds	r7, #40	; 0x28
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}

0800ed52 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800ed52:	b580      	push	{r7, lr}
 800ed54:	b084      	sub	sp, #16
 800ed56:	af00      	add	r7, sp, #0
 800ed58:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f002 feeb 	bl	8011b36 <pvTimerGetTimerID>
 800ed60:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d005      	beq.n	800ed74 <TimerCallback+0x22>
    callb->func (callb->arg);
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	68fa      	ldr	r2, [r7, #12]
 800ed6e:	6852      	ldr	r2, [r2, #4]
 800ed70:	4610      	mov	r0, r2
 800ed72:	4798      	blx	r3
  }
}
 800ed74:	bf00      	nop
 800ed76:	3710      	adds	r7, #16
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}

0800ed7c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b08c      	sub	sp, #48	; 0x30
 800ed80:	af02      	add	r7, sp, #8
 800ed82:	60f8      	str	r0, [r7, #12]
 800ed84:	607a      	str	r2, [r7, #4]
 800ed86:	603b      	str	r3, [r7, #0]
 800ed88:	460b      	mov	r3, r1
 800ed8a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed90:	f3ef 8305 	mrs	r3, IPSR
 800ed94:	613b      	str	r3, [r7, #16]
  return(result);
 800ed96:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d163      	bne.n	800ee64 <osTimerNew+0xe8>
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d060      	beq.n	800ee64 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800eda2:	2008      	movs	r0, #8
 800eda4:	f000 f91c 	bl	800efe0 <pvPortMalloc>
 800eda8:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800edaa:	697b      	ldr	r3, [r7, #20]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d059      	beq.n	800ee64 <osTimerNew+0xe8>
      callb->func = func;
 800edb0:	697b      	ldr	r3, [r7, #20]
 800edb2:	68fa      	ldr	r2, [r7, #12]
 800edb4:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800edb6:	697b      	ldr	r3, [r7, #20]
 800edb8:	687a      	ldr	r2, [r7, #4]
 800edba:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800edbc:	7afb      	ldrb	r3, [r7, #11]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d102      	bne.n	800edc8 <osTimerNew+0x4c>
        reload = pdFALSE;
 800edc2:	2300      	movs	r3, #0
 800edc4:	61fb      	str	r3, [r7, #28]
 800edc6:	e001      	b.n	800edcc <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800edc8:	2301      	movs	r3, #1
 800edca:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800edcc:	f04f 33ff 	mov.w	r3, #4294967295
 800edd0:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800edd2:	2300      	movs	r3, #0
 800edd4:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d01c      	beq.n	800ee16 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d002      	beq.n	800edea <osTimerNew+0x6e>
          name = attr->name;
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800edea:	683b      	ldr	r3, [r7, #0]
 800edec:	689b      	ldr	r3, [r3, #8]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d006      	beq.n	800ee00 <osTimerNew+0x84>
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	68db      	ldr	r3, [r3, #12]
 800edf6:	2b2b      	cmp	r3, #43	; 0x2b
 800edf8:	d902      	bls.n	800ee00 <osTimerNew+0x84>
          mem = 1;
 800edfa:	2301      	movs	r3, #1
 800edfc:	61bb      	str	r3, [r7, #24]
 800edfe:	e00c      	b.n	800ee1a <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	689b      	ldr	r3, [r3, #8]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d108      	bne.n	800ee1a <osTimerNew+0x9e>
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	68db      	ldr	r3, [r3, #12]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d104      	bne.n	800ee1a <osTimerNew+0x9e>
            mem = 0;
 800ee10:	2300      	movs	r3, #0
 800ee12:	61bb      	str	r3, [r7, #24]
 800ee14:	e001      	b.n	800ee1a <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800ee16:	2300      	movs	r3, #0
 800ee18:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800ee1a:	69bb      	ldr	r3, [r7, #24]
 800ee1c:	2b01      	cmp	r3, #1
 800ee1e:	d10c      	bne.n	800ee3a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	689b      	ldr	r3, [r3, #8]
 800ee24:	9301      	str	r3, [sp, #4]
 800ee26:	4b12      	ldr	r3, [pc, #72]	; (800ee70 <osTimerNew+0xf4>)
 800ee28:	9300      	str	r3, [sp, #0]
 800ee2a:	697b      	ldr	r3, [r7, #20]
 800ee2c:	69fa      	ldr	r2, [r7, #28]
 800ee2e:	2101      	movs	r1, #1
 800ee30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee32:	f002 fad8 	bl	80113e6 <xTimerCreateStatic>
 800ee36:	6238      	str	r0, [r7, #32]
 800ee38:	e00b      	b.n	800ee52 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800ee3a:	69bb      	ldr	r3, [r7, #24]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d108      	bne.n	800ee52 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800ee40:	4b0b      	ldr	r3, [pc, #44]	; (800ee70 <osTimerNew+0xf4>)
 800ee42:	9300      	str	r3, [sp, #0]
 800ee44:	697b      	ldr	r3, [r7, #20]
 800ee46:	69fa      	ldr	r2, [r7, #28]
 800ee48:	2101      	movs	r1, #1
 800ee4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee4c:	f002 faaa 	bl	80113a4 <xTimerCreate>
 800ee50:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800ee52:	6a3b      	ldr	r3, [r7, #32]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d105      	bne.n	800ee64 <osTimerNew+0xe8>
 800ee58:	697b      	ldr	r3, [r7, #20]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d002      	beq.n	800ee64 <osTimerNew+0xe8>
        vPortFree (callb);
 800ee5e:	6978      	ldr	r0, [r7, #20]
 800ee60:	f000 f908 	bl	800f074 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800ee64:	6a3b      	ldr	r3, [r7, #32]
}
 800ee66:	4618      	mov	r0, r3
 800ee68:	3728      	adds	r7, #40	; 0x28
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}
 800ee6e:	bf00      	nop
 800ee70:	0800ed53 	.word	0x0800ed53

0800ee74 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b088      	sub	sp, #32
 800ee78:	af02      	add	r7, sp, #8
 800ee7a:	6078      	str	r0, [r7, #4]
 800ee7c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee82:	f3ef 8305 	mrs	r3, IPSR
 800ee86:	60fb      	str	r3, [r7, #12]
  return(result);
 800ee88:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d003      	beq.n	800ee96 <osTimerStart+0x22>
    stat = osErrorISR;
 800ee8e:	f06f 0305 	mvn.w	r3, #5
 800ee92:	617b      	str	r3, [r7, #20]
 800ee94:	e017      	b.n	800eec6 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800ee96:	693b      	ldr	r3, [r7, #16]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d103      	bne.n	800eea4 <osTimerStart+0x30>
    stat = osErrorParameter;
 800ee9c:	f06f 0303 	mvn.w	r3, #3
 800eea0:	617b      	str	r3, [r7, #20]
 800eea2:	e010      	b.n	800eec6 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800eea4:	2300      	movs	r3, #0
 800eea6:	9300      	str	r3, [sp, #0]
 800eea8:	2300      	movs	r3, #0
 800eeaa:	683a      	ldr	r2, [r7, #0]
 800eeac:	2104      	movs	r1, #4
 800eeae:	6938      	ldr	r0, [r7, #16]
 800eeb0:	f002 fb12 	bl	80114d8 <xTimerGenericCommand>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	2b01      	cmp	r3, #1
 800eeb8:	d102      	bne.n	800eec0 <osTimerStart+0x4c>
      stat = osOK;
 800eeba:	2300      	movs	r3, #0
 800eebc:	617b      	str	r3, [r7, #20]
 800eebe:	e002      	b.n	800eec6 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800eec0:	f06f 0302 	mvn.w	r3, #2
 800eec4:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800eec6:	697b      	ldr	r3, [r7, #20]
}
 800eec8:	4618      	mov	r0, r3
 800eeca:	3718      	adds	r7, #24
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}

0800eed0 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b088      	sub	sp, #32
 800eed4:	af02      	add	r7, sp, #8
 800eed6:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eedc:	f3ef 8305 	mrs	r3, IPSR
 800eee0:	60fb      	str	r3, [r7, #12]
  return(result);
 800eee2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d003      	beq.n	800eef0 <osTimerStop+0x20>
    stat = osErrorISR;
 800eee8:	f06f 0305 	mvn.w	r3, #5
 800eeec:	617b      	str	r3, [r7, #20]
 800eeee:	e021      	b.n	800ef34 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 800eef0:	693b      	ldr	r3, [r7, #16]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d103      	bne.n	800eefe <osTimerStop+0x2e>
    stat = osErrorParameter;
 800eef6:	f06f 0303 	mvn.w	r3, #3
 800eefa:	617b      	str	r3, [r7, #20]
 800eefc:	e01a      	b.n	800ef34 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800eefe:	6938      	ldr	r0, [r7, #16]
 800ef00:	f002 fdf0 	bl	8011ae4 <xTimerIsTimerActive>
 800ef04:	4603      	mov	r3, r0
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d103      	bne.n	800ef12 <osTimerStop+0x42>
      stat = osErrorResource;
 800ef0a:	f06f 0302 	mvn.w	r3, #2
 800ef0e:	617b      	str	r3, [r7, #20]
 800ef10:	e010      	b.n	800ef34 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800ef12:	2300      	movs	r3, #0
 800ef14:	9300      	str	r3, [sp, #0]
 800ef16:	2300      	movs	r3, #0
 800ef18:	2200      	movs	r2, #0
 800ef1a:	2103      	movs	r1, #3
 800ef1c:	6938      	ldr	r0, [r7, #16]
 800ef1e:	f002 fadb 	bl	80114d8 <xTimerGenericCommand>
 800ef22:	4603      	mov	r3, r0
 800ef24:	2b01      	cmp	r3, #1
 800ef26:	d102      	bne.n	800ef2e <osTimerStop+0x5e>
        stat = osOK;
 800ef28:	2300      	movs	r3, #0
 800ef2a:	617b      	str	r3, [r7, #20]
 800ef2c:	e002      	b.n	800ef34 <osTimerStop+0x64>
      } else {
        stat = osError;
 800ef2e:	f04f 33ff 	mov.w	r3, #4294967295
 800ef32:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800ef34:	697b      	ldr	r3, [r7, #20]
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3718      	adds	r7, #24
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}

0800ef3e <osTimerIsRunning>:

uint32_t osTimerIsRunning (osTimerId_t timer_id) {
 800ef3e:	b580      	push	{r7, lr}
 800ef40:	b086      	sub	sp, #24
 800ef42:	af00      	add	r7, sp, #0
 800ef44:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef4a:	f3ef 8305 	mrs	r3, IPSR
 800ef4e:	60fb      	str	r3, [r7, #12]
  return(result);
 800ef50:	68fb      	ldr	r3, [r7, #12]
  uint32_t running;

  if (IS_IRQ() || (hTimer == NULL)) {
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d102      	bne.n	800ef5c <osTimerIsRunning+0x1e>
 800ef56:	693b      	ldr	r3, [r7, #16]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d102      	bne.n	800ef62 <osTimerIsRunning+0x24>
    running = 0U;
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	617b      	str	r3, [r7, #20]
 800ef60:	e004      	b.n	800ef6c <osTimerIsRunning+0x2e>
  } else {
    running = (uint32_t)xTimerIsTimerActive (hTimer);
 800ef62:	6938      	ldr	r0, [r7, #16]
 800ef64:	f002 fdbe 	bl	8011ae4 <xTimerIsTimerActive>
 800ef68:	4603      	mov	r3, r0
 800ef6a:	617b      	str	r3, [r7, #20]
  }

  return (running);
 800ef6c:	697b      	ldr	r3, [r7, #20]
}
 800ef6e:	4618      	mov	r0, r3
 800ef70:	3718      	adds	r7, #24
 800ef72:	46bd      	mov	sp, r7
 800ef74:	bd80      	pop	{r7, pc}
	...

0800ef78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ef78:	b480      	push	{r7}
 800ef7a:	b085      	sub	sp, #20
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	60f8      	str	r0, [r7, #12]
 800ef80:	60b9      	str	r1, [r7, #8]
 800ef82:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	4a07      	ldr	r2, [pc, #28]	; (800efa4 <vApplicationGetIdleTaskMemory+0x2c>)
 800ef88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ef8a:	68bb      	ldr	r3, [r7, #8]
 800ef8c:	4a06      	ldr	r2, [pc, #24]	; (800efa8 <vApplicationGetIdleTaskMemory+0x30>)
 800ef8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	2280      	movs	r2, #128	; 0x80
 800ef94:	601a      	str	r2, [r3, #0]
}
 800ef96:	bf00      	nop
 800ef98:	3714      	adds	r7, #20
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa0:	4770      	bx	lr
 800efa2:	bf00      	nop
 800efa4:	20000a14 	.word	0x20000a14
 800efa8:	20000bcc 	.word	0x20000bcc

0800efac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800efac:	b480      	push	{r7}
 800efae:	b085      	sub	sp, #20
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	60f8      	str	r0, [r7, #12]
 800efb4:	60b9      	str	r1, [r7, #8]
 800efb6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	4a07      	ldr	r2, [pc, #28]	; (800efd8 <vApplicationGetTimerTaskMemory+0x2c>)
 800efbc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800efbe:	68bb      	ldr	r3, [r7, #8]
 800efc0:	4a06      	ldr	r2, [pc, #24]	; (800efdc <vApplicationGetTimerTaskMemory+0x30>)
 800efc2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800efca:	601a      	str	r2, [r3, #0]
}
 800efcc:	bf00      	nop
 800efce:	3714      	adds	r7, #20
 800efd0:	46bd      	mov	sp, r7
 800efd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd6:	4770      	bx	lr
 800efd8:	20000dcc 	.word	0x20000dcc
 800efdc:	20000f84 	.word	0x20000f84

0800efe0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b084      	sub	sp, #16
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 800efe8:	2300      	movs	r3, #0
 800efea:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	f003 0307 	and.w	r3, r3, #7
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d004      	beq.n	800f000 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f023 0307 	bic.w	r3, r3, #7
 800effc:	3308      	adds	r3, #8
 800effe:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 800f000:	f001 fc72 	bl	80108e8 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 800f004:	4b18      	ldr	r3, [pc, #96]	; (800f068 <pvPortMalloc+0x88>)
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d105      	bne.n	800f018 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800f00c:	4b17      	ldr	r3, [pc, #92]	; (800f06c <pvPortMalloc+0x8c>)
 800f00e:	f023 0307 	bic.w	r3, r3, #7
 800f012:	461a      	mov	r2, r3
 800f014:	4b14      	ldr	r3, [pc, #80]	; (800f068 <pvPortMalloc+0x88>)
 800f016:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800f018:	4b15      	ldr	r3, [pc, #84]	; (800f070 <pvPortMalloc+0x90>)
 800f01a:	681a      	ldr	r2, [r3, #0]
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	4413      	add	r3, r2
 800f020:	f644 6217 	movw	r2, #19991	; 0x4e17
 800f024:	4293      	cmp	r3, r2
 800f026:	d813      	bhi.n	800f050 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 800f028:	4b11      	ldr	r3, [pc, #68]	; (800f070 <pvPortMalloc+0x90>)
 800f02a:	681a      	ldr	r2, [r3, #0]
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	441a      	add	r2, r3
 800f030:	4b0f      	ldr	r3, [pc, #60]	; (800f070 <pvPortMalloc+0x90>)
 800f032:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800f034:	429a      	cmp	r2, r3
 800f036:	d90b      	bls.n	800f050 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 800f038:	4b0b      	ldr	r3, [pc, #44]	; (800f068 <pvPortMalloc+0x88>)
 800f03a:	681a      	ldr	r2, [r3, #0]
 800f03c:	4b0c      	ldr	r3, [pc, #48]	; (800f070 <pvPortMalloc+0x90>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	4413      	add	r3, r2
 800f042:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 800f044:	4b0a      	ldr	r3, [pc, #40]	; (800f070 <pvPortMalloc+0x90>)
 800f046:	681a      	ldr	r2, [r3, #0]
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	4413      	add	r3, r2
 800f04c:	4a08      	ldr	r2, [pc, #32]	; (800f070 <pvPortMalloc+0x90>)
 800f04e:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f050:	f001 fc58 	bl	8010904 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d101      	bne.n	800f05e <pvPortMalloc+0x7e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800f05a:	f7f5 fc47 	bl	80048ec <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 800f05e:	68fb      	ldr	r3, [r7, #12]
}
 800f060:	4618      	mov	r0, r3
 800f062:	3710      	adds	r7, #16
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}
 800f068:	20007da8 	.word	0x20007da8
 800f06c:	20002f8c 	.word	0x20002f8c
 800f070:	20007da4 	.word	0x20007da4

0800f074 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f074:	b480      	push	{r7}
 800f076:	b085      	sub	sp, #20
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d00a      	beq.n	800f098 <vPortFree+0x24>
	__asm volatile
 800f082:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f086:	f383 8811 	msr	BASEPRI, r3
 800f08a:	f3bf 8f6f 	isb	sy
 800f08e:	f3bf 8f4f 	dsb	sy
 800f092:	60fb      	str	r3, [r7, #12]
}
 800f094:	bf00      	nop
 800f096:	e7fe      	b.n	800f096 <vPortFree+0x22>
}
 800f098:	bf00      	nop
 800f09a:	3714      	adds	r7, #20
 800f09c:	46bd      	mov	sp, r7
 800f09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a2:	4770      	bx	lr

0800f0a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f0a4:	b480      	push	{r7}
 800f0a6:	b083      	sub	sp, #12
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f103 0208 	add.w	r2, r3, #8
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	f04f 32ff 	mov.w	r2, #4294967295
 800f0bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	f103 0208 	add.w	r2, r3, #8
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f103 0208 	add.w	r2, r3, #8
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f0d8:	bf00      	nop
 800f0da:	370c      	adds	r7, #12
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e2:	4770      	bx	lr

0800f0e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f0e4:	b480      	push	{r7}
 800f0e6:	b083      	sub	sp, #12
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f0f2:	bf00      	nop
 800f0f4:	370c      	adds	r7, #12
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fc:	4770      	bx	lr

0800f0fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f0fe:	b480      	push	{r7}
 800f100:	b085      	sub	sp, #20
 800f102:	af00      	add	r7, sp, #0
 800f104:	6078      	str	r0, [r7, #4]
 800f106:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	685b      	ldr	r3, [r3, #4]
 800f10c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f10e:	683b      	ldr	r3, [r7, #0]
 800f110:	68fa      	ldr	r2, [r7, #12]
 800f112:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	689a      	ldr	r2, [r3, #8]
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	689b      	ldr	r3, [r3, #8]
 800f120:	683a      	ldr	r2, [r7, #0]
 800f122:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	683a      	ldr	r2, [r7, #0]
 800f128:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	687a      	ldr	r2, [r7, #4]
 800f12e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	1c5a      	adds	r2, r3, #1
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	601a      	str	r2, [r3, #0]
}
 800f13a:	bf00      	nop
 800f13c:	3714      	adds	r7, #20
 800f13e:	46bd      	mov	sp, r7
 800f140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f144:	4770      	bx	lr

0800f146 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f146:	b480      	push	{r7}
 800f148:	b085      	sub	sp, #20
 800f14a:	af00      	add	r7, sp, #0
 800f14c:	6078      	str	r0, [r7, #4]
 800f14e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f150:	683b      	ldr	r3, [r7, #0]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f15c:	d103      	bne.n	800f166 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	691b      	ldr	r3, [r3, #16]
 800f162:	60fb      	str	r3, [r7, #12]
 800f164:	e00c      	b.n	800f180 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	3308      	adds	r3, #8
 800f16a:	60fb      	str	r3, [r7, #12]
 800f16c:	e002      	b.n	800f174 <vListInsert+0x2e>
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	685b      	ldr	r3, [r3, #4]
 800f172:	60fb      	str	r3, [r7, #12]
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	685b      	ldr	r3, [r3, #4]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	68ba      	ldr	r2, [r7, #8]
 800f17c:	429a      	cmp	r2, r3
 800f17e:	d2f6      	bcs.n	800f16e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	685a      	ldr	r2, [r3, #4]
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	685b      	ldr	r3, [r3, #4]
 800f18c:	683a      	ldr	r2, [r7, #0]
 800f18e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	68fa      	ldr	r2, [r7, #12]
 800f194:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	683a      	ldr	r2, [r7, #0]
 800f19a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	687a      	ldr	r2, [r7, #4]
 800f1a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	1c5a      	adds	r2, r3, #1
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	601a      	str	r2, [r3, #0]
}
 800f1ac:	bf00      	nop
 800f1ae:	3714      	adds	r7, #20
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b6:	4770      	bx	lr

0800f1b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f1b8:	b480      	push	{r7}
 800f1ba:	b085      	sub	sp, #20
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	691b      	ldr	r3, [r3, #16]
 800f1c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	685b      	ldr	r3, [r3, #4]
 800f1ca:	687a      	ldr	r2, [r7, #4]
 800f1cc:	6892      	ldr	r2, [r2, #8]
 800f1ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	689b      	ldr	r3, [r3, #8]
 800f1d4:	687a      	ldr	r2, [r7, #4]
 800f1d6:	6852      	ldr	r2, [r2, #4]
 800f1d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	685b      	ldr	r3, [r3, #4]
 800f1de:	687a      	ldr	r2, [r7, #4]
 800f1e0:	429a      	cmp	r2, r3
 800f1e2:	d103      	bne.n	800f1ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	689a      	ldr	r2, [r3, #8]
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	1e5a      	subs	r2, r3, #1
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	681b      	ldr	r3, [r3, #0]
}
 800f200:	4618      	mov	r0, r3
 800f202:	3714      	adds	r7, #20
 800f204:	46bd      	mov	sp, r7
 800f206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20a:	4770      	bx	lr

0800f20c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f20c:	b480      	push	{r7}
 800f20e:	b085      	sub	sp, #20
 800f210:	af00      	add	r7, sp, #0
 800f212:	60f8      	str	r0, [r7, #12]
 800f214:	60b9      	str	r1, [r7, #8]
 800f216:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	3b04      	subs	r3, #4
 800f21c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f224:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	3b04      	subs	r3, #4
 800f22a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	f023 0201 	bic.w	r2, r3, #1
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	3b04      	subs	r3, #4
 800f23a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f23c:	4a0c      	ldr	r2, [pc, #48]	; (800f270 <pxPortInitialiseStack+0x64>)
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	3b14      	subs	r3, #20
 800f246:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f248:	687a      	ldr	r2, [r7, #4]
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	3b04      	subs	r3, #4
 800f252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	f06f 0202 	mvn.w	r2, #2
 800f25a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	3b20      	subs	r3, #32
 800f260:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f262:	68fb      	ldr	r3, [r7, #12]
}
 800f264:	4618      	mov	r0, r3
 800f266:	3714      	adds	r7, #20
 800f268:	46bd      	mov	sp, r7
 800f26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26e:	4770      	bx	lr
 800f270:	0800f275 	.word	0x0800f275

0800f274 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f274:	b480      	push	{r7}
 800f276:	b085      	sub	sp, #20
 800f278:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f27a:	2300      	movs	r3, #0
 800f27c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f27e:	4b12      	ldr	r3, [pc, #72]	; (800f2c8 <prvTaskExitError+0x54>)
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f286:	d00a      	beq.n	800f29e <prvTaskExitError+0x2a>
	__asm volatile
 800f288:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f28c:	f383 8811 	msr	BASEPRI, r3
 800f290:	f3bf 8f6f 	isb	sy
 800f294:	f3bf 8f4f 	dsb	sy
 800f298:	60fb      	str	r3, [r7, #12]
}
 800f29a:	bf00      	nop
 800f29c:	e7fe      	b.n	800f29c <prvTaskExitError+0x28>
	__asm volatile
 800f29e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f2a2:	f383 8811 	msr	BASEPRI, r3
 800f2a6:	f3bf 8f6f 	isb	sy
 800f2aa:	f3bf 8f4f 	dsb	sy
 800f2ae:	60bb      	str	r3, [r7, #8]
}
 800f2b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f2b2:	bf00      	nop
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d0fc      	beq.n	800f2b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f2ba:	bf00      	nop
 800f2bc:	bf00      	nop
 800f2be:	3714      	adds	r7, #20
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c6:	4770      	bx	lr
 800f2c8:	20000058 	.word	0x20000058
 800f2cc:	00000000 	.word	0x00000000

0800f2d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f2d0:	4b07      	ldr	r3, [pc, #28]	; (800f2f0 <pxCurrentTCBConst2>)
 800f2d2:	6819      	ldr	r1, [r3, #0]
 800f2d4:	6808      	ldr	r0, [r1, #0]
 800f2d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2da:	f380 8809 	msr	PSP, r0
 800f2de:	f3bf 8f6f 	isb	sy
 800f2e2:	f04f 0000 	mov.w	r0, #0
 800f2e6:	f380 8811 	msr	BASEPRI, r0
 800f2ea:	4770      	bx	lr
 800f2ec:	f3af 8000 	nop.w

0800f2f0 <pxCurrentTCBConst2>:
 800f2f0:	20007df4 	.word	0x20007df4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f2f4:	bf00      	nop
 800f2f6:	bf00      	nop

0800f2f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f2f8:	4808      	ldr	r0, [pc, #32]	; (800f31c <prvPortStartFirstTask+0x24>)
 800f2fa:	6800      	ldr	r0, [r0, #0]
 800f2fc:	6800      	ldr	r0, [r0, #0]
 800f2fe:	f380 8808 	msr	MSP, r0
 800f302:	f04f 0000 	mov.w	r0, #0
 800f306:	f380 8814 	msr	CONTROL, r0
 800f30a:	b662      	cpsie	i
 800f30c:	b661      	cpsie	f
 800f30e:	f3bf 8f4f 	dsb	sy
 800f312:	f3bf 8f6f 	isb	sy
 800f316:	df00      	svc	0
 800f318:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f31a:	bf00      	nop
 800f31c:	e000ed08 	.word	0xe000ed08

0800f320 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b086      	sub	sp, #24
 800f324:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f326:	4b46      	ldr	r3, [pc, #280]	; (800f440 <xPortStartScheduler+0x120>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	4a46      	ldr	r2, [pc, #280]	; (800f444 <xPortStartScheduler+0x124>)
 800f32c:	4293      	cmp	r3, r2
 800f32e:	d10a      	bne.n	800f346 <xPortStartScheduler+0x26>
	__asm volatile
 800f330:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f334:	f383 8811 	msr	BASEPRI, r3
 800f338:	f3bf 8f6f 	isb	sy
 800f33c:	f3bf 8f4f 	dsb	sy
 800f340:	613b      	str	r3, [r7, #16]
}
 800f342:	bf00      	nop
 800f344:	e7fe      	b.n	800f344 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f346:	4b3e      	ldr	r3, [pc, #248]	; (800f440 <xPortStartScheduler+0x120>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	4a3f      	ldr	r2, [pc, #252]	; (800f448 <xPortStartScheduler+0x128>)
 800f34c:	4293      	cmp	r3, r2
 800f34e:	d10a      	bne.n	800f366 <xPortStartScheduler+0x46>
	__asm volatile
 800f350:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f354:	f383 8811 	msr	BASEPRI, r3
 800f358:	f3bf 8f6f 	isb	sy
 800f35c:	f3bf 8f4f 	dsb	sy
 800f360:	60fb      	str	r3, [r7, #12]
}
 800f362:	bf00      	nop
 800f364:	e7fe      	b.n	800f364 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f366:	4b39      	ldr	r3, [pc, #228]	; (800f44c <xPortStartScheduler+0x12c>)
 800f368:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f36a:	697b      	ldr	r3, [r7, #20]
 800f36c:	781b      	ldrb	r3, [r3, #0]
 800f36e:	b2db      	uxtb	r3, r3
 800f370:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f372:	697b      	ldr	r3, [r7, #20]
 800f374:	22ff      	movs	r2, #255	; 0xff
 800f376:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f378:	697b      	ldr	r3, [r7, #20]
 800f37a:	781b      	ldrb	r3, [r3, #0]
 800f37c:	b2db      	uxtb	r3, r3
 800f37e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f380:	78fb      	ldrb	r3, [r7, #3]
 800f382:	b2db      	uxtb	r3, r3
 800f384:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
 800f388:	b2da      	uxtb	r2, r3
 800f38a:	4b31      	ldr	r3, [pc, #196]	; (800f450 <xPortStartScheduler+0x130>)
 800f38c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f38e:	4b31      	ldr	r3, [pc, #196]	; (800f454 <xPortStartScheduler+0x134>)
 800f390:	2207      	movs	r2, #7
 800f392:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f394:	e009      	b.n	800f3aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f396:	4b2f      	ldr	r3, [pc, #188]	; (800f454 <xPortStartScheduler+0x134>)
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	3b01      	subs	r3, #1
 800f39c:	4a2d      	ldr	r2, [pc, #180]	; (800f454 <xPortStartScheduler+0x134>)
 800f39e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f3a0:	78fb      	ldrb	r3, [r7, #3]
 800f3a2:	b2db      	uxtb	r3, r3
 800f3a4:	005b      	lsls	r3, r3, #1
 800f3a6:	b2db      	uxtb	r3, r3
 800f3a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f3aa:	78fb      	ldrb	r3, [r7, #3]
 800f3ac:	b2db      	uxtb	r3, r3
 800f3ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f3b2:	2b80      	cmp	r3, #128	; 0x80
 800f3b4:	d0ef      	beq.n	800f396 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f3b6:	4b27      	ldr	r3, [pc, #156]	; (800f454 <xPortStartScheduler+0x134>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	f1c3 0307 	rsb	r3, r3, #7
 800f3be:	2b04      	cmp	r3, #4
 800f3c0:	d00a      	beq.n	800f3d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800f3c2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f3c6:	f383 8811 	msr	BASEPRI, r3
 800f3ca:	f3bf 8f6f 	isb	sy
 800f3ce:	f3bf 8f4f 	dsb	sy
 800f3d2:	60bb      	str	r3, [r7, #8]
}
 800f3d4:	bf00      	nop
 800f3d6:	e7fe      	b.n	800f3d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f3d8:	4b1e      	ldr	r3, [pc, #120]	; (800f454 <xPortStartScheduler+0x134>)
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	021b      	lsls	r3, r3, #8
 800f3de:	4a1d      	ldr	r2, [pc, #116]	; (800f454 <xPortStartScheduler+0x134>)
 800f3e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f3e2:	4b1c      	ldr	r3, [pc, #112]	; (800f454 <xPortStartScheduler+0x134>)
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f3ea:	4a1a      	ldr	r2, [pc, #104]	; (800f454 <xPortStartScheduler+0x134>)
 800f3ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	b2da      	uxtb	r2, r3
 800f3f2:	697b      	ldr	r3, [r7, #20]
 800f3f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f3f6:	4b18      	ldr	r3, [pc, #96]	; (800f458 <xPortStartScheduler+0x138>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	4a17      	ldr	r2, [pc, #92]	; (800f458 <xPortStartScheduler+0x138>)
 800f3fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f400:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f402:	4b15      	ldr	r3, [pc, #84]	; (800f458 <xPortStartScheduler+0x138>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	4a14      	ldr	r2, [pc, #80]	; (800f458 <xPortStartScheduler+0x138>)
 800f408:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f40c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f40e:	f000 f8dd 	bl	800f5cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f412:	4b12      	ldr	r3, [pc, #72]	; (800f45c <xPortStartScheduler+0x13c>)
 800f414:	2200      	movs	r2, #0
 800f416:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f418:	f000 f8fc 	bl	800f614 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f41c:	4b10      	ldr	r3, [pc, #64]	; (800f460 <xPortStartScheduler+0x140>)
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	4a0f      	ldr	r2, [pc, #60]	; (800f460 <xPortStartScheduler+0x140>)
 800f422:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f426:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f428:	f7ff ff66 	bl	800f2f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f42c:	f001 fbda 	bl	8010be4 <vTaskSwitchContext>
	prvTaskExitError();
 800f430:	f7ff ff20 	bl	800f274 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f434:	2300      	movs	r3, #0
}
 800f436:	4618      	mov	r0, r3
 800f438:	3718      	adds	r7, #24
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd80      	pop	{r7, pc}
 800f43e:	bf00      	nop
 800f440:	e000ed00 	.word	0xe000ed00
 800f444:	410fc271 	.word	0x410fc271
 800f448:	410fc270 	.word	0x410fc270
 800f44c:	e000e400 	.word	0xe000e400
 800f450:	20007dac 	.word	0x20007dac
 800f454:	20007db0 	.word	0x20007db0
 800f458:	e000ed20 	.word	0xe000ed20
 800f45c:	20000058 	.word	0x20000058
 800f460:	e000ef34 	.word	0xe000ef34

0800f464 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f464:	b480      	push	{r7}
 800f466:	b083      	sub	sp, #12
 800f468:	af00      	add	r7, sp, #0
	__asm volatile
 800f46a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f46e:	f383 8811 	msr	BASEPRI, r3
 800f472:	f3bf 8f6f 	isb	sy
 800f476:	f3bf 8f4f 	dsb	sy
 800f47a:	607b      	str	r3, [r7, #4]
}
 800f47c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f47e:	4b0f      	ldr	r3, [pc, #60]	; (800f4bc <vPortEnterCritical+0x58>)
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	3301      	adds	r3, #1
 800f484:	4a0d      	ldr	r2, [pc, #52]	; (800f4bc <vPortEnterCritical+0x58>)
 800f486:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f488:	4b0c      	ldr	r3, [pc, #48]	; (800f4bc <vPortEnterCritical+0x58>)
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	2b01      	cmp	r3, #1
 800f48e:	d10f      	bne.n	800f4b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f490:	4b0b      	ldr	r3, [pc, #44]	; (800f4c0 <vPortEnterCritical+0x5c>)
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	b2db      	uxtb	r3, r3
 800f496:	2b00      	cmp	r3, #0
 800f498:	d00a      	beq.n	800f4b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800f49a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f49e:	f383 8811 	msr	BASEPRI, r3
 800f4a2:	f3bf 8f6f 	isb	sy
 800f4a6:	f3bf 8f4f 	dsb	sy
 800f4aa:	603b      	str	r3, [r7, #0]
}
 800f4ac:	bf00      	nop
 800f4ae:	e7fe      	b.n	800f4ae <vPortEnterCritical+0x4a>
	}
}
 800f4b0:	bf00      	nop
 800f4b2:	370c      	adds	r7, #12
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ba:	4770      	bx	lr
 800f4bc:	20000058 	.word	0x20000058
 800f4c0:	e000ed04 	.word	0xe000ed04

0800f4c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f4c4:	b480      	push	{r7}
 800f4c6:	b083      	sub	sp, #12
 800f4c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f4ca:	4b12      	ldr	r3, [pc, #72]	; (800f514 <vPortExitCritical+0x50>)
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d10a      	bne.n	800f4e8 <vPortExitCritical+0x24>
	__asm volatile
 800f4d2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f4d6:	f383 8811 	msr	BASEPRI, r3
 800f4da:	f3bf 8f6f 	isb	sy
 800f4de:	f3bf 8f4f 	dsb	sy
 800f4e2:	607b      	str	r3, [r7, #4]
}
 800f4e4:	bf00      	nop
 800f4e6:	e7fe      	b.n	800f4e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f4e8:	4b0a      	ldr	r3, [pc, #40]	; (800f514 <vPortExitCritical+0x50>)
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	3b01      	subs	r3, #1
 800f4ee:	4a09      	ldr	r2, [pc, #36]	; (800f514 <vPortExitCritical+0x50>)
 800f4f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f4f2:	4b08      	ldr	r3, [pc, #32]	; (800f514 <vPortExitCritical+0x50>)
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d105      	bne.n	800f506 <vPortExitCritical+0x42>
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	f383 8811 	msr	BASEPRI, r3
}
 800f504:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f506:	bf00      	nop
 800f508:	370c      	adds	r7, #12
 800f50a:	46bd      	mov	sp, r7
 800f50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f510:	4770      	bx	lr
 800f512:	bf00      	nop
 800f514:	20000058 	.word	0x20000058
	...

0800f520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f520:	f3ef 8009 	mrs	r0, PSP
 800f524:	f3bf 8f6f 	isb	sy
 800f528:	4b15      	ldr	r3, [pc, #84]	; (800f580 <pxCurrentTCBConst>)
 800f52a:	681a      	ldr	r2, [r3, #0]
 800f52c:	f01e 0f10 	tst.w	lr, #16
 800f530:	bf08      	it	eq
 800f532:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f536:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f53a:	6010      	str	r0, [r2, #0]
 800f53c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f540:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 800f544:	f380 8811 	msr	BASEPRI, r0
 800f548:	f3bf 8f4f 	dsb	sy
 800f54c:	f3bf 8f6f 	isb	sy
 800f550:	f001 fb48 	bl	8010be4 <vTaskSwitchContext>
 800f554:	f04f 0000 	mov.w	r0, #0
 800f558:	f380 8811 	msr	BASEPRI, r0
 800f55c:	bc09      	pop	{r0, r3}
 800f55e:	6819      	ldr	r1, [r3, #0]
 800f560:	6808      	ldr	r0, [r1, #0]
 800f562:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f566:	f01e 0f10 	tst.w	lr, #16
 800f56a:	bf08      	it	eq
 800f56c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f570:	f380 8809 	msr	PSP, r0
 800f574:	f3bf 8f6f 	isb	sy
 800f578:	4770      	bx	lr
 800f57a:	bf00      	nop
 800f57c:	f3af 8000 	nop.w

0800f580 <pxCurrentTCBConst>:
 800f580:	20007df4 	.word	0x20007df4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f584:	bf00      	nop
 800f586:	bf00      	nop

0800f588 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b082      	sub	sp, #8
 800f58c:	af00      	add	r7, sp, #0
	__asm volatile
 800f58e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f592:	f383 8811 	msr	BASEPRI, r3
 800f596:	f3bf 8f6f 	isb	sy
 800f59a:	f3bf 8f4f 	dsb	sy
 800f59e:	607b      	str	r3, [r7, #4]
}
 800f5a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f5a2:	f001 fa5d 	bl	8010a60 <xTaskIncrementTick>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d003      	beq.n	800f5b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f5ac:	4b06      	ldr	r3, [pc, #24]	; (800f5c8 <xPortSysTickHandler+0x40>)
 800f5ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5b2:	601a      	str	r2, [r3, #0]
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	f383 8811 	msr	BASEPRI, r3
}
 800f5be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f5c0:	bf00      	nop
 800f5c2:	3708      	adds	r7, #8
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bd80      	pop	{r7, pc}
 800f5c8:	e000ed04 	.word	0xe000ed04

0800f5cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f5cc:	b480      	push	{r7}
 800f5ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f5d0:	4b0b      	ldr	r3, [pc, #44]	; (800f600 <vPortSetupTimerInterrupt+0x34>)
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f5d6:	4b0b      	ldr	r3, [pc, #44]	; (800f604 <vPortSetupTimerInterrupt+0x38>)
 800f5d8:	2200      	movs	r2, #0
 800f5da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f5dc:	4b0a      	ldr	r3, [pc, #40]	; (800f608 <vPortSetupTimerInterrupt+0x3c>)
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	4a0a      	ldr	r2, [pc, #40]	; (800f60c <vPortSetupTimerInterrupt+0x40>)
 800f5e2:	fba2 2303 	umull	r2, r3, r2, r3
 800f5e6:	099b      	lsrs	r3, r3, #6
 800f5e8:	4a09      	ldr	r2, [pc, #36]	; (800f610 <vPortSetupTimerInterrupt+0x44>)
 800f5ea:	3b01      	subs	r3, #1
 800f5ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f5ee:	4b04      	ldr	r3, [pc, #16]	; (800f600 <vPortSetupTimerInterrupt+0x34>)
 800f5f0:	2207      	movs	r2, #7
 800f5f2:	601a      	str	r2, [r3, #0]
}
 800f5f4:	bf00      	nop
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fc:	4770      	bx	lr
 800f5fe:	bf00      	nop
 800f600:	e000e010 	.word	0xe000e010
 800f604:	e000e018 	.word	0xe000e018
 800f608:	2000004c 	.word	0x2000004c
 800f60c:	10624dd3 	.word	0x10624dd3
 800f610:	e000e014 	.word	0xe000e014

0800f614 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f614:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f624 <vPortEnableVFP+0x10>
 800f618:	6801      	ldr	r1, [r0, #0]
 800f61a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f61e:	6001      	str	r1, [r0, #0]
 800f620:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f622:	bf00      	nop
 800f624:	e000ed88 	.word	0xe000ed88

0800f628 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f628:	b480      	push	{r7}
 800f62a:	b085      	sub	sp, #20
 800f62c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f62e:	f3ef 8305 	mrs	r3, IPSR
 800f632:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	2b0f      	cmp	r3, #15
 800f638:	d914      	bls.n	800f664 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f63a:	4a17      	ldr	r2, [pc, #92]	; (800f698 <vPortValidateInterruptPriority+0x70>)
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	4413      	add	r3, r2
 800f640:	781b      	ldrb	r3, [r3, #0]
 800f642:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f644:	4b15      	ldr	r3, [pc, #84]	; (800f69c <vPortValidateInterruptPriority+0x74>)
 800f646:	781b      	ldrb	r3, [r3, #0]
 800f648:	7afa      	ldrb	r2, [r7, #11]
 800f64a:	429a      	cmp	r2, r3
 800f64c:	d20a      	bcs.n	800f664 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f64e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f652:	f383 8811 	msr	BASEPRI, r3
 800f656:	f3bf 8f6f 	isb	sy
 800f65a:	f3bf 8f4f 	dsb	sy
 800f65e:	607b      	str	r3, [r7, #4]
}
 800f660:	bf00      	nop
 800f662:	e7fe      	b.n	800f662 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f664:	4b0e      	ldr	r3, [pc, #56]	; (800f6a0 <vPortValidateInterruptPriority+0x78>)
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f66c:	4b0d      	ldr	r3, [pc, #52]	; (800f6a4 <vPortValidateInterruptPriority+0x7c>)
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	429a      	cmp	r2, r3
 800f672:	d90a      	bls.n	800f68a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f674:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f678:	f383 8811 	msr	BASEPRI, r3
 800f67c:	f3bf 8f6f 	isb	sy
 800f680:	f3bf 8f4f 	dsb	sy
 800f684:	603b      	str	r3, [r7, #0]
}
 800f686:	bf00      	nop
 800f688:	e7fe      	b.n	800f688 <vPortValidateInterruptPriority+0x60>
	}
 800f68a:	bf00      	nop
 800f68c:	3714      	adds	r7, #20
 800f68e:	46bd      	mov	sp, r7
 800f690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f694:	4770      	bx	lr
 800f696:	bf00      	nop
 800f698:	e000e3f0 	.word	0xe000e3f0
 800f69c:	20007dac 	.word	0x20007dac
 800f6a0:	e000ed0c 	.word	0xe000ed0c
 800f6a4:	20007db0 	.word	0x20007db0

0800f6a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b084      	sub	sp, #16
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
 800f6b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d10a      	bne.n	800f6d2 <xQueueGenericReset+0x2a>
	__asm volatile
 800f6bc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f6c0:	f383 8811 	msr	BASEPRI, r3
 800f6c4:	f3bf 8f6f 	isb	sy
 800f6c8:	f3bf 8f4f 	dsb	sy
 800f6cc:	60bb      	str	r3, [r7, #8]
}
 800f6ce:	bf00      	nop
 800f6d0:	e7fe      	b.n	800f6d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f6d2:	f7ff fec7 	bl	800f464 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	681a      	ldr	r2, [r3, #0]
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6de:	68f9      	ldr	r1, [r7, #12]
 800f6e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f6e2:	fb01 f303 	mul.w	r3, r1, r3
 800f6e6:	441a      	add	r2, r3
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	681a      	ldr	r2, [r3, #0]
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	681a      	ldr	r2, [r3, #0]
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f702:	3b01      	subs	r3, #1
 800f704:	68f9      	ldr	r1, [r7, #12]
 800f706:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f708:	fb01 f303 	mul.w	r3, r1, r3
 800f70c:	441a      	add	r2, r3
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	22ff      	movs	r2, #255	; 0xff
 800f716:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	22ff      	movs	r2, #255	; 0xff
 800f71e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f722:	683b      	ldr	r3, [r7, #0]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d114      	bne.n	800f752 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	691b      	ldr	r3, [r3, #16]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d01a      	beq.n	800f766 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	3310      	adds	r3, #16
 800f734:	4618      	mov	r0, r3
 800f736:	f001 fb3d 	bl	8010db4 <xTaskRemoveFromEventList>
 800f73a:	4603      	mov	r3, r0
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d012      	beq.n	800f766 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f740:	4b0c      	ldr	r3, [pc, #48]	; (800f774 <xQueueGenericReset+0xcc>)
 800f742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f746:	601a      	str	r2, [r3, #0]
 800f748:	f3bf 8f4f 	dsb	sy
 800f74c:	f3bf 8f6f 	isb	sy
 800f750:	e009      	b.n	800f766 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	3310      	adds	r3, #16
 800f756:	4618      	mov	r0, r3
 800f758:	f7ff fca4 	bl	800f0a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	3324      	adds	r3, #36	; 0x24
 800f760:	4618      	mov	r0, r3
 800f762:	f7ff fc9f 	bl	800f0a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f766:	f7ff fead 	bl	800f4c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f76a:	2301      	movs	r3, #1
}
 800f76c:	4618      	mov	r0, r3
 800f76e:	3710      	adds	r7, #16
 800f770:	46bd      	mov	sp, r7
 800f772:	bd80      	pop	{r7, pc}
 800f774:	e000ed04 	.word	0xe000ed04

0800f778 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b08e      	sub	sp, #56	; 0x38
 800f77c:	af02      	add	r7, sp, #8
 800f77e:	60f8      	str	r0, [r7, #12]
 800f780:	60b9      	str	r1, [r7, #8]
 800f782:	607a      	str	r2, [r7, #4]
 800f784:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d10a      	bne.n	800f7a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f78c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f790:	f383 8811 	msr	BASEPRI, r3
 800f794:	f3bf 8f6f 	isb	sy
 800f798:	f3bf 8f4f 	dsb	sy
 800f79c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f79e:	bf00      	nop
 800f7a0:	e7fe      	b.n	800f7a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f7a2:	683b      	ldr	r3, [r7, #0]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d10a      	bne.n	800f7be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f7a8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f7ac:	f383 8811 	msr	BASEPRI, r3
 800f7b0:	f3bf 8f6f 	isb	sy
 800f7b4:	f3bf 8f4f 	dsb	sy
 800f7b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f7ba:	bf00      	nop
 800f7bc:	e7fe      	b.n	800f7bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d002      	beq.n	800f7ca <xQueueGenericCreateStatic+0x52>
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d001      	beq.n	800f7ce <xQueueGenericCreateStatic+0x56>
 800f7ca:	2301      	movs	r3, #1
 800f7cc:	e000      	b.n	800f7d0 <xQueueGenericCreateStatic+0x58>
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d10a      	bne.n	800f7ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f7d4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f7d8:	f383 8811 	msr	BASEPRI, r3
 800f7dc:	f3bf 8f6f 	isb	sy
 800f7e0:	f3bf 8f4f 	dsb	sy
 800f7e4:	623b      	str	r3, [r7, #32]
}
 800f7e6:	bf00      	nop
 800f7e8:	e7fe      	b.n	800f7e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d102      	bne.n	800f7f6 <xQueueGenericCreateStatic+0x7e>
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d101      	bne.n	800f7fa <xQueueGenericCreateStatic+0x82>
 800f7f6:	2301      	movs	r3, #1
 800f7f8:	e000      	b.n	800f7fc <xQueueGenericCreateStatic+0x84>
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d10a      	bne.n	800f816 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800f800:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f804:	f383 8811 	msr	BASEPRI, r3
 800f808:	f3bf 8f6f 	isb	sy
 800f80c:	f3bf 8f4f 	dsb	sy
 800f810:	61fb      	str	r3, [r7, #28]
}
 800f812:	bf00      	nop
 800f814:	e7fe      	b.n	800f814 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f816:	2350      	movs	r3, #80	; 0x50
 800f818:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f81a:	697b      	ldr	r3, [r7, #20]
 800f81c:	2b50      	cmp	r3, #80	; 0x50
 800f81e:	d00a      	beq.n	800f836 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800f820:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f824:	f383 8811 	msr	BASEPRI, r3
 800f828:	f3bf 8f6f 	isb	sy
 800f82c:	f3bf 8f4f 	dsb	sy
 800f830:	61bb      	str	r3, [r7, #24]
}
 800f832:	bf00      	nop
 800f834:	e7fe      	b.n	800f834 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f836:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d00d      	beq.n	800f85e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f844:	2201      	movs	r2, #1
 800f846:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f84a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f850:	9300      	str	r3, [sp, #0]
 800f852:	4613      	mov	r3, r2
 800f854:	687a      	ldr	r2, [r7, #4]
 800f856:	68b9      	ldr	r1, [r7, #8]
 800f858:	68f8      	ldr	r0, [r7, #12]
 800f85a:	f000 f805 	bl	800f868 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f860:	4618      	mov	r0, r3
 800f862:	3730      	adds	r7, #48	; 0x30
 800f864:	46bd      	mov	sp, r7
 800f866:	bd80      	pop	{r7, pc}

0800f868 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b084      	sub	sp, #16
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	60f8      	str	r0, [r7, #12]
 800f870:	60b9      	str	r1, [r7, #8]
 800f872:	607a      	str	r2, [r7, #4]
 800f874:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f876:	68bb      	ldr	r3, [r7, #8]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d103      	bne.n	800f884 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f87c:	69bb      	ldr	r3, [r7, #24]
 800f87e:	69ba      	ldr	r2, [r7, #24]
 800f880:	601a      	str	r2, [r3, #0]
 800f882:	e002      	b.n	800f88a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f884:	69bb      	ldr	r3, [r7, #24]
 800f886:	687a      	ldr	r2, [r7, #4]
 800f888:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f88a:	69bb      	ldr	r3, [r7, #24]
 800f88c:	68fa      	ldr	r2, [r7, #12]
 800f88e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f890:	69bb      	ldr	r3, [r7, #24]
 800f892:	68ba      	ldr	r2, [r7, #8]
 800f894:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f896:	2101      	movs	r1, #1
 800f898:	69b8      	ldr	r0, [r7, #24]
 800f89a:	f7ff ff05 	bl	800f6a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f89e:	69bb      	ldr	r3, [r7, #24]
 800f8a0:	78fa      	ldrb	r2, [r7, #3]
 800f8a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f8a6:	bf00      	nop
 800f8a8:	3710      	adds	r7, #16
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	bd80      	pop	{r7, pc}
	...

0800f8b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b08e      	sub	sp, #56	; 0x38
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	60f8      	str	r0, [r7, #12]
 800f8b8:	60b9      	str	r1, [r7, #8]
 800f8ba:	607a      	str	r2, [r7, #4]
 800f8bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f8be:	2300      	movs	r3, #0
 800f8c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d10a      	bne.n	800f8e2 <xQueueGenericSend+0x32>
	__asm volatile
 800f8cc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f8d0:	f383 8811 	msr	BASEPRI, r3
 800f8d4:	f3bf 8f6f 	isb	sy
 800f8d8:	f3bf 8f4f 	dsb	sy
 800f8dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f8de:	bf00      	nop
 800f8e0:	e7fe      	b.n	800f8e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f8e2:	68bb      	ldr	r3, [r7, #8]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d103      	bne.n	800f8f0 <xQueueGenericSend+0x40>
 800f8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d101      	bne.n	800f8f4 <xQueueGenericSend+0x44>
 800f8f0:	2301      	movs	r3, #1
 800f8f2:	e000      	b.n	800f8f6 <xQueueGenericSend+0x46>
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d10a      	bne.n	800f910 <xQueueGenericSend+0x60>
	__asm volatile
 800f8fa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f8fe:	f383 8811 	msr	BASEPRI, r3
 800f902:	f3bf 8f6f 	isb	sy
 800f906:	f3bf 8f4f 	dsb	sy
 800f90a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f90c:	bf00      	nop
 800f90e:	e7fe      	b.n	800f90e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	2b02      	cmp	r3, #2
 800f914:	d103      	bne.n	800f91e <xQueueGenericSend+0x6e>
 800f916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f91a:	2b01      	cmp	r3, #1
 800f91c:	d101      	bne.n	800f922 <xQueueGenericSend+0x72>
 800f91e:	2301      	movs	r3, #1
 800f920:	e000      	b.n	800f924 <xQueueGenericSend+0x74>
 800f922:	2300      	movs	r3, #0
 800f924:	2b00      	cmp	r3, #0
 800f926:	d10a      	bne.n	800f93e <xQueueGenericSend+0x8e>
	__asm volatile
 800f928:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f92c:	f383 8811 	msr	BASEPRI, r3
 800f930:	f3bf 8f6f 	isb	sy
 800f934:	f3bf 8f4f 	dsb	sy
 800f938:	623b      	str	r3, [r7, #32]
}
 800f93a:	bf00      	nop
 800f93c:	e7fe      	b.n	800f93c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f93e:	f001 fbfd 	bl	801113c <xTaskGetSchedulerState>
 800f942:	4603      	mov	r3, r0
 800f944:	2b00      	cmp	r3, #0
 800f946:	d102      	bne.n	800f94e <xQueueGenericSend+0x9e>
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d101      	bne.n	800f952 <xQueueGenericSend+0xa2>
 800f94e:	2301      	movs	r3, #1
 800f950:	e000      	b.n	800f954 <xQueueGenericSend+0xa4>
 800f952:	2300      	movs	r3, #0
 800f954:	2b00      	cmp	r3, #0
 800f956:	d10a      	bne.n	800f96e <xQueueGenericSend+0xbe>
	__asm volatile
 800f958:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f95c:	f383 8811 	msr	BASEPRI, r3
 800f960:	f3bf 8f6f 	isb	sy
 800f964:	f3bf 8f4f 	dsb	sy
 800f968:	61fb      	str	r3, [r7, #28]
}
 800f96a:	bf00      	nop
 800f96c:	e7fe      	b.n	800f96c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f96e:	f7ff fd79 	bl	800f464 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f97a:	429a      	cmp	r2, r3
 800f97c:	d302      	bcc.n	800f984 <xQueueGenericSend+0xd4>
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	2b02      	cmp	r3, #2
 800f982:	d129      	bne.n	800f9d8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f984:	683a      	ldr	r2, [r7, #0]
 800f986:	68b9      	ldr	r1, [r7, #8]
 800f988:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f98a:	f000 fa0b 	bl	800fda4 <prvCopyDataToQueue>
 800f98e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f994:	2b00      	cmp	r3, #0
 800f996:	d010      	beq.n	800f9ba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f99a:	3324      	adds	r3, #36	; 0x24
 800f99c:	4618      	mov	r0, r3
 800f99e:	f001 fa09 	bl	8010db4 <xTaskRemoveFromEventList>
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d013      	beq.n	800f9d0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f9a8:	4b3f      	ldr	r3, [pc, #252]	; (800faa8 <xQueueGenericSend+0x1f8>)
 800f9aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9ae:	601a      	str	r2, [r3, #0]
 800f9b0:	f3bf 8f4f 	dsb	sy
 800f9b4:	f3bf 8f6f 	isb	sy
 800f9b8:	e00a      	b.n	800f9d0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d007      	beq.n	800f9d0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f9c0:	4b39      	ldr	r3, [pc, #228]	; (800faa8 <xQueueGenericSend+0x1f8>)
 800f9c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9c6:	601a      	str	r2, [r3, #0]
 800f9c8:	f3bf 8f4f 	dsb	sy
 800f9cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f9d0:	f7ff fd78 	bl	800f4c4 <vPortExitCritical>
				return pdPASS;
 800f9d4:	2301      	movs	r3, #1
 800f9d6:	e063      	b.n	800faa0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d103      	bne.n	800f9e6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f9de:	f7ff fd71 	bl	800f4c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	e05c      	b.n	800faa0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f9e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d106      	bne.n	800f9fa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f9ec:	f107 0314 	add.w	r3, r7, #20
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	f001 fa43 	bl	8010e7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f9f6:	2301      	movs	r3, #1
 800f9f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f9fa:	f7ff fd63 	bl	800f4c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f9fe:	f000 ff73 	bl	80108e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fa02:	f7ff fd2f 	bl	800f464 <vPortEnterCritical>
 800fa06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fa0c:	b25b      	sxtb	r3, r3
 800fa0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa12:	d103      	bne.n	800fa1c <xQueueGenericSend+0x16c>
 800fa14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa16:	2200      	movs	r2, #0
 800fa18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fa1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fa22:	b25b      	sxtb	r3, r3
 800fa24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa28:	d103      	bne.n	800fa32 <xQueueGenericSend+0x182>
 800fa2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fa32:	f7ff fd47 	bl	800f4c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fa36:	1d3a      	adds	r2, r7, #4
 800fa38:	f107 0314 	add.w	r3, r7, #20
 800fa3c:	4611      	mov	r1, r2
 800fa3e:	4618      	mov	r0, r3
 800fa40:	f001 fa32 	bl	8010ea8 <xTaskCheckForTimeOut>
 800fa44:	4603      	mov	r3, r0
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d124      	bne.n	800fa94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fa4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fa4c:	f000 faa2 	bl	800ff94 <prvIsQueueFull>
 800fa50:	4603      	mov	r3, r0
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d018      	beq.n	800fa88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fa56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa58:	3310      	adds	r3, #16
 800fa5a:	687a      	ldr	r2, [r7, #4]
 800fa5c:	4611      	mov	r1, r2
 800fa5e:	4618      	mov	r0, r3
 800fa60:	f001 f958 	bl	8010d14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fa64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fa66:	f000 fa2d 	bl	800fec4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fa6a:	f000 ff4b 	bl	8010904 <xTaskResumeAll>
 800fa6e:	4603      	mov	r3, r0
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	f47f af7c 	bne.w	800f96e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800fa76:	4b0c      	ldr	r3, [pc, #48]	; (800faa8 <xQueueGenericSend+0x1f8>)
 800fa78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa7c:	601a      	str	r2, [r3, #0]
 800fa7e:	f3bf 8f4f 	dsb	sy
 800fa82:	f3bf 8f6f 	isb	sy
 800fa86:	e772      	b.n	800f96e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fa88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fa8a:	f000 fa1b 	bl	800fec4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fa8e:	f000 ff39 	bl	8010904 <xTaskResumeAll>
 800fa92:	e76c      	b.n	800f96e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fa94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fa96:	f000 fa15 	bl	800fec4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fa9a:	f000 ff33 	bl	8010904 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fa9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800faa0:	4618      	mov	r0, r3
 800faa2:	3738      	adds	r7, #56	; 0x38
 800faa4:	46bd      	mov	sp, r7
 800faa6:	bd80      	pop	{r7, pc}
 800faa8:	e000ed04 	.word	0xe000ed04

0800faac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b090      	sub	sp, #64	; 0x40
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	60f8      	str	r0, [r7, #12]
 800fab4:	60b9      	str	r1, [r7, #8]
 800fab6:	607a      	str	r2, [r7, #4]
 800fab8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800fabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d10a      	bne.n	800fada <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800fac4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800fac8:	f383 8811 	msr	BASEPRI, r3
 800facc:	f3bf 8f6f 	isb	sy
 800fad0:	f3bf 8f4f 	dsb	sy
 800fad4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fad6:	bf00      	nop
 800fad8:	e7fe      	b.n	800fad8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fada:	68bb      	ldr	r3, [r7, #8]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d103      	bne.n	800fae8 <xQueueGenericSendFromISR+0x3c>
 800fae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d101      	bne.n	800faec <xQueueGenericSendFromISR+0x40>
 800fae8:	2301      	movs	r3, #1
 800faea:	e000      	b.n	800faee <xQueueGenericSendFromISR+0x42>
 800faec:	2300      	movs	r3, #0
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d10a      	bne.n	800fb08 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800faf2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800faf6:	f383 8811 	msr	BASEPRI, r3
 800fafa:	f3bf 8f6f 	isb	sy
 800fafe:	f3bf 8f4f 	dsb	sy
 800fb02:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fb04:	bf00      	nop
 800fb06:	e7fe      	b.n	800fb06 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	2b02      	cmp	r3, #2
 800fb0c:	d103      	bne.n	800fb16 <xQueueGenericSendFromISR+0x6a>
 800fb0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb12:	2b01      	cmp	r3, #1
 800fb14:	d101      	bne.n	800fb1a <xQueueGenericSendFromISR+0x6e>
 800fb16:	2301      	movs	r3, #1
 800fb18:	e000      	b.n	800fb1c <xQueueGenericSendFromISR+0x70>
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d10a      	bne.n	800fb36 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800fb20:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800fb24:	f383 8811 	msr	BASEPRI, r3
 800fb28:	f3bf 8f6f 	isb	sy
 800fb2c:	f3bf 8f4f 	dsb	sy
 800fb30:	623b      	str	r3, [r7, #32]
}
 800fb32:	bf00      	nop
 800fb34:	e7fe      	b.n	800fb34 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fb36:	f7ff fd77 	bl	800f628 <vPortValidateInterruptPriority>
	__asm volatile
 800fb3a:	f3ef 8211 	mrs	r2, BASEPRI
 800fb3e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800fb42:	f383 8811 	msr	BASEPRI, r3
 800fb46:	f3bf 8f6f 	isb	sy
 800fb4a:	f3bf 8f4f 	dsb	sy
 800fb4e:	61fa      	str	r2, [r7, #28]
 800fb50:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800fb52:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fb54:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fb5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb5e:	429a      	cmp	r2, r3
 800fb60:	d302      	bcc.n	800fb68 <xQueueGenericSendFromISR+0xbc>
 800fb62:	683b      	ldr	r3, [r7, #0]
 800fb64:	2b02      	cmp	r3, #2
 800fb66:	d12f      	bne.n	800fbc8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fb6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb76:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fb78:	683a      	ldr	r2, [r7, #0]
 800fb7a:	68b9      	ldr	r1, [r7, #8]
 800fb7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fb7e:	f000 f911 	bl	800fda4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fb82:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800fb86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb8a:	d112      	bne.n	800fbb2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fb8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d016      	beq.n	800fbc2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fb94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb96:	3324      	adds	r3, #36	; 0x24
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f001 f90b 	bl	8010db4 <xTaskRemoveFromEventList>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d00e      	beq.n	800fbc2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d00b      	beq.n	800fbc2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	2201      	movs	r2, #1
 800fbae:	601a      	str	r2, [r3, #0]
 800fbb0:	e007      	b.n	800fbc2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fbb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fbb6:	3301      	adds	r3, #1
 800fbb8:	b2db      	uxtb	r3, r3
 800fbba:	b25a      	sxtb	r2, r3
 800fbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800fbc2:	2301      	movs	r3, #1
 800fbc4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800fbc6:	e001      	b.n	800fbcc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fbc8:	2300      	movs	r3, #0
 800fbca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fbcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbce:	617b      	str	r3, [r7, #20]
	__asm volatile
 800fbd0:	697b      	ldr	r3, [r7, #20]
 800fbd2:	f383 8811 	msr	BASEPRI, r3
}
 800fbd6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fbd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800fbda:	4618      	mov	r0, r3
 800fbdc:	3740      	adds	r7, #64	; 0x40
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}
	...

0800fbe4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b08c      	sub	sp, #48	; 0x30
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	60f8      	str	r0, [r7, #12]
 800fbec:	60b9      	str	r1, [r7, #8]
 800fbee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fbf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d10a      	bne.n	800fc14 <xQueueReceive+0x30>
	__asm volatile
 800fbfe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800fc02:	f383 8811 	msr	BASEPRI, r3
 800fc06:	f3bf 8f6f 	isb	sy
 800fc0a:	f3bf 8f4f 	dsb	sy
 800fc0e:	623b      	str	r3, [r7, #32]
}
 800fc10:	bf00      	nop
 800fc12:	e7fe      	b.n	800fc12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fc14:	68bb      	ldr	r3, [r7, #8]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d103      	bne.n	800fc22 <xQueueReceive+0x3e>
 800fc1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d101      	bne.n	800fc26 <xQueueReceive+0x42>
 800fc22:	2301      	movs	r3, #1
 800fc24:	e000      	b.n	800fc28 <xQueueReceive+0x44>
 800fc26:	2300      	movs	r3, #0
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d10a      	bne.n	800fc42 <xQueueReceive+0x5e>
	__asm volatile
 800fc2c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800fc30:	f383 8811 	msr	BASEPRI, r3
 800fc34:	f3bf 8f6f 	isb	sy
 800fc38:	f3bf 8f4f 	dsb	sy
 800fc3c:	61fb      	str	r3, [r7, #28]
}
 800fc3e:	bf00      	nop
 800fc40:	e7fe      	b.n	800fc40 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fc42:	f001 fa7b 	bl	801113c <xTaskGetSchedulerState>
 800fc46:	4603      	mov	r3, r0
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d102      	bne.n	800fc52 <xQueueReceive+0x6e>
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d101      	bne.n	800fc56 <xQueueReceive+0x72>
 800fc52:	2301      	movs	r3, #1
 800fc54:	e000      	b.n	800fc58 <xQueueReceive+0x74>
 800fc56:	2300      	movs	r3, #0
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d10a      	bne.n	800fc72 <xQueueReceive+0x8e>
	__asm volatile
 800fc5c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800fc60:	f383 8811 	msr	BASEPRI, r3
 800fc64:	f3bf 8f6f 	isb	sy
 800fc68:	f3bf 8f4f 	dsb	sy
 800fc6c:	61bb      	str	r3, [r7, #24]
}
 800fc6e:	bf00      	nop
 800fc70:	e7fe      	b.n	800fc70 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fc72:	f7ff fbf7 	bl	800f464 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fc76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc7a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d01f      	beq.n	800fcc2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fc82:	68b9      	ldr	r1, [r7, #8]
 800fc84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc86:	f000 f8f7 	bl	800fe78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc8c:	1e5a      	subs	r2, r3, #1
 800fc8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc90:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fc92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc94:	691b      	ldr	r3, [r3, #16]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d00f      	beq.n	800fcba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fc9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc9c:	3310      	adds	r3, #16
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f001 f888 	bl	8010db4 <xTaskRemoveFromEventList>
 800fca4:	4603      	mov	r3, r0
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d007      	beq.n	800fcba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fcaa:	4b3d      	ldr	r3, [pc, #244]	; (800fda0 <xQueueReceive+0x1bc>)
 800fcac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcb0:	601a      	str	r2, [r3, #0]
 800fcb2:	f3bf 8f4f 	dsb	sy
 800fcb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fcba:	f7ff fc03 	bl	800f4c4 <vPortExitCritical>
				return pdPASS;
 800fcbe:	2301      	movs	r3, #1
 800fcc0:	e069      	b.n	800fd96 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d103      	bne.n	800fcd0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fcc8:	f7ff fbfc 	bl	800f4c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fccc:	2300      	movs	r3, #0
 800fcce:	e062      	b.n	800fd96 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fcd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d106      	bne.n	800fce4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fcd6:	f107 0310 	add.w	r3, r7, #16
 800fcda:	4618      	mov	r0, r3
 800fcdc:	f001 f8ce 	bl	8010e7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fce0:	2301      	movs	r3, #1
 800fce2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fce4:	f7ff fbee 	bl	800f4c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fce8:	f000 fdfe 	bl	80108e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fcec:	f7ff fbba 	bl	800f464 <vPortEnterCritical>
 800fcf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcf2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fcf6:	b25b      	sxtb	r3, r3
 800fcf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcfc:	d103      	bne.n	800fd06 <xQueueReceive+0x122>
 800fcfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd00:	2200      	movs	r2, #0
 800fd02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fd06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fd0c:	b25b      	sxtb	r3, r3
 800fd0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd12:	d103      	bne.n	800fd1c <xQueueReceive+0x138>
 800fd14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd16:	2200      	movs	r2, #0
 800fd18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fd1c:	f7ff fbd2 	bl	800f4c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fd20:	1d3a      	adds	r2, r7, #4
 800fd22:	f107 0310 	add.w	r3, r7, #16
 800fd26:	4611      	mov	r1, r2
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f001 f8bd 	bl	8010ea8 <xTaskCheckForTimeOut>
 800fd2e:	4603      	mov	r3, r0
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d123      	bne.n	800fd7c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fd34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd36:	f000 f917 	bl	800ff68 <prvIsQueueEmpty>
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d017      	beq.n	800fd70 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd42:	3324      	adds	r3, #36	; 0x24
 800fd44:	687a      	ldr	r2, [r7, #4]
 800fd46:	4611      	mov	r1, r2
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f000 ffe3 	bl	8010d14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fd4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd50:	f000 f8b8 	bl	800fec4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fd54:	f000 fdd6 	bl	8010904 <xTaskResumeAll>
 800fd58:	4603      	mov	r3, r0
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d189      	bne.n	800fc72 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800fd5e:	4b10      	ldr	r3, [pc, #64]	; (800fda0 <xQueueReceive+0x1bc>)
 800fd60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd64:	601a      	str	r2, [r3, #0]
 800fd66:	f3bf 8f4f 	dsb	sy
 800fd6a:	f3bf 8f6f 	isb	sy
 800fd6e:	e780      	b.n	800fc72 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fd70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd72:	f000 f8a7 	bl	800fec4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fd76:	f000 fdc5 	bl	8010904 <xTaskResumeAll>
 800fd7a:	e77a      	b.n	800fc72 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fd7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd7e:	f000 f8a1 	bl	800fec4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fd82:	f000 fdbf 	bl	8010904 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fd86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd88:	f000 f8ee 	bl	800ff68 <prvIsQueueEmpty>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	f43f af6f 	beq.w	800fc72 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fd94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fd96:	4618      	mov	r0, r3
 800fd98:	3730      	adds	r7, #48	; 0x30
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	bd80      	pop	{r7, pc}
 800fd9e:	bf00      	nop
 800fda0:	e000ed04 	.word	0xe000ed04

0800fda4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b086      	sub	sp, #24
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	60f8      	str	r0, [r7, #12]
 800fdac:	60b9      	str	r1, [r7, #8]
 800fdae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdb8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d10d      	bne.n	800fdde <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d14d      	bne.n	800fe66 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	689b      	ldr	r3, [r3, #8]
 800fdce:	4618      	mov	r0, r3
 800fdd0:	f001 f9d2 	bl	8011178 <xTaskPriorityDisinherit>
 800fdd4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	2200      	movs	r2, #0
 800fdda:	609a      	str	r2, [r3, #8]
 800fddc:	e043      	b.n	800fe66 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d119      	bne.n	800fe18 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	6858      	ldr	r0, [r3, #4]
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdec:	461a      	mov	r2, r3
 800fdee:	68b9      	ldr	r1, [r7, #8]
 800fdf0:	f003 fd30 	bl	8013854 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	685a      	ldr	r2, [r3, #4]
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdfc:	441a      	add	r2, r3
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	685a      	ldr	r2, [r3, #4]
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	689b      	ldr	r3, [r3, #8]
 800fe0a:	429a      	cmp	r2, r3
 800fe0c:	d32b      	bcc.n	800fe66 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	681a      	ldr	r2, [r3, #0]
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	605a      	str	r2, [r3, #4]
 800fe16:	e026      	b.n	800fe66 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	68d8      	ldr	r0, [r3, #12]
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe20:	461a      	mov	r2, r3
 800fe22:	68b9      	ldr	r1, [r7, #8]
 800fe24:	f003 fd16 	bl	8013854 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	68da      	ldr	r2, [r3, #12]
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe30:	425b      	negs	r3, r3
 800fe32:	441a      	add	r2, r3
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	68da      	ldr	r2, [r3, #12]
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	429a      	cmp	r2, r3
 800fe42:	d207      	bcs.n	800fe54 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	689a      	ldr	r2, [r3, #8]
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe4c:	425b      	negs	r3, r3
 800fe4e:	441a      	add	r2, r3
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	2b02      	cmp	r3, #2
 800fe58:	d105      	bne.n	800fe66 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fe5a:	693b      	ldr	r3, [r7, #16]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d002      	beq.n	800fe66 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800fe60:	693b      	ldr	r3, [r7, #16]
 800fe62:	3b01      	subs	r3, #1
 800fe64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fe66:	693b      	ldr	r3, [r7, #16]
 800fe68:	1c5a      	adds	r2, r3, #1
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800fe6e:	697b      	ldr	r3, [r7, #20]
}
 800fe70:	4618      	mov	r0, r3
 800fe72:	3718      	adds	r7, #24
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}

0800fe78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b082      	sub	sp, #8
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
 800fe80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d018      	beq.n	800febc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	68da      	ldr	r2, [r3, #12]
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe92:	441a      	add	r2, r3
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	68da      	ldr	r2, [r3, #12]
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	689b      	ldr	r3, [r3, #8]
 800fea0:	429a      	cmp	r2, r3
 800fea2:	d303      	bcc.n	800feac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	681a      	ldr	r2, [r3, #0]
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	68d9      	ldr	r1, [r3, #12]
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800feb4:	461a      	mov	r2, r3
 800feb6:	6838      	ldr	r0, [r7, #0]
 800feb8:	f003 fccc 	bl	8013854 <memcpy>
	}
}
 800febc:	bf00      	nop
 800febe:	3708      	adds	r7, #8
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}

0800fec4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b084      	sub	sp, #16
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fecc:	f7ff faca 	bl	800f464 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fed6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fed8:	e011      	b.n	800fefe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d012      	beq.n	800ff08 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	3324      	adds	r3, #36	; 0x24
 800fee6:	4618      	mov	r0, r3
 800fee8:	f000 ff64 	bl	8010db4 <xTaskRemoveFromEventList>
 800feec:	4603      	mov	r3, r0
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d001      	beq.n	800fef6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fef2:	f001 f84b 	bl	8010f8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fef6:	7bfb      	ldrb	r3, [r7, #15]
 800fef8:	3b01      	subs	r3, #1
 800fefa:	b2db      	uxtb	r3, r3
 800fefc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fefe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	dce9      	bgt.n	800feda <prvUnlockQueue+0x16>
 800ff06:	e000      	b.n	800ff0a <prvUnlockQueue+0x46>
					break;
 800ff08:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	22ff      	movs	r2, #255	; 0xff
 800ff0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ff12:	f7ff fad7 	bl	800f4c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ff16:	f7ff faa5 	bl	800f464 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ff20:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ff22:	e011      	b.n	800ff48 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	691b      	ldr	r3, [r3, #16]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d012      	beq.n	800ff52 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	3310      	adds	r3, #16
 800ff30:	4618      	mov	r0, r3
 800ff32:	f000 ff3f 	bl	8010db4 <xTaskRemoveFromEventList>
 800ff36:	4603      	mov	r3, r0
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d001      	beq.n	800ff40 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ff3c:	f001 f826 	bl	8010f8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ff40:	7bbb      	ldrb	r3, [r7, #14]
 800ff42:	3b01      	subs	r3, #1
 800ff44:	b2db      	uxtb	r3, r3
 800ff46:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ff48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	dce9      	bgt.n	800ff24 <prvUnlockQueue+0x60>
 800ff50:	e000      	b.n	800ff54 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ff52:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	22ff      	movs	r2, #255	; 0xff
 800ff58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ff5c:	f7ff fab2 	bl	800f4c4 <vPortExitCritical>
}
 800ff60:	bf00      	nop
 800ff62:	3710      	adds	r7, #16
 800ff64:	46bd      	mov	sp, r7
 800ff66:	bd80      	pop	{r7, pc}

0800ff68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b084      	sub	sp, #16
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ff70:	f7ff fa78 	bl	800f464 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d102      	bne.n	800ff82 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ff7c:	2301      	movs	r3, #1
 800ff7e:	60fb      	str	r3, [r7, #12]
 800ff80:	e001      	b.n	800ff86 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ff82:	2300      	movs	r3, #0
 800ff84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ff86:	f7ff fa9d 	bl	800f4c4 <vPortExitCritical>

	return xReturn;
 800ff8a:	68fb      	ldr	r3, [r7, #12]
}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	3710      	adds	r7, #16
 800ff90:	46bd      	mov	sp, r7
 800ff92:	bd80      	pop	{r7, pc}

0800ff94 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b084      	sub	sp, #16
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ff9c:	f7ff fa62 	bl	800f464 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ffa8:	429a      	cmp	r2, r3
 800ffaa:	d102      	bne.n	800ffb2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ffac:	2301      	movs	r3, #1
 800ffae:	60fb      	str	r3, [r7, #12]
 800ffb0:	e001      	b.n	800ffb6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ffb6:	f7ff fa85 	bl	800f4c4 <vPortExitCritical>

	return xReturn;
 800ffba:	68fb      	ldr	r3, [r7, #12]
}
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	3710      	adds	r7, #16
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	bd80      	pop	{r7, pc}

0800ffc4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ffc4:	b480      	push	{r7}
 800ffc6:	b085      	sub	sp, #20
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
 800ffcc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ffce:	2300      	movs	r3, #0
 800ffd0:	60fb      	str	r3, [r7, #12]
 800ffd2:	e014      	b.n	800fffe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ffd4:	4a0f      	ldr	r2, [pc, #60]	; (8010014 <vQueueAddToRegistry+0x50>)
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d10b      	bne.n	800fff8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ffe0:	490c      	ldr	r1, [pc, #48]	; (8010014 <vQueueAddToRegistry+0x50>)
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	683a      	ldr	r2, [r7, #0]
 800ffe6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ffea:	4a0a      	ldr	r2, [pc, #40]	; (8010014 <vQueueAddToRegistry+0x50>)
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	00db      	lsls	r3, r3, #3
 800fff0:	4413      	add	r3, r2
 800fff2:	687a      	ldr	r2, [r7, #4]
 800fff4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800fff6:	e006      	b.n	8010006 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	3301      	adds	r3, #1
 800fffc:	60fb      	str	r3, [r7, #12]
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	2b07      	cmp	r3, #7
 8010002:	d9e7      	bls.n	800ffd4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010004:	bf00      	nop
 8010006:	bf00      	nop
 8010008:	3714      	adds	r7, #20
 801000a:	46bd      	mov	sp, r7
 801000c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010010:	4770      	bx	lr
 8010012:	bf00      	nop
 8010014:	20007db4 	.word	0x20007db4

08010018 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010018:	b580      	push	{r7, lr}
 801001a:	b086      	sub	sp, #24
 801001c:	af00      	add	r7, sp, #0
 801001e:	60f8      	str	r0, [r7, #12]
 8010020:	60b9      	str	r1, [r7, #8]
 8010022:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010028:	f7ff fa1c 	bl	800f464 <vPortEnterCritical>
 801002c:	697b      	ldr	r3, [r7, #20]
 801002e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010032:	b25b      	sxtb	r3, r3
 8010034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010038:	d103      	bne.n	8010042 <vQueueWaitForMessageRestricted+0x2a>
 801003a:	697b      	ldr	r3, [r7, #20]
 801003c:	2200      	movs	r2, #0
 801003e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010042:	697b      	ldr	r3, [r7, #20]
 8010044:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010048:	b25b      	sxtb	r3, r3
 801004a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801004e:	d103      	bne.n	8010058 <vQueueWaitForMessageRestricted+0x40>
 8010050:	697b      	ldr	r3, [r7, #20]
 8010052:	2200      	movs	r2, #0
 8010054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010058:	f7ff fa34 	bl	800f4c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801005c:	697b      	ldr	r3, [r7, #20]
 801005e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010060:	2b00      	cmp	r3, #0
 8010062:	d106      	bne.n	8010072 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010064:	697b      	ldr	r3, [r7, #20]
 8010066:	3324      	adds	r3, #36	; 0x24
 8010068:	687a      	ldr	r2, [r7, #4]
 801006a:	68b9      	ldr	r1, [r7, #8]
 801006c:	4618      	mov	r0, r3
 801006e:	f000 fe75 	bl	8010d5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010072:	6978      	ldr	r0, [r7, #20]
 8010074:	f7ff ff26 	bl	800fec4 <prvUnlockQueue>
	}
 8010078:	bf00      	nop
 801007a:	3718      	adds	r7, #24
 801007c:	46bd      	mov	sp, r7
 801007e:	bd80      	pop	{r7, pc}

08010080 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010080:	b580      	push	{r7, lr}
 8010082:	b08e      	sub	sp, #56	; 0x38
 8010084:	af04      	add	r7, sp, #16
 8010086:	60f8      	str	r0, [r7, #12]
 8010088:	60b9      	str	r1, [r7, #8]
 801008a:	607a      	str	r2, [r7, #4]
 801008c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801008e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010090:	2b00      	cmp	r3, #0
 8010092:	d10a      	bne.n	80100aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8010094:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8010098:	f383 8811 	msr	BASEPRI, r3
 801009c:	f3bf 8f6f 	isb	sy
 80100a0:	f3bf 8f4f 	dsb	sy
 80100a4:	623b      	str	r3, [r7, #32]
}
 80100a6:	bf00      	nop
 80100a8:	e7fe      	b.n	80100a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80100aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d10a      	bne.n	80100c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80100b0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80100b4:	f383 8811 	msr	BASEPRI, r3
 80100b8:	f3bf 8f6f 	isb	sy
 80100bc:	f3bf 8f4f 	dsb	sy
 80100c0:	61fb      	str	r3, [r7, #28]
}
 80100c2:	bf00      	nop
 80100c4:	e7fe      	b.n	80100c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80100c6:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 80100ca:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80100cc:	693b      	ldr	r3, [r7, #16]
 80100ce:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 80100d2:	d00a      	beq.n	80100ea <xTaskCreateStatic+0x6a>
	__asm volatile
 80100d4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80100d8:	f383 8811 	msr	BASEPRI, r3
 80100dc:	f3bf 8f6f 	isb	sy
 80100e0:	f3bf 8f4f 	dsb	sy
 80100e4:	61bb      	str	r3, [r7, #24]
}
 80100e6:	bf00      	nop
 80100e8:	e7fe      	b.n	80100e8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80100ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80100ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d01e      	beq.n	8010130 <xTaskCreateStatic+0xb0>
 80100f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d01b      	beq.n	8010130 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80100f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80100fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010100:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010104:	2202      	movs	r2, #2
 8010106:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801010a:	2300      	movs	r3, #0
 801010c:	9303      	str	r3, [sp, #12]
 801010e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010110:	9302      	str	r3, [sp, #8]
 8010112:	f107 0314 	add.w	r3, r7, #20
 8010116:	9301      	str	r3, [sp, #4]
 8010118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801011a:	9300      	str	r3, [sp, #0]
 801011c:	683b      	ldr	r3, [r7, #0]
 801011e:	687a      	ldr	r2, [r7, #4]
 8010120:	68b9      	ldr	r1, [r7, #8]
 8010122:	68f8      	ldr	r0, [r7, #12]
 8010124:	f000 f852 	bl	80101cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010128:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801012a:	f000 f907 	bl	801033c <prvAddNewTaskToReadyList>
 801012e:	e001      	b.n	8010134 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8010130:	2300      	movs	r3, #0
 8010132:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010134:	697b      	ldr	r3, [r7, #20]
	}
 8010136:	4618      	mov	r0, r3
 8010138:	3728      	adds	r7, #40	; 0x28
 801013a:	46bd      	mov	sp, r7
 801013c:	bd80      	pop	{r7, pc}

0801013e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801013e:	b580      	push	{r7, lr}
 8010140:	b08c      	sub	sp, #48	; 0x30
 8010142:	af04      	add	r7, sp, #16
 8010144:	60f8      	str	r0, [r7, #12]
 8010146:	60b9      	str	r1, [r7, #8]
 8010148:	603b      	str	r3, [r7, #0]
 801014a:	4613      	mov	r3, r2
 801014c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801014e:	88fb      	ldrh	r3, [r7, #6]
 8010150:	009b      	lsls	r3, r3, #2
 8010152:	4618      	mov	r0, r3
 8010154:	f7fe ff44 	bl	800efe0 <pvPortMalloc>
 8010158:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801015a:	697b      	ldr	r3, [r7, #20]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d00f      	beq.n	8010180 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010160:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8010164:	f7fe ff3c 	bl	800efe0 <pvPortMalloc>
 8010168:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801016a:	69fb      	ldr	r3, [r7, #28]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d003      	beq.n	8010178 <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010170:	69fb      	ldr	r3, [r7, #28]
 8010172:	697a      	ldr	r2, [r7, #20]
 8010174:	631a      	str	r2, [r3, #48]	; 0x30
 8010176:	e005      	b.n	8010184 <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010178:	6978      	ldr	r0, [r7, #20]
 801017a:	f7fe ff7b 	bl	800f074 <vPortFree>
 801017e:	e001      	b.n	8010184 <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010180:	2300      	movs	r3, #0
 8010182:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010184:	69fb      	ldr	r3, [r7, #28]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d017      	beq.n	80101ba <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801018a:	69fb      	ldr	r3, [r7, #28]
 801018c:	2200      	movs	r2, #0
 801018e:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010192:	88fa      	ldrh	r2, [r7, #6]
 8010194:	2300      	movs	r3, #0
 8010196:	9303      	str	r3, [sp, #12]
 8010198:	69fb      	ldr	r3, [r7, #28]
 801019a:	9302      	str	r3, [sp, #8]
 801019c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801019e:	9301      	str	r3, [sp, #4]
 80101a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101a2:	9300      	str	r3, [sp, #0]
 80101a4:	683b      	ldr	r3, [r7, #0]
 80101a6:	68b9      	ldr	r1, [r7, #8]
 80101a8:	68f8      	ldr	r0, [r7, #12]
 80101aa:	f000 f80f 	bl	80101cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80101ae:	69f8      	ldr	r0, [r7, #28]
 80101b0:	f000 f8c4 	bl	801033c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80101b4:	2301      	movs	r3, #1
 80101b6:	61bb      	str	r3, [r7, #24]
 80101b8:	e002      	b.n	80101c0 <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80101ba:	f04f 33ff 	mov.w	r3, #4294967295
 80101be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80101c0:	69bb      	ldr	r3, [r7, #24]
	}
 80101c2:	4618      	mov	r0, r3
 80101c4:	3720      	adds	r7, #32
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bd80      	pop	{r7, pc}
	...

080101cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b088      	sub	sp, #32
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	60f8      	str	r0, [r7, #12]
 80101d4:	60b9      	str	r1, [r7, #8]
 80101d6:	607a      	str	r2, [r7, #4]
 80101d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80101da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	009b      	lsls	r3, r3, #2
 80101e2:	461a      	mov	r2, r3
 80101e4:	21a5      	movs	r1, #165	; 0xa5
 80101e6:	f003 fb43 	bl	8013870 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80101ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80101f4:	3b01      	subs	r3, #1
 80101f6:	009b      	lsls	r3, r3, #2
 80101f8:	4413      	add	r3, r2
 80101fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80101fc:	69bb      	ldr	r3, [r7, #24]
 80101fe:	f023 0307 	bic.w	r3, r3, #7
 8010202:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010204:	69bb      	ldr	r3, [r7, #24]
 8010206:	f003 0307 	and.w	r3, r3, #7
 801020a:	2b00      	cmp	r3, #0
 801020c:	d00a      	beq.n	8010224 <prvInitialiseNewTask+0x58>
	__asm volatile
 801020e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8010212:	f383 8811 	msr	BASEPRI, r3
 8010216:	f3bf 8f6f 	isb	sy
 801021a:	f3bf 8f4f 	dsb	sy
 801021e:	617b      	str	r3, [r7, #20]
}
 8010220:	bf00      	nop
 8010222:	e7fe      	b.n	8010222 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8010224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010226:	69ba      	ldr	r2, [r7, #24]
 8010228:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801022c:	68bb      	ldr	r3, [r7, #8]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d01f      	beq.n	8010272 <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010232:	2300      	movs	r3, #0
 8010234:	61fb      	str	r3, [r7, #28]
 8010236:	e012      	b.n	801025e <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010238:	68ba      	ldr	r2, [r7, #8]
 801023a:	69fb      	ldr	r3, [r7, #28]
 801023c:	4413      	add	r3, r2
 801023e:	7819      	ldrb	r1, [r3, #0]
 8010240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010242:	69fb      	ldr	r3, [r7, #28]
 8010244:	4413      	add	r3, r2
 8010246:	3334      	adds	r3, #52	; 0x34
 8010248:	460a      	mov	r2, r1
 801024a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801024c:	68ba      	ldr	r2, [r7, #8]
 801024e:	69fb      	ldr	r3, [r7, #28]
 8010250:	4413      	add	r3, r2
 8010252:	781b      	ldrb	r3, [r3, #0]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d006      	beq.n	8010266 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010258:	69fb      	ldr	r3, [r7, #28]
 801025a:	3301      	adds	r3, #1
 801025c:	61fb      	str	r3, [r7, #28]
 801025e:	69fb      	ldr	r3, [r7, #28]
 8010260:	2bfe      	cmp	r3, #254	; 0xfe
 8010262:	d9e9      	bls.n	8010238 <prvInitialiseNewTask+0x6c>
 8010264:	e000      	b.n	8010268 <prvInitialiseNewTask+0x9c>
			{
				break;
 8010266:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801026a:	2200      	movs	r2, #0
 801026c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 8010270:	e003      	b.n	801027a <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010274:	2200      	movs	r2, #0
 8010276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801027a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801027c:	2b37      	cmp	r3, #55	; 0x37
 801027e:	d901      	bls.n	8010284 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010280:	2337      	movs	r3, #55	; 0x37
 8010282:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010288:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801028a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801028c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801028e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		pxNewTCB->uxMutexesHeld = 0;
 8010292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010294:	2200      	movs	r2, #0
 8010296:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801029a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801029c:	3304      	adds	r3, #4
 801029e:	4618      	mov	r0, r3
 80102a0:	f7fe ff20 	bl	800f0e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80102a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102a6:	3318      	adds	r3, #24
 80102a8:	4618      	mov	r0, r3
 80102aa:	f7fe ff1b 	bl	800f0e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80102ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80102b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80102ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80102be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80102c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102c6:	2200      	movs	r2, #0
 80102c8:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80102cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ce:	2200      	movs	r2, #0
 80102d0:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80102d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102d6:	2200      	movs	r2, #0
 80102d8:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80102dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102de:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80102e2:	2260      	movs	r2, #96	; 0x60
 80102e4:	2100      	movs	r1, #0
 80102e6:	4618      	mov	r0, r3
 80102e8:	f003 fac2 	bl	8013870 <memset>
 80102ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ee:	4a10      	ldr	r2, [pc, #64]	; (8010330 <prvInitialiseNewTask+0x164>)
 80102f0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 80102f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102f6:	4a0f      	ldr	r2, [pc, #60]	; (8010334 <prvInitialiseNewTask+0x168>)
 80102f8:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 80102fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102fe:	4a0e      	ldr	r2, [pc, #56]	; (8010338 <prvInitialiseNewTask+0x16c>)
 8010300:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8010304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010306:	2200      	movs	r2, #0
 8010308:	f883 21b2 	strb.w	r2, [r3, #434]	; 0x1b2
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801030c:	683a      	ldr	r2, [r7, #0]
 801030e:	68f9      	ldr	r1, [r7, #12]
 8010310:	69b8      	ldr	r0, [r7, #24]
 8010312:	f7fe ff7b 	bl	800f20c <pxPortInitialiseStack>
 8010316:	4602      	mov	r2, r0
 8010318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801031a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801031c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801031e:	2b00      	cmp	r3, #0
 8010320:	d002      	beq.n	8010328 <prvInitialiseNewTask+0x15c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010326:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010328:	bf00      	nop
 801032a:	3720      	adds	r7, #32
 801032c:	46bd      	mov	sp, r7
 801032e:	bd80      	pop	{r7, pc}
 8010330:	080149c8 	.word	0x080149c8
 8010334:	080149e8 	.word	0x080149e8
 8010338:	080149a8 	.word	0x080149a8

0801033c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b082      	sub	sp, #8
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010344:	f7ff f88e 	bl	800f464 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010348:	4b2d      	ldr	r3, [pc, #180]	; (8010400 <prvAddNewTaskToReadyList+0xc4>)
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	3301      	adds	r3, #1
 801034e:	4a2c      	ldr	r2, [pc, #176]	; (8010400 <prvAddNewTaskToReadyList+0xc4>)
 8010350:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010352:	4b2c      	ldr	r3, [pc, #176]	; (8010404 <prvAddNewTaskToReadyList+0xc8>)
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d109      	bne.n	801036e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801035a:	4a2a      	ldr	r2, [pc, #168]	; (8010404 <prvAddNewTaskToReadyList+0xc8>)
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010360:	4b27      	ldr	r3, [pc, #156]	; (8010400 <prvAddNewTaskToReadyList+0xc4>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	2b01      	cmp	r3, #1
 8010366:	d110      	bne.n	801038a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010368:	f000 fe24 	bl	8010fb4 <prvInitialiseTaskLists>
 801036c:	e00d      	b.n	801038a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801036e:	4b26      	ldr	r3, [pc, #152]	; (8010408 <prvAddNewTaskToReadyList+0xcc>)
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d109      	bne.n	801038a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010376:	4b23      	ldr	r3, [pc, #140]	; (8010404 <prvAddNewTaskToReadyList+0xc8>)
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010380:	429a      	cmp	r2, r3
 8010382:	d802      	bhi.n	801038a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010384:	4a1f      	ldr	r2, [pc, #124]	; (8010404 <prvAddNewTaskToReadyList+0xc8>)
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801038a:	4b20      	ldr	r3, [pc, #128]	; (801040c <prvAddNewTaskToReadyList+0xd0>)
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	3301      	adds	r3, #1
 8010390:	4a1e      	ldr	r2, [pc, #120]	; (801040c <prvAddNewTaskToReadyList+0xd0>)
 8010392:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010394:	4b1d      	ldr	r3, [pc, #116]	; (801040c <prvAddNewTaskToReadyList+0xd0>)
 8010396:	681a      	ldr	r2, [r3, #0]
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103a2:	4b1b      	ldr	r3, [pc, #108]	; (8010410 <prvAddNewTaskToReadyList+0xd4>)
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	429a      	cmp	r2, r3
 80103a8:	d903      	bls.n	80103b2 <prvAddNewTaskToReadyList+0x76>
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103ae:	4a18      	ldr	r2, [pc, #96]	; (8010410 <prvAddNewTaskToReadyList+0xd4>)
 80103b0:	6013      	str	r3, [r2, #0]
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103b6:	4613      	mov	r3, r2
 80103b8:	009b      	lsls	r3, r3, #2
 80103ba:	4413      	add	r3, r2
 80103bc:	009b      	lsls	r3, r3, #2
 80103be:	4a15      	ldr	r2, [pc, #84]	; (8010414 <prvAddNewTaskToReadyList+0xd8>)
 80103c0:	441a      	add	r2, r3
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	3304      	adds	r3, #4
 80103c6:	4619      	mov	r1, r3
 80103c8:	4610      	mov	r0, r2
 80103ca:	f7fe fe98 	bl	800f0fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80103ce:	f7ff f879 	bl	800f4c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80103d2:	4b0d      	ldr	r3, [pc, #52]	; (8010408 <prvAddNewTaskToReadyList+0xcc>)
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d00e      	beq.n	80103f8 <prvAddNewTaskToReadyList+0xbc>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80103da:	4b0a      	ldr	r3, [pc, #40]	; (8010404 <prvAddNewTaskToReadyList+0xc8>)
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103e4:	429a      	cmp	r2, r3
 80103e6:	d207      	bcs.n	80103f8 <prvAddNewTaskToReadyList+0xbc>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80103e8:	4b0b      	ldr	r3, [pc, #44]	; (8010418 <prvAddNewTaskToReadyList+0xdc>)
 80103ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103ee:	601a      	str	r2, [r3, #0]
 80103f0:	f3bf 8f4f 	dsb	sy
 80103f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80103f8:	bf00      	nop
 80103fa:	3708      	adds	r7, #8
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}
 8010400:	200082cc 	.word	0x200082cc
 8010404:	20007df4 	.word	0x20007df4
 8010408:	200082d8 	.word	0x200082d8
 801040c:	200082e8 	.word	0x200082e8
 8010410:	200082d4 	.word	0x200082d4
 8010414:	20007df8 	.word	0x20007df8
 8010418:	e000ed04 	.word	0xe000ed04

0801041c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 801041c:	b580      	push	{r7, lr}
 801041e:	b08a      	sub	sp, #40	; 0x28
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
 8010424:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8010426:	2300      	movs	r3, #0
 8010428:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d10a      	bne.n	8010446 <vTaskDelayUntil+0x2a>
	__asm volatile
 8010430:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8010434:	f383 8811 	msr	BASEPRI, r3
 8010438:	f3bf 8f6f 	isb	sy
 801043c:	f3bf 8f4f 	dsb	sy
 8010440:	617b      	str	r3, [r7, #20]
}
 8010442:	bf00      	nop
 8010444:	e7fe      	b.n	8010444 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8010446:	683b      	ldr	r3, [r7, #0]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d10a      	bne.n	8010462 <vTaskDelayUntil+0x46>
	__asm volatile
 801044c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8010450:	f383 8811 	msr	BASEPRI, r3
 8010454:	f3bf 8f6f 	isb	sy
 8010458:	f3bf 8f4f 	dsb	sy
 801045c:	613b      	str	r3, [r7, #16]
}
 801045e:	bf00      	nop
 8010460:	e7fe      	b.n	8010460 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8010462:	4b2a      	ldr	r3, [pc, #168]	; (801050c <vTaskDelayUntil+0xf0>)
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d00a      	beq.n	8010480 <vTaskDelayUntil+0x64>
	__asm volatile
 801046a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801046e:	f383 8811 	msr	BASEPRI, r3
 8010472:	f3bf 8f6f 	isb	sy
 8010476:	f3bf 8f4f 	dsb	sy
 801047a:	60fb      	str	r3, [r7, #12]
}
 801047c:	bf00      	nop
 801047e:	e7fe      	b.n	801047e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8010480:	f000 fa32 	bl	80108e8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8010484:	4b22      	ldr	r3, [pc, #136]	; (8010510 <vTaskDelayUntil+0xf4>)
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	683a      	ldr	r2, [r7, #0]
 8010490:	4413      	add	r3, r2
 8010492:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	6a3a      	ldr	r2, [r7, #32]
 801049a:	429a      	cmp	r2, r3
 801049c:	d20b      	bcs.n	80104b6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	69fa      	ldr	r2, [r7, #28]
 80104a4:	429a      	cmp	r2, r3
 80104a6:	d211      	bcs.n	80104cc <vTaskDelayUntil+0xb0>
 80104a8:	69fa      	ldr	r2, [r7, #28]
 80104aa:	6a3b      	ldr	r3, [r7, #32]
 80104ac:	429a      	cmp	r2, r3
 80104ae:	d90d      	bls.n	80104cc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80104b0:	2301      	movs	r3, #1
 80104b2:	627b      	str	r3, [r7, #36]	; 0x24
 80104b4:	e00a      	b.n	80104cc <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	69fa      	ldr	r2, [r7, #28]
 80104bc:	429a      	cmp	r2, r3
 80104be:	d303      	bcc.n	80104c8 <vTaskDelayUntil+0xac>
 80104c0:	69fa      	ldr	r2, [r7, #28]
 80104c2:	6a3b      	ldr	r3, [r7, #32]
 80104c4:	429a      	cmp	r2, r3
 80104c6:	d901      	bls.n	80104cc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80104c8:	2301      	movs	r3, #1
 80104ca:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	69fa      	ldr	r2, [r7, #28]
 80104d0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80104d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d006      	beq.n	80104e6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80104d8:	69fa      	ldr	r2, [r7, #28]
 80104da:	6a3b      	ldr	r3, [r7, #32]
 80104dc:	1ad3      	subs	r3, r2, r3
 80104de:	2100      	movs	r1, #0
 80104e0:	4618      	mov	r0, r3
 80104e2:	f000 febd 	bl	8011260 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80104e6:	f000 fa0d 	bl	8010904 <xTaskResumeAll>
 80104ea:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80104ec:	69bb      	ldr	r3, [r7, #24]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d107      	bne.n	8010502 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80104f2:	4b08      	ldr	r3, [pc, #32]	; (8010514 <vTaskDelayUntil+0xf8>)
 80104f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104f8:	601a      	str	r2, [r3, #0]
 80104fa:	f3bf 8f4f 	dsb	sy
 80104fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010502:	bf00      	nop
 8010504:	3728      	adds	r7, #40	; 0x28
 8010506:	46bd      	mov	sp, r7
 8010508:	bd80      	pop	{r7, pc}
 801050a:	bf00      	nop
 801050c:	200082f4 	.word	0x200082f4
 8010510:	200082d0 	.word	0x200082d0
 8010514:	e000ed04 	.word	0xe000ed04

08010518 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8010518:	b580      	push	{r7, lr}
 801051a:	b084      	sub	sp, #16
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8010520:	f7fe ffa0 	bl	800f464 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d102      	bne.n	8010530 <vTaskSuspend+0x18>
 801052a:	4b30      	ldr	r3, [pc, #192]	; (80105ec <vTaskSuspend+0xd4>)
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	e000      	b.n	8010532 <vTaskSuspend+0x1a>
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	3304      	adds	r3, #4
 8010538:	4618      	mov	r0, r3
 801053a:	f7fe fe3d 	bl	800f1b8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010542:	2b00      	cmp	r3, #0
 8010544:	d004      	beq.n	8010550 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	3318      	adds	r3, #24
 801054a:	4618      	mov	r0, r3
 801054c:	f7fe fe34 	bl	800f1b8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	3304      	adds	r3, #4
 8010554:	4619      	mov	r1, r3
 8010556:	4826      	ldr	r0, [pc, #152]	; (80105f0 <vTaskSuspend+0xd8>)
 8010558:	f7fe fdd1 	bl	800f0fe <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	f893 31b0 	ldrb.w	r3, [r3, #432]	; 0x1b0
 8010562:	b2db      	uxtb	r3, r3
 8010564:	2b01      	cmp	r3, #1
 8010566:	d103      	bne.n	8010570 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	2200      	movs	r2, #0
 801056c:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8010570:	f7fe ffa8 	bl	800f4c4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8010574:	4b1f      	ldr	r3, [pc, #124]	; (80105f4 <vTaskSuspend+0xdc>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d005      	beq.n	8010588 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 801057c:	f7fe ff72 	bl	800f464 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8010580:	f000 fdbc 	bl	80110fc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8010584:	f7fe ff9e 	bl	800f4c4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8010588:	4b18      	ldr	r3, [pc, #96]	; (80105ec <vTaskSuspend+0xd4>)
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	68fa      	ldr	r2, [r7, #12]
 801058e:	429a      	cmp	r2, r3
 8010590:	d127      	bne.n	80105e2 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8010592:	4b18      	ldr	r3, [pc, #96]	; (80105f4 <vTaskSuspend+0xdc>)
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d017      	beq.n	80105ca <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 801059a:	4b17      	ldr	r3, [pc, #92]	; (80105f8 <vTaskSuspend+0xe0>)
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d00a      	beq.n	80105b8 <vTaskSuspend+0xa0>
	__asm volatile
 80105a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80105a6:	f383 8811 	msr	BASEPRI, r3
 80105aa:	f3bf 8f6f 	isb	sy
 80105ae:	f3bf 8f4f 	dsb	sy
 80105b2:	60bb      	str	r3, [r7, #8]
}
 80105b4:	bf00      	nop
 80105b6:	e7fe      	b.n	80105b6 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80105b8:	4b10      	ldr	r3, [pc, #64]	; (80105fc <vTaskSuspend+0xe4>)
 80105ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105be:	601a      	str	r2, [r3, #0]
 80105c0:	f3bf 8f4f 	dsb	sy
 80105c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80105c8:	e00b      	b.n	80105e2 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80105ca:	4b09      	ldr	r3, [pc, #36]	; (80105f0 <vTaskSuspend+0xd8>)
 80105cc:	681a      	ldr	r2, [r3, #0]
 80105ce:	4b0c      	ldr	r3, [pc, #48]	; (8010600 <vTaskSuspend+0xe8>)
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	429a      	cmp	r2, r3
 80105d4:	d103      	bne.n	80105de <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80105d6:	4b05      	ldr	r3, [pc, #20]	; (80105ec <vTaskSuspend+0xd4>)
 80105d8:	2200      	movs	r2, #0
 80105da:	601a      	str	r2, [r3, #0]
	}
 80105dc:	e001      	b.n	80105e2 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 80105de:	f000 fb01 	bl	8010be4 <vTaskSwitchContext>
	}
 80105e2:	bf00      	nop
 80105e4:	3710      	adds	r7, #16
 80105e6:	46bd      	mov	sp, r7
 80105e8:	bd80      	pop	{r7, pc}
 80105ea:	bf00      	nop
 80105ec:	20007df4 	.word	0x20007df4
 80105f0:	200082b4 	.word	0x200082b4
 80105f4:	200082d8 	.word	0x200082d8
 80105f8:	200082f4 	.word	0x200082f4
 80105fc:	e000ed04 	.word	0xe000ed04
 8010600:	200082cc 	.word	0x200082cc

08010604 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8010604:	b480      	push	{r7}
 8010606:	b087      	sub	sp, #28
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 801060c:	2300      	movs	r3, #0
 801060e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d10a      	bne.n	8010630 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 801061a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801061e:	f383 8811 	msr	BASEPRI, r3
 8010622:	f3bf 8f6f 	isb	sy
 8010626:	f3bf 8f4f 	dsb	sy
 801062a:	60fb      	str	r3, [r7, #12]
}
 801062c:	bf00      	nop
 801062e:	e7fe      	b.n	801062e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010630:	693b      	ldr	r3, [r7, #16]
 8010632:	695b      	ldr	r3, [r3, #20]
 8010634:	4a0a      	ldr	r2, [pc, #40]	; (8010660 <prvTaskIsTaskSuspended+0x5c>)
 8010636:	4293      	cmp	r3, r2
 8010638:	d10a      	bne.n	8010650 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 801063a:	693b      	ldr	r3, [r7, #16]
 801063c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801063e:	4a09      	ldr	r2, [pc, #36]	; (8010664 <prvTaskIsTaskSuspended+0x60>)
 8010640:	4293      	cmp	r3, r2
 8010642:	d005      	beq.n	8010650 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8010644:	693b      	ldr	r3, [r7, #16]
 8010646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010648:	2b00      	cmp	r3, #0
 801064a:	d101      	bne.n	8010650 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 801064c:	2301      	movs	r3, #1
 801064e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010650:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8010652:	4618      	mov	r0, r3
 8010654:	371c      	adds	r7, #28
 8010656:	46bd      	mov	sp, r7
 8010658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065c:	4770      	bx	lr
 801065e:	bf00      	nop
 8010660:	200082b4 	.word	0x200082b4
 8010664:	20008288 	.word	0x20008288

08010668 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8010668:	b580      	push	{r7, lr}
 801066a:	b084      	sub	sp, #16
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d10a      	bne.n	8010690 <vTaskResume+0x28>
	__asm volatile
 801067a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801067e:	f383 8811 	msr	BASEPRI, r3
 8010682:	f3bf 8f6f 	isb	sy
 8010686:	f3bf 8f4f 	dsb	sy
 801068a:	60bb      	str	r3, [r7, #8]
}
 801068c:	bf00      	nop
 801068e:	e7fe      	b.n	801068e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8010690:	4b20      	ldr	r3, [pc, #128]	; (8010714 <vTaskResume+0xac>)
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	68fa      	ldr	r2, [r7, #12]
 8010696:	429a      	cmp	r2, r3
 8010698:	d038      	beq.n	801070c <vTaskResume+0xa4>
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d035      	beq.n	801070c <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 80106a0:	f7fe fee0 	bl	800f464 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80106a4:	68f8      	ldr	r0, [r7, #12]
 80106a6:	f7ff ffad 	bl	8010604 <prvTaskIsTaskSuspended>
 80106aa:	4603      	mov	r3, r0
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d02b      	beq.n	8010708 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	3304      	adds	r3, #4
 80106b4:	4618      	mov	r0, r3
 80106b6:	f7fe fd7f 	bl	800f1b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106be:	4b16      	ldr	r3, [pc, #88]	; (8010718 <vTaskResume+0xb0>)
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	429a      	cmp	r2, r3
 80106c4:	d903      	bls.n	80106ce <vTaskResume+0x66>
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106ca:	4a13      	ldr	r2, [pc, #76]	; (8010718 <vTaskResume+0xb0>)
 80106cc:	6013      	str	r3, [r2, #0]
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106d2:	4613      	mov	r3, r2
 80106d4:	009b      	lsls	r3, r3, #2
 80106d6:	4413      	add	r3, r2
 80106d8:	009b      	lsls	r3, r3, #2
 80106da:	4a10      	ldr	r2, [pc, #64]	; (801071c <vTaskResume+0xb4>)
 80106dc:	441a      	add	r2, r3
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	3304      	adds	r3, #4
 80106e2:	4619      	mov	r1, r3
 80106e4:	4610      	mov	r0, r2
 80106e6:	f7fe fd0a 	bl	800f0fe <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106ee:	4b09      	ldr	r3, [pc, #36]	; (8010714 <vTaskResume+0xac>)
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106f4:	429a      	cmp	r2, r3
 80106f6:	d307      	bcc.n	8010708 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80106f8:	4b09      	ldr	r3, [pc, #36]	; (8010720 <vTaskResume+0xb8>)
 80106fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106fe:	601a      	str	r2, [r3, #0]
 8010700:	f3bf 8f4f 	dsb	sy
 8010704:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8010708:	f7fe fedc 	bl	800f4c4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801070c:	bf00      	nop
 801070e:	3710      	adds	r7, #16
 8010710:	46bd      	mov	sp, r7
 8010712:	bd80      	pop	{r7, pc}
 8010714:	20007df4 	.word	0x20007df4
 8010718:	200082d4 	.word	0x200082d4
 801071c:	20007df8 	.word	0x20007df8
 8010720:	e000ed04 	.word	0xe000ed04

08010724 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8010724:	b580      	push	{r7, lr}
 8010726:	b08a      	sub	sp, #40	; 0x28
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 801072c:	2300      	movs	r3, #0
 801072e:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d10a      	bne.n	8010750 <xTaskResumeFromISR+0x2c>
	__asm volatile
 801073a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801073e:	f383 8811 	msr	BASEPRI, r3
 8010742:	f3bf 8f6f 	isb	sy
 8010746:	f3bf 8f4f 	dsb	sy
 801074a:	61bb      	str	r3, [r7, #24]
}
 801074c:	bf00      	nop
 801074e:	e7fe      	b.n	801074e <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010750:	f7fe ff6a 	bl	800f628 <vPortValidateInterruptPriority>
	__asm volatile
 8010754:	f3ef 8211 	mrs	r2, BASEPRI
 8010758:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801075c:	f383 8811 	msr	BASEPRI, r3
 8010760:	f3bf 8f6f 	isb	sy
 8010764:	f3bf 8f4f 	dsb	sy
 8010768:	617a      	str	r2, [r7, #20]
 801076a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801076c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801076e:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8010770:	6a38      	ldr	r0, [r7, #32]
 8010772:	f7ff ff47 	bl	8010604 <prvTaskIsTaskSuspended>
 8010776:	4603      	mov	r3, r0
 8010778:	2b00      	cmp	r3, #0
 801077a:	d030      	beq.n	80107de <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801077c:	4b1d      	ldr	r3, [pc, #116]	; (80107f4 <xTaskResumeFromISR+0xd0>)
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d126      	bne.n	80107d2 <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010784:	6a3b      	ldr	r3, [r7, #32]
 8010786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010788:	4b1b      	ldr	r3, [pc, #108]	; (80107f8 <xTaskResumeFromISR+0xd4>)
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801078e:	429a      	cmp	r2, r3
 8010790:	d301      	bcc.n	8010796 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8010792:	2301      	movs	r3, #1
 8010794:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010796:	6a3b      	ldr	r3, [r7, #32]
 8010798:	3304      	adds	r3, #4
 801079a:	4618      	mov	r0, r3
 801079c:	f7fe fd0c 	bl	800f1b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80107a0:	6a3b      	ldr	r3, [r7, #32]
 80107a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107a4:	4b15      	ldr	r3, [pc, #84]	; (80107fc <xTaskResumeFromISR+0xd8>)
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	429a      	cmp	r2, r3
 80107aa:	d903      	bls.n	80107b4 <xTaskResumeFromISR+0x90>
 80107ac:	6a3b      	ldr	r3, [r7, #32]
 80107ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107b0:	4a12      	ldr	r2, [pc, #72]	; (80107fc <xTaskResumeFromISR+0xd8>)
 80107b2:	6013      	str	r3, [r2, #0]
 80107b4:	6a3b      	ldr	r3, [r7, #32]
 80107b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107b8:	4613      	mov	r3, r2
 80107ba:	009b      	lsls	r3, r3, #2
 80107bc:	4413      	add	r3, r2
 80107be:	009b      	lsls	r3, r3, #2
 80107c0:	4a0f      	ldr	r2, [pc, #60]	; (8010800 <xTaskResumeFromISR+0xdc>)
 80107c2:	441a      	add	r2, r3
 80107c4:	6a3b      	ldr	r3, [r7, #32]
 80107c6:	3304      	adds	r3, #4
 80107c8:	4619      	mov	r1, r3
 80107ca:	4610      	mov	r0, r2
 80107cc:	f7fe fc97 	bl	800f0fe <vListInsertEnd>
 80107d0:	e005      	b.n	80107de <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80107d2:	6a3b      	ldr	r3, [r7, #32]
 80107d4:	3318      	adds	r3, #24
 80107d6:	4619      	mov	r1, r3
 80107d8:	480a      	ldr	r0, [pc, #40]	; (8010804 <xTaskResumeFromISR+0xe0>)
 80107da:	f7fe fc90 	bl	800f0fe <vListInsertEnd>
 80107de:	69fb      	ldr	r3, [r7, #28]
 80107e0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	f383 8811 	msr	BASEPRI, r3
}
 80107e8:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 80107ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80107ec:	4618      	mov	r0, r3
 80107ee:	3728      	adds	r7, #40	; 0x28
 80107f0:	46bd      	mov	sp, r7
 80107f2:	bd80      	pop	{r7, pc}
 80107f4:	200082f4 	.word	0x200082f4
 80107f8:	20007df4 	.word	0x20007df4
 80107fc:	200082d4 	.word	0x200082d4
 8010800:	20007df8 	.word	0x20007df8
 8010804:	20008288 	.word	0x20008288

08010808 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b08a      	sub	sp, #40	; 0x28
 801080c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801080e:	2300      	movs	r3, #0
 8010810:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010812:	2300      	movs	r3, #0
 8010814:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010816:	463a      	mov	r2, r7
 8010818:	1d39      	adds	r1, r7, #4
 801081a:	f107 0308 	add.w	r3, r7, #8
 801081e:	4618      	mov	r0, r3
 8010820:	f7fe fbaa 	bl	800ef78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010824:	6839      	ldr	r1, [r7, #0]
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	68ba      	ldr	r2, [r7, #8]
 801082a:	9202      	str	r2, [sp, #8]
 801082c:	9301      	str	r3, [sp, #4]
 801082e:	2300      	movs	r3, #0
 8010830:	9300      	str	r3, [sp, #0]
 8010832:	2300      	movs	r3, #0
 8010834:	460a      	mov	r2, r1
 8010836:	4924      	ldr	r1, [pc, #144]	; (80108c8 <vTaskStartScheduler+0xc0>)
 8010838:	4824      	ldr	r0, [pc, #144]	; (80108cc <vTaskStartScheduler+0xc4>)
 801083a:	f7ff fc21 	bl	8010080 <xTaskCreateStatic>
 801083e:	4603      	mov	r3, r0
 8010840:	4a23      	ldr	r2, [pc, #140]	; (80108d0 <vTaskStartScheduler+0xc8>)
 8010842:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010844:	4b22      	ldr	r3, [pc, #136]	; (80108d0 <vTaskStartScheduler+0xc8>)
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d002      	beq.n	8010852 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801084c:	2301      	movs	r3, #1
 801084e:	617b      	str	r3, [r7, #20]
 8010850:	e001      	b.n	8010856 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010852:	2300      	movs	r3, #0
 8010854:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010856:	697b      	ldr	r3, [r7, #20]
 8010858:	2b01      	cmp	r3, #1
 801085a:	d102      	bne.n	8010862 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801085c:	f000 fd5a 	bl	8011314 <xTimerCreateTimerTask>
 8010860:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010862:	697b      	ldr	r3, [r7, #20]
 8010864:	2b01      	cmp	r3, #1
 8010866:	d11c      	bne.n	80108a2 <vTaskStartScheduler+0x9a>
	__asm volatile
 8010868:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801086c:	f383 8811 	msr	BASEPRI, r3
 8010870:	f3bf 8f6f 	isb	sy
 8010874:	f3bf 8f4f 	dsb	sy
 8010878:	613b      	str	r3, [r7, #16]
}
 801087a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801087c:	4b15      	ldr	r3, [pc, #84]	; (80108d4 <vTaskStartScheduler+0xcc>)
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8010884:	4a14      	ldr	r2, [pc, #80]	; (80108d8 <vTaskStartScheduler+0xd0>)
 8010886:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010888:	4b14      	ldr	r3, [pc, #80]	; (80108dc <vTaskStartScheduler+0xd4>)
 801088a:	f04f 32ff 	mov.w	r2, #4294967295
 801088e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010890:	4b13      	ldr	r3, [pc, #76]	; (80108e0 <vTaskStartScheduler+0xd8>)
 8010892:	2201      	movs	r2, #1
 8010894:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010896:	4b13      	ldr	r3, [pc, #76]	; (80108e4 <vTaskStartScheduler+0xdc>)
 8010898:	2200      	movs	r2, #0
 801089a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801089c:	f7fe fd40 	bl	800f320 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80108a0:	e00e      	b.n	80108c0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80108a2:	697b      	ldr	r3, [r7, #20]
 80108a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108a8:	d10a      	bne.n	80108c0 <vTaskStartScheduler+0xb8>
	__asm volatile
 80108aa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80108ae:	f383 8811 	msr	BASEPRI, r3
 80108b2:	f3bf 8f6f 	isb	sy
 80108b6:	f3bf 8f4f 	dsb	sy
 80108ba:	60fb      	str	r3, [r7, #12]
}
 80108bc:	bf00      	nop
 80108be:	e7fe      	b.n	80108be <vTaskStartScheduler+0xb6>
}
 80108c0:	bf00      	nop
 80108c2:	3718      	adds	r7, #24
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd80      	pop	{r7, pc}
 80108c8:	0801470c 	.word	0x0801470c
 80108cc:	08010fa5 	.word	0x08010fa5
 80108d0:	200082f0 	.word	0x200082f0
 80108d4:	20007df4 	.word	0x20007df4
 80108d8:	2000005c 	.word	0x2000005c
 80108dc:	200082ec 	.word	0x200082ec
 80108e0:	200082d8 	.word	0x200082d8
 80108e4:	200082d0 	.word	0x200082d0

080108e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80108e8:	b480      	push	{r7}
 80108ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80108ec:	4b04      	ldr	r3, [pc, #16]	; (8010900 <vTaskSuspendAll+0x18>)
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	3301      	adds	r3, #1
 80108f2:	4a03      	ldr	r2, [pc, #12]	; (8010900 <vTaskSuspendAll+0x18>)
 80108f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80108f6:	bf00      	nop
 80108f8:	46bd      	mov	sp, r7
 80108fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fe:	4770      	bx	lr
 8010900:	200082f4 	.word	0x200082f4

08010904 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b084      	sub	sp, #16
 8010908:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801090a:	2300      	movs	r3, #0
 801090c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801090e:	2300      	movs	r3, #0
 8010910:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010912:	4b42      	ldr	r3, [pc, #264]	; (8010a1c <xTaskResumeAll+0x118>)
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d10a      	bne.n	8010930 <xTaskResumeAll+0x2c>
	__asm volatile
 801091a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801091e:	f383 8811 	msr	BASEPRI, r3
 8010922:	f3bf 8f6f 	isb	sy
 8010926:	f3bf 8f4f 	dsb	sy
 801092a:	603b      	str	r3, [r7, #0]
}
 801092c:	bf00      	nop
 801092e:	e7fe      	b.n	801092e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010930:	f7fe fd98 	bl	800f464 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010934:	4b39      	ldr	r3, [pc, #228]	; (8010a1c <xTaskResumeAll+0x118>)
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	3b01      	subs	r3, #1
 801093a:	4a38      	ldr	r2, [pc, #224]	; (8010a1c <xTaskResumeAll+0x118>)
 801093c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801093e:	4b37      	ldr	r3, [pc, #220]	; (8010a1c <xTaskResumeAll+0x118>)
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d162      	bne.n	8010a0c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010946:	4b36      	ldr	r3, [pc, #216]	; (8010a20 <xTaskResumeAll+0x11c>)
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d05e      	beq.n	8010a0c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801094e:	e02f      	b.n	80109b0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010950:	4b34      	ldr	r3, [pc, #208]	; (8010a24 <xTaskResumeAll+0x120>)
 8010952:	68db      	ldr	r3, [r3, #12]
 8010954:	68db      	ldr	r3, [r3, #12]
 8010956:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	3318      	adds	r3, #24
 801095c:	4618      	mov	r0, r3
 801095e:	f7fe fc2b 	bl	800f1b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	3304      	adds	r3, #4
 8010966:	4618      	mov	r0, r3
 8010968:	f7fe fc26 	bl	800f1b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010970:	4b2d      	ldr	r3, [pc, #180]	; (8010a28 <xTaskResumeAll+0x124>)
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	429a      	cmp	r2, r3
 8010976:	d903      	bls.n	8010980 <xTaskResumeAll+0x7c>
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801097c:	4a2a      	ldr	r2, [pc, #168]	; (8010a28 <xTaskResumeAll+0x124>)
 801097e:	6013      	str	r3, [r2, #0]
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010984:	4613      	mov	r3, r2
 8010986:	009b      	lsls	r3, r3, #2
 8010988:	4413      	add	r3, r2
 801098a:	009b      	lsls	r3, r3, #2
 801098c:	4a27      	ldr	r2, [pc, #156]	; (8010a2c <xTaskResumeAll+0x128>)
 801098e:	441a      	add	r2, r3
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	3304      	adds	r3, #4
 8010994:	4619      	mov	r1, r3
 8010996:	4610      	mov	r0, r2
 8010998:	f7fe fbb1 	bl	800f0fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109a0:	4b23      	ldr	r3, [pc, #140]	; (8010a30 <xTaskResumeAll+0x12c>)
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109a6:	429a      	cmp	r2, r3
 80109a8:	d302      	bcc.n	80109b0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80109aa:	4b22      	ldr	r3, [pc, #136]	; (8010a34 <xTaskResumeAll+0x130>)
 80109ac:	2201      	movs	r2, #1
 80109ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80109b0:	4b1c      	ldr	r3, [pc, #112]	; (8010a24 <xTaskResumeAll+0x120>)
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d1cb      	bne.n	8010950 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d001      	beq.n	80109c2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80109be:	f000 fb9d 	bl	80110fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80109c2:	4b1d      	ldr	r3, [pc, #116]	; (8010a38 <xTaskResumeAll+0x134>)
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d010      	beq.n	80109f0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80109ce:	f000 f847 	bl	8010a60 <xTaskIncrementTick>
 80109d2:	4603      	mov	r3, r0
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d002      	beq.n	80109de <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80109d8:	4b16      	ldr	r3, [pc, #88]	; (8010a34 <xTaskResumeAll+0x130>)
 80109da:	2201      	movs	r2, #1
 80109dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	3b01      	subs	r3, #1
 80109e2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d1f1      	bne.n	80109ce <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80109ea:	4b13      	ldr	r3, [pc, #76]	; (8010a38 <xTaskResumeAll+0x134>)
 80109ec:	2200      	movs	r2, #0
 80109ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80109f0:	4b10      	ldr	r3, [pc, #64]	; (8010a34 <xTaskResumeAll+0x130>)
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d009      	beq.n	8010a0c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80109f8:	2301      	movs	r3, #1
 80109fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80109fc:	4b0f      	ldr	r3, [pc, #60]	; (8010a3c <xTaskResumeAll+0x138>)
 80109fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a02:	601a      	str	r2, [r3, #0]
 8010a04:	f3bf 8f4f 	dsb	sy
 8010a08:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010a0c:	f7fe fd5a 	bl	800f4c4 <vPortExitCritical>

	return xAlreadyYielded;
 8010a10:	68bb      	ldr	r3, [r7, #8]
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	3710      	adds	r7, #16
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd80      	pop	{r7, pc}
 8010a1a:	bf00      	nop
 8010a1c:	200082f4 	.word	0x200082f4
 8010a20:	200082cc 	.word	0x200082cc
 8010a24:	20008288 	.word	0x20008288
 8010a28:	200082d4 	.word	0x200082d4
 8010a2c:	20007df8 	.word	0x20007df8
 8010a30:	20007df4 	.word	0x20007df4
 8010a34:	200082e0 	.word	0x200082e0
 8010a38:	200082dc 	.word	0x200082dc
 8010a3c:	e000ed04 	.word	0xe000ed04

08010a40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010a40:	b480      	push	{r7}
 8010a42:	b083      	sub	sp, #12
 8010a44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010a46:	4b05      	ldr	r3, [pc, #20]	; (8010a5c <xTaskGetTickCount+0x1c>)
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010a4c:	687b      	ldr	r3, [r7, #4]
}
 8010a4e:	4618      	mov	r0, r3
 8010a50:	370c      	adds	r7, #12
 8010a52:	46bd      	mov	sp, r7
 8010a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a58:	4770      	bx	lr
 8010a5a:	bf00      	nop
 8010a5c:	200082d0 	.word	0x200082d0

08010a60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b086      	sub	sp, #24
 8010a64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010a66:	2300      	movs	r3, #0
 8010a68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010a6a:	4b53      	ldr	r3, [pc, #332]	; (8010bb8 <xTaskIncrementTick+0x158>)
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	f040 8095 	bne.w	8010b9e <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010a74:	4b51      	ldr	r3, [pc, #324]	; (8010bbc <xTaskIncrementTick+0x15c>)
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	3301      	adds	r3, #1
 8010a7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010a7c:	4a4f      	ldr	r2, [pc, #316]	; (8010bbc <xTaskIncrementTick+0x15c>)
 8010a7e:	693b      	ldr	r3, [r7, #16]
 8010a80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010a82:	693b      	ldr	r3, [r7, #16]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d120      	bne.n	8010aca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010a88:	4b4d      	ldr	r3, [pc, #308]	; (8010bc0 <xTaskIncrementTick+0x160>)
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d00a      	beq.n	8010aa8 <xTaskIncrementTick+0x48>
	__asm volatile
 8010a92:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8010a96:	f383 8811 	msr	BASEPRI, r3
 8010a9a:	f3bf 8f6f 	isb	sy
 8010a9e:	f3bf 8f4f 	dsb	sy
 8010aa2:	603b      	str	r3, [r7, #0]
}
 8010aa4:	bf00      	nop
 8010aa6:	e7fe      	b.n	8010aa6 <xTaskIncrementTick+0x46>
 8010aa8:	4b45      	ldr	r3, [pc, #276]	; (8010bc0 <xTaskIncrementTick+0x160>)
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	60fb      	str	r3, [r7, #12]
 8010aae:	4b45      	ldr	r3, [pc, #276]	; (8010bc4 <xTaskIncrementTick+0x164>)
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	4a43      	ldr	r2, [pc, #268]	; (8010bc0 <xTaskIncrementTick+0x160>)
 8010ab4:	6013      	str	r3, [r2, #0]
 8010ab6:	4a43      	ldr	r2, [pc, #268]	; (8010bc4 <xTaskIncrementTick+0x164>)
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	6013      	str	r3, [r2, #0]
 8010abc:	4b42      	ldr	r3, [pc, #264]	; (8010bc8 <xTaskIncrementTick+0x168>)
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	3301      	adds	r3, #1
 8010ac2:	4a41      	ldr	r2, [pc, #260]	; (8010bc8 <xTaskIncrementTick+0x168>)
 8010ac4:	6013      	str	r3, [r2, #0]
 8010ac6:	f000 fb19 	bl	80110fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010aca:	4b40      	ldr	r3, [pc, #256]	; (8010bcc <xTaskIncrementTick+0x16c>)
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	693a      	ldr	r2, [r7, #16]
 8010ad0:	429a      	cmp	r2, r3
 8010ad2:	d349      	bcc.n	8010b68 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010ad4:	4b3a      	ldr	r3, [pc, #232]	; (8010bc0 <xTaskIncrementTick+0x160>)
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d104      	bne.n	8010ae8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010ade:	4b3b      	ldr	r3, [pc, #236]	; (8010bcc <xTaskIncrementTick+0x16c>)
 8010ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8010ae4:	601a      	str	r2, [r3, #0]
					break;
 8010ae6:	e03f      	b.n	8010b68 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ae8:	4b35      	ldr	r3, [pc, #212]	; (8010bc0 <xTaskIncrementTick+0x160>)
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	68db      	ldr	r3, [r3, #12]
 8010aee:	68db      	ldr	r3, [r3, #12]
 8010af0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010af2:	68bb      	ldr	r3, [r7, #8]
 8010af4:	685b      	ldr	r3, [r3, #4]
 8010af6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010af8:	693a      	ldr	r2, [r7, #16]
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	429a      	cmp	r2, r3
 8010afe:	d203      	bcs.n	8010b08 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010b00:	4a32      	ldr	r2, [pc, #200]	; (8010bcc <xTaskIncrementTick+0x16c>)
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010b06:	e02f      	b.n	8010b68 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010b08:	68bb      	ldr	r3, [r7, #8]
 8010b0a:	3304      	adds	r3, #4
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	f7fe fb53 	bl	800f1b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010b12:	68bb      	ldr	r3, [r7, #8]
 8010b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d004      	beq.n	8010b24 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010b1a:	68bb      	ldr	r3, [r7, #8]
 8010b1c:	3318      	adds	r3, #24
 8010b1e:	4618      	mov	r0, r3
 8010b20:	f7fe fb4a 	bl	800f1b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010b24:	68bb      	ldr	r3, [r7, #8]
 8010b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b28:	4b29      	ldr	r3, [pc, #164]	; (8010bd0 <xTaskIncrementTick+0x170>)
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	429a      	cmp	r2, r3
 8010b2e:	d903      	bls.n	8010b38 <xTaskIncrementTick+0xd8>
 8010b30:	68bb      	ldr	r3, [r7, #8]
 8010b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b34:	4a26      	ldr	r2, [pc, #152]	; (8010bd0 <xTaskIncrementTick+0x170>)
 8010b36:	6013      	str	r3, [r2, #0]
 8010b38:	68bb      	ldr	r3, [r7, #8]
 8010b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b3c:	4613      	mov	r3, r2
 8010b3e:	009b      	lsls	r3, r3, #2
 8010b40:	4413      	add	r3, r2
 8010b42:	009b      	lsls	r3, r3, #2
 8010b44:	4a23      	ldr	r2, [pc, #140]	; (8010bd4 <xTaskIncrementTick+0x174>)
 8010b46:	441a      	add	r2, r3
 8010b48:	68bb      	ldr	r3, [r7, #8]
 8010b4a:	3304      	adds	r3, #4
 8010b4c:	4619      	mov	r1, r3
 8010b4e:	4610      	mov	r0, r2
 8010b50:	f7fe fad5 	bl	800f0fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010b54:	68bb      	ldr	r3, [r7, #8]
 8010b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b58:	4b1f      	ldr	r3, [pc, #124]	; (8010bd8 <xTaskIncrementTick+0x178>)
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b5e:	429a      	cmp	r2, r3
 8010b60:	d3b8      	bcc.n	8010ad4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8010b62:	2301      	movs	r3, #1
 8010b64:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010b66:	e7b5      	b.n	8010ad4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010b68:	4b1b      	ldr	r3, [pc, #108]	; (8010bd8 <xTaskIncrementTick+0x178>)
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b6e:	4919      	ldr	r1, [pc, #100]	; (8010bd4 <xTaskIncrementTick+0x174>)
 8010b70:	4613      	mov	r3, r2
 8010b72:	009b      	lsls	r3, r3, #2
 8010b74:	4413      	add	r3, r2
 8010b76:	009b      	lsls	r3, r3, #2
 8010b78:	440b      	add	r3, r1
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	2b01      	cmp	r3, #1
 8010b7e:	d901      	bls.n	8010b84 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8010b80:	2301      	movs	r3, #1
 8010b82:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8010b84:	4b15      	ldr	r3, [pc, #84]	; (8010bdc <xTaskIncrementTick+0x17c>)
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d101      	bne.n	8010b90 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8010b8c:	f7f3 fe92 	bl	80048b4 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010b90:	4b13      	ldr	r3, [pc, #76]	; (8010be0 <xTaskIncrementTick+0x180>)
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d009      	beq.n	8010bac <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8010b98:	2301      	movs	r3, #1
 8010b9a:	617b      	str	r3, [r7, #20]
 8010b9c:	e006      	b.n	8010bac <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010b9e:	4b0f      	ldr	r3, [pc, #60]	; (8010bdc <xTaskIncrementTick+0x17c>)
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	3301      	adds	r3, #1
 8010ba4:	4a0d      	ldr	r2, [pc, #52]	; (8010bdc <xTaskIncrementTick+0x17c>)
 8010ba6:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8010ba8:	f7f3 fe84 	bl	80048b4 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8010bac:	697b      	ldr	r3, [r7, #20]
}
 8010bae:	4618      	mov	r0, r3
 8010bb0:	3718      	adds	r7, #24
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	bd80      	pop	{r7, pc}
 8010bb6:	bf00      	nop
 8010bb8:	200082f4 	.word	0x200082f4
 8010bbc:	200082d0 	.word	0x200082d0
 8010bc0:	20008280 	.word	0x20008280
 8010bc4:	20008284 	.word	0x20008284
 8010bc8:	200082e4 	.word	0x200082e4
 8010bcc:	200082ec 	.word	0x200082ec
 8010bd0:	200082d4 	.word	0x200082d4
 8010bd4:	20007df8 	.word	0x20007df8
 8010bd8:	20007df4 	.word	0x20007df4
 8010bdc:	200082dc 	.word	0x200082dc
 8010be0:	200082e0 	.word	0x200082e0

08010be4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b086      	sub	sp, #24
 8010be8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010bea:	4b43      	ldr	r3, [pc, #268]	; (8010cf8 <vTaskSwitchContext+0x114>)
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d003      	beq.n	8010bfa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010bf2:	4b42      	ldr	r3, [pc, #264]	; (8010cfc <vTaskSwitchContext+0x118>)
 8010bf4:	2201      	movs	r2, #1
 8010bf6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010bf8:	e07a      	b.n	8010cf0 <vTaskSwitchContext+0x10c>
		xYieldPending = pdFALSE;
 8010bfa:	4b40      	ldr	r3, [pc, #256]	; (8010cfc <vTaskSwitchContext+0x118>)
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8010c00:	4b3f      	ldr	r3, [pc, #252]	; (8010d00 <vTaskSwitchContext+0x11c>)
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c06:	613b      	str	r3, [r7, #16]
 8010c08:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8010c0c:	60fb      	str	r3, [r7, #12]
 8010c0e:	693b      	ldr	r3, [r7, #16]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	68fa      	ldr	r2, [r7, #12]
 8010c14:	429a      	cmp	r2, r3
 8010c16:	d111      	bne.n	8010c3c <vTaskSwitchContext+0x58>
 8010c18:	693b      	ldr	r3, [r7, #16]
 8010c1a:	3304      	adds	r3, #4
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	68fa      	ldr	r2, [r7, #12]
 8010c20:	429a      	cmp	r2, r3
 8010c22:	d10b      	bne.n	8010c3c <vTaskSwitchContext+0x58>
 8010c24:	693b      	ldr	r3, [r7, #16]
 8010c26:	3308      	adds	r3, #8
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	68fa      	ldr	r2, [r7, #12]
 8010c2c:	429a      	cmp	r2, r3
 8010c2e:	d105      	bne.n	8010c3c <vTaskSwitchContext+0x58>
 8010c30:	693b      	ldr	r3, [r7, #16]
 8010c32:	330c      	adds	r3, #12
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	68fa      	ldr	r2, [r7, #12]
 8010c38:	429a      	cmp	r2, r3
 8010c3a:	d008      	beq.n	8010c4e <vTaskSwitchContext+0x6a>
 8010c3c:	4b30      	ldr	r3, [pc, #192]	; (8010d00 <vTaskSwitchContext+0x11c>)
 8010c3e:	681a      	ldr	r2, [r3, #0]
 8010c40:	4b2f      	ldr	r3, [pc, #188]	; (8010d00 <vTaskSwitchContext+0x11c>)
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	3334      	adds	r3, #52	; 0x34
 8010c46:	4619      	mov	r1, r3
 8010c48:	4610      	mov	r0, r2
 8010c4a:	f7f3 fe41 	bl	80048d0 <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 8010c4e:	4b2c      	ldr	r3, [pc, #176]	; (8010d00 <vTaskSwitchContext+0x11c>)
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	4a2c      	ldr	r2, [pc, #176]	; (8010d04 <vTaskSwitchContext+0x120>)
 8010c54:	6812      	ldr	r2, [r2, #0]
 8010c56:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c5a:	4b2b      	ldr	r3, [pc, #172]	; (8010d08 <vTaskSwitchContext+0x124>)
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	617b      	str	r3, [r7, #20]
 8010c60:	e010      	b.n	8010c84 <vTaskSwitchContext+0xa0>
 8010c62:	697b      	ldr	r3, [r7, #20]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d10a      	bne.n	8010c7e <vTaskSwitchContext+0x9a>
	__asm volatile
 8010c68:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8010c6c:	f383 8811 	msr	BASEPRI, r3
 8010c70:	f3bf 8f6f 	isb	sy
 8010c74:	f3bf 8f4f 	dsb	sy
 8010c78:	607b      	str	r3, [r7, #4]
}
 8010c7a:	bf00      	nop
 8010c7c:	e7fe      	b.n	8010c7c <vTaskSwitchContext+0x98>
 8010c7e:	697b      	ldr	r3, [r7, #20]
 8010c80:	3b01      	subs	r3, #1
 8010c82:	617b      	str	r3, [r7, #20]
 8010c84:	4921      	ldr	r1, [pc, #132]	; (8010d0c <vTaskSwitchContext+0x128>)
 8010c86:	697a      	ldr	r2, [r7, #20]
 8010c88:	4613      	mov	r3, r2
 8010c8a:	009b      	lsls	r3, r3, #2
 8010c8c:	4413      	add	r3, r2
 8010c8e:	009b      	lsls	r3, r3, #2
 8010c90:	440b      	add	r3, r1
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d0e4      	beq.n	8010c62 <vTaskSwitchContext+0x7e>
 8010c98:	697a      	ldr	r2, [r7, #20]
 8010c9a:	4613      	mov	r3, r2
 8010c9c:	009b      	lsls	r3, r3, #2
 8010c9e:	4413      	add	r3, r2
 8010ca0:	009b      	lsls	r3, r3, #2
 8010ca2:	4a1a      	ldr	r2, [pc, #104]	; (8010d0c <vTaskSwitchContext+0x128>)
 8010ca4:	4413      	add	r3, r2
 8010ca6:	60bb      	str	r3, [r7, #8]
 8010ca8:	68bb      	ldr	r3, [r7, #8]
 8010caa:	685b      	ldr	r3, [r3, #4]
 8010cac:	685a      	ldr	r2, [r3, #4]
 8010cae:	68bb      	ldr	r3, [r7, #8]
 8010cb0:	605a      	str	r2, [r3, #4]
 8010cb2:	68bb      	ldr	r3, [r7, #8]
 8010cb4:	685a      	ldr	r2, [r3, #4]
 8010cb6:	68bb      	ldr	r3, [r7, #8]
 8010cb8:	3308      	adds	r3, #8
 8010cba:	429a      	cmp	r2, r3
 8010cbc:	d104      	bne.n	8010cc8 <vTaskSwitchContext+0xe4>
 8010cbe:	68bb      	ldr	r3, [r7, #8]
 8010cc0:	685b      	ldr	r3, [r3, #4]
 8010cc2:	685a      	ldr	r2, [r3, #4]
 8010cc4:	68bb      	ldr	r3, [r7, #8]
 8010cc6:	605a      	str	r2, [r3, #4]
 8010cc8:	68bb      	ldr	r3, [r7, #8]
 8010cca:	685b      	ldr	r3, [r3, #4]
 8010ccc:	68db      	ldr	r3, [r3, #12]
 8010cce:	4a0c      	ldr	r2, [pc, #48]	; (8010d00 <vTaskSwitchContext+0x11c>)
 8010cd0:	6013      	str	r3, [r2, #0]
 8010cd2:	4a0d      	ldr	r2, [pc, #52]	; (8010d08 <vTaskSwitchContext+0x124>)
 8010cd4:	697b      	ldr	r3, [r7, #20]
 8010cd6:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 8010cd8:	4b09      	ldr	r3, [pc, #36]	; (8010d00 <vTaskSwitchContext+0x11c>)
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8010ce0:	4a08      	ldr	r2, [pc, #32]	; (8010d04 <vTaskSwitchContext+0x120>)
 8010ce2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010ce4:	4b06      	ldr	r3, [pc, #24]	; (8010d00 <vTaskSwitchContext+0x11c>)
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8010cec:	4a08      	ldr	r2, [pc, #32]	; (8010d10 <vTaskSwitchContext+0x12c>)
 8010cee:	6013      	str	r3, [r2, #0]
}
 8010cf0:	bf00      	nop
 8010cf2:	3718      	adds	r7, #24
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	bd80      	pop	{r7, pc}
 8010cf8:	200082f4 	.word	0x200082f4
 8010cfc:	200082e0 	.word	0x200082e0
 8010d00:	20007df4 	.word	0x20007df4
 8010d04:	200082c8 	.word	0x200082c8
 8010d08:	200082d4 	.word	0x200082d4
 8010d0c:	20007df8 	.word	0x20007df8
 8010d10:	2000005c 	.word	0x2000005c

08010d14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b084      	sub	sp, #16
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	6078      	str	r0, [r7, #4]
 8010d1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d10a      	bne.n	8010d3a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8010d24:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8010d28:	f383 8811 	msr	BASEPRI, r3
 8010d2c:	f3bf 8f6f 	isb	sy
 8010d30:	f3bf 8f4f 	dsb	sy
 8010d34:	60fb      	str	r3, [r7, #12]
}
 8010d36:	bf00      	nop
 8010d38:	e7fe      	b.n	8010d38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010d3a:	4b07      	ldr	r3, [pc, #28]	; (8010d58 <vTaskPlaceOnEventList+0x44>)
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	3318      	adds	r3, #24
 8010d40:	4619      	mov	r1, r3
 8010d42:	6878      	ldr	r0, [r7, #4]
 8010d44:	f7fe f9ff 	bl	800f146 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010d48:	2101      	movs	r1, #1
 8010d4a:	6838      	ldr	r0, [r7, #0]
 8010d4c:	f000 fa88 	bl	8011260 <prvAddCurrentTaskToDelayedList>
}
 8010d50:	bf00      	nop
 8010d52:	3710      	adds	r7, #16
 8010d54:	46bd      	mov	sp, r7
 8010d56:	bd80      	pop	{r7, pc}
 8010d58:	20007df4 	.word	0x20007df4

08010d5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b086      	sub	sp, #24
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	60f8      	str	r0, [r7, #12]
 8010d64:	60b9      	str	r1, [r7, #8]
 8010d66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d10a      	bne.n	8010d84 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8010d6e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8010d72:	f383 8811 	msr	BASEPRI, r3
 8010d76:	f3bf 8f6f 	isb	sy
 8010d7a:	f3bf 8f4f 	dsb	sy
 8010d7e:	617b      	str	r3, [r7, #20]
}
 8010d80:	bf00      	nop
 8010d82:	e7fe      	b.n	8010d82 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010d84:	4b0a      	ldr	r3, [pc, #40]	; (8010db0 <vTaskPlaceOnEventListRestricted+0x54>)
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	3318      	adds	r3, #24
 8010d8a:	4619      	mov	r1, r3
 8010d8c:	68f8      	ldr	r0, [r7, #12]
 8010d8e:	f7fe f9b6 	bl	800f0fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d002      	beq.n	8010d9e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8010d98:	f04f 33ff 	mov.w	r3, #4294967295
 8010d9c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010d9e:	6879      	ldr	r1, [r7, #4]
 8010da0:	68b8      	ldr	r0, [r7, #8]
 8010da2:	f000 fa5d 	bl	8011260 <prvAddCurrentTaskToDelayedList>
	}
 8010da6:	bf00      	nop
 8010da8:	3718      	adds	r7, #24
 8010daa:	46bd      	mov	sp, r7
 8010dac:	bd80      	pop	{r7, pc}
 8010dae:	bf00      	nop
 8010db0:	20007df4 	.word	0x20007df4

08010db4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b086      	sub	sp, #24
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	68db      	ldr	r3, [r3, #12]
 8010dc0:	68db      	ldr	r3, [r3, #12]
 8010dc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010dc4:	693b      	ldr	r3, [r7, #16]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d10a      	bne.n	8010de0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8010dca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8010dce:	f383 8811 	msr	BASEPRI, r3
 8010dd2:	f3bf 8f6f 	isb	sy
 8010dd6:	f3bf 8f4f 	dsb	sy
 8010dda:	60fb      	str	r3, [r7, #12]
}
 8010ddc:	bf00      	nop
 8010dde:	e7fe      	b.n	8010dde <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010de0:	693b      	ldr	r3, [r7, #16]
 8010de2:	3318      	adds	r3, #24
 8010de4:	4618      	mov	r0, r3
 8010de6:	f7fe f9e7 	bl	800f1b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010dea:	4b1e      	ldr	r3, [pc, #120]	; (8010e64 <xTaskRemoveFromEventList+0xb0>)
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d11d      	bne.n	8010e2e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010df2:	693b      	ldr	r3, [r7, #16]
 8010df4:	3304      	adds	r3, #4
 8010df6:	4618      	mov	r0, r3
 8010df8:	f7fe f9de 	bl	800f1b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010dfc:	693b      	ldr	r3, [r7, #16]
 8010dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e00:	4b19      	ldr	r3, [pc, #100]	; (8010e68 <xTaskRemoveFromEventList+0xb4>)
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	429a      	cmp	r2, r3
 8010e06:	d903      	bls.n	8010e10 <xTaskRemoveFromEventList+0x5c>
 8010e08:	693b      	ldr	r3, [r7, #16]
 8010e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e0c:	4a16      	ldr	r2, [pc, #88]	; (8010e68 <xTaskRemoveFromEventList+0xb4>)
 8010e0e:	6013      	str	r3, [r2, #0]
 8010e10:	693b      	ldr	r3, [r7, #16]
 8010e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e14:	4613      	mov	r3, r2
 8010e16:	009b      	lsls	r3, r3, #2
 8010e18:	4413      	add	r3, r2
 8010e1a:	009b      	lsls	r3, r3, #2
 8010e1c:	4a13      	ldr	r2, [pc, #76]	; (8010e6c <xTaskRemoveFromEventList+0xb8>)
 8010e1e:	441a      	add	r2, r3
 8010e20:	693b      	ldr	r3, [r7, #16]
 8010e22:	3304      	adds	r3, #4
 8010e24:	4619      	mov	r1, r3
 8010e26:	4610      	mov	r0, r2
 8010e28:	f7fe f969 	bl	800f0fe <vListInsertEnd>
 8010e2c:	e005      	b.n	8010e3a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010e2e:	693b      	ldr	r3, [r7, #16]
 8010e30:	3318      	adds	r3, #24
 8010e32:	4619      	mov	r1, r3
 8010e34:	480e      	ldr	r0, [pc, #56]	; (8010e70 <xTaskRemoveFromEventList+0xbc>)
 8010e36:	f7fe f962 	bl	800f0fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010e3a:	693b      	ldr	r3, [r7, #16]
 8010e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e3e:	4b0d      	ldr	r3, [pc, #52]	; (8010e74 <xTaskRemoveFromEventList+0xc0>)
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e44:	429a      	cmp	r2, r3
 8010e46:	d905      	bls.n	8010e54 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010e48:	2301      	movs	r3, #1
 8010e4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010e4c:	4b0a      	ldr	r3, [pc, #40]	; (8010e78 <xTaskRemoveFromEventList+0xc4>)
 8010e4e:	2201      	movs	r2, #1
 8010e50:	601a      	str	r2, [r3, #0]
 8010e52:	e001      	b.n	8010e58 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8010e54:	2300      	movs	r3, #0
 8010e56:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010e58:	697b      	ldr	r3, [r7, #20]
}
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	3718      	adds	r7, #24
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	bd80      	pop	{r7, pc}
 8010e62:	bf00      	nop
 8010e64:	200082f4 	.word	0x200082f4
 8010e68:	200082d4 	.word	0x200082d4
 8010e6c:	20007df8 	.word	0x20007df8
 8010e70:	20008288 	.word	0x20008288
 8010e74:	20007df4 	.word	0x20007df4
 8010e78:	200082e0 	.word	0x200082e0

08010e7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010e7c:	b480      	push	{r7}
 8010e7e:	b083      	sub	sp, #12
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010e84:	4b06      	ldr	r3, [pc, #24]	; (8010ea0 <vTaskInternalSetTimeOutState+0x24>)
 8010e86:	681a      	ldr	r2, [r3, #0]
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010e8c:	4b05      	ldr	r3, [pc, #20]	; (8010ea4 <vTaskInternalSetTimeOutState+0x28>)
 8010e8e:	681a      	ldr	r2, [r3, #0]
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	605a      	str	r2, [r3, #4]
}
 8010e94:	bf00      	nop
 8010e96:	370c      	adds	r7, #12
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9e:	4770      	bx	lr
 8010ea0:	200082e4 	.word	0x200082e4
 8010ea4:	200082d0 	.word	0x200082d0

08010ea8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b088      	sub	sp, #32
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]
 8010eb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d10a      	bne.n	8010ece <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010eb8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8010ebc:	f383 8811 	msr	BASEPRI, r3
 8010ec0:	f3bf 8f6f 	isb	sy
 8010ec4:	f3bf 8f4f 	dsb	sy
 8010ec8:	613b      	str	r3, [r7, #16]
}
 8010eca:	bf00      	nop
 8010ecc:	e7fe      	b.n	8010ecc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010ece:	683b      	ldr	r3, [r7, #0]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d10a      	bne.n	8010eea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010ed4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8010ed8:	f383 8811 	msr	BASEPRI, r3
 8010edc:	f3bf 8f6f 	isb	sy
 8010ee0:	f3bf 8f4f 	dsb	sy
 8010ee4:	60fb      	str	r3, [r7, #12]
}
 8010ee6:	bf00      	nop
 8010ee8:	e7fe      	b.n	8010ee8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8010eea:	f7fe fabb 	bl	800f464 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010eee:	4b24      	ldr	r3, [pc, #144]	; (8010f80 <xTaskCheckForTimeOut+0xd8>)
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	685b      	ldr	r3, [r3, #4]
 8010ef8:	69ba      	ldr	r2, [r7, #24]
 8010efa:	1ad3      	subs	r3, r2, r3
 8010efc:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 8010efe:	4b21      	ldr	r3, [pc, #132]	; (8010f84 <xTaskCheckForTimeOut+0xdc>)
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	f893 31b2 	ldrb.w	r3, [r3, #434]	; 0x1b2
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d007      	beq.n	8010f1a <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 8010f0a:	4b1e      	ldr	r3, [pc, #120]	; (8010f84 <xTaskCheckForTimeOut+0xdc>)
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	2200      	movs	r2, #0
 8010f10:	f883 21b2 	strb.w	r2, [r3, #434]	; 0x1b2
				xReturn = pdTRUE;
 8010f14:	2301      	movs	r3, #1
 8010f16:	61fb      	str	r3, [r7, #28]
 8010f18:	e02b      	b.n	8010f72 <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010f1a:	683b      	ldr	r3, [r7, #0]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f22:	d102      	bne.n	8010f2a <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010f24:	2300      	movs	r3, #0
 8010f26:	61fb      	str	r3, [r7, #28]
 8010f28:	e023      	b.n	8010f72 <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	681a      	ldr	r2, [r3, #0]
 8010f2e:	4b16      	ldr	r3, [pc, #88]	; (8010f88 <xTaskCheckForTimeOut+0xe0>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	429a      	cmp	r2, r3
 8010f34:	d007      	beq.n	8010f46 <xTaskCheckForTimeOut+0x9e>
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	685b      	ldr	r3, [r3, #4]
 8010f3a:	69ba      	ldr	r2, [r7, #24]
 8010f3c:	429a      	cmp	r2, r3
 8010f3e:	d302      	bcc.n	8010f46 <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010f40:	2301      	movs	r3, #1
 8010f42:	61fb      	str	r3, [r7, #28]
 8010f44:	e015      	b.n	8010f72 <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010f46:	683b      	ldr	r3, [r7, #0]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	697a      	ldr	r2, [r7, #20]
 8010f4c:	429a      	cmp	r2, r3
 8010f4e:	d20b      	bcs.n	8010f68 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010f50:	683b      	ldr	r3, [r7, #0]
 8010f52:	681a      	ldr	r2, [r3, #0]
 8010f54:	697b      	ldr	r3, [r7, #20]
 8010f56:	1ad2      	subs	r2, r2, r3
 8010f58:	683b      	ldr	r3, [r7, #0]
 8010f5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010f5c:	6878      	ldr	r0, [r7, #4]
 8010f5e:	f7ff ff8d 	bl	8010e7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010f62:	2300      	movs	r3, #0
 8010f64:	61fb      	str	r3, [r7, #28]
 8010f66:	e004      	b.n	8010f72 <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 8010f68:	683b      	ldr	r3, [r7, #0]
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010f6e:	2301      	movs	r3, #1
 8010f70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010f72:	f7fe faa7 	bl	800f4c4 <vPortExitCritical>

	return xReturn;
 8010f76:	69fb      	ldr	r3, [r7, #28]
}
 8010f78:	4618      	mov	r0, r3
 8010f7a:	3720      	adds	r7, #32
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	bd80      	pop	{r7, pc}
 8010f80:	200082d0 	.word	0x200082d0
 8010f84:	20007df4 	.word	0x20007df4
 8010f88:	200082e4 	.word	0x200082e4

08010f8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010f8c:	b480      	push	{r7}
 8010f8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010f90:	4b03      	ldr	r3, [pc, #12]	; (8010fa0 <vTaskMissedYield+0x14>)
 8010f92:	2201      	movs	r2, #1
 8010f94:	601a      	str	r2, [r3, #0]
}
 8010f96:	bf00      	nop
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9e:	4770      	bx	lr
 8010fa0:	200082e0 	.word	0x200082e0

08010fa4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b082      	sub	sp, #8
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010fac:	f000 f842 	bl	8011034 <prvCheckTasksWaitingTermination>
 8010fb0:	e7fc      	b.n	8010fac <prvIdleTask+0x8>
	...

08010fb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b082      	sub	sp, #8
 8010fb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010fba:	2300      	movs	r3, #0
 8010fbc:	607b      	str	r3, [r7, #4]
 8010fbe:	e00c      	b.n	8010fda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010fc0:	687a      	ldr	r2, [r7, #4]
 8010fc2:	4613      	mov	r3, r2
 8010fc4:	009b      	lsls	r3, r3, #2
 8010fc6:	4413      	add	r3, r2
 8010fc8:	009b      	lsls	r3, r3, #2
 8010fca:	4a12      	ldr	r2, [pc, #72]	; (8011014 <prvInitialiseTaskLists+0x60>)
 8010fcc:	4413      	add	r3, r2
 8010fce:	4618      	mov	r0, r3
 8010fd0:	f7fe f868 	bl	800f0a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	3301      	adds	r3, #1
 8010fd8:	607b      	str	r3, [r7, #4]
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	2b37      	cmp	r3, #55	; 0x37
 8010fde:	d9ef      	bls.n	8010fc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010fe0:	480d      	ldr	r0, [pc, #52]	; (8011018 <prvInitialiseTaskLists+0x64>)
 8010fe2:	f7fe f85f 	bl	800f0a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010fe6:	480d      	ldr	r0, [pc, #52]	; (801101c <prvInitialiseTaskLists+0x68>)
 8010fe8:	f7fe f85c 	bl	800f0a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010fec:	480c      	ldr	r0, [pc, #48]	; (8011020 <prvInitialiseTaskLists+0x6c>)
 8010fee:	f7fe f859 	bl	800f0a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010ff2:	480c      	ldr	r0, [pc, #48]	; (8011024 <prvInitialiseTaskLists+0x70>)
 8010ff4:	f7fe f856 	bl	800f0a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010ff8:	480b      	ldr	r0, [pc, #44]	; (8011028 <prvInitialiseTaskLists+0x74>)
 8010ffa:	f7fe f853 	bl	800f0a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010ffe:	4b0b      	ldr	r3, [pc, #44]	; (801102c <prvInitialiseTaskLists+0x78>)
 8011000:	4a05      	ldr	r2, [pc, #20]	; (8011018 <prvInitialiseTaskLists+0x64>)
 8011002:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011004:	4b0a      	ldr	r3, [pc, #40]	; (8011030 <prvInitialiseTaskLists+0x7c>)
 8011006:	4a05      	ldr	r2, [pc, #20]	; (801101c <prvInitialiseTaskLists+0x68>)
 8011008:	601a      	str	r2, [r3, #0]
}
 801100a:	bf00      	nop
 801100c:	3708      	adds	r7, #8
 801100e:	46bd      	mov	sp, r7
 8011010:	bd80      	pop	{r7, pc}
 8011012:	bf00      	nop
 8011014:	20007df8 	.word	0x20007df8
 8011018:	20008258 	.word	0x20008258
 801101c:	2000826c 	.word	0x2000826c
 8011020:	20008288 	.word	0x20008288
 8011024:	2000829c 	.word	0x2000829c
 8011028:	200082b4 	.word	0x200082b4
 801102c:	20008280 	.word	0x20008280
 8011030:	20008284 	.word	0x20008284

08011034 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011034:	b580      	push	{r7, lr}
 8011036:	b082      	sub	sp, #8
 8011038:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801103a:	e019      	b.n	8011070 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801103c:	f7fe fa12 	bl	800f464 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011040:	4b10      	ldr	r3, [pc, #64]	; (8011084 <prvCheckTasksWaitingTermination+0x50>)
 8011042:	68db      	ldr	r3, [r3, #12]
 8011044:	68db      	ldr	r3, [r3, #12]
 8011046:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	3304      	adds	r3, #4
 801104c:	4618      	mov	r0, r3
 801104e:	f7fe f8b3 	bl	800f1b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011052:	4b0d      	ldr	r3, [pc, #52]	; (8011088 <prvCheckTasksWaitingTermination+0x54>)
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	3b01      	subs	r3, #1
 8011058:	4a0b      	ldr	r2, [pc, #44]	; (8011088 <prvCheckTasksWaitingTermination+0x54>)
 801105a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801105c:	4b0b      	ldr	r3, [pc, #44]	; (801108c <prvCheckTasksWaitingTermination+0x58>)
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	3b01      	subs	r3, #1
 8011062:	4a0a      	ldr	r2, [pc, #40]	; (801108c <prvCheckTasksWaitingTermination+0x58>)
 8011064:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011066:	f7fe fa2d 	bl	800f4c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801106a:	6878      	ldr	r0, [r7, #4]
 801106c:	f000 f810 	bl	8011090 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011070:	4b06      	ldr	r3, [pc, #24]	; (801108c <prvCheckTasksWaitingTermination+0x58>)
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d1e1      	bne.n	801103c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011078:	bf00      	nop
 801107a:	bf00      	nop
 801107c:	3708      	adds	r7, #8
 801107e:	46bd      	mov	sp, r7
 8011080:	bd80      	pop	{r7, pc}
 8011082:	bf00      	nop
 8011084:	2000829c 	.word	0x2000829c
 8011088:	200082cc 	.word	0x200082cc
 801108c:	200082b0 	.word	0x200082b0

08011090 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011090:	b580      	push	{r7, lr}
 8011092:	b084      	sub	sp, #16
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 801109e:	4618      	mov	r0, r3
 80110a0:	f002 fcdc 	bl	8013a5c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	f893 31b1 	ldrb.w	r3, [r3, #433]	; 0x1b1
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d108      	bne.n	80110c0 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110b2:	4618      	mov	r0, r3
 80110b4:	f7fd ffde 	bl	800f074 <vPortFree>
				vPortFree( pxTCB );
 80110b8:	6878      	ldr	r0, [r7, #4]
 80110ba:	f7fd ffdb 	bl	800f074 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80110be:	e018      	b.n	80110f2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	f893 31b1 	ldrb.w	r3, [r3, #433]	; 0x1b1
 80110c6:	2b01      	cmp	r3, #1
 80110c8:	d103      	bne.n	80110d2 <prvDeleteTCB+0x42>
				vPortFree( pxTCB );
 80110ca:	6878      	ldr	r0, [r7, #4]
 80110cc:	f7fd ffd2 	bl	800f074 <vPortFree>
	}
 80110d0:	e00f      	b.n	80110f2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	f893 31b1 	ldrb.w	r3, [r3, #433]	; 0x1b1
 80110d8:	2b02      	cmp	r3, #2
 80110da:	d00a      	beq.n	80110f2 <prvDeleteTCB+0x62>
	__asm volatile
 80110dc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80110e0:	f383 8811 	msr	BASEPRI, r3
 80110e4:	f3bf 8f6f 	isb	sy
 80110e8:	f3bf 8f4f 	dsb	sy
 80110ec:	60fb      	str	r3, [r7, #12]
}
 80110ee:	bf00      	nop
 80110f0:	e7fe      	b.n	80110f0 <prvDeleteTCB+0x60>
	}
 80110f2:	bf00      	nop
 80110f4:	3710      	adds	r7, #16
 80110f6:	46bd      	mov	sp, r7
 80110f8:	bd80      	pop	{r7, pc}
	...

080110fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80110fc:	b480      	push	{r7}
 80110fe:	b083      	sub	sp, #12
 8011100:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011102:	4b0c      	ldr	r3, [pc, #48]	; (8011134 <prvResetNextTaskUnblockTime+0x38>)
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d104      	bne.n	8011116 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801110c:	4b0a      	ldr	r3, [pc, #40]	; (8011138 <prvResetNextTaskUnblockTime+0x3c>)
 801110e:	f04f 32ff 	mov.w	r2, #4294967295
 8011112:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011114:	e008      	b.n	8011128 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011116:	4b07      	ldr	r3, [pc, #28]	; (8011134 <prvResetNextTaskUnblockTime+0x38>)
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	68db      	ldr	r3, [r3, #12]
 801111c:	68db      	ldr	r3, [r3, #12]
 801111e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	685b      	ldr	r3, [r3, #4]
 8011124:	4a04      	ldr	r2, [pc, #16]	; (8011138 <prvResetNextTaskUnblockTime+0x3c>)
 8011126:	6013      	str	r3, [r2, #0]
}
 8011128:	bf00      	nop
 801112a:	370c      	adds	r7, #12
 801112c:	46bd      	mov	sp, r7
 801112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011132:	4770      	bx	lr
 8011134:	20008280 	.word	0x20008280
 8011138:	200082ec 	.word	0x200082ec

0801113c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801113c:	b480      	push	{r7}
 801113e:	b083      	sub	sp, #12
 8011140:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011142:	4b0b      	ldr	r3, [pc, #44]	; (8011170 <xTaskGetSchedulerState+0x34>)
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d102      	bne.n	8011150 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801114a:	2301      	movs	r3, #1
 801114c:	607b      	str	r3, [r7, #4]
 801114e:	e008      	b.n	8011162 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011150:	4b08      	ldr	r3, [pc, #32]	; (8011174 <xTaskGetSchedulerState+0x38>)
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d102      	bne.n	801115e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011158:	2302      	movs	r3, #2
 801115a:	607b      	str	r3, [r7, #4]
 801115c:	e001      	b.n	8011162 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801115e:	2300      	movs	r3, #0
 8011160:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011162:	687b      	ldr	r3, [r7, #4]
	}
 8011164:	4618      	mov	r0, r3
 8011166:	370c      	adds	r7, #12
 8011168:	46bd      	mov	sp, r7
 801116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116e:	4770      	bx	lr
 8011170:	200082d8 	.word	0x200082d8
 8011174:	200082f4 	.word	0x200082f4

08011178 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011178:	b580      	push	{r7, lr}
 801117a:	b086      	sub	sp, #24
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011184:	2300      	movs	r3, #0
 8011186:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d05c      	beq.n	8011248 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801118e:	4b31      	ldr	r3, [pc, #196]	; (8011254 <xTaskPriorityDisinherit+0xdc>)
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	693a      	ldr	r2, [r7, #16]
 8011194:	429a      	cmp	r2, r3
 8011196:	d00a      	beq.n	80111ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011198:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801119c:	f383 8811 	msr	BASEPRI, r3
 80111a0:	f3bf 8f6f 	isb	sy
 80111a4:	f3bf 8f4f 	dsb	sy
 80111a8:	60fb      	str	r3, [r7, #12]
}
 80111aa:	bf00      	nop
 80111ac:	e7fe      	b.n	80111ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80111ae:	693b      	ldr	r3, [r7, #16]
 80111b0:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d10a      	bne.n	80111ce <xTaskPriorityDisinherit+0x56>
	__asm volatile
 80111b8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80111bc:	f383 8811 	msr	BASEPRI, r3
 80111c0:	f3bf 8f6f 	isb	sy
 80111c4:	f3bf 8f4f 	dsb	sy
 80111c8:	60bb      	str	r3, [r7, #8]
}
 80111ca:	bf00      	nop
 80111cc:	e7fe      	b.n	80111cc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80111ce:	693b      	ldr	r3, [r7, #16]
 80111d0:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80111d4:	1e5a      	subs	r2, r3, #1
 80111d6:	693b      	ldr	r3, [r7, #16]
 80111d8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80111dc:	693b      	ldr	r3, [r7, #16]
 80111de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111e0:	693b      	ldr	r3, [r7, #16]
 80111e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80111e6:	429a      	cmp	r2, r3
 80111e8:	d02e      	beq.n	8011248 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80111ea:	693b      	ldr	r3, [r7, #16]
 80111ec:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d129      	bne.n	8011248 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80111f4:	693b      	ldr	r3, [r7, #16]
 80111f6:	3304      	adds	r3, #4
 80111f8:	4618      	mov	r0, r3
 80111fa:	f7fd ffdd 	bl	800f1b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80111fe:	693b      	ldr	r3, [r7, #16]
 8011200:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8011204:	693b      	ldr	r3, [r7, #16]
 8011206:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011208:	693b      	ldr	r3, [r7, #16]
 801120a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801120c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011210:	693b      	ldr	r3, [r7, #16]
 8011212:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011214:	693b      	ldr	r3, [r7, #16]
 8011216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011218:	4b0f      	ldr	r3, [pc, #60]	; (8011258 <xTaskPriorityDisinherit+0xe0>)
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	429a      	cmp	r2, r3
 801121e:	d903      	bls.n	8011228 <xTaskPriorityDisinherit+0xb0>
 8011220:	693b      	ldr	r3, [r7, #16]
 8011222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011224:	4a0c      	ldr	r2, [pc, #48]	; (8011258 <xTaskPriorityDisinherit+0xe0>)
 8011226:	6013      	str	r3, [r2, #0]
 8011228:	693b      	ldr	r3, [r7, #16]
 801122a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801122c:	4613      	mov	r3, r2
 801122e:	009b      	lsls	r3, r3, #2
 8011230:	4413      	add	r3, r2
 8011232:	009b      	lsls	r3, r3, #2
 8011234:	4a09      	ldr	r2, [pc, #36]	; (801125c <xTaskPriorityDisinherit+0xe4>)
 8011236:	441a      	add	r2, r3
 8011238:	693b      	ldr	r3, [r7, #16]
 801123a:	3304      	adds	r3, #4
 801123c:	4619      	mov	r1, r3
 801123e:	4610      	mov	r0, r2
 8011240:	f7fd ff5d 	bl	800f0fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011244:	2301      	movs	r3, #1
 8011246:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011248:	697b      	ldr	r3, [r7, #20]
	}
 801124a:	4618      	mov	r0, r3
 801124c:	3718      	adds	r7, #24
 801124e:	46bd      	mov	sp, r7
 8011250:	bd80      	pop	{r7, pc}
 8011252:	bf00      	nop
 8011254:	20007df4 	.word	0x20007df4
 8011258:	200082d4 	.word	0x200082d4
 801125c:	20007df8 	.word	0x20007df8

08011260 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b084      	sub	sp, #16
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
 8011268:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801126a:	4b24      	ldr	r3, [pc, #144]	; (80112fc <prvAddCurrentTaskToDelayedList+0x9c>)
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8011270:	4b23      	ldr	r3, [pc, #140]	; (8011300 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	2200      	movs	r2, #0
 8011276:	f883 21b2 	strb.w	r2, [r3, #434]	; 0x1b2
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801127a:	4b21      	ldr	r3, [pc, #132]	; (8011300 <prvAddCurrentTaskToDelayedList+0xa0>)
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	3304      	adds	r3, #4
 8011280:	4618      	mov	r0, r3
 8011282:	f7fd ff99 	bl	800f1b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	f1b3 3fff 	cmp.w	r3, #4294967295
 801128c:	d10a      	bne.n	80112a4 <prvAddCurrentTaskToDelayedList+0x44>
 801128e:	683b      	ldr	r3, [r7, #0]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d007      	beq.n	80112a4 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011294:	4b1a      	ldr	r3, [pc, #104]	; (8011300 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	3304      	adds	r3, #4
 801129a:	4619      	mov	r1, r3
 801129c:	4819      	ldr	r0, [pc, #100]	; (8011304 <prvAddCurrentTaskToDelayedList+0xa4>)
 801129e:	f7fd ff2e 	bl	800f0fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80112a2:	e026      	b.n	80112f2 <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80112a4:	68fa      	ldr	r2, [r7, #12]
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	4413      	add	r3, r2
 80112aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80112ac:	4b14      	ldr	r3, [pc, #80]	; (8011300 <prvAddCurrentTaskToDelayedList+0xa0>)
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	68ba      	ldr	r2, [r7, #8]
 80112b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80112b4:	68ba      	ldr	r2, [r7, #8]
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	429a      	cmp	r2, r3
 80112ba:	d209      	bcs.n	80112d0 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80112bc:	4b12      	ldr	r3, [pc, #72]	; (8011308 <prvAddCurrentTaskToDelayedList+0xa8>)
 80112be:	681a      	ldr	r2, [r3, #0]
 80112c0:	4b0f      	ldr	r3, [pc, #60]	; (8011300 <prvAddCurrentTaskToDelayedList+0xa0>)
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	3304      	adds	r3, #4
 80112c6:	4619      	mov	r1, r3
 80112c8:	4610      	mov	r0, r2
 80112ca:	f7fd ff3c 	bl	800f146 <vListInsert>
}
 80112ce:	e010      	b.n	80112f2 <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80112d0:	4b0e      	ldr	r3, [pc, #56]	; (801130c <prvAddCurrentTaskToDelayedList+0xac>)
 80112d2:	681a      	ldr	r2, [r3, #0]
 80112d4:	4b0a      	ldr	r3, [pc, #40]	; (8011300 <prvAddCurrentTaskToDelayedList+0xa0>)
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	3304      	adds	r3, #4
 80112da:	4619      	mov	r1, r3
 80112dc:	4610      	mov	r0, r2
 80112de:	f7fd ff32 	bl	800f146 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80112e2:	4b0b      	ldr	r3, [pc, #44]	; (8011310 <prvAddCurrentTaskToDelayedList+0xb0>)
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	68ba      	ldr	r2, [r7, #8]
 80112e8:	429a      	cmp	r2, r3
 80112ea:	d202      	bcs.n	80112f2 <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 80112ec:	4a08      	ldr	r2, [pc, #32]	; (8011310 <prvAddCurrentTaskToDelayedList+0xb0>)
 80112ee:	68bb      	ldr	r3, [r7, #8]
 80112f0:	6013      	str	r3, [r2, #0]
}
 80112f2:	bf00      	nop
 80112f4:	3710      	adds	r7, #16
 80112f6:	46bd      	mov	sp, r7
 80112f8:	bd80      	pop	{r7, pc}
 80112fa:	bf00      	nop
 80112fc:	200082d0 	.word	0x200082d0
 8011300:	20007df4 	.word	0x20007df4
 8011304:	200082b4 	.word	0x200082b4
 8011308:	20008284 	.word	0x20008284
 801130c:	20008280 	.word	0x20008280
 8011310:	200082ec 	.word	0x200082ec

08011314 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b08a      	sub	sp, #40	; 0x28
 8011318:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801131a:	2300      	movs	r3, #0
 801131c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801131e:	f000 fba1 	bl	8011a64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011322:	4b1c      	ldr	r3, [pc, #112]	; (8011394 <xTimerCreateTimerTask+0x80>)
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d021      	beq.n	801136e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801132a:	2300      	movs	r3, #0
 801132c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801132e:	2300      	movs	r3, #0
 8011330:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011332:	1d3a      	adds	r2, r7, #4
 8011334:	f107 0108 	add.w	r1, r7, #8
 8011338:	f107 030c 	add.w	r3, r7, #12
 801133c:	4618      	mov	r0, r3
 801133e:	f7fd fe35 	bl	800efac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011342:	6879      	ldr	r1, [r7, #4]
 8011344:	68bb      	ldr	r3, [r7, #8]
 8011346:	68fa      	ldr	r2, [r7, #12]
 8011348:	9202      	str	r2, [sp, #8]
 801134a:	9301      	str	r3, [sp, #4]
 801134c:	2337      	movs	r3, #55	; 0x37
 801134e:	9300      	str	r3, [sp, #0]
 8011350:	2300      	movs	r3, #0
 8011352:	460a      	mov	r2, r1
 8011354:	4910      	ldr	r1, [pc, #64]	; (8011398 <xTimerCreateTimerTask+0x84>)
 8011356:	4811      	ldr	r0, [pc, #68]	; (801139c <xTimerCreateTimerTask+0x88>)
 8011358:	f7fe fe92 	bl	8010080 <xTaskCreateStatic>
 801135c:	4603      	mov	r3, r0
 801135e:	4a10      	ldr	r2, [pc, #64]	; (80113a0 <xTimerCreateTimerTask+0x8c>)
 8011360:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011362:	4b0f      	ldr	r3, [pc, #60]	; (80113a0 <xTimerCreateTimerTask+0x8c>)
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d001      	beq.n	801136e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801136a:	2301      	movs	r3, #1
 801136c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801136e:	697b      	ldr	r3, [r7, #20]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d10a      	bne.n	801138a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8011374:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8011378:	f383 8811 	msr	BASEPRI, r3
 801137c:	f3bf 8f6f 	isb	sy
 8011380:	f3bf 8f4f 	dsb	sy
 8011384:	613b      	str	r3, [r7, #16]
}
 8011386:	bf00      	nop
 8011388:	e7fe      	b.n	8011388 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801138a:	697b      	ldr	r3, [r7, #20]
}
 801138c:	4618      	mov	r0, r3
 801138e:	3718      	adds	r7, #24
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}
 8011394:	20008328 	.word	0x20008328
 8011398:	08014714 	.word	0x08014714
 801139c:	0801160d 	.word	0x0801160d
 80113a0:	2000832c 	.word	0x2000832c

080113a4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b088      	sub	sp, #32
 80113a8:	af02      	add	r7, sp, #8
 80113aa:	60f8      	str	r0, [r7, #12]
 80113ac:	60b9      	str	r1, [r7, #8]
 80113ae:	607a      	str	r2, [r7, #4]
 80113b0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80113b2:	202c      	movs	r0, #44	; 0x2c
 80113b4:	f7fd fe14 	bl	800efe0 <pvPortMalloc>
 80113b8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80113ba:	697b      	ldr	r3, [r7, #20]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d00d      	beq.n	80113dc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80113c0:	697b      	ldr	r3, [r7, #20]
 80113c2:	2200      	movs	r2, #0
 80113c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80113c8:	697b      	ldr	r3, [r7, #20]
 80113ca:	9301      	str	r3, [sp, #4]
 80113cc:	6a3b      	ldr	r3, [r7, #32]
 80113ce:	9300      	str	r3, [sp, #0]
 80113d0:	683b      	ldr	r3, [r7, #0]
 80113d2:	687a      	ldr	r2, [r7, #4]
 80113d4:	68b9      	ldr	r1, [r7, #8]
 80113d6:	68f8      	ldr	r0, [r7, #12]
 80113d8:	f000 f843 	bl	8011462 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80113dc:	697b      	ldr	r3, [r7, #20]
	}
 80113de:	4618      	mov	r0, r3
 80113e0:	3718      	adds	r7, #24
 80113e2:	46bd      	mov	sp, r7
 80113e4:	bd80      	pop	{r7, pc}

080113e6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80113e6:	b580      	push	{r7, lr}
 80113e8:	b08a      	sub	sp, #40	; 0x28
 80113ea:	af02      	add	r7, sp, #8
 80113ec:	60f8      	str	r0, [r7, #12]
 80113ee:	60b9      	str	r1, [r7, #8]
 80113f0:	607a      	str	r2, [r7, #4]
 80113f2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80113f4:	232c      	movs	r3, #44	; 0x2c
 80113f6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80113f8:	693b      	ldr	r3, [r7, #16]
 80113fa:	2b2c      	cmp	r3, #44	; 0x2c
 80113fc:	d00a      	beq.n	8011414 <xTimerCreateStatic+0x2e>
	__asm volatile
 80113fe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8011402:	f383 8811 	msr	BASEPRI, r3
 8011406:	f3bf 8f6f 	isb	sy
 801140a:	f3bf 8f4f 	dsb	sy
 801140e:	61bb      	str	r3, [r7, #24]
}
 8011410:	bf00      	nop
 8011412:	e7fe      	b.n	8011412 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011414:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8011416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011418:	2b00      	cmp	r3, #0
 801141a:	d10a      	bne.n	8011432 <xTimerCreateStatic+0x4c>
	__asm volatile
 801141c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8011420:	f383 8811 	msr	BASEPRI, r3
 8011424:	f3bf 8f6f 	isb	sy
 8011428:	f3bf 8f4f 	dsb	sy
 801142c:	617b      	str	r3, [r7, #20]
}
 801142e:	bf00      	nop
 8011430:	e7fe      	b.n	8011430 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8011432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011434:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8011436:	69fb      	ldr	r3, [r7, #28]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d00d      	beq.n	8011458 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 801143c:	69fb      	ldr	r3, [r7, #28]
 801143e:	2202      	movs	r2, #2
 8011440:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8011444:	69fb      	ldr	r3, [r7, #28]
 8011446:	9301      	str	r3, [sp, #4]
 8011448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801144a:	9300      	str	r3, [sp, #0]
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	687a      	ldr	r2, [r7, #4]
 8011450:	68b9      	ldr	r1, [r7, #8]
 8011452:	68f8      	ldr	r0, [r7, #12]
 8011454:	f000 f805 	bl	8011462 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8011458:	69fb      	ldr	r3, [r7, #28]
	}
 801145a:	4618      	mov	r0, r3
 801145c:	3720      	adds	r7, #32
 801145e:	46bd      	mov	sp, r7
 8011460:	bd80      	pop	{r7, pc}

08011462 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8011462:	b580      	push	{r7, lr}
 8011464:	b086      	sub	sp, #24
 8011466:	af00      	add	r7, sp, #0
 8011468:	60f8      	str	r0, [r7, #12]
 801146a:	60b9      	str	r1, [r7, #8]
 801146c:	607a      	str	r2, [r7, #4]
 801146e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8011470:	68bb      	ldr	r3, [r7, #8]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d10a      	bne.n	801148c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8011476:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801147a:	f383 8811 	msr	BASEPRI, r3
 801147e:	f3bf 8f6f 	isb	sy
 8011482:	f3bf 8f4f 	dsb	sy
 8011486:	617b      	str	r3, [r7, #20]
}
 8011488:	bf00      	nop
 801148a:	e7fe      	b.n	801148a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 801148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801148e:	2b00      	cmp	r3, #0
 8011490:	d01e      	beq.n	80114d0 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8011492:	f000 fae7 	bl	8011a64 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8011496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011498:	68fa      	ldr	r2, [r7, #12]
 801149a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 801149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801149e:	68ba      	ldr	r2, [r7, #8]
 80114a0:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80114a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114a4:	683a      	ldr	r2, [r7, #0]
 80114a6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80114a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114aa:	6a3a      	ldr	r2, [r7, #32]
 80114ac:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80114ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114b0:	3304      	adds	r3, #4
 80114b2:	4618      	mov	r0, r3
 80114b4:	f7fd fe16 	bl	800f0e4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d008      	beq.n	80114d0 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80114be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80114c4:	f043 0304 	orr.w	r3, r3, #4
 80114c8:	b2da      	uxtb	r2, r3
 80114ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80114d0:	bf00      	nop
 80114d2:	3718      	adds	r7, #24
 80114d4:	46bd      	mov	sp, r7
 80114d6:	bd80      	pop	{r7, pc}

080114d8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b08a      	sub	sp, #40	; 0x28
 80114dc:	af00      	add	r7, sp, #0
 80114de:	60f8      	str	r0, [r7, #12]
 80114e0:	60b9      	str	r1, [r7, #8]
 80114e2:	607a      	str	r2, [r7, #4]
 80114e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80114e6:	2300      	movs	r3, #0
 80114e8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d10a      	bne.n	8011506 <xTimerGenericCommand+0x2e>
	__asm volatile
 80114f0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80114f4:	f383 8811 	msr	BASEPRI, r3
 80114f8:	f3bf 8f6f 	isb	sy
 80114fc:	f3bf 8f4f 	dsb	sy
 8011500:	623b      	str	r3, [r7, #32]
}
 8011502:	bf00      	nop
 8011504:	e7fe      	b.n	8011504 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011506:	4b1a      	ldr	r3, [pc, #104]	; (8011570 <xTimerGenericCommand+0x98>)
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d02a      	beq.n	8011564 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801150e:	68bb      	ldr	r3, [r7, #8]
 8011510:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801151a:	68bb      	ldr	r3, [r7, #8]
 801151c:	2b05      	cmp	r3, #5
 801151e:	dc18      	bgt.n	8011552 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011520:	f7ff fe0c 	bl	801113c <xTaskGetSchedulerState>
 8011524:	4603      	mov	r3, r0
 8011526:	2b02      	cmp	r3, #2
 8011528:	d109      	bne.n	801153e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801152a:	4b11      	ldr	r3, [pc, #68]	; (8011570 <xTimerGenericCommand+0x98>)
 801152c:	6818      	ldr	r0, [r3, #0]
 801152e:	f107 0110 	add.w	r1, r7, #16
 8011532:	2300      	movs	r3, #0
 8011534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011536:	f7fe f9bb 	bl	800f8b0 <xQueueGenericSend>
 801153a:	6278      	str	r0, [r7, #36]	; 0x24
 801153c:	e012      	b.n	8011564 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801153e:	4b0c      	ldr	r3, [pc, #48]	; (8011570 <xTimerGenericCommand+0x98>)
 8011540:	6818      	ldr	r0, [r3, #0]
 8011542:	f107 0110 	add.w	r1, r7, #16
 8011546:	2300      	movs	r3, #0
 8011548:	2200      	movs	r2, #0
 801154a:	f7fe f9b1 	bl	800f8b0 <xQueueGenericSend>
 801154e:	6278      	str	r0, [r7, #36]	; 0x24
 8011550:	e008      	b.n	8011564 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011552:	4b07      	ldr	r3, [pc, #28]	; (8011570 <xTimerGenericCommand+0x98>)
 8011554:	6818      	ldr	r0, [r3, #0]
 8011556:	f107 0110 	add.w	r1, r7, #16
 801155a:	2300      	movs	r3, #0
 801155c:	683a      	ldr	r2, [r7, #0]
 801155e:	f7fe faa5 	bl	800faac <xQueueGenericSendFromISR>
 8011562:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011566:	4618      	mov	r0, r3
 8011568:	3728      	adds	r7, #40	; 0x28
 801156a:	46bd      	mov	sp, r7
 801156c:	bd80      	pop	{r7, pc}
 801156e:	bf00      	nop
 8011570:	20008328 	.word	0x20008328

08011574 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011574:	b580      	push	{r7, lr}
 8011576:	b088      	sub	sp, #32
 8011578:	af02      	add	r7, sp, #8
 801157a:	6078      	str	r0, [r7, #4]
 801157c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801157e:	4b22      	ldr	r3, [pc, #136]	; (8011608 <prvProcessExpiredTimer+0x94>)
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	68db      	ldr	r3, [r3, #12]
 8011584:	68db      	ldr	r3, [r3, #12]
 8011586:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011588:	697b      	ldr	r3, [r7, #20]
 801158a:	3304      	adds	r3, #4
 801158c:	4618      	mov	r0, r3
 801158e:	f7fd fe13 	bl	800f1b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011592:	697b      	ldr	r3, [r7, #20]
 8011594:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011598:	f003 0304 	and.w	r3, r3, #4
 801159c:	2b00      	cmp	r3, #0
 801159e:	d022      	beq.n	80115e6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80115a0:	697b      	ldr	r3, [r7, #20]
 80115a2:	699a      	ldr	r2, [r3, #24]
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	18d1      	adds	r1, r2, r3
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	683a      	ldr	r2, [r7, #0]
 80115ac:	6978      	ldr	r0, [r7, #20]
 80115ae:	f000 f8d1 	bl	8011754 <prvInsertTimerInActiveList>
 80115b2:	4603      	mov	r3, r0
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d01f      	beq.n	80115f8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80115b8:	2300      	movs	r3, #0
 80115ba:	9300      	str	r3, [sp, #0]
 80115bc:	2300      	movs	r3, #0
 80115be:	687a      	ldr	r2, [r7, #4]
 80115c0:	2100      	movs	r1, #0
 80115c2:	6978      	ldr	r0, [r7, #20]
 80115c4:	f7ff ff88 	bl	80114d8 <xTimerGenericCommand>
 80115c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80115ca:	693b      	ldr	r3, [r7, #16]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d113      	bne.n	80115f8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80115d0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80115d4:	f383 8811 	msr	BASEPRI, r3
 80115d8:	f3bf 8f6f 	isb	sy
 80115dc:	f3bf 8f4f 	dsb	sy
 80115e0:	60fb      	str	r3, [r7, #12]
}
 80115e2:	bf00      	nop
 80115e4:	e7fe      	b.n	80115e4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80115e6:	697b      	ldr	r3, [r7, #20]
 80115e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80115ec:	f023 0301 	bic.w	r3, r3, #1
 80115f0:	b2da      	uxtb	r2, r3
 80115f2:	697b      	ldr	r3, [r7, #20]
 80115f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80115f8:	697b      	ldr	r3, [r7, #20]
 80115fa:	6a1b      	ldr	r3, [r3, #32]
 80115fc:	6978      	ldr	r0, [r7, #20]
 80115fe:	4798      	blx	r3
}
 8011600:	bf00      	nop
 8011602:	3718      	adds	r7, #24
 8011604:	46bd      	mov	sp, r7
 8011606:	bd80      	pop	{r7, pc}
 8011608:	20008320 	.word	0x20008320

0801160c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b084      	sub	sp, #16
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011614:	f107 0308 	add.w	r3, r7, #8
 8011618:	4618      	mov	r0, r3
 801161a:	f000 f857 	bl	80116cc <prvGetNextExpireTime>
 801161e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011620:	68bb      	ldr	r3, [r7, #8]
 8011622:	4619      	mov	r1, r3
 8011624:	68f8      	ldr	r0, [r7, #12]
 8011626:	f000 f803 	bl	8011630 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801162a:	f000 f8d5 	bl	80117d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801162e:	e7f1      	b.n	8011614 <prvTimerTask+0x8>

08011630 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b084      	sub	sp, #16
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
 8011638:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801163a:	f7ff f955 	bl	80108e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801163e:	f107 0308 	add.w	r3, r7, #8
 8011642:	4618      	mov	r0, r3
 8011644:	f000 f866 	bl	8011714 <prvSampleTimeNow>
 8011648:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801164a:	68bb      	ldr	r3, [r7, #8]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d130      	bne.n	80116b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011650:	683b      	ldr	r3, [r7, #0]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d10a      	bne.n	801166c <prvProcessTimerOrBlockTask+0x3c>
 8011656:	687a      	ldr	r2, [r7, #4]
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	429a      	cmp	r2, r3
 801165c:	d806      	bhi.n	801166c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801165e:	f7ff f951 	bl	8010904 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011662:	68f9      	ldr	r1, [r7, #12]
 8011664:	6878      	ldr	r0, [r7, #4]
 8011666:	f7ff ff85 	bl	8011574 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801166a:	e024      	b.n	80116b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801166c:	683b      	ldr	r3, [r7, #0]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d008      	beq.n	8011684 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011672:	4b13      	ldr	r3, [pc, #76]	; (80116c0 <prvProcessTimerOrBlockTask+0x90>)
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d101      	bne.n	8011680 <prvProcessTimerOrBlockTask+0x50>
 801167c:	2301      	movs	r3, #1
 801167e:	e000      	b.n	8011682 <prvProcessTimerOrBlockTask+0x52>
 8011680:	2300      	movs	r3, #0
 8011682:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011684:	4b0f      	ldr	r3, [pc, #60]	; (80116c4 <prvProcessTimerOrBlockTask+0x94>)
 8011686:	6818      	ldr	r0, [r3, #0]
 8011688:	687a      	ldr	r2, [r7, #4]
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	1ad3      	subs	r3, r2, r3
 801168e:	683a      	ldr	r2, [r7, #0]
 8011690:	4619      	mov	r1, r3
 8011692:	f7fe fcc1 	bl	8010018 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011696:	f7ff f935 	bl	8010904 <xTaskResumeAll>
 801169a:	4603      	mov	r3, r0
 801169c:	2b00      	cmp	r3, #0
 801169e:	d10a      	bne.n	80116b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80116a0:	4b09      	ldr	r3, [pc, #36]	; (80116c8 <prvProcessTimerOrBlockTask+0x98>)
 80116a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116a6:	601a      	str	r2, [r3, #0]
 80116a8:	f3bf 8f4f 	dsb	sy
 80116ac:	f3bf 8f6f 	isb	sy
}
 80116b0:	e001      	b.n	80116b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80116b2:	f7ff f927 	bl	8010904 <xTaskResumeAll>
}
 80116b6:	bf00      	nop
 80116b8:	3710      	adds	r7, #16
 80116ba:	46bd      	mov	sp, r7
 80116bc:	bd80      	pop	{r7, pc}
 80116be:	bf00      	nop
 80116c0:	20008324 	.word	0x20008324
 80116c4:	20008328 	.word	0x20008328
 80116c8:	e000ed04 	.word	0xe000ed04

080116cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80116cc:	b480      	push	{r7}
 80116ce:	b085      	sub	sp, #20
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80116d4:	4b0e      	ldr	r3, [pc, #56]	; (8011710 <prvGetNextExpireTime+0x44>)
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d101      	bne.n	80116e2 <prvGetNextExpireTime+0x16>
 80116de:	2201      	movs	r2, #1
 80116e0:	e000      	b.n	80116e4 <prvGetNextExpireTime+0x18>
 80116e2:	2200      	movs	r2, #0
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d105      	bne.n	80116fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80116f0:	4b07      	ldr	r3, [pc, #28]	; (8011710 <prvGetNextExpireTime+0x44>)
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	68db      	ldr	r3, [r3, #12]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	60fb      	str	r3, [r7, #12]
 80116fa:	e001      	b.n	8011700 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80116fc:	2300      	movs	r3, #0
 80116fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011700:	68fb      	ldr	r3, [r7, #12]
}
 8011702:	4618      	mov	r0, r3
 8011704:	3714      	adds	r7, #20
 8011706:	46bd      	mov	sp, r7
 8011708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170c:	4770      	bx	lr
 801170e:	bf00      	nop
 8011710:	20008320 	.word	0x20008320

08011714 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b084      	sub	sp, #16
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801171c:	f7ff f990 	bl	8010a40 <xTaskGetTickCount>
 8011720:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011722:	4b0b      	ldr	r3, [pc, #44]	; (8011750 <prvSampleTimeNow+0x3c>)
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	68fa      	ldr	r2, [r7, #12]
 8011728:	429a      	cmp	r2, r3
 801172a:	d205      	bcs.n	8011738 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801172c:	f000 f936 	bl	801199c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	2201      	movs	r2, #1
 8011734:	601a      	str	r2, [r3, #0]
 8011736:	e002      	b.n	801173e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	2200      	movs	r2, #0
 801173c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801173e:	4a04      	ldr	r2, [pc, #16]	; (8011750 <prvSampleTimeNow+0x3c>)
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011744:	68fb      	ldr	r3, [r7, #12]
}
 8011746:	4618      	mov	r0, r3
 8011748:	3710      	adds	r7, #16
 801174a:	46bd      	mov	sp, r7
 801174c:	bd80      	pop	{r7, pc}
 801174e:	bf00      	nop
 8011750:	20008330 	.word	0x20008330

08011754 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011754:	b580      	push	{r7, lr}
 8011756:	b086      	sub	sp, #24
 8011758:	af00      	add	r7, sp, #0
 801175a:	60f8      	str	r0, [r7, #12]
 801175c:	60b9      	str	r1, [r7, #8]
 801175e:	607a      	str	r2, [r7, #4]
 8011760:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011762:	2300      	movs	r3, #0
 8011764:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	68ba      	ldr	r2, [r7, #8]
 801176a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	68fa      	ldr	r2, [r7, #12]
 8011770:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011772:	68ba      	ldr	r2, [r7, #8]
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	429a      	cmp	r2, r3
 8011778:	d812      	bhi.n	80117a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801177a:	687a      	ldr	r2, [r7, #4]
 801177c:	683b      	ldr	r3, [r7, #0]
 801177e:	1ad2      	subs	r2, r2, r3
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	699b      	ldr	r3, [r3, #24]
 8011784:	429a      	cmp	r2, r3
 8011786:	d302      	bcc.n	801178e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011788:	2301      	movs	r3, #1
 801178a:	617b      	str	r3, [r7, #20]
 801178c:	e01b      	b.n	80117c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801178e:	4b10      	ldr	r3, [pc, #64]	; (80117d0 <prvInsertTimerInActiveList+0x7c>)
 8011790:	681a      	ldr	r2, [r3, #0]
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	3304      	adds	r3, #4
 8011796:	4619      	mov	r1, r3
 8011798:	4610      	mov	r0, r2
 801179a:	f7fd fcd4 	bl	800f146 <vListInsert>
 801179e:	e012      	b.n	80117c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80117a0:	687a      	ldr	r2, [r7, #4]
 80117a2:	683b      	ldr	r3, [r7, #0]
 80117a4:	429a      	cmp	r2, r3
 80117a6:	d206      	bcs.n	80117b6 <prvInsertTimerInActiveList+0x62>
 80117a8:	68ba      	ldr	r2, [r7, #8]
 80117aa:	683b      	ldr	r3, [r7, #0]
 80117ac:	429a      	cmp	r2, r3
 80117ae:	d302      	bcc.n	80117b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80117b0:	2301      	movs	r3, #1
 80117b2:	617b      	str	r3, [r7, #20]
 80117b4:	e007      	b.n	80117c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80117b6:	4b07      	ldr	r3, [pc, #28]	; (80117d4 <prvInsertTimerInActiveList+0x80>)
 80117b8:	681a      	ldr	r2, [r3, #0]
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	3304      	adds	r3, #4
 80117be:	4619      	mov	r1, r3
 80117c0:	4610      	mov	r0, r2
 80117c2:	f7fd fcc0 	bl	800f146 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80117c6:	697b      	ldr	r3, [r7, #20]
}
 80117c8:	4618      	mov	r0, r3
 80117ca:	3718      	adds	r7, #24
 80117cc:	46bd      	mov	sp, r7
 80117ce:	bd80      	pop	{r7, pc}
 80117d0:	20008324 	.word	0x20008324
 80117d4:	20008320 	.word	0x20008320

080117d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b08e      	sub	sp, #56	; 0x38
 80117dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80117de:	e0ca      	b.n	8011976 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	da18      	bge.n	8011818 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80117e6:	1d3b      	adds	r3, r7, #4
 80117e8:	3304      	adds	r3, #4
 80117ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80117ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d10a      	bne.n	8011808 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80117f2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80117f6:	f383 8811 	msr	BASEPRI, r3
 80117fa:	f3bf 8f6f 	isb	sy
 80117fe:	f3bf 8f4f 	dsb	sy
 8011802:	61fb      	str	r3, [r7, #28]
}
 8011804:	bf00      	nop
 8011806:	e7fe      	b.n	8011806 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801180e:	6850      	ldr	r0, [r2, #4]
 8011810:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011812:	6892      	ldr	r2, [r2, #8]
 8011814:	4611      	mov	r1, r2
 8011816:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	2b00      	cmp	r3, #0
 801181c:	f2c0 80aa 	blt.w	8011974 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011826:	695b      	ldr	r3, [r3, #20]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d004      	beq.n	8011836 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801182c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801182e:	3304      	adds	r3, #4
 8011830:	4618      	mov	r0, r3
 8011832:	f7fd fcc1 	bl	800f1b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011836:	463b      	mov	r3, r7
 8011838:	4618      	mov	r0, r3
 801183a:	f7ff ff6b 	bl	8011714 <prvSampleTimeNow>
 801183e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	2b09      	cmp	r3, #9
 8011844:	f200 8097 	bhi.w	8011976 <prvProcessReceivedCommands+0x19e>
 8011848:	a201      	add	r2, pc, #4	; (adr r2, 8011850 <prvProcessReceivedCommands+0x78>)
 801184a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801184e:	bf00      	nop
 8011850:	08011879 	.word	0x08011879
 8011854:	08011879 	.word	0x08011879
 8011858:	08011879 	.word	0x08011879
 801185c:	080118ed 	.word	0x080118ed
 8011860:	08011901 	.word	0x08011901
 8011864:	0801194b 	.word	0x0801194b
 8011868:	08011879 	.word	0x08011879
 801186c:	08011879 	.word	0x08011879
 8011870:	080118ed 	.word	0x080118ed
 8011874:	08011901 	.word	0x08011901
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801187a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801187e:	f043 0301 	orr.w	r3, r3, #1
 8011882:	b2da      	uxtb	r2, r3
 8011884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011886:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801188a:	68ba      	ldr	r2, [r7, #8]
 801188c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801188e:	699b      	ldr	r3, [r3, #24]
 8011890:	18d1      	adds	r1, r2, r3
 8011892:	68bb      	ldr	r3, [r7, #8]
 8011894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011896:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011898:	f7ff ff5c 	bl	8011754 <prvInsertTimerInActiveList>
 801189c:	4603      	mov	r3, r0
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d069      	beq.n	8011976 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80118a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118a4:	6a1b      	ldr	r3, [r3, #32]
 80118a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80118a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80118aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80118b0:	f003 0304 	and.w	r3, r3, #4
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d05e      	beq.n	8011976 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80118b8:	68ba      	ldr	r2, [r7, #8]
 80118ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118bc:	699b      	ldr	r3, [r3, #24]
 80118be:	441a      	add	r2, r3
 80118c0:	2300      	movs	r3, #0
 80118c2:	9300      	str	r3, [sp, #0]
 80118c4:	2300      	movs	r3, #0
 80118c6:	2100      	movs	r1, #0
 80118c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80118ca:	f7ff fe05 	bl	80114d8 <xTimerGenericCommand>
 80118ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80118d0:	6a3b      	ldr	r3, [r7, #32]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d14f      	bne.n	8011976 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80118d6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80118da:	f383 8811 	msr	BASEPRI, r3
 80118de:	f3bf 8f6f 	isb	sy
 80118e2:	f3bf 8f4f 	dsb	sy
 80118e6:	61bb      	str	r3, [r7, #24]
}
 80118e8:	bf00      	nop
 80118ea:	e7fe      	b.n	80118ea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80118ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80118f2:	f023 0301 	bic.w	r3, r3, #1
 80118f6:	b2da      	uxtb	r2, r3
 80118f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80118fe:	e03a      	b.n	8011976 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011902:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011906:	f043 0301 	orr.w	r3, r3, #1
 801190a:	b2da      	uxtb	r2, r3
 801190c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801190e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011912:	68ba      	ldr	r2, [r7, #8]
 8011914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011916:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801191a:	699b      	ldr	r3, [r3, #24]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d10a      	bne.n	8011936 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8011920:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8011924:	f383 8811 	msr	BASEPRI, r3
 8011928:	f3bf 8f6f 	isb	sy
 801192c:	f3bf 8f4f 	dsb	sy
 8011930:	617b      	str	r3, [r7, #20]
}
 8011932:	bf00      	nop
 8011934:	e7fe      	b.n	8011934 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011938:	699a      	ldr	r2, [r3, #24]
 801193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801193c:	18d1      	adds	r1, r2, r3
 801193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011942:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011944:	f7ff ff06 	bl	8011754 <prvInsertTimerInActiveList>
					break;
 8011948:	e015      	b.n	8011976 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801194a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801194c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011950:	f003 0302 	and.w	r3, r3, #2
 8011954:	2b00      	cmp	r3, #0
 8011956:	d103      	bne.n	8011960 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8011958:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801195a:	f7fd fb8b 	bl	800f074 <vPortFree>
 801195e:	e00a      	b.n	8011976 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011962:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011966:	f023 0301 	bic.w	r3, r3, #1
 801196a:	b2da      	uxtb	r2, r3
 801196c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801196e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011972:	e000      	b.n	8011976 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011974:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011976:	4b08      	ldr	r3, [pc, #32]	; (8011998 <prvProcessReceivedCommands+0x1c0>)
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	1d39      	adds	r1, r7, #4
 801197c:	2200      	movs	r2, #0
 801197e:	4618      	mov	r0, r3
 8011980:	f7fe f930 	bl	800fbe4 <xQueueReceive>
 8011984:	4603      	mov	r3, r0
 8011986:	2b00      	cmp	r3, #0
 8011988:	f47f af2a 	bne.w	80117e0 <prvProcessReceivedCommands+0x8>
	}
}
 801198c:	bf00      	nop
 801198e:	bf00      	nop
 8011990:	3730      	adds	r7, #48	; 0x30
 8011992:	46bd      	mov	sp, r7
 8011994:	bd80      	pop	{r7, pc}
 8011996:	bf00      	nop
 8011998:	20008328 	.word	0x20008328

0801199c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b088      	sub	sp, #32
 80119a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80119a2:	e048      	b.n	8011a36 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80119a4:	4b2d      	ldr	r3, [pc, #180]	; (8011a5c <prvSwitchTimerLists+0xc0>)
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	68db      	ldr	r3, [r3, #12]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80119ae:	4b2b      	ldr	r3, [pc, #172]	; (8011a5c <prvSwitchTimerLists+0xc0>)
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	68db      	ldr	r3, [r3, #12]
 80119b4:	68db      	ldr	r3, [r3, #12]
 80119b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	3304      	adds	r3, #4
 80119bc:	4618      	mov	r0, r3
 80119be:	f7fd fbfb 	bl	800f1b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	6a1b      	ldr	r3, [r3, #32]
 80119c6:	68f8      	ldr	r0, [r7, #12]
 80119c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80119d0:	f003 0304 	and.w	r3, r3, #4
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d02e      	beq.n	8011a36 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	699b      	ldr	r3, [r3, #24]
 80119dc:	693a      	ldr	r2, [r7, #16]
 80119de:	4413      	add	r3, r2
 80119e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80119e2:	68ba      	ldr	r2, [r7, #8]
 80119e4:	693b      	ldr	r3, [r7, #16]
 80119e6:	429a      	cmp	r2, r3
 80119e8:	d90e      	bls.n	8011a08 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	68ba      	ldr	r2, [r7, #8]
 80119ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	68fa      	ldr	r2, [r7, #12]
 80119f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80119f6:	4b19      	ldr	r3, [pc, #100]	; (8011a5c <prvSwitchTimerLists+0xc0>)
 80119f8:	681a      	ldr	r2, [r3, #0]
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	3304      	adds	r3, #4
 80119fe:	4619      	mov	r1, r3
 8011a00:	4610      	mov	r0, r2
 8011a02:	f7fd fba0 	bl	800f146 <vListInsert>
 8011a06:	e016      	b.n	8011a36 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011a08:	2300      	movs	r3, #0
 8011a0a:	9300      	str	r3, [sp, #0]
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	693a      	ldr	r2, [r7, #16]
 8011a10:	2100      	movs	r1, #0
 8011a12:	68f8      	ldr	r0, [r7, #12]
 8011a14:	f7ff fd60 	bl	80114d8 <xTimerGenericCommand>
 8011a18:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d10a      	bne.n	8011a36 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8011a20:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8011a24:	f383 8811 	msr	BASEPRI, r3
 8011a28:	f3bf 8f6f 	isb	sy
 8011a2c:	f3bf 8f4f 	dsb	sy
 8011a30:	603b      	str	r3, [r7, #0]
}
 8011a32:	bf00      	nop
 8011a34:	e7fe      	b.n	8011a34 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011a36:	4b09      	ldr	r3, [pc, #36]	; (8011a5c <prvSwitchTimerLists+0xc0>)
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d1b1      	bne.n	80119a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011a40:	4b06      	ldr	r3, [pc, #24]	; (8011a5c <prvSwitchTimerLists+0xc0>)
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011a46:	4b06      	ldr	r3, [pc, #24]	; (8011a60 <prvSwitchTimerLists+0xc4>)
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	4a04      	ldr	r2, [pc, #16]	; (8011a5c <prvSwitchTimerLists+0xc0>)
 8011a4c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011a4e:	4a04      	ldr	r2, [pc, #16]	; (8011a60 <prvSwitchTimerLists+0xc4>)
 8011a50:	697b      	ldr	r3, [r7, #20]
 8011a52:	6013      	str	r3, [r2, #0]
}
 8011a54:	bf00      	nop
 8011a56:	3718      	adds	r7, #24
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	bd80      	pop	{r7, pc}
 8011a5c:	20008320 	.word	0x20008320
 8011a60:	20008324 	.word	0x20008324

08011a64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b082      	sub	sp, #8
 8011a68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011a6a:	f7fd fcfb 	bl	800f464 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011a6e:	4b15      	ldr	r3, [pc, #84]	; (8011ac4 <prvCheckForValidListAndQueue+0x60>)
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d120      	bne.n	8011ab8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011a76:	4814      	ldr	r0, [pc, #80]	; (8011ac8 <prvCheckForValidListAndQueue+0x64>)
 8011a78:	f7fd fb14 	bl	800f0a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011a7c:	4813      	ldr	r0, [pc, #76]	; (8011acc <prvCheckForValidListAndQueue+0x68>)
 8011a7e:	f7fd fb11 	bl	800f0a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011a82:	4b13      	ldr	r3, [pc, #76]	; (8011ad0 <prvCheckForValidListAndQueue+0x6c>)
 8011a84:	4a10      	ldr	r2, [pc, #64]	; (8011ac8 <prvCheckForValidListAndQueue+0x64>)
 8011a86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011a88:	4b12      	ldr	r3, [pc, #72]	; (8011ad4 <prvCheckForValidListAndQueue+0x70>)
 8011a8a:	4a10      	ldr	r2, [pc, #64]	; (8011acc <prvCheckForValidListAndQueue+0x68>)
 8011a8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011a8e:	2300      	movs	r3, #0
 8011a90:	9300      	str	r3, [sp, #0]
 8011a92:	4b11      	ldr	r3, [pc, #68]	; (8011ad8 <prvCheckForValidListAndQueue+0x74>)
 8011a94:	4a11      	ldr	r2, [pc, #68]	; (8011adc <prvCheckForValidListAndQueue+0x78>)
 8011a96:	2110      	movs	r1, #16
 8011a98:	20ff      	movs	r0, #255	; 0xff
 8011a9a:	f7fd fe6d 	bl	800f778 <xQueueGenericCreateStatic>
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	4a08      	ldr	r2, [pc, #32]	; (8011ac4 <prvCheckForValidListAndQueue+0x60>)
 8011aa2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011aa4:	4b07      	ldr	r3, [pc, #28]	; (8011ac4 <prvCheckForValidListAndQueue+0x60>)
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d005      	beq.n	8011ab8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011aac:	4b05      	ldr	r3, [pc, #20]	; (8011ac4 <prvCheckForValidListAndQueue+0x60>)
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	490b      	ldr	r1, [pc, #44]	; (8011ae0 <prvCheckForValidListAndQueue+0x7c>)
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	f7fe fa86 	bl	800ffc4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011ab8:	f7fd fd04 	bl	800f4c4 <vPortExitCritical>
}
 8011abc:	bf00      	nop
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	bd80      	pop	{r7, pc}
 8011ac2:	bf00      	nop
 8011ac4:	20008328 	.word	0x20008328
 8011ac8:	200082f8 	.word	0x200082f8
 8011acc:	2000830c 	.word	0x2000830c
 8011ad0:	20008320 	.word	0x20008320
 8011ad4:	20008324 	.word	0x20008324
 8011ad8:	20009324 	.word	0x20009324
 8011adc:	20008334 	.word	0x20008334
 8011ae0:	0801471c 	.word	0x0801471c

08011ae4 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b086      	sub	sp, #24
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d10a      	bne.n	8011b0c <xTimerIsTimerActive+0x28>
	__asm volatile
 8011af6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8011afa:	f383 8811 	msr	BASEPRI, r3
 8011afe:	f3bf 8f6f 	isb	sy
 8011b02:	f3bf 8f4f 	dsb	sy
 8011b06:	60fb      	str	r3, [r7, #12]
}
 8011b08:	bf00      	nop
 8011b0a:	e7fe      	b.n	8011b0a <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8011b0c:	f7fd fcaa 	bl	800f464 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8011b10:	693b      	ldr	r3, [r7, #16]
 8011b12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011b16:	f003 0301 	and.w	r3, r3, #1
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d102      	bne.n	8011b24 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 8011b1e:	2300      	movs	r3, #0
 8011b20:	617b      	str	r3, [r7, #20]
 8011b22:	e001      	b.n	8011b28 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 8011b24:	2301      	movs	r3, #1
 8011b26:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8011b28:	f7fd fccc 	bl	800f4c4 <vPortExitCritical>

	return xReturn;
 8011b2c:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8011b2e:	4618      	mov	r0, r3
 8011b30:	3718      	adds	r7, #24
 8011b32:	46bd      	mov	sp, r7
 8011b34:	bd80      	pop	{r7, pc}

08011b36 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8011b36:	b580      	push	{r7, lr}
 8011b38:	b086      	sub	sp, #24
 8011b3a:	af00      	add	r7, sp, #0
 8011b3c:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d10a      	bne.n	8011b5e <pvTimerGetTimerID+0x28>
	__asm volatile
 8011b48:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8011b4c:	f383 8811 	msr	BASEPRI, r3
 8011b50:	f3bf 8f6f 	isb	sy
 8011b54:	f3bf 8f4f 	dsb	sy
 8011b58:	60fb      	str	r3, [r7, #12]
}
 8011b5a:	bf00      	nop
 8011b5c:	e7fe      	b.n	8011b5c <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8011b5e:	f7fd fc81 	bl	800f464 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8011b62:	697b      	ldr	r3, [r7, #20]
 8011b64:	69db      	ldr	r3, [r3, #28]
 8011b66:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8011b68:	f7fd fcac 	bl	800f4c4 <vPortExitCritical>

	return pvReturn;
 8011b6c:	693b      	ldr	r3, [r7, #16]
}
 8011b6e:	4618      	mov	r0, r3
 8011b70:	3718      	adds	r7, #24
 8011b72:	46bd      	mov	sp, r7
 8011b74:	bd80      	pop	{r7, pc}
	...

08011b78 <Rte_Read_Dem_DemPort_Dem_DtcArray>:
/*****************************************
*		END OF FUNCTIONS				 *
******************************************/
/* Run time environment interface. */
VOID Rte_Read_Dem_DemPort_Dem_DtcArray(uint8* data, uint8 position)
{
 8011b78:	b480      	push	{r7}
 8011b7a:	b083      	sub	sp, #12
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
 8011b80:	460b      	mov	r3, r1
 8011b82:	70fb      	strb	r3, [r7, #3]
	if(Dem_DtcArray[0] > 250)
 8011b84:	4b3a      	ldr	r3, [pc, #232]	; (8011c70 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8011b86:	781b      	ldrb	r3, [r3, #0]
 8011b88:	2bfa      	cmp	r3, #250	; 0xfa
 8011b8a:	d904      	bls.n	8011b96 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x1e>
	{
		ExtLights_DtcArray[0] = Dem_DtcArray[0];
 8011b8c:	4b38      	ldr	r3, [pc, #224]	; (8011c70 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8011b8e:	781a      	ldrb	r2, [r3, #0]
 8011b90:	4b38      	ldr	r3, [pc, #224]	; (8011c74 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8011b92:	701a      	strb	r2, [r3, #0]
 8011b94:	e002      	b.n	8011b9c <Rte_Read_Dem_DemPort_Dem_DtcArray+0x24>
	}
	else
	{
		ExtLights_DtcArray[0] = 0;
 8011b96:	4b37      	ldr	r3, [pc, #220]	; (8011c74 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8011b98:	2200      	movs	r2, #0
 8011b9a:	701a      	strb	r2, [r3, #0]
	}
	if(Dem_DtcArray[1] > 250)
 8011b9c:	4b34      	ldr	r3, [pc, #208]	; (8011c70 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8011b9e:	785b      	ldrb	r3, [r3, #1]
 8011ba0:	2bfa      	cmp	r3, #250	; 0xfa
 8011ba2:	d904      	bls.n	8011bae <Rte_Read_Dem_DemPort_Dem_DtcArray+0x36>
	{
		ExtLights_DtcArray[1] = Dem_DtcArray[1];
 8011ba4:	4b32      	ldr	r3, [pc, #200]	; (8011c70 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8011ba6:	785a      	ldrb	r2, [r3, #1]
 8011ba8:	4b32      	ldr	r3, [pc, #200]	; (8011c74 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8011baa:	705a      	strb	r2, [r3, #1]
 8011bac:	e002      	b.n	8011bb4 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x3c>
	}
	else
	{
		ExtLights_DtcArray[1] = 0;
 8011bae:	4b31      	ldr	r3, [pc, #196]	; (8011c74 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	705a      	strb	r2, [r3, #1]
	}
	if(Dem_DtcArray[2] > 250)
 8011bb4:	4b2e      	ldr	r3, [pc, #184]	; (8011c70 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8011bb6:	789b      	ldrb	r3, [r3, #2]
 8011bb8:	2bfa      	cmp	r3, #250	; 0xfa
 8011bba:	d904      	bls.n	8011bc6 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x4e>
	{
		ExtLights_DtcArray[2] = Dem_DtcArray[2];
 8011bbc:	4b2c      	ldr	r3, [pc, #176]	; (8011c70 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8011bbe:	789a      	ldrb	r2, [r3, #2]
 8011bc0:	4b2c      	ldr	r3, [pc, #176]	; (8011c74 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8011bc2:	709a      	strb	r2, [r3, #2]
 8011bc4:	e002      	b.n	8011bcc <Rte_Read_Dem_DemPort_Dem_DtcArray+0x54>
	}
	else
	{
		ExtLights_DtcArray[2] = 0;
 8011bc6:	4b2b      	ldr	r3, [pc, #172]	; (8011c74 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8011bc8:	2200      	movs	r2, #0
 8011bca:	709a      	strb	r2, [r3, #2]
	}
	if(Dem_DtcArray[3] > 250)
 8011bcc:	4b28      	ldr	r3, [pc, #160]	; (8011c70 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8011bce:	78db      	ldrb	r3, [r3, #3]
 8011bd0:	2bfa      	cmp	r3, #250	; 0xfa
 8011bd2:	d904      	bls.n	8011bde <Rte_Read_Dem_DemPort_Dem_DtcArray+0x66>
	{
		ExtLights_DtcArray[3] = Dem_DtcArray[3];
 8011bd4:	4b26      	ldr	r3, [pc, #152]	; (8011c70 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8011bd6:	78da      	ldrb	r2, [r3, #3]
 8011bd8:	4b26      	ldr	r3, [pc, #152]	; (8011c74 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8011bda:	70da      	strb	r2, [r3, #3]
 8011bdc:	e002      	b.n	8011be4 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x6c>
	}
	else
	{
		ExtLights_DtcArray[3] = 0;
 8011bde:	4b25      	ldr	r3, [pc, #148]	; (8011c74 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8011be0:	2200      	movs	r2, #0
 8011be2:	70da      	strb	r2, [r3, #3]
	}

	if(Dem_DtcArray[4] > 250)
 8011be4:	4b22      	ldr	r3, [pc, #136]	; (8011c70 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8011be6:	791b      	ldrb	r3, [r3, #4]
 8011be8:	2bfa      	cmp	r3, #250	; 0xfa
 8011bea:	d904      	bls.n	8011bf6 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x7e>
	{
		ExtLights_DtcArray[4] = Dem_DtcArray[4];
 8011bec:	4b20      	ldr	r3, [pc, #128]	; (8011c70 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8011bee:	791a      	ldrb	r2, [r3, #4]
 8011bf0:	4b20      	ldr	r3, [pc, #128]	; (8011c74 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8011bf2:	711a      	strb	r2, [r3, #4]
 8011bf4:	e002      	b.n	8011bfc <Rte_Read_Dem_DemPort_Dem_DtcArray+0x84>
	}
	else
	{
		ExtLights_DtcArray[4] = 0;
 8011bf6:	4b1f      	ldr	r3, [pc, #124]	; (8011c74 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	711a      	strb	r2, [r3, #4]
	}
	if(Dem_DtcArray[5] > 250)
 8011bfc:	4b1c      	ldr	r3, [pc, #112]	; (8011c70 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8011bfe:	795b      	ldrb	r3, [r3, #5]
 8011c00:	2bfa      	cmp	r3, #250	; 0xfa
 8011c02:	d904      	bls.n	8011c0e <Rte_Read_Dem_DemPort_Dem_DtcArray+0x96>
	{
		ExtLights_DtcArray[5] = Dem_DtcArray[5];
 8011c04:	4b1a      	ldr	r3, [pc, #104]	; (8011c70 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8011c06:	795a      	ldrb	r2, [r3, #5]
 8011c08:	4b1a      	ldr	r3, [pc, #104]	; (8011c74 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8011c0a:	715a      	strb	r2, [r3, #5]
 8011c0c:	e002      	b.n	8011c14 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x9c>
	}
	else
	{
		ExtLights_DtcArray[5] = 0;
 8011c0e:	4b19      	ldr	r3, [pc, #100]	; (8011c74 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8011c10:	2200      	movs	r2, #0
 8011c12:	715a      	strb	r2, [r3, #5]
	}
	if(Dem_DtcArray[6] > 250)
 8011c14:	4b16      	ldr	r3, [pc, #88]	; (8011c70 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8011c16:	799b      	ldrb	r3, [r3, #6]
 8011c18:	2bfa      	cmp	r3, #250	; 0xfa
 8011c1a:	d904      	bls.n	8011c26 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xae>
	{
		ExtLights_DtcArray[6] = Dem_DtcArray[6];
 8011c1c:	4b14      	ldr	r3, [pc, #80]	; (8011c70 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8011c1e:	799a      	ldrb	r2, [r3, #6]
 8011c20:	4b14      	ldr	r3, [pc, #80]	; (8011c74 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8011c22:	719a      	strb	r2, [r3, #6]
 8011c24:	e002      	b.n	8011c2c <Rte_Read_Dem_DemPort_Dem_DtcArray+0xb4>
	}
	else
	{
		ExtLights_DtcArray[6] = 0;
 8011c26:	4b13      	ldr	r3, [pc, #76]	; (8011c74 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8011c28:	2200      	movs	r2, #0
 8011c2a:	719a      	strb	r2, [r3, #6]
	}
	if(Dem_DtcArray[7] > 250)
 8011c2c:	4b10      	ldr	r3, [pc, #64]	; (8011c70 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8011c2e:	79db      	ldrb	r3, [r3, #7]
 8011c30:	2bfa      	cmp	r3, #250	; 0xfa
 8011c32:	d904      	bls.n	8011c3e <Rte_Read_Dem_DemPort_Dem_DtcArray+0xc6>
	{
		ExtLights_DtcArray[7] = Dem_DtcArray[7];
 8011c34:	4b0e      	ldr	r3, [pc, #56]	; (8011c70 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8011c36:	79da      	ldrb	r2, [r3, #7]
 8011c38:	4b0e      	ldr	r3, [pc, #56]	; (8011c74 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8011c3a:	71da      	strb	r2, [r3, #7]
 8011c3c:	e002      	b.n	8011c44 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xcc>
	}
	else
	{
		ExtLights_DtcArray[7] = 0;
 8011c3e:	4b0d      	ldr	r3, [pc, #52]	; (8011c74 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8011c40:	2200      	movs	r2, #0
 8011c42:	71da      	strb	r2, [r3, #7]
	{
		ExtLights_DtcArray[8] = Dem_DtcArray[8];
	}
	else
	{
		ExtLights_DtcArray[8] = 0;
 8011c44:	4b0b      	ldr	r3, [pc, #44]	; (8011c74 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8011c46:	2200      	movs	r2, #0
 8011c48:	721a      	strb	r2, [r3, #8]
	}
	if(Dem_DtcArray[9] > 250)
 8011c4a:	4b09      	ldr	r3, [pc, #36]	; (8011c70 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8011c4c:	7a5b      	ldrb	r3, [r3, #9]
 8011c4e:	2bfa      	cmp	r3, #250	; 0xfa
 8011c50:	d904      	bls.n	8011c5c <Rte_Read_Dem_DemPort_Dem_DtcArray+0xe4>
	{
		ExtLights_DtcArray[9] = Dem_DtcArray[9];
 8011c52:	4b07      	ldr	r3, [pc, #28]	; (8011c70 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8011c54:	7a5a      	ldrb	r2, [r3, #9]
 8011c56:	4b07      	ldr	r3, [pc, #28]	; (8011c74 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8011c58:	725a      	strb	r2, [r3, #9]
	}
	else
	{
		ExtLights_DtcArray[9] = 0;
	}
}
 8011c5a:	e002      	b.n	8011c62 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xea>
		ExtLights_DtcArray[9] = 0;
 8011c5c:	4b05      	ldr	r3, [pc, #20]	; (8011c74 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8011c5e:	2200      	movs	r2, #0
 8011c60:	725a      	strb	r2, [r3, #9]
}
 8011c62:	bf00      	nop
 8011c64:	370c      	adds	r7, #12
 8011c66:	46bd      	mov	sp, r7
 8011c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c6c:	4770      	bx	lr
 8011c6e:	bf00      	nop
 8011c70:	20000894 	.word	0x20000894
 8011c74:	20000170 	.word	0x20000170

08011c78 <Rte_Write_TimH_TimHPort_Tim3Ccr2>:
{
	TIM3->CCR1 = data;
}
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim3Ccr2(uint8 data)
{
 8011c78:	b480      	push	{r7}
 8011c7a:	b083      	sub	sp, #12
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	4603      	mov	r3, r0
 8011c80:	71fb      	strb	r3, [r7, #7]
	TIM3->CCR2 = data;
 8011c82:	4a04      	ldr	r2, [pc, #16]	; (8011c94 <Rte_Write_TimH_TimHPort_Tim3Ccr2+0x1c>)
 8011c84:	79fb      	ldrb	r3, [r7, #7]
 8011c86:	6393      	str	r3, [r2, #56]	; 0x38
}
 8011c88:	bf00      	nop
 8011c8a:	370c      	adds	r7, #12
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c92:	4770      	bx	lr
 8011c94:	40000400 	.word	0x40000400

08011c98 <Rte_Write_TimH_TimHPort_Tim3Ccr3>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim3Ccr3(uint8 data)
{
 8011c98:	b480      	push	{r7}
 8011c9a:	b083      	sub	sp, #12
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	71fb      	strb	r3, [r7, #7]
	TIM3->CCR3 = data;
 8011ca2:	4a04      	ldr	r2, [pc, #16]	; (8011cb4 <Rte_Write_TimH_TimHPort_Tim3Ccr3+0x1c>)
 8011ca4:	79fb      	ldrb	r3, [r7, #7]
 8011ca6:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8011ca8:	bf00      	nop
 8011caa:	370c      	adds	r7, #12
 8011cac:	46bd      	mov	sp, r7
 8011cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb2:	4770      	bx	lr
 8011cb4:	40000400 	.word	0x40000400

08011cb8 <Rte_Write_TimH_TimHPort_Tim3Ccr4>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim3Ccr4(uint8 data)
{
 8011cb8:	b480      	push	{r7}
 8011cba:	b083      	sub	sp, #12
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	4603      	mov	r3, r0
 8011cc0:	71fb      	strb	r3, [r7, #7]
	TIM3->CCR4 = data;
 8011cc2:	4a04      	ldr	r2, [pc, #16]	; (8011cd4 <Rte_Write_TimH_TimHPort_Tim3Ccr4+0x1c>)
 8011cc4:	79fb      	ldrb	r3, [r7, #7]
 8011cc6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8011cc8:	bf00      	nop
 8011cca:	370c      	adds	r7, #12
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd2:	4770      	bx	lr
 8011cd4:	40000400 	.word	0x40000400

08011cd8 <Rte_Write_TimH_TimHPort_Tim2Ccr1>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim2Ccr1(uint16 data)
{
 8011cd8:	b480      	push	{r7}
 8011cda:	b083      	sub	sp, #12
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	4603      	mov	r3, r0
 8011ce0:	80fb      	strh	r3, [r7, #6]
	TIM2->CCR1 = data;
 8011ce2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011ce6:	88fb      	ldrh	r3, [r7, #6]
 8011ce8:	6353      	str	r3, [r2, #52]	; 0x34
}
 8011cea:	bf00      	nop
 8011cec:	370c      	adds	r7, #12
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf4:	4770      	bx	lr

08011cf6 <Rte_Write_TimH_TimHPort_Tim2Ccr2>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim2Ccr2(uint16 data)
{
 8011cf6:	b480      	push	{r7}
 8011cf8:	b083      	sub	sp, #12
 8011cfa:	af00      	add	r7, sp, #0
 8011cfc:	4603      	mov	r3, r0
 8011cfe:	80fb      	strh	r3, [r7, #6]
	TIM2->CCR2 = data;
 8011d00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011d04:	88fb      	ldrh	r3, [r7, #6]
 8011d06:	6393      	str	r3, [r2, #56]	; 0x38
}
 8011d08:	bf00      	nop
 8011d0a:	370c      	adds	r7, #12
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d12:	4770      	bx	lr

08011d14 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>:
{
	TIM2->CCR3 = data;
}
/* Run time environment interface. */
VOID Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(uint8* data, uint8 position)
{
 8011d14:	b480      	push	{r7}
 8011d16:	b083      	sub	sp, #12
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	6078      	str	r0, [r7, #4]
 8011d1c:	460b      	mov	r3, r1
 8011d1e:	70fb      	strb	r3, [r7, #3]
	*data = SystemManager_Fault[position];
 8011d20:	78fb      	ldrb	r3, [r7, #3]
 8011d22:	4a06      	ldr	r2, [pc, #24]	; (8011d3c <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault+0x28>)
 8011d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011d28:	b2da      	uxtb	r2, r3
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	701a      	strb	r2, [r3, #0]
}
 8011d2e:	bf00      	nop
 8011d30:	370c      	adds	r7, #12
 8011d32:	46bd      	mov	sp, r7
 8011d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d38:	4770      	bx	lr
 8011d3a:	bf00      	nop
 8011d3c:	20009420 	.word	0x20009420

08011d40 <Rte_Write_Hvac_HvacPort_Hvac_FanValue>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_FanValue(uint8* data)
{
 8011d40:	b480      	push	{r7}
 8011d42:	b083      	sub	sp, #12
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	6078      	str	r0, [r7, #4]
	Hvac_FanValue = *data - 30;
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	781b      	ldrb	r3, [r3, #0]
 8011d4c:	3b1e      	subs	r3, #30
 8011d4e:	b2da      	uxtb	r2, r3
 8011d50:	4b03      	ldr	r3, [pc, #12]	; (8011d60 <Rte_Write_Hvac_HvacPort_Hvac_FanValue+0x20>)
 8011d52:	701a      	strb	r2, [r3, #0]
}
 8011d54:	bf00      	nop
 8011d56:	370c      	adds	r7, #12
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5e:	4770      	bx	lr
 8011d60:	20000182 	.word	0x20000182

08011d64 <Rte_Write_Hvac_HvacPort_Hvac_TemperatureValue>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_TemperatureValue(uint8* data)
{
 8011d64:	b480      	push	{r7}
 8011d66:	b083      	sub	sp, #12
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	6078      	str	r0, [r7, #4]
	Hvac_TemperatureValue = *data - 22;
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	781b      	ldrb	r3, [r3, #0]
 8011d70:	3b16      	subs	r3, #22
 8011d72:	b2da      	uxtb	r2, r3
 8011d74:	4b03      	ldr	r3, [pc, #12]	; (8011d84 <Rte_Write_Hvac_HvacPort_Hvac_TemperatureValue+0x20>)
 8011d76:	701a      	strb	r2, [r3, #0]
}
 8011d78:	bf00      	nop
 8011d7a:	370c      	adds	r7, #12
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d82:	4770      	bx	lr
 8011d84:	20000183 	.word	0x20000183

08011d88 <Rte_Write_Hvac_HvacPort_Hvac_LegVent>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_LegVent(uint8* data)
{
 8011d88:	b480      	push	{r7}
 8011d8a:	b083      	sub	sp, #12
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	6078      	str	r0, [r7, #4]
	Hvac_LegVent = *data;
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	781a      	ldrb	r2, [r3, #0]
 8011d94:	4b03      	ldr	r3, [pc, #12]	; (8011da4 <Rte_Write_Hvac_HvacPort_Hvac_LegVent+0x1c>)
 8011d96:	701a      	strb	r2, [r3, #0]
}
 8011d98:	bf00      	nop
 8011d9a:	370c      	adds	r7, #12
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da2:	4770      	bx	lr
 8011da4:	20000184 	.word	0x20000184

08011da8 <Rte_Write_Hvac_HvacPort_Hvac_MidVent>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_MidVent(uint8* data)
{
 8011da8:	b480      	push	{r7}
 8011daa:	b083      	sub	sp, #12
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	6078      	str	r0, [r7, #4]
	Hvac_MidVent = *data;
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	781a      	ldrb	r2, [r3, #0]
 8011db4:	4b03      	ldr	r3, [pc, #12]	; (8011dc4 <Rte_Write_Hvac_HvacPort_Hvac_MidVent+0x1c>)
 8011db6:	701a      	strb	r2, [r3, #0]
}
 8011db8:	bf00      	nop
 8011dba:	370c      	adds	r7, #12
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc2:	4770      	bx	lr
 8011dc4:	20000185 	.word	0x20000185

08011dc8 <Rte_Write_Hvac_HvacPort_Hvac_WindshieldVent>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_WindshieldVent(uint8* data)
{
 8011dc8:	b480      	push	{r7}
 8011dca:	b083      	sub	sp, #12
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
	Hvac_WindshieldVent = *data;
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	781a      	ldrb	r2, [r3, #0]
 8011dd4:	4b03      	ldr	r3, [pc, #12]	; (8011de4 <Rte_Write_Hvac_HvacPort_Hvac_WindshieldVent+0x1c>)
 8011dd6:	701a      	strb	r2, [r3, #0]
}
 8011dd8:	bf00      	nop
 8011dda:	370c      	adds	r7, #12
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de2:	4770      	bx	lr
 8011de4:	20000186 	.word	0x20000186

08011de8 <Rte_Write_Hvac_HvacPort_Hvac_WindshieldDefrost>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_WindshieldDefrost(uint8* data)
{
 8011de8:	b480      	push	{r7}
 8011dea:	b083      	sub	sp, #12
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
	Hvac_WindshieldDefrost = *data;
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	781a      	ldrb	r2, [r3, #0]
 8011df4:	4b03      	ldr	r3, [pc, #12]	; (8011e04 <Rte_Write_Hvac_HvacPort_Hvac_WindshieldDefrost+0x1c>)
 8011df6:	701a      	strb	r2, [r3, #0]
}
 8011df8:	bf00      	nop
 8011dfa:	370c      	adds	r7, #12
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e02:	4770      	bx	lr
 8011e04:	20000187 	.word	0x20000187

08011e08 <Rte_Write_Hvac_HvacPort_Hvac_RearWindshieldDefrost>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_RearWindshieldDefrost(uint8* data)
{
 8011e08:	b480      	push	{r7}
 8011e0a:	b083      	sub	sp, #12
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	6078      	str	r0, [r7, #4]
	Hvac_RearWindshieldDefrost = *data;
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	781a      	ldrb	r2, [r3, #0]
 8011e14:	4b03      	ldr	r3, [pc, #12]	; (8011e24 <Rte_Write_Hvac_HvacPort_Hvac_RearWindshieldDefrost+0x1c>)
 8011e16:	701a      	strb	r2, [r3, #0]
}
 8011e18:	bf00      	nop
 8011e1a:	370c      	adds	r7, #12
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e22:	4770      	bx	lr
 8011e24:	20000188 	.word	0x20000188

08011e28 <Rte_Write_Hvac_HvacPort_Hvac_Ac>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_Ac(uint8* data)
{
 8011e28:	b480      	push	{r7}
 8011e2a:	b083      	sub	sp, #12
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	6078      	str	r0, [r7, #4]
	Hvac_Ac = *data;
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	781a      	ldrb	r2, [r3, #0]
 8011e34:	4b03      	ldr	r3, [pc, #12]	; (8011e44 <Rte_Write_Hvac_HvacPort_Hvac_Ac+0x1c>)
 8011e36:	701a      	strb	r2, [r3, #0]
}
 8011e38:	bf00      	nop
 8011e3a:	370c      	adds	r7, #12
 8011e3c:	46bd      	mov	sp, r7
 8011e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e42:	4770      	bx	lr
 8011e44:	20000189 	.word	0x20000189

08011e48 <Rte_Write_Hvac_HvacPort_Hvac_Recirculation>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_Recirculation(uint8* data)
{
 8011e48:	b480      	push	{r7}
 8011e4a:	b083      	sub	sp, #12
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	6078      	str	r0, [r7, #4]
	Hvac_Recirculation = *data;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	781a      	ldrb	r2, [r3, #0]
 8011e54:	4b03      	ldr	r3, [pc, #12]	; (8011e64 <Rte_Write_Hvac_HvacPort_Hvac_Recirculation+0x1c>)
 8011e56:	701a      	strb	r2, [r3, #0]
}
 8011e58:	bf00      	nop
 8011e5a:	370c      	adds	r7, #12
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e62:	4770      	bx	lr
 8011e64:	2000018a 	.word	0x2000018a

08011e68 <Rte_Write_Hvac_HvacPort_Hvac_NoRecirculation>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_NoRecirculation(uint8* data)
{
 8011e68:	b480      	push	{r7}
 8011e6a:	b083      	sub	sp, #12
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	6078      	str	r0, [r7, #4]
	Hvac_NoRecirculation = *data;
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	781a      	ldrb	r2, [r3, #0]
 8011e74:	4b03      	ldr	r3, [pc, #12]	; (8011e84 <Rte_Write_Hvac_HvacPort_Hvac_NoRecirculation+0x1c>)
 8011e76:	701a      	strb	r2, [r3, #0]
}
 8011e78:	bf00      	nop
 8011e7a:	370c      	adds	r7, #12
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e82:	4770      	bx	lr
 8011e84:	2000018b 	.word	0x2000018b

08011e88 <Rte_Write_Hvac_HvacPort_Hvac_AutomaticMode>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_AutomaticMode(uint8* data)
{
 8011e88:	b480      	push	{r7}
 8011e8a:	b083      	sub	sp, #12
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
	Hvac_AutomaticMode = *data;
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	781a      	ldrb	r2, [r3, #0]
 8011e94:	4b03      	ldr	r3, [pc, #12]	; (8011ea4 <Rte_Write_Hvac_HvacPort_Hvac_AutomaticMode+0x1c>)
 8011e96:	701a      	strb	r2, [r3, #0]
}
 8011e98:	bf00      	nop
 8011e9a:	370c      	adds	r7, #12
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea2:	4770      	bx	lr
 8011ea4:	2000018c 	.word	0x2000018c

08011ea8 <Rte_Write_Hvac_HvacPort_Hvac_TsState>:
{
	 Hvac_AqsState = *data;
}
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_TsState(uint8* data)
{
 8011ea8:	b480      	push	{r7}
 8011eaa:	b083      	sub	sp, #12
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	6078      	str	r0, [r7, #4]
	Hvac_TsState = *data;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	781a      	ldrb	r2, [r3, #0]
 8011eb4:	4b03      	ldr	r3, [pc, #12]	; (8011ec4 <Rte_Write_Hvac_HvacPort_Hvac_TsState+0x1c>)
 8011eb6:	701a      	strb	r2, [r3, #0]
}
 8011eb8:	bf00      	nop
 8011eba:	370c      	adds	r7, #12
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec2:	4770      	bx	lr
 8011ec4:	20000180 	.word	0x20000180

08011ec8 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>:
{
	*data = DiagCtrl_FaultValue;
}
/* Run time environment interface. */
VOID Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(uint8 data)
{
 8011ec8:	b480      	push	{r7}
 8011eca:	b083      	sub	sp, #12
 8011ecc:	af00      	add	r7, sp, #0
 8011ece:	4603      	mov	r3, r0
 8011ed0:	71fb      	strb	r3, [r7, #7]
	DiagCtrl_FaultValue = data;
 8011ed2:	4a04      	ldr	r2, [pc, #16]	; (8011ee4 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue+0x1c>)
 8011ed4:	79fb      	ldrb	r3, [r7, #7]
 8011ed6:	7013      	strb	r3, [r2, #0]
}
 8011ed8:	bf00      	nop
 8011eda:	370c      	adds	r7, #12
 8011edc:	46bd      	mov	sp, r7
 8011ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee2:	4770      	bx	lr
 8011ee4:	2000012a 	.word	0x2000012a

08011ee8 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState>:
{
	*data = SecAlm_SensorState;
}
/* Run time environment interface. */
VOID Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState(uint32* data)
{
 8011ee8:	b480      	push	{r7}
 8011eea:	b083      	sub	sp, #12
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	6078      	str	r0, [r7, #4]
	SecAlm_SensorState = *data;
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	b2da      	uxtb	r2, r3
 8011ef6:	4b04      	ldr	r3, [pc, #16]	; (8011f08 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState+0x20>)
 8011ef8:	701a      	strb	r2, [r3, #0]
}
 8011efa:	bf00      	nop
 8011efc:	370c      	adds	r7, #12
 8011efe:	46bd      	mov	sp, r7
 8011f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f04:	4770      	bx	lr
 8011f06:	bf00      	nop
 8011f08:	200001ac 	.word	0x200001ac

08011f0c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState>:
{
	*data = ExtLights_LightSensorState;
}
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState(uint32* data)
{
 8011f0c:	b480      	push	{r7}
 8011f0e:	b083      	sub	sp, #12
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	6078      	str	r0, [r7, #4]
	ExtLights_LightSensorState = *data;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	4a03      	ldr	r2, [pc, #12]	; (8011f28 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState+0x1c>)
 8011f1a:	6013      	str	r3, [r2, #0]
}
 8011f1c:	bf00      	nop
 8011f1e:	370c      	adds	r7, #12
 8011f20:	46bd      	mov	sp, r7
 8011f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f26:	4770      	bx	lr
 8011f28:	20000168 	.word	0x20000168

08011f2c <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues>:
	Adc_ChannelOne_Buffer[14] = SenCtrl_MeasuredValues[14];
	Adc_ChannelOne_Buffer[15] = SenCtrl_MeasuredValues[15];
}
/* Run time environment interface. */
VOID Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues(uint32* data)
{
 8011f2c:	b480      	push	{r7}
 8011f2e:	b083      	sub	sp, #12
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
	SenCtrl_MeasuredValues[0] = Adc_ChannelOne_Buffer[0];
 8011f34:	4b1a      	ldr	r3, [pc, #104]	; (8011fa0 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	4a1a      	ldr	r2, [pc, #104]	; (8011fa4 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 8011f3a:	6013      	str	r3, [r2, #0]
	SenCtrl_MeasuredValues[2] = Adc_ChannelOne_Buffer[2];
 8011f3c:	4b18      	ldr	r3, [pc, #96]	; (8011fa0 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 8011f3e:	689b      	ldr	r3, [r3, #8]
 8011f40:	4a18      	ldr	r2, [pc, #96]	; (8011fa4 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 8011f42:	6093      	str	r3, [r2, #8]
	SenCtrl_MeasuredValues[3] = Adc_ChannelOne_Buffer[3];
 8011f44:	4b16      	ldr	r3, [pc, #88]	; (8011fa0 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 8011f46:	68db      	ldr	r3, [r3, #12]
 8011f48:	4a16      	ldr	r2, [pc, #88]	; (8011fa4 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 8011f4a:	60d3      	str	r3, [r2, #12]
	SenCtrl_MeasuredValues[4] = Adc_ChannelOne_Buffer[4];
 8011f4c:	4b14      	ldr	r3, [pc, #80]	; (8011fa0 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 8011f4e:	691b      	ldr	r3, [r3, #16]
 8011f50:	4a14      	ldr	r2, [pc, #80]	; (8011fa4 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 8011f52:	6113      	str	r3, [r2, #16]
	SenCtrl_MeasuredValues[5] = Adc_ChannelOne_Buffer[5];
 8011f54:	4b12      	ldr	r3, [pc, #72]	; (8011fa0 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 8011f56:	695b      	ldr	r3, [r3, #20]
 8011f58:	4a12      	ldr	r2, [pc, #72]	; (8011fa4 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 8011f5a:	6153      	str	r3, [r2, #20]
	SenCtrl_MeasuredValues[6] = Adc_ChannelOne_Buffer[6];
 8011f5c:	4b10      	ldr	r3, [pc, #64]	; (8011fa0 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 8011f5e:	699b      	ldr	r3, [r3, #24]
 8011f60:	4a10      	ldr	r2, [pc, #64]	; (8011fa4 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 8011f62:	6193      	str	r3, [r2, #24]
	SenCtrl_MeasuredValues[7] = Adc_ChannelOne_Buffer[7];
 8011f64:	4b0e      	ldr	r3, [pc, #56]	; (8011fa0 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 8011f66:	69db      	ldr	r3, [r3, #28]
 8011f68:	4a0e      	ldr	r2, [pc, #56]	; (8011fa4 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 8011f6a:	61d3      	str	r3, [r2, #28]
	SenCtrl_MeasuredValues[8] = Adc_ChannelOne_Buffer[8];
 8011f6c:	4b0c      	ldr	r3, [pc, #48]	; (8011fa0 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 8011f6e:	6a1b      	ldr	r3, [r3, #32]
 8011f70:	4a0c      	ldr	r2, [pc, #48]	; (8011fa4 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 8011f72:	6213      	str	r3, [r2, #32]
	SenCtrl_MeasuredValues[9] = Adc_ChannelOne_Buffer[9];
 8011f74:	4b0a      	ldr	r3, [pc, #40]	; (8011fa0 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 8011f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f78:	4a0a      	ldr	r2, [pc, #40]	; (8011fa4 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 8011f7a:	6253      	str	r3, [r2, #36]	; 0x24
	SenCtrl_MeasuredValues[10] = Adc_ChannelOne_Buffer[10];
 8011f7c:	4b08      	ldr	r3, [pc, #32]	; (8011fa0 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 8011f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f80:	4a08      	ldr	r2, [pc, #32]	; (8011fa4 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 8011f82:	6293      	str	r3, [r2, #40]	; 0x28
	SenCtrl_MeasuredValues[11] = Adc_ChannelOne_Buffer[11];
 8011f84:	4b06      	ldr	r3, [pc, #24]	; (8011fa0 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 8011f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f88:	4a06      	ldr	r2, [pc, #24]	; (8011fa4 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 8011f8a:	62d3      	str	r3, [r2, #44]	; 0x2c
	SenCtrl_MeasuredValues[13] = Adc_ChannelOne_Buffer[13];
 8011f8c:	4b04      	ldr	r3, [pc, #16]	; (8011fa0 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 8011f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f90:	4a04      	ldr	r2, [pc, #16]	; (8011fa4 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 8011f92:	6353      	str	r3, [r2, #52]	; 0x34
}
 8011f94:	bf00      	nop
 8011f96:	370c      	adds	r7, #12
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f9e:	4770      	bx	lr
 8011fa0:	200008f0 	.word	0x200008f0
 8011fa4:	200001b0 	.word	0x200001b0

08011fa8 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter>:
{
	*data = CenLoc_FollowMeHomeCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter(uint8* data)
{
 8011fa8:	b480      	push	{r7}
 8011faa:	b083      	sub	sp, #12
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
	CenLoc_FollowMeHomeCounter = *data;
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	781a      	ldrb	r2, [r3, #0]
 8011fb4:	4b03      	ldr	r3, [pc, #12]	; (8011fc4 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter+0x1c>)
 8011fb6:	701a      	strb	r2, [r3, #0]
}
 8011fb8:	bf00      	nop
 8011fba:	370c      	adds	r7, #12
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc2:	4770      	bx	lr
 8011fc4:	20000126 	.word	0x20000126

08011fc8 <Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter>:
{
	*data = CenLoc_TurnOnLedCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter(uint8* data)
{
 8011fc8:	b480      	push	{r7}
 8011fca:	b083      	sub	sp, #12
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	6078      	str	r0, [r7, #4]
	CenLoc_TurnOnLedCounter = *data;
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	781a      	ldrb	r2, [r3, #0]
 8011fd4:	4b03      	ldr	r3, [pc, #12]	; (8011fe4 <Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter+0x1c>)
 8011fd6:	701a      	strb	r2, [r3, #0]
}
 8011fd8:	bf00      	nop
 8011fda:	370c      	adds	r7, #12
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe2:	4770      	bx	lr
 8011fe4:	20000127 	.word	0x20000127

08011fe8 <Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter>:
{
	*data = CenLoc_CyclicAlarmCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter(uint8* data)
{
 8011fe8:	b480      	push	{r7}
 8011fea:	b083      	sub	sp, #12
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
	CenLoc_CyclicAlarmCounter = *data;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	781a      	ldrb	r2, [r3, #0]
 8011ff4:	4b03      	ldr	r3, [pc, #12]	; (8012004 <Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter+0x1c>)
 8011ff6:	701a      	strb	r2, [r3, #0]
}
 8011ff8:	bf00      	nop
 8011ffa:	370c      	adds	r7, #12
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012002:	4770      	bx	lr
 8012004:	20000125 	.word	0x20000125

08012008 <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter>:
{
	*data = CenLoc_BlinkCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter(uint8* data)
{
 8012008:	b480      	push	{r7}
 801200a:	b083      	sub	sp, #12
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
	CenLoc_BlinkCounter = *data;
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	781a      	ldrb	r2, [r3, #0]
 8012014:	4b03      	ldr	r3, [pc, #12]	; (8012024 <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter+0x1c>)
 8012016:	701a      	strb	r2, [r3, #0]
}
 8012018:	bf00      	nop
 801201a:	370c      	adds	r7, #12
 801201c:	46bd      	mov	sp, r7
 801201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012022:	4770      	bx	lr
 8012024:	20000124 	.word	0x20000124

08012028 <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter>:
{
	*data = Os_Alarm_Counter;
}
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter(uint8* data)
{
 8012028:	b480      	push	{r7}
 801202a:	b083      	sub	sp, #12
 801202c:	af00      	add	r7, sp, #0
 801202e:	6078      	str	r0, [r7, #4]
	Os_LockUnlockSequence_Counter = *data;
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	781a      	ldrb	r2, [r3, #0]
 8012034:	4b03      	ldr	r3, [pc, #12]	; (8012044 <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter+0x1c>)
 8012036:	701a      	strb	r2, [r3, #0]
}
 8012038:	bf00      	nop
 801203a:	370c      	adds	r7, #12
 801203c:	46bd      	mov	sp, r7
 801203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012042:	4770      	bx	lr
 8012044:	200002e0 	.word	0x200002e0

08012048 <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter(uint8* data)
{
 8012048:	b480      	push	{r7}
 801204a:	b083      	sub	sp, #12
 801204c:	af00      	add	r7, sp, #0
 801204e:	6078      	str	r0, [r7, #4]
	Os_TurnOnCyclic_Counter = *data;
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	781a      	ldrb	r2, [r3, #0]
 8012054:	4b03      	ldr	r3, [pc, #12]	; (8012064 <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter+0x1c>)
 8012056:	701a      	strb	r2, [r3, #0]
}
 8012058:	bf00      	nop
 801205a:	370c      	adds	r7, #12
 801205c:	46bd      	mov	sp, r7
 801205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012062:	4770      	bx	lr
 8012064:	200002e1 	.word	0x200002e1

08012068 <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter(uint8* data)
{
 8012068:	b480      	push	{r7}
 801206a:	b083      	sub	sp, #12
 801206c:	af00      	add	r7, sp, #0
 801206e:	6078      	str	r0, [r7, #4]
	Os_TurnOnLed_Counter = *data;
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	781a      	ldrb	r2, [r3, #0]
 8012074:	4b03      	ldr	r3, [pc, #12]	; (8012084 <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter+0x1c>)
 8012076:	701a      	strb	r2, [r3, #0]
}
 8012078:	bf00      	nop
 801207a:	370c      	adds	r7, #12
 801207c:	46bd      	mov	sp, r7
 801207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012082:	4770      	bx	lr
 8012084:	200002e2 	.word	0x200002e2

08012088 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(uint8* data)
{
 8012088:	b480      	push	{r7}
 801208a:	b083      	sub	sp, #12
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
	Os_FollowMeHome_Counter = *data;
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	781a      	ldrb	r2, [r3, #0]
 8012094:	4b03      	ldr	r3, [pc, #12]	; (80120a4 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter+0x1c>)
 8012096:	701a      	strb	r2, [r3, #0]
}
 8012098:	bf00      	nop
 801209a:	370c      	adds	r7, #12
 801209c:	46bd      	mov	sp, r7
 801209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a2:	4770      	bx	lr
 80120a4:	200002e3 	.word	0x200002e3

080120a8 <Rte_Write_Os_R_OsPort_Os_Lts_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_Lts_Counter(uint32* data)
{
 80120a8:	b480      	push	{r7}
 80120aa:	b083      	sub	sp, #12
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	6078      	str	r0, [r7, #4]
	Os_Lts_Counter = *data;
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	4a03      	ldr	r2, [pc, #12]	; (80120c4 <Rte_Write_Os_R_OsPort_Os_Lts_Counter+0x1c>)
 80120b6:	6013      	str	r3, [r2, #0]
}
 80120b8:	bf00      	nop
 80120ba:	370c      	adds	r7, #12
 80120bc:	46bd      	mov	sp, r7
 80120be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c2:	4770      	bx	lr
 80120c4:	200002e4 	.word	0x200002e4

080120c8 <Rte_Write_Os_R_OsPort_Os_Rts_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_Rts_Counter(uint32* data)
{
 80120c8:	b480      	push	{r7}
 80120ca:	b083      	sub	sp, #12
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
	Os_Rts_Counter = *data;
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	4a03      	ldr	r2, [pc, #12]	; (80120e4 <Rte_Write_Os_R_OsPort_Os_Rts_Counter+0x1c>)
 80120d6:	6013      	str	r3, [r2, #0]
}
 80120d8:	bf00      	nop
 80120da:	370c      	adds	r7, #12
 80120dc:	46bd      	mov	sp, r7
 80120de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e2:	4770      	bx	lr
 80120e4:	200002e8 	.word	0x200002e8

080120e8 <Rte_Write_Os_R_OsPort_Os_HL_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_HL_Counter(uint32* data)
{
 80120e8:	b480      	push	{r7}
 80120ea:	b083      	sub	sp, #12
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	6078      	str	r0, [r7, #4]
	Os_HL_Counter = *data;
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	4a03      	ldr	r2, [pc, #12]	; (8012104 <Rte_Write_Os_R_OsPort_Os_HL_Counter+0x1c>)
 80120f6:	6013      	str	r3, [r2, #0]
}
 80120f8:	bf00      	nop
 80120fa:	370c      	adds	r7, #12
 80120fc:	46bd      	mov	sp, r7
 80120fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012102:	4770      	bx	lr
 8012104:	200002ec 	.word	0x200002ec

08012108 <Rte_Runnable_EcuM_MainFunction>:
{
	Os_Alarm_Counter = *data;
}
/* Run time environment interface. */
VOID Rte_Runnable_EcuM_MainFunction()
{
 8012108:	b580      	push	{r7, lr}
 801210a:	af00      	add	r7, sp, #0
	EcuM_MainFunction();
 801210c:	f001 f91e 	bl	801334c <EcuM_MainFunction>
}
 8012110:	bf00      	nop
 8012112:	bd80      	pop	{r7, pc}

08012114 <Rte_Runnable_SystemManager_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_SystemManager_MainFunction()
{
 8012114:	b580      	push	{r7, lr}
 8012116:	af00      	add	r7, sp, #0
	SystemManager_MainFunction();
 8012118:	f001 fa28 	bl	801356c <SystemManager_MainFunction>
}
 801211c:	bf00      	nop
 801211e:	bd80      	pop	{r7, pc}

08012120 <Rte_Runnable_Crc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Crc_MainFunction()
{
 8012120:	b580      	push	{r7, lr}
 8012122:	af00      	add	r7, sp, #0
	Crc_MainFunction();
 8012124:	f000 ff3c 	bl	8012fa0 <Crc_MainFunction>
}
 8012128:	bf00      	nop
 801212a:	bd80      	pop	{r7, pc}

0801212c <Rte_Runnable_Wdg_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Wdg_MainFunction()
{
 801212c:	b580      	push	{r7, lr}
 801212e:	af00      	add	r7, sp, #0
	Watchdog_MainFunction();
 8012130:	f001 fb58 	bl	80137e4 <Watchdog_MainFunction>
}
 8012134:	bf00      	nop
 8012136:	bd80      	pop	{r7, pc}

08012138 <Rte_Runnable_Adc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Adc_MainFunction()
{
 8012138:	b580      	push	{r7, lr}
 801213a:	af00      	add	r7, sp, #0
	Adc_MainFunction();
 801213c:	f7fb fc82 	bl	800da44 <Adc_MainFunction>
}
 8012140:	bf00      	nop
 8012142:	bd80      	pop	{r7, pc}

08012144 <Rte_Runnable_Tim_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Tim_MainFunction()
{
 8012144:	b580      	push	{r7, lr}
 8012146:	af00      	add	r7, sp, #0
	Tim_MainFunction();
 8012148:	f7fc fb92 	bl	800e870 <Tim_MainFunction>
}
 801214c:	bf00      	nop
 801214e:	bd80      	pop	{r7, pc}

08012150 <Rte_Runnable_Uart_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Uart_MainFunction()
{
 8012150:	b580      	push	{r7, lr}
 8012152:	af00      	add	r7, sp, #0
	Uart_MainFunction();
 8012154:	f7f2 f91e 	bl	8004394 <Uart_MainFunction>
}
 8012158:	bf00      	nop
 801215a:	bd80      	pop	{r7, pc}

0801215c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>:
/* Run time environment interface. */
VOID Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32 Channel)
{
 801215c:	b580      	push	{r7, lr}
 801215e:	b082      	sub	sp, #8
 8012160:	af00      	add	r7, sp, #0
 8012162:	6078      	str	r0, [r7, #4]
 8012164:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start_IT(htim, Channel);
 8012166:	6839      	ldr	r1, [r7, #0]
 8012168:	6878      	ldr	r0, [r7, #4]
 801216a:	f7f8 ff93 	bl	800b094 <HAL_TIM_PWM_Start_IT>
}
 801216e:	bf00      	nop
 8012170:	3708      	adds	r7, #8
 8012172:	46bd      	mov	sp, r7
 8012174:	bd80      	pop	{r7, pc}

08012176 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>:
/* Run time environment interface. */
VOID Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32 Channel)
{
 8012176:	b580      	push	{r7, lr}
 8012178:	b082      	sub	sp, #8
 801217a:	af00      	add	r7, sp, #0
 801217c:	6078      	str	r0, [r7, #4]
 801217e:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Stop_IT(htim, Channel);
 8012180:	6839      	ldr	r1, [r7, #0]
 8012182:	6878      	ldr	r0, [r7, #4]
 8012184:	f7f9 f884 	bl	800b290 <HAL_TIM_PWM_Stop_IT>
}
 8012188:	bf00      	nop
 801218a:	3708      	adds	r7, #8
 801218c:	46bd      	mov	sp, r7
 801218e:	bd80      	pop	{r7, pc}

08012190 <Rte_Write_Btc_BtcPort_Btc_RxData>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_RxData(uint8* data)
{
 8012190:	b480      	push	{r7}
 8012192:	b083      	sub	sp, #12
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
	Btc_RxData = *data;
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	781a      	ldrb	r2, [r3, #0]
 801219c:	4b03      	ldr	r3, [pc, #12]	; (80121ac <Rte_Write_Btc_BtcPort_Btc_RxData+0x1c>)
 801219e:	701a      	strb	r2, [r3, #0]
}
 80121a0:	bf00      	nop
 80121a2:	370c      	adds	r7, #12
 80121a4:	46bd      	mov	sp, r7
 80121a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121aa:	4770      	bx	lr
 80121ac:	200000e0 	.word	0x200000e0

080121b0 <Rte_Write_Btc_BtcPort_Btc_RxCount>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_RxCount(uint8* data)
{
 80121b0:	b480      	push	{r7}
 80121b2:	b083      	sub	sp, #12
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
	Btc_RxCount = *data;
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	781a      	ldrb	r2, [r3, #0]
 80121bc:	4b03      	ldr	r3, [pc, #12]	; (80121cc <Rte_Write_Btc_BtcPort_Btc_RxCount+0x1c>)
 80121be:	701a      	strb	r2, [r3, #0]
}
 80121c0:	bf00      	nop
 80121c2:	370c      	adds	r7, #12
 80121c4:	46bd      	mov	sp, r7
 80121c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ca:	4770      	bx	lr
 80121cc:	200000e1 	.word	0x200000e1

080121d0 <Rte_Write_Btc_BtcPort_Btc_DataBuffer>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_DataBuffer(uint8* data, uint8 position)
{
 80121d0:	b480      	push	{r7}
 80121d2:	b083      	sub	sp, #12
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	6078      	str	r0, [r7, #4]
 80121d8:	460b      	mov	r3, r1
 80121da:	70fb      	strb	r3, [r7, #3]
	Btc_DataBuffer[position] = *data;
 80121dc:	78fb      	ldrb	r3, [r7, #3]
 80121de:	687a      	ldr	r2, [r7, #4]
 80121e0:	7811      	ldrb	r1, [r2, #0]
 80121e2:	4a04      	ldr	r2, [pc, #16]	; (80121f4 <Rte_Write_Btc_BtcPort_Btc_DataBuffer+0x24>)
 80121e4:	54d1      	strb	r1, [r2, r3]
}
 80121e6:	bf00      	nop
 80121e8:	370c      	adds	r7, #12
 80121ea:	46bd      	mov	sp, r7
 80121ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f0:	4770      	bx	lr
 80121f2:	bf00      	nop
 80121f4:	200000dc 	.word	0x200000dc

080121f8 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>:
/* Run time environment interface. */
VOID Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(uint32* data, uint8 position)
{
 80121f8:	b480      	push	{r7}
 80121fa:	b083      	sub	sp, #12
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
 8012200:	460b      	mov	r3, r1
 8012202:	70fb      	strb	r3, [r7, #3]
	*data = Adc_ChannelOne_Buffer[position];
 8012204:	78fb      	ldrb	r3, [r7, #3]
 8012206:	4a05      	ldr	r2, [pc, #20]	; (801221c <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer+0x24>)
 8012208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	601a      	str	r2, [r3, #0]
}
 8012210:	bf00      	nop
 8012212:	370c      	adds	r7, #12
 8012214:	46bd      	mov	sp, r7
 8012216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221a:	4770      	bx	lr
 801221c:	200008f0 	.word	0x200008f0

08012220 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(uint8* data)
{
 8012220:	b480      	push	{r7}
 8012222:	b083      	sub	sp, #12
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
	Btc_ReceivedDataOnBluetooth = *data;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	781a      	ldrb	r2, [r3, #0]
 801222c:	4b03      	ldr	r3, [pc, #12]	; (801223c <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x1c>)
 801222e:	701a      	strb	r2, [r3, #0]
}
 8012230:	bf00      	nop
 8012232:	370c      	adds	r7, #12
 8012234:	46bd      	mov	sp, r7
 8012236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801223a:	4770      	bx	lr
 801223c:	200000e2 	.word	0x200000e2

08012240 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(uint8* data)
{
 8012240:	b480      	push	{r7}
 8012242:	b083      	sub	sp, #12
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
	CenLoc_CurrentState = *data;
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	781a      	ldrb	r2, [r3, #0]
 801224c:	4b03      	ldr	r3, [pc, #12]	; (801225c <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState+0x1c>)
 801224e:	701a      	strb	r2, [r3, #0]
}
 8012250:	bf00      	nop
 8012252:	370c      	adds	r7, #12
 8012254:	46bd      	mov	sp, r7
 8012256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801225a:	4770      	bx	lr
 801225c:	20000120 	.word	0x20000120

08012260 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState>:
{
	CenLoc_PreviousState = *data;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState(uint8* data)
{
 8012260:	b480      	push	{r7}
 8012262:	b083      	sub	sp, #12
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
	CenLoc_FollowMeHomeState = *data;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	781a      	ldrb	r2, [r3, #0]
 801226c:	4b03      	ldr	r3, [pc, #12]	; (801227c <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState+0x1c>)
 801226e:	701a      	strb	r2, [r3, #0]
}
 8012270:	bf00      	nop
 8012272:	370c      	adds	r7, #12
 8012274:	46bd      	mov	sp, r7
 8012276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801227a:	4770      	bx	lr
 801227c:	20000122 	.word	0x20000122

08012280 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>:
{
	CenLoc_PreviousStateFlag = *data;
}
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(uint8* data)
{
 8012280:	b480      	push	{r7}
 8012282:	b083      	sub	sp, #12
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
	ExtLights_ReverseLight_CurrentState = *data;
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	781a      	ldrb	r2, [r3, #0]
 801228c:	4b03      	ldr	r3, [pc, #12]	; (801229c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState+0x1c>)
 801228e:	701a      	strb	r2, [r3, #0]
}
 8012290:	bf00      	nop
 8012292:	370c      	adds	r7, #12
 8012294:	46bd      	mov	sp, r7
 8012296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229a:	4770      	bx	lr
 801229c:	2000014c 	.word	0x2000014c

080122a0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(uint8* data)
{
 80122a0:	b480      	push	{r7}
 80122a2:	b083      	sub	sp, #12
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	6078      	str	r0, [r7, #4]
	ExtLights_BrakeLight_CurrentState = *data;
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	781a      	ldrb	r2, [r3, #0]
 80122ac:	4b03      	ldr	r3, [pc, #12]	; (80122bc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState+0x1c>)
 80122ae:	701a      	strb	r2, [r3, #0]
}
 80122b0:	bf00      	nop
 80122b2:	370c      	adds	r7, #12
 80122b4:	46bd      	mov	sp, r7
 80122b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ba:	4770      	bx	lr
 80122bc:	2000014e 	.word	0x2000014e

080122c0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(uint8* data)
{
 80122c0:	b480      	push	{r7}
 80122c2:	b083      	sub	sp, #12
 80122c4:	af00      	add	r7, sp, #0
 80122c6:	6078      	str	r0, [r7, #4]
	ExtLights_LightsSwitch_CurrentState = *data;
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	781a      	ldrb	r2, [r3, #0]
 80122cc:	4b03      	ldr	r3, [pc, #12]	; (80122dc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState+0x1c>)
 80122ce:	701a      	strb	r2, [r3, #0]
}
 80122d0:	bf00      	nop
 80122d2:	370c      	adds	r7, #12
 80122d4:	46bd      	mov	sp, r7
 80122d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122da:	4770      	bx	lr
 80122dc:	2000014f 	.word	0x2000014f

080122e0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(uint8* data)
{
 80122e0:	b480      	push	{r7}
 80122e2:	b083      	sub	sp, #12
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
	ExtLights_HighBeam_CurrentState = *data;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	781a      	ldrb	r2, [r3, #0]
 80122ec:	4b03      	ldr	r3, [pc, #12]	; (80122fc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState+0x1c>)
 80122ee:	701a      	strb	r2, [r3, #0]
}
 80122f0:	bf00      	nop
 80122f2:	370c      	adds	r7, #12
 80122f4:	46bd      	mov	sp, r7
 80122f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fa:	4770      	bx	lr
 80122fc:	20000150 	.word	0x20000150

08012300 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(uint8* data)
{
 8012300:	b480      	push	{r7}
 8012302:	b083      	sub	sp, #12
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
	ExtLights_FrontFogLight_CurrentState = *data;
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	781a      	ldrb	r2, [r3, #0]
 801230c:	4b03      	ldr	r3, [pc, #12]	; (801231c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState+0x1c>)
 801230e:	701a      	strb	r2, [r3, #0]
}
 8012310:	bf00      	nop
 8012312:	370c      	adds	r7, #12
 8012314:	46bd      	mov	sp, r7
 8012316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801231a:	4770      	bx	lr
 801231c:	20000151 	.word	0x20000151

08012320 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(uint8* data)
{
 8012320:	b480      	push	{r7}
 8012322:	b083      	sub	sp, #12
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
	ExtLights_TurnSignalLeft_CurrentState = *data;
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	781a      	ldrb	r2, [r3, #0]
 801232c:	4b03      	ldr	r3, [pc, #12]	; (801233c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState+0x1c>)
 801232e:	701a      	strb	r2, [r3, #0]
}
 8012330:	bf00      	nop
 8012332:	370c      	adds	r7, #12
 8012334:	46bd      	mov	sp, r7
 8012336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801233a:	4770      	bx	lr
 801233c:	20000152 	.word	0x20000152

08012340 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(uint8* data)
{
 8012340:	b480      	push	{r7}
 8012342:	b083      	sub	sp, #12
 8012344:	af00      	add	r7, sp, #0
 8012346:	6078      	str	r0, [r7, #4]
	ExtLights_TurnSignalRight_CurrentState = *data;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	781a      	ldrb	r2, [r3, #0]
 801234c:	4b03      	ldr	r3, [pc, #12]	; (801235c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState+0x1c>)
 801234e:	701a      	strb	r2, [r3, #0]
}
 8012350:	bf00      	nop
 8012352:	370c      	adds	r7, #12
 8012354:	46bd      	mov	sp, r7
 8012356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801235a:	4770      	bx	lr
 801235c:	20000153 	.word	0x20000153

08012360 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(uint8* data)
{
 8012360:	b480      	push	{r7}
 8012362:	b083      	sub	sp, #12
 8012364:	af00      	add	r7, sp, #0
 8012366:	6078      	str	r0, [r7, #4]
	ExtLights_HazardLight_CurrentState = *data;
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	781a      	ldrb	r2, [r3, #0]
 801236c:	4b03      	ldr	r3, [pc, #12]	; (801237c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState+0x1c>)
 801236e:	701a      	strb	r2, [r3, #0]
}
 8012370:	bf00      	nop
 8012372:	370c      	adds	r7, #12
 8012374:	46bd      	mov	sp, r7
 8012376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237a:	4770      	bx	lr
 801237c:	20000156 	.word	0x20000156

08012380 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(uint8* data)
{
 8012380:	b480      	push	{r7}
 8012382:	b083      	sub	sp, #12
 8012384:	af00      	add	r7, sp, #0
 8012386:	6078      	str	r0, [r7, #4]
	ExtLights_RearFogLight_CurrentState = *data;
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	781a      	ldrb	r2, [r3, #0]
 801238c:	4b03      	ldr	r3, [pc, #12]	; (801239c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState+0x1c>)
 801238e:	701a      	strb	r2, [r3, #0]
}
 8012390:	bf00      	nop
 8012392:	370c      	adds	r7, #12
 8012394:	46bd      	mov	sp, r7
 8012396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801239a:	4770      	bx	lr
 801239c:	20000157 	.word	0x20000157

080123a0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag>:
{
	ExtLights_HL_PrevState = *data;
}
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag(uint32* data)
{
 80123a0:	b480      	push	{r7}
 80123a2:	b083      	sub	sp, #12
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
	ExtLights_RTSFlag = *data;
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	4a03      	ldr	r2, [pc, #12]	; (80123bc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag+0x1c>)
 80123ae:	6013      	str	r3, [r2, #0]
}
 80123b0:	bf00      	nop
 80123b2:	370c      	adds	r7, #12
 80123b4:	46bd      	mov	sp, r7
 80123b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ba:	4770      	bx	lr
 80123bc:	2000015c 	.word	0x2000015c

080123c0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag(uint32* data)
{
 80123c0:	b480      	push	{r7}
 80123c2:	b083      	sub	sp, #12
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	6078      	str	r0, [r7, #4]
	ExtLights_LTSFlag = *data;
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	4a03      	ldr	r2, [pc, #12]	; (80123dc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag+0x1c>)
 80123ce:	6013      	str	r3, [r2, #0]
}
 80123d0:	bf00      	nop
 80123d2:	370c      	adds	r7, #12
 80123d4:	46bd      	mov	sp, r7
 80123d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123da:	4770      	bx	lr
 80123dc:	20000160 	.word	0x20000160

080123e0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag(uint32* data)
{
 80123e0:	b480      	push	{r7}
 80123e2:	b083      	sub	sp, #12
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	6078      	str	r0, [r7, #4]
	ExtLights_HLFlag = *data;
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	4a03      	ldr	r2, [pc, #12]	; (80123fc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag+0x1c>)
 80123ee:	6013      	str	r3, [r2, #0]
}
 80123f0:	bf00      	nop
 80123f2:	370c      	adds	r7, #12
 80123f4:	46bd      	mov	sp, r7
 80123f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123fa:	4770      	bx	lr
 80123fc:	20000164 	.word	0x20000164

08012400 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(uint8* data)
{
 8012400:	b480      	push	{r7}
 8012402:	b083      	sub	sp, #12
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
	IntLights_CurrentState = *data;
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	781a      	ldrb	r2, [r3, #0]
 801240c:	4b03      	ldr	r3, [pc, #12]	; (801241c <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState+0x1c>)
 801240e:	701a      	strb	r2, [r3, #0]
}
 8012410:	bf00      	nop
 8012412:	370c      	adds	r7, #12
 8012414:	46bd      	mov	sp, r7
 8012416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801241a:	4770      	bx	lr
 801241c:	20000199 	.word	0x20000199

08012420 <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4>:
{
	SecAlm_PinStateChange = *data;
}
/* Run time environment interface. */
VOID Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4(uint8* data)
{
 8012420:	b480      	push	{r7}
 8012422:	b083      	sub	sp, #12
 8012424:	af00      	add	r7, sp, #0
 8012426:	6078      	str	r0, [r7, #4]
	SecAlm_TriggerIRQCounterForTimer4 = *data;
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	781a      	ldrb	r2, [r3, #0]
 801242c:	4b03      	ldr	r3, [pc, #12]	; (801243c <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4+0x1c>)
 801242e:	701a      	strb	r2, [r3, #0]
}
 8012430:	bf00      	nop
 8012432:	370c      	adds	r7, #12
 8012434:	46bd      	mov	sp, r7
 8012436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801243a:	4770      	bx	lr
 801243c:	200001a6 	.word	0x200001a6

08012440 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter>:
/* Run time environment interface. */
VOID Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter(uint16* data)
{
 8012440:	b480      	push	{r7}
 8012442:	b083      	sub	sp, #12
 8012444:	af00      	add	r7, sp, #0
 8012446:	6078      	str	r0, [r7, #4]
	SecAlm_SensorStatusCounter = *data;
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	881a      	ldrh	r2, [r3, #0]
 801244c:	4b03      	ldr	r3, [pc, #12]	; (801245c <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter+0x1c>)
 801244e:	801a      	strh	r2, [r3, #0]
}
 8012450:	bf00      	nop
 8012452:	370c      	adds	r7, #12
 8012454:	46bd      	mov	sp, r7
 8012456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801245a:	4770      	bx	lr
 801245c:	200001a8 	.word	0x200001a8

08012460 <Rte_Runnable_Btc_MainFunction>:
{
	SecAlm_SensorStatus = *data;
}
/* Run time environment interface. */
VOID Rte_Runnable_Btc_MainFunction()
{
 8012460:	b580      	push	{r7, lr}
 8012462:	af00      	add	r7, sp, #0
	Btc_MainFunction();
 8012464:	f7ef fa68 	bl	8001938 <Btc_MainFunction>
}
 8012468:	bf00      	nop
 801246a:	bd80      	pop	{r7, pc}

0801246c <Rte_Runnable_CenLoc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_CenLoc_MainFunction()
{
 801246c:	b580      	push	{r7, lr}
 801246e:	af00      	add	r7, sp, #0
	CenLoc_MainFunction();
 8012470:	f7ef fcb6 	bl	8001de0 <CenLoc_MainFunction>
}
 8012474:	bf00      	nop
 8012476:	bd80      	pop	{r7, pc}

08012478 <Rte_Runnable_ExtLights_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_ExtLights_MainFunction()
{
 8012478:	b580      	push	{r7, lr}
 801247a:	af00      	add	r7, sp, #0
	ExtLights_MainFunction();
 801247c:	f7f0 f918 	bl	80026b0 <ExtLights_MainFunction>
}
 8012480:	bf00      	nop
 8012482:	bd80      	pop	{r7, pc}

08012484 <Rte_Runnable_IntLights_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_IntLights_MainFunction()
{
 8012484:	b580      	push	{r7, lr}
 8012486:	af00      	add	r7, sp, #0
	IntLights_MainFunction();
 8012488:	f7f0 fdf8 	bl	800307c <IntLights_MainFunction>
}
 801248c:	bf00      	nop
 801248e:	bd80      	pop	{r7, pc}

08012490 <Rte_Runnable_SecAlm_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_SecAlm_MainFunction()
{
 8012490:	b580      	push	{r7, lr}
 8012492:	af00      	add	r7, sp, #0
	SecAlm_MainFunction();
 8012494:	f7f1 f862 	bl	800355c <SecAlm_MainFunction>
}
 8012498:	bf00      	nop
 801249a:	bd80      	pop	{r7, pc}

0801249c <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>:
/* Run time environment interface. */
VOID Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(uint8* data)
{
 801249c:	b480      	push	{r7}
 801249e:	b083      	sub	sp, #12
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	6078      	str	r0, [r7, #4]
	*data = Btc_ReceivedDataOnBluetooth;
 80124a4:	4b04      	ldr	r3, [pc, #16]	; (80124b8 <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x1c>)
 80124a6:	781a      	ldrb	r2, [r3, #0]
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	701a      	strb	r2, [r3, #0]
}
 80124ac:	bf00      	nop
 80124ae:	370c      	adds	r7, #12
 80124b0:	46bd      	mov	sp, r7
 80124b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b6:	4770      	bx	lr
 80124b8:	200000e2 	.word	0x200000e2

080124bc <Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT>:
{
	*data = SecAlm_SensorStatus;
}
/* Run time environment interface. */
VOID Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80124bc:	b580      	push	{r7, lr}
 80124be:	b084      	sub	sp, #16
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	60f8      	str	r0, [r7, #12]
 80124c4:	60b9      	str	r1, [r7, #8]
 80124c6:	4613      	mov	r3, r2
 80124c8:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Receive_IT(huart, pData, Size);
 80124ca:	88fb      	ldrh	r3, [r7, #6]
 80124cc:	461a      	mov	r2, r3
 80124ce:	68b9      	ldr	r1, [r7, #8]
 80124d0:	68f8      	ldr	r0, [r7, #12]
 80124d2:	f7fa fa9c 	bl	800ca0e <HAL_UART_Receive_IT>
}
 80124d6:	bf00      	nop
 80124d8:	3710      	adds	r7, #16
 80124da:	46bd      	mov	sp, r7
 80124dc:	bd80      	pop	{r7, pc}

080124de <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>:
{
	HAL_TIM_Base_Stop_IT(htim);
}
/* Run time environment interface. */
VOID Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80124de:	b580      	push	{r7, lr}
 80124e0:	b082      	sub	sp, #8
 80124e2:	af00      	add	r7, sp, #0
 80124e4:	6078      	str	r0, [r7, #4]
 80124e6:	460b      	mov	r3, r1
 80124e8:	807b      	strh	r3, [r7, #2]
 80124ea:	4613      	mov	r3, r2
 80124ec:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);
 80124ee:	787a      	ldrb	r2, [r7, #1]
 80124f0:	887b      	ldrh	r3, [r7, #2]
 80124f2:	4619      	mov	r1, r3
 80124f4:	6878      	ldr	r0, [r7, #4]
 80124f6:	f7f5 ff2f 	bl	8008358 <HAL_GPIO_WritePin>
}
 80124fa:	bf00      	nop
 80124fc:	3708      	adds	r7, #8
 80124fe:	46bd      	mov	sp, r7
 8012500:	bd80      	pop	{r7, pc}

08012502 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>:
{
	HAL_GetTick();
}
/* Run time environment interface. */
VOID Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(osTimerId_t timer_id, uint32_t ticks)
{
 8012502:	b580      	push	{r7, lr}
 8012504:	b082      	sub	sp, #8
 8012506:	af00      	add	r7, sp, #0
 8012508:	6078      	str	r0, [r7, #4]
 801250a:	6039      	str	r1, [r7, #0]
	osTimerStart(timer_id, ticks);
 801250c:	6839      	ldr	r1, [r7, #0]
 801250e:	6878      	ldr	r0, [r7, #4]
 8012510:	f7fc fcb0 	bl	800ee74 <osTimerStart>
}
 8012514:	bf00      	nop
 8012516:	3708      	adds	r7, #8
 8012518:	46bd      	mov	sp, r7
 801251a:	bd80      	pop	{r7, pc}

0801251c <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>:
/* Run time environment interface. */
VOID Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(osTimerId_t timer_id)
{
 801251c:	b580      	push	{r7, lr}
 801251e:	b082      	sub	sp, #8
 8012520:	af00      	add	r7, sp, #0
 8012522:	6078      	str	r0, [r7, #4]
	osTimerStop(timer_id);
 8012524:	6878      	ldr	r0, [r7, #4]
 8012526:	f7fc fcd3 	bl	800eed0 <osTimerStop>
}
 801252a:	bf00      	nop
 801252c:	3708      	adds	r7, #8
 801252e:	46bd      	mov	sp, r7
 8012530:	bd80      	pop	{r7, pc}

08012532 <Rte_Runnable_DiagCtrl_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_DiagCtrl_MainFunction()
{
 8012532:	b580      	push	{r7, lr}
 8012534:	af00      	add	r7, sp, #0
	DiagCtrl_MainFunction();
 8012536:	f7ef fc5b 	bl	8001df0 <DiagCtrl_MainFunction>
}
 801253a:	bf00      	nop
 801253c:	bd80      	pop	{r7, pc}

0801253e <Rte_Runnable_Hvac_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Hvac_MainFunction()
{
 801253e:	b580      	push	{r7, lr}
 8012540:	af00      	add	r7, sp, #0
	Hvac_MainFunction();
 8012542:	f7f0 f9cd 	bl	80028e0 <Hvac_MainFunction>
}
 8012546:	bf00      	nop
 8012548:	bd80      	pop	{r7, pc}

0801254a <Rte_Runnable_Pdc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Pdc_MainFunction()
{
 801254a:	b580      	push	{r7, lr}
 801254c:	af00      	add	r7, sp, #0
	Pdc_MainFunction();
 801254e:	f7f0 fd9b 	bl	8003088 <Pdc_MainFunction>
}
 8012552:	bf00      	nop
 8012554:	bd80      	pop	{r7, pc}

08012556 <Rte_Runnable_I2c_MainFunction>:
{
	Can_MainFunction();
}
/* Run time environment interface. */
VOID Rte_Runnable_I2c_MainFunction()
{
 8012556:	b580      	push	{r7, lr}
 8012558:	af00      	add	r7, sp, #0
	I2c_MainFunction();
 801255a:	f7f1 fc47 	bl	8003dec <I2c_MainFunction>
}
 801255e:	bf00      	nop
 8012560:	bd80      	pop	{r7, pc}

08012562 <Rte_Runnable_Dem_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Dem_MainFunction()
{
 8012562:	b580      	push	{r7, lr}
 8012564:	af00      	add	r7, sp, #0
	Dem_MainFunction();
 8012566:	f7f3 fbb0 	bl	8005cca <Dem_MainFunction>
}
 801256a:	bf00      	nop
 801256c:	bd80      	pop	{r7, pc}
	...

08012570 <Crc_VerifyUartData>:
/***********************************************************************************
* Function: Crc_VerifyUartData													   *
* Description: Verifies the UART data received.							 		   *
************************************************************************************/
StdReturnType Crc_VerifyUartData()
{
 8012570:	b580      	push	{r7, lr}
 8012572:	b084      	sub	sp, #16
 8012574:	af00      	add	r7, sp, #0
	/* Local variable to store return value. */
	uint8 returnValue = E_NOT_OK;
 8012576:	2301      	movs	r3, #1
 8012578:	73fb      	strb	r3, [r7, #15]
	/* Local variable to store received value. */
	uint8 receivedValue = STD_LOW;
 801257a:	2300      	movs	r3, #0
 801257c:	71fb      	strb	r3, [r7, #7]
	/* Local value to calculate CRC. */
	uint32 calculatedCrc = STD_LOW;
 801257e:	2300      	movs	r3, #0
 8012580:	60bb      	str	r3, [r7, #8]
	/* Read the received data from UART. */
	Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(&receivedValue);
 8012582:	1dfb      	adds	r3, r7, #7
 8012584:	4618      	mov	r0, r3
 8012586:	f7ff ff89 	bl	801249c <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>
	Crc_BswState = CRC_VERIFYUARTDATA_STATE;
 801258a:	4bb7      	ldr	r3, [pc, #732]	; (8012868 <Crc_VerifyUartData+0x2f8>)
 801258c:	2201      	movs	r2, #1
 801258e:	701a      	strb	r2, [r3, #0]
	/* Calculate the CRC. */
	calculatedCrc = HAL_CRC_Calculate(&hcrc, (uint32*)&receivedValue, 1);
 8012590:	1dfb      	adds	r3, r7, #7
 8012592:	2201      	movs	r2, #1
 8012594:	4619      	mov	r1, r3
 8012596:	48b5      	ldr	r0, [pc, #724]	; (801286c <Crc_VerifyUartData+0x2fc>)
 8012598:	f7f4 fe20 	bl	80071dc <HAL_CRC_Calculate>
 801259c:	60b8      	str	r0, [r7, #8]
	/* Check the value if it has correct CRC. */
	if(receivedValue >= 30 && receivedValue <= 54)
 801259e:	79fb      	ldrb	r3, [r7, #7]
 80125a0:	2b1d      	cmp	r3, #29
 80125a2:	d904      	bls.n	80125ae <Crc_VerifyUartData+0x3e>
 80125a4:	79fb      	ldrb	r3, [r7, #7]
 80125a6:	2b36      	cmp	r3, #54	; 0x36
 80125a8:	d801      	bhi.n	80125ae <Crc_VerifyUartData+0x3e>
	{
		return E_OK;
 80125aa:	2300      	movs	r3, #0
 80125ac:	e278      	b.n	8012aa0 <Crc_VerifyUartData+0x530>
	else
	{
		/* do nothing */
	}
	/* Check the value if it has correct CRC. */
	switch(receivedValue)
 80125ae:	79fb      	ldrb	r3, [r7, #7]
 80125b0:	3b01      	subs	r3, #1
 80125b2:	2b46      	cmp	r3, #70	; 0x46
 80125b4:	f200 8272 	bhi.w	8012a9c <Crc_VerifyUartData+0x52c>
 80125b8:	a201      	add	r2, pc, #4	; (adr r2, 80125c0 <Crc_VerifyUartData+0x50>)
 80125ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125be:	bf00      	nop
 80125c0:	08012761 	.word	0x08012761
 80125c4:	08012777 	.word	0x08012777
 80125c8:	0801278d 	.word	0x0801278d
 80125cc:	080127a3 	.word	0x080127a3
 80125d0:	08012a9d 	.word	0x08012a9d
 80125d4:	08012a9d 	.word	0x08012a9d
 80125d8:	080127b9 	.word	0x080127b9
 80125dc:	080127cf 	.word	0x080127cf
 80125e0:	080127e5 	.word	0x080127e5
 80125e4:	080127fb 	.word	0x080127fb
 80125e8:	08012811 	.word	0x08012811
 80125ec:	08012827 	.word	0x08012827
 80125f0:	0801283d 	.word	0x0801283d
 80125f4:	08012853 	.word	0x08012853
 80125f8:	080128b9 	.word	0x080128b9
 80125fc:	080128cf 	.word	0x080128cf
 8012600:	080128e5 	.word	0x080128e5
 8012604:	080128fb 	.word	0x080128fb
 8012608:	08012911 	.word	0x08012911
 801260c:	08012927 	.word	0x08012927
 8012610:	080126dd 	.word	0x080126dd
 8012614:	080126f3 	.word	0x080126f3
 8012618:	08012709 	.word	0x08012709
 801261c:	0801271f 	.word	0x0801271f
 8012620:	08012735 	.word	0x08012735
 8012624:	0801274b 	.word	0x0801274b
 8012628:	08012a9d 	.word	0x08012a9d
 801262c:	08012a9d 	.word	0x08012a9d
 8012630:	08012a9d 	.word	0x08012a9d
 8012634:	08012a9d 	.word	0x08012a9d
 8012638:	08012a9d 	.word	0x08012a9d
 801263c:	08012a9d 	.word	0x08012a9d
 8012640:	08012a9d 	.word	0x08012a9d
 8012644:	08012a9d 	.word	0x08012a9d
 8012648:	08012a9d 	.word	0x08012a9d
 801264c:	08012a9d 	.word	0x08012a9d
 8012650:	08012a9d 	.word	0x08012a9d
 8012654:	08012a9d 	.word	0x08012a9d
 8012658:	08012a9d 	.word	0x08012a9d
 801265c:	08012a9d 	.word	0x08012a9d
 8012660:	08012a9d 	.word	0x08012a9d
 8012664:	08012a9d 	.word	0x08012a9d
 8012668:	08012a9d 	.word	0x08012a9d
 801266c:	08012a9d 	.word	0x08012a9d
 8012670:	08012a9d 	.word	0x08012a9d
 8012674:	08012a9d 	.word	0x08012a9d
 8012678:	08012a9d 	.word	0x08012a9d
 801267c:	08012a9d 	.word	0x08012a9d
 8012680:	08012a9d 	.word	0x08012a9d
 8012684:	08012a9d 	.word	0x08012a9d
 8012688:	08012a9d 	.word	0x08012a9d
 801268c:	08012a9d 	.word	0x08012a9d
 8012690:	08012a9d 	.word	0x08012a9d
 8012694:	08012a9d 	.word	0x08012a9d
 8012698:	0801293d 	.word	0x0801293d
 801269c:	08012953 	.word	0x08012953
 80126a0:	08012969 	.word	0x08012969
 80126a4:	0801297f 	.word	0x0801297f
 80126a8:	08012995 	.word	0x08012995
 80126ac:	080129ab 	.word	0x080129ab
 80126b0:	080129c1 	.word	0x080129c1
 80126b4:	080129d7 	.word	0x080129d7
 80126b8:	080129ed 	.word	0x080129ed
 80126bc:	08012a03 	.word	0x08012a03
 80126c0:	08012a19 	.word	0x08012a19
 80126c4:	08012a2f 	.word	0x08012a2f
 80126c8:	08012a9d 	.word	0x08012a9d
 80126cc:	08012a45 	.word	0x08012a45
 80126d0:	08012a5b 	.word	0x08012a5b
 80126d4:	08012a71 	.word	0x08012a71
 80126d8:	08012a87 	.word	0x08012a87
	{
		case RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_ON:
			if(calculatedCrc == Crc_ExtLights_ReverseLight_On)
 80126dc:	4b64      	ldr	r3, [pc, #400]	; (8012870 <Crc_VerifyUartData+0x300>)
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	68ba      	ldr	r2, [r7, #8]
 80126e2:	429a      	cmp	r2, r3
 80126e4:	d102      	bne.n	80126ec <Crc_VerifyUartData+0x17c>
			{
				returnValue = E_OK;
 80126e6:	2300      	movs	r3, #0
 80126e8:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80126ea:	e1d8      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 80126ec:	2301      	movs	r3, #1
 80126ee:	73fb      	strb	r3, [r7, #15]
			break;
 80126f0:	e1d5      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF:
			if(calculatedCrc == Crc_ExtLights_ReverseLight_Off)
 80126f2:	4b60      	ldr	r3, [pc, #384]	; (8012874 <Crc_VerifyUartData+0x304>)
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	68ba      	ldr	r2, [r7, #8]
 80126f8:	429a      	cmp	r2, r3
 80126fa:	d102      	bne.n	8012702 <Crc_VerifyUartData+0x192>
			{
				returnValue = E_OK;
 80126fc:	2300      	movs	r3, #0
 80126fe:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8012700:	e1cd      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8012702:	2301      	movs	r3, #1
 8012704:	73fb      	strb	r3, [r7, #15]
			break;
 8012706:	e1ca      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_POSITIONZERO:
			if(calculatedCrc == Crc_ExtLights_PositionZero)
 8012708:	4b5b      	ldr	r3, [pc, #364]	; (8012878 <Crc_VerifyUartData+0x308>)
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	68ba      	ldr	r2, [r7, #8]
 801270e:	429a      	cmp	r2, r3
 8012710:	d102      	bne.n	8012718 <Crc_VerifyUartData+0x1a8>
			{
				returnValue = E_OK;
 8012712:	2300      	movs	r3, #0
 8012714:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8012716:	e1c2      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8012718:	2301      	movs	r3, #1
 801271a:	73fb      	strb	r3, [r7, #15]
			break;
 801271c:	e1bf      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:
			if(calculatedCrc == Crc_ExtLights_AutomaticLights)
 801271e:	4b57      	ldr	r3, [pc, #348]	; (801287c <Crc_VerifyUartData+0x30c>)
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	68ba      	ldr	r2, [r7, #8]
 8012724:	429a      	cmp	r2, r3
 8012726:	d102      	bne.n	801272e <Crc_VerifyUartData+0x1be>
			{
				returnValue = E_OK;
 8012728:	2300      	movs	r3, #0
 801272a:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 801272c:	e1b7      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 801272e:	2301      	movs	r3, #1
 8012730:	73fb      	strb	r3, [r7, #15]
			break;
 8012732:	e1b4      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_POSITIONLIGHTS:
			if(calculatedCrc == Crc_ExtLights_PositionLights)
 8012734:	4b52      	ldr	r3, [pc, #328]	; (8012880 <Crc_VerifyUartData+0x310>)
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	68ba      	ldr	r2, [r7, #8]
 801273a:	429a      	cmp	r2, r3
 801273c:	d102      	bne.n	8012744 <Crc_VerifyUartData+0x1d4>
			{
				returnValue = E_OK;
 801273e:	2300      	movs	r3, #0
 8012740:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8012742:	e1ac      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8012744:	2301      	movs	r3, #1
 8012746:	73fb      	strb	r3, [r7, #15]
			break;
 8012748:	e1a9      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:
			if(calculatedCrc == Crc_ExtLights_NightTimeLights)
 801274a:	4b4e      	ldr	r3, [pc, #312]	; (8012884 <Crc_VerifyUartData+0x314>)
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	68ba      	ldr	r2, [r7, #8]
 8012750:	429a      	cmp	r2, r3
 8012752:	d102      	bne.n	801275a <Crc_VerifyUartData+0x1ea>
			{
				returnValue = E_OK;
 8012754:	2300      	movs	r3, #0
 8012756:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8012758:	e1a1      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 801275a:	2301      	movs	r3, #1
 801275c:	73fb      	strb	r3, [r7, #15]
			break;
 801275e:	e19e      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_CENLOC_ON:
			if(calculatedCrc == Crc_CenLoc_On)
 8012760:	4b49      	ldr	r3, [pc, #292]	; (8012888 <Crc_VerifyUartData+0x318>)
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	68ba      	ldr	r2, [r7, #8]
 8012766:	429a      	cmp	r2, r3
 8012768:	d102      	bne.n	8012770 <Crc_VerifyUartData+0x200>
			{
				returnValue = E_OK;
 801276a:	2300      	movs	r3, #0
 801276c:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 801276e:	e196      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8012770:	2301      	movs	r3, #1
 8012772:	73fb      	strb	r3, [r7, #15]
			break;
 8012774:	e193      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_CENLOC_OFF:
			if(calculatedCrc == Crc_CenLoc_Off)
 8012776:	4b45      	ldr	r3, [pc, #276]	; (801288c <Crc_VerifyUartData+0x31c>)
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	68ba      	ldr	r2, [r7, #8]
 801277c:	429a      	cmp	r2, r3
 801277e:	d102      	bne.n	8012786 <Crc_VerifyUartData+0x216>
			{
				returnValue = E_OK;
 8012780:	2300      	movs	r3, #0
 8012782:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8012784:	e18b      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8012786:	2301      	movs	r3, #1
 8012788:	73fb      	strb	r3, [r7, #15]
			break;
 801278a:	e188      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_ON:
			if(calculatedCrc == Crc_ExtLights_HighBeam_On)
 801278c:	4b40      	ldr	r3, [pc, #256]	; (8012890 <Crc_VerifyUartData+0x320>)
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	68ba      	ldr	r2, [r7, #8]
 8012792:	429a      	cmp	r2, r3
 8012794:	d102      	bne.n	801279c <Crc_VerifyUartData+0x22c>
			{
				returnValue = E_OK;
 8012796:	2300      	movs	r3, #0
 8012798:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 801279a:	e180      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 801279c:	2301      	movs	r3, #1
 801279e:	73fb      	strb	r3, [r7, #15]
			break;
 80127a0:	e17d      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_OFF:
			if(calculatedCrc == Crc_ExtLights_HighBeam_Off)
 80127a2:	4b3c      	ldr	r3, [pc, #240]	; (8012894 <Crc_VerifyUartData+0x324>)
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	68ba      	ldr	r2, [r7, #8]
 80127a8:	429a      	cmp	r2, r3
 80127aa:	d102      	bne.n	80127b2 <Crc_VerifyUartData+0x242>
			{
				returnValue = E_OK;
 80127ac:	2300      	movs	r3, #0
 80127ae:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80127b0:	e175      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 80127b2:	2301      	movs	r3, #1
 80127b4:	73fb      	strb	r3, [r7, #15]
			break;
 80127b6:	e172      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:
			if(calculatedCrc == Crc_ExtLights_TurnSignalLeft_On)
 80127b8:	4b37      	ldr	r3, [pc, #220]	; (8012898 <Crc_VerifyUartData+0x328>)
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	68ba      	ldr	r2, [r7, #8]
 80127be:	429a      	cmp	r2, r3
 80127c0:	d102      	bne.n	80127c8 <Crc_VerifyUartData+0x258>
			{
				returnValue = E_OK;
 80127c2:	2300      	movs	r3, #0
 80127c4:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80127c6:	e16a      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 80127c8:	2301      	movs	r3, #1
 80127ca:	73fb      	strb	r3, [r7, #15]
			break;
 80127cc:	e167      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:
			if(calculatedCrc == Crc_ExtLights_TurnSignalLeft_Off)
 80127ce:	4b33      	ldr	r3, [pc, #204]	; (801289c <Crc_VerifyUartData+0x32c>)
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	68ba      	ldr	r2, [r7, #8]
 80127d4:	429a      	cmp	r2, r3
 80127d6:	d102      	bne.n	80127de <Crc_VerifyUartData+0x26e>
			{
				returnValue = E_OK;
 80127d8:	2300      	movs	r3, #0
 80127da:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80127dc:	e15f      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 80127de:	2301      	movs	r3, #1
 80127e0:	73fb      	strb	r3, [r7, #15]
			break;
 80127e2:	e15c      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON:
			if(calculatedCrc == Crc_ExtLights_TurnSignalRight_On)
 80127e4:	4b2e      	ldr	r3, [pc, #184]	; (80128a0 <Crc_VerifyUartData+0x330>)
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	68ba      	ldr	r2, [r7, #8]
 80127ea:	429a      	cmp	r2, r3
 80127ec:	d102      	bne.n	80127f4 <Crc_VerifyUartData+0x284>
			{
				returnValue = E_OK;
 80127ee:	2300      	movs	r3, #0
 80127f0:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80127f2:	e154      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 80127f4:	2301      	movs	r3, #1
 80127f6:	73fb      	strb	r3, [r7, #15]
			break;
 80127f8:	e151      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF:
			if(calculatedCrc == Crc_ExtLights_TurnSignalRight_Off)
 80127fa:	4b2a      	ldr	r3, [pc, #168]	; (80128a4 <Crc_VerifyUartData+0x334>)
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	68ba      	ldr	r2, [r7, #8]
 8012800:	429a      	cmp	r2, r3
 8012802:	d102      	bne.n	801280a <Crc_VerifyUartData+0x29a>
			{
				returnValue = E_OK;
 8012804:	2300      	movs	r3, #0
 8012806:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8012808:	e149      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 801280a:	2301      	movs	r3, #1
 801280c:	73fb      	strb	r3, [r7, #15]
			break;
 801280e:	e146      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:
			if(calculatedCrc == Crc_ExtLights_HazardLight_On)
 8012810:	4b25      	ldr	r3, [pc, #148]	; (80128a8 <Crc_VerifyUartData+0x338>)
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	68ba      	ldr	r2, [r7, #8]
 8012816:	429a      	cmp	r2, r3
 8012818:	d102      	bne.n	8012820 <Crc_VerifyUartData+0x2b0>
			{
				returnValue = E_OK;
 801281a:	2300      	movs	r3, #0
 801281c:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 801281e:	e13e      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8012820:	2301      	movs	r3, #1
 8012822:	73fb      	strb	r3, [r7, #15]
			break;
 8012824:	e13b      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:
			if(calculatedCrc == Crc_ExtLights_HazardLight_Off)
 8012826:	4b21      	ldr	r3, [pc, #132]	; (80128ac <Crc_VerifyUartData+0x33c>)
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	68ba      	ldr	r2, [r7, #8]
 801282c:	429a      	cmp	r2, r3
 801282e:	d102      	bne.n	8012836 <Crc_VerifyUartData+0x2c6>
			{
				returnValue = E_OK;
 8012830:	2300      	movs	r3, #0
 8012832:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8012834:	e133      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8012836:	2301      	movs	r3, #1
 8012838:	73fb      	strb	r3, [r7, #15]
			break;
 801283a:	e130      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:
			if(calculatedCrc == Crc_ExtLights_FogLightFront_On)
 801283c:	4b1c      	ldr	r3, [pc, #112]	; (80128b0 <Crc_VerifyUartData+0x340>)
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	68ba      	ldr	r2, [r7, #8]
 8012842:	429a      	cmp	r2, r3
 8012844:	d102      	bne.n	801284c <Crc_VerifyUartData+0x2dc>
			{
				returnValue = E_OK;
 8012846:	2300      	movs	r3, #0
 8012848:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 801284a:	e128      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 801284c:	2301      	movs	r3, #1
 801284e:	73fb      	strb	r3, [r7, #15]
			break;
 8012850:	e125      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:
			if(calculatedCrc == Crc_ExtLights_FogLightFront_Off)
 8012852:	4b18      	ldr	r3, [pc, #96]	; (80128b4 <Crc_VerifyUartData+0x344>)
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	68ba      	ldr	r2, [r7, #8]
 8012858:	429a      	cmp	r2, r3
 801285a:	d102      	bne.n	8012862 <Crc_VerifyUartData+0x2f2>
			{
				returnValue = E_OK;
 801285c:	2300      	movs	r3, #0
 801285e:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8012860:	e11d      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8012862:	2301      	movs	r3, #1
 8012864:	73fb      	strb	r3, [r7, #15]
			break;
 8012866:	e11a      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
 8012868:	20009374 	.word	0x20009374
 801286c:	200002d4 	.word	0x200002d4
 8012870:	200093b0 	.word	0x200093b0
 8012874:	200093b4 	.word	0x200093b4
 8012878:	200093b8 	.word	0x200093b8
 801287c:	200093bc 	.word	0x200093bc
 8012880:	200093c0 	.word	0x200093c0
 8012884:	200093c4 	.word	0x200093c4
 8012888:	20009378 	.word	0x20009378
 801288c:	2000937c 	.word	0x2000937c
 8012890:	20009380 	.word	0x20009380
 8012894:	20009384 	.word	0x20009384
 8012898:	20009388 	.word	0x20009388
 801289c:	2000938c 	.word	0x2000938c
 80128a0:	20009390 	.word	0x20009390
 80128a4:	20009394 	.word	0x20009394
 80128a8:	20009398 	.word	0x20009398
 80128ac:	2000939c 	.word	0x2000939c
 80128b0:	200093a0 	.word	0x200093a0
 80128b4:	200093a4 	.word	0x200093a4
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:
			if(calculatedCrc == Crc_ExtLights_FogLightRear_On)
 80128b8:	4b7b      	ldr	r3, [pc, #492]	; (8012aa8 <Crc_VerifyUartData+0x538>)
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	68ba      	ldr	r2, [r7, #8]
 80128be:	429a      	cmp	r2, r3
 80128c0:	d102      	bne.n	80128c8 <Crc_VerifyUartData+0x358>
			{
				returnValue = E_OK;
 80128c2:	2300      	movs	r3, #0
 80128c4:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80128c6:	e0ea      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 80128c8:	2301      	movs	r3, #1
 80128ca:	73fb      	strb	r3, [r7, #15]
			break;
 80128cc:	e0e7      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:
			if(calculatedCrc == Crc_ExtLights_FogLightRear_Off)
 80128ce:	4b77      	ldr	r3, [pc, #476]	; (8012aac <Crc_VerifyUartData+0x53c>)
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	68ba      	ldr	r2, [r7, #8]
 80128d4:	429a      	cmp	r2, r3
 80128d6:	d102      	bne.n	80128de <Crc_VerifyUartData+0x36e>
			{
				returnValue = E_OK;
 80128d8:	2300      	movs	r3, #0
 80128da:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80128dc:	e0df      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 80128de:	2301      	movs	r3, #1
 80128e0:	73fb      	strb	r3, [r7, #15]
			break;
 80128e2:	e0dc      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTON:
			if(calculatedCrc == Crc_ExtLights_BrakeLight_On)
 80128e4:	4b72      	ldr	r3, [pc, #456]	; (8012ab0 <Crc_VerifyUartData+0x540>)
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	68ba      	ldr	r2, [r7, #8]
 80128ea:	429a      	cmp	r2, r3
 80128ec:	d102      	bne.n	80128f4 <Crc_VerifyUartData+0x384>
			{
				returnValue = E_OK;
 80128ee:	2300      	movs	r3, #0
 80128f0:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80128f2:	e0d4      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 80128f4:	2301      	movs	r3, #1
 80128f6:	73fb      	strb	r3, [r7, #15]
			break;
 80128f8:	e0d1      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:
			if(calculatedCrc == Crc_ExtLights_BrakeLight_Off)
 80128fa:	4b6e      	ldr	r3, [pc, #440]	; (8012ab4 <Crc_VerifyUartData+0x544>)
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	68ba      	ldr	r2, [r7, #8]
 8012900:	429a      	cmp	r2, r3
 8012902:	d102      	bne.n	801290a <Crc_VerifyUartData+0x39a>
			{
				returnValue = E_OK;
 8012904:	2300      	movs	r3, #0
 8012906:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8012908:	e0c9      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 801290a:	2301      	movs	r3, #1
 801290c:	73fb      	strb	r3, [r7, #15]
			break;
 801290e:	e0c6      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:
			if(calculatedCrc == Crc_IntLights_InteriorLight_On)
 8012910:	4b69      	ldr	r3, [pc, #420]	; (8012ab8 <Crc_VerifyUartData+0x548>)
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	68ba      	ldr	r2, [r7, #8]
 8012916:	429a      	cmp	r2, r3
 8012918:	d102      	bne.n	8012920 <Crc_VerifyUartData+0x3b0>
			{
				returnValue = E_OK;
 801291a:	2300      	movs	r3, #0
 801291c:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 801291e:	e0be      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8012920:	2301      	movs	r3, #1
 8012922:	73fb      	strb	r3, [r7, #15]
			break;
 8012924:	e0bb      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:
			if(calculatedCrc == Crc_IntLights_InteriorLights_Off)
 8012926:	4b65      	ldr	r3, [pc, #404]	; (8012abc <Crc_VerifyUartData+0x54c>)
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	68ba      	ldr	r2, [r7, #8]
 801292c:	429a      	cmp	r2, r3
 801292e:	d102      	bne.n	8012936 <Crc_VerifyUartData+0x3c6>
			{
				returnValue = E_OK;
 8012930:	2300      	movs	r3, #0
 8012932:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8012934:	e0b3      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8012936:	2301      	movs	r3, #1
 8012938:	73fb      	strb	r3, [r7, #15]
			break;
 801293a:	e0b0      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_LEGVENT_ON:
			if(calculatedCrc == Crc_Hvac_LegVent_On)
 801293c:	4b60      	ldr	r3, [pc, #384]	; (8012ac0 <Crc_VerifyUartData+0x550>)
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	68ba      	ldr	r2, [r7, #8]
 8012942:	429a      	cmp	r2, r3
 8012944:	d102      	bne.n	801294c <Crc_VerifyUartData+0x3dc>
			{
				returnValue = E_OK;
 8012946:	2300      	movs	r3, #0
 8012948:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 801294a:	e0a8      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 801294c:	2301      	movs	r3, #1
 801294e:	73fb      	strb	r3, [r7, #15]
			break;
 8012950:	e0a5      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
			break;
		case RTE_P_BTC_RX_HVAC_LEGVENT_OFF:
			if(calculatedCrc == Crc_Hvac_LegVent_Off)
 8012952:	4b5c      	ldr	r3, [pc, #368]	; (8012ac4 <Crc_VerifyUartData+0x554>)
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	68ba      	ldr	r2, [r7, #8]
 8012958:	429a      	cmp	r2, r3
 801295a:	d102      	bne.n	8012962 <Crc_VerifyUartData+0x3f2>
			{
				returnValue = E_OK;
 801295c:	2300      	movs	r3, #0
 801295e:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8012960:	e09d      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8012962:	2301      	movs	r3, #1
 8012964:	73fb      	strb	r3, [r7, #15]
			break;
 8012966:	e09a      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_MIDVENT_ON:
			if(calculatedCrc == Crc_Hvac_MidVent_On)
 8012968:	4b57      	ldr	r3, [pc, #348]	; (8012ac8 <Crc_VerifyUartData+0x558>)
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	68ba      	ldr	r2, [r7, #8]
 801296e:	429a      	cmp	r2, r3
 8012970:	d102      	bne.n	8012978 <Crc_VerifyUartData+0x408>
			{
				returnValue = E_OK;
 8012972:	2300      	movs	r3, #0
 8012974:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8012976:	e092      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8012978:	2301      	movs	r3, #1
 801297a:	73fb      	strb	r3, [r7, #15]
			break;
 801297c:	e08f      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_MIDVENT_OFF:
			if(calculatedCrc == Crc_Hvac_MidVent_Off)
 801297e:	4b53      	ldr	r3, [pc, #332]	; (8012acc <Crc_VerifyUartData+0x55c>)
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	68ba      	ldr	r2, [r7, #8]
 8012984:	429a      	cmp	r2, r3
 8012986:	d102      	bne.n	801298e <Crc_VerifyUartData+0x41e>
			{
				returnValue = E_OK;
 8012988:	2300      	movs	r3, #0
 801298a:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 801298c:	e087      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 801298e:	2301      	movs	r3, #1
 8012990:	73fb      	strb	r3, [r7, #15]
			break;
 8012992:	e084      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_WINDSHIELDVENT_ON:
			if(calculatedCrc == Crc_Hvac_WindshieldVent_On)
 8012994:	4b4e      	ldr	r3, [pc, #312]	; (8012ad0 <Crc_VerifyUartData+0x560>)
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	68ba      	ldr	r2, [r7, #8]
 801299a:	429a      	cmp	r2, r3
 801299c:	d102      	bne.n	80129a4 <Crc_VerifyUartData+0x434>
			{
				returnValue = E_OK;
 801299e:	2300      	movs	r3, #0
 80129a0:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80129a2:	e07c      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 80129a4:	2301      	movs	r3, #1
 80129a6:	73fb      	strb	r3, [r7, #15]
			break;
 80129a8:	e079      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_WINDSHIELDVENT_OFF:
			if(calculatedCrc == Crc_Hvac_WindshieldVent_Off)
 80129aa:	4b4a      	ldr	r3, [pc, #296]	; (8012ad4 <Crc_VerifyUartData+0x564>)
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	68ba      	ldr	r2, [r7, #8]
 80129b0:	429a      	cmp	r2, r3
 80129b2:	d102      	bne.n	80129ba <Crc_VerifyUartData+0x44a>
			{
				returnValue = E_OK;
 80129b4:	2300      	movs	r3, #0
 80129b6:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80129b8:	e071      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 80129ba:	2301      	movs	r3, #1
 80129bc:	73fb      	strb	r3, [r7, #15]
			break;
 80129be:	e06e      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_WINDSHIELDDEFROST_ON:
			if(calculatedCrc == Crc_Hvac_WindshieldDefrost_On)
 80129c0:	4b45      	ldr	r3, [pc, #276]	; (8012ad8 <Crc_VerifyUartData+0x568>)
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	68ba      	ldr	r2, [r7, #8]
 80129c6:	429a      	cmp	r2, r3
 80129c8:	d102      	bne.n	80129d0 <Crc_VerifyUartData+0x460>
			{
				returnValue = E_OK;
 80129ca:	2300      	movs	r3, #0
 80129cc:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80129ce:	e066      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 80129d0:	2301      	movs	r3, #1
 80129d2:	73fb      	strb	r3, [r7, #15]
			break;
 80129d4:	e063      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_WINDSHIELDDEFROST_OFF:
			if(calculatedCrc == Crc_Hvac_WindshieldDefrost_Off)
 80129d6:	4b41      	ldr	r3, [pc, #260]	; (8012adc <Crc_VerifyUartData+0x56c>)
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	68ba      	ldr	r2, [r7, #8]
 80129dc:	429a      	cmp	r2, r3
 80129de:	d102      	bne.n	80129e6 <Crc_VerifyUartData+0x476>
			{
				returnValue = E_OK;
 80129e0:	2300      	movs	r3, #0
 80129e2:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80129e4:	e05b      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 80129e6:	2301      	movs	r3, #1
 80129e8:	73fb      	strb	r3, [r7, #15]
			break;
 80129ea:	e058      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_AC_ON:
			if(calculatedCrc == Crc_Hvac_Ac_On)
 80129ec:	4b3c      	ldr	r3, [pc, #240]	; (8012ae0 <Crc_VerifyUartData+0x570>)
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	68ba      	ldr	r2, [r7, #8]
 80129f2:	429a      	cmp	r2, r3
 80129f4:	d102      	bne.n	80129fc <Crc_VerifyUartData+0x48c>
			{
				returnValue = E_OK;
 80129f6:	2300      	movs	r3, #0
 80129f8:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80129fa:	e050      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 80129fc:	2301      	movs	r3, #1
 80129fe:	73fb      	strb	r3, [r7, #15]
			break;
 8012a00:	e04d      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_AC_OFF:
			if(calculatedCrc == Crc_Hvac_Ac_Off)
 8012a02:	4b38      	ldr	r3, [pc, #224]	; (8012ae4 <Crc_VerifyUartData+0x574>)
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	68ba      	ldr	r2, [r7, #8]
 8012a08:	429a      	cmp	r2, r3
 8012a0a:	d102      	bne.n	8012a12 <Crc_VerifyUartData+0x4a2>
			{
				returnValue = E_OK;
 8012a0c:	2300      	movs	r3, #0
 8012a0e:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8012a10:	e045      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8012a12:	2301      	movs	r3, #1
 8012a14:	73fb      	strb	r3, [r7, #15]
			break;
 8012a16:	e042      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_RECIRCULATION:
			if(calculatedCrc == Crc_Hvac_Recirculation)
 8012a18:	4b33      	ldr	r3, [pc, #204]	; (8012ae8 <Crc_VerifyUartData+0x578>)
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	68ba      	ldr	r2, [r7, #8]
 8012a1e:	429a      	cmp	r2, r3
 8012a20:	d102      	bne.n	8012a28 <Crc_VerifyUartData+0x4b8>
			{
				returnValue = E_OK;
 8012a22:	2300      	movs	r3, #0
 8012a24:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8012a26:	e03a      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8012a28:	2301      	movs	r3, #1
 8012a2a:	73fb      	strb	r3, [r7, #15]
			break;
 8012a2c:	e037      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_NORECIRCULATION:
			if(calculatedCrc == Crc_Hvac_NoRecirculation)
 8012a2e:	4b2f      	ldr	r3, [pc, #188]	; (8012aec <Crc_VerifyUartData+0x57c>)
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	68ba      	ldr	r2, [r7, #8]
 8012a34:	429a      	cmp	r2, r3
 8012a36:	d102      	bne.n	8012a3e <Crc_VerifyUartData+0x4ce>
			{
				returnValue = E_OK;
 8012a38:	2300      	movs	r3, #0
 8012a3a:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8012a3c:	e02f      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8012a3e:	2301      	movs	r3, #1
 8012a40:	73fb      	strb	r3, [r7, #15]
			break;
 8012a42:	e02c      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_AUTOMATICMODE_ON:
			if(calculatedCrc == Crc_Hvac_AutomaticMode_On)
 8012a44:	4b2a      	ldr	r3, [pc, #168]	; (8012af0 <Crc_VerifyUartData+0x580>)
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	68ba      	ldr	r2, [r7, #8]
 8012a4a:	429a      	cmp	r2, r3
 8012a4c:	d102      	bne.n	8012a54 <Crc_VerifyUartData+0x4e4>
			{
				returnValue = E_OK;
 8012a4e:	2300      	movs	r3, #0
 8012a50:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8012a52:	e024      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8012a54:	2301      	movs	r3, #1
 8012a56:	73fb      	strb	r3, [r7, #15]
			break;
 8012a58:	e021      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_AUTOMATICMODE_OFF:
			if(calculatedCrc == Crc_Hvac_AutomaticMode_Off)
 8012a5a:	4b26      	ldr	r3, [pc, #152]	; (8012af4 <Crc_VerifyUartData+0x584>)
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	68ba      	ldr	r2, [r7, #8]
 8012a60:	429a      	cmp	r2, r3
 8012a62:	d102      	bne.n	8012a6a <Crc_VerifyUartData+0x4fa>
			{
				returnValue = E_OK;
 8012a64:	2300      	movs	r3, #0
 8012a66:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8012a68:	e019      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8012a6a:	2301      	movs	r3, #1
 8012a6c:	73fb      	strb	r3, [r7, #15]
			break;
 8012a6e:	e016      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_REARWINDSHIELDDEFROST_ON:
			if(calculatedCrc == Crc_Hvac_RearWindshieldDefrost_On)
 8012a70:	4b21      	ldr	r3, [pc, #132]	; (8012af8 <Crc_VerifyUartData+0x588>)
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	68ba      	ldr	r2, [r7, #8]
 8012a76:	429a      	cmp	r2, r3
 8012a78:	d102      	bne.n	8012a80 <Crc_VerifyUartData+0x510>
			{
				returnValue = E_OK;
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8012a7e:	e00e      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8012a80:	2301      	movs	r3, #1
 8012a82:	73fb      	strb	r3, [r7, #15]
			break;
 8012a84:	e00b      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_REARWINDSHIELDDEFROST_OFF:
			if(calculatedCrc == Crc_Hvac_RearWindshieldDefrost_Off)
 8012a86:	4b1d      	ldr	r3, [pc, #116]	; (8012afc <Crc_VerifyUartData+0x58c>)
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	68ba      	ldr	r2, [r7, #8]
 8012a8c:	429a      	cmp	r2, r3
 8012a8e:	d102      	bne.n	8012a96 <Crc_VerifyUartData+0x526>
			{
				returnValue = E_OK;
 8012a90:	2300      	movs	r3, #0
 8012a92:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8012a94:	e003      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8012a96:	2301      	movs	r3, #1
 8012a98:	73fb      	strb	r3, [r7, #15]
			break;
 8012a9a:	e000      	b.n	8012a9e <Crc_VerifyUartData+0x52e>
		default:
			break;
 8012a9c:	bf00      	nop
	}
	return returnValue;
 8012a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	3710      	adds	r7, #16
 8012aa4:	46bd      	mov	sp, r7
 8012aa6:	bd80      	pop	{r7, pc}
 8012aa8:	200093d4 	.word	0x200093d4
 8012aac:	200093d8 	.word	0x200093d8
 8012ab0:	200093a8 	.word	0x200093a8
 8012ab4:	200093ac 	.word	0x200093ac
 8012ab8:	200093cc 	.word	0x200093cc
 8012abc:	200093d0 	.word	0x200093d0
 8012ac0:	200093dc 	.word	0x200093dc
 8012ac4:	200093e0 	.word	0x200093e0
 8012ac8:	200093e4 	.word	0x200093e4
 8012acc:	200093e8 	.word	0x200093e8
 8012ad0:	200093ec 	.word	0x200093ec
 8012ad4:	200093f0 	.word	0x200093f0
 8012ad8:	200093f4 	.word	0x200093f4
 8012adc:	200093f8 	.word	0x200093f8
 8012ae0:	20009404 	.word	0x20009404
 8012ae4:	20009408 	.word	0x20009408
 8012ae8:	2000940c 	.word	0x2000940c
 8012aec:	20009410 	.word	0x20009410
 8012af0:	20009414 	.word	0x20009414
 8012af4:	20009418 	.word	0x20009418
 8012af8:	200093fc 	.word	0x200093fc
 8012afc:	20009400 	.word	0x20009400

08012b00 <Crc_InitCrcValuesForUart>:
/***********************************************************************************
* Function: Crc_InitCrcValuesForUart									   		   *
* Description: Initialize the CRC default values for UART data.			 		   *
************************************************************************************/
VOID Crc_InitCrcValuesForUart()
{
 8012b00:	b580      	push	{r7, lr}
 8012b02:	b082      	sub	sp, #8
 8012b04:	af00      	add	r7, sp, #0
	/* Local variable to store default value of possible
	 * received data from UART. */
	uint32 value = 0;
 8012b06:	2300      	movs	r3, #0
 8012b08:	607b      	str	r3, [r7, #4]
	/* Calculate CRC for each defined bluetooth command. */
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON;
 8012b0a:	230f      	movs	r3, #15
 8012b0c:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightRear_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012b0e:	1d3b      	adds	r3, r7, #4
 8012b10:	2201      	movs	r2, #1
 8012b12:	4619      	mov	r1, r3
 8012b14:	48ba      	ldr	r0, [pc, #744]	; (8012e00 <Crc_InitCrcValuesForUart+0x300>)
 8012b16:	f7f4 fb61 	bl	80071dc <HAL_CRC_Calculate>
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	4ab9      	ldr	r2, [pc, #740]	; (8012e04 <Crc_InitCrcValuesForUart+0x304>)
 8012b1e:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF;
 8012b20:	2310      	movs	r3, #16
 8012b22:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightRear_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012b24:	1d3b      	adds	r3, r7, #4
 8012b26:	2201      	movs	r2, #1
 8012b28:	4619      	mov	r1, r3
 8012b2a:	48b5      	ldr	r0, [pc, #724]	; (8012e00 <Crc_InitCrcValuesForUart+0x300>)
 8012b2c:	f7f4 fb56 	bl	80071dc <HAL_CRC_Calculate>
 8012b30:	4603      	mov	r3, r0
 8012b32:	4ab5      	ldr	r2, [pc, #724]	; (8012e08 <Crc_InitCrcValuesForUart+0x308>)
 8012b34:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_CENLOC_ON;
 8012b36:	2301      	movs	r3, #1
 8012b38:	607b      	str	r3, [r7, #4]
	Crc_CenLoc_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012b3a:	1d3b      	adds	r3, r7, #4
 8012b3c:	2201      	movs	r2, #1
 8012b3e:	4619      	mov	r1, r3
 8012b40:	48af      	ldr	r0, [pc, #700]	; (8012e00 <Crc_InitCrcValuesForUart+0x300>)
 8012b42:	f7f4 fb4b 	bl	80071dc <HAL_CRC_Calculate>
 8012b46:	4603      	mov	r3, r0
 8012b48:	4ab0      	ldr	r2, [pc, #704]	; (8012e0c <Crc_InitCrcValuesForUart+0x30c>)
 8012b4a:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_CENLOC_OFF;
 8012b4c:	2302      	movs	r3, #2
 8012b4e:	607b      	str	r3, [r7, #4]
	Crc_CenLoc_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012b50:	1d3b      	adds	r3, r7, #4
 8012b52:	2201      	movs	r2, #1
 8012b54:	4619      	mov	r1, r3
 8012b56:	48aa      	ldr	r0, [pc, #680]	; (8012e00 <Crc_InitCrcValuesForUart+0x300>)
 8012b58:	f7f4 fb40 	bl	80071dc <HAL_CRC_Calculate>
 8012b5c:	4603      	mov	r3, r0
 8012b5e:	4aac      	ldr	r2, [pc, #688]	; (8012e10 <Crc_InitCrcValuesForUart+0x310>)
 8012b60:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_ON;
 8012b62:	2303      	movs	r3, #3
 8012b64:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HighBeam_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012b66:	1d3b      	adds	r3, r7, #4
 8012b68:	2201      	movs	r2, #1
 8012b6a:	4619      	mov	r1, r3
 8012b6c:	48a4      	ldr	r0, [pc, #656]	; (8012e00 <Crc_InitCrcValuesForUart+0x300>)
 8012b6e:	f7f4 fb35 	bl	80071dc <HAL_CRC_Calculate>
 8012b72:	4603      	mov	r3, r0
 8012b74:	4aa7      	ldr	r2, [pc, #668]	; (8012e14 <Crc_InitCrcValuesForUart+0x314>)
 8012b76:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_OFF;
 8012b78:	2304      	movs	r3, #4
 8012b7a:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HighBeam_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012b7c:	1d3b      	adds	r3, r7, #4
 8012b7e:	2201      	movs	r2, #1
 8012b80:	4619      	mov	r1, r3
 8012b82:	489f      	ldr	r0, [pc, #636]	; (8012e00 <Crc_InitCrcValuesForUart+0x300>)
 8012b84:	f7f4 fb2a 	bl	80071dc <HAL_CRC_Calculate>
 8012b88:	4603      	mov	r3, r0
 8012b8a:	4aa3      	ldr	r2, [pc, #652]	; (8012e18 <Crc_InitCrcValuesForUart+0x318>)
 8012b8c:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON;
 8012b8e:	2307      	movs	r3, #7
 8012b90:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalLeft_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012b92:	1d3b      	adds	r3, r7, #4
 8012b94:	2201      	movs	r2, #1
 8012b96:	4619      	mov	r1, r3
 8012b98:	4899      	ldr	r0, [pc, #612]	; (8012e00 <Crc_InitCrcValuesForUart+0x300>)
 8012b9a:	f7f4 fb1f 	bl	80071dc <HAL_CRC_Calculate>
 8012b9e:	4603      	mov	r3, r0
 8012ba0:	4a9e      	ldr	r2, [pc, #632]	; (8012e1c <Crc_InitCrcValuesForUart+0x31c>)
 8012ba2:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF;
 8012ba4:	2308      	movs	r3, #8
 8012ba6:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalLeft_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012ba8:	1d3b      	adds	r3, r7, #4
 8012baa:	2201      	movs	r2, #1
 8012bac:	4619      	mov	r1, r3
 8012bae:	4894      	ldr	r0, [pc, #592]	; (8012e00 <Crc_InitCrcValuesForUart+0x300>)
 8012bb0:	f7f4 fb14 	bl	80071dc <HAL_CRC_Calculate>
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	4a9a      	ldr	r2, [pc, #616]	; (8012e20 <Crc_InitCrcValuesForUart+0x320>)
 8012bb8:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON;
 8012bba:	2309      	movs	r3, #9
 8012bbc:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalRight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012bbe:	1d3b      	adds	r3, r7, #4
 8012bc0:	2201      	movs	r2, #1
 8012bc2:	4619      	mov	r1, r3
 8012bc4:	488e      	ldr	r0, [pc, #568]	; (8012e00 <Crc_InitCrcValuesForUart+0x300>)
 8012bc6:	f7f4 fb09 	bl	80071dc <HAL_CRC_Calculate>
 8012bca:	4603      	mov	r3, r0
 8012bcc:	4a95      	ldr	r2, [pc, #596]	; (8012e24 <Crc_InitCrcValuesForUart+0x324>)
 8012bce:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF;
 8012bd0:	230a      	movs	r3, #10
 8012bd2:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalRight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012bd4:	1d3b      	adds	r3, r7, #4
 8012bd6:	2201      	movs	r2, #1
 8012bd8:	4619      	mov	r1, r3
 8012bda:	4889      	ldr	r0, [pc, #548]	; (8012e00 <Crc_InitCrcValuesForUart+0x300>)
 8012bdc:	f7f4 fafe 	bl	80071dc <HAL_CRC_Calculate>
 8012be0:	4603      	mov	r3, r0
 8012be2:	4a91      	ldr	r2, [pc, #580]	; (8012e28 <Crc_InitCrcValuesForUart+0x328>)
 8012be4:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON;
 8012be6:	230b      	movs	r3, #11
 8012be8:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HazardLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012bea:	1d3b      	adds	r3, r7, #4
 8012bec:	2201      	movs	r2, #1
 8012bee:	4619      	mov	r1, r3
 8012bf0:	4883      	ldr	r0, [pc, #524]	; (8012e00 <Crc_InitCrcValuesForUart+0x300>)
 8012bf2:	f7f4 faf3 	bl	80071dc <HAL_CRC_Calculate>
 8012bf6:	4603      	mov	r3, r0
 8012bf8:	4a8c      	ldr	r2, [pc, #560]	; (8012e2c <Crc_InitCrcValuesForUart+0x32c>)
 8012bfa:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF;
 8012bfc:	230c      	movs	r3, #12
 8012bfe:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HazardLight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012c00:	1d3b      	adds	r3, r7, #4
 8012c02:	2201      	movs	r2, #1
 8012c04:	4619      	mov	r1, r3
 8012c06:	487e      	ldr	r0, [pc, #504]	; (8012e00 <Crc_InitCrcValuesForUart+0x300>)
 8012c08:	f7f4 fae8 	bl	80071dc <HAL_CRC_Calculate>
 8012c0c:	4603      	mov	r3, r0
 8012c0e:	4a88      	ldr	r2, [pc, #544]	; (8012e30 <Crc_InitCrcValuesForUart+0x330>)
 8012c10:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON;
 8012c12:	230d      	movs	r3, #13
 8012c14:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightFront_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012c16:	1d3b      	adds	r3, r7, #4
 8012c18:	2201      	movs	r2, #1
 8012c1a:	4619      	mov	r1, r3
 8012c1c:	4878      	ldr	r0, [pc, #480]	; (8012e00 <Crc_InitCrcValuesForUart+0x300>)
 8012c1e:	f7f4 fadd 	bl	80071dc <HAL_CRC_Calculate>
 8012c22:	4603      	mov	r3, r0
 8012c24:	4a83      	ldr	r2, [pc, #524]	; (8012e34 <Crc_InitCrcValuesForUart+0x334>)
 8012c26:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF;
 8012c28:	230e      	movs	r3, #14
 8012c2a:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightFront_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012c2c:	1d3b      	adds	r3, r7, #4
 8012c2e:	2201      	movs	r2, #1
 8012c30:	4619      	mov	r1, r3
 8012c32:	4873      	ldr	r0, [pc, #460]	; (8012e00 <Crc_InitCrcValuesForUart+0x300>)
 8012c34:	f7f4 fad2 	bl	80071dc <HAL_CRC_Calculate>
 8012c38:	4603      	mov	r3, r0
 8012c3a:	4a7f      	ldr	r2, [pc, #508]	; (8012e38 <Crc_InitCrcValuesForUart+0x338>)
 8012c3c:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTON;
 8012c3e:	2311      	movs	r3, #17
 8012c40:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_BrakeLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012c42:	1d3b      	adds	r3, r7, #4
 8012c44:	2201      	movs	r2, #1
 8012c46:	4619      	mov	r1, r3
 8012c48:	486d      	ldr	r0, [pc, #436]	; (8012e00 <Crc_InitCrcValuesForUart+0x300>)
 8012c4a:	f7f4 fac7 	bl	80071dc <HAL_CRC_Calculate>
 8012c4e:	4603      	mov	r3, r0
 8012c50:	4a7a      	ldr	r2, [pc, #488]	; (8012e3c <Crc_InitCrcValuesForUart+0x33c>)
 8012c52:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTOFF;
 8012c54:	2312      	movs	r3, #18
 8012c56:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_BrakeLight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012c58:	1d3b      	adds	r3, r7, #4
 8012c5a:	2201      	movs	r2, #1
 8012c5c:	4619      	mov	r1, r3
 8012c5e:	4868      	ldr	r0, [pc, #416]	; (8012e00 <Crc_InitCrcValuesForUart+0x300>)
 8012c60:	f7f4 fabc 	bl	80071dc <HAL_CRC_Calculate>
 8012c64:	4603      	mov	r3, r0
 8012c66:	4a76      	ldr	r2, [pc, #472]	; (8012e40 <Crc_InitCrcValuesForUart+0x340>)
 8012c68:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_ON;
 8012c6a:	2315      	movs	r3, #21
 8012c6c:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_ReverseLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012c6e:	1d3b      	adds	r3, r7, #4
 8012c70:	2201      	movs	r2, #1
 8012c72:	4619      	mov	r1, r3
 8012c74:	4862      	ldr	r0, [pc, #392]	; (8012e00 <Crc_InitCrcValuesForUart+0x300>)
 8012c76:	f7f4 fab1 	bl	80071dc <HAL_CRC_Calculate>
 8012c7a:	4603      	mov	r3, r0
 8012c7c:	4a71      	ldr	r2, [pc, #452]	; (8012e44 <Crc_InitCrcValuesForUart+0x344>)
 8012c7e:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF;
 8012c80:	2316      	movs	r3, #22
 8012c82:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_ReverseLight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012c84:	1d3b      	adds	r3, r7, #4
 8012c86:	2201      	movs	r2, #1
 8012c88:	4619      	mov	r1, r3
 8012c8a:	485d      	ldr	r0, [pc, #372]	; (8012e00 <Crc_InitCrcValuesForUart+0x300>)
 8012c8c:	f7f4 faa6 	bl	80071dc <HAL_CRC_Calculate>
 8012c90:	4603      	mov	r3, r0
 8012c92:	4a6d      	ldr	r2, [pc, #436]	; (8012e48 <Crc_InitCrcValuesForUart+0x348>)
 8012c94:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_POSITIONZERO;
 8012c96:	2317      	movs	r3, #23
 8012c98:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_PositionZero = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012c9a:	1d3b      	adds	r3, r7, #4
 8012c9c:	2201      	movs	r2, #1
 8012c9e:	4619      	mov	r1, r3
 8012ca0:	4857      	ldr	r0, [pc, #348]	; (8012e00 <Crc_InitCrcValuesForUart+0x300>)
 8012ca2:	f7f4 fa9b 	bl	80071dc <HAL_CRC_Calculate>
 8012ca6:	4603      	mov	r3, r0
 8012ca8:	4a68      	ldr	r2, [pc, #416]	; (8012e4c <Crc_InitCrcValuesForUart+0x34c>)
 8012caa:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
 8012cac:	2318      	movs	r3, #24
 8012cae:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_AutomaticLights = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012cb0:	1d3b      	adds	r3, r7, #4
 8012cb2:	2201      	movs	r2, #1
 8012cb4:	4619      	mov	r1, r3
 8012cb6:	4852      	ldr	r0, [pc, #328]	; (8012e00 <Crc_InitCrcValuesForUart+0x300>)
 8012cb8:	f7f4 fa90 	bl	80071dc <HAL_CRC_Calculate>
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	4a64      	ldr	r2, [pc, #400]	; (8012e50 <Crc_InitCrcValuesForUart+0x350>)
 8012cc0:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
 8012cc2:	2319      	movs	r3, #25
 8012cc4:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_PositionLights = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012cc6:	1d3b      	adds	r3, r7, #4
 8012cc8:	2201      	movs	r2, #1
 8012cca:	4619      	mov	r1, r3
 8012ccc:	484c      	ldr	r0, [pc, #304]	; (8012e00 <Crc_InitCrcValuesForUart+0x300>)
 8012cce:	f7f4 fa85 	bl	80071dc <HAL_CRC_Calculate>
 8012cd2:	4603      	mov	r3, r0
 8012cd4:	4a5f      	ldr	r2, [pc, #380]	; (8012e54 <Crc_InitCrcValuesForUart+0x354>)
 8012cd6:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
 8012cd8:	231a      	movs	r3, #26
 8012cda:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_NightTimeLights = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012cdc:	1d3b      	adds	r3, r7, #4
 8012cde:	2201      	movs	r2, #1
 8012ce0:	4619      	mov	r1, r3
 8012ce2:	4847      	ldr	r0, [pc, #284]	; (8012e00 <Crc_InitCrcValuesForUart+0x300>)
 8012ce4:	f7f4 fa7a 	bl	80071dc <HAL_CRC_Calculate>
 8012ce8:	4603      	mov	r3, r0
 8012cea:	4a5b      	ldr	r2, [pc, #364]	; (8012e58 <Crc_InitCrcValuesForUart+0x358>)
 8012cec:	6013      	str	r3, [r2, #0]
	Crc_Ignition_Turn_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012cee:	1d3b      	adds	r3, r7, #4
 8012cf0:	2201      	movs	r2, #1
 8012cf2:	4619      	mov	r1, r3
 8012cf4:	4842      	ldr	r0, [pc, #264]	; (8012e00 <Crc_InitCrcValuesForUart+0x300>)
 8012cf6:	f7f4 fa71 	bl	80071dc <HAL_CRC_Calculate>
 8012cfa:	4603      	mov	r3, r0
 8012cfc:	4a57      	ldr	r2, [pc, #348]	; (8012e5c <Crc_InitCrcValuesForUart+0x35c>)
 8012cfe:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_ON;
 8012d00:	2313      	movs	r3, #19
 8012d02:	607b      	str	r3, [r7, #4]
	Crc_IntLights_InteriorLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012d04:	1d3b      	adds	r3, r7, #4
 8012d06:	2201      	movs	r2, #1
 8012d08:	4619      	mov	r1, r3
 8012d0a:	483d      	ldr	r0, [pc, #244]	; (8012e00 <Crc_InitCrcValuesForUart+0x300>)
 8012d0c:	f7f4 fa66 	bl	80071dc <HAL_CRC_Calculate>
 8012d10:	4603      	mov	r3, r0
 8012d12:	4a53      	ldr	r2, [pc, #332]	; (8012e60 <Crc_InitCrcValuesForUart+0x360>)
 8012d14:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF;
 8012d16:	2314      	movs	r3, #20
 8012d18:	607b      	str	r3, [r7, #4]
	Crc_IntLights_InteriorLights_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012d1a:	1d3b      	adds	r3, r7, #4
 8012d1c:	2201      	movs	r2, #1
 8012d1e:	4619      	mov	r1, r3
 8012d20:	4837      	ldr	r0, [pc, #220]	; (8012e00 <Crc_InitCrcValuesForUart+0x300>)
 8012d22:	f7f4 fa5b 	bl	80071dc <HAL_CRC_Calculate>
 8012d26:	4603      	mov	r3, r0
 8012d28:	4a4e      	ldr	r2, [pc, #312]	; (8012e64 <Crc_InitCrcValuesForUart+0x364>)
 8012d2a:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_LEGVENT_ON;
 8012d2c:	2337      	movs	r3, #55	; 0x37
 8012d2e:	607b      	str	r3, [r7, #4]
	Crc_Hvac_LegVent_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012d30:	1d3b      	adds	r3, r7, #4
 8012d32:	2201      	movs	r2, #1
 8012d34:	4619      	mov	r1, r3
 8012d36:	4832      	ldr	r0, [pc, #200]	; (8012e00 <Crc_InitCrcValuesForUart+0x300>)
 8012d38:	f7f4 fa50 	bl	80071dc <HAL_CRC_Calculate>
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	4a4a      	ldr	r2, [pc, #296]	; (8012e68 <Crc_InitCrcValuesForUart+0x368>)
 8012d40:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_LEGVENT_OFF;
 8012d42:	2338      	movs	r3, #56	; 0x38
 8012d44:	607b      	str	r3, [r7, #4]
	Crc_Hvac_LegVent_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012d46:	1d3b      	adds	r3, r7, #4
 8012d48:	2201      	movs	r2, #1
 8012d4a:	4619      	mov	r1, r3
 8012d4c:	482c      	ldr	r0, [pc, #176]	; (8012e00 <Crc_InitCrcValuesForUart+0x300>)
 8012d4e:	f7f4 fa45 	bl	80071dc <HAL_CRC_Calculate>
 8012d52:	4603      	mov	r3, r0
 8012d54:	4a45      	ldr	r2, [pc, #276]	; (8012e6c <Crc_InitCrcValuesForUart+0x36c>)
 8012d56:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_MIDVENT_ON;
 8012d58:	2339      	movs	r3, #57	; 0x39
 8012d5a:	607b      	str	r3, [r7, #4]
	Crc_Hvac_MidVent_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012d5c:	1d3b      	adds	r3, r7, #4
 8012d5e:	2201      	movs	r2, #1
 8012d60:	4619      	mov	r1, r3
 8012d62:	4827      	ldr	r0, [pc, #156]	; (8012e00 <Crc_InitCrcValuesForUart+0x300>)
 8012d64:	f7f4 fa3a 	bl	80071dc <HAL_CRC_Calculate>
 8012d68:	4603      	mov	r3, r0
 8012d6a:	4a41      	ldr	r2, [pc, #260]	; (8012e70 <Crc_InitCrcValuesForUart+0x370>)
 8012d6c:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_MIDVENT_OFF;
 8012d6e:	233a      	movs	r3, #58	; 0x3a
 8012d70:	607b      	str	r3, [r7, #4]
	Crc_Hvac_MidVent_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012d72:	1d3b      	adds	r3, r7, #4
 8012d74:	2201      	movs	r2, #1
 8012d76:	4619      	mov	r1, r3
 8012d78:	4821      	ldr	r0, [pc, #132]	; (8012e00 <Crc_InitCrcValuesForUart+0x300>)
 8012d7a:	f7f4 fa2f 	bl	80071dc <HAL_CRC_Calculate>
 8012d7e:	4603      	mov	r3, r0
 8012d80:	4a3c      	ldr	r2, [pc, #240]	; (8012e74 <Crc_InitCrcValuesForUart+0x374>)
 8012d82:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_WINDSHIELDVENT_ON;
 8012d84:	233b      	movs	r3, #59	; 0x3b
 8012d86:	607b      	str	r3, [r7, #4]
	Crc_Hvac_WindshieldVent_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012d88:	1d3b      	adds	r3, r7, #4
 8012d8a:	2201      	movs	r2, #1
 8012d8c:	4619      	mov	r1, r3
 8012d8e:	481c      	ldr	r0, [pc, #112]	; (8012e00 <Crc_InitCrcValuesForUart+0x300>)
 8012d90:	f7f4 fa24 	bl	80071dc <HAL_CRC_Calculate>
 8012d94:	4603      	mov	r3, r0
 8012d96:	4a38      	ldr	r2, [pc, #224]	; (8012e78 <Crc_InitCrcValuesForUart+0x378>)
 8012d98:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_WINDSHIELDVENT_OFF;
 8012d9a:	233c      	movs	r3, #60	; 0x3c
 8012d9c:	607b      	str	r3, [r7, #4]
	Crc_Hvac_WindshieldVent_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012d9e:	1d3b      	adds	r3, r7, #4
 8012da0:	2201      	movs	r2, #1
 8012da2:	4619      	mov	r1, r3
 8012da4:	4816      	ldr	r0, [pc, #88]	; (8012e00 <Crc_InitCrcValuesForUart+0x300>)
 8012da6:	f7f4 fa19 	bl	80071dc <HAL_CRC_Calculate>
 8012daa:	4603      	mov	r3, r0
 8012dac:	4a33      	ldr	r2, [pc, #204]	; (8012e7c <Crc_InitCrcValuesForUart+0x37c>)
 8012dae:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_WINDSHIELDDEFROST_ON;
 8012db0:	233d      	movs	r3, #61	; 0x3d
 8012db2:	607b      	str	r3, [r7, #4]
	Crc_Hvac_WindshieldDefrost_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012db4:	1d3b      	adds	r3, r7, #4
 8012db6:	2201      	movs	r2, #1
 8012db8:	4619      	mov	r1, r3
 8012dba:	4811      	ldr	r0, [pc, #68]	; (8012e00 <Crc_InitCrcValuesForUart+0x300>)
 8012dbc:	f7f4 fa0e 	bl	80071dc <HAL_CRC_Calculate>
 8012dc0:	4603      	mov	r3, r0
 8012dc2:	4a2f      	ldr	r2, [pc, #188]	; (8012e80 <Crc_InitCrcValuesForUart+0x380>)
 8012dc4:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_WINDSHIELDDEFROST_OFF;
 8012dc6:	233e      	movs	r3, #62	; 0x3e
 8012dc8:	607b      	str	r3, [r7, #4]
	Crc_Hvac_WindshieldDefrost_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012dca:	1d3b      	adds	r3, r7, #4
 8012dcc:	2201      	movs	r2, #1
 8012dce:	4619      	mov	r1, r3
 8012dd0:	480b      	ldr	r0, [pc, #44]	; (8012e00 <Crc_InitCrcValuesForUart+0x300>)
 8012dd2:	f7f4 fa03 	bl	80071dc <HAL_CRC_Calculate>
 8012dd6:	4603      	mov	r3, r0
 8012dd8:	4a2a      	ldr	r2, [pc, #168]	; (8012e84 <Crc_InitCrcValuesForUart+0x384>)
 8012dda:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_REARWINDSHIELDDEFROST_ON;
 8012ddc:	2346      	movs	r3, #70	; 0x46
 8012dde:	607b      	str	r3, [r7, #4]
	Crc_Hvac_RearWindshieldDefrost_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012de0:	1d3b      	adds	r3, r7, #4
 8012de2:	2201      	movs	r2, #1
 8012de4:	4619      	mov	r1, r3
 8012de6:	4806      	ldr	r0, [pc, #24]	; (8012e00 <Crc_InitCrcValuesForUart+0x300>)
 8012de8:	f7f4 f9f8 	bl	80071dc <HAL_CRC_Calculate>
 8012dec:	4603      	mov	r3, r0
 8012dee:	4a26      	ldr	r2, [pc, #152]	; (8012e88 <Crc_InitCrcValuesForUart+0x388>)
 8012df0:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_REARWINDSHIELDDEFROST_OFF;
 8012df2:	2347      	movs	r3, #71	; 0x47
 8012df4:	607b      	str	r3, [r7, #4]
	Crc_Hvac_RearWindshieldDefrost_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012df6:	1d3b      	adds	r3, r7, #4
 8012df8:	2201      	movs	r2, #1
 8012dfa:	4619      	mov	r1, r3
 8012dfc:	e046      	b.n	8012e8c <Crc_InitCrcValuesForUart+0x38c>
 8012dfe:	bf00      	nop
 8012e00:	200002d4 	.word	0x200002d4
 8012e04:	200093d4 	.word	0x200093d4
 8012e08:	200093d8 	.word	0x200093d8
 8012e0c:	20009378 	.word	0x20009378
 8012e10:	2000937c 	.word	0x2000937c
 8012e14:	20009380 	.word	0x20009380
 8012e18:	20009384 	.word	0x20009384
 8012e1c:	20009388 	.word	0x20009388
 8012e20:	2000938c 	.word	0x2000938c
 8012e24:	20009390 	.word	0x20009390
 8012e28:	20009394 	.word	0x20009394
 8012e2c:	20009398 	.word	0x20009398
 8012e30:	2000939c 	.word	0x2000939c
 8012e34:	200093a0 	.word	0x200093a0
 8012e38:	200093a4 	.word	0x200093a4
 8012e3c:	200093a8 	.word	0x200093a8
 8012e40:	200093ac 	.word	0x200093ac
 8012e44:	200093b0 	.word	0x200093b0
 8012e48:	200093b4 	.word	0x200093b4
 8012e4c:	200093b8 	.word	0x200093b8
 8012e50:	200093bc 	.word	0x200093bc
 8012e54:	200093c0 	.word	0x200093c0
 8012e58:	200093c4 	.word	0x200093c4
 8012e5c:	200093c8 	.word	0x200093c8
 8012e60:	200093cc 	.word	0x200093cc
 8012e64:	200093d0 	.word	0x200093d0
 8012e68:	200093dc 	.word	0x200093dc
 8012e6c:	200093e0 	.word	0x200093e0
 8012e70:	200093e4 	.word	0x200093e4
 8012e74:	200093e8 	.word	0x200093e8
 8012e78:	200093ec 	.word	0x200093ec
 8012e7c:	200093f0 	.word	0x200093f0
 8012e80:	200093f4 	.word	0x200093f4
 8012e84:	200093f8 	.word	0x200093f8
 8012e88:	200093fc 	.word	0x200093fc
 8012e8c:	4825      	ldr	r0, [pc, #148]	; (8012f24 <Crc_InitCrcValuesForUart+0x424>)
 8012e8e:	f7f4 f9a5 	bl	80071dc <HAL_CRC_Calculate>
 8012e92:	4603      	mov	r3, r0
 8012e94:	4a24      	ldr	r2, [pc, #144]	; (8012f28 <Crc_InitCrcValuesForUart+0x428>)
 8012e96:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_AC_ON;
 8012e98:	233f      	movs	r3, #63	; 0x3f
 8012e9a:	607b      	str	r3, [r7, #4]
	Crc_Hvac_Ac_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012e9c:	1d3b      	adds	r3, r7, #4
 8012e9e:	2201      	movs	r2, #1
 8012ea0:	4619      	mov	r1, r3
 8012ea2:	4820      	ldr	r0, [pc, #128]	; (8012f24 <Crc_InitCrcValuesForUart+0x424>)
 8012ea4:	f7f4 f99a 	bl	80071dc <HAL_CRC_Calculate>
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	4a20      	ldr	r2, [pc, #128]	; (8012f2c <Crc_InitCrcValuesForUart+0x42c>)
 8012eac:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_AC_OFF;
 8012eae:	2340      	movs	r3, #64	; 0x40
 8012eb0:	607b      	str	r3, [r7, #4]
	Crc_Hvac_Ac_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012eb2:	1d3b      	adds	r3, r7, #4
 8012eb4:	2201      	movs	r2, #1
 8012eb6:	4619      	mov	r1, r3
 8012eb8:	481a      	ldr	r0, [pc, #104]	; (8012f24 <Crc_InitCrcValuesForUart+0x424>)
 8012eba:	f7f4 f98f 	bl	80071dc <HAL_CRC_Calculate>
 8012ebe:	4603      	mov	r3, r0
 8012ec0:	4a1b      	ldr	r2, [pc, #108]	; (8012f30 <Crc_InitCrcValuesForUart+0x430>)
 8012ec2:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_RECIRCULATION;
 8012ec4:	2341      	movs	r3, #65	; 0x41
 8012ec6:	607b      	str	r3, [r7, #4]
	Crc_Hvac_Recirculation = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012ec8:	1d3b      	adds	r3, r7, #4
 8012eca:	2201      	movs	r2, #1
 8012ecc:	4619      	mov	r1, r3
 8012ece:	4815      	ldr	r0, [pc, #84]	; (8012f24 <Crc_InitCrcValuesForUart+0x424>)
 8012ed0:	f7f4 f984 	bl	80071dc <HAL_CRC_Calculate>
 8012ed4:	4603      	mov	r3, r0
 8012ed6:	4a17      	ldr	r2, [pc, #92]	; (8012f34 <Crc_InitCrcValuesForUart+0x434>)
 8012ed8:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_NORECIRCULATION;
 8012eda:	2342      	movs	r3, #66	; 0x42
 8012edc:	607b      	str	r3, [r7, #4]
	Crc_Hvac_NoRecirculation = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012ede:	1d3b      	adds	r3, r7, #4
 8012ee0:	2201      	movs	r2, #1
 8012ee2:	4619      	mov	r1, r3
 8012ee4:	480f      	ldr	r0, [pc, #60]	; (8012f24 <Crc_InitCrcValuesForUart+0x424>)
 8012ee6:	f7f4 f979 	bl	80071dc <HAL_CRC_Calculate>
 8012eea:	4603      	mov	r3, r0
 8012eec:	4a12      	ldr	r2, [pc, #72]	; (8012f38 <Crc_InitCrcValuesForUart+0x438>)
 8012eee:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_AUTOMATICMODE_ON;
 8012ef0:	2344      	movs	r3, #68	; 0x44
 8012ef2:	607b      	str	r3, [r7, #4]
	Crc_Hvac_AutomaticMode_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012ef4:	1d3b      	adds	r3, r7, #4
 8012ef6:	2201      	movs	r2, #1
 8012ef8:	4619      	mov	r1, r3
 8012efa:	480a      	ldr	r0, [pc, #40]	; (8012f24 <Crc_InitCrcValuesForUart+0x424>)
 8012efc:	f7f4 f96e 	bl	80071dc <HAL_CRC_Calculate>
 8012f00:	4603      	mov	r3, r0
 8012f02:	4a0e      	ldr	r2, [pc, #56]	; (8012f3c <Crc_InitCrcValuesForUart+0x43c>)
 8012f04:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_AUTOMATICMODE_OFF;
 8012f06:	2345      	movs	r3, #69	; 0x45
 8012f08:	607b      	str	r3, [r7, #4]
	Crc_Hvac_AutomaticMode_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012f0a:	1d3b      	adds	r3, r7, #4
 8012f0c:	2201      	movs	r2, #1
 8012f0e:	4619      	mov	r1, r3
 8012f10:	4804      	ldr	r0, [pc, #16]	; (8012f24 <Crc_InitCrcValuesForUart+0x424>)
 8012f12:	f7f4 f963 	bl	80071dc <HAL_CRC_Calculate>
 8012f16:	4603      	mov	r3, r0
 8012f18:	4a09      	ldr	r2, [pc, #36]	; (8012f40 <Crc_InitCrcValuesForUart+0x440>)
 8012f1a:	6013      	str	r3, [r2, #0]
}
 8012f1c:	bf00      	nop
 8012f1e:	3708      	adds	r7, #8
 8012f20:	46bd      	mov	sp, r7
 8012f22:	bd80      	pop	{r7, pc}
 8012f24:	200002d4 	.word	0x200002d4
 8012f28:	20009400 	.word	0x20009400
 8012f2c:	20009404 	.word	0x20009404
 8012f30:	20009408 	.word	0x20009408
 8012f34:	2000940c 	.word	0x2000940c
 8012f38:	20009410 	.word	0x20009410
 8012f3c:	20009414 	.word	0x20009414
 8012f40:	20009418 	.word	0x20009418

08012f44 <HAL_CRC_ErrorCallback>:
/***********************************************************************************
* Function: HAL_CRC_ErrorCallback												   *
* Description: Called in case of error. 								 		   *
************************************************************************************/
VOID HAL_CRC_ErrorCallback(CRC_HandleTypeDef *hcrc)
{
 8012f44:	b580      	push	{r7, lr}
 8012f46:	b082      	sub	sp, #8
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	6078      	str	r0, [r7, #4]
	/* Perform re-initialization. */
	Crc_DeInit();
 8012f4c:	f000 f81e 	bl	8012f8c <Crc_DeInit>
	Crc_Init();
 8012f50:	f000 f804 	bl	8012f5c <Crc_Init>
}
 8012f54:	bf00      	nop
 8012f56:	3708      	adds	r7, #8
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	bd80      	pop	{r7, pc}

08012f5c <Crc_Init>:
/***********************************************************************************
* Function: Crc_Init													   		   *
* Description: Initialize the peripheral.								 		   *
************************************************************************************/
StdReturnType Crc_Init()
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	af00      	add	r7, sp, #0
	/* Initialize the CRC.
	 * Call for the error callback in case of faulty initialization. */
	hcrc.Instance = CRC;
 8012f60:	4b08      	ldr	r3, [pc, #32]	; (8012f84 <Crc_Init+0x28>)
 8012f62:	4a09      	ldr	r2, [pc, #36]	; (8012f88 <Crc_Init+0x2c>)
 8012f64:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8012f66:	4807      	ldr	r0, [pc, #28]	; (8012f84 <Crc_Init+0x28>)
 8012f68:	f7f4 f8ec 	bl	8007144 <HAL_CRC_Init>
 8012f6c:	4603      	mov	r3, r0
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d002      	beq.n	8012f78 <Crc_Init+0x1c>
	{
		HAL_CRC_ErrorCallback(&hcrc);
 8012f72:	4804      	ldr	r0, [pc, #16]	; (8012f84 <Crc_Init+0x28>)
 8012f74:	f7ff ffe6 	bl	8012f44 <HAL_CRC_ErrorCallback>
	else
	{
		/* do nothing */
	}
	/* Initialize the default CRC UART data received values. */
	Crc_InitCrcValuesForUart();
 8012f78:	f7ff fdc2 	bl	8012b00 <Crc_InitCrcValuesForUart>
	return E_OK;
 8012f7c:	2300      	movs	r3, #0
}
 8012f7e:	4618      	mov	r0, r3
 8012f80:	bd80      	pop	{r7, pc}
 8012f82:	bf00      	nop
 8012f84:	200002d4 	.word	0x200002d4
 8012f88:	40023000 	.word	0x40023000

08012f8c <Crc_DeInit>:
/***********************************************************************************
* Function: Crc_DeInit													   		   *
* Description: De-initialize the peripheral.		 		   					   *
************************************************************************************/
StdReturnType Crc_DeInit()
{
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	af00      	add	r7, sp, #0
	/* De-initialize the CRC. */
	HAL_CRC_DeInit(&hcrc);
 8012f90:	4802      	ldr	r0, [pc, #8]	; (8012f9c <Crc_DeInit+0x10>)
 8012f92:	f7f4 f8f3 	bl	800717c <HAL_CRC_DeInit>
	return E_OK;
 8012f96:	2300      	movs	r3, #0
}
 8012f98:	4618      	mov	r0, r3
 8012f9a:	bd80      	pop	{r7, pc}
 8012f9c:	200002d4 	.word	0x200002d4

08012fa0 <Crc_MainFunction>:
/***********************************************************************************
* Function: Crc_MainFunction													   *
* Description: Peripheral main function.		 		   						   *
************************************************************************************/
VOID Crc_MainFunction()
{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b082      	sub	sp, #8
 8012fa4:	af00      	add	r7, sp, #0
	/* Get the error status in the local variable. */
	uint32 returnValue = HAL_CRC_GetState(&hcrc);
 8012fa6:	4825      	ldr	r0, [pc, #148]	; (801303c <Crc_MainFunction+0x9c>)
 8012fa8:	f7f4 f94b 	bl	8007242 <HAL_CRC_GetState>
 8012fac:	4603      	mov	r3, r0
 8012fae:	607b      	str	r3, [r7, #4]
	/* Process module state. */
	switch(Crc_BswState)
 8012fb0:	4b23      	ldr	r3, [pc, #140]	; (8013040 <Crc_MainFunction+0xa0>)
 8012fb2:	781b      	ldrb	r3, [r3, #0]
 8012fb4:	2b03      	cmp	r3, #3
 8012fb6:	d81a      	bhi.n	8012fee <Crc_MainFunction+0x4e>
 8012fb8:	a201      	add	r2, pc, #4	; (adr r2, 8012fc0 <Crc_MainFunction+0x20>)
 8012fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fbe:	bf00      	nop
 8012fc0:	08012fd1 	.word	0x08012fd1
 8012fc4:	08012fef 	.word	0x08012fef
 8012fc8:	08012fe3 	.word	0x08012fe3
 8012fcc:	08012fdd 	.word	0x08012fdd
	{
		case CRC_INIT_STATE:
			Crc_Init();
 8012fd0:	f7ff ffc4 	bl	8012f5c <Crc_Init>
			Crc_BswState = CRC_INITCRCVALUES_STATE;
 8012fd4:	4b1a      	ldr	r3, [pc, #104]	; (8013040 <Crc_MainFunction+0xa0>)
 8012fd6:	2202      	movs	r2, #2
 8012fd8:	701a      	strb	r2, [r3, #0]
			break;
 8012fda:	e009      	b.n	8012ff0 <Crc_MainFunction+0x50>
		case CRC_DEINIT_STATE:
			Crc_DeInit();
 8012fdc:	f7ff ffd6 	bl	8012f8c <Crc_DeInit>
			break;
 8012fe0:	e006      	b.n	8012ff0 <Crc_MainFunction+0x50>
		case CRC_VERIFYUARTDATA_STATE:
			break;
		case CRC_INITCRCVALUES_STATE:
			Crc_InitCrcValuesForUart();
 8012fe2:	f7ff fd8d 	bl	8012b00 <Crc_InitCrcValuesForUart>
			Crc_BswState = CRC_VERIFYUARTDATA_STATE;
 8012fe6:	4b16      	ldr	r3, [pc, #88]	; (8013040 <Crc_MainFunction+0xa0>)
 8012fe8:	2201      	movs	r2, #1
 8012fea:	701a      	strb	r2, [r3, #0]
			break;
 8012fec:	e000      	b.n	8012ff0 <Crc_MainFunction+0x50>
		default:
			break;
 8012fee:	bf00      	nop
	}
	/* Process peripheral state. */
	switch(returnValue)
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	2b04      	cmp	r3, #4
 8012ff4:	d81c      	bhi.n	8013030 <Crc_MainFunction+0x90>
 8012ff6:	a201      	add	r2, pc, #4	; (adr r2, 8012ffc <Crc_MainFunction+0x5c>)
 8012ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ffc:	08013011 	.word	0x08013011
 8013000:	08013019 	.word	0x08013019
 8013004:	08013031 	.word	0x08013031
 8013008:	08013021 	.word	0x08013021
 801300c:	08013029 	.word	0x08013029
	{
		case HAL_CRC_STATE_RESET:
			Crc_BswState = CRC_INIT_STATE;
 8013010:	4b0b      	ldr	r3, [pc, #44]	; (8013040 <Crc_MainFunction+0xa0>)
 8013012:	2200      	movs	r2, #0
 8013014:	701a      	strb	r2, [r3, #0]
			break;
 8013016:	e00c      	b.n	8013032 <Crc_MainFunction+0x92>
		case HAL_CRC_STATE_READY:
			Crc_BswState = CRC_VERIFYUARTDATA_STATE;
 8013018:	4b09      	ldr	r3, [pc, #36]	; (8013040 <Crc_MainFunction+0xa0>)
 801301a:	2201      	movs	r2, #1
 801301c:	701a      	strb	r2, [r3, #0]
			break;
 801301e:	e008      	b.n	8013032 <Crc_MainFunction+0x92>
		case HAL_CRC_STATE_BUSY:
			break;
		case HAL_CRC_STATE_TIMEOUT:
			HAL_CRC_ErrorCallback(&hcrc);
 8013020:	4806      	ldr	r0, [pc, #24]	; (801303c <Crc_MainFunction+0x9c>)
 8013022:	f7ff ff8f 	bl	8012f44 <HAL_CRC_ErrorCallback>
			break;
 8013026:	e004      	b.n	8013032 <Crc_MainFunction+0x92>
		case HAL_CRC_STATE_ERROR:
			HAL_CRC_ErrorCallback(&hcrc);
 8013028:	4804      	ldr	r0, [pc, #16]	; (801303c <Crc_MainFunction+0x9c>)
 801302a:	f7ff ff8b 	bl	8012f44 <HAL_CRC_ErrorCallback>
			break;
 801302e:	e000      	b.n	8013032 <Crc_MainFunction+0x92>
		default:
			break;
 8013030:	bf00      	nop
	}
}
 8013032:	bf00      	nop
 8013034:	3708      	adds	r7, #8
 8013036:	46bd      	mov	sp, r7
 8013038:	bd80      	pop	{r7, pc}
 801303a:	bf00      	nop
 801303c:	200002d4 	.word	0x200002d4
 8013040:	20009374 	.word	0x20009374

08013044 <EcuM_CheckForWakeupEvent>:
/***********************************************************************************
* Function: EcuM_CheckForWakeupEvent									   		   *
* Description: Checks for the wake up event and sends it forward for processing.   *
************************************************************************************/
VOID EcuM_CheckForWakeupEvent()
{
 8013044:	b580      	push	{r7, lr}
 8013046:	b082      	sub	sp, #8
 8013048:	af00      	add	r7, sp, #0
	/* Check if power-on reset wake-up event occurred. */
	if((RCC->CSR & RCC_CSR_PORRSTF) != 0)
 801304a:	4b43      	ldr	r3, [pc, #268]	; (8013158 <EcuM_CheckForWakeupEvent+0x114>)
 801304c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801304e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013052:	2b00      	cmp	r3, #0
 8013054:	d019      	beq.n	801308a <EcuM_CheckForWakeupEvent+0x46>
	{
		for(uint16 idx = STD_LOW; idx < 512; idx++)
 8013056:	2300      	movs	r3, #0
 8013058:	80fb      	strh	r3, [r7, #6]
 801305a:	e008      	b.n	801306e <EcuM_CheckForWakeupEvent+0x2a>
		{
			I2cExtEeprom_PageErase(idx);
 801305c:	88fb      	ldrh	r3, [r7, #6]
 801305e:	4618      	mov	r0, r3
 8013060:	f7f0 fcaa 	bl	80039b8 <I2cExtEeprom_PageErase>
			Rte_Runnable_Wdg_MainFunction();
 8013064:	f7ff f862 	bl	801212c <Rte_Runnable_Wdg_MainFunction>
		for(uint16 idx = STD_LOW; idx < 512; idx++)
 8013068:	88fb      	ldrh	r3, [r7, #6]
 801306a:	3301      	adds	r3, #1
 801306c:	80fb      	strh	r3, [r7, #6]
 801306e:	88fb      	ldrh	r3, [r7, #6]
 8013070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013074:	d3f2      	bcc.n	801305c <EcuM_CheckForWakeupEvent+0x18>
		}
		/* Set the wake-up event. */
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_POR);
 8013076:	2000      	movs	r0, #0
 8013078:	f000 f870 	bl	801315c <EcuM_SetWakeupSource>
		/* Reset the flag. */
		RCC->CSR |= RCC_CSR_PORRSTF;
 801307c:	4b36      	ldr	r3, [pc, #216]	; (8013158 <EcuM_CheckForWakeupEvent+0x114>)
 801307e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013080:	4a35      	ldr	r2, [pc, #212]	; (8013158 <EcuM_CheckForWakeupEvent+0x114>)
 8013082:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013086:	6753      	str	r3, [r2, #116]	; 0x74
 8013088:	e05c      	b.n	8013144 <EcuM_CheckForWakeupEvent+0x100>
	}/* Check if brown-out reset wake-up event occurred.*/
	else if((RCC->CSR & RCC_CSR_BORRSTF) != 0)
 801308a:	4b33      	ldr	r3, [pc, #204]	; (8013158 <EcuM_CheckForWakeupEvent+0x114>)
 801308c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801308e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013092:	2b00      	cmp	r3, #0
 8013094:	d019      	beq.n	80130ca <EcuM_CheckForWakeupEvent+0x86>
	{
		for(uint16 idx = STD_LOW; idx < 512; idx++)
 8013096:	2300      	movs	r3, #0
 8013098:	80bb      	strh	r3, [r7, #4]
 801309a:	e008      	b.n	80130ae <EcuM_CheckForWakeupEvent+0x6a>
		{
			Rte_Call_I2cExtEeprom_P_I2cExtEepromPort_I2cExtEeprom_PageErase(idx);
 801309c:	88bb      	ldrh	r3, [r7, #4]
 801309e:	4618      	mov	r0, r3
 80130a0:	f7f0 fc8a 	bl	80039b8 <I2cExtEeprom_PageErase>
			Rte_Runnable_Wdg_MainFunction();
 80130a4:	f7ff f842 	bl	801212c <Rte_Runnable_Wdg_MainFunction>
		for(uint16 idx = STD_LOW; idx < 512; idx++)
 80130a8:	88bb      	ldrh	r3, [r7, #4]
 80130aa:	3301      	adds	r3, #1
 80130ac:	80bb      	strh	r3, [r7, #4]
 80130ae:	88bb      	ldrh	r3, [r7, #4]
 80130b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80130b4:	d3f2      	bcc.n	801309c <EcuM_CheckForWakeupEvent+0x58>
		}
		/* Set the wake-up event. */
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_BOR);
 80130b6:	2001      	movs	r0, #1
 80130b8:	f000 f850 	bl	801315c <EcuM_SetWakeupSource>
		/* Reset the flag. */
		RCC->CSR |= RCC_CSR_BORRSTF;
 80130bc:	4b26      	ldr	r3, [pc, #152]	; (8013158 <EcuM_CheckForWakeupEvent+0x114>)
 80130be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80130c0:	4a25      	ldr	r2, [pc, #148]	; (8013158 <EcuM_CheckForWakeupEvent+0x114>)
 80130c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80130c6:	6753      	str	r3, [r2, #116]	; 0x74
 80130c8:	e03c      	b.n	8013144 <EcuM_CheckForWakeupEvent+0x100>
	}/* Check if a software reset wake-up event occurred. */
	else if((RCC->CSR & RCC_CSR_SFTRSTF) != 0)
 80130ca:	4b23      	ldr	r3, [pc, #140]	; (8013158 <EcuM_CheckForWakeupEvent+0x114>)
 80130cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80130ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d009      	beq.n	80130ea <EcuM_CheckForWakeupEvent+0xa6>
	{
		/* Set the wake-up event. */
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_SOFTWARE_RESET);
 80130d6:	2002      	movs	r0, #2
 80130d8:	f000 f840 	bl	801315c <EcuM_SetWakeupSource>
		/* Reset the flag. */
		RCC->CSR |= RCC_CSR_SFTRSTF;
 80130dc:	4b1e      	ldr	r3, [pc, #120]	; (8013158 <EcuM_CheckForWakeupEvent+0x114>)
 80130de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80130e0:	4a1d      	ldr	r2, [pc, #116]	; (8013158 <EcuM_CheckForWakeupEvent+0x114>)
 80130e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80130e6:	6753      	str	r3, [r2, #116]	; 0x74
 80130e8:	e02c      	b.n	8013144 <EcuM_CheckForWakeupEvent+0x100>
	}/* Check if a windowed watchdog reset wake-up event occurred. */
	else if((RCC->CSR & RCC_CSR_IWDGRSTF) != 0)
 80130ea:	4b1b      	ldr	r3, [pc, #108]	; (8013158 <EcuM_CheckForWakeupEvent+0x114>)
 80130ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80130ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d009      	beq.n	801310a <EcuM_CheckForWakeupEvent+0xc6>
	{
		/* Set the wake-up event. */
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET);
 80130f6:	2003      	movs	r0, #3
 80130f8:	f000 f830 	bl	801315c <EcuM_SetWakeupSource>
		/* Reset the flag. */
		RCC->CSR |= RCC_CSR_IWDGRSTF;
 80130fc:	4b16      	ldr	r3, [pc, #88]	; (8013158 <EcuM_CheckForWakeupEvent+0x114>)
 80130fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013100:	4a15      	ldr	r2, [pc, #84]	; (8013158 <EcuM_CheckForWakeupEvent+0x114>)
 8013102:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013106:	6753      	str	r3, [r2, #116]	; 0x74
 8013108:	e01c      	b.n	8013144 <EcuM_CheckForWakeupEvent+0x100>
	}/* Check if a low power reset wake-up event occurred. */
	else if((RCC->CSR & RCC_CSR_LPWRRSTF) != 0)
 801310a:	4b13      	ldr	r3, [pc, #76]	; (8013158 <EcuM_CheckForWakeupEvent+0x114>)
 801310c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801310e:	2b00      	cmp	r3, #0
 8013110:	da18      	bge.n	8013144 <EcuM_CheckForWakeupEvent+0x100>
	{
		for(uint16 idx = STD_LOW; idx < 512; idx++)
 8013112:	2300      	movs	r3, #0
 8013114:	807b      	strh	r3, [r7, #2]
 8013116:	e008      	b.n	801312a <EcuM_CheckForWakeupEvent+0xe6>
		{
			Rte_Call_I2cExtEeprom_P_I2cExtEepromPort_I2cExtEeprom_PageErase(idx);
 8013118:	887b      	ldrh	r3, [r7, #2]
 801311a:	4618      	mov	r0, r3
 801311c:	f7f0 fc4c 	bl	80039b8 <I2cExtEeprom_PageErase>
			Rte_Runnable_Wdg_MainFunction();
 8013120:	f7ff f804 	bl	801212c <Rte_Runnable_Wdg_MainFunction>
		for(uint16 idx = STD_LOW; idx < 512; idx++)
 8013124:	887b      	ldrh	r3, [r7, #2]
 8013126:	3301      	adds	r3, #1
 8013128:	807b      	strh	r3, [r7, #2]
 801312a:	887b      	ldrh	r3, [r7, #2]
 801312c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013130:	d3f2      	bcc.n	8013118 <EcuM_CheckForWakeupEvent+0xd4>
		}
		/* Set the wake-up event. */
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_LOWPOWER_RESET);
 8013132:	2004      	movs	r0, #4
 8013134:	f000 f812 	bl	801315c <EcuM_SetWakeupSource>
		/* Reset the flag. */
		RCC->CSR |= RCC_CSR_LPWRRSTF;
 8013138:	4b07      	ldr	r3, [pc, #28]	; (8013158 <EcuM_CheckForWakeupEvent+0x114>)
 801313a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801313c:	4a06      	ldr	r2, [pc, #24]	; (8013158 <EcuM_CheckForWakeupEvent+0x114>)
 801313e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013142:	6753      	str	r3, [r2, #116]	; 0x74
	}/* Check if a button reset wake-up event occurred. */
	else
	{
		/* do nothing */
	}
	RCC->CSR |= RCC_CSR_RMVF;
 8013144:	4b04      	ldr	r3, [pc, #16]	; (8013158 <EcuM_CheckForWakeupEvent+0x114>)
 8013146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013148:	4a03      	ldr	r2, [pc, #12]	; (8013158 <EcuM_CheckForWakeupEvent+0x114>)
 801314a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801314e:	6753      	str	r3, [r2, #116]	; 0x74
}
 8013150:	bf00      	nop
 8013152:	3708      	adds	r7, #8
 8013154:	46bd      	mov	sp, r7
 8013156:	bd80      	pop	{r7, pc}
 8013158:	40023800 	.word	0x40023800

0801315c <EcuM_SetWakeupSource>:
/***********************************************************************************
* Function: EcuM_SetWakeupSource									   		   	   *
* Description: Sets the wake up source received.			 		   			   *
************************************************************************************/
VOID EcuM_SetWakeupSource(uint32 wakeupSource)
{
 801315c:	b480      	push	{r7}
 801315e:	b083      	sub	sp, #12
 8013160:	af00      	add	r7, sp, #0
 8013162:	6078      	str	r0, [r7, #4]
	/* If wake-up source is valid. */
	if(wakeupSource != NULL_PTR)
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d003      	beq.n	8013172 <EcuM_SetWakeupSource+0x16>
	{
		/* Store the wake-up event. */
		EcuM_GlobalState = wakeupSource;
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	b2da      	uxtb	r2, r3
 801316e:	4b04      	ldr	r3, [pc, #16]	; (8013180 <EcuM_SetWakeupSource+0x24>)
 8013170:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8013172:	bf00      	nop
 8013174:	370c      	adds	r7, #12
 8013176:	46bd      	mov	sp, r7
 8013178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801317c:	4770      	bx	lr
 801317e:	bf00      	nop
 8013180:	2000941d 	.word	0x2000941d

08013184 <EcuM_ProcessWakeupEvent>:
/***********************************************************************************
* Function: EcuM_ProcessWakeupEvent									   		       *
* Description: Sends forward the wake up event.							 		   *
************************************************************************************/
VOID EcuM_ProcessWakeupEvent()
{
 8013184:	b580      	push	{r7, lr}
 8013186:	b082      	sub	sp, #8
 8013188:	af00      	add	r7, sp, #0
	/* Store the wake-up event into local variable. */
	uint8 localWakeupEvent = EcuM_GlobalState;
 801318a:	4b1d      	ldr	r3, [pc, #116]	; (8013200 <EcuM_ProcessWakeupEvent+0x7c>)
 801318c:	781b      	ldrb	r3, [r3, #0]
 801318e:	71fb      	strb	r3, [r7, #7]
	/* Set the system fault for the respective wake-up event. */
	switch(localWakeupEvent)
 8013190:	79fb      	ldrb	r3, [r7, #7]
 8013192:	2b04      	cmp	r3, #4
 8013194:	d82f      	bhi.n	80131f6 <EcuM_ProcessWakeupEvent+0x72>
 8013196:	a201      	add	r2, pc, #4	; (adr r2, 801319c <EcuM_ProcessWakeupEvent+0x18>)
 8013198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801319c:	080131b1 	.word	0x080131b1
 80131a0:	080131bf 	.word	0x080131bf
 80131a4:	080131cd 	.word	0x080131cd
 80131a8:	080131db 	.word	0x080131db
 80131ac:	080131e9 	.word	0x080131e9
	{
		case ECUM_WAKEUPSOURCE_POR:
			EcuM_GlobalState = 255;
 80131b0:	4b13      	ldr	r3, [pc, #76]	; (8013200 <EcuM_ProcessWakeupEvent+0x7c>)
 80131b2:	22ff      	movs	r2, #255	; 0xff
 80131b4:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_POR);
 80131b6:	2000      	movs	r0, #0
 80131b8:	f000 f9b4 	bl	8013524 <SystemManager_SetFault>
			break;
 80131bc:	e01c      	b.n	80131f8 <EcuM_ProcessWakeupEvent+0x74>
		case ECUM_WAKEUPSOURCE_BOR:
			EcuM_GlobalState = 255;
 80131be:	4b10      	ldr	r3, [pc, #64]	; (8013200 <EcuM_ProcessWakeupEvent+0x7c>)
 80131c0:	22ff      	movs	r2, #255	; 0xff
 80131c2:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_BOR);
 80131c4:	2001      	movs	r0, #1
 80131c6:	f000 f9ad 	bl	8013524 <SystemManager_SetFault>
			break;
 80131ca:	e015      	b.n	80131f8 <EcuM_ProcessWakeupEvent+0x74>
		case ECUM_WAKEUPSOURCE_SOFTWARE_RESET:
			EcuM_GlobalState = 255;
 80131cc:	4b0c      	ldr	r3, [pc, #48]	; (8013200 <EcuM_ProcessWakeupEvent+0x7c>)
 80131ce:	22ff      	movs	r2, #255	; 0xff
 80131d0:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_SOFTWARE_RESET);
 80131d2:	2002      	movs	r0, #2
 80131d4:	f000 f9a6 	bl	8013524 <SystemManager_SetFault>
			break;
 80131d8:	e00e      	b.n	80131f8 <EcuM_ProcessWakeupEvent+0x74>
		case ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET:
			EcuM_GlobalState = 255;
 80131da:	4b09      	ldr	r3, [pc, #36]	; (8013200 <EcuM_ProcessWakeupEvent+0x7c>)
 80131dc:	22ff      	movs	r2, #255	; 0xff
 80131de:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET);
 80131e0:	2003      	movs	r0, #3
 80131e2:	f000 f99f 	bl	8013524 <SystemManager_SetFault>
			break;
 80131e6:	e007      	b.n	80131f8 <EcuM_ProcessWakeupEvent+0x74>
		case ECUM_WAKEUPSOURCE_LOWPOWER_RESET:
			EcuM_GlobalState = 255;
 80131e8:	4b05      	ldr	r3, [pc, #20]	; (8013200 <EcuM_ProcessWakeupEvent+0x7c>)
 80131ea:	22ff      	movs	r2, #255	; 0xff
 80131ec:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_LOWPOWER_RESET);
 80131ee:	2004      	movs	r0, #4
 80131f0:	f000 f998 	bl	8013524 <SystemManager_SetFault>
			break;
 80131f4:	e000      	b.n	80131f8 <EcuM_ProcessWakeupEvent+0x74>
		default:
			break;
 80131f6:	bf00      	nop
	}
}
 80131f8:	bf00      	nop
 80131fa:	3708      	adds	r7, #8
 80131fc:	46bd      	mov	sp, r7
 80131fe:	bd80      	pop	{r7, pc}
 8013200:	2000941d 	.word	0x2000941d

08013204 <EcuM_DriverInit>:
/***********************************************************************************
* Function: EcuM_DriverInit									   		               *
* Description: Initialize the drivers.			 		   						   *
************************************************************************************/
StdReturnType EcuM_DriverInit()
{
 8013204:	b580      	push	{r7, lr}
 8013206:	b084      	sub	sp, #16
 8013208:	af00      	add	r7, sp, #0
	Port_Init();
 801320a:	f7fa fddb 	bl	800ddc4 <Port_Init>
	MX_DMA_Init();
 801320e:	f7f1 fb37 	bl	8004880 <MX_DMA_Init>
	Spi_Init();
 8013212:	f7fa ff4e 	bl	800e0b2 <Spi_Init>
	CanOverSpi_Init();
 8013216:	f7fa fddc 	bl	800ddd2 <CanOverSpi_Init>
	Can_Init();
 801321a:	f7f0 fad7 	bl	80037cc <Can_Init>
	Tim_Init(TIMER_TWO);
 801321e:	2002      	movs	r0, #2
 8013220:	f7fb f880 	bl	800e324 <Tim_Init>
	Tim_Init(TIMER_THREE);
 8013224:	2003      	movs	r0, #3
 8013226:	f7fb f87d 	bl	800e324 <Tim_Init>
	Tim_Init(TIMER_FOUR);
 801322a:	2004      	movs	r0, #4
 801322c:	f7fb f87a 	bl	800e324 <Tim_Init>
	Tim_Init(TIMER_FIVE);
 8013230:	2005      	movs	r0, #5
 8013232:	f7fb f877 	bl	800e324 <Tim_Init>
	I2c_Init(I2C_CHANNEL_ONE);
 8013236:	2001      	movs	r0, #1
 8013238:	f7f0 fd54 	bl	8003ce4 <I2c_Init>
	I2c_Init(I2C_CHANNEL_THREE);
 801323c:	2003      	movs	r0, #3
 801323e:	f7f0 fd51 	bl	8003ce4 <I2c_Init>
	Adc_Init();
 8013242:	f7fa fc7f 	bl	800db44 <Adc_Init>
	Crc_Init();
 8013246:	f7ff fe89 	bl	8012f5c <Crc_Init>
	Uart_Init();
 801324a:	f7f1 f86d 	bl	8004328 <Uart_Init>
	Watchdog_Init();
 801324e:	f000 faaf 	bl	80137b0 <Watchdog_Init>
	MX_NVIC_Init();
 8013252:	f000 f997 	bl	8013584 <MX_NVIC_Init>
	TIM2->CCR1 = 0;
 8013256:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801325a:	2200      	movs	r2, #0
 801325c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR2 = 0;
 801325e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013262:	2200      	movs	r2, #0
 8013264:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR3 = 0;
 8013266:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801326a:	2200      	movs	r2, #0
 801326c:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR1 = 0;
 801326e:	4b25      	ldr	r3, [pc, #148]	; (8013304 <EcuM_DriverInit+0x100>)
 8013270:	2200      	movs	r2, #0
 8013272:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = 0;
 8013274:	4b23      	ldr	r3, [pc, #140]	; (8013304 <EcuM_DriverInit+0x100>)
 8013276:	2200      	movs	r2, #0
 8013278:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = 0;
 801327a:	4b22      	ldr	r3, [pc, #136]	; (8013304 <EcuM_DriverInit+0x100>)
 801327c:	2200      	movs	r2, #0
 801327e:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = 0;
 8013280:	4b20      	ldr	r3, [pc, #128]	; (8013304 <EcuM_DriverInit+0x100>)
 8013282:	2200      	movs	r2, #0
 8013284:	641a      	str	r2, [r3, #64]	; 0x40
	MPU_Region_InitTypeDef MPU_InitStruct;
	HAL_MPU_Disable();
 8013286:	f7f3 fee1 	bl	800704c <HAL_MPU_Disable>
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 801328a:	2301      	movs	r3, #1
 801328c:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = FLASH_BASE;
 801328e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013292:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8013294:	2311      	movs	r3, #17
 8013296:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO;
 8013298:	2305      	movs	r3, #5
 801329a:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 801329c:	2300      	movs	r3, #0
 801329e:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80132a0:	2301      	movs	r3, #1
 80132a2:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80132a4:	2301      	movs	r3, #1
 80132a6:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80132a8:	2300      	movs	r3, #0
 80132aa:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80132ac:	2300      	movs	r3, #0
 80132ae:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 80132b0:	2300      	movs	r3, #0
 80132b2:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80132b4:	2300      	movs	r3, #0
 80132b6:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80132b8:	2301      	movs	r3, #1
 80132ba:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0x20000000;
 80132bc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80132c0:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 80132c2:	230d      	movs	r3, #13
 80132c4:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80132c6:	2303      	movs	r3, #3
 80132c8:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80132ca:	2301      	movs	r3, #1
 80132cc:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80132ce:	2301      	movs	r3, #1
 80132d0:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80132d2:	2301      	movs	r3, #1
 80132d4:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80132d6:	2301      	movs	r3, #1
 80132d8:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80132da:	2300      	movs	r3, #0
 80132dc:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 80132de:	2300      	movs	r3, #0
 80132e0:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80132e2:	2300      	movs	r3, #0
 80132e4:	733b      	strb	r3, [r7, #12]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80132e6:	463b      	mov	r3, r7
 80132e8:	4618      	mov	r0, r3
 80132ea:	f7f3 fee7 	bl	80070bc <HAL_MPU_ConfigRegion>
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80132ee:	2004      	movs	r0, #4
 80132f0:	f7f3 fec4 	bl	800707c <HAL_MPU_Enable>
	EcuM_BswState = ECUM_CHECKFORWAKEUP_STATE;
 80132f4:	4b04      	ldr	r3, [pc, #16]	; (8013308 <EcuM_DriverInit+0x104>)
 80132f6:	2201      	movs	r2, #1
 80132f8:	701a      	strb	r2, [r3, #0]
	return E_OK;
 80132fa:	2300      	movs	r3, #0
}
 80132fc:	4618      	mov	r0, r3
 80132fe:	3710      	adds	r7, #16
 8013300:	46bd      	mov	sp, r7
 8013302:	bd80      	pop	{r7, pc}
 8013304:	40000400 	.word	0x40000400
 8013308:	2000941c 	.word	0x2000941c

0801330c <EcuM_DriverDeInit>:
/***********************************************************************************
* Function: EcuM_DriverDeInit									   		           *
* Description: De-initialize the drivers.			 		                       *
************************************************************************************/
StdReturnType EcuM_DriverDeInit()
{
 801330c:	b580      	push	{r7, lr}
 801330e:	af00      	add	r7, sp, #0
	Adc_DeInit();
 8013310:	f7fa fc0e 	bl	800db30 <Adc_DeInit>
	Tim_DeInit(TIMER_TWO);
 8013314:	2002      	movs	r0, #2
 8013316:	f7fb fa23 	bl	800e760 <Tim_DeInit>
	Tim_DeInit(TIMER_THREE);
 801331a:	2003      	movs	r0, #3
 801331c:	f7fb fa20 	bl	800e760 <Tim_DeInit>
	Tim_DeInit(TIMER_FOUR);
 8013320:	2004      	movs	r0, #4
 8013322:	f7fb fa1d 	bl	800e760 <Tim_DeInit>
	Tim_DeInit(TIMER_FIVE);
 8013326:	2005      	movs	r0, #5
 8013328:	f7fb fa1a 	bl	800e760 <Tim_DeInit>
	Uart_DeInit();
 801332c:	f7f1 f828 	bl	8004380 <Uart_DeInit>
	Crc_DeInit();
 8013330:	f7ff fe2c 	bl	8012f8c <Crc_DeInit>
	I2c_DeInit(I2C_CHANNEL_ONE);
 8013334:	2001      	movs	r0, #1
 8013336:	f7f0 fd3d 	bl	8003db4 <I2c_DeInit>
	I2c_DeInit(I2C_CHANNEL_THREE);
 801333a:	2003      	movs	r0, #3
 801333c:	f7f0 fd3a 	bl	8003db4 <I2c_DeInit>
#if(CAN_SPI_COMMUNICATION_ENABLE == STD_ON)
	Spi_DeInit();
	Can_DeInit();
#endif
	SystemManager_DeInit();
 8013340:	f000 f8ea 	bl	8013518 <SystemManager_DeInit>
	return E_OK;
 8013344:	2300      	movs	r3, #0
}
 8013346:	4618      	mov	r0, r3
 8013348:	bd80      	pop	{r7, pc}
	...

0801334c <EcuM_MainFunction>:
/***********************************************************************************
* Function: EcuM_MainFunction									   		           *
* Description: Electronic control unit manager main function.			 		   *
************************************************************************************/
VOID EcuM_MainFunction()
{
 801334c:	b580      	push	{r7, lr}
 801334e:	af00      	add	r7, sp, #0
	switch(EcuM_BswState)
 8013350:	4b12      	ldr	r3, [pc, #72]	; (801339c <EcuM_MainFunction+0x50>)
 8013352:	781b      	ldrb	r3, [r3, #0]
 8013354:	2b03      	cmp	r3, #3
 8013356:	d81d      	bhi.n	8013394 <EcuM_MainFunction+0x48>
 8013358:	a201      	add	r2, pc, #4	; (adr r2, 8013360 <EcuM_MainFunction+0x14>)
 801335a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801335e:	bf00      	nop
 8013360:	08013371 	.word	0x08013371
 8013364:	0801337d 	.word	0x0801337d
 8013368:	08013389 	.word	0x08013389
 801336c:	08013377 	.word	0x08013377
	{
		case ECUM_INIT_STATE:
			EcuM_DriverInit();
 8013370:	f7ff ff48 	bl	8013204 <EcuM_DriverInit>
			break;
 8013374:	e00f      	b.n	8013396 <EcuM_MainFunction+0x4a>
		case ECUM_DEINIT_STATE:
			EcuM_DriverDeInit();
 8013376:	f7ff ffc9 	bl	801330c <EcuM_DriverDeInit>
			break;
 801337a:	e00c      	b.n	8013396 <EcuM_MainFunction+0x4a>
		case ECUM_CHECKFORWAKEUP_STATE:
			EcuM_CheckForWakeupEvent();
 801337c:	f7ff fe62 	bl	8013044 <EcuM_CheckForWakeupEvent>
			EcuM_BswState = ECUM_PROCESSWAKEUP_STATE;
 8013380:	4b06      	ldr	r3, [pc, #24]	; (801339c <EcuM_MainFunction+0x50>)
 8013382:	2202      	movs	r2, #2
 8013384:	701a      	strb	r2, [r3, #0]
			break;
 8013386:	e006      	b.n	8013396 <EcuM_MainFunction+0x4a>
		case ECUM_PROCESSWAKEUP_STATE:
			EcuM_ProcessWakeupEvent();
 8013388:	f7ff fefc 	bl	8013184 <EcuM_ProcessWakeupEvent>
			EcuM_BswState = ECUM_CHECKFORWAKEUP_STATE;
 801338c:	4b03      	ldr	r3, [pc, #12]	; (801339c <EcuM_MainFunction+0x50>)
 801338e:	2201      	movs	r2, #1
 8013390:	701a      	strb	r2, [r3, #0]
			break;
 8013392:	e000      	b.n	8013396 <EcuM_MainFunction+0x4a>
		default:
			break;
 8013394:	bf00      	nop
	}
}
 8013396:	bf00      	nop
 8013398:	bd80      	pop	{r7, pc}
 801339a:	bf00      	nop
 801339c:	2000941c 	.word	0x2000941c

080133a0 <SystemManager_ProcessFault>:
/***********************************************************************************
* Function: SystemManager_ProcessFault										       *
* Description: Initialize the system.  		   									   *
************************************************************************************/
VOID SystemManager_ProcessFault()
{
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b082      	sub	sp, #8
 80133a4:	af00      	add	r7, sp, #0
	for(uint8 idx = STD_LOW ; idx < 49; idx++)
 80133a6:	2300      	movs	r3, #0
 80133a8:	71fb      	strb	r3, [r7, #7]
 80133aa:	e0a2      	b.n	80134f2 <SystemManager_ProcessFault+0x152>
	{
		if(SystemManager_Fault[idx] != STD_LOW)
 80133ac:	79fb      	ldrb	r3, [r7, #7]
 80133ae:	4a55      	ldr	r2, [pc, #340]	; (8013504 <SystemManager_ProcessFault+0x164>)
 80133b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	f000 8099 	beq.w	80134ec <SystemManager_ProcessFault+0x14c>
		{
			if(idx == POWER_ON_RESET)
 80133ba:	79fb      	ldrb	r3, [r7, #7]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	f000 8095 	beq.w	80134ec <SystemManager_ProcessFault+0x14c>
			{
				/* do nothing */
			}
			else if(idx == BROWN_OUT_RESET ||
 80133c2:	79fb      	ldrb	r3, [r7, #7]
 80133c4:	2b01      	cmp	r3, #1
 80133c6:	d014      	beq.n	80133f2 <SystemManager_ProcessFault+0x52>
 80133c8:	79fb      	ldrb	r3, [r7, #7]
 80133ca:	2b04      	cmp	r3, #4
 80133cc:	d011      	beq.n	80133f2 <SystemManager_ProcessFault+0x52>
					idx == LOW_POWER_RESET ||
 80133ce:	79fb      	ldrb	r3, [r7, #7]
 80133d0:	2b06      	cmp	r3, #6
 80133d2:	d00e      	beq.n	80133f2 <SystemManager_ProcessFault+0x52>
					idx == HARDWARE_RESET ||
 80133d4:	79fb      	ldrb	r3, [r7, #7]
 80133d6:	2b07      	cmp	r3, #7
 80133d8:	d00b      	beq.n	80133f2 <SystemManager_ProcessFault+0x52>
					idx == FLASH_FAULT_RESET ||
 80133da:	79fb      	ldrb	r3, [r7, #7]
 80133dc:	2b08      	cmp	r3, #8
 80133de:	d008      	beq.n	80133f2 <SystemManager_ProcessFault+0x52>
					idx == NMI_RESET ||
 80133e0:	79fb      	ldrb	r3, [r7, #7]
 80133e2:	2b09      	cmp	r3, #9
 80133e4:	d005      	beq.n	80133f2 <SystemManager_ProcessFault+0x52>
					idx == MEMORY_FAULT_RESET ||
 80133e6:	79fb      	ldrb	r3, [r7, #7]
 80133e8:	2b0a      	cmp	r3, #10
 80133ea:	d002      	beq.n	80133f2 <SystemManager_ProcessFault+0x52>
					idx == USAGE_FAULT_RESET ||
 80133ec:	79fb      	ldrb	r3, [r7, #7]
 80133ee:	2b0b      	cmp	r3, #11
 80133f0:	d109      	bne.n	8013406 <SystemManager_ProcessFault+0x66>
					idx == BUS_FAULT_RESET)
			{
				if(SystemManager_Fault[idx] >= 2)
 80133f2:	79fb      	ldrb	r3, [r7, #7]
 80133f4:	4a43      	ldr	r2, [pc, #268]	; (8013504 <SystemManager_ProcessFault+0x164>)
 80133f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80133fa:	2b01      	cmp	r3, #1
 80133fc:	d976      	bls.n	80134ec <SystemManager_ProcessFault+0x14c>
				{
					Dem_ReceiveFault(HARDWARE_RESET_DTC_CODE);
 80133fe:	2056      	movs	r0, #86	; 0x56
 8013400:	f7f2 fd18 	bl	8005e34 <Dem_ReceiveFault>
				if(SystemManager_Fault[idx] >= 2)
 8013404:	e072      	b.n	80134ec <SystemManager_ProcessFault+0x14c>
				else
				{
					/* do nothing */
				}
			}
			else if(idx == SOFTWARE_RESET ||
 8013406:	79fb      	ldrb	r3, [r7, #7]
 8013408:	2b02      	cmp	r3, #2
 801340a:	d008      	beq.n	801341e <SystemManager_ProcessFault+0x7e>
 801340c:	79fb      	ldrb	r3, [r7, #7]
 801340e:	2b03      	cmp	r3, #3
 8013410:	d005      	beq.n	801341e <SystemManager_ProcessFault+0x7e>
					idx == WATCHDOG_RESET ||
 8013412:	79fb      	ldrb	r3, [r7, #7]
 8013414:	2b0c      	cmp	r3, #12
 8013416:	d002      	beq.n	801341e <SystemManager_ProcessFault+0x7e>
					idx == STACK_OVERFLOW_RESET ||
 8013418:	79fb      	ldrb	r3, [r7, #7]
 801341a:	2b0d      	cmp	r3, #13
 801341c:	d109      	bne.n	8013432 <SystemManager_ProcessFault+0x92>
					idx == MALLOC_FAILED_RESET)
			{
				if(SystemManager_Fault[idx] >= 2)
 801341e:	79fb      	ldrb	r3, [r7, #7]
 8013420:	4a38      	ldr	r2, [pc, #224]	; (8013504 <SystemManager_ProcessFault+0x164>)
 8013422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013426:	2b01      	cmp	r3, #1
 8013428:	d960      	bls.n	80134ec <SystemManager_ProcessFault+0x14c>
				{
					Dem_ReceiveFault(SOFTWARE_RESET_DTC_CODE);
 801342a:	2035      	movs	r0, #53	; 0x35
 801342c:	f7f2 fd02 	bl	8005e34 <Dem_ReceiveFault>
				if(SystemManager_Fault[idx] >= 2)
 8013430:	e05c      	b.n	80134ec <SystemManager_ProcessFault+0x14c>
				else
				{
					/* do nothing */
				}
			}
			else if(idx == ADC_ERROR_INTERNAL ||
 8013432:	79fb      	ldrb	r3, [r7, #7]
 8013434:	2b0e      	cmp	r3, #14
 8013436:	d050      	beq.n	80134da <SystemManager_ProcessFault+0x13a>
 8013438:	79fb      	ldrb	r3, [r7, #7]
 801343a:	2b0f      	cmp	r3, #15
 801343c:	d04d      	beq.n	80134da <SystemManager_ProcessFault+0x13a>
					idx == ADC_ERROR_OVR ||
 801343e:	79fb      	ldrb	r3, [r7, #7]
 8013440:	2b10      	cmp	r3, #16
 8013442:	d04a      	beq.n	80134da <SystemManager_ProcessFault+0x13a>
					idx == ADC_ERROR_DMA ||
 8013444:	79fb      	ldrb	r3, [r7, #7]
 8013446:	2b11      	cmp	r3, #17
 8013448:	d047      	beq.n	80134da <SystemManager_ProcessFault+0x13a>
					idx == UART_ERROR_PE ||
 801344a:	79fb      	ldrb	r3, [r7, #7]
 801344c:	2b12      	cmp	r3, #18
 801344e:	d044      	beq.n	80134da <SystemManager_ProcessFault+0x13a>
					idx == UART_ERROR_NE ||
 8013450:	79fb      	ldrb	r3, [r7, #7]
 8013452:	2b13      	cmp	r3, #19
 8013454:	d041      	beq.n	80134da <SystemManager_ProcessFault+0x13a>
					idx == UART_ERROR_FE ||
 8013456:	79fb      	ldrb	r3, [r7, #7]
 8013458:	2b14      	cmp	r3, #20
 801345a:	d03e      	beq.n	80134da <SystemManager_ProcessFault+0x13a>
					idx == UART_ERROR_ORE ||
 801345c:	79fb      	ldrb	r3, [r7, #7]
 801345e:	2b15      	cmp	r3, #21
 8013460:	d03b      	beq.n	80134da <SystemManager_ProcessFault+0x13a>
					idx == UART_ERROR_DMA ||
 8013462:	79fb      	ldrb	r3, [r7, #7]
 8013464:	2b16      	cmp	r3, #22
 8013466:	d038      	beq.n	80134da <SystemManager_ProcessFault+0x13a>
					idx == TIMER2_ERROR ||
 8013468:	79fb      	ldrb	r3, [r7, #7]
 801346a:	2b17      	cmp	r3, #23
 801346c:	d035      	beq.n	80134da <SystemManager_ProcessFault+0x13a>
					idx == TIMER3_ERROR ||
 801346e:	79fb      	ldrb	r3, [r7, #7]
 8013470:	2b18      	cmp	r3, #24
 8013472:	d032      	beq.n	80134da <SystemManager_ProcessFault+0x13a>
					idx == TIMER4_ERROR ||
 8013474:	79fb      	ldrb	r3, [r7, #7]
 8013476:	2b19      	cmp	r3, #25
 8013478:	d02f      	beq.n	80134da <SystemManager_ProcessFault+0x13a>
					idx == TIMER5_ERROR ||
 801347a:	79fb      	ldrb	r3, [r7, #7]
 801347c:	2b21      	cmp	r3, #33	; 0x21
 801347e:	d02c      	beq.n	80134da <SystemManager_ProcessFault+0x13a>
					idx == SPI_ERROR_OVR ||
					idx == SPI_ERROR_DMA ||
					idx == SPI_ERROR_FLAG ||
					idx == SPI_ERROR_ABORT ||
#endif
					idx == I2C_ERROR_BERR_ONE ||
 8013480:	79fb      	ldrb	r3, [r7, #7]
 8013482:	2b22      	cmp	r3, #34	; 0x22
 8013484:	d029      	beq.n	80134da <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_ARLO_ONE ||
 8013486:	79fb      	ldrb	r3, [r7, #7]
 8013488:	2b23      	cmp	r3, #35	; 0x23
 801348a:	d026      	beq.n	80134da <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_AF_ONE ||
 801348c:	79fb      	ldrb	r3, [r7, #7]
 801348e:	2b24      	cmp	r3, #36	; 0x24
 8013490:	d023      	beq.n	80134da <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_OVR_ONE ||
 8013492:	79fb      	ldrb	r3, [r7, #7]
 8013494:	2b25      	cmp	r3, #37	; 0x25
 8013496:	d020      	beq.n	80134da <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_DMA_ONE ||
 8013498:	79fb      	ldrb	r3, [r7, #7]
 801349a:	2b26      	cmp	r3, #38	; 0x26
 801349c:	d01d      	beq.n	80134da <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_TIMEOUT_ONE ||
 801349e:	79fb      	ldrb	r3, [r7, #7]
 80134a0:	2b27      	cmp	r3, #39	; 0x27
 80134a2:	d01a      	beq.n	80134da <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_SIZE_ONE ||
 80134a4:	79fb      	ldrb	r3, [r7, #7]
 80134a6:	2b28      	cmp	r3, #40	; 0x28
 80134a8:	d017      	beq.n	80134da <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_DMA_PARAM_ONE ||
 80134aa:	79fb      	ldrb	r3, [r7, #7]
 80134ac:	2b29      	cmp	r3, #41	; 0x29
 80134ae:	d014      	beq.n	80134da <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_BERR_THREE ||
 80134b0:	79fb      	ldrb	r3, [r7, #7]
 80134b2:	2b2a      	cmp	r3, #42	; 0x2a
 80134b4:	d011      	beq.n	80134da <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_ARLO_THREE ||
 80134b6:	79fb      	ldrb	r3, [r7, #7]
 80134b8:	2b2b      	cmp	r3, #43	; 0x2b
 80134ba:	d00e      	beq.n	80134da <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_AF_THREE ||
 80134bc:	79fb      	ldrb	r3, [r7, #7]
 80134be:	2b2c      	cmp	r3, #44	; 0x2c
 80134c0:	d00b      	beq.n	80134da <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_OVR_THREE ||
 80134c2:	79fb      	ldrb	r3, [r7, #7]
 80134c4:	2b2d      	cmp	r3, #45	; 0x2d
 80134c6:	d008      	beq.n	80134da <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_DMA_THREE ||
 80134c8:	79fb      	ldrb	r3, [r7, #7]
 80134ca:	2b2e      	cmp	r3, #46	; 0x2e
 80134cc:	d005      	beq.n	80134da <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_TIMEOUT_THREE ||
 80134ce:	79fb      	ldrb	r3, [r7, #7]
 80134d0:	2b2f      	cmp	r3, #47	; 0x2f
 80134d2:	d002      	beq.n	80134da <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_SIZE_THREE ||
 80134d4:	79fb      	ldrb	r3, [r7, #7]
 80134d6:	2b30      	cmp	r3, #48	; 0x30
 80134d8:	d108      	bne.n	80134ec <SystemManager_ProcessFault+0x14c>
					idx == I2C_ERROR_DMA_PARAM_THREE)
			{
				if(SystemManager_Fault[idx] >= 2)
 80134da:	79fb      	ldrb	r3, [r7, #7]
 80134dc:	4a09      	ldr	r2, [pc, #36]	; (8013504 <SystemManager_ProcessFault+0x164>)
 80134de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80134e2:	2b01      	cmp	r3, #1
 80134e4:	d902      	bls.n	80134ec <SystemManager_ProcessFault+0x14c>
				{
					Dem_ReceiveFault(PERIPHERAL_ERROR_DTC_CODE);
 80134e6:	2099      	movs	r0, #153	; 0x99
 80134e8:	f7f2 fca4 	bl	8005e34 <Dem_ReceiveFault>
	for(uint8 idx = STD_LOW ; idx < 49; idx++)
 80134ec:	79fb      	ldrb	r3, [r7, #7]
 80134ee:	3301      	adds	r3, #1
 80134f0:	71fb      	strb	r3, [r7, #7]
 80134f2:	79fb      	ldrb	r3, [r7, #7]
 80134f4:	2b30      	cmp	r3, #48	; 0x30
 80134f6:	f67f af59 	bls.w	80133ac <SystemManager_ProcessFault+0xc>
		else
		{
			/* do nothing */
		}
	}
}
 80134fa:	bf00      	nop
 80134fc:	bf00      	nop
 80134fe:	3708      	adds	r7, #8
 8013500:	46bd      	mov	sp, r7
 8013502:	bd80      	pop	{r7, pc}
 8013504:	20009420 	.word	0x20009420

08013508 <SystemManager_Init>:
/***********************************************************************************
* Function: SystemManager_Init													   *
* Description: Initialize the system.  		   									   *
************************************************************************************/
VOID SystemManager_Init()
{
 8013508:	b580      	push	{r7, lr}
 801350a:	af00      	add	r7, sp, #0
	/* Perform system initialization sequence. */
	HAL_Init();
 801350c:	f7f2 fe44 	bl	8006198 <HAL_Init>
	SystemClock_Config();
 8013510:	f000 f8dc 	bl	80136cc <SystemClock_Config>
}
 8013514:	bf00      	nop
 8013516:	bd80      	pop	{r7, pc}

08013518 <SystemManager_DeInit>:
/***********************************************************************************
* Function: SystemManager_DeInit												   *
* Description: De-initialize the system.  		   								   *
************************************************************************************/
VOID SystemManager_DeInit()
{
 8013518:	b580      	push	{r7, lr}
 801351a:	af00      	add	r7, sp, #0
	HAL_DeInit();
 801351c:	f7f2 fe5e 	bl	80061dc <HAL_DeInit>
}
 8013520:	bf00      	nop
 8013522:	bd80      	pop	{r7, pc}

08013524 <SystemManager_SetFault>:
/***********************************************************************************
* Function: SystemManager_SetFault										   		   *
* Description: Set the fault in the system.		 		   						   *
************************************************************************************/
StdReturnType SystemManager_SetFault(uint8 faultType)
{
 8013524:	b480      	push	{r7}
 8013526:	b085      	sub	sp, #20
 8013528:	af00      	add	r7, sp, #0
 801352a:	4603      	mov	r3, r0
 801352c:	71fb      	strb	r3, [r7, #7]
	/* Store the fault into the data type. */
	for(uint8 index = 0; index < 14; index++)
 801352e:	2300      	movs	r3, #0
 8013530:	73fb      	strb	r3, [r7, #15]
 8013532:	e00e      	b.n	8013552 <SystemManager_SetFault+0x2e>
	{
		if(faultType == index)
 8013534:	79fa      	ldrb	r2, [r7, #7]
 8013536:	7bfb      	ldrb	r3, [r7, #15]
 8013538:	429a      	cmp	r2, r3
 801353a:	d107      	bne.n	801354c <SystemManager_SetFault+0x28>
		{
			SystemManager_Fault[index]++;
 801353c:	7bfb      	ldrb	r3, [r7, #15]
 801353e:	4a0a      	ldr	r2, [pc, #40]	; (8013568 <SystemManager_SetFault+0x44>)
 8013540:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8013544:	3201      	adds	r2, #1
 8013546:	4908      	ldr	r1, [pc, #32]	; (8013568 <SystemManager_SetFault+0x44>)
 8013548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint8 index = 0; index < 14; index++)
 801354c:	7bfb      	ldrb	r3, [r7, #15]
 801354e:	3301      	adds	r3, #1
 8013550:	73fb      	strb	r3, [r7, #15]
 8013552:	7bfb      	ldrb	r3, [r7, #15]
 8013554:	2b0d      	cmp	r3, #13
 8013556:	d9ed      	bls.n	8013534 <SystemManager_SetFault+0x10>
		else
		{
			/* do nothing */
		}
	}
	return E_OK;
 8013558:	2300      	movs	r3, #0
}
 801355a:	4618      	mov	r0, r3
 801355c:	3714      	adds	r7, #20
 801355e:	46bd      	mov	sp, r7
 8013560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013564:	4770      	bx	lr
 8013566:	bf00      	nop
 8013568:	20009420 	.word	0x20009420

0801356c <SystemManager_MainFunction>:
/***********************************************************************************
* Function: SystemManager_MainFunction									   		   *
* Description: System main function.									 		   *
************************************************************************************/
VOID SystemManager_MainFunction()
{
 801356c:	b580      	push	{r7, lr}
 801356e:	af00      	add	r7, sp, #0
	SystemManager_ProcessFault();
 8013570:	f7ff ff16 	bl	80133a0 <SystemManager_ProcessFault>
}
 8013574:	bf00      	nop
 8013576:	bd80      	pop	{r7, pc}

08013578 <SystemManager_PerformReset>:
/***********************************************************************************
* Function: SystemManager_PerformReset									   		   *
* Description: Perform system reset.		 		   							   *
************************************************************************************/
VOID SystemManager_PerformReset()
{
 8013578:	b580      	push	{r7, lr}
 801357a:	af00      	add	r7, sp, #0
	HAL_NVIC_SystemReset();
 801357c:	f7f3 fd61 	bl	8007042 <HAL_NVIC_SystemReset>
}
 8013580:	bf00      	nop
 8013582:	bd80      	pop	{r7, pc}

08013584 <MX_NVIC_Init>:
* Function: MX_NVIC_Init													   	   *
* Description: Initialize the nested vector interrupt controller with configured   *
* 			   values.		 		   											   *
************************************************************************************/
VOID MX_NVIC_Init(VOID)
{
 8013584:	b580      	push	{r7, lr}
 8013586:	af00      	add	r7, sp, #0
	/* TIM5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM5_IRQn, 10, 0);
 8013588:	2200      	movs	r2, #0
 801358a:	210a      	movs	r1, #10
 801358c:	2032      	movs	r0, #50	; 0x32
 801358e:	f7f3 fd20 	bl	8006fd2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8013592:	2032      	movs	r0, #50	; 0x32
 8013594:	f7f3 fd39 	bl	800700a <HAL_NVIC_EnableIRQ>
	/* WWDG_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(WWDG_IRQn, 15, 0);
 8013598:	2200      	movs	r2, #0
 801359a:	210f      	movs	r1, #15
 801359c:	2000      	movs	r0, #0
 801359e:	f7f3 fd18 	bl	8006fd2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(WWDG_IRQn);
 80135a2:	2000      	movs	r0, #0
 80135a4:	f7f3 fd31 	bl	800700a <HAL_NVIC_EnableIRQ>
	/* FLASH_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(FLASH_IRQn, 15, 0);
 80135a8:	2200      	movs	r2, #0
 80135aa:	210f      	movs	r1, #15
 80135ac:	2004      	movs	r0, #4
 80135ae:	f7f3 fd10 	bl	8006fd2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80135b2:	2004      	movs	r0, #4
 80135b4:	f7f3 fd29 	bl	800700a <HAL_NVIC_EnableIRQ>
	/* RCC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(RCC_IRQn, 15, 0);
 80135b8:	2200      	movs	r2, #0
 80135ba:	210f      	movs	r1, #15
 80135bc:	2005      	movs	r0, #5
 80135be:	f7f3 fd08 	bl	8006fd2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RCC_IRQn);
 80135c2:	2005      	movs	r0, #5
 80135c4:	f7f3 fd21 	bl	800700a <HAL_NVIC_EnableIRQ>
	/* PVD_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(PVD_IRQn, 15, 0);
 80135c8:	2200      	movs	r2, #0
 80135ca:	210f      	movs	r1, #15
 80135cc:	2001      	movs	r0, #1
 80135ce:	f7f3 fd00 	bl	8006fd2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(PVD_IRQn);
 80135d2:	2001      	movs	r0, #1
 80135d4:	f7f3 fd19 	bl	800700a <HAL_NVIC_EnableIRQ>
	/* ADC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(ADC_IRQn, 15, 0);
 80135d8:	2200      	movs	r2, #0
 80135da:	210f      	movs	r1, #15
 80135dc:	2012      	movs	r0, #18
 80135de:	f7f3 fcf8 	bl	8006fd2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 80135e2:	2012      	movs	r0, #18
 80135e4:	f7f3 fd11 	bl	800700a <HAL_NVIC_EnableIRQ>
	/* TIM2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 80135e8:	2200      	movs	r2, #0
 80135ea:	210f      	movs	r1, #15
 80135ec:	201c      	movs	r0, #28
 80135ee:	f7f3 fcf0 	bl	8006fd2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80135f2:	201c      	movs	r0, #28
 80135f4:	f7f3 fd09 	bl	800700a <HAL_NVIC_EnableIRQ>
	/* TIM3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM3_IRQn, 15, 0);
 80135f8:	2200      	movs	r2, #0
 80135fa:	210f      	movs	r1, #15
 80135fc:	201d      	movs	r0, #29
 80135fe:	f7f3 fce8 	bl	8006fd2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8013602:	201d      	movs	r0, #29
 8013604:	f7f3 fd01 	bl	800700a <HAL_NVIC_EnableIRQ>
	/* TIM4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM4_IRQn, 15, 0);
 8013608:	2200      	movs	r2, #0
 801360a:	210f      	movs	r1, #15
 801360c:	201e      	movs	r0, #30
 801360e:	f7f3 fce0 	bl	8006fd2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8013612:	201e      	movs	r0, #30
 8013614:	f7f3 fcf9 	bl	800700a <HAL_NVIC_EnableIRQ>
	/* USART1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8013618:	2200      	movs	r2, #0
 801361a:	2100      	movs	r1, #0
 801361c:	2025      	movs	r0, #37	; 0x25
 801361e:	f7f3 fcd8 	bl	8006fd2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8013622:	2025      	movs	r0, #37	; 0x25
 8013624:	f7f3 fcf1 	bl	800700a <HAL_NVIC_EnableIRQ>
	/* SPI3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SPI3_IRQn, 15, 0);
 8013628:	2200      	movs	r2, #0
 801362a:	210f      	movs	r1, #15
 801362c:	2033      	movs	r0, #51	; 0x33
 801362e:	f7f3 fcd0 	bl	8006fd2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8013632:	2033      	movs	r0, #51	; 0x33
 8013634:	f7f3 fce9 	bl	800700a <HAL_NVIC_EnableIRQ>
	/* I2C3_EV_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(I2C3_EV_IRQn, 15, 0);
 8013638:	2200      	movs	r2, #0
 801363a:	210f      	movs	r1, #15
 801363c:	2048      	movs	r0, #72	; 0x48
 801363e:	f7f3 fcc8 	bl	8006fd2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8013642:	2048      	movs	r0, #72	; 0x48
 8013644:	f7f3 fce1 	bl	800700a <HAL_NVIC_EnableIRQ>
	/* I2C3_ER_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(I2C3_ER_IRQn, 15, 0);
 8013648:	2200      	movs	r2, #0
 801364a:	210f      	movs	r1, #15
 801364c:	2049      	movs	r0, #73	; 0x49
 801364e:	f7f3 fcc0 	bl	8006fd2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8013652:	2049      	movs	r0, #73	; 0x49
 8013654:	f7f3 fcd9 	bl	800700a <HAL_NVIC_EnableIRQ>
	/* FPU_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(FPU_IRQn, 15, 0);
 8013658:	2200      	movs	r2, #0
 801365a:	210f      	movs	r1, #15
 801365c:	2051      	movs	r0, #81	; 0x51
 801365e:	f7f3 fcb8 	bl	8006fd2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FPU_IRQn);
 8013662:	2051      	movs	r0, #81	; 0x51
 8013664:	f7f3 fcd1 	bl	800700a <HAL_NVIC_EnableIRQ>
	/* TIM1_TRG_COM_TIM11_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 10, 0);
 8013668:	2200      	movs	r2, #0
 801366a:	210a      	movs	r1, #10
 801366c:	201a      	movs	r0, #26
 801366e:	f7f3 fcb0 	bl	8006fd2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8013672:	201a      	movs	r0, #26
 8013674:	f7f3 fcc9 	bl	800700a <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 10, 0);
 8013678:	2200      	movs	r2, #0
 801367a:	210a      	movs	r1, #10
 801367c:	2038      	movs	r0, #56	; 0x38
 801367e:	f7f3 fca8 	bl	8006fd2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8013682:	2038      	movs	r0, #56	; 0x38
 8013684:	f7f3 fcc1 	bl	800700a <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 10, 0);
 8013688:	2200      	movs	r2, #0
 801368a:	210a      	movs	r1, #10
 801368c:	200d      	movs	r0, #13
 801368e:	f7f3 fca0 	bl	8006fd2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8013692:	200d      	movs	r0, #13
 8013694:	f7f3 fcb9 	bl	800700a <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 10, 0);
 8013698:	2200      	movs	r2, #0
 801369a:	210a      	movs	r1, #10
 801369c:	200f      	movs	r0, #15
 801369e:	f7f3 fc98 	bl	8006fd2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80136a2:	200f      	movs	r0, #15
 80136a4:	f7f3 fcb1 	bl	800700a <HAL_NVIC_EnableIRQ>
	/* I2C1_ER_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(I2C1_ER_IRQn, 10, 0);
 80136a8:	2200      	movs	r2, #0
 80136aa:	210a      	movs	r1, #10
 80136ac:	2020      	movs	r0, #32
 80136ae:	f7f3 fc90 	bl	8006fd2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80136b2:	2020      	movs	r0, #32
 80136b4:	f7f3 fca9 	bl	800700a <HAL_NVIC_EnableIRQ>
	/* I2C1_EV_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 10, 0);
 80136b8:	2200      	movs	r2, #0
 80136ba:	210a      	movs	r1, #10
 80136bc:	201f      	movs	r0, #31
 80136be:	f7f3 fc88 	bl	8006fd2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80136c2:	201f      	movs	r0, #31
 80136c4:	f7f3 fca1 	bl	800700a <HAL_NVIC_EnableIRQ>
}
 80136c8:	bf00      	nop
 80136ca:	bd80      	pop	{r7, pc}

080136cc <SystemClock_Config>:
/***********************************************************************************
* Function: SystemClock_Config													   *
* Description: Initialize the system clock.		 		   						   *
************************************************************************************/
VOID SystemClock_Config(VOID)
{
 80136cc:	b580      	push	{r7, lr}
 80136ce:	b094      	sub	sp, #80	; 0x50
 80136d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80136d2:	f107 0320 	add.w	r3, r7, #32
 80136d6:	2230      	movs	r2, #48	; 0x30
 80136d8:	2100      	movs	r1, #0
 80136da:	4618      	mov	r0, r3
 80136dc:	f000 f8c8 	bl	8013870 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80136e0:	f107 030c 	add.w	r3, r7, #12
 80136e4:	2200      	movs	r2, #0
 80136e6:	601a      	str	r2, [r3, #0]
 80136e8:	605a      	str	r2, [r3, #4]
 80136ea:	609a      	str	r2, [r3, #8]
 80136ec:	60da      	str	r2, [r3, #12]
 80136ee:	611a      	str	r2, [r3, #16]
	__HAL_RCC_PWR_CLK_ENABLE();
 80136f0:	2300      	movs	r3, #0
 80136f2:	60bb      	str	r3, [r7, #8]
 80136f4:	4b28      	ldr	r3, [pc, #160]	; (8013798 <SystemClock_Config+0xcc>)
 80136f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136f8:	4a27      	ldr	r2, [pc, #156]	; (8013798 <SystemClock_Config+0xcc>)
 80136fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80136fe:	6413      	str	r3, [r2, #64]	; 0x40
 8013700:	4b25      	ldr	r3, [pc, #148]	; (8013798 <SystemClock_Config+0xcc>)
 8013702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013708:	60bb      	str	r3, [r7, #8]
 801370a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801370c:	2300      	movs	r3, #0
 801370e:	607b      	str	r3, [r7, #4]
 8013710:	4b22      	ldr	r3, [pc, #136]	; (801379c <SystemClock_Config+0xd0>)
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	4a21      	ldr	r2, [pc, #132]	; (801379c <SystemClock_Config+0xd0>)
 8013716:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801371a:	6013      	str	r3, [r2, #0]
 801371c:	4b1f      	ldr	r3, [pc, #124]	; (801379c <SystemClock_Config+0xd0>)
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8013724:	607b      	str	r3, [r7, #4]
 8013726:	687b      	ldr	r3, [r7, #4]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8013728:	2309      	movs	r3, #9
 801372a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801372c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013730:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8013732:	2301      	movs	r3, #1
 8013734:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8013736:	2302      	movs	r3, #2
 8013738:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801373a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801373e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8013740:	2304      	movs	r3, #4
 8013742:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8013744:	2364      	movs	r3, #100	; 0x64
 8013746:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8013748:	2302      	movs	r3, #2
 801374a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 801374c:	2304      	movs	r3, #4
 801374e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8013750:	f107 0320 	add.w	r3, r7, #32
 8013754:	4618      	mov	r0, r3
 8013756:	f7f6 feaf 	bl	800a4b8 <HAL_RCC_OscConfig>
 801375a:	4603      	mov	r3, r0
 801375c:	2b00      	cmp	r3, #0
 801375e:	d001      	beq.n	8013764 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8013760:	f000 f81e 	bl	80137a0 <Error_Handler>
	}
	else
	{
		/* do nothing */
	}
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8013764:	230f      	movs	r3, #15
 8013766:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8013768:	2302      	movs	r3, #2
 801376a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801376c:	2300      	movs	r3, #0
 801376e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8013770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013774:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8013776:	2300      	movs	r3, #0
 8013778:	61fb      	str	r3, [r7, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 801377a:	f107 030c 	add.w	r3, r7, #12
 801377e:	2103      	movs	r1, #3
 8013780:	4618      	mov	r0, r3
 8013782:	f7f7 f911 	bl	800a9a8 <HAL_RCC_ClockConfig>
 8013786:	4603      	mov	r3, r0
 8013788:	2b00      	cmp	r3, #0
 801378a:	d001      	beq.n	8013790 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 801378c:	f000 f808 	bl	80137a0 <Error_Handler>
	}
	else
	{
		/* do nothing */
	}
}
 8013790:	bf00      	nop
 8013792:	3750      	adds	r7, #80	; 0x50
 8013794:	46bd      	mov	sp, r7
 8013796:	bd80      	pop	{r7, pc}
 8013798:	40023800 	.word	0x40023800
 801379c:	40007000 	.word	0x40007000

080137a0 <Error_Handler>:
/***********************************************************************************
* Function: Error_Handler													   	   *
* Description: Perform system reset in case of system fault.			 		   *
************************************************************************************/
VOID Error_Handler(VOID)
{
 80137a0:	b580      	push	{r7, lr}
 80137a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80137a4:	b672      	cpsid	i
}
 80137a6:	bf00      	nop
	__disable_irq();
	SystemManager_PerformReset();
 80137a8:	f7ff fee6 	bl	8013578 <SystemManager_PerformReset>
	while (1)
 80137ac:	e7fe      	b.n	80137ac <Error_Handler+0xc>
	...

080137b0 <Watchdog_Init>:
/***********************************************************************************
* Function: Watchdog_Init									   		       		   *
* Description: Peripheral initialization.							 		   	   *
************************************************************************************/
StdReturnType Watchdog_Init()
{
 80137b0:	b580      	push	{r7, lr}
 80137b2:	af00      	add	r7, sp, #0
	hiwdg.Instance = IWDG;
 80137b4:	4b09      	ldr	r3, [pc, #36]	; (80137dc <Watchdog_Init+0x2c>)
 80137b6:	4a0a      	ldr	r2, [pc, #40]	; (80137e0 <Watchdog_Init+0x30>)
 80137b8:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 80137ba:	4b08      	ldr	r3, [pc, #32]	; (80137dc <Watchdog_Init+0x2c>)
 80137bc:	2205      	movs	r2, #5
 80137be:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Reload = 63;
 80137c0:	4b06      	ldr	r3, [pc, #24]	; (80137dc <Watchdog_Init+0x2c>)
 80137c2:	223f      	movs	r2, #63	; 0x3f
 80137c4:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80137c6:	4805      	ldr	r0, [pc, #20]	; (80137dc <Watchdog_Init+0x2c>)
 80137c8:	f7f6 fe09 	bl	800a3de <HAL_IWDG_Init>
 80137cc:	4603      	mov	r3, r0
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d001      	beq.n	80137d6 <Watchdog_Init+0x26>
	{
		Error_Handler();
 80137d2:	f7ff ffe5 	bl	80137a0 <Error_Handler>
	}
	return E_OK;
 80137d6:	2300      	movs	r3, #0
}
 80137d8:	4618      	mov	r0, r3
 80137da:	bd80      	pop	{r7, pc}
 80137dc:	20000480 	.word	0x20000480
 80137e0:	40003000 	.word	0x40003000

080137e4 <Watchdog_MainFunction>:
/***********************************************************************************
* Function: Watchdog_MainFunction									   		       *
* Description: Peripheral main function.							 		       *
************************************************************************************/
VOID Watchdog_MainFunction()
{
 80137e4:	b580      	push	{r7, lr}
 80137e6:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 80137e8:	4802      	ldr	r0, [pc, #8]	; (80137f4 <Watchdog_MainFunction+0x10>)
 80137ea:	f7f6 fe3a 	bl	800a462 <HAL_IWDG_Refresh>
}
 80137ee:	bf00      	nop
 80137f0:	bd80      	pop	{r7, pc}
 80137f2:	bf00      	nop
 80137f4:	20000480 	.word	0x20000480

080137f8 <atoi>:
 80137f8:	220a      	movs	r2, #10
 80137fa:	2100      	movs	r1, #0
 80137fc:	f000 ba3c 	b.w	8013c78 <strtol>

08013800 <__errno>:
 8013800:	4b01      	ldr	r3, [pc, #4]	; (8013808 <__errno+0x8>)
 8013802:	6818      	ldr	r0, [r3, #0]
 8013804:	4770      	bx	lr
 8013806:	bf00      	nop
 8013808:	2000005c 	.word	0x2000005c

0801380c <__libc_init_array>:
 801380c:	b570      	push	{r4, r5, r6, lr}
 801380e:	4d0d      	ldr	r5, [pc, #52]	; (8013844 <__libc_init_array+0x38>)
 8013810:	4c0d      	ldr	r4, [pc, #52]	; (8013848 <__libc_init_array+0x3c>)
 8013812:	1b64      	subs	r4, r4, r5
 8013814:	10a4      	asrs	r4, r4, #2
 8013816:	2600      	movs	r6, #0
 8013818:	42a6      	cmp	r6, r4
 801381a:	d109      	bne.n	8013830 <__libc_init_array+0x24>
 801381c:	4d0b      	ldr	r5, [pc, #44]	; (801384c <__libc_init_array+0x40>)
 801381e:	4c0c      	ldr	r4, [pc, #48]	; (8013850 <__libc_init_array+0x44>)
 8013820:	f000 fd82 	bl	8014328 <_init>
 8013824:	1b64      	subs	r4, r4, r5
 8013826:	10a4      	asrs	r4, r4, #2
 8013828:	2600      	movs	r6, #0
 801382a:	42a6      	cmp	r6, r4
 801382c:	d105      	bne.n	801383a <__libc_init_array+0x2e>
 801382e:	bd70      	pop	{r4, r5, r6, pc}
 8013830:	f855 3b04 	ldr.w	r3, [r5], #4
 8013834:	4798      	blx	r3
 8013836:	3601      	adds	r6, #1
 8013838:	e7ee      	b.n	8013818 <__libc_init_array+0xc>
 801383a:	f855 3b04 	ldr.w	r3, [r5], #4
 801383e:	4798      	blx	r3
 8013840:	3601      	adds	r6, #1
 8013842:	e7f2      	b.n	801382a <__libc_init_array+0x1e>
 8013844:	08014b44 	.word	0x08014b44
 8013848:	08014b44 	.word	0x08014b44
 801384c:	08014b44 	.word	0x08014b44
 8013850:	08014b48 	.word	0x08014b48

08013854 <memcpy>:
 8013854:	440a      	add	r2, r1
 8013856:	4291      	cmp	r1, r2
 8013858:	f100 33ff 	add.w	r3, r0, #4294967295
 801385c:	d100      	bne.n	8013860 <memcpy+0xc>
 801385e:	4770      	bx	lr
 8013860:	b510      	push	{r4, lr}
 8013862:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013866:	f803 4f01 	strb.w	r4, [r3, #1]!
 801386a:	4291      	cmp	r1, r2
 801386c:	d1f9      	bne.n	8013862 <memcpy+0xe>
 801386e:	bd10      	pop	{r4, pc}

08013870 <memset>:
 8013870:	4402      	add	r2, r0
 8013872:	4603      	mov	r3, r0
 8013874:	4293      	cmp	r3, r2
 8013876:	d100      	bne.n	801387a <memset+0xa>
 8013878:	4770      	bx	lr
 801387a:	f803 1b01 	strb.w	r1, [r3], #1
 801387e:	e7f9      	b.n	8013874 <memset+0x4>

08013880 <_free_r>:
 8013880:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013882:	2900      	cmp	r1, #0
 8013884:	d044      	beq.n	8013910 <_free_r+0x90>
 8013886:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801388a:	9001      	str	r0, [sp, #4]
 801388c:	2b00      	cmp	r3, #0
 801388e:	f1a1 0404 	sub.w	r4, r1, #4
 8013892:	bfb8      	it	lt
 8013894:	18e4      	addlt	r4, r4, r3
 8013896:	f000 f9f9 	bl	8013c8c <__malloc_lock>
 801389a:	4a1e      	ldr	r2, [pc, #120]	; (8013914 <_free_r+0x94>)
 801389c:	9801      	ldr	r0, [sp, #4]
 801389e:	6813      	ldr	r3, [r2, #0]
 80138a0:	b933      	cbnz	r3, 80138b0 <_free_r+0x30>
 80138a2:	6063      	str	r3, [r4, #4]
 80138a4:	6014      	str	r4, [r2, #0]
 80138a6:	b003      	add	sp, #12
 80138a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80138ac:	f000 b9f4 	b.w	8013c98 <__malloc_unlock>
 80138b0:	42a3      	cmp	r3, r4
 80138b2:	d908      	bls.n	80138c6 <_free_r+0x46>
 80138b4:	6825      	ldr	r5, [r4, #0]
 80138b6:	1961      	adds	r1, r4, r5
 80138b8:	428b      	cmp	r3, r1
 80138ba:	bf01      	itttt	eq
 80138bc:	6819      	ldreq	r1, [r3, #0]
 80138be:	685b      	ldreq	r3, [r3, #4]
 80138c0:	1949      	addeq	r1, r1, r5
 80138c2:	6021      	streq	r1, [r4, #0]
 80138c4:	e7ed      	b.n	80138a2 <_free_r+0x22>
 80138c6:	461a      	mov	r2, r3
 80138c8:	685b      	ldr	r3, [r3, #4]
 80138ca:	b10b      	cbz	r3, 80138d0 <_free_r+0x50>
 80138cc:	42a3      	cmp	r3, r4
 80138ce:	d9fa      	bls.n	80138c6 <_free_r+0x46>
 80138d0:	6811      	ldr	r1, [r2, #0]
 80138d2:	1855      	adds	r5, r2, r1
 80138d4:	42a5      	cmp	r5, r4
 80138d6:	d10b      	bne.n	80138f0 <_free_r+0x70>
 80138d8:	6824      	ldr	r4, [r4, #0]
 80138da:	4421      	add	r1, r4
 80138dc:	1854      	adds	r4, r2, r1
 80138de:	42a3      	cmp	r3, r4
 80138e0:	6011      	str	r1, [r2, #0]
 80138e2:	d1e0      	bne.n	80138a6 <_free_r+0x26>
 80138e4:	681c      	ldr	r4, [r3, #0]
 80138e6:	685b      	ldr	r3, [r3, #4]
 80138e8:	6053      	str	r3, [r2, #4]
 80138ea:	4421      	add	r1, r4
 80138ec:	6011      	str	r1, [r2, #0]
 80138ee:	e7da      	b.n	80138a6 <_free_r+0x26>
 80138f0:	d902      	bls.n	80138f8 <_free_r+0x78>
 80138f2:	230c      	movs	r3, #12
 80138f4:	6003      	str	r3, [r0, #0]
 80138f6:	e7d6      	b.n	80138a6 <_free_r+0x26>
 80138f8:	6825      	ldr	r5, [r4, #0]
 80138fa:	1961      	adds	r1, r4, r5
 80138fc:	428b      	cmp	r3, r1
 80138fe:	bf04      	itt	eq
 8013900:	6819      	ldreq	r1, [r3, #0]
 8013902:	685b      	ldreq	r3, [r3, #4]
 8013904:	6063      	str	r3, [r4, #4]
 8013906:	bf04      	itt	eq
 8013908:	1949      	addeq	r1, r1, r5
 801390a:	6021      	streq	r1, [r4, #0]
 801390c:	6054      	str	r4, [r2, #4]
 801390e:	e7ca      	b.n	80138a6 <_free_r+0x26>
 8013910:	b003      	add	sp, #12
 8013912:	bd30      	pop	{r4, r5, pc}
 8013914:	200094e4 	.word	0x200094e4

08013918 <sbrk_aligned>:
 8013918:	b570      	push	{r4, r5, r6, lr}
 801391a:	4e0e      	ldr	r6, [pc, #56]	; (8013954 <sbrk_aligned+0x3c>)
 801391c:	460c      	mov	r4, r1
 801391e:	6831      	ldr	r1, [r6, #0]
 8013920:	4605      	mov	r5, r0
 8013922:	b911      	cbnz	r1, 801392a <sbrk_aligned+0x12>
 8013924:	f000 f8f6 	bl	8013b14 <_sbrk_r>
 8013928:	6030      	str	r0, [r6, #0]
 801392a:	4621      	mov	r1, r4
 801392c:	4628      	mov	r0, r5
 801392e:	f000 f8f1 	bl	8013b14 <_sbrk_r>
 8013932:	1c43      	adds	r3, r0, #1
 8013934:	d00a      	beq.n	801394c <sbrk_aligned+0x34>
 8013936:	1cc4      	adds	r4, r0, #3
 8013938:	f024 0403 	bic.w	r4, r4, #3
 801393c:	42a0      	cmp	r0, r4
 801393e:	d007      	beq.n	8013950 <sbrk_aligned+0x38>
 8013940:	1a21      	subs	r1, r4, r0
 8013942:	4628      	mov	r0, r5
 8013944:	f000 f8e6 	bl	8013b14 <_sbrk_r>
 8013948:	3001      	adds	r0, #1
 801394a:	d101      	bne.n	8013950 <sbrk_aligned+0x38>
 801394c:	f04f 34ff 	mov.w	r4, #4294967295
 8013950:	4620      	mov	r0, r4
 8013952:	bd70      	pop	{r4, r5, r6, pc}
 8013954:	200094e8 	.word	0x200094e8

08013958 <_malloc_r>:
 8013958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801395c:	1ccd      	adds	r5, r1, #3
 801395e:	f025 0503 	bic.w	r5, r5, #3
 8013962:	3508      	adds	r5, #8
 8013964:	2d0c      	cmp	r5, #12
 8013966:	bf38      	it	cc
 8013968:	250c      	movcc	r5, #12
 801396a:	2d00      	cmp	r5, #0
 801396c:	4607      	mov	r7, r0
 801396e:	db01      	blt.n	8013974 <_malloc_r+0x1c>
 8013970:	42a9      	cmp	r1, r5
 8013972:	d905      	bls.n	8013980 <_malloc_r+0x28>
 8013974:	230c      	movs	r3, #12
 8013976:	603b      	str	r3, [r7, #0]
 8013978:	2600      	movs	r6, #0
 801397a:	4630      	mov	r0, r6
 801397c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013980:	4e2e      	ldr	r6, [pc, #184]	; (8013a3c <_malloc_r+0xe4>)
 8013982:	f000 f983 	bl	8013c8c <__malloc_lock>
 8013986:	6833      	ldr	r3, [r6, #0]
 8013988:	461c      	mov	r4, r3
 801398a:	bb34      	cbnz	r4, 80139da <_malloc_r+0x82>
 801398c:	4629      	mov	r1, r5
 801398e:	4638      	mov	r0, r7
 8013990:	f7ff ffc2 	bl	8013918 <sbrk_aligned>
 8013994:	1c43      	adds	r3, r0, #1
 8013996:	4604      	mov	r4, r0
 8013998:	d14d      	bne.n	8013a36 <_malloc_r+0xde>
 801399a:	6834      	ldr	r4, [r6, #0]
 801399c:	4626      	mov	r6, r4
 801399e:	2e00      	cmp	r6, #0
 80139a0:	d140      	bne.n	8013a24 <_malloc_r+0xcc>
 80139a2:	6823      	ldr	r3, [r4, #0]
 80139a4:	4631      	mov	r1, r6
 80139a6:	4638      	mov	r0, r7
 80139a8:	eb04 0803 	add.w	r8, r4, r3
 80139ac:	f000 f8b2 	bl	8013b14 <_sbrk_r>
 80139b0:	4580      	cmp	r8, r0
 80139b2:	d13a      	bne.n	8013a2a <_malloc_r+0xd2>
 80139b4:	6821      	ldr	r1, [r4, #0]
 80139b6:	3503      	adds	r5, #3
 80139b8:	1a6d      	subs	r5, r5, r1
 80139ba:	f025 0503 	bic.w	r5, r5, #3
 80139be:	3508      	adds	r5, #8
 80139c0:	2d0c      	cmp	r5, #12
 80139c2:	bf38      	it	cc
 80139c4:	250c      	movcc	r5, #12
 80139c6:	4629      	mov	r1, r5
 80139c8:	4638      	mov	r0, r7
 80139ca:	f7ff ffa5 	bl	8013918 <sbrk_aligned>
 80139ce:	3001      	adds	r0, #1
 80139d0:	d02b      	beq.n	8013a2a <_malloc_r+0xd2>
 80139d2:	6823      	ldr	r3, [r4, #0]
 80139d4:	442b      	add	r3, r5
 80139d6:	6023      	str	r3, [r4, #0]
 80139d8:	e00e      	b.n	80139f8 <_malloc_r+0xa0>
 80139da:	6822      	ldr	r2, [r4, #0]
 80139dc:	1b52      	subs	r2, r2, r5
 80139de:	d41e      	bmi.n	8013a1e <_malloc_r+0xc6>
 80139e0:	2a0b      	cmp	r2, #11
 80139e2:	d916      	bls.n	8013a12 <_malloc_r+0xba>
 80139e4:	1961      	adds	r1, r4, r5
 80139e6:	42a3      	cmp	r3, r4
 80139e8:	6025      	str	r5, [r4, #0]
 80139ea:	bf18      	it	ne
 80139ec:	6059      	strne	r1, [r3, #4]
 80139ee:	6863      	ldr	r3, [r4, #4]
 80139f0:	bf08      	it	eq
 80139f2:	6031      	streq	r1, [r6, #0]
 80139f4:	5162      	str	r2, [r4, r5]
 80139f6:	604b      	str	r3, [r1, #4]
 80139f8:	4638      	mov	r0, r7
 80139fa:	f104 060b 	add.w	r6, r4, #11
 80139fe:	f000 f94b 	bl	8013c98 <__malloc_unlock>
 8013a02:	f026 0607 	bic.w	r6, r6, #7
 8013a06:	1d23      	adds	r3, r4, #4
 8013a08:	1af2      	subs	r2, r6, r3
 8013a0a:	d0b6      	beq.n	801397a <_malloc_r+0x22>
 8013a0c:	1b9b      	subs	r3, r3, r6
 8013a0e:	50a3      	str	r3, [r4, r2]
 8013a10:	e7b3      	b.n	801397a <_malloc_r+0x22>
 8013a12:	6862      	ldr	r2, [r4, #4]
 8013a14:	42a3      	cmp	r3, r4
 8013a16:	bf0c      	ite	eq
 8013a18:	6032      	streq	r2, [r6, #0]
 8013a1a:	605a      	strne	r2, [r3, #4]
 8013a1c:	e7ec      	b.n	80139f8 <_malloc_r+0xa0>
 8013a1e:	4623      	mov	r3, r4
 8013a20:	6864      	ldr	r4, [r4, #4]
 8013a22:	e7b2      	b.n	801398a <_malloc_r+0x32>
 8013a24:	4634      	mov	r4, r6
 8013a26:	6876      	ldr	r6, [r6, #4]
 8013a28:	e7b9      	b.n	801399e <_malloc_r+0x46>
 8013a2a:	230c      	movs	r3, #12
 8013a2c:	603b      	str	r3, [r7, #0]
 8013a2e:	4638      	mov	r0, r7
 8013a30:	f000 f932 	bl	8013c98 <__malloc_unlock>
 8013a34:	e7a1      	b.n	801397a <_malloc_r+0x22>
 8013a36:	6025      	str	r5, [r4, #0]
 8013a38:	e7de      	b.n	80139f8 <_malloc_r+0xa0>
 8013a3a:	bf00      	nop
 8013a3c:	200094e4 	.word	0x200094e4

08013a40 <cleanup_glue>:
 8013a40:	b538      	push	{r3, r4, r5, lr}
 8013a42:	460c      	mov	r4, r1
 8013a44:	6809      	ldr	r1, [r1, #0]
 8013a46:	4605      	mov	r5, r0
 8013a48:	b109      	cbz	r1, 8013a4e <cleanup_glue+0xe>
 8013a4a:	f7ff fff9 	bl	8013a40 <cleanup_glue>
 8013a4e:	4621      	mov	r1, r4
 8013a50:	4628      	mov	r0, r5
 8013a52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013a56:	f7ff bf13 	b.w	8013880 <_free_r>
	...

08013a5c <_reclaim_reent>:
 8013a5c:	4b2c      	ldr	r3, [pc, #176]	; (8013b10 <_reclaim_reent+0xb4>)
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	4283      	cmp	r3, r0
 8013a62:	b570      	push	{r4, r5, r6, lr}
 8013a64:	4604      	mov	r4, r0
 8013a66:	d051      	beq.n	8013b0c <_reclaim_reent+0xb0>
 8013a68:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013a6a:	b143      	cbz	r3, 8013a7e <_reclaim_reent+0x22>
 8013a6c:	68db      	ldr	r3, [r3, #12]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d14a      	bne.n	8013b08 <_reclaim_reent+0xac>
 8013a72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013a74:	6819      	ldr	r1, [r3, #0]
 8013a76:	b111      	cbz	r1, 8013a7e <_reclaim_reent+0x22>
 8013a78:	4620      	mov	r0, r4
 8013a7a:	f7ff ff01 	bl	8013880 <_free_r>
 8013a7e:	6961      	ldr	r1, [r4, #20]
 8013a80:	b111      	cbz	r1, 8013a88 <_reclaim_reent+0x2c>
 8013a82:	4620      	mov	r0, r4
 8013a84:	f7ff fefc 	bl	8013880 <_free_r>
 8013a88:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013a8a:	b111      	cbz	r1, 8013a92 <_reclaim_reent+0x36>
 8013a8c:	4620      	mov	r0, r4
 8013a8e:	f7ff fef7 	bl	8013880 <_free_r>
 8013a92:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013a94:	b111      	cbz	r1, 8013a9c <_reclaim_reent+0x40>
 8013a96:	4620      	mov	r0, r4
 8013a98:	f7ff fef2 	bl	8013880 <_free_r>
 8013a9c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8013a9e:	b111      	cbz	r1, 8013aa6 <_reclaim_reent+0x4a>
 8013aa0:	4620      	mov	r0, r4
 8013aa2:	f7ff feed 	bl	8013880 <_free_r>
 8013aa6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8013aa8:	b111      	cbz	r1, 8013ab0 <_reclaim_reent+0x54>
 8013aaa:	4620      	mov	r0, r4
 8013aac:	f7ff fee8 	bl	8013880 <_free_r>
 8013ab0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8013ab2:	b111      	cbz	r1, 8013aba <_reclaim_reent+0x5e>
 8013ab4:	4620      	mov	r0, r4
 8013ab6:	f7ff fee3 	bl	8013880 <_free_r>
 8013aba:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8013abc:	b111      	cbz	r1, 8013ac4 <_reclaim_reent+0x68>
 8013abe:	4620      	mov	r0, r4
 8013ac0:	f7ff fede 	bl	8013880 <_free_r>
 8013ac4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013ac6:	b111      	cbz	r1, 8013ace <_reclaim_reent+0x72>
 8013ac8:	4620      	mov	r0, r4
 8013aca:	f7ff fed9 	bl	8013880 <_free_r>
 8013ace:	69a3      	ldr	r3, [r4, #24]
 8013ad0:	b1e3      	cbz	r3, 8013b0c <_reclaim_reent+0xb0>
 8013ad2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013ad4:	4620      	mov	r0, r4
 8013ad6:	4798      	blx	r3
 8013ad8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8013ada:	b1b9      	cbz	r1, 8013b0c <_reclaim_reent+0xb0>
 8013adc:	4620      	mov	r0, r4
 8013ade:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ae2:	f7ff bfad 	b.w	8013a40 <cleanup_glue>
 8013ae6:	5949      	ldr	r1, [r1, r5]
 8013ae8:	b941      	cbnz	r1, 8013afc <_reclaim_reent+0xa0>
 8013aea:	3504      	adds	r5, #4
 8013aec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013aee:	2d80      	cmp	r5, #128	; 0x80
 8013af0:	68d9      	ldr	r1, [r3, #12]
 8013af2:	d1f8      	bne.n	8013ae6 <_reclaim_reent+0x8a>
 8013af4:	4620      	mov	r0, r4
 8013af6:	f7ff fec3 	bl	8013880 <_free_r>
 8013afa:	e7ba      	b.n	8013a72 <_reclaim_reent+0x16>
 8013afc:	680e      	ldr	r6, [r1, #0]
 8013afe:	4620      	mov	r0, r4
 8013b00:	f7ff febe 	bl	8013880 <_free_r>
 8013b04:	4631      	mov	r1, r6
 8013b06:	e7ef      	b.n	8013ae8 <_reclaim_reent+0x8c>
 8013b08:	2500      	movs	r5, #0
 8013b0a:	e7ef      	b.n	8013aec <_reclaim_reent+0x90>
 8013b0c:	bd70      	pop	{r4, r5, r6, pc}
 8013b0e:	bf00      	nop
 8013b10:	2000005c 	.word	0x2000005c

08013b14 <_sbrk_r>:
 8013b14:	b538      	push	{r3, r4, r5, lr}
 8013b16:	4d06      	ldr	r5, [pc, #24]	; (8013b30 <_sbrk_r+0x1c>)
 8013b18:	2300      	movs	r3, #0
 8013b1a:	4604      	mov	r4, r0
 8013b1c:	4608      	mov	r0, r1
 8013b1e:	602b      	str	r3, [r5, #0]
 8013b20:	f7f1 fdf2 	bl	8005708 <_sbrk>
 8013b24:	1c43      	adds	r3, r0, #1
 8013b26:	d102      	bne.n	8013b2e <_sbrk_r+0x1a>
 8013b28:	682b      	ldr	r3, [r5, #0]
 8013b2a:	b103      	cbz	r3, 8013b2e <_sbrk_r+0x1a>
 8013b2c:	6023      	str	r3, [r4, #0]
 8013b2e:	bd38      	pop	{r3, r4, r5, pc}
 8013b30:	200094ec 	.word	0x200094ec

08013b34 <siprintf>:
 8013b34:	b40e      	push	{r1, r2, r3}
 8013b36:	b500      	push	{lr}
 8013b38:	b09c      	sub	sp, #112	; 0x70
 8013b3a:	ab1d      	add	r3, sp, #116	; 0x74
 8013b3c:	9002      	str	r0, [sp, #8]
 8013b3e:	9006      	str	r0, [sp, #24]
 8013b40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013b44:	4809      	ldr	r0, [pc, #36]	; (8013b6c <siprintf+0x38>)
 8013b46:	9107      	str	r1, [sp, #28]
 8013b48:	9104      	str	r1, [sp, #16]
 8013b4a:	4909      	ldr	r1, [pc, #36]	; (8013b70 <siprintf+0x3c>)
 8013b4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b50:	9105      	str	r1, [sp, #20]
 8013b52:	6800      	ldr	r0, [r0, #0]
 8013b54:	9301      	str	r3, [sp, #4]
 8013b56:	a902      	add	r1, sp, #8
 8013b58:	f000 f900 	bl	8013d5c <_svfiprintf_r>
 8013b5c:	9b02      	ldr	r3, [sp, #8]
 8013b5e:	2200      	movs	r2, #0
 8013b60:	701a      	strb	r2, [r3, #0]
 8013b62:	b01c      	add	sp, #112	; 0x70
 8013b64:	f85d eb04 	ldr.w	lr, [sp], #4
 8013b68:	b003      	add	sp, #12
 8013b6a:	4770      	bx	lr
 8013b6c:	2000005c 	.word	0x2000005c
 8013b70:	ffff0208 	.word	0xffff0208

08013b74 <_strtol_l.constprop.0>:
 8013b74:	2b01      	cmp	r3, #1
 8013b76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b7a:	d001      	beq.n	8013b80 <_strtol_l.constprop.0+0xc>
 8013b7c:	2b24      	cmp	r3, #36	; 0x24
 8013b7e:	d906      	bls.n	8013b8e <_strtol_l.constprop.0+0x1a>
 8013b80:	f7ff fe3e 	bl	8013800 <__errno>
 8013b84:	2316      	movs	r3, #22
 8013b86:	6003      	str	r3, [r0, #0]
 8013b88:	2000      	movs	r0, #0
 8013b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b8e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8013c74 <_strtol_l.constprop.0+0x100>
 8013b92:	460d      	mov	r5, r1
 8013b94:	462e      	mov	r6, r5
 8013b96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013b9a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8013b9e:	f017 0708 	ands.w	r7, r7, #8
 8013ba2:	d1f7      	bne.n	8013b94 <_strtol_l.constprop.0+0x20>
 8013ba4:	2c2d      	cmp	r4, #45	; 0x2d
 8013ba6:	d132      	bne.n	8013c0e <_strtol_l.constprop.0+0x9a>
 8013ba8:	782c      	ldrb	r4, [r5, #0]
 8013baa:	2701      	movs	r7, #1
 8013bac:	1cb5      	adds	r5, r6, #2
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d05b      	beq.n	8013c6a <_strtol_l.constprop.0+0xf6>
 8013bb2:	2b10      	cmp	r3, #16
 8013bb4:	d109      	bne.n	8013bca <_strtol_l.constprop.0+0x56>
 8013bb6:	2c30      	cmp	r4, #48	; 0x30
 8013bb8:	d107      	bne.n	8013bca <_strtol_l.constprop.0+0x56>
 8013bba:	782c      	ldrb	r4, [r5, #0]
 8013bbc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8013bc0:	2c58      	cmp	r4, #88	; 0x58
 8013bc2:	d14d      	bne.n	8013c60 <_strtol_l.constprop.0+0xec>
 8013bc4:	786c      	ldrb	r4, [r5, #1]
 8013bc6:	2310      	movs	r3, #16
 8013bc8:	3502      	adds	r5, #2
 8013bca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8013bce:	f108 38ff 	add.w	r8, r8, #4294967295
 8013bd2:	f04f 0c00 	mov.w	ip, #0
 8013bd6:	fbb8 f9f3 	udiv	r9, r8, r3
 8013bda:	4666      	mov	r6, ip
 8013bdc:	fb03 8a19 	mls	sl, r3, r9, r8
 8013be0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8013be4:	f1be 0f09 	cmp.w	lr, #9
 8013be8:	d816      	bhi.n	8013c18 <_strtol_l.constprop.0+0xa4>
 8013bea:	4674      	mov	r4, lr
 8013bec:	42a3      	cmp	r3, r4
 8013bee:	dd24      	ble.n	8013c3a <_strtol_l.constprop.0+0xc6>
 8013bf0:	f1bc 0f00 	cmp.w	ip, #0
 8013bf4:	db1e      	blt.n	8013c34 <_strtol_l.constprop.0+0xc0>
 8013bf6:	45b1      	cmp	r9, r6
 8013bf8:	d31c      	bcc.n	8013c34 <_strtol_l.constprop.0+0xc0>
 8013bfa:	d101      	bne.n	8013c00 <_strtol_l.constprop.0+0x8c>
 8013bfc:	45a2      	cmp	sl, r4
 8013bfe:	db19      	blt.n	8013c34 <_strtol_l.constprop.0+0xc0>
 8013c00:	fb06 4603 	mla	r6, r6, r3, r4
 8013c04:	f04f 0c01 	mov.w	ip, #1
 8013c08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013c0c:	e7e8      	b.n	8013be0 <_strtol_l.constprop.0+0x6c>
 8013c0e:	2c2b      	cmp	r4, #43	; 0x2b
 8013c10:	bf04      	itt	eq
 8013c12:	782c      	ldrbeq	r4, [r5, #0]
 8013c14:	1cb5      	addeq	r5, r6, #2
 8013c16:	e7ca      	b.n	8013bae <_strtol_l.constprop.0+0x3a>
 8013c18:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8013c1c:	f1be 0f19 	cmp.w	lr, #25
 8013c20:	d801      	bhi.n	8013c26 <_strtol_l.constprop.0+0xb2>
 8013c22:	3c37      	subs	r4, #55	; 0x37
 8013c24:	e7e2      	b.n	8013bec <_strtol_l.constprop.0+0x78>
 8013c26:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8013c2a:	f1be 0f19 	cmp.w	lr, #25
 8013c2e:	d804      	bhi.n	8013c3a <_strtol_l.constprop.0+0xc6>
 8013c30:	3c57      	subs	r4, #87	; 0x57
 8013c32:	e7db      	b.n	8013bec <_strtol_l.constprop.0+0x78>
 8013c34:	f04f 3cff 	mov.w	ip, #4294967295
 8013c38:	e7e6      	b.n	8013c08 <_strtol_l.constprop.0+0x94>
 8013c3a:	f1bc 0f00 	cmp.w	ip, #0
 8013c3e:	da05      	bge.n	8013c4c <_strtol_l.constprop.0+0xd8>
 8013c40:	2322      	movs	r3, #34	; 0x22
 8013c42:	6003      	str	r3, [r0, #0]
 8013c44:	4646      	mov	r6, r8
 8013c46:	b942      	cbnz	r2, 8013c5a <_strtol_l.constprop.0+0xe6>
 8013c48:	4630      	mov	r0, r6
 8013c4a:	e79e      	b.n	8013b8a <_strtol_l.constprop.0+0x16>
 8013c4c:	b107      	cbz	r7, 8013c50 <_strtol_l.constprop.0+0xdc>
 8013c4e:	4276      	negs	r6, r6
 8013c50:	2a00      	cmp	r2, #0
 8013c52:	d0f9      	beq.n	8013c48 <_strtol_l.constprop.0+0xd4>
 8013c54:	f1bc 0f00 	cmp.w	ip, #0
 8013c58:	d000      	beq.n	8013c5c <_strtol_l.constprop.0+0xe8>
 8013c5a:	1e69      	subs	r1, r5, #1
 8013c5c:	6011      	str	r1, [r2, #0]
 8013c5e:	e7f3      	b.n	8013c48 <_strtol_l.constprop.0+0xd4>
 8013c60:	2430      	movs	r4, #48	; 0x30
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d1b1      	bne.n	8013bca <_strtol_l.constprop.0+0x56>
 8013c66:	2308      	movs	r3, #8
 8013c68:	e7af      	b.n	8013bca <_strtol_l.constprop.0+0x56>
 8013c6a:	2c30      	cmp	r4, #48	; 0x30
 8013c6c:	d0a5      	beq.n	8013bba <_strtol_l.constprop.0+0x46>
 8013c6e:	230a      	movs	r3, #10
 8013c70:	e7ab      	b.n	8013bca <_strtol_l.constprop.0+0x56>
 8013c72:	bf00      	nop
 8013c74:	08014a09 	.word	0x08014a09

08013c78 <strtol>:
 8013c78:	4613      	mov	r3, r2
 8013c7a:	460a      	mov	r2, r1
 8013c7c:	4601      	mov	r1, r0
 8013c7e:	4802      	ldr	r0, [pc, #8]	; (8013c88 <strtol+0x10>)
 8013c80:	6800      	ldr	r0, [r0, #0]
 8013c82:	f7ff bf77 	b.w	8013b74 <_strtol_l.constprop.0>
 8013c86:	bf00      	nop
 8013c88:	2000005c 	.word	0x2000005c

08013c8c <__malloc_lock>:
 8013c8c:	4801      	ldr	r0, [pc, #4]	; (8013c94 <__malloc_lock+0x8>)
 8013c8e:	f7f1 bff4 	b.w	8005c7a <__retarget_lock_acquire_recursive>
 8013c92:	bf00      	nop
 8013c94:	20000888 	.word	0x20000888

08013c98 <__malloc_unlock>:
 8013c98:	4801      	ldr	r0, [pc, #4]	; (8013ca0 <__malloc_unlock+0x8>)
 8013c9a:	f7f2 b802 	b.w	8005ca2 <__retarget_lock_release_recursive>
 8013c9e:	bf00      	nop
 8013ca0:	20000888 	.word	0x20000888

08013ca4 <__ssputs_r>:
 8013ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ca8:	688e      	ldr	r6, [r1, #8]
 8013caa:	429e      	cmp	r6, r3
 8013cac:	4682      	mov	sl, r0
 8013cae:	460c      	mov	r4, r1
 8013cb0:	4690      	mov	r8, r2
 8013cb2:	461f      	mov	r7, r3
 8013cb4:	d838      	bhi.n	8013d28 <__ssputs_r+0x84>
 8013cb6:	898a      	ldrh	r2, [r1, #12]
 8013cb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013cbc:	d032      	beq.n	8013d24 <__ssputs_r+0x80>
 8013cbe:	6825      	ldr	r5, [r4, #0]
 8013cc0:	6909      	ldr	r1, [r1, #16]
 8013cc2:	eba5 0901 	sub.w	r9, r5, r1
 8013cc6:	6965      	ldr	r5, [r4, #20]
 8013cc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013ccc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013cd0:	3301      	adds	r3, #1
 8013cd2:	444b      	add	r3, r9
 8013cd4:	106d      	asrs	r5, r5, #1
 8013cd6:	429d      	cmp	r5, r3
 8013cd8:	bf38      	it	cc
 8013cda:	461d      	movcc	r5, r3
 8013cdc:	0553      	lsls	r3, r2, #21
 8013cde:	d531      	bpl.n	8013d44 <__ssputs_r+0xa0>
 8013ce0:	4629      	mov	r1, r5
 8013ce2:	f7ff fe39 	bl	8013958 <_malloc_r>
 8013ce6:	4606      	mov	r6, r0
 8013ce8:	b950      	cbnz	r0, 8013d00 <__ssputs_r+0x5c>
 8013cea:	230c      	movs	r3, #12
 8013cec:	f8ca 3000 	str.w	r3, [sl]
 8013cf0:	89a3      	ldrh	r3, [r4, #12]
 8013cf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013cf6:	81a3      	strh	r3, [r4, #12]
 8013cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8013cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d00:	6921      	ldr	r1, [r4, #16]
 8013d02:	464a      	mov	r2, r9
 8013d04:	f7ff fda6 	bl	8013854 <memcpy>
 8013d08:	89a3      	ldrh	r3, [r4, #12]
 8013d0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d12:	81a3      	strh	r3, [r4, #12]
 8013d14:	6126      	str	r6, [r4, #16]
 8013d16:	6165      	str	r5, [r4, #20]
 8013d18:	444e      	add	r6, r9
 8013d1a:	eba5 0509 	sub.w	r5, r5, r9
 8013d1e:	6026      	str	r6, [r4, #0]
 8013d20:	60a5      	str	r5, [r4, #8]
 8013d22:	463e      	mov	r6, r7
 8013d24:	42be      	cmp	r6, r7
 8013d26:	d900      	bls.n	8013d2a <__ssputs_r+0x86>
 8013d28:	463e      	mov	r6, r7
 8013d2a:	6820      	ldr	r0, [r4, #0]
 8013d2c:	4632      	mov	r2, r6
 8013d2e:	4641      	mov	r1, r8
 8013d30:	f000 faa8 	bl	8014284 <memmove>
 8013d34:	68a3      	ldr	r3, [r4, #8]
 8013d36:	1b9b      	subs	r3, r3, r6
 8013d38:	60a3      	str	r3, [r4, #8]
 8013d3a:	6823      	ldr	r3, [r4, #0]
 8013d3c:	4433      	add	r3, r6
 8013d3e:	6023      	str	r3, [r4, #0]
 8013d40:	2000      	movs	r0, #0
 8013d42:	e7db      	b.n	8013cfc <__ssputs_r+0x58>
 8013d44:	462a      	mov	r2, r5
 8013d46:	f000 fab7 	bl	80142b8 <_realloc_r>
 8013d4a:	4606      	mov	r6, r0
 8013d4c:	2800      	cmp	r0, #0
 8013d4e:	d1e1      	bne.n	8013d14 <__ssputs_r+0x70>
 8013d50:	6921      	ldr	r1, [r4, #16]
 8013d52:	4650      	mov	r0, sl
 8013d54:	f7ff fd94 	bl	8013880 <_free_r>
 8013d58:	e7c7      	b.n	8013cea <__ssputs_r+0x46>
	...

08013d5c <_svfiprintf_r>:
 8013d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d60:	4698      	mov	r8, r3
 8013d62:	898b      	ldrh	r3, [r1, #12]
 8013d64:	061b      	lsls	r3, r3, #24
 8013d66:	b09d      	sub	sp, #116	; 0x74
 8013d68:	4607      	mov	r7, r0
 8013d6a:	460d      	mov	r5, r1
 8013d6c:	4614      	mov	r4, r2
 8013d6e:	d50e      	bpl.n	8013d8e <_svfiprintf_r+0x32>
 8013d70:	690b      	ldr	r3, [r1, #16]
 8013d72:	b963      	cbnz	r3, 8013d8e <_svfiprintf_r+0x32>
 8013d74:	2140      	movs	r1, #64	; 0x40
 8013d76:	f7ff fdef 	bl	8013958 <_malloc_r>
 8013d7a:	6028      	str	r0, [r5, #0]
 8013d7c:	6128      	str	r0, [r5, #16]
 8013d7e:	b920      	cbnz	r0, 8013d8a <_svfiprintf_r+0x2e>
 8013d80:	230c      	movs	r3, #12
 8013d82:	603b      	str	r3, [r7, #0]
 8013d84:	f04f 30ff 	mov.w	r0, #4294967295
 8013d88:	e0d1      	b.n	8013f2e <_svfiprintf_r+0x1d2>
 8013d8a:	2340      	movs	r3, #64	; 0x40
 8013d8c:	616b      	str	r3, [r5, #20]
 8013d8e:	2300      	movs	r3, #0
 8013d90:	9309      	str	r3, [sp, #36]	; 0x24
 8013d92:	2320      	movs	r3, #32
 8013d94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013d98:	f8cd 800c 	str.w	r8, [sp, #12]
 8013d9c:	2330      	movs	r3, #48	; 0x30
 8013d9e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013f48 <_svfiprintf_r+0x1ec>
 8013da2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013da6:	f04f 0901 	mov.w	r9, #1
 8013daa:	4623      	mov	r3, r4
 8013dac:	469a      	mov	sl, r3
 8013dae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013db2:	b10a      	cbz	r2, 8013db8 <_svfiprintf_r+0x5c>
 8013db4:	2a25      	cmp	r2, #37	; 0x25
 8013db6:	d1f9      	bne.n	8013dac <_svfiprintf_r+0x50>
 8013db8:	ebba 0b04 	subs.w	fp, sl, r4
 8013dbc:	d00b      	beq.n	8013dd6 <_svfiprintf_r+0x7a>
 8013dbe:	465b      	mov	r3, fp
 8013dc0:	4622      	mov	r2, r4
 8013dc2:	4629      	mov	r1, r5
 8013dc4:	4638      	mov	r0, r7
 8013dc6:	f7ff ff6d 	bl	8013ca4 <__ssputs_r>
 8013dca:	3001      	adds	r0, #1
 8013dcc:	f000 80aa 	beq.w	8013f24 <_svfiprintf_r+0x1c8>
 8013dd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013dd2:	445a      	add	r2, fp
 8013dd4:	9209      	str	r2, [sp, #36]	; 0x24
 8013dd6:	f89a 3000 	ldrb.w	r3, [sl]
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	f000 80a2 	beq.w	8013f24 <_svfiprintf_r+0x1c8>
 8013de0:	2300      	movs	r3, #0
 8013de2:	f04f 32ff 	mov.w	r2, #4294967295
 8013de6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013dea:	f10a 0a01 	add.w	sl, sl, #1
 8013dee:	9304      	str	r3, [sp, #16]
 8013df0:	9307      	str	r3, [sp, #28]
 8013df2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013df6:	931a      	str	r3, [sp, #104]	; 0x68
 8013df8:	4654      	mov	r4, sl
 8013dfa:	2205      	movs	r2, #5
 8013dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e00:	4851      	ldr	r0, [pc, #324]	; (8013f48 <_svfiprintf_r+0x1ec>)
 8013e02:	f7ec f9f5 	bl	80001f0 <memchr>
 8013e06:	9a04      	ldr	r2, [sp, #16]
 8013e08:	b9d8      	cbnz	r0, 8013e42 <_svfiprintf_r+0xe6>
 8013e0a:	06d0      	lsls	r0, r2, #27
 8013e0c:	bf44      	itt	mi
 8013e0e:	2320      	movmi	r3, #32
 8013e10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013e14:	0711      	lsls	r1, r2, #28
 8013e16:	bf44      	itt	mi
 8013e18:	232b      	movmi	r3, #43	; 0x2b
 8013e1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013e1e:	f89a 3000 	ldrb.w	r3, [sl]
 8013e22:	2b2a      	cmp	r3, #42	; 0x2a
 8013e24:	d015      	beq.n	8013e52 <_svfiprintf_r+0xf6>
 8013e26:	9a07      	ldr	r2, [sp, #28]
 8013e28:	4654      	mov	r4, sl
 8013e2a:	2000      	movs	r0, #0
 8013e2c:	f04f 0c0a 	mov.w	ip, #10
 8013e30:	4621      	mov	r1, r4
 8013e32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013e36:	3b30      	subs	r3, #48	; 0x30
 8013e38:	2b09      	cmp	r3, #9
 8013e3a:	d94e      	bls.n	8013eda <_svfiprintf_r+0x17e>
 8013e3c:	b1b0      	cbz	r0, 8013e6c <_svfiprintf_r+0x110>
 8013e3e:	9207      	str	r2, [sp, #28]
 8013e40:	e014      	b.n	8013e6c <_svfiprintf_r+0x110>
 8013e42:	eba0 0308 	sub.w	r3, r0, r8
 8013e46:	fa09 f303 	lsl.w	r3, r9, r3
 8013e4a:	4313      	orrs	r3, r2
 8013e4c:	9304      	str	r3, [sp, #16]
 8013e4e:	46a2      	mov	sl, r4
 8013e50:	e7d2      	b.n	8013df8 <_svfiprintf_r+0x9c>
 8013e52:	9b03      	ldr	r3, [sp, #12]
 8013e54:	1d19      	adds	r1, r3, #4
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	9103      	str	r1, [sp, #12]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	bfbb      	ittet	lt
 8013e5e:	425b      	neglt	r3, r3
 8013e60:	f042 0202 	orrlt.w	r2, r2, #2
 8013e64:	9307      	strge	r3, [sp, #28]
 8013e66:	9307      	strlt	r3, [sp, #28]
 8013e68:	bfb8      	it	lt
 8013e6a:	9204      	strlt	r2, [sp, #16]
 8013e6c:	7823      	ldrb	r3, [r4, #0]
 8013e6e:	2b2e      	cmp	r3, #46	; 0x2e
 8013e70:	d10c      	bne.n	8013e8c <_svfiprintf_r+0x130>
 8013e72:	7863      	ldrb	r3, [r4, #1]
 8013e74:	2b2a      	cmp	r3, #42	; 0x2a
 8013e76:	d135      	bne.n	8013ee4 <_svfiprintf_r+0x188>
 8013e78:	9b03      	ldr	r3, [sp, #12]
 8013e7a:	1d1a      	adds	r2, r3, #4
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	9203      	str	r2, [sp, #12]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	bfb8      	it	lt
 8013e84:	f04f 33ff 	movlt.w	r3, #4294967295
 8013e88:	3402      	adds	r4, #2
 8013e8a:	9305      	str	r3, [sp, #20]
 8013e8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013f58 <_svfiprintf_r+0x1fc>
 8013e90:	7821      	ldrb	r1, [r4, #0]
 8013e92:	2203      	movs	r2, #3
 8013e94:	4650      	mov	r0, sl
 8013e96:	f7ec f9ab 	bl	80001f0 <memchr>
 8013e9a:	b140      	cbz	r0, 8013eae <_svfiprintf_r+0x152>
 8013e9c:	2340      	movs	r3, #64	; 0x40
 8013e9e:	eba0 000a 	sub.w	r0, r0, sl
 8013ea2:	fa03 f000 	lsl.w	r0, r3, r0
 8013ea6:	9b04      	ldr	r3, [sp, #16]
 8013ea8:	4303      	orrs	r3, r0
 8013eaa:	3401      	adds	r4, #1
 8013eac:	9304      	str	r3, [sp, #16]
 8013eae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013eb2:	4826      	ldr	r0, [pc, #152]	; (8013f4c <_svfiprintf_r+0x1f0>)
 8013eb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013eb8:	2206      	movs	r2, #6
 8013eba:	f7ec f999 	bl	80001f0 <memchr>
 8013ebe:	2800      	cmp	r0, #0
 8013ec0:	d038      	beq.n	8013f34 <_svfiprintf_r+0x1d8>
 8013ec2:	4b23      	ldr	r3, [pc, #140]	; (8013f50 <_svfiprintf_r+0x1f4>)
 8013ec4:	bb1b      	cbnz	r3, 8013f0e <_svfiprintf_r+0x1b2>
 8013ec6:	9b03      	ldr	r3, [sp, #12]
 8013ec8:	3307      	adds	r3, #7
 8013eca:	f023 0307 	bic.w	r3, r3, #7
 8013ece:	3308      	adds	r3, #8
 8013ed0:	9303      	str	r3, [sp, #12]
 8013ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ed4:	4433      	add	r3, r6
 8013ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8013ed8:	e767      	b.n	8013daa <_svfiprintf_r+0x4e>
 8013eda:	fb0c 3202 	mla	r2, ip, r2, r3
 8013ede:	460c      	mov	r4, r1
 8013ee0:	2001      	movs	r0, #1
 8013ee2:	e7a5      	b.n	8013e30 <_svfiprintf_r+0xd4>
 8013ee4:	2300      	movs	r3, #0
 8013ee6:	3401      	adds	r4, #1
 8013ee8:	9305      	str	r3, [sp, #20]
 8013eea:	4619      	mov	r1, r3
 8013eec:	f04f 0c0a 	mov.w	ip, #10
 8013ef0:	4620      	mov	r0, r4
 8013ef2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013ef6:	3a30      	subs	r2, #48	; 0x30
 8013ef8:	2a09      	cmp	r2, #9
 8013efa:	d903      	bls.n	8013f04 <_svfiprintf_r+0x1a8>
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d0c5      	beq.n	8013e8c <_svfiprintf_r+0x130>
 8013f00:	9105      	str	r1, [sp, #20]
 8013f02:	e7c3      	b.n	8013e8c <_svfiprintf_r+0x130>
 8013f04:	fb0c 2101 	mla	r1, ip, r1, r2
 8013f08:	4604      	mov	r4, r0
 8013f0a:	2301      	movs	r3, #1
 8013f0c:	e7f0      	b.n	8013ef0 <_svfiprintf_r+0x194>
 8013f0e:	ab03      	add	r3, sp, #12
 8013f10:	9300      	str	r3, [sp, #0]
 8013f12:	462a      	mov	r2, r5
 8013f14:	4b0f      	ldr	r3, [pc, #60]	; (8013f54 <_svfiprintf_r+0x1f8>)
 8013f16:	a904      	add	r1, sp, #16
 8013f18:	4638      	mov	r0, r7
 8013f1a:	f3af 8000 	nop.w
 8013f1e:	1c42      	adds	r2, r0, #1
 8013f20:	4606      	mov	r6, r0
 8013f22:	d1d6      	bne.n	8013ed2 <_svfiprintf_r+0x176>
 8013f24:	89ab      	ldrh	r3, [r5, #12]
 8013f26:	065b      	lsls	r3, r3, #25
 8013f28:	f53f af2c 	bmi.w	8013d84 <_svfiprintf_r+0x28>
 8013f2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f2e:	b01d      	add	sp, #116	; 0x74
 8013f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f34:	ab03      	add	r3, sp, #12
 8013f36:	9300      	str	r3, [sp, #0]
 8013f38:	462a      	mov	r2, r5
 8013f3a:	4b06      	ldr	r3, [pc, #24]	; (8013f54 <_svfiprintf_r+0x1f8>)
 8013f3c:	a904      	add	r1, sp, #16
 8013f3e:	4638      	mov	r0, r7
 8013f40:	f000 f87a 	bl	8014038 <_printf_i>
 8013f44:	e7eb      	b.n	8013f1e <_svfiprintf_r+0x1c2>
 8013f46:	bf00      	nop
 8013f48:	08014b09 	.word	0x08014b09
 8013f4c:	08014b13 	.word	0x08014b13
 8013f50:	00000000 	.word	0x00000000
 8013f54:	08013ca5 	.word	0x08013ca5
 8013f58:	08014b0f 	.word	0x08014b0f

08013f5c <_printf_common>:
 8013f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f60:	4616      	mov	r6, r2
 8013f62:	4699      	mov	r9, r3
 8013f64:	688a      	ldr	r2, [r1, #8]
 8013f66:	690b      	ldr	r3, [r1, #16]
 8013f68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013f6c:	4293      	cmp	r3, r2
 8013f6e:	bfb8      	it	lt
 8013f70:	4613      	movlt	r3, r2
 8013f72:	6033      	str	r3, [r6, #0]
 8013f74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013f78:	4607      	mov	r7, r0
 8013f7a:	460c      	mov	r4, r1
 8013f7c:	b10a      	cbz	r2, 8013f82 <_printf_common+0x26>
 8013f7e:	3301      	adds	r3, #1
 8013f80:	6033      	str	r3, [r6, #0]
 8013f82:	6823      	ldr	r3, [r4, #0]
 8013f84:	0699      	lsls	r1, r3, #26
 8013f86:	bf42      	ittt	mi
 8013f88:	6833      	ldrmi	r3, [r6, #0]
 8013f8a:	3302      	addmi	r3, #2
 8013f8c:	6033      	strmi	r3, [r6, #0]
 8013f8e:	6825      	ldr	r5, [r4, #0]
 8013f90:	f015 0506 	ands.w	r5, r5, #6
 8013f94:	d106      	bne.n	8013fa4 <_printf_common+0x48>
 8013f96:	f104 0a19 	add.w	sl, r4, #25
 8013f9a:	68e3      	ldr	r3, [r4, #12]
 8013f9c:	6832      	ldr	r2, [r6, #0]
 8013f9e:	1a9b      	subs	r3, r3, r2
 8013fa0:	42ab      	cmp	r3, r5
 8013fa2:	dc26      	bgt.n	8013ff2 <_printf_common+0x96>
 8013fa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013fa8:	1e13      	subs	r3, r2, #0
 8013faa:	6822      	ldr	r2, [r4, #0]
 8013fac:	bf18      	it	ne
 8013fae:	2301      	movne	r3, #1
 8013fb0:	0692      	lsls	r2, r2, #26
 8013fb2:	d42b      	bmi.n	801400c <_printf_common+0xb0>
 8013fb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013fb8:	4649      	mov	r1, r9
 8013fba:	4638      	mov	r0, r7
 8013fbc:	47c0      	blx	r8
 8013fbe:	3001      	adds	r0, #1
 8013fc0:	d01e      	beq.n	8014000 <_printf_common+0xa4>
 8013fc2:	6823      	ldr	r3, [r4, #0]
 8013fc4:	68e5      	ldr	r5, [r4, #12]
 8013fc6:	6832      	ldr	r2, [r6, #0]
 8013fc8:	f003 0306 	and.w	r3, r3, #6
 8013fcc:	2b04      	cmp	r3, #4
 8013fce:	bf08      	it	eq
 8013fd0:	1aad      	subeq	r5, r5, r2
 8013fd2:	68a3      	ldr	r3, [r4, #8]
 8013fd4:	6922      	ldr	r2, [r4, #16]
 8013fd6:	bf0c      	ite	eq
 8013fd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013fdc:	2500      	movne	r5, #0
 8013fde:	4293      	cmp	r3, r2
 8013fe0:	bfc4      	itt	gt
 8013fe2:	1a9b      	subgt	r3, r3, r2
 8013fe4:	18ed      	addgt	r5, r5, r3
 8013fe6:	2600      	movs	r6, #0
 8013fe8:	341a      	adds	r4, #26
 8013fea:	42b5      	cmp	r5, r6
 8013fec:	d11a      	bne.n	8014024 <_printf_common+0xc8>
 8013fee:	2000      	movs	r0, #0
 8013ff0:	e008      	b.n	8014004 <_printf_common+0xa8>
 8013ff2:	2301      	movs	r3, #1
 8013ff4:	4652      	mov	r2, sl
 8013ff6:	4649      	mov	r1, r9
 8013ff8:	4638      	mov	r0, r7
 8013ffa:	47c0      	blx	r8
 8013ffc:	3001      	adds	r0, #1
 8013ffe:	d103      	bne.n	8014008 <_printf_common+0xac>
 8014000:	f04f 30ff 	mov.w	r0, #4294967295
 8014004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014008:	3501      	adds	r5, #1
 801400a:	e7c6      	b.n	8013f9a <_printf_common+0x3e>
 801400c:	18e1      	adds	r1, r4, r3
 801400e:	1c5a      	adds	r2, r3, #1
 8014010:	2030      	movs	r0, #48	; 0x30
 8014012:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014016:	4422      	add	r2, r4
 8014018:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801401c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014020:	3302      	adds	r3, #2
 8014022:	e7c7      	b.n	8013fb4 <_printf_common+0x58>
 8014024:	2301      	movs	r3, #1
 8014026:	4622      	mov	r2, r4
 8014028:	4649      	mov	r1, r9
 801402a:	4638      	mov	r0, r7
 801402c:	47c0      	blx	r8
 801402e:	3001      	adds	r0, #1
 8014030:	d0e6      	beq.n	8014000 <_printf_common+0xa4>
 8014032:	3601      	adds	r6, #1
 8014034:	e7d9      	b.n	8013fea <_printf_common+0x8e>
	...

08014038 <_printf_i>:
 8014038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801403c:	7e0f      	ldrb	r7, [r1, #24]
 801403e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014040:	2f78      	cmp	r7, #120	; 0x78
 8014042:	4691      	mov	r9, r2
 8014044:	4680      	mov	r8, r0
 8014046:	460c      	mov	r4, r1
 8014048:	469a      	mov	sl, r3
 801404a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801404e:	d807      	bhi.n	8014060 <_printf_i+0x28>
 8014050:	2f62      	cmp	r7, #98	; 0x62
 8014052:	d80a      	bhi.n	801406a <_printf_i+0x32>
 8014054:	2f00      	cmp	r7, #0
 8014056:	f000 80d8 	beq.w	801420a <_printf_i+0x1d2>
 801405a:	2f58      	cmp	r7, #88	; 0x58
 801405c:	f000 80a3 	beq.w	80141a6 <_printf_i+0x16e>
 8014060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014064:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014068:	e03a      	b.n	80140e0 <_printf_i+0xa8>
 801406a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801406e:	2b15      	cmp	r3, #21
 8014070:	d8f6      	bhi.n	8014060 <_printf_i+0x28>
 8014072:	a101      	add	r1, pc, #4	; (adr r1, 8014078 <_printf_i+0x40>)
 8014074:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014078:	080140d1 	.word	0x080140d1
 801407c:	080140e5 	.word	0x080140e5
 8014080:	08014061 	.word	0x08014061
 8014084:	08014061 	.word	0x08014061
 8014088:	08014061 	.word	0x08014061
 801408c:	08014061 	.word	0x08014061
 8014090:	080140e5 	.word	0x080140e5
 8014094:	08014061 	.word	0x08014061
 8014098:	08014061 	.word	0x08014061
 801409c:	08014061 	.word	0x08014061
 80140a0:	08014061 	.word	0x08014061
 80140a4:	080141f1 	.word	0x080141f1
 80140a8:	08014115 	.word	0x08014115
 80140ac:	080141d3 	.word	0x080141d3
 80140b0:	08014061 	.word	0x08014061
 80140b4:	08014061 	.word	0x08014061
 80140b8:	08014213 	.word	0x08014213
 80140bc:	08014061 	.word	0x08014061
 80140c0:	08014115 	.word	0x08014115
 80140c4:	08014061 	.word	0x08014061
 80140c8:	08014061 	.word	0x08014061
 80140cc:	080141db 	.word	0x080141db
 80140d0:	682b      	ldr	r3, [r5, #0]
 80140d2:	1d1a      	adds	r2, r3, #4
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	602a      	str	r2, [r5, #0]
 80140d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80140dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80140e0:	2301      	movs	r3, #1
 80140e2:	e0a3      	b.n	801422c <_printf_i+0x1f4>
 80140e4:	6820      	ldr	r0, [r4, #0]
 80140e6:	6829      	ldr	r1, [r5, #0]
 80140e8:	0606      	lsls	r6, r0, #24
 80140ea:	f101 0304 	add.w	r3, r1, #4
 80140ee:	d50a      	bpl.n	8014106 <_printf_i+0xce>
 80140f0:	680e      	ldr	r6, [r1, #0]
 80140f2:	602b      	str	r3, [r5, #0]
 80140f4:	2e00      	cmp	r6, #0
 80140f6:	da03      	bge.n	8014100 <_printf_i+0xc8>
 80140f8:	232d      	movs	r3, #45	; 0x2d
 80140fa:	4276      	negs	r6, r6
 80140fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014100:	485e      	ldr	r0, [pc, #376]	; (801427c <_printf_i+0x244>)
 8014102:	230a      	movs	r3, #10
 8014104:	e019      	b.n	801413a <_printf_i+0x102>
 8014106:	680e      	ldr	r6, [r1, #0]
 8014108:	602b      	str	r3, [r5, #0]
 801410a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801410e:	bf18      	it	ne
 8014110:	b236      	sxthne	r6, r6
 8014112:	e7ef      	b.n	80140f4 <_printf_i+0xbc>
 8014114:	682b      	ldr	r3, [r5, #0]
 8014116:	6820      	ldr	r0, [r4, #0]
 8014118:	1d19      	adds	r1, r3, #4
 801411a:	6029      	str	r1, [r5, #0]
 801411c:	0601      	lsls	r1, r0, #24
 801411e:	d501      	bpl.n	8014124 <_printf_i+0xec>
 8014120:	681e      	ldr	r6, [r3, #0]
 8014122:	e002      	b.n	801412a <_printf_i+0xf2>
 8014124:	0646      	lsls	r6, r0, #25
 8014126:	d5fb      	bpl.n	8014120 <_printf_i+0xe8>
 8014128:	881e      	ldrh	r6, [r3, #0]
 801412a:	4854      	ldr	r0, [pc, #336]	; (801427c <_printf_i+0x244>)
 801412c:	2f6f      	cmp	r7, #111	; 0x6f
 801412e:	bf0c      	ite	eq
 8014130:	2308      	moveq	r3, #8
 8014132:	230a      	movne	r3, #10
 8014134:	2100      	movs	r1, #0
 8014136:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801413a:	6865      	ldr	r5, [r4, #4]
 801413c:	60a5      	str	r5, [r4, #8]
 801413e:	2d00      	cmp	r5, #0
 8014140:	bfa2      	ittt	ge
 8014142:	6821      	ldrge	r1, [r4, #0]
 8014144:	f021 0104 	bicge.w	r1, r1, #4
 8014148:	6021      	strge	r1, [r4, #0]
 801414a:	b90e      	cbnz	r6, 8014150 <_printf_i+0x118>
 801414c:	2d00      	cmp	r5, #0
 801414e:	d04d      	beq.n	80141ec <_printf_i+0x1b4>
 8014150:	4615      	mov	r5, r2
 8014152:	fbb6 f1f3 	udiv	r1, r6, r3
 8014156:	fb03 6711 	mls	r7, r3, r1, r6
 801415a:	5dc7      	ldrb	r7, [r0, r7]
 801415c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014160:	4637      	mov	r7, r6
 8014162:	42bb      	cmp	r3, r7
 8014164:	460e      	mov	r6, r1
 8014166:	d9f4      	bls.n	8014152 <_printf_i+0x11a>
 8014168:	2b08      	cmp	r3, #8
 801416a:	d10b      	bne.n	8014184 <_printf_i+0x14c>
 801416c:	6823      	ldr	r3, [r4, #0]
 801416e:	07de      	lsls	r6, r3, #31
 8014170:	d508      	bpl.n	8014184 <_printf_i+0x14c>
 8014172:	6923      	ldr	r3, [r4, #16]
 8014174:	6861      	ldr	r1, [r4, #4]
 8014176:	4299      	cmp	r1, r3
 8014178:	bfde      	ittt	le
 801417a:	2330      	movle	r3, #48	; 0x30
 801417c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014180:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014184:	1b52      	subs	r2, r2, r5
 8014186:	6122      	str	r2, [r4, #16]
 8014188:	f8cd a000 	str.w	sl, [sp]
 801418c:	464b      	mov	r3, r9
 801418e:	aa03      	add	r2, sp, #12
 8014190:	4621      	mov	r1, r4
 8014192:	4640      	mov	r0, r8
 8014194:	f7ff fee2 	bl	8013f5c <_printf_common>
 8014198:	3001      	adds	r0, #1
 801419a:	d14c      	bne.n	8014236 <_printf_i+0x1fe>
 801419c:	f04f 30ff 	mov.w	r0, #4294967295
 80141a0:	b004      	add	sp, #16
 80141a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141a6:	4835      	ldr	r0, [pc, #212]	; (801427c <_printf_i+0x244>)
 80141a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80141ac:	6829      	ldr	r1, [r5, #0]
 80141ae:	6823      	ldr	r3, [r4, #0]
 80141b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80141b4:	6029      	str	r1, [r5, #0]
 80141b6:	061d      	lsls	r5, r3, #24
 80141b8:	d514      	bpl.n	80141e4 <_printf_i+0x1ac>
 80141ba:	07df      	lsls	r7, r3, #31
 80141bc:	bf44      	itt	mi
 80141be:	f043 0320 	orrmi.w	r3, r3, #32
 80141c2:	6023      	strmi	r3, [r4, #0]
 80141c4:	b91e      	cbnz	r6, 80141ce <_printf_i+0x196>
 80141c6:	6823      	ldr	r3, [r4, #0]
 80141c8:	f023 0320 	bic.w	r3, r3, #32
 80141cc:	6023      	str	r3, [r4, #0]
 80141ce:	2310      	movs	r3, #16
 80141d0:	e7b0      	b.n	8014134 <_printf_i+0xfc>
 80141d2:	6823      	ldr	r3, [r4, #0]
 80141d4:	f043 0320 	orr.w	r3, r3, #32
 80141d8:	6023      	str	r3, [r4, #0]
 80141da:	2378      	movs	r3, #120	; 0x78
 80141dc:	4828      	ldr	r0, [pc, #160]	; (8014280 <_printf_i+0x248>)
 80141de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80141e2:	e7e3      	b.n	80141ac <_printf_i+0x174>
 80141e4:	0659      	lsls	r1, r3, #25
 80141e6:	bf48      	it	mi
 80141e8:	b2b6      	uxthmi	r6, r6
 80141ea:	e7e6      	b.n	80141ba <_printf_i+0x182>
 80141ec:	4615      	mov	r5, r2
 80141ee:	e7bb      	b.n	8014168 <_printf_i+0x130>
 80141f0:	682b      	ldr	r3, [r5, #0]
 80141f2:	6826      	ldr	r6, [r4, #0]
 80141f4:	6961      	ldr	r1, [r4, #20]
 80141f6:	1d18      	adds	r0, r3, #4
 80141f8:	6028      	str	r0, [r5, #0]
 80141fa:	0635      	lsls	r5, r6, #24
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	d501      	bpl.n	8014204 <_printf_i+0x1cc>
 8014200:	6019      	str	r1, [r3, #0]
 8014202:	e002      	b.n	801420a <_printf_i+0x1d2>
 8014204:	0670      	lsls	r0, r6, #25
 8014206:	d5fb      	bpl.n	8014200 <_printf_i+0x1c8>
 8014208:	8019      	strh	r1, [r3, #0]
 801420a:	2300      	movs	r3, #0
 801420c:	6123      	str	r3, [r4, #16]
 801420e:	4615      	mov	r5, r2
 8014210:	e7ba      	b.n	8014188 <_printf_i+0x150>
 8014212:	682b      	ldr	r3, [r5, #0]
 8014214:	1d1a      	adds	r2, r3, #4
 8014216:	602a      	str	r2, [r5, #0]
 8014218:	681d      	ldr	r5, [r3, #0]
 801421a:	6862      	ldr	r2, [r4, #4]
 801421c:	2100      	movs	r1, #0
 801421e:	4628      	mov	r0, r5
 8014220:	f7eb ffe6 	bl	80001f0 <memchr>
 8014224:	b108      	cbz	r0, 801422a <_printf_i+0x1f2>
 8014226:	1b40      	subs	r0, r0, r5
 8014228:	6060      	str	r0, [r4, #4]
 801422a:	6863      	ldr	r3, [r4, #4]
 801422c:	6123      	str	r3, [r4, #16]
 801422e:	2300      	movs	r3, #0
 8014230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014234:	e7a8      	b.n	8014188 <_printf_i+0x150>
 8014236:	6923      	ldr	r3, [r4, #16]
 8014238:	462a      	mov	r2, r5
 801423a:	4649      	mov	r1, r9
 801423c:	4640      	mov	r0, r8
 801423e:	47d0      	blx	sl
 8014240:	3001      	adds	r0, #1
 8014242:	d0ab      	beq.n	801419c <_printf_i+0x164>
 8014244:	6823      	ldr	r3, [r4, #0]
 8014246:	079b      	lsls	r3, r3, #30
 8014248:	d413      	bmi.n	8014272 <_printf_i+0x23a>
 801424a:	68e0      	ldr	r0, [r4, #12]
 801424c:	9b03      	ldr	r3, [sp, #12]
 801424e:	4298      	cmp	r0, r3
 8014250:	bfb8      	it	lt
 8014252:	4618      	movlt	r0, r3
 8014254:	e7a4      	b.n	80141a0 <_printf_i+0x168>
 8014256:	2301      	movs	r3, #1
 8014258:	4632      	mov	r2, r6
 801425a:	4649      	mov	r1, r9
 801425c:	4640      	mov	r0, r8
 801425e:	47d0      	blx	sl
 8014260:	3001      	adds	r0, #1
 8014262:	d09b      	beq.n	801419c <_printf_i+0x164>
 8014264:	3501      	adds	r5, #1
 8014266:	68e3      	ldr	r3, [r4, #12]
 8014268:	9903      	ldr	r1, [sp, #12]
 801426a:	1a5b      	subs	r3, r3, r1
 801426c:	42ab      	cmp	r3, r5
 801426e:	dcf2      	bgt.n	8014256 <_printf_i+0x21e>
 8014270:	e7eb      	b.n	801424a <_printf_i+0x212>
 8014272:	2500      	movs	r5, #0
 8014274:	f104 0619 	add.w	r6, r4, #25
 8014278:	e7f5      	b.n	8014266 <_printf_i+0x22e>
 801427a:	bf00      	nop
 801427c:	08014b1a 	.word	0x08014b1a
 8014280:	08014b2b 	.word	0x08014b2b

08014284 <memmove>:
 8014284:	4288      	cmp	r0, r1
 8014286:	b510      	push	{r4, lr}
 8014288:	eb01 0402 	add.w	r4, r1, r2
 801428c:	d902      	bls.n	8014294 <memmove+0x10>
 801428e:	4284      	cmp	r4, r0
 8014290:	4623      	mov	r3, r4
 8014292:	d807      	bhi.n	80142a4 <memmove+0x20>
 8014294:	1e43      	subs	r3, r0, #1
 8014296:	42a1      	cmp	r1, r4
 8014298:	d008      	beq.n	80142ac <memmove+0x28>
 801429a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801429e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80142a2:	e7f8      	b.n	8014296 <memmove+0x12>
 80142a4:	4402      	add	r2, r0
 80142a6:	4601      	mov	r1, r0
 80142a8:	428a      	cmp	r2, r1
 80142aa:	d100      	bne.n	80142ae <memmove+0x2a>
 80142ac:	bd10      	pop	{r4, pc}
 80142ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80142b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80142b6:	e7f7      	b.n	80142a8 <memmove+0x24>

080142b8 <_realloc_r>:
 80142b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142bc:	4680      	mov	r8, r0
 80142be:	4614      	mov	r4, r2
 80142c0:	460e      	mov	r6, r1
 80142c2:	b921      	cbnz	r1, 80142ce <_realloc_r+0x16>
 80142c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80142c8:	4611      	mov	r1, r2
 80142ca:	f7ff bb45 	b.w	8013958 <_malloc_r>
 80142ce:	b92a      	cbnz	r2, 80142dc <_realloc_r+0x24>
 80142d0:	f7ff fad6 	bl	8013880 <_free_r>
 80142d4:	4625      	mov	r5, r4
 80142d6:	4628      	mov	r0, r5
 80142d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142dc:	f000 f81b 	bl	8014316 <_malloc_usable_size_r>
 80142e0:	4284      	cmp	r4, r0
 80142e2:	4607      	mov	r7, r0
 80142e4:	d802      	bhi.n	80142ec <_realloc_r+0x34>
 80142e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80142ea:	d812      	bhi.n	8014312 <_realloc_r+0x5a>
 80142ec:	4621      	mov	r1, r4
 80142ee:	4640      	mov	r0, r8
 80142f0:	f7ff fb32 	bl	8013958 <_malloc_r>
 80142f4:	4605      	mov	r5, r0
 80142f6:	2800      	cmp	r0, #0
 80142f8:	d0ed      	beq.n	80142d6 <_realloc_r+0x1e>
 80142fa:	42bc      	cmp	r4, r7
 80142fc:	4622      	mov	r2, r4
 80142fe:	4631      	mov	r1, r6
 8014300:	bf28      	it	cs
 8014302:	463a      	movcs	r2, r7
 8014304:	f7ff faa6 	bl	8013854 <memcpy>
 8014308:	4631      	mov	r1, r6
 801430a:	4640      	mov	r0, r8
 801430c:	f7ff fab8 	bl	8013880 <_free_r>
 8014310:	e7e1      	b.n	80142d6 <_realloc_r+0x1e>
 8014312:	4635      	mov	r5, r6
 8014314:	e7df      	b.n	80142d6 <_realloc_r+0x1e>

08014316 <_malloc_usable_size_r>:
 8014316:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801431a:	1f18      	subs	r0, r3, #4
 801431c:	2b00      	cmp	r3, #0
 801431e:	bfbc      	itt	lt
 8014320:	580b      	ldrlt	r3, [r1, r0]
 8014322:	18c0      	addlt	r0, r0, r3
 8014324:	4770      	bx	lr
	...

08014328 <_init>:
 8014328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801432a:	bf00      	nop
 801432c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801432e:	bc08      	pop	{r3}
 8014330:	469e      	mov	lr, r3
 8014332:	4770      	bx	lr

08014334 <_fini>:
 8014334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014336:	bf00      	nop
 8014338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801433a:	bc08      	pop	{r3}
 801433c:	469e      	mov	lr, r3
 801433e:	4770      	bx	lr
